# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# Akio Ogasahara <libratechwriter@gmail.com>, 2024
# Asai Takuya <takuya.waseda.1119@gmail.com>, 2016
# Eiichi Sugiyama <barcarunrunbiscabarca@gmail.com>, 2018
# Hiroyuki Imai <hiroyuki.wx@gmail.com>, 2020
# Ikemoto Hideki <ikemo333@gmail.com>, 2021
# Kashun YOSHIDA, 2019
# Kashun YOSHIDA, 2018
# Kinyonez Jackson <masashima21st@gmail.com>, 2017
# Akio Ogasahara <libratechwriter@gmail.com>, 2024
# IWAI, Masaharu <iwaim.sub@gmail.com>, 2016
# sutefu7, 2019-2020
# matsuand, 2018
# Tatsuya Matoba <mtb.toya0403@gmail.com>, 2018
# mnamihdk, 2017
# Akio Ogasahara <libratechwriter@gmail.com>, 2024
# Pawllo2 <pawllothesecond@gmail.com>, 2017-2018
# Ryosuke Sakurai, 2019
# Ryouta Mizuhara <ham_katsu@outlook.jp>, 2016
# Shinichi Katsumata <shinichi.katsumata@gmail.com>, 2019
# Shinya Okano <tokibito@gmail.com>, 2023
# Shirai <taole33@hotmail.com>, 2020
# Shuuji TAKAHASHI (shuuji3) <shuuji3@gmail.com>, 2016-2017,2019,2023
# Sky, 2023
# ssh22, 2023
# Suguru Yamamoto <sgryjp@gmail.com>, 2017
# Suzuki Takahiro <bur8787@gmail.com>, 2016
# TANIGUCHI Taichi, 2023
# Shuuji TAKAHASHI (shuuji3) <shuuji3@gmail.com>, 2016,2018-2019,2023-2024
# Takashi Sugawara <aimaimokomoko@gmail.com>, 2017
# Takayuki Hirayama <th.windbell+transifex@gmail.com>, 2020
# Takeshi Kondo <take.she12@gmail.com>, 2019
# Takuya Arita <takuya.arita@gmail.com>, 2015
# Takuya N <takninnovationresearch@gmail.com>, 2019
# Tetsuya Yamada <yamada.tetsuya258@gmail.com>, 2018
# Takuya N <takninnovationresearch@gmail.com>, 2018
# Kuehar <green95251@gmail.com>, 2020
# 04596d840f6f15cb1627ed772c3b0c5d, 2019
# Yoshihiro Furudate <aheadlink.changat@gmail.com>, 2016
# Yuuki Ebihara <yuuki.ebihara813@gmail.com>, 2019
# Pawllo2 <pawllothesecond@gmail.com>, 2017
# yz4230 <yuzupon1480@gmail.com>, 2021
# 堀田 圭佑 <keisuke.h.611@gmail.com>, 2018
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-08 00:58-0600\n"
"PO-Revision-Date: 2013-04-02 19:58+0000\n"
"Last-Translator: Akio Ogasahara <libratechwriter@gmail.com>, 2024\n"
"Language-Team: Japanese (http://app.transifex.com/django/django-docs/"
"language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "How to authenticate using ``REMOTE_USER``"
msgstr "``REMOTE_USER`` で認証する"

msgid ""
"This document describes how to make use of external authentication sources "
"(where the web server sets the ``REMOTE_USER`` environment variable) in your "
"Django applications.  This type of authentication solution is typically seen "
"on intranet sites, with single sign-on solutions such as IIS and Integrated "
"Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, `Cosign`_, "
"`WebAuth`_, `mod_auth_sspi`_, etc."
msgstr ""
"このドキュメントでは、Django アプリケーション内での外部の認証ソースの使用方法"
"について説明します。たとえば、Web サーバが ``REMOTE_USER`` を設定するような場"
"合です。このような認証方法は、単一認証 (single sign-on) システムを利用するイ"
"ントラネットサイトの多くで典型的に見られるものです。単一認証システムの例とし"
"ては、IIS と統合 Windows 認証の組み合わせや、Apache と `mod_authnz_ldap`_, "
"`CAS`_, `Cosign`_, `WebAuth`_, `mod_auth_sspi`_ などの組み合わせがあります。"

msgid ""
"When the web server takes care of authentication it typically sets the "
"``REMOTE_USER`` environment variable for use in the underlying application.  "
"In Django, ``REMOTE_USER`` is made available in the :attr:`request.META "
"<django.http.HttpRequest.META>` attribute.  Django can be configured to make "
"use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` or "
"``PersistentRemoteUserMiddleware``, and :class:`~django.contrib.auth."
"backends.RemoteUserBackend` classes found in :mod:`django.contrib.auth`."
msgstr ""
"Web サーバーが認証を行う際には、一般に下層のアプリケーションで使用される "
"``REMOTE_USER`` 環境変数を設定します。Django では、:attr:`request.META "
"<django.http.HttpRequest.META>` 属性から ``REMOTE_USER`` が利用できます。"
"Django は ``RemoteUserMiddleware`` または "
"``PersistentRemoteUserMiddleware`` 、そして :mod:`django.contrib.auth` に含ま"
"れる :class:`django.contrib.auth.backends` を使うことで ``REMOTE_USER`` の値"
"を利用できるように設定できます。"

msgid "Configuration"
msgstr "設定"

msgid ""
"First, you must add the :class:`django.contrib.auth.middleware."
"RemoteUserMiddleware` to the :setting:`MIDDLEWARE` setting **after** the :"
"class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr ""
"最初に次のように :setting:`MIDDLEWARE` 設定に :class:`django.contrib.auth."
"middleware.RemoteUserMiddleware` を加える必要があります。これは :class:"
"`django.contrib.auth.middleware.AuthenticationMiddleware` の **後に** 追加し"
"てください::"

msgid ""
"Next, you must replace the :class:`~django.contrib.auth.backends."
"ModelBackend` with :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"in the :setting:`AUTHENTICATION_BACKENDS` setting::"
msgstr ""
"続いて、:setting:`AUTHENTICATION_BACKENDS` 設定の :class:`~django.contrib."
"auth.backends.ModelBackend` を :class:`~django.contrib.auth.backends."
"RemoteUserBackend` に変更します::"

msgid ""
"With this setup, ``RemoteUserMiddleware`` will detect the username in "
"``request.META['REMOTE_USER']`` and will authenticate and auto-login that "
"user using the :class:`~django.contrib.auth.backends.RemoteUserBackend`."
msgstr ""
"この設定を行うと ``RemoteUserMiddleware`` は ``request.META['REMOTE_USER']`` "
"内の username を検索し、 :class:`~django.contrib.auth.backends."
"RemoteUserBackend` を使用したユーザーの認証と自動ログインを行います。"

msgid ""
"Be aware that this particular setup disables authentication with the default "
"``ModelBackend``. This means that if the ``REMOTE_USER`` value is not set "
"then the user is unable to log in, even using Django's admin interface. "
"Adding ``'django.contrib.auth.backends.ModelBackend'`` to the "
"``AUTHENTICATION_BACKENDS`` list will use ``ModelBackend`` as a fallback if "
"``REMOTE_USER`` is absent, which will solve these issues."
msgstr ""
"この特定の設定は、デフォルトの ``ModelBackend`` による認証を無効にすることに"
"注意してください。つまり、 ``REMOTE_USER`` の値が設定されていなければ、"
"Django の admin interface を使ったとしても、ユーザーはログインすることができ"
"ないということです。 ``REMOTE_USER`` が存在しない場合のフォールバックとして "
"``AUTHENTICATION_BACKENDS`` のリストに ``'django.contrib.auth.backends."
"ModelBackend'``  を追加しておけば、この問題は解決できます。"

msgid ""
"Django's user management, such as the views in ``contrib.admin`` and the :"
"djadmin:`createsuperuser` management command, doesn't integrate with remote "
"users. These interfaces work with users stored in the database regardless of "
"``AUTHENTICATION_BACKENDS``."
msgstr ""
"``contrib.admin`` 画面や :djadmin:`createsuperuser` 管理コマンドなどの、"
"Django のユーザ管理機能はリモートユーザを統合管理しません。これらのインタ"
"フェースは ``AUTHENTICATION_BACKENDS`` の設定にかかわらず、データベース中の"
"ユーザだけを管理します。"

msgid ""
"Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will "
"still have all of the same permissions checking that is implemented in "
"``ModelBackend``."
msgstr ""
"``RemoteUserBackend`` を ``ModelBackend`` から継承した後も、``ModelBackend`` "
"によってチェックが行われ、すべてのパーミッションが維持されます。"

msgid ""
"Users with :attr:`is_active=False <django.contrib.auth.models.User."
"is_active>` won't be allowed to authenticate. Use :class:`~django.contrib."
"auth.backends.AllowAllUsersRemoteUserBackend` if you want to allow them to."
msgstr ""
":attr:`is_active=False <django.contrib.auth.models.User.is_active>` 属性を持"
"つユーザは認証が許可されません。許可したい場合は、:class:`~django.contrib."
"auth.backends.AllowAllUsersRemoteUserBackend` を使用してください。"

msgid ""
"If your authentication mechanism uses a custom HTTP header and not "
"``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the "
"``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr ""
"認証メカニズムが ``REMOTE_USER`` 以外のカスタム HTTP ヘッダを使っている場合に"
"は、以下の例のように ``RemoteUserMiddleware`` をサブクラス化して、クラスの "
"``header`` 属性を適切な ``request.META`` のキー名に設定してください::"

msgid ""
"Be very careful if using a ``RemoteUserMiddleware`` subclass with a custom "
"HTTP header. You must be sure that your front-end web server always sets or "
"strips that header based on the appropriate authentication checks, never "
"permitting an end-user to submit a fake (or \"spoofed\") header value. Since "
"the HTTP headers ``X-Auth-User`` and ``X-Auth_User`` (for example) both "
"normalize to the ``HTTP_X_AUTH_USER`` key in ``request.META``, you must also "
"check that your web server doesn't allow a spoofed header using underscores "
"in place of dashes."
msgstr ""
"もし ``RemoteUserMiddleware`` のサブクラスをカスタム HTTP ヘッダーとともに使"
"う場合は、十分に注意してください。フロントエンドのウェブサーバは、適切な認証"
"のチェックに基づいて、必ずヘッダーを設定または削除するようにしなければなりま"
"ません。偽の (もしくは「スプーフィングされた」) ヘッダー値を送ってくるエンド"
"ユーザーを決して許可してはいけません。たとえば、HTTP ヘッダの ``X-Auth-"
"User`` と ``X-Auth_User`` は、両方とも ``request.META`` の "
"``HTTP_X_AUTH_USER`` キーに正規化されてしまうため、ウェブサーバーがダッシュの"
"代わりにアンダースコアを使用してスプーフィングされたヘッダーを許容しないこと"
"を必ず確認しなければなりません。"

msgid ""
"This warning doesn't apply to ``RemoteUserMiddleware`` in its default "
"configuration with ``header = 'REMOTE_USER'``, since a key that doesn't "
"start with ``HTTP_`` in ``request.META`` can only be set by your WSGI "
"server, not directly from an HTTP request header."
msgstr ""
"この警告は、デフォルト設定の ``header = 'REMOTE_USER'`` になっている "
"``RemoteUserMiddleware`` には適用されません。なぜなら、``request.META`` 内の "
"``HTTP_`` で始まらないキーは WSGI サーバだけが設定でき、、HTTP リクエストヘッ"
"ダーから直接設定されるわけではないためです。"

msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"and override one or more of its attributes and methods."
msgstr ""
"認証メカニズムをより細かく制御したい場合は、 :class:`~django.contrib.auth."
"backends.RemoteUserBackend` を継承する独自の認証バックエンドを作成し、属性や"
"メソッドをいくつかオーバライドしてください。"

msgid "Using ``REMOTE_USER`` on login pages only"
msgstr "ログインページでのみ ``REMOTE_USER`` を使用する"

msgid ""
"The ``RemoteUserMiddleware`` authentication middleware assumes that the HTTP "
"request header ``REMOTE_USER`` is present with all authenticated requests. "
"That might be expected and practical when Basic HTTP Auth with ``htpasswd`` "
"or similar mechanisms are used, but with Negotiate (GSSAPI/Kerberos) or "
"other resource intensive authentication methods, the authentication in the "
"front-end HTTP server is usually only set up for one or a few login URLs, "
"and after successful authentication, the application is supposed to maintain "
"the authenticated session itself."
msgstr ""
"``RemoteUserMiddleware`` 認証ミドルウェアは、 HTTP リクエストヘッダーの "
"``REMOTE_USER`` が認証されたリクエストに存在していることを想定しています。こ"
"れは、``htpasswd`` や同様のメカニズムを備えた Basic 認証であれば妥当で実用的"
"かもしれませんが、Negotiate (GSSAPI/Kerberos) や他のリソース中心的な認証メ"
"ソッドでは、フロントエンド HTTP サーバ内の認証は、通常、1つまたは少数のログイ"
"ン URL しか設置せず、認証の成功後にもアプリケーションが認証されたセッション自"
"体を維持することが想定されています。"

msgid ""
":class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` "
"provides support for this use case. It will maintain the authenticated "
"session until explicit logout by the user. The class can be used as a drop-"
"in replacement of :class:`~django.contrib.auth.middleware."
"RemoteUserMiddleware` in the documentation above."
msgstr ""
":class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` は、"
"このようなユースケースへのサポートを提供します。このミドルウェアは、ユーザー"
"が明示的にログアウトするまで、認証されたセッションを維持しようとします。この"
"クラスは、上述のドキュメント内の :class:`~django.contrib.auth.middleware."
"RemoteUserMiddleware` とドロップインで交換できます。"

msgid "How to use Django's CSRF protection"
msgstr "Django の CSRF 保護を利用する"

msgid "To take advantage of CSRF protection in your views, follow these steps:"
msgstr "CSRF 対策をあなたのビューで有効にするには、以下の手順に従ってください:"

msgid ""
"The CSRF middleware is activated by default in the :setting:`MIDDLEWARE` "
"setting. If you override that setting, remember that ``'django.middleware."
"csrf.CsrfViewMiddleware'`` should come before any view middleware that "
"assume that CSRF attacks have been dealt with."
msgstr ""
"CSRF ミドルウェアは、デフォルトで :setting:`MIDDLEWARE` 設定で有効になってい"
"ます。もし設定をオーバーライドするときは、``'django.middleware.csrf."
"CsrfViewMiddleware'`` が、 CSRF 攻撃への対策がされていることを前提とした他の"
"全てのビュー・ミドルウェアの前に来るようにしてください。"

msgid ""
"If you disabled it, which is not recommended, you can use :func:`~django."
"views.decorators.csrf.csrf_protect` on particular views you want to protect "
"(see below)."
msgstr ""
"(推奨されませんが) もし対策を無効にする場合は、:func:`~django.views."
"decorators.csrf.csrf_protect` を使って特定のビューを保護することができます "
"(下記を参照してください)。"

msgid ""
"In any template that uses a POST form, use the :ttag:`csrf_token` tag inside "
"the ``<form>`` element if the form is for an internal URL, e.g.:"
msgstr ""
"POST フォームを使う全てのテンプレートで、POST が内部 URL に使われる場合は、"
"``<form>`` 要素の内部で :ttag:`csrf_token` タグを使用してください。"

msgid ""
"This should not be done for POST forms that target external URLs, since that "
"would cause the CSRF token to be leaked, leading to a vulnerability."
msgstr ""
"この方法は、外部の URL を対象にする POST フォームで使ってはいけません。CSRF "
"トークンが外部に漏れ、脆弱性の原因となります。"

msgid ""
"In the corresponding view functions, ensure that :class:`~django.template."
"RequestContext` is used to render the response so that ``{% csrf_token %}`` "
"will work properly. If you're using the :func:`~django.shortcuts.render` "
"function, generic views, or contrib apps, you are covered already since "
"these all use ``RequestContext``."
msgstr ""
"対応するビュー関数では、``{% csrf_token %}`` が正しく機能するように、レスポン"
"スをレンダリングする際に :class:`~django.template.RequestContext` が使用され"
"ていることを確認してください。 :func:`~django.shortcuts.render` 関数、ジェネ"
"リックビュー、または contrib アプリを使用している場合は、これらはすべて "
"``RequestContext`` を使用しているため、すでに対応しています。"

msgid "Using CSRF protection with AJAX"
msgstr "AJAXでCSRF保護を利用する"

msgid ""
"While the above method can be used for AJAX POST requests, it has some "
"inconveniences: you have to remember to pass the CSRF token in as POST data "
"with every POST request. For this reason, there is an alternative method: on "
"each XMLHttpRequest, set a custom ``X-CSRFToken`` header (as specified by "
"the :setting:`CSRF_HEADER_NAME` setting) to the value of the CSRF token. "
"This is often easier because many JavaScript frameworks provide hooks that "
"allow headers to be set on every request."
msgstr ""
"上記の方法は AJAX の POST でも利用可能ですが、多少不便です。すべての POST リ"
"クエストで、CSRF トークンを POST するデータに忘れずに含めなければなりません。"
"そのため、別の方法が用意されており、各 XMLHttpRequest に対して、``X-"
"CSRFToken`` という独自ヘッダーに CSRF トークンの値を設定することができます (:"
"setting:`CSRF_HEADER_NAME` 設定でヘッダー名が指定できます)。多くの "
"JavaScript のフレームワークはすべてのリクエストについて、指定したヘッダーを設"
"定するようなフック機能を提供しているので、普通は簡単に設定できます。"

msgid ""
"First, you must get the CSRF token. How to do that depends on whether or not "
"the :setting:`CSRF_USE_SESSIONS` and :setting:`CSRF_COOKIE_HTTPONLY` "
"settings are enabled."
msgstr ""
"まず、CSRFトークンを取得する必要があります。これは、:setting:"
"`CSRF_USE_SESSIONS` と :setting:`CSRF_COOKIE_HTTPONLY` の設定が有効になってい"
"るかどうかによって異なります。"

msgid ""
"Acquiring the token if :setting:`CSRF_USE_SESSIONS` and :setting:"
"`CSRF_COOKIE_HTTPONLY` are ``False``"
msgstr ""
":setting:`CSRF_USE_SESSIONS` と :setting:`CSRF_COOKIE_HTTPONLY` が ``False`` "
"に設定されている場合にトークンを取得する"

msgid ""
"The recommended source for the token is the ``csrftoken`` cookie, which will "
"be set if you've enabled CSRF protection for your views as outlined above."
msgstr ""
"トークン取得のソースとして推奨されるのは ``csrftoken`` クッキーです。これは、"
"上記で概説したようにビューに対する CSRF 保護を有効化した場合にセットされま"
"す。"

msgid ""
"The CSRF token cookie is named ``csrftoken`` by default, but you can control "
"the cookie name via the :setting:`CSRF_COOKIE_NAME` setting."
msgstr ""
"デフォルトでは、CSRF トークンの cookie は ``csrftoken`` という名前ですが、:"
"setting:`CSRF_COOKIE_NAME` の設定を通じて変更することができます。"

msgid "You can acquire the token like this:"
msgstr "以下のようにしてトークンを取得できます:"

msgid ""
"The above code could be simplified by using the `JavaScript Cookie library "
"<https://github.com/js-cookie/js-cookie/>`_ to replace ``getCookie``:"
msgstr ""
"上記のコードは `JavaScript Cookie library <https://github.com/js-cookie/js-"
"cookie/>`_ を使って ``getCookie`` を置き換えればシンプルにできます:"

msgid ""
"The CSRF token is also present in the DOM in a masked form, but only if "
"explicitly included using :ttag:`csrf_token` in a template. The cookie "
"contains the canonical, unmasked token. The :class:`~django.middleware.csrf."
"CsrfViewMiddleware` will accept either. However, in order to protect against "
"`BREACH`_ attacks, it's recommended to use a masked token."
msgstr ""
"CSRF トークンはマスクされた形で DOM にも存在しますが、これはテンプレート内"
"で :ttag:`csrf_token` を使って明示的にインクルードされたときだけです。クッ"
"キーはマスクされていない正規のトークンを含んでいます。 :class:`~django."
"middleware.csrf.CsrfViewMiddleware` はどちらも受け付けます。しかし、 "
"`BREACH`_ 攻撃から守るためには、マスクされたトークンを使うことを推奨します。"

msgid ""
"If your view is not rendering a template containing the :ttag:`csrf_token` "
"template tag, Django might not set the CSRF token cookie. This is common in "
"cases where forms are dynamically added to the page. To address this case, "
"Django provides a view decorator which forces setting of the cookie: :func:"
"`~django.views.decorators.csrf.ensure_csrf_cookie`."
msgstr ""
"ビューが :ttag:`csrf_token` テンプレートタグを含むテンプレートをレンダリング"
"していない場合、Django は CSRF トークンクッキーをセットしない可能性がありま"
"す。フォームがページに動的に追加される場合がその典型です。このケースに対応す"
"るため、Django はクッキーを強制的にセットするビューのデコレータを提供していま"
"す: :func:`~django.views.decorators.csrf.ensure_csrf_cookie`。"

msgid ""
"Acquiring the token if :setting:`CSRF_USE_SESSIONS` or :setting:"
"`CSRF_COOKIE_HTTPONLY` is ``True``"
msgstr ""
":setting:`CSRF_USE_SESSIONS` または :setting:`CSRF_COOKIE_HTTPONLY` が "
"``True`` の時トークンを取得する"

msgid ""
"If you activate :setting:`CSRF_USE_SESSIONS` or :setting:"
"`CSRF_COOKIE_HTTPONLY`, you must include the CSRF token in your HTML and "
"read the token from the DOM with JavaScript:"
msgstr ""
":setting:`CSRF_USE_SESSIONS` または :setting:`CSRF_COOKIE_HTTPONLY` を有効に"
"した場合、HTML に CSRF トークンを含め、JavaScript で DOM からトークンを読み取"
"る必要があります:"

msgid "Setting the token on the AJAX request"
msgstr "AJAX 通信でトークンを設定する"

msgid ""
"Finally, you'll need to set the header on your AJAX request. Using the "
"`fetch()`_ API:"
msgstr ""
"最後に、AJAXリクエストにヘッダーを追加する必要があります。 `fetch()`_ APIを使"
"用してください:"

msgid "Using CSRF protection in Jinja2 templates"
msgstr "Jinja2テンプレートでCSRF保護を利用する"

msgid ""
"Django's :class:`~django.template.backends.jinja2.Jinja2` template backend "
"adds ``{{ csrf_input }}`` to the context of all templates which is "
"equivalent to ``{% csrf_token %}`` in the Django template language. For "
"example:"
msgstr ""
"Django の :class:`~django.template.backends.jinja2.Jinja2` テンプレートバック"
"エンドは、すべてのテンプレートのコンテキストに ``{{ csrf_input }}`` を追加し"
"ます。これは、Django テンプレート言語内の ``{% csrf_token %}`` と同じ意味で"
"す。例えば:"

msgid "Using the decorator method"
msgstr "デコレータメソッドの利用"

msgid ""
"Rather than adding ``CsrfViewMiddleware`` as a blanket protection, you can "
"use the :func:`~django.views.decorators.csrf.csrf_protect` decorator, which "
"has exactly the same functionality, on particular views that need the "
"protection. It must be used **both** on views that insert the CSRF token in "
"the output, and on those that accept the POST form data. (These are often "
"the same view function, but not always)."
msgstr ""
"全体を保護するために ``CsrfViewMiddleware`` を追加する代わりに、保護を必要と"
"する特定のビューにおいて、まったく同じ機能を持つ :func:`~django.views."
"decorators.csrf.csrf_protect` デコレータを使えます。アウトプット内に CSRF "
"トークンを挿入するビューと、POST フォームデータを受け入れるビューの両方で使用"
"する必要があります (多くの場合同じビュー関数ですが、そうでない場合もありま"
"す)。"

msgid ""
"Use of the decorator by itself is **not recommended**, since if you forget "
"to use it, you will have a security hole. The 'belt and braces' strategy of "
"using both is fine, and will incur minimal overhead."
msgstr ""
"デコレータ自体で使うことは **非推奨** です。もし使い忘れた場合、セキュリティ"
"ホールを抱えることになるからです。二重対策として両方を使うのは構いませんが、"
"わずかにオーバーヘッドが増加します。"

msgid "Handling rejected requests"
msgstr "リクエスト拒否に対処する"

msgid ""
"By default, a '403 Forbidden' response is sent to the user if an incoming "
"request fails the checks performed by ``CsrfViewMiddleware``. This should "
"usually only be seen when there is a genuine Cross Site Request Forgery, or "
"when, due to a programming error, the CSRF token has not been included with "
"a POST form."
msgstr ""
"デフォルトでは、受信リクエストが ``CsrfViewMiddleware`` によって実行される"
"チェックに失敗した場合、ユーザーには \"403 Forbidden\" レスポンスが送信されま"
"す。これは通常、実際の CSRF が発生した場合、またはプログラミングエラーにより "
"POST フォームに CSRF トークンが含まれていない場合にのみ送信されるべきです。"

msgid ""
"The error page, however, is not very friendly, so you may want to provide "
"your own view for handling this condition. To do this, set the :setting:"
"`CSRF_FAILURE_VIEW` setting."
msgstr ""
"エラーページはとてもユーザーフレンドリーではないので、独自のビューを提供した"
"いと考えるかもしれません。:setting:`CSRF_FAILURE_VIEW` の設定で実現できます。"

msgid ""
"CSRF failures are logged as warnings to the :ref:`django.security.csrf "
"<django-security-logger>` logger."
msgstr ""
"CSRF の認証失敗は、 :ref:`django.security.csrf <django-security-logger>` ロ"
"ガーに警告として記録されます。"

msgid "Using CSRF protection with caching"
msgstr "キャッシュによるCSRF保護を利用する"

msgid ""
"If the :ttag:`csrf_token` template tag is used by a template (or the "
"``get_token`` function is called some other way), ``CsrfViewMiddleware`` "
"will add a cookie and a ``Vary: Cookie`` header to the response. This means "
"that the middleware will play well with the cache middleware if it is used "
"as instructed (``UpdateCacheMiddleware`` goes before all other middleware)."
msgstr ""
":ttag:`csrf_token` テンプレートタグがテンプレートで使用されている場合(または "
"``get_token`` 関数が他の方法で呼び出されている場合)、``CsrfViewMiddleware`` "
"はレスポンスにクッキーと ``Vary: Cookie`` ヘッダをレスポンスに追加します。こ"
"れは、``UpdateCacheMiddleware`` が指示通りに使用された場合、このミドルウェア"
"がキャッシュミドルウェアと協調的に動作することを意味します"
"（ ``UpdateCacheMiddleware`` は他のすべてのミドルウェアよりも優先されます）。"

msgid ""
"However, if you use cache decorators on individual views, the CSRF "
"middleware will not yet have been able to set the Vary header or the CSRF "
"cookie, and the response will be cached without either one. In this case, on "
"any views that will require a CSRF token to be inserted you should use the :"
"func:`django.views.decorators.csrf.csrf_protect` decorator first::"
msgstr ""
"しかし、個々のビューでキャッシュデコレータを使用すると、CSRF ミドルウェアはま"
"だ Vary ヘッダや CSRF クッキーを設定できておらず、レスポンスはどちらも設定さ"
"れずにキャッシュされます。この場合、CSRF トークンを挿入する必要があるビューで"
"は、 :func:`django.views.decorators.csrf.csrf_protect` デコレータを最初に使う"
"べきです:"

msgid ""
"If you are using class-based views, you can refer to :ref:`Decorating class-"
"based views<decorating-class-based-views>`."
msgstr ""
"クラスベースのビューを使っている場合は、:ref:`Decorating class-based "
"views<decorating-class-based-views>` を参照してください。"

msgid "Testing and CSRF protection"
msgstr "テストと CSRF 保護"

msgid ""
"The ``CsrfViewMiddleware`` will usually be a big hindrance to testing view "
"functions, due to the need for the CSRF token which must be sent with every "
"POST request. For this reason, Django's HTTP client for tests has been "
"modified to set a flag on requests which relaxes the middleware and the "
"``csrf_protect`` decorator so that they no longer rejects requests. In every "
"other respect (e.g. sending cookies etc.), they behave the same."
msgstr ""
"通常、 ``CsrfViewMiddleware`` はビュー関数をテストする際に大きな障害となりま"
"す。なぜなら、 POST リクエストごとに CSRF トークンを送信する必要があるからで"
"す。このため、Django のテスト用 HTTP クライアントは、ミドルウェアと "
"``csrf_protect`` デコレータを緩和するフラグをリクエストに設定するように変更さ"
"れました。それ以外の点 (例えばクッキーの送信など) では同じように動作します。"

msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks:"
msgstr ""
"何らかの理由でテストクライアントに CSRF チェックを実行して *ほしい* ときに"
"は、CSRF チェックの実行を強制するテストクライアントのインスタンスを作ることが"
"できます:"

msgid "Edge cases"
msgstr "エッジケース"

msgid ""
"Certain views can have unusual requirements that mean they don't fit the "
"normal pattern envisaged here. A number of utilities can be useful in these "
"situations. The scenarios they might be needed in are described in the "
"following section."
msgstr ""
"ビューによっては、ここで想定している通常のパターンに当てはまらないような特殊"
"な要求がある場合があります。このような状況では、多くのユーティリティが役に立"
"ちます。それらが必要とされる可能性のあるシナリオについては、次のセクションで"
"説明します。"

msgid "Disabling CSRF protection for just a few views"
msgstr "特定のビューで CSRF 保護を無効化する"

msgid "Most views requires CSRF protection, but a few do not."
msgstr ""
"ほとんどのビューでCSRF保護が必要だが、わずかのビューでは必要でないケースがあ"
"ります。"

msgid ""
"Solution: rather than disabling the middleware and applying ``csrf_protect`` "
"to all the views that need it, enable the middleware and use :func:`~django."
"views.decorators.csrf.csrf_exempt`."
msgstr ""
"解決策: ミドルウェアを無効にして、必要なビュー全てに ``csrf_protect`` を適用"
"するのではなく、ミドルウェアを有効にして :func:`~django.views.decorators."
"csrf.csrf_exempt` を使ってください。"

msgid ""
"Setting the token when ``CsrfViewMiddleware.process_view()`` is not used"
msgstr "``CsrfViewMiddleware.process_view()`` が使われない場合のトークン設定"

msgid ""
"There are cases when ``CsrfViewMiddleware.process_view`` may not have run "
"before your view is run - 404 and 500 handlers, for example - but you still "
"need the CSRF token in a form."
msgstr ""
"ビューが実行される前に ``CsrfViewMiddleware.process_view`` が実行されない場合"
"があります（例えば、404ハンドラーや500ハンドラー）その場合でもフォームでCSRF"
"トークンが必要となる場合。"

msgid "Solution: use :func:`~django.views.decorators.csrf.requires_csrf_token`"
msgstr ""
"解決策: :func:`~django.views.decorators.csrf.requires_csrf_token` を使用する"

msgid "Including the CSRF token in an unprotected view"
msgstr "保護されていないビューにCSRFトークンを含める"

msgid ""
"There may be some views that are unprotected and have been exempted by "
"``csrf_exempt``, but still need to include the CSRF token."
msgstr ""
"``csrf_exempt`` によって除外され、保護されていないビューがあるかもしれない中"
"で、CSRFトークンを含めなければならないこともあります。"

msgid ""
"Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` followed by :"
"func:`~django.views.decorators.csrf.requires_csrf_token`. (i.e. "
"``requires_csrf_token`` should be the innermost decorator)."
msgstr ""
"解決策: :func:`~django.views.decorators.csrf.csrf_exempt` の後に続けて :func:"
"`~django.views.decorators.csrf.requires_csrf_token` を使用してください (つま"
"り、 ``requires_csrf_token`` が最も内側のデコレータとなるようにしてくださ"
"い)。"

msgid "Protecting a view for only one path"
msgstr "1つのパスに対してのみビューを保護する"

msgid ""
"A view needs CSRF protection under one set of conditions only, and mustn't "
"have it for the rest of the time."
msgstr ""
"ビューが CSRF 保護を必要とするのは、ある条件のときだけで、それ以外のときは "
"CSRF 保護をしてはいけないときがあります。"

msgid ""
"Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` for the "
"whole view function, and :func:`~django.views.decorators.csrf.csrf_protect` "
"for the path within it that needs protection. Example::"
msgstr ""
"解決方法: ビュー関数全体には :func:`~django.views.decorators.csrf."
"csrf_exempt` を使用し、その中で保護が必要なパスに対して :func:`~django.views."
"decorators.csrf.csrf_protect` を使用します。例えば:"

msgid "Protecting a page that uses AJAX without an HTML form"
msgstr "HTML フォームなしで AJAX を使用するページの保護"

msgid ""
"A page makes a POST request via AJAX, and the page does not have an HTML "
"form with a :ttag:`csrf_token` that would cause the required CSRF cookie to "
"be sent."
msgstr ""
"AJAX 経由で POST リクエストを行うページにおいて、必要な CSRF クッキーを送信す"
"る :ttag:`csrf_token` を持つ HTML フォームがないことがあります。"

msgid ""
"Solution: use :func:`~django.views.decorators.csrf.ensure_csrf_cookie` on "
"the view that sends the page."
msgstr ""
"解決策: ページを送信するビューで :func:`~django.views.decorators.csrf."
"ensure_csrf_cookie` を使います。"

msgid "CSRF protection in reusable applications"
msgstr "再利用可能なアプリケーションにおける CSRF 保護"

msgid ""
"Because it is possible for the developer to turn off the "
"``CsrfViewMiddleware``, all relevant views in contrib apps use the "
"``csrf_protect`` decorator to ensure the security of these applications "
"against CSRF. It is recommended that the developers of other reusable apps "
"that want the same guarantees also use the ``csrf_protect`` decorator on "
"their views."
msgstr ""
"開発者は ``CsrfViewMiddleware`` を個別にオフにすることができるので、CSRF に対"
"するアプリケーションのセキュリティを保証するために、contrib アプリケーション"
"の関連するビューには、すべて ``csrf_protect`` デコレータを適用しています。そ"
"の他の再利用可能なアプリの開発者も、同様にセキュリティを保証したいのであれ"
"ば、ビューに ``csrf_protect`` デコレータを適用してください。"

msgid "How to write a custom storage class"
msgstr "カスタムのストレージクラスを書く"

msgid ""
"If you need to provide custom file storage -- a common example is storing "
"files on some remote system -- you can do so by defining a custom storage "
"class. You'll need to follow these steps:"
msgstr ""
"たとえばリモートシステム上にファイルを保存する場合、カスタムストレージクラス"
"を定義することで、カスタムファイルストレージを作成することが可能です。使用す"
"るには以下の手順に従ってください。"

msgid ""
"Your custom storage system must be a subclass of ``django.core.files.storage."
"Storage``::"
msgstr ""
"カスタムストレージシステムは ``django.core.files.storage.Storage`` のサブクラ"
"スでなければなりません。"

msgid ""
"Django must be able to instantiate your storage system without any "
"arguments. This means that any settings should be taken from ``django.conf."
"settings``::"
msgstr ""
"Django は引数なしでストレージシステムをインスタンス化できなければなりません。"
"これは、次のように ``django.conf.settings`` からすべての設定を取る必要がある"
"ことを意味します。"

msgid ""
"Your storage class must implement the :meth:`_open()` and :meth:`_save()` "
"methods, along with any other methods appropriate to your storage class. See "
"below for more on these methods."
msgstr ""
"カスタムストレージクラスには :meth:`_open()` と :meth:`_save()` メソッドが必"
"要です。さらにストレージに必要なメソッドが他にもあれば定義します。こういった"
"メソッドに関しては以降を参照してください。"

msgid ""
"In addition, if your class provides local file storage, it must override the "
"``path()`` method."
msgstr ""
"さらにカスタムクラスがローカルファイルストレージを提供する場合は、 "
"``path()`` メソッドをオーバーライドする必要があります。"

msgid ""
"Your storage class must be :ref:`deconstructible <custom-deconstruct-"
"method>` so it can be serialized when it's used on a field in a migration. "
"As long as your field has arguments that are themselves :ref:`serializable "
"<migration-serializing>`, you can use the ``django.utils.deconstruct."
"deconstructible`` class decorator for this (that's what Django uses on "
"FileSystemStorage)."
msgstr ""
"ストレージクラスは :ref:`deconstructible <custom-deconstruct-method>` でなけ"
"ればならないので、マイグレーションのフィールドで使われたときにそれはシリアラ"
"イズすることができます。フィールドがそれ自身 :ref:`serializable <migration-"
"serializing>` である引数を持つ限り、これのために ``django.utils.deconstruct."
"deconstructible`` クラスデコレータを使うことができます (それが "
"FileSystemStorage で Django が使うものです)。"

msgid ""
"By default, the following methods raise ``NotImplementedError`` and will "
"typically have to be overridden:"
msgstr ""
"デフォルトにおいて、以下に示すメソッドは ``NotImplementedError`` を発生させま"
"す。したがって一般的にオーバーライドする必要があります。"

msgid ":meth:`Storage.delete`"
msgstr ":meth:`Storage.delete`"

msgid ":meth:`Storage.exists`"
msgstr ":meth:`Storage.exists`"

msgid ":meth:`Storage.listdir`"
msgstr ":meth:`Storage.listdir`"

msgid ":meth:`Storage.size`"
msgstr ":meth:`Storage.size`"

msgid ":meth:`Storage.url`"
msgstr ":meth:`Storage.url`"

msgid ""
"Note however that not all these methods are required and may be deliberately "
"omitted. As it happens, it is possible to leave each method unimplemented "
"and still have a working Storage."
msgstr ""
"ただし上のメソッドはすべてが必要というわけでもないため、意図的に省略すること"
"もできます。もし例外が発生してもそのメソッドを未実装のままにしておくことも可"
"能であり、それでもストレージを動作させることはできます。"

msgid ""
"By way of example, if listing the contents of certain storage backends turns "
"out to be expensive, you might decide not to implement ``Storage.listdir()``."
msgstr ""
"特定のストレージバックエンドにおける内容一覧の取得には相当な手間がかかる、と"
"いうことがわかったとします。その場合は ``Storage.listdir()`` の実装をしなくて"
"も構いません。"

msgid ""
"Another example would be a backend that only handles writing to files. In "
"this case, you would not need to implement any of the above methods."
msgstr ""
"バックエンドとして、単にファイル出力だけを扱うものであったとします。この場合"
"は、上のメソッドをすべて実装する必要がありません。"

msgid ""
"Ultimately, which of these methods are implemented is up to you. Leaving "
"some methods unimplemented will result in a partial (possibly broken) "
"interface."
msgstr ""
"結局、上のメソッドを実装するかどうかは開発者次第です。メソッドのどれかを未実"
"装のままにしておくというのは、一部分のみの (場合によっては壊れたままの) イン"
"ターフェースとするということです。"

msgid ""
"You'll also usually want to use hooks specifically designed for custom "
"storage objects. These are:"
msgstr ""
"カスタムストレージオブジェクトに固有のフックメソッドを用意することもあるで"
"しょう。以下があります。"

msgid "**Required**."
msgstr "**必須**"

msgid ""
"Called by ``Storage.open()``, this is the actual mechanism the storage class "
"uses to open the file. This must return a ``File`` object, though in most "
"cases, you'll want to return some subclass here that implements logic "
"specific to the backend storage system. The :exc:`FileNotFoundError` "
"exception should be raised when a file doesn't exist."
msgstr ""
"``Storage.open()`` から呼び出されます。このストレージクラスにとって、ファイル"
"を開くために実際に用いられる機能となります。バックエンドストレージシステムに"
"固有のロジックを実装して、特定サブクラスのオブジェクトを戻り値としたい場合も"
"多くありますが、このメソッドは必ず ``File`` オブジェクトを戻り値としなければ"
"なりません。ファイルが存在しない場合は、 :exc:`FileNotFoundError` 例外が発生"
"します。"

msgid ""
"Called by ``Storage.save()``. The ``name`` will already have gone through "
"``get_valid_name()`` and ``get_available_name()``, and the ``content`` will "
"be a ``File`` object itself."
msgstr ""
"``Storage.save()`` から呼び出されます。``name`` は ``get_valid_name()`` や "
"``get_available_name()`` を通じて得られたものであり、``content`` は ``File`` "
"オブジェクトそのものです。"

msgid ""
"Should return the actual name of the file saved (usually the ``name`` passed "
"in, but if the storage needs to change the file name return the new name "
"instead)."
msgstr ""
"戻り値は、実際に保存されたファイルの名前です (通常は処理された ``name`` です"
"が、ストレージがファイル名を変更する必要がある場合には、新たな名前を返す必要"
"があります)。"

msgid ""
"Returns a filename suitable for use with the underlying storage system. The "
"``name`` argument passed to this method is either the original filename sent "
"to the server or, if ``upload_to`` is a callable, the filename returned by "
"that method after any path information is removed. Override this to "
"customize how non-standard characters are converted to safe filenames."
msgstr ""
"ベースとなるストレージシステムで使用するのに適したファイル名を返します。この"
"メソッドに渡される ``name`` 引数は、サーバに送信された元のファイル名か、 "
"``upload_to`` が呼び出し可能オブジェクトの場合、そのメソッドがパス情報を削除"
"した後に返すファイル名です。非標準文字を安全なファイル名に変換する方法をカス"
"タマイズするには、これをオーバーライドします。"

msgid ""
"The code provided on ``Storage`` retains only alpha-numeric characters, "
"periods and underscores from the original filename, removing everything else."
msgstr ""
"``Storage`` において実装されているコードにおいては、元々のファイル名の中か"
"ら、アルファベット、数字、ピリオド、アンダースコアのみが保持され、それ以外は"
"取り除かれます。"

msgid ""
"Returns an alternative filename based on the ``file_root`` and ``file_ext`` "
"parameters. By default, an underscore plus a random 7 character alphanumeric "
"string is appended to the filename before the extension."
msgstr ""
"\"file_root\"と\"file_ext\"のパラメーターを基に新たなファイルネームを返しま"
"す。デフォルトでは、ファイルネームの拡張子の前にアンダーバーとランダムな7文字"
"の英数字の文字列を加えます。"

msgid ""
"Returns a filename that is available in the storage mechanism, possibly "
"taking the provided filename into account. The ``name`` argument passed to "
"this method will have already cleaned to a filename valid for the storage "
"system, according to the ``get_valid_name()`` method described above."
msgstr ""
"ストレージシステムにおいて利用可能なファイル名を返します。これは指定された"
"ファイル名をできるかぎり考慮に入れた名称です。本メソッドに受け渡される "
"``name`` 引数は、上に示した ``get_valid_name()`` メソッドを用いて、ストレージ"
"システムが扱うファイル名として正常化されたものにします。"

msgid ""
"The length of the filename will not exceed ``max_length``, if provided. If a "
"free unique filename cannot be found, a :exc:`SuspiciousFileOperation "
"<django.core.exceptions.SuspiciousOperation>` exception is raised."
msgstr ""
"``max_length`` を指定した場合、ファイル名の長さはそれを越えないようにします。"
"適切に一致するファイル名が見つからなかった場合は、例外 :exc:"
"`SuspiciousFileOperation <django.core.exceptions.SuspiciousOperation>` が発生"
"します。"

msgid ""
"If a file with ``name`` already exists, ``get_alternative_name()`` is called "
"to obtain an alternative name."
msgstr ""
"``name`` というファイルが既に存在する場合、 ``get_alternative_name()`` が代わ"
"りの名前を得るために呼び出されます。"

msgid "Use your custom storage engine"
msgstr "カスタムのストレージエンジンを使用する"

msgid ""
"The first step to using your custom storage with Django is to tell Django "
"about the file storage backend you'll be using. This is done using the :"
"setting:`STORAGES` setting. This setting maps storage aliases, which are a "
"way to refer to a specific storage throughout Django, to a dictionary of "
"settings for that specific storage backend. The settings in the inner "
"dictionaries are described fully in the :setting:`STORAGES` documentation."
msgstr ""
"Django でカスタムストレージを使うための最初のステップは、利用するファイルスト"
"レージバックエンドを Django に伝えることです。これは :setting:`STORAGES` 設定"
"で行います。この設定は、Django を通して特定のストレージを参照するためのエイリ"
"アスを、ストレージバックエンドを定義する辞書にマッピングします。この辞書の内"
"部的な設定については、 :setting:`STORAGES` ドキュメントで詳しく説明していま"
"す。"

msgid ""
"Storages are then accessed by alias from the :data:`django.core.files."
"storage.storages` dictionary::"
msgstr ""

msgid "How to write custom lookups"
msgstr "カスタムのルックアップを書く"

msgid ""
"Django offers a wide variety of :ref:`built-in lookups <field-lookups>` for "
"filtering (for example, ``exact`` and ``icontains``). This documentation "
"explains how to write custom lookups and how to alter the working of "
"existing lookups. For the API references of lookups, see the :doc:`/ref/"
"models/lookups`."
msgstr ""
"Django には (たとえば ``exact`` や ``icontains`` などの) フィルタリングを行"
"う :ref:`組み込みのルックアップ<field-lookups>` がたくさんあります。このド"
"キュメントでは、カスタムルックアップを作る方法や、既存のルックアップの動作を"
"変更する方法について説明します。ルックアップの API リファレンスについては :"
"doc:`/ref/models/lookups` を参照してください。"

msgid "A lookup example"
msgstr "ルックアップの例"

msgid ""
"Let's start with a small custom lookup. We will write a custom lookup ``ne`` "
"which works opposite to ``exact``. ``Author.objects."
"filter(name__ne='Jack')`` will translate to the SQL:"
msgstr ""
"簡単なカスタムルックアップから始めましょう。``exact`` と逆の動作をするカスタ"
"ムルックアップ ``ne`` を実装していきます。 ``Author.objects."
"filter(name__ne='Jack')`` は次の SQL に変換されます。"

msgid ""
"This SQL is backend independent, so we don't need to worry about different "
"databases."
msgstr ""
"この SQL はバックエンドに依存しない書き方になっているため、別のデータベースに"
"ついて心配する必要はありません。"

msgid ""
"There are two steps to making this work. Firstly we need to implement the "
"lookup, then we need to tell Django about it::"
msgstr ""
"カスタムルックアップを動作させるためには2つのステップが必要です。まず最初に"
"ルックアップを実装し、続いてDjangoに実装したルックアップを認識させる必要があ"
"ります。"

msgid ""
"To register the ``NotEqual`` lookup we will need to call ``register_lookup`` "
"on the field class we want the lookup to be available for. In this case, the "
"lookup makes sense on all ``Field`` subclasses, so we register it with "
"``Field`` directly::"
msgstr ""
"``NotEqual`` ルックアップを登録するために、ルックアップを有効にしたいフィール"
"ドクラスの ``register_lookup`` を呼び出す必要があります。今回実装したルック"
"アップは ``Field`` クラスの全てのサブクラスに適用できるため、 ``Field`` クラ"
"スに直接登録しましょう。　"

msgid "Lookup registration can also be done using a decorator pattern::"
msgstr "ルックアップの登録は、デコレーターパターンを使って行うこともできます。"

msgid ""
"We can now use ``foo__ne`` for any field ``foo``. You will need to ensure "
"that this registration happens before you try to create any querysets using "
"it. You could place the implementation in a ``models.py`` file, or register "
"the lookup in the ``ready()`` method of an ``AppConfig``."
msgstr ""
"これ以降、どのようなフィールドであっても ``foo`` に対しては ``foo__ne`` が利"
"用できます。なお、これを用いるクエリーセットを生成するならば、それ以前にルッ"
"クアップの登録を行っておく必要があります。実装する場所は ``models.py`` ファイ"
"ル内で行ってもよいし、``AppConfig`` 内の ``ready()`` メソッドにてルックアップ"
"の登録を行うのでも構いません。"

msgid ""
"Taking a closer look at the implementation, the first required attribute is "
"``lookup_name``. This allows the ORM to understand how to interpret "
"``name__ne`` and use ``NotEqual`` to generate the SQL. By convention, these "
"names are always lowercase strings containing only letters, but the only "
"hard requirement is that it must not contain the string ``__``."
msgstr ""
"実装の詳細について見ると、最初に必要な属性は ``lookup_name`` です。この属性が"
"あると、ORM が ``name_ne`` を解釈できるようになり、``NotEqual`` を使って SQL "
"を生成できます。慣習として、こうした名前は常に小文字のアルファベットのみから"
"なる文字列にしますが、必ず守らなければならない制約は、文字列 ``__`` を決して"
"含んではならないということです。"

msgid ""
"We then need to define the ``as_sql`` method. This takes a ``SQLCompiler`` "
"object, called ``compiler``,  and the active database connection. "
"``SQLCompiler`` objects are not documented, but the only thing we need to "
"know about them is that they have a ``compile()`` method which returns a "
"tuple containing an SQL string, and the parameters to be interpolated into "
"that string. In most cases, you don't need to use it directly and can pass "
"it on to ``process_lhs()`` and ``process_rhs()``."
msgstr ""
"次に、\"as_sql\" メソッドを定義する必要があります。これには \"compiler\" とい"
"う \"SQL Compiler\" オブジェクトと、アクティブなデータベース接続を必要としま"
"す。\"SQL Compiler\" オブジェクトについてのドキュメントはありませんが、それが"
"SQL文字列を含むタプルと文字列に挿入されるパラメータを返す ``compile()`` メ"
"ソッドを持つ、ということだけ知っていれば十分です。ほとんどの場合、これを直接"
"用いる必要はなく、``process_lhs()`` および ``process_rhs()`` に渡すことができ"
"ます。"

msgid ""
"A ``Lookup`` works against two values, ``lhs`` and ``rhs``, standing for "
"left-hand side and right-hand side. The left-hand side is usually a field "
"reference, but it can be anything implementing the :ref:`query expression "
"API <query-expression>`. The right-hand is the value given by the user. In "
"the example ``Author.objects.filter(name__ne='Jack')``, the left-hand side "
"is a reference to the ``name`` field of the ``Author`` model, and ``'Jack'`` "
"is the right-hand side."
msgstr ""
"2つの値に対して動作するルックアップ ``lhs`` と ``rhs`` は、それぞれ left-"
"hand side (左辺) と right-hand side (右辺) を表します。左辺は通常フィールド参"
"照ですが、:ref:`クエリ式 API <query-expression>` を実装するものであれば何でも"
"かまいません。右辺はユーザーから与えられた値です。``Author.objects."
"filter(name__ne='Jack')`` の例では、左辺は ``Author`` モデルの ``name`` "
"フィールドへの参照で、右辺は ``'Jack'`` です。"

msgid ""
"We call ``process_lhs`` and ``process_rhs`` to convert them into the values "
"we need for SQL using the ``compiler`` object described before. These "
"methods return tuples containing some SQL and the parameters to be "
"interpolated into that SQL, just as we need to return from our ``as_sql`` "
"method. In the above example, ``process_lhs`` returns ``('\"author\"."
"\"name\"', [])`` and ``process_rhs`` returns ``('\"%s\"', ['Jack'])``. In "
"this example there were no parameters for the left hand side, but this would "
"depend on the object we have, so we still need to include them in the "
"parameters we return."
msgstr ""
"``process_lhs`` と ``process_rhs``  を呼び出して、前述の ``compiler`` オブ"
"ジェクトを使用してSQLに必要な値に変換します。これらのメソッドは、SQL とその "
"SQL に補間されるパラメーターを含むタプルを返します。これは、``as_sql`` メソッ"
"ドが返す必要があるものと同じです。上記の例では、``process_lhs`` は "
"``('\"author\".\"name\"', [])`` を返し、``process_rhs`` は ``('\"%s\"', "
"['Jack'])`` を返します。この例では、左側にパラメーターはありませんが、これは"
"所有するオブジェクトに依存するため、返すパラメーターにそれらを含める必要があ"
"ります。"

msgid ""
"Finally we combine the parts into an SQL expression with ``<>``, and supply "
"all the parameters for the query. We then return a tuple containing the "
"generated SQL string and the parameters."
msgstr ""
"最後に、これらの部分を ``<>`` を使って SQL 式にまとめ、クエリのすべてのパラ"
"メータを指定します。その後、生成された SQL 文字列とパラメータを含むタプルを返"
"します。"

msgid "A transformer example"
msgstr "トランスフォーム（``Transform``: 変換）の例"

msgid ""
"The custom lookup above is great, but in some cases you may want to be able "
"to chain lookups together. For example, let's suppose we are building an "
"application where we want to make use of the ``abs()`` operator. We have an "
"``Experiment`` model which records a start value, end value, and the change "
"(start - end). We would like to find all experiments where the change was "
"equal to a certain amount (``Experiment.objects.filter(change__abs=27)``), "
"or where it did not exceed a certain amount (``Experiment.objects."
"filter(change__abs__lt=27)``)."
msgstr ""
"上記のカスタムルックアップは素晴らしいですが、場合によってはルックアップを一"
"緒に連結したいこともあります。たとえば、``abs()`` 演算子を利用したいアプリ"
"ケーションを構築しているとしましょう。開始値、終了値モデルおよび変更 (start "
"- end) を記録する ``Experiment`` モデルがあります。変化が一定の量に等しい "
"(``Experiment.objects.filter(change__abs=27)``)、またはそれが一定の量を超えな"
"かった (``Experiment.objects.filter(change__abs__lt=27)``) すべての "
"Experiment を見つけたいと思うことがあるでしょう。"

msgid ""
"This example is somewhat contrived, but it nicely demonstrates the range of "
"functionality which is possible in a database backend independent manner, "
"and without duplicating functionality already in Django."
msgstr ""
"この例は多少工夫がされていますが、データベースバックエンドに依存しない方法"
"で、そしてすでに Django にある機能を複製することなく可能な機能の範囲をうまく"
"示しています。"

msgid ""
"We will start by writing an ``AbsoluteValue`` transformer. This will use the "
"SQL function ``ABS()`` to transform the value before comparison::"
msgstr ""
"私たちは ``AbsoluteValue`` トランスフォーマー（変換器）を書くことから始めま"
"しょう。次のコードは、 SQL 関数 ``ABS()`` を使って比較の前に値を変換します:"

msgid "Next, let's register it for ``IntegerField``::"
msgstr "次に、``IntegerField`` に登録しましょう。"

msgid ""
"We can now run the queries we had before. ``Experiment.objects."
"filter(change__abs=27)`` will generate the following SQL:"
msgstr ""
"これで、このクエリを使うことができるようになりました。 ``Experiment.objects."
"filter(change__abs=27)`` は次のSQLを生成します。"

msgid ""
"By using ``Transform`` instead of ``Lookup`` it means we are able to chain "
"further lookups afterward. So ``Experiment.objects."
"filter(change__abs__lt=27)`` will generate the following SQL:"
msgstr ""
"``LookUp`` の代わりに ``Transform`` を使うことで、それ以降のルックアップを連"
"結できます。つまり、``Experiment.objects.filter(change__abs__lt=27)`` は以下"
"のようなSQLを生成します。"

msgid ""
"Note that in case there is no other lookup specified, Django interprets "
"``change__abs=27`` as ``change__abs__exact=27``."
msgstr ""
"他にルックアップが指定されていない場合、Django は ``change__abs=27`` を "
"``change__abs__exact=27`` として解釈します。"

msgid ""
"This also allows the result to be used in ``ORDER BY`` and ``DISTINCT ON`` "
"clauses. For example ``Experiment.objects.order_by('change__abs')`` "
"generates:"
msgstr ""
"これにより ``ORDER BY`` 句と ``DISTINCT ON`` 句の使用も可能です。例えば "
"``Experiment.objects.order_by('change__abs')`` は以下の SQL を生成します。"

msgid ""
"And on databases that support distinct on fields (such as PostgreSQL), "
"``Experiment.objects.distinct('change__abs')`` generates:"
msgstr ""
"そして、PosgreSQL のようにフィールドを DISTINCT することもサポートしていま"
"す。``Experiment.objects.distinct('change__abs')`` は以下の SQL を生成しま"
"す。"

msgid ""
"When looking for which lookups are allowable after the ``Transform`` has "
"been applied, Django uses the ``output_field`` attribute. We didn't need to "
"specify this here as it didn't change, but supposing we were applying "
"``AbsoluteValue`` to some field which represents a more complex type (for "
"example a point relative to an origin, or a complex number) then we may have "
"wanted to specify that the transform returns a ``FloatField`` type for "
"further lookups. This can be done by adding an ``output_field`` attribute to "
"the transform::"
msgstr ""
"``Transform`` が適用された後、どのルックアップが許可されるかを探すとき、"
"Django は ``output_field`` 属性を使用します。ここでは変更しないため、これを指"
"定する必要はありませんでしたが、より複雑な型（たとえば、原点に関連する点や複"
"素数）を表すフィールドに ``AbsoluteValue`` を適用すると仮定します。 次に、ト"
"ランスフォームが次のルックアップのために ``FloatField`` 型を返すように指定し"
"たいかもしれません。これは、次のようにトランスフォームに ``output_field`` 属"
"性を追加することで実現できます:"

msgid ""
"This ensures that further lookups like ``abs__lte`` behave as they would for "
"a ``FloatField``."
msgstr ""
"これにより ``abs__lte`` のようなそれ以降のルックアップが ``FloatField`` の場"
"合と同じように動作することが保証されます。"

msgid "Writing an efficient ``abs__lt`` lookup"
msgstr "効率的な ``abs__lt`` ルックアップを書く"

msgid ""
"When using the above written ``abs`` lookup, the SQL produced will not use "
"indexes efficiently in some cases. In particular, when we use "
"``change__abs__lt=27``, this is equivalent to ``change__gt=-27`` AND "
"``change__lt=27``. (For the ``lte`` case we could use the SQL ``BETWEEN``)."
msgstr ""
"上記の ``abs`` ルックアップを使用するとき、生成された SQL はいくつかのケース"
"でインデックスを効率的に使用しません。特に、``change__abs__lt=27`` を使うと"
"き、これは ``change__gt=-27`` かつ ``change__lt=27`` と同じです (``lte`` の場"
"合はSQLの ``BETWEEN`` を使うことができます)。"

msgid ""
"So we would like ``Experiment.objects.filter(change__abs__lt=27)`` to "
"generate the following SQL:"
msgstr ""
"そのため、``Experiment.objects.filter(change__abs__lt=27)`` に次のような SQL "
"を生成させたいです。"

msgid "The implementation is::"
msgstr "実装は次のようになります。"

msgid ""
"There are a couple of notable things going on. First, "
"``AbsoluteValueLessThan`` isn't calling ``process_lhs()``. Instead it skips "
"the transformation of the ``lhs`` done by ``AbsoluteValue`` and uses the "
"original ``lhs``. That is, we want to get ``\"experiments\".\"change\"`` not "
"``ABS(\"experiments\".\"change\")``. Referring directly to ``self.lhs.lhs`` "
"is safe as ``AbsoluteValueLessThan`` can be accessed only from the "
"``AbsoluteValue`` lookup, that is the ``lhs`` is always an instance of "
"``AbsoluteValue``."
msgstr ""
"注目すべきことがいくつかあります。 まず、``AbsoluteValueLessThan`` は "
"``process_lhs()`` を呼び出していません。 代わりに、 ``AbsoluteValue`` によっ"
"て行われた ``lhs`` の変換をスキップし、元の ``lhs`` を使用します。 つまり、"
"``ABS(\"experiments\".\"change\")`` ではなく、 ``\"experiments\"."
"\"change\"`` を取得する必要があります。``AbsoluteValueLessThan`` は "
"``AbsoluteValue`` ルックアップからのみアクセスできるため、 ``self.lhs.lhs`` "
"を直接参照することは安全です。つまり、 ``lhs`` は常に ``AbsoluteValue`` のイ"
"ンスタンスです 。"

msgid ""
"Notice also that  as both sides are used multiple times in the query the "
"params need to contain ``lhs_params`` and ``rhs_params`` multiple times."
msgstr ""
"また、クエリで両側が複数回使用されているので、paramsは ``lhs_params`` と "
"``rhs_params`` を複数回含む必要があることにも注意してください。"

msgid ""
"The final query does the inversion (``27`` to ``-27``) directly in the "
"database. The reason for doing this is that if the ``self.rhs`` is something "
"else than a plain integer value (for example an ``F()`` reference) we can't "
"do the transformations in Python."
msgstr ""
"最後の問い合わせはデータベース内で直接反転（``27`` から ``-27``）を行います。"
"これを行う理由は、 ``self.rhs`` が普通の整数値（例えば ``F()`` 参照）以外のも"
"のである場合、Pythonでは変換ができないためです。"

msgid ""
"In fact, most lookups with ``__abs`` could be implemented as range queries "
"like this, and on most database backends it is likely to be more sensible to "
"do so as you can make use of the indexes. However with PostgreSQL you may "
"want to add an index on ``abs(change)`` which would allow these queries to "
"be very efficient."
msgstr ""
"実際のところ、 ``__abs`` を使ったルックアップは、このように範囲クエリとして実"
"装することができます。そして、ほとんどのデータベースバックエンドでは、イン"
"デックスを利用できるようにするほうが賢明です。しかしPostgreSQLでは、 "
"``abs(change)`` にインデックスを追加することをお勧めします。これにより、これ"
"らのクエリは非常に効率的になります。"

msgid "A bilateral transformer example"
msgstr "双方向のトランスフォームの例"

msgid ""
"The ``AbsoluteValue`` example we discussed previously is a transformation "
"which applies to the left-hand side of the lookup. There may be some cases "
"where you want the transformation to be applied to both the left-hand side "
"and the right-hand side. For instance, if you want to filter a queryset "
"based on the equality of the left and right-hand side insensitively to some "
"SQL function."
msgstr ""
"前に説明した ``AbsoluteValue`` の例は、ルックアップの左側に適用される変換で"
"す。 変換を左側と右側の両方に適用したい場合があります。 たとえば、一部のSQL関"
"数に左右されない左側と右側の同等性に基づいてクエリセットをフィルタリングする"
"場合です。"

msgid ""
"Let's examine case-insensitive transformations here. This transformation "
"isn't very useful in practice as Django already comes with a bunch of built-"
"in case-insensitive lookups, but it will be a nice demonstration of "
"bilateral transformations in a database-agnostic way."
msgstr ""
"ここで、大文字小文字を区別しないトランスフォームを試してみましょう。Djangoに"
"は既に大文字小文字を区別しないルックアップが多数組み込まれているので、プラク"
"ティスとしては良い例ではありません。しかし、データベースにとらわれない双方向"
"のトランスフォームとしては良い例でしょう。"

msgid ""
"We define an ``UpperCase`` transformer which uses the SQL function "
"``UPPER()`` to transform the values before comparison. We define :attr:"
"`bilateral = True <django.db.models.Transform.bilateral>` to indicate that "
"this transformation should apply to both ``lhs`` and ``rhs``::"
msgstr ""
"SQL関数 ``UPPER()`` を使用して比較前に値を変換する ``UpperCase`` トランス"
"フォーマーを定義します。 :attr:`bilateral = True <django.db.models.Transform."
"bilateral>` を定義して、この変換が ``lhs`` と ``rhs`` の両方に適用されること"
"を示します:"

msgid "Next, let's register it::"
msgstr "次に、それを登録しましょう:"

msgid ""
"Now, the queryset ``Author.objects.filter(name__upper=\"doe\")`` will "
"generate a case insensitive query like this:"
msgstr ""
"これで、 ``Author.objects.filter(name__upper=\"doe\")`` は次のような大文字小"
"文字を区別しないクエリを生成するようになります。"

msgid "Writing alternative implementations for existing lookups"
msgstr "既存のルックアップに代替の実装を書く"

msgid ""
"Sometimes different database vendors require different SQL for the same "
"operation. For this example we will rewrite a custom implementation for "
"MySQL for the NotEqual operator. Instead of ``<>`` we will be using ``!=`` "
"operator. (Note that in reality almost all databases support both, including "
"all the official databases supported by Django)."
msgstr ""
"異なるデータベースベンダーは、同じ操作に対して異なるSQLを必要とする場合があり"
"ます。 この例では、MySQLのNotEqual演算子のカスタム実装を書き換えます。``<>`` "
"の代わりに ``!=`` 演算子を使用します。 （実際には、Djangoがサポートするすべて"
"の公式データベースを含め、ほとんどすべてのデータベースが両方をサポートしてい"
"ることに注意してください）。"

msgid ""
"We can change the behavior on a specific backend by creating a subclass of "
"``NotEqual`` with an ``as_mysql`` method::"
msgstr ""
"``as_mysql`` メソッドで ``NotEqual`` のサブクラスを作成することで、特定のバッ"
"クエンドの振る舞いを変えることができます。"

msgid ""
"We can then register it with ``Field``. It takes the place of the original "
"``NotEqual`` class as it has the same ``lookup_name``."
msgstr ""
"そしてそれを ``Field`` に登録することができます。元の ``NotEqual`` クラスが同"
"じ ``lookup_name`` を持つので代わりに使われます。"

msgid ""
"When compiling a query, Django first looks for ``as_%s % connection.vendor`` "
"methods, and then falls back to ``as_sql``. The vendor names for the in-"
"built backends are ``sqlite``, ``postgresql``, ``oracle`` and ``mysql``."
msgstr ""
"クエリをコンパイルするとき、Djangoは最初に ``as_%s % connection.vendor`` メ"
"ソッドを探し、それから ``as_sql`` にフォールバックします。組み込みのバックエ"
"ンドのベンダ名は ``sqlite``、``postgresql``、``oracle`` および ``mysql`` で"
"す。"

msgid "How Django determines the lookups and transforms which are used"
msgstr ""
"Django はどうやってルックアップとトランスフォームのどちらを使うかを決定するの"
"か？"

msgid ""
"In some cases you may wish to dynamically change which ``Transform`` or "
"``Lookup`` is returned based on the name passed in, rather than fixing it. "
"As an example, you could have a field which stores coordinates or an "
"arbitrary dimension, and wish to allow a syntax like ``."
"filter(coords__x7=4)`` to return the objects where the 7th coordinate has "
"value 4. In order to do this, you would override ``get_lookup`` with "
"something like::"
msgstr ""
"場合によっては、修正するのではなく、渡された名前に基づいて、どの "
"``Transform`` または ``Lookup`` を返すかを動的に変更したい場合があります。 例"
"として、座標または任意の次元を格納するフィールドがあり、 ``."
"filter(coords__x7=4)`` のような構文で、7番目の座標の値が4であるオブジェクトを"
"返すことができます。 これを行うには、次のようなもので ``get_lookup`` をオー"
"バーライドします:"

msgid ""
"You would then define ``get_coordinate_lookup`` appropriately to return a "
"``Lookup`` subclass which handles the relevant value of ``dimension``."
msgstr ""
"それから、適切な ``dimension`` の値を扱う ``Lookup`` サブクラスを返すように "
"``get_coordinate_lookup`` を適切に定義します。"

msgid ""
"There is a similarly named method called ``get_transform()``. "
"``get_lookup()`` should always return a ``Lookup`` subclass, and "
"``get_transform()`` a ``Transform`` subclass. It is important to remember "
"that ``Transform`` objects can be further filtered on, and ``Lookup`` "
"objects cannot."
msgstr ""
"``get_transform()`` という似た名前のメソッドもあります。 ``get_lookup()`` は"
"常に ``Lookup`` サブクラスを返し、 ``get_transform()`` は ``Transform`` サブ"
"クラスを返す必要があります。 ``Transform`` オブジェクトはさらにフィルタできま"
"すが、 ``Lookup`` オブジェクトはそれ以上フィルタできないことに注意してくださ"
"い。"

msgid ""
"When filtering, if there is only one lookup name remaining to be resolved, "
"we will look for a ``Lookup``. If there are multiple names, it will look for "
"a ``Transform``. In the situation where there is only one name and a "
"``Lookup`` is not found, we look for a ``Transform`` and then the ``exact`` "
"lookup on that ``Transform``. All call sequences always end with a "
"``Lookup``. To clarify:"
msgstr ""
"フィルタリングする際に、解決すべきルックアップ名が1つしか残っていない場合は "
"``Lookup`` を探します。複数の名前がある場合は ``Transform`` を探します。名前"
"が1つしかなく、 ``Lookup`` が見つからない場合は、 ``Transform`` を探し、その "
"``Transform`` に対して ``exact`` ルックアップを行います。すべての呼び出しシー"
"ケンスは常に ``Lookup`` で終わります。これは、以下のことを明確にするためです:"

msgid ""
"``.filter(myfield__mylookup)`` will call ``myfield.get_lookup('mylookup')``."
msgstr ""
"``.filter(myfield__mylookup)`` が ``myfield.get_lookup('mylookup')`` を呼び出"
"すこと。"

msgid ""
"``.filter(myfield__mytransform__mylookup)`` will call ``myfield."
"get_transform('mytransform')``, and then ``mytransform."
"get_lookup('mylookup')``."
msgstr ""
"``.filter(myfield__mytransform__mylookup)`` が ``myfield."
"get_transform('mytransform')`` を呼び出し、次に ``mytransform."
"get_lookup('mylookup')`` を呼び出すこと。"

msgid ""
"``.filter(myfield__mytransform)`` will first call ``myfield."
"get_lookup('mytransform')``, which will fail, so it will fall back to "
"calling ``myfield.get_transform('mytransform')`` and then ``mytransform."
"get_lookup('exact')``."
msgstr ""
"``.filter(myfield__mytransform)`` が最初に ``myfield."
"get_lookup('mytransform')`` を呼び出そうとして失敗し、そのため ``myfield."
"get_transform('mytransform')`` 、次に ``mytransform.get_lookup('exact')`` を"
"フォールバックとして呼び出すこと。"

msgid "How to create custom ``django-admin`` commands"
msgstr "カスタム ``django-admin`` コマンドの作り方"

msgid ""
"Applications can register their own actions with ``manage.py``. For example, "
"you might want to add a ``manage.py`` action for a Django app that you're "
"distributing. In this document, we will be building a custom ``closepoll`` "
"command for the ``polls`` application from the :doc:`tutorial</intro/"
"tutorial01>`."
msgstr ""
"``manage.py`` を用いることで独自のアクションを登録する事ができます。例とし"
"て、あなたが配布している Django アプリケーションに ``manage.py`` アクションを"
"追加したくなったとします。このドキュメントでは、:doc:`このチュートリアル</"
"intro/tutorial01>` で作成した ``polls`` アプリケーションに独自の "
"``closepoll`` コマンドを追加します。"

msgid ""
"To do this, add a ``management/commands`` directory to the application. "
"Django will register a ``manage.py`` command for each Python module in that "
"directory whose name doesn't begin with an underscore. For example:"
msgstr ""
"独自のコマンドを追加するためには、 ``management/commands`` ディレクトリをアプ"
"リケーションに追加してください。Djangoは、そのディレクトリ内のアンダーバーで"
"始まらないPythonモジュールすべてを ``manage.py`` コマンドに登録します。例え"
"ば:"

msgid ""
"In this example, the ``closepoll`` command will be made available to any "
"project that includes the ``polls`` application in :setting:`INSTALLED_APPS`."
msgstr ""
"この例では、``closepoll`` コマンドは ``polls`` アプリケーションを :setting:"
"`INSTALLED_APPS` に含むプロジェクト全てで利用できるようになります。"

msgid ""
"The ``_private.py`` module will not be available as a management command."
msgstr "``_private.py`` モジュールは管理コマンドとして利用できません。"

msgid ""
"The ``closepoll.py`` module has only one requirement -- it must define a "
"class ``Command`` that extends :class:`BaseCommand` or one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"``closepoll.py`` モジュールには一つだけ満たすべき要件があります。それは、 :"
"class:`BaseCommand` クラスもしくはその :ref:`サブクラス<ref-basecommand-"
"subclasses>` の一つを継承した ``Command`` クラスを定義することです。"

msgid "Standalone scripts"
msgstr "スタンドアロンのスクリプト"

msgid ""
"Custom management commands are especially useful for running standalone "
"scripts or for scripts that are periodically executed from the UNIX crontab "
"or from Windows scheduled tasks control panel."
msgstr ""
"カスタム管理コマンドはスタンドアロンのスクリプト、 UNIX の crontab や "
"Windows のタスクスケジューラ管理パネルから定期的に実行されるスクリプトを処理"
"する場合に特に有用です。"

msgid ""
"To implement the command, edit ``polls/management/commands/closepoll.py`` to "
"look like this::"
msgstr ""
"コマンドを実装するには、``polls/management/commands/closepoll.py`` を以下のよ"
"うに編集してください::"

msgid ""
"When you are using management commands and wish to provide console output, "
"you should write to ``self.stdout`` and ``self.stderr``, instead of printing "
"to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes "
"much easier to test your custom command. Note also that you don't need to "
"end messages with a newline character, it will be added automatically, "
"unless you specify the ``ending`` parameter::"
msgstr ""
"管理コマンドを使用してコンソール出力を提供したい場合は、直接 ``stdout`` と "
"``stderr`` に出力するのではなく、``self.stdout`` と ``self.stderr`` に書き込"
"むべきです。これらのプロキシを使用することで、カスタムコマンドのテストがはる"
"かに簡単になります。また、メッセージの終わりに改行文字を追加する必要はないこ"
"とにも注意してください。``ending`` パラメータを指定しない限り、改行文字は自動"
"的に追加されます:"

msgid ""
"The new custom command can be called using ``python manage.py closepoll "
"<poll_ids>``."
msgstr ""
"新たに作成したカスタムコマンドは ``python manage.py closepoll <poll_ids>`` と"
"実行する事で利用できます。"

msgid ""
"The ``handle()`` method takes one or more ``poll_ids`` and sets ``poll."
"opened`` to ``False`` for each one. If the user referenced any nonexistent "
"polls, a :exc:`CommandError` is raised. The ``poll.opened`` attribute does "
"not exist in the :doc:`tutorial</intro/tutorial02>` and was added to ``polls."
"models.Question`` for this example."
msgstr ""
"``handle()`` メソッドは一つ以上の ``poll_ids`` を受け取り、それぞれに対応し"
"た ``poll.opened`` を ``False`` にセットします。もしコマンドの利用者が存在し"
"ない poll を指定した場合、:exc:`CommandError` 例外が発生します。``poll."
"opened`` 属性は元の :doc:`チュートリアル</intro/tutorial02>` には存在しないの"
"で、この例では ``polls.models.Question`` モデルに追加しました。"

msgid "Accepting optional arguments"
msgstr "省略可能な引数を受け入れる"

msgid ""
"The same ``closepoll`` could be easily modified to delete a given poll "
"instead of closing it by accepting additional command line options. These "
"custom options can be added in the :meth:`~BaseCommand.add_arguments` method "
"like this::"
msgstr ""
"上記の ``closepoll`` は、追加のコマンドラインオプションを受け入れることで、投"
"票を閉じる代わりに削除するように簡単に変更できます。これらのカスタムオプショ"
"ンは、次のように :meth:`~BaseCommand.add_arguments` メソッドで追加できます:"

msgid ""
"The option (``delete`` in our example) is available in the options dict "
"parameter of the handle method. See the :py:mod:`argparse` Python "
"documentation for more about ``add_argument`` usage."
msgstr ""
"オプション(例では ``delete``)は handle メソッドで辞書型変数の引数として利用可"
"能です。``add_argument`` の利用についてより詳細な情報を得るには Python 公式ド"
"キュメントの :py:mod:`argparse` を参照してください。"

msgid ""
"In addition to being able to add custom command line options, all :doc:"
"`management commands</ref/django-admin>` can accept some default options "
"such as :option:`--verbosity` and :option:`--traceback`."
msgstr ""
"独自のコマンドラインオプションを追加できるのに加え、:doc:`管理コマンド </ref/"
"django-admin>` に定義された :option:`--verbosity` や :option:`--traceback` と"
"いったオプションも標準で利用できます。"

msgid "Management commands and locales"
msgstr "管理コマンドとロケール"

msgid ""
"By default, management commands are executed with the current active locale."
msgstr "デフォルトでは、管理コマンドは現在アクティブなロケールで実行されます。"

msgid ""
"If, for some reason, your custom management command must run without an "
"active locale (for example, to prevent translated content from being "
"inserted into the database), deactivate translations using the "
"``@no_translations`` decorator on your :meth:`~BaseCommand.handle` method::"
msgstr ""
"何らかの理由でカスタム管理コマンドをアクティブなロケールなしで実行する必要が"
"ある (たとえば、翻訳されたコンテンツがデータベースに挿入されないようにした"
"い) 場合は、 :meth:`~BaseCommand.handle` メソッドで ``@no_translations`` デコ"
"レータを使用して翻訳を無効にします。"

msgid ""
"Since translation deactivation requires access to configured settings, the "
"decorator can't be used for commands that work without configured settings."
msgstr ""
"翻訳の非アクティブ化には構成設定へのアクセスが必要なので、構成設定なしで機能"
"するコマンドにデコレータを使用することはできません。"

msgid "Testing"
msgstr "テスト"

msgid ""
"Information on how to test custom management commands can be found in the :"
"ref:`testing docs <topics-testing-management-commands>`."
msgstr ""
"カスタム管理コマンドのテストに関する情報は :ref:`テストに関するページ "
"<topics-testing-management-commands>` で得ることができます。"

msgid "Overriding commands"
msgstr "コマンドのオーバーライド"

msgid ""
"Django registers the built-in commands and then searches for commands in :"
"setting:`INSTALLED_APPS` in reverse. During the search, if a command name "
"duplicates an already registered command, the newly discovered command "
"overrides the first."
msgstr ""
"Djangoは、ビルトインコマンドを読み込んだ後に :setting:`INSTALLED_APPS` を逆順"
"に検索してコマンドを登録します。この検索の際に、すでに登録済みのコマンド名と"
"重複したコマンド名が見つかった場合、新しく見つかったコマンドで最初に見つけた"
"コマンドをオーバーライドします。"

msgid ""
"In other words, to override a command, the new command must have the same "
"name and its app must be before the overridden command's app in :setting:"
"`INSTALLED_APPS`."
msgstr ""
"別の言い方をすると、コマンドをオーバーライドするためには、新しいコマンドは、"
"オーバーライドするコマンドと同じ名前でなければなりません。そして、そのアプリ"
"は、:setting:`INSTALLED_APPS` で、オーバーライドするコマンドのアプリよりも前"
"にある必要があります。"

msgid ""
"Management commands from third-party apps that have been unintentionally "
"overridden can be made available under a new name by creating a new command "
"in one of your project's apps (ordered before the third-party app in :"
"setting:`INSTALLED_APPS`) which imports the ``Command`` of the overridden "
"command."
msgstr ""
"意図せずオーバーライドされたサードパーティアプリからの管理コマンドは、オー"
"バーライドされたコマンドの ``Command`` をインポートするプロジェクトのアプリ"
"（:setting:`INSTALLED_APPS` でサードパーティアプリの前に注文） の1つで新しい"
"コマンドを作成することにより、新しい名前で使用可能にできます。"

msgid "Command objects"
msgstr "Command オブジェクト"

msgid "The base class from which all management commands ultimately derive."
msgstr "全ての管理コマンドの派生元となる基底クラス。"

msgid ""
"Use this class if you want access to all of the mechanisms which parse the "
"command-line arguments and work out what code to call in response; if you "
"don't need to change any of that behavior, consider using one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"コマンドライン引数を解析し、それに対してどのコードを呼び出すかを決定するすべ"
"てのメカニズムにアクセスしたい場合は、このクラスを使用してください。そのよう"
"な動作を変更する必要がない場合は、 :ref:`サブクラス <ref-basecommand-"
"subclasses>` のいずれかを使用することを検討してください。"

msgid ""
"Subclassing the :class:`BaseCommand` class requires that you implement the :"
"meth:`~BaseCommand.handle` method."
msgstr ""
":class:`BaseCommand` クラスのサブクラス化には :meth:`~BaseCommand.handle` メ"
"ソッドの実装が必要です。"

msgid "Attributes"
msgstr "属性"

msgid ""
"All attributes can be set in your derived class and can be used in :class:"
"`BaseCommand`’s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"全ての属性は派生クラスでセットでき、:class:`BaseCommand` クラスの :ref:`サブ"
"クラス<ref-basecommand-subclasses>` で利用可能です。"

msgid ""
"A short description of the command, which will be printed in the help "
"message when the user runs the command ``python manage.py help <command>``."
msgstr ""
"コマンドに関する短い説明。ユーザーが ``python manage.py help <command>`` を実"
"行することでヘルプメッセージとして表示されます。"

msgid ""
"If your command defines mandatory positional arguments, you can customize "
"the message error returned in the case of missing arguments. The default is "
"output by :py:mod:`argparse` (\"too few arguments\")."
msgstr ""
"コマンドが必須の位置引数を定義している場合、引数が足りない場合に返されるエ"
"ラーメッセージをカスタマイズできます。デフォルトは :py:mod:`argparse` によっ"
"て出力されます (\"too few arguments\")。"

msgid ""
"A boolean indicating whether the command outputs SQL statements; if "
"``True``, the output will automatically be wrapped with ``BEGIN;`` and "
"``COMMIT;``. Default value is ``False``."
msgstr ""
"コマンドが SQL 文を出力するかどうかを決めるブール値。``True`` の場合、出力文"
"が自動的に ``BEGIN;`` と ``COMMIT;`` で囲まれます。デフォルトの値は "
"``False`` です。"

msgid ""
"A boolean; if ``True``, the command prints a warning if the set of "
"migrations on disk don't match the migrations in the database. A warning "
"doesn't prevent the command from executing. Default value is ``False``."
msgstr ""
"Boolean。``True`` の場合、ディスク上に存在する一連のマイグレーション定義が"
"データベース上に保存されたマイグレーション定義とマッチしない場合に警告を出力"
"します。この警告はコマンドの実行を停止させる物ではありません。デフォルトの値"
"は ``False`` です。"

msgid ""
"A list or tuple of tags, e.g. ``[Tags.staticfiles, Tags.models]``. System "
"checks :ref:`registered in the chosen tags <registering-labeling-checks>` "
"will be checked for errors prior to executing the command. The value "
"``'__all__'`` can be used to specify that all system checks should be "
"performed. Default value is ``'__all__'``."
msgstr ""
"例えば ``[Tags.staticfiles, Tags.models]`` のようなタグのリストやタプル。 :"
"ref:`指定したタグに登録された <registering-labeling-checks>` システムチェック"
"は、コマンドを実行する前にエラーがないかチェックされます。 ``'__all__'`` を使"
"用することで、すべてのシステムチェックを実行するように指定することができま"
"す。デフォルトでは ``'__all__'`` に設定されています。"

msgid ""
"An instance attribute that helps create colored output when writing to "
"``stdout`` or ``stderr``. For example::"
msgstr ""
"``stdout`` や ``stderr`` を記述した際にカラー出力を補助するインスタンス変数で"
"す。以下の利用例を参照ください::"

msgid ""
"See :ref:`syntax-coloring` to learn how to modify the color palette and to "
"see the available styles (use uppercased versions of the \"roles\" described "
"in that section)."
msgstr ""
"カラーパレットの調整と利用可能なスタイルについては :ref:`syntax-coloring` を"
"参照してください (このセクションに記述されている \"roles\" のアルファベットを"
"大文字にすると利用できます)。"

msgid ""
"If you pass the :option:`--no-color` option when running your command, all "
"``self.style()`` calls will return the original string uncolored."
msgstr ""
":option:`--no-color` オプションを渡してコマンドを実行した場合、全ての ``self."
"style()`` 呼び出しはオリジナルのカラー分けされていない出力を行います。"

msgid ""
"The default command options to suppress in the help output. This should be a "
"set of option names (e.g. ``'--verbosity'``). The default values for the "
"suppressed options are still passed."
msgstr ""
"ヘルプ出力で抑制するデフォルトのコマンドオプション。これは、オプション名の"
"セットでなければなりません（例：'--verbosity'）。抑制されたオプションのデフォ"
"ルト値はそのまま渡されます。"

msgid "Methods"
msgstr "メソッド"

msgid ""
":class:`BaseCommand` has a few methods that can be overridden but only the :"
"meth:`~BaseCommand.handle` method must be implemented."
msgstr ""
":class:`BaseCommand` には、いくつかのオーバーライド可能なメソッドが含まれてい"
"ます。しかし、:meth:`~BaseCommand.handle` メソッドだけは、実装する必要があり"
"ます。"

msgid "Implementing a constructor in a subclass"
msgstr "サブクラス内でのコンストラクタの実装"

msgid ""
"If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you "
"must call :class:`BaseCommand`’s ``__init__``::"
msgstr ""
":class:`BaseCommand` を継承したサブクラス内で ``__init__`` を実装する場合、:"
"class:`BaseCommand` の ``__init__`` を呼び出す必要があります:"

msgid ""
"Returns a ``CommandParser`` instance, which is an :class:`~argparse."
"ArgumentParser` subclass with a few customizations for Django."
msgstr ""
"``CommandParser`` インスタンスを返します。これは :class:`~argparse."
"ArgumentParser` サブクラスで、Django用にいくつかカスタマイズされています。"

msgid ""
"You can customize the instance by overriding this method and calling "
"``super()`` with ``kwargs`` of :class:`~argparse.ArgumentParser` parameters."
msgstr ""
"このメソッドをオーバーライドし、 :class:`~argparse.ArgumentParser` パラメータ"
"の ``kwargs`` を使って ``super()`` を呼び出すことでインスタンスをカスタマイズ"
"できます。"

msgid ""
"Entry point to add parser arguments to handle command line arguments passed "
"to the command. Custom commands should override this method to add both "
"positional and optional arguments accepted by the command. Calling "
"``super()`` is not needed when directly subclassing ``BaseCommand``."
msgstr ""
"コマンドに渡されたコマンドライン引数を操作するパーサーを追加するためのエント"
"リポイントです。カスタム管理コマンドが受け取る位置引数およびオプション引数を"
"追加するためにはこのメソッドをオーバーライドする必要があります。直接 "
"``BaseCommand`` を継承している場合は ``super()`` の呼び出しは必要ありません。"

msgid ""
"Returns the Django version, which should be correct for all built-in Django "
"commands. User-supplied commands can override this method to return their "
"own version."
msgstr ""
"Djangoのバージョンを返します。これはすべての組み込みDjangoコマンドに対して正"
"しいはずです。 ユーザー指定のコマンドは、このメソッドをオーバーライドして独自"
"のバージョンを返すことができます。"

msgid ""
"Tries to execute this command, performing system checks if needed (as "
"controlled by the :attr:`requires_system_checks` attribute). If the command "
"raises a :exc:`CommandError`, it's intercepted and printed to ``stderr``."
msgstr ""
"コマンドを実行し、必要とされた場合(:attr:`requires_system_checks` 属性によっ"
"て設定可能)システムチェックを行います。コマンドが :exc:`CommandError` 例外を"
"発生させた場合は、実行を中断して ``stderr`` に出力します。"

msgid "Calling a management command in your code"
msgstr "コード中での管理コマンドの呼び出し"

msgid ""
"``execute()`` should not be called directly from your code to execute a "
"command. Use :func:`~django.core.management.call_command` instead."
msgstr ""
"カスタム管理コマンドを実行するためにコード中から　``execute()`` を直接呼び出"
"す事は避けてください。代わりに :func:`~django.core.management.call_command` "
"を利用してください。"

msgid "The actual logic of the command. Subclasses must implement this method."
msgstr ""
"コマンドにおける実際の処理内容。サブクラスはこのメソッドを実装しなければなり"
"ません。"

msgid ""
"It may return a string which will be printed to ``stdout`` (wrapped by "
"``BEGIN;`` and ``COMMIT;`` if :attr:`output_transaction` is ``True``)."
msgstr ""
"``stdout`` に出力される文字列を返すことができます (:attr:"
"`output_transaction` が ``True`` の場合、文字列は ``BEGIN;`` と ``COMMIT;`` "
"で挟まれて出力されます)。"

msgid ""
"Uses the system check framework to inspect the entire Django project for "
"potential problems. Serious problems are raised as a :exc:`CommandError`; "
"warnings are output to ``stderr``; minor notifications are output to "
"``stdout``."
msgstr ""
"潜在的な問題のために Django プロジェクト全体を検証するシステムチェックフレー"
"ムワークを利用します。致命的な問題は :exc:`CommandError` 例外を発生し、警告"
"は ``stderr`` への出力、重要でない通知は ``stdout`` への出力となります。"

msgid ""
"If ``app_configs`` and ``tags`` are both ``None``, all system checks are "
"performed except deployment and database related checks. ``tags`` can be a "
"list of check tags, like ``compatibility`` or ``models``."
msgstr ""
"``app_configs`` および ``tags`` が共に ``None`` であった場合、デプロイメント"
"とデータベース関連のチェック以外の全てのシステムチェックが実行されます。"
"``tags`` はチェックタグ、例えば ``compatibility`` あるいは ``models`` 等、の"
"リストとなります。"

msgid ""
"You can pass ``include_deployment_checks=True`` to also perform deployment "
"checks, and list of database aliases in the ``databases`` to run database "
"related checks against them."
msgstr ""
"また、``include_deployment_checks=True`` を渡すとデプロイメントのチェックを行"
"い、``databases`` にデータベースエイリアスのリストを渡すとデータベース関連の"
"チェックを行います。"

msgid "``BaseCommand`` subclasses"
msgstr "``BaseCommand`` のサブクラス"

msgid ""
"A management command which takes one or more installed application labels as "
"arguments, and does something with each of them."
msgstr ""
"一つ以上のインストールされたアプリケーションラベルを引数として受け取り、それ"
"ぞれに対して何らかの処理を行う管理コマンド。"

msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~AppCommand.handle_app_config`, which will be called once "
"for each application."
msgstr ""
":meth:`~BaseCommand.handle` を実装する代わりに、サブクラスでは、アプリケー"
"ション毎に一度ずつだけ呼び出される :meth:`~AppCommand.handle_app_config` を実"
"装する必要があります。"

msgid ""
"Perform the command's actions for ``app_config``, which will be an :class:"
"`~django.apps.AppConfig` instance corresponding to an application label "
"given on the command line."
msgstr ""
"コマンドラインで渡されたアプリケーションラベル個々に対応している :class:"
"`~django.apps.AppConfig` のインスタンスである ``app_config`` に応じたコマンド"
"の処理を行います。"

msgid ""
"A management command which takes one or more arbitrary arguments (labels) on "
"the command line, and does something with each of them."
msgstr ""
"コマンドラインで1つ以上の任意の引数（ラベル）を受け取り、それぞれに対して何か"
"を行う管理コマンド。"

msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~LabelCommand.handle_label`, which will be called once for "
"each label."
msgstr ""
"サブクラスは、:meth:`~BaseCommand.handle` を実装するのではなく、ラベルごとに1"
"回呼び出される :meth:`~LabelCommand.handle_label` を実装する必要があります。"

msgid ""
"A string describing the arbitrary arguments passed to the command. The "
"string is used in the usage text and error messages of the command. Defaults "
"to ``'label'``."
msgstr ""
"コマンドに渡される任意引数について記述した文字列。この文字列はコマンドの使用"
"法やエラーメッセージに利用します。デフォルトは ``'label'`` です。"

msgid ""
"Perform the command's actions for ``label``, which will be the string as "
"given on the command line."
msgstr ""
"コマンドラインに渡された文字列である ``label`` に対応したコマンドの処理を行い"
"ます。"

msgid "Command exceptions"
msgstr "コマンドが発生させる例外"

msgid ""
"Exception class indicating a problem while executing a management command."
msgstr "管理コマンド実行中に発生した問題について示した例外クラス。"

msgid ""
"If this exception is raised during the execution of a management command "
"from a command line console, it will be caught and turned into a nicely-"
"printed error message to the appropriate output stream (i.e., ``stderr``); "
"as a result, raising this exception (with a sensible description of the "
"error) is the preferred way to indicate that something has gone wrong in the "
"execution of a command. It accepts the optional ``returncode`` argument to "
"customize the exit status for the management command to exit with, using :"
"func:`sys.exit`."
msgstr ""
"この例外がコマンドラインコンソールからの管理コマンドの実行中に発生した場合、"
"キャッチされて適切な出力ストリーム（つまり、``stderr``）に対して整形されたエ"
"ラーメッセージに変換されます。そのため、コマンドの実行中に何かが間違っている"
"ことを示す場合は、この例外を（エラーの理にかなった説明とともに）発生させるこ"
"とを推奨します。任意で ``returncode`` 引数を受け入れて、:func:`sys.exit` で管"
"理コマンドが終了する際の終了ステータスをカスタマイズできます。"

msgid ""
"If a management command is called from code through :func:`~django.core."
"management.call_command`, it's up to you to catch the exception when needed."
msgstr ""
":func:`~django.core.management.call_command` を介して管理コマンドが実行された"
"場合は、例外の捕捉をするかどうかは実装に依存します。"

msgid "How to create custom model fields"
msgstr "カスタムのモデルフィールドを作成する"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"The :doc:`model reference </topics/db/models>` documentation explains how to "
"use Django's standard field classes -- :class:`~django.db.models."
"CharField`, :class:`~django.db.models.DateField`, etc. For many purposes, "
"those classes are all you'll need. Sometimes, though, the Django version "
"won't meet your precise requirements, or you'll want to use a field that is "
"entirely different from those shipped with Django."
msgstr ""
":doc:`モデルリファレンス </topics/db/models>` ドキュメントでは、Djangoの標準"
"フィールドクラスである、 :class:`~django.db.models.CharField` や、 :class:"
"`~django.db.models.DateField` などの使い方を説明しています。多くの場合、これ"
"らのクラスがあれば十分です。ただし、Djangoのバージョンが正確な要件を満たして"
"いない場合や、Djangoに同梱されているものとはまったく異なるフィールドを使用し"
"たい場合があります。"

msgid ""
"Django's built-in field types don't cover every possible database column "
"type -- only the common types, such as ``VARCHAR`` and ``INTEGER``. For more "
"obscure column types, such as geographic polygons or even user-created types "
"such as `PostgreSQL custom types`_, you can define your own Django ``Field`` "
"subclasses."
msgstr ""
"Django の組み込みフィールド型は、データベースで利用可能な全てのカラム型をカ"
"バーしているわけではなく、 ``VARCHAR`` や ``INTEGER`` のような一般的な型のみ"
"に対応しています。地理的な多角形や `PostgreSQL カスタム型`_ のようなユーザが"
"作成した型など、より曖昧なカラム型については、独自の Django ``Field`` サブク"
"ラスを定義することができます。"

msgid ""
"Alternatively, you may have a complex Python object that can somehow be "
"serialized to fit into a standard database column type. This is another case "
"where a ``Field`` subclass will help you use your object with your models."
msgstr ""
"あるいは、複雑な Python オブジェクトを、標準的なデータベースのカラム型に合う"
"ようにシリアライズすることもできます。これもまた、``Field`` サブクラスがオブ"
"ジェクトをモデルで使用するのに役立つケースです。"

msgid "Our example object"
msgstr "私たちのサンプルオブジェクト"

msgid ""
"Creating custom fields requires a bit of attention to detail. To make things "
"easier to follow, we'll use a consistent example throughout this document: "
"wrapping a Python object representing the deal of cards in a hand of "
"Bridge_. Don't worry, you don't have to know how to play Bridge to follow "
"this example. You only need to know that 52 cards are dealt out equally to "
"four players, who are traditionally called *north*, *east*, *south* and "
"*west*.  Our class looks something like this::"
msgstr ""
"カスタムフィールドを作成するには、細部に少し注意する必要があります。わかりや"
"すくなるように、このドキュメントでは「ブリッジ Bridge_ の手札のやり取りを表す"
"Pythonオブジェクトの実装」を一貫した例として説明することにします。なお、この"
"実装例を理解するために、ブリッジのプレイルールを理解する必要はありません。52"
"枚のカードが、伝統的に *北* 、 *東* 、 *南* および *西* と呼ばれる4人のプレイ"
"ヤーに均等に配られることだけを覚えておいてください。クラスは以下のように実装"
"します:"

msgid ""
"This is an ordinary Python class, with nothing Django-specific about it. "
"We'd like to be able to do things like this in our models (we assume the "
"``hand`` attribute on the model is an instance of ``Hand``)::"
msgstr ""
"これはDjangoの仕様を使っていない、普通のPythonクラスです。モデルでこれと同じ"
"ようなことを実行できるようにしたいと思います（モデルの中の ``hand`` 属性は "
"``Hand`` インスタンスだと想定しています）"

msgid ""
"We assign to and retrieve from the ``hand`` attribute in our model just like "
"any other Python class. The trick is to tell Django how to handle saving and "
"loading such an object."
msgstr ""
"他のPythonクラスと同様に、モデルの ``hand`` 属性に割り当てたり、そこから取得"
"したりします。コツは、そのようなオブジェクトの保存と読み込みの処理方法を"
"Djangoに伝えることです。"

msgid ""
"In order to use the ``Hand`` class in our models, we **do not** have to "
"change this class at all. This is ideal, because it means you can easily "
"write model support for existing classes where you cannot change the source "
"code."
msgstr ""
"モデルで ``Hand`` クラスを使用するために、**このクラスを変更する必要はありま"
"せん**。 これは、ソースコードを変更できない既存のクラスのモデルサポートを簡単"
"に記述できるため、理想的です。"

msgid ""
"You might only be wanting to take advantage of custom database column types "
"and deal with the data as standard Python types in your models; strings, or "
"floats, for example. This case is similar to our ``Hand`` example and we'll "
"note any differences as we go along."
msgstr ""
"例えば文字列や浮動小数点数のような、Pythonの標準的な型としてカスタムデータ"
"ベースのカラム型を扱い、データを利用したいこともあります。このケースは "
"``Hand`` の例と似ているので、違いを後で説明することにします。"

msgid "Background theory"
msgstr "背景理論"

msgid "Database storage"
msgstr "データベースストレージ"

msgid ""
"Let's start with model fields. If you break it down, a model field provides "
"a way to take a normal Python object -- string, boolean, ``datetime``, or "
"something more complex like ``Hand`` -- and convert it to and from a format "
"that is useful when dealing with the database. (Such a format is also useful "
"for serialization, but as we'll see later, that is easier once you have the "
"database side under control)."
msgstr ""
"モデルフィールドから始めましょう。分解すると、モデルフィールドは通常のPython"
"オブジェクト（文字列、ブール値、 ``datetime`` 、あるいは ``Hand`` のような複"
"雑なもの）を、データベースを扱うときに便利な形式に変換する方法を提供します。"
"(このような形式はシリアライズの際にも便利ですが、後で説明するように、データ"
"ベース側を制御できるようになれば、その方が簡単です)。"

msgid ""
"Fields in a model must somehow be converted to fit into an existing database "
"column type. Different databases provide different sets of valid column "
"types, but the rule is still the same: those are the only types you have to "
"work with. Anything you want to store in the database must fit into one of "
"those types."
msgstr ""
"モデルのフィールドは、既存のデータベースのカラムの型に適合するように何らかの"
"方法で変換されなければなりません。データベースによって有効なカラム型のセット"
"は異なりますが、利用できる型が決まっているという決まりは同じです。データベー"
"スに保存したいものはすべて、これらの型のいずれかに適合しなければなりません。"

msgid ""
"Normally, you're either writing a Django field to match a particular "
"database column type, or you will need a way to convert your data to, say, a "
"string."
msgstr ""
"通常、特定のデータベースの列タイプに一致するようにDjangoフィールドを作成する"
"か、データを文字列などに変換する方法が必要になります。"

msgid ""
"For our ``Hand`` example, we could convert the card data to a string of 104 "
"characters by concatenating all the cards together in a predetermined order "
"-- say, all the *north* cards first, then the *east*, *south* and *west* "
"cards. So ``Hand`` objects can be saved to text or character columns in the "
"database."
msgstr ""
"``Hand`` の例では、すべてのカードをあらかじめ決められた順序で連結することで、"
"カードデータを104文字の文字列に変換できます。たとえば、すべての *北* カード、"
"次に *東* 、 *南* および *西* カードです。 したがって、``Hand`` オブジェクト"
"をデータベースのテキストまたは文字列に保存できます。"

msgid "What does a field class do?"
msgstr "フィールドクラスが行うこと"

msgid ""
"All of Django's fields (and when we say *fields* in this document, we always "
"mean model fields and not :doc:`form fields </ref/forms/fields>`) are "
"subclasses of :class:`django.db.models.Field`. Most of the information that "
"Django records about a field is common to all fields -- name, help text, "
"uniqueness and so forth. Storing all that information is handled by "
"``Field``. We'll get into the precise details of what ``Field`` can do later "
"on; for now, suffice it to say that everything descends from ``Field`` and "
"then customizes key pieces of the class behavior."
msgstr ""
"Djangoのすべてのフィールド（およびこのドキュメントで *フィールド (Field)* と"
"言うときは、常に :doc:`フォームフィールド </ref/forms/fields>` ではなくモデル"
"フィールドを意味します）は :class:`django.db.models.Field` のサブクラスで"
"す。 Django がフィールドについて記録する情報のほとんどは、名前、ヘルプテキス"
"ト、一意性など、すべてのフィールドに共通です。すべての情報の保存は ``Field`` "
"によって処理されます。``Field`` ができることの詳細については、後で詳しく説明"
"します。とりあえず、すべてが ``Field`` から派生し、クラスの動作の重要な部分を"
"カスタマイズすると言うだけで十分です。"

msgid ""
"It's important to realize that a Django field class is not what is stored in "
"your model attributes. The model attributes contain normal Python objects. "
"The field classes you define in a model are actually stored in the ``Meta`` "
"class when the model class is created (the precise details of how this is "
"done are unimportant here). This is because the field classes aren't "
"necessary when you're just creating and modifying attributes. Instead, they "
"provide the machinery for converting between the attribute value and what is "
"stored in the database or sent to the :doc:`serializer </topics/"
"serialization>`."
msgstr ""
"Djangoフィールドクラスは、モデル属性に格納されているものではないことを理解す"
"ることが重要です。 モデル属性には通常のPythonオブジェクトが含まれます。 モデ"
"ルで定義するフィールドクラスは、モデルクラスが作成されるときに実際に "
"``Meta`` クラスに保存されます（これを行う方法の正確な詳細はここでは重要ではあ"
"りません）。 これは、属性を作成および変更するだけの場合、フィールドクラスは必"
"要ないためです。 代わりに、属性値とデータベースに保存されているもの、または :"
"doc:`シリアライザ </topics/serialization>` に送信されるものとの間で変換するた"
"めの機構を提供します。"

msgid ""
"Keep this in mind when creating your own custom fields. The Django ``Field`` "
"subclass you write provides the machinery for converting between your Python "
"instances and the database/serializer values in various ways (there are "
"differences between storing a value and using a value for lookups, for "
"example). If this sounds a bit tricky, don't worry -- it will become clearer "
"in the examples below. Just remember that you will often end up creating two "
"classes when you want a custom field:"
msgstr ""
"独自のカスタムフィールドを作成する場合は、このことに留意してください。 作成す"
"るDjangoの ``Field`` サブクラスは、Pythonインスタンスとデータベース/シリアラ"
"イザーの値をさまざまな方法で変換するための機構を提供します（たとえば、値の保"
"存とルックアップでの値の使用には違いがあります）。 これが少しトリッキーに聞こ"
"える場合でも、心配しないでください。以下の例で明らかになります。 カスタム"
"フィールドが必要な場合、しばしば2つのクラスを作成することになります:"

msgid ""
"The first class is the Python object that your users will manipulate. They "
"will assign it to the model attribute, they will read from it for displaying "
"purposes, things like that. This is the ``Hand`` class in our example."
msgstr ""
"最初のクラスは、ユーザーが操作するPythonオブジェクトです。彼らはそれをモデル"
"属性に割り当て、そのようなものを表示するためにそれから読み込みます。これは、"
"この例の ``Hand`` クラスです。"

msgid ""
"The second class is the ``Field`` subclass. This is the class that knows how "
"to convert your first class back and forth between its permanent storage "
"form and the Python form."
msgstr ""
"2番目のクラスは ``Field`` サブクラスです。これは、最初のクラスを永続ストレー"
"ジ形式とPython形式の間で変換する方法を知っているクラスです。"

msgid "Writing a field subclass"
msgstr "フィールドサブクラスを書く"

msgid ""
"When planning your :class:`~django.db.models.Field` subclass, first give "
"some thought to which existing :class:`~django.db.models.Field` class your "
"new field is most similar to. Can you subclass an existing Django field and "
"save yourself some work? If not, you should subclass the :class:`~django.db."
"models.Field` class, from which everything is descended."
msgstr ""
":class:`~django.db.models.Field` のサブクラス化を考える前に、まず、新しい"
"フィールドが、既存のどの :class:`~django.db.models.Field` クラスに最も似てい"
"るかを考えてください。既存の Django フィールドをサブクラス化して、手間を省く"
"ことはできませんか？そうでなければ、すべてのフィールドの基底となる、 :class:"
"`~django.db.models.Field` クラスをサブクラス化すべきです。"

msgid ""
"Initializing your new field is a matter of separating out any arguments that "
"are specific to your case from the common arguments and passing the latter "
"to the ``__init__()`` method of :class:`~django.db.models.Field` (or your "
"parent class)."
msgstr ""
"新しいフィールドの初期化は、ケース固有の引数を共通の引数から分離し、後者を :"
"class:`~django.db.models.Field` の ``__init__()`` メソッドに渡すことです。 "
"（または親クラスに対して）。"

msgid ""
"In our example, we'll call our field ``HandField``. (It's a good idea to "
"call your :class:`~django.db.models.Field` subclass ``<Something>Field``, so "
"it's easily identifiable as a :class:`~django.db.models.Field` subclass.) It "
"doesn't behave like any existing field, so we'll subclass directly from :"
"class:`~django.db.models.Field`::"
msgstr ""
"この例では、フィールドを ``HandField`` と呼ぶことにします。（ :class:"
"`~django.db.models.Field` サブクラス ``<Something>Field`` と名付けることをオ"
"ススメします。 :class:`~django.db.models.Field` サブクラスであることが簡単に"
"わかるためです）\n"
"既存のフィールドのようには動作しないため、この例では :class:`~django.db."
"models.Field` から直接サブクラス化しています。"

msgid ""
"Our ``HandField`` accepts most of the standard field options (see the list "
"below), but we ensure it has a fixed length, since it only needs to hold 52 "
"card values plus their suits; 104 characters in total."
msgstr ""
"私たちの ``HandField`` は、ほとんどの標準フィールドオプションを受け入れます"
"（以下のリストを参照してください）。しかし、52枚のカードの値とそれらのスート"
"（マーク）を保持するだけで十分なため、固定長を持つようにします。合計で104文字"
"です。"

msgid ""
"Many of Django's model fields accept options that they don't do anything "
"with. For example, you can pass both :attr:`~django.db.models.Field."
"editable` and :attr:`~django.db.models.DateField.auto_now` to a :class:"
"`django.db.models.DateField` and it will ignore the :attr:`~django.db.models."
"Field.editable` parameter (:attr:`~django.db.models.DateField.auto_now` "
"being set implies ``editable=False``). No error is raised in this case."
msgstr ""
"多くのDjangoのモデルフィールドは、受け取ってもなにも起こらないオプションを受"
"け取ります。例えば、 :attr:`~django.db.models.Field.editable` と :attr:"
"`~django.db.models.DateField.auto_now` は :class:`django.db.models."
"DateField` に渡すことができますが、 :attr:`~django.db.models.Field.editable` "
"のパラメーターを無視します。（ :attr:`~django.db.models.DateField.auto_now` "
"には ``editable=False`` がセットされています）この場合、エラーは発生しませ"
"ん。"

msgid ""
"This behavior simplifies the field classes, because they don't need to check "
"for options that aren't necessary. They pass all the options to the parent "
"class and then don't use them later on. It's up to you whether you want your "
"fields to be more strict about the options they select, or to use the more "
"permissive behavior of the current fields."
msgstr ""
"この振る舞いはフィールドクラスをシンプルにします。なぜなら、必要のないオプ"
"ションをチェックする必要がないからです。すべてのオプションを親クラスに渡し、"
"オプションを使用しないのです。フィールドにより厳密にオプションを扱ってほしい"
"のか、より柔軟なカレントフィールドの動作を使うのかは、使う人次第です。"

msgid "The ``Field.__init__()`` method takes the following parameters:"
msgstr "``Field.__init__()`` メソッドは以下のパラメーターを取ります:"

msgid ":attr:`~django.db.models.Field.verbose_name`"
msgstr ":attr:`~django.db.models.Field.verbose_name`"

msgid "``name``"
msgstr "``name``"

msgid ":attr:`~django.db.models.Field.primary_key`"
msgstr ":attr:`~django.db.models.Field.primary_key`"

msgid ":attr:`~django.db.models.CharField.max_length`"
msgstr ":attr:`~django.db.models.CharField.max_length`"

msgid ":attr:`~django.db.models.Field.unique`"
msgstr ":attr:`~django.db.models.Field.unique`"

msgid ":attr:`~django.db.models.Field.blank`"
msgstr ":attr:`~django.db.models.Field.blank`"

msgid ":attr:`~django.db.models.Field.null`"
msgstr ":attr:`~django.db.models.Field.null`"

msgid ":attr:`~django.db.models.Field.db_index`"
msgstr ":attr:`~django.db.models.Field.db_index`"

msgid ""
"``rel``: Used for related fields (like :class:`ForeignKey`). For advanced "
"use only."
msgstr ""
"``rel``: 関連フィールドに使用される (:class:`ForeignKey` など)。上級者向けで"
"す。"

msgid ":attr:`~django.db.models.Field.default`"
msgstr ":attr:`~django.db.models.Field.default`"

msgid ":attr:`~django.db.models.Field.editable`"
msgstr ":attr:`~django.db.models.Field.editable`"

msgid ""
"``serialize``: If ``False``, the field will not be serialized when the model "
"is passed to Django's :doc:`serializers </topics/serialization>`. Defaults "
"to ``True``."
msgstr ""
"``serialize``: ``False`` の場合、Django の :doc:`シリアライザ </topics/"
"serialization>` にモデルが渡されたときに、フィールドをシリアライズしません。"
"デフォルトの値は ``True`` です。"

msgid ":attr:`~django.db.models.Field.unique_for_date`"
msgstr ":attr:`~django.db.models.Field.unique_for_date`"

msgid ":attr:`~django.db.models.Field.unique_for_month`"
msgstr ":attr:`~django.db.models.Field.unique_for_month`"

msgid ":attr:`~django.db.models.Field.unique_for_year`"
msgstr ":attr:`~django.db.models.Field.unique_for_year`"

msgid ":attr:`~django.db.models.Field.choices`"
msgstr ":attr:`~django.db.models.Field.choices`"

msgid ":attr:`~django.db.models.Field.help_text`"
msgstr ":attr:`~django.db.models.Field.help_text`"

msgid ":attr:`~django.db.models.Field.db_column`"
msgstr ":attr:`~django.db.models.Field.db_column`"

msgid ""
":attr:`~django.db.models.Field.db_tablespace`: Only for index creation, if "
"the backend supports :doc:`tablespaces </topics/db/tablespaces>`. You can "
"usually ignore this option."
msgstr ""
"もしバックエンドが :doc:`テーブル空間 (tablespace) </topics/db/tablespaces>` "
"をサポートする場合、:attr:`~django.db.models.Field.db_tablespace`: はインデッ"
"クスの作成のみ行います。通常、このオプションは無視できます。"

msgid ""
":attr:`~django.db.models.Field.auto_created`: ``True`` if the field was "
"automatically created, as for the :class:`~django.db.models.OneToOneField` "
"used by model inheritance. For advanced use only."
msgstr ""
"モデル継承で使用される :class:`~django.db.models.OneToOneField` のように、"
"フィールドが自動的に作成された場合は、:attr:`~django.db.models.Field."
"auto_created` は ``True`` です。 高度な使用向けです。"

msgid ""
"All of the options without an explanation in the above list have the same "
"meaning they do for normal Django fields. See the :doc:`field documentation "
"</ref/models/fields>` for examples and details."
msgstr ""
"上記のリストに説明のないオプションはすべて、通常のDjangoフィールドと同じ意味"
"を持ちます。例と詳細については、 :doc:`フィールドのドキュメント </ref/models/"
"fields>` を参照してください。"

msgid "Field deconstruction"
msgstr "フィールドの解体"

msgid ""
"The counterpoint to writing your ``__init__()`` method is writing the :meth:"
"`~.Field.deconstruct` method. It's used during :doc:`model migrations </"
"topics/migrations>` to tell Django how to take an instance of your new field "
"and reduce it to a serialized form - in particular, what arguments to pass "
"to ``__init__()`` to recreate it."
msgstr ""
"``__init__()`` メソッドとは対照的なものとして、 :meth:`~.Field.deconstruct` "
"メソッドがあります。これは :doc:`モデルのマイグレーション </topics/"
"migrations>` 中に使用されるもので、新しいフィールドのインスタンスを取得する方"
"法、インスタンスをどのようにシリアライズして減らすかの方法をDjangoに指示しま"
"す。特に、インスタンスを再生成するためにどの引数を ``__init__()`` に渡すかを"
"指示します。"

msgid ""
"If you haven't added any extra options on top of the field you inherited "
"from, then there's no need to write a new ``deconstruct()`` method. If, "
"however, you're changing the arguments passed in ``__init__()`` (like we are "
"in ``HandField``), you'll need to supplement the values being passed."
msgstr ""
"継承元のフィールドの上に追加のオプションを追加していない場合、新しい "
"``deconstruct()`` メソッドを記述する必要はありません。 ただし、"
"``__init__()`` で渡される引数を変更する場合（``HandField`` のように）、渡され"
"る値を補足する必要があります。"

msgid ""
"``deconstruct()`` returns a tuple of four items: the field's attribute name, "
"the full import path of the field class, the positional arguments (as a "
"list), and the keyword arguments (as a dict). Note this is different from "
"the ``deconstruct()`` method :ref:`for custom classes <custom-deconstruct-"
"method>` which returns a tuple of three things."
msgstr ""
"``deconstruct()`` 関数は4要素のタプルを返します。それは、フィールドの属性、イ"
"ンポートするフィールドクラスのフルパス、位置引数（リスト型）、キーワード引数"
"（辞書型）です。この関数は ``deconstruct()`` メソッドとは異なることに注意して"
"ください。 ``deconstruct()`` メソッドは :ref:`カスタムクラスのためのもの "
"<custom-deconstruct-method>` で、3要素のタプルを返します。"

msgid ""
"As a custom field author, you don't need to care about the first two values; "
"the base ``Field`` class has all the code to work out the field's attribute "
"name and import path. You do, however, have to care about the positional and "
"keyword arguments, as these are likely the things you are changing."
msgstr ""
"カスタムフィールドの作成者は、最初の2つの値を気にする必要はありません。 ベー"
"ス ``Field`` クラスには、フィールドの属性名とインポートパスを計算するためのす"
"べてのコードがあります。 ただし、位置引数とキーワード引数は、変更する可能性が"
"高いため、注意する必要があります。"

msgid ""
"For example, in our ``HandField`` class we're always forcibly setting "
"max_length in ``__init__()``. The ``deconstruct()`` method on the base "
"``Field`` class will see this and try to return it in the keyword arguments; "
"thus, we can drop it from the keyword arguments for readability::"
msgstr ""
"たとえば、 ``HandField`` クラスでは、常に ``__init__()`` でmax_lengthを強制的"
"に設定しています。 ``Field`` ベースクラスの ``deconstruct()`` メソッドはこれ"
"を見て、キーワード引数でそれを返そうとします。 したがって、読みやすくするため"
"にキーワード引数から削除できます::"

msgid ""
"If you add a new keyword argument, you need to write code in "
"``deconstruct()`` that puts its value into ``kwargs`` yourself. You should "
"also omit the value from ``kwargs`` when it isn't necessary to reconstruct "
"the state of the field, such as when the default value is being used::"
msgstr ""
"新しいキーワード引数を追加する場合、自分で ``kwargs`` に値を設定する "
"``deconstruct()`` でコードを記述する必要があります。 また、デフォルト値が使用"
"されている場合など、フィールドの状態を再構築する必要がない場合は、``kwargs`` "
"から値を省略してください::"

msgid ""
"More complex examples are beyond the scope of this document, but remember - "
"for any configuration of your Field instance, ``deconstruct()`` must return "
"arguments that you can pass to ``__init__`` to reconstruct that state."
msgstr ""
"より複雑な例はこのドキュメントの範囲外ですが、これだけは覚えておいてください "
"- ``deconstruct()`` は、フィールドインスタンスのどのような設定に対しても、そ"
"の状態を再構築するために ``__init__`` に渡す引数を返さなければなりません。"

msgid ""
"Pay extra attention if you set new default values for arguments in the "
"``Field`` superclass; you want to make sure they're always included, rather "
"than disappearing if they take on the old default value."
msgstr ""
"``Field`` スーパークラス内の引数に新しいデフォルト値を設定する場合には、特に"
"注意してください。古いデフォルト値を使うと消えるようにするのではなく、デフォ"
"ルト値が常に含まれるようにしてください。"

msgid ""
"In addition, try to avoid returning values as positional arguments; where "
"possible, return values as keyword arguments for maximum future "
"compatibility. If you change the names of things more often than their "
"position in the constructor's argument list, you might prefer positional, "
"but bear in mind that people will be reconstructing your field from the "
"serialized version for quite a while (possibly years), depending how long "
"your migrations live for."
msgstr ""
"また、値を位置引数として返さないようにしてください。 可能な限り、将来の互換性"
"を最大限にするために、キーワード引数として値を返してください。コンストラクタ"
"の引数リストにおける位置よりも、頻繁に引数の名前を変更する場合、位置引数で指"
"定しがちになるかもしれません。しかし、利用者はかなり長期間（おそらく何年も）"
"にわたって、シリアライズされたバージョンからフィールドを再構築することに注意"
"してください。これはバージョンのライフサイクルの長さにも依存します。"

msgid ""
"You can see the results of deconstruction by looking in migrations that "
"include the field, and you can test deconstruction in unit tests by "
"deconstructing and reconstructing the field::"
msgstr ""
"フィールドを含む移行を調べることで分解の結果を確認できます。フィールドを分解"
"して再構築することで、単体テストで分解をテストできます::"

msgid "Field attributes not affecting database column definition"
msgstr "データベースのカラム定義に影響しないフィールド属性"

msgid ""
"You can override ``Field.non_db_attrs`` to customize attributes of a field "
"that don't affect a column definition. It's used during model migrations to "
"detect no-op ``AlterField`` operations."
msgstr ""
"``Field.non_db_attrs`` をオーバーライドすることで、カラム定義に影響しない"
"フィールドの属性をカスタマイズできます。これはモデルのマイグレーションの間に"
"使われ、no-opの ``AlterField`` 操作を検出します。"

msgid "For example::"
msgstr "例えば:"

msgid "Changing a custom field's base class"
msgstr "カスタムフィールドのベースクラスを変更する"

msgid ""
"You can't change the base class of a custom field because Django won't "
"detect the change and make a migration for it. For example, if you start "
"with::"
msgstr ""
"カスタムフィールドの基底クラスを変更することはできません。なぜなら、 Django "
"はその変更を検知できず、マイグレーションも行わないからです。例えば次のように"
"書き始めたとして、:"

msgid ""
"and then decide that you want to use ``TextField`` instead, you can't change "
"the subclass like this::"
msgstr ""
"そして、代わりに ``TextField`` を使用することに決めた場合、サブクラスを次のよ"
"うに変更することはできません::"

msgid ""
"Instead, you must create a new custom field class and update your models to "
"reference it::"
msgstr ""
"代わりに、新しいカスタムフィールドクラスを作成し、モデルを更新してそれを参照"
"する必要があります::"

msgid ""
"As discussed in :ref:`removing fields <migrations-removing-model-fields>`, "
"you must retain the original ``CustomCharField`` class as long as you have "
"migrations that reference it."
msgstr ""
":ref:`フィールドを削除する <migrations-removing-model-fields>` で説明したよう"
"に、それを参照するマイグレーションがある限り、元の ``CustomCharField`` クラス"
"を保持する必要があります。"

msgid "Documenting your custom field"
msgstr "カスタムフィールドのドキュメントを書く"

msgid ""
"As always, you should document your field type, so users will know what it "
"is. In addition to providing a docstring for it, which is useful for "
"developers, you can also allow users of the admin app to see a short "
"description of the field type via the :doc:`django.contrib.admindocs </ref/"
"contrib/admin/admindocs>` application. To do this provide descriptive text "
"in a :attr:`~Field.description` class attribute of your custom field. In the "
"above example, the description displayed by the ``admindocs`` application "
"for a ``HandField`` will be 'A hand of cards (bridge style)'."
msgstr ""
"いつものように、フィールドタイプのドキュメントを作成し、それがどんなものかを"
"ユーザがわかるようにしましょう。開発者にとって便利な docstring を提供するだけ"
"でなく、 :doc:`django.contrib.admindocs </ref/contrib/admin/admindocs>` アプ"
"リケーションを通して、管理者アプリのユーザにフィールドタイプの短い説明を表示"
"することもできます。これを行うには、カスタムフィールドの :attr:`~Field."
"description` クラス属性に説明文を記述します。上記の例では、 ``admindocs`` ア"
"プリケーションが表示する ``HandField`` の説明は 'A hand of cards (bridge "
"style)' （日本語で「手札(ブリッジスタイル)」の意）となります。"

msgid ""
"In the :mod:`django.contrib.admindocs` display, the field description is "
"interpolated with ``field.__dict__`` which allows the description to "
"incorporate arguments of the field. For example, the description for :class:"
"`~django.db.models.CharField` is::"
msgstr ""
":mod:`django.contrib.admindocs` の表示では、フィールドの説明は ``field."
"__dict__`` によって補完され、説明文にフィールドの引数を組み込むことができま"
"す。例えば、 :class:`~django.db.models.CharField` の説明は次のようになります:"

msgid "Useful methods"
msgstr "便利なメソッド"

msgid ""
"Once you've created your :class:`~django.db.models.Field` subclass, you "
"might consider overriding a few standard methods, depending on your field's "
"behavior. The list of methods below is in approximately decreasing order of "
"importance, so start from the top."
msgstr ""
":class:`~django.db.models.Field` サブクラスを作成したら、フィールドの動作に応"
"じて、いくつかの標準メソッドをオーバーライドすることを検討できます。以下のメ"
"ソッドのリストは、おおよそ重要度の高いものから順に並んでいるので、上から始め"
"てください。"

msgid "Custom database types"
msgstr "カスタムデータベースタイプ"

msgid ""
"Say you've created a PostgreSQL custom type called ``mytype``. You can "
"subclass ``Field`` and implement the :meth:`~Field.db_type` method, like so::"
msgstr ""
"``mytype`` というPostgreSQLのカスタム型を作成したとします。このとき、 "
"``Field`` をサブクラス化し、 :meth:`~Field.db_type` 関数を以下のように実装で"
"きます:"

msgid ""
"Once you have ``MytypeField``, you can use it in any model, just like any "
"other ``Field`` type::"
msgstr ""
"``MytypeField`` を取得したら、他の ``Field`` タイプと同様に、どのモデルでも使"
"用できます:"

msgid ""
"If you aim to build a database-agnostic application, you should account for "
"differences in database column types. For example, the date/time column type "
"in PostgreSQL is called ``timestamp``, while the same column in MySQL is "
"called ``datetime``. You can handle this in a :meth:`~Field.db_type` method "
"by checking the ``connection.vendor`` attribute. Current built-in vendor "
"names are: ``sqlite``, ``postgresql``, ``mysql``, and ``oracle``."
msgstr ""
"データベースに依存しないアプリケーションを構築することを目指している場合、"
"データベースカラムの型の違いを考慮する必要があります。たとえば、PostgreSQL の"
"日付や時刻のカラムの型は ``timestamp`` と呼ばれますが、同じカラムが MySQL で"
"は ``datetime`` と呼ばれます。この違いは :meth:`~Field.db_type` メソッド内で "
"``connection.vendor`` 属性をチェックすることでハンドリングできます。現在のビ"
"ルトインされているベンダー名は、``sqlite``、``postgresql``、``mysql``、"
"``oracle`` です。"

msgid ""
"The :meth:`~Field.db_type` and :meth:`~Field.rel_db_type` methods are called "
"by Django when the framework constructs the ``CREATE TABLE`` statements for "
"your application -- that is, when you first create your tables. The methods "
"are also called when constructing a ``WHERE`` clause that includes the model "
"field -- that is, when you retrieve data using QuerySet methods like "
"``get()``, ``filter()``, and ``exclude()`` and have the model field as an "
"argument."
msgstr ""
"Django は、アプリケーションのために ``CREATE TABLE`` ステートメントを構築する"
"とき、つまり最初にテーブルを作成するときに :meth:`~Field.db_type` と :meth:"
"`~Field.rel_db_type` メソッドを呼びます。このメソッドは、モデルのフィールドを"
"含む ``WHERE`` 句を構築するとき、つまり QuerySet の ``get()``、``filter()``、"
"``exclude()`` などのメソッドを使用してデータを取得するときにも呼ばれます。"

msgid ""
"Some database column types accept parameters, such as ``CHAR(25)``, where "
"the parameter ``25`` represents the maximum column length. In cases like "
"these, it's more flexible if the parameter is specified in the model rather "
"than being hard-coded in the ``db_type()`` method. For example, it wouldn't "
"make much sense to have a ``CharMaxlength25Field``, shown here::"
msgstr ""
"一部のデータベースカラムの型は ``CHAR(25)`` などのパラメータを受け付けます。"
"ここで、パラメータ ``25`` はカラムの最大長を表します。このような場合、パラ"
"メータを ``db_type()`` メソッド内でハードコードするよりも、モデル内で指定した"
"ほうがより柔軟になります。たとえば、ここで示すように、"
"``CharMaxlength25Field`` のようなフィールドを持つ意味はあまりありません。"

msgid ""
"The better way of doing this would be to make the parameter specifiable at "
"run time -- i.e., when the class is instantiated. To do that, implement "
"``Field.__init__()``, like so::"
msgstr ""
"これを行うためのよりよい方法は、実行時に、つまりクラスがインスタンス化される"
"ときにパラメータを指定できるようにする方法です。そのためには、次のように "
"``Field.__init__()`` を実装します。"

msgid ""
"Finally, if your column requires truly complex SQL setup, return ``None`` "
"from :meth:`.db_type`. This will cause Django's SQL creation code to skip "
"over this field. You are then responsible for creating the column in the "
"right table in some other way, but this gives you a way to tell Django to "
"get out of the way."
msgstr ""
"最後に、カラムが本当に複雑な SQL のセットアップを必要とする場合、:meth:`."
"db_type` から ``None`` を返してください。こうすると、Django の SQL 生成コード"
"がこのフィールドをスキップするようになります。その後、別の方法で正しいテーブ"
"ルにカラムを作成すする必要がありますが、Django に邪魔をしないように伝えること"
"ができます。"

msgid ""
"The :meth:`~Field.rel_db_type` method is called by fields such as "
"``ForeignKey`` and ``OneToOneField`` that point to another field to "
"determine their database column data types. For example, if you have an "
"``UnsignedAutoField``, you also need the foreign keys that point to that "
"field to use the same data type::"
msgstr ""
":meth:`~Field.rel_db_type` メソッドは、他のフィールドを指す ``ForeignKey`` "
"や ``OneToOneField`` などのフィールドによって、データベースのカラムのデータ型"
"を特定するために呼ばれます。たとえば、``UnsignedAutoField`` がある場合、同じ"
"データ型を使うためにそのフィールドを指す外部キーも必要になります。"

msgid "Converting values to Python objects"
msgstr "変数を Python オブジェクトに変換する"

msgid ""
"If your custom :class:`~Field` class deals with data structures that are "
"more complex than strings, dates, integers, or floats, then you may need to "
"override :meth:`~Field.from_db_value` and :meth:`~Field.to_python`."
msgstr ""
"もしカスタムの :class:`~Field` クラスが文字列、日付、整数、または浮動小数点数"
"よりも複雑なデータ構造を扱う場合は、 :meth:`~Field.from_db_value` と :meth:"
"`~Field.to_python` をオーバーライドする必要があるかもしれません。"

msgid ""
"If present for the field subclass, ``from_db_value()`` will be called in all "
"circumstances when the data is loaded from the database, including in "
"aggregates and :meth:`~django.db.models.query.QuerySet.values` calls."
msgstr ""
"フィールドのサブクラスに存在する場合、データがデータベースから読み込まれるす"
"べての状況で、 ``from_db_value()`` が呼び出されます。これには集計や :meth:"
"`~django.db.models.query.QuerySet.values` の呼び出しも含まれます。"

msgid ""
"``to_python()`` is called by deserialization and during the :meth:`~django."
"db.models.Model.clean` method used from forms."
msgstr ""
"``to_python()`` は、デシリアライズ時やフォームから使用される :meth:`~django."
"db.models.Model.clean` メソッドの中で呼び出されます。"

msgid ""
"As a general rule, ``to_python()`` should deal gracefully with any of the "
"following arguments:"
msgstr ""
"一般的なルールとして、 ``to_python()`` は以下の引数を適切に処理するべきです。"

msgid ""
"An instance of the correct type (e.g., ``Hand`` in our ongoing example)."
msgstr "正しいタイプのインスタンス（例：このページの例でいう ``Hand`` ）。"

msgid "A string"
msgstr "文字列"

msgid "``None`` (if the field allows ``null=True``)"
msgstr "``None`` (フィールドが ``null=True`` を許す場合)"

msgid ""
"In our ``HandField`` class, we're storing the data as a ``VARCHAR`` field in "
"the database, so we need to be able to process strings and ``None`` in the "
"``from_db_value()``. In ``to_python()``, we need to also handle ``Hand`` "
"instances::"
msgstr ""
"私たちの ``HandField`` クラスでは、データをデータベースの ``VARCHAR`` フィー"
"ルドとして保存しているため、 ``from_db_value()`` で文字列と ``None`` を処理で"
"きる必要があります。 ``to_python()`` では、 ``Hand`` のインスタンスも処理する"
"必要があります。"

msgid ""
"Notice that we always return a ``Hand`` instance from these methods. That's "
"the Python object type we want to store in the model's attribute."
msgstr ""
"これらのメソッドからは常に ``Hand`` インスタンスが返されることに注意してくだ"
"さい。これは、モデルの属性に保存したいPythonオブジェクトの型です。"

msgid ""
"For ``to_python()``, if anything goes wrong during value conversion, you "
"should raise a :exc:`~django.core.exceptions.ValidationError` exception."
msgstr ""
"``to_python()`` において、値の変換中に何か問題が発生した場合は、 :exc:"
"`~django.core.exceptions.ValidationError` 例外を発生させる必要があります。"

msgid "Converting Python objects to query values"
msgstr "Python オブジェクトをクエリ変数に変換する"

msgid ""
"Since using a database requires conversion in both ways, if you override :"
"meth:`~Field.from_db_value` you also have to override :meth:`~Field."
"get_prep_value` to convert Python objects back to query values."
msgstr ""
"データベースを使用するには両方の変換が必要なので、 :meth:`~Field."
"from_db_value` をオーバーライドする場合は、 :meth:`~Field.get_prep_value` も"
"オーバーライドして Python オブジェクトをクエリの値に戻す必要があります。"

msgid ""
"If your custom field uses the ``CHAR``, ``VARCHAR`` or ``TEXT`` types for "
"MySQL, you must make sure that :meth:`.get_prep_value` always returns a "
"string type. MySQL performs flexible and unexpected matching when a query is "
"performed on these types and the provided value is an integer, which can "
"cause queries to include unexpected objects in their results. This problem "
"cannot occur if you always return a string type from :meth:`.get_prep_value`."
msgstr ""
"カスタムフィールドでMySQLの ``CHAR`` 、``VARCHAR`` 、``TEXT`` 型を使用する場"
"合は、 :meth:`.get_prep_value` が常に文字列型を返すようにする必要があります。"
"MySQL はこれらの型に対して整数を指定してクエリを実行したとき、柔軟で想定困難"
"なマッチングを行うため、クエリの結果に予想外のオブジェクトが含まれてしまうこ"
"とがあります。この問題は :meth:`.get_prep_value` から常に文字列型を返せば発生"
"しません。"

msgid "Converting query values to database values"
msgstr "クエリの変数をデータベースの変数に変換する"

msgid ""
"Some data types (for example, dates) need to be in a specific format before "
"they can be used by a database backend. :meth:`~Field.get_db_prep_value` is "
"the method where those conversions should be made. The specific connection "
"that will be used for the query is passed as the ``connection`` parameter. "
"This allows you to use backend-specific conversion logic if it is required."
msgstr ""
"いくつかのデータ型(例えば、日付)はデータベースのバックエンドで使用する前に特"
"定の形式にする必要があります。 :meth:`~Field.get_db_prep_value` はこれらの変"
"換を行うメソッドです。クエリに使用される特定の接続は ``connection`` パラメー"
"タとして渡されます。これにより、必要に応じてバックエンド固有の変換ロジックを"
"使用できます。"

msgid ""
"For example, Django uses the following method for its :class:`BinaryField`::"
msgstr "例えば、Django は :class:`BinaryField` で以下のメソッドを使います:"

msgid ""
"In case your custom field needs a special conversion when being saved that "
"is not the same as the conversion used for normal query parameters, you can "
"override :meth:`~Field.get_db_prep_save`."
msgstr ""
"カスタムフィールドを保存する際に、通常のクエリパラメータで使われる変換とは別"
"の特別な変換が必要な場合、 :meth:`~Field.get_db_prep_save` をオーバーライドで"
"きます。"

msgid "Preprocessing values before saving"
msgstr "保存する前に値を前処理する場合"

msgid ""
"If you want to preprocess the value just before saving, you can use :meth:"
"`~Field.pre_save`. For example, Django's :class:`~django.db.models."
"DateTimeField` uses this method to set the attribute correctly in the case "
"of :attr:`~django.db.models.DateField.auto_now` or :attr:`~django.db.models."
"DateField.auto_now_add`."
msgstr ""
"保存する直前に値を前処理したい場合は :meth:`~Field.pre_save` を使います。例え"
"ば、 Django の :class:`~django.db.models.DateTimeField` はこのメソッドを使っ"
"て、 :attr:`~django.db.models.DateField.auto_now` や :attr:`~django.db."
"models.DateField.auto_now_add` に正しく属性を設定します。"

msgid ""
"If you do override this method, you must return the value of the attribute "
"at the end. You should also update the model's attribute if you make any "
"changes to the value so that code holding references to the model will "
"always see the correct value."
msgstr ""
"もしこのメソッドをオーバーライドするならば、最後にその属性の値を返す必要があ"
"ります。さらに、もしその値になんらかの変更を加えたならば、そのモデルへの参照"
"を含んでいるコードが常に正しい値を指すように、モデルの属性を更新しなくてはな"
"りません。"

msgid "Specifying the form field for a model field"
msgstr "モデルフィールドのフォームフィールドの指定"

msgid ""
"To customize the form field used by :class:`~django.forms.ModelForm`, you "
"can override :meth:`~Field.formfield`."
msgstr ""
":class:`~django.forms.ModelForm` で使用するフォームフィールドをカスタマイズす"
"るには、 :meth:`~Field.formfield` をオーバーライドします。"

msgid ""
"The form field class can be specified via the ``form_class`` and "
"``choices_form_class`` arguments; the latter is used if the field has "
"choices specified, the former otherwise. If these arguments are not "
"provided, :class:`~django.forms.CharField` or :class:`~django.forms."
"TypedChoiceField` will be used."
msgstr ""
"フォームフィールドのクラスは ``form_class`` と ``choices_form_class`` 引数で"
"指定できます。これらの引数を指定しなければ、 :class:`~django.forms."
"CharField` または :class:`~django.forms.TypedChoiceField` が使用されます。"

msgid ""
"All of the ``kwargs`` dictionary is passed directly to the form field's "
"``__init__()`` method. Normally, all you need to do is set up a good default "
"for the ``form_class`` (and maybe ``choices_form_class``) argument and then "
"delegate further handling to the parent class. This might require you to "
"write a custom form field (and even a form widget). See the :doc:`forms "
"documentation </topics/forms/index>` for information about this."
msgstr ""
"すべての ``kwargs`` 辞書は、フォームフィールドの ``__init__()`` メソッドに直"
"接渡されます。通常、 ``form_class`` ( または ``choices_form_class`` ) 引数に"
"適切なデフォルト値を設定し、それ以降の処理を親クラスに委譲するだけです。その"
"ためには、カスタムフォームフィールド (そしてフォームウィジェット) を書く必要"
"があるかもしれません。これについては :doc:`フォームのドキュメント</topics/"
"forms/index>` を参照してください。"

msgid ""
"Continuing our ongoing example, we can write the :meth:`~Field.formfield` "
"method as::"
msgstr "上の例に続き、 :meth:`~Field.formfield` メソッドは次のように書けます:"

msgid ""
"This assumes we've imported a ``MyFormField`` field class (which has its own "
"default widget). This document doesn't cover the details of writing custom "
"form fields."
msgstr ""
"これは ``MyFormField`` フィールドクラス (デフォルトのウィジェットを持ちます) "
"のインポートを想定しています。このドキュメントでは、カスタムフォームフィール"
"ドの書き方の詳細は説明しません。"

msgid "Emulating built-in field types"
msgstr "組み込みフィールド・タイプのエミュレート"

msgid ""
"If you have created a :meth:`.db_type` method, you don't need to worry "
"about :meth:`.get_internal_type` -- it won't be used much. Sometimes, "
"though, your database storage is similar in type to some other field, so you "
"can use that other field's logic to create the right column."
msgstr ""
"もし :meth:`.db_type` メソッドを作成したのなら、 :meth:`.get_internal_type` "
"はあまり使わないので気にしなくても大丈夫です。しかし、データベースストレージ"
"の型は他のフィールドと似ていることがあるので、正しいカラムを作成するために他"
"のフィールドのロジックを使うこともできます。"

msgid ""
"No matter which database backend we are using, this will mean that :djadmin:"
"`migrate` and other SQL commands create the right column type for storing a "
"string."
msgstr ""
"どのデータベースのバックエンドを使用していても、:djadmin:`migrate` やその他の"
"SQLコマンドは文字列を格納するための正しいカラムタイプを作成します。"

msgid ""
"If :meth:`.get_internal_type` returns a string that is not known to Django "
"for the database backend you are using -- that is, it doesn't appear in "
"``django.db.backends.<db_name>.base.DatabaseWrapper.data_types`` -- the "
"string will still be used by the serializer, but the default :meth:`~Field."
"db_type` method will return ``None``. See the documentation of :meth:`~Field."
"db_type` for reasons why this might be useful. Putting a descriptive string "
"in as the type of the field for the serializer is a useful idea if you're "
"ever going to be using the serializer output in some other place, outside of "
"Django."
msgstr ""
"もし :meth:`.get_internal_type` が、使用しているデータベースのバックエンドで "
"Django が知らない文字列 (つまり、``django.db.backends.<db_name>.base."
"DatabaseWrapper.data_types`` にない文字列) を返した場合、シリアライザはその文"
"字列を使用しますが、デフォルトの :meth:`~Field.db_type` メソッドは ``None`` "
"を返します。これが便利な理由は :meth:`~Field.db_type` のドキュメントを参照し"
"てください。シリアライザのフィールドの型として説明的な文字列を入れるのは、シ"
"リアライザの出力を Django 以外の他の場所で使う場合に便利なアイデアです。"

msgid "Converting field data for serialization"
msgstr "シリアライズするためにフィールドデータを変換する場合"

msgid ""
"To customize how the values are serialized by a serializer, you can "
"override :meth:`~Field.value_to_string`. Using :meth:`~Field."
"value_from_object` is the best way to get the field's value prior to "
"serialization. For example, since ``HandField`` uses strings for its data "
"storage anyway, we can reuse some existing conversion code::"
msgstr ""
"シリアライザによる値のシリアライズ方法をカスタマイズするには、 :meth:`~Field."
"value_to_string` をオーバーライドします。 :meth:`~Field.value_from_object` を"
"使うのは、シリアライズの前にフィールドの値を取得する最も良い方法です。例え"
"ば、 ``HandField`` はデータの保存に文字列を使うので、既存の変換コードを再利用"
"できます:"

msgid "Some general advice"
msgstr "一般的なアドバイス"

msgid ""
"Writing a custom field can be a tricky process, particularly if you're doing "
"complex conversions between your Python types and your database and "
"serialization formats. Here are a couple of tips to make things go more "
"smoothly:"
msgstr ""
"カスタムフィールドの作成は、特に Python の型とデータベースやシリアライズの"
"フォーマットとの間で複雑な変換を行う場合、厄介なプロセスになることがありま"
"す。ここでは、スムーズに進めるためのヒントをいくつか紹介します:"

msgid ""
"Look at the existing Django fields (in :source:`django/db/models/fields/"
"__init__.py`) for inspiration. Try to find a field that's similar to what "
"you want and extend it a little bit, instead of creating an entirely new "
"field from scratch."
msgstr ""
"既存の Django フィールド ( :source:`django/db/models/fields/__init__.py` にあ"
"ります) を見て、着想を得てください。ゼロから全く新しいフィールドを作るのでは"
"なく、あなたの欲しいものに似たフィールドを見つけ、それを少し拡張してみてくだ"
"さい。"

msgid ""
"Put a ``__str__()`` method on the class you're wrapping up as a field. There "
"are a lot of places where the default behavior of the field code is to call "
"``str()`` on the value. (In our examples in this document, ``value`` would "
"be a ``Hand`` instance, not a ``HandField``). So if your ``__str__()`` "
"method automatically converts to the string form of your Python object, you "
"can save yourself a lot of work."
msgstr ""
"フィールドとしてラップしているクラスに ``__str__()`` メソッドを追加します。"
"フィールドのコードのデフォルトの動作として、値に対して ``str()`` を呼び出す箇"
"所が多くあります。(このドキュメントの例では、 ``value`` は ``HandField`` では"
"なく ``Hand`` インスタンスになります）。そのため、 ``__str__()`` メソッドが自"
"動的に Python オブジェクトの文字列形式に変換してくれれば、多くの手間を省けま"
"す。"

msgid "Writing a ``FileField`` subclass"
msgstr "``FileField`` サブクラスを書く"

msgid ""
"In addition to the above methods, fields that deal with files have a few "
"other special requirements which must be taken into account. The majority of "
"the mechanics provided by ``FileField``, such as controlling database "
"storage and retrieval, can remain unchanged, leaving subclasses to deal with "
"the challenge of supporting a particular type of file."
msgstr ""
"上記のメソッドに加えて、ファイルを扱うフィールドには考慮すべき特別な要件がい"
"くつかあります。 ``FileField`` によって提供される仕組みの大部分、例えばデータ"
"ベースの保存と取得の制御などは、変更することなく、サブクラスに特定のタイプの"
"ファイルをサポートさせることができます。"

msgid ""
"Django provides a ``File`` class, which is used as a proxy to the file's "
"contents and operations. This can be subclassed to customize how the file is "
"accessed, and what methods are available. It lives at ``django.db.models."
"fields.files``, and its default behavior is explained in the :doc:`file "
"documentation </ref/files/file>`."
msgstr ""
"Django は ``File`` クラスを提供し、ファイルの内容や操作のプロキシとして使われ"
"ます。これをサブクラス化することで、ファイルへのアクセス方法や利用可能なメ"
"ソッドをカスタマイズできます。このクラスは ``django.db.models.fields.files`` "
"にあり、デフォルトの動作は :doc:`ファイルのドキュメント</ref/files/file>` で"
"解説しています。"

msgid ""
"Once a subclass of ``File`` is created, the new ``FileField`` subclass must "
"be told to use it. To do so, assign the new ``File`` subclass to the special "
"``attr_class`` attribute of the ``FileField`` subclass."
msgstr ""
"一度 ``File`` のサブクラスが作成されると、新しい ``FileField`` サブクラスには"
"それを使用するように指示する必要があります。そのためには、新しい ``File`` サ"
"ブクラスを ``FileField`` サブクラスの特別な ``attr_class`` 属性に割り当てま"
"す。"

msgid "A few suggestions"
msgstr "いくつかの提案"

msgid ""
"In addition to the above details, there are a few guidelines which can "
"greatly improve the efficiency and readability of the field's code."
msgstr ""
"上記の詳細に加えて、フィールドのコードの効率と読みやすさを劇的に改善するいく"
"つかのガイドラインがあります。"

msgid ""
"The source for Django's own ``ImageField`` (in :source:`django/db/models/"
"fields/files.py`) is a great example of how to subclass ``FileField`` to "
"support a particular type of file, as it incorporates all of the techniques "
"described above."
msgstr ""
"Django 独自の ``ImageField`` のソース ( :source:`django/db/models/fields/"
"files.py` ) は、上で説明したテクニックを全て組み込んでいるので、特定のファイ"
"ルタイプをサポートするために ``FileField`` をサブクラス化する方法の良い例で"
"す。"

msgid ""
"Cache file attributes wherever possible. Since files may be stored in remote "
"storage systems, retrieving them may cost extra time, or even money, that "
"isn't always necessary. Once a file is retrieved to obtain some data about "
"its content, cache as much of that data as possible to reduce the number of "
"times the file must be retrieved on subsequent calls for that information."
msgstr ""
"できるだけファイル属性をキャッシュします。ファイルはリモートのストレージシス"
"テムに保存されている可能性があるため、それらを取得するには、必ずしも必要では"
"ない余分な時間やコストがかかる可能性があります。一度ファイルを検索してその内"
"容に関するデータを取得したら、そのデータをできるだけ多くキャッシュして、その"
"情報を取得するために以後ファイルを検索する回数を減らします。"

msgid "How to implement a custom template backend"
msgstr "テンプレートのバックエンドをカスタマイズする"

msgid "Custom backends"
msgstr "カスタムのバックエンド"

msgid ""
"Here's how to implement a custom template backend in order to use another "
"template system. A template backend is a class that inherits ``django."
"template.backends.base.BaseEngine``. It must implement ``get_template()`` "
"and optionally ``from_string()``. Here's an example for a fictional "
"``foobar`` template library::"
msgstr ""
"ここでは、他のテンプレートシステムを使用するために、カスタムテンプレートバッ"
"クエンドを実装する方法を説明します。テンプレートバックエンドは ``django."
"template.backends.base.BaseEngine`` を継承したクラスです。このクラスは "
"``get_template()`` と、オプションで ``from_string()`` を実装する必要がありま"
"す。以下は架空の ``foobar`` テンプレートライブラリの例です:"

msgid "See `DEP 182`_ for more information."
msgstr "詳しい情報は `DEP 182`_ を参照してください。"

msgid "Debug integration for custom engines"
msgstr "カスタムエンジンに対するデバッグの統合"

msgid ""
"The Django debug page has hooks to provide detailed information when a "
"template error arises. Custom template engines can use these hooks to "
"enhance the traceback information that appears to users. The following hooks "
"are available:"
msgstr ""
"Django のデバッグページには、テンプレートエラーが発生したときに詳細な情報を提"
"供するフックがあります。カスタムのテンプレートエンジンは、これらのフックを使"
"うことで、ユーザに表示されるトレースバック情報を強化できます。以下のフックが"
"利用できます:"

msgid "Template postmortem"
msgstr "テンプレートの postmortem (事後分析)"

msgid ""
"The postmortem appears when :exc:`~django.template.TemplateDoesNotExist` is "
"raised. It lists the template engines and loaders that were used when trying "
"to find a given template. For example, if two Django engines are configured, "
"the postmortem will appear like:"
msgstr ""
"postmortemは :exc:`~django.template.TemplateDoesNotExist` が発生したときに表"
"示されます。これは、指定されたテンプレートを見つけようとしたときに使われたテ"
"ンプレートエンジンとローダの一覧を表示します。例えば、2つの Django エンジンが"
"設定されている場合、 postmortem は以下のように表示されます:"

msgid ""
"Custom engines can populate the postmortem by passing the ``backend`` and "
"``tried`` arguments when raising :exc:`~django.template."
"TemplateDoesNotExist`. Backends that use the postmortem :ref:`should specify "
"an origin <template-origin-api>` on the template object."
msgstr ""
"カスタムエンジンは :exc:`~django.template.TemplateDoesNotExist` を発生させる"
"ときに ``backend`` と ``tried`` 引数を渡すことで postmortem に値を入れること"
"ができます。postmortem を使用するバックエンドはテンプレートオブジェクトの :"
"ref:`origin を指定する <template-origin-api>` 必要があります。"

msgid "Contextual line information"
msgstr "コンテキストの行情報"

msgid ""
"If an error happens during template parsing or rendering, Django can display "
"the line the error happened on. For example:"
msgstr ""
"もしテンプレートをパースもしくはレンダリングしてる最中にエラーが発生したら、"
"Djangoはエラーが発生した行を表示することができます。たとえば:"

msgid ""
"Custom engines can populate this information by setting a ``template_debug`` "
"attribute on exceptions raised during parsing and rendering. This attribute "
"is a :class:`dict` with the following values:"
msgstr ""
"カスタムエンジンはパースやレンダリング中に発生した例外に ``template_debug`` "
"属性を指定することで、この情報を入力できます。この属性は以下の値を持つ :"
"class:`dict` です:"

msgid "``'name'``: The name of the template in which the exception occurred."
msgstr "``'name'``: 例外が発生したテンプレートの名前。"

msgid "``'message'``: The exception message."
msgstr "``'message'``: 例外メッセージ。"

msgid ""
"``'source_lines'``: The lines before, after, and including the line the "
"exception occurred on. This is for context, so it shouldn't contain more "
"than 20 lines or so."
msgstr ""
"``'source_lines'``: 例外が発生した行の前後の行。これは文脈のためのものなの"
"で、20行以上にすべきではありません。"

msgid "``'line'``: The line number on which the exception occurred."
msgstr "``'line'``: 例外が発生した行番号。"

msgid ""
"``'before'``: The content on the error line before the token that raised the "
"error."
msgstr "``'before'``: エラーを発生させたトークンの前のエラー行の内容。"

msgid "``'during'``: The token that raised the error."
msgstr "``'during'``: エラーを発生させたトークン。"

msgid ""
"``'after'``: The content on the error line after the token that raised the "
"error."
msgstr "``'after'``: エラーを発生させたトークンの後のエラー行の内容。"

msgid "``'total'``: The number of lines in ``source_lines``."
msgstr "``'total'``: ``source_lines`` の行数。"

msgid "``'top'``: The line number where ``source_lines`` starts."
msgstr "``'top'``: ``source_lines`` が始まる行番号。"

msgid "``'bottom'``: The line number where ``source_lines`` ends."
msgstr "``'bottom'``: ``source_lines`` が終了する行番号。"

msgid "Given the above template error, ``template_debug`` would look like::"
msgstr ""
"上記のテンプレートエラーが発生した場合、 ``template_debug`` は次のようになり"
"ます:"

msgid "Origin API and 3rd-party integration"
msgstr "Origin API と サードパーティとの統合"

msgid ""
"Django templates have an :class:`~django.template.base.Origin` object "
"available through the ``template.origin`` attribute. This enables debug "
"information to be displayed in the :ref:`template postmortem <template-"
"postmortem>`, as well as in 3rd-party libraries, like the `Django Debug "
"Toolbar`_."
msgstr ""
"Django テンプレートには :class:`~django.template.base.Origin` オブジェクトが"
"あり、 ``template.origin`` 属性で利用できます。これにより、デバッグ情報を :"
"ref:`テンプレートの postmortem (事後分析) <template-postmortem>` や、 "
"`Django Debug Toolbar`_ のようなサードパーティライブラリに表示できます。"

msgid ""
"Custom engines can provide their own ``template.origin`` information by "
"creating an object that specifies the following attributes:"
msgstr ""
"カスタムエンジンは、以下の属性を指定するオブジェクトを作成することで、独自の "
"``template.origin`` 情報を提供できます:"

msgid "``'name'``: The full path to the template."
msgstr "``'name'``: テンプレートへのフルパス。"

msgid ""
"``'template_name'``: The relative path to the template as passed into the "
"template loading methods."
msgstr ""
"``'template_name'``: テンプレート読み込みメソッドに渡される、テンプレートへの"
"相対パス。"

msgid ""
"``'loader_name'``: An optional string identifying the function or class used "
"to load the template, e.g. ``django.template.loaders.filesystem.Loader``."
msgstr ""
"``'loader_name'``: テンプレートの読み込みに使われる関数またはクラスを識別する"
"ためのオプションの文字列。例: ``django.template.loaders.filesystem.Loader``。"

msgid "How to create custom template tags and filters"
msgstr "独自のテンプレートタグとフィルタを作る"

msgid ""
"Django's template language comes with a wide variety of :doc:`built-in tags "
"and filters </ref/templates/builtins>` designed to address the presentation "
"logic needs of your application. Nevertheless, you may find yourself needing "
"functionality that is not covered by the core set of template primitives. "
"You can extend the template engine by defining custom tags and filters using "
"Python, and then make them available to your templates using the :ttag:`{% "
"load %}<load>` tag."
msgstr ""
"Django のテンプレート言語は、アプリケーションのプレゼンテーションロジックの"
"ニーズに対応するように設計された、多種多様な :doc:`埋め込みタグやフィルタ</"
"ref/templates/builtins>` を搭載しています。それでもなお、テンプレート構成要素"
"のコア・セットでカバーされていない機能が必要になることもあるでしょう。そのと"
"きは Python を使用し、独自のタグやフィルタを定義することによって、テンプレー"
"トエンジンを拡張できます。その上で、:ttag:`{% load %}<load>` タグを使用する"
"と、テンプレートでそれらの機能を利用することができるようになります。"

msgid "Code layout"
msgstr "コードのレイアウト"

msgid ""
"The most common place to specify custom template tags and filters is inside "
"a Django app. If they relate to an existing app, it makes sense to bundle "
"them there; otherwise, they can be added to a new app. When a Django app is "
"added to :setting:`INSTALLED_APPS`, any tags it defines in the conventional "
"location described below are automatically made available to load within "
"templates."
msgstr ""
"独自のテンプレートタグやフィルタを指定するための最も一般的な場所は、Django の"
"アプリケーションの内部です。それらが既存のアプリに関連するものである場合は、"
"この場所にバンドルするのが最適です。それ以外の場合は、新しいアプリケーション"
"に追加されてしまいます。Django のアプリケーションが :setting:"
"`INSTALLED_APPS` に追加されると、以下に記載された従来の場所に定義したタグは、"
"自動的にテンプレート内に読み込むことが可能になります。"

msgid ""
"The app should contain a ``templatetags`` directory, at the same level as "
"``models.py``, ``views.py``, etc. If this doesn't already exist, create it - "
"don't forget the ``__init__.py`` file to ensure the directory is treated as "
"a Python package."
msgstr ""
"アプリケーションは、\"models.py\" や \"views.py\" などと同じレベルに "
"\"templatetags\" ディレクトリを含むべきです。まだ存在していない場合は、ディレ"
"クトリが Python パッケージとして扱われるようにするため、\"__init__.py\" を忘"
"れないでください。"

msgid "Development server won't automatically restart"
msgstr "開発用サーバが自動的にリスタートしない場合"

msgid ""
"After adding the ``templatetags``  module, you will need to restart your "
"server before you can use the tags or filters in templates."
msgstr ""
"``templatetags`` モジュールを追加した後、テンプレートでタグやフィルタを使用す"
"る前に、サーバーを再起動する必要があります。"

msgid ""
"Your custom tags and filters will live in a module inside the "
"``templatetags`` directory. The name of the module file is the name you'll "
"use to load the tags later, so be careful to pick a name that won't clash "
"with custom tags and filters in another app."
msgstr ""
"カスタムタグやフィルタは ``templatetags`` ディレクトリ内のモジュールにありま"
"す。モジュールファイルの名前は、あとでタグをロードして使うので、別のアプリで"
"カスタムタグやフィルタと衝突しない名前を選択するように心がけてください。"

msgid ""
"For example, if your custom tags/filters are in a file called ``poll_extras."
"py``, your app layout might look like this:"
msgstr ""
"例えば、カスタムタグ/フィルタが ``poll_extras.py`` というファイルにある場合、"
"アプリのレイアウトは次のようになります:"

msgid "And in your template you would use the following:"
msgstr "そして、テンプレートでは次のように使います:"

msgid ""
"The app that contains the custom tags must be in :setting:`INSTALLED_APPS` "
"in order for the :ttag:`{% load %}<load>` tag to work. This is a security "
"feature: It allows you to host Python code for many template libraries on a "
"single host machine without enabling access to all of them for every Django "
"installation."
msgstr ""
"カスタムタグを含むアプリケーションは、:ttag:`{% load %}<load>` タグを機能させ"
"るために :setting:`INSTALLED_APPS` 内に記述される必要があります。これは、セ"
"キュリティ機能です: 毎回の Django のインストールでこれらへのアクセスを有効化"
"することなく、単一のホストマシン上の多数のテンプレートライブラリに対して "
"Python のコードをホストできるようにします。"

msgid ""
"There's no limit on how many modules you put in the ``templatetags`` "
"package. Just keep in mind that a :ttag:`{% load %}<load>` statement will "
"load tags/filters for the given Python module name, not the name of the app."
msgstr ""
"``templatetags`` パッケージに入れられるモジュールの数に制限はありません。た"
"だ、:ttag:`{% load %}<load>` ステートメントは、アプリケーションの名前ではな"
"く、与えられた Python のモジュール名に対してタグ/フィルタをロードすることに注"
"意してください。"

msgid ""
"To be a valid tag library, the module must contain a module-level variable "
"named ``register`` that is a ``template.Library`` instance, in which all the "
"tags and filters are registered. So, near the top of your module, put the "
"following::"
msgstr ""
"有効なタグライブラリにするため、モジュールは、``register`` という名前のモ"
"ジュールレベルの変数を含む必要があります。これは、すべてのタグとフィルタが登"
"録されている ``template.Library`` のインスタンスです。そのため、あなたのモ"
"ジュールの上部に、次のコードを記述してください::"

msgid ""
"Alternatively, template tag modules can be registered through the "
"``'libraries'`` argument to :class:`~django.template.backends.django."
"DjangoTemplates`. This is useful if you want to use a different label from "
"the template tag module name when loading template tags. It also enables you "
"to register tags without installing an application."
msgstr ""
"あるいは、テンプレートタグのモジュールは、:class:`~django.template.backends."
"django.DjangoTemplates` への ``'libraries'`` 引数を通じて登録することもできま"
"す。テンプレートタグをロードするときに、テンプレートタグのモジュール名とは異"
"なるラベルを使用したい場合に便利です。また、アプリケーションをインストールせ"
"ずに、タグを登録できるようになります。"

msgid "Behind the scenes"
msgstr "背景"

msgid ""
"For a ton of examples, read the source code for Django's default filters and "
"tags. They're in :source:`django/template/defaultfilters.py` and :source:"
"`django/template/defaulttags.py`, respectively."
msgstr ""
"豊富な例については、 Django のデフォルトのフィルタとタグのソースコードを読ん"
"でください。それぞれ :source:`django/template/defaultfilters.py` と :source:"
"`django/template/defaulttags.py` にあります。"

msgid "For more information on the :ttag:`load` tag, read its documentation."
msgstr ":ttag:`load` タグの詳細については、ドキュメントを参照してください。"

msgid "Writing custom template filters"
msgstr "独自のテンプレートフィルタを記述する"

msgid "Custom filters are Python functions that take one or two arguments:"
msgstr "独自のフィルタは、1つか2つの引数を取るPythonの関数です:"

msgid "The value of the variable (input) -- not necessarily a string."
msgstr "変数の値 (インプット) -- 文字列とは限りません。"

msgid ""
"The value of the argument -- this can have a default value, or be left out "
"altogether."
msgstr "引数の値 -- デフォルト値を持つことも、完全に省略することもできます。"

msgid ""
"For example, in the filter ``{{ var|foo:\"bar\" }}``, the filter ``foo`` "
"would be passed the variable ``var`` and the argument ``\"bar\"``."
msgstr ""
"例えば、フィルタ ``{{ var|foo:\"bar\" }}`` の中で、フィルタ ``foo`` は変数 "
"``var`` と引数 ``\"bar\"`` を渡されます。"

msgid ""
"Since the template language doesn't provide exception handling, any "
"exception raised from a template filter will be exposed as a server error. "
"Thus, filter functions should avoid raising exceptions if there is a "
"reasonable fallback value to return. In case of input that represents a "
"clear bug in a template, raising an exception may still be better than "
"silent failure which hides the bug."
msgstr ""
"テンプレート言語は例外処理を提供しないので、テンプレートフィルタから生成され"
"た例外はすべてサーバーエラーとして公開されます。したがって、フィルタ関数は、"
"返すべき妥当なフォールバック値がある場合には例外を発生させないようにする必要"
"があります。テンプレートの明確なバグを表すインプットの場合、例外を発生させる"
"方が、バグを隠すサイレントな失敗よりも適切でしょう。"

msgid "Here's an example filter definition::"
msgstr "以下はフィルタ定義の例です::"

msgid "And here's an example of how that filter would be used:"
msgstr "そして、以下はフィルタがどのように使われるかの例です:"

msgid ""
"Most filters don't take arguments. In this case, leave the argument out of "
"your function::"
msgstr ""
"ほとんどのフィルタは引数を取りません。この場合、次のように関数の第2引数を省略"
"してください:"

msgid "Registering custom filters"
msgstr "独自のフィルタを登録する"

msgid ""
"Once you've written your filter definition, you need to register it with "
"your ``Library`` instance, to make it available to Django's template "
"language::"
msgstr ""
"フィルタ定義を書き終わったら、Django のテンプレート言語で使用できるようにする"
"ため、``Library`` のインスタンスに登録する必要があります。"

msgid "The ``Library.filter()`` method takes two arguments:"
msgstr "``Library.filter()`` メソッドは 2 つの引数を取ります:"

msgid "The name of the filter -- a string."
msgstr "フィルタの名前 -- 文字列です。"

msgid ""
"The compilation function -- a Python function (not the name of the function "
"as a string)."
msgstr ""
"編集用の関数 -- Python の関数です (文字列としての関数名ではありません)。"

msgid "You can use ``register.filter()`` as a decorator instead::"
msgstr "代わりに ``register.filter()`` をデコレータとして使用できます。"

msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the filter name."
msgstr ""
"``name`` 引数を省略した場合、上記の 2 番目の例と同じように、Django はフィルタ"
"名として関数の名前を利用します。"

msgid ""
"Finally, ``register.filter()`` also accepts three keyword arguments, "
"``is_safe``, ``needs_autoescape``, and ``expects_localtime``. These "
"arguments are described in :ref:`filters and auto-escaping <filters-auto-"
"escaping>` and :ref:`filters and time zones <filters-timezones>` below."
msgstr ""
"最後に、``register.filter()`` は 3 つのキーワード引数 (``is_safe``、"
"``needs_autoescape``、 ``expects_localtime``) を受け入れます。これらの引数"
"は、後述の :ref:`フィルタと自動エスケープ <filters-auto-escaping>` と :ref:`"
"フィルタとタイムゾーン <filters-timezones>` の中で説明されています。"

msgid "Template filters that expect strings"
msgstr "文字列を要するテンプレートフィルタ"

msgid ""
"If you're writing a template filter that only expects a string as the first "
"argument, you should use the decorator ``stringfilter``. This will convert "
"an object to its string value before being passed to your function::"
msgstr ""
"第 1 引数として文字数を要求するだけのテンプレートフィルタを記述している場合、"
"デコレータ ``stringfilter`` を使う必要があります。これは、関数に渡される前に"
"オブジェクトを文字列に変換します。"

msgid ""
"This way, you'll be able to pass, say, an integer to this filter, and it "
"won't cause an ``AttributeError`` (because integers don't have ``lower()`` "
"methods)."
msgstr ""
"これにより、このフィルタに整数を渡したとしても ``AttributeError`` は発生しま"
"せん。(整数は ``lower()`` メソッドを持ちませんが。)"

msgid "Filters and auto-escaping"
msgstr "フィルタと自動エスケープ"

msgid ""
"When writing a custom filter, give some thought to how the filter will "
"interact with Django's auto-escaping behavior. Note that two types of "
"strings can be passed around inside the template code:"
msgstr ""
"独自のフィルタを作成する場合、フィルタがDjangoの自動エスケープの挙動とどのよ"
"うに関連するか考慮してください。2種類の文字列がテンプレートコードに渡されるこ"
"とに留意してください:"

msgid ""
"**Raw strings** are the native Python strings. On output, they're escaped if "
"auto-escaping is in effect and presented unchanged, otherwise."
msgstr ""
"**Raw strings** はPythonのネイティブの文字列です。出力時に、自動エスケープが"
"有効な場合はエスケープされ、それ以外の場合は変更されません。"

msgid ""
"**Safe strings** are strings that have been marked safe from further "
"escaping at output time. Any necessary escaping has already been done. "
"They're commonly used for output that contains raw HTML that is intended to "
"be interpreted as-is on the client side."
msgstr ""
"**Safe strings** は出力時にさらなるエスケープがされないように安全とマークされ"
"た文字列です。必要なエスケープはすでに行われています。これらはクライアント側"
"でそのまま解釈されることを目的とした生のHTMLを含む出力によく利用されます。"

msgid ""
"Internally, these strings are of type :class:`~django.utils.safestring."
"SafeString`. You can test for them using code like::"
msgstr ""
"内部では、これらの文字列は :class:`~django.utils.safestring.SafeString` 型に"
"なります。次のようなコードでこれらの値を検証することができます:"

msgid "Template filter code falls into one of two situations:"
msgstr ""
"テンプレートフィルタのコードは、次の2つの状況のいずれかに当てはまります:"

msgid ""
"Your filter does not introduce any HTML-unsafe characters (``<``, ``>``, "
"``'``, ``\"`` or ``&``) into the result that were not already present. In "
"this case, you can let Django take care of all the auto-escaping handling "
"for you. All you need to do is set the ``is_safe`` flag to ``True`` when you "
"register your filter function, like so::"
msgstr ""
"フィルタが結果に新たにHTMLで安全でない文字 (``<``, ``>``, ``'``, ``\"`` or "
"``&``) を導入しない場合。この場合、Djangoにすべての自動エスケープ処理を任せる"
"ことができます。フィルタ関数を登録する際に、 ``is_safe`` フラグを ``True`` に"
"設定するだけです。次のようにします:"

msgid ""
"This flag tells Django that if a \"safe\" string is passed into your filter, "
"the result will still be \"safe\" and if a non-safe string is passed in, "
"Django will automatically escape it, if necessary."
msgstr ""
"このフラグは、\"安全\"な文字列がフィルタに渡された場合、結果も依然として\"安"
"全\"であることをDjangoに伝えます。そして、安全でない文字列が渡された場合、必"
"要に応じてDjangoが自動的にエスケープします。"

msgid ""
"You can think of this as meaning \"this filter is safe -- it doesn't "
"introduce any possibility of unsafe HTML.\""
msgstr ""
"この場合、\"このフィルタは安全である ―― それはどんな非安全なHTMLも導入する可"
"能性はない。\" と考えて構いません。"

msgid ""
"The reason ``is_safe`` is necessary is because there are plenty of normal "
"string operations that will turn a ``SafeData`` object back into a normal "
"``str`` object and, rather than try to catch them all, which would be very "
"difficult, Django repairs the damage after the filter has completed."
msgstr ""
"``is_safe`` が必要な理由は、 ``SafeData`` オブジェクトを普通の ``str`` オブ"
"ジェクトに変換するような標準的な文字列操作が多数存在し、これら全てを捉えるこ"
"とが非常に難しいため、Djangoではフィルタの処理が完了した後に問題を修正するた"
"めです。"

msgid ""
"For example, suppose you have a filter that adds the string ``xx`` to the "
"end of any input. Since this introduces no dangerous HTML characters to the "
"result (aside from any that were already present), you should mark your "
"filter with ``is_safe``::"
msgstr ""
"例えば、任意の入力の末尾に文字列 ``xx`` を追加するフィルタがあるとします。こ"
"れは結果に危険なHTML文字を導入しません（元々存在していたものを除く）。よっ"
"て、フィルタを ``is_safe`` でマークすべきです:"

msgid ""
"When this filter is used in a template where auto-escaping is enabled, "
"Django will escape the output whenever the input is not already marked as "
"\"safe\"."
msgstr ""
"このフィルタが自動エスケープが有効なテンプレートで使用される場合、入力が既に"
"\"安全\"としてマークされていない限り、Djangoは出力をエスケープします。"

msgid ""
"By default, ``is_safe`` is ``False``, and you can omit it from any filters "
"where it isn't required."
msgstr ""
"デフォルトでは ``is_safe`` は ``False`` ですが、それが必要でないフィルタでは"
"省略できます。"

msgid ""
"Be careful when deciding if your filter really does leave safe strings as "
"safe. If you're *removing* characters, you might inadvertently leave "
"unbalanced HTML tags or entities in the result. For example, removing a "
"``>`` from the input might turn ``<a>`` into ``<a``, which would need to be "
"escaped on output to avoid causing problems. Similarly, removing a semicolon "
"(``;``) can turn ``&amp;`` into ``&amp``, which is no longer a valid entity "
"and thus needs further escaping. Most cases won't be nearly this tricky, but "
"keep an eye out for any problems like that when reviewing your code."
msgstr ""
"フィルタが本当に安全な文字列を安全なまま残すかどうかを判断するときには注意し"
"てください。文字を *除去* している場合、不注意で結果の中に不均衡なHTMLタグや"
"エンティティが残ってしまうかもしれません。例えば、入力から ``>`` を取り除く"
"と ``<a>`` が ``<a`` になってしまうかもしれません。同様に、セミコロン(``;``)"
"を削除すると、``&amp;`` が ``&amp`` に変わります。ほとんどの場合、ここまでト"
"リッキーになることはありませんが、コードをレビューする際はこのような問題がな"
"いか注意してください。"

msgid ""
"Marking a filter ``is_safe`` will coerce the filter's return value to a "
"string.  If your filter should return a boolean or other non-string value, "
"marking it ``is_safe`` will probably have unintended consequences (such as "
"converting a boolean False to the string 'False')."
msgstr ""
"フィルタを ``is_safe`` としてマークすると、フィルタの戻り値が文字列に強制され"
"ます。フィルタがブール値や他の文字列でない値を返すべき場合、 ``is_safe`` と"
"マークすると意図しない結果になる可能性があります（例えば、ブール値の False を"
"文字列の 'False' に変換するなど）。"

msgid ""
"Alternatively, your filter code can manually take care of any necessary "
"escaping. This is necessary when you're introducing new HTML markup into the "
"result. You want to mark the output as safe from further escaping so that "
"your HTML markup isn't escaped further, so you'll need to handle the input "
"yourself."
msgstr ""
"または、フィルタのコードで必要なエスケープ処理を手動で行うこともできます。こ"
"れは、結果に新しいHTMLマークアップを導入する場合に必要です。HTMLマークアップ"
"がさらにエスケープされないように、出力を安全としてマークしたい場合は、入力を"
"自分で処理する必要があります。"

msgid ""
"To mark the output as a safe string, use :func:`django.utils.safestring."
"mark_safe`."
msgstr ""
"出力を安全な文字列としてマークするには :func:`django.utils.safestring."
"mark_safe` を使います。"

msgid ""
"Be careful, though. You need to do more than just mark the output as safe. "
"You need to ensure it really *is* safe, and what you do depends on whether "
"auto-escaping is in effect. The idea is to write filters that can operate in "
"templates where auto-escaping is either on or off in order to make things "
"easier for your template authors."
msgstr ""
"ただし注意が必要です。出力を安全としてマークするだけでは不十分です。本当にそ"
"れが *安全である* ことを確認する必要があり、行うべきことは自動エスケープが有"
"効かどうかによって異なります。テンプレート作成者のために、自動エスケープがオ"
"ンまたはオフのどちらのテンプレートでも操作できるフィルタを書くことが考えられ"
"ます。"

msgid ""
"In order for your filter to know the current auto-escaping state, set the "
"``needs_autoescape`` flag to ``True`` when you register your filter "
"function. (If you don't specify this flag, it defaults to ``False``). This "
"flag tells Django that your filter function wants to be passed an extra "
"keyword argument, called ``autoescape``, that is ``True`` if auto-escaping "
"is in effect and ``False`` otherwise. It is recommended to set the default "
"of the ``autoescape`` parameter to ``True``, so that if you call the "
"function from Python code it will have escaping enabled by default."
msgstr ""
"フィルタが現在の自動エスケープの状態を知るためには、フィルタ関数を登録する際"
"に ``needs_autoescape`` フラグを ``True`` に設定します。(このフラグを指定しな"
"い場合、デフォルトは ``False`` です)。このフラグは、追加のキーワード引数 "
"``autoescape`` をDjangoに渡すようにフィルタ関数に伝えます。この引数は自動エス"
"ケープが有効の場合は ``True`` 、そうでない場合は ``False`` となります。 "
"``autoescape`` パラメータのデフォルトは ``True`` に設定しておくことが推奨され"
"ます。これにより、Pythonコードから関数を呼び出したときにデフォルトでエスケー"
"プが有効になります。"

msgid ""
"For example, let's write a filter that emphasizes the first character of a "
"string::"
msgstr "例えば、文字列の最初の文字を強調するフィルタを書いてみましょう:"

msgid ""
"The ``needs_autoescape`` flag and the ``autoescape`` keyword argument mean "
"that our function will know whether automatic escaping is in effect when the "
"filter is called. We use ``autoescape`` to decide whether the input data "
"needs to be passed through ``django.utils.html.conditional_escape`` or not. "
"(In the latter case, we use the identity function as the \"escape\" "
"function.) The ``conditional_escape()`` function is like ``escape()`` except "
"it only escapes input that is **not** a ``SafeData`` instance. If a "
"``SafeData`` instance is passed to ``conditional_escape()``, the data is "
"returned unchanged."
msgstr ""
"``needs_autoescape`` フラグと ``autoescape`` キーワード引数により、フィルタが"
"呼び出された際に自動エスケープが有効かどうかを関数が知ることができます。 "
"``autoescape`` を使用して、入力データを ``django.utils.html."
"conditional_escape`` に通す必要があるかどうかを決定します（必要なければ、恒等"
"関数を \"escapse\" 関数として使用します）。 ``conditional_escape()`` 関数は "
"``escape()`` に似ていますが、 ``SafeData`` インスタンス **でない** 入力のみを"
"エスケープします。 ``SafeData`` インスタンスが ``conditional_escape()`` に渡"
"された場合、データは変更されずにそのまま返されます。"

msgid ""
"Finally, in the above example, we remember to mark the result as safe so "
"that our HTML is inserted directly into the template without further "
"escaping."
msgstr ""
"最後に、上の例では、HTMLがさらにエスケープされることなくテンプレートに直接挿"
"入されるように、結果を安全としてマークすることを忘れないでください。"

msgid ""
"There's no need to worry about the ``is_safe`` flag in this case (although "
"including it wouldn't hurt anything). Whenever you manually handle the auto-"
"escaping issues and return a safe string, the ``is_safe`` flag won't change "
"anything either way."
msgstr ""
"この場合、 ``is_safe`` フラグを気にする必要はありません (フラグを指定しても何"
"も問題はありませんが)。自動エスケープの問題を手動で処理して安全な文字列を返す"
"場合、 ``is_safe`` フラグを指定しても何も変わりません。"

msgid "Avoiding XSS vulnerabilities when reusing built-in filters"
msgstr "組み込みのフィルタを再利用するときに XSS 脆弱性を回避する"

msgid ""
"Django's built-in filters have ``autoescape=True`` by default in order to "
"get the proper autoescaping behavior and avoid a cross-site script "
"vulnerability."
msgstr ""
"Django に組み込みのフィルタは、適切な自動エスケープを行い、クロスサイトスクリ"
"プティング（XSS）の脆弱性を回避するために、デフォルトで ``autoescape=True`` "
"となっています。"

msgid ""
"In older versions of Django, be careful when reusing Django's built-in "
"filters as ``autoescape`` defaults to ``None``. You'll need to pass "
"``autoescape=True`` to get autoescaping."
msgstr ""
"古いバージョンの Django では、 ``autoescape`` のデフォルトは ``None`` ですの"
"で、 Django の組み込みのフィルタを再利用する際には注意してください。オートエ"
"スケープを有効にするには ``autoescape=True`` を渡す必要があります。"

msgid ""
"For example, if you wanted to write a custom filter called "
"``urlize_and_linebreaks`` that combined the :tfilter:`urlize` and :tfilter:"
"`linebreaksbr` filters, the filter would look like::"
msgstr ""
"例えば、 :tfilter:`urlize` フィルタと :tfilter:`linebreaksbr` フィルタを組み"
"合わせた ``urlize_and_linebreaks`` というカスタムフィルタを書きたい場合、フィ"
"ルタは次のようになります:"

msgid "Then:"
msgstr "次のように使います:"

msgid "would be equivalent to:"
msgstr "これは以下と同等です:"

msgid "Filters and time zones"
msgstr "フィルタとタイムゾーン"

msgid ""
"If you write a custom filter that operates on :class:`~datetime.datetime` "
"objects, you'll usually register it with the ``expects_localtime`` flag set "
"to ``True``::"
msgstr ""
":class:`~datetime.datetime` オブジェクトを操作するカスタムフィルタを書く場"
"合、通常は ``expects_localtime`` フラグを ``True`` に設定して登録します:"

msgid ""
"When this flag is set, if the first argument to your filter is a time zone "
"aware datetime, Django will convert it to the current time zone before "
"passing it to your filter when appropriate, according to :ref:`rules for "
"time zones conversions in templates <time-zones-in-templates>`."
msgstr ""
"このフラグがセットされていると、フィルタの最初の引数がタイムゾーンを意識した "
"datetime である場合、Django は :ref:`テンプレートにおけるタイムゾーン変換ルー"
"ル <time-zones-in-templates>` に従って、フィルタに渡す前に現在のタイムゾーン"
"に変換します。"

msgid "Writing custom template tags"
msgstr "独自のテンプレートタグを記述する"

msgid ""
"Tags are more complex than filters, because tags can do anything. Django "
"provides a number of shortcuts that make writing most types of tags easier. "
"First we'll explore those shortcuts, then explain how to write a tag from "
"scratch for those cases when the shortcuts aren't powerful enough."
msgstr ""
"タグはあらゆることができるため、フィルタより複雑です。Django は、ほとんどのタ"
"イプのタグを簡単に書けるように、多数のショートカットを提供しています。まず最"
"初にこうしたショートカットを見てから、ショートカットでは機能が不足している場"
"合にゼロからタグを書く方法を説明します。"

msgid "Simple tags"
msgstr "シンプルなタグ"

msgid ""
"Many template tags take a number of arguments -- strings or template "
"variables -- and return a result after doing some processing based solely on "
"the input arguments and some external information. For example, a "
"``current_time`` tag might accept a format string and return the time as a "
"string formatted accordingly."
msgstr ""
"多くのテンプレートタグは、文字列やテンプレート変数などの引数を取り、入力引数"
"と外部情報のみに基づいて処理を行った後、結果を返します。 たとえば、"
"``current_time`` タグはフォーマット文字列を受け取り、その時刻を適切な文字列"
"フォーマットとして返します。"

msgid ""
"To ease the creation of these types of tags, Django provides a helper "
"function, ``simple_tag``. This function, which is a method of ``django."
"template.Library``, takes a function that accepts any number of arguments, "
"wraps it in a ``render`` function and the other necessary bits mentioned "
"above and registers it with the template system."
msgstr ""
"これらのタイプのタグの作成を容易にするため、Django はヘルパー関数 "
"``simple_tag`` を提供しています。 この関数は ``django.template.Library`` のメ"
"ソッドで、任意の数の引数を受け取る関数を取り、それを ``render`` 関数と上記で"
"説明した他の必要なビットにラップし、そしてテンプレートシステムに登録します。"

msgid "Our ``current_time`` function could thus be written like this::"
msgstr "私たちの ``current_time`` 関数は、以下のように書くことができます::"

msgid "A few things to note about the ``simple_tag`` helper function:"
msgstr "``simple_tag`` ヘルパー関数について、注意すべきことがいくつかあります:"

msgid ""
"Checking for the required number of arguments, etc., has already been done "
"by the time our function is called, so we don't need to do that."
msgstr ""
"必須の引数の数などのチェックは、すでにこの関数が呼ばれる時点までに完了してい"
"るため、自分でチェックをする必要はありません。"

msgid ""
"The quotes around the argument (if any) have already been stripped away, so "
"we receive a plain string."
msgstr ""
"引数を囲む引用符（もしあれば）はすでに取り除かれているので、プレーンな文字列"
"を受け取ります。"

msgid ""
"If the argument was a template variable, our function is passed the current "
"value of the variable, not the variable itself."
msgstr ""
"もし引数がテンプレート変数だった場合、テンプレート中でタグが呼ばれた時点の値"
"が渡されます。テンプレート変数そのものが渡されるわけではありません。"

msgid ""
"Unlike other tag utilities, ``simple_tag`` passes its output through :func:"
"`~django.utils.html.conditional_escape` if the template context is in "
"autoescape mode, to ensure correct HTML and protect you from XSS "
"vulnerabilities."
msgstr ""
"他のタグユーティリティとは異なり、 ``simple_tag`` は、テンプレートコンテキス"
"トが自動エスケープモードの場合、 :func:`~django.utils.html."
"conditional_escape` を通して出力を渡します。"

msgid ""
"If additional escaping is not desired, you will need to use :func:`~django."
"utils.safestring.mark_safe` if you are absolutely sure that your code does "
"not contain XSS vulnerabilities. For building small HTML snippets, use of :"
"func:`~django.utils.html.format_html` instead of ``mark_safe()`` is strongly "
"recommended."
msgstr ""
"追加のエスケープが不要な場合、コードに XSS 脆弱性が絶対にないと確信できるので"
"あれば、 :func:`~django.utils.safestring.mark_safe` を使う必要があります。小"
"さな HTML コードを作成する場合は、 ``mark_safe()`` の代わりに :func:`~django."
"utils.html.format_html` を使うことを強く推奨します。"

msgid ""
"If your template tag needs to access the current context, you can use the "
"``takes_context`` argument when registering your tag::"
msgstr ""
"テンプレートタグの中からコンテキストにアクセスしたい場合、タグを登録する際に "
"``takes_context`` 引数を使うことでできるようになります。"

msgid "Note that the first argument *must* be called ``context``."
msgstr ""
"最初の引数は ``context`` に *しなければならない* ことに注意してください。"

msgid ""
"For more information on how the ``takes_context`` option works, see the "
"section on :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."
msgstr ""
"``takes_context`` オプションがどのように動くかについて、詳しくは :ref:"
"`inclusion tag <howto-custom-template-tags-inclusion-tags>` を参照してくださ"
"い。"

msgid "If you need to rename your tag, you can provide a custom name for it::"
msgstr "タグの名前を変更する必要がある場合は、カスタム名を指定できます:"

msgid ""
"``simple_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""
"``simple_tag`` 関数は任意の数の位置引数またはキーワード引数を受け取ることがで"
"きます。例えば:"

msgid ""
"Then in the template any number of arguments, separated by spaces, may be "
"passed to the template tag. Like in Python, the values for keyword arguments "
"are set using the equal sign (\"``=``\") and must be provided after the "
"positional arguments. For example:"
msgstr ""
"このようにすることで、テンプレートからはスペースで区切られた変数をいくつでも"
"テンプレートタグに渡すことができます。Pythonの文法と同じように、キーワード引"
"数の値は等号（\"``=``\"）を用いて位置引数の後に記述します。たとえば："

msgid ""
"It's possible to store the tag results in a template variable rather than "
"directly outputting it. This is done by using the ``as`` argument followed "
"by the variable name. Doing so enables you to output the content yourself "
"where you see fit:"
msgstr ""
"タグの処理結果を直接出力することのほかに、テンプレート変数に格納することも可"
"能です。これは ``as`` に続けて変数名を書くことで実現可能です。これによって、"
"タグの処理結果を好きなように出力することができるようになります。"

msgid "Inclusion tags"
msgstr "Inclusion tag (インクルージョン・タグ)"

msgid ""
"Another common type of template tag is the type that displays some data by "
"rendering *another* template. For example, Django's admin interface uses "
"custom template tags to display the buttons along the bottom of the \"add/"
"change\" form pages. Those buttons always look the same, but the link "
"targets change depending on the object being edited -- so they're a perfect "
"case for using a small template that is filled with details from the current "
"object. (In the admin's case, this is the ``submit_row`` tag.)"
msgstr ""
"テンプレートタグのもう一つの一般的なタイプは、 *別の* テンプレートをレンダリ"
"ングしてデータを表示するものです。例えば、 Django の admin インタフェースで"
"は、カスタムテンプレートタグを使って、\"add/change\" フォームページの下にある"
"ボタンを表示しています。これらのボタンはいつも同じように見えますが、編集中の"
"オブジェクトによってリンク先が変わります -- なので、現在のオブジェクトの詳細"
"で埋められた小さなテンプレートを使うのに最適なケースです。(admin の場合、これ"
"は ``submit_row`` タグです)。"

msgid "These sorts of tags are called \"inclusion tags\"."
msgstr "この種のタグは \"inclusion tag\" と呼ばれます。"

msgid ""
"Writing inclusion tags is probably best demonstrated by example. Let's write "
"a tag that outputs a list of choices for a given ``Poll`` object, such as "
"was created in the :ref:`tutorials <creating-models>`. We'll use the tag "
"like this:"
msgstr ""
"Inclusion tag の書き方は例で示すのが一番わかりやすいでしょう。 :ref:`チュート"
"リアル <creating-models>` で作成したような、与えられた ``Poll`` オブジェクト"
"の選択肢のリストを出力するタグを書いてみましょう。タグはこのように使います:"

msgid "...and the output will be something like this:"
msgstr "...そして出力は次のようになります:"

msgid ""
"First, define the function that takes the argument and produces a dictionary "
"of data for the result. The important point here is we only need to return a "
"dictionary, not anything more complex. This will be used as a template "
"context for the template fragment. Example::"
msgstr ""
"まず、引数を受け取り、結果のデータの辞書を生成する関数を定義します。ここで重"
"要なのは、辞書を返すだけでよく、それ以上複雑なものは必要ないということです。"
"これは、テンプレートの断片のテンプレート・コンテキストとして使用されます。例:"

msgid ""
"Next, create the template used to render the tag's output. This template is "
"a fixed feature of the tag: the tag writer specifies it, not the template "
"designer. Following our example, the template is very short:"
msgstr ""
"次に、タグの出力をレンダリングするためのテンプレートを作成します。このテンプ"
"レートはタグの固定機能であり、テンプレート設計者ではなく、タグ作成者が指定し"
"ます。この例では、テンプレートはとても短いです:"

msgid ""
"Now, create and register the inclusion tag by calling the "
"``inclusion_tag()`` method on a ``Library`` object. Following our example, "
"if the above template is in a file called ``results.html`` in a directory "
"that's searched by the template loader, we'd register the tag like this::"
msgstr ""
"次に、 ``Library`` オブジェクトの ``inclusion_tag()`` メソッドを呼び出して、 "
"inclusion tag を作成し、登録します。例に従って、上記のテンプレートがテンプ"
"レートローダーによって検索されるディレクトリの ``results.html`` というファイ"
"ルにある場合、次のようにタグを登録します:"

msgid ""
"Alternatively it is possible to register the inclusion tag using a :class:"
"`django.template.Template` instance::"
msgstr ""
"あるいは、 :class:`django.template.Template` インスタンスを使って inclusion "
"tag を登録することもできます:"

msgid "...when first creating the function."
msgstr "…これは、関数を最初に作成する際に行います。"

msgid ""
"Sometimes, your inclusion tags might require a large number of arguments, "
"making it a pain for template authors to pass in all the arguments and "
"remember their order. To solve this, Django provides a ``takes_context`` "
"option for inclusion tags. If you specify ``takes_context`` in creating a "
"template tag, the tag will have no required arguments, and the underlying "
"Python function will have one argument -- the template context as of when "
"the tag was called."
msgstr ""
"時に、 inclusion tag は多くの引数を要求することがあり、テンプレート作者が全て"
"の引数を渡したり、引数の順番を覚えたりするのは面倒です。これを解決するため"
"に、 Django は inclusion tag に ``takes_context`` オプションを用意していま"
"す。テンプレートタグを作成する際に ``takes_context`` を指定すると、タグには必"
"要な引数がなくなり、 Python 関数の引数は 1 つになります――タグが呼び出された時"
"点のテンプレートコンテキストです。"

msgid ""
"For example, say you're writing an inclusion tag that will always be used in "
"a context that contains ``home_link`` and ``home_title`` variables that "
"point back to the main page. Here's what the Python function would look "
"like::"
msgstr ""
"例えば、メインページを指す ``home_link`` と ``home_title`` 変数を含むコンテキ"
"ストの中で常に使用される inclusion tag を書くとします。Python の関数は次のよ"
"うになります:"

msgid ""
"Note that the first parameter to the function *must* be called ``context``."
msgstr ""
"最初の引数は ``context`` に *しなければならない* ことに注意してください。"

msgid ""
"In that ``register.inclusion_tag()`` line, we specified "
"``takes_context=True`` and the name of the template. Here's what the "
"template ``link.html`` might look like:"
msgstr ""
"この ``register.inclusion_tag()`` の行では、 ``takes_context=True`` と、テン"
"プレートの名前を指定しています。テンプレート ``link.html`` は以下のようになる"
"でしょう:"

msgid ""
"Then, any time you want to use that custom tag, load its library and call it "
"without any arguments, like so:"
msgstr ""
"そして、そのカスタムタグを使いたいときはいつでも、そのライブラリをロードし"
"て、引数なしで次のように呼び出します:"

msgid ""
"Note that when you're using ``takes_context=True``, there's no need to pass "
"arguments to the template tag. It automatically gets access to the context."
msgstr ""
"``takes_context=True`` を使用している場合、テンプレートタグに引数を渡す必要が"
"ないことに注意してください。自動的に context にアクセスします。"

msgid ""
"The ``takes_context`` parameter defaults to ``False``. When it's set to "
"``True``, the tag is passed the context object, as in this example. That's "
"the only difference between this case and the previous ``inclusion_tag`` "
"example."
msgstr ""
"``takes_context`` パラメータのデフォルトは ``False`` です。これを ``True`` に"
"設定すると、この例のようにタグに context オブジェクトが渡されます。これが先ほ"
"どの ``inclusion_tag`` の例との唯一の違いです。"

msgid ""
"``inclusion_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""
"``inclusion_tag`` 関数は任意の数の位置引数またはキーワード引数を受け取ること"
"ができます。例えば:"

msgid "Advanced custom template tags"
msgstr "高度なカスタムテンプレートタグ"

msgid ""
"Sometimes the basic features for custom template tag creation aren't enough. "
"Don't worry, Django gives you complete access to the internals required to "
"build a template tag from the ground up."
msgstr ""
"カスタムテンプレートタグを作成するための基本的な機能だけでは不十分な場合があ"
"ります。ご心配なく、 Django はテンプレートタグを一から構築するのに必要な内部"
"機能への完全なアクセスを提供します。"

msgid "A quick overview"
msgstr "簡単な概要"

msgid ""
"The template system works in a two-step process: compiling and rendering. To "
"define a custom template tag, you specify how the compilation works and how "
"the rendering works."
msgstr ""
"テンプレート・システムは、コンパイルとレンダリングの 2 段階のプロセスで動作し"
"ます。カスタムテンプレートタグを定義するには、コンパイルの仕組みとレンダリン"
"グの仕組みを指定します。"

msgid ""
"When Django compiles a template, it splits the raw template text into "
"''nodes''. Each node is an instance of ``django.template.Node`` and has a "
"``render()`` method. A compiled template is a list of ``Node`` objects. When "
"you call ``render()`` on a compiled template object, the template calls "
"``render()`` on each ``Node`` in its node list, with the given context.  The "
"results are all concatenated together to form the output of the template."
msgstr ""
"Django はテンプレートをコンパイルするとき、生のテンプレートテキストを \"ノー"
"ド\" に分割します。各ノードは ``django.template.Node`` のインスタンスで、 "
"``render()`` メソッドを持っています。コンパイルされたテンプレートは ``Node`` "
"オブジェクトのリストです。コンパイルされたテンプレートオブジェクトに対して "
"``render()`` を呼び出すと、テンプレートは与えられたコンテキストで、ノードリス"
"ト内の各 ``Node`` に対して ``render()`` を呼び出します。 その結果はすべて連結"
"され、テンプレートの出力となります。"

msgid ""
"Thus, to define a custom template tag, you specify how the raw template tag "
"is converted into a ``Node`` (the compilation function), and what the node's "
"``render()`` method does."
msgstr ""
"このように、カスタムテンプレートタグを定義するには、生のテンプレートタグを "
"``Node`` に変換する方法（コンパイル関数）と、ノードの ``render()`` メソッドの"
"動作を指定します。"

msgid "Writing the compilation function"
msgstr "コンパイル関数の書き方"

msgid ""
"For each template tag the template parser encounters, it calls a Python "
"function with the tag contents and the parser object itself. This function "
"is responsible for returning a ``Node`` instance based on the contents of "
"the tag."
msgstr ""
"テンプレートパーサーが見つけたそれぞれのテンプレートタグに対して、タグの内容"
"とパーサーオブジェクト自身を使って Python 関数を呼び出します。この関数はタグ"
"の内容に基づいて ``Node`` インスタンスを返す役割を担います。"

msgid ""
"For example, let's write a full implementation of our template tag, ``{% "
"current_time %}``, that displays the current date/time, formatted according "
"to a parameter given in the tag, in :func:`~time.strftime` syntax. It's a "
"good idea to decide the tag syntax before anything else. In our case, let's "
"say the tag should be used like this:"
msgstr ""
"例えば、テンプレートタグの完全な実装である ``{% current_time %}`` を書いてみ"
"ましょう。このタグは :func:`~time.strftime` という構文で、タグで与えられたパ"
"ラメータに従ってフォーマットされた現在の日時を表示します。何よりも先にタグの"
"構文を決めるのは良いアイデアです。この場合、タグは次のように使用します:"

msgid ""
"The parser for this function should grab the parameter and create a ``Node`` "
"object::"
msgstr ""
"この関数のパーサは、パラメータを取得して ``Node`` オブジェクトを作成する必要"
"があります:"

msgid "Notes:"
msgstr "メモ: "

msgid ""
"``parser`` is the template parser object. We don't need it in this example."
msgstr ""
"``parser`` はテンプレートパーサーオブジェクトです。この例では不要です。"

msgid ""
"``token.contents`` is a string of the raw contents of the tag. In our "
"example, it's ``'current_time \"%Y-%m-%d %I:%M %p\"'``."
msgstr ""
"``token.contents`` はタグの生の内容を表す文字列です。この例では "
"``'current_time \"%Y-%m-%d %I:%M %p\"'`` です。"

msgid ""
"The ``token.split_contents()`` method separates the arguments on spaces "
"while keeping quoted strings together. The more straightforward ``token."
"contents.split()`` wouldn't be as robust, as it would naively split on *all* "
"spaces, including those within quoted strings. It's a good idea to always "
"use ``token.split_contents()``."
msgstr ""
"``token.split_contents()`` メソッドは、引用符で囲まれた文字列はそのままに、引"
"数をスペースで分割します。より単純な ``token.contents.split()`` を使用する"
"と、引用符で囲まれた文字列内を含む *すべての* スペースで単純に分割してしまう"
"ため、それほど堅牢ではありません。常に ``token.split_contents()`` を使用する"
"ことをお勧めします。"

msgid ""
"This function is responsible for raising ``django.template."
"TemplateSyntaxError``, with helpful messages, for any syntax error."
msgstr ""
"この関数は構文エラーに対して ``django.template.TemplateSyntaxError`` を親切な"
"メッセージとともに発生させます。"

msgid ""
"The ``TemplateSyntaxError`` exceptions use the ``tag_name`` variable. Don't "
"hard-code the tag's name in your error messages, because that couples the "
"tag's name to your function. ``token.contents.split()[0]`` will ''always'' "
"be the name of your tag -- even when the tag has no arguments."
msgstr ""
"``TemplateSyntaxError`` 例外は ``tag_name`` 変数を使用します。エラーメッセー"
"ジにタグの名前をハードコーディングしないでください。 ``token.contents.split()"
"[0]`` は\"常に\"タグの名前になります――タグに引数がない場合でもです。"

msgid ""
"The function returns a ``CurrentTimeNode`` with everything the node needs to "
"know about this tag. In this case, it passes the argument -- ``\"%Y-%m-%d %I:"
"%M %p\"``. The leading and trailing quotes from the template tag are removed "
"in ``format_string[1:-1]``."
msgstr ""
"この関数は、ノードがこのタグについて知る必要があるすべての情報を含む "
"``CurrentTimeNode`` を返します。この場合、引数 ``\"%Y-%m-%d %I:%M %p\"`` を渡"
"します。 ``format_string[1:-1]`` では、テンプレートタグの先頭と末尾の引用符が"
"取り除かれます。"

msgid ""
"The parsing is very low-level. The Django developers have experimented with "
"writing small frameworks on top of this parsing system, using techniques "
"such as EBNF grammars, but those experiments made the template engine too "
"slow. It's low-level because that's fastest."
msgstr ""
"構文解析は非常に低レベルです。Django の開発者は、 EBNF 文法などのテクニックを"
"使って、この構文解析システムの上に小さなフレームワークを書く実験をしました"
"が、 その実験ではテンプレートエンジンが遅すぎました。 低レベルなのは、それが"
"最速だからです。"

msgid "Writing the renderer"
msgstr "レンダラーの書き方"

msgid ""
"The second step in writing custom tags is to define a ``Node`` subclass that "
"has a ``render()`` method."
msgstr ""
"カスタムタグを書く2つ目のステップは、 ``render()`` メソッドを持つ ``Node`` サ"
"ブクラスを定義することです。"

msgid "Continuing the above example, we need to define ``CurrentTimeNode``::"
msgstr "上記の例の続きで、 ``CurrentTimeNode`` を定義する必要があります:"

msgid ""
"``__init__()`` gets the ``format_string`` from ``do_current_time()``. Always "
"pass any options/parameters/arguments to a ``Node`` via its ``__init__()``."
msgstr ""
"``__init__()`` は ``do_current_time()`` から ``format_string`` を取得します。"
"オプションやパラメータ、引数は常に ``Node`` の ``__init__()`` から渡します。"

msgid "The ``render()`` method is where the work actually happens."
msgstr "``render()`` メソッドは、実際に処理が行われる場所です。"

msgid ""
"``render()`` should generally fail silently, particularly in a production "
"environment. In some cases however, particularly if ``context.template."
"engine.debug`` is ``True``, this method may raise an exception to make "
"debugging easier. For example, several core tags raise ``django.template."
"TemplateSyntaxError`` if they receive the wrong number or type of arguments."
msgstr ""
"特に実運用環境では、 ``render()`` は通常は静かに失敗するべきです。しかし、場"
"合によっては、特に ``context.template.engine.debug`` が ``True`` の場合、この"
"メソッドはデバッグを容易にするために例外を発生させることがあります。例えば、"
"いくつかのコアタグは、引数の数や型を間違えると ``django.template."
"TemplateSyntaxError`` を発生させます。"

msgid ""
"Ultimately, this decoupling of compilation and rendering results in an "
"efficient template system, because a template can render multiple contexts "
"without having to be parsed multiple times."
msgstr ""
"最終的に、コンパイルとレンダリングを切り離すことで、効率的なテンプレートシス"
"テムが実現します。なぜなら、テンプレートは何度もパースされることなく、複数の"
"コンテキストをレンダリングできるからです。"

msgid "Auto-escaping considerations"
msgstr "自動エスケープに関する注意点"

msgid ""
"The output from template tags is **not** automatically run through the auto-"
"escaping filters (with the exception of :meth:`~django.template.Library."
"simple_tag` as described above). However, there are still a couple of things "
"you should keep in mind when writing a template tag."
msgstr ""
"テンプレートタグからの出力は自動エスケープフィルタに自動的に通されることは **"
"ありません** (上で説明した :meth:`~django.template.Library.simple_tag` は例外"
"です)。しかし、テンプレートタグを書く際に注意すべき点がいくつかあります。"

msgid ""
"If the ``render()`` method of your template tag stores the result in a "
"context variable (rather than returning the result in a string), it should "
"take care to call ``mark_safe()`` if appropriate. When the variable is "
"ultimately rendered, it will be affected by the auto-escape setting in "
"effect at the time, so content that should be safe from further escaping "
"needs to be marked as such."
msgstr ""
"テンプレートタグの ``render()`` メソッドが(結果を文字列で返すのではなく)コン"
"テキスト変数に結果を格納する場合、適切であれば ``mark_safe()`` を呼び出すよう"
"に注意しなければなりません。変数が最終的にレンダリングされるとき、その時点で"
"有効な自動エスケープ設定の影響を受けます、そのため、さらなるエスケープから安"
"全であるべきコンテンツは、そのようにマークされる必要があります。"

msgid ""
"Also, if your template tag creates a new context for performing some sub-"
"rendering, set the auto-escape attribute to the current context's value. The "
"``__init__`` method for the ``Context`` class takes a parameter called "
"``autoescape`` that you can use for this purpose. For example::"
msgstr ""
"また、テンプレートタグがサブレンダリングを行うために新しいコンテキストを作成"
"する場合、auto-escape 属性に現在のコンテキストの値を指定します。 ``Context`` "
"クラスの ``__init__`` メソッドはこの目的で使用できる ``autoescape`` というパ"
"ラメータを受け取ります。例えば:"

msgid ""
"This is not a very common situation, but it's useful if you're rendering a "
"template yourself. For example::"
msgstr ""
"これはあまり一般的な状況ではありませんが、テンプレートを自分でレンダリングす"
"る場合に便利です。例えば:"

msgid ""
"If we had neglected to pass in the current ``context.autoescape`` value to "
"our new ``Context`` in this example, the results would have *always* been "
"automatically escaped, which may not be the desired behavior if the template "
"tag is used inside a :ttag:`{% autoescape off %}<autoescape>` block."
msgstr ""
"もしこの例で、現在の ``context.autoescape`` の値を新しい ``Context`` に渡すの"
"を怠っていたら、結果は *常に* 自動的にエスケープされていたでしょう。これは、"
"テンプレートタグが :ttag:`{% autoescape off %}<autoescape>` ブロックの中で使"
"用されている場合、望ましい動作ではないかもしれません。"

msgid "Thread-safety considerations"
msgstr "スレッド安全性の考慮"

msgid ""
"Once a node is parsed, its ``render`` method may be called any number of "
"times. Since Django is sometimes run in multi-threaded environments, a "
"single node may be simultaneously rendering with different contexts in "
"response to two separate requests. Therefore, it's important to make sure "
"your template tags are thread safe."
msgstr ""
"ノードがパースされると、その ``render`` メソッドは何度でも呼び出されます。"
"Django はマルチスレッド環境で実行されることがあるので、1つのノードが2つのリク"
"エストに応答して、異なるコンテキストで同時にレンダリングされることがありま"
"す。したがって、テンプレートタグをスレッドセーフにすることが重要です。"

msgid ""
"To make sure your template tags are thread safe, you should never store "
"state information on the node itself. For example, Django provides a "
"builtin :ttag:`cycle` template tag that cycles among a list of given strings "
"each time it's rendered:"
msgstr ""
"テンプレートタグを常にスレッドセーフに保つため、ノード自体に状態情報を保存し"
"てはいけません。例えば、 Django にはレンダリングされる度に与えられた文字列の"
"リストを循環させる :ttag:`cycle` テンプレートタグが用意されています:"

msgid ""
"A naive implementation of ``CycleNode`` might look something like this::"
msgstr "ナイーブな ``CycleNode`` の実装は次のようになります:"

msgid ""
"But, suppose we have two templates rendering the template snippet from above "
"at the same time:"
msgstr ""
"しかし、上のテンプレートコードを同時にレンダリングする2つのテンプレートがある"
"とします:"

msgid ""
"Thread 1 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""
"スレッド1が最初のループを実行し、 ``CycleNode.render()`` は 'row1' を返しま"
"す。"

msgid ""
"Thread 2 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""
"スレッド2が最初のループを実行し、 ``CycleNode.render()`` は 'row2' を返しま"
"す。"

msgid ""
"Thread 1 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""
"スレッド1が2回目のループを実行し、 ``CycleNode.render()`` は 'row1' を返しま"
"す。"

msgid ""
"Thread 2 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""
"スレッド2が2回目のループを実行し、 ``CycleNode.render()`` は 'row2' を返しま"
"す。"

msgid ""
"The CycleNode is iterating, but it's iterating globally. As far as Thread 1 "
"and Thread 2 are concerned, it's always returning the same value. This is "
"not what we want!"
msgstr ""
"CycleNodeは反復していますが、グローバルに反復しています。スレッド1とスレッド2"
"に関しては、常に同じ値を返しています。これは私たちが望んでいることではありま"
"せん！"

msgid ""
"To address this problem, Django provides a ``render_context`` that's "
"associated with the ``context`` of the template that is currently being "
"rendered. The ``render_context`` behaves like a Python dictionary, and "
"should be used to store ``Node`` state between invocations of the ``render`` "
"method."
msgstr ""
"この問題に対処するために、 Django は ``render_context`` を提供します。この "
"``render_context`` は、現在レンダリング中のテンプレートの ``context`` に関連"
"付けられます。この ``render_context`` は Python の辞書のように動作し、 "
"``render`` メソッドを呼び出す間の ``Node`` の状態を保存するために使う必要があ"
"ります。"

msgid ""
"Let's refactor our ``CycleNode`` implementation to use the "
"``render_context``::"
msgstr ""
"``CycleNode`` の実装を ``render_context`` を使うようにリファクタリングしま"
"しょう:"

msgid ""
"Note that it's perfectly safe to store global information that will not "
"change throughout the life of the ``Node`` as an attribute. In the case of "
"``CycleNode``, the ``cyclevars`` argument doesn't change after the ``Node`` "
"is instantiated, so we don't need to put it in the ``render_context``. But "
"state information that is specific to the template that is currently being "
"rendered, like the current iteration of the ``CycleNode``, should be stored "
"in the ``render_context``."
msgstr ""
"``Node`` のライフサイクルを通して変化しないグローバルな情報を属性として保存す"
"ることは完全に安全であることに注意してください。 ``CycleNode`` の場合、 "
"``Node`` がインスタンス化された後も ``cyclevars`` 引数は変化しないので、 "
"``render_context`` に格納する必要はありません。しかし、 ``CycleNode`` の現在"
"の繰り返し処理のように、現在レンダリングされているテンプレートに固有の状態情"
"報は ``render_context`` に格納する必要があります。"

msgid ""
"Notice how we used ``self`` to scope the ``CycleNode`` specific information "
"within the ``render_context``. There may be multiple ``CycleNodes`` in a "
"given template, so we need to be careful not to clobber another node's state "
"information. The easiest way to do this is to always use ``self`` as the key "
"into ``render_context``. If you're keeping track of several state variables, "
"make ``render_context[self]`` a dictionary."
msgstr ""
"``self`` を使用して ``render_context`` 内の ``CycleNode`` 固有の情報をスコー"
"プしていることに注意してください。 テンプレート内には複数の ``CycleNode`` が"
"存在する可能性があるので、他のノードの状態情報を取得しないように注意する必要"
"があります。最も簡単な方法は、常に ``render_context`` のキーとして ``self`` "
"を使用することです。複数の状態変数を管理している場合は、 "
"``render_context[self]`` を辞書にします。"

msgid "Registering the tag"
msgstr "タグを登録する"

msgid ""
"Finally, register the tag with your module's ``Library`` instance, as "
"explained in :ref:`writing custom template tags<howto-writing-custom-"
"template-tags>` above. Example::"
msgstr ""
"最後に、上記の :ref:`カスタムテンプレートタグを書く<howto-writing-custom-"
"template-tags>` で説明したように、タグをモジュールの ``Library`` インスタンス"
"に登録します。次に例を示します。"

msgid "The ``tag()`` method takes two arguments:"
msgstr "``tag()`` メソッドは次の2つの引数を取ります。"

msgid ""
"The name of the template tag -- a string. If this is left out, the name of "
"the compilation function will be used."
msgstr ""
"テンプレート タグの名前の文字列。これを省略した場合は、コンパイル関数の名前が"
"使用されます。"

msgid ""
"As with filter registration, it is also possible to use this as a decorator::"
msgstr "フィルタ登録と同様に、これをデコレータとして使うこともできます。"

msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the tag name."
msgstr ""
"``name`` 引数を省略した場合、上記の2番目の例と同じように、Django はタグ名とし"
"て関数の名前を利用します。"

msgid "Passing template variables to the tag"
msgstr "テンプレート変数をタグに渡す"

msgid ""
"Although you can pass any number of arguments to a template tag using "
"``token.split_contents()``, the arguments are all unpacked as string "
"literals. A little more work is required in order to pass dynamic content (a "
"template variable) to a template tag as an argument."
msgstr ""
"``token.split_contents()`` を使用するテンプレート タグには任意の個数の引数を"
"渡せますが、引数はすべて文字列リテラルとしてアンパックされます。動的なコンテ"
"ンツ (テンプレート変数) をテンプレートタグに引数として渡すためには、少し追加"
"の作業が必要になります。"

msgid ""
"While the previous examples have formatted the current time into a string "
"and returned the string, suppose you wanted to pass in a :class:`~django.db."
"models.DateTimeField` from an object and have the template tag format that "
"date-time:"
msgstr ""
"前の例では現在時刻を文字列にフォーマットして文字列として返しましたが、オブ"
"ジェクトから :class:`~django.db.models.DateTimeField` を渡したくて、テンプ"
"レートタグがその値を date-time とフォーマットとするとすると、次のように書けま"
"す。"

msgid "Initially, ``token.split_contents()`` will return three values:"
msgstr "最初に、``token.split_contents()`` が3つの値を返します。"

msgid "The tag name ``format_time``."
msgstr "タグ名 ``format_time``。"

msgid ""
"The string ``'blog_entry.date_updated'`` (without the surrounding quotes)."
msgstr "文字列 ``'blog_entry.date_updated'`` (両側のクオートは含まない)"

msgid ""
"The formatting string ``'\"%Y-%m-%d %I:%M %p\"'``. The return value from "
"``split_contents()`` will include the leading and trailing quotes for string "
"literals like this."
msgstr ""
"フォーマット文字列 ``'\"%Y-%m-%d %I:%M %p\"'``。``split_contents()`` からの返"
"り値は、このように文字列リテラルの前後にクオートを含みます。"

msgid "Now your tag should begin to look like this::"
msgstr "これで、タグは次のようになります。"

msgid ""
"You also have to change the renderer to retrieve the actual contents of the "
"``date_updated`` property of the ``blog_entry`` object.  This can be "
"accomplished by using the ``Variable()`` class in ``django.template``."
msgstr ""
"``blog_entry`` オブジェクトの ``date_updated`` プロパティの実際のコンテンツを"
"取得するレンダラを変更する必要があります。これは ``django.template`` で "
"``Variable()`` クラスを使用することで実現できます。"

msgid ""
"To use the ``Variable`` class, instantiate it with the name of the variable "
"to be resolved, and then call ``variable.resolve(context)``. So, for "
"example::"
msgstr ""
"``Variable`` クラスを使うには、クラスを解決されるべき変数名でインスタンス化し"
"た後に、``variable.resolve(context)`` を呼びます。したがって、たとえば次のよ"
"うになります。"

msgid ""
"Variable resolution will throw a ``VariableDoesNotExist`` exception if it "
"cannot resolve the string passed to it in the current context of the page."
msgstr ""
"ページの現在のコンテキスト内で渡された文字列が解決できない場合、変数を解決し"
"ようとすると ``VariableDoesNotExist`` 例外が発生します。"

msgid "Setting a variable in the context"
msgstr "コンテキスト内で変数を設定する"

msgid ""
"The above examples output a value. Generally, it's more flexible if your "
"template tags set template variables instead of outputting values. That way, "
"template authors can reuse the values that your template tags create."
msgstr ""
"上記の例は値を出力します。一般に、テンプレートタグは値を出力する代わりに、テ"
"ンプレート変数を設定するほうがより柔軟です。それにより、テンプレートの作者は"
"テンプレートタグが作成した値を再利用できるようになります。"

msgid ""
"To set a variable in the context, use dictionary assignment on the context "
"object in the ``render()`` method. Here's an updated version of "
"``CurrentTimeNode`` that sets a template variable ``current_time`` instead "
"of outputting it::"
msgstr ""
"コンテキスト内に変数を設定するには、``render()`` メソッド内で、コンテキスト "
"オブジェクト上のディクショナリ代入を使います。以下は、出力する代わりにテンプ"
"レート変数 ``current_time`` を設定する、更新されたバージョンの "
"``CurrentTimeNode`` です。"

msgid ""
"Note that ``render()`` returns the empty string. ``render()`` should always "
"return string output. If all the template tag does is set a variable, "
"``render()`` should return the empty string."
msgstr ""
"``render()`` は空の文字列を返すことに注意してください。``render()`` はつねに"
"文字列の出力を返します。すべてのテンプレートタグが変数の設定だけを行う場合、"
"``render()`` は空の文字列を返す必要があります。"

msgid "Here's how you'd use this new version of the tag:"
msgstr "この新しいバージョンのタグの使い方はこちらです。"

msgid "Variable scope in context"
msgstr "コンテキスト内の変数のスコープ"

msgid ""
"Any variable set in the context will only be available in the same ``block`` "
"of the template in which it was assigned. This behavior is intentional; it "
"provides a scope for variables so that they don't conflict with context in "
"other blocks."
msgstr ""
"コンテキストに設定された変数は、その変数が割り当てられたテンプレートの同じ "
"``block`` でのみ使用できます。 この動作は意図的なもので、他のブロックのコンテ"
"キストと衝突しないように、変数にスコープを提供します。"

msgid ""
"But, there's a problem with ``CurrentTimeNode2``: The variable name "
"``current_time`` is hard-coded. This means you'll need to make sure your "
"template doesn't use ``{{ current_time }}`` anywhere else, because the ``{% "
"current_time %}`` will blindly overwrite that variable's value. A cleaner "
"solution is to make the template tag specify the name of the output "
"variable, like so:"
msgstr ""
"しかし、 ``CurrentTimeNode2`` には問題があります: 変数名 ``current_time`` が"
"ハードコーディングされています。つまり、テンプレートが ``{{ current_time }}"
"`` を他の場所で使用していないことを確認する必要があります。なぜなら、 ``{% "
"current_time %}`` はその変数の値を盲目的に上書きしてしまうからです。よりクリ"
"アな解決策は、次のようにテンプレートタグで出力変数の名前を指定することです:"

msgid ""
"To do that, you'll need to refactor both the compilation function and "
"``Node`` class, like so::"
msgstr ""
"そのためには、コンパイル関数と ``Node`` クラスの両方を次のようにリファクタリ"
"ングする必要があります:"

msgid ""
"The difference here is that ``do_current_time()`` grabs the format string "
"and the variable name, passing both to ``CurrentTimeNode3``."
msgstr ""
"ここでの違いは、 ``do_current_time()`` がフォーマット文字列と変数名を取得し、"
"その両方を ``CurrentTimeNode3`` に渡していることです。"

msgid ""
"Finally, if you only need to have a simple syntax for your custom context-"
"updating template tag, consider using the :meth:`~django.template.Library."
"simple_tag` shortcut, which supports assigning the tag results to a template "
"variable."
msgstr ""
"最後に、コンテキストを更新するカスタムテンプレートタグの簡単な構文が必要なだ"
"けなら、 :meth:`~django.template.Library.simple_tag` ショートカットを使うこと"
"を検討してください 。 このショートカットは、タグの結果をテンプレート変数に代"
"入することをサポートしています。"

msgid "Parsing until another block tag"
msgstr "他のブロックタグまでパースする"

msgid ""
"Template tags can work in tandem. For instance, the standard :ttag:`{% "
"comment %}<comment>` tag hides everything until ``{% endcomment %}``. To "
"create a template tag such as this, use ``parser.parse()`` in your "
"compilation function."
msgstr ""
"テンプレートタグは連動して動作します。例えば、標準の :ttag:`{% comment %}"
"<comment>` タグは ``{% endcomment %}`` まですべてを隠蔽します。このようなテン"
"プレートタグを作成するには、コンパイル関数の中で ``parser.parse()`` を使いま"
"す。"

msgid "Here's how a simplified ``{% comment %}`` tag might be implemented::"
msgstr "以下は ``{% comment %}`` タグをシンプル化したものです:"

msgid ""
"The actual implementation of :ttag:`{% comment %}<comment>` is slightly "
"different in that it allows broken template tags to appear between ``{% "
"comment %}`` and ``{% endcomment %}``. It does so by calling ``parser."
"skip_past('endcomment')`` instead of ``parser.parse(('endcomment',))`` "
"followed by ``parser.delete_first_token()``, thus avoiding the generation of "
"a node list."
msgstr ""
"実際の :ttag:`{% comment %}<comment>` の実装は少し異なり、 ``{% comment %}`` "
"と ``{% endcomment %}`` の間に壊れたテンプレートタグを表示することを許可しま"
"す。これは ``parser.parse(('endcomment',))`` の代わりに ``parser."
"skip_past('endcomment')`` を呼び出し、その後に ``parser."
"delete_first_token()`` を実行することで、ノードリストの生成を回避しています。"

msgid ""
"``parser.parse()`` takes a tuple of names of block tags ''to parse until''. "
"It returns an instance of ``django.template.NodeList``, which is a list of "
"all ``Node`` objects that the parser encountered ''before'' it encountered "
"any of the tags named in the tuple."
msgstr ""
"``parser.parse()`` はブロックタグの名前のタプルを受け取ります。これは "
"``django.template.NodeList`` のインスタンスを返します。 これはパーサがタプル"
"で指定されたタグに遭遇する''前に''遭遇した全ての ``Node`` オブジェクトのリス"
"トです。 "

msgid ""
"In ``\"nodelist = parser.parse(('endcomment',))\"`` in the above example, "
"``nodelist`` is a list of all nodes between the ``{% comment %}`` and ``{% "
"endcomment %}``, not counting ``{% comment %}`` and ``{% endcomment %}`` "
"themselves."
msgstr ""
"上の例 ``\"nodelist = parser.parse(('endcomment',))\"`` において、 "
"``nodelist`` は ``{% comment %}`` と ``{% endcomment %}`` の間にある全ての"
"ノードのリストであり、 ``{% comment %}`` と ``{% endcomment %}`` 自体は含まれ"
"ません。"

msgid ""
"After ``parser.parse()`` is called, the parser hasn't yet \"consumed\" the "
"``{% endcomment %}`` tag, so the code needs to explicitly call ``parser."
"delete_first_token()``."
msgstr ""
"``parser.parse()`` が呼ばれた後、パーサはまだ ``{% endcomment %}`` タグを "
"\"消費\" していないので、コードは明示的に ``parser.delete_first_token()`` を"
"呼び出す必要があります。"

msgid ""
"``CommentNode.render()`` returns an empty string. Anything between ``{% "
"comment %}`` and ``{% endcomment %}`` is ignored."
msgstr ""
"``CommentNode.render()`` は空の文字列を返します。 ``{% comment %}`` と ``{% "
"endcomment %}`` の間はすべて無視されます。"

msgid "Parsing until another block tag, and saving contents"
msgstr "別のブロックタグまでのパースと内容の保存"

msgid ""
"In the previous example, ``do_comment()`` discarded everything between ``{% "
"comment %}`` and ``{% endcomment %}``. Instead of doing that, it's possible "
"to do something with the code between block tags."
msgstr ""
"先ほどの例では、 ``do_comment()`` は ``{% comment %}`` と ``{% endcomment %}"
"`` の間をすべて破棄していました。その代わりに、ブロックタグの間のコードで好き"
"なことができます。"

msgid ""
"For example, here's a custom template tag, ``{% upper %}``, that capitalizes "
"everything between itself and ``{% endupper %}``."
msgstr ""
"例えば、これはカスタムテンプレートタグ ``{% upper %}`` で、それ自身と ``{% "
"endupper %}`` の間をすべて大文字にします。"

msgid "Usage:"
msgstr "使い方:"

msgid ""
"As in the previous example, we'll use ``parser.parse()``. But this time, we "
"pass the resulting ``nodelist`` to the ``Node``::"
msgstr ""
"上の例と同様に ``parser.parse()`` を使いますが、今回は次のように、結果の "
"``nodelist`` を ``Node`` に渡します。"

msgid ""
"The only new concept here is the ``self.nodelist.render(context)`` in "
"``UpperNode.render()``."
msgstr ""
"ここで唯一の新しい概念は、``UpperNode.render()`` 内の ``self.nodelist."
"render(context)`` だけです。"

msgid ""
"For more examples of complex rendering, see the source code of :ttag:`{% for "
"%}<for>` in :source:`django/template/defaulttags.py` and :ttag:`{% if %}"
"<if>` in :source:`django/template/smartif.py`."
msgstr ""
"複雑なレンダリングの追加の例としては、:source:`django/template/defaulttags."
"py` 内の :ttag:`{% for %}<for>` や :source:`django/template/smartif.py` 内"
"の :ttag:`{% if %}<if>` のソースコードを見てください。"

msgid "How to delete a Django application"
msgstr "Djangoアプリケーションを削除する"

msgid ""
"Django provides the ability to group sets of features into Python packages "
"called :doc:`applications</ref/applications/>`. When requirements change, "
"apps may become obsolete or unnecessary. The following steps will help you "
"delete an application safely."
msgstr ""
"Django は、一連の機能を :doc:`アプリケーション</ref/applications/>` と呼ばれ"
"る Python パッケージとしてグループ化する機能を提供しています。要件が変化する"
"と、アプリは古くなったり不要になることがあります。以下のステップは、アプリ"
"ケーションを安全に削除する助けとなります。"

msgid "Remove all references to the app (imports, foreign keys etc.)."
msgstr "アプリへのすべての参照を削除する (import、外部キーなど)"

msgid "Remove all models from the corresponding ``models.py`` file."
msgstr "すべてのモデルを対応する ``models.py`` ファイルから削除する。"

msgid ""
"Create relevant migrations by running :djadmin:`makemigrations`. This step "
"generates a migration that deletes tables for the removed models, and any "
"other required migration for updating relationships connected to those "
"models."
msgstr ""
":djadmin:`makemigrations` を実行して、関連するマイグレーションを作成する。こ"
"のステップは、削除されるモデルに対するテーブルを削除するマイグレーションや、"
"それらのモデルに接続されたリレーションを更新するために必要とされる他のマイグ"
"レーションを生成します。"

msgid ""
":ref:`Squash <migration-squashing>` out references to the app in other apps' "
"migrations."
msgstr ""
"他のアプリのマイグレーション内のアプリへの参照を :ref:`squash <migration-"
"squashing>` する。"

msgid ""
"Apply migrations locally, runs tests, and verify the correctness of your "
"project."
msgstr ""
"ローカルでマイグレーションを適用し、テストを実行し、プロジェクトの健全性を確"
"認する。"

msgid "Deploy/release your updated Django project."
msgstr "更新された Django プロジェクトをデプロイ/リリースする。"

msgid "Remove the app from :setting:`INSTALLED_APPS`."
msgstr "アプリを :setting:`INSTALLED_APPS` から削除する。"

msgid "Finally, remove the app's directory."
msgstr "最後に、アプリのディレクトリを削除する。"

msgid "How to use Django with Daphne"
msgstr "Django を Daphne とともに使う"

msgid ""
":pypi:`Daphne <daphne>` is a pure-Python ASGI server for UNIX, maintained by "
"members of the Django project. It acts as the reference server for ASGI."
msgstr ""
":pypi:`Daphne <daphne>` は、pure-Pythonで書かれたUNIX向けのASGIサーバーで、"
"Djangoプロジェクトのメンバーによってメンテナンスされています。これはASGIのリ"
"ファレンス実装のサーバーとして機能します。"

msgid "Installing Daphne"
msgstr "Daphneのインストール"

msgid "You can install Daphne with ``pip``:"
msgstr "``pip`` で Daphne をインストールします:"

msgid "Running Django in Daphne"
msgstr "Daphne で Django を実行"

msgid ""
"When Daphne is installed, a ``daphne`` command is available which starts the "
"Daphne server process. At its simplest, Daphne needs to be called with the "
"location of a module containing an ASGI application object, followed by what "
"the application is called (separated by a colon)."
msgstr ""
"Daphne がインストールされると、Daphne サーバプロセスを起動する ``daphne`` コ"
"マンドが利用できるようになります。Daphne を呼び出すには、ASGI アプリケーショ"
"ンオブジェクトを含むモジュールの場所と、それに続いてアプリケーションの名前を"
"（コロンで区切って）指定する必要があります。"

msgid "For a typical Django project, invoking Daphne would look like:"
msgstr "典型的な Django プロジェクトでは、Daphne の起動は次のようになります:"

msgid ""
"This will start one process listening on ``127.0.0.1:8000``. It requires "
"that your project be on the Python path; to ensure that run this command "
"from the same directory as your ``manage.py`` file."
msgstr ""
"このコマンドは ``127.0.0.1:8000`` を待ち受けるプロセスを1つ起動します。プロ"
"ジェクトは Python のパス上にある必要があります。それを確実にするために、 "
"``manage.py`` ファイルと同じディレクトリからこのコマンドを実行してください。"

msgid "Integration with ``runserver``"
msgstr "``runserver`` との統合"

msgid ""
"Daphne provides a :djadmin:`runserver` command to serve your site under ASGI "
"during development."
msgstr ""
"Daphneは開発中にASGIでサイトを動かすための :djadmin:`runserver` コマンドを提"
"供しています。"

msgid ""
"This can be enabled by adding ``daphne`` to the start of your :setting:"
"`INSTALLED_APPS` and adding an ``ASGI_APPLICATION`` setting pointing to your "
"ASGI application object::"
msgstr ""
"これは :setting:`INSTALLED_APPS` の先頭に ``daphne`` を追加し、ASGI アプリ"
"ケーションオブジェクトを指す ``ASGI_APPLICATION`` 設定を追加することで有効に"
"なります:"

msgid "How to use Django with Hypercorn"
msgstr "Django を Hypercorn とともに使う"

msgid ""
"Hypercorn_ is an ASGI server that supports HTTP/1, HTTP/2, and HTTP/3 with "
"an emphasis on protocol support."
msgstr ""
"Hypercorn_ は、プロトコルのサポートに重点を置く HTTP/1、HTTP/2、HTTP/3 をサ"
"ポートする ASGI サーバーです。"

msgid "Installing Hypercorn"
msgstr "Hypercorn のインストール"

msgid "You can install Hypercorn with ``pip``:"
msgstr "``pip`` で Hypercorn をインストールします:"

msgid "Running Django in Hypercorn"
msgstr "Hypercorn で Django を実行"

msgid ""
"When Hypercorn is installed, a ``hypercorn`` command is available which runs "
"ASGI applications. Hypercorn needs to be called with the location of a "
"module containing an ASGI application object, followed by what the "
"application is called (separated by a colon)."
msgstr ""
"Hypercorn をインストールすると、ASGI アプリを実行する ``hypercorn`` コマンド"
"が利用できるように鳴ります。Hypercorn は、ASGI アプリケーション オブジェクト"
"があるモジュールの場所で実行し、アプリケーションの名前 (コロン区切り) を指定"
"する必要があります。"

msgid "For a typical Django project, invoking Hypercorn would look like:"
msgstr ""
"典型的な Django プロジェクトでは、Hypercorn の呼び出しは次のようになります。"

msgid ""
"For more advanced usage, please read the `Hypercorn documentation "
"<Hypercorn_>`_."
msgstr ""
"より高度な使い方については、 `Hypercorn documentation <Hypercorn_>`_ を読んで"
"ください。"

msgid "How to deploy with ASGI"
msgstr "ASGI とともにデプロイするには"

msgid ""
"As well as WSGI, Django also supports deploying on ASGI_, the emerging "
"Python standard for asynchronous web servers and applications."
msgstr ""
"WSGI だけでなく、Django は非同期ウェブサーバやアプリケーションのための新しい "
"Python 標準である ASGI_ でのデプロイもサポートしています。"

msgid ""
"Django's :djadmin:`startproject` management command sets up a default ASGI "
"configuration for you, which you can tweak as needed for your project, and "
"direct any ASGI-compliant application server to use."
msgstr ""
"Django の :djadmin:`startproject` 管理用コマンドは、デフォルトの ASGI 設定を"
"セットアップします。必要に応じて、あなたのプロジェクトと ASGI 準拠の Web サー"
"バに合わせて微調整することができます。 "

msgid ""
"Django includes getting-started documentation for the following ASGI servers:"
msgstr ""
"Django には以下の ASGI サーバのために、手引きとなるドキュメントが用意されてい"
"ます。"

msgid "The ``application`` object"
msgstr "``application`` オブジェクト"

msgid ""
"Like WSGI, ASGI has you supply an ``application`` callable which the "
"application server uses to communicate with your code. It's commonly "
"provided as an object named ``application`` in a Python module accessible to "
"the server."
msgstr ""
"WSGI と同様に、ASGI は ``application`` という呼び出し可能オブジェクトを提供し"
"ており、アプリケーション サーバはこれを使用してあなたのコードと通信します。こ"
"れは一般的に、サーバにアクセスできる Python モジュールの中で ``application`` "
"という名前のオブジェクトとして提供されています。"

msgid ""
"The :djadmin:`startproject` command creates a file :file:`<project_name>/"
"asgi.py` that contains such an ``application`` callable."
msgstr ""
":djadmin:`startproject` コマンドは、この ``application`` 呼び出し可能オブジェ"
"クトを含む :file:`<project_name>/asgi.py` ファイルを生成します。"

msgid ""
"It's not used by the development server (``runserver``), but can be used by "
"any ASGI server either in development or in production."
msgstr ""
"開発サーバー (``runserver``) では使用されませんが、開発環境と本番環境のどちら"
"でも、任意の ASGI サーバーからも使用できます。"

msgid ""
"ASGI servers usually take the path to the application callable as a string; "
"for most Django projects, this will look like ``myproject.asgi:application``."
msgstr ""
"ASGI サーバーは通常、呼び出し可能オブジェクト application へのパスを文字列と"
"して取ります。たとえば、ほとんどの Django プロジェクトでは、``myproject.asgi:"
"application`` のような文字列になります。"

msgid ""
"While Django's default ASGI handler will run all your code in a synchronous "
"thread, if you choose to run your own async handler you must be aware of "
"async-safety."
msgstr ""
"Django のデフォルトの ASGI ハンドラは全てのコードを同期スレッドで実行します "
"が、独自の非同期ハンドラを実行する場合は、非同期安全性を意識する必要がありま"
"す。"

msgid ""
"Do not call blocking synchronous functions or libraries in any async code. "
"Django prevents you from doing this with the parts of Django that are not "
"async-safe, but the same may not be true of third-party apps or Python "
"libraries."
msgstr ""
"非同期コードの中で、ブロッキングな同期関数やライブラリを呼び出さないでくださ"
"い。Django は、非同期安全でない Django の部分でこのようなことができないように"
"していますが、サードパーティのアプリや Python ライブラリではそうとは限りませ"
"ん。"

msgid "Configuring the settings module"
msgstr "Settings モジュールを設定する"

msgid ""
"When the ASGI server loads your application, Django needs to import the "
"settings module — that's where your entire application is defined."
msgstr ""
"ASGI サーバがアプリケーションをロードするとき、Django は settings モジュール"
"をインポートする必要があります――アプリケーション全体がここで定義されます。"

msgid ""
"Django uses the :envvar:`DJANGO_SETTINGS_MODULE` environment variable to "
"locate the appropriate settings module. It must contain the dotted path to "
"the settings module. You can use a different value for development and "
"production; it all depends on how you organize your settings."
msgstr ""
"Django は適切な Settings モジュールを見つけるために、 :envvar:"
"`DJANGO_SETTINGS_MODULE` 環境変数を使用します。これは設定モジュールへのドット"
"区切りのパスを含んでいなければなりません。開発時と実運用時で別々の値を使用す"
"ることも可能です。どのように設定を組織するか次第です。"

msgid ""
"If this variable isn't set, the default :file:`asgi.py` sets it to ``mysite."
"settings``, where ``mysite`` is the name of your project."
msgstr ""
"この変数が指定されていない場合、デフォルトの :file:`asgi.py` は ``mysite."
"settings`` を設定します。 ``mysite`` はプロジェクトの名前です。"

msgid "Applying ASGI middleware"
msgstr "ASGI ミドルウェアの適用"

msgid ""
"To apply ASGI middleware, or to embed Django in another ASGI application, "
"you can wrap Django's ``application`` object in the ``asgi.py`` file. For "
"example::"
msgstr ""
"ASGI ミドルウェアを適用したり、他の ASGI アプリケーションに Django を組み込む"
"には、 Django の ``application`` オブジェクトを ``asgi.py`` ファイルでラップ"
"します。例:"

msgid "How to use Django with Uvicorn"
msgstr "Django を Uvicorn とともに使う"

msgid ""
"Uvicorn_ is an ASGI server based on ``uvloop`` and ``httptools``, with an "
"emphasis on speed."
msgstr ""
"Uvicorn_ は ``uvloop`` と ``httptools`` をベースにした速度重視のASGIサーバー"
"です。"

msgid "Installing Uvicorn"
msgstr "Uvicorn のインストール"

msgid "You can install Uvicorn with ``pip``:"
msgstr "``pip`` で Uvicorn をインストールします:"

msgid "Running Django in Uvicorn"
msgstr "Uvicorn で Django を実行"

msgid ""
"When Uvicorn is installed, a ``uvicorn`` command is available which runs "
"ASGI applications. Uvicorn needs to be called with the location of a module "
"containing an ASGI application object, followed by what the application is "
"called (separated by a colon)."
msgstr ""
"Uvicornがインストールされると、ASGIアプリケーションを実行する ``uvicorn`` コ"
"マンドが利用できるようになります。Uvicornを呼び出すには、ASGIアプリケーション"
"オブジェクトを含むモジュールの場所と、それに続いてアプリケーションの名前(コロ"
"ン区切り)を指定する必要があります。"

msgid "For a typical Django project, invoking Uvicorn would look like:"
msgstr "典型的な Django プロジェクトでは、Uvicorn の起動は次のようになります:"

msgid ""
"In development mode, you can add ``--reload`` to cause the server to reload "
"any time a file is changed on disk."
msgstr ""
"開発モードでは、 ``--reload`` を追加することで、ディスク上のファイルが変更さ"
"れるたびにサーバをリロードできます。"

msgid ""
"For more advanced usage, please read the `Uvicorn documentation <Uvicorn_>`_."
msgstr ""
"より高度な使い方は `Uvicorn documentation <Uvicorn_>`_ を参照してください。"

msgid "Deploying Django using Uvicorn and Gunicorn"
msgstr "UvicornとGunicornを使ってDjangoをデプロイする"

msgid ""
"Gunicorn_ is a robust web server that implements process monitoring and "
"automatic restarts. This can be useful when running Uvicorn in a production "
"environment."
msgstr ""
"Gunicorn_ は、プロセス監視と自動再起動を実装した堅牢なウェブサーバーです。本"
"番環境でUvicornを運用する際に役立ちます。"

msgid "To install Uvicorn and Gunicorn, use the following:"
msgstr "UvicornとGunicornをインストールするには、次のコマンドを実行します:"

msgid "Then start Gunicorn using the Uvicorn worker class like this:"
msgstr "Uvicornのworkerクラスを使ってGunicornを起動します:"

msgid "Deployment checklist"
msgstr "デプロイチェックリスト"

msgid ""
"The internet is a hostile environment. Before deploying your Django project, "
"you should take some time to review your settings, with security, "
"performance, and operations in mind."
msgstr ""
"インターネットは敵対的な環境です。Django プロジェクトをデプロイする前に、セ"
"キュリティ、パフォーマンス、運用を念頭に置いて、時間をかけて設定を見直すべき"
"です。"

msgid ""
"Django includes many :doc:`security features </topics/security>`. Some are "
"built-in and always enabled. Others are optional because they aren't always "
"appropriate, or because they're inconvenient for development. For example, "
"forcing HTTPS may not be suitable for all websites, and it's impractical for "
"local development."
msgstr ""
"Django には多くの :doc:`セキュリティ機能 </topics/security>` があります。いく"
"つかはビルトインで、常に有効です。その他は任意となっており、これは常に適切と"
"は限らなかったり、開発に対しては不便だったりするためです。たとえば、HTTPS を"
"強制することは、すべてのウェブサイトに対して適切とは言えず、またローカル開発"
"では実践的ではありません。"

msgid ""
"Performance optimizations are another category of trade-offs with "
"convenience. For instance, caching is useful in production, less so for "
"local development. Error reporting needs are also widely different."
msgstr ""
"パフォーマンスの最適化は、利便性とのトレードオフとなるもう 1 つの要素です。た"
"とえば、キャッシュは本番環境では役立ちますが、ローカル開発では役立ちません。"
"同様に、エラーレポートの必要性にも大きな違いがあります。"

msgid "The following checklist includes settings that:"
msgstr "以下のチェックリストは、次の設定項目を含みます:"

msgid ""
"must be set properly for Django to provide the expected level of security;"
msgstr ""
"Django が想定するレベルのセキュリティを提供するために適切に設定する必要がある"
"もの;"

msgid "are expected to be different in each environment;"
msgstr "環境によって異なると思われるもの;"

msgid "enable optional security features;"
msgstr "オプションのセキュリティ機能を有効にするもの;"

msgid "enable performance optimizations;"
msgstr "パフォーマンスの最適化を有効にするもの;"

msgid "provide error reporting."
msgstr "エラーレポートを提供するもの;"

msgid ""
"Many of these settings are sensitive and should be treated as confidential. "
"If you're releasing the source code for your project, a common practice is "
"to publish suitable settings for development, and to use a private settings "
"module for production."
msgstr ""
"これらの設定の多くは機密性が高く、機密情報として扱うべきです。プロジェクトの"
"ソースコードを公開する場合、開発用の適切な設定を公開し、本番用にはプライベー"
"トな設定モジュールを使用するのが一般的な慣習です。"

msgid "Run ``manage.py check --deploy``"
msgstr "``manage.py check --deploy`` を実施しよう"

msgid ""
"Some of the checks described below can be automated using the :option:`check "
"--deploy` option. Be sure to run it against your production settings file as "
"described in the option's documentation."
msgstr ""
"以下で説明しているチェックのいくつかは、:option:`check --deploy` オプションを"
"使用して自動化できます。オプションのドキュメントで説明しているとおり、本番環"
"境の設定に対してこのチェックを実施してください。"

msgid "Critical settings"
msgstr "最重要な設定"

msgid ":setting:`SECRET_KEY`"
msgstr ":setting:`SECRET_KEY`"

msgid ""
"**The secret key must be a large random value and it must be kept secret.**"
msgstr ""
"**シークレットキーは、長いランダム文字列で、秘匿される必要があります。**"

msgid ""
"Make sure that the key used in production isn't used anywhere else and avoid "
"committing it to source control. This reduces the number of vectors from "
"which an attacker may acquire the key."
msgstr ""
"本番環境で使われるキーは、他の場所で使われておらず、ソースコントロール中に記"
"述してしまわないよう十分注意してください。これにより、攻撃者がキーを取得して"
"しまう恐れを軽減できます。"

msgid ""
"Instead of hardcoding the secret key in your settings module, consider "
"loading it from an environment variable::"
msgstr ""
"設定モジュールにシークレットキーを直接書き込む代わりに、環境変数から読み込む"
"方法を検討してください::"

msgid "or from a file::"
msgstr "もしくはファイルから読み込みます::"

msgid "If rotating secret keys, you may use :setting:`SECRET_KEY_FALLBACKS`::"
msgstr ""
"シークレットキーをローテーションする場合は、 :setting:"
"`SECRET_KEY_FALLBACKS`: が使用できます:"

msgid ""
"Ensure that old secret keys are removed from ``SECRET_KEY_FALLBACKS`` in a "
"timely manner."
msgstr ""
"古いシークレットキーが ``SECRET_KEY_FALLBACKS`` から適時に削除されていること"
"を確認してください。"

msgid ":setting:`DEBUG`"
msgstr ":setting:`DEBUG`"

msgid "**You must never enable debug in production.**"
msgstr "**デバッグは、本番環境では決して有効化してはいけません。**"

msgid ""
"You're certainly developing your project with :setting:`DEBUG = True "
"<DEBUG>`, since this enables handy features like full tracebacks in your "
"browser."
msgstr ""
"プロジェクトの開発中は :setting:`DEBUG = True <DEBUG>` だったはずですが、これ"
"はブラウザ内の全トレースバックといった便利な機能を使えるようにするためです。"

msgid ""
"For a production environment, though, this is a really bad idea, because it "
"leaks lots of information about your project: excerpts of your source code, "
"local variables, settings, libraries used, etc."
msgstr ""
"しかし、本番環境に対してはこれはまったく不適切です。なぜなら、プロジェクトに"
"関する多くの情報を公にしてしまうからです: ソースコードからの引用、ローカル変"
"数、設定、使われているライブラリ、等。"

msgid "Environment-specific settings"
msgstr "環境に合わせた設定"

msgid ":setting:`ALLOWED_HOSTS`"
msgstr ":setting:`ALLOWED_HOSTS`"

msgid ""
"When :setting:`DEBUG = False <DEBUG>`, Django doesn't work at all without a "
"suitable value for :setting:`ALLOWED_HOSTS`."
msgstr ""
":setting:`DEBUG = False <DEBUG>` のとき、:setting:`ALLOWED_HOSTS` が適切に設"
"定されない限り Django は一切動作しません。"

msgid ""
"This setting is required to protect your site against some CSRF attacks. If "
"you use a wildcard, you must perform your own validation of the ``Host`` "
"HTTP header, or otherwise ensure that you aren't vulnerable to this category "
"of attacks."
msgstr ""
"この設定は、いくつかの CSRF 攻撃からあなたのサイトを保護するために必要です。"
"もしワイルドカードを使用した場合、``Host`` HTTP のバリデーションを自分自身で"
"行う必要があります。さもなければ、この種の攻撃に脆弱なサイトとなってしまいま"
"す。"

msgid ""
"You should also configure the web server that sits in front of Django to "
"validate the host. It should respond with a static error page or ignore "
"requests for incorrect hosts instead of forwarding the request to Django. "
"This way you'll avoid spurious errors in your Django logs (or emails if you "
"have error reporting configured that way). For example, on nginx you might "
"set up a default server to return \"444 No Response\" on an unrecognized "
"host:"
msgstr ""
"加えて、Django の手前にいるウェブサーバーにも、ホストを検証するよう設定をする"
"必要があります。これにより、不適切なホストに対して、Django にリクエストを転送"
"する代わりに、エラーページを表示したりリクエストを無視するようにできます。そ"
"して、Django のログ内で誤ったエラーが起きる (もしくは設定しだいでは E メール"
"が送信される) のを防ぎます。たとえば、nginx では認識されないホストに対してデ"
"フォルトサーバーが \"444 No Response\" を返します:"

msgid ":setting:`CACHES`"
msgstr ":setting:`CACHES`"

msgid ""
"If you're using a cache, connection parameters may be different in "
"development and in production. Django defaults to per-process :ref:`local-"
"memory caching <local-memory-caching>` which may not be desirable."
msgstr ""
"もしキャッシュを使うなら、開発環境と本番環境とでコネクションパラメータは異な"
"るでしょう。そうでない場合、デフォルトは :ref:`ローカルメモリのキャッシュ "
"<local-memory-caching>` に設定されています。"

msgid ""
"Cache servers often have weak authentication. Make sure they only accept "
"connections from your application servers."
msgstr ""
"キャッシュサーバーは認証に弱点を持っています。あなたのアプリケーションからの"
"コネクションだけを受け入れるようにしてください。"

msgid ":setting:`DATABASES`"
msgstr ":setting:`DATABASES`"

msgid ""
"Database connection parameters are probably different in development and in "
"production."
msgstr ""
"データベースの接続パラメータは、開発環境と本番環境でおそらく異なります。"

msgid ""
"Database passwords are very sensitive. You should protect them exactly like :"
"setting:`SECRET_KEY`."
msgstr ""
"データベースパスワードは非常に機密的なものです。:setting:`SECRET_KEY` と同様"
"の方法で保護してください。"

msgid ""
"For maximum security, make sure database servers only accept connections "
"from your application servers."
msgstr ""
"セキュリティを最大限に確保するためには、データベースサーバーがアプリケーショ"
"ンサーバーからの接続のみを許可するようにしてください。"

msgid "If you haven't set up backups for your database, do it right now!"
msgstr ""
"もしデータベースのバックアップの設定をしていなければ、今すぐに行ってくださ"
"い！"

msgid ":setting:`EMAIL_BACKEND` and related settings"
msgstr ":setting:`EMAIL_BACKEND` と関連する設定"

msgid "If your site sends emails, these values need to be set correctly."
msgstr ""
"あなたのサイトが E メールを送信する場合、設定値が正しくセットされている必要が"
"あります。"

msgid ""
"By default, Django sends email from webmaster@localhost and root@localhost. "
"However, some mail providers reject email from these addresses. To use "
"different sender addresses, modify the :setting:`DEFAULT_FROM_EMAIL` and :"
"setting:`SERVER_EMAIL` settings."
msgstr ""
"デフォルトでは、Django は webmaster@localhost と root@localhost から E メール"
"を送信します。しかし、いくつかのメールプロバイダはこれらのアドレスを拒否しま"
"す。異なる送信者アドレスを使用するには、:setting:`DEFAULT_FROM_EMAIL` と :"
"setting:`SERVER_EMAIL` 設定を修正してください。"

msgid ":setting:`STATIC_ROOT` and :setting:`STATIC_URL`"
msgstr ":setting:`STATIC_ROOT` と :setting:`STATIC_URL`"

msgid ""
"Static files are automatically served by the development server. In "
"production, you must define a :setting:`STATIC_ROOT` directory where :"
"djadmin:`collectstatic` will copy them."
msgstr ""
"静的ファイルは、開発用サーバーでは自動的に提供されます。本番環境では、:"
"djadmin:`collectstatic` が静的ファイルをコピーする :setting:`STATIC_ROOT` "
"ディレクトリを設定する必要があります。"

msgid "See :doc:`/howto/static-files/index` for more information."
msgstr "より詳しくは :doc:`/howto/static-files/index` を参照してください。"

msgid ":setting:`MEDIA_ROOT` and :setting:`MEDIA_URL`"
msgstr ":setting:`MEDIA_ROOT` と :setting:`MEDIA_URL`"

msgid ""
"Media files are uploaded by your users. They're untrusted! Make sure your "
"web server never attempts to interpret them. For instance, if a user uploads "
"a ``.php`` file, the web server shouldn't execute it."
msgstr ""
"メディアファイルは、あなたのユーザーによってアップロードされます。彼らは信用"
"なりません！ ウェブサーバーが決してこれらを解読しようとしないようにしてくださ"
"い。たとえば、ユーザーが ``.php`` ファイルをアップロードしたとき、ウェブサー"
"バーはその内容を実行するべきではありません。"

msgid "Now is a good time to check your backup strategy for these files."
msgstr ""
"この機会に、こうしたファイルに対するバックアップ戦略をチェックしておきましょ"
"う。"

msgid "HTTPS"
msgstr "HTTPS"

msgid ""
"Any website which allows users to log in should enforce site-wide HTTPS to "
"avoid transmitting access tokens in clear. In Django, access tokens include "
"the login/password, the session cookie, and password reset tokens. (You "
"can't do much to protect password reset tokens if you're sending them by "
"email.)"
msgstr ""
"ユーザーにログインさせるあらゆるウェブサイトは、アクセストークンを平文で送信"
"するのを防ぐため、サイト全体の HTTPS を強制するべきです。Django では、アクセ"
"ストークンはログインとパスワード、セッションクッキー、パスワードリセットトー"
"クンを含みます。(パスワードリセットトークンを E メール送信する場合、それほど"
"保護されてはいません。)"

msgid ""
"Protecting sensitive areas such as the user account or the admin isn't "
"sufficient, because the same session cookie is used for HTTP and HTTPS. Your "
"web server must redirect all HTTP traffic to HTTPS, and only transmit HTTPS "
"requests to Django."
msgstr ""
"ユーザーアカウントや admin などの機密性の高いエリアを保護するだけでは不十分で"
"す。なぜなら、HTTP と HTTPS で同じセッションクッキーが使用されるためです。"
"Web サーバーは、すべての HTTP トラフィックを HTTPS にリダイレクトし、HTTPS リ"
"クエストのみを Django に送信する必要があります。"

msgid "Once you've set up HTTPS, enable the following settings."
msgstr "一度 HTTPS をセットアップしたら、以下の設定項目が有効になります。"

msgid ":setting:`CSRF_COOKIE_SECURE`"
msgstr ":setting:`CSRF_COOKIE_SECURE`"

msgid ""
"Set this to ``True`` to avoid transmitting the CSRF cookie over HTTP "
"accidentally."
msgstr ""
"誤って HTTP によって CSRF クッキーを送信してしまうのを防ぐには、``True`` を"
"セットしてください。"

msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ":setting:`SESSION_COOKIE_SECURE`"

msgid ""
"Set this to ``True`` to avoid transmitting the session cookie over HTTP "
"accidentally."
msgstr ""
"誤って HTTP によってセッションクッキーを送信してしまうのを防ぐには、``True`` "
"をセットしてください。"

msgid "Performance optimizations"
msgstr "パフォーマンスの最適化"

msgid ""
"Setting :setting:`DEBUG = False <DEBUG>` disables several features that are "
"only useful in development. In addition, you can tune the following settings."
msgstr ""
":setting:`DEBUG = False <DEBUG>` をセットすることで、複数の開発向けの機能が無"
"効化されます。さらに、以下の設定を調整できます。"

msgid "Sessions"
msgstr "セッション"

msgid ""
"Consider using :ref:`cached sessions <cached-sessions-backend>` to improve "
"performance."
msgstr ""
"パフォーマンスを向上させるために :ref:`キャッシュを使ったセッション <cached-"
"sessions-backend>` の使用を検討してください。"

msgid ""
"If using database-backed sessions, regularly :ref:`clear old sessions "
"<clearing-the-session-store>` to avoid storing unnecessary data."
msgstr ""
"データベースバックアップセッションを使用している場合は、不要なデータを保存し"
"ないように :ref:`セッションストアのクリア <clearing-the-session-store>` を定"
"期的に行ってください。"

msgid ":setting:`CONN_MAX_AGE`"
msgstr ":setting:`CONN_MAX_AGE`"

msgid ""
"Enabling :ref:`persistent database connections <persistent-database-"
"connections>` can result in a nice speed-up when connecting to the database "
"accounts for a significant part of the request processing time."
msgstr ""
":ref:`永続的なデータベース接続 <persistent-database-connections>` を有効化す"
"ると、リクエストのプロセス時間の多くの部分に対するデータベースアカウントへの"
"接続において、高速になります。"

msgid "This helps a lot on virtualized hosts with limited network performance."
msgstr "限られたネットワーク性能の仮想化ホストにおいて、とても効果的です。"

msgid ":setting:`TEMPLATES`"
msgstr ":setting:`TEMPLATES`"

msgid ""
"Enabling the cached template loader often improves performance drastically, "
"as it avoids compiling each template every time it needs to be rendered. "
"When :setting:`DEBUG = False <DEBUG>`, the cached template loader is enabled "
"automatically. See :class:`django.template.loaders.cached.Loader` for more "
"information."
msgstr ""
"キャッシュされたテンプレートローダーを有効にすると、レンダリングが必要になる"
"たびに各テンプレートをコンパイルする必要がなくなるので、パフォーマンスが劇的"
"に向上します。 :setting:`DEBUG = False <DEBUG>` の場合、キャッシュテンプレー"
"トローダーは自動的に有効になります。詳しくは :class:`django.template.loaders."
"cached.Loader` を参照してください。"

msgid "Error reporting"
msgstr "エラーのレポート"

msgid ""
"By the time you push your code to production, it's hopefully robust, but you "
"can't rule out unexpected errors. Thankfully, Django can capture errors and "
"notify you accordingly."
msgstr ""
"あなたの書いたコードを本番環境に送信するまでは、頑強であることが望まれます"
"が、予期しないエラーを除外することはできません。ありがたいことに、Django はエ"
"ラーをキャッチして適切にお知らせします。"

msgid ":setting:`LOGGING`"
msgstr ":setting:`LOGGING`"

msgid ""
"Review your logging configuration before putting your website in production, "
"and check that it works as expected as soon as you have received some "
"traffic."
msgstr ""
"本番環境に置く前に、ロギング設定を見直しましょう。また、トラフィックを受け"
"取ったらすぐにそれらが想定通り動作していることを確認してください。"

msgid "See :doc:`/topics/logging` for details on logging."
msgstr "ロギングに関する詳細は :doc:`/topics/logging` を参照してください。"

msgid ":setting:`ADMINS` and :setting:`MANAGERS`"
msgstr ":setting:`ADMINS` と :setting:`MANAGERS`"

msgid ":setting:`ADMINS` will be notified of 500 errors by email."
msgstr ":setting:`ADMINS` は、500 エラーの通知を E メールで受け取ります。"

msgid ""
":setting:`MANAGERS` will be notified of 404 errors. :setting:"
"`IGNORABLE_404_URLS` can help filter out spurious reports."
msgstr ""
":setting:`MANAGERS` は、404 エラーの通知を受け取ります。:setting:"
"`IGNORABLE_404_URLS` により不要なレポートをフィルタリングできます。"

msgid ""
"See :doc:`/howto/error-reporting` for details on error reporting by email."
msgstr ""
"E メールによるエラーレポートの詳細は、:doc:`/howto/error-reporting` を参照し"
"てください。"

msgid "Error reporting by email doesn't scale very well"
msgstr "E メールによるエラーレポートはスケールしない"

msgid ""
"Consider using an error monitoring system such as Sentry_ before your inbox "
"is flooded by reports. Sentry can also aggregate logs."
msgstr ""
"あなたの受信箱がレポートであふれかえる前に、Sentry_ などのエラーモニタリング"
"ツールの導入を検討してください。Sentry もログを集計することができます。"

msgid "Customize the default error views"
msgstr "デフォルトのエラービューをカスタムする"

msgid ""
"Django includes default views and templates for several HTTP error codes. "
"You may want to override the default templates by creating the following "
"templates in your root template directory: ``404.html``, ``500.html``, ``403."
"html``, and ``400.html``. The :ref:`default error views <error-views>` that "
"use these templates should suffice for 99% of web applications, but you can :"
"ref:`customize them <customizing-error-views>` as well."
msgstr ""
"Django には、いくつかの HTTP に対して、デフォルトのビューとテンプレートが用意"
"してあります。ルートのテンプレートディレクトリに以下のテンプレートを作成する"
"ことで、独自のテンプレートに置き換えることができます: ``404.html``, ``500."
"html``, ``403.html``, and ``400.html`` 。99％のWebアプリケーションは、これら"
"のテンプレートを使用した :ref:`デフォルトのエラービュー <error-views>` で事足"
"りるはずですが、 :ref:`これらをカスタマイズする <customizing-error-views>` こ"
"ともできます。"

msgid "How to deploy Django"
msgstr "Djangoをデプロイするには"

msgid ""
"Django is full of shortcuts to make web developers' lives easier, but all "
"those tools are of no use if you can't easily deploy your sites. Since "
"Django's inception, ease of deployment has been a major goal."
msgstr ""
"Django にある非常に多くのショートカットはWeb開発者を楽にしてくれますが、サイ"
"トをかんたんにデプロイできなければ、これらのツールのどれも役に立ちません。 当"
"初より Django は、デプロイのしやすさを大きな目標としてきました。"

msgid ""
"There are many options for deploying your Django application, based on your "
"architecture or your particular business needs, but that discussion is "
"outside the scope of what Django can give you as guidance."
msgstr ""
"Django アプリケーションのデプロイには、アーキテクチャや特定のビジネスニーズに"
"基づいて多くの選択肢がありますが、その議論は Django がガイダンスとして提供で"
"きる範囲外です。"

msgid ""
"Django, being a web framework, needs a web server in order to operate. And "
"since most web servers don't natively speak Python, we need an interface to "
"make that communication happen."
msgstr ""
"Django は Web フレームワークなので、動作させるには Web サーバが必要です。そし"
"て、ほとんどの Web サーバはネイティブでは Python を使用しないので、通信を実現"
"するためのインターフェイスが必要です。"

msgid "Django currently supports two interfaces: WSGI and ASGI."
msgstr "Djangoは現在、WSGIとASGIの2つのインターフェースをサポートしています。"

msgid ""
"`WSGI`_ is the main Python standard for communicating between web servers "
"and applications, but it only supports synchronous code."
msgstr ""
"`WSGI`_ はウェブサーバーとアプリケーション間で通信するためのPythonの主要な規"
"格です。ただし、同期的なコードしかサポートしていません。"

msgid ""
"`ASGI`_ is the new, asynchronous-friendly standard that will allow your "
"Django site to use asynchronous Python features, and asynchronous Django "
"features as they are developed."
msgstr ""
"`ASGI`_ は、Django サイトで非同期の Python 機能と非同期の Django 機能を使える"
"ようにするための、新しい非同期フレンドリーな標準です。"

msgid ""
"You should also consider how you will handle :doc:`static files </howto/"
"static-files/deployment>` for your application, and how to handle :doc:"
"`error reporting</howto/error-reporting>`."
msgstr ""
"また、アプリケーションの :doc:`静的ファイル </howto/static-files/"
"deployment>` をどのように扱うか、そして :doc:`エラーレポート </howto/error-"
"reporting>` をどのように扱うかも考慮する必要があります。"

msgid ""
"Finally, before you deploy your application to production, you should run "
"through our :doc:`deployment checklist<checklist>` to ensure that your "
"configurations are suitable."
msgstr ""
"最後に、アプリケーションを本番環境にデプロイする前に、 :doc:`デプロイチェック"
"リスト<checklist>` を実行し、設定が適切であることを確認してください。"

msgid "How to authenticate against Django's user database from Apache"
msgstr "Django のユーザーデータベースに対する Apache からの認証"

msgid ""
"Since keeping multiple authentication databases in sync is a common problem "
"when dealing with Apache, you can configure Apache to authenticate against "
"Django's :doc:`authentication system </topics/auth/index>` directly. This "
"requires Apache version >= 2.2 and mod_wsgi >= 2.0. For example, you could:"
msgstr ""
"複数の認証データベースを同期させることは Apache を扱う上でよくある問題なの"
"で、 Django の :doc:`認証システム </topics/auth/index>` に対して直接認証する"
"ように Apache を設定できます。これには Apache version >= 2.2 と mod_wsgi >= "
"2.0 が必要です。例えば下記のようなことができます:"

msgid ""
"Serve static/media files directly from Apache only to authenticated users."
msgstr ""
"認証されたユーザにのみ、静的/メディアファイルを Apache から直接提供する。"

msgid ""
"Authenticate access to a Subversion_ repository against Django users with a "
"certain permission."
msgstr ""
"特定のパーミッションを持つ Django ユーザに対して、 Subversion_ リポジトリへの"
"アクセスを認証する。"

msgid "Allow certain users to connect to a WebDAV share created with mod_dav_."
msgstr ""
"mod_dav_ で作成された WebDAV 共有に特定のユーザが接続できるように許可する。"

msgid ""
"If you have installed a :ref:`custom user model <auth-custom-user>` and want "
"to use this default auth handler, it must support an ``is_active`` "
"attribute. If you want to use group based authorization, your custom user "
"must have a relation named 'groups', referring to a related object that has "
"a 'name' field. You can also specify your own custom mod_wsgi auth handler "
"if your custom cannot conform to these requirements."
msgstr ""
"もし :ref:`カスタムユーザーモデル<auth-custom-user>` をインストールしていて、"
"このデフォルトの認証ハンドラを使用したい場合は、 ``is_active`` 属性をサポート"
"している必要があります。グループベースの認可を使用したい場合、カスタムユーザ"
"は 'group' という名前のリレーションを持ち、'name' フィールドを持つリレーショ"
"ン先のオブジェクトを参照する必要があります。カスタムの mod_wsgi 認証ハンドラ"
"がこれらの要件に適合しない場合は、 独自のカスタムの mod_wsgi 認証ハンドラを指"
"定することもできます。"

msgid "Authentication with ``mod_wsgi``"
msgstr "``mod_wsgi`` による認証"

msgid ""
"The use of ``WSGIApplicationGroup %{GLOBAL}`` in the configurations below "
"presumes that your Apache instance is running only one Django application. "
"If you are running more than one Django application, please refer to the "
"`Defining Application Groups`_ section of the mod_wsgi docs for more "
"information about this setting."
msgstr ""
"以下の設定における ``WSGIApplicationGroup %{GLOBAL}`` の使用は、 Apache イン"
"スタンスが 1 つの Django アプリケーションだけを実行していることを想定していま"
"す。複数の Django アプリケーションを実行している場合は、この設定については "
"mod_wsgi ドキュメントの `Defining Application Groups`_ セクションを参照してく"
"ださい。"

msgid ""
"Make sure that mod_wsgi is installed and activated and that you have "
"followed the steps to set up :doc:`Apache with mod_wsgi </howto/deployment/"
"wsgi/modwsgi>`."
msgstr ""
"mod_wsgiがインストールされ、有効になっていることと、 :doc:`Apache と "
"mod_wsgi </howto/deployment/wsgi/modwsgi>` をセットアップするステップに従って"
"いることを確認してください。"

msgid ""
"Next, edit your Apache configuration to add a location that you want only "
"authenticated users to be able to view:"
msgstr ""
"次に、Apacheの設定を編集して、認証されたユーザだけが閲覧できるようにしたい場"
"所を追加します:"

msgid ""
"The ``WSGIAuthUserScript`` directive tells mod_wsgi to execute the "
"``check_password`` function in specified wsgi script, passing the user name "
"and password that it receives from the prompt. In this example, the "
"``WSGIAuthUserScript`` is the same as the ``WSGIScriptAlias`` that defines "
"your application :doc:`that is created by django-admin startproject </howto/"
"deployment/wsgi/index>`."
msgstr ""
"``WSGIAuthUserScript`` ディレクティブは、プロンプトから受け取ったユーザ名とパ"
"スワードを渡して、指定した wsgi スクリプトの ``check_password`` 関数を実行す"
"るように mod_wsgi に指示します。この例では、 ``WSGIAuthUserScript`` は :doc:"
"`django-admin startproject で作成される</howto/deployment/wsgi/index>` アプリ"
"ケーションを定義する ``WSGIScriptAlias`` と同じです。"

msgid "Using Apache 2.2 with authentication"
msgstr "Apache 2.2 を認証とともに使う"

msgid "Make sure that ``mod_auth_basic`` and ``mod_authz_user`` are loaded."
msgstr ""
"``mod_auth_basic`` と ``mod_authz_user`` がロードされていることを確認してくだ"
"さい。"

msgid ""
"These might be compiled statically into Apache, or you might need to use "
"LoadModule to load them dynamically in your ``httpd.conf``:"
msgstr ""
"これらは Apache に静的にコンパイルされているかもしれませんし、LoadModule を"
"使って ``httpd.conf`` で動的にロードする必要があるかもしれません:"

msgid ""
"Finally, edit your WSGI script ``mysite.wsgi`` to tie Apache's "
"authentication to your site's authentication mechanisms by importing the "
"``check_password`` function::"
msgstr ""
"最後に、WSGIスクリプト ``mysite.wsgi`` を編集して、 ``check_password`` 関数を"
"インポートすることで、Apacheの認証とサイトの認証メカニズムを紐づけます:"

msgid ""
"Requests beginning with ``/secret/`` will now require a user to authenticate."
msgstr ""
"これで、 ``/secret/`` で始まるリクエストはユーザー認証が必要になりました。"

msgid ""
"The mod_wsgi `access control mechanisms documentation`_ provides additional "
"details and information about alternative methods of authentication."
msgstr ""
"mod_wsgi の `access control mechanisms documentation`_ に、認証の代替方法につ"
"いての詳細と情報があります。"

msgid "Authorization with ``mod_wsgi`` and Django groups"
msgstr "``mod_wsgi`` と Django グループを使った認可"

msgid ""
"mod_wsgi also provides functionality to restrict a particular location to "
"members of a group."
msgstr ""
"mod_wsgi は、グループのメンバーに特定の場所を制限する機能も提供します。"

msgid "In this case, the Apache configuration should look like this:"
msgstr "この場合、Apacheの設定は次のようになります:"

msgid ""
"To support the ``WSGIAuthGroupScript`` directive, the same WSGI script "
"``mysite.wsgi`` must also import the ``groups_for_user`` function which "
"returns a list groups the given user belongs to."
msgstr ""
"``WSGIAuthGroupScript`` ディレクティブをサポートするために、同じ WSGI スクリ"
"プト ``mysite.wsgi`` は、与えられたユーザが属しているグループのリストを返す "
"``groups_for_user`` 関数もインポートする必要があります。"

msgid ""
"Requests for ``/secret/`` will now also require user to be a member of the "
"\"secret-agents\" group."
msgstr ""
"これで、 ``/secret/`` に対するリクエストは、ユーザーが \"secret-agents\" グ"
"ループのメンバーであることも要求するようになりました。"

msgid "How to use Django with Gunicorn"
msgstr "Django を Gunicorn とともに使う"

msgid ""
"Gunicorn_ ('Green Unicorn') is a pure-Python WSGI server for UNIX. It has no "
"dependencies and can be installed using ``pip``."
msgstr ""
"Gunicorn_ ('Green Unicorn') は UNIX 向けの pure-Python で実装されたWSGIサー"
"バーです。依存はなく、 ``pip`` を使ってインストールできます。"

msgid "Installing Gunicorn"
msgstr "Gunicornのインストール"

msgid ""
"Install gunicorn by running ``python -m pip install gunicorn``. For more "
"details, see the `gunicorn documentation`_."
msgstr ""
"``python -m pip install gunicorn`` を実行して gunicorn をインストールします。"
"詳細は `gunicorn documentation`_ を参照してください。"

msgid "Running Django in Gunicorn as a generic WSGI application"
msgstr "GunicornでDjangoを一般的なWSGIアプリケーションとして動作させる"

msgid ""
"When Gunicorn is installed, a ``gunicorn`` command is available which starts "
"the Gunicorn server process. The simplest invocation of gunicorn is to pass "
"the location of a module containing a WSGI application object named "
"``application``, which for a typical Django project would look like:"
msgstr ""
"Gunicorn がインストールされると、Gunicorn サーバプロセスを起動する "
"``gunicorn`` コマンドが利用できるようになります。gunicorn の最も単純な起動方"
"法は、 ``application`` という WSGI アプリケーションオブジェクトを含むモジュー"
"ルの場所を渡すことです 。典型的な Django プロジェクトでは次のようになります:"

msgid ""
"This will start one process running one thread listening on "
"``127.0.0.1:8000``. It requires that your project be on the Python path; the "
"simplest way to ensure that is to run this command from the same directory "
"as your ``manage.py`` file."
msgstr ""
"このコマンドは ``127.0.0.1:8000`` を待ち受ける1つのスレッドを実行する1つのプ"
"ロセスを開始します。プロジェクトは Python のパス上に置く必要があります。最も"
"簡単な方法は ``manage.py`` ファイルと同じディレクトリからこのコマンドを実行す"
"ることです。"

msgid "See Gunicorn's `deployment documentation`_ for additional tips."
msgstr ""
"その他のヒントについては、Gunicorn の `deployment documentation`_ を参照して"
"ください。"

msgid "How to deploy with WSGI"
msgstr "WSGI とともにデプロイするには"

msgid ""
"Django's primary deployment platform is WSGI_, the Python standard for web "
"servers and applications."
msgstr ""
"Django の主要なデプロイプラットフォームは、 Web サーバと Web アプリケーショ"
"ン に関して Python の標準である WSGI_ です。"

msgid ""
"Django's :djadmin:`startproject` management command sets up a minimal "
"default WSGI configuration for you, which you can tweak as needed for your "
"project, and direct any WSGI-compliant application server to use."
msgstr ""
"Django の :djadmin:`startproject` 管理コマンドは、最小限のデフォルト WSGI 設"
"定をセットアップしてくれます 。このデフォルト WSGI 設定は、あなたのプロジェク"
"トに合わせて調整でき、WSGI に準拠したアプリケーションサーバにその設定を使用さ"
"せることができます。"

msgid ""
"Django includes getting-started documentation for the following WSGI servers:"
msgstr ""
"Django には以下の WSGI サーバのために、手引きとなるドキュメントが用意されてい"
"ます:"

msgid ""
"The key concept of deploying with WSGI is the ``application`` callable which "
"the application server uses to communicate with your code. It's commonly "
"provided as an object named ``application`` in a Python module accessible to "
"the server."
msgstr ""
"WSGI デプロイでキーとなる概念は、Web サーバがあなたのコードと通信するために使"
"う ``application`` という呼び出し可能オブジェクトです。これは一般的に、サーバ"
"にアクセスできる Python モジュールの中で ``application`` という名前のオブジェ"
"クトとして提供されています。"

msgid ""
"The :djadmin:`startproject` command creates a file :file:`<project_name>/"
"wsgi.py` that contains such an ``application`` callable."
msgstr ""
":djadmin:`startproject` コマンドは、この ``application`` 呼び出し可能オブジェ"
"クトを含む :file:`<project_name>/wsgi.py` ファイルを生成します。"

msgid ""
"It's used both by Django's development server and in production WSGI "
"deployments."
msgstr ""
"これは、Django のデプロイサーバーによって、また WSGI デプロイプロダクションに"
"おいて、これら両方で使われます。"

msgid ""
"WSGI servers obtain the path to the ``application`` callable from their "
"configuration. Django's built-in server, namely the :djadmin:`runserver` "
"command, reads it from the :setting:`WSGI_APPLICATION` setting. By default, "
"it's set to ``<project_name>.wsgi.application``, which points to the "
"``application`` callable in :file:`<project_name>/wsgi.py`."
msgstr ""
"WSGI サーバーは ``application`` 呼び出し可能オブジェクトへのパスを、その設定"
"から取得します。Django のビルトインサーバー (要するに :djadmin:`runserver` コ"
"マンド) は、:setting:`WSGI_APPLICATION` の設定からこれを読み出します。デフォ"
"ルトでは、 :file:`<project_name>/wsgi.py` 内の ``application`` 呼び出し可能オ"
"ブジェクトを指す ``<project_name>.wsgi.application`` がセットされています。"

msgid ""
"When the WSGI server loads your application, Django needs to import the "
"settings module — that's where your entire application is defined."
msgstr ""
"WSGI サーバがあなたのアプリケーションを読み込むとき、Django は Settings モ"
"ジュールをインポートする必要があります。そのモジュールは、あなたのアプリケー"
"ション全体が定義されている場所です。"

msgid ""
"If this variable isn't set, the default :file:`wsgi.py` sets it to ``mysite."
"settings``, where ``mysite`` is the name of your project. That's how :"
"djadmin:`runserver` discovers the default settings file by default."
msgstr ""
"この値が設定されていない場合、初期生成ファイルである :file:`wsgi.py` は、 "
"``mysite.settings`` をこの値として設定します。ここでの ``mysite`` はプロジェ"
"クトの名前です。このようにして初期設定ファイルを見つけるのが、 :djadmin:"
"`runserver` にあらかじめ用意されている方法です。"

msgid ""
"Since environment variables are process-wide, this doesn't work when you run "
"multiple Django sites in the same process. This happens with mod_wsgi."
msgstr ""
"環境変数は、同一プロセス内においては同じ値が使われます。このため、単一プロセ"
"スで複数の Django サイトを運用する場合は、適切に機能しません。これは "
"mod_wsgi を使用する場合に起こります。"

msgid ""
"To avoid this problem, use mod_wsgi's daemon mode with each site in its own "
"daemon process, or override the value from the environment by enforcing ``os."
"environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"`` in your :file:"
"`wsgi.py`."
msgstr ""
"この問題を回避するためには、サイトごとに固有の daemon プロセスを mod_wsgi の "
"daemon モードで運用するか、もしくは :file:`wsgi.py` ファイル内で ``os."
"environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"`` を実行して環境変"
"数の値を上書きします。"

msgid "Applying WSGI middleware"
msgstr "WSGIミドルウェアを適用する"

msgid ""
"To apply :pep:`WSGI middleware <3333#middleware-components-that-play-both-"
"sides>` you can wrap the application object. For instance you could add "
"these lines at the bottom of :file:`wsgi.py`::"
msgstr ""
":pep:`WSGI ミドルウェア <3333#middleware-components-that-play-both-sides>` を"
"適用するには、アプリケーションオブジェクトをラップします。例えば、 :file:"
"`wsgi.py` の一番下に以下の行を追加します:"

msgid ""
"You could also replace the Django WSGI application with a custom WSGI "
"application that later delegates to the Django WSGI application, if you want "
"to combine a Django application with a WSGI application of another framework."
msgstr ""
"DjangoのWSGIアプリケーションをカスタムWSGIアプリケーションに置き換え、その後"
"でDjangoのWSGIアプリケーションに委譲することもできます。これは、Djangoアプリ"
"ケーションを他のフレームワークのWSGIアプリケーションと組み合わせたい場合に有"
"効です。"

msgid "How to use Django with Apache and ``mod_wsgi``"
msgstr "Django を Apache と ``mod_wsgi`` とともに使うには？"

msgid ""
"Deploying Django with Apache_ and `mod_wsgi`_ is a tried and tested way to "
"get Django into production."
msgstr ""
"Apache_ と `mod_wsgi`_ と共にDjangoをデプロイすることは、Djangoを製品とする際"
"に試され、テストされた方法です。"

msgid ""
"mod_wsgi is an Apache module which can host any Python WSGI_ application, "
"including Django. Django will work with any version of Apache which supports "
"mod_wsgi."
msgstr ""
"mod_wsgi は、Djangoを含む任意のPythonの WSGI_ アプリケーションをホストできる"
"Apacheのモジュールです。 Djangoはmod_wsgiをサポートしているApacheのすべての"
"バージョンで動作します。"

msgid ""
"The `official mod_wsgi documentation`_ is your source for all the details "
"about how to use mod_wsgi. You'll probably want to start with the "
"`installation and configuration documentation`_."
msgstr ""
"mod_wsgi の使い方の詳細については、`the official mod_wsgi documentation`_ を"
"参照してください。`installation and configuration documentation`_ から始める"
"とよいでしょう。"

msgid "Basic configuration"
msgstr "基本設定"

msgid ""
"Once you've got mod_wsgi installed and activated, edit your Apache server's "
"`httpd.conf`_ file and add the following."
msgstr ""
"mod_wsgiをインストールして有効にしたら、Apacheサーバーの `httpd.conf`_ ファイ"
"ルを編集して、以下を追加します。"

msgid ""
"The first bit in the ``WSGIScriptAlias`` line is the base URL path you want "
"to serve your application at (``/`` indicates the root url), and the second "
"is the location of a \"WSGI file\" -- see below -- on your system, usually "
"inside of your project package (``mysite`` in this example). This tells "
"Apache to serve any request below the given URL using the WSGI application "
"defined in that file."
msgstr ""
"``WSGIScriptAlias​​`` の行の最初の部分は、あなたがアプリケーションを提供したい"
"ベースとなるURLパスであり( ``/`` ルートURLを示している)、二番目の部分はシステ"
"ムの ``WSGI file`` の場所 (下記参照) です。大抵はプロジェクトパッケージ (本例"
"では ``mysite`` ) の内部です。これは、そのファイルで定義された WSGI アプリ"
"ケーションを使用して、指定された URL 以下のすべての要求にサービスを提供するよ"
"うに Apache に指示します。"

msgid ""
"If you install your project's Python dependencies inside a :mod:`virtual "
"environment <venv>`, add the path using ``WSGIPythonHome``. See the "
"`mod_wsgi virtual environment guide`_ for more details."
msgstr ""
"プロジェクトの Python 依存ファイルを :mod:`virtual environment <venv>` 内にイ"
"ンストールする場合は、 ``WSGIPythonHome`` を使ってパスを追加します。詳しくは "
"`mod_wsgi virtual environment guide`_ を参照してください。"

msgid ""
"The ``WSGIPythonPath`` line ensures that your project package is available "
"for import on the Python path; in other words, that ``import mysite`` works."
msgstr ""
"``WSGIPythonPath`` の行は、プロジェクトのパッケージは Python のパス上でイン"
"ポートすることが可能であることを保証します。言い換えると、 ``import mysite`` "
"が動作することを保証します。"

msgid ""
"The ``<Directory>`` piece ensures that Apache can access your :file:`wsgi."
"py` file."
msgstr ""
"``<Directory>`` の部分は Apache が :file:`wsgi.py` ファイルにアクセスできるこ"
"とを保証します。"

msgid ""
"Next we'll need to ensure this :file:`wsgi.py` with a WSGI application "
"object exists. As of Django version 1.4, :djadmin:`startproject` will have "
"created one for you; otherwise, you'll need to create it. See the :doc:`WSGI "
"overview documentation</howto/deployment/wsgi/index>` for the default "
"contents you should put in this file, and what else you can add to it."
msgstr ""
"次に、この :file:`wsgi.py` がWSGIアプリケーションのオブジェクトで存在すること"
"を確認する必要があります。 Djangoのバージョン1.4現在、 :djadmin:"
"`startproject`  を実行した際に作成されます ; それより前のバージョンでは、あな"
"たはそれを作成する必要があります。 :doc:`WSGI概要ドキュメント</howto/"
"deployment/wsgi/index>` を参照し、デフォルトのコンテンツや、その他の必要な記"
"載をこのファイルに追加してください。"

msgid ""
"If multiple Django sites are run in a single mod_wsgi process, all of them "
"will use the settings of whichever one happens to run first. This can be "
"solved by changing::"
msgstr ""
"複数の Django のサイトが単一の mod_wsgi プロセスで実行されている場合は、それ"
"らのすべては、最初に実行されたものの設定を使用します。これを解消するには、次"
"の"

msgid "in ``wsgi.py``, to::"
msgstr "という ``wsgi.py`` 内のコードを、次のように変更します。"

msgid ""
"or by :ref:`using mod_wsgi daemon mode<daemon-mode>` and ensuring that each "
"site runs in its own daemon process."
msgstr ""
"もしくは、 :ref:`mod_wsgi のデーモンモード<daemon-mode>` を使用することで、各"
"サイトをそれぞれ独立したデーモンプロセスで実行できるようにします。"

msgid "Fixing ``UnicodeEncodeError`` for file uploads"
msgstr "ファイルアップロード時の ``UnicodeEncodeError`` を修正する"

msgid ""
"If you get a ``UnicodeEncodeError`` when uploading or writing files with "
"file names or content that contains non-ASCII characters, make sure Apache "
"is configured to support UTF-8 encoding:"
msgstr ""
"非 ASCII 文字を含むファイル名や内容のファイルをアップロードしたり書き込んだり"
"するときに ``UnicodeEncodeError`` が発生する場合は、Apache が UTF-8 エンコー"
"ディングをサポートするように設定されていることを確認してください:"

msgid ""
"A common location to put this configuration is ``/etc/apache2/envvars``."
msgstr "この設定はふつう ``/etc/apache2/envvars`` で可能です。"

msgid ""
"Alternatively, if you are :ref:`using mod_wsgi daemon mode<daemon-mode>` you "
"can add ``lang`` and ``locale`` options to the ``WSGIDaemonProcess`` "
"directive:"
msgstr ""
"代わりに、 :ref:`mod_wsgi のデーモンモード<daemon-mode>` を使用している場合"
"は ``WSGIDaemonProcess`` ディレクティブに ``lang`` と ``locale`` オプションを"
"追加できます:"

msgid ""
"See the :ref:`unicode-files` section of the Unicode reference guide for "
"details."
msgstr ""
"詳細については、Unicode リファレンスガイドの :ref:`unicode-files` セクション"
"を参照してください。"

msgid "Using ``mod_wsgi`` daemon mode"
msgstr "``mod_wsgi`` をデーモンモードで使用する"

msgid ""
"\"Daemon mode\" is the recommended mode for running mod_wsgi (on non-Windows "
"platforms). To create the required daemon process group and delegate the "
"Django instance to run in it, you will need to add appropriate "
"``WSGIDaemonProcess`` and ``WSGIProcessGroup`` directives. A further change "
"required to the above configuration if you use daemon mode is that you can't "
"use ``WSGIPythonPath``; instead you should use the ``python-path`` option to "
"``WSGIDaemonProcess``, for example:"
msgstr ""
"``デーモンモード`` はmod_wsgiを (Windows以外のプラットフォーム上で) 実行する"
"ための推奨モードです。必要なデーモンプロセスグループを作成し、その中で起動す"
"るための Djangoのインスタンスを委任するためには、適切な "
"``WSGIDaemonProcess`` と ``WSGIProcessGroup`` ディレクティブを追加する必要が"
"あります。デーモンモードを使用する場合には ``WSGIPythonPath`` を使用できない"
"ため、上記設定にさらなる変更が求められます。代わりに ``WSGIDaemonProcess`` "
"に ``python-path`` オプションを使用する必要があります。例えば、"

msgid ""
"If you want to serve your project in a subdirectory (``https://example.com/"
"mysite`` in this example), you can add ``WSGIScriptAlias`` to the "
"configuration above:"
msgstr ""
"サブディレクトリでプロジェクトを提供したい場合は(本例では ``https://example."
"com/mysite`` となります) 、 ``WSGIScriptAlias`` を設定の上部に追記します。"

msgid ""
"See the official mod_wsgi documentation for `details on setting up daemon "
"mode`_."
msgstr ""
"詳細については、公式の mod_wsgi のドキュメント `details on setting up daemon "
"mode`_ を参照してください。"

msgid "Serving files"
msgstr "ファイルを配信する"

msgid ""
"Django doesn't serve files itself; it leaves that job to whichever web "
"server you choose."
msgstr "Django 自体はファイルを配信せず、Web サーバにそのジョブを委ねます。"

msgid ""
"We recommend using a separate web server -- i.e., one that's not also "
"running Django -- for serving media. Here are some good choices:"
msgstr ""
"メディアの配信には、別の Web サーバー、つまり Django を動かしていないサーバを"
"使うことをお勧めします。以下は良い選択です:"

msgid "Nginx_"
msgstr "Nginx_"

msgid "A stripped-down version of Apache_"
msgstr "Apache_ の機能縮小版"

msgid ""
"If, however, you have no option but to serve media files on the same Apache "
"``VirtualHost`` as Django, you can set up Apache to serve some URLs as "
"static media, and others using the mod_wsgi interface to Django."
msgstr ""
"しかし、Django と同じ Apache の ``VirtualHost`` からメディアファイルを配信し"
"なければならない場合には、一部の URL を静的メディアを配信するように設定し、そ"
"の他の URL を Django への mod_wsgi のインターフェイスとして設定することができ"
"ます。"

msgid ""
"This example sets up Django at the site root, but serves ``robots.txt``, "
"``favicon.ico``, and anything in the ``/static/`` and ``/media/`` URL space "
"as a static file. All other URLs will be served using mod_wsgi:"
msgstr ""
"この例では、サイトのルートには Django を設定していますが、 ``robots.txt`` 、 "
"``favicon.ico`` 、 ``/static/`` 、そして ``/media/`` の URL 空間は静的ファイ"
"ルとして配信しています。他のすべての URL は mod_wsgi を使用して配信されます。"

msgid "Serving the admin files"
msgstr "admin ファイルを配信する"

msgid ""
"When :mod:`django.contrib.staticfiles` is in :setting:`INSTALLED_APPS`, the "
"Django development server automatically serves the static files of the admin "
"app (and any other installed apps). This is however not the case when you "
"use any other server arrangement. You're responsible for setting up Apache, "
"or whichever web server you're using, to serve the admin files."
msgstr ""
":mod:`django.contrib.staticfiles` が :setting:`INSTALLED_APPS` にある場合、 "
"Django の開発サーバーは自動的に管理アプリ（や他のインストールされたアプリ）の"
"静的ファイルを提供します。しかし、他のサーバを使う場合はそうはいきません。管"
"理アプリの静的ファイルを提供するように、 Apache や、使っているWebサーバーを設"
"定するのはあなたの責任です。"

msgid ""
"The admin files live in (:source:`django/contrib/admin/static/admin`) of the "
"Django distribution."
msgstr ""
"admin ファイルは Django ディストリビューションの (:source:`django/contrib/"
"admin/static/admin`) にあります。"

msgid ""
"We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle "
"the admin files (along with a web server as outlined in the previous "
"section; this means using the :djadmin:`collectstatic` management command to "
"collect the static files in :setting:`STATIC_ROOT`, and then configuring "
"your web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), "
"but here are three other approaches:"
msgstr ""
"**強く** 推奨される方法は、 :mod:`django.contrib.staticfiles` を使用して管理"
"ファイルを処理することです（前のセクションで説明されているように、Webサーバー"
"と併用します。これは、 :setting:`STATIC_ROOT` に静的ファイルを集めるために :"
"djadmin:`collectstatic` 管理コマンドを使用し、その後、Webサーバーを設定して :"
"setting:`STATIC_ROOT` を :setting:`STATIC_URL` で提供することを意味します）。"
"しかし、他にも次の3つのアプローチがあります:"

msgid ""
"Create a symbolic link to the admin static files from within your document "
"root (this may require ``+FollowSymLinks`` in your Apache configuration)."
msgstr ""
"ドキュメントルートに admin の静的ファイルへのシンボリックを作ります。 "
"(Apache の設定に ``+FollowSymLinks`` が必要になるでしょう)"

msgid ""
"Use an ``Alias`` directive, as demonstrated above, to alias the appropriate "
"URL (probably :setting:`STATIC_URL` + ``admin/``) to the actual location of "
"the admin files."
msgstr ""
"上で示したように Alias ディレクティブを使って、適切な URL (おそらく :setting:"
"`STATIC_URL` + ``admin/``) から admin ファイルがある実際の場所へのエ イリアス"
"を作ります。"

msgid ""
"Copy the admin static files so that they live within your Apache document "
"root."
msgstr ""
"admin の静的ファイルをコピーし、 Apache のドキュメントルートに置きます。"

msgid "Authenticating against Django's user database from Apache"
msgstr "Django のユーザーデータベースに対する Apache からの認証"

msgid ""
"Django provides a handler to allow Apache to authenticate users directly "
"against Django's authentication backends. See the :doc:`mod_wsgi "
"authentication documentation </howto/deployment/wsgi/apache-auth>`."
msgstr ""
"DjangoはApacheがDjangoの認証バックエンドに対して直接ユーザを認証できるように"
"ハンドラを提供します。 :doc:`mod_wsgi 認証ドキュメント </howto/deployment/"
"wsgi/apache-auth>` を参照してください。"

msgid "How to use Django with uWSGI"
msgstr "Django を uWSGI とともに使うには？"

msgid ""
"uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application "
"container server coded in pure C."
msgstr ""
"uWSGI_ は高速かつ自己回復的、開発者やシステム管理者にとって使いやすいアプリ"
"ケーションコンテナサーバーで、純粋な C 言語で記述されています。"

msgid ""
"The uWSGI docs offer a `tutorial`_ covering Django, nginx, and uWSGI (one "
"possible deployment setup of many). The docs below are focused on how to "
"integrate Django with uWSGI."
msgstr ""
"uWSGI のドキュメントは、Django、nginx および uWSGI をカバーした `tutorial`_ "
"を提供しています (たくさんあるセットアップ方法の一例です)。以下のドキュメント"
"は、Django を uWSGI と統合する方法に焦点を当てています。"

msgid "Prerequisite: uWSGI"
msgstr "前提条件: uWSGI"

msgid ""
"The uWSGI wiki describes several `installation procedures`_. Using pip, the "
"Python package manager, you can install any uWSGI version with a single "
"command. For example:"
msgstr ""
"uWSGI の wiki には、いくつかの `installation procedures`_ が記載されていま"
"す。Python のパッケージマネージャーであるpipを使って、あらゆるバージョンの "
"uWSGI を一つのコマンドでインストールすることができます。たとえば:"

msgid "uWSGI model"
msgstr "uWSGI モデル"

msgid ""
"uWSGI operates on a client-server model. Your web server (e.g., nginx, "
"Apache) communicates with a ``django-uwsgi`` \"worker\" process to serve "
"dynamic content."
msgstr ""
"uWSGI はクライアントサーバモデルで動作します。Web サーバー (nginx や Apache "
"など) は ``djangoo-uwsgi`` \"worker\" プロセスと通信し、動的なコンテンツを提"
"供します。"

msgid "Configuring and starting the uWSGI server for Django"
msgstr "Django に対して uWSGI サーバーを設定、開始する"

msgid ""
"uWSGI supports multiple ways to configure the process. See uWSGI's "
"`configuration documentation`_."
msgstr ""
"uWSGI では、プロセスを設定する方法が複数提供されています。uWSGI's "
"`configuration documentation`_ を参照してください。"

msgid "Here's an example command to start a uWSGI server:"
msgstr "以下はuWSGIサーバーを起動するコマンドの例です:"

msgid ""
"This assumes you have a top-level project package named ``mysite``, and "
"within it a module :file:`mysite/wsgi.py` that contains a WSGI "
"``application`` object. This is the layout you'll have if you ran ``django-"
"admin startproject mysite`` (using your own project name in place of "
"``mysite``) with a recent version of Django. If this file doesn't exist, "
"you'll need to create it. See the :doc:`/howto/deployment/wsgi/index` "
"documentation for the default contents you should put in this file and what "
"else you can add to it."
msgstr ""
"この例では、``mysite`` と名付けられたトップレベルのプロジェクトパッケージがあ"
"り、またその中に :file:`mysite/wsgi.py` という WSGI ``application`` オブジェ"
"クトを含むモジュールがあると仮定しています。これは、最近のバージョンの "
"Django で ``django-admin startproject mysite`` (``mysite`` には自分のプロジェ"
"クト名が入ります) を実行した場合、自動生成されるファイル構成です。もしこの"
"ファイルが存在しない場合、自分自身で作る必要があります。このファイルに記述す"
"べきデフォルトの内容と、自分で追加できる部分に関しては、:doc:`/howto/"
"deployment/wsgi/index` ドキュメントを参照してください。"

msgid "The Django-specific options here are:"
msgstr "Django 特有のオプションは以下の通りです:"

msgid ""
"``chdir``: The path to the directory that needs to be on Python's import "
"path -- i.e., the directory containing the ``mysite`` package."
msgstr ""
"``chdir``: Python のインポートパス上で必要になるディレクトリへのパス -- つま"
"り ``mysite`` パッケージを含むディレクトリです。"

msgid ""
"``module``: The WSGI module to use -- probably the ``mysite.wsgi`` module "
"that :djadmin:`startproject` creates."
msgstr ""
"``module``: 使われる WSGI モジュール -- 通常は :djadmin:`startproject` によっ"
"て生成される ``mysite.wsgi`` モジュールです。"

msgid ""
"``env``: Should probably contain at least :envvar:`DJANGO_SETTINGS_MODULE`."
msgstr ""
"``env``: 少なくとも :envvar:`DJANGO_SETTINGS_MODULE` を含む必要があります。"

msgid "``home``: Optional path to your project virtual environment."
msgstr "``home``: プロジェクトの仮想環境へのパスを指定します。"

msgid "Example ini configuration file:"
msgstr "ini 設定ファイルの例:"

msgid "Example ini configuration file usage:"
msgstr "ini 設定ファイルを使用する例:"

msgid ""
"If you get a ``UnicodeEncodeError`` when uploading files with file names "
"that contain non-ASCII characters, make sure uWSGI is configured to accept "
"non-ASCII file names by adding this to your ``uwsgi.ini``:"
msgstr ""
"非 ASCII 文字を含むファイル名でファイルをアップロードするときに "
"``UnicodeEncodeError`` が発生する場合は、 ``uwsgi.ini`` に以下の設定を追加し"
"て、uWSGI が非 ASCII ファイル名を受け付けるようにしてください:"

msgid ""
"See the uWSGI docs on `managing the uWSGI process`_ for information on "
"starting, stopping and reloading the uWSGI workers."
msgstr ""
"uWSGI worker の開始、停止およびリロードに関する情報は、uWSGI ドキュメントの "
"`managing the uWSGI process`_ を参照してください。"

msgid "How to manage error reporting"
msgstr "エラーレポートの管理"

msgid ""
"When you're running a public site you should always turn off the :setting:"
"`DEBUG` setting. That will make your server run much faster, and will also "
"prevent malicious users from seeing details of your application that can be "
"revealed by the error pages."
msgstr ""
"サイトを公開している場合、:setting:`DEBUG` 設定は常にオフにしておかなければな"
"りません。これにより、サーバー動作は高速になり、エラーページによって明らかに"
"なるアプリケーションの詳細が悪意あるユーザーに漏れるのを防ぎます。"

msgid ""
"However, running with :setting:`DEBUG` set to ``False`` means you'll never "
"see errors generated by your site -- everyone will instead see your public "
"error pages. You need to keep track of errors that occur in deployed sites, "
"so Django can be configured to create reports with details about those "
"errors."
msgstr ""
"しかし、 :setting:`DEBUG` を ``False`` にセットして実行すると、サイトによって"
"生成されるエラーが見られなくなります――表示されるのは万人向けのエラーページだ"
"けです。そこで、本番サイトで起きたエラーを追跡するために、Django ではこれらの"
"エラーに関する詳細なレポートを作成するように設定できます。"

msgid "Email reports"
msgstr "E メールのレポート"

msgid "Server errors"
msgstr "サーバーエラー"

msgid ""
"When :setting:`DEBUG` is ``False``, Django will email the users listed in "
"the :setting:`ADMINS` setting whenever your code raises an unhandled "
"exception and results in an internal server error (strictly speaking, for "
"any response with an HTTP status code of 500 or greater). This gives the "
"administrators immediate notification of any errors. The :setting:`ADMINS` "
"will get a description of the error, a complete Python traceback, and "
"details about the HTTP request that caused the error."
msgstr ""
":setting:`DEBUG` が ``False`` であるとき、コードがハンドリングされない例外を"
"起こして内部サーバーエラーが起きると (厳密には、500 以上の HTTP ステータス"
"コードを持つ全てのレスポンスが返ってくると)、Django は :setting:`ADMINS` 設定"
"のリストに含まれるユーザーにメールを送信します。これにより、管理者はすぐにエ"
"ラーの通知を受け取ることができます。メールには、:setting:`ADMINS` はエラーの"
"説明、Python のトレースバック全体、エラーを引き起こした HTTP リクエストの詳細"
"について書かれています。"

msgid ""
"In order to send email, Django requires a few settings telling it how to "
"connect to your mail server. At the very least, you'll need to specify :"
"setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and :setting:"
"`EMAIL_HOST_PASSWORD`, though other settings may be also required depending "
"on your mail server's configuration. Consult :doc:`the Django settings "
"documentation </ref/settings>` for a full list of email-related settings."
msgstr ""
"メールを送信するために、Django はメールサーバーへの接続方法をいくつか設定する"
"必要があります。最低限 :setting:`EMAIL_HOST` と、おそらく :setting:"
"`EMAIL_HOST_USER` と :setting:`EMAIL_HOST_PASSWORD` を指定する必要があります"
"が、メールサーバーの設定によっては他の設定も必要かもしれません。メール関連の"
"設定の一覧は :doc:`Django の設定のドキュメント </ref/settings>` を参照してく"
"ださい。"

msgid ""
"By default, Django will send email from root@localhost. However, some mail "
"providers reject all email from this address. To use a different sender "
"address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""
"デフォルトでは、 Django は root@localhost からメールを送信します。しかし、"
"メールプロバイダによっては、このアドレスからのメールを全て拒否します。別の送"
"信者アドレスを使うには、 :setting:`SERVER_EMAIL` 設定を変更してください。"

msgid ""
"To activate this behavior, put the email addresses of the recipients in the :"
"setting:`ADMINS` setting."
msgstr ""
"この動作を有効にするには、受信者のメールアドレスを :setting:`ADMINS` 設定に含"
"めます。"

msgid ""
"Server error emails are sent using the logging framework, so you can "
"customize this behavior by :doc:`customizing your logging configuration </"
"topics/logging>`."
msgstr ""
"サーバーエラーのメールはロギングフレームワークを使って送信されるので、 :doc:`"
"ロギングの設定をカスタマイズする</topics/logging>` ことで動作を変更できます。"

msgid "404 errors"
msgstr "404 エラー"

msgid ""
"Django can also be configured to email errors about broken links (404 \"page "
"not found\" errors). Django sends emails about 404 errors when:"
msgstr ""
"Django は、リンク切れに関するエラー (404 \"page not found\" エラー) をメール"
"で送信するように設定することもできます。Django は以下の場合に 404 エラーに関"
"するメールを送ります:"

msgid ":setting:`DEBUG` is ``False``;"
msgstr ":setting:`DEBUG` が ``False`` のとき;"

msgid ""
"Your :setting:`MIDDLEWARE` setting includes :class:`django.middleware.common."
"BrokenLinkEmailsMiddleware`."
msgstr ""
":setting:`MIDDLEWARE` 設定に :class:`django.middleware.common."
"BrokenLinkEmailsMiddleware` が含まれているとき。"

msgid ""
"If those conditions are met, Django will email the users listed in the :"
"setting:`MANAGERS` setting whenever your code raises a 404 and the request "
"has a referer. It doesn't bother to email for 404s that don't have a referer "
"-- those are usually people typing in broken URLs or broken web bots. It "
"also ignores 404s when the referer is equal to the requested URL, since this "
"behavior is from broken web bots too."
msgstr ""
"これらの条件が満たされると、Django はあなたのコードが 404 を発生させ、そのリ"
"クエストがリファラを持っている場合、 :setting:`MANAGERS` 設定にリストされてい"
"るユーザにメールを送ります。リファラを持たない 404 にはわざわざメールを送りま"
"せん。それは大抵、壊れた URL を入力したユーザか、壊れた Web ボットです。ま"
"た、リファラがリクエストされた URL と同じ場合の 404 も無視します。"

msgid ""
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` must appear "
"before other middleware that intercepts 404 errors, such as :class:`~django."
"middleware.locale.LocaleMiddleware` or :class:`~django.contrib.flatpages."
"middleware.FlatpageFallbackMiddleware`. Put it toward the top of your :"
"setting:`MIDDLEWARE` setting."
msgstr ""
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` は、 :class:"
"`~django.middleware.locale.LocaleMiddleware` や :class:`~django.contrib."
"flatpages.middleware.FlatpageFallbackMiddleware` のような 404 エラーを検出す"
"る他のミドルウェアよりも前に表示する必要があります。これを :setting:"
"`MIDDLEWARE` 設定の一番上に置いてください。"

msgid ""
"You can tell Django to stop reporting particular 404s by tweaking the :"
"setting:`IGNORABLE_404_URLS` setting. It should be a list of compiled "
"regular expression objects. For example::"
msgstr ""
"特定の 404 を報告しないように Django に指示するには、 :setting:"
"`IGNORABLE_404_URLS` 設定をいじります。これはコンパイルされた正規表現オブジェ"
"クトのリストでなければなりません。例えば:"

msgid ""
"In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will "
"*not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""
"この例では、 ``.php`` または ``.cgi`` で終わる URL への 404 は報告されませ"
"ん。また、 ``/phpmyadmin/`` で始まるURLも報告されません。"

msgid ""
"The following example shows how to exclude some conventional URLs that "
"browsers and crawlers often request::"
msgstr ""
"以下は、ブラウザやクローラがよくリクエストする従来の URL を除外する方法の例で"
"す:"

msgid ""
"(Note that these are regular expressions, so we put a backslash in front of "
"periods to escape them.)"
msgstr ""
"(これらは正規表現なので、ピリオドの前にバックスラッシュを入れてエスケープして"
"いることに注意してください)"

msgid ""
"If you'd like to customize the behavior of :class:`django.middleware.common."
"BrokenLinkEmailsMiddleware` further (for example to ignore requests coming "
"from web crawlers), you should subclass it and override its methods."
msgstr ""
":class:`django.middleware.common.BrokenLinkEmailsMiddleware` の動作をさらにカ"
"スタマイズしたい場合(例えば、ウェブクローラからのリクエストを無視したい場合な"
"ど)は、サブクラスを作成し、そのメソッドをオーバーライドしてください。"

msgid ""
"404 errors are logged using the logging framework. By default, these log "
"records are ignored, but you can use them for error reporting by writing a "
"handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""
"404エラーはロギングフレームワークを使って記録されます。デフォルトではこれらの"
"ログレコードは無視されますが、ハンドラを書いて :doc:`ロギングを適切に設定する"
"</topics/logging>` ことで、エラー報告に使うことができます。"

msgid "Filtering error reports"
msgstr "エラーレポートをフィルタリングする"

msgid ""
"Filtering sensitive data is a hard problem, and it's nearly impossible to "
"guarantee that sensitive data won't leak into an error report. Therefore, "
"error reports should only be available to trusted team members and you "
"should avoid transmitting error reports unencrypted over the internet (such "
"as through email)."
msgstr ""
"機密データのフィルタリングは難しい問題であり、機密データがエラーレポートに漏"
"れないことを保証することはほとんど不可能です。したがって、エラーレポートは信"
"頼できるチームメンバーのみが利用できるようにし、インターネット上で暗号化され"
"ていないエラーレポートを送信することは避けるべきです（電子メールなど）。"

msgid "Filtering sensitive information"
msgstr "機密情報のフィルタリング"

msgid ""
"Error reports are really helpful for debugging errors, so it is generally "
"useful to record as much relevant information about those errors as "
"possible. For example, by default Django records the `full traceback`_ for "
"the exception raised, each `traceback frame`_’s local variables, and the :"
"class:`~django.http.HttpRequest`’s :ref:`attributes<httprequest-attributes>`."
msgstr ""
"エラーレポートはエラーのデバッグにとても役立つので、通常は、エラーに関する関"
"連情報をできるだけ多く記録しておくと便利です。例えば、デフォルトでは Django "
"は発生した例外の `full traceback`_ や、各 `traceback frame`_ のローカル変"
"数、 :class:`~django.http.HttpRequest` の :ref:`属性 <httprequest-"
"attributes>` を記録します。"

msgid ""
"However, sometimes certain types of information may be too sensitive and "
"thus may not be appropriate to be kept track of, for example a user's "
"password or credit card number. So in addition to filtering out settings "
"that appear to be sensitive as described in the :setting:`DEBUG` "
"documentation, Django offers a set of function decorators to help you "
"control which information should be filtered out of error reports in a "
"production environment (that is, where :setting:`DEBUG` is set to "
"``False``): :func:`sensitive_variables` and :func:"
"`sensitive_post_parameters`."
msgstr ""
"しかし、例えばユーザのパスワードやクレジットカード番号のように、ある種の情報"
"は機密性が高すぎるため、記録するのが適切でない場合があります。そこで Django "
"では、 :setting:`DEBUG` ドキュメントで説明されているように、機密性が高そうな"
"設定をフィルタリングすることに加えて、本番環境 (つまり、 :setting:`DEBUG` が "
"``False`` に設定されている場合) でエラーレポートからフィルタリングされる情報"
"を制御するのに役立つ関数デコレータを提供しています。 :func:"
"`sensitive_variables` と :func:`sensitive_post_parameters` です。"

msgid ""
"If a function (either a view or any regular callback) in your code uses "
"local variables susceptible to contain sensitive information, you may "
"prevent the values of those variables from being included in error reports "
"using the ``sensitive_variables`` decorator::"
msgstr ""
"コード内の関数（ビューまたは通常のコールバック）が機密情報を含む可能性のある"
"ローカル変数を使用している場合、 ``sensitive_variables`` デコレータを使用する"
"ことで、それらの変数の値がエラーレポートに含まれないようにすることができます:"

msgid ""
"In the above example, the values for the ``user``, ``pw`` and ``cc`` "
"variables will be hidden and replaced with stars (``**********``) in the "
"error reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""
"上記の例では、 ``user``、``pw``、``cc`` の値は非表示になり、エラーレポートで"
"はアスタリスク (``*******``) に置き換えられますが、 ``name`` 変数の値は公開さ"
"れます。"

msgid ""
"To systematically hide all local variables of a function from error logs, do "
"not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""
"関数のすべてのローカル変数をエラーログから徹底的に隠す場合は、引数なしで "
"``sensitive_variables`` デコレーターを使います:"

msgid "When using multiple decorators"
msgstr "複数のデコレータを使うとき"

msgid ""
"If the variable you want to hide is also a function argument (e.g. "
"'``user``’ in the following example), and if the decorated function has "
"multiple decorators, then make sure to place ``@sensitive_variables`` at the "
"top of the decorator chain. This way it will also hide the function argument "
"as it gets passed through the other decorators::"
msgstr ""
"非表示にしたい変数が関数の引数でもある場合 (例えば、次の例では '``user``') 、"
"そしてデコレートされた関数に複数のデコレーターがある場合は、 "
"``@sensitive_variables`` をデコレーターチェインの先頭に置くようにしてくださ"
"い。こうすることで、関数の引数が他のデコレータに渡される際に、その引数を隠す"
"ことができます:"

msgid "Support for wrapping ``async`` functions was added."
msgstr "``async`` 関数のラップをサポートしました。"

msgid ""
"If one of your views receives an :class:`~django.http.HttpRequest` object "
"with :attr:`POST parameters<django.http.HttpRequest.POST>` susceptible to "
"contain sensitive information, you may prevent the values of those "
"parameters from being included in the error reports using the "
"``sensitive_post_parameters`` decorator::"
msgstr ""
"もしビューの 1 つが :class:`~django.http.HttpRequest` オブジェクトを :attr:"
"`POST parameters<django.http.HttpRequest.POST>` で受け取った場合、機密情報が"
"含まれている可能性があるので、 ``sensitive_post_parameters`` デコレータを使っ"
"て、エラーレポートにそのパラメータの値が含まれないようにすることができます:"

msgid ""
"In the above example, the values for the ``pass_word`` and "
"``credit_card_number`` POST parameters will be hidden and replaced with "
"stars (``**********``) in the request's representation inside the error "
"reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""
"上の例では、 ``pass_word`` と ``credit_card_number`` のPOSTパラメータの値は隠"
"され、エラーレポート内のリクエストの表現ではアスタリスク (``*******``) に置き"
"換えられますが、 ``name`` パラメータの値は公開されます。"

msgid ""
"To systematically hide all POST parameters of a request in error reports, do "
"not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""
"エラーレポートでリクエストの全てのPOSTパラメータを徹底的に隠す場合は、 引数な"
"しで ``sensitive_post_parameters`` デコレータを使います:"

msgid ""
"All POST parameters are systematically filtered out of error reports for "
"certain :mod:`django.contrib.auth.views` views (``login``, "
"``password_reset_confirm``, ``password_change``, and ``add_view`` and "
"``user_change_password`` in the ``auth`` admin) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""
"特定の :mod:`django.contrib.auth.views` のビュー (``auth`` admin 内の "
"``login``, ``password_reset_confirm``, ``password_change``, ``auth`` admin "
"の ``add_view`` と ``user_change_password``) のエラーレポートから、すべての "
"POST パラメータが徹底的にフィルタされ、ユーザパスワードのような機密情報の漏洩"
"を防ぎます。"

msgid "Custom error reports"
msgstr "カスタムエラーレポート"

msgid ""
"All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is, "
"respectively, annotate the decorated function with the names of sensitive "
"variables and annotate the ``HttpRequest`` object with the names of "
"sensitive POST parameters, so that this sensitive information can later be "
"filtered out of reports when an error occurs. The actual filtering is done "
"by Django's default error reporter filter: :class:`django.views.debug."
"SafeExceptionReporterFilter`. This filter uses the decorators' annotations "
"to replace the corresponding values with stars (``**********``) when the "
"error reports are produced. If you wish to override or customize this "
"default behavior for your entire site, you need to define your own filter "
"class and tell Django to use it via the :setting:"
"`DEFAULT_EXCEPTION_REPORTER_FILTER` setting::"
msgstr ""
":func:`sensitive_variables` と :func:`sensitive_post_parameters` がすること"
"は、それぞれ、装飾された関数にセンシティブな変数名をアノテートし、"
"``HttpRequest`` オブジェクトにセンシティブな POST パラメータ名をアノテートす"
"るだけです。実際のフィルタリングは Django のデフォルトのエラーレポートフィル"
"タ ( :class:`django.views.debug.SafeExceptionReporterFilter` ) で行われます。"
"このフィルタはデコレータのアノテーションを使い、エラーレポートが生成される際"
"に、対応する値をアスタリスク (``*******``) に置き換えます。このデフォルトの動"
"作を上書きしたり、サイト全体でカスタマイズしたい場合は、独自のフィルタクラス"
"を定義し、 :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` 設定でそれを使うよう"
"に Django に指示する必要があります:"

msgid ""
"You may also control in a more granular way which filter to use within any "
"given view by setting the ``HttpRequest``’s ``exception_reporter_filter`` "
"attribute::"
msgstr ""
"また、 ``HttpRequest`` の ``exception_reporter_filter`` 属性を指定すること"
"で、任意のビューで使用するフィルタをより細かく制御できます:"

msgid ""
"Your custom filter class needs to inherit from :class:`django.views.debug."
"SafeExceptionReporterFilter` and may override the following attributes and "
"methods:"
msgstr ""
"カスタムフィルタクラスは :class:`django.views.debug."
"SafeExceptionReporterFilter` を継承し、以下の属性とメソッドをオーバーライドす"
"る必要があります:"

msgid ""
"The string value to replace sensitive value with. By default it replaces the "
"values of sensitive variables with stars (``**********``)."
msgstr ""
"センシティブな値を置換する文字列値。デフォルトでは、センシティブな変数の値を"
"アスタリスク (``*******``) で置き換えます。"

msgid ""
"A compiled regular expression object used to match settings and ``request."
"META`` values considered as sensitive. By default equivalent to::"
msgstr ""
"センシティブな設定や ``request.META`` にマッチする正規表現オブジェクト。デ"
"フォルトでは下記です:"

msgid "``HTTP_COOKIE`` was added."
msgstr "``HTTP_COOKIE`` が追加されました。"

msgid ""
"Returns ``True`` to activate the filtering in :meth:`get_post_parameters` "
"and :meth:`get_traceback_frame_variables`. By default the filter is active "
"if :setting:`DEBUG` is ``False``. Note that sensitive ``request.META`` "
"values are always filtered along with sensitive setting values, as described "
"in the :setting:`DEBUG` documentation."
msgstr ""
":meth:`get_post_parameters` と :meth:`get_traceback_frame_variables` のフィル"
"タリングを有効にする場合は ``True`` を返します。デフォルトでは :setting:"
"`DEBUG` が ``False`` の場合に有効になります。 :setting:`DEBUG` のドキュメント"
"にあるように、センシティブな ``request.META`` の値は常に、センシティブな設定"
"値とともにフィルタリングされることに注意してください。"

msgid ""
"Returns the filtered dictionary of POST parameters. Sensitive values are "
"replaced with :attr:`cleansed_substitute`."
msgstr ""
"フィルタリングされた POST パラメータの辞書を返します。センシティブな値は :"
"attr:`cleansed_substitute` で置換されます。"

msgid ""
"Returns the filtered dictionary of local variables for the given traceback "
"frame. Sensitive values are replaced with :attr:`cleansed_substitute`."
msgstr ""
"与えられたトレースバックフレームのローカル変数のフィルタリングされた辞書を返"
"します。センシティブな値は :attr:`cleansed_substitute` で置き換えられます。"

msgid ""
"If you need to customize error reports beyond filtering you may specify a "
"custom error reporter class by defining the :setting:"
"`DEFAULT_EXCEPTION_REPORTER` setting::"
msgstr ""
"フィルタリングの他にエラーレポートをカスタマイズする必要がある場合は、 :"
"setting:`DEFAULT_EXCEPTION_REPORTER` 設定を定義することでカスタムエラーレポー"
"タークラスを指定できます:"

msgid ""
"The exception reporter is responsible for compiling the exception report "
"data, and formatting it as text or HTML appropriately. (The exception "
"reporter uses :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` when preparing "
"the exception report data.)"
msgstr ""
"例外レポーターは例外レポートデータをコンパイルし、テキストまたはHTMLとして適"
"切にフォーマットする責任があります。(例外報告レポーターは、例外レポートデータ"
"を作成する際に :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` を使用します)。"

msgid ""
"Your custom reporter class needs to inherit from :class:`django.views.debug."
"ExceptionReporter`."
msgstr ""
"カスタムレポータークラスは :class:`django.views.debug.ExceptionReporter` を継"
"承する必要があります。"

msgid ""
"Property that returns a :class:`pathlib.Path` representing the absolute "
"filesystem path to a template for rendering the HTML representation of the "
"exception. Defaults to the Django provided template."
msgstr ""
"例外の HTML 表現をレンダリングするテンプレートへの絶対ファイルシステムパスを"
"表す :class:`pathlib.Path` を返すプロパティです。デフォルトは Django が提供す"
"るテンプレートです。"

msgid ""
"Property that returns a :class:`pathlib.Path` representing the absolute "
"filesystem path to a template for rendering the plain-text representation of "
"the exception. Defaults to the Django provided template."
msgstr ""
":class:`pathlib.Path` を返すプロパティで、例外のプレーンテキスト表現をレンダ"
"リングするテンプレー トへのファイルシステムの絶対パスを表します。デフォルト"
"は Django が提供するテンプレートです。"

msgid "Return a dictionary containing traceback information."
msgstr "トレースバック情報を含む辞書を返します。"

msgid ""
"This is the main extension point for customizing exception reports, for "
"example::"
msgstr ""
"これは、例えば例外レポートをカスタマイズするための主な拡張ポイントです。例え"
"ば下記のようにします:"

msgid "Return HTML version of exception report."
msgstr "例外レポートの HTML 版を返します。"

msgid "Used for HTML version of debug 500 HTTP error page."
msgstr "デバッグ 500 HTTP エラー・ページの HTML 版に使用されます。"

msgid "Return plain text version of exception report."
msgstr "例外レポートのプレーンテキスト版を返します。"

msgid ""
"Used for plain text version of debug 500 HTTP error page and email reports."
msgstr ""
"デバッグ 500 HTTP エラーページおよび E メールレポートのプレーンテキスト版に使"
"用されます。"

msgid ""
"As with the filter class, you may control which exception reporter class to "
"use within any given view by setting the ``HttpRequest``’s "
"``exception_reporter_class`` attribute::"
msgstr ""
"フィルタクラスと同様に、 ``HttpRequest`` の ``exception_reporter_class`` 属性"
"を指定することで、任意のビューで使用する例外レポータークラスを制御できます:"

msgid ""
"You can also set up custom error reporting by writing a custom piece of :ref:"
"`exception middleware <exception-middleware>`. If you do write custom error "
"handling, it's a good idea to emulate Django's built-in error handling and "
"only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""
"また、独自の :ref:`例外ミドルウェア <exception-middleware>` を書くことで、独"
"自のエラーレポートを設定することもできます。もしカスタムエラー処理を書くので"
"あれば、 Django の組み込みエラー処理を真似て、 :setting:`DEBUG` が ``False`` "
"の場合のみエラーを報告/ログ出力するようにすると良いでしょう。"

msgid "\"How-to\" guides"
msgstr "「How-to」ガイド"

msgid ""
"Here you'll find short answers to \"How do I....?\" types of questions. "
"These how-to guides don't cover topics in depth -- you'll find that material "
"in the :doc:`/topics/index` and the :doc:`/ref/index`. However, these guides "
"will help you quickly accomplish common tasks."
msgstr ""
"ここには「～をするにはどうしたらよいだろう？」といった疑問に対する簡単な答え"
"があります。これらの How-to ガイドではあまり詳細な話は扱いません。詳細な情報"
"については :doc:`/topics/index` や :doc:`/ref/index` で見つけられるでしょう。"
"ともあれ、ここにあるガイドは、よくある作業を素早く片付けるのに役立つはずで"
"す。"

msgid ""
"The `Django community aggregator`_, where we aggregate content from the "
"global Django community. Many writers in the aggregator write this sort of "
"how-to material."
msgstr ""
"`Django community aggregator`_ は、世界中の Django コミュニティのコンテンツを"
"集約しています。このアグリゲータでは、多くの書き手がこの種のHow To記事を書い"
"ています。"

msgid "How to provide initial data for models"
msgstr "モデルに初期データを投入する"

msgid ""
"It's sometimes useful to prepopulate your database with hard-coded data when "
"you're first setting up an app. You can provide initial data with migrations "
"or fixtures."
msgstr ""
"アプリを最初にセットアップするとき、データベースに、ハードコーディングされた"
"データをあらかじめ入力しておくと便利なことがあります。マイグレーションまたは"
"フィクスチャで初期データを提供できます。"

msgid "Provide initial data with migrations"
msgstr "マイグレーションで初期データを投入する"

msgid ""
"To automatically load initial data for an app, create a :ref:`data migration "
"<data-migrations>`. Migrations are run when setting up the test database, so "
"the data will be available there, subject to :ref:`some limitations <test-"
"case-serialized-rollback>`."
msgstr ""
"アプリの初期データを自動的にロードするには、 :ref:`データマイグレーション"
"<data-migrations>` を作成します。マイグレーションはテストデータベースのセット"
"アップ時に実行されるため、 :ref:`いくつかの条件<test-case-serialized-"
"rollback>` を満たすことで、データが利用できるようになります。"

msgid "Provide data with fixtures"
msgstr "フィクスチャでデータを投入する"

msgid ""
"You can also provide data using :ref:`fixtures <fixtures-explanation>`, "
"however, this data isn't loaded automatically, except if you use :attr:`."
"TransactionTestCase.fixtures`."
msgstr ""
":ref:`フィクスチャ<fixtures-explanation>` (fixture) を使ってデータを投入する"
"こともできますが、 :attr:`.TransactionTestCase.fixtures` を使わない限り、この"
"データは自動的にはロードされません。"

msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. The most straightforward way of creating a fixture if you've "
"already got some data is to use the :djadmin:`manage.py dumpdata <dumpdata>` "
"command. Or, you can write fixtures by hand; fixtures can be written as "
"JSON, XML or YAML (with PyYAML_ installed) documents. The :doc:"
"`serialization documentation </topics/serialization>` has more details about "
"each of these supported :ref:`serialization formats <serialization-formats>`."
msgstr ""
"フィクスチャは、Djangoがデータベースにインポートする方法を知っているデータの"
"コレクションです。 すでにいくつかのデータがある場合、フィクスチャを作成する最"
"も簡単な方法は :djadmin:`manage.py dumpdata <dumpdata>` コマンドを使用するこ"
"とです。 もしくは、フィクスチャを手動で書くこともできます; フィクスチャは "
"JSON、XML、または (PyYAML_ をインストールして) YAML ドキュメントとして記述で"
"きます。 :doc:`シリアライズのドキュメント </topics/serialization>` でサポート"
"されている各 :ref:`シリアライズフォーマット <serialization-formats>` の詳細を"
"確認できます。"

msgid ""
"As an example, though, here's what a fixture for a ``Person`` model might "
"look like in JSON:"
msgstr ""
"例として、 ``Person`` モデルのフィクスチャをJSONで書くと次のようになります:"

msgid "And here's that same fixture as YAML:"
msgstr "YAML のフィクスチャだと以下のようになります:"

msgid "You'll store this data in a ``fixtures`` directory inside your app."
msgstr ""
"このデータは、アプリケーション内の ``fixtures`` ディレクトリ内に保存しておく"
"ことができます。"

msgid ""
"You can load data by calling :djadmin:`manage.py loaddata <loaddata>` "
"``<fixturename>``, where ``<fixturename>`` is the name of the fixture file "
"you've created. Each time you run :djadmin:`loaddata`, the data will be read "
"from the fixture and reloaded into the database. Note this means that if you "
"change one of the rows created by a fixture and then run :djadmin:`loaddata` "
"again, you'll wipe out any changes you've made."
msgstr ""
"データを読み込むには、 :djadmin:`manage.py loaddata <loaddata>` "
"``<fixturename>`` を呼び出します。ここで ``<fixturename>`` は作成したフィクス"
"チャファイルの名前です。 :djadmin:`loaddata` を実行するたびに、フィクスチャか"
"らデータが読み込まれ、データベースに再ロードされます。これは、フィクスチャに"
"よって作成された行の一つを変更してから :djadmin:`loaddata` を再度実行すると、"
"変更が元に戻ってしまうことを意味します。"

msgid "Tell Django where to look for fixture files"
msgstr "フィクスチャファイルを探す場所を Django に教える"

msgid ""
"By default, Django looks for fixtures in the ``fixtures`` directory inside "
"each app for, so the command ``loaddata sample`` will find the file ``my_app/"
"fixtures/sample.json``. This works with relative paths as well, so "
"``loaddata my_app/sample`` will find the file ``my_app/fixtures/my_app/"
"sample.json``."
msgstr ""
"デフォルトでは、Django は各アプリの ``fixtures`` ディレクトリにあるフィクス"
"チャを探すので、 ``loaddata sample`` コマンドは ``my_app/fixtures/sample."
"json`` ファイルを探します。これは相対パスでも動作するので、 ``loaddata "
"my_app/sample`` では ``my_app/fixtures/my_app/sample.json`` ファイルが見つか"
"ります。"

msgid ""
"Django also looks for fixtures in the list of directories provided in the :"
"setting:`FIXTURE_DIRS` setting."
msgstr ""
"Django は :setting:`FIXTURE_DIRS` 設定で指定されたディレクトリのリストからも"
"フィクスチャを探します。"

msgid ""
"To completely prevent default search form happening, use an absolute path to "
"specify the location of your fixture file, e.g. ``loaddata /path/to/sample``."
msgstr ""
"デフォルトの検索を完全に防ぐためには、フィクスチャファイルの場所の指定に絶対"
"パスを使用してください。例えば、 ``loaddata /path/to/sample`` のようにしま"
"す。"

msgid "Namespace your fixture files"
msgstr "フィクスチャファイルの名前空間を指定する"

msgid ""
"Django will use the first fixture file it finds whose name matches, so if "
"you have fixture files with the same name in different applications, you "
"will be unable to distinguish between them in your ``loaddata`` commands. "
"The easiest way to avoid this problem is by *namespacing* your fixture "
"files. That is, by putting them inside a directory named for their "
"application, as in the relative path example above."
msgstr ""
"Django は、名前が一致するフィクスチャファイルを最初に見つけると、そのフィクス"
"チャ ファイルを使います。そのため、異なるアプリケーションに同じ名前のフィクス"
"チャファイルがあると、 ``loaddata`` コマンドでそれらを区別できなくなります。"
"この問題を避ける最も簡単な方法は、フィクスチャファイルを *名前空間* で区切る"
"ことです。つまり、上記の相対パスの例のように、アプリケーションに応じた名前の"
"ディレクトリにファイルを置くことです。"

msgid ""
"Fixtures are also used by the :ref:`testing framework <topics-testing-"
"fixtures>` to help set up a consistent test environment."
msgstr ""
"フィクスチャは :ref:`テストフレームワーク <topics-testing-fixtures>` でも利用"
"でき、テスト環境の一貫性を保つのに役立ちます。"

msgid "How to integrate Django with a legacy database"
msgstr "レガシーなデータベースと Django の統合"

msgid ""
"While Django is best suited for developing new applications, it's quite "
"possible to integrate it into legacy databases. Django includes a couple of "
"utilities to automate as much of this process as possible."
msgstr ""
"Django は新しいアプリケーションを開発するのに最適ですが、レガシーなデータベー"
"スと統合することも可能です。Django には、それを自動化するいくつかのユーティリ"
"ティが含まれています。"

msgid ""
"This document assumes you know the Django basics, as covered in the :doc:"
"`tutorial </intro/tutorial01>`."
msgstr ""
"このドキュメントは :doc:`チュートリアル </intro/tutorial01>` に書かれているよ"
"うな、Django についての基本的な知識を持っていることを想定しています。"

msgid ""
"Once you've got Django set up, you'll follow this general process to "
"integrate with an existing database."
msgstr ""
"Django のセットアップが完了したら、次の一般的なプロセスに従うことで、既存の"
"データベースと統合することができます。"

msgid "Give Django your database parameters"
msgstr "Django に既存データベースのパラメータを与える"

msgid ""
"You'll need to tell Django what your database connection parameters are, and "
"what the name of the database is. Do that by editing the :setting:"
"`DATABASES` setting and assigning values to the following keys for the "
"``'default'`` connection:"
msgstr ""
"まず、Django に既存のデータベース接続のパラメータとデータベースの名前を教えて"
"あげる必要があります。そのために、設定ファイルの :setting:`DATABASES` を編集"
"して、``'default'`` 接続の以下のキーに対して値を設定します。"

msgid ":setting:`NAME`"
msgstr ":setting:`NAME`"

msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ":setting:`ENGINE <DATABASE-ENGINE>`"

msgid ":setting:`USER`"
msgstr ":setting:`USER`"

msgid ":setting:`PASSWORD`"
msgstr ":setting:`PASSWORD`"

msgid ":setting:`HOST`"
msgstr ":setting:`HOST`"

msgid ":setting:`PORT`"
msgstr ":setting:`PORT`"

msgid "Auto-generate the models"
msgstr "モデルを自動生成する"

msgid ""
"Django comes with a utility called :djadmin:`inspectdb` that can create "
"models by introspecting an existing database. You can view the output by "
"running this command:"
msgstr ""
"Django には :djadmin:`inspectdb` と呼ばれるユーティリティが付属しており、既存"
"のデータベースを調査することでモデルを作成できます。次のコマンドを実行すると"
"出力が表示できます。"

msgid "Save this as a file by using standard Unix output redirection:"
msgstr "通常の Unix 出力のリダイレクトにより、ファイルとして保存します。"

msgid ""
"This feature is meant as a shortcut, not as definitive model generation. See "
"the :djadmin:`documentation of inspectdb <inspectdb>` for more information."
msgstr ""
"この機能は最終的なモデル生成ではなく、ショートカットとしての手段です。さらな"
"る情報は、:djadmin:`documentation of inspectdb <inspectdb>` を参照してくださ"
"い。 "

msgid ""
"Once you've cleaned up your models, name the file ``models.py`` and put it "
"in the Python package that holds your app. Then add the app to your :setting:"
"`INSTALLED_APPS` setting."
msgstr ""
"モデルをクリーンアップしたら、ファイルを ``models.py`` と名付け、アプリが含ま"
"れる Python パッケージの中に配置します。そして、アプリを :setting:"
"`INSTALLED_APPS` の設定に追加します。"

msgid ""
"By default, :djadmin:`inspectdb` creates unmanaged models. That is, "
"``managed = False`` in the model's ``Meta`` class tells Django not to manage "
"each table's creation, modification, and deletion::"
msgstr ""
"デフォルトでは、:djadmin:`inspectdb` は未管理 (unmanaged) なモデルを作成しま"
"す。つまり、モデルの ``Meta`` クラス内の ``managed = False`` により、Django "
"はテーブルの作成・変更・削除を管理しなくなります。"

msgid ""
"If you do want to allow Django to manage the table's lifecycle, you'll need "
"to change the :attr:`~django.db.models.Options.managed` option above to "
"``True`` (or remove it because ``True`` is its default value)."
msgstr ""
"Django にテーブルのライフサイクルの管理を行ってほしい場合、上記の :attr:"
"`~django.db.models.Options.managed` オプションを ``True`` に設定 (あるいは、"
"``True`` がデフォルト値なので削除) できます。"

msgid "Install the core Django tables"
msgstr "core Django テーブルのインストール"

msgid ""
"Next, run the :djadmin:`migrate` command to install any extra needed "
"database records such as admin permissions and content types:"
msgstr ""
"次に、:djadmin:`migrate` コマンドを実行すると、追加で必要な admin 権限などの"
"データベースレコードがインストールされます。"

msgid "Test and tweak"
msgstr "テストと修正"

msgid ""
"Those are the basic steps -- from here you'll want to tweak the models "
"Django generated until they work the way you'd like. Try accessing your data "
"via the Django database API, and try editing objects via Django's admin "
"site, and edit the models file accordingly."
msgstr ""
"以上は基本的なステップです。ここからは、Django が生成したモデルを期待通りに動"
"作するようになるまで微調整することになるでしょう。必要に応じて、Django データ"
"ベース API 経由でデータにアクセスしたり、Django の admin サイトで objects を"
"編集したり、models ファイルを編集してみてください。"

msgid "How to configure and use logging"
msgstr "ロギングの設定と利用"

msgid ":ref:`Django logging reference <logging-ref>`"
msgstr ":ref:`Django のロギング リファレンス <logging-ref>`"

msgid ":ref:`Django logging overview <logging-explanation>`"
msgstr ":ref:`Django のロギングの概要 <logging-explanation>`"

msgid ""
"Django provides a working :ref:`default logging configuration <default-"
"logging-configuration>` that is readily extended."
msgstr ""
"Django はそのままで動作する :ref:`デフォルトのロギング設定 <default-logging-"
"configuration>` を持っており、すぐに拡張可能です。"

msgid "Make a basic logging call"
msgstr "基本的なロギング呼び出しを作成する"

msgid ""
"To send a log message from within your code, you place a logging call into "
"it."
msgstr ""
"ログメッセージをコード内から送信するには、コードにロギングの呼び出しを書く必"
"要があります。"

msgid "Don't be tempted to use logging calls in ``settings.py``."
msgstr "``settings.py`` でログ呼び出しを使用しようとしないでください。"

msgid ""
"The way that Django logging is configured as part of the ``setup()`` "
"function means that logging calls placed in ``settings.py`` may not work as "
"expected, because *logging will not be set up at that point*. To explore "
"logging, use a view function as suggested in the example below."
msgstr ""
"Django のロギングは ``setup()`` 関数の一部として設定されるため、 ``settings."
"py`` でロギングを呼び出しても期待通りに動作しないかもしれません。ロギングを調"
"べるには、以下の例で推奨されているようにビュー関数を使用してください。"

msgid ""
"First, import the Python logging library, and then obtain a logger instance "
"with :py:func:`logging.getLogger`. Provide the ``getLogger()`` method with a "
"name to identify it and the records it emits. A good option is to use "
"``__name__`` (see :ref:`naming-loggers` below for more on this) which will "
"provide the name of the current Python module as a dotted path::"
msgstr ""
"まず、Python の logging ライブラリをインポートし、:py:func:`logging."
"getLogger` でロガーのインスタンスを取得します。``getLogger()`` メソッドに、ロ"
"ガーとロガーが出力するレコードを識別するための名前を指定します。そのための良"
"い方法は ``__name__`` を使用することです (これについては以下の :ref:`naming-"
"loggers` を参照してください)。これは、次のように、現在の Python モジュールの"
"名前をドット区切りのパスで返します。"

msgid "It's a good convention to perform this declaration at module level."
msgstr "この宣言はモジュール・レベルで行うのがよいとされています。"

msgid ""
"And then in a function, for example in a view, send a record to the logger::"
msgstr "そして、ビューなどの関数内で、logger にレコードを送信します。"

msgid ""
"When this code is executed, a :py:class:`~logging.LogRecord` containing that "
"message will be sent to the logger. If you're using Django's default logging "
"configuration, the message will appear in the console."
msgstr ""
"このコードが実行されると、そのメッセージを含む :py:class:`~logging."
"LogRecord` が logger に送られます。Django のデフォルトの logging 設定を使って"
"いる場合、メッセージはコンソールに表示されます。"

msgid ""
"The ``WARNING`` level used in the example above is one of several :ref:"
"`logging severity levels <topic-logging-parts-loggers>`: ``DEBUG``, "
"``INFO``, ``WARNING``, ``ERROR``, ``CRITICAL``. So, another example might "
"be::"
msgstr ""
"上の例で使われている ``WARNING`` レベルは、いくつかある :ref:`ログの重大度レ"
"ベル <topic-logging-parts-loggers>`: ``DEBUG``, ``INFO``, ``WARNING``, "
"``ERROR``, ``CRITICAL`` の一つです。したがって、別の例は次のようになります。"

msgid ""
"Records with a level lower than ``WARNING`` will not appear in the console "
"by default. Changing this behavior requires additional configuration."
msgstr ""
"``WARNING`` より低いレベルのレコードはデフォルトではコンソールに表示されませ"
"ん。この動作を変更するには追加の設定が必要です。"

msgid "Customize logging configuration"
msgstr "ロギングの設定をカスタマイズする"

msgid ""
"Although Django's logging configuration works out of the box, you can "
"control exactly how your logs are sent to various destinations - to log "
"files, external services, email and so on - with some additional "
"configuration."
msgstr ""
"Djangoのロギング設定は初期状態で動作しますが、追加の設定を行うことで、ログを"
"様々な宛先（ログファイル、外部サービス、メールなど）に送信するのを正確にコン"
"トロールできます。"

msgid "You can configure:"
msgstr "以下のものを設定できます。"

msgid "logger mappings, to determine which records are sent to which handlers"
msgstr "どのレコードがどのハンドラに送られるかを決定するためのロガーマッピング"

msgid "handlers, to determine what they do with the records they receive"
msgstr "受け取ったレコードをどう処理するかを決めるハンドラー"

msgid ""
"filters, to provide additional control over the transfer of records, and "
"even modify records in-place"
msgstr ""
"レコードの転送をさらにコントロールし、レコードをその場で変更することもできる"
"フィルタ"

msgid ""
"formatters, to convert :class:`~logging.LogRecord` objects to a string or "
"other form for consumption by human beings or another system"
msgstr ""
":class:`~logging.LogRecord` オブジェクトを、人間や他のシステムで利用できるよ"
"うに文字列や他の形式に変換するためのフォーマッタ"

msgid ""
"There are various ways of configuring logging. In Django, the :setting:"
"`LOGGING` setting is most commonly used. The setting uses the :ref:"
"`dictConfig format <logging-config-dictschema>`, and extends the :ref:"
"`default logging configuration <default-logging-definition>`."
msgstr ""
"ロギングの設定には様々な方法があります。Django では、 :setting:`LOGGING` 設定"
"が最もよく使われます。この設定は :ref:`dictConfig フォーマット <logging-"
"config-dictschema>` を使い、 :ref:`デフォルトのロギング設定<default-logging-"
"definition>` を拡張します。"

msgid ""
"See :ref:`configuring-logging` for an explanation of how your custom "
"settings are merged with Django's defaults."
msgstr ""
"カスタム設定が Django のデフォルトとどのようにマージされるかについては :ref:"
"`configuring-logging` を参照してください。"

msgid ""
"See the :mod:`Python logging documentation <python:logging.config>` for "
"details of other ways of configuring logging. For the sake of simplicity, "
"this documentation will only consider configuration via the ``LOGGING`` "
"setting."
msgstr ""
"その他のロギングの設定方法の詳細については :mod:`Python logging "
"documentation <python:logging.config>` を参照してください。簡単にするために、"
"このドキュメントでは ``LOGGING`` 設定による設定のみを考えます。"

msgid "Basic logging configuration"
msgstr "ロギングの基本的な設定"

msgid "When configuring logging, it makes sense to"
msgstr "ロギングを設定する場合、以下のようにします。"

msgid "Create a ``LOGGING`` dictionary"
msgstr "``LOGGING`` 辞書を作成する"

msgid "In your ``settings.py``::"
msgstr "``settings.py`` に以下を追加します:"

msgid ""
"It nearly always makes sense to retain and extend the default logging "
"configuration by setting ``disable_existing_loggers`` to ``False``."
msgstr ""
"ほとんどの場合、 ``disable_existing_loggers`` を ``False`` に設定することで、"
"デフォルトのロギング設定を保持し、拡張できます。"

msgid "Configure a handler"
msgstr "ハンドラを設定する"

msgid ""
"This example configures a single handler named ``file``, that uses Python's :"
"class:`~logging.FileHandler` to save logs of level ``DEBUG`` and higher to "
"the file ``general.log`` (at the project root):"
msgstr ""
"この例では、Python の :class:`~logging.FileHandler` を使って、レベル "
"``DEBUG`` 以上のログを (プロジェクトルート内の) ``general.log`` ファイルに保"
"存する ``file`` という名前のハンドラを設定します:"

msgid ""
"Different handler classes take different configuration options. For more "
"information on available handler classes, see the :class:`~django.utils.log."
"AdminEmailHandler` provided by Django and the various :py:mod:`handler "
"classes <logging.handlers>` provided by Python."
msgstr ""
"異なるハンドラクラスは異なる設定オプションを取ります。利用可能なハンドラクラ"
"スの詳細については、 Django が提供する :class:`~django.utils.log."
"AdminEmailHandler` や Python が提供する様々な :py:mod:`handler class "
"<logging.handlers>` を参照してください。"

msgid ""
"Logging levels can also be set on the handlers (by default, they accept log "
"messages of all levels). Using the example above, adding:"
msgstr ""
"ログレベルはハンドラで設定することもできます（デフォルトでは、ハンドラはすべ"
"てのレベルのログメッセージを受け取ります）。上の例を使うと、次のように書けま"
"す:"

msgid ""
"would define a handler configuration that only accepts records of level "
"``DEBUG`` and higher."
msgstr ""
"これで、レベル ``DEBUG`` 以上のレコードだけを受け付けるようにハンドラを設定で"
"きます。"

msgid "Configure a logger mapping"
msgstr "ロガーマッピングを設定する"

msgid ""
"To send records to this handler, configure a logger mapping to use it for "
"example:"
msgstr ""
"このハンドラにレコードを送信するには、ロガーマッピングをそのハンドラを使うよ"
"うに設定します。例えば:"

msgid ""
"The mapping's name determines which log records it will process. This "
"configuration (``''``) is *unnamed*. That means that it will process records "
"from *all* loggers (see :ref:`naming-loggers` below on how to use the "
"mapping name to determine the loggers for which it will process records)."
msgstr ""
"マッピングの名前はどのログレコードを処理するかを決定します。この設定 "
"(``\"\"``) は *無名* です。つまり、 *すべての* ロガーからのレコードを処理しま"
"す（レコードを処理するロガーを決定するためにマッピング名を使用する方法につい"
"ては、以下の :ref:`naming-loggers` を参照してください）。"

msgid ""
"It will forward messages of levels ``DEBUG`` and higher to the handler named "
"``file``."
msgstr ""
"これは ``DEBUG`` レベル以上のメッセージを ``file`` というハンドラーに転送しま"
"す。"

msgid ""
"Note that a logger can forward messages to multiple handlers, so the "
"relation between loggers and handlers is many-to-many."
msgstr ""
"ロガーは複数のハンドラーにメッセージを転送できるので、ロガーとハンドラーの関"
"係は多対多であることに注意してください。"

msgid "If you execute::"
msgstr "このコードを実行したら、:"

msgid ""
"in your code, you will find that message in the file ``general.log`` in the "
"root of the project."
msgstr ""
"プロジェクトルートの ``general.log`` ファイルにそのメッセージが保存されるで"
"しょう。"

msgid "Configure a formatter"
msgstr "フォーマッタを設定する"

msgid ""
"By default, the final log output contains the message part of each :class:"
"`log record <logging.LogRecord>`. Use a formatter if you want to include "
"additional data. First name and define your formatters - this example "
"defines formatters named ``verbose`` and ``simple``:"
msgstr ""
"デフォルトでは、最終的なログ出力には各 :class:`log record <logging."
"LogRecord>` のメッセージ部分が含まれます。追加データを含めたい場合はフォー"
"マッタを使います。まずフォーマッタに名前を付けて定義します。この例では "
"``verbose`` と ``simple`` という名前のフォーマッタを定義しています:"

msgid ""
"The ``style`` keyword allows you to specify ``{`` for :meth:`str.format` or "
"``$`` for :class:`string.Template` formatting; the default is ``$``."
msgstr ""
"``style`` キーワードを使用すると、 :meth:`str.format` 用の ``{`` または :"
"class:`string.Template` フォーマット用の ``$`` を指定できます。デフォルトは "
"``$`` です。"

msgid ""
"See :ref:`logrecord-attributes` for the :class:`~logging.LogRecord` "
"attributes you can include."
msgstr ""
"含めることができる :class:`~logging.LogRecord` 属性については :ref:"
"`logrecord-attributes` を参照してください。"

msgid ""
"To apply a formatter to a handler, add a ``formatter`` entry to the "
"handler's dictionary referring to the formatter by name, for example:"
msgstr ""
"ハンドラにフォーマッタを適用するには、ハンドラの辞書に ``formatter`` エントリ"
"を追加します:"

msgid "Use logger namespacing"
msgstr "ロガーの名前空間を使う"

msgid ""
"The unnamed logging configuration ``''`` captures logs from any Python "
"application. A named logging configuration will capture logs only from "
"loggers with matching names."
msgstr ""
"無名のロギング設定 ``\"\"`` は任意の Python アプリケーションからログを取り込"
"みます。名前付きロギング設定は、一致する名前のロガーからだけログを取得しま"
"す。"

msgid ""
"The namespace of a logger instance is defined using :py:func:`~logging."
"getLogger`. For example in ``views.py`` of ``my_app``::"
msgstr ""
"logger インスタンスの名前空間は :py:func:`~logging.getLogger` を使って定義し"
"ます。例えば、 ``my_app`` の ``views.py`` で次のように定義します:"

msgid ""
"will create a logger in the ``my_app.views`` namespace. ``__name__`` allows "
"you to organize log messages according to their provenance within your "
"project's applications automatically. It also ensures that you will not "
"experience name collisions."
msgstr ""
"これは ``my_app.views`` 名前空間にロガーを作成します。 ``__name__`` を使う"
"と、プロジェクト内のアプリケーションにおけるログメッセージの出所に基づいて、"
"自動的にそれらを整理できます。また、それによって名前の衝突が起こらなくなりま"
"す。"

msgid ""
"A logger mapping named ``my_app.views`` will capture records from this "
"logger:"
msgstr ""
"``my_app.views`` という名前のロガーマッピングは、このロガーからレコードを取得"
"します:"

msgid ""
"A logger mapping named ``my_app`` will be more permissive, capturing records "
"from loggers anywhere within the ``my_app`` namespace (including ``my_app."
"views``, ``my_app.utils``, and so on):"
msgstr ""
"``my_app`` という名前のロガーマッピングはより広く、 ``my_app`` 名前空間内のロ"
"ガー（``my_app.views``、``my_app.utils`` などを含む）からレコードを取得しま"
"す:"

msgid "You can also define logger namespacing explicitly::"
msgstr "ロガーの名前空間を明示的に定義することもできます:"

msgid "and set up logger mappings accordingly."
msgstr "そして、それに応じてロガーマッピングを設定することもできます。"

msgid "Using logger hierarchies and propagation"
msgstr "ロガーの階層と伝搬（propagation）を使う"

msgid ""
"Logger naming is *hierarchical*. ``my_app`` is the parent of ``my_app."
"views``, which is the parent of ``my_app.views.private``. Unless specified "
"otherwise, logger mappings will propagate the records they process to their "
"parents - a record from a logger in the ``my_app.views.private`` namespace "
"will be handled by a mapping for both ``my_app`` and ``my_app.views``."
msgstr ""
"ロガーの命名は *階層的* です。 ``my_app`` は ``my_app.views`` の親であり、 "
"``my_app.views`` は ``my_app.views.private`` の親です。特に指定がない限り、ロ"
"ガーのマッピングは処理したレコードを親に伝播（propagate）します―― ``my_app."
"views.private`` 名前空間のロガーからのレコードは、 ``my_app`` と ``my_app."
"views`` の両方のマッピングで処理されます。"

msgid ""
"To manage this behavior, set the propagation key on the mappings you define::"
msgstr ""
"この動作を管理するには、定義したマッピングに ``\"propagate\"`` キーを設定しま"
"す:"

msgid ""
"``propagate`` defaults to ``True``. In this example, the logs from ``my_app."
"views.private`` will not be handled by the parent, but logs from ``my_app."
"views`` will."
msgstr ""
"``propagate`` のデフォルトは ``True`` です。この例では、``my_app.views."
"private`` のログは親プロセスでは処理されませんが、 ``my_app.views`` のログは"
"親プロセスで処理されます。"

msgid "Configure responsive logging"
msgstr "レスポンシブなロギングを設定する"

msgid ""
"Logging is most useful when it contains as much information as possible, but "
"not information that you don't need - and how much you need depends upon "
"what you're doing. When you're debugging, you need a level of information "
"that would be excessive and unhelpful if you had to deal with it in "
"production."
msgstr ""
"ロギングは、必要な情報ができるだけ多く含まれているときに最も有用であり、目的"
"のために必要な情報だけが含まれているとなお嬉しいです。そして、必要な情報量"
"は、あなたが何をしているかによって異なります。デバッグ中には、本番環境では過"
"剰で役に立たないようなレベルの情報が必要になります。"

msgid ""
"You can configure logging to provide you with the level of detail you need, "
"when you need it. Rather than manually change configuration to achieve this, "
"a better way is to apply configuration automatically according to the "
"environment."
msgstr ""
"必要な時に必要な詳細レベルを提供するように、ロギングを設定できます。これを実"
"現するために手動で設定を変更するよりも良い方法は、環境に応じて自動的に設定を"
"適用することです。"

msgid ""
"For example, you could set an environment variable ``DJANGO_LOG_LEVEL`` "
"appropriately in your development and staging environments, and make use of "
"it in a logger mapping thus::"
msgstr ""
"例えば、開発環境とステージング環境で環境変数 ``DJANGO_LOG_LEVEL`` を適切に設"
"定し、ロガーマッピングで次のように使用できます:"

msgid ""
"\\- so that unless the environment specifies a lower log level, this "
"configuration will only forward records of severity ``WARNING`` and above to "
"its handler."
msgstr ""
"\\- 環境がより低いログレベルを指定しない限り、このコンフィギュレーションは重"
"大度 ``WARNING`` 以上のレコードだけをハンドラに転送します。"

msgid ""
"Other options in the configuration (such as the ``level`` or ``formatter`` "
"option of handlers) can be similarly managed."
msgstr ""
"設定の他のオプション（ハンドラの ``level`` や ``formatter`` オプションなど）"
"も同様に管理できます。"

msgid "How to create CSV output"
msgstr "CSVを出力する"

msgid ""
"This document explains how to output CSV (Comma Separated Values) "
"dynamically using Django views. To do this, you can either use the Python "
"CSV library or the Django template system."
msgstr ""
"このドキュメントでは、Django のビューを使って動的に CSV (Comma Separated "
"Values) を出力する方法を説明しています。そのためには、Python のCSV ライブラリ"
"か Django のテンプレートシステムを使います。"

msgid "Using the Python CSV library"
msgstr "Python の CSV ライブラリを使う"

msgid ""
"Python comes with a CSV library, :mod:`csv`. The key to using it with Django "
"is that the :mod:`csv` module's CSV-creation capability acts on file-like "
"objects, and Django's :class:`~django.http.HttpResponse` objects are file-"
"like objects."
msgstr ""
"Python の標準ライブラリには CSV のライブラリ :mod:`csv` が含まれています。"
"Django でこのライブラリを使うコツは、:mod:`csv` モジュールの CSV 生成機能が"
"ファイルライクオブジェクトに対して働くことを利用します。Django の :class:"
"`~django.http.HttpResponse` オブジェクトもまた、ファイルライクオブジェクトな"
"のです。"

msgid "Here's an example::"
msgstr "以下に例を示します:"

msgid ""
"The code and comments should be self-explanatory, but a few things deserve a "
"mention:"
msgstr ""
"コードとコメントが自分自身の意味を説明しているはずですが、いくつかの点には言"
"及しておくべきでしょう。"

msgid ""
"The response gets a special MIME type, :mimetype:`text/csv`. This tells "
"browsers that the document is a CSV file, rather than an HTML file. If you "
"leave this off, browsers will probably interpret the output as HTML, which "
"will result in ugly, scary gobbledygook in the browser window."
msgstr ""
"レスポンスは特別な MIME タイプ (:mimetype:`text/csv`) を受け取ります。これに"
"より、ブラウザは、ドキュメントが HTML ではなく CSV ファイルであることを判断し"
"ます。もしこの MIME タイプの設定を忘れると、ブラウザは出力を HTML と解釈し、"
"ブラウザウィンドウに醜くて恐ろしいぐちゃぐちゃの文字列が現れてしまう恐れがあ"
"ります。"

msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the CSV file. This filename is arbitrary; call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialog, "
"etc."
msgstr ""
"レスポンスには、追加の ``Content-Disposition`` ヘッダに CSV のファイル名を設"
"定することができます。ファイル名はどんなものでも構いません。ここで指定した名"
"前は、ブラウザが「別名で保存」ダイアログなどで使用します。"

msgid ""
"You can hook into the CSV-generation API by passing ``response`` as the "
"first argument to ``csv.writer``. The ``csv.writer`` function expects a file-"
"like object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""
"CSV 生成 API にフックするには、``csv.writer`` の最初の引数として "
"``response`` を渡すだけです。``csv.writer`` 関数はファイルライクなオブジェク"
"トを要求しますが、:class:`~django.http.HttpResponse` オブジェクトはこの要求に"
"適合しています。"

msgid ""
"For each row in your CSV file, call ``writer.writerow``, passing it an :term:"
"`iterable`."
msgstr ""
"CSV ファイルの行ごとに ``writer.writerow`` を呼び、:term:`iterable` を渡しま"
"す。"

msgid ""
"The CSV module takes care of quoting for you, so you don't have to worry "
"about escaping strings with quotes or commas in them. Pass ``writerow()`` "
"your raw strings, and it'll do the right thing."
msgstr ""
"CSV モジュールは引用を適切に処理するので、引用符やカンマでの文字列のエスケー"
"プについて心配する必要はありません。生の文字列を ``writerow()`` に渡すことで"
"適切に処理されます。"

msgid "Streaming large CSV files"
msgstr "サイズの大きな CSV ファイルをストリーミングする"

msgid ""
"When dealing with views that generate very large responses, you might want "
"to consider using Django's :class:`~django.http.StreamingHttpResponse` "
"instead. For example, by streaming a file that takes a long time to generate "
"you can avoid a load balancer dropping a connection that might have "
"otherwise timed out while the server was generating the response."
msgstr ""
"大きなサイズのレスポンスを生成するビューを取り扱うときには、代わりに Django "
"の :class:`~django.http.StreamingHttpResponse` の使用を考えてみてください。例"
"えば、生成に長時間を要するファイルをストリーミングことで、サーバーがレスポン"
"スを生成している間にタイムアウトしてしまうような接続でも、ロードバランサが接"
"続をドロップすることを防げます。"

msgid ""
"In this example, we make full use of Python generators to efficiently handle "
"the assembly and transmission of a large CSV file::"
msgstr ""
"この例では、Python のジェネレータを最大限使用して、サイズの大きな CSV ファイ"
"ルの組み立てと伝達を効率的に扱います。"

msgid "Using the template system"
msgstr "テンプレートシステムを使う"

msgid ""
"Alternatively, you can use the :doc:`Django template system </topics/"
"templates>` to generate CSV. This is lower-level than using the convenient "
"Python :mod:`csv` module, but the solution is presented here for "
"completeness."
msgstr ""
"もしくは、:doc:`Django のテンプレートシステム </topics/templates>` を使って "
"CSV を生成することもできます。Python の :mod:`csv` モジュールの利便性には劣り"
"ますが、完全性のために提供されています。"

msgid ""
"The idea here is to pass a list of items to your template, and have the "
"template output the commas in a :ttag:`for` loop."
msgstr ""
"考え方としては、テンプレートに項目のリストを渡すというものです。そして、テン"
"プレートの :ttag:`for` ループの中でカンマを出力させます。"

msgid "Here's an example, which generates the same CSV file as above::"
msgstr "以下の例は、上述の例と同じ CSV ファイルを生成します。"

msgid ""
"The only difference between this example and the previous example is that "
"this one uses template loading instead of the CSV module. The rest of the "
"code -- such as the ``content_type='text/csv'`` -- is the same."
msgstr ""
"この例と上述の例の唯一の違いは、この例では CSV モジュールの代わりにテンプレー"
"トを呼び出していることです。残りのコード部分 (例えば ``content_type='text/"
"csv'``) は同じです。"

msgid ""
"Then, create the template ``my_template_name.txt``, with this template code:"
msgstr ""
"そして、以下のテンプレートのコードを用いて、テンプレート ``my_template_name."
"txt`` を作成しましょう。"

msgid ""
"This short template iterates over the given data and displays a line of CSV "
"for each row. It uses the :tfilter:`addslashes` template filter to ensure "
"there aren't any problems with quotes."
msgstr ""
"この短いテンプレートは与えられたデータを繰り返し処理し、各行の CSV 行を表示し"
"ます。引用符の問題がないように :tfilter:`addslashes` テンプレートフィルタを使"
"用します。"

msgid "Other text-based formats"
msgstr "他のテキストベースのフォーマット"

msgid ""
"Notice that there isn't very much specific to CSV here -- just the specific "
"output format. You can use either of these techniques to output any text-"
"based format you can dream of. You can also use a similar technique to "
"generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an "
"example."
msgstr ""
"ここで説明した CSV (特定の出力フォーマットの 1 つ)のような、フォーマット特有"
"の説明は特にありません。あなたの望むテキストベースのフォーマットを出力すると"
"きには、ここで説明したテクニックを活用してみてください。また、任意のバイナリ"
"データを生成するときにも、ここでのテクニックが参考になります; :doc:`/howto/"
"outputting-pdf` で例を参照してください。"

msgid "How to create PDF files"
msgstr "PDFファイルを作成する"

msgid ""
"This document explains how to output PDF files dynamically using Django "
"views. This is made possible by the excellent, open-source ReportLab_ Python "
"PDF library."
msgstr ""
"このドキュメントでは、Django のビューを使用して PDF ファイルを動的に出力する"
"方法を説明します。これは、優れたオープンソースの Python PDF ライブラリ "
"ReportLab_ により可能になっています。"

msgid ""
"The advantage of generating PDF files dynamically is that you can create "
"customized PDFs for different purposes -- say, for different users or "
"different pieces of content."
msgstr ""
"PDF ファイルを動的に生成する利点は、異なる目的のためにカスタマイズされた PDF "
"を作成できることです。たとえば、異なるユーザーや異なるコンテンツを使用して生"
"成できます。"

msgid ""
"For example, Django was used at kusports.com_ to generate customized, "
"printer-friendly NCAA tournament brackets, as PDF files, for people "
"participating in a March Madness contest."
msgstr ""
"たとえば、kusports.com_ では、March Madness コンテストに参加する人たちのため"
"に、カスタマイズされたプリンター向けの NCAA トーナメントブラケットを PDF ファ"
"イルとして生成するのに Django が使われていました。"

msgid "Install ReportLab"
msgstr "ReportLab をインストールする"

msgid ""
"The ReportLab library is :pypi:`available on PyPI <reportlab>`. A `user "
"guide`_ (not coincidentally, a PDF file) is also available for download. You "
"can install ReportLab with ``pip``:"
msgstr ""
"ReportLab ライブラリは、:pypi:`PyPI で利用できます <reportlab>`。`ユーザーガ"
"イド`_ (偶然ではなく PDF で提供されています) もダウンロードして利用できます。"
"ReportLab は ``pip`` により次のコマンドでインストールできます。"

msgid ""
"Test your installation by importing it in the Python interactive interpreter:"
msgstr ""
"Python の対話的インタープリタ内でインポートすることでインストールをテストしま"
"す。"

msgid "If that command doesn't raise any errors, the installation worked."
msgstr ""
"このコマンドが何もエラーを起こさなければ、インストールは機能しています。"

msgid "Write your view"
msgstr "ビューを書く"

msgid ""
"The key to generating PDFs dynamically with Django is that the ReportLab API "
"acts on file-like objects, and Django's :class:`~django.http.FileResponse` "
"objects accept file-like objects."
msgstr ""
"Django で PDF を動的に生成するときに重要な点は、ReportLab API がファイルライ"
"クなオブジェクトとして振る舞い、Django の :class:`~django.http.FileResponse` "
"オブジェクトがファイルライクなオブジェクトを受け取るということです。"

msgid "Here's a \"Hello World\" example::"
msgstr "ここに、\"Hello World\"の例を示します:"

msgid ""
"The response will automatically set the MIME type :mimetype:`application/"
"pdf` based on the filename extension. This tells browsers that the document "
"is a PDF file, rather than an HTML file or a generic :mimetype:`application/"
"octet-stream` binary content."
msgstr ""
"レスポンスはファイル名の拡張子に基づいて自動的にMIMEタイプ :mimetype:"
"`application/pdf` を設定します。これはブラウザに、ドキュメントがHTMLファイル"
"や一般的な :mimetype:`application/octet-stream` バイナリコンテンツではなく、"
"PDFファイルであることを伝えます。"

msgid ""
"When ``as_attachment=True`` is passed to ``FileResponse``, it sets the "
"appropriate ``Content-Disposition`` header and that tells web browsers to "
"pop-up a dialog box prompting/confirming how to handle the document even if "
"a default is set on the machine. If the ``as_attachment`` parameter is "
"omitted, browsers will handle the PDF using whatever program/plugin they've "
"been configured to use for PDFs."
msgstr ""
"``as_attachment=True`` が ``FileResponse`` に渡されると、適切な ``Content-"
"Disposition`` ヘッダが設定され、ウェブブラウザはそのマシンでデフォルトが設定"
"されていたとしても、そのドキュメントをどのように扱うかを確認するダイアログ"
"ボックスをポップアップするようになります。もし ``as_attachment`` パラメータが"
"省略された場合、ブラウザはPDFを扱うために設定されたプログラムやプラグインを"
"使ってPDFを扱います。"

msgid ""
"You can provide an arbitrary ``filename`` parameter. It'll be used by "
"browsers in the \"Save as...\" dialog."
msgstr ""
"任意の ``filename`` パラメータを指定できます。これはブラウザの \"名前を付けて"
"保存\" ダイアログで使用されます。"

msgid ""
"You can hook into the ReportLab API: The same buffer passed as the first "
"argument to ``canvas.Canvas`` can be fed to the :class:`~django.http."
"FileResponse` class."
msgstr ""
"ReportLab API にフックできます: ``canvas.Canvas`` の第一引数に渡されたバッ"
"ファと同じバッファを :class:`~django.http.FileResponse` クラスに渡すことがで"
"きます。"

msgid ""
"Note that all subsequent PDF-generation methods are called on the PDF object "
"(in this case, ``p``) -- not on ``buffer``."
msgstr ""
"後続のPDF生成メソッドはすべて、PDFオブジェクト（この場合は ``p`` ）に対して呼"
"び出され、 ``buffer`` に対して呼び出されるのではないことに注意してください。"

msgid ""
"Finally, it's important to call ``showPage()`` and ``save()`` on the PDF "
"file."
msgstr ""
"最後に、PDFファイル上で ``showPage()`` と ``save()`` を呼び出すことが重要で"
"す。"

msgid ""
"ReportLab is not thread-safe. Some of our users have reported odd issues "
"with building PDF-generating Django views that are accessed by many people "
"at the same time."
msgstr ""
"ReportLabはスレッドセーフではありません。一部のユーザーからは、多くの人が同時"
"にアクセスするPDF生成Djangoビューを構築する際に奇妙な問題が発生するとの報告が"
"あります。"

msgid "Other formats"
msgstr "ほかのフォーマット"

msgid ""
"Notice that there isn't a lot in these examples that's PDF-specific -- just "
"the bits using ``reportlab``. You can use a similar technique to generate "
"any arbitrary format that you can find a Python library for. Also see :doc:`/"
"howto/outputting-csv` for another example and some techniques you can use "
"when generated text-based formats."
msgstr ""
"これらの例には PDF 固有のものはあまりないことに注意してください -- "
"``reportlab`` を使った部分だけです。同じようなテクニックを使って、Pythonのラ"
"イブラリがあれば任意のフォーマットを生成できます。また、 :doc:`/howto/"
"outputting-csv` にも別の例とテキストベースのフォーマットを生成するときに使え"
"るテクニックがあります。"

msgid ""
"Django Packages provides a `comparison of packages <https://djangopackages."
"org/grids/g/pdf/>`_ that help generate PDF files from Django."
msgstr ""
"Django Packagesは、DjangoからPDFファイルを生成するのに役立つ `パッケージの比"
"較一覧 <https://djangopackages.org/grids/g/pdf/>`_ を提供しています。"

msgid "How to override templates"
msgstr "テンプレートをオーバーライドする"

msgid ""
"In your project, you might want to override a template in another Django "
"application, whether it be a third-party application or a contrib "
"application such as ``django.contrib.admin``. You can either put template "
"overrides in your project's templates directory or in an application's "
"templates directory."
msgstr ""
"プロジェクトでは、``django.contrib.admin`` のような contrib アプリケーション"
"やサードパーティアプリケーションで Djangoアプリケーションのテンプレートを上書"
"きすることができます。 テンプレートの上書きは、プロジェクトのテンプレートディ"
"レクトリまたはアプリケーションのテンプレートディレクトリに置くことができま"
"す。"

msgid ""
"If you have app and project templates directories that both contain "
"overrides, the default Django template loader will try to load the template "
"from the project-level directory first. In other words, :setting:`DIRS "
"<TEMPLATES-DIRS>` is searched before :setting:`APP_DIRS <TEMPLATES-"
"APP_DIRS>`."
msgstr ""
"オーバーライドが含まれている app と project の両方のテンプレートディレクトリ"
"がある場合、デフォルトの Django テンプレートローダは、まずプロジェクトレベル"
"のディレクトリからテンプレートをロードしようとします。つまり、 :setting:"
"`DIRS <TEMPLATES-DIRS>` は :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` より前に"
"検索されます。"

msgid ""
"Read :ref:`overriding-built-in-widget-templates` if you're looking to do "
"that."
msgstr ""
"そのようなことをしたい場合は、:ref:`overriding-built-in-widget-templates` を"
"読んでください。"

msgid "Overriding from the project's templates directory"
msgstr "プロジェクトのtemplatesディレクトリからオーバーライドする"

msgid ""
"First, we'll explore overriding templates by creating replacement templates "
"in your project's templates directory."
msgstr ""
"最初に、プロジェクトのテンプレートディレクトリに置き換え用テンプレートを作成"
"して、テンプレートのオーバーライドを検討します。"

msgid ""
"Let's say you're trying to override the templates for a third-party "
"application called ``blog``, which provides the templates ``blog/post.html`` "
"and ``blog/list.html``. The relevant settings for your project would look "
"like::"
msgstr ""
"``blog/post.html`` と ``blog/list.html`` というテンプレートを提供している "
"``blog`` というサードパーティアプリケーションのテンプレートをオーバーライドし"
"ようとしているとしましょう。プロジェクトに関連する設定は次のようになります:"

msgid ""
"The :setting:`TEMPLATES` setting and ``BASE_DIR`` will already exist if you "
"created your project using the default project template. The setting that "
"needs to be modified is :setting:`DIRS<TEMPLATES-DIRS>`."
msgstr ""
"デフォルトのプロジェクトテンプレートを使ってプロジェクトを作成した場合、 :"
"setting:`TEMPLATES` 設定と ``BASE_DIR`` はすでに存在しています。変更が必要な"
"設定は :setting:`DIRS<TEMPLATES-DIRS>` です。"

msgid ""
"These settings assume you have a ``templates`` directory in the root of your "
"project. To override the templates for the ``blog`` app, create a folder in "
"the ``templates`` directory, and add the template files to that folder:"
msgstr ""
"これらの設定はプロジェクトのルートに ``templates`` ディレクトリがあることを前"
"提としています。 ``blog`` アプリのテンプレートを上書きするには、 "
"``templates`` ディレクトリにフォルダを作成し、テンプレートファイルをそのフォ"
"ルダに追加します:"

msgid ""
"The template loader first looks for templates in the ``DIRS`` directory. "
"When the views in the ``blog`` app ask for the ``blog/post.html`` and ``blog/"
"list.html`` templates, the loader will return the files you just created."
msgstr ""
"テンプレートローダーはまず ``DIRS`` ディレクトリにあるテンプレートを探しま"
"す。 ``blog`` アプリのビューが ``blog/post.html`` と ``blog/list.html`` のテ"
"ンプレートを要求すると、ローダーは先ほど作成したファイルを返します。"

msgid "Overriding from an app's template directory"
msgstr "アプリのテンプレートディレクトリからオーバーライドする"

msgid ""
"Since you're overriding templates located outside of one of your project's "
"apps, it's more common to use the first method and put template overrides in "
"a project's templates folder. If you prefer, however, it's also possible to "
"put the overrides in an app's template directory."
msgstr ""
"プロジェクトのアプリの外部にあるテンプレートをオーバーライドする場合、通常は"
"最初の方法を使用し、テンプレートのオーバーライドをプロジェクトのテンプレート"
"フォルダに配置します。ただし、好みに応じて、オーバーライドをアプリのテンプ"
"レートディレクトリに配置することも可能です。"

msgid ""
"First, make sure your template settings are checking inside app directories::"
msgstr ""
"まず、テンプレート設定がアプリディレクトリ内をチェックしていることを確認して"
"ください:"

msgid ""
"If you want to put the template overrides in an app called ``myapp`` and the "
"templates to override are named ``blog/list.html`` and ``blog/post.html``, "
"then your directory structure will look like:"
msgstr ""
"もし ``myapp`` というアプリにテンプレートのオーバーライドを配置し、オーバーラ"
"イドするテンプレートが ``blog/list.html`` と ``blog/post.html`` である場合、"
"ディレクトリ構造は以下のようになります:"

msgid ""
"With :setting:`APP_DIRS<TEMPLATES-APP_DIRS>` set to ``True``, the template "
"loader will look in the app's templates directory and find the templates."
msgstr ""
":setting:`APP_DIRS<TEMPLATES-APP_DIRS>` を ``True`` に設定すると、テンプレー"
"トローダーはアプリのテンプレートディレクトリを探し、テンプレートを見つけるこ"
"とができます。"

msgid "Extending an overridden template"
msgstr "オーバーライドされたテンプレートを継承（extend）する"

msgid ""
"With your template loaders configured, you can extend a template using the :"
"ttag:`{% extends %}<extends>` template tag whilst at the same time "
"overriding it. This can allow you to make small customizations without "
"needing to reimplement the entire template."
msgstr ""
"テンプレートローダーが設定されていれば、 :ttag:`{% extends %}<extends>` テン"
"プレートタグを使ってテンプレートを継承できます。これにより、テンプレート全体"
"を再実装することなく、少しだけカスタマイズできます。"

msgid ""
"For example, you can use this technique to add a custom logo to the ``admin/"
"base_site.html`` template:"
msgstr ""
"例えば、このテクニックを使って ``admin/base_site.html`` テンプレートにカスタ"
"ムロゴを追加できます:"

msgid "``templates/admin/base_site.html``"
msgstr "``templates/admin/base_site.html``"

msgid "Key points to note:"
msgstr "備考:"

msgid ""
"The example creates a file at ``templates/admin/base_site.html`` that uses "
"the configured project-level ``templates`` directory to override ``admin/"
"base_site.html``."
msgstr ""
"この例では、 ``templates/admin/base_site.html`` にファイルを作成し、 ``admin/"
"base_site.html`` を上書きするために、設定されたプロジェクトレベルの "
"``templates`` ディレクトリを使用します。"

msgid ""
"The new template extends ``admin/base_site.html``, which is the same "
"template as is being overridden."
msgstr ""
"新しいテンプレートは ``admin/base_site.html`` を継承しており、これはオーバー"
"ライドされるテンプレートと同じです。"

msgid ""
"The template replaces just the ``branding`` block, adding a custom logo, and "
"using ``block.super`` to retain the prior content."
msgstr ""
"このテンプレートは ``branding`` ブロックだけを置き換え、カスタムロゴを追加"
"し、 ``block.super`` を使って以前のコンテンツを保持します。"

msgid ""
"The rest of the template is inherited unchanged from ``admin/base_site."
"html``."
msgstr ""
"残りのテンプレートは ``admin/base_site.html`` からそのまま継承されます。"

msgid ""
"This technique works because the template loader does not consider the "
"already loaded override template (at ``templates/admin/base_site.html``) "
"when resolving the ``extends`` tag. Combined with ``block.super`` it is a "
"powerful technique to make small customizations."
msgstr ""
"このテクニックは、テンプレートローダーが ``extends`` タグを解決するときに、す"
"でにロードされているオーバーライドテンプレート (``templates/admin/base_site."
"html``) を考慮しないので動作します。 ``block.super`` と組み合わせることで、小"
"さなカスタマイズを行うための強力なテクニックとなります。"

msgid "How to deploy static files"
msgstr "静的ファイルをデプロイする"

msgid ""
"For an introduction to the use of :mod:`django.contrib.staticfiles`, see :"
"doc:`/howto/static-files/index`."
msgstr ""
":mod:`django.contrib.staticfiles` の使い方の基本に関しては、:doc:`/howto/"
"static-files/index` を読んでください。"

msgid "Serving static files in production"
msgstr "本番環境における静的ファイルの配信"

msgid ""
"The basic outline of putting static files into production consists of two "
"steps: run the :djadmin:`collectstatic` command when static files change, "
"then arrange for the collected static files directory (:setting:"
"`STATIC_ROOT`) to be moved to the static file server and served. Depending "
"the ``staticfiles`` :setting:`STORAGES` alias, files may need to be moved to "
"a new location manually or the :func:`post_process <django.contrib."
"staticfiles.storage.StaticFilesStorage.post_process>` method of the "
"``Storage`` class might take care of that."
msgstr ""
"静的ファイルを本番環境に配置する基本的な手順は、2つのステップから成り立ってい"
"ます: 静的ファイルが変更されたときに :djadmin:`collectstatic` コマンドを実行"
"し、次に収集された静的ファイルディレクトリ（:setting:`STATIC_ROOT`）を静的"
"ファイルサーバーに移動させ、配信できるようにします。``staticfiles`` の :"
"setting:`STORAGES` エイリアスによっては、ファイルを手動で新しい場所に移動する"
"必要があるかもしれませんし、 ``Storage`` クラスの :func:`post_process "
"<django.contrib.staticfiles.storage.StaticFilesStorage.post_process>` メソッ"
"ドがその処理を行うこともあります。"

msgid ""
"As with all deployment tasks, the devil's in the details. Every production "
"setup will be a bit different, so you'll need to adapt the basic outline to "
"fit your needs. Below are a few common patterns that might help."
msgstr ""
"すべてのデプロイメントタスクと同様に、悪魔は細部に宿ります。プロダクションの"
"セットアップはそれぞれ少しずつ異なるので、基本的なアウトラインをニーズに合わ"
"せて変更する必要があります。以下に、役立つかもしれないいくつかの一般的なパ"
"ターンを示します。"

msgid "Serving the site and your static files from the same server"
msgstr "サイトと静的ファイルを同じサーバから配信する"

msgid ""
"If you want to serve your static files from the same server that's already "
"serving your site, the process may look something like:"
msgstr ""
"静的ファイルをすでにサイトを配信しているのと同じサーバから配信したい場合、配"
"信の手順は次のようになります。"

msgid "Push your code up to the deployment server."
msgstr "デプロイするサーバにコードを push する。"

msgid ""
"On the server, run :djadmin:`collectstatic` to copy all the static files "
"into :setting:`STATIC_ROOT`."
msgstr ""
"サーバ側で、 :djadmin:`collectstatic` を実行することで、すべての静的ファイル"
"を  :setting:`STATIC_ROOT` で設定したディレクトリに集める。"

msgid ""
"Configure your web server to serve the files in :setting:`STATIC_ROOT` under "
"the URL :setting:`STATIC_URL`. For example, here's :ref:`how to do this with "
"Apache and mod_wsgi <serving-files>`."
msgstr ""
":setting:`STATIC_ROOT` に置かれたファイルを :setting:`STATIC_URL` から配信す"
"るように、Web サーバの設定を行う。たとえば、Apache と mod_wsgi を使用している"
"場合、:ref:`Apache と mod_wsgi を使用したファイルの配信 <serving-files>` が参"
"考になると思います。"

msgid ""
"You'll probably want to automate this process, especially if you've got "
"multiple web servers."
msgstr ""
"複数の Web サーバーがある場合は、おそらくこのプロセスを自動化したいと思うで"
"しょう。"

msgid "Serving static files from a dedicated server"
msgstr "専用のサーバから静的ファイルを配信する"

msgid ""
"Most larger Django sites use a separate web server -- i.e., one that's not "
"also running Django -- for serving static files. This server often runs a "
"different type of web server -- faster but less full-featured. Some common "
"choices are:"
msgstr ""
"ほとんどの大規模な Django サイトでは、静的ファイルの配信に別の Web サーバ（つ"
"まり Django を動かしていないサーバ）を使っています。このサーバは、多くの場"
"合、別のタイプの Web サーバを実行しています。高速で、機能が限定的なものです。"
"よくある選択肢は下記です:"

msgid ""
"Configuring these servers is out of scope of this document; check each "
"server's respective documentation for instructions."
msgstr ""
"これらのサーバの設定方法は、このドキュメントの範囲外です。それぞれのサーバの"
"ドキュメントを参考に設定してください。"

msgid ""
"Since your static file server won't be running Django, you'll need to modify "
"the deployment strategy to look something like:"
msgstr ""
"静的ファイルサーバでは Django が実行されていないので、次のようにデプロイの戦"
"略を変更する必要があります。"

msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr ""
"静的ファイルが変更されたら、ローカル側で :djadmin:`collectstatic` を実行す"
"る。"

msgid ""
"Push your local :setting:`STATIC_ROOT` up to the static file server into the "
"directory that's being served. `rsync <https://rsync.samba.org/>`_ is a "
"common choice for this step since it only needs to transfer the bits of "
"static files that have changed."
msgstr ""
"ローカルの :setting:`STATIC_ROOT` を静的ファイルサーバのファイル配信ディレク"
"トリに push します。これには通常、`rsync <https://rsync.samba.org/>`_ を使い"
"ます。変更された静的ファイルだけを転送できるからです。"

msgid "Serving static files from a cloud service or CDN"
msgstr "クラウドサービスや CDN から静的ファイルを配信する"

msgid ""
"Another common tactic is to serve static files from a cloud storage provider "
"like Amazon's S3 and/or a CDN (content delivery network). This lets you "
"ignore the problems of serving static files and can often make for faster-"
"loading web pages (especially when using a CDN)."
msgstr ""
"もう1つの一般的な方法は、AmazonのS3やCDN（コンテンツ・デリバリー・ネットワー"
"ク）のようなクラウドストレージから静的ファイルを配信することです。これによ"
"り、静的ファイルを配信する際の問題を無視することができ、多くの場合、Webページ"
"の読み込みが速くなります（特にCDNを使用する場合）。"

msgid ""
"When using these services, the basic workflow would look a bit like the "
"above, except that instead of using ``rsync`` to transfer your static files "
"to the server you'd need to transfer the static files to the storage "
"provider or CDN."
msgstr ""
"これらのサービスを使う場合でも、基本的なワークフローは上で説明した通りです。"
"ただし、``rsync`` を使って静的ファイルをサーバに転送する代わりに、ストレージ"
"プロバイダや CDN に転送する必要があります。"

msgid ""
"There's any number of ways you might do this, but if the provider has an "
"API, you can use a :doc:`custom file storage backend </howto/custom-file-"
"storage>` to integrate the CDN with your Django project. If you've written "
"or are using a 3rd party custom storage backend, you can tell :djadmin:"
"`collectstatic` to use it by setting ``staticfiles`` in :setting:`STORAGES`."
msgstr ""
"そのための方法はいろいろありますが、プロバイダが API を提供している場合、:"
"doc:`カスタムのファイルストレージバックエンド</howto/custom-file-storage>` を"
"使って Django プロジェクトと CDN を統合できます。独自に作成したカスタムスト"
"レージバックエンドを使用している場合や、サードパーティのカスタムストレージ"
"バックエンドを使用している場合は、:setting:`STORAGES` に ``staticfiles`` を設"
"定することで :djadmin:`collectstatic` にそれを使うよう指示できます。"

msgid ""
"For example, if you've written an S3 storage backend in ``myproject.storage."
"S3Storage`` you could use it with::"
msgstr ""
"たとえば、S3 storage backend を ``myproject.storage.S3Storage`` としてすでに"
"書いていれば、次のように書くだけでこのストレージを利用できます。"

msgid ""
"Once that's done, all you have to do is run :djadmin:`collectstatic` and "
"your static files would be pushed through your storage package up to S3. If "
"you later needed to switch to a different storage provider, you may only "
"have to change ``staticfiles`` in the :setting:`STORAGES` setting."
msgstr ""
"これが完了したら、 :djadmin:`collectstatic` を実行するだけで、静的ファイルが"
"ストレージパッケージを通して S3 にプッシュされます。後で別のストレージプロバ"
"イダに切り替える必要がある場合は、 :setting:`STORAGES` 設定の "
"``staticfiles`` を変更するだけです。"

msgid ""
"For details on how you'd write one of these backends, see :doc:`/howto/"
"custom-file-storage`. There are 3rd party apps available that provide "
"storage backends for many common file storage APIs. A good starting point is "
"the `overview at djangopackages.org <https://djangopackages.org/grids/g/"
"storage-backends/>`_."
msgstr ""
"これらのバックエンドの書き方の詳細については :doc:`/howto/custom-file-"
"storage` を参照してください。多くの一般的なファイルストレージ API 用のスト"
"レージバックエンドを提供するサードパーティアプリがあります。良い出発点は "
"`djangopackages.org の overview <https://djangopackages.org/grids/g/storage-"
"backends/>`_ です。"

msgid "The :setting:`STORAGES` setting was added."
msgstr ":setting:`STORAGES` 設定が追加されました。"

msgid "Learn more"
msgstr "さらに学ぶ"

msgid ""
"For complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""
"すべての設定、コマンド、テンプレートタグなどの詳細と、:mod:`django.contrib."
"staticfiles` に含まれているその他の機能については、:doc:`staticfiles リファレ"
"ンス </ref/contrib/staticfiles>` を読んでください。"

msgid "How to manage static files (e.g. images, JavaScript, CSS)"
msgstr "静的ファイル (画像、JavaScript、CSS など) を管理する"

msgid ""
"Websites generally need to serve additional files such as images, "
"JavaScript, or CSS. In Django, we refer to these files as \"static files\".  "
"Django provides :mod:`django.contrib.staticfiles` to help you manage them."
msgstr ""
"ウェブサイトではふつう、画像や JavaScript、CSS などの追加のファイルを配信する"
"必要があります。Django では、こうしたファイルのことを「静的ファイル (static "
"files)」と呼んでいます。静的ファイルの管理を簡単にするために、Django は :mod:"
"`django.contrib.staticfiles` を提供しています。"

msgid "This page describes how you can serve these static files."
msgstr "このページでは、こうした静的ファイルの配信の仕方について説明します。"

msgid "Configuring static files"
msgstr "静的ファイルの設定"

msgid ""
"Make sure that ``django.contrib.staticfiles`` is included in your :setting:"
"`INSTALLED_APPS`."
msgstr ""
"``django.contrib.staticfiles`` が設定ファイルの :setting:`INSTALLED_APPS` に"
"含まれていることを確認してください。"

msgid "In your settings file, define :setting:`STATIC_URL`, for example::"
msgstr ""
"設定ファイルの中で、:setting:`STATIC_URL` を設定します。たとえば、次のように"
"します:"

msgid ""
"In your templates, use the :ttag:`static` template tag to build the URL for "
"the given relative path using the configured ``staticfiles`` :setting:"
"`STORAGES` alias."
msgstr ""
"テンプレート内では、 :ttag:`static` テンプレートタグを使用して、"
"``staticfiles`` :setting:`STORAGES` で設定したエイリアスで相対パスの URL を生"
"成できます。"

msgid ""
"Store your static files in a folder called ``static`` in your app. For "
"example ``my_app/static/my_app/example.jpg``."
msgstr ""
"アプリ内に ``static`` というフォルダを作成って静的ファイルを保存してくださ"
"い。例: ``my_app/static/my_app/example.jpg``。"

msgid "Serving the files"
msgstr "ファイルを配信する"

msgid ""
"In addition to these configuration steps, you'll also need to actually serve "
"the static files."
msgstr ""
"これらの設定の手順に加えて、実際に静的ファイルを配信する必要があります。"

msgid ""
"During development, if you use :mod:`django.contrib.staticfiles`, this will "
"be done automatically by :djadmin:`runserver` when :setting:`DEBUG` is set "
"to ``True`` (see :func:`django.contrib.staticfiles.views.serve`)."
msgstr ""
"開発中に :mod:`django.contrib.staticfiles` を使用する場合には、:setting:"
"`DEBUG` を ``True`` に設定して :djadmin:`runserver` を実行すれば、自動的に設"
"定が行われます。(詳しくは、:func:`django.contrib.staticfiles.views.serve` を"
"参照)"

msgid ""
"This method is **grossly inefficient** and probably **insecure**, so it is "
"**unsuitable for production**."
msgstr ""
"ただし、この方法は **極めて非効率** であり、**セキュリティ上の問題がある** 可"
"能性が高いため、**本番環境で使うべきではありません**。"

msgid ""
"See :doc:`/howto/static-files/deployment` for proper strategies to serve "
"static files in production environments."
msgstr ""
"本番環境で静的ファイルを配信するための適切な戦略については、:doc:`/howto/"
"static-files/deployment` を読んでください。"

msgid ""
"Your project will probably also have static assets that aren't tied to a "
"particular app. In addition to using a ``static/`` directory inside your "
"apps, you can define a list of directories (:setting:`STATICFILES_DIRS`) in "
"your settings file where Django will also look for static files. For "
"example::"
msgstr ""
"プロジェクトには、特定のアプリケーションに紐付けられていない 静的な assets が"
"あることがあります。その場合には、アプリケーション内の ``static/`` ディレクト"
"リの他に、設定ファイルでディレクトリのリスト (:setting:`STATICFILES_DIRS`) を"
"定義して、Django が静的ファイルを検索できるようにすることができます。たとえ"
"ば、次のように設定します。"

msgid ""
"See the documentation for the :setting:`STATICFILES_FINDERS` setting for "
"details on how ``staticfiles`` finds your files."
msgstr ""
"``staticfiles`` がファイルを探索する方法について詳しくは、 :setting:"
"`STATICFILES_FINDERS` のドキュメントを参照してください。"

msgid "Static file namespacing"
msgstr "静的ファイルの名前空間"

msgid ""
"Now we *might* be able to get away with putting our static files directly in "
"``my_app/static/`` (rather than creating another ``my_app`` subdirectory), "
"but it would actually be a bad idea. Django will use the first static file "
"it finds whose name matches, and if you had a static file with the same name "
"in a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the best way "
"to ensure this is by *namespacing* them. That is, by putting those static "
"files inside *another* directory named for the application itself."
msgstr ""
"静的ファイルを（別の ``my_app`` サブディレクトリを作成するのではなく）直接 "
"``my_app/static/`` に配置することも *可能* ですが、実際にはそれは良くない考え"
"です。Djangoは、名前が一致する最初の静的ファイルを使用します。もし *異なる* "
"アプリケーションに同じ名前の静的ファイルがあった場合、Djangoはそれらを区別で"
"きません。正しいファイルをDjangoに指定する必要があります。これを保証する最善"
"の方法は、それらを *名前空間化* することです。つまり、アプリケーション自体の"
"名前で命名された *別の* ディレクトリ内に静的ファイルを配置することです。"

msgid ""
"You can namespace static assets in :setting:`STATICFILES_DIRS` by "
"specifying :ref:`prefixes <staticfiles-dirs-prefixes>`."
msgstr ""
":setting:`STATICFILES_DIRS` で :ref:`プレフィックス <staticfiles-dirs-"
"prefixes>` を指定することで、静的アセットの名前空間を指定できます。"

msgid "Serving static files during development"
msgstr "開発時の静的ファイルの取扱い"

msgid ""
"If you use :mod:`django.contrib.staticfiles` as explained above, :djadmin:"
"`runserver` will do this automatically when :setting:`DEBUG` is set to "
"``True``. If you don't have ``django.contrib.staticfiles`` in :setting:"
"`INSTALLED_APPS`, you can still manually serve static files using the :func:"
"`django.views.static.serve` view."
msgstr ""
"上で述べたたように :mod:`django.contrib.staticfiles` を利用する場合、 :"
"setting:`DEBUG` が ``True`` であれば :djadmin:`runserver` は自動的にこの処理"
"を行います。もし :setting:`INSTALLED_APPS` 内に ``django.contrib."
"staticfiles`` が存在しない場合は、手動で :func:`django.views.static.serve` "
"ビューを用いて静的ファイルを取り扱わなければなりません。"

msgid ""
"This is not suitable for production use! For some common deployment "
"strategies, see :doc:`/howto/static-files/deployment`."
msgstr ""
"この機能は本番環境で利用するのに適していません！ 一般的なデプロイ方法に関して"
"は :doc:`/howto/static-files/deployment` を参照ください。"

msgid ""
"For example, if your :setting:`STATIC_URL` is defined as ``static/``, you "
"can do this by adding the following snippet to your ``urls.py``::"
msgstr ""
"例えば、 :setting:`STATIC_URL` が ``static/`` として定義されている場合、これ"
"を行うには ``urls.py`` に以下のコードを追加します:"

msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``static/``) and not a URL (e.g. ``http://static.example.com/"
"``)."
msgstr ""
"このヘルパー関数はデバッグモードでのみ動作し、与えられた接頭辞が URL "
"(``http://static.example.com/`` など) ではなくローカル (``static/`` など) の"
"場合にのみ動作します。"

msgid ""
"Also this helper function only serves the actual :setting:`STATIC_ROOT` "
"folder; it doesn't perform static files discovery like :mod:`django.contrib."
"staticfiles`."
msgstr ""
"またこのヘルパー関数は :setting:`STATIC_ROOT` のフォルダのみを利用します; :"
"mod:`django.contrib.staticfiles` のように静的ファイルの探索は行いません。"

msgid ""
"Finally, static files are served via a wrapper at the WSGI application "
"layer. As a consequence, static files requests do not pass through the "
"normal :doc:`middleware chain </topics/http/middleware>`."
msgstr ""
"最後に、静的ファイルはWSGIアプリケーション層のラッパーを介して提供されます。"
"結果として、静的ファイルのリクエストは通常の :doc:`ミドルウェアチェイン</"
"topics/http/middleware>` を通りません。"

msgid "Serving files uploaded by a user during development"
msgstr "開発時における、ユーザーがアップロードするファイルの取扱い"

msgid ""
"During development, you can serve user-uploaded media files from :setting:"
"`MEDIA_ROOT` using the :func:`django.views.static.serve` view."
msgstr ""
"開発中は、ユーザーによってアップロードされたメディアファイルを :func:`django."
"views.static.serve` ビューを利用している :setting:`MEDIA_ROOT` から利用できま"
"す。"

msgid ""
"For example, if your :setting:`MEDIA_URL` is defined as ``media/``, you can "
"do this by adding the following snippet to your :setting:`ROOT_URLCONF`::"
msgstr ""
"例えば、 :setting:`MEDIA_URL` が ``media/`` として定義されている場合、これを"
"行うには :setting:`ROOT_URLCONF` に以下のコードを追加します:"

msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``media/``) and not a URL (e.g. ``http://media.example.com/"
"``)."
msgstr ""
"このヘルパー関数はデバッグモードでのみ動作し、与えられたプレフィックスがURL "
"(``http://media.example.com/`` など) ではなくローカル (``media/`` など) の場"
"合にのみ動作します。"

msgid ""
"When running tests that use actual HTTP requests instead of the built-in "
"testing client (i.e. when using the built-in :class:`LiveServerTestCase "
"<django.test.LiveServerTestCase>`) the static assets need to be served along "
"the rest of the content so the test environment reproduces the real one as "
"faithfully as possible, but ``LiveServerTestCase`` has only very basic "
"static file-serving functionality: It doesn't know about the finders feature "
"of the ``staticfiles`` application and assumes the static content has "
"already been collected under :setting:`STATIC_ROOT`."
msgstr ""
"ビルトインのテストクライアント (たとえば、ビルトインの :class:"
"`LiveServerTestCase <django.test.LiveServerTestCase>`) ではなく実際の HTTP リ"
"クエストを使用してテストを実行している場合、テスト環境が現実の環境をできるだ"
"け忠実に再現できるように、他のコンテンツと同じように静的アセットも配信する必"
"要があります。しかし、``LiveServerTestCase`` はとても基本的な静的ファイル配信"
"機能しかないため、``staticfiles`` アプリケーションの探索機能はなく、すでに静"
"的コンテンツは :setting:`STATIC_ROOT` に集められていることを前提にしていま"
"す。"

msgid ""
"Because of this, ``staticfiles`` ships its own :class:`django.contrib."
"staticfiles.testing.StaticLiveServerTestCase`, a subclass of the built-in "
"one that has the ability to transparently serve all the assets during "
"execution of these tests in a way very similar to what we get at development "
"time with ``DEBUG = True``, i.e. without having to collect them using :"
"djadmin:`collectstatic` first."
msgstr ""
"このため、 ``staticfiles`` は独自の :class:`django.contrib.staticfiles."
"testing.StaticLiveServerTestCase` を同梱しています。これは組み込みのサブクラ"
"スで、開発時に ``DEBUG = True`` を指定した場合と非常によく似た方法で、つま"
"り :djadmin:`collectstatic` を使って最初にアセットを収集することなく、テスト"
"の実行中にすべてのアセットを透過的に提供する機能を持っています。"

msgid "Deployment"
msgstr "デプロイ"

msgid ""
":mod:`django.contrib.staticfiles` provides a convenience management command "
"for gathering static files in a single directory so you can serve them "
"easily."
msgstr ""
":mod:`django.contrib.staticfiles` には、静的ファイルを単一のディレクトリに集"
"約するための便利な管理コマンドがあり、静的ファイルを簡単に配信できます。"

msgid ""
"Set the :setting:`STATIC_ROOT` setting to the directory from which you'd "
"like to serve these files, for example::"
msgstr ""
":setting:`STATIC_ROOT` 設定で、どのディレクトリから静的ファイルを配信するかを"
"指定します。たとえば:"

msgid "Run the :djadmin:`collectstatic` management command:"
msgstr ":djadmin:`collectstatic` 管理コマンドを実行します"

msgid ""
"This will copy all files from your static folders into the :setting:"
"`STATIC_ROOT` directory."
msgstr ""
"これにより、各 static フォルダから :setting:`STATIC_ROOT` のディレクトリに"
"ファイルがコピーされます。"

msgid ""
"Use a web server of your choice to serve the files. :doc:`/howto/static-"
"files/deployment` covers some common deployment strategies for static files."
msgstr ""
"お好みのWebサーバーを使用してファイルを配信してください。:doc:`/howto/static-"
"files/deployment` では、静的ファイルの一般的なデプロイ戦略をいくつか紹介して"
"います。"

msgid ""
"This document has covered the basics and some common usage patterns. For "
"complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""
"このドキュメントでは、基本および一般的な利用パターンを紹介しました。:mod:"
"`django.contrib.staticfiles` に含まれるすべての設定、コマンド、テンプレートタ"
"グ、およびその他の事項に関する網羅的な詳細は、:doc:`staticfiles のリファレン"
"ス </ref/contrib/staticfiles>` を参照してください。"

msgid "How to upgrade Django to a newer version"
msgstr "Django の新しいバージョンへの更新"

msgid ""
"While it can be a complex process at times, upgrading to the latest Django "
"version has several benefits:"
msgstr ""
"時には更新作業は複雑な手順になってしまうことがありますが、Django の最新版に更"
"新すると、以下ような恩恵が受けられます。"

msgid "New features and improvements are added."
msgstr "新しい機能や改善点が追加される。"

msgid "Bugs are fixed."
msgstr "バグが修正される。"

msgid ""
"Older version of Django will eventually no longer receive security updates. "
"(see :ref:`supported-versions-policy`)."
msgstr ""
"古いバージョンの Django はいずれセキュリティアップデートを受けられなくなりま"
"す。(:ref:`supported-versions-policy` を参照してください)"

msgid ""
"Upgrading as each new Django release is available makes future upgrades less "
"painful by keeping your code base up to date."
msgstr ""
"Django が新しくリリースされた時に更新して、コードベースを最新の状態に保ってお"
"けば、将来の更新作業が楽になる。"

msgid ""
"Here are some things to consider to help make your upgrade process as smooth "
"as possible."
msgstr ""
"このセクションでは、更新作業ができるかぎりスムーズに行う助けになるよう、特に"
"注意するべきことをいくつか説明しています。"

msgid "Required Reading"
msgstr "更新時に読むべきドキュメント"

msgid ""
"If it's your first time doing an upgrade, it is useful to read the :doc:"
"`guide on the different release processes </internals/release-process>`."
msgstr ""
"はじめて Django を更新する時には、:doc:`Django のリリースプロセスガイド </"
"internals/release-process>` を読んでおくと役に立つでしょう。"

msgid ""
"Afterward, you should familiarize yourself with the changes that were made "
"in the new Django version(s):"
msgstr ""
"更新を行う前には、新しいバージョンの Django ではどのような点が変更されたのか"
"をよく知っておく必要があります。"

msgid ""
"Read the :doc:`release notes </releases/index>` for each 'final' release "
"from the one after your current Django version, up to and including the "
"version to which you plan to upgrade."
msgstr ""
"まず、:doc:`リリースノート </releases/index>` を読みましょう。読む必要がある"
"のは、現在の Django のバージョンの1つ後から、更新しようと考えているターゲット"
"のバージョンまでの、それぞれの「最後の (final) リリース」のリリースノートで"
"す。"

msgid ""
"Look at the :doc:`deprecation timeline</internals/deprecation>` for the "
"relevant versions."
msgstr ""
"そして、対応するバージョンの  :doc:`非推奨機能のタイムライン </internals/"
"deprecation>` にも目を通します。"

msgid ""
"Pay particular attention to backwards incompatible changes to get a clear "
"idea of what will be needed for a successful upgrade."
msgstr ""
"中でも特に、後方互換性のない変更点に注意してください。この点に注目すると、正"
"しく更新するために必要なことがはっきりとわかるようになります。"

msgid ""
"If you're upgrading through more than one feature version (e.g. 2.0 to 2.2), "
"it's usually easier to upgrade through each feature release incrementally "
"(2.0 to 2.1 to 2.2) rather than to make all the changes for each feature "
"release at once. For each feature release, use the latest patch release (e."
"g. for 2.1, use 2.1.15)."
msgstr ""
"複数の機能バージョン（例えば2.0から2.2）をアップグレードする場合、各機能リ"
"リースのすべての変更を一度に行うよりも、各機能リリースを段階的に"
"（2.0→2.1→2.2）アップグレードする方が通常は簡単です。各機能リリースでは、最新"
"のパッチリリースを使ってください (例えば、2.1 では 2.1.15 を使ってください)。"

msgid ""
"The same incremental upgrade approach is recommended when upgrading from one "
"LTS to the next."
msgstr ""
"あるLTSから次のLTSにアップグレードする場合は、段階的にアップグレードする方法"
"を推奨します。"

msgid "Dependencies"
msgstr "依存関係"

msgid ""
"In most cases it will be necessary to upgrade to the latest version of your "
"Django-related dependencies as well. If the Django version was recently "
"released or if some of your dependencies are not well-maintained, some of "
"your dependencies may not yet support the new Django version. In these cases "
"you may have to wait until new versions of your dependencies are released."
msgstr ""
"ほとんどの場合、Django が依存しているパッケージも最新版に更新する必要があるで"
"しょう。その Django のバージョンがリリースされたばかりで、依存関係にあるパッ"
"ケージがきちんとメンテナンスされていなかった場合、新バージョンの Django に必"
"要なパッケージがまだインストールできないかもしれません。そのような場合には、"
"そうした Django の依存パッケージの新バージョンが使えるようになるまで、少し待"
"たなければならない場合があります。"

msgid "Resolving deprecation warnings"
msgstr "廃止予定警告を解決する"

msgid ""
"Before upgrading, it's a good idea to resolve any deprecation warnings "
"raised by your project while using your current version of Django. Fixing "
"these warnings before upgrading ensures that you're informed about areas of "
"the code that need altering."
msgstr ""
"アップグレードの前、Django の現在のバージョンを使っている間に、プロジェクトが"
"挙げてくる廃止予定警告を解決しておくのがよいでしょう。アップグレードの前にこ"
"れらの警告を解決することで、コードが警告を必要とする領域について通知されるよ"
"うにできます。"

msgid ""
"In Python, deprecation warnings are silenced by default. You must turn them "
"on using the ``-Wa`` Python command line option or the :envvar:"
"`PYTHONWARNINGS` environment variable. For example, to show warnings while "
"running tests:"
msgstr ""
"Python では、デフォルトでは廃止予定警告は無効化されています。``-Wa`` Python "
"コマンドラインオプションか :envvar:`PYTHONWARNINGS` 環境変数を使って有効化す"
"る必要があります。例えば、テスト実行中に警告を表示するには:"

msgid ""
"If you're not using the Django test runner, you may need to also ensure that "
"any console output is not captured which would hide deprecation warnings. "
"For example, if you use `pytest <https://docs.pytest.org/>`__:"
msgstr ""
"Djangoのテストランナーを使っていない場合、廃止予定警告が隠されることのないよ"
"うに、コンソール出力がキャプチャされないようにする必要があるかもしれません。"
"たとえば、 `pytest <https://docs.pytest.org/>`__ を使う場合:"

msgid ""
"Resolve any deprecation warnings with your current version of Django before "
"continuing the upgrade process."
msgstr ""
"アップグレードプロセスを続ける前に、Django の現在のバージョンで廃止予定警告を"
"解決してください。"

msgid ""
"Third party applications might use deprecated APIs in order to support "
"multiple versions of Django, so deprecation warnings in packages you've "
"installed don't necessarily indicate a problem. If a package doesn't support "
"the latest version of Django, consider raising an issue or sending a pull "
"request for it."
msgstr ""
"Django の複数バージョンをサポートするために、サードパーティアプリケーションは"
"廃止される API を使用しているかもしれません。そのため、インストールしたパッ"
"ケージの廃止予定警告は必ずしも問題を示しません。パッケージが Django の最新の"
"バージョンをサポートしていない場合、問題を提起するかプルリクエストを送ること"
"を考えてみてください。"

msgid "Installation"
msgstr "インストール"

msgid ""
"Once you're ready, it is time to :doc:`install the new Django version </"
"topics/install>`. If you are using a :mod:`virtual environment <venv>` and "
"it is a major upgrade, you might want to set up a new environment with all "
"the dependencies first."
msgstr ""
"さあ、準備ができたら、 :doc:`新しいバージョンの Django をインストールする </"
"topics/install>` 時です。もし :mod:`virtual environment <venv>` を使ってい"
"て、今回のアップグレードがメジャーアップグレードなら、まずすべての依存関係を"
"含む新しい環境をセットアップした方が良いかもしれません。"

msgid ""
"If you installed Django with pip_, you can use the ``--upgrade`` or ``-U`` "
"flag:"
msgstr ""
"Django を pip_ でインストールした場合は、``--upgrade`` か ``-U`` フラグが使用"
"できます。"

msgid ""
"When the new environment is set up, :doc:`run the full test suite </topics/"
"testing/overview>` for your application. Again, it's useful to turn on "
"deprecation warnings on so they're shown in the test output (you can also "
"use the flag if you test your app manually using ``manage.py runserver``):"
msgstr ""
"新しい環境が設定されたら、 :doc:`テストスイートを実行します </topics/testing/"
"overview>` 。テストの出力に表示されるように、廃止予定の警告を有効にすると便利"
"です。 (``manage.py runserver`` を使用してアプリケーションを手動でテストする"
"場合は、フラグを使用することもできます)"

msgid ""
"After you have run the tests, fix any failures. While you have the release "
"notes fresh in your mind, it may also be a good time to take advantage of "
"new features in Django by refactoring your code to eliminate any deprecation "
"warnings."
msgstr ""
"テストを実行したら、テストに失敗した点をすべて修正しましょう。リリースノート"
"の内容を心に留めながらコードをリファクタリングして、非推奨の警告が出ないよう"
"にすれば、Django の新しい機能の恩恵も受けられるかもしれません。"

msgid ""
"When you are sufficiently confident your app works with the new version of "
"Django, you're ready to go ahead and :doc:`deploy </howto/deployment/index>` "
"your upgraded Django project."
msgstr ""
"新しいバージョンの Django でアプリが十分に動作すると確信できたら、アップグ"
"レードした Django プロジェクトの :doc:`デプロイ </howto/deployment/index>` を"
"進める準備は完了です。"

msgid ""
"If you are using caching provided by Django, you should consider clearing "
"your cache after upgrading. Otherwise you may run into problems, for "
"example, if you are caching pickled objects as these objects are not "
"guaranteed to be pickle-compatible across Django versions. A past instance "
"of incompatibility was caching pickled :class:`~django.http.HttpResponse` "
"objects, either directly or indirectly via the :func:`~django.views."
"decorators.cache.cache_page` decorator."
msgstr ""
"Django が提供するキャッシュを利用している場合には、更新後にキャッシュをクリア"
"しなければなりません。クリアしなかった場合にはどんな問題が起こり得るでしょう"
"か？ たとえば、pickle 化したオブジェクトをキャッシュしていた場合には、複数の"
"バージョンの Django にわたって pickle の互換性が保証されません。過去の非互換"
"性の例では、pickle 化された :class:`~django.http.HttpResponse` オブジェクト"
"を、 :func:`~django.views.decorators.cache.cache_page` デコレータを介して直接"
"的または間接的にキャッシュしていました。"

msgid "How to install Django on Windows"
msgstr "Windows での Django のインストール方法"

msgid ""
"This document will guide you through installing Python 3.12 and Django on "
"Windows. It also provides instructions for setting up a virtual environment, "
"which makes it easier to work on Python projects. This is meant as a "
"beginner's guide for users working on Django projects and does not reflect "
"how Django should be installed when developing patches for Django itself."
msgstr ""
"このドキュメントでは、Windows に Python 3.12 と Django をインストールする手順"
"を説明します。また、Python プロジェクトでの作業を容易にする、仮想環境のセット"
"アップ方法についても説明します。これは Django プロジェクトで作業するユーザの"
"ための初心者向けガイドであり、 Django 自体のパッチを開発する際に Django をど"
"のようにインストールすべきかを反映したものではありません。"

msgid ""
"The steps in this guide have been tested with Windows 10. In other versions, "
"the steps would be similar. You will need to be familiar with using the "
"Windows command prompt."
msgstr ""
"このガイドの手順は、Windows 10でテストされています。他のバージョンでも手順は"
"似ています。 Windows のコマンドプロンプトの使い方に精通している必要がありま"
"す。"

msgid "Install Python"
msgstr "Python をインストールする"

msgid ""
"Django is a Python web framework, thus requiring Python to be installed on "
"your machine. At the time of writing, Python 3.12 is the latest version."
msgstr ""
"Django は Python の Web フレームワークなので、マシンに Python がインストール"
"されている必要があります。執筆時点では、 Python 3.12 が最新版です。"

msgid ""
"To install Python on your machine go to https://www.python.org/downloads/. "
"The website should offer you a download button for the latest Python "
"version. Download the executable installer and run it. Check the boxes next "
"to \"Install launcher for all users (recommended)\" then click \"Install "
"Now\"."
msgstr ""
"あなたのマシンにPythonをインストールするには、 https://www.python.org/"
"downloads/ を開きます。最新のPythonバージョンのダウンロードボタンが表示される"
"はずです。実行可能なインストーラをダウンロードして実行します。 \"Install "
"launcher for all users (recommended)\" にチェックを入れ、\"Install Now\" をク"
"リックします。"

msgid ""
"After installation, open the command prompt and check that the Python "
"version matches the version you installed by executing:"
msgstr ""
"インストール後、コマンドプロンプトを開き、次のコマンドを実行して、Python の"
"バージョンが今インストールしたバージョンと一致するかどうか確認します。"

msgid "For more details, see :doc:`python:using/windows` documentation."
msgstr "詳細は :doc:`python:using/windows` ドキュメントを参照してください。"

msgid "About ``pip``"
msgstr "``pip`` について"

msgid ""
":pypi:`pip` is a package manager for Python and is included by default with "
"the Python installer. It helps to install and uninstall Python packages "
"(such as Django!). For the rest of the installation, we'll use ``pip`` to "
"install Python packages from the command line."
msgstr ""
":pypi:`pip` は Python のパッケージマネージャで、Python インストーラにデフォル"
"トで含まれています。Python パッケージ (Django など！) のインストールとアンイ"
"ンストールに役立ちます。残りのインストールでは、 ``pip`` を使ってコマンドライ"
"ンから Python パッケージをインストールします。"

msgid "Setting up a virtual environment"
msgstr "仮想環境の構築"

msgid ""
"It is best practice to provide a dedicated environment for each Django "
"project you create. There are many options to manage environments and "
"packages within the Python ecosystem, some of which are recommended in the "
"`Python documentation <https://packaging.python.org/guides/tool-"
"recommendations/>`_. Python itself comes with :doc:`venv <python:tutorial/"
"venv>` for managing environments which we will use for this guide."
msgstr ""
"作成する Django プロジェクトごとに専用の環境を用意するのがベストプラクティス"
"です。Python のエコシステム内には、環境やパッケージを管理するための多くのオプ"
"ションがあり、そのいくつかは `Python のドキュメント <https://packaging."
"python.org/guides/tool-recommendations/>`_ で推奨されています。Python 自身に"
"も環境管理のための :doc:`venv <python:tutorial/venv>` が付属しています。"

msgid ""
"To create a virtual environment for your project, open a new command prompt, "
"navigate to the folder where you want to create your project and then enter "
"the following:"
msgstr ""
"プロジェクトの仮想環境を作成するには、新しいコマンドプロンプトを開き、プロ"
"ジェクトを作成するフォルダに移動して、次のように入力します："

msgid ""
"This will create a folder called 'project-name' if it does not already exist "
"and set up the virtual environment. To activate the environment, run:"
msgstr ""
"これにより、'project-name'というフォルダーがまだ存在しなければ作成され、仮想"
"環境が構築されます。環境をアクティブにするには、以下を実行します："

msgid ""
"The virtual environment will be activated and you'll see \"(project-name)\" "
"next to the command prompt to designate that. Each time you start a new "
"command prompt, you'll need to activate the environment again."
msgstr ""
"仮想環境がアクティブ化され、コマンドプロンプトの隣にそれを示す \"(project-"
"name)\" が表示されます。新しいコマンドプロンプトを開始するたびに、環境を再度"
"アクティブにする必要があります。"

msgid "Install Django"
msgstr "Django をインストールする"

msgid ""
"Django can be installed easily using ``pip`` within your virtual environment."
msgstr "Django は仮想環境内で ``pip`` を使って簡単にインストールできます。"

msgid ""
"In the command prompt, ensure your virtual environment is active, and "
"execute the following command:"
msgstr ""
"コマンドプロンプトで、仮想環境がアクティブであることを確認して、以下のコマン"
"ドを実行します："

msgid "This will download and install the latest Django release."
msgstr ""
"これにより、Django の最新版のリリースがダウンロードされ、インストールされま"
"す。"

msgid ""
"After the installation has completed, you can verify your Django "
"installation by executing ``django-admin --version`` in the command prompt."
msgstr ""
"インストールが完了したら、コマンドプロンプトで ``django-admin --version`` と"
"いうコマンドを実行することで、Django が正しくインストールされたかどうかを確認"
"することができます。"

msgid ""
"See :ref:`database-installation` for information on database installation "
"with Django."
msgstr ""
"Django とともにデータベースをインストールするための情報については、 :ref:"
"`database-installation` を参照してください。"

msgid "Colored terminal output"
msgstr "ターミナルのカラー出力"

msgid ""
"A quality-of-life feature adds colored (rather than monochrome) output to "
"the terminal. In modern terminals this should work for both CMD and "
"PowerShell. If for some reason this needs to be disabled, set the "
"environmental variable :envvar:`DJANGO_COLORS` to ``nocolor``."
msgstr ""
"クオリティ・オブ・ライフ機能により、ターミナルに（モノクロではなく）色のつい"
"た出力が追加されます。最近の端末ではCMDとPowerShellの両方で動作するはずです。"
"何らかの理由で無効にしたい場合は、環境変数 :envvar:`DJANGO_COLORS` を "
"``nocolor`` に設定してください。"

msgid ""
"On older Windows versions, or legacy terminals, :pypi:`colorama` 0.4.6+ must "
"be installed to enable syntax coloring:"
msgstr ""
"古いWindowsバージョンやレガシー端末では、シンタックスカラーリングを有効にする"
"には :pypi:`colorama` 0.4.6 以上をインストールする必要があります:"

msgid "See :ref:`syntax-coloring` for more information on color settings."
msgstr "色の設定については :ref:`syntax-coloring` を参照してください。"

msgid "Common pitfalls"
msgstr "よくある落とし穴"

msgid ""
"If ``django-admin`` only displays the help text no matter what arguments it "
"is given, there is probably a problem with the file association in Windows. "
"Check if there is more than one environment variable set for running Python "
"scripts in ``PATH``. This usually occurs when there is more than one Python "
"version installed."
msgstr ""
"どんな引数を与えても ``django-admin`` がヘルプテキストしか表示してくれない場"
"合、Windows のファイルの関連付けに問題がある可能性があります。``PATH`` に "
"Python のスクリプトを実行するのに必要な環境変数が2つ以上設定されていないかど"
"うか確認してください。2つ以上のバージョンの Python をインストールした時にこの"
"問題が起こることがあります。"

msgid ""
"If you are connecting to the internet behind a proxy, there might be "
"problems in running the command ``py -m pip install Django``. Set the "
"environment variables for proxy configuration in the command prompt as "
"follows:"
msgstr ""
"プロキシ経由でインターネットに接続している場合、コマンド ``py -m pip install "
"Django`` の実行がうまくいかないかもしれません。コマンドプロンプトで、プロキシ"
"設定用の環境変数を以下のように設定してください:"

msgid ""
"In general, Django assumes that ``UTF-8`` encoding is used for I/O. This may "
"cause problems if your system is set to use a different encoding. Recent "
"versions of Python allow setting the :envvar:`PYTHONUTF8` environment "
"variable in order to force a ``UTF-8`` encoding. Windows 10 also provides a "
"system-wide setting by checking ``Use Unicode UTF-8 for worldwide language "
"support`` in :menuselection:`Language --> Administrative Language Settings --"
"> Change system locale` in system settings."
msgstr ""
"一般に、Django は ``UTF-8`` エンコーディングが入出力に使われることを想定して"
"います。このため、システムが別のエンコーディングを使うように設定されている"
"と、 問題を引き起こすかもしれません。最近のバージョンの Python では、 :"
"envvar:`PYTHONUTF8` 環境変数を設定することで、 ``UTF-8`` エンコーディングを強"
"制できます。Windows 10 では、システム設定の :menuselection:`言語 --> 管理用の"
"言語の設定 --> システム ロケールの変更` にある ``ワールドワイド言語サポート"
"で Unicode UTF-8 を使用`` をチェックすることで、システム全体の設定を行うこと"
"もできます。"

msgid "How to create database migrations"
msgstr "データベースのマイグレーションの作成方法"

msgid ""
"This document explains how to structure and write database migrations for "
"different scenarios you might encounter. For introductory material on "
"migrations, see :doc:`the topic guide </topics/migrations>`."
msgstr ""
"このドキュメントでは、遭遇する可能性のあるいくつかのシナリオに対する、データ"
"ベースのマイグレーションの構成方法と書き方について説明します。マイグレーショ"
"ンに関する入門的な資料を探しているなら、:doc:`トピック別ガイド </topics/"
"migrations>` を読んでください。"

msgid "Data migrations and multiple databases"
msgstr "データのマイグレーションと複数のデータベース"

msgid ""
"When using multiple databases, you may need to figure out whether or not to "
"run a migration against a particular database. For example, you may want to "
"**only** run a migration on a particular database."
msgstr ""
"複数のデータベースを使用している場合、特定のデータベースに対してマイグレー"
"ションを実行するかどうかを判断する必要があるかもしれません。例えば、特定の"
"データベースに対してのみマイグレーションを実行したい場合です。"

msgid ""
"In order to do that you can check the database connection's alias inside a "
"``RunPython`` operation by looking at the ``schema_editor.connection.alias`` "
"attribute::"
msgstr ""
"これを行うには、 ``RunPython`` 操作の中で、 ``schema_editor.connection."
"alias`` 属性を見て、データベース接続のエイリアスを確認します:"

msgid ""
"You can also provide hints that will be passed to the :meth:"
"`allow_migrate()` method of database routers as ``**hints``:"
msgstr ""
"また、データベースルーターの :meth:`allow_migrate()` メソッドに渡すヒントを "
"``**hints`` として指定することもできます:"

msgid "``myapp/dbrouters.py``"
msgstr "``myapp/dbrouters.py``"

msgid "Then, to leverage this in your migrations, do the following::"
msgstr "これをマイグレーションに利用するには、次のようにします:"

msgid ""
"If your ``RunPython`` or ``RunSQL`` operation only affects one model, it's "
"good practice to pass ``model_name`` as a hint to make it as transparent as "
"possible to the router. This is especially important for reusable and third-"
"party apps."
msgstr ""
"もし ``RunPython`` や ``RunSQL`` 操作が 1 つのモデルにしか影響しないのであれ"
"ば、 ``model_name`` をヒントとして渡すことで、ルーターに対して最大限、透過的"
"になります。これは再利用可能なサードパーティアプリにとって特に重要です。"

msgid "Migrations that add unique fields"
msgstr "ユニークなフィールドを追加するマイグレーション"

msgid ""
"Applying a \"plain\" migration that adds a unique non-nullable field to a "
"table with existing rows will raise an error because the value used to "
"populate existing rows is generated only once, thus breaking the unique "
"constraint."
msgstr ""
"既存の行を持つテーブルにユニークな非 Null フィールドを追加する「プレーン」な"
"マイグレーションを適用するとエラーが発生します。これは、既存の行すべてを埋め"
"るために使用される値がただ一つだけ生成され、これがユニーク制約に違反するため"
"です。"

msgid ""
"Therefore, the following steps should be taken. In this example, we'll add a "
"non-nullable :class:`~django.db.models.UUIDField` with a default value. "
"Modify the respective field according to your needs."
msgstr ""
"そのため、次の手順を踏む必要があります。この例では、デフォルト値を持つ非 "
"Null の :class:`~django.db.models.UUIDField` を追加します。必要に応じて、該当"
"するフィールドを変更してください。"

msgid ""
"Add the field on your model with ``default=uuid.uuid4`` and ``unique=True`` "
"arguments (choose an appropriate default for the type of the field you're "
"adding)."
msgstr ""
"モデルに ``default=uuid.uuid4`` と ``unique=True`` 引数を持つフィールドを追加"
"します（追加するフィールドのタイプに適切なデフォルトを選択してください）。"

msgid ""
"Run the :djadmin:`makemigrations` command. This should generate a migration "
"with an ``AddField`` operation."
msgstr ""
":djadmin:`makemigrations` コマンドを実行します。これにより、 ``AddField`` 操"
"作を含むマイグレーションが生成されます。"

msgid ""
"Generate two empty migration files for the same app by running "
"``makemigrations myapp --empty`` twice. We've renamed the migration files to "
"give them meaningful names in the examples below."
msgstr ""
"同じアプリに対して ``makemigrations myapp --empty`` を2回実行して、2つの空の"
"マイグレーションファイルを生成します。以下の例では、マイグレーションファイル"
"にわかりやすい名前を付けるためにファイル名を変更しています。"

msgid ""
"Copy the ``AddField`` operation from the auto-generated migration (the first "
"of the three new files) to the last migration, change ``AddField`` to "
"``AlterField``, and add imports of ``uuid`` and ``models``. For example:"
msgstr ""
"自動生成されたマイグレーション(3つの新しいファイルのうちの最初のファイル)か"
"ら ``AddField`` オペレーションを最後のマイグレーションにコピーし、 "
"``AddField`` を ``AlterField`` に変更し、 ``uuid`` と ``models`` のインポート"
"を追加します。例:"

msgid "``0006_remove_uuid_null.py``"
msgstr "``0006_remove_uuid_null.py``"

msgid ""
"Edit the first migration file. The generated migration class should look "
"similar to this:"
msgstr ""
"最初の移行ファイルを編集します。 生成された移行クラスは次のようになります::"

msgid "``0004_add_uuid_field.py``"
msgstr "``0004_add_uuid_field.py``"

msgid ""
"Change ``unique=True`` to ``null=True`` -- this will create the intermediary "
"null field and defer creating the unique constraint until we've populated "
"unique values on all the rows."
msgstr ""
"``unique=True`` を ``null=True`` に変更してください。これは、一時的にNULL"
"フィールドを作成し、すべての行に一意な値を設定するまで、一意制約の作成を延期"
"します。"

msgid ""
"In the first empty migration file, add a :class:`~django.db.migrations."
"operations.RunPython` or :class:`~django.db.migrations.operations.RunSQL` "
"operation to generate a unique value (UUID in the example) for each existing "
"row. Also add an import of ``uuid``. For example:"
msgstr ""
"最初の空のマイグレーションファイルに、 :class:`~django.db.migrations."
"operations.RunPython` または :class:`~django.db.migrations.operations."
"RunSQL` オペレーションを追加して、既存の各行に対して一意な値 (この例では "
"UUID) を生成します。 ``uuid`` のインポートも追加します。例:"

msgid "``0005_populate_uuid_values.py``"
msgstr "``0005_populate_uuid_values.py``"

msgid ""
"Now you can apply the migrations as usual with the :djadmin:`migrate` "
"command."
msgstr ""
"これで :djadmin:`migrate` コマンドを使って通常通りマイグレーションを適用する"
"ことができます。"

msgid ""
"Note there is a race condition if you allow objects to be created while this "
"migration is running. Objects created after the ``AddField`` and before "
"``RunPython`` will have their original ``uuid``’s overwritten."
msgstr ""
"このマイグレーションの実行中にオブジェクトの作成を許可すると、競合状態が発生"
"することに注意してください。 ``AddField`` の後でかつ ``RunPython`` の前に作成"
"されたオブジェクトは、元の ``uuid`` が上書きされます。"

msgid "Non-atomic migrations"
msgstr "非アトミックのマイグレーション"

msgid ""
"On databases that support DDL transactions (SQLite and PostgreSQL), "
"migrations will run inside a transaction by default. For use cases such as "
"performing data migrations on large tables, you may want to prevent a "
"migration from running in a transaction by setting the ``atomic`` attribute "
"to ``False``::"
msgstr ""
"DDL トランザクションをサポートしているデータベース (SQLite と PostgreSQL) で"
"は、マイグレーションはデフォルトでトランザクション内で実行されます。大きな"
"テーブルに対してデータ移行を行う場合などには、 ``atomic`` 属性を ``False`` に"
"設定することで、トランザクション内で移行が実行されないようにすることができま"
"す:"

msgid ""
"Within such a migration, all operations are run without a transaction. It's "
"possible to execute parts of the migration inside a transaction using :func:"
"`~django.db.transaction.atomic()` or by passing ``atomic=True`` to "
"``RunPython``."
msgstr ""
"このようなマイグレーションでは、すべての操作はトランザクションなしで実行され"
"ます。 :func:`~django.db.transaction.atomic()` を使用するか、 ``RunPython`` "
"に ``atomic=True`` を渡すことで、マイグレーションの一部をトランザクション内で"
"実行できます。"

msgid ""
"Here's an example of a non-atomic data migration that updates a large table "
"in smaller batches::"
msgstr ""
"以下は、大きなテーブルを小さなバッチで更新する、非アトミックなデータマイグ"
"レーションの例です:"

msgid ""
"The ``atomic`` attribute doesn't have an effect on databases that don't "
"support DDL transactions (e.g. MySQL, Oracle). (MySQL's `atomic DDL "
"statement support <https://dev.mysql.com/doc/refman/en/atomic-ddl.html>`_ "
"refers to individual statements rather than multiple statements wrapped in a "
"transaction that can be rolled back.)"
msgstr ""
"``atomic`` 属性は DDL トランザクションをサポートしていないデータベース "
"(MySQL や Oracle など) には影響しません。(MySQLの `atomic DDL statement "
"support <https://dev.mysql.com/doc/refman/en/atomic-ddl.html>`_ は、ロール"
"バック可能なトランザクションに包まれた複数のステートメントではなく、個々のス"
"テートメントを指します)。"

msgid "Controlling the order of migrations"
msgstr "マイグレーションの順序をコントロールする"

msgid ""
"Django determines the order in which migrations should be applied not by the "
"filename of each migration, but by building a graph using two properties on "
"the ``Migration`` class: ``dependencies`` and ``run_before``."
msgstr ""
"Django はマイグレーションを適用する順番を、マイグレーションのファイル名ではな"
"く、 ``Migration`` クラスの 2 つのプロパティである ``dependencies`` と "
"``run_before`` を使ってグラフを作成することで決定します:"

msgid ""
"If you've used the :djadmin:`makemigrations` command you've probably already "
"seen ``dependencies`` in action because auto-created migrations have this "
"defined as part of their creation process."
msgstr ""
":djadmin:`makemigrations` コマンドを使ったことがあるなら、おそらく "
"``dependencies`` の動作をすでに見ているでしょう。自動生成されたマイグレーショ"
"ンは作成プロセスの一部としてそれを定義するためです。"

msgid "The ``dependencies`` property is declared like this::"
msgstr "``dependencies`` プロパティは次のように宣言されます::"

msgid ""
"Usually this will be enough, but from time to time you may need to ensure "
"that your migration runs *before* other migrations. This is useful, for "
"example, to make third-party apps' migrations run *after* your :setting:"
"`AUTH_USER_MODEL` replacement."
msgstr ""
"通常はこれで十分ですが、時にはあなたのマイグレーションが他のマイグレーション"
"よりも *先に* 実行されるようにする必要があるかもしれません。これは例えば、"
"サードパーティアプリのマイグレーションを :setting:`AUTH_USER_MODEL` の置換の "
"*後に* 実行させるのに便利です。"

msgid ""
"To achieve this, place all migrations that should depend on yours in the "
"``run_before`` attribute on your ``Migration`` class::"
msgstr ""
"これを行うには、 ``Migration`` クラスの ``run_before`` 属性に、依存するすべて"
"のマイグレーションを配置します:"

msgid ""
"Prefer using ``dependencies`` over ``run_before`` when possible. You should "
"only use ``run_before`` if it is undesirable or impractical to specify "
"``dependencies`` in the migration which you want to run after the one you "
"are writing."
msgstr ""
"可能な限り、 ``run_before`` よりも ``dependencies`` を使うことを推奨します。 "
"``run_before`` を使うのは、書いているマイグレーションの後に実行したいマイグ"
"レーションで ``dependencies`` を指定するのが望ましくないか、現実的でない場合"
"のみです。"

msgid "Migrating data between third-party apps"
msgstr "サードパーティのアプリ間でデータをマイグレーションする"

msgid ""
"You can use a data migration to move data from one third-party application "
"to another."
msgstr ""
"データマイグレーションを使って、あるサードパーティアプリケーションから別のア"
"プリケーションにデータを移動できます。"

msgid ""
"If you plan to remove the old app later, you'll need to set the "
"``dependencies`` property based on whether or not the old app is installed. "
"Otherwise, you'll have missing dependencies once you uninstall the old app. "
"Similarly, you'll need to catch :exc:`LookupError` in the ``apps."
"get_model()`` call that retrieves models from the old app. This approach "
"allows you to deploy your project anywhere without first installing and then "
"uninstalling the old app."
msgstr ""
"後で古いアプリを削除する予定がある場合は、古いアプリがインストールされている"
"かどうかに基づいて ``dependencies`` プロパティを設定する必要があります。そう"
"しないと、古いアプリをアンインストールしたときに依存関係がなくなってしまいま"
"す。同様に、古いアプリからモデルを取得する ``apps.get_model()`` の呼び出し"
"で :exc:`LookupError` をキャッチする必要があります。この方法によって、古いア"
"プリをインストールしてからアンインストールすることなく、プロジェクトをどこに"
"でもデプロイできるようになります。"

msgid "Here's a sample migration:"
msgstr "簡単なマイグレーションの例を見てみましょう:"

msgid "``myapp/migrations/0124_move_old_app_to_new_app.py``"
msgstr "``myapp/migrations/0124_move_old_app_to_new_app.py``"

msgid ""
"Also consider what you want to happen when the migration is unapplied. You "
"could either do nothing (as in the example above) or remove some or all of "
"the data from the new application. Adjust the second argument of the :mod:"
"`~django.db.migrations.operations.RunPython` operation accordingly."
msgstr ""
"また、マイグレーションが適用されないときにどうしたいかも検討します。（上記の"
"例のように）何もしないか、新しいアプリケーションからデータの一部または全部を"
"削除できます。 それに応じて :mod:`~django.db.migrations.operations."
"RunPython` 操作の2番目の引数を調整します。"

msgid "Changing a ``ManyToManyField`` to use a ``through`` model"
msgstr "``ManyToManyField`` を中間 (``through``) モデルを使うように変更する"

msgid ""
"If you change a :class:`~django.db.models.ManyToManyField` to use a "
"``through`` model, the default migration will delete the existing table and "
"create a new one, losing the existing relations. To avoid this, you can use :"
"class:`.SeparateDatabaseAndState` to rename the existing table to the new "
"table name while telling the migration autodetector that the new model has "
"been created. You can check the existing table name through :djadmin:"
"`sqlmigrate` or :djadmin:`dbshell`. You can check the new table name with "
"the through model's ``_meta.db_table`` property. Your new ``through`` model "
"should use the same names for the ``ForeignKey``\\s as Django did. Also if "
"it needs any extra fields, they should be added in operations after :class:`."
"SeparateDatabaseAndState`."
msgstr ""
":class:`~django.db.models.ManyToManyField` を ``through`` モデルに変更する"
"と、デフォルトのマイグレーションは既存のテーブルを削除して新しいテーブルを作"
"成し、既存のリレーションを失います。これを避けるには、:class:`."
"SeparateDatabaseAndState` を使用して、マイグレーションの自動検出器に新しいモ"
"デルが作成されたことを伝えながら、既存のテーブル名を新しいテーブル名に変更し"
"ます。既存のテーブル名は :djadmin:`sqlmigrate` または :djadmin:`dbshell` で確"
"認できます。新しいテーブル名は中間モデルの ``_meta.db_table`` プロパティで確"
"認できます。新しい ``through`` モデルは ``ForeignKey`` に Django と同じ名前を"
"使うべきです。また、追加のフィールドが必要な場合は、 :class:`."
"SeparateDatabaseAndState` の後の操作で追加してください。"

msgid ""
"For example, if we had a ``Book`` model with a ``ManyToManyField`` linking "
"to ``Author``, we could add a through model ``AuthorBook`` with a new field "
"``is_primary``, like so::"
msgstr ""
"例えば、 ``Author`` にリンクする ``ManyToManyField`` を持つ ``Book`` モデルが"
"あった場合、次のように新しいフィールド ``is_primary`` を持つ中間モデル "
"``AuthorBook`` を追加できます:"

msgid "Changing an unmanaged model to managed"
msgstr "未管理状態のモデルを管理状態に変更する"

msgid ""
"If you want to change an unmanaged model (:attr:`managed=False <django.db."
"models.Options.managed>`) to managed, you must remove ``managed=False`` and "
"generate a migration before making other schema-related changes to the "
"model, since schema changes that appear in the migration that contains the "
"operation to change ``Meta.managed`` may not be applied."
msgstr ""
"未管理状態のモデル（:attr:`managed=False <django.db.models.Options."
"managed>`) を管理状態に変更する場合、 ``managed=False`` を削除し、マイグレー"
"ションを生成してから、モデルにスキーマ関連の変更を加える必要があります。これ"
"は、 ``Meta.managed`` を変更する操作を含むマイグレーションに含まれるスキーマ"
"変更が適用されない可能性があるためです。"
