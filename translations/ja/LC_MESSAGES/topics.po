# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# hitsumabushi.org, 2018
# Akio Ogasahara <libratechwriter@gmail.com>, 2024
# Asai Takuya <takuya.waseda.1119@gmail.com>, 2016
# Claude Paroz <claude@2xlibre.net>, 2020
# Eiji WARASHINA <Eiji.Warashina@gmail.com>, 2016
# Futoshi Nagata <futoshinagata@gmail.com>, 2017
# Fuuki Shigenaka <shigenakafuuki@gmail.com>, 2018
# Takayuki Hirayama <th.windbell+transifex@gmail.com>, 2018
# Hiroki Nakayama, 2022
# Hiroyuki Imai <hiroyuki.wx@gmail.com>, 2020
# to_kach, 2018
# IjIj <ijijsamurai@gmail.com>, 2021
# Ikemoto Hideki <ikemo333@gmail.com>, 2020-2021
# Kashun YOSHIDA, 2019,2021
# Kashun YOSHIDA, 2018
# Kazufumi Suzuki <skazufumi.a02525@gmail.com>, 2016
# Nomuken <nomuken.no@gmail.com>, 2016
# Kohei Tamura <ktamura.biz.80@gmail.com>, 2018
# Kouichirou Nishikawa <nishikawa0228@sj9.so-net.ne.jp>, 2015
# Akio Ogasahara <libratechwriter@gmail.com>, 2024
# Masa MATSUMURA, 2017
# Masashi SHIBATA <contact@c-bata.link>, 2016
# Masashi SHIBATA <contact@c-bata.link>, 2017
# Masashi SHIBATA <contact@c-bata.link>, 2016
# masataka.okudera, 2020
# Tatsuya Matoba <mtb.toya0403@gmail.com>, 2018
# mnamihdk, 2017
# Nakamura Tetsuya, 2023
# Narito Takizawa <toritoritorina@gmail.com>, 2019
# Akio Ogasahara <libratechwriter@gmail.com>, 2024
# Pawllo2 <pawllothesecond@gmail.com>, 2016-2019
# ren watanabe <ohashi540@gmail.com>, 2019
# Safu9 <safu9.dev@gmail.com>, 2019
# Sakurai Takatsugu, 2020
# Shinoda Yukihiko <yuk.hik.future@gmail.com>, 2019
# Shirai <taole33@hotmail.com>, 2020
# Shoya Shiraki <12c1055@gmail.com>, 2020
# Shuuji TAKAHASHI (shuuji3) <shuuji3@gmail.com>, 2016-2017,2019,2023
# Suzuki Takahiro <bur8787@gmail.com>, 2016
# TANIGUCHI Taichi, 2022
# Shuuji TAKAHASHI (shuuji3) <shuuji3@gmail.com>, 2016-2018,2020,2022-2024
# Takashi Iwamoto, 2018
# Takashi Sugawara <aimaimokomoko@gmail.com>, 2017
# Takayuki Hirai, 2015
# Takayuki SHIMIZUKAWA <shimizukawa@gmail.com>, 2018
# Takeuchi Takaki <takakim114@gmail.com>, 2018
# Takuya N <takninnovationresearch@gmail.com>, 2019
# TANIGUCHI Taichi, 2024
# Takuya N <takninnovationresearch@gmail.com>, 2018
# Kuehar <green95251@gmail.com>, 2020
# Yoshihiro Furudate <aheadlink.changat@gmail.com>, 2016
# Yoshiyuki Sakamoto <stb_yoshiyuki-s@hotmail.co.jp>, 2021
# Yuki Yokoyama <peketamin@gmail.com>, 2020
# Yusuke Ebihara <ebiyuu1121@gmail.com>, 2020
# Yuuichiro Kato <y1row.kato@gmail.com>, 2018
# Yuuki Ebihara <yuuki.ebihara813@gmail.com>, 2020
# Pawllo2 <pawllothesecond@gmail.com>, 2017
# yz4230 <yuzupon1480@gmail.com>, 2021
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-08 00:58-0600\n"
"PO-Revision-Date: 2013-04-02 20:02+0000\n"
"Last-Translator: Akio Ogasahara <libratechwriter@gmail.com>, 2024\n"
"Language-Team: Japanese (http://app.transifex.com/django/django-docs/"
"language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "Asynchronous support"
msgstr "非同期サポート"

msgid ""
"Django has support for writing asynchronous (\"async\") views, along with an "
"entirely async-enabled request stack if you are running under :doc:`ASGI </"
"howto/deployment/asgi/index>`. Async views will still work under WSGI, but "
"with performance penalties, and without the ability to have efficient long-"
"running requests."
msgstr ""
"Djangoは、:doc:`ASGI</howto/deployment/asgi/index>` の環境下であれば、完璧な"
"非同期リクエストスタックに対応した非同期 (\"async\") ビューをサポートしていま"
"す。WSGI の環境下でも非同期ビューは動作しますが、パフォーマンス上不利であるう"
"え、長期的なリクエストを効率的に処理できません。"

msgid ""
"We're still working on async support for the ORM and other parts of Django. "
"You can expect to see this in future releases. For now, you can use the :"
"func:`sync_to_async` adapter to interact with the sync parts of Django. "
"There is also a whole range of async-native Python libraries that you can "
"integrate with."
msgstr ""
"開発チームは ORM や他の機能でも非同期処理が対応できるよう取り組んでいます。こ"
"の機能は将来リリース予定ですが、現時点では、同期処理と非同期処理のやり取り"
"に、:func:`sync_to_async` アダプターが使えます。さらに同期処理と非同期処理を"
"統合するために、非同期な Python ライブラリがすべて使えます。"

msgid "Async views"
msgstr "非同期ビュー"

msgid ""
"Any view can be declared async by making the callable part of it return a "
"coroutine - commonly, this is done using ``async def``. For a function-based "
"view, this means declaring the whole view using ``async def``. For a class-"
"based view, this means declaring the HTTP method handlers, such as ``get()`` "
"and ``post()`` as ``async def`` (not its ``__init__()``, or ``as_view()``)."
msgstr ""
"どのようなビューでも、呼び出し可能オブジェクトでコルーチンを返すようにすれ"
"ば、非同期として宣言できます。その際には、一般的に ``async def`` を使います。"
"関数ベースのビューの場合、``async def`` を用いてビュー全体を宣言します。クラ"
"スベースのビューの場合、``get()`` と ``post()`` などのメソッドを ``async "
"def`` で宣言します (``__init__()`` でも ``as_view()`` でもないことに注意)。"

msgid ""
"Django uses ``asgiref.sync.iscoroutinefunction`` to test if your view is "
"asynchronous or not. If you implement your own method of returning a "
"coroutine, ensure you use ``asgiref.sync.markcoroutinefunction`` so this "
"function returns ``True``."
msgstr ""
"Django は、あなたのビューが非同期かどうか確かめるために ``asgiref.sync."
"iscoroutinefunction`` を使います。もし、コルーチンを返すあなた独自のメソッド"
"を実装する場合は、確実に ``asgiref.sync.markcoroutinefunction`` を用いて "
"``asgiref.sync.iscoroutinefunction`` が ``True`` を返すようにして下さい。"

msgid ""
"Under a WSGI server, async views will run in their own, one-off event loop. "
"This means you can use async features, like concurrent async HTTP requests, "
"without any issues, but you will not get the benefits of an async stack."
msgstr ""
"WSGI サーバーでは、非同期ビューは1回限りのイベントループで実行されます。つま"
"り、非同期 HTTP リクエストなどの非同期機能を問題なく使用できるものの、非同期"
"スタックのメリットは得られないことになります。"

msgid ""
"The main benefits are the ability to service hundreds of connections without "
"using Python threads. This allows you to use slow streaming, long-polling, "
"and other exciting response types."
msgstr ""
"非同期スタックの主な利点とは、数百もの接続を Python のスレッドを使わずに処理"
"できることです。これにより、低速ストリーミング、ロングポーリング、その他の便"
"利なレスポンスタイプが使えます。"

msgid ""
"If you want to use these, you will need to deploy Django using :doc:`ASGI </"
"howto/deployment/asgi/index>` instead."
msgstr ""
"もしこれらを利用したい場合は、代わりに :doc:`ASGI </howto/deployment/asgi/"
"index>` を使って Django をデプロイする必要があります。"

msgid ""
"You will only get the benefits of a fully-asynchronous request stack if you "
"have *no synchronous middleware* loaded into your site. If there is a piece "
"of synchronous middleware, then Django must use a thread per request to "
"safely emulate a synchronous environment for it."
msgstr ""
"同期ミドルウェアを使っていない場合にのみ、完全非同期のリクエストスタックの効"
"果があります。もし、同期ミドルウェアがあれば、同期環境を安全にエミュレートす"
"るために、Django はリクエストごとにスレッドを使ってしまいます。"

msgid ""
"Middleware can be built to support :ref:`both sync and async <async-"
"middleware>` contexts. Some of Django's middleware is built like this, but "
"not all. To see what middleware Django has to adapt for, you can turn on "
"debug logging for the ``django.request`` logger and look for log messages "
"about *\"Asynchronous handler adapted for middleware ...\"*."
msgstr ""
"ミドルウェアは、:ref:`同期と非同期の両方の <async-middleware>` コンテキストを"
"サポートするように構築できます。 Djangoミドルウェアの一部はこのように構築され"
"ていますが、すべてではありません。ミドルウェアが適応する必要があるものを確認"
"するには、``django.request`` ロガーのデバッグロギングを有効にして、"
"*\"Asynchronous handler adapted for middleware ...\"* に関するログメッセージ"
"を探します。"

msgid ""
"In both ASGI and WSGI mode, you can still safely use asynchronous support to "
"run code concurrently rather than serially. This is especially handy when "
"dealing with external APIs or data stores."
msgstr ""
"ASGI モードと WSGI モードの両方で、コードを逐次的ではなく並行して実行するため"
"に、非同期サポートを安全に使用できます。これは、外部 API やデータストアを扱う"
"際に特に便利です。"

msgid ""
"If you want to call a part of Django that is still synchronous, you will "
"need to wrap it in a :func:`sync_to_async` call. For example::"
msgstr ""
"まだ同期的な Django の機能を呼び出したい場合、次のように :func:"
"`sync_to_async` でラップする必要があります。"

msgid ""
"If you accidentally try to call a part of Django that is synchronous-only "
"from an async view, you will trigger Django's :ref:`asynchronous safety "
"protection <async-safety>` to protect your data from corruption."
msgstr ""
"非同期ビューから、同期的な Django の機能を誤って呼び出そうとすると、Django "
"の :ref:`非同期セーフティプロテクション <async-safety>` が発動して、データが"
"破損しないように保護されます。"

msgid "Decorators"
msgstr "デコレータ"

msgid ""
"The following decorators can be used with both synchronous and asynchronous "
"view functions:"
msgstr ""
"以下のデコレータは、同期ビュー関数でも非同期ビュー関数でも使用できます。"

msgid ":func:`~django.views.decorators.cache.cache_control`"
msgstr ":func:`~django.views.decorators.cache.cache_control`"

msgid ":func:`~django.views.decorators.cache.never_cache`"
msgstr ":func:`~django.views.decorators.cache.never_cache`"

msgid ":func:`~django.views.decorators.common.no_append_slash`"
msgstr ":func:`~django.views.decorators.common.no_append_slash`"

msgid ":func:`~django.views.decorators.csrf.csrf_exempt`"
msgstr ":func:`~django.views.decorators.csrf.csrf_exempt`"

msgid ":func:`~django.views.decorators.csrf.csrf_protect`"
msgstr ":func:`~django.views.decorators.csrf.csrf_protect`"

msgid ":func:`~django.views.decorators.csrf.ensure_csrf_cookie`"
msgstr ":func:`~django.views.decorators.csrf.ensure_csrf_cookie`"

msgid ":func:`~django.views.decorators.csrf.requires_csrf_token`"
msgstr ":func:`~django.views.decorators.csrf.requires_csrf_token`"

msgid ":func:`~django.views.decorators.debug.sensitive_variables`"
msgstr ":func:`~django.views.decorators.debug.sensitive_variables`"

msgid ":func:`~django.views.decorators.debug.sensitive_post_parameters`"
msgstr ":func:`~django.views.decorators.debug.sensitive_post_parameters`"

msgid ":func:`~django.views.decorators.gzip.gzip_page`"
msgstr ":func:`~django.views.decorators.gzip.gzip_page`"

msgid ":func:`~django.views.decorators.http.condition`"
msgstr ":func:`~django.views.decorators.http.condition`"

msgid "``conditional_page()``"
msgstr "``conditional_page()``"

msgid ":func:`~django.views.decorators.http.etag`"
msgstr ":func:`~django.views.decorators.http.etag`"

msgid ":func:`~django.views.decorators.http.last_modified`"
msgstr ":func:`~django.views.decorators.http.last_modified`"

msgid ":func:`~django.views.decorators.http.require_http_methods`"
msgstr ":func:`~django.views.decorators.http.require_http_methods`"

msgid ":func:`~django.views.decorators.http.require_GET`"
msgstr ":func:`~django.views.decorators.http.require_GET`"

msgid ":func:`~django.views.decorators.http.require_POST`"
msgstr ":func:`~django.views.decorators.http.require_POST`"

msgid ":func:`~django.views.decorators.http.require_safe`"
msgstr ":func:`~django.views.decorators.http.require_safe`"

msgid ":func:`~django.views.decorators.vary.vary_on_cookie`"
msgstr ":func:`~django.views.decorators.vary.vary_on_cookie`"

msgid ":func:`~django.views.decorators.vary.vary_on_headers`"
msgstr ":func:`~django.views.decorators.vary.vary_on_headers`"

msgid "``xframe_options_deny()``"
msgstr "``xframe_options_deny()``"

msgid "``xframe_options_sameorigin()``"
msgstr "``xframe_options_sameorigin()``"

msgid "``xframe_options_exempt()``"
msgstr "``xframe_options_exempt()``"

msgid "For example::"
msgstr "例:"

msgid "Queries & the ORM"
msgstr "クエリーと ORM"

msgid ""
"With some exceptions, Django can run ORM queries asynchronously as well::"
msgstr ""
"一部の例外を除いて、Django は ORM クエリーを非同期に実行することもできます。"

msgid "Detailed notes can be found in :ref:`async-queries`, but in short:"
msgstr ""
"詳細については :ref:`async-queries` で参照できますが、簡単にまとめると次のよ"
"うになります。"

msgid ""
"All ``QuerySet`` methods that cause an SQL query to occur have an ``a``-"
"prefixed asynchronous variant."
msgstr ""
"SQL クエリを発行するすべての ``QuerySet`` メソッドには、``a`` という接頭辞が"
"付いた非同期版があります。"

msgid ""
"``async for`` is supported on all QuerySets (including the output of "
"``values()`` and ``values_list()``.)"
msgstr ""
"``async for`` は (``values()`` と ``values_list()`` を含む) すべての "
"QuerySet でサポートされている"

msgid ""
"Django also supports some asynchronous model methods that use the database::"
msgstr ""
"Django は、次のような非同期モデルのデータベースを使用するメソッドもいくつかサ"
"ポートします。"

msgid ""
"Transactions do not yet work in async mode. If you have a piece of code that "
"needs transactions behavior, we recommend you write that piece as a single "
"synchronous function and call it using :func:`sync_to_async`."
msgstr ""
"トランザクションは非同期モードではまだ機能しません。もしトランザクションの動"
"作が必要なコードがある場合は、そのコードを1つの同期的な関数として書いて、:"
"func:`sync_to_async` を使用して呼び出すことをおすすめします。"

msgid "Asynchronous model and related manager interfaces were added."
msgstr "非同期モデルと関連するマネージャーインターフェイスが追加されました。"

msgid "Performance"
msgstr "パフォーマンス"

msgid ""
"When running in a mode that does not match the view (e.g. an async view "
"under WSGI, or a traditional sync view under ASGI), Django must emulate the "
"other call style to allow your code to run. This context-switch causes a "
"small performance penalty of around a millisecond."
msgstr ""
"ビューと異なるモードで実行 (たとえば、非同期のビューを WSGI で実行、従来の同"
"期ビューを ASGI で実行) した場合、Django はコードを実行するために、もう一方の"
"呼び出しスタイルをエミュレートする必要があります。コンテキストスイッチによ"
"り、1 ms 程度の小さな性能上のペナルティが与えられてしまいます。"

msgid ""
"This is also true of middleware. Django will attempt to minimize the number "
"of context-switches between sync and async. If you have an ASGI server, but "
"all your middleware and views are synchronous, it will switch just once, "
"before it enters the middleware stack."
msgstr ""
"これはミドルウェアでも同様です。Django は同期・非同期の間のコンテキストスイッ"
"チの数を最小化するように試みます。もし ASGI サーバーがあっても、すべてのミド"
"ルウェアとビューが同期的だった場合、コンテキストスイッチは、サーバーがミドル"
"ウェアスタックに入る前の1回だけです。"

msgid ""
"However, if you put synchronous middleware between an ASGI server and an "
"asynchronous view, it will have to switch into sync mode for the middleware "
"and then back to async mode for the view. Django will also hold the sync "
"thread open for middleware exception propagation. This may not be noticeable "
"at first, but adding this penalty of one thread per request can remove any "
"async performance advantage."
msgstr ""
"しかし、同期ミドルウェアをASGIサーバーと非同期ビューの間においた場合、サー"
"バーはミドルウェアのために同期モードに切り替え、ビューのために非同期モードに"
"また戻さなければならなくなります。Django はミドルウェアの例外の伝搬のために同"
"期スレッドも保持し続けます。これは初めは気づかないほどの違いかもしれません"
"が、1リクエストごとに1スレッドのペナルティが与えられると、非同期の性能上の利"
"点がすべて打ち消されてしまう可能性があります。"

msgid ""
"You should do your own performance testing to see what effect ASGI versus "
"WSGI has on your code. In some cases, there may be a performance increase "
"even for a purely synchronous codebase under ASGI because the request-"
"handling code is still all running asynchronously. In general you will only "
"want to enable ASGI mode if you have asynchronous code in your project."
msgstr ""
"自分のコード上での ASGI と WSGI の違いの影響を知るためには、自分自身でパ"
"フォーマンステストを行うべきです。場合によっては、純粋に同期的なコードベース"
"を ASGI 上で実行した場合でも、性能が向上することがあります。これは、それでも"
"リクエストハンドリングのコードはすべて非同期に実行されるためです。一般的に"
"は、ASGI モードを有効にする必要があるのは、プロジェクトに非同期のコードがある"
"ときだけです。"

msgid "Handling disconnects"
msgstr "切断をハンドリングする"

msgid ""
"For long-lived requests, a client may disconnect before the view returns a "
"response. In this case, an ``asyncio.CancelledError`` will be raised in the "
"view. You can catch this error and handle it if you need to perform any "
"cleanup::"
msgstr ""
"長時間のリクエストの場合、ビューが応答を返す前にクライアントが切断することが"
"あります。この場合、asyncio.CancelledErrorがビューで発生します。このエラーを"
"キャッチし、クリーンアップが必要な場合にハンドリングできます:"

msgid ""
"You can also :ref:`handle client disconnects in streaming responses <request-"
"response-streaming-disconnect>`."
msgstr ""
"また、:ref:`ストリーミングレスポンスでクライアントの切断をハンドリングする "
"<request-response-streaming-disconnect>` こともできます。"

msgid "Async safety"
msgstr "非同期安全性"

msgid ""
"Certain key parts of Django are not able to operate safely in an async "
"environment, as they have global state that is not coroutine-aware. These "
"parts of Django are classified as \"async-unsafe\", and are protected from "
"execution in an async environment. The ORM is the main example, but there "
"are other parts that are also protected in this way."
msgstr ""
"Django の特定の主要なパーツは、コルーチンが感知できないグローバルステートを持"
"つため、非同期の環境では安全に操作できません。これらの Django のパーツ"
"は、\"async-unsafe\" として分類されており、非同期な環境での実行から保護されて"
"います。ORM は主な例ですが、この他にもこのように保護されているパーツがありま"
"す。"

msgid ""
"If you try to run any of these parts from a thread where there is a *running "
"event loop*, you will get a :exc:`~django.core.exceptions."
"SynchronousOnlyOperation` error. Note that you don't have to be inside an "
"async function directly to have this error occur. If you have called a sync "
"function directly from an async function, without using :func:"
"`sync_to_async` or similar, then it can also occur. This is because your "
"code is still running in a thread with an active event loop, even though it "
"may not be declared as async code."
msgstr ""
"*実行中のイベントループ* があるスレッドからこれらのパーツを実行しようとする"
"と、 :exc:`~django.core.exceptions.SynchronousOnlyOperation` エラーが発生しま"
"す。このエラーは、非同期関数の内部でなくても発生することに注意してくださ"
"い。 :func:`sync_to_async` などを使わずに、非同期関数から直接同期関数を呼び出"
"した場合にも発生します。これは、コードが同期コードとして宣言されていなくて"
"も、アクティブなイベントループを持つスレッドで実行されているためです。"

msgid ""
"If you encounter this error, you should fix your code to not call the "
"offending code from an async context. Instead, write your code that talks to "
"async-unsafe functions in its own, sync function, and call that using :func:"
"`asgiref.sync.sync_to_async` (or any other way of running sync code in its "
"own thread)."
msgstr ""
"このエラーが発生した場合は、問題のコードを非同期コンテキストから呼び出さない"
"ように修正する必要があります。代わりに、独自の同期関数それ自体の中で async-"
"unsafe と通信するコードを書き、  :func:`asgiref.sync.sync_to_async` (または、"
"自スレッド内で同期コードを実行するための他の方法) を使って呼び出します。"

msgid ""
"The async context can be imposed upon you by the environment in which you "
"are running your Django code. For example, Jupyter_ notebooks and IPython_ "
"interactive shells both transparently provide an active event loop so that "
"it is easier to interact with asynchronous APIs."
msgstr ""
"非同期コンテキストは、Django コードを実行している環境によって与えられる場合も"
"あります。たとえば、Jupyter_ notebooks や IPython_ 対話シェルはともにアクティ"
"ブなイベントループを透過的に提供してくれるため、非同期 API との対話がより簡単"
"になります。"

msgid ""
"If you're using an IPython shell, you can disable this event loop by running:"
msgstr ""
"もし IPython shell を使用している場合は、次のコマンドでこのイベントループを無"
"効化できます。"

msgid ""
"as a command at the IPython prompt. This will allow you to run synchronous "
"code without generating :exc:`~django.core.exceptions."
"SynchronousOnlyOperation` errors; however, you also won't be able to "
"``await`` asynchronous APIs. To turn the event loop back on, run:"
msgstr ""
"これは IPython のプロンプトのコマンドです。これにより同期的なコードを :exc:"
"`~django.core.exceptions.SynchronousOnlyOperation` エラーを起こさずに実行でき"
"るようになりますが、同時に、非同期 API を ``await`` することもできなくなりま"
"す。イベントループを戻すには、次のコマンドを実行します。"

msgid ""
"If you're in an environment other than IPython (or you can't turn off "
"``autoawait`` in IPython for some reason), you are *certain* there is no "
"chance of your code being run concurrently, and you *absolutely* need to run "
"your sync code from an async context, then you can disable the warning by "
"setting the :envvar:`DJANGO_ALLOW_ASYNC_UNSAFE` environment variable to any "
"value."
msgstr ""
"IPython 以外の環境にいる場合 (または、何らかの理由で IPython で "
"``autoawait`` がオフにできない場合)、コードが並行して実行される可能性は *確実"
"に* ないため、同期コードは *絶対に* 非同期コンテキストから実行する必要があり"
"ます。このとき、警告は :envvar:`DJANGO_ALLOW_ASYNC_UNSAFE` 環境変数を任意の値"
"に設定することで無効化できます。"

msgid ""
"If you enable this option and there is concurrent access to the async-unsafe "
"parts of Django, you may suffer data loss or corruption. Be very careful and "
"do not use this in production environments."
msgstr ""
"このオプションを有効にした上で、Djangoの  async-unsafe パーツへ同時アクセスが"
"あると、データが失われたり壊れたりする可能性があります。十分な注意を払い、本"
"番環境では使用しないでください。"

msgid ""
"If you need to do this from within Python, do that with ``os.environ``::"
msgstr ""
"もし、これをPython内部から行いたい場合は、``os.environ`` を使用してください。"

msgid "Async adapter functions"
msgstr "非同期アダプター関数"

msgid ""
"It is necessary to adapt the calling style when calling sync code from an "
"async context, or vice-versa. For this there are two adapter functions, from "
"the ``asgiref.sync`` module: :func:`async_to_sync` and :func:"
"`sync_to_async`. They are used to transition between the calling styles "
"while preserving compatibility."
msgstr ""
"同期コードを非同期コンテキストから呼び出したり、その逆をするためには、呼び出"
"しスタイルを調整する必要があります。このために``asgiref.sync`` モジュールの :"
"func:`async_to_sync` と :func:`sync_to_async` という2つのアダプター関数があり"
"ます。これらは互換性を維持したまま呼び出しスタイル間を移行するために使われま"
"す。"

msgid ""
"These adapter functions are widely used in Django. The :pypi:`asgiref` "
"package itself is part of the Django project, and it is automatically "
"installed as a dependency when you install Django with ``pip``."
msgstr ""
"これらのアダプター関数は Django で幅広く利用されています。:pypi:`asgiref` "
"パッケージ自体が Django プロジェクトの一部になっており、Django を ``pip`` で"
"インストールしたときに自動的に依存関係としてインストールされます。"

msgid "``async_to_sync()``"
msgstr "``async_to_sync()``"

msgid ""
"Takes an async function and returns a sync function that wraps it. Can be "
"used as either a direct wrapper or a decorator::"
msgstr ""
"非同期関数を取り、それをラッピングした同期関数を返します。直接ラッパーとして"
"もデコレーターとしても使用できます。"

msgid ""
"The async function is run in the event loop for the current thread, if one "
"is present. If there is no current event loop, a new event loop is spun up "
"specifically for the single async invocation and shut down again once it "
"completes. In either situation, the async function will execute on a "
"different thread to the calling code."
msgstr ""
"非同期関数は、もし存在すれば、現在のスレッドのイベントループの中で実行されま"
"す。現在のイベントループが存在しない場合、1つの非同期呼び出しのために専用の新"
"しいイベントループが生成され、完了したら再び破棄されます。どちらの状況でも、"
"非同期関数はコードが呼び出されたスレッドとは異なるスレッドで実行されます。"

msgid ""
"Threadlocals and contextvars values are preserved across the boundary in "
"both directions."
msgstr "threadlocal とコンテキスト変数の値は双方向に境界を越えて保持されます。"

msgid ""
":func:`async_to_sync` is essentially a more powerful version of the :py:func:"
"`asyncio.run` function in Python's standard library. As well as ensuring "
"threadlocals work, it also enables the ``thread_sensitive`` mode of :func:"
"`sync_to_async` when that wrapper is used below it."
msgstr ""
":func:`async_to_sync` は、Python 標準ライブラリの :py:func:`asyncio.run` 関数"
"の強力なバージョンです。threadlocal が確実に機能するようにするだけでなく、そ"
"れより下で :func:`sync_to_async` のラッパーが使用されるときに、"
"``thread_sensitive`` モードも有効にします。"

msgid "``sync_to_async()``"
msgstr "``sync_to_async()``"

msgid ""
"Takes a sync function and returns an async function that wraps it. Can be "
"used as either a direct wrapper or a decorator::"
msgstr ""
"同期関数を取り、それをラッピングした非同期関数を返します。直接ラッパーとして"
"もデコレーターとしても使用できます。"

msgid ""
"Sync functions tend to be written assuming they all run in the main thread, "
"so :func:`sync_to_async` has two threading modes:"
msgstr ""
"同期関数はすべてメインスレッド内で実行されることを想定して書かれる傾向がある"
"ため、:func:`sync_to_async` には2種類の threading モードがあります。"

msgid ""
"``thread_sensitive=True`` (the default): the sync function will run in the "
"same thread as all other ``thread_sensitive`` functions. This will be the "
"main thread, if the main thread is synchronous and you are using the :func:"
"`async_to_sync` wrapper."
msgstr ""
"``thread_sensitive=True`` (デフォルト): 同期関数は他のすべての "
"``thread_sensitive`` 関数と同じスレッド内で実行されます。もしメインスレッドが"
"同期的で :func:`async_to_sync` ラッパーを使用している場合、このスレッドはメイ"
"ンスレッドになるでしょう。"

msgid ""
"``thread_sensitive=False``: the sync function will run in a brand new thread "
"which is then closed once the invocation completes."
msgstr ""
"``thread_sensitive=False``: 同期関数は、まったく新しいスレッドで実行されま"
"す。そのスレッドは、その後呼び出しが完了すると閉じられます。"

msgid ""
"``asgiref`` version 3.3.0 changed the default value of the "
"``thread_sensitive`` parameter to ``True``. This is a safer default, and in "
"many cases interacting with Django the correct value, but be sure to "
"evaluate uses of ``sync_to_async()`` if updating ``asgiref`` from a prior "
"version."
msgstr ""
"``asgiref`` バージョン 3.3.0 は ``thread_sensitive`` のデフォルト値を "
"``True`` に変更しました。これは安全側のデフォルトなので、多くの場合、正しい値"
"で Django とインタラクションしますが、以前のバージョンから ``asgiref`` をアッ"
"プデートする場合は、必ず ``sync_to_async()`` の使用を評価してください。"

msgid ""
"Thread-sensitive mode is quite special, and does a lot of work to run all "
"functions in the same thread. Note, though, that it *relies on usage of* :"
"func:`async_to_sync` *above it in the stack* to correctly run things on the "
"main thread. If you use ``asyncio.run()`` or similar, it will fall back to "
"running thread-sensitive functions in a single, shared thread, but this will "
"not be the main thread."
msgstr ""
"thread-sensitive モードは極めて特別なモードで、すべての関数が同一スレッドで実"
"行されるようにするためにたくさんの仕事を行います。ただし、メインスレッドで正"
"しく動作するように、*スタック内での* :func:`async_to_sync` *の使用に依存して"
"いる* ことに注意してください。もし ``asyncio.run()`` や類似のメソッドを使用し"
"た場合、thread-sensitive な関数は単一の共有スレッドでの実行にフォールバックし"
"ますが、これはメインスレッドではありません。"

msgid ""
"The reason this is needed in Django is that many libraries, specifically "
"database adapters, require that they are accessed in the same thread that "
"they were created in. Also a lot of existing Django code assumes it all runs "
"in the same thread, e.g. middleware adding things to a request for later use "
"in views."
msgstr ""
"Django でこれが必要な理由は、多くのライブラリ、特にデータベースアダプターが、"
"自分が作られたのと同一スレッド内でのアクセスを必要とするためです。また、既存"
"の多くの Django コードも、すべてが同一スレッドで実行されることを想定していま"
"す。たとえば、ビュー内で後で使用するためにリクエストに何かを追加するミドル"
"ウェアです。"

msgid ""
"Rather than introduce potential compatibility issues with this code, we "
"instead opted to add this mode so that all existing Django sync code runs in "
"the same thread and thus is fully compatible with async mode. Note that sync "
"code will always be in a *different* thread to any async code that is "
"calling it, so you should avoid passing raw database handles or other thread-"
"sensitive references around."
msgstr ""
"このコードによって潜在的な互換性の問題を引き起こす代わりに、私たちはこのモー"
"ドを追加する選択をしました。これにより、既存のすべての Django の同期コードが"
"同一スレッドで実行されるようになり、したがって、非同期モードと完全に互換にな"
"ります。同期コードは、それを呼び出すすべての非同期コードとは常に *異なる* ス"
"レッド内にあるため、生のデータベースハンドルや、その他 thread-sensitive な参"
"照を渡すことは避ける必要があることに注意してください。"

msgid ""
"In practice this restriction means that you should not pass features of the "
"database ``connection`` object when calling ``sync_to_async()``. Doing so "
"will trigger the thread safety checks:"
msgstr ""
"実用的には、この制限は、``sync_to_async()`` を呼び出すときにデータベースの "
"``connection`` オブジェクトの機能を渡してはならないことを意味します。もしそう"
"した場合、スレッド安全性のチェックがトリガーされます:"

msgid ""
"Rather, you should encapsulate all database access within a helper function "
"that can be called with ``sync_to_async()`` without relying on the "
"connection object in the calling code."
msgstr ""
"代わりに、呼び出しコード内の connection オブジェクトに依存せずに、"
"``sync_to_async()`` で呼び出すことができるヘルパー関数内にすべてのデータベー"
"スアクセスをカプセル化する必要があります。"

msgid "Customizing authentication in Django"
msgstr "Django の認証方法のカスタマイズ"

msgid ""
"The authentication that comes with Django is good enough for most common "
"cases, but you may have needs not met by the out-of-the-box defaults. "
"Customizing authentication in your projects requires understanding what "
"points of the provided system are extensible or replaceable. This document "
"provides details about how the auth system can be customized."
msgstr ""
"Django がデフォルトで提供する認証機能は、ほとんどの一般的なケースでは十分なも"
"のですが、デフォルトではニーズにマッチしない場合もあると思います。自分のプロ"
"ジェクトで認証のカスタマイズを行うためには、Django が提供する認証システムをど"
"の場所で拡張・置換できるかという知識が必要です。このドキュメントでは、認証シ"
"ステムをカスタマイズする方法の詳細について説明します。"

msgid ""
":ref:`Authentication backends <authentication-backends>` provide an "
"extensible system for when a username and password stored with the user "
"model need to be authenticated against a different service than Django's "
"default."
msgstr ""
":ref:`認証バックエンド <authentication-backends>` を利用すると、ユーザーモデ"
"ルに保存されたユーザー名とパスワードを用いて異なるサービス間での認証を行う必"
"要が生じた場合に Django 標準よりも高い拡張性を持たせることができます。"

msgid ""
"You can give your models :ref:`custom permissions <custom-permissions>` that "
"can be checked through Django's authorization system."
msgstr ""
"モデルには、Django の認可システムで検証可能な :ref:`カスタムパーミッション "
"<custom-permissions>` を組み込むことができます。"

msgid ""
"You can :ref:`extend <extending-user>` the default ``User`` model, or :ref:"
"`substitute <auth-custom-user>` a completely customized model."
msgstr ""
"デフォルトの ``User`` モデルを :ref:`拡張 <extending-user>` したり、完全にカ"
"スタマイズしたモデルと :ref:`置換 <auth-custom-user>` したりできます。"

msgid "Other authentication sources"
msgstr "他の認証ソースを利用する"

msgid ""
"There may be times you have the need to hook into another authentication "
"source -- that is, another source of usernames and passwords or "
"authentication methods."
msgstr ""
"別の認証ソース、つまり、ユーザー名とパスワード、または他の認証方法を持つ別の"
"ソースにフックする必要がある場合があるかも知れません。"

msgid ""
"For example, your company may already have an LDAP setup that stores a "
"username and password for every employee. It'd be a hassle for both the "
"network administrator and the users themselves if users had separate "
"accounts in LDAP and the Django-based applications."
msgstr ""
"たとえば、あなたの会社ですでに全ての従業員のユーザ名とパスワードを記録してい"
"るLDAP認証があるとしましょう。もしユーザがLDAP認証とDjangoアプリケーションで"
"異なるアカウントだとしたらネットワーク管理者とユーザで口論になるでしょう。"

msgid ""
"So, to handle situations like this, the Django authentication system lets "
"you plug in other authentication sources. You can override Django's default "
"database-based scheme, or you can use the default system in tandem with "
"other systems."
msgstr ""
"そこでこのような状況に対応するためにDjangoの認証システムは他の認証システムの"
"リソースと接続できます。あなたはDjangoのデフォルトのデータベーススキーマを"
"オーバーライドするか、他のシステムを連携するためにデフォルトシステムを使うこ"
"とができます。"

msgid ""
"See the :ref:`authentication backend reference <authentication-backends-"
"reference>` for information on the authentication backends included with "
"Django."
msgstr ""
"Django に含まれている認証バックエンドに関する情報は :ref:`認証バックエンドリ"
"ファレンス <authentication-backends-reference>` を参照してください。 "

msgid "Specifying authentication backends"
msgstr "認証バックエンドを指定する"

msgid ""
"Behind the scenes, Django maintains a list of \"authentication backends\" "
"that it checks for authentication. When somebody calls :func:`django.contrib."
"auth.authenticate()` -- as described in :ref:`How to log a user in <how-to-"
"log-a-user-in>` -- Django tries authenticating across all of its "
"authentication backends. If the first authentication method fails, Django "
"tries the second one, and so on, until all backends have been attempted."
msgstr ""
"Djangoは内部で、「認証バックエンド」と呼ばれるリストを保持しており、認証のた"
"めにそれをチェックします。誰かが :func:`django.contrib.auth.authenticate()` "
"を呼び出したとき（:ref:`ユーザーをログインさせる方法 <how-to-log-a-user-in>` "
"に記載されているように）、Djangoはすべての認証バックエンドを通じて認証を試み"
"ます。最初の認証方法が失敗した場合、Djangoは次のものを試し、すべてのバックエ"
"ンドが試行されるまで続けます。"

msgid ""
"The list of authentication backends to use is specified in the :setting:"
"`AUTHENTICATION_BACKENDS` setting. This should be a list of Python path "
"names that point to Python classes that know how to authenticate. These "
"classes can be anywhere on your Python path."
msgstr ""
"認証バックエンドとして利用するリストは :setting:`AUTHENTICATION_BACKENDS` に"
"定義されています。この設定値は認証方法を定義している Python クラスを指定する "
"Python パスのリスト型変数でなければなりません。これらのクラスはあなたの環境で"
"有効な Python パスのどこにでも配置可能です。"

msgid "By default, :setting:`AUTHENTICATION_BACKENDS` is set to::"
msgstr ""
"初期状態では、:setting:`AUTHENTICATION_BACKENDS` は以下の値として定義されてい"
"ます。::"

msgid ""
"That's the basic authentication backend that checks the Django users "
"database and queries the built-in permissions. It does not provide "
"protection against brute force attacks via any rate limiting mechanism. You "
"may either implement your own rate limiting mechanism in a custom auth "
"backend, or use the mechanisms provided by most web servers."
msgstr ""
"これは Django のユーザーデータベースを確認してビルトインの権限を照会する基本"
"的な認証バックエンドです。このバックエンドにはログイン試行を制限することでブ"
"ルートフォース攻撃を防御する仕組みは提供していません。独自に試行制限を実装し"
"た認証バックエンドを利用するか、多くのウェブサーバーで提供されている各種防御"
"機構が利用可能です。"

msgid ""
"The order of :setting:`AUTHENTICATION_BACKENDS` matters, so if the same "
"username and password is valid in multiple backends, Django will stop "
"processing at the first positive match."
msgstr ""
":setting:`AUTHENTICATION_BACKENDS` への順番は処理に影響し、同じユーザー名とパ"
"スワードによって複数のバックエンドで有効な認証と判定されれば、Django は最初に"
"有効と判定した時点で処理を終了します。"

msgid ""
"If a backend raises a :class:`~django.core.exceptions.PermissionDenied` "
"exception, authentication will immediately fail. Django won't check the "
"backends that follow."
msgstr ""
"ある認証バックエンドにおいて :class:`~django.core.exceptions."
"PermissionDenied` 例外が発生した場合、認証処理は直ちに終了し、Django は続く認"
"証バックエンドに対する認証判定を行いません。"

msgid ""
"Once a user has authenticated, Django stores which backend was used to "
"authenticate the user in the user's session, and reuses the same backend for "
"the duration of that session whenever access to the currently authenticated "
"user is needed. This effectively means that authentication sources are "
"cached on a per-session basis, so if you change :setting:"
"`AUTHENTICATION_BACKENDS`, you'll need to clear out session data if you need "
"to force users to re-authenticate using different methods. A simple way to "
"do that is to execute ``Session.objects.all().delete()``."
msgstr ""
"一度ユーザーが認証されると、Django はユーザーの認証に使われたバックエンドの種"
"類をユーザーのセッションに保存し、現在認証されているユーザーへのアクセスが必"
"要なときはいつでも、そのセッションの間は同じバックエンドを再利用します。これ"
"は事実上、認証元がセッションごとにキャッシュされることを意味するため、:"
"setting:`AUTHENTICATION_BACKENDS` を変更したとき、ユーザーに別の方法を使用し"
"た再認証を強制する必要がある場合、セッションデータを消去する必要があります。"
"そのための簡単な方法は、``Session.objects.all().delete()`` の実行です。"

msgid "Writing an authentication backend"
msgstr "認証バックエンドの実装"

msgid ""
"An authentication backend is a class that implements two required methods: "
"``get_user(user_id)`` and ``authenticate(request, **credentials)``, as well "
"as a set of optional permission related :ref:`authorization methods "
"<authorization_methods>`."
msgstr ""
"認証 (authentication) バックエンドは、2つの必須メソッド: "
"``get_user(user_id)`` と ``authenticate(request, **credentials)`` を実装した"
"クラスであり、パーミッションに関連した省略可能な :ref:`認可 (authorization) "
"メソッド <authorization_methods>` もあります。"

msgid ""
"The ``get_user`` method takes a ``user_id`` -- which could be a username, "
"database ID or whatever, but has to be the primary key of your user object "
"-- and returns a user object or ``None``."
msgstr ""
"``get_user`` メソッドは ``user_id`` 引数を取ります。これはユーザーネーム、"
"データベースID、またはその他何でもかまいませんが、ユーザーオブジェクトの主"
"キーである必要があります。そして、ユーザーオブジェクトまたは ``None`` を返し"
"ます。"

msgid ""
"The ``authenticate`` method takes a ``request`` argument and credentials as "
"keyword arguments. Most of the time, it'll look like this::"
msgstr ""
"``authenticate`` メソッドは ``request`` 引数と credentials キーワード引数を取"
"ります。殆どの場合、これは次のようになります。"

msgid "But it could also authenticate a token, like so::"
msgstr "一方、次のように認証トークンでも表せます。"

msgid ""
"Either way, ``authenticate()`` should check the credentials it gets and "
"return a user object that matches those credentials if the credentials are "
"valid. If they're not valid, it should return ``None``."
msgstr ""
"いずれの場合にせよ、 ``authenticate()`` は与えられた認証情報を確認し、それが"
"有効であれば、認証情報とマッチしたユーザーオブジェクトを返すべきです。それが"
"有効でなければ ``None`` を返すべきです。"

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` and may be ``None`` if "
"it wasn't provided to :func:`~django.contrib.auth.authenticate` (which "
"passes it on to the backend)."
msgstr ""
"``request`` は :class:`~django.http.HttpRequest` で、  :func:`~django."
"contrib.auth.authenticate` が提供されていない場合は ``None``  となる可能性が"
"あります (バックエンドでこれを通過するため)。"

msgid ""
"The Django admin is tightly coupled to the Django :ref:`User object <user-"
"objects>`. The best way to deal with this is to create a Django ``User`` "
"object for each user that exists for your backend (e.g., in your LDAP "
"directory, your external SQL database, etc.) You can either write a script "
"to do this in advance, or your ``authenticate`` method can do it the first "
"time a user logs in."
msgstr ""
"Django の admin は Django の :ref:`User オブジェクト <user-objects>` と強く結"
"合しています。これを扱う最も良い方法は Django の ``User`` オブジェクトを、あ"
"なたのバックエンド（たとえば、LDAP ディレクトリや外部の SQL データベースな"
"ど）に存在するそれぞれのユーザーに対して作成することです。これを行うためのス"
"クリプトを事前に記述しておくか、ユーザーが初めてログインするときに "
"``authenticate`` メソッドがこれを行えるようにしておくと良いでしょう。"

msgid ""
"Here's an example backend that authenticates against a username and password "
"variable defined in your ``settings.py`` file and creates a Django ``User`` "
"object the first time a user authenticates::"
msgstr ""
"次に示すのが、 ``settings.py`` で定義されたユーザー名とパスワードの変数に対し"
"て認証し、ユーザーの認証が初めてであった場合に Django の ``User`` オブジェク"
"トを作成するバックエンドの例です。"

msgid "Handling authorization in custom backends"
msgstr "カスタムバックエンドによる認可の扱い"

msgid "Custom auth backends can provide their own permissions."
msgstr "カスタム認証バックエンドはそれら独自のパーミッションを提供できます。"

msgid ""
"The user model and its manager will delegate permission lookup functions (:"
"meth:`~django.contrib.auth.models.User.get_user_permissions()`, :meth:"
"`~django.contrib.auth.models.User.get_group_permissions()`, :meth:`~django."
"contrib.auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth."
"models.User.has_perm()`, :meth:`~django.contrib.auth.models.User."
"has_module_perms()`, and :meth:`~django.contrib.auth.models.UserManager."
"with_perm()`) to any authentication backend that implements these functions."
msgstr ""
"ユーザーモデルとそのマネージャは、ルックアップ関数を実装している認証バックエ"
"ンドが何であっても、ルックアップ関数 (:meth:`~django.contrib.auth.models."
"User.get_user_permissions()`、:meth:`~django.contrib.auth.models.User."
"get_group_permissions()`、:meth:`~django.contrib.auth.models.User."
"get_all_permissions()`、:meth:`~django.contrib.auth.models.User."
"has_perm()`、:meth:`~django.contrib.auth.models.User.has_module_perms()`、:"
"meth:`~django.contrib.auth.models.UserManager.with_perm()`) に権限を移譲しま"
"す。"

msgid ""
"The permissions given to the user will be the superset of all permissions "
"returned by all backends. That is, Django grants a permission to a user that "
"any one backend grants."
msgstr ""
"これによりユーザーに与えられたパーミッションは全てのバックエンドが返すすべて"
"のパーミッションの上位セットになります。つまり、Django はユーザーに、任意の"
"バックエンドが付与するパーミッションを与えます。"

msgid ""
"If a backend raises a :class:`~django.core.exceptions.PermissionDenied` "
"exception in :meth:`~django.contrib.auth.models.User.has_perm()` or :meth:"
"`~django.contrib.auth.models.User.has_module_perms()`, the authorization "
"will immediately fail and Django won't check the backends that follow."
msgstr ""
"もし例外 :class:`~django.core.exceptions.PermissionDenied`  を :meth:"
"`~django.contrib.auth.models.User.has_perm()` か :meth:`~django.contrib.auth."
"models.User.has_module_perms()` の中でバックエンドが出した場合、認可は直ちに"
"失敗し、 Django はそこから続くバックエンドを確認しません。"

msgid "A backend could implement permissions for the magic admin like this::"
msgstr ""
"バックエンドは、魔法のような admin のパーミッションを次のように実装できます。"

msgid ""
"This gives full permissions to the user granted access in the above example. "
"Notice that in addition to the same arguments given to the associated :class:"
"`django.contrib.auth.models.User` functions, the backend auth functions all "
"take the user object, which may be an anonymous user, as an argument."
msgstr ""
"上記の例では、アクセスしたユーザーに全てのパーミッションを付与します。注意す"
"べき点として、関数 :class:`django.contrib.auth.models.User` から関連して得ら"
"れた同じ引数は、バックエンド認証関数は、匿名のユーザーを表すものも含んでいる"
"かもしれない、全てのユーザーオブジェクトを引数として取る点があります。"

msgid ""
"A full authorization implementation can be found in the ``ModelBackend`` "
"class in :source:`django/contrib/auth/backends.py`, which is the default "
"backend and queries the ``auth_permission`` table most of the time."
msgstr ""
"認可の実装の完全なものは :source:`django/contrib/auth/backends.py` の "
"``ModelBackend`` クラスにあり、これはデフォルトのバックエンドであり、ほとんど"
"の場合 ``auth_permission`` テーブルを照会します。"

msgid "Authorization for anonymous users"
msgstr "匿名ユーザーに対する認可"

msgid ""
"An anonymous user is one that is not authenticated i.e. they have provided "
"no valid authentication details. However, that does not necessarily mean "
"they are not authorized to do anything. At the most basic level, most "
"websites authorize anonymous users to browse most of the site, and many "
"allow anonymous posting of comments etc."
msgstr ""
"匿名ユーザーは認証されていないユーザー、すなわち、有効な認証の詳細を何も提供"
"しないユーザーです。しかし、それは必ずしも匿名ユーザーが何かを行うことを認可"
"されないことを意味するわけではありません。最も基本的な基準として、ほとんどの"
"ウェブサイトは匿名ユーザーにサイトの大部分を閲覧する権限を与え、その多くは匿"
"名ユーザーにコメント投稿などを許可しています。"

msgid ""
"Django's permission framework does not have a place to store permissions for "
"anonymous users. However, the user object passed to an authentication "
"backend may be an :class:`django.contrib.auth.models.AnonymousUser` object, "
"allowing the backend to specify custom authorization behavior for anonymous "
"users. This is especially useful for the authors of reusable apps, who can "
"delegate all questions of authorization to the auth backend, rather than "
"needing settings, for example, to control anonymous access."
msgstr ""
"Django の認証フレームワークには、匿名ユーザーのアクセス許可を格納する場所はあ"
"りません。しかし、認証バックエンドに渡されたユーザーオブジェクトは :class:"
"`django.contrib.auth.models.AnonymousUser` オブジェクトとなることがあります。"
"これにより、バックエンドは匿名ユーザー向けのカスタムの認可動作を指定できま"
"す。この仕組みで特に便利なのは、再利用可能なアプリの作者が、たとえば匿名アク"
"セスの制御の設定をする必要がなくなり、認可に関するすべての質問を認証バックエ"
"ンドに移譲できるようになるような場合です。"

msgid "Authorization for inactive users"
msgstr "アクティブでないユーザーに対する認可"

msgid ""
"An inactive user is one that has its :attr:`~django.contrib.auth.models.User."
"is_active` field set to ``False``. The :class:`~django.contrib.auth.backends."
"ModelBackend` and :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"authentication backends prohibits these users from authenticating. If a "
"custom user model doesn't have an :attr:`~django.contrib.auth.models."
"CustomUser.is_active` field, all users will be allowed to authenticate."
msgstr ""
":attr:`~django.contrib.auth.models.User.is_active` フィールドが ``False`` と"
"なっているユーザーを、アクティブでないユーザーと呼びます。認証バックエンド :"
"class:`~django.contrib.auth.backends.ModelBackend` と :class:`~django."
"contrib.auth.backends.RemoteUserBackend` はこれらのユーザーの認証行為を禁止し"
"ます。カスタムユーザーモデルが :attr:`~django.contrib.auth.models.CustomUser."
"is_active` を持っていない場合、すべてのユーザーの認証行為が許可されます。"

msgid ""
"You can use :class:`~django.contrib.auth.backends.AllowAllUsersModelBackend` "
"or :class:`~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend` if "
"you want to allow inactive users to authenticate."
msgstr ""
"もし、アクティブでないユーザーの認証行為を許可したい場合は、:class:`~django."
"contrib.auth.backends.AllowAllUsersModelBackend` や :class:`~django.contrib."
"auth.backends.AllowAllUsersRemoteUserBackend` を使用できます。"

msgid ""
"The support for anonymous users in the permission system allows for a "
"scenario where anonymous users have permissions to do something while "
"inactive authenticated users do not."
msgstr ""
"パーミッションシステムが匿名ユーザーをサポートしている場合、匿名ユーザーが"
"パーミッションを持つ操作であっても、アクティブでないユーザーにはそれができな"
"いということが起こりえます。"

msgid ""
"Do not forget to test for the ``is_active`` attribute of the user in your "
"own backend permission methods."
msgstr ""
"バックエンドで独自のパーミッションメソッド持つときは、ユーザーの "
"``is_active`` 属性のテストを忘れずに行ってください。"

msgid "Handling object permissions"
msgstr "オブジェクトのパーミッションの取扱い"

msgid ""
"Django's permission framework has a foundation for object permissions, "
"though there is no implementation for it in the core. That means that "
"checking for object permissions will always return ``False`` or an empty "
"list (depending on the check performed). An authentication backend will "
"receive the keyword parameters ``obj`` and ``user_obj`` for each object "
"related authorization method and can return the object level permission as "
"appropriate."
msgstr ""
"Django のパーミッションフレームワークはオブジェクトパーミッション基盤を持って"
"いますが、コアには実装されていません。これにより、オブジェクトパーミッション"
"のチェックは常に ``False`` または空のリスト（実行されたチェックに応じていずれ"
"か）が返されます。認証バックエンドは、オブジェクトに関連した認可メソッドごと"
"に ``obj`` および ``user_obj`` のキーワードパラメータを受け取り、必要に応じて"
"オブジェクトレベルのパーミッションを返します。"

msgid "Custom permissions"
msgstr "カスタムパーミッション"

msgid ""
"To create custom permissions for a given model object, use the "
"``permissions`` :ref:`model Meta attribute <meta-options>`."
msgstr ""
"モデルオブジェクトに対してカスタムパーミッションを作成したい場合は :ref:`モデ"
"ルの Meta 属性 <meta-options>` ``permissions`` を使用してください。"

msgid ""
"This example ``Task`` model creates two custom permissions, i.e., actions "
"users can or cannot do with ``Task`` instances, specific to your "
"application::"
msgstr ""
"この例の ``Task`` モデルは、2つのカスタムパーミッションを作成します。すなわ"
"ち、このアプリケーションにおいて、ユーザーが ``Task`` インスタンスに関係し"
"て、できることとできないことを規定します。"

msgid ""
"The only thing this does is create those extra permissions when you run :"
"djadmin:`manage.py migrate <migrate>` (the function that creates permissions "
"is connected to the :data:`~django.db.models.signals.post_migrate` signal). "
"Your code is in charge of checking the value of these permissions when a "
"user is trying to access the functionality provided by the application "
"(changing the status of tasks or closing tasks.) Continuing the above "
"example, the following checks if a user may close tasks::"
msgstr ""
"これは :djadmin:`manage.py migrate <migrate>` を実行したときに、追加のパー"
"ミッションを作成するだけです (パーミッションを作成する関数は :data:`~django."
"db.models.signals.post_migrate` シグナルに接続されています)。あなたがコード内"
"でやることは、ユーザがアプリケーションの提供する機能(タスクのステータスを変更"
"したり、タスクを閉じたり)にアクセスしようとしたときに、これらのパーミッション"
"の値をチェックすることです。上記の例の続きで、次のコードはユーザーがタスクを"
"閉じることができるかどうかをチェックします:"

msgid "Extending the existing ``User`` model"
msgstr "既存の ``User`` モデルを拡張する"

msgid ""
"There are two ways to extend the default :class:`~django.contrib.auth.models."
"User` model without substituting your own model. If the changes you need are "
"purely behavioral, and don't require any change to what is stored in the "
"database, you can create a :ref:`proxy model <proxy-models>` based on :class:"
"`~django.contrib.auth.models.User`. This allows for any of the features "
"offered by proxy models including default ordering, custom managers, or "
"custom model methods."
msgstr ""
"独自のモデルを使用することなく、デフォルトのモデル :class:`~django.contrib."
"auth.models.User` を拡張する方法が2つあります。振る舞いのみを変更し、データ"
"ベースに格納されている内容を変更する必要がない場合は :class:`~django.contrib."
"auth.models.User` に基づいて :ref:`プロキシモデル <proxy-models>` を作成でき"
"ます。これにより、デフォルトの並び順、カスタムマネージャ、カスタムモデルメ"
"ソッドなど、プロキシモデルによって提供される機能を利用可能です。"

msgid ""
"If you wish to store information related to ``User``, you can use a :class:"
"`~django.db.models.OneToOneField` to a model containing the fields for "
"additional information. This one-to-one model is often called a profile "
"model, as it might store non-auth related information about a site user. For "
"example you might create an Employee model::"
msgstr ""
"``User`` に関連した情報を格納したい場合は、 :class:`~django.db.models."
"OneToOneField` を追加する情報のフィールドを持ったモデルに使用します。この一対"
"一モデルはサイトユーザーに関する、認証には関連しない情報を格納することがある"
"ため、しばしばプロファイルモデルと呼ばれます。たとえば、次のような Employee "
"モデルを作ります:"

msgid ""
"Assuming an existing Employee Fred Smith who has both a User and Employee "
"model, you can access the related information using Django's standard "
"related model conventions:"
msgstr ""
"User モデルと Employee モデルの両方を持つ既存の Employee Fred Smith を想定す"
"ると、 Django の標準的なリレーション先モデルの規約を使って、関連情報にアクセ"
"スできます:"

msgid ""
"To add a profile model's fields to the user page in the admin, define an :"
"class:`~django.contrib.admin.InlineModelAdmin` (for this example, we'll use "
"a :class:`~django.contrib.admin.StackedInline`) in your app's ``admin.py`` "
"and add it to a ``UserAdmin`` class which is registered with the :class:"
"`~django.contrib.auth.models.User` class::"
msgstr ""
"admin のユーザーページにプロファイルモデルのフィールドを追加する場合は、:"
"class:`~django.contrib.admin.InlineModelAdmin` (この例では、:class:`~django."
"contrib.admin.StackedInline` を使用しています) をあなたの ``admin.py`` に定義"
"し、それを :class:`~django.contrib.auth.models.User` クラスで追加した "
"``UserAdmin`` クラスに追加します。"

msgid ""
"These profile models are not special in any way - they are just Django "
"models that happen to have a one-to-one link with a user model. As such, "
"they aren't auto created when a user is created, but a :attr:`django.db."
"models.signals.post_save` could be used to create or update related models "
"as appropriate."
msgstr ""
"これらのプロファイルモデルは、特別な方法で処理される Django モデルではありま"
"せん。ユーザーモデルと一対一のリンクを持っているだけです。したがって、ユー"
"ザーが作成されたときに自動的に作成されることはありませんが、:attr:`django.db."
"models.signals.post_save` を使って、適切にリレーション先モデルを作成または更"
"新できます。"

msgid ""
"Using related models results in additional queries or joins to retrieve the "
"related data. Depending on your needs, a custom user model that includes the "
"related fields may be your better option, however, existing relations to the "
"default user model within your project's apps may justify the extra database "
"load."
msgstr ""
"関連づけされたモデルを使用した場合、関連するデータを検索するための追加のクエ"
"リ実行や結合が行われます。あなたの必要性に応じて、関連づけされたフィールドを"
"カスタムユーザーモデルにインクルードすることは適した選択肢となるでしょう。し"
"かしながら、デフォルトのユーザーモデルとプロジェクトのアプリケーションに組み"
"込み済みの連携は追加のデータベース負荷を正当化するでしょう。"

msgid "Substituting a custom ``User`` model"
msgstr "カスタムの ``User`` モデルを置き換える"

msgid ""
"Some kinds of projects may have authentication requirements for which "
"Django's built-in :class:`~django.contrib.auth.models.User` model is not "
"always appropriate. For instance, on some sites it makes more sense to use "
"an email address as your identification token instead of a username."
msgstr ""
"Django にビルトインされている :class:`~django.contrib.auth.models.User` モデ"
"ルは、必ずしもプロジェクトが必要とする認証のモデルと合致するわけではありませ"
"ん。たとえば、サイトによってはユーザー名の代わりにメールアドレスを識別トーク"
"ンとして使用する方が適した場合があります。"

msgid ""
"Django allows you to override the default user model by providing a value "
"for the :setting:`AUTH_USER_MODEL` setting that references a custom model::"
msgstr ""
"Django では、カスタムモデルを参照するように  :setting:`AUTH_USER_MODEL` の値"
"を設定することにより、デフォルトのユーザーモデルをオーバーライドできます:"

msgid ""
"This dotted pair describes the :attr:`~django.apps.AppConfig.label` of the "
"Django app (which must be in your :setting:`INSTALLED_APPS`), and the name "
"of the Django model that you wish to use as your user model."
msgstr ""
"このドットで区切られたペアは、Django app の :attr:`~django.apps.AppConfig."
"label` (:setting:`INSTALLED_APPS` に含まれている必要があります) と、ユーザー"
"モデルとして使用したい Django モデルの名前です。"

msgid "Using a custom user model when starting a project"
msgstr "プロジェクトの開始時にカスタムのユーザーモデルを使用する"

msgid ""
"If you're starting a new project, it's highly recommended to set up a custom "
"user model, even if the default :class:`~django.contrib.auth.models.User` "
"model is sufficient for you. This model behaves identically to the default "
"user model, but you'll be able to customize it in the future if the need "
"arises::"
msgstr ""
"新しくプロジェクトを始める場合は、デフォルトの :class:`~django.contrib.auth."
"models.User` で十分である場合でも、カスタムユーザーモデルを作成することを強く"
"推奨します。このモデルはデフォルトのユーザーモデルと同様に動作しますが、必要"
"に応じて将来的にカスタマイズできます:"

msgid ""
"Don't forget to point :setting:`AUTH_USER_MODEL` to it. Do this before "
"creating any migrations or running ``manage.py migrate`` for the first time."
msgstr ""
":setting:`AUTH_USER_MODEL` に指定することを忘れないでください。任意のマイグ"
"レーションの作成、また、最初に実行する ``manage.py migrate`` の前に行ってくだ"
"さい。"

msgid "Also, register the model in the app's ``admin.py``::"
msgstr "そして、モデルをアプリの ``admin.py`` に登録してください::"

msgid "Changing to a custom user model mid-project"
msgstr "プロジェクト途中からのカスタムユーザーモデルへの変更"

msgid ""
"Changing :setting:`AUTH_USER_MODEL` after you've created database tables is "
"significantly more difficult since it affects foreign keys and many-to-many "
"relationships, for example."
msgstr ""
":setting:`AUTH_USER_MODEL` をデータベーステーブルの作成後に変更することは、た"
"とえば、外部キーや多対多の関係に影響するため、非常に困難となります。"

msgid ""
"This change can't be done automatically and requires manually fixing your "
"schema, moving your data from the old user table, and possibly manually "
"reapplying some migrations. See :ticket:`25313` for an outline of the steps."
msgstr ""
"この変更は自動的には行うことができません。手動でのスキーマ修正、古いユーザー"
"テーブルからのデータ移動、一部のマイグレーションの手動による再適用をする必要"
"があります。ステップの概要は :ticket:`25313` を参照してください。"

msgid ""
"Due to limitations of Django's dynamic dependency feature for swappable "
"models, the model referenced by :setting:`AUTH_USER_MODEL` must be created "
"in the first migration of its app (usually called ``0001_initial``); "
"otherwise, you'll have dependency issues."
msgstr ""
"スワップ可能なモデルという Django の動的依存性により、 :setting:"
"`AUTH_USER_MODEL` によって参照されるモデルはアプリの初回のマイグレーションで"
"作成されなければなりません（通常は ``0001_initial`` と呼ばれます）。そうしな"
"い場合、依存関係の問題が発生します。"

msgid ""
"In addition, you may run into a ``CircularDependencyError`` when running "
"your migrations as Django won't be able to automatically break the "
"dependency loop due to the dynamic dependency. If you see this error, you "
"should break the loop by moving the models depended on by your user model "
"into a second migration. (You can try making two normal models that have a "
"``ForeignKey`` to each other and seeing how ``makemigrations`` resolves that "
"circular dependency if you want to see how it's usually done.)"
msgstr ""
"マイグレーション中に ``CircularDependencyError`` に遭遇するかもしれません。依"
"存関係の動的な性質のため、Django は依存関係のループを自動的に断ち切ることがで"
"きないためです。もしこのエラーを見た場合、ユーザーモデルが依存しているモデル"
"を2回目のマイグレーションに移動することで、依存関係のループがなくなるようにし"
"てください。(お互いに ``ForeignKey`` を持つ2つの通常のモデルを作ることで、"
"``makemigrations`` が循環依存関係を通常と同じように解決させることもできま"
"す。)"

msgid "Reusable apps and ``AUTH_USER_MODEL``"
msgstr "再利用可能なアプリと ``AUTH_USER_MODEL``"

msgid ""
"Reusable apps shouldn't implement a custom user model. A project may use "
"many apps, and two reusable apps that implemented a custom user model "
"couldn't be used together. If you need to store per user information in your "
"app, use a :class:`~django.db.models.ForeignKey` or :class:`~django.db."
"models.OneToOneField` to ``settings.AUTH_USER_MODEL`` as described below."
msgstr ""
"再利用可能アプリはカスタムのユーザーモデルを実装するべきではありません。多数"
"のアプリを使用するプロジェクトの場合、それぞれカスタムのユーザーモデルを実装"
"した再利用可能アプリが2つあると、同時に使うことができなくなってしまいます。も"
"しユーザー情報をアプリ度とに保存したい場合は、以下のように ``settings."
"AUTH_USER_MODEL`` に対して :class:`~django.db.models.ForeignKey` または :"
"class:`~django.db.models.OneToOneField` を使用してください。"

msgid "Referencing the ``User`` model"
msgstr "``User`` モデルを参照する"

msgid ""
"If you reference :class:`~django.contrib.auth.models.User` directly (for "
"example, by referring to it in a foreign key), your code will not work in "
"projects where the :setting:`AUTH_USER_MODEL` setting has been changed to a "
"different user model."
msgstr ""
":class:`~django.contrib.auth.models.User` を直接参照する場合 (たとえば外部"
"キーで参照する場合)、:setting:`AUTH_USER_MODEL` 設定が異なるユーザモデルに変"
"更されたプロジェクトでは正しく動作しません。"

msgid ""
"Instead of referring to :class:`~django.contrib.auth.models.User` directly, "
"you should reference the user model using ``django.contrib.auth."
"get_user_model()``. This method will return the currently active user model "
"-- the custom user model if one is specified, or :class:`~django.contrib."
"auth.models.User` otherwise."
msgstr ""
":class:`~django.contrib.auth.models.User` を直接参照する代わりに、``django."
"contrib.auth.get_user_model()`` を使ってユーザモデルを参照すべきです。このメ"
"ソッドは現在アクティブなユーザモデルを返します -- 指定されている場合はカスタ"
"ムのユーザモデル、指定されていない場合は :class:`~django.contrib.auth.models."
"User` です。"

msgid ""
"When you define a foreign key or many-to-many relations to the user model, "
"you should specify the custom model using the :setting:`AUTH_USER_MODEL` "
"setting. For example::"
msgstr ""
"ユーザモデルに対して外部キーや多対多の関係を定義するときは、:setting:"
"`AUTH_USER_MODEL` 設定を使ってカスタムのモデルを指定してください。例えば::"

msgid ""
"When connecting to signals sent by the user model, you should specify the "
"custom model using the :setting:`AUTH_USER_MODEL` setting. For example::"
msgstr ""
"ユーザモデルによって送信されたシグナルと接続するときは、:setting:"
"`AUTH_USER_MODEL` 設定を使ってカスタムのユーザモデルを指定してください。例え"
"ば::"

msgid ""
"Generally speaking, it's easiest to refer to the user model with the :"
"setting:`AUTH_USER_MODEL` setting in code that's executed at import time, "
"however, it's also possible to call ``get_user_model()`` while Django is "
"importing models, so you could use ``models."
"ForeignKey(get_user_model(), ...)``."
msgstr ""
"一般的に言って、最も簡単な方法は、インポート時に実行されるコードの中で :"
"setting:`AUTH_USER_MODEL` 設定を用いてユーザーモデルを参照することです。しか"
"し、Django がモデルをインポートするときに ``get_user_model()`` を呼ぶという方"
"法もあります。こうすると、``models.ForeignKey(get_user_model(), ...)`` という"
"表記が可能です。"

msgid ""
"If your app is tested with multiple user models, using "
"``@override_settings(AUTH_USER_MODEL=...)`` for example, and you cache the "
"result of ``get_user_model()`` in a module-level variable, you may need to "
"listen to the  :data:`~django.test.signals.setting_changed` signal to clear "
"the cache. For example::"
msgstr ""
"たとえば、``@override_settings(AUTH_USER_MODEL=...)`` などを使用して、アプリ"
"が複数のユーザーモデルでテストされていて、``get_user_model()`` の結果をモ"
"ジュールレベルの変数にキャッシュしている場合、:data:`~django.test.signals."
"setting_changed` シグナルを listen してキャッシュをクリアする必要があるかもし"
"れません。そのためには、次のように書きます。"

msgid "Specifying a custom user model"
msgstr "カスタムのユーザーモデルを指定する"

msgid ""
"When you start your project with a custom user model, stop to consider if "
"this is the right choice for your project."
msgstr ""
"プロジェクトの開始時にカスタムのユーザーモデルを使おうとしている場合、自分の"
"プロジェクトにとってこの選択は本当に正しいのだろうか、と立ち止まってよく考え"
"てください。"

msgid ""
"Keeping all user related information in one model removes the need for "
"additional or more complex database queries to retrieve related models. On "
"the other hand, it may be more suitable to store app-specific user "
"information in a model that has a relation with your custom user model. That "
"allows each app to specify its own user data requirements without "
"potentially conflicting or breaking assumptions by other apps. It also means "
"that you would keep your user model as simple as possible, focused on "
"authentication, and following the minimum requirements Django expects custom "
"user models to meet."
msgstr ""
"ユーザーに関連するすべての情報を1つのモデルに記録すれば、関連モデルを取得する"
"ために、追加のより複雑なデータベースクエリを書く必要がなくなります。しかし一"
"方で、アプリ固有のユーザー情報は、カスタムのユーザーモデルに関連するモデルに"
"記録した方がより適切かもしれません。そうすることにより、各アプリは、他のアプ"
"リと競合したりデータを破壊されたりする可能性を考えずに、自分のアプリに必要な"
"ユーザーデータのみを指定できます。また、ユーザーモデルを、認証に焦点を絞っ"
"た、可能な限りシンプルなものに保ち続けられるようになります。それはまた、"
"Django がカスタムのユーザーモデルに期待する最小限の要求を満たすことにもなりま"
"す。"

msgid ""
"If you use the default authentication backend, then your model must have a "
"single unique field that can be used for identification purposes. This can "
"be a username, an email address, or any other unique attribute. A non-unique "
"username field is allowed if you use a custom authentication backend that "
"can support it."
msgstr ""
"デフォルトの認証バックエンドを使用している場合、モデルは必ず、認証のために使"
"用できるユニークなフィールドを1つ持たなければなりません。このフィールドとして"
"は、ユーザー名やメールアドレスなど、ユニークな属性ならば使用できます。ユニー"
"クでないユーザー名などのフィールドが使用できるのは、そのようなフィールドを扱"
"えるカスタムの認証バックエンドだけです。"

msgid ""
"The easiest way to construct a compliant custom user model is to inherit "
"from :class:`~django.contrib.auth.models.AbstractBaseUser`. :class:`~django."
"contrib.auth.models.AbstractBaseUser` provides the core implementation of a "
"user model, including hashed passwords and tokenized password resets. You "
"must then provide some key implementation details:"
msgstr ""
"準拠したカスタムユーザーモデルを構築する最も簡単な方法は、:class:`~django."
"contrib.auth.models.AbstractBaseUser` を継承することです。:class:`~django."
"contrib.auth.models.AbstractBaseUser` はユーザーモデルのコアとなる実装を提供"
"しており、その中には、ハッシュ化パスワードやトークン化されたパスワードリセッ"
"トなどの機能が含まれます。このクラスの継承後、以下のように、キー実装の詳細を"
"自分で記述する必要があります。"

msgid ""
"A string describing the name of the field on the user model that is used as "
"the unique identifier. This will usually be a username of some kind, but it "
"can also be an email address, or any other unique identifier. The field "
"*must* be unique (e.g. have ``unique=True`` set in its definition), unless "
"you use a custom authentication backend that can support non-unique "
"usernames."
msgstr ""
"ユニークな ID として使用される、ユーザーモデルのフィールド名を説明する文字"
"列。これは通常、ある種のユーザー名になりますが、メールアドレスや他のユニーク"
"な ID にすることもできます。非ユニークなユーザー名をサポートできるカスタムの"
"認証バックエンドを使っていない限り、このフィールドは *必ず* ユニークである "
"(たとえば、``unique=True`` を定義内で設定する) 必要があります。"

msgid ""
"In the following example, the field ``identifier`` is used as the "
"identifying field::"
msgstr ""
"以下の例では、フィールドを一意に指定するために、``identifier`` フィールドが使"
"われています。"

msgid ""
"A string describing the name of the email field on the ``User`` model. This "
"value is returned by :meth:`~models.AbstractBaseUser.get_email_field_name`."
msgstr ""
"ユーザーモデルにあるメールのフィールド名を文字列で記述します。この値は :meth:"
"`~models.AbstractBaseUser.get_email_field_name` で返されます。"

msgid ""
"A list of the field names that will be prompted for when creating a user via "
"the :djadmin:`createsuperuser` management command. The user will be prompted "
"to supply a value for each of these fields. It must include any field for "
"which :attr:`~django.db.models.Field.blank` is ``False`` or undefined and "
"may include additional fields you want prompted for when a user is created "
"interactively. ``REQUIRED_FIELDS`` has no effect in other parts of Django, "
"like creating a user in the admin."
msgstr ""
":djadmin:`createsuperuser` 管理コマンド経由でユーザーを作成するときにプロンプ"
"トが表示されるフィールド名のリスト。ユーザーはこれらの各フィールドごとに値を"
"入力するようにプロンプトが表示されます。:attr:`~django.db.models.Field."
"blank` が ``False`` または未定義のフィールドを含む必要があり、ユーザーが対話"
"的に作成されるときにプロンプトを表示したい追加のフィールドを含むことができま"
"す。``REQUIRED_FIELDS`` は、たとえば admin 上のユーザーの作成などの Django の"
"他の部分では何も効果がありません。"

msgid ""
"For example, here is the partial definition for a user model that defines "
"two required fields - a date of birth and height::"
msgstr ""
"たとえば、これは誕生日と身長の2つの必須フィールドを定義しているユーザーモデル"
"の部分的な定義です。"

msgid ""
"``REQUIRED_FIELDS`` must contain all required fields on your user model, but "
"should *not* contain the ``USERNAME_FIELD`` or ``password`` as these fields "
"will always be prompted for."
msgstr ""
"``REQUIRED_FIELDS`` はユーザーモデルのすべての必須フィールドを含む必要があり"
"ますが、``USERNAME_FIELD`` や ``password`` を含んでは *いけません* 。これらの"
"フィールドは常に入力を求められるためです。"

msgid ""
"A boolean attribute that indicates whether the user is considered "
"\"active\".  This attribute is provided as an attribute on "
"``AbstractBaseUser`` defaulting to ``True``. How you choose to implement it "
"will depend on the details of your chosen auth backends. See the "
"documentation of the :attr:`is_active attribute on the built-in user model "
"<django.contrib.auth.models.User.is_active>` for details."
msgstr ""
"ユーザーが \"active\" かどうかを示すブール属性。この属性は、デフォルトが "
"``True`` の ``AbstractBaseUser`` 上の属性として与えられます。実装時にどのよう"
"な選択をするかは、選択した認証バックエンドの詳細によって変わります。詳細につ"
"いては、:attr:`ビルトインのユーザーモデル上の is_active <django.contrib.auth."
"models.User.is_active>` のドキュメントを読んでください。"

msgid ""
"Optional. A longer formal identifier for the user such as their full name. "
"If implemented, this appears alongside the username in an object's history "
"in :mod:`django.contrib.admin`."
msgstr ""
"オプション。フルネームなどのユーザーに対するより長い正式の ID です。実装した"
"場合、:mod:`django.contrib.admin` のオブジェクト履歴内でユーザー名とともに表"
"示されます。"

msgid ""
"Optional. A short, informal identifier for the user such as their first "
"name. If implemented, this replaces the username in the greeting to the user "
"in the header of :mod:`django.contrib.admin`."
msgstr ""
"オプション。ファーストネームなどのユーザーに対するより短い正式ではない ID で"
"す。実装した場合、:mod:`django.contrib.admin` のヘッダー内のユーザーへの挨拶"
"内でユーザー名の代わりに使われます。"

msgid "Importing ``AbstractBaseUser``"
msgstr "``AbstractBaseUser`` のインポート"

msgid ""
"``AbstractBaseUser`` and ``BaseUserManager`` are importable from ``django."
"contrib.auth.base_user`` so that they can be imported without including "
"``django.contrib.auth`` in :setting:`INSTALLED_APPS`."
msgstr ""
"``AbstractBaseUser`` と ``BaseUserManager`` は ``django.contrib.auth."
"base_user`` からインポートでき、 :setting:`INSTALLED_APPS` の中に ``django."
"contrib.auth`` をインクルードすることなくインポートできます。"

msgid ""
"The following attributes and methods are available on any subclass of :class:"
"`~django.contrib.auth.models.AbstractBaseUser`:"
msgstr ""
"次の属性とメソッドは  :class:`~django.contrib.auth.models.AbstractBaseUser`: "
"の任意のサブクラスで利用可能です。"

msgid "Returns the value of the field nominated by ``USERNAME_FIELD``."
msgstr "``USERNAME_FIELD`` で指定されたフィールドの値を返します。"

msgid ""
"Normalizes the username by calling :meth:`normalize_username`. If you "
"override this method, be sure to call ``super()`` to retain the "
"normalization."
msgstr ""
":meth:`normalize_username` を呼び出し、username を正規化します。このメソッド"
"をオーバーライドした場合、正規化を保持するために ``super()`` を呼び出すように"
"してください。"

msgid ""
"Returns the name of the email field specified by the :attr:`~models."
"CustomUser.EMAIL_FIELD` attribute. Defaults to ``'email'`` if "
"``EMAIL_FIELD`` isn't specified."
msgstr ""
":attr:`~models.CustomUser.EMAIL_FIELD` 属性で指定されたメールフィールドの名前"
"を返します。``EMAIL_FIELD`` の指定が無いとき、デフォルトは ``'email'`` です。"

msgid ""
"Applies NFKC Unicode normalization to usernames so that visually identical "
"characters with different Unicode code points are considered identical."
msgstr ""
"視覚的に同一であるが異なる Unicode の符号位置を持つ文字について、それらが同一"
"とみなされるように、username に NFKC Unicode正規化を適用します。"

msgid ""
"Read-only attribute which is always ``True`` (as opposed to ``AnonymousUser."
"is_authenticated`` which is always ``False``). This is a way to tell if the "
"user has been authenticated. This does not imply any permissions and doesn't "
"check if the user is active or has a valid session. Even though normally you "
"will check this attribute on ``request.user`` to find out whether it has "
"been populated by the :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` (representing the currently logged-in user), you "
"should know this attribute is ``True`` for any :class:`~models.User` "
"instance."
msgstr ""
"(``AnonymousUser.is_authenticated`` が常に ``False`` なのとは対照的に) 常に "
"``True`` の読み取り専用属性です。ユーザが認証済みかどうかを知らせる方法です。"
"これはパーミッションという意味ではなく、ユーザーがアクティブかどうか、また有"
"効なセッションがあるかどうかをチェックするわけでもありません。 通常、"
"``request.user`` のこの属性をチェックして :class:`~django.contrib.auth."
"middleware.AuthenticationMiddleware` (現在ログイン中のユーザを表します) に"
"よって格納されているかどうかを調べます。:class:`~models.User` のインスタンス"
"の場合、この属性は ``True`` となります。"

msgid ""
"Read-only attribute which is always ``False``. This is a way of "
"differentiating :class:`~models.User` and :class:`~models.AnonymousUser` "
"objects. Generally, you should prefer using :attr:`~models.User."
"is_authenticated` to this attribute."
msgstr ""
"常に ``False`` の読み取り専用属性です。:class:`~models.User` オブジェクトと :"
"class:`~models.AnonymousUser` オブジェクトを区別する方法です。一般的に、:"
"attr:`~models.User.is_authenticated` を使う方が好ましいと言えます。"

msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models."
"AbstractBaseUser` object."
msgstr ""
"指定された生の文字列に、ユーザのパスワードをセットし、パスワードのハッシュ処"
"理を行います。:class:`~django.contrib.auth.models.AbstractBaseUser` は保存し"
"ません。"

msgid ""
"When the raw_password is ``None``, the password will be set to an unusable "
"password, as if :meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()` were used."
msgstr ""
"raw_password が ``None`` のとき、:meth:`~django.contrib.auth.models."
"AbstractBaseUser.set_unusable_password()` が使われるのと同じように、パスワー"
"ドは使用に適さないパスワードになります。"

msgid "*Asynchronous version*: ``acheck_password()``"
msgstr "*非同期バージョン*: ``acheck_password()``"

msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr ""
"与えられた生の文字列が、ユーザに対して正しいパスワードであれば ``True`` を返"
"します。 (比較する際にはパスワードハッシュを処理します。)"

msgid "``acheck_password()`` method was added."
msgstr "``acheck_password()`` メソッドが追加されました。"

msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. :meth:`~django.contrib.auth.models."
"AbstractBaseUser.check_password()` for this user will never return ``True``. "
"Doesn't save the :class:`~django.contrib.auth.models.AbstractBaseUser` "
"object."
msgstr ""
"ユーザにパスワードが設定されていないものとしてマークします。これは、空の文字"
"列のパスワードを設定することとは違います。このユーザに対する :meth:`~django."
"contrib.auth.models.AbstractBaseUser.check_password()` は ``True`` を返しませ"
"ん。:class:`~django.contrib.auth.models.AbstractBaseUser` オブジェクトを保存"
"しません。"

msgid ""
"You may need this if authentication for your application takes place against "
"an existing external source such as an LDAP directory."
msgstr ""
"アプリケーションの認証が LDAP ディレクトリなどの既存の外部ソースに対して行わ"
"れている場合は、これが必要になることがあります。"

msgid ""
"Returns ``False`` if :meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()` has been called for this user."
msgstr ""
"ユーザに対して :meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()` が呼ばれている場合、``False`` を返します。"

msgid ""
"Returns an HMAC of the password field. Used for :ref:`session-invalidation-"
"on-password-change`."
msgstr ""
"パスワードフィールドの HAMC を返します。:ref:`session-invalidation-on-"
"password-change` ために利用されます。"

msgid ""
"Yields the HMAC of the password field using :setting:`SECRET_KEY_FALLBACKS`. "
"Used by ``get_user()``."
msgstr ""
":setting:`SECRET_KEY_FALLBACKS` を使用しているパスワードフィールドの HMAC を "
"yield します。``get_user()`` で使用されます。"

msgid ""
":class:`~models.AbstractUser` subclasses :class:`~models.AbstractBaseUser`:"
msgstr ""
":class:`~models.AbstractUser` は :class:`~models.AbstractBaseUser` をサブクラ"
"ス化します。"

msgid ""
"Normalizes the email by calling :meth:`.BaseUserManager.normalize_email`. If "
"you override this method, be sure to call ``super()`` to retain the "
"normalization."
msgstr ""
":meth:`.BaseUserManager.normalize_email` を呼び出し、メールを正規化します。こ"
"のメソッドをオーバーライドした場合、正規化を保持するために必ず ``super()`` を"
"呼び出すようにしてください。"

msgid "Writing a manager for a custom user model"
msgstr "カスタムユーザーモデルのためのマネージャーを書く"

msgid ""
"You should also define a custom manager for your user model. If your user "
"model defines ``username``, ``email``, ``is_staff``, ``is_active``, "
"``is_superuser``, ``last_login``, and ``date_joined`` fields the same as "
"Django's default user, you can install Django's :class:`~django.contrib.auth."
"models.UserManager`; however, if your user model defines different fields, "
"you'll need to define a custom manager that extends :class:`~django.contrib."
"auth.models.BaseUserManager` providing two additional methods:"
msgstr ""
"また、ユーザモデルに対してカスタムマネージャを定義する必要があります。ユーザ"
"モデルが ``username``, ``email``, ``is_staff``, ``is_active``, "
"``is_superuser``, ``last_login``, ``date_joined`` フィールドを Django のデ"
"フォルトユーザと同じように定義している場合、 Django の :class:`~django."
"contrib.auth.models.UserManager` をインストールできます。しかし、ユーザモデル"
"が異なるフィールドを定義している場合は、 :class:`~django.contrib.auth.models."
"BaseUserManager` を継承して、さらに 2 つのメソッドを提供するカスタムマネー"
"ジャを定義する必要があります:"

msgid ""
"The prototype of ``create_user()`` should accept the username field, plus "
"all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"field, then ``create_user`` should be defined as::"
msgstr ""
"``create_user()`` のプロトタイプは、ユーザ名フィールドとすべての必須フィール"
"ドを引数として受け取る必要があります。たとえば、ユーザーモデルがユーザー名"
"フィールドとして ``email`` を使用し、必須フィールドとして ``date_of_birth`` "
"を持つ場合、 ``create_user`` は次のように定義します:"

msgid ""
"The prototype of ``create_superuser()`` should accept the username field, "
"plus all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"field, then ``create_superuser`` should be defined as::"
msgstr ""
"``create_superuser()`` のプロトタイプは、ユーザ名フィールドとすべての必須"
"フィールドを引数として受け取る必要があります。たとえば、ユーザーモデルがユー"
"ザー名フィールドとして ``email`` を使用し、必須フィールドとして "
"``date_of_birth`` を持つ場合、 ``create_superuser`` は次のように定義します:"

msgid ""
"For a :class:`~.ForeignKey` in :attr:`.USERNAME_FIELD` or :attr:`."
"REQUIRED_FIELDS`, these methods receive the value of the :attr:`~.ForeignKey."
"to_field` (the :attr:`~django.db.models.Field.primary_key` by default) of an "
"existing instance."
msgstr ""
":class:`~.ForeignKey` の :attr:`.USERNAME_FIELD` または :attr:`."
"REQUIRED_FIELDS` の場合、これらのメソッドは既存のインスタンスの :attr:`~."
"ForeignKey.to_field` (デフォルトでは :attr:`~django.db.models.Field."
"primary_key`) の値を受け取ります。"

msgid ""
":class:`~django.contrib.auth.models.BaseUserManager` provides the following "
"utility methods:"
msgstr ""
":class:`~django.contrib.auth.models.BaseUserManager` は以下のユーティリティメ"
"ソッドを提供します:"

msgid ""
"Normalizes email addresses by lowercasing the domain portion of the email "
"address."
msgstr ""
"メールアドレスのドメイン部分を小文字にすることで、メールアドレスを正規化しま"
"す。"

msgid ""
"Retrieves a user instance using the contents of the field nominated by "
"``USERNAME_FIELD``."
msgstr ""
"``USERNAME_FIELD`` で指定されたフィールドの内容を使用してユーザーインスタンス"
"を取得します。"

msgid ""
"Returns a random password with the given length and given string of allowed "
"characters. Note that the default value of ``allowed_chars`` doesn't contain "
"letters that can cause user confusion, including:"
msgstr ""
"与えられた長さと与えられた文字列でランダムなパスワードを返します。デフォルト"
"値の ``allowed_chars`` には、ユーザにとってまぎらわしい文字が含まれていないこ"
"とに注意してください:"

msgid ""
"``i``, ``l``, ``I``, and ``1`` (lowercase letter i, lowercase letter L, "
"uppercase letter i, and the number one)"
msgstr ""
"``i``, ``l``, ``I`` と ``1`` (小文字の i、小文字の L、大文字の i、そして数字"
"の 1)"

msgid ""
"``o``, ``O``, and ``0`` (lowercase letter o, uppercase letter o, and zero)"
msgstr "``o``, ``O`` と ``0`` (小文字の o、大文字の o、そして数字の 0)"

msgid "Extending Django's default ``User``"
msgstr "Django 標準の ``User`` を拡張する"

msgid ""
"If you're entirely happy with Django's :class:`~django.contrib.auth.models."
"User` model, but you want to add some additional profile information, you "
"could subclass :class:`django.contrib.auth.models.AbstractUser` and add your "
"custom profile fields, although we'd recommend a separate model as described "
"in :ref:`specifying-custom-user-model`. ``AbstractUser`` provides the full "
"implementation of the default :class:`~django.contrib.auth.models.User` as "
"an :ref:`abstract model <abstract-base-classes>`."
msgstr ""
"Django の :class:`~django.contrib.auth.models.User` モデルに完全に満足してい"
"るものの、追加のプロフィール情報をいくつか追加したい場合、:class:`django."
"contrib.auth.models.AbstractUser` をサブクラス化して、カスタムのプロフィール"
"フィールドを追加することも可能ですが、:ref:`specifying-custom-user-model` で"
"説明されているように、独立したモデルを作ることをおすすめします。"
"``AbstractUser`` は、デフォルトの :class:`~django.contrib.auth.models.User` "
"の完全な実装を :ref:`抽象モデル <abstract-base-classes>` として提供します。"

msgid "Custom users and the built-in auth forms"
msgstr "カスタムのユーザーとビルトインの認証フォーム"

msgid ""
"Django's built-in :ref:`forms <built-in-auth-forms>` and :ref:`views <built-"
"in-auth-views>` make certain assumptions about the user model that they are "
"working with."
msgstr ""
"Django のビルトインの :ref:`フォーム <built-in-auth-forms>` と :ref:`ビュー "
"<built-in-auth-views>` は、協調して動作するユーザーモデルに対して、いくつかの"
"前提を置いています。"

msgid ""
"The following forms are compatible with any subclass of :class:`~django."
"contrib.auth.models.AbstractBaseUser`:"
msgstr ""
"以下のフォームは :class:`~django.contrib.auth.models.AbstractBaseUser` のあら"
"ゆるサブクラスに互換性があります。"

msgid ""
":class:`~django.contrib.auth.forms.AuthenticationForm`: Uses the username "
"field specified by :attr:`~models.CustomUser.USERNAME_FIELD`."
msgstr ""
":class:`~django.contrib.auth.forms.AuthenticationForm`: :attr:`~models."
"CustomUser.USERNAME_FIELD` で指定したユーザー名フィールドを使用する。"

msgid ":class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ":class:`~django.contrib.auth.forms.SetPasswordForm`"

msgid ":class:`~django.contrib.auth.forms.PasswordChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.PasswordChangeForm`"

msgid ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"

msgid ""
"The following forms make assumptions about the user model and can be used as-"
"is if those assumptions are met:"
msgstr ""
"以下のフォームは、ユーザーモデルについて以下のようないくつか前提を置いていま"
"す。これらの前提を満たしている場合、同じユーザーモデルとみなして使用できま"
"す。"

msgid ""
":class:`~django.contrib.auth.forms.PasswordResetForm`: Assumes that the user "
"model has a field that stores the user's email address with the name "
"returned by :meth:`~models.AbstractBaseUser.get_email_field_name` (``email`` "
"by default) that can be used to identify the user and a boolean field named "
"``is_active`` to prevent password resets for inactive users."
msgstr ""
":class:`~django.contrib.auth.forms.PasswordResetForm`: ユーザモデルには、ユー"
"ザのメールアドレスを格納するフィールドがあり、 :meth:`~models."
"AbstractBaseUser.get_email_field_name` (デフォルトでは ``email``) によって返"
"される名前がユーザを識別するために使用され、 ``is_active`` という真偽値フィー"
"ルドがアクティブでないユーザのパスワードリセットを防ぐために使用されると仮定"
"します。"

msgid ""
"Finally, the following forms are tied to :class:`~django.contrib.auth.models."
"User` and need to be rewritten or extended to work with a custom user model:"
msgstr ""
"最後に、以下のフォームは、:class:`~django.contrib.auth.models.User` と固く結"
"びついているため、カスタムのユーザーモデルとともに使用するには、書き換えや拡"
"張が必要になります。"

msgid ":class:`~django.contrib.auth.forms.UserCreationForm`"
msgstr ":class:`~django.contrib.auth.forms.UserCreationForm`"

msgid ":class:`~django.contrib.auth.forms.UserChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.UserChangeForm`"

msgid ""
"If your custom user model is a subclass of ``AbstractUser``, then you can "
"extend these forms in this manner::"
msgstr ""
"カスタムユーザモデルが ``AbstractUser`` のサブクラスであれば、次ようにフォー"
"ムを拡張できます:"

msgid ""
"In older versions, :class:`~django.contrib.auth.forms.UserCreationForm` "
"didn't save many-to-many form fields for a custom user model."
msgstr ""
"古いバージョンでは、 :class:`~django.contrib.auth.forms.UserCreationForm` は"
"カスタムユーザモデルの多対多のフォームフィールドを保存していませんでした。"

msgid "Custom users and :mod:`django.contrib.admin`"
msgstr "カスタムのユーザーと :mod:`django.contrib.admin`"

msgid ""
"If you want your custom user model to also work with the admin, your user "
"model must define some additional attributes and methods. These methods "
"allow the admin to control access of the user to admin content:"
msgstr ""
"カスタムのユーザーモデルを admin で動作させたい場合、ユーザーモデルにいくつか"
"の追加の属性とメソッドを定義しなければなりません。これらのメソッドを定義する"
"ことで、admin はユーザーへアクセスを制御して admin のコンテンツに合わせること"
"ができます。"

msgid ""
"Returns ``True`` if the user is allowed to have access to the admin site."
msgstr ""
"ユーザーが admin サイトへのアクセス権を持っている時、``True`` を返します。"

msgid "Returns ``True`` if the user account is currently active."
msgstr "ユーザーアカウントが現在アクティブな時、``True`` を返します。"

msgid ""
"Returns ``True`` if the user has the named permission. If ``obj`` is "
"provided, the permission needs to be checked against a specific object "
"instance."
msgstr ""
"ユーザーが名前付きの権限を持っている時、``True`` を返します。``obj`` が提供さ"
"れた場合、特定のオブジェクトのインスタンスに対して権限をチェックする必要があ"
"ります。"

msgid ""
"Returns ``True`` if the user has permission to access models in the given "
"app."
msgstr ""
"ユーザーが与えられたアプリ内のモデルへのアクセス権を持っている場合、``True`` "
"を返します。"

msgid ""
"You will also need to register your custom user model with the admin. If "
"your custom user model extends ``django.contrib.auth.models.AbstractUser``, "
"you can use Django's existing ``django.contrib.auth.admin.UserAdmin`` class. "
"However, if your user model extends :class:`~django.contrib.auth.models."
"AbstractBaseUser`, you'll need to define a custom ``ModelAdmin`` class. It "
"may be possible to subclass the default ``django.contrib.auth.admin."
"UserAdmin``; however, you'll need to override any of the definitions that "
"refer to fields on ``django.contrib.auth.models.AbstractUser`` that aren't "
"on your custom user class."
msgstr ""
"また、カスタムユーザークラスを admin に登録する必要もあります。もしカスタム"
"ユーザーモデルが ``django.contrib.auth.models.AbstractUser`` を継承したもので"
"ある場合、Django の既存の ``django.contrib.auth.admin.UserAdmin`` クラスがそ"
"のまま利用できます。しかし、ユーザーモデルが :class:`~django.contrib.auth."
"models.AbstractBaseUser` を継承したものである場合には、カスタムの "
"``ModelAdmin`` クラスを定義する必要があります。デフォルトの ``django.contrib."
"auth.admin.UserAdmin`` をサブクラス化することも可能ですが、その場合には "
"``django.contrib.auth.models.AbstractUser`` 上のフィールドを参照する定義のう"
"ち、カスタムユーザークラス上にはない定義をすべてオーバーライドする必要がある"
"でしょう。"

msgid ""
"If you are using a custom ``ModelAdmin`` which is a subclass of ``django."
"contrib.auth.admin.UserAdmin``, then you need to add your custom fields to "
"``fieldsets`` (for fields to be used in editing users) and to "
"``add_fieldsets`` (for fields to be used when creating a user). For example::"
msgstr ""
"``django.contrib.auth.admin.UserAdmin`` のサブクラスである ``ModelAdmin`` を"
"使用する場合、``fieldsets`` (ユーザーの変更時に使われるフィールド) および "
"``add_fieldsets`` (ユーザーの作成時に使われるフィールド) に自分のカスタム"
"フィールドを追加する必要があります。たとえば、次のように書くことができます。"

msgid ""
"See :ref:`a full example <custom-users-admin-full-example>` for more details."
msgstr ""
"詳細は、:ref:`完全な例 <custom-users-admin-full-example>` のページを参照して"
"ください。"

msgid "Custom users and permissions"
msgstr "カスタムのユーザーとパーミッション"

msgid ""
"To make it easy to include Django's permission framework into your own user "
"class, Django provides :class:`~django.contrib.auth.models."
"PermissionsMixin`. This is an abstract model you can include in the class "
"hierarchy for your user model, giving you all the methods and database "
"fields necessary to support Django's permission model."
msgstr ""
"Django のパーミッションフレームワークをカスタムのユーザーモデルに簡単に取り入"
"れられるように用意されているのが、Django の :class:`~django.contrib.auth."
"models.PermissionsMixin` です。これはユーザーモデルの階層に取り入れることがで"
"きる抽象モデルで、Django のパーミッションモデルをサポートするのに必要なすべて"
"のメソッドとデーターベースのフィールドを使えるようにしてくれます。"

msgid ""
":class:`~django.contrib.auth.models.PermissionsMixin` provides the following "
"methods and attributes:"
msgstr ""
":class:`~django.contrib.auth.models.PermissionsMixin` は、以下のメソッドと属"
"性を提供します。"

msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr ""
"真偽値です。明示的に与えられない場合でも、ユーザーがが全てのパーミッションを"
"持っているかどうかを示します。"

msgid "Returns a set of permission strings that the user has directly."
msgstr "ユーザーが直接持っているパーミッション文字列のセットを返します。"

msgid ""
"If ``obj`` is passed in, only returns the user permissions for this specific "
"object."
msgstr ""
"もし ``obj`` が渡された場合、この特定のオブジェクトのユーザパーミッションのみ"
"を返します。"

msgid ""
"Returns a set of permission strings that the user has, through their groups."
msgstr "ユーザがグループを通して持つパーミッションの文字列のセットを返します。"

msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr ""
"``obj`` が渡されたとき、指定されたオブジェクトに対するグループパーミッション"
"のみを返します。"

msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr ""
"ユーザがグループおよびユーザパーミッションを通して持つパーミッションの文字列"
"のセットを返します。"

msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr ""
"``obj`` が渡された場合、指定されたオブジェクトに対するパーミッションのみを返"
"します。"

msgid ""
"Returns ``True`` if the user has the specified permission, where ``perm`` is "
"in the format ``\"<app label>.<permission codename>\"`` (see :ref:"
"`permissions <topic-authorization>`). If :attr:`.User.is_active` and :attr:"
"`~.User.is_superuser` are both ``True``, this method always returns ``True``."
msgstr ""
"ユーザーが指定したパーミッションを持っている場合、``True`` を返します。ここ"
"で、``perm`` は ``\"<app label>.<permission codename>\"`` という形式で指定し"
"ます (:ref:`パーミッション <topic-authorization>` を参照)。もし、:attr:`."
"User.is_active` と :attr:`~.User.is_superuser` が両方とも ``True`` だった場"
"合、このメソッドは常に ``True`` を返します。"

msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""
"``obj`` が渡された場合、このメソッドはモデルに対するパーミッションのチェック"
"を行わず、指定されたオブジェクトに対して行います。"

msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If :"
"attr:`.User.is_active` and :attr:`~.User.is_superuser` are both ``True``, "
"this method always returns ``True``."
msgstr ""
"ユーザーが指定したパーミッションを持っている場合、``True`` を返します。ここ"
"で、``perm`` は ``\"<app label>.<permission codename>\"`` という形式で指定し"
"ます。もし、:attr:`.User.is_active` と :attr:`~.User.is_superuser` が両方と"
"も ``True`` だった場合、このメソッドは常に ``True`` を返します。"

msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr ""
"``obj`` が渡された場合、このメソッドは指定されたオブジェクトに対してパーミッ"
"ションのチェックを行い、モデルに対しては行いません。"

msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If :attr:`.User.is_active` and :attr:`~.User."
"is_superuser` are both ``True``, this method always returns ``True``."
msgstr ""
"ユーザが指定されたパッケージ（Django アプリのラベル）に何らかのパーミッション"
"を持っている場合、 ``True`` を返します。 :attr:`.User.is_active` と :attr:`~."
"User.is_superuser` が両方 ``True`` なら、このメソッドは常に ``True`` を返しま"
"す。"

msgid "``PermissionsMixin`` and ``ModelBackend``"
msgstr "``PermissionsMixin`` と ``ModelBackend``"

msgid ""
"If you don't include the :class:`~django.contrib.auth.models."
"PermissionsMixin`, you must ensure you don't invoke the permissions methods "
"on ``ModelBackend``. ``ModelBackend`` assumes that certain fields are "
"available on your user model. If your user model doesn't provide  those "
"fields, you'll receive database errors when you check permissions."
msgstr ""
":class:`~django.contrib.auth.models.PermissionsMixin` をインクルードしていな"
"い場合、 ``ModelBackend`` のパーミッションメソッドを呼び出してはいけません。 "
"``ModelBackend`` は、ユーザモデルで特定のフィールドが利用可能であることを想定"
"しています。ユーザモデルがこれらのフィールドを提供していない場合、パーミッ"
"ションをチェックするとデータベースエラーになります。"

msgid "Custom users and proxy models"
msgstr "カスタムのユーザーと proxy モデル"

msgid ""
"One limitation of custom user models is that installing a custom user model "
"will break any proxy model extending :class:`~django.contrib.auth.models."
"User`. Proxy models must be based on a concrete base class; by defining a "
"custom user model, you remove the ability of Django to reliably identify the "
"base class."
msgstr ""
"カスタムユーザモデルの制限の一つは、カスタムユーザモデルをインストールする"
"と、 :class:`~django.contrib.auth.models.User` を拡張するプロキシモデルが壊れ"
"てしまうことです。プロキシモデルは具象基底クラスを継承している必要がありま"
"す。カスタムユーザモデルを定義すると、 Django が基底クラスを確実に識別する方"
"法を奪ってしまいます。"

msgid ""
"If your project uses proxy models, you must either modify the proxy to "
"extend the user model that's in use in your project, or merge your proxy's "
"behavior into your :class:`~django.contrib.auth.models.User` subclass."
msgstr ""
"プロジェクトでプロキシモデルを使用している場合、プロキシを変更してプロジェク"
"トで使用しているユーザーモデルを拡張するか、プロキシの動作を :class:`~django."
"contrib.auth.models.User` サブクラスにマージする必要があります。"

msgid "A full example"
msgstr "完全な具体例"

msgid ""
"Here is an example of an admin-compliant custom user app. This user model "
"uses an email address as the username, and has a required date of birth; it "
"provides no permission checking beyond an ``admin`` flag on the user "
"account. This model would be compatible with all the built-in auth forms and "
"views, except for the user creation forms. This example illustrates how most "
"of the components work together, but is not intended to be copied directly "
"into projects for production use."
msgstr ""
"以下は admin に準拠したカスタムユーザーアプリの例です。このユーザモデルはユー"
"ザ名としてメールアドレスを使用し、生年月日を必須とします。ユーザーアカウント"
"に ``admin`` フラグを立てるだけで、権限のチェックは行いません。このモデルは"
"ユーザー作成フォームを除く、すべての組み込みの認証フォームとビューと互換性が"
"あります。このサンプルはほとんどのコンポーネントがどう連携して動作するかの例"
"であり、実運用のためのプロジェクトに直接コピーされることを想定したものではあ"
"りません。"

msgid ""
"This code would all live in a ``models.py`` file for a custom authentication "
"app::"
msgstr ""
"このコードはすべてカスタム認証アプリの ``models.py`` ファイルに格納されます:"

msgid ""
"Then, to register this custom user model with Django's admin, the following "
"code would be required in the app's ``admin.py`` file::"
msgstr ""
"そして、このカスタムユーザモデルを Django の admin に登録するには、アプリの "
"``admin.py`` ファイルに以下のコードが必要になります:"

msgid ""
"Finally, specify the custom model as the default user model for your project "
"using the :setting:`AUTH_USER_MODEL` setting in your ``settings.py``::"
msgstr ""
"最後に、 ``settings.py``: の :setting:`AUTH_USER_MODEL` 設定を使用して、カス"
"タムモデルをプロジェクトのデフォルトのユーザーモデルとして指定します:"

msgid "Using the Django authentication system"
msgstr "Djangoの認証システムを使用する"

msgid ""
"This document explains the usage of Django's authentication system in its "
"default configuration. This configuration has evolved to serve the most "
"common project needs, handling a reasonably wide range of tasks, and has a "
"careful implementation of passwords and permissions. For projects where "
"authentication needs differ from the default, Django supports extensive :doc:"
"`extension and customization </topics/auth/customizing>` of authentication."
msgstr ""
"このドキュメントでは、デフォルト設定でのDjangoの認証システムの使用方法を説明"
"します。この設定は、タスクの適切な範囲を管理することで、最も一般的なプロジェ"
"クトのニーズにかなうよう徐々に発展してきました。そして、パスワードや権限の入"
"念な実装を持っています。デフォルトの認証システムからの変更が必要なプロジェク"
"トのために、Djangoは認証システムの広範囲の :doc:`拡張とカスタマイズ </topics/"
"auth/customizing>` をサポートします。"

msgid ""
"Django authentication provides both authentication and authorization "
"together and is generally referred to as the authentication system, as these "
"features are somewhat coupled."
msgstr ""
"Djangoの認証は、認証 (authentication) 機能と認可 (authorization) 機能の両方を"
"提供しています。そして、一般的に、これらの機能を合わせて認証システムと呼びま"
"す。"

msgid "``User`` objects"
msgstr "``User`` オブジェクト"

msgid ""
":class:`~django.contrib.auth.models.User` objects are the core of the "
"authentication system. They typically represent the people interacting with "
"your site and are used to enable things like restricting access, registering "
"user profiles, associating content with creators etc. Only one class of user "
"exists in Django's authentication framework, i.e., :attr:`'superusers' "
"<django.contrib.auth.models.User.is_superuser>` or admin :attr:`'staff' "
"<django.contrib.auth.models.User.is_staff>` users are just user objects with "
"special attributes set, not different classes of user objects."
msgstr ""
":class:`~django.contrib.auth.models.User` オブジェクトは、認証システムの中核"
"です。一般的に、このオブジェクトはあなたのサイトに関係する人々を表し、アクセ"
"スを制限すること、ユーザ情報を登録すること、コンテンツを作成者と関連付けるこ"
"とを可能にする際などに利用されます。\n"
"Djangoの認証フレームワークにはUserクラスという、ただひとつのクラスのみが存在"
"します。すなわち、 :attr:`'superusers' <django.contrib.auth.models.User."
"is_superuser>` または admin :attr:`'staff' <django.contrib.auth.models.User."
"is_staff>` ユーザは、Userオブジェクトと異なるクラスではなく、特別な属性セット"
"を持ったUserオブジェクトなのです。"

msgid "The primary attributes of the default user are:"
msgstr "デフォルトのユーザの主要な属性は次のとおりです。"

msgid ":attr:`~django.contrib.auth.models.User.username`"
msgstr ":attr:`~django.contrib.auth.models.User.username`"

msgid ":attr:`~django.contrib.auth.models.User.password`"
msgstr ":attr:`~django.contrib.auth.models.User.password`"

msgid ":attr:`~django.contrib.auth.models.User.email`"
msgstr ":attr:`~django.contrib.auth.models.User.email`"

msgid ":attr:`~django.contrib.auth.models.User.first_name`"
msgstr ":attr:`~django.contrib.auth.models.User.first_name`"

msgid ":attr:`~django.contrib.auth.models.User.last_name`"
msgstr ":attr:`~django.contrib.auth.models.User.last_name`"

msgid ""
"See the :class:`full API documentation <django.contrib.auth.models.User>` "
"for full reference, the documentation that follows is more task oriented."
msgstr ""
"仕様については :class:`完全な API ドキュメント <django.contrib.auth.models."
"User>` を参照してください。 以下のドキュメントは、よりタスク指向の形式となっ"
"ています。"

msgid "Creating users"
msgstr "ユーザを作成する"

msgid ""
"The most direct way to create users is to use the included :meth:`~django."
"contrib.auth.models.UserManager.create_user` helper function:"
msgstr ""
"ユーザを作成する最も直接的な方法は、付属の :meth:`~django.contrib.auth."
"models.UserManager.create_user` ヘルパー関数を使うことです:"

msgid ""
"If you have the Django admin installed, you can also :ref:`create users "
"interactively <auth-admin>`."
msgstr ""
"すでにDjango adminをインストールしている場合は、 :ref:`インタラクティブにユー"
"ザを作成する<auth-admin>` こともできます。"

msgid "Creating superusers"
msgstr "スーパーユーザを作成する"

msgid "Create superusers using the :djadmin:`createsuperuser` command:"
msgstr ""
":djadmin:`createsuperuser` コマンドを使ってスーパーユーザーを作成します:"

msgid ""
"You will be prompted for a password. After you enter one, the user will be "
"created immediately. If you leave off the :option:`--username "
"<createsuperuser --username>` or :option:`--email <createsuperuser --email>` "
"options, it will prompt you for those values."
msgstr ""
"パスワードを入力するように促されます。入力後、ただちにユーザが作成されま"
"す。 :option:`--username <createsuperuser --username>` または :option:`--"
"email <createsuperuser --email>` オプションを使用しなければ、これらの値を入力"
"するように促されます。"

msgid "Changing passwords"
msgstr "パスワードを変更する"

msgid ""
"Django does not store raw (clear text) passwords on the user model, but only "
"a hash (see :doc:`documentation of how passwords are managed </topics/auth/"
"passwords>` for full details). Because of this, do not attempt to manipulate "
"the password attribute of the user directly. This is why a helper function "
"is used when creating a user."
msgstr ""
"Djangoはユーザモデルに未加工の (単なるテキストの) パスワードは保存せず、ハッ"
"シュ値でのみ保存します (詳細は、:doc:`パスワードは管理方法に関するドキュメン"
"ト </topics/auth/passwords>` を参照してください)。したがって、ユーザのパス"
"ワード属性を直接操作しないでください。これが、ユーザを作成する際にヘルパー関"
"数を使用する理由です。"

msgid "To change a user's password, you have several options:"
msgstr "ユーザのパスワードを変更するには、いくつかのオプションがあります。"

msgid ""
":djadmin:`manage.py changepassword *username* <changepassword>` offers a "
"method of changing a user's password from the command line. It prompts you "
"to change the password of a given user which you must enter twice. If they "
"both match, the new password will be changed immediately. If you do not "
"supply a user, the command will attempt to change the password whose "
"username matches the current system user."
msgstr ""
":djadmin:`manage.py changepassword *username* <changepassword>` は、コマンド"
"ラインからユーザのパスワードを変更する方法を提供します。ユーザのパスワードを"
"変更するよう促されたら、パスワードを 2 回入力してください。2 つのパスワードが"
"一致した場合、新しいパスワードが直ちに有効になります。ユーザを指定しない場"
"合、コマンドは、現在のシステムユーザとユーザ名が一致するユーザのパスワードを"
"変更するよう試みます。"

msgid ""
"You can also change a password programmatically, using :meth:`~django."
"contrib.auth.models.User.set_password()`:"
msgstr ""
":meth:`~django.contrib.auth.models.User.set_password()` を使用することで、プ"
"ログラムでパスワードを変更することもできます:"

msgid ""
"If you have the Django admin installed, you can also change user's passwords "
"on the :ref:`authentication system's admin pages <auth-admin>`."
msgstr ""
"Django admin がインストールされていれば、 :ref:`認証システムのadminページ "
"<auth-admin>` にて、ユーザのパスワードを変更することも可能です。"

msgid ""
"Django also provides :ref:`views <built-in-auth-views>` and :ref:`forms "
"<built-in-auth-forms>` that may be used to allow users to change their own "
"passwords."
msgstr ""
"また、Djangoはユーザ自身のパスワードを変更するための :ref:`ビュー <built-in-"
"auth-views>` と :ref:`フォーム <built-in-auth-forms>` を提供します。"

msgid ""
"Changing a user's password will log out all their sessions. See :ref:"
"`session-invalidation-on-password-change` for details."
msgstr ""
"ユーザーのパスワード変更を行う事とそのユーザーのセッションは全てログアウトさ"
"れます。詳細は :ref:`session-invalidation-on-password-change` を参照してくだ"
"さい。"

msgid "Authenticating users"
msgstr "ユーザを認証する"

msgid "*Asynchronous version*: ``aauthenticate()``"
msgstr "*非同期バージョン*: ``aauthenticate()``"

msgid ""
"Use :func:`~django.contrib.auth.authenticate()` to verify a set of "
"credentials. It takes credentials as keyword arguments, ``username`` and "
"``password`` for the default case, checks them against each :ref:"
"`authentication backend <authentication-backends>`, and returns a :class:"
"`~django.contrib.auth.models.User` object if the credentials are valid for a "
"backend. If the credentials aren't valid for any backend or if a backend "
"raises :class:`~django.core.exceptions.PermissionDenied`, it returns "
"``None``. For example::"
msgstr ""
"認証情報のセットを検証するには :func:`~django.contrib.auth.authenticate()` を"
"利用してください。このメソッドは認証情報をキーワード引数として受け取ります。"
"検証する対象はデフォルトでは ``username`` と ``password`` であり、その組み合"
"わせを個々の :ref:`認証バックエンド <authentication-backends>` に対して問い合"
"わせ、認証バックエンドで認証情報が有効とされれば :class:`~django.contrib."
"auth.models.User` オブジェクトを返します。もしいずれの認証バックエンドでも認"
"証情報が有効と判定されなければ :class:`~django.core.exceptions."
"PermissionDenied` が送出され、``None`` が返されます。以下は実装例です::"

msgid ""
"``request`` is an optional :class:`~django.http.HttpRequest` which is passed "
"on the ``authenticate()`` method of the authentication backends."
msgstr ""
"``request`` はオプションで、:class:`~django.http.HttpRequest` のインスタンス"
"を取ります。このインスタンスは認証バックエンドの ``authenticate()`` メソッド"
"に渡されます。"

msgid ""
"This is a low level way to authenticate a set of credentials; for example, "
"it's used by the :class:`~django.contrib.auth.middleware."
"RemoteUserMiddleware`. Unless you are writing your own authentication "
"system, you probably won't use this. Rather if you're looking for a way to "
"login a user, use the :class:`~django.contrib.auth.views.LoginView`."
msgstr ""
"これは認証情報のセットを認証する低レベルな方法です。たとえば、 :class:"
"`~django.contrib.auth.middleware.RemoteUserMiddleware` で使われています。独自"
"の認証システムを書くのでなければ、おそらくこれを使うことはないでしょう。むし"
"ろ、ユーザーにログインする方法を探しているのであれば、 :class:`~django."
"contrib.auth.views.LoginView` を使ってください。"

msgid "``aauthenticate()`` function was added."
msgstr "``aauthenticate()`` 関数が追加されました。"

msgid "Permissions and Authorization"
msgstr "権限と認可"

msgid ""
"Django comes with a built-in permissions system. It provides a way to assign "
"permissions to specific users and groups of users."
msgstr ""
"Django には組み込みのパーミッションシステムがあります。特定のユーザやユーザグ"
"ループにパーミッションを割り当てる方法を提供します。"

msgid ""
"It's used by the Django admin site, but you're welcome to use it in your own "
"code."
msgstr ""
"これは、Django の admin サイトでも使われていますが、独自のコード内でも自由に"
"使えます。"

msgid "The Django admin site uses permissions as follows:"
msgstr "Django の admin サイトは、次のように権限を使用します。"

msgid ""
"Access to view objects is limited to users with the \"view\" or \"change\" "
"permission for that type of object."
msgstr ""
"ビューオブジェクトへのアクセスは、そのオブジェクトタイプの \"view \"または "
"\"change\" 権限を持つユーザーに限定されます。"

msgid ""
"Access to view the \"add\" form and add an object is limited to users with "
"the \"add\" permission for that type of object."
msgstr ""
"\"add\" フォームのビューを表示してオブジェクトを追加するためのアクセスは、そ"
"の種類のオブジェクトに \"add\" 権限を持つユーザに限定されます。"

msgid ""
"Access to view the change list, view the \"change\" form and change an "
"object is limited to users with the \"change\" permission for that type of "
"object."
msgstr ""
"変更リストの表示、\"change\" フォームの表示、オブジェクトの変更へのアクセス"
"は、その種類のオブジェクトに \"change\" 権限を持つユーザーに限定されます。"

msgid ""
"Access to delete an object is limited to users with the \"delete\" "
"permission for that type of object."
msgstr ""
"オブジェクトの削除へのアクセスは、その種類のオブジェクトに \"delete\"権限を持"
"つユーザに限定されます。"

msgid ""
"Permissions can be set not only per type of object, but also per specific "
"object instance. By using the :meth:`~django.contrib.admin.ModelAdmin."
"has_view_permission`, :meth:`~django.contrib.admin.ModelAdmin."
"has_add_permission`, :meth:`~django.contrib.admin.ModelAdmin."
"has_change_permission` and :meth:`~django.contrib.admin.ModelAdmin."
"has_delete_permission` methods provided by the :class:`~django.contrib.admin."
"ModelAdmin` class, it is possible to customize permissions for different "
"object instances of the same type."
msgstr ""
"権限はオブジェクトの種類ごとだけでなく、特定のオブジェクトインスタンスごとに"
"設定することもできます。:class:`~django.contrib.admin.ModelAdmin` クラスに"
"よって提供される :meth:`~django.contrib.admin.ModelAdmin."
"has_view_permission`、:meth:`~django.contrib.admin.ModelAdmin."
"has_add_permission`、:meth:`~django.contrib.admin.ModelAdmin."
"has_change_permission`、および :meth:`~django.contrib.admin.ModelAdmin."
"has_delete_permission` メソッドを使用することで、同じ種類の異なるオブジェクト"
"インスタンスに対する権限をカスタマイズすることが可能です。"

msgid ""
":class:`~django.contrib.auth.models.User` objects have two many-to-many "
"fields: ``groups`` and ``user_permissions``. :class:`~django.contrib.auth."
"models.User` objects can access their related objects in the same way as any "
"other :doc:`Django model </topics/db/models>`::"
msgstr ""
":class:`~django.contrib.auth.models.User` オブジェクトは 2 つの多対多のフィー"
"ルド、``groups`` および ``user_permissions`` を持っています。:class:`~django."
"contrib.auth.models.User` オブジェクトは、他の :doc:`Django モデル </topics/"
"db/models>` と同様の方法で、関連を持っているオブジェクトにアクセスできます。"

msgid "Default permissions"
msgstr "デフォルトの権限"

msgid ""
"When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` "
"setting, it will ensure that four default permissions -- add, change, "
"delete, and view -- are created for each Django model defined in one of your "
"installed applications."
msgstr ""
":setting:`INSTALLED_APPS` 設定に ``django.contrib.auth`` がリストされている"
"と、インストー ルしたアプリケーションで定義された Django モデルごとに、追加、"
"変更、削除、表示 の 4 つのデフォルトパーミッションが作成されます。"

msgid ""
"These permissions will be created when you run :djadmin:`manage.py migrate "
"<migrate>`; the first time you run ``migrate`` after adding ``django.contrib."
"auth`` to :setting:`INSTALLED_APPS`, the default permissions will be created "
"for all previously-installed models, as well as for any new models being "
"installed at that time. Afterward, it will create default permissions for "
"new models each time you run :djadmin:`manage.py migrate <migrate>` (the "
"function that creates permissions is connected to the :data:`~django.db."
"models.signals.post_migrate` signal)."
msgstr ""
"これらの権限は :djadmin:`manage.py migrate <migrate>` 実行時に作成されます。:"
"setting:`INSTALLED_APPS` に ``django.contrib.auth`` を追加後初めての "
"``migrate`` を実行した場合は、新たにインストールされるモデルに対してと同様、"
"それまでに作成されたモデルに対してもデフォルトの権限が作成されます。以後 :"
"djadmin:`manage.py migrate <migrate>` (この権限を作成する関数は :data:"
"`~django.db.models.signals.post_migrate` シグナルに接続されています)を実行す"
"る度作成されるモデルに対してデフォルトの権限が作成されます。"

msgid ""
"Assuming you have an application with an :attr:`~django.db.models.Options."
"app_label` ``foo`` and a model named ``Bar``, to test for basic permissions "
"you should use:"
msgstr ""
":attr:`~django.db.models.Options.app_label` が ``foo`` のアプリケーションと、"
"``Bar`` という名前のモデルがあると想定すると、基本的な権限をテストするには、"
"以下のように使用する必要があります。"

msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr "追加: ``user.has_perm('foo.add_bar')``"

msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr "変更: ``user.has_perm('foo.change_bar')``"

msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr "削除: ``user.has_perm('foo.delete_bar')``"

msgid "view: ``user.has_perm('foo.view_bar')``"
msgstr "表示: ``user.has_perm('foo.view_bar')``"

msgid ""
"The :class:`~django.contrib.auth.models.Permission` model is rarely accessed "
"directly."
msgstr ""
":class:`~django.contrib.auth.models.Permission` モデルが直接アクセスされるこ"
"とはほとんどありません。"

msgid "Groups"
msgstr "グループ"

msgid ""
":class:`django.contrib.auth.models.Group` models are a generic way of "
"categorizing users so you can apply permissions, or some other label, to "
"those users. A user can belong to any number of groups."
msgstr ""
":class:`django.contrib.auth.models.Group` モデルはユーザーを分類する汎用的な"
"方法であるため、対象となるユーザーに権限や、何らかのラベルを適用できます。1つ"
"のユーザーは複数のグループに属することが可能です。"

msgid ""
"A user in a group automatically has the permissions granted to that group. "
"For example, if the group ``Site editors`` has the permission "
"``can_edit_home_page``, any user in that group will have that permission."
msgstr ""
"グループに属するユーザーは、そのグループに付与された権限を自動的に持ちます。"
"たとえば、``Site editors`` グループが ``can_edit_home_page`` 権限を持っていた"
"場合、そのグループ内のすべてのユーザーは、その権限を持つことになります。"

msgid ""
"Beyond permissions, groups are a convenient way to categorize users to give "
"them some label, or extended functionality. For example, you could create a "
"group ``'Special users'``, and you could write code that could, say, give "
"them access to a members-only portion of your site, or send them members-"
"only email messages."
msgstr ""
"権限に限らず、グループはユーザーを分類して、ラベルや拡張された機能を与えるた"
"めに便利な手段です。たとえば、``Special users`` というグループを作成して、そ"
"のグループのメンバーに対してサイトのメンバー限定の領域にアクセスする権限を付"
"与したり、メンバー限定のメールを送るコードを書いたりすることも可能です。"

msgid "Programmatically creating permissions"
msgstr "プログラムによる権限の作成"

msgid ""
"While :ref:`custom permissions <custom-permissions>` can be defined within a "
"model's ``Meta`` class, you can also create permissions directly. For "
"example, you can create the ``can_publish`` permission for a ``BlogPost`` "
"model in ``myapp``::"
msgstr ""
":ref:`カスタム権限 <custom-permissions>` は、モデルの ``Meta`` クラス内に定義"
"でき、権限を直接作成することも可能です。たとえば、``myapp`` 内の "
"``BlogPost`` モデルに対する権限 ``can_publish`` は、以下のように作成できま"
"す。"

msgid ""
"The permission can then be assigned to a :class:`~django.contrib.auth.models."
"User` via its ``user_permissions`` attribute or to a :class:`~django.contrib."
"auth.models.Group` via its ``permissions`` attribute."
msgstr ""
"権限はその後、``user_permissions`` 属性を介して :class:`~django.contrib.auth."
"models.User` に割り当てるか、あるいは、``permissions`` 属性を介して :class:"
"`~django.contrib.auth.models.Group` に割り当てることができます。"

msgid "Proxy models need their own content type"
msgstr "プロキシモデルには独自のコンテンツタイプが必要です"

msgid ""
"If you want to create :ref:`permissions for a proxy model <proxy-models-"
"permissions-topic>`, pass ``for_concrete_model=False`` to :meth:`."
"ContentTypeManager.get_for_model` to get the appropriate ``ContentType``::"
msgstr ""
":ref:`プロキシモデルのパーミッション <proxy-models-permissions-topic>` を作成"
"したい場合は、次のように :meth:`.ContentTypeManager.get_for_model` に "
"``for_concrete_model=False`` を渡して、適切な ``ContentType`` を取得してくだ"
"さい。"

msgid "Permission caching"
msgstr "権限のキャッシュ"

msgid ""
"The :class:`~django.contrib.auth.backends.ModelBackend` caches permissions "
"on the user object after the first time they need to be fetched for a "
"permissions check. This is typically fine for the request-response cycle "
"since permissions aren't typically checked immediately after they are added "
"(in the admin, for example). If you are adding permissions and checking them "
"immediately afterward, in a test or view for example, the easiest solution "
"is to re-fetch the user from the database. For example::"
msgstr ""
":class:`~django.contrib.auth.backends.ModelBackend` は、権限チェックのために"
"最初に取得する必要があるユーザーオブジェクト上の権限をキャッシュします。権限"
"は (たとえば admin 内で) 付与された直後に権限をチェックすることはないため、こ"
"れは、通常のリクエスト-レスポンスのサイクルでは問題ありません。たとえばテスト"
"やビューなどで、権限を付与した直後に権限の確認を行う場合は、最も簡単な解決手"
"段はデータベースからユーザーをm再取得することです。実装例を以下に示します。"

msgid "Proxy models"
msgstr "プロキシモデル"

msgid ""
"Proxy models work exactly the same way as concrete models. Permissions are "
"created using the own content type of the proxy model. Proxy models don't "
"inherit the permissions of the concrete model they subclass::"
msgstr ""
"プロキシモデルは具象モデルと全く同じように動作します。権限は、プロキシモデル"
"の独自のコンテンツタイプを使って作成されます。プロキシモデルは、サブクラスで"
"ある具象モデルのパーミッションを継承しません。"

msgid "Authentication in web requests"
msgstr "Web リクエストにおける認証"

msgid ""
"Django uses :doc:`sessions </topics/http/sessions>` and middleware to hook "
"the authentication system into :class:`request objects <django.http."
"HttpRequest>`."
msgstr ""
"Django は :class:`リクエストオブジェクト <django.http.HttpRequest>` に対して"
"認証システムを接続させるのに :doc:`セッション </topics/http/sessions>` とミド"
"ルウェアを利用します。"

msgid ""
"These provide a :attr:`request.user <django.http.HttpRequest.user>`  "
"attribute and a :meth:`request.auser <django.http.HttpRequest.auser>` async "
"method on every request which represents the current user. If the current "
"user has not logged in, this attribute will be set to an instance of :class:"
"`~django.contrib.auth.models.AnonymousUser`, otherwise it will be an "
"instance of :class:`~django.contrib.auth.models.User`."
msgstr ""
"これらは、現在のユーザーを示すすべてのリクエストに :attr:`request.user "
"<django.http.HttpRequest.user>` 属性と :meth:`request.auser <django.http."
"HttpRequest.auser>` 非同期メソッドを提供します。もしユーザーが現在ログインし"
"ていない場合、この属性には :class:`~django.contrib.auth.models."
"AnonymousUser` のインスタンスが、ログインしている場合は :class:`~django."
"contrib.auth.models.User` のインスタンスがセットされます。"

msgid ""
"You can tell them apart with :attr:`~django.contrib.auth.models.User."
"is_authenticated`, like so::"
msgstr ""
"両者は、:attr:`~django.contrib.auth.models.User.is_authenticated` を用いて次"
"のように識別できます。"

msgid "Or in an asynchronous view::"
msgstr "非同期ビューでは次のようになります。"

msgid "The :meth:`.HttpRequest.auser` method was added."
msgstr ":meth:`.HttpRequest.auser` メソッドが追加されました。"

msgid "How to log a user in"
msgstr "ユーザーをログインさせる方法"

msgid ""
"If you have an authenticated user you want to attach to the current session "
"- this is done with a :func:`~django.contrib.auth.login` function."
msgstr ""
"現在のセッションに接続したい認証ユーザーがいる場合、:func:`~django.contrib."
"auth.login` 関数を使用できます。"

msgid "*Asynchronous version*: ``alogin()``"
msgstr "*非同期バージョン*: ``alogin()``"

msgid ""
"To log a user in, from a view, use :func:`~django.contrib.auth.login()`. It "
"takes an :class:`~django.http.HttpRequest` object and a :class:`~django."
"contrib.auth.models.User` object. :func:`~django.contrib.auth.login()` saves "
"the user's ID in the session, using Django's session framework."
msgstr ""
"ビューからユーザーをログインさせるには、:func:`~django.contrib.auth.login()` "
"を利用します。この関数は :class:`~django.http.HttpRequest` オブジェクトと :"
"class:`~django.contrib.auth.models.User` オブジェクトを受け取ります。:func:"
"`~django.contrib.auth.login()` は、Django のセッションフレームワークを利用し"
"て、セッション中のユーザー ID を保存します。"

msgid ""
"Note that any data set during the anonymous session is retained in the "
"session after a user logs in."
msgstr ""
"匿名セッション中に設定されたデータは、ユーザーがログインした後もセッション内"
"に保持されることに注意してください。"

msgid ""
"This example shows how you might use both :func:`~django.contrib.auth."
"authenticate()` and :func:`~django.contrib.auth.login()`::"
msgstr ""
"以下の例では、:func:`~django.contrib.auth.authenticate()` と :func:`~django."
"contrib.auth.login()` の2つの関数の使用方法の例です。"

msgid "``alogin()`` function was added."
msgstr "``alogin()`` 関数が追加されました。"

msgid "Selecting the authentication backend"
msgstr "認証バックエンドの選択"

msgid ""
"When a user logs in, the user's ID and the backend that was used for "
"authentication are saved in the user's session. This allows the same :ref:"
"`authentication backend <authentication-backends>` to fetch the user's "
"details on a future request. The authentication backend to save in the "
"session is selected as follows:"
msgstr ""
"ユーザーがログインするとき、そのユーザーの ID と認証に使用したバックエンド"
"は、ユーザーのセッション内に保存されます。これにより、同じ :ref:`認証バックエ"
"ンド <authentication-backends>` が今後のリクエストでユーザーの詳細情報を取得"
"できるようになります。セッション内に保存される認証バックエンドは、以下のよう"
"に選択されます。"

msgid "Use the value of the optional ``backend`` argument, if provided."
msgstr ""
"オプションの引数 ``backend`` が与えられている場合は、その値を利用する。"

msgid ""
"Use the value of the ``user.backend`` attribute, if present. This allows "
"pairing :func:`~django.contrib.auth.authenticate()` and :func:`~django."
"contrib.auth.login()`: :func:`~django.contrib.auth.authenticate()` sets the "
"``user.backend`` attribute on the user object it returns."
msgstr ""
"存在すれば属性 ``user.backend`` の値を利用する。:func:`~django.contrib.auth."
"authenticate()` は返すユーザーオブジェクトに属性値 ``user.backend`` を設定す"
"るので、これにより、:func:`~django.contrib.auth.authenticate()` と :func:"
"`~django.contrib.auth.login()` をペアリングできます。"

msgid ""
"Use the ``backend`` in :setting:`AUTHENTICATION_BACKENDS`, if there is only "
"one."
msgstr ""
":setting:`AUTHENTICATION_BACKENDS` に設定が1つだけあれば、その ``backend`` を"
"利用する。"

msgid "Otherwise, raise an exception."
msgstr "いずれにも該当しなかった場合、例外が送出される。"

msgid ""
"In cases 1 and 2, the value of the ``backend`` argument or the ``user."
"backend`` attribute should be a dotted import path string (like that found "
"in :setting:`AUTHENTICATION_BACKENDS`), not the actual backend class."
msgstr ""
"1 もしくは 2 においては、引数 ``backend`` あるいは属性値 ``user.backend`` は"
"(:setting:`AUTHENTICATION_BACKENDS` で定義されているのと同様に)ドット付きのイ"
"ンポート先を示すパスの文字列でなければなりません。"

msgid "How to log a user out"
msgstr "ユーザーをログアウトさせる方法"

msgid "*Asynchronous version*: ``alogout()``"
msgstr "*非同期バージョン*: ``alogout()``"

msgid ""
"To log out a user who has been logged in via :func:`django.contrib.auth."
"login()`, use :func:`django.contrib.auth.logout()` within your view. It "
"takes an :class:`~django.http.HttpRequest` object and has no return value. "
"Example::"
msgstr ""
":func:`django.contrib.auth.login()` を利用してログインしたユーザーをログアウ"
"トさせるためには、:func:`django.contrib.auth.logout()` をビューの中で利用して"
"ください。この関数は :class:`~django.http.HttpRequest` オブジェクトを受け取"
"り、値を返しません。実装例は下記のようになります::"

msgid ""
"Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if "
"the user wasn't logged in."
msgstr ""
":func:`~django.contrib.auth.logout()` は対象となるユーザーが最初からログイン"
"していなかった場合でも例外を送出しない事に注意してください。"

msgid ""
"When you call :func:`~django.contrib.auth.logout()`, the session data for "
"the current request is completely cleaned out. All existing data is removed. "
"This is to prevent another person from using the same web browser to log in "
"and have access to the previous user's session data. If you want to put "
"anything into the session that will be available to the user immediately "
"after logging out, do that *after* calling :func:`django.contrib.auth."
"logout()`."
msgstr ""
":func:`~django.contrib.auth.logout()` を呼び出すと、現在処理しているリクエス"
"トに対応したセッション情報は完全に破棄されます。その時点までに存在している全"
"てのデータが削除されます。これは、別の人物が同じウェブブラウザを利用してログ"
"インし、前のユーザーのセッションにアクセスして使用してしまう事態を防ぐためで"
"す。ログアウトした直後でも利用できる何らかの情報をセッションに保存したい場合"
"は、:func:`django.contrib.auth.logout()` を呼び出した *後* に行ってください。"

msgid "``alogout()`` function was added."
msgstr "``alogout()`` 関数が追加されました。"

msgid "Limiting access to logged-in users"
msgstr "ログインしているユーザーにアクセスを制限する"

msgid "The raw way"
msgstr "原理的な方法"

msgid ""
"The raw way to limit access to pages is to check :attr:`request.user."
"is_authenticated <django.contrib.auth.models.User.is_authenticated>` and "
"either redirect to a login page::"
msgstr ""
"ページに対するアクセスを制限する直接的な方法は :attr:`request.user."
"is_authenticated <django.contrib.auth.models.User.is_authenticated>` の確認と"
"共にログインページへのリダイレクトを利用する事です:"

msgid "...or display an error message::"
msgstr "もしくはエラーメッセージを出力します。"

msgid "The ``login_required`` decorator"
msgstr "``login_required`` デコレータ"

msgid ""
"As a shortcut, you can use the convenient :func:`~django.contrib.auth."
"decorators.login_required` decorator::"
msgstr ""
"ショートカットとして、便利な :func:`~django.contrib.auth.decorators."
"login_required` デコレータを利用できます::"

msgid ""
":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ""
":func:`~django.contrib.auth.decorators.login_required` は下記の処理を行いま"
"す:"

msgid ""
"If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`, passing the current absolute path in the query string. "
"Example: ``/accounts/login/?next=/polls/3/``."
msgstr ""
"もしユーザがログインしていなければ、:setting:`settings.LOGIN_URL "
"<LOGIN_URL>` にリダイレクトし、クエリ文字列に現在の絶対パスを渡します。リダイ"
"レクト先の例: ``/accounts/login/?next=/polls/3/``"

msgid ""
"If the user is logged in, execute the view normally. The view code is free "
"to assume the user is logged in."
msgstr ""
"もしユーザがログインしていれば、通常通りビューを処理します。ビューのコードの"
"中ではユーザがログインしているかを意識しなくて良いのです。"

msgid ""
"By default, the path that the user should be redirected to upon successful "
"authentication is stored in a query string parameter called ``\"next\"``. If "
"you would prefer to use a different name for this parameter, :func:`~django."
"contrib.auth.decorators.login_required` takes an optional "
"``redirect_field_name`` parameter::"
msgstr ""
"デフォルトでは、認証に成功したユーザがリダイレクトされる先のパスは "
"``\"next\"`` という名称のクエリパラメータに格納されています。もし異なるパラ"
"メータ名を利用したい場合、:func:`~django.contrib.auth.decorators."
"login_required` が ``redirect_field_name`` という省略可能な引数を受け取りま"
"す。"

msgid ""
"Note that if you provide a value to ``redirect_field_name``, you will most "
"likely need to customize your login template as well, since the template "
"context variable which stores the redirect path will use the value of "
"``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr ""
"``redirect_field_name`` に値を持たせた場合、ログインテンプレートもカスタマイ"
"ズする必要があるでしょう。これは、リダイレクト先のパスを格納しているテンプ"
"レートコンテキスト変数が、キーとして (デフォルトの) ``\"next\"`` でなく "
"``redirect_field_name`` の値を使用してしまうためです。"

msgid ""
":func:`~django.contrib.auth.decorators.login_required` also takes an "
"optional ``login_url`` parameter. Example::"
msgstr ""
":func:`~django.contrib.auth.decorators.login_required` はまた省略可能な引数と"
"して ``login_url`` を受け取る事ができます。以下の例のように利用します::"

msgid ""
"Note that if you don't specify the ``login_url`` parameter, you'll need to "
"ensure that the :setting:`settings.LOGIN_URL <LOGIN_URL>` and your login "
"view are properly associated. For example, using the defaults, add the "
"following lines to your URLconf::"
msgstr ""
"``login_url`` 引数を指定しなかった場合、:setting:`settings.LOGIN_URL "
"<LOGIN_URL>` を設定して、ログイン用ビューを適切に関連付ける必要があることに注"
"意してください。たとえば、デフォルトの設定を利用する場合、下記の行を URLconf "
"に追加します。"

msgid ""
"The :setting:`settings.LOGIN_URL <LOGIN_URL>` also accepts view function "
"names and :ref:`named URL patterns <naming-url-patterns>`. This allows you "
"to freely remap your login view within your URLconf without having to update "
"the setting."
msgstr ""
":setting:`settings.LOGIN_URL <LOGIN_URL>` は、ビュー関数名と :ref:`命名され"
"た URL パターン <naming-url-patterns>` も受け付けます。これにより、設定を更新"
"せずに URLconf 内でログイン用ビューを自由に再マッピングできます。"

msgid ""
"The ``login_required`` decorator does NOT check the ``is_active`` flag on a "
"user, but the default :setting:`AUTHENTICATION_BACKENDS` reject inactive "
"users."
msgstr ""
"``login_required`` デコレータはユーザーのフラグ ``is_active`` をチェック「し"
"ません」が、デフォルトの :setting:`AUTHENTICATION_BACKENDS` は非アクティブな"
"ユーザを拒否します。"

msgid ""
"If you are writing custom views for Django's admin (or need the same "
"authorization check that the built-in views use), you may find the :func:"
"`django.contrib.admin.views.decorators.staff_member_required` decorator a "
"useful alternative to ``login_required()``."
msgstr ""
"もし Django の管理画面向けにカスタムビューを実装している (あるいはビルトイン"
"のビューが利用しているのと同じ認可チェックが必要である) 場合は、:func:"
"`django.contrib.admin.views.decorators.staff_member_required` デコレータが "
"``login_required()`` の代替手段となるかもしれません。"

msgid "The ``LoginRequiredMixin`` mixin"
msgstr "``LoginRequiredMixin`` mixin"

msgid ""
"When using :doc:`class-based views </topics/class-based-views/index>`, you "
"can achieve the same behavior as with ``login_required`` by using the "
"``LoginRequiredMixin``. This mixin should be at the leftmost position in the "
"inheritance list."
msgstr ""
":doc:`クラスベースのビュー </topics/class-based-views/index>` を使う際、 "
"``LoginRequiredMixin`` を使うことで ``login_required`` と同じ動作をさせること"
"ができます。 この mixin は、継承リストの一番左に記述される必要があります。"

msgid ""
"If a view is using this mixin, all requests by non-authenticated users will "
"be redirected to the login page or shown an HTTP 403 Forbidden error, "
"depending on the :attr:`~django.contrib.auth.mixins.AccessMixin."
"raise_exception` parameter."
msgstr ""
"ビューがこの mixin を使う場合、認証されていないユーザによるすべてのリクエスト"
"は、ログインページにリダイレクトされるか、HTTP 403 Forbidden エラー表示となり"
"ます。これは、:attr:`~django.contrib.auth.mixins.AccessMixin."
"raise_exception` パラメータにて設定します。"

msgid ""
"You can set any of the parameters of :class:`~django.contrib.auth.mixins."
"AccessMixin` to customize the handling of unauthorized users::"
msgstr ""
"次のように :class:`~django.contrib.auth.mixins.AccessMixin` のパラメータを設"
"定することで、認可されていないユーザの処理をカスタマイズできます。"

msgid ""
"Just as the ``login_required`` decorator, this mixin does NOT check the "
"``is_active`` flag on a user, but the default :setting:"
"`AUTHENTICATION_BACKENDS` reject inactive users."
msgstr ""
"``login_required`` デコレータと同様に、この mixin はユーザの ``is_active`` フ"
"ラグをチェックしません。しかし、デフォルトの :setting:"
"`AUTHENTICATION_BACKENDS` が非アクティブのユーザを拒否します。"

msgid "Limiting access to logged-in users that pass a test"
msgstr "テストをパスしたログイン済みユーザのアクセスを制限する"

msgid ""
"To limit access based on certain permissions or some other test, you'd do "
"essentially the same thing as described in the previous section."
msgstr ""
"特定の権限やその他のテストに基づいてアクセスを制限するには、前のセクションで"
"説明したのと基本的に同じことを行います。"

msgid ""
"You can run your test on :attr:`request.user <django.http.HttpRequest.user>` "
"in the view directly. For example, this view checks to make sure the user "
"has an email in the desired domain and if not, redirects to the login page::"
msgstr ""
"直接ビューで :attr:`request.user <django.http.HttpRequest.user>` に対してテス"
"トを実行できます。たとえば、このビューは、ユーザが希望するドメインのメールを"
"持っているかどうかをチェックし、持っていない場合はログインページにリダイレク"
"トします:"

msgid ""
"As a shortcut, you can use the convenient ``user_passes_test`` decorator "
"which performs a redirect when the callable returns ``False``::"
msgstr ""
"便利なショートカットとして、 ``user_passes_test`` デコレータを使えば、呼び出"
"し可能オブジェクトが ``False`` を返したときにリダイレクトできます:"

msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes a required "
"argument: a callable that takes a :class:`~django.contrib.auth.models.User` "
"object and returns ``True`` if the user is allowed to view the page. Note "
"that :func:`~django.contrib.auth.decorators.user_passes_test` does not "
"automatically check that the :class:`~django.contrib.auth.models.User` is "
"not anonymous."
msgstr ""
":func:`~django.contrib.auth.decorators.user_passes_test` は必須引数として :"
"class:`~django.contrib.auth.models.User` オブジェクトを受け取り、そのユーザが"
"ページの閲覧を許可されていれば ``True`` を返す呼び出し可能オブジェクトを受け"
"取ります。この :func:`~django.contrib.auth.decorators.user_passes_test` は :"
"class:`~django.contrib.auth.models.User` が匿名でないことを自動的にはチェック"
"しないことに注意してください。"

msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes two optional "
"arguments:"
msgstr ""
":func:`~django.contrib.auth.decorators.user_passes_test` はオプションで2つの"
"引数を取ります:"

msgid "``login_url``"
msgstr "``login_url``"

msgid ""
"Lets you specify the URL that users who don't pass the test will be "
"redirected to. It may be a login page and defaults to :setting:`settings."
"LOGIN_URL <LOGIN_URL>` if you don't specify one."
msgstr ""
"テストに合格しなかったユーザーがリダイレクトされるURLを指定します。これはログ"
"インページで、何も指定しなければデフォルトの :setting:`settings.LOGIN_URL "
"<LOGIN_URL>` になります。"

msgid "``redirect_field_name``"
msgstr "``redirect_field_name``"

msgid ""
"Same as for :func:`~django.contrib.auth.decorators.login_required`. Setting "
"it to ``None`` removes it from the URL, which you may want to do if you are "
"redirecting users that don't pass the test to a non-login page where there's "
"no \"next page\"."
msgstr ""
"これは :func:`~django.contrib.auth.decorators.login_required` と同じです。こ"
"れを ``None`` に設定すると、URL からこれを削除します。これは、テストに合格し"
"ないユーザーを「次のページ」がない非ログインページにリダイレクトする場合に有"
"効かもしれません。"

msgid ""
"When using :doc:`class-based views </topics/class-based-views/index>`, you "
"can use the ``UserPassesTestMixin`` to do this."
msgstr ""
":doc:`クラスベースのビュー </topics/class-based-views/index>` を使用する場"
"合、 ``UserPassesTestMixin`` が使えます。"

msgid ""
"You have to override the ``test_func()`` method of the class to provide the "
"test that is performed. Furthermore, you can set any of the parameters of :"
"class:`~django.contrib.auth.mixins.AccessMixin` to customize the handling of "
"unauthorized users::"
msgstr ""
"実行されるテストを提供するには、クラスの ``test_func()`` メソッドをオーバーラ"
"イドする必要があります。さらに、 :class:`~django.contrib.auth.mixins."
"AccessMixin` のパラメータを設定することで、未認証ユーザの処理をカスタマイズで"
"きます。"

msgid ""
"You can also override the ``get_test_func()`` method to have the mixin use a "
"differently named function for its checks (instead of :meth:`test_func`)."
msgstr ""
"また、``get_test_func()`` メソッドをオーバーライドすることで、(:meth:"
"`test_func` の代わりに) 別の名前の関数をチェックに使用できます。"

msgid "Stacking ``UserPassesTestMixin``"
msgstr "``UserPassesTestMixin`` を重ねる"

msgid ""
"Due to the way ``UserPassesTestMixin`` is implemented, you cannot stack them "
"in your inheritance list. The following does NOT work::"
msgstr ""
"``UserPassesTestMixin`` の実装上、継承リストに複数個を重ねることはできませ"
"ん。以下は動作しません:"

msgid ""
"If ``TestMixin1`` would call ``super()`` and take that result into account, "
"``TestMixin1`` wouldn't work standalone anymore."
msgstr ""
"もし ``TestMixin1`` が ``super()`` を呼び出して、その結果を考慮すると、 "
"``TestMixin1`` はスタンドアロンでは動作しなくなります。"

msgid "The ``permission_required`` decorator"
msgstr "``permission_required`` デコレータ"

msgid ""
"It's a relatively common task to check whether a user has a particular "
"permission. For that reason, Django provides a shortcut for that case: the :"
"func:`~django.contrib.auth.decorators.permission_required()` decorator.::"
msgstr ""
"ユーザが特定のパーミッションを持っているかどうかをチェックするのは、 比較的一"
"般的な作業です。そのため、 Django はそのためのショートカットを提供します: :"
"func:`~django.contrib.auth.decorators.permission_required()` デコレータです:"

msgid ""
"Just like the :meth:`~django.contrib.auth.models.User.has_perm` method, "
"permission names take the form ``\"<app label>.<permission codename>\"`` (i."
"e. ``polls.add_choice`` for a permission on a model in the ``polls`` "
"application)."
msgstr ""
":meth:`~django.contrib.auth.models.User.has_perm` メソッドと同じように、パー"
"ミッション名は ``\"<app label>.<permission codename>\"`` という形式を取りま"
"す (たとえば、``polls`` アプリケーションのモデルに対するパーミッションは "
"``polls.add_choice`` となります)。"

msgid ""
"The decorator may also take an iterable of permissions, in which case the "
"user must have all of the permissions in order to access the view."
msgstr ""
"この場合、ビューにアクセスするためには、ユーザはすべてのパーミッションを持っ"
"ている必要があります。"

msgid ""
"Note that :func:`~django.contrib.auth.decorators.permission_required()` also "
"takes an optional ``login_url`` parameter::"
msgstr ""
"また、 :func:`~django.contrib.auth.decorators.permission_required()` は省略可"
"能な引数として ``login_url`` も受け取ることに注意してください:"

msgid ""
"As in the :func:`~django.contrib.auth.decorators.login_required` decorator, "
"``login_url`` defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""
":func:`~django.contrib.auth.decorators.login_required` デコレータと同様に、 "
"``login_url`` のデフォルトは :setting:`settings.LOGIN_URL <LOGIN_URL>` です。"

msgid ""
"If the ``raise_exception`` parameter is given, the decorator will raise :exc:"
"`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 (HTTP "
"Forbidden) view<http_forbidden_view>` instead of redirecting to the login "
"page."
msgstr ""
"もし ``raise_exception`` パラメータが与えられた場合、デコレータは :exc:"
"`~django.core.exceptions.PermissionDenied` を発生させ、ログインページにリダイ"
"レクトする代わりに :ref:`403 (HTTP Forbidden) ビュー <http_forbidden_view>` "
"を表示します。"

msgid ""
"If you want to use ``raise_exception`` but also give your users a chance to "
"login first, you can add the :func:`~django.contrib.auth.decorators."
"login_required` decorator::"
msgstr ""
"もし ``raise_exception`` を使いたいが、ユーザが最初にログインする機会を与えた"
"い場合は、 :func:`~django.contrib.auth.decorators.login_required` デコレータ"
"を追加してください:"

msgid ""
"This also avoids a redirect loop when :class:`.LoginView`'s "
"``redirect_authenticated_user=True`` and the logged-in user doesn't have all "
"of the required permissions."
msgstr ""
"また、:class:`.LoginView` の ``redirect_authenticated_user=True`` で、ログイ"
"ンしているユーザーが必要なすべての権限を持っていない場合に、リダイレクトルー"
"プを回避できます。"

msgid "The ``PermissionRequiredMixin`` mixin"
msgstr "``PermissionRequiredMixin`` ミックスイン"

msgid ""
"To apply permission checks to :doc:`class-based views </ref/class-based-"
"views/index>`, you can use the ``PermissionRequiredMixin``:"
msgstr ""
":doc:`クラスベースのビュー </ref/class-based-views/index>` にパーミッション"
"チェックを適用するには、 ``PermissionRequiredMixin`` を使用します:"

msgid ""
"This mixin, just like the ``permission_required`` decorator, checks whether "
"the user accessing a view has all given permissions. You should specify the "
"permission (or an iterable of permissions) using the ``permission_required`` "
"parameter::"
msgstr ""
"このミックスインは ``permission_required`` デコレータと同様、ビューにアクセス"
"するユーザが与えられたパーミッションをすべて保持しているかどうかをチェックし"
"ます。パーミッション (またはパーミッションのイテラブル) は "
"``permission_required`` パラメータで指定します。"

msgid ""
"You can set any of the parameters of :class:`~django.contrib.auth.mixins."
"AccessMixin` to customize the handling of unauthorized users."
msgstr ""
"次のように :class:`~django.contrib.auth.mixins.AccessMixin` のパラメータを指"
"定することで、認可されていないユーザの処理をカスタマイズできます。"

msgid "You may also override these methods:"
msgstr "これらのメソッドをオーバーライドすることもできます:"

msgid ""
"Returns an iterable of permission names used by the mixin. Defaults to the "
"``permission_required`` attribute, converted to a tuple if necessary."
msgstr ""
"ミックスインが使用するパーミッション名のイテラブルを返します。デフォルトは "
"``permission_required`` 属性で、必要に応じてタプルに変換されます。"

msgid ""
"Returns a boolean denoting whether the current user has permission to "
"execute the decorated view. By default, this returns the result of calling :"
"meth:`~django.contrib.auth.models.User.has_perms()` with the list of "
"permissions returned by :meth:`get_permission_required()`."
msgstr ""
"現在のユーザがデコレートされたビューを実行する権限を持っているかどうかを真偽"
"値で返します。デフォルトでは、 :meth:`~django.contrib.auth.models.User."
"has_perms()` を :meth:`get_permission_required()` によって返されたパーミッ"
"ションのリストで呼び出した結果を返します。"

msgid "Redirecting unauthorized requests in class-based views"
msgstr "クラスベースのビューで、不正なリクエストをリダイレクトする"

msgid ""
"To ease the handling of access restrictions in :doc:`class-based views </ref/"
"class-based-views/index>`, the ``AccessMixin`` can be used to configure the "
"behavior of a view when access is denied. Authenticated users are denied "
"access with an HTTP 403 Forbidden response. Anonymous users are redirected "
"to the login page or shown an HTTP 403 Forbidden response, depending on the :"
"attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception` attribute."
msgstr ""
":doc:`クラスベースのビュー </ref/class-based-views/index>` におけるアクセス制"
"限の取り扱いを簡単にするために、 ``AccessMixin`` を使ってアクセスが拒否された"
"ときのビューの動作を指定できます。認証されたユーザーはHTTP 403 Forbiddenレス"
"ポンスでアクセスを拒否されます。匿名ユーザーは :attr:`~django.contrib.auth."
"mixins.AccessMixin.raise_exception` 属性に応じて、ログインページにリダイレク"
"トされるか、HTTP 403 Forbidden レスポンスが表示されます。"

msgid ""
"Default return value for :meth:`get_login_url`.  Defaults to ``None`` in "
"which case :meth:`get_login_url` falls back to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`."
msgstr ""
":meth:`get_login_url` のデフォルトの戻り値。デフォルトは ``None`` で、この場"
"合 :meth:`get_login_url` は :setting:`settings.LOGIN_URL <LOGIN_URL>` に"
"フォールバックします。"

msgid ""
"Default return value for :meth:`get_permission_denied_message`. Defaults to "
"an empty string."
msgstr ""
":meth:`get_permission_denied_message` のデフォルトの戻り値。デフォルトは空文"
"字列です。"

msgid ""
"Default return value for :meth:`get_redirect_field_name`. Defaults to "
"``\"next\"``."
msgstr ""
":meth:`get_redirect_field_name` のデフォルトの戻り値。デフォルトは "
"``\"next\"`` です。"

msgid ""
"If this attribute is set to ``True``, a :class:`~django.core.exceptions."
"PermissionDenied` exception is raised when the conditions are not met.  When "
"``False`` (the default), anonymous users are redirected to the login page."
msgstr ""
"この属性が ``True`` に設定されている場合、条件が満たされないと :class:"
"`~django.core.exceptions.PermissionDenied` 例外が発生します。 ``False`` (デ"
"フォルト) の場合、匿名ユーザはログインページにリダイレクトされます。"

msgid ""
"Returns the URL that users who don't pass the test will be redirected to. "
"Returns :attr:`login_url` if set, or :setting:`settings.LOGIN_URL "
"<LOGIN_URL>` otherwise."
msgstr ""
"テストにパスしなかったユーザーがリダイレクトされる URL を返します。設定されて"
"いれば :attr:`login_url` を、設定されていなければ :setting:`settings."
"LOGIN_URL <LOGIN_URL>` を返します。"

msgid ""
"When :attr:`raise_exception` is ``True``, this method can be used to control "
"the error message passed to the error handler for display to the user. "
"Returns the :attr:`permission_denied_message` attribute by default."
msgstr ""
":attr:`raise_exception` が ``True`` の場合、このメソッドを使ってエラーハンド"
"ラに渡されるエラーメッセージを制御できます。デフォルトでは :attr:"
"`permission_denied_message` 属性を返します。"

msgid ""
"Returns the name of the query parameter that will contain the URL the user "
"should be redirected to after a successful login. If you set this to "
"``None``, a query parameter won't be added. Returns the :attr:"
"`redirect_field_name` attribute by default."
msgstr ""
"ログインに成功した後にユーザーがリダイレクトされる URL を含むクエリパラメータ"
"の名前を返します。これを ``None`` に設定すると、クエリパラメータは追加されま"
"せん。デフォルトでは :attr:`redirect_field_name` 属性を返します。"

msgid ""
"Depending on the value of ``raise_exception``, the method either raises a :"
"exc:`~django.core.exceptions.PermissionDenied` exception or redirects the "
"user to the ``login_url``, optionally including the ``redirect_field_name`` "
"if it is set."
msgstr ""
"``raise_exception`` の値に応じて、このメソッドは :exc:`~django.core."
"exceptions.PermissionDenied` 例外を発生させるか、ユーザを ``login_url`` にリ"
"ダイレクトします。オプションとして ``redirect_field_name`` が指定されている場"
"合は、それを含みます。"

msgid "Session invalidation on password change"
msgstr "パスワード変更時にセッションを無効化する"

msgid ""
"If your :setting:`AUTH_USER_MODEL` inherits from :class:`~django.contrib."
"auth.models.AbstractBaseUser` or implements its own :meth:`~django.contrib."
"auth.models.AbstractBaseUser.get_session_auth_hash()` method, authenticated "
"sessions will include the hash returned by this function. In the :class:"
"`~django.contrib.auth.models.AbstractBaseUser` case, this is an HMAC of the "
"password field. Django verifies that the hash in the session for each "
"request matches the one that's computed during the request. This allows a "
"user to log out all of their sessions by changing their password."
msgstr ""
":setting:`AUTH_USER_MODEL` が :class:`~django.contrib.auth.models."
"AbstractBaseUser` を継承しているか、独自の :meth:`~django.contrib.auth."
"models.AbstractBaseUser.get_session_auth_hash()` メソッドを実装している場合、"
"認証されたセッションにはこの関数が返すハッシュが含まれます。:class:`~django."
"contrib.auth.models.AbstractBaseUser` の場合、これはパスワードフィールドの "
"HMAC です。Django は各リクエストのセッションのハッシュが、リクエスト中に計算"
"されたハッ シュと一致することを確認します。これにより、ユーザはパスワードを変"
"更することで、全てのセッションをログアウトできます。"

msgid ""
"The default password change views included with Django, :class:`~django."
"contrib.auth.views.PasswordChangeView` and the ``user_change_password`` view "
"in the :mod:`django.contrib.auth` admin, update the session with the new "
"password hash so that a user changing their own password won't log "
"themselves out. If you have a custom password change view and wish to have "
"similar behavior, use the :func:`update_session_auth_hash` function."
msgstr ""
"Django に含まれるデフォルトのパスワード変更ビュー、 :class:`~django.contrib."
"auth.views.PasswordChangeView` と、 :mod:`django.contrib.auth` admin の "
"``user_change_password`` ビューは、ユーザが自分のパスワードを変更してもログア"
"ウトしないように、新しいパスワードハッシュでセッションを更新します。カスタム"
"のパスワード変更ビューがあり、同様の動作をさせたい場合は :func:"
"`update_session_auth_hash` 関数を使用してください。"

msgid "*Asynchronous version*: ``aupdate_session_auth_hash()``"
msgstr "*非同期バージョン*: ``aupdate_session_auth_hash()``"

msgid ""
"This function takes the current request and the updated user object from "
"which the new session hash will be derived and updates the session hash "
"appropriately. It also rotates the session key so that a stolen session "
"cookie will be invalidated."
msgstr ""
"この関数は現在のリクエストと、新しいセッションハッシュの元になる 更新された"
"ユーザオブジェクトを受け取り、セッションハッシュを適切に更新します。また、盗"
"まれたセッションクッキーが無効になるようにセッションキーをローテートします。"

msgid "Example usage::"
msgstr "使用例:"

msgid "``aupdate_session_auth_hash()`` function was added."
msgstr "``aupdate_session_auth_hash()`` 関数が追加されました。"

msgid ""
"Since :meth:`~django.contrib.auth.models.AbstractBaseUser."
"get_session_auth_hash()` is based on :setting:`SECRET_KEY`, secret key "
"values must be rotated to avoid invalidating existing sessions when updating "
"your site to use a new secret. See :setting:`SECRET_KEY_FALLBACKS` for "
"details."
msgstr ""
":meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash()` "
"は :setting:`SECRET_KEY` に基づいているので、サイトを更新して新しいシークレッ"
"トを使用する場合、既存のセッションが無効にならないようにシークレットキーの値"
"をローテーションする必要があります。詳細は :setting:`SECRET_KEY_FALLBACKS` を"
"参照してください。"

msgid "Authentication Views"
msgstr "認証ビュー"

msgid ""
"Django provides several views that you can use for handling login, logout, "
"and password management. These make use of the :ref:`stock auth forms <built-"
"in-auth-forms>` but you can pass in your own forms as well."
msgstr ""
"Django の提供する複数のビューを使って、ログイン、ログアウト、パスワード管理を"
"行うことができます。これらは :ref:`ビルトインの認証フォーム <built-in-auth-"
"forms>` を使用しますが、独自のフォームを使用することもできます。"

msgid ""
"Django provides no default template for the authentication views. You should "
"create your own templates for the views you want to use. The template "
"context is documented in each view, see :ref:`all-authentication-views`."
msgstr ""
"認証ビュー向けのデフォルトのテンプレートはありません。使用したいビューのテン"
"プレートを自分で作成する必要があります。テンプレートのコンテキストは各ビュー"
"に記述されているので、:ref:`all-authentication-views` を参照してください。"

msgid "Using the views"
msgstr "ビューを使用する"

msgid ""
"There are different methods to implement these views in your project. The "
"easiest way is to include the provided URLconf in ``django.contrib.auth."
"urls`` in your own URLconf, for example::"
msgstr ""
"プロジェクト内でこれらのビューを実装するには、いくつかの方法があります。最も"
"簡単なのは、``django.contrib.auth.urls`` で提供される URLconf を自分の "
"URLconf に含めることです。たとえば、次のようにします。"

msgid "This will include the following URL patterns:"
msgstr "これには、以下の URL パターンが含まれます。"

msgid ""
"The views provide a URL name for easier reference. See :doc:`the URL "
"documentation </topics/http/urls>` for details on using named URL patterns."
msgstr ""
"これらのビューは、より簡単に参照できる URL 名を提供します. 名前付き URL パ"
"ターンの詳細については、:doc:`URL のドキュメント </topics/http/urls>` をご覧"
"ください。"

msgid ""
"If you want more control over your URLs, you can reference a specific view "
"in your URLconf::"
msgstr ""
"URL をより詳細にコントロールしたい場合は、次のように URLconf 内の特定のビュー"
"を指定することもできます。"

msgid ""
"The views have optional arguments you can use to alter the behavior of the "
"view. For example, if you want to change the template name a view uses, you "
"can provide the ``template_name`` argument. A way to do this is to provide "
"keyword arguments in the URLconf, these will be passed on to the view. For "
"example::"
msgstr ""
"これらのビューでは、挙動を操作するためのオプショナル引数を使えます。たとえ"
"ば、ビューが参照するテンプレートの名前を変更したいときは、``template_name`` "
"引数を指定します。引数指定の方法の 1 つは、URLconf 内でキーワード引数を渡すこ"
"とです。指定した引数はビューに渡されます。たとえば、次のようにします。"

msgid ""
"All views are :doc:`class-based </topics/class-based-views/index>`, which "
"allows you to easily customize them by subclassing."
msgstr ""
"すべてのビューは :doc:`クラスベース </topics/class-based-views/index>` なの"
"で、サブクラス化することで容易にカスタムできます。"

msgid "All authentication views"
msgstr "すべての認証ビュー"

msgid ""
"This is a list with all the views ``django.contrib.auth`` provides. For "
"implementation details see :ref:`using-the-views`."
msgstr ""
"以下は、``django.contrib.auth`` が提供するすべてのビューのリストです。実装の"
"詳細については、 :ref:`using-the-views` を参照してください。"

msgid "**URL name:** ``login``"
msgstr "**URL 名:** ``login``"

msgid ""
"See :doc:`the URL documentation </topics/http/urls>` for details on using "
"named URL patterns."
msgstr ""
"名前付き URL パターンの使い方は、:doc:`URL のドキュメント </topics/http/"
"urls>` をご覧ください。"

msgid "**Methods and Attributes**"
msgstr "**メソッドと属性**"

msgid ""
"The name of a template to display for the view used to log the user in. "
"Defaults to :file:`registration/login.html`."
msgstr ""
"ユーザーをログインさせるビューに表示するテンプレートの名前。デフォルトは :"
"file:`registration/login.html` です。"

msgid ""
"The URL to redirect to after login. Defaults to :setting:"
"`LOGIN_REDIRECT_URL`."
msgstr ""
"ログイン後にリダイレクトするURL。デフォルトは :setting:`LOGIN_REDIRECT_URL` "
"です。"

msgid ""
"The name of a ``GET`` field containing the URL to redirect to after login. "
"Defaults to ``next``. Overrides the :meth:`get_default_redirect_url` URL if "
"the given ``GET`` parameter is passed."
msgstr ""
"ログイン後にリダイレクトする URL を含む ``GET`` フィールドの名前。デフォルト"
"は ``next`` です。 ``GET`` パラメータが渡された場合、 :meth:"
"`get_default_redirect_url` URL をオーバーライドします。"

msgid ""
"A callable (typically a form class) to use for authentication. Defaults to :"
"class:`~django.contrib.auth.forms.AuthenticationForm`."
msgstr ""
"認証に使用する呼び出し可能オブジェクト (通常はフォームクラス) です。デフォル"
"トは :class:`~django.contrib.auth.forms.AuthenticationForm` です。"

msgid ""
"A dictionary of context data that will be added to the default context data "
"passed to the template."
msgstr ""
"テンプレートに渡されるデフォルトコンテキストデータに追加されるコンテキスト"
"データの辞書。"

msgid ""
"A boolean that controls whether or not authenticated users accessing the "
"login page will be redirected as if they had just successfully logged in. "
"Defaults to ``False``."
msgstr ""
"ログインページにアクセスした認証済みユーザーを、ログインに成功したかのように"
"リダイレクトするかどうかを制御する真偽値。デフォルトは ``False`` です。"

msgid ""
"If you enable ``redirect_authenticated_user``, other websites will be able "
"to determine if their visitors are authenticated on your site by requesting "
"redirect URLs to image files on your website. To avoid this \"`social media "
"fingerprinting <https://robinlinus.github.io/socialmedia-leak/>`_\" "
"information leakage, host all images and your favicon on a separate domain."
msgstr ""
"``redirect_authenticated_user`` を有効にすると、他のウェブサイトは、あなたの"
"ウェブサイトの画像ファイルへのリダイレクト URL を要求することで、訪問者があな"
"たのサイトで認証されているかどうかを判断できます。この `「ソーシャルメディア"
"のフィンガープリンティング」 <https://robinlinus.github.io/socialmedia-leak/"
">`_ による情報漏洩を避けるには、すべての画像と favicon を別ドメインでホストし"
"てください。"

msgid ""
"Enabling ``redirect_authenticated_user`` can also result in a redirect loop "
"when using the :func:`.permission_required` decorator unless the "
"``raise_exception`` parameter is used."
msgstr ""
"``redirect_authenticated_user`` を有効にすると、 :func:`."
"permission_required` デコレータを使用したときに ``raise_exception`` パラメー"
"タを使用しない限り、リダイレクトループが発生する可能性があります。"

msgid ""
"A :class:`set` of hosts, in addition to :meth:`request.get_host() <django."
"http.HttpRequest.get_host>`, that are safe for redirecting after login. "
"Defaults to an empty :class:`set`."
msgstr ""
"ログイン後にリダイレクトしても安全なホストの :class:`set` を、 :meth:"
"`request.get_host() <django.http.HttpRequest.get_host>` に加えて指定します。"
"デフォルトは空の :class:`set` です。"

msgid ""
"Returns the URL to redirect to after login. The default implementation "
"resolves and returns :attr:`next_page` if set, or :setting:"
"`LOGIN_REDIRECT_URL` otherwise."
msgstr ""
"ログイン後にリダイレクトするURLを返します。デフォルトの実装では、:attr:"
"`next_page` が指定されていれば解決して返し、そうでなければ :setting:"
"`LOGIN_REDIRECT_URL` を返します。"

msgid "Here's what ``LoginView`` does:"
msgstr "以下は ``LoginView`` の機能です:"

msgid ""
"If called via ``GET``, it displays a login form that POSTs to the same URL. "
"More on this in a bit."
msgstr ""
"``GET`` で呼び出すと、同じURLにPOSTするログインフォームを表示します。これにつ"
"いてはもう少し詳しく説明します。"

msgid ""
"If called via ``POST`` with user submitted credentials, it tries to log the "
"user in. If login is successful, the view redirects to the URL specified in "
"``next``. If ``next`` isn't provided, it redirects to :setting:`settings."
"LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (which defaults to ``/accounts/"
"profile/``). If login isn't successful, it redisplays the login form."
msgstr ""
"ユーザが送信した認証情報を使って ``POST`` 経由で呼び出された場合、ユーザをロ"
"グインさせようとします。ログインに成功すると、ビューは ``next`` で指定された "
"URL にリダイレクトします。もし ``next`` が指定されていない場合、 :setting:"
"`settings.LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (デフォルトは ``/accounts/"
"profile/``) にリダイレクトします。ログインが成功しなかった場合、ログイン"
"フォームを再表示します。"

msgid ""
"It's your responsibility to provide the html for the login template , called "
"``registration/login.html`` by default. This template gets passed four "
"template context variables:"
msgstr ""
"デフォルトでは ``registration/login.html`` と呼び出されるログインテンプレート"
"のhtmlを提供するのはあなたの責任です。このテンプレートには以下の4つのテンプ"
"レートコンテキスト変数が渡されます:"

msgid ""
"``form``: A :class:`~django.forms.Form` object representing the :class:"
"`~django.contrib.auth.forms.AuthenticationForm`."
msgstr ""
"``form``: :class:`~django.contrib.auth.forms.AuthenticationForm` を表す :"
"class:`~django.forms.Form` オブジェクトです。"

msgid ""
"``next``: The URL to redirect to after successful login. This may contain a "
"query string, too."
msgstr ""
"``next``: ログイン成功後にリダイレクトするURL。これはクエリ文字列を含むことも"
"できます。"

msgid ""
"``site``: The current :class:`~django.contrib.sites.models.Site`, according "
"to the :setting:`SITE_ID` setting. If you don't have the site framework "
"installed, this will be set to an instance of :class:`~django.contrib.sites."
"requests.RequestSite`, which derives the site name and domain from the "
"current :class:`~django.http.HttpRequest`."
msgstr ""
"``site``: :setting:`SITE_ID` 設定に基づく現在の :class:`~django.contrib."
"sites.models.Site` 。サイトフレームワークがインストールされていない場合、 :"
"class:`~django.contrib.sites.requests.RequestSite` のインスタンスに設定されま"
"す。このインスタンスは現在の :class:`~django.http.HttpRequest` からサイト名と"
"ドメインを派生させます。"

msgid ""
"``site_name``: An alias for ``site.name``. If you don't have the site "
"framework installed, this will be set to the value of :attr:`request."
"META['SERVER_NAME'] <django.http.HttpRequest.META>`. For more on sites, see :"
"doc:`/ref/contrib/sites`."
msgstr ""
"``site_name``: ``site.name`` のエイリアス。サイトフレームワークがインストール"
"されていない場合、 :attr:`request.META['SERVER_NAME'] <django.http."
"HttpRequest.META>` の値がセットされます。サイトについての詳細は :doc:`/ref/"
"contrib/sites` を参照してください。"

msgid ""
"If you'd prefer not to call the template :file:`registration/login.html`, "
"you can pass the ``template_name`` parameter via the extra arguments to the "
"``as_view`` method in your URLconf. For example, this URLconf line would "
"use :file:`myapp/login.html` instead::"
msgstr ""
"もしテンプレート :file:`registration/login.html` を呼び出したくない場合は、"
"URLconfの ``as_view`` メソッドに追加引数として ``template_name`` パラメータを"
"渡します。たとえば、この URLconf の行では、代わりに :file:`myapp/login.html` "
"を使用します:"

msgid ""
"You can also specify the name of the ``GET`` field which contains the URL to "
"redirect to after login using ``redirect_field_name``. By default, the field "
"is called ``next``."
msgstr ""
"また、ログイン後にリダイレクトする URL を含む ``GET`` フィールドの名前を指定"
"するには、 ``redirect_field_name`` を使います。このフィールドは、デフォルトで"
"は ``next`` と命名されます。"

msgid ""
"Here's a sample :file:`registration/login.html` template you can use as a "
"starting point. It assumes you have a :file:`base.html` template that "
"defines a ``content`` block:"
msgstr ""
"以下は :file:`registration/login.html` テンプレートのサンプルです。これは "
"``content`` ブロックを定義した :file:`base.html` テンプレートがあることを前提"
"としています:"

msgid ""
"If you have customized authentication (see :doc:`Customizing Authentication "
"</topics/auth/customizing>`) you can use a custom authentication form by "
"setting the ``authentication_form`` attribute. This form must accept a "
"``request`` keyword argument in its ``__init__()`` method and provide a "
"``get_user()`` method which returns the authenticated user object (this "
"method is only ever called after successful form validation)."
msgstr ""
"認証をカスタマイズしている場合 (:doc:`認証をカスタマイズする </topics/auth/"
"customizing>` を参照してください)、 ``authentication_form`` 属性を指定するこ"
"とでカスタム認証フォームを使用できます。このフォームは ``__init__()`` メソッ"
"ドで ``request`` キーワード引数を受け取り、認証されたユーザオブジェクトを返"
"す ``get_user()`` メソッドを提供しなければなりません (このメソッドはフォーム"
"の認証が成功した後にのみ呼び出されます)。"

msgid "Logs a user out on ``POST`` requests."
msgstr "``POST`` リクエストでユーザーをログアウトさせます。"

msgid "**URL name:** ``logout``"
msgstr "**URL 名:** ``logout``"

msgid "**Attributes:**"
msgstr "**属性:**"

msgid ""
"The URL to redirect to after logout. Defaults to :setting:"
"`LOGOUT_REDIRECT_URL`."
msgstr ""
"ログアウト後にリダイレクトするURL。デフォルトは :setting:"
"`LOGOUT_REDIRECT_URL` です。"

msgid ""
"The full name of a template to display after logging the user out. Defaults "
"to :file:`registration/logged_out.html`."
msgstr ""
"ユーザーをログアウトさせた後に表示するテンプレートのフルネーム。デフォルト"
"は :file:`registration/logged_out.html` です。"

msgid ""
"The name of a ``GET`` field containing the URL to redirect to after log out. "
"Defaults to ``'next'``. Overrides the :attr:`next_page` URL if the given "
"``GET`` parameter is passed."
msgstr ""
"ログアウト後にリダイレクトする URL を含む ``GET`` フィールドの名前。デフォル"
"トは ``'next'`` です。 ``GET`` パラメータが渡された場合、 :attr:`next_page` "
"URL を上書きします。"

msgid ""
"A :class:`set` of hosts, in addition to :meth:`request.get_host() <django."
"http.HttpRequest.get_host>`, that are safe for redirecting after logout. "
"Defaults to an empty :class:`set`."
msgstr ""
":meth:`request.get_host() <django.http.HttpRequest.get_host>` に加えて、ログ"
"アウト後にリダイレクトしても安全なホストの :class:`set` を指定します。デフォ"
"ルトは空の :class:`set` です。"

msgid "**Template context:**"
msgstr "**テンプレート コンテキスト:**"

msgid "``title``: The string \"Logged out\", localized."
msgstr "``title``: 文字列 \"Logged out\"。これはローカライズされています。"

msgid "Logs a user out on ``POST`` requests, then redirects to the login page."
msgstr ""
"``POST`` リクエストでユーザーをログアウトさせ、ログインページにリダイレクトし"
"ます。"

msgid "**URL name:** No default URL provided"
msgstr "**URL 名:** デフォルトのURLはありません。"

msgid "**Optional arguments:**"
msgstr "**オプションの引数:**"

msgid ""
"``login_url``: The URL of the login page to redirect to. Defaults to :"
"setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr ""
"``login_url``: リダイレクト先のログインページのURL。省略時のデフォルトは :"
"setting:`settings.LOGIN_URL <LOGIN_URL>` です。"

msgid "**URL name:** ``password_change``"
msgstr "**URL 名:** ``password_change``"

msgid "Allows a user to change their password."
msgstr "ユーザーがパスワードを変更できるようにします。"

msgid ""
"The full name of a template to use for displaying the password change form. "
"Defaults to :file:`registration/password_change_form.html` if not supplied."
msgstr ""
"パスワード変更フォームの表示に使用するテンプレートのフルネーム。指定しない場"
"合のデフォルトは :file:`registration/password_change_form.html` です。"

msgid ""
"The URL to redirect to after a successful password change. Defaults to "
"``'password_change_done'``."
msgstr ""
"パスワード変更成功後にリダイレクトする URL。デフォルトは "
"``'password_change_done'`` です。"

msgid ""
"A custom \"change password\" form which must accept a ``user`` keyword "
"argument. The form is responsible for actually changing the user's password. "
"Defaults to :class:`~django.contrib.auth.forms.PasswordChangeForm`."
msgstr ""
"キーワード引数 ``user`` を受け付けるカスタム \"change password\" フォームで"
"す。このフォームはユーザのパスワードを実際に変更する役割を持ちます。デフォル"
"トは :class:`~django.contrib.auth.forms.PasswordChangeForm` です。"

msgid "``form``: The password change form (see ``form_class`` above)."
msgstr "``form``: パスワード変更フォーム (上記の ``form_class`` を参照)。"

msgid "**URL name:** ``password_change_done``"
msgstr "**URL 名:** ``password_change_done``"

msgid "The page shown after a user has changed their password."
msgstr "ユーザーがパスワードを変更した後に表示されるページです。"

msgid ""
"The full name of a template to use. Defaults to :file:`registration/"
"password_change_done.html` if not supplied."
msgstr ""
"使用するテンプレートのフルネーム。指定しない場合のデフォルトは :file:"
"`registration/password_change_done.html` です。"

msgid "**URL name:** ``password_reset``"
msgstr "**URL 名:** ``password_reset``"

msgid ""
"Allows a user to reset their password by generating a one-time use link that "
"can be used to reset the password, and sending that link to the user's "
"registered email address."
msgstr ""
"パスワードをリセットするために使われる 1 回限り有効なリンクを生成し、ユーザが"
"パスワードをリセットできるようにします。そのリンクはユーザーが登録したメール"
"アドレスに送信されます。"

msgid "This view will send an email if the following conditions are met:"
msgstr "このビューは、以下の条件が満たされた場合にメールを送信します:"

msgid "The email address provided exists in the system."
msgstr "入力されたメールアドレスがシステムに存在すること。"

msgid "The requested user is active (``User.is_active`` is ``True``)."
msgstr ""
"要求されたユーザーがアクティブであること (``User.is_active`` が ``True`` であ"
"ること)。"

msgid ""
"The requested user has a usable password. Users flagged with an unusable "
"password (see :meth:`~django.contrib.auth.models.User."
"set_unusable_password`) aren't allowed to request a password reset to "
"prevent misuse when using an external authentication source like LDAP."
msgstr ""
"要求されたユーザが使用可能なパスワードを持っていること。LDAP のような外部認証"
"ソースを使用している場合、悪用を防ぐために、使用不可能なパスワード (:meth:"
"`~django.contrib.auth.models.User.set_unusable_password` を参照) のフラグが付"
"けられたユーザはパスワードのリセットを要求できません。"

msgid ""
"If any of these conditions are *not* met, no email will be sent, but the "
"user won't receive any error message either. This prevents information "
"leaking to potential attackers. If you want to provide an error message in "
"this case, you can subclass :class:`~django.contrib.auth.forms."
"PasswordResetForm` and use the ``form_class`` attribute."
msgstr ""
"これらの条件のいずれかが満たされ *ない* 場合、メールは送信されませんが、ユー"
"ザーにはエラーメッセージは送信されません。これは、潜在的な攻撃者への情報漏洩"
"を防ぐためです。この場合にエラーメッセージを表示したい場合は、 :class:"
"`~django.contrib.auth.forms.PasswordResetForm` をサブクラス化して、 "
"``form_class`` 属性を使用してください。"

msgid ""
"Be aware that sending an email costs extra time, hence you may be vulnerable "
"to an email address enumeration timing attack due to a difference between "
"the duration of a reset request for an existing email address and the "
"duration of a reset request for a nonexistent email address. To reduce the "
"overhead, you can use a 3rd party package that allows to send emails "
"asynchronously, e.g. :pypi:`django-mailer`."
msgstr ""
"メールの送信には余分な時間がかかるため、既存のメールアドレスに対するリセット"
"要求の時間と、存在しないメールアドレスに対するリセット要求の時間の差によっ"
"て、メールアドレスの列挙タイミング攻撃に対して脆弱になる可能性があることに注"
"意してください。オーバーヘッドを減らすために、 :pypi:`django-mailer` などの、"
"非同期でメールを送信できるサードパーティのパッケージを使うことができます。"

msgid ""
"The full name of a template to use for displaying the password reset form. "
"Defaults to :file:`registration/password_reset_form.html` if not supplied."
msgstr ""
"パスワードリセットフォームの表示に使用するテンプレートのフルネーム。指定しな"
"い場合のデフォルトは :file:`registration/password_reset_form.html` です。"

msgid ""
"Form that will be used to get the email of the user to reset the password "
"for. Defaults to :class:`~django.contrib.auth.forms.PasswordResetForm`."
msgstr ""
"パスワードをリセットするためのユーザのメールアドレス入力用のフォーム。デフォ"
"ルトは :class:`~django.contrib.auth.forms.PasswordResetForm` です。"

msgid ""
"The full name of a template to use for generating the email with the reset "
"password link. Defaults to :file:`registration/password_reset_email.html` if "
"not supplied."
msgstr ""
"リセットパスワードのリンクとともに生成されるメールを生成するためのテンプレー"
"ト名。指定しない場合のデフォルトは :file:`registration/password_reset_email."
"html` です。"

msgid ""
"The full name of a template to use for the subject of the email with the "
"reset password link. Defaults to :file:`registration/password_reset_subject."
"txt` if not supplied."
msgstr ""
"パスワードリセットリンクのメールの件名に使用するテンプレートのフルネーム。指"
"定しない場合のデフォルトは :file:`registration/password_reset_subject.txt` で"
"す。"

msgid ""
"Instance of the class to check the one time link. This will default to "
"``default_token_generator``, it's an instance of ``django.contrib.auth."
"tokens.PasswordResetTokenGenerator``."
msgstr ""
"1 回限りのリンクをチェックするためのクラスのインスタンス。デフォルトは "
"``default_token_generator`` で、これは ``django.contrib.auth.tokens."
"PasswordResetTokenGenerator`` のインスタンスです。"

msgid ""
"The URL to redirect to after a successful password reset request. Defaults "
"to ``'password_reset_done'``."
msgstr ""
"パスワードリセットのリクエストに成功した後にリダイレクトする URL。デフォルト"
"は ``'password_reset_done'`` です。"

msgid ""
"A valid email address. By default Django uses the :setting:"
"`DEFAULT_FROM_EMAIL`."
msgstr ""
"検証済みのメールアドレス。デフォルトでは、Django は :setting:"
"`DEFAULT_FROM_EMAIL` を使います。"

msgid ""
"The full name of a template to use for generating a :mimetype:`text/html` "
"multipart email with the password reset link. By default, HTML email is not "
"sent."
msgstr ""
"パスワードリセットのリンクとともに送信される :mimetype:`text/html` のマルチ"
"パートのメールを生成するためのテンプレートのフルネーム。デフォルトでは、HTML "
"メールは送信されません。"

msgid ""
"A dictionary of context data that will be available in the email template. "
"It can be used to override default template context values listed below e.g. "
"``domain``."
msgstr ""
"メールテンプレートで利用可能なコンテキストデータの辞書。たとえば ``domain`` "
"のようなデフォルトのテンプレートコンテキストの値を上書きするために使用できま"
"す。"

msgid ""
"``form``: The form (see ``form_class`` above) for resetting the user's "
"password."
msgstr ""
"``form``: ユーザのパスワードをリセットするためのフォーム (上述の "
"``form_class`` を参照)。"

msgid "**Email template context:**"
msgstr "**メールテンプレートのコンテキスト:**"

msgid "``email``: An alias for ``user.email``"
msgstr "``email``: ``user.email`` の別名 (エイリアス) です。"

msgid ""
"``user``: The current :class:`~django.contrib.auth.models.User`, according "
"to the ``email`` form field. Only active users are able to reset their "
"passwords (``User.is_active is True``)."
msgstr ""
"``user``: 現在の :class:`~django.contrib.auth.models.User` で、``email`` "
"フォームフィールドから取得されます。アクティブなユーザ (``User.is_active が "
"True``) だけがパスワードをリセットできます。"

msgid ""
"``domain``: An alias for ``site.domain``. If you don't have the site "
"framework installed, this will be set to the value of ``request.get_host()``."
msgstr ""
"``domain``: ``site.domain`` の別名 (エイリアス) 。サイトのフレームワークをイ"
"ンストールしていない場合、``request.get_host()`` の値がセットされます。"

msgid "``protocol``: http or https"
msgstr "``protocol``: http か https です。"

msgid "``uid``: The user's primary key encoded in base 64."
msgstr "``uid``: Base 64 でエンコードされたユーザのプライマリキー。"

msgid "``token``: Token to check that the reset link is valid."
msgstr "``token``: リセットリンクを検証するためのトークン。"

msgid ""
"Sample ``registration/password_reset_email.html`` (email body template):"
msgstr ""
"以下は、サンプルの ``registration/password_reset_email.html`` (メール本文のテ"
"ンプレート) です。"

msgid ""
"The same template context is used for subject template. Subject must be "
"single line plain text string."
msgstr ""
"表題のテンプレートにも同じテンプレートコンテキストが使われます。表題は 1 行の"
"プレーンテキスト文字列の必要があります。"

msgid "**URL name:** ``password_reset_done``"
msgstr "**URL 名:** ``password_reset_done``"

msgid ""
"The page shown after a user has been emailed a link to reset their password. "
"This view is called by default if the :class:`PasswordResetView` doesn't "
"have an explicit ``success_url`` URL set."
msgstr ""
"パスワードリセット用のリンクがユーザにメール送信された後に表示されるページで"
"す。このビューは、デフォルトで :class:`PasswordResetView` に明示的な "
"``success_url`` URL セットが指定されていないときに呼び出されます。"

msgid ""
"If the email address provided does not exist in the system, the user is "
"inactive, or has an unusable password, the user will still be redirected to "
"this view but no email will be sent."
msgstr ""
"提供されたメールアドレスがシステムにない、ユーザーが非アクティブである、もし"
"くは無効なパスワードの場合でも、ユーザはこのページにリダイレクトされますが、"
"メールは送信されません。"

msgid ""
"The full name of a template to use. Defaults to :file:`registration/"
"password_reset_done.html` if not supplied."
msgstr ""
"使用するテンプレートのフルネーム。デフォルトは :file:`registration/"
"password_reset_done.html` です。"

msgid "**URL name:** ``password_reset_confirm``"
msgstr "**URL 名:** ``password_reset_confirm``"

msgid "Presents a form for entering a new password."
msgstr "新しいパスワードを入力するためのフォームを提供します。"

msgid "**Keyword arguments from the URL:**"
msgstr "**URL からのキーワード引数:**"

msgid "``uidb64``: The user's id encoded in base 64."
msgstr "``uidb64``: Base 64 でエンコードされたユーザの ID 。"

msgid "``token``: Token to check that the password is valid."
msgstr "``token``: パスワードが有効かを確認するためのトークン。"

msgid ""
"The full name of a template to display the confirm password view. Default "
"value is :file:`registration/password_reset_confirm.html`."
msgstr ""
"パスワード確認のビューを表示するためのテンプレートの名前。デフォルト値は :"
"file:`registration/password_reset_confirm.html` です。"

msgid ""
"Instance of the class to check the password. This will default to "
"``default_token_generator``, it's an instance of ``django.contrib.auth."
"tokens.PasswordResetTokenGenerator``."
msgstr ""
"パスワードをチェックするクラスのインスタンス。デフォルトは "
"``default_token_generator`` で、これは ``django.contrib.auth.tokens."
"PasswordResetTokenGenerator`` のインスタンスです。"

msgid ""
"A boolean indicating if the user should be automatically authenticated after "
"a successful password reset. Defaults to ``False``."
msgstr ""
"パスワードリセットに成功した後、ユーザーを自動的に認証するかどうかを示す真偽"
"値。デフォルトは ``False`` です。"

msgid ""
"A dotted path to the authentication backend to use when authenticating a "
"user if ``post_reset_login`` is ``True``. Required only if you have "
"multiple :setting:`AUTHENTICATION_BACKENDS` configured. Defaults to ``None``."
msgstr ""
"``post_reset_login`` が ``True`` の場合にユーザーを認証する際に使用する認証"
"バックエンドへのドット区切りパス。これは :setting:`AUTHENTICATION_BACKENDS` "
"を複数設定している場合にのみ必要です。デフォルトは ``None`` です。"

msgid ""
"Form that will be used to set the password. Defaults to :class:`~django."
"contrib.auth.forms.SetPasswordForm`."
msgstr ""
"パスワードを設定するためのフォーム。デフォルトは :class:`~django.contrib."
"auth.forms.SetPasswordForm` です。"

msgid ""
"URL to redirect after the password reset done. Defaults to "
"``'password_reset_complete'``."
msgstr ""
"パスワードリセット完了後にリダイレクトする URL。デフォルトは "
"``'password_reset_complete'`` です。"

msgid ""
"Token parameter displayed as a component of password reset URLs. Defaults to "
"``'set-password'``."
msgstr ""
"パスワードリセットURLのコンポーネントとして表示されるトークンパラメータ。デ"
"フォルトは ``'set-password'`` です。"

msgid ""
"``form``: The form (see ``form_class`` above) for setting the new user's "
"password."
msgstr ""
"``form``: 新しいユーザーのパスワードを設定するフォーム (上記の "
"``form_class`` を参照)。"

msgid ""
"``validlink``: Boolean, True if the link (combination of ``uidb64`` and "
"``token``) is valid or unused yet."
msgstr ""
"``validlink``: 真偽値で、リンク (``uidb64`` と ``token`` の組み合わせ) が有効"
"か、まだ使われていない場合に True となります。"

msgid "**URL name:** ``password_reset_complete``"
msgstr "**URL 名:** ``password_reset_complete``"

msgid ""
"Presents a view which informs the user that the password has been "
"successfully changed."
msgstr ""
"パスワードの変更が成功したことをユーザに知らせるためのビューを提供します。"

msgid ""
"The full name of a template to display the view. Defaults to :file:"
"`registration/password_reset_complete.html`."
msgstr ""
"ビューを表示するためのテンプレートのフルネーム。デフォルトは :file:"
"`registration/password_reset_complete.html` です。"

msgid "Helper functions"
msgstr "ヘルパー関数"

msgid ""
"Redirects to the login page, and then back to another URL after a successful "
"login."
msgstr ""
"ログインページにリダイレクトし、ログイン成功後にもう 1 つの URL に戻ります。"

msgid "**Required arguments:**"
msgstr "**必須の引数:**"

msgid "``next``: The URL to redirect to after a successful login."
msgstr "``next``: ログイン成功後のリダイレクト先の URL です。"

msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after login. Overrides ``next`` if the given ``GET`` parameter "
"is passed."
msgstr ""
"``redirect_field_name``: ログイン後のリダイレクト先の URL を含む ``GET`` "
"フィールドの名前。指定された ``GET`` パラメータが与えられた場合、``next`` を"
"オーバーライドします。"

msgid "Built-in forms"
msgstr "ビルトインのフォーム"

msgid ""
"If you don't want to use the built-in views, but want the convenience of not "
"having to write forms for this functionality, the authentication system "
"provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr ""
"ビルトインのビューを使いたくないけれども、ビューの機能を再利用したいと考えて"
"いる場合、認証システムが提供しているビルトインのフォームを使うことができま"
"す。ビルトインのフォームは :mod:`django.contrib.auth.forms` にあります。"

msgid ""
"The built-in authentication forms make certain assumptions about the user "
"model that they are working with. If you're using a :ref:`custom user model "
"<auth-custom-user>`, it may be necessary to define your own forms for the "
"authentication system. For more information, refer to the documentation "
"about :ref:`using the built-in authentication forms with custom user models "
"<custom-users-and-the-built-in-auth-forms>`."
msgstr ""
"ビルトインの認証フォームは、扱うユーザーモデルについて一定の前提に基づいて設"
"計されています。なので、もし :ref:`独自のユーザーモデル <auth-custom-user>` "
"を使っている場合は、 認証システムに対して自分自身のフォームを定義する必要があ"
"る可能性があります。詳しくは、:ref:`独自のユーザーモデルでビルトインの認証"
"フォームを使用する <custom-users-and-the-built-in-auth-forms>` を参照してくだ"
"さい。"

msgid "A form used in the admin interface to change a user's password."
msgstr ""
"ユーザのパスワードを変更するために admin インターフェイス内で使われるフォーム"
"です。"

msgid "Takes the ``user`` as the first positional argument."
msgstr "第 1 引数として ``user`` を取ります。"

msgid "A form for logging a user in."
msgstr "ユーザーログインのためのフォームです。"

msgid ""
"Takes ``request`` as its first positional argument, which is stored on the "
"form instance for use by sub-classes."
msgstr ""
"第 1 引数として ``request`` を取り、サブクラスで使えるようにフォームのインス"
"タンス上に保持されます。"

msgid ""
"By default, ``AuthenticationForm`` rejects users whose ``is_active`` flag is "
"set to ``False``. You may override this behavior with a custom policy to "
"determine which users can log in. Do this with a custom form that subclasses "
"``AuthenticationForm`` and overrides the ``confirm_login_allowed()`` method. "
"This method should raise a :exc:`~django.core.exceptions.ValidationError` if "
"the given user may not log in."
msgstr ""
"デフォルトでは、``AuthenticationForm`` は ``is_active`` フラグが ``False`` に"
"セットされたユーザを拒否します。どのユーザがログインできるかを決定する独自の"
"ポリシーによって、この挙動をオーバーライドできます。``AuthenticationForm`` を"
"サブクラス化した独自のフォームを使って、``confirm_login_allowed()`` メソッド"
"を上書きしてください。指定されたユーザがログインできない場合、このメソッド"
"は :exc:`~django.core.exceptions.ValidationError` を投げます。"

msgid ""
"For example, to allow all users to log in regardless of \"active\" status::"
msgstr ""
"たとえば、\"active\" ステータスにかかわらず全てのユーザにログインを許可するに"
"は::"

msgid ""
"(In this case, you'll also need to use an authentication backend that allows "
"inactive users, such as :class:`~django.contrib.auth.backends."
"AllowAllUsersModelBackend`.)"
msgstr ""
"(この例では、非アクティブのユーザを許可する認証バックエンドの使用も必要となり"
"ます。たとえば :class:`~django.contrib.auth.backends."
"AllowAllUsersModelBackend` などです。)"

msgid "Or to allow only some active users to log in::"
msgstr ""
"または、何人かのアクティブユーザのみにログインを許可するには、以下のようにし"
"ます::"

msgid "A form for allowing a user to change their password."
msgstr "ユーザがパスワードを変更できるようにするフォームです。"

msgid ""
"A form for generating and emailing a one-time use link to reset a user's "
"password."
msgstr ""
"ユーザのパスワードリセットするための 1 回限りのリンクを生成してメール送信する"
"ためのフォームです。"

msgid ""
"Uses the arguments to send an ``EmailMultiAlternatives``. Can be overridden "
"to customize how the email is sent to the user."
msgstr ""
"引数を使って ``EmailMultiAlternatives`` を送信します。オーバーライドして、ど"
"のようにメールが送信されるかカスタマイズできます。"

msgid "Parameters"
msgstr "パラメータ"

msgid "the template for the subject."
msgstr "表題用のテンプレートです。"

msgid "the template for the email body."
msgstr "メール本文用のテンプレートです。"

msgid ""
"context passed to the ``subject_template``, ``email_template``, and "
"``html_email_template`` (if it is not ``None``)."
msgstr ""
"``subject_template``、``email_template``、``html_email_template`` (``None`` "
"ではない場合のみ) に渡されるコンテキストです。"

msgid "the sender's email."
msgstr "送信者のメールです。"

msgid "the email of the requester."
msgstr "リクエストしてきたユーザのメールです。"

msgid ""
"the template for the HTML body; defaults to ``None``, in which case a plain "
"text email is sent."
msgstr ""
"HTML 本文用のテンプレートです; デフォルトは ``None`` で、この場合プレーンテキ"
"ストのメールが送信されます。"

msgid ""
"By default, ``save()`` populates the ``context`` with the same variables "
"that :class:`~django.contrib.auth.views.PasswordResetView` passes to its "
"email context."
msgstr ""
"デフォルトでは、``save()`` は :class:`~django.contrib.auth.views."
"PasswordResetView` がメールコンテ キストに渡すのと同じ変数を持つ ``context`` "
"を返します。"

msgid ""
"A form that lets a user change their password without entering the old "
"password."
msgstr ""
"古いパスワードを入力しないでパスワードを変更できるようにするフォームです。"

msgid ""
"A form used in the admin interface to change a user's information and "
"permissions."
msgstr ""
"ユーザの情報とパーミッションを変更するために admin インターフェイスで使われる"
"フォームです。"

msgid ""
"A :class:`~django.forms.ModelForm` for creating a new user. This is the "
"recommended base class if you need to customize the user creation form."
msgstr ""
"新しいユーザを作成するための :class:`~django.forms.ModelForm` です。これは、"
"ユーザ作成フォームをカスタマイズする必要がある場合に推奨される基本クラスで"
"す。"

msgid ""
"It has three fields: ``username`` (from the user model), ``password1``, and "
"``password2``. It verifies that ``password1`` and ``password2`` match, "
"validates the password using :func:`~django.contrib.auth.password_validation."
"validate_password`, and sets the user's password using :meth:`~django."
"contrib.auth.models.User.set_password()`."
msgstr ""
"``username`` (ユーザモデルより)、``password1``、``password2`` という3つの"
"フィールドがあります。``password1`` と ``password2`` が一致するか確認し、:"
"func:`~django.contrib.auth.password_validation.validate_password` を使ってパ"
"スワードを検証します。そして、:meth:`~django.contrib.auth.models.User."
"set_password()` を使ってユーザのパスワードをセットします。"

msgid ""
"Inherits from :class:`BaseUserCreationForm`. To help prevent confusion with "
"similar usernames, the form doesn't allow usernames that differ only in case."
msgstr ""
":class:`BaseUserCreationForm` を継承しています。似たようなユーザ名による混乱"
"を防ぐために、このフォームでは大文字小文字が異なるだけのユーザ名は使用できま"
"せん。"

msgid ""
"In older versions, :class:`UserCreationForm` didn't save many-to-many form "
"fields for a custom user model."
msgstr ""
"古いバージョンでは、 :class:`UserCreationForm` はカスタムユーザモデルの多対多"
"のフォームフィールドを保存していませんでした。"

msgid "In older versions, usernames that differ only in case are allowed."
msgstr ""
"古いバージョンでは、大文字と小文字が異なるだけのユーザー名が許可されていま"
"す。"

msgid "Authentication data in templates"
msgstr "テンプレート内の認証データ"

msgid ""
"The currently logged-in user and their permissions are made available in "
"the :doc:`template context </ref/templates/api>` when you use :class:"
"`~django.template.RequestContext`."
msgstr ""
":class:`~django.template.RequestContext` を使うと、現在ログインしているユーザ"
"とパーミッションを :doc:`テンプレート コンテキスト </ref/templates/api>` 内で"
"使えるようにできます。"

msgid "Technicality"
msgstr "技術的には"

msgid ""
"Technically, these variables are only made available in the template context "
"if you use :class:`~django.template.RequestContext` and the ``'django."
"contrib.auth.context_processors.auth'`` context processor is enabled. It is "
"in the default generated settings file. For more, see the :ref:"
"`RequestContext docs <subclassing-context-requestcontext>`."
msgstr ""
"技術的には、これらの変数は :class:`~django.template.RequestContext` を使い、"
"``'django.contrib.auth.context_processors.auth'`` コンテキストプロセッサを有"
"効にしたときのみ使うことができます。これは、デフォルトで生成される設定ファイ"
"ル内にあります。より詳しくは :ref:`RequestContext のドキュメント "
"<subclassing-context-requestcontext>` を参照してください。"

msgid "Users"
msgstr "ユーザ"

msgid ""
"When rendering a template :class:`~django.template.RequestContext`, the "
"currently logged-in user, either a  :class:`~django.contrib.auth.models."
"User` instance or an :class:`~django.contrib.auth.models.AnonymousUser` "
"instance, is stored in the template variable ``{{ user }}``:"
msgstr ""
"テンプレート :class:`~django.template.RequestContext` をレンダリングすると"
"き、現在ログイン中のユーザ (:class:`~django.contrib.auth.models.User` インス"
"タンスか :class:`~django.contrib.auth.models.AnonymousUser` のどちらか) はテ"
"ンプレート変数 ``{{ user }}`` 内に格納されます:"

msgid ""
"This template context variable is not available if a ``RequestContext`` is "
"not being used."
msgstr ""
"``RequestContext`` が使用されていない場合、このテンプレートコンテキスト変数は"
"無効となります。"

msgid "Permissions"
msgstr "パーミッション"

msgid ""
"The currently logged-in user's permissions are stored in the template "
"variable ``{{ perms }}``. This is an instance of ``django.contrib.auth."
"context_processors.PermWrapper``, which is a template-friendly proxy of "
"permissions."
msgstr ""
"現在ログイン中のユーザのパーミッションは、テンプレート変数 ``{{ perms }}`` 内"
"に保持されています。 これは ``django.contrib.auth.context_processors."
"PermWrapper`` のインスタンスで、パーミッションをテンプレートで使いやすくする"
"ための代替表現です。"

msgid ""
"Evaluating a single-attribute lookup of ``{{ perms }}`` as a boolean is a "
"proxy to :meth:`User.has_module_perms() <django.contrib.auth.models.User."
"has_module_perms>`. For example, to check if the logged-in user has any "
"permissions in the ``foo`` app:"
msgstr ""
"真偽値として ``{{ perms }}`` の単一属性ルックアップを評価することは :meth:"
"`User.has_module_perms() <django.contrib.auth.models.User.has_module_perms>` "
"の代替となります。たとえば、ログインしているユーザが ``foo`` アプリで何らかの"
"権限を持っているかどうかを調べるには次のようにします:"

msgid ""
"Evaluating a two-level-attribute lookup as a boolean is a proxy to :meth:"
"`User.has_perm() <django.contrib.auth.models.User.has_perm>`. For example, "
"to check if the logged-in user has the permission ``foo.add_vote``:"
msgstr ""
"2段階の属性ルックアップを真偽値として評価することは :meth:`User.has_perm() "
"<django.contrib.auth.models.User.has_perm>` の代替となります。たとえば、ログ"
"インしているユーザが ``foo.add_vote`` というパーミッションを持っているかどう"
"かを調べるには、次のようにします:"

msgid "Here's a more complete example of checking permissions in a template:"
msgstr "以下は、テンプレートで権限をチェックする、より完全な例です:"

msgid ""
"It is possible to also look permissions up by ``{% if in %}`` statements. "
"For example:"
msgstr ""
"``{% if in %}`` ステートメントを使ってパーミッションをルックアップすることも"
"可能です。例えば:"

msgid "Managing users in the admin"
msgstr "admin 内でユーザを管理する"

msgid ""
"When you have both ``django.contrib.admin`` and ``django.contrib.auth`` "
"installed, the admin provides a convenient way to view and manage users, "
"groups, and permissions. Users can be created and deleted like any Django "
"model. Groups can be created, and permissions can be assigned to users or "
"groups. A log of user edits to models made within the admin is also stored "
"and displayed."
msgstr ""
"``django.contrib.admin`` と ``django.contrib.auth`` の両方をインストールして"
"いれば、admin でユーザ、グループおよびパーミッションを見たり管理することが簡"
"単にできます。ユーザは通常の Django モデルと同じく作成や削除ができます。グ"
"ループも作成することができ、パーミッションはユーザやグループにアサインできま"
"す。admin でのユーザー編集のログも保管および表示されます。"

msgid ""
"You should see a link to \"Users\" in the \"Auth\" section of the main admin "
"index page. The \"Add user\" admin page is different than standard admin "
"pages in that it requires you to choose a username and password before "
"allowing you to edit the rest of the user's fields."
msgstr ""
"admin のメインインデックスページの \"Auth\" セクションに \"Users\" へのリンク"
"があります。\"Add user\" ページは通常の admin ページとは異なり、他のユーザー"
"のフィールドを編集する際に、ユーザ名とパスワードを選択する必要があります。"

msgid ""
"Also note: if you want a user account to be able to create users using the "
"Django admin site, you'll need to give them permission to add users *and* "
"change users (i.e., the \"Add user\" and \"Change user\" permissions). If an "
"account has permission to add users but not to change them, that account "
"won't be able to add users. Why? Because if you have permission to add "
"users, you have the power to create superusers, which can then, in turn, "
"change other users. So Django requires add *and* change permissions as a "
"slight security measure."
msgstr ""
"また、Django の admin サイトを使用してユーザアカウントを作成できるようにする"
"には、ユーザを追加 *および* 変更する権限をユーザに与える必要があります (つま"
"り \"Add user\" と \"Change user\" パーミッション)。あるアカウントにユーザの"
"追加権限のみが与えられ変更権限がない場合、そのアカウントはユーザを追加できま"
"せん。なぜなら、追加権限によってスーパーユーザを作成することができ、そのスー"
"パーユーザを使って他のユーザーを変更することができてしまうからです。 そのた"
"め、Django はちょっとしたセキュリティ対策として、追加と変更の *両方* の権限を"
"必要とするのです。"

msgid ""
"Be thoughtful about how you allow users to manage permissions. If you give a "
"non-superuser the ability to edit users, this is ultimately the same as "
"giving them superuser status because they will be able to elevate "
"permissions of users including themselves!"
msgstr ""
"ユーザに与えるパーミッション管理の権限については、よく考える必要があります。"
"たとえば非スーパーユーザにユーザ編集の権限を与えてしまうと、結果的に彼らに"
"スーパーユーザと同じ能力を与えることになります。というのも、彼らはユーザ編集"
"の権限によってユーザのパーミッションを昇格させることができるため、彼ら自身の"
"パーミッションも昇格させられるのです！"

msgid ""
"User passwords are not displayed in the admin (nor stored in the database), "
"but the :doc:`password storage details </topics/auth/passwords>` are "
"displayed. Included in the display of this information is a link to a "
"password change form that allows admins to change user passwords."
msgstr ""
"ユーザーのパスワードは管理画面には表示されません(データベースにも保存されませ"
"ん)が、 :doc:`パスワード保管についての詳細 </topics/auth/passwords>` は表示さ"
"れます。この情報の表示には、管理者がユーザーパスワードを変更するためのパス"
"ワード変更フォームへのリンクが含まれています。"

msgid "User authentication in Django"
msgstr "Django でのユーザー認証"

msgid ""
"Django comes with a user authentication system. It handles user accounts, "
"groups, permissions and cookie-based user sessions. This section of the "
"documentation explains how the default implementation works out of the box, "
"as well as how to :doc:`extend and customize </topics/auth/customizing>` it "
"to suit your project's needs."
msgstr ""
"Django はユーザー認証システムを搭載しています。ユーザーアカウント、グループ、"
"パーミッション、そしてCookieベースのユーザーセッションを制御します。このド"
"キュメントのこのセクションでは、デフォルトの実装がどう機能するか、またあなた"
"のプロジェクトのニーズに対応させるための :doc:`拡張とカスタマイズ </topics/"
"auth/customizing>` の方法を説明しています。"

msgid "Overview"
msgstr "概要"

msgid ""
"The Django authentication system handles both authentication and "
"authorization. Briefly, authentication verifies a user is who they claim to "
"be, and authorization determines what an authenticated user is allowed to "
"do. Here the term authentication is used to refer to both tasks."
msgstr ""
"Django の認証システムは、認証と認可の両方を扱います。簡単に言うと、認証はユー"
"ザーが本人であることを検証し、認可は検証されたユーザーが何を実行できるかを決"
"定します。ここでは、認証という用語は両方のタスクを指すために使われます。"

msgid "The auth system consists of:"
msgstr "認証システムを構成するものは以下の通りです:"

msgid ""
"Permissions: Binary (yes/no) flags designating whether a user may perform a "
"certain task."
msgstr ""
"パーミッション: ユーザが特定のタスクを実行できるかどうかを指定するバイナリ "
"(yes/no) フラグ"

msgid ""
"Groups: A generic way of applying labels and permissions to more than one "
"user."
msgstr "グループ: 複数のユーザーにラベルとパーミッションを付与する一般的な方法"

msgid "A configurable password hashing system"
msgstr "設定変更可能なパスワードハッシュシステム"

msgid "Forms and view tools for logging in users, or restricting content"
msgstr "ユーザーログインのためのフォームやビューツール、もしくは内容の制限"

msgid "A pluggable backend system"
msgstr "プラガブルなバックエンドシステム"

msgid ""
"The authentication system in Django aims to be very generic and doesn't "
"provide some features commonly found in web authentication systems. "
"Solutions for some of these common problems have been implemented in third-"
"party packages:"
msgstr ""
"Django の認証システムは一般的であることを狙いとしており、ウェブ上の認証システ"
"ムで見られるようないくつかの機能を有していません。これらに共通する問題の解決"
"策は、サードパーティのパッケージにて実装されます。"

msgid "Password strength checking"
msgstr "パスワード強度のチェック"

msgid "Throttling of login attempts"
msgstr "ログイン試行数の制限"

msgid "Authentication against third-parties (OAuth, for example)"
msgstr "サードパーティに対する認証 (OAuthなど)"

msgid "Object-level permissions"
msgstr "オブジェクトレベルのパーミッション"

msgid "Installation"
msgstr "インストール"

msgid ""
"Authentication support is bundled as a Django contrib module in ``django."
"contrib.auth``. By default, the required configuration is already included "
"in the :file:`settings.py` generated by :djadmin:`django-admin startproject "
"<startproject>`, these consist of two items listed in your :setting:"
"`INSTALLED_APPS` setting:"
msgstr ""
"認証関連をサポートする仕組みは、 ``django.contrib.auth`` 内の Django contrib "
"モジュールとしてバンドルされています。デフォルトでは、必要な設定は :djadmin:"
"`django-admin startproject <startproject>` で生成される :file:`settings.py` "
"にすでに記述されています。これらは、あなたの :setting:`INSTALLED_APPS` に記述"
"される 2 つの項目により構成されています:"

msgid ""
"``'django.contrib.auth'`` contains the core of the authentication framework, "
"and its default models."
msgstr ""
"``'django.contrib.auth'`` は、認証フレームワークおよびそのデフォルトのモデル"
"の中心機能を含みます。"

msgid ""
"``'django.contrib.contenttypes'`` is the Django :doc:`content type system </"
"ref/contrib/contenttypes>`, which allows permissions to be associated with "
"models you create."
msgstr ""
"``'django.contrib.contenttypes'`` は Django :doc:`コンテンツタイプシステム </"
"ref/contrib/contenttypes>` です。パーミッションをあなたが作成したモデルと紐付"
"けられるようにします。"

msgid "and these items in your :setting:`MIDDLEWARE` setting:"
msgstr "そして、あなたの :setting:`MIDDLEWARE` 内にある以下の項目です:"

msgid ""
":class:`~django.contrib.sessions.middleware.SessionMiddleware` manages :doc:"
"`sessions </topics/http/sessions>` across requests."
msgstr ""
":class:`~django.contrib.sessions.middleware.SessionMiddleware` は、リクエスト"
"を横断する :doc:`セッション </topics/http/sessions>` を管理します。"

msgid ""
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` associates "
"users with requests using sessions."
msgstr ""
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` は、セッ"
"ションを使用してユーザーをリクエストに関連付けます。"

msgid ""
"With these settings in place, running the command ``manage.py migrate`` "
"creates the necessary database tables for auth related models and "
"permissions for any models defined in your installed apps."
msgstr ""
"これらの設定を整えた上で、``manage.py migrate`` コマンドを実行すると、インス"
"トールしたアプリで定義されている認証先モデルや権限モデルに必要なデータベース"
"テーブルが作成されます。"

msgid "Usage"
msgstr "使い方"

msgid ":doc:`Using Django's default implementation <default>`"
msgstr ":doc:`Django のデフォルトの実装を使用する <default>`"

msgid ":ref:`Working with User objects <user-objects>`"
msgstr ":ref:`User オブジェクトを使用する <user-objects>`"

msgid ":ref:`Permissions and authorization <topic-authorization>`"
msgstr ":ref:`パーミッションと認可<topic-authorization>`"

msgid ":ref:`Authentication in web requests <auth-web-requests>`"
msgstr ":ref:`ウェブリクエスト内の認証 <auth-web-requests>`"

msgid ":ref:`Managing users in the admin <auth-admin>`"
msgstr ":ref:`Admin 内でのユーザー管理 <auth-admin>`"

msgid ":doc:`API reference for the default implementation </ref/contrib/auth>`"
msgstr ":doc:`デフォルト実装のための API リファレンス </ref/contrib/auth>`"

msgid ":doc:`Customizing Users and authentication <customizing>`"
msgstr ":doc:`Users と認証をカスタムする <customizing>`"

msgid ":doc:`Password management in Django <passwords>`"
msgstr ":doc:`Django におけるパスワード管理 <passwords>`"

msgid "Password management in Django"
msgstr "Djangoにおけるパスワード管理"

msgid ""
"Password management is something that should generally not be reinvented "
"unnecessarily, and Django endeavors to provide a secure and flexible set of "
"tools for managing user passwords. This document describes how Django stores "
"passwords, how the storage hashing can be configured, and some utilities to "
"work with hashed passwords."
msgstr ""
"パスワード管理は一般的に、不必要に再発明されるべきではないものです。Djangoは"
"ユーザーのパスワードを管理するための安全で柔軟なツールセットを提供するよう努"
"めています。このドキュメントでは、Djangoがパスワードを保存する方法、ストレー"
"ジハッシュの設定方法、およびハッシュされたパスワードを扱ういくつかのユーティ"
"リティについて説明します。"

msgid ""
"Even though users may use strong passwords, attackers might be able to "
"eavesdrop on their connections. Use :ref:`HTTPS <security-recommendation-"
"ssl>` to avoid sending passwords (or any other sensitive data) over plain "
"HTTP connections because they will be vulnerable to password sniffing."
msgstr ""
"ユーザーが強力なパスワードを使ったとしても、攻撃者が通信経路上において盗聴を"
"おこなう可能性があります。パスワード (または他の機密データ) がプレーンな "
"HTTP コネクションで送信されないように、 :ref:`HTTPS <security-recommendation-"
"ssl>` を使用してください。なぜなら、HTTP はパスワードスニッフィングに対して脆"
"弱であるからです。"

msgid "How Django stores passwords"
msgstr "Djangoのパスワード保存方法"

msgid ""
"Django provides a flexible password storage system and uses PBKDF2 by "
"default."
msgstr ""
"DjangoはデフォルトでPBKDF2を利用した、柔軟なパスワード保存システムを提供しま"
"す。"

msgid ""
"The :attr:`~django.contrib.auth.models.User.password` attribute of a :class:"
"`~django.contrib.auth.models.User` object is a string in this format:"
msgstr ""
":class:`~django.contrib.auth.models.User` オブジェクトの :attr:`~django."
"contrib.auth.models.User.password` 属性は、次のような形式の文字列です。"

msgid ""
"Those are the components used for storing a User's password, separated by "
"the dollar-sign character and consist of: the hashing algorithm, the number "
"of algorithm iterations (work factor), the random salt, and the resulting "
"password hash.  The algorithm is one of a number of one-way hashing or "
"password storage algorithms Django can use; see below. Iterations describe "
"the number of times the algorithm is run over the hash. Salt is the random "
"seed used and the hash is the result of the one-way function."
msgstr ""
"これらはユーザーのパスワードを保存するためのコンポーネントで、ハッシュアルゴ"
"リズム、アルゴリズムのイテレーション回数（ワークファクター）、ランダムなソル"
"ト、そして結果のパスワードハッシュをドル記号($)で区切ったものです。このアルゴ"
"リズムは、Djangoが使用できる数多くの一方向ハッシュ、またはパスワード保存アル"
"ゴリズム（下記参照）の一つです。イテレーションはハッシュに対してアルゴリズム"
"が実行された回数を表します。ソルトは使用されたランダムシードで、ハッシュは一"
"方向ハッシュ関数の実行結果です。"

msgid ""
"By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password "
"stretching mechanism recommended by NIST_. This should be sufficient for "
"most users: it's quite secure, requiring massive amounts of computing time "
"to break."
msgstr ""
"デフォルトでは、Djangoは NIST_ が推奨するパスワードストレッチングメカニズムで"
"ある PBKDF2_ アルゴリズムと SHA256 ハッシュを使用します。これはほとんどのユー"
"ザーに十分有効なはずです。非常に安全で、クラックするのに膨大な計算時間を必要"
"とします。"

msgid ""
"However, depending on your requirements, you may choose a different "
"algorithm, or even use a custom algorithm to match your specific security "
"situation. Again, most users shouldn't need to do this -- if you're not "
"sure, you probably don't.  If you do, please read on:"
msgstr ""
"ただし、要件に応じて、異なるアルゴリズムを使用することも、一部のセキュリティ"
"状況に合わせてカスタムアルゴリズムを使用することもできます。繰り返しますが、"
"ほとんどのユーザーはこれを行う必要はありません。よくわからない場合、おそらく"
"そうしないほうが良いです。もしそうする場合は、こちらをお読みください:"

msgid ""
"Django chooses the algorithm to use by consulting the :setting:"
"`PASSWORD_HASHERS` setting. This is a list of hashing algorithm classes that "
"this Django installation supports."
msgstr ""
"Django は :setting:`PASSWORD_HASHERS` 設定を参照して、使用するアルゴリズムを"
"選択します。これは、この Django インストールがサポートしているハッシュアルゴ"
"リズムクラスのリストです。"

msgid ""
"For storing passwords, Django will use the first hasher in :setting:"
"`PASSWORD_HASHERS`. To store new passwords with a different algorithm, put "
"your preferred algorithm first in :setting:`PASSWORD_HASHERS`."
msgstr ""
"パスワードの保存には、 Django は :setting:`PASSWORD_HASHERS` の最初のハッ"
"シャーを使います。別のアルゴリズムで新しいパスワードを保存するには、 :"
"setting:`PASSWORD_HASHERS` にあなたの好きなアルゴリズムを最初に書いてくださ"
"い。"

msgid ""
"For verifying passwords, Django will find the hasher in the list that "
"matches the algorithm name in the stored password. If a stored password "
"names an algorithm not found in :setting:`PASSWORD_HASHERS`, trying to "
"verify it will raise ``ValueError``."
msgstr ""
"パスワードの検証のために、 Django は保存されたパスワードのアルゴリズム名と一"
"致するハッ シャーをリストの中から探します。保存されたパスワードが :setting:"
"`PASSWORD_HASHERS` にないアルゴリズ ム名を持つ場合、それを検証しようとすると "
"``ValueError`` が発生します。"

msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr "デフォルトでの :setting:`PASSWORD_HASHERS` ::"

msgid ""
"This means that Django will use PBKDF2_ to store all passwords but will "
"support checking passwords stored with PBKDF2SHA1, argon2_, and bcrypt_."
msgstr ""
"これは、Djangoは PBKDF2_ を使用して全てのパスワードを保存しますが、"
"PBKDF2SHA1、 argon2_ 、および bcrypt_ で保存されたパスワードのチェックもサ"
"ポートすることを意味しています。"

msgid ""
"The next few sections describe a couple of common ways advanced users may "
"want to modify this setting."
msgstr ""
"次のいくつかのセクションでは、高度なユーザーがこの設定を変更するための一般的"
"な方法について説明します。"

msgid "Using Argon2 with Django"
msgstr "Django で Argon2 を使う"

msgid ""
"Argon2_ is the winner of the 2015 `Password Hashing Competition`_, a "
"community organized open competition to select a next generation hashing "
"algorithm. It's designed not to be easier to compute on custom hardware than "
"it is to compute on an ordinary CPU. The default variant for the Argon2 "
"password hasher is Argon2id."
msgstr ""
"Argon2_ は、次世代ハッシュアルゴリズムを選定するコミュニティ主催のオープンコ"
"ンペティションである、2015年の `Password Hashing Competition`_ の優勝者です。"
"カスタムハードウェアで計算しても、通常のCPUで計算するよりも有利にならないよう"
"に設計されています。Argon2パスワードハッシュのデフォルトのバリアントは"
"Argon2idです。"

msgid ""
"Argon2_ is not the default for Django because it requires a third-party "
"library. The Password Hashing Competition panel, however, recommends "
"immediate use of Argon2 rather than the other algorithms supported by Django."
msgstr ""
"Argon2_ はサードパーティのライブラリを必要とするため、 Django のデフォルトで"
"はありません。しかし、 Password Hashing Competition パネルでは、 Django がサ"
"ポートしている他のアルゴリズムではなく、 Argon2 をすぐに使うことを推奨してい"
"ます。"

msgid "To use Argon2id as your default storage algorithm, do the following:"
msgstr ""
"Argon2idをデフォルトのストレージアルゴリズムとして使用するには、以下のように"
"します:"

msgid ""
"Install the :pypi:`argon2-cffi` package. This can be done by running "
"``python -m pip install django[argon2]``, which is equivalent to ``python -m "
"pip install argon2-cffi`` (along with any version requirement from Django's "
"``setup.cfg``)."
msgstr ""
":pypi:`argon2-cffi` パッケージをインストールしてください。これは ``python -m "
"pip install django[argon2]`` と等価です（Django の ``setup.cfg`` に記載された"
"バージョン要件も含みます）。"

msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``Argon2PasswordHasher`` first. "
"That is, in your settings file, you'd put::"
msgstr ""
":setting:`PASSWORD_HASHERS` を変更して、``Argon2PasswordHasher`` を最初にリス"
"トアップします。つまり、設定ファイルに下記のように書きます:"

msgid ""
"Keep and/or add any entries in this list if you need Django to :ref:`upgrade "
"passwords <password-upgrades>`."
msgstr ""
"Django に :ref:`パスワードのアップグレード <password-upgrades>` をさせる必要"
"がある場合は、このリストにエントリを残すまたは追加してください。"

msgid "Using ``bcrypt`` with Django"
msgstr "Django で ``bcrypt`` を使う"

msgid ""
"Bcrypt_ is a popular password storage algorithm that's specifically designed "
"for long-term password storage. It's not the default used by Django since it "
"requires the use of third-party libraries, but since many people may want to "
"use it Django supports bcrypt with minimal effort."
msgstr ""
"Bcrypt_ は一般的なパスワード保存アルゴリズムで、特にパスワードの長期保存用に"
"設計されています。サードパーティのライブラリを使う必要があるため、 Django が"
"デフォルトで使うものではありませんが、多くの人が使いたいでしょうから、 "
"Django は最小限の労力で bcrypt をサポートしています。"

msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr ""
"Bcrypt をデフォルトのストレージアルゴリズムとして使用するには、以下のようにし"
"ます:"

msgid ""
"Install the :pypi:`bcrypt` package. This can be done by running ``python -m "
"pip install django[bcrypt]``, which is equivalent to ``python -m pip install "
"bcrypt`` (along with any version requirement from Django's ``setup.cfg``)."
msgstr ""
":pypi:`bcrypt` パッケージをインストールします。これは ``python -m pip "
"install django[bcrypt]`` と等価です (Django の ``setup.cfg`` から必要なバー"
"ジョンを指定してください)。"

msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``BCryptSHA256PasswordHasher`` "
"first. That is, in your settings file, you'd put::"
msgstr ""
":setting:`PASSWORD_HASHERS` を変更して、``BCryptSHA256PasswordHasher`` を最初"
"にリストアップします。つまり、設定ファイルに下記のように書きます:"

msgid ""
"That's it -- now your Django install will use Bcrypt as the default storage "
"algorithm."
msgstr ""
"これで Django はデフォルトのストレージアルゴリズムとして Bcrypt を使うように"
"なります。"

msgid "Using ``scrypt`` with Django"
msgstr "Django で ``scrypt`` を使う"

msgid ""
"scrypt_ is similar to PBKDF2 and bcrypt in utilizing a set number of "
"iterations to slow down brute-force attacks. However, because PBKDF2 and "
"bcrypt do not require a lot of memory, attackers with sufficient resources "
"can launch large-scale parallel attacks in order to speed up the attacking "
"process. scrypt_ is specifically designed to use more memory compared to "
"other password-based key derivation functions in order to limit the amount "
"of parallelism an attacker can use, see :rfc:`7914` for more details."
msgstr ""
"scrypt_ は、ブルートフォース攻撃を減速させるために設定されたイテレーション数"
"を利用するという点で、PBKDF2やbcryptと似ています。しかし、PBKDF2とbcryptは多"
"くのメモリを必要としないため、十分なリソースを持つ攻撃者は、攻撃プロセスを高"
"速化するために大規模な並列攻撃を仕掛けることができます。 scrypt_ は、攻撃者が"
"使用できる並列処理の量を制限するために、他のパスワードベースの鍵導出関数と比"
"較してより多くのメモリを使用するように特別に設計されています。"

msgid "To use scrypt_ as your default storage algorithm, do the following:"
msgstr ""
"scrypt_ をデフォルトのストレージアルゴリズムとして使用するには、以下のように"
"します:"

msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``ScryptPasswordHasher`` first. "
"That is, in your settings file::"
msgstr ""
":setting:`PASSWORD_HASHERS` を変更して、``ScryptPasswordHasher`` を最初にリス"
"トアップします。つまり、設定ファイルに下記のように書きます:"

msgid "``scrypt`` requires OpenSSL 1.1+."
msgstr "``scrypt`` はOpenSSL 1.1+を必要とします。"

msgid "Increasing the salt entropy"
msgstr "ソルトのエントロピーを増加させる"

msgid ""
"Most password hashes include a salt along with their password hash in order "
"to protect against rainbow table attacks. The salt itself is a random value "
"which increases the size and thus the cost of the rainbow table and is "
"currently set at 128 bits with the ``salt_entropy`` value in the "
"``BasePasswordHasher``. As computing and storage costs decrease this value "
"should be raised. When implementing your own password hasher you are free to "
"override this value in order to use a desired entropy level for your "
"password hashes. ``salt_entropy`` is measured in bits."
msgstr ""
"ほとんどのパスワードハッシュはレインボーテーブル攻撃から守るために、パスワー"
"ドハッシュと一緒にソルトを含んでいます。ソルトはランダムな値であり、レイン"
"ボーテーブルのサイズとコストを増加させます。現在は ``BasePasswordHasher`` の "
"``salt_entropy`` 値で128ビットに設定されています。計算機やストレージのコスト"
"が下がれば、この値を上げる必要があります。独自のパスワードハッシュを実装する"
"場合、パスワードハッシュに希望するエントロピーレベルを使用するために、この値"
"を自由に上書きできます。 ``salt_entropy`` の単位はビットです。"

msgid "Implementation detail"
msgstr "実装の詳細"

msgid ""
"Due to the method in which salt values are stored the ``salt_entropy`` value "
"is effectively a minimum value. For instance a value of 128 would provide a "
"salt which would actually contain 131 bits of entropy."
msgstr ""
"ソルト値が保存されるメカニズムにより、 ``salt_entropy`` 値は実際には最小値で"
"す。たとえば、128という値は実際には131ビットのエントロピーを含むソルトを提供"
"します。"

msgid "Increasing the work factor"
msgstr "work factor を増やす"

msgid "PBKDF2 and bcrypt"
msgstr "PBKDF2 と bcrypt"

msgid ""
"The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of "
"hashing. This deliberately slows down attackers, making attacks against "
"hashed passwords harder. However, as computing power increases, the number "
"of iterations needs to be increased. We've chosen a reasonable default (and "
"will increase it with each release of Django), but you may wish to tune it "
"up or down, depending on your security needs and available processing power. "
"To do so, you'll subclass the appropriate algorithm and override the "
"``iterations`` parameter (use the ``rounds`` parameter when subclassing a "
"bcrypt hasher). For example, to increase the number of iterations used by "
"the default PBKDF2 algorithm:"
msgstr ""
"PBKDF2 と bcrypt アルゴリズムは、ハッシュ化に何度もイテレート（ラウンド）しま"
"す。これは意図的に攻撃者の速度を低下させ、ハッシュ化されたパスワードに対する"
"攻撃を困難にします。しかし、計算能力が上がるにつれて、イテレーションの回数を"
"増やす必要があります。私たちは妥当なデフォルト値を選びました（そして Django "
"のリリー スごとに増やす予定です）が、セキュリティの必要性や利用可能な処理能力"
"に応じて、上げたり下げたりすることもできます。そのためには、適切なアルゴリズ"
"ムをサブクラス化し、 ``iterations`` パラメータをオーバーライドします (bcrypt "
"hasher をサブクラス化するときは ``rounds`` パラメータを使います)。たとえば、"
"デフォルトの PBKDF2 アルゴリズムで使用するイテレーションの回数を増やすには、"
"次のようにします:"

msgid ""
"Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` ::"
msgstr ""
"``django.contrib.auth.hashers.PBKDF2PasswordHasher`` のサブクラスを作成しま"
"す:"

msgid ""
"Save this somewhere in your project. For example, you might put this in a "
"file like ``myproject/hashers.py``."
msgstr ""
"これをプロジェクトのどこかに保存します。たとえば、 ``myproject/hashers.py`` "
"のようなファイルに保存します。"

msgid "Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr ""
"新しいハッシャーを :setting:`PASSWORD_HASHERS` の最初のエントリーとして追加し"
"ます:"

msgid ""
"That's it -- now your Django install will use more iterations when it stores "
"passwords using PBKDF2."
msgstr ""
"これで Django が PBKDF2 を使ってパスワードを保存する際に、より多くのイテレー"
"ションを使うようになります。"

msgid ""
"bcrypt ``rounds`` is a logarithmic work factor, e.g. 12 rounds means ``2 ** "
"12`` iterations."
msgstr ""
"bcrypt の ``rounds`` は対数の work factor で、たとえば 12 ラウンドは ``2 ** "
"12`` のイテレーションを意味します。"

msgid "Argon2"
msgstr "Argon2"

msgid "Argon2 has the following attributes that can be customized:"
msgstr "Argon2には、カスタマイズ可能な以下の属性があります:"

msgid "``time_cost`` controls the number of iterations within the hash."
msgstr "``time_cost`` はハッシュ内のイテレートする回数をコントロールします。"

msgid ""
"``memory_cost`` controls the size of memory that must be used during the "
"computation of the hash."
msgstr ""
"``memory_cost`` は、ハッシュの計算に必要なメモリのサイズをコントロールしま"
"す。"

msgid ""
"``parallelism`` controls how many CPUs the computation of the hash can be "
"parallelized on."
msgstr ""
"``parallelism`` はハッシュの計算をいくつのCPUで並列化できるかを制御します。"

msgid ""
"The default values of these attributes are probably fine for you. If you "
"determine that the password hash is too fast or too slow, you can tweak it "
"as follows:"
msgstr ""
"これらの属性のデフォルト値は、おそらく問題ないでしょう。パスワード・ハッシュ"
"が速すぎたり遅すぎたりすると判断した場合は、以下のように微調整できます:"

msgid ""
"Choose ``parallelism`` to be the number of threads you can spare computing "
"the hash."
msgstr "``parallelism`` は、ハッシュを計算するスレッド数を指定します。"

msgid "Choose ``memory_cost`` to be the KiB of memory you can spare."
msgstr "``memory_cost`` には、余裕を持ったメモリのKiBを選択してください。"

msgid ""
"Adjust ``time_cost`` and measure the time hashing a password takes. Pick a "
"``time_cost`` that takes an acceptable time for you. If ``time_cost`` set to "
"1 is unacceptably slow, lower ``memory_cost``."
msgstr ""
"``time_cost`` を調整し、パスワードのハッシュにかかる時間を測定します。 "
"``time_cost`` は、あなたにとって許容できる時間を選んでください。もし "
"``time_cost`` に 1 を指定しても許容できないほど遅い場合は、 ``memory_cost`` "
"を下げてください。"

msgid "``memory_cost`` interpretation"
msgstr "``memory_cost`` の解釈"

msgid ""
"The argon2 command-line utility and some other libraries interpret the "
"``memory_cost`` parameter differently from the value that Django uses. The "
"conversion is given by ``memory_cost == 2 ** memory_cost_commandline``."
msgstr ""
"argon2 コマンドラインユーティリティと他のいくつかのライブラリは、 "
"``memory_cost`` パラメータを Django が使う値とは異なる解釈をします。変換は "
"``memory_cost == 2 ** memory_cost_commandline`` で行います。"

msgid "``scrypt``"
msgstr "``scrypt``"

msgid "scrypt_ has the following attributes that can be customized:"
msgstr "scrypt_ にはカスタマイズ可能な以下の属性があります:"

msgid "``work_factor`` controls the number of iterations within the hash."
msgstr "``work_factor`` はハッシュ内のイテレートする回数をコントロールします。"

msgid "``block_size``"
msgstr "``block_size``"

msgid "``parallelism`` controls how many threads will run in parallel."
msgstr ""
"``parallelism`` はいくつのスレッドが並列に実行されるかをコントロールします。"

msgid ""
"``maxmem`` limits the maximum size of memory that can be used during the "
"computation of the hash. Defaults to ``0``, which means the default "
"limitation from the OpenSSL library."
msgstr ""
"``maxmem`` はハッシュの計算中に使用できるメモリの最大サイズを制限します。デ"
"フォルトは ``0`` で、OpenSSL ライブラリによるデフォルトの制限を意味します。"

msgid ""
"We've chosen reasonable defaults, but you may wish to tune it up or down, "
"depending on your security needs and available processing power."
msgstr ""
"私たちは合理的なデフォルト値を選びましたが、セキュリティのニーズや利用可能な"
"処理能力に応じて、調整することもできます。"

msgid "Estimating memory usage"
msgstr "メモリ使用量の見積もり"

msgid "The minimum memory requirement of scrypt_ is::"
msgstr "scrypt_ に必要な最小のメモリサイズは以下の通りです:"

msgid ""
"so you may need to tweak ``maxmem`` when changing the ``work_factor`` or "
"``block_size`` values."
msgstr ""
"そのため、 ``work_factor`` や ``block_size`` の値を変更する際には ``maxmem`` "
"を調整する必要があるかもしれません。"

msgid "Password upgrading"
msgstr "パスワードのアップグレード"

msgid ""
"When users log in, if their passwords are stored with anything other than "
"the preferred algorithm, Django will automatically upgrade the algorithm to "
"the preferred one. This means that old installs of Django will get "
"automatically more secure as users log in, and it also means that you can "
"switch to new (and better) storage algorithms as they get invented."
msgstr ""
"ユーザーがログインする際、もしそのパスワードが推奨されるアルゴリズム以外で保"
"存されていた場合、Djangoは自動で推奨されるアルゴリズムへ更新します。つまり、"
"Djangoの古いインストールでも、ユーザーのログイン時に自動的にセキュリティが強"
"化され、新しい（より良い）保存アルゴリズムが開発されるたびに切り替えることが"
"できるということです。"

msgid ""
"However, Django can only upgrade passwords that use algorithms mentioned in :"
"setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should make "
"sure never to *remove* entries from this list. If you do, users using "
"unmentioned algorithms won't be able to upgrade. Hashed passwords will be "
"updated when increasing (or decreasing) the number of PBKDF2 iterations, "
"bcrypt rounds, or argon2 attributes."
msgstr ""
"ただし、Djangoは  :setting:`PASSWORD_HASHERS` で定義されたアルゴリズムを使用"
"するパスワードしか更新できません。そのため、新しいシステムにアップグレードす"
"る際には絶対にこのリストからエントリを「削除」しないでください。そうしない"
"と、定義されてないアルゴリズムを使用するユーザーのパスワードを更新できなくな"
"ります。ハッシュされたパスワードは、PBKDF2のイテレーション回数、bcrypt のラウ"
"ンド数、または argon2 の属性数を増やす (または減らす) と更新されます。"

msgid ""
"Be aware that if all the passwords in your database aren't encoded in the "
"default hasher's algorithm, you may be vulnerable to a user enumeration "
"timing attack due to a difference between the duration of a login request "
"for a user with a password encoded in a non-default algorithm and the "
"duration of a login request for a nonexistent user (which runs the default "
"hasher). You may be able to mitigate this by :ref:`upgrading older password "
"hashes <wrapping-password-hashers>`."
msgstr ""
"データベース上の全てのパスワードがデフォルトのハッシュアルゴリズムでエンコー"
"ドされていない場合、デフォルト以外のアルゴリズムでエンコードされたパスワード"
"を持つユーザーと、存在しないユーザー（デフォルトのハッシュアルゴリズムが実行"
"されます）に対するログインリクエストにかかる時間の差に起因する、ユーザー列挙"
"型タイミング攻撃に対して脆弱になる可能性があることに注意してください。 :ref:`"
"古いパスワードハッシュの更新 <wrapping-password-hashers>` によりこれを軽減で"
"きます。"

msgid "Password upgrading without requiring a login"
msgstr "ログインを必要としないパスワードアップグレード"

msgid ""
"If you have an existing database with an older, weak hash such as MD5, you "
"might want to upgrade those hashes yourself instead of waiting for the "
"upgrade to happen when a user logs in (which may never happen if a user "
"doesn't return to your site). In this case, you can use a \"wrapped\" "
"password hasher."
msgstr ""
"既存のデータベースが MD5 のような古くて弱いハッシュを使用している場合、ユーザ"
"がログインしたときにハッシュのアップグレードが行われるのを待つのではなく、自"
"分でハッシュをアップグレードしたいと思うかもしれません (ユーザがサイトに戻っ"
"てこない場合は、アップグレードが行われないかもしれません)。この場合、「ラッ"
"プ」パスワードハッシュを使用できます。"

msgid ""
"For this example, we'll migrate a collection of MD5 hashes to use "
"PBKDF2(MD5(password)) and add the corresponding password hasher for checking "
"if a user entered the correct password on login. We assume we're using the "
"built-in ``User`` model and that our project has an ``accounts`` app. You "
"can modify the pattern to work with any algorithm or with a custom user "
"model."
msgstr ""
"この例では、PBKDF2(MD5(password)) を使用するように MD5 ハッシュのコレクション"
"をマイグレーションし、ユーザがログイン時に正しいパスワードを入力したかどうか"
"をチェックするために、対応するパスワードハッシュを追加します。組み込みの "
"``User`` モデルを使用しており、プロジェクトには ``accounts`` アプリがあると仮"
"定します。このパターンをカスタマイズすることで、任意のアルゴリズムやカスタム"
"ユーザモデルで動作させることができます。"

msgid "First, we'll add the custom hasher:"
msgstr "まず、独自のハッシャーを追加します:"

msgid "``accounts/hashers.py``"
msgstr "``accounts/hashers.py``"

msgid "The data migration might look something like:"
msgstr "データマイグレーションは次のようになります:"

msgid "``accounts/migrations/0002_migrate_md5_passwords.py``"
msgstr "``accounts/migrations/0002_migrate_md5_passwords.py``"

msgid ""
"Be aware that this migration will take on the order of several minutes for "
"several thousand users, depending on the speed of your hardware."
msgstr ""
"このマイグレーションには、ハードウェアの速度にもよりますが、数千人のユーザー"
"で数分かかることに注意してください。"

msgid "Finally, we'll add a :setting:`PASSWORD_HASHERS` setting:"
msgstr "最後に :setting:`PASSWORD_HASHERS` 設定を追加します:"

msgid "``mysite/settings.py``"
msgstr "``mysite/settings.py``"

msgid "Include any other hashers that your site uses in this list."
msgstr ""
"あなたのサイトが使用している他のハッシャーもこのリストに含めてください。"

msgid "Included hashers"
msgstr "Django に含まれるハッシャー"

msgid "The full list of hashers included in Django is::"
msgstr "Django に含まれるハッシャーの全リストは以下の通りです:"

msgid "The corresponding algorithm names are:"
msgstr "対応するアルゴリズム名は以下の通りです:"

msgid "``pbkdf2_sha256``"
msgstr "``pbkdf2_sha256``"

msgid "``pbkdf2_sha1``"
msgstr "``pbkdf2_sha1``"

msgid "``argon2``"
msgstr "``argon2``"

msgid "``bcrypt_sha256``"
msgstr "``bcrypt_sha256``"

msgid "``bcrypt``"
msgstr "``bcrypt``"

msgid "``md5``"
msgstr "``md5``"

msgid "Writing your own hasher"
msgstr "独自のハッシャーを書く"

msgid ""
"If you write your own password hasher that contains a work factor such as a "
"number of iterations, you should implement a ``harden_runtime(self, "
"password, encoded)`` method to bridge the runtime gap between the work "
"factor supplied in the ``encoded`` password and the default work factor of "
"the hasher. This prevents a user enumeration timing attack due to  "
"difference between a login request for a user with a password encoded in an "
"older number of iterations and a nonexistent user (which runs the default "
"hasher's default number of iterations)."
msgstr ""
"イテレーション回数のようなワークファクターを含む独自のパスワードハッシャーを"
"書く場合は、 ``harden_runtime(self, password, encoded)`` メソッドを実装し"
"て、 ``エンコードされた`` パスワードに指定されたワークファクターとハッシャー"
"のデフォルトのワークファクターとの間のランタイムギャップを埋める必要がありま"
"す。これにより、古いイテレーション数でエンコードされたパスワードを持つユー"
"ザーと存在しないユーザー（デフォルトのハッシャーのデフォルトのイテレーション"
"数で実行される）のログイン要求の違いによるユーザー列挙タイミング攻撃を防ぐこ"
"とができます。"

msgid ""
"Taking PBKDF2 as example, if ``encoded`` contains 20,000 iterations and the "
"hasher's default ``iterations`` is 30,000, the method should run "
"``password`` through another 10,000 iterations of PBKDF2."
msgstr ""
"PBKDF2 を例にとると、 ``encoded`` が 20,000 回のイテレーションを含み、ハッ"
"シャーのデフォルトの ``iterations`` が 30,000 回である場合、このメソッドは "
"``password`` を PBKDF2 のさらに 10,000 回のイテレーションに通す必要がありま"
"す。"

msgid ""
"If your hasher doesn't have a work factor, implement the method as a no-op "
"(``pass``)."
msgstr ""
"もしあなたのハッシャーがワークファクターを持っていない場合は、このメソッドを"
"何もしない操作 (``pass``) として実装してください。"

msgid "Manually managing a user's password"
msgstr "ユーザーのパスワードを手動で管理する"

msgid ""
"The :mod:`django.contrib.auth.hashers` module provides a set of functions to "
"create and validate hashed passwords. You can use them independently from "
"the ``User`` model."
msgstr ""
":mod:`django.contrib.auth.hashers` モジュールは、ハッシュ化されたパスワードを"
"作成・検証するための関数群を提供します。これらは ``User`` モデルとは独立して"
"使用できます。"

msgid ""
"If you'd like to manually authenticate a user by comparing a plain-text "
"password to the hashed password in the database, use the convenience "
"function :func:`check_password`. It takes two mandatory arguments: the plain-"
"text password to check, and the full value of a user's ``password`` field in "
"the database to check against. It returns ``True`` if they match, ``False`` "
"otherwise. Optionally, you can pass a callable ``setter`` that takes the "
"password and will be called when you need to regenerate it. You can also "
"pass ``preferred`` to change a hashing algorithm if you don't want to use "
"the default (first entry of ``PASSWORD_HASHERS`` setting). See :ref:`auth-"
"included-hashers` for the algorithm name of each hasher."
msgstr ""
"もしプレーンテキストのパスワードとデータベースのハッシュ化されたパスワードを"
"比較して手動でユーザーを認証したい場合は、 :func:`check_password` という便利"
"な関数を使用してください。この関数は2つの必須引数を取ります。チェックするプ"
"レーンテキストのパスワードと、照合するデータベースの ``password`` フィールド"
"の完全な値です。これらが一致すれば ``True`` を返し、一致しなければ ``False`` "
"を返します。オプションとして、呼び出し可能な ``setter`` を渡すことができま"
"す。この ``setter`` はパスワードを受け取り、再生成の必要がある際に呼び出され"
"ます。また、デフォルトのハッシュアルゴリズム (``PASSWORD_HASHERS`` 設定の最初"
"のエントリ) を使用したくない場合は、 ``preferred`` を渡せばハッシュアルゴリズ"
"ムを変更できます。各ハッシャーのアルゴリズム名については :ref:`auth-included-"
"hashers` を参照してください。"

msgid ""
"Creates a hashed password in the format used by this application. It takes "
"one mandatory argument: the password in plain-text (string or bytes). "
"Optionally, you can provide a salt and a hashing algorithm to use, if you "
"don't want to use the defaults (first entry of ``PASSWORD_HASHERS`` "
"setting). See :ref:`auth-included-hashers` for the algorithm name of each "
"hasher. If the password argument is ``None``, an unusable password is "
"returned (one that will never be accepted by :func:`check_password`)."
msgstr ""
"このアプリケーションで使用する形式でハッシュ化されたパスワードを作成します。"
"必須引数は1つで、プレーンテキスト(文字列またはバイト)のパスワードです。オプ"
"ションとして、デフォルトを使用したくない場合に使用するソルトとハッシュアルゴ"
"リズムを指定できます (``PASSWORD_HASHERS`` 設定の最初のエントリ)。各ハッ"
"シャーのアルゴリズム名については :ref:`auth-included-hashers` を参照してくだ"
"さい。password 引数に ``None`` を指定すると、使用できないパスワードが返されま"
"す (:func:`check_password` では決して受け付けられません)。"

msgid ""
"Returns ``False`` if the password is a result of :meth:`.User."
"set_unusable_password`."
msgstr ""
"パスワードが :meth:`.User.set_unusable_password` の結果の場合は ``False`` を"
"返します。"

msgid "Password validation"
msgstr "パスワードの妥当性検証"

msgid ""
"Users often choose poor passwords. To help mitigate this problem, Django "
"offers pluggable password validation. You can configure multiple password "
"validators at the same time. A few validators are included in Django, but "
"you can write your own as well."
msgstr ""
"ユーザーは、良くないパスワードを選択することがあります。この問題を軽減するた"
"めに、Djangoはプラガブルなパスワードの妥当性検証を提供しています。複数のパス"
"ワードの妥当性検証を同時に設定できます。いくつかのバリデータは Django に含ま"
"れていますが、自分で書くこともできます。"

msgid ""
"Each password validator must provide a help text to explain the requirements "
"to the user, validate a given password and return an error message if it "
"does not meet the requirements, and optionally define a callback to be "
"notified when the password for a user has been changed. Validators can also "
"have optional settings to fine tune their behavior."
msgstr ""
"各パスワードのバリデータは、ユーザーに要件の説明文を与え、指定されたパスワー"
"ドの妥当性検証を行い、要件を満たしていない場合はエラーメッセージを返し、オプ"
"ションでユーザのパスワードが変更されたときに通知するコールバックを定義しま"
"す。バリデータは、動作を細かく指定するためのオプション設定を持つこともできま"
"す。"

msgid ""
"Validation is controlled by the :setting:`AUTH_PASSWORD_VALIDATORS` setting. "
"The default for the setting is an empty list, which means no validators are "
"applied. In new projects created with the default :djadmin:`startproject` "
"template, a set of validators is enabled by default."
msgstr ""
"妥当性検証は :setting:`AUTH_PASSWORD_VALIDATORS` の設定で管理されます。設定の"
"デフォルトは、空のリストになってます。これは、ひとつもバリデータが適用されて"
"いないことを意味しています。 :djadmin:`startproject` を使用して作られた新しい"
"プロジェクトでは、バリデータのセットはデフォルトで有効になっています。"

msgid ""
"By default, validators are used in the forms to reset or change passwords "
"and in the :djadmin:`createsuperuser` and :djadmin:`changepassword` "
"management commands. Validators aren't applied at the model level, for "
"example in ``User.objects.create_user()`` and ``create_superuser()``, "
"because we assume that developers, not users, interact with Django at that "
"level and also because model validation doesn't automatically run as part of "
"creating models."
msgstr ""
"デフォルトでは、バリデータはパスワードをリセットまたは変更するフォームと :"
"djadmin:`createsuperuser` と :djadmin:`changepassword` 管理コマンドで使用され"
"ます。たとえば、 ``User.objects.create_user()`` や ``create_superuser()`` の"
"ようなモデルレベルではバリデータは適用されません。なぜなら、このレベルで "
"Django とやりとりするのはユーザ ではなく開発者であると想定しているからであ"
"り、また、モデルのバリデーションがモデル作成の一環として自動的に実行されるわ"
"けではないからです。"

msgid ""
"Password validation can prevent the use of many types of weak passwords. "
"However, the fact that a password passes all the validators doesn't "
"guarantee that it is a strong password. There are many factors that can "
"weaken a password that are not detectable by even the most advanced password "
"validators."
msgstr ""
"パスワードの妥当性検証は多くの脆弱なパスワードの形式が使用されることを防ぎま"
"す。しかしながら、パスワードが全てのバリデータを通過するという事実は、強力な"
"パスワードであることを保証するわけではありません。最も先進的なパスワードのバ"
"リデータでさえ検出できない、パスワードを弱めうる多くの要素があります。"

msgid "Enabling password validation"
msgstr "パスワードの妥当性検証を有効にする"

msgid ""
"Password validation is configured in the :setting:`AUTH_PASSWORD_VALIDATORS` "
"setting::"
msgstr ""
"パスワードの妥当性検証は :setting:`AUTH_PASSWORD_VALIDATORS` で構成されます::"

msgid "This example enables all four included validators:"
msgstr "本例では組み込みの4つ全てのバリデータを有効化します。"

msgid ""
"``UserAttributeSimilarityValidator``, which checks the similarity between "
"the password and a set of attributes of the user."
msgstr ""
"``UserAttributeSimilarityValidator`` は、パスワードとユーザの属性との類似性を"
"チェックします。"

msgid ""
"``MinimumLengthValidator``, which checks whether the password meets a "
"minimum length. This validator is configured with a custom option: it now "
"requires the minimum length to be nine characters, instead of the default "
"eight."
msgstr ""
"``MinimumLengthValidator`` は、パスワードが最小の長さを満たしているかをチェッ"
"クします。このバリデータはカスタムオプションで構成されます。現在の設定では、"
"最小長さは、デフォルトの8文字ではなく、9文字になっています。"

msgid ""
"``CommonPasswordValidator``, which checks whether the password occurs in a "
"list of common passwords. By default, it compares to an included list of "
"20,000 common passwords."
msgstr ""
"``CommonPasswordValidator`` は、一般的なパスワードのリストにそのパスワードが"
"入っていないかをチェックします。デフォルトでは、組み込まれた20,000個のパス"
"ワードのリストと比較します。"

msgid ""
"``NumericPasswordValidator``, which checks whether the password isn't "
"entirely numeric."
msgstr ""
"``NumericPasswordValidator`` は、パスワードが全体的に数値ではないかをチェック"
"します。"

msgid ""
"For ``UserAttributeSimilarityValidator`` and ``CommonPasswordValidator``, "
"we're using the default settings in this example. "
"``NumericPasswordValidator`` has no settings."
msgstr ""
"``UserAttributeSimilarityValidator`` と ``CommonPasswordValidator`` について"
"は、たとえばこの例ではデフォルトの設定を使用しています。 "
"``NumericPasswordValidator`` には設定はありません。"

msgid ""
"The help texts and any errors from password validators are always returned "
"in the order they are listed in :setting:`AUTH_PASSWORD_VALIDATORS`."
msgstr ""
"パスワードバリデーションのヘルプテキストとエラーは、常に :setting:"
"`AUTH_PASSWORD_VALIDATORS` に記載されているソート順に返されます。"

msgid "Included validators"
msgstr "Django に含まれるバリデータ"

msgid "Django includes four validators:"
msgstr "Django には 4 つのバリデータがあります:"

msgid ""
"Validates that the password is of a minimum length. The minimum length can "
"be customized with the ``min_length`` parameter."
msgstr ""
"パスワードが最小限の長さであることを検証します。最小の長さは ``min_length`` "
"パラメータでカスタマイズできます。"

msgid ""
"Validates that the password is sufficiently different from certain "
"attributes of the user."
msgstr "パスワードがユーザの特定の属性と十分に異なることを検証します。"

msgid ""
"The ``user_attributes`` parameter should be an iterable of names of user "
"attributes to compare to. If this argument is not provided, the default is "
"used: ``'username', 'first_name', 'last_name', 'email'``. Attributes that "
"don't exist are ignored."
msgstr ""
"パラメータ ``user_attributes`` は、比較するユーザー属性の名前のイテラブルでな"
"ければなりません。この引数が指定されない場合、デフォルトが使用されます。"
"``'username', 'first_name', 'last_name', 'email'`` です。存在しない属性は無視"
"されます。"

msgid ""
"The maximum allowed similarity of passwords can be set on a scale of 0.1 to "
"1.0 with the ``max_similarity`` parameter. This is compared to the result "
"of :meth:`difflib.SequenceMatcher.quick_ratio`. A value of 0.1 rejects "
"passwords unless they are substantially different from the "
"``user_attributes``, whereas a value of 1.0 rejects only passwords that are "
"identical to an attribute's value."
msgstr ""
"パスワードの最大類似度は ``max_similarity`` パラメータで 0.1 から 1.0 の範囲"
"で指定できます。これは :meth:`difflib.SequenceMatcher.quick_ratio` の結果と比"
"較されます。0.1の値を指定すると、 ``user_attributes`` と大幅に異なるパスワー"
"ド以外は拒否され、1.0の値を指定すると、属性の値と同じパスワードのみが拒否され"
"ます。"

msgid "The ``max_similarity`` parameter was limited to a minimum value of 0.1."
msgstr "パラメータ ``max_similarity`` は最小値0.1に制限されました。"

msgid ""
"Validates that the password is not a common password. This converts the "
"password to lowercase (to do a case-insensitive comparison) and checks it "
"against a list of 20,000 common password created by `Royce Williams <https://"
"gist.github.com/roycewilliams/226886fd01572964e1431ac8afc999ce>`_."
msgstr ""
"パスワードが一般的なパスワードでないことを検証します。これはパスワードを小文"
"字に変換し(大文字小文字を区別しない比較を行うため)、 `Royce Williams "
"<https://gist.github.com/roycewilliams/226886fd01572964e1431ac8afc999ce>`_ に"
"よって作成された20,000の一般的なパスワードのリストと照合します。"

msgid ""
"The ``password_list_path`` can be set to the path of a custom file of common "
"passwords. This file should contain one lowercase password per line and may "
"be plain text or gzipped."
msgstr ""
"``password_list_path`` には一般的なパスワードのカスタムファイルのパスを指定で"
"きます。このファイルには1行につき1つの小文字のパスワードが含まれている必要が"
"あり、プレーンテキストまたはgzip圧縮されている必要があります。"

msgid ""
"The list of 20,000 common passwords was updated to the most recent version."
msgstr "一般的なパスワード2万件のリストを最新版に更新しました。"

msgid "Validate that the password is not entirely numeric."
msgstr "パスワードが数字のみでないことを確認します。"

msgid "Integrating validation"
msgstr "バリデーションの統合"

msgid ""
"There are a few functions in ``django.contrib.auth.password_validation`` "
"that you can call from your own forms or other code to integrate password "
"validation. This can be useful if you use custom forms for password setting, "
"or if you have API calls that allow passwords to be set, for example."
msgstr ""
"``django.contrib.auth.password_validation`` には、独自のフォームや他のコード"
"から呼び出して パスワード認証を統合できる関数がいくつかあります。これは、たと"
"えばパスワードの設定にカスタムフォームを使ったり、 パスワードの設定を許可す"
"る API 呼び出しがある場合に便利です。"

msgid ""
"Validates a password. If all validators find the password valid, returns "
"``None``. If one or more validators reject the password, raises a :exc:"
"`~django.core.exceptions.ValidationError` with all the error messages from "
"the validators."
msgstr ""
"パスワードを検証します。すべてのバリデータがパスワードを有効と判定した場合、 "
"``None`` を返します。1つ以上のバリデータがパスワードを拒否した場合、バリデー"
"タからのすべてのエラーメッセージと共に :exc:`~django.core.exceptions."
"ValidationError` を発生させます。"

msgid ""
"The ``user`` object is optional: if it's not provided, some validators may "
"not be able to perform any validation and will accept any password."
msgstr ""
"もし ``user`` オブジェクトを指定しなかった場合、バリデータによってはバリデー"
"ションを実行できず、任意のパスワードを受け取ってしまう可能性があります。"

msgid ""
"Informs all validators that the password has been changed. This can be used "
"by validators such as one that prevents password reuse. This should be "
"called once the password has been successfully changed."
msgstr ""
"パスワードが変更されたことをすべてのバリデータに通知します。これは、パスワー"
"ドの再利用を防止するバリデータなどで使用します。パスワードの変更に成功した"
"ら、これを呼び出さなければなりません。"

msgid ""
"For subclasses of :class:`~django.contrib.auth.models.AbstractBaseUser`, the "
"password field will be marked as \"dirty\" when calling :meth:`~django."
"contrib.auth.models.AbstractBaseUser.set_password` which triggers a call to "
"``password_changed()`` after the user is saved."
msgstr ""
":class:`~django.contrib.auth.models.AbstractBaseUser` のサブクラスでは、パス"
"ワードフィールドは :meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_password` を呼び出すと \"dirty\" としてマークされ、ユーザが保存された後"
"に ``password_changed()`` が呼び出されます。"

msgid ""
"Returns a list of the help texts of all validators. These explain the "
"password requirements to the user."
msgstr ""
"すべてのバリデータのヘルプテキストの一覧を返します。これらは、パスワードの条"
"件をユーザに説明するものです。"

msgid ""
"Returns an HTML string with all help texts in an ``<ul>``. This is helpful "
"when adding password validation to forms, as you can pass the output "
"directly to the ``help_text`` parameter of a form field."
msgstr ""
"すべてのヘルプテキストを ``<ul>`` で囲んだ HTML 文字列を返します。これは"
"フォームにパスワードバリデーションを追加する際に便利です。フォームフィールド"
"の ``help_text`` パラメータに直接出力を渡すことができるからです。"

msgid ""
"Returns a set of validator objects based on the ``validator_config`` "
"parameter. By default, all functions use the validators defined in :setting:"
"`AUTH_PASSWORD_VALIDATORS`, but by calling this function with an alternate "
"set of validators and then passing the result into the "
"``password_validators`` parameter of the other functions, your custom set of "
"validators will be used instead. This is useful when you have a typical set "
"of validators to use for most scenarios, but also have a special situation "
"that requires a custom set. If you always use the same set of validators, "
"there is no need to use this function, as the configuration from :setting:"
"`AUTH_PASSWORD_VALIDATORS` is used by default."
msgstr ""
"パラメータ ``validator_config`` に基づいてバリデータオブジェクトのセットを返"
"します。デフォルトでは、すべての関数は :setting:`AUTH_PASSWORD_VALIDATORS` で"
"定義されたバリデータを使用しますが、この関数を別のバリデータセットで呼び出し"
"て、その結果を他の関数の ``password_validators`` パラメータに渡すことで、カス"
"タムバリデータセットを代わりに使用できます。これは、たいていの場面で使用する"
"典型的なバリデータセットがありながら、 特別な場面で独自のバリデータセットが必"
"要になる場合に便利です。常に同じバリデータを使う場合は、この関数を使う必要は"
"ありません。 :setting:`AUTH_PASSWORD_VALIDATORS` の設定がデフォルトで使われる"
"からです。"

msgid ""
"The structure of ``validator_config`` is identical to the structure of :"
"setting:`AUTH_PASSWORD_VALIDATORS`. The return value of this function can be "
"passed into the ``password_validators`` parameter of the functions listed "
"above."
msgstr ""
"``validator_config`` の構造は :setting:`AUTH_PASSWORD_VALIDATORS` の構造と同"
"じです。この関数の戻り値は上記の関数の ``password_validators`` パラメータに渡"
"すことができます。"

msgid ""
"Note that where the password is passed to one of these functions, this "
"should always be the clear text password - not a hashed password."
msgstr ""
"これらの関数にパスワードが渡される場合は、ハッシュ化されたパスワードではな"
"く、常に平文のパスワードでなければならないことに注意してください。"

msgid "Writing your own validator"
msgstr "独自のバリデータを書く"

msgid ""
"If Django's built-in validators are not sufficient, you can write your own "
"password validators. Validators have a fairly small interface. They must "
"implement two methods:"
msgstr ""
"Django の組み込みバリデータでは不十分な場合、自分でパスワードバリデータ を書"
"くことができます。バリデータはとても小さなインタフェースを持っています。2 つ"
"のメソッドを実装しなければなりません:"

msgid ""
"``validate(self, password, user=None)``: validate a password. Return "
"``None`` if the password is valid, or raise a :exc:`~django.core.exceptions."
"ValidationError` with an error message if the password is not valid. You "
"must be able to deal with ``user`` being ``None`` - if that means your "
"validator can't run, return ``None`` for no error."
msgstr ""
"``validate(self, password, user=None)``: パスワードを検証します。パスワードが"
"有効な場合は ``None`` を返し、パスワードが無効な場合はエラーメッセージと共"
"に :exc:`~django.core.exceptions.ValidationError` を発生させます。もし "
"``user`` が ``None`` であった場合、バリデータが実行できないので、 ``None`` を"
"返してエラーにならないようにしてください。"

msgid ""
"``get_help_text()``: provide a help text to explain the requirements to the "
"user."
msgstr ""
"``get_help_text()``: ユーザに要件を説明するためのヘルプテキストを提供します。"

msgid ""
"Any items in the ``OPTIONS`` in :setting:`AUTH_PASSWORD_VALIDATORS` for your "
"validator will be passed to the constructor. All constructor arguments "
"should have a default value."
msgstr ""
"バリデータの :setting:`AUTH_PASSWORD_VALIDATORS` の ``OPTIONS`` にあるすべて"
"の項目がコンストラクタに渡されます。コンストラクタの引数にはデフォルト値を指"
"定します。"

msgid "Here's a basic example of a validator, with one optional setting::"
msgstr "以下は、1つのオプション設定を持つ基本的なバリデータの例です。"

msgid ""
"You can also implement ``password_changed(password, user=None``), which will "
"be called after a successful password change. That can be used to prevent "
"password reuse, for example. However, if you decide to store a user's "
"previous passwords, you should never do so in clear text."
msgstr ""
"パスワードの変更が成功した後に呼び出される ``password_changed(password, "
"user=None``) を実装することもできます。これはたとえばパスワードの再利用を防ぐ"
"ために使用できます。しかし、ユーザーの以前のパスワードを保存することにした場"
"合、決して平文で保存してはいけません。"

msgid "Django's cache framework"
msgstr "Django のキャッシュフレームワーク"

msgid ""
"A fundamental trade-off in dynamic websites is, well, they're dynamic. Each "
"time a user requests a page, the web server makes all sorts of calculations "
"-- from database queries to template rendering to business logic -- to "
"create the page that your site's visitor sees. This is a lot more expensive, "
"from a processing-overhead perspective, than your standard read-a-file-off-"
"the-filesystem server arrangement."
msgstr ""
"動的なウェブサイトの基本的なトレードオフは、ええと、それが動的であるというこ"
"とです。ユーザーがページをリクエストするたびに、ウェブサーバーはあらゆる種類"
"の計算を行い (データベースのクエリから、テンプレートのレンダリングやビジネス"
"ロジックの実行まで)、サイトの訪問者が目にするページを作成します。これは、処理"
"オーバーヘッドの観点から、ファイルシステムからファイルを読み取る標準的なサー"
"バー構成よりもはるかに高コストです。"

msgid ""
"For most web applications, this overhead isn't a big deal. Most web "
"applications aren't ``washingtonpost.com`` or ``slashdot.org``; they're "
"small- to medium-sized sites with so-so traffic. But for medium- to high-"
"traffic sites, it's essential to cut as much overhead as possible."
msgstr ""
"ほとんどの Web アプリケーションでは、このオーバーヘッドは大した問題ではありま"
"せん。ほとんどの Web アプリケーションは ``washingtonpost.com`` や ``slashdot."
"org`` ではなく、そこそこのトラフィックがある小規模から中規模のサイトです。た"
"だし、中トラフィックから高トラフィックのサイトでは、オーバーヘッドをできる限"
"り削減することが不可欠です。"

msgid "That's where caching comes in."
msgstr "そこで登場するのがキャッシュです。"

msgid ""
"To cache something is to save the result of an expensive calculation so that "
"you don't have to perform the calculation next time. Here's some pseudocode "
"explaining how this would work for a dynamically generated web page:"
msgstr ""
"何かをキャッシュすることは、次回に計算を実行する必要がないように、高価な計算"
"の結果を保存することです。以下に示すのは、動的に生成された Web ページでキャッ"
"シュがどのように機能するかを説明する疑似コードです。"

msgid ""
"Django comes with a robust cache system that lets you save dynamic pages so "
"they don't have to be calculated for each request. For convenience, Django "
"offers different levels of cache granularity: You can cache the output of "
"specific views, you can cache only the pieces that are difficult to produce, "
"or you can cache your entire site."
msgstr ""
"Django には、動的ページを保存できるロバストなキャッシュ システムが付属してい"
"るため、各リクエストごとに動的ページを計算する必要はありません。便宜上、"
"Django は異なるレベルのキャッシュ粒度を提供しています。特定のビューの出力を"
"キャッシュしたり、生成が難しい部分のみをキャッシュしたり、サイト全体をキャッ"
"シュできます。"

msgid ""
"Django also works well with \"downstream\" caches, such as `Squid <http://"
"www.squid-cache.org/>`_ and browser-based caches. These are the types of "
"caches that you don't directly control but to which you can provide hints "
"(via HTTP headers) about which parts of your site should be cached, and how."
msgstr ""
"Django は、 `Squid <http://www.squid-cache.org/>`_ やブラウザベースのキャッ"
"シュなどの「ダウンストリーム」キャッシュでもうまく機能します。これらは、直接"
"コントロールできないタイプのキャッシュですが、サイトのどの部分をどのように"
"キャッシュする必要があるかというヒントを (HTTP ヘッダー経由で) 提供できます。"

msgid ""
"The :ref:`Cache Framework design philosophy <cache-design-philosophy>` "
"explains a few of the design decisions of the framework."
msgstr ""
":ref:`キャッシュフレームワークの設計思想 <cache-design-philosophy>` では、フ"
"レームワークの設計上の決定のいくつかについて説明します。"

msgid "Setting up the cache"
msgstr "キャッシュのセットアップ"

msgid ""
"The cache system requires a small amount of setup. Namely, you have to tell "
"it where your cached data should live -- whether in a database, on the "
"filesystem or directly in memory. This is an important decision that affects "
"your cache's performance; yes, some cache types are faster than others."
msgstr ""
"キャッシュシステムにはちょっとした設定が必要です。つまり、キャッシュされた"
"データをどこに置くか、データベースか、ファイルシステムか、メモリに直接置くか"
"を指定しなければなりません。これはキャッシュのパフォーマンスに影響する重要な"
"決定です。"

msgid ""
"Your cache preference goes in the :setting:`CACHES` setting in your settings "
"file. Here's an explanation of all available values for :setting:`CACHES`."
msgstr ""
"キャッシュの設定は設定ファイルの :setting:`CACHES` 設定にあります。ここで"
"は、 :setting:`CACHES` で使用可能なすべての値について説明します。"

msgid "Memcached"
msgstr "Memcached"

msgid ""
"Memcached__ is an entirely memory-based cache server, originally developed "
"to handle high loads at LiveJournal.com and subsequently open-sourced by "
"Danga Interactive. It is used by sites such as Facebook and Wikipedia to "
"reduce database access and dramatically increase site performance."
msgstr ""
"Memcached__ は完全にメモリベースのキャッシュ・サーバで、元々はLiveJournal.com"
"の高負荷を処理するために開発され、その後Danga Interactiveによってオープンソー"
"ス化されました。FacebookやWikipediaなどのサイトで使用され、データベースへのア"
"クセスを減らし、サイトのパフォーマンスを劇的に向上させます。"

msgid ""
"Memcached runs as a daemon and is allotted a specified amount of RAM. All it "
"does is provide a fast interface for adding, retrieving and deleting data in "
"the cache. All data is stored directly in memory, so there's no overhead of "
"database or filesystem usage."
msgstr ""
"Memcached はデーモンとして動作し、指定された量の RAM が割り当てられます。"
"キャッシュにデータを追加、取得、削除するための高速なインターフェイスを提供す"
"るだけです。すべてのデータはメモリに直接保存されるので、データベースやファイ"
"ルシステムの使用によるオーバーヘッドはありません。"

msgid ""
"After installing Memcached itself, you'll need to install a Memcached "
"binding. There are several Python Memcached bindings available; the two "
"supported by Django are :pypi:`pylibmc` and :pypi:`pymemcache`."
msgstr ""
"Memcached 自体をインストールした後、Memcached バインディングをインストールす"
"る 必要があります。Python の Memcached バインディングはいくつかありますが、 "
"Django がサポートしているのは :pypi:`pylibmc` と :pypi:`pymemcache` です。"

msgid "To use Memcached with Django:"
msgstr "Django で Memcached を使用する"

msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends."
"memcached.PyMemcacheCache`` or ``django.core.cache.backends.memcached."
"PyLibMCCache`` (depending on your chosen memcached binding)"
msgstr ""
":setting:`BACKEND <CACHES-BACKEND>` を ``django.core.cache.backends."
"memcached.PyMemcacheCache`` または ``django.core.cache.backends.memcached."
"PyLibMCCache`` (選択した memcached バインディングによる) に設定する"

msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``ip:port`` values, where "
"``ip`` is the IP address of the Memcached daemon and ``port`` is the port on "
"which Memcached is running, or to a ``unix:path`` value, where ``path`` is "
"the path to a Memcached Unix socket file."
msgstr ""
":setting:`LOCATION <CACHES-LOCATION>` を ``ip:port`` の値 (ここで、``ip`` は "
"Memcached デーモンの IP アドレス、``port`` は Memcached が起動しているポー"
"ト)、または、``unix:path`` の値に設定する (ここで、``path`` は Memcached "
"Unix socket ファイルへのパス)。"

msgid ""
"In this example, Memcached is running on localhost (127.0.0.1) port 11211, "
"using the ``pymemcache`` binding::"
msgstr ""
"次の例では、Memcached は localhost (127.0.0.1) port 11211 で起動していて、"
"``pymemcache`` バインディングを使用しています。"

msgid ""
"In this example, Memcached is available through a local Unix socket file :"
"file:`/tmp/memcached.sock` using the ``pymemcache`` binding::"
msgstr ""
"次の例では、Memcached はローカルの Unix socket ファイル :file:`/tmp/"
"memcached.sock` 経由で利用可能であり、``pymemcache`` バインディングを使用して"
"います。"

msgid ""
"One excellent feature of Memcached is its ability to share a cache over "
"multiple servers. This means you can run Memcached daemons on multiple "
"machines, and the program will treat the group of machines as a *single* "
"cache, without the need to duplicate cache values on each machine. To take "
"advantage of this feature, include all server addresses in :setting:"
"`LOCATION <CACHES-LOCATION>`, either as a semicolon or comma delimited "
"string, or as a list."
msgstr ""
"Memcached の優れた機能の一つは、複数のサーバでキャッシュを共有できることで"
"す。つまり、複数のマシンで Memcached デーモンを実行することができ、各マシンで"
"キャッシュの値を重複させることなく、 *単一の* キャッシュとして扱うことができ"
"ます。この機能を利用するには、全てのサーバのアドレスを :setting:`LOCATION "
"<CACHES-LOCATION>` に、セミコロンまたはカンマ区切りの文字列、あるいはリストと"
"して記述します。"

msgid ""
"In this example, the cache is shared over Memcached instances running on IP "
"address 172.19.26.240 and 172.19.26.242, both on port 11211::"
msgstr ""
"このインスタンスでは、IP アドレス 172.19.26.240 と 172.19.26.242 で動作する "
"Memcached インスタンスをポート 11211 で共有します:"

msgid ""
"In the following example, the cache is shared over Memcached instances "
"running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port "
"11212), and 172.19.26.244 (port 11213)::"
msgstr ""
"以下の例では、172.19.26.240 (port 11211)、172.19.26.242 (port 11212)、"
"172.19.26.244 (port 11213) の IP アドレスで動作する Memcached インスタンスで"
"キャッシュを共有しています:"

msgid ""
"By default, the ``PyMemcacheCache`` backend sets the following options (you "
"can override them in your :setting:`OPTIONS <CACHES-OPTIONS>`)::"
msgstr ""
"デフォルトでは、 ``PyMemcacheCache`` バックエンドは以下のオプションを設定しま"
"す( :setting:`OPTIONS <CACHES-OPTIONS>` で上書きできます):"

msgid ""
"A final point about Memcached is that memory-based caching has a "
"disadvantage: because the cached data is stored in memory, the data will be "
"lost if your server crashes. Clearly, memory isn't intended for permanent "
"data storage, so don't rely on memory-based caching as your only data "
"storage. Without a doubt, *none* of the Django caching backends should be "
"used for permanent storage -- they're all intended to be solutions for "
"caching, not storage -- but we point this out here because memory-based "
"caching is particularly temporary."
msgstr ""
"Memcachedについての最後のポイントは、メモリベースのキャッシュには欠点があると"
"いうことです。キャッシュされたデータはメモリに保存されるので、サーバーがク"
"ラッシュするとデータは失われます。メモリは永続的なデータ保存用ではないので、"
"メモリベースのキャッシュを唯一のデータ保存用として使わないようにしましょう。"
"明らかに、 Django のキャッシュバックエンドはどれも、永続的な保存には使うべき"
"ではありません。これらは全てキャッシュのためのソリューションであって、スト"
"レージではありません。しかし、メモリベースのキャッシュは特に一時的なものであ"
"るため、 ここでに記載しておきます。"

msgid "Redis"
msgstr "Redis"

msgid ""
"Redis__ is an in-memory database that can be used for caching. To begin "
"you'll need a Redis server running either locally or on a remote machine."
msgstr ""
"Redis__ は、キャッシュに利用できるインメモリ データベースです。はじめに、"
"Redis サーバーがローカルまたはリモートマシン上で起動している必要があります。"

msgid ""
"After setting up the Redis server, you'll need to install Python bindings "
"for Redis. :pypi:`redis-py <redis>` is the binding supported natively by "
"Django. Installing the :pypi:`hiredis-py <hiredis>` package is also "
"recommended."
msgstr ""
"Redis サーバを設定した後、Redis の Python バインディングをインストールする必"
"要があります。 :pypi:`redis-py <redis>` は Django によってネイティブにサポー"
"トされているバインディングです。 :pypi:`hiredis-py <hiredis>` パッケージも推"
"奨のひとつです。"

msgid "To use Redis as your cache backend with Django:"
msgstr ""
"Redis をキャッシュ バックエンドとして Django で使用するには、次のようにしま"
"す。"

msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends."
"redis.RedisCache``."
msgstr ""
":setting:`BACKEND <CACHES-BACKEND>` を ``django.core.cache.backends.redis."
"RedisCache`` に設定する。"

msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to the URL pointing to your Redis "
"instance, using the appropriate scheme. See the ``redis-py`` docs for "
"`details on the available schemes <https://redis-py.readthedocs.io/en/stable/"
"connections.html#redis.connection.ConnectionPool.from_url>`_."
msgstr ""
":setting:`LOCATION <CACHES-LOCATION>` を、適切なスキーマを使用して Redis イン"
"スタンスを指す URL に設定する。`利用可能なスキーマの詳細 <https://redis-py."
"readthedocs.io/en/stable/connections.html#redis.connection.ConnectionPool."
"from_url>`_ については、``redis-py`` のドキュメントを参照してください。"

msgid "For example, if Redis is running on localhost (127.0.0.1) port 6379::"
msgstr ""
"たとえば、Redis が localhost (127.0.0.1) port 6379 で起動している場合は、次の"
"ように設定します。"

msgid ""
"Often Redis servers are protected with authentication. In order to supply a "
"username and password, add them in the ``LOCATION`` along with the URL::"
msgstr ""
"Redis サーバーは認証で保護されていることがよくあります。ユーザー名とパスワー"
"ドを提供するには、``LOCATION`` 内に URL とともに追加します。"

msgid ""
"If you have multiple Redis servers set up in the replication mode, you can "
"specify the servers either as a semicolon or comma delimited string, or as a "
"list. While using multiple servers, write operations are performed on the "
"first server (leader). Read operations are performed on the other servers "
"(replicas) chosen at random::"
msgstr ""
"レプリケーション・モードで複数のRedisサーバーを設定している場合は、セミコロン"
"またはカンマ区切りの文字列、あるいはリストとしてサーバーを指定できます。複数"
"のサーバーを使用している場合、書き込み操作は最初のサーバー（リーダー）で実行"
"されます。読み取り操作は、ランダムに選ばれた他のサーバ（レプリカ）で実行され"
"ます:"

msgid "Database caching"
msgstr "データベースのキャッシュ"

msgid ""
"Django can store its cached data in your database. This works best if you've "
"got a fast, well-indexed database server."
msgstr ""
"Django はキャッシュデータをデータベース中に保存できます。この仕組みは、高速で"
"適切にインデックス付けされたデータベースサーバーがある場合に、有効に機能しま"
"す。"

msgid "To use a database table as your cache backend:"
msgstr ""
"データベースのテーブルをキャッシュのバックエンドに使用する場合には、以下のよ"
"うに設定します。"

msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends.db."
"DatabaseCache``"
msgstr ""
":setting:`BACKEND <CACHES-BACKEND>` を ``django.core.cache.backends.db."
"DatabaseCache`` に設定する"

msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``tablename``, the name of the "
"database table. This name can be whatever you want, as long as it's a valid "
"table name that's not already being used in your database."
msgstr ""
":setting:`LOCATION <CACHES-LOCATION>` の ``tablename`` にデータベーステーブル"
"の名前を設定します。この名前は、データベースで未使用かつ有効な名前であれば、"
"自分が好きな名前で構いません。"

msgid "In this example, the cache table's name is ``my_cache_table``::"
msgstr ""
"この例では、キャッシュテーブルの名前を ``my_cache_table`` と設定しています。"

msgid ""
"Unlike other cache backends, the database cache does not support automatic "
"culling of expired entries at the database level. Instead, expired cache "
"entries are culled each time ``add()``, ``set()``, or ``touch()`` is called."
msgstr ""
"他のキャッシュバックエンドとは異なり、データベースキャッシュはデータベースレ"
"ベルでの期限切れエントリの自動間引き (culling) をサポートしていません。その代"
"わり、 ``add()`` や ``set()`` 、 ``touch()`` が呼び出されるたびに、期限切れの"
"キャッシュエントリが「間引き」されます。"

msgid "Creating the cache table"
msgstr "キャッシュテーブルを作成する"

msgid ""
"Before using the database cache, you must create the cache table with this "
"command:"
msgstr ""
"データベース キャッシュを使用する前に、次のコマンドでキャッシュテーブルを必ず"
"作成する必要があります。"

msgid ""
"This creates a table in your database that is in the proper format that "
"Django's database-cache system expects. The name of the table is taken from :"
"setting:`LOCATION <CACHES-LOCATION>`."
msgstr ""
"このコマンドにより、データベース内に1つのテーブルが作成され、Django のデータ"
"ベースキャッシュシステムに必要な適切なフォーマットが生成されます。テーブルの"
"名前は :setting:`LOCATION <CACHES-LOCATION>` が使用されます。"

msgid ""
"If you are using multiple database caches, :djadmin:`createcachetable` "
"creates one table for each cache."
msgstr ""
"複数のデータベースキャッシュが使用される場合、:djadmin:`createcachetable` は1"
"つのキャッシュごとに、対応する1つのテーブルを作成します。"

msgid ""
"If you are using multiple databases, :djadmin:`createcachetable` observes "
"the ``allow_migrate()`` method of your database routers (see below)."
msgstr ""
"複数のデータベースを使用する場合、:djadmin:`createcachetable` は、データベー"
"スのルートの ``allow_migrate()`` メソッド (以下を参照) を監視します。"

msgid ""
"Like :djadmin:`migrate`, :djadmin:`createcachetable` won't touch an existing "
"table. It will only create missing tables."
msgstr ""
":djadmin:`migrate` と同様に、:djadmin:`createcachetable` は既に存在する既存の"
"テーブルにたいしては手を触れません。存在しないテーブルのみを生成します。"

msgid ""
"To print the SQL that would be run, rather than run it, use the :option:"
"`createcachetable --dry-run` option."
msgstr ""
"実行される予定の SQL を実行せずに表示するためには、:option:`createcachetable "
"--dry-run` オプションを使用します。"

msgid "Multiple databases"
msgstr "複数のデータベース"

msgid ""
"If you use database caching with multiple databases, you'll also need to set "
"up routing instructions for your database cache table. For the purposes of "
"routing, the database cache table appears as a model named ``CacheEntry``, "
"in an application named ``django_cache``. This model won't appear in the "
"models cache, but the model details can be used for routing purposes."
msgstr ""
"複数のデータベースでデータベースキャッシュを使用する場合、データベースキャッ"
"シュテーブルのためにルーティングの指示も設定する必要があります。ルーティング"
"の目的で、データベースキャッシュテーブルは、``django_cache`` という名前のアプ"
"リケーションに ``CacheEntry`` という名前のモデルとして表示されます。このモデ"
"ルはモデルキャッシュには表示されませんが、ルーティングの目的でモデルの詳細情"
"報を使用できます。"

msgid ""
"For example, the following router would direct all cache read operations to "
"``cache_replica``, and all write operations to ``cache_primary``. The cache "
"table will only be synchronized onto ``cache_primary``::"
msgstr ""
"たとえば、以下のルーターはすべてのキャッシュの読み込み操作を "
"``cache_replica`` に転送し、すべての書き込み操作を ``cache_primary`` に転送し"
"ます。キャッシュテーブルは ``cache_primary`` にだけ同期されます。"

msgid ""
"If you don't specify routing directions for the database cache model, the "
"cache backend will use the ``default`` database."
msgstr ""
"データベースキャッシュモデルに対してルーティングの方向を指定しなかった場合、"
"キャッシュバックエンドは ``default`` データベースを使用します。"

msgid ""
"And if you don't use the database cache backend, you don't need to worry "
"about providing routing instructions for the database cache model."
msgstr ""
"そして、データベースキャッシュバックエンドを使用しなかった場合には、データ"
"ベースキャッシュモデルに対してデータベースルーティングの指示を提供することに"
"ついて心配する必要はありません。"

msgid "Filesystem caching"
msgstr "ファイルシステムのキャッシュ"

msgid ""
"The file-based backend serializes and stores each cache value as a separate "
"file. To use this backend set :setting:`BACKEND <CACHES-BACKEND>` to "
"``\"django.core.cache.backends.filebased.FileBasedCache\"`` and :setting:"
"`LOCATION <CACHES-LOCATION>` to a suitable directory. For example, to store "
"cached data in ``/var/tmp/django_cache``, use this setting::"
msgstr ""
"ファイルベースのバックエンドは、各キャッシュの値を独立したファイルとしてシリ"
"アライズして保存します。このバックエンドを使用するには、:setting:`BACKEND "
"<CACHES-BACKEND>` を ``\"django.core.cache.backends.filebased."
"FileBasedCache\"`` に設定して、:setting:`LOCATION <CACHES-LOCATION>` を適切な"
"ディレクトリに設定します。たとえば、キャッシュデータを ``/var/tmp/"
"django_cache`` に保存するには、次の設定を使ってください。"

msgid ""
"If you're on Windows, put the drive letter at the beginning of the path, "
"like this::"
msgstr "Windows では、次のようにドライブ文字をパスの最初に付けてください。"

msgid ""
"The directory path should be absolute -- that is, it should start at the "
"root of your filesystem. It doesn't matter whether you put a slash at the "
"end of the setting."
msgstr ""
"ディレクトリのパスは絶対パスである必要があります。つまり、ファイルシステムの"
"ルートから始まる必要があります。設定の最後にスラッシュを置くかどうかは関係あ"
"りません。"

msgid ""
"Make sure the directory pointed-to by this setting either exists and is "
"readable and writable, or that it can be created by the system user under "
"which your web server runs. Continuing the above example, if your server "
"runs as the user ``apache``, make sure the directory ``/var/tmp/"
"django_cache`` exists and is readable and writable by the user ``apache``, "
"or that it can be created by the user ``apache``."
msgstr ""
"この設定が指すディレクトリは、存在して読み込みと書き込みが可能であるか、また"
"は、ウェブサーバーを実行しているシステムユーザーによって作成可能であることを"
"確認してください。上の例を続けると、もしサーバーが ``apache`` ユーザーで実行"
"されているなら、``/var/tmp/django_cache`` が存在して ``apache`` ユーザーによ"
"り読み書き可能であるか、このディレクトリを ``apache`` ユーザーが作成できるこ"
"とを確認してください。"

msgid ""
"When the cache :setting:`LOCATION <CACHES-LOCATION>` is contained within :"
"setting:`MEDIA_ROOT`, :setting:`STATIC_ROOT`, or :setting:"
"`STATICFILES_FINDERS`, sensitive data may be exposed."
msgstr ""
"キャッシュの :setting:`LOCATION <CACHES-LOCATION>` が、:setting:"
"`MEDIA_ROOT`、:setting:`STATIC_ROOT`、:setting:`STATICFILES_FINDERS` のいずれ"
"かの配下に含まれていると、機密データが漏洩してしまう可能性があります。"

msgid ""
"An attacker who gains access to the cache file can not only falsify HTML "
"content, which your site will trust, but also remotely execute arbitrary "
"code, as the data is serialized using :mod:`pickle`."
msgstr ""
"キャッシュファイルへのアクセスを獲得した攻撃者は、HTML コンテンツを改竄できる"
"だけでなく、データが :mod:`pickle` を使用してシリアライズされているため、任意"
"のコードのリモート実行までできてしまいます。"

msgid ""
"Filesystem caching may become slow when storing a large number of files. If "
"you run into this problem, consider using a different caching mechanism. You "
"can also subclass :source:`FileBasedCache <django/core/cache/backends/"
"filebased.py>` and improve the culling strategy."
msgstr ""
"ファイルシステムキャッシュは、大量のファイルを保存すると低速になってしまう可"
"能性があります。この問題に遭遇したときは、別のキャッシュメカニズムの使用を検"
"討してください。:source:`FileBasedCache <django/core/cache/backends/"
"filebased.py>` をサブクラス化して、淘汰戦略を改善することもできます。"

msgid "Local-memory caching"
msgstr "ローカルメモリのキャッシュ"

msgid ""
"This is the default cache if another is not specified in your settings file. "
"If you want the speed advantages of in-memory caching but don't have the "
"capability of running Memcached, consider the local-memory cache backend. "
"This cache is per-process (see below) and thread-safe. To use it, set :"
"setting:`BACKEND <CACHES-BACKEND>` to ``\"django.core.cache.backends.locmem."
"LocMemCache\"``. For example::"
msgstr ""
"設定ファイルに他のキャッシュが指定されていない場合、これがデフォルトのキャッ"
"シュとなります。インメモリキャッシュの速度の利点が欲しいが、Memcached を扱う"
"のが難しい場合は、 ローカルメモリキャッシュバックエンドを検討してください。こ"
"のキャッシュはプロセス単位 (後述) で、スレッドセーフです。これを使うには、 :"
"setting:`BACKEND <CACHES-BACKEND>` を ``\"django.core.cache.backends.locmem."
"LocMemCache\"`` に設定します。たとえば"

msgid ""
"The cache :setting:`LOCATION <CACHES-LOCATION>` is used to identify "
"individual memory stores. If you only have one ``locmem`` cache, you can "
"omit the :setting:`LOCATION <CACHES-LOCATION>`; however, if you have more "
"than one local memory cache, you will need to assign a name to at least one "
"of them in order to keep them separate."
msgstr ""
"キャッシュの :setting:`LOCATION <CACHES-LOCATION>` は個々のメモリストアを識別"
"するために使用されます。もし ``locmem`` キャッシュが1つしかない場合は :"
"setting:`LOCATION <CACHES-LOCATION>` を省略できます。しかし、複数のローカルメ"
"モリーキャッシュがある場合は、それらを区別するために少なくとも1つに名前を割り"
"当てる必要があります。"

msgid "The cache uses a least-recently-used (LRU) culling strategy."
msgstr ""
"キャッシュは LRU (least-recently-used) 淘汰戦略 (culling strategy) を使用しま"
"す。"

msgid ""
"Note that each process will have its own private cache instance, which means "
"no cross-process caching is possible. This also means the local memory cache "
"isn't particularly memory-efficient, so it's probably not a good choice for "
"production environments. It's nice for development."
msgstr ""
"各プロセスはそれ自身のプライベートキャッシュインスタンスを持つことに注意して"
"ください。このことは、ローカル・メモリ・キャッシュが特にメモリ効率に優れてい"
"るわけではないことを意味します。そのため、おそらく本番環境には良い選択ではあ"
"りません。開発環境には適しています。"

msgid "Dummy caching (for development)"
msgstr "ダミーキャッシュ（開発用）"

msgid ""
"Finally, Django comes with a \"dummy\" cache that doesn't actually cache -- "
"it just implements the cache interface without doing anything."
msgstr ""
"最後に、 Django には実際にはキャッシュしない「ダミー」キャッシュが付属してい"
"ます。何もせずにキャッシュインターフェースを実装しているだけです。"

msgid ""
"This is useful if you have a production site that uses heavy-duty caching in "
"various places but a development/test environment where you don't want to "
"cache and don't want to have to change your code to special-case the latter. "
"To activate dummy caching, set :setting:`BACKEND <CACHES-BACKEND>` like so::"
msgstr ""
"これは、様々な場所で重量級のキャッシュを使用する本番サイトと、開発/テスト用"
"に、キャッシュを行わず、コード変更も最小限に留めたい環境がある場合に便利で"
"す。ダミーキャッシュをアクティブにするには、:setting:`BACKEND <CACHES-"
"BACKEND>` を以下のように設定します。"

msgid "Using a custom cache backend"
msgstr "独自のキャッシュバックエンドを使う"

msgid ""
"While Django includes support for a number of cache backends out-of-the-box, "
"sometimes you might want to use a customized cache backend. To use an "
"external cache backend with Django, use the Python import path as the :"
"setting:`BACKEND <CACHES-BACKEND>` of the :setting:`CACHES` setting, like "
"so::"
msgstr ""
"Django は「箱から出してすぐに」多くのキャッシュバックエンドをサポートしていま"
"すが、カスタマイズ したキャッシュバックエンドを使いたいこともあるでしょう。"
"Django で外部のキャッシュバックエンドを使用するには、下記のように、 :setting:"
"`CACHES` 設定の :setting:`BACKEND <CACHES-BACKEND>` に Python のインポートパ"
"スを使用します:"

msgid ""
"If you're building your own backend, you can use the standard cache backends "
"as reference implementations. You'll find the code in the :source:`django/"
"core/cache/backends/` directory of the Django source."
msgstr ""
"独自のバックエンドを構築する場合は、標準のキャッシュバックエンドをリファレン"
"ス実装として使うことができます。コードは Django ソースの :source:`django/"
"core/cache/backends/` ディレクトリにあります。"

msgid ""
"Note: Without a really compelling reason, such as a host that doesn't "
"support them, you should stick to the cache backends included with Django. "
"They've been well-tested and are well-documented."
msgstr ""
"注記：ホストがサポートしていないなど、やむを得ない理由がない限り、Django に付"
"属しているキャッシュバックエンドを使用するべきです。それらは十分にテストされ"
"ており、よくドキュメント化されています。"

msgid "Cache arguments"
msgstr "キャッシュ引数"

msgid ""
"Each cache backend can be given additional arguments to control caching "
"behavior. These arguments are provided as additional keys in the :setting:"
"`CACHES` setting. Valid arguments are as follows:"
msgstr ""
"それぞれのキャッシュバックエンドはキャッシュの動作を制御するために追加の引数"
"を指定できます。これらの引数は :setting:`CACHES` 設定の追加キーとして提供され"
"ます。有効な引数は以下の通りです:"

msgid ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to use "
"for the cache. This argument defaults to ``300`` seconds (5 minutes). You "
"can set ``TIMEOUT`` to ``None`` so that, by default, cache keys never "
"expire. A value of ``0`` causes keys to immediately expire (effectively "
"\"don't cache\")."
msgstr ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: キャッシュに使用するデフォルトのタイムア"
"ウトを秒単位で指定します。この引数のデフォルトは ``300`` 秒（5分）です。 "
"``TIMEOUT`` に ``None`` を指定することで、デフォルトではキャッシュキーの有効"
"期限が切れません。値を ``0`` にすると、キーはすぐに期限切れになります（事実"
"上 \"キャッシュしない\"）。"

msgid ""
":setting:`OPTIONS <CACHES-OPTIONS>`: Any options that should be passed to "
"the cache backend. The list of valid options will vary with each backend, "
"and cache backends backed by a third-party library will pass their options "
"directly to the underlying cache library."
msgstr ""
":setting:`OPTIONS <CACHES-OPTIONS>`: キャッシュバックエンドに渡すオプション。"
"有効なオプションのリストはバックエンドによって異なり、サードパーティライブラ"
"リにバックされたキャッシュバックエンドはそのオプションを直接キャッシュライブ"
"ラリに渡します。"

msgid ""
"Cache backends that implement their own culling strategy (i.e., the "
"``locmem``, ``filesystem`` and ``database`` backends) will honor the "
"following options:"
msgstr ""
"独自の淘汰戦略 (culling strategy) を実装しているキャッシュバックエンド "
"(``locmem``、``filesystem``、``database`` バックエンド) では、以下のオプショ"
"ンが有効です:"

msgid ""
"``MAX_ENTRIES``: The maximum number of entries allowed in the cache before "
"old values are deleted. This argument defaults to ``300``."
msgstr ""
"``MAX_ENTRIES``: 古い値が削除されるまでにキャッシュに保存できる最大エントリ"
"数。この引数のデフォルトは ``300`` です。"

msgid ""
"``CULL_FREQUENCY``: The fraction of entries that are culled when "
"``MAX_ENTRIES`` is reached. The actual ratio is ``1 / CULL_FREQUENCY``, so "
"set ``CULL_FREQUENCY`` to ``2`` to cull half the entries when "
"``MAX_ENTRIES`` is reached. This argument should be an integer and defaults "
"to ``3``."
msgstr ""
"``CULL_FREQUENCY``: ``MAX_ENTRIES`` に達したときに間引き (cull) されるエント"
"リの割合。実際の割合は ``1 / CULL_FREQUENCY`` なので、 ``CULL_FREQUENCY`` を "
"``2`` に設定すると、 ``MAX_ENTRIES`` に達したときにエントリの半分をカリングし"
"ます。この引数は整数で、デフォルトは ``3`` です。"

msgid ""
"A value of ``0`` for ``CULL_FREQUENCY`` means that the entire cache will be "
"dumped when ``MAX_ENTRIES`` is reached. On some backends (``database`` in "
"particular) this makes culling *much* faster at the expense of more cache "
"misses."
msgstr ""
"``CULL_FREQUENCY`` に ``0`` という値を指定すると、 ``MAX_ENTRIES`` に達したと"
"きにキャッシュ全体がダンプされます。一部のバックエンド (特に ``database``) で"
"は、キャッシュミスが増える代わりにカリング（間引き）が非常に速くなります。"

msgid ""
"The Memcached and Redis backends pass the contents of :setting:`OPTIONS "
"<CACHES-OPTIONS>` as keyword arguments to the client constructors, allowing "
"for more advanced control of client behavior. For example usage, see below."
msgstr ""
"Memcached と Redis のバックエンドは、クライアントの動作をより高度に制御できる"
"ように、クライアントのコンストラクタにキーワード引数として :setting:`OPTIONS "
"<CACHES-OPTIONS>` の内容を渡します。使用例は以下を参照してください。"

msgid ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: A string that will be "
"automatically included (prepended by default) to all cache keys used by the "
"Django server."
msgstr ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: Django サーバが使用する全ての"
"キャッシュキーに自動的に含まれる文字列です（デフォルトでは先頭に付加されま"
"す）。"

msgid ""
"See the :ref:`cache documentation <cache_key_prefixing>` for more "
"information."
msgstr ""
"詳細は :ref:`キャッシュのドキュメント <cache_key_prefixing>` を参照してくださ"
"い。"

msgid ""
":setting:`VERSION <CACHES-VERSION>`: The default version number for cache "
"keys generated by the Django server."
msgstr ""
":setting:`VERSION <CACHES-VERSION>`: Django サーバが生成するキャッシュキーの"
"デフォルトのバージョン番号。"

msgid ""
"See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""
"詳細は :ref:`キャッシュのドキュメント <cache_versioning>` を参照してくださ"
"い。"

msgid ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` A string containing a dotted "
"path to a function that defines how to compose a prefix, version and key "
"into a final cache key."
msgstr ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` プレフィックス、バージョン、お"
"よびキーを最終的なキャッシュ・キーに合成する方法を定義する関数へのドット区切"
"りパスを含む文字列。"

msgid ""
"See the :ref:`cache documentation <cache_key_transformation>` for more "
"information."
msgstr ""
"詳細は :ref:`キャッシュのドキュメント <cache_key_transformation>` を参照して"
"ください。"

msgid ""
"In this example, a filesystem backend is being configured with a timeout of "
"60 seconds, and a maximum capacity of 1000 items::"
msgstr ""
"この例では、ファイルシステム・バックエンドをタイムアウト60秒、最大容量1000ア"
"イテムで設定しています。"

msgid ""
"Here's an example configuration for a ``pylibmc`` based backend that enables "
"the binary protocol, SASL authentication, and the ``ketama`` behavior mode::"
msgstr ""
"以下は、``pylibmc`` ベースのバックエンドをバイナリプロトコル、SASL認証、およ"
"び ``ketama`` 挙動モードを有効に設定する例です。"

msgid ""
"Here's an example configuration for a ``pymemcache`` based backend that "
"enables client pooling (which may improve performance by keeping clients "
"connected), treats memcache/network errors as cache misses, and sets the "
"``TCP_NODELAY`` flag on the connection's socket::"
msgstr ""
"以下は ``pymemcache`` ベースのバックエンドの設定例です。クライアントのプーリ"
"ングを有効にし (クライアントの接続を維持することでパフォーマンスを向上させる"
"ことができます)、memcache/ネットワークのエラーをキャッシュミスとして扱い、接"
"続ソケットに ``TCP_NODELAY`` フラグを設定します。"

msgid ""
"Here's an example configuration for a ``redis`` based backend that selects "
"database ``10`` (by default Redis ships with 16 logical databases), "
"specifies a `parser class`_ (``redis.connection.HiredisParser`` will be used "
"by default if the ``hiredis-py`` package is installed), and sets a custom "
"`connection pool class`_ (``redis.ConnectionPool`` is used by default)::"
msgstr ""
"以下は、``redis`` ベースのバックエンドの設定例です。データベースに ``10`` を"
"選択し (デフォルトではRedisには16の論理データベースがあります) 、 `parser "
"class`_ を指定し (``hiredis-py`` パッケージがインストールされている場合、デ"
"フォルトで ``redis.connection.HiredisParser`` が使用されます)、およびカスタム"
"の `connection pool class`_ を設定しています (デフォルトでは ``redis."
"ConnectionPool`` が使用されます)。"

msgid "The per-site cache"
msgstr "サイトごとのキャッシュ"

msgid ""
"Once the cache is set up, the simplest way to use caching is to cache your "
"entire site. You'll need to add ``'django.middleware.cache."
"UpdateCacheMiddleware'`` and ``'django.middleware.cache."
"FetchFromCacheMiddleware'`` to your :setting:`MIDDLEWARE` setting, as in "
"this example::"
msgstr ""
"キャッシュを設定したら、キャッシュを使う最も簡単な方法はサイト全体をキャッ"
"シュすることです。この例のように、 ``'django.middleware.cache."
"UpdateCacheMiddleware'`` と ``'django.middleware.cache."
"FetchFromCacheMiddleware'`` を :setting:`MIDDLEWARE` 設定に追加する必要があり"
"ます:"

msgid ""
"No, that's not a typo: the \"update\" middleware must be first in the list, "
"and the \"fetch\" middleware must be last. The details are a bit obscure, "
"but see `Order of MIDDLEWARE`_ below if you'd like the full story."
msgstr ""
"いいえ、これは typo ではありません。\"update\" ミドルウェアはリストの最初"
"に、\"fetch\" ミドルウェアはリストの最後になければなりません。詳細は少し曖昧"
"ですが、全容を知りたい方は下記の `Order of MIDDLEWARE`_ を参照してください。"

msgid "Then, add the following required settings to your Django settings file:"
msgstr "次に、以下の必要な設定を Django 設定ファイルに追加します:"

msgid ""
":setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage."
msgstr ""
":setting:`CACHE_MIDDLEWARE_ALIAS` -- ストレージに使用するキャッシュのエイリア"
"ス。"

msgid ""
":setting:`CACHE_MIDDLEWARE_SECONDS` -- The integer number of seconds each "
"page should be cached."
msgstr ""
":setting:`CACHE_MIDDLEWARE_SECONDS` -- 各ページがキャッシュされるべき秒数を整"
"数で指定します。"

msgid ""
":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across "
"multiple sites using the same Django installation, set this to the name of "
"the site, or some other string that is unique to this Django instance, to "
"prevent key collisions. Use an empty string if you don't care."
msgstr ""
":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- キャッシュが同じ Django インストー"
"ルを使っている複数のサイトで共有され ている場合、キーの衝突を防ぐために、サイ"
"トの名前か、この Django インスタンスに固有な文字列を指定します。気にしないな"
"ら空文字列を使いましょう。"

msgid ""
"``FetchFromCacheMiddleware`` caches GET and HEAD responses with status 200, "
"where the request and response headers allow. Responses to requests for the "
"same URL with different query parameters are considered to be unique pages "
"and are cached separately. This middleware expects that a HEAD request is "
"answered with the same response headers as the corresponding GET request; in "
"which case it can return a cached GET response for HEAD request."
msgstr ""
"``FetchFromCacheMiddleware`` はリクエストヘッダとレスポンスヘッダが許す限り、"
"ステータス 200 の GET と HEAD レスポンスをキャッシュします。異なるクエリパラ"
"メータを持つ同じURLへのリクエストに対するレスポンスはユニークなページとみなさ"
"れ、別々にキャッシュされます。このミドルウェアは、HEADリクエストが、対応する"
"GETリクエストと同じレスポンスヘッダーで応答されることを期待します。その場合、"
"HEADリクエストに対してキャッシュされたGETレスポンスを返すことができます。"

msgid ""
"Additionally, ``UpdateCacheMiddleware`` automatically sets a few headers in "
"each :class:`~django.http.HttpResponse` which affect :ref:`downstream caches "
"<downstream-caches>`:"
msgstr ""
"さらに、``UpdateCacheMiddleware`` は :ref:`ダウンストリームキャッシュ "
"<downstream-caches>` に影響を与えるいくつかのヘッダを :class:`~django.http."
"HttpResponse` に自動的に設定します:"

msgid ""
"Sets the ``Expires`` header to the current date/time plus the defined :"
"setting:`CACHE_MIDDLEWARE_SECONDS`."
msgstr ""
"``Expires`` ヘッダーに現在の日時と定義された :setting:"
"`CACHE_MIDDLEWARE_SECONDS` をセットします。"

msgid ""
"Sets the ``Cache-Control`` header to give a max age for the page -- again, "
"from the :setting:`CACHE_MIDDLEWARE_SECONDS` setting."
msgstr ""
"``Cache-Control`` ヘッダにページの最大寿命をセットします -- ここでも :"
"setting:`CACHE_MIDDLEWARE_SECONDS` 設定を使用します。"

msgid "See :doc:`/topics/http/middleware` for more on middleware."
msgstr ""
"ミドルウェアについては :doc:`/topics/http/middleware` を参照してください。"

msgid ""
"If a view sets its own cache expiry time (i.e. it has a ``max-age`` section "
"in its ``Cache-Control`` header) then the page will be cached until the "
"expiry time, rather than :setting:`CACHE_MIDDLEWARE_SECONDS`. Using the "
"decorators in ``django.views.decorators.cache`` you can easily set a view's "
"expiry time (using the :func:`~django.views.decorators.cache.cache_control` "
"decorator) or disable caching for a view (using the :func:`~django.views."
"decorators.cache.never_cache` decorator). See the `using other headers`__ "
"section for more on these decorators."
msgstr ""
"ビューがキャッシュの有効期限を設定している場合 (つまり、ヘッダの ``Cache-"
"Control`` に ``max-age`` セクションがある場合) は、 :setting:"
"`CACHE_MIDDLEWARE_SECONDS` ではなく、有効期限までページがキャッシュされます。"
"``django.views.decorators.cache`` のデコレータを使用すると、ビューの有効期限"
"を簡単に設定 (:func:`~django.views.decorators.cache.cache_control` デコレータ"
"を使用) したり、ビューのキャッシュを無効にしたり (:func:`~django.views."
"decorators.cache.never_cache` デコレータを使用) することができます。これらの"
"デコレータについての詳細は、 `他のヘッダを使用する`__ セクションを参照してく"
"ださい。"

msgid ""
"If :setting:`USE_I18N` is set to ``True`` then the generated cache key will "
"include the name of the active :term:`language<language code>` -- see also :"
"ref:`how-django-discovers-language-preference`). This allows you to easily "
"cache multilingual sites without having to create the cache key yourself."
msgstr ""
":setting:`USE_I18N` が ``True`` に設定されている場合、生成されたキャッシュ"
"キーにアクティブな :term:`言語<language code>` の名前が含まれるようになりま"
"す。 :ref:`how-django-discovers-language-preference` も参照してください。これ"
"により、自分でキャッシュキーを作成する必要なく、複数言語のサイトを簡単に"
"キャッシュできるようになります。"

msgid ""
"Cache keys also include the :ref:`current time zone <default-current-time-"
"zone>` when :setting:`USE_TZ` is set to ``True``."
msgstr ""
":setting:`USE_TZ` が ``True`` に設定されている場合、キャッシュキーには :ref:`"
"カレントタイムゾーン <default-current-time-zone>` も含まれます。"

msgid "The per-view cache"
msgstr "ビューごとのキャッシュ"

msgid ""
"A more granular way to use the caching framework is by caching the output of "
"individual views. ``django.views.decorators.cache`` defines a ``cache_page`` "
"decorator that will automatically cache the view's response for you::"
msgstr ""
"キャッシュフレームワークをより細かい単位で使用するには、個別のビューの出力を"
"キャッシュする方法があります。``django.views.decorators.cache`` は "
"``cache_page`` デコレーターを定義しており、これを使うとビューのレスポンスが自"
"動的にキャッシュされるようになります。"

msgid ""
"``cache_page`` takes a single argument: the cache timeout, in seconds. In "
"the above example, the result of the ``my_view()`` view will be cached for "
"15 minutes. (Note that we've written it as ``60 * 15`` for the purpose of "
"readability. ``60 * 15`` will be evaluated to ``900`` -- that is, 15 minutes "
"multiplied by 60 seconds per minute.)"
msgstr ""
"``cache_page`` はキャッシュのタイムアウトを秒数で指定する1つの引数を取りま"
"す。上の例では、``my_view()``  ビューの結果が15分間キャッシュされます。(ここ"
"でリーダビリティのために ``60 * 15`` と書いていることに注意してください。"
"``60 * 15`` は ``900`` つまり15分×60秒と評価されます。)"

msgid ""
"The cache timeout set by ``cache_page`` takes precedence over the ``max-"
"age`` directive from the ``Cache-Control`` header."
msgstr ""
"``cache_page`` で設定されたキャッシュのタイムアウトは、``Cache-Control`` ヘッ"
"ダの ``max-age`` ディレクティブよりも優先されます。"

msgid ""
"The per-view cache, like the per-site cache, is keyed off of the URL. If "
"multiple URLs point at the same view, each URL will be cached separately. "
"Continuing the ``my_view`` example, if your URLconf looks like this::"
msgstr ""
"サイトごとのキャッシュと同様に、ビューごとのキャッシュは URL でキーが区別され"
"ます。もし複数の URL が同じビューを指した場合、各 URL が別にキャッシュされま"
"す。``my_view`` の例を続けて、URLconf が次のようになっているとします。"

msgid ""
"then requests to ``/foo/1/`` and ``/foo/23/`` will be cached separately, as "
"you may expect. But once a particular URL (e.g., ``/foo/23/``) has been "
"requested, subsequent requests to that URL will use the cache."
msgstr ""
"このとき、``/foo/1/`` と ``/foo/23/`` へのリクエストは別々にキャッシュされま"
"す。しかし、特定の URL (たとえば、``/foo/23/``) が一度リクエストされると、そ"
"の URL への続くリクエストにはキャッシュが使われます。"

msgid ""
"``cache_page`` can also take an optional keyword argument, ``cache``, which "
"directs the decorator to use a specific cache (from your :setting:`CACHES` "
"setting) when caching view results. By default, the ``default`` cache will "
"be used, but you can specify any cache you want::"
msgstr ""
"``cache_page`` はオプション引数の ``cache`` を取ることもできます。これを使う"
"と、ビューの結果をキャッシュするときに、デコレータに (:setting:`CACHES` 設定"
"から) 特定のキャッシュを使うように指示できます。デフォルトでは、``default`` "
"キャッシュが使われますが、使いたいキャッシュはどれでも指定できます。"

msgid ""
"You can also override the cache prefix on a per-view basis. ``cache_page`` "
"takes an optional keyword argument, ``key_prefix``, which works in the same "
"way as the :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the "
"middleware.  It can be used like this::"
msgstr ""
"また、ビューごとにキャッシュプレフィックスを上書きすることもできます。 "
"``cache_page`` はオプションのキーワード引数 ``key_prefix`` を取ります。これは"
"ミドルウェアの :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` 設定と同じように動作し"
"ます。 次のように使用します:"

msgid ""
"The ``key_prefix`` and ``cache`` arguments may be specified together. The "
"``key_prefix`` argument and the :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` "
"specified under :setting:`CACHES` will be concatenated."
msgstr ""
"``key_prefix`` 引数と ``cache`` 引数は同時に指定できます。 ``key_prefix`` 引"
"数と :setting:`CACHES` で指定した :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` "
"は連結されます。"

msgid ""
"Additionally, ``cache_page`` automatically sets ``Cache-Control`` and "
"``Expires`` headers in the response which affect :ref:`downstream caches "
"<downstream-caches>`."
msgstr ""
"さらに、 ``cache_page`` は自動的にレスポンスに ``Cache-Control`` と "
"``Expires`` ヘッダを設定します。このヘッダは :ref:`ダウンストリームキャッ"
"シュ <downstream-caches>` に影響を与えます。"

msgid "Specifying per-view cache in the URLconf"
msgstr "ビューごとのキャッシュを URLconf で指定する"

msgid ""
"The examples in the previous section have hard-coded the fact that the view "
"is cached, because ``cache_page`` alters the ``my_view`` function in place. "
"This approach couples your view to the cache system, which is not ideal for "
"several reasons. For instance, you might want to reuse the view functions on "
"another, cache-less site, or you might want to distribute the views to "
"people who might want to use them without being cached. The solution to "
"these problems is to specify the per-view cache in the URLconf rather than "
"next to the view functions themselves."
msgstr ""
"前のセクションの例では、 ``cache_page`` が ``my_view`` 関数を変更するため、"
"ビューがキャッシュされることをハードコードしていました。この方法では、ビュー"
"をキャッシュシステムに結合することになり、いくつかの理由から理想的ではありま"
"せん。例えば、キャッシュのない別のサイトでビュー関数を再利用したい場合や、"
"キャッシュされずにビューを使いたい人にビューを配布したい場合などです。このよ"
"うな問題の解決策は、ビュー関数そのものではなく URLconf でビューごとのキャッ"
"シュを指定することです。"

msgid ""
"You can do so by wrapping the view function with ``cache_page`` when you "
"refer to it in the URLconf. Here's the old URLconf from earlier::"
msgstr ""
"URLconf でビュー関数を参照するときに ``cache_page`` でラップすることで、これ"
"を実現できます。以下は以前の古い URLconf です。"

msgid "Here's the same thing, with ``my_view`` wrapped in ``cache_page``::"
msgstr "以下は ``my_view`` を ``cache_page`` でラップしたものです。"

msgid "Template fragment caching"
msgstr "テンプレートフラグメントのキャッシュ"

msgid ""
"If you're after even more control, you can also cache template fragments "
"using the ``cache`` template tag. To give your template access to this tag, "
"put ``{% load cache %}`` near the top of your template."
msgstr ""
"さらにコントロールしたい場合は、 ``cache`` テンプレートタグを使ってテンプレー"
"トの断片をキャッシュすることもできます。テンプレートからこのタグにアクセスす"
"るには、テンプレートの先頭付近に ``{% load cache %}`` を記述します。"

msgid ""
"The ``{% cache %}`` template tag caches the contents of the block for a "
"given amount of time. It takes at least two arguments: the cache timeout, in "
"seconds, and the name to give the cache fragment. The fragment is cached "
"forever if timeout is ``None``. The name will be taken as is, do not use a "
"variable. For example:"
msgstr ""
"テンプレートタグ ``{% cache %}`` は指定した時間だけブロックの内容をキャッシュ"
"します。少なくとも2つの引数を取ります。秒単位のキャッシュタイムアウトと、"
"キャッシュフラグメントに与える名前です。timeout が ``None`` の場合、フラグメ"
"ントは永遠にキャッシュされます。名前はそのまま使用されるので、変数は使えませ"
"ん。次に例を示します。"

msgid ""
"Sometimes you might want to cache multiple copies of a fragment depending on "
"some dynamic data that appears inside the fragment. For example, you might "
"want a separate cached copy of the sidebar used in the previous example for "
"every user of your site. Do this by passing one or more additional "
"arguments, which may be variables with or without filters, to the ``{% cache "
"%}`` template tag to uniquely identify the cache fragment:"
msgstr ""
"フラグメントの内部に現れる動的なデータに応じて、フラグメントの複数のコピーを"
"キャッシュしたい場合があります。たとえば、先ほどの例で使用したサイドバーを、"
"サイトのすべてのユーザーに対して個別にキャッシュしたいとします。これを行うに"
"は、キャッシュフラグメントを一意に識別するために、フィルタの有無にかかわら"
"ず、1つ以上の追加の引数を ``{% cache %}`` テンプレートタグに渡します。"

msgid ""
"If :setting:`USE_I18N` is set to ``True`` the per-site middleware cache "
"will :ref:`respect the active language<i18n-cache-key>`. For the ``cache`` "
"template tag you could use one of the :ref:`translation-specific "
"variables<template-translation-vars>` available in templates to achieve the "
"same result:"
msgstr ""
":setting:`USE_I18N` が ``True`` に設定されている場合、サイトごとのミドルウェ"
"アキャッシュは :ref:`アクティブな言語 <i18n-cache-key>` を尊重します。テンプ"
"レートタグの ``cache`` では :ref:`翻訳固有の変数 <template-translation-"
"vars>` を使えば同じ結果が得られます:"

msgid ""
"The cache timeout can be a template variable, as long as the template "
"variable resolves to an integer value. For example, if the template variable "
"``my_timeout`` is set to the value ``600``, then the following two examples "
"are equivalent:"
msgstr ""
"テンプレート変数が整数値に解決されるなら、キャッシュタイムアウトにはテンプ"
"レート変数が使えます。例えば、テンプレート変数 ``my_timeout`` が値 ``600`` に"
"指定されている場合、以下の2つの例は等価です:"

msgid ""
"This feature is useful in avoiding repetition in templates. You can set the "
"timeout in a variable, in one place, and reuse that value."
msgstr ""
"この機能はテンプレート内での繰り返しを避けるのに便利です。1つの変数にタイムア"
"ウトを指定し、その値を再利用できます。"

msgid ""
"By default, the cache tag will try to use the cache called "
"\"template_fragments\". If no such cache exists, it will fall back to using "
"the default cache. You may select an alternate cache backend to use with the "
"``using`` keyword argument, which must be the last argument to the tag."
msgstr ""
"デフォルトでは、キャッシュタグは \"template_fragments\" というキャッシュを使"
"用しようとします。そのようなキャッシュが存在しない場合は、デフォルトのキャッ"
"シュを使用します。キーワード引数 ``using`` で、使用する別のキャッシュバックエ"
"ンドを選択できます。"

msgid ""
"It is considered an error to specify a cache name that is not configured."
msgstr "設定されていないキャッシュ名を指定することはエラーとみなされます。"

msgid ""
"If you want to obtain the cache key used for a cached fragment, you can use "
"``make_template_fragment_key``. ``fragment_name`` is the same as second "
"argument to the ``cache`` template tag; ``vary_on`` is a list of all "
"additional arguments passed to the tag. This function can be useful for "
"invalidating or overwriting a cached item, for example:"
msgstr ""
"キャッシュされたフラグメントに使用されるキャッシュキーを取得したい場合は、 "
"``make_template_fragment_key`` を使用します。フラグメント名 "
"``fragment_name`` は ``cache`` テンプレートタグの2番目の引数と同じです。この"
"関数は、キャッシュされたアイテムを無効にしたり上書きしたりする場合などに便利"
"です:"

msgid "The low-level cache API"
msgstr "低レベルキャッシュ API"

msgid ""
"Sometimes, caching an entire rendered page doesn't gain you very much and "
"is, in fact, inconvenient overkill."
msgstr ""
"レンダリングされたページ全体をキャッシュしてもあまりメリットがないこともあり"
"ますし、実際、過剰なキャッシュはかえって不便です。"

msgid ""
"Perhaps, for instance, your site includes a view whose results depend on "
"several expensive queries, the results of which change at different "
"intervals. In this case, it would not be ideal to use the full-page caching "
"that the per-site or per-view cache strategies offer, because you wouldn't "
"want to cache the entire result (since some of the data changes often), but "
"you'd still want to cache the results that rarely change."
msgstr ""
"たとえば、あなたのサイトには、結果が複数の高コストなクエリに依存し、その結果"
"が異なる間隔で変化するビューが含まれているとします。この場合、サイト単位や"
"ビュー単位のキャッシュ戦略が提供するフルページキャッシュを使うのは理想的では"
"ありません。なぜなら、結果全体をキャッシュしたいとは思わないでしょうが(データ"
"の一部が頻繁に変更されるからです)、めったに変更されない結果はキャッシュしたい"
"からです。"

msgid ""
"For cases like this, Django exposes a low-level cache API. You can use this "
"API to store objects in the cache with any level of granularity you like.  "
"You can cache any Python object that can be pickled safely: strings, "
"dictionaries, lists of model objects, and so forth. (Most common Python "
"objects can be pickled; refer to the Python documentation for more "
"information about pickling.)"
msgstr ""
"このような場合のために、 Django は低レベルのキャッシュ API を公開しています。"
"この API を使えば、好きなレベルでオブジェクトをキャッシュに保存できます。 安"
"全に pickle 化できる Python オブジェクトなら何でもキャッシュできます: 文字"
"列、辞書、モデルオブジェクトのリストなど。(ほとんどの一般的なPythonオブジェク"
"トはpickle化できます。pickle化についての詳細はPythonのドキュメントを参照して"
"ください)。"

msgid "Accessing the cache"
msgstr "キャッシュへのアクセス"

msgid ""
"You can access the caches configured in the :setting:`CACHES` setting "
"through a dict-like object: ``django.core.cache.caches``. Repeated requests "
"for the same alias in the same thread will return the same object."
msgstr ""
":setting:`CACHES` 設定で設定したキャッシュには、 ``django.core.cache."
"caches`` という Dict のようなオブジェクトでアクセスできます。同じスレッドで同"
"じエイリアスを繰り返しリクエストすると、同じオブジェクトが返されます。"

msgid ""
"If the named key does not exist, ``InvalidCacheBackendError`` will be raised."
msgstr ""
"指定したキーが存在しない場合、 ``InvalidCacheBackendError`` が発生します。"

msgid ""
"To provide thread-safety, a different instance of the cache backend will be "
"returned for each thread."
msgstr ""
"スレッドセーフを実現するために、キャッシュバックエンドの異なるインスタンスが"
"スレッドごとに返されます。"

msgid ""
"As a shortcut, the default cache is available as ``django.core.cache.cache``:"
msgstr ""
"ショートカットとして、デフォルトのキャッシュは ``django.core.cache.cache`` で"
"利用できます:"

msgid "This object is equivalent to ``caches['default']``."
msgstr "このオブジェクトは ``caches['default']`` と等価です。"

msgid "Basic usage"
msgstr "基本的な使用法"

msgid "The basic interface is:"
msgstr "基本的なインターフェイスは、次のようになります。"

msgid ""
"``key`` should be a ``str``, and ``value`` can be any picklable Python "
"object."
msgstr ""
"``key`` には ``str`` を指定し、 ``value`` には任意の Python オブジェクトを指"
"定します。"

msgid ""
"The ``timeout`` argument is optional and defaults to the ``timeout`` "
"argument of the appropriate backend in the :setting:`CACHES` setting "
"(explained above). It's the number of seconds the value should be stored in "
"the cache. Passing in ``None`` for ``timeout`` will cache the value forever. "
"A ``timeout`` of ``0`` won't cache the value."
msgstr ""
"引数の ``timeout`` はオプションで、デフォルトは :setting:`CACHES` 設定 (上記"
"で説明) にある適切なバックエンドの ``timeout`` 引数です。これはキャッシュに保"
"存される秒数です。 ``timeout`` に ``None`` を渡すと、値は永遠にキャッシュされ"
"ます。 ``timeout`` に ``0`` を渡すと、値はキャッシュされません。"

msgid ""
"If the object doesn't exist in the cache, ``cache.get()`` returns ``None``:"
msgstr ""
"オブジェクトがキャッシュに存在しない場合、 ``cache.get()`` は ``None`` を返し"
"ます:"

msgid ""
"If you need to determine whether the object exists in the cache and you have "
"stored a literal value ``None``, use a sentinel object as the default:"
msgstr ""
"オブジェクトがキャッシュに存在するかどうかを判断する必要があり、リテラル値 "
"``None`` を保存した場合は、デフォルトとして sentinel オブジェクトを使用しま"
"す:"

msgid ""
"``cache.get()`` can take a ``default`` argument. This specifies which value "
"to return if the object doesn't exist in the cache:"
msgstr ""
"``cache.get()`` は ``default`` 引数を取ることができます。これは、オブジェクト"
"がキャッシュに存在しない場合に返す値を指定します:"

msgid ""
"To add a key only if it doesn't already exist, use the ``add()`` method. It "
"takes the same parameters as ``set()``, but it will not attempt to update "
"the cache if the key specified is already present:"
msgstr ""
"キーがまだ存在しない場合にのみキーを追加するには、 ``add()`` メソッドを使用し"
"ます。このメソッドは ``set()`` と同じパラメータを受け取りますが、指定したキー"
"がすでに存在する場合はキャッシュを更新しようとしません:"

msgid ""
"If you need to know whether ``add()`` stored a value in the cache, you can "
"check the return value. It will return ``True`` if the value was stored, "
"``False`` otherwise."
msgstr ""
"もし ``add()`` が値をキャッシュに保存したかどうかを知りたい場合は、戻り値を"
"チェックできます。値が保存されていれば ``True`` を返し、そうでなければ "
"``False`` を返します。"

msgid ""
"If you want to get a key's value or set a value if the key isn't in the "
"cache, there is the ``get_or_set()`` method. It takes the same parameters as "
"``get()`` but the default is set as the new cache value for that key, rather "
"than returned:"
msgstr ""
"キーの値を取得したり、そのキーがキャッシュにない場合に値を設定したい場合は、 "
"``get_or_set()`` メソッドが使えます。これは ``get()`` と同じパラメータを受け"
"取りますが、そのキーのデフォルトの戻り値が設定されます:"

msgid "You can also pass any callable as a *default* value:"
msgstr ""
"また、任意の呼び出し可能オブジェクトを *デフォルト* 値として渡すこともできま"
"す:"

msgid ""
"There's also a ``get_many()`` interface that only hits the cache once. "
"``get_many()`` returns a dictionary with all the keys you asked for that "
"actually exist in the cache (and haven't expired):"
msgstr ""
"一度だけキャッシュをヒットする ``get_many()`` インターフェースもあります。 "
"``get_many()`` は、キャッシュに実際に存在する (そして有効期限が切れていない) "
"キーをすべて含む辞書を返します:"

msgid ""
"To set multiple values more efficiently, use ``set_many()`` to pass a "
"dictionary of key-value pairs:"
msgstr ""
"より効率的に複数の値を指定するには、 ``set_many()`` を使用してキーと値のペア"
"の辞書を渡します:"

msgid ""
"Like ``cache.set()``, ``set_many()`` takes an optional ``timeout`` parameter."
msgstr ""
"``cache.set()`` と同様に、 ``set_many()`` はオプションの ``timeout`` パラメー"
"タを受け取ります。"

msgid ""
"On supported backends (memcached), ``set_many()`` returns a list of keys "
"that failed to be inserted."
msgstr ""
"サポートされているバックエンド (memcached) では、 ``set_many()`` は挿入に失敗"
"したキーのリストを返します。"

msgid ""
"You can delete keys explicitly with ``delete()`` to clear the cache for a "
"particular object:"
msgstr ""
"``delete()`` で明示的にキーを削除することで、特定のオブジェクトのキャッシュを"
"クリアできます:"

msgid ""
"``delete()`` returns ``True`` if the key was successfully deleted, ``False`` "
"otherwise."
msgstr ""
"``delete()`` はキーの削除に成功すると ``True`` を返し、失敗すると ``False`` "
"を返します。"

msgid ""
"If you want to clear a bunch of keys at once, ``delete_many()`` can take a "
"list of keys to be cleared:"
msgstr ""
"一度にたくさんのキーをクリアしたい場合は、 ``delete_many()`` にクリアしたい"
"キーのリストを渡します:"

msgid ""
"Finally, if you want to delete all the keys in the cache, use ``cache."
"clear()``.  Be careful with this; ``clear()`` will remove *everything* from "
"the cache, not just the keys set by your application. :"
msgstr ""
"最後に、キャッシュ内のすべてのキーを削除したい場合は ``cache.clear()`` を使用"
"します。 ``clear()`` はアプリケーションによって設定されたキーだけでなく、 *す"
"べての* キーをキャッシュから削除します:"

msgid ""
"``cache.touch()`` sets a new expiration for a key. For example, to update a "
"key to expire 10 seconds from now:"
msgstr ""
"``cache.touch()`` はキーの有効期限を設定します。例えば、キーの有効期限を10秒"
"後に更新する場合:"

msgid ""
"Like other methods, the ``timeout`` argument is optional and defaults to the "
"``TIMEOUT`` option of the appropriate backend in the :setting:`CACHES` "
"setting."
msgstr ""
"他のメソッドと同様に、 ``timeout`` 引数はオプションで、デフォルトは :setting:"
"`CACHES` 設定の適切なバックエンドの ``TIMEOUT`` オプションです。"

msgid ""
"``touch()`` returns ``True`` if the key was successfully touched, ``False`` "
"otherwise."
msgstr ""
"``touch()`` はキーが正しく touch された場合は ``True`` を返し、そうでない場合"
"は ``False`` を返します。"

msgid ""
"You can also increment or decrement a key that already exists using the "
"``incr()`` or ``decr()`` methods, respectively. By default, the existing "
"cache value will be incremented or decremented by 1. Other increment/"
"decrement values can be specified by providing an argument to the increment/"
"decrement call. A ValueError will be raised if you attempt to increment or "
"decrement a nonexistent cache key:"
msgstr ""
"``incr()`` メソッドまたは ``decr()`` メソッドを使用して、既に存在するキーをイ"
"ンクリメント/デクリメントすることもできます。デフォルトでは、既存のキャッシュ"
"の値が 1 だけインクリメント/デクリメントされます。インクリメント/デクリメント"
"の呼び出しに引数を指定することで、1以外のインクリメント/デクリメント値を指定"
"できます。存在しないキャッシュ・キーをインクリメントまたはデクリメントしよう"
"とすると、ValueError が発生します:"

msgid ""
"``incr()``/``decr()`` methods are not guaranteed to be atomic. On those "
"backends that support atomic increment/decrement (most notably, the "
"memcached backend), increment and decrement operations will be atomic. "
"However, if the backend doesn't natively provide an increment/decrement "
"operation, it will be implemented using a two-step retrieve/update."
msgstr ""
"``incr()``/``decr()`` メソッドはアトミックであることは保証されていません。ア"
"トミックなインクリメント/デクリメントをサポートしているバックエンド (特に "
"memcached バックエンド) では、インクリメントとデクリメントの操作はアトミック"
"に行われます。しかし、バックエンドがネイティブにインクリメント/デクリメント操"
"作を提供していない場合は、取得/更新の2段階を使って実装されます。"

msgid ""
"You can close the connection to your cache with ``close()`` if implemented "
"by the cache backend."
msgstr ""
"キャッシュバックエンドに実装されていれば、 ``close()`` でキャッシュへの接続を"
"閉じることができます。"

msgid "For caches that don't implement ``close`` methods it is a no-op."
msgstr ""
"``close`` メソッドを実装していないキャッシュでは、このメソッドは何もしませ"
"ん。"

msgid ""
"The async variants of base methods are prefixed with ``a``, e.g. ``cache."
"aadd()`` or ``cache.adelete_many()``. See `Asynchronous support`_ for more "
"details."
msgstr ""
"メソッドの非同期バージョンは、ベースとなるメソッドに ``a`` で始まるプレフィッ"
"クスが付けられています。例えば、 ``cache.aadd()`` や ``cache."
"adelete_many()`` です。詳細については `Asynchronous support`_ を参照してくだ"
"さい。"

msgid "Cache key prefixing"
msgstr "キャッシュ キーにプレフィックスを付ける"

msgid ""
"If you are sharing a cache instance between servers, or between your "
"production and development environments, it's possible for data cached by "
"one server to be used by another server. If the format of cached data is "
"different between servers, this can lead to some very hard to diagnose "
"problems."
msgstr ""
"サーバ間でキャッシュインスタンスを共有している場合、あるいは本番環境と開発環"
"境の間でキャッシュインスタンスを共有している場合、あるサーバでキャッシュされ"
"たデータが別のサーバで使用される可能性があります。キャッシュされたデータの"
"フォーマットがサーバ間で異なる場合、非常に診断が難しい問題につながる可能性が"
"あります。"

msgid ""
"To prevent this, Django provides the ability to prefix all cache keys used "
"by a server. When a particular cache key is saved or retrieved, Django will "
"automatically prefix the cache key with the value of the :setting:"
"`KEY_PREFIX <CACHES-KEY_PREFIX>` cache setting."
msgstr ""
"これを防ぐために、 Django はサーバが使う全てのキャッシュキーの前にプレフィッ"
"クスを付ける機能を提供します。特定のキャッシュキーが保存または取得されると、 "
"Django は自動的に :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` キャッシュ設定の"
"値をキャッシュキーの先頭に付加します。"

msgid ""
"By ensuring each Django instance has a different :setting:`KEY_PREFIX "
"<CACHES-KEY_PREFIX>`, you can ensure that there will be no collisions in "
"cache values."
msgstr ""
"各 Django インスタンスに異なる :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` を持"
"たせることで、キャッシュ値が衝突しないようにできます。"

msgid "Cache versioning"
msgstr "キャッシュのバージョン管理"

msgid ""
"When you change running code that uses cached values, you may need to purge "
"any existing cached values. The easiest way to do this is to flush the "
"entire cache, but this can lead to the loss of cache values that are still "
"valid and useful."
msgstr ""
"キャッシュされた値を使用する実行中のコードを変更する場合、既存のキャッシュさ"
"れた値を消去する必要があるかもしれません。これを行う最も簡単な方法はキャッ"
"シュ全体を削除することですが、まだ有効で有用なキャッシュ値を失うことになりま"
"す。"

msgid ""
"Django provides a better way to target individual cache values. Django's "
"cache framework has a system-wide version identifier, specified using the :"
"setting:`VERSION <CACHES-VERSION>` cache setting. The value of this setting "
"is automatically combined with the cache prefix and the user-provided cache "
"key to obtain the final cache key."
msgstr ""
"Django は個々のキャッシュ値をターゲットにする、より良い方法を提供します。"
"Django のキャッシュフレームワークには、 :setting:`VERSION <CACHES-VERSION>` "
"キャッシュ設定で指定できる、システム全体のバージョン識別子があります。この設"
"定の値は、自動的にキャッシュ・プレフィックスとユーザが指定したキャッシュ・"
"キーと組み合わされ、最終的なキャッシュ・キーが得られます。"

msgid ""
"By default, any key request will automatically include the site default "
"cache key version. However, the primitive cache functions all include a "
"``version`` argument, so you can specify a particular cache key version to "
"set or get. For example:"
msgstr ""
"デフォルトでは、どのようなキャッシュキーのリクエストも自動的にサイトのデフォ"
"ルトのキャッシュキーのバージョンを含みます。しかし、基本的なキャッシュ関数に"
"は ``version`` 引数が含まれているので、特定のキャッシュキーのバージョンを指定"
"できます。たとえば:"

msgid ""
"The version of a specific key can be incremented and decremented using the "
"``incr_version()`` and ``decr_version()`` methods. This enables specific "
"keys to be bumped to a new version, leaving other keys unaffected. "
"Continuing our previous example:"
msgstr ""
"特定のキーのバージョンは ``incr_version()`` メソッドと ``decr_version()`` メ"
"ソッドで増減できます。これにより、特定のキーのバージョンを新しいものに変更で"
"きます。先ほどの例の続きで、下記のようにします:"

msgid "Cache key transformation"
msgstr "キャッシュキーの変換"

msgid ""
"As described in the previous two sections, the cache key provided by a user "
"is not used verbatim -- it is combined with the cache prefix and key version "
"to provide a final cache key. By default, the three parts are joined using "
"colons to produce a final string::"
msgstr ""
"前の2つのセクションで説明したように、ユーザから提供されたキャッシュ・キーはそ"
"のまま使用されるわけではありません。このキーは、キャッシュ・プレフィックスお"
"よびキーバージョンと組み合わされて最終的なキャッシュ・キーとなります。デフォ"
"ルトでは、3 つの部分はコロンで結合されて最終的な文字列となります:"

msgid ""
"If you want to combine the parts in different ways, or apply other "
"processing to the final key (e.g., taking a hash digest of the key parts), "
"you can provide a custom key function."
msgstr ""
"各部分をさまざまな方法で組み合わせたり、最終的なキーに他の処理を施したりした"
"い場合は（例えば、キーの部品のハッシュダイジェストを取るなど）、独自のキー関"
"数を作成できます。"

msgid ""
"The :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` cache setting specifies a "
"dotted-path to a function matching the prototype of ``make_key()`` above. If "
"provided, this custom key function will be used instead of the default key "
"combining function."
msgstr ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` キャッシュ設定では、上記の "
"``make_key()`` のプロトタイプにマッチする関数へのドット区切りパスを指定しま"
"す。指定された場合、デフォルトのキー結合関数の代わりにこのカスタムキー関数が"
"使用されます。"

msgid "Cache key warnings"
msgstr "キャッシュキーの警告"

msgid ""
"Memcached, the most commonly-used production cache backend, does not allow "
"cache keys longer than 250 characters or containing whitespace or control "
"characters, and using such keys will cause an exception. To encourage cache-"
"portable code and minimize unpleasant surprises, the other built-in cache "
"backends issue a warning (``django.core.cache.backends.base."
"CacheKeyWarning``) if a key is used that would cause an error on memcached."
msgstr ""
"最も一般的に使用されているキャッシュバックエンドである Memcached は、 250 文"
"字より長いキャッシュキーや、空白文字や制御文字を含むキャッシュキーを許可して"
"おらず、そのようなキーを使用すると例外が発生します。キャッシュ移植可能なコー"
"ドを推奨し、不快な驚きを最小化するために、他の組み込みキャッシュバックエンド"
"は、 memcached でエラーを引き起こすようなキーが使用された場合、警告 "
"(``django.core.cache.backends.base.CacheKeyWarning``) を出します。"

msgid ""
"If you are using a production backend that can accept a wider range of keys "
"(a custom backend, or one of the non-memcached built-in backends), and want "
"to use this wider range without warnings, you can silence "
"``CacheKeyWarning`` with this code in the ``management`` module of one of "
"your :setting:`INSTALLED_APPS`::"
msgstr ""
"より広い範囲のキーを使用できるバックエンド (カスタムバックエンド、または非"
"emcachedの組み込みバックエンド) を使用していて、警告を出さずにより広い範囲の"
"キーを使用したい場合は、 :setting:`INSTALLED_APPS` の ``management`` モジュー"
"ルにあるこのコードで ``CacheKeyWarning`` を無効にできます:"

msgid ""
"If you want to instead provide custom key validation logic for one of the "
"built-in backends, you can subclass it, override just the ``validate_key`` "
"method, and follow the instructions for `using a custom cache backend`_. For "
"instance, to do this for the ``locmem`` backend, put this code in a module::"
msgstr ""
"組み込みのバックエンドに対してカスタムキーバリデーションのロジックを提供した"
"い場合は、そのバックエンドをサブクラス化して ``validate_key`` メソッドだけを"
"オーバーライドし、 `using a custom cache backend`_ の説明に従ってください。た"
"とえば、 ``locmem`` バックエンドに対してこの処理を行うには、次のコードをモ"
"ジュールに記述します:"

msgid ""
"...and use the dotted Python path to this class in the :setting:`BACKEND "
"<CACHES-BACKEND>` portion of your :setting:`CACHES` setting."
msgstr ""
"...そして、このクラスへのドット区切りパスを :setting:`CACHES` 設定の :"
"setting:`BACKEND <CACHES-BACKEND>` 部分で使用します。"

msgid ""
"Django has developing support for asynchronous cache backends, but does not "
"yet support asynchronous caching. It will be coming in a future release."
msgstr ""
"Django は非同期キャッシュバックエンドのサポートを開発中ですが、非同期キャッ"
"シュはまだサポートしていません。将来のリリースで対応する予定です。"

msgid ""
"``django.core.cache.backends.base.BaseCache`` has async variants of :ref:"
"`all base methods <cache-basic-interface>`. By convention, the asynchronous "
"versions of all methods are prefixed with ``a``. By default, the arguments "
"for both variants are the same:"
msgstr ""
"``django.core.cache.backends.base.BaseCache`` には :ref:`全ての基本メソッド "
"<cache-basic-interface>` の非同期バージョンがあります。慣習として、すべてのメ"
"ソッドの非同期バージョンのプレフィックスは ``a`` です。デフォルトでは、両方の"
"引数は同じです:"

msgid "Downstream caches"
msgstr "ダウンストリームキャッシュ"

msgid ""
"So far, this document has focused on caching your *own* data. But another "
"type of caching is relevant to web development, too: caching performed by "
"\"downstream\" caches. These are systems that cache pages for users even "
"before the request reaches your website."
msgstr ""
"これまで、このドキュメントは自分自身が *持つ* データに焦点を当ててきました。"
"しかし、ウェブ開発では別の種類のキャッシュも関係があります。それは、「ダウン"
"ストリーム」のキャッシュによって実行されるキャッシングです。ユーザーのため"
"に、リクエストがウェブサイトに到達する前にもページをキャッシュするシステムが"
"存在します。"

msgid "Here are a few examples of downstream caches:"
msgstr "ダウンストリーム キャッシュの例をいくつか挙げます。"

msgid ""
"When using HTTP, your :abbr:`ISP (Internet Service Provider)` may cache "
"certain pages, so if you requested a page from ``http://example.com/``, your "
"ISP would send you the page without having to access example.com directly. "
"The maintainers of example.com have no knowledge of this caching; the ISP "
"sits between example.com and your web browser, handling all of the caching "
"transparently. Such caching is not possible under HTTPS as it would "
"constitute a man-in-the-middle attack."
msgstr ""
"HTTPを使用する場合、あなたの :abbr:`ISP (Internet Service Provider)` は特定の"
"ページをキャッシュすることがあります。そのため、もしあなたが ``http://"
"example.com/`` からページをリクエストした場合、あなたのISPはexample.comに直接"
"アクセスすることなく、あなたにそのページを送信します。example.comの管理者はこ"
"のようなキャッシュを知りません。ISPはexample.comとあなたのウェブブラウザの間"
"に位置し、透過的にすべてのキャッシュを処理します。このようなキャッシュは、中"
"間者攻撃（man-in-the-middle attack）となるため、HTTPSでは不可能です。"

msgid ""
"Your Django website may sit behind a *proxy cache*, such as Squid Web Proxy "
"Cache (http://www.squid-cache.org/), that caches pages for performance. In "
"this case, each request first would be handled by the proxy, and it would be "
"passed to your application only if needed."
msgstr ""
"あなたの Django ウェブサイトは、Squid Web Proxy Cache (http://www.squid-"
"cache.org/) のような *プロキシキャッシュ* の背後にあるかもしれません。この場"
"合、各リクエストはまずプロキシによって処理され、必要なときだけアプリケーショ"
"ンに渡されます。"

msgid ""
"Your web browser caches pages, too. If a web page sends out the appropriate "
"headers, your browser will use the local cached copy for subsequent requests "
"to that page, without even contacting the web page again to see whether it "
"has changed."
msgstr ""
"ウェブブラウザもページをキャッシュします。ウェブページが適切なヘッダーを送信"
"すると、ブラウザはそのページへのその後のリクエストに、変更されたかどうかを確"
"認するためにウェブページに再度問い合わせることなく、ローカルにキャッシュされ"
"たコピーを使用します。"

msgid ""
"Downstream caching is a nice efficiency boost, but there's a danger to it: "
"Many web pages' contents differ based on authentication and a host of other "
"variables, and cache systems that blindly save pages based purely on URLs "
"could expose incorrect or sensitive data to subsequent visitors to those "
"pages."
msgstr ""
"ダウンストリーム・キャッシュは効率性を高めてくれますが、危険性もあります。 多"
"くのウェブページのコンテンツは、認証や他の変数のホストに基づいて異なってお"
"り、純粋にURLに基づいてやみくもにページを保存するキャッシュシステムは、それら"
"のページにあとから訪問する人に不正確なデータや機密データを公開する可能性があ"
"ります。"

msgid ""
"For example, if you operate a web email system, then the contents of the "
"\"inbox\" page depend on which user is logged in. If an ISP blindly cached "
"your site, then the first user who logged in through that ISP would have "
"their user-specific inbox page cached for subsequent visitors to the site.  "
"That's not cool."
msgstr ""
"たとえば、ウェブメールシステムを運営している場合、「受信トレイ」ページの内容"
"は、どのユーザーがログインしているかによって異なります。もしISPがやみくもにあ"
"なたのサイトをキャッシュしていたら、そのISP経由で最初にログインしたユーザー"
"は、そのユーザー固有の受信トレイページを、それ以降のサイト訪問者のために"
"キャッシュすることになります。 それはクールではありません。"

msgid ""
"Fortunately, HTTP provides a solution to this problem. A number of HTTP "
"headers exist to instruct downstream caches to differ their cache contents "
"depending on designated variables, and to tell caching mechanisms not to "
"cache particular pages. We'll look at some of these headers in the sections "
"that follow."
msgstr ""
"幸い、HTTP はこの問題の解決方法を提供しています。さまざまな HTTP ヘッダを使用"
"することで、指定した変数に応じてキャッシュ コンテンツを変えるようにダウンスト"
"リーム キャッシュに支持したり、特定のページをキャッシュしないようにキャッシュ"
"メカニズムに伝えることができます。以下のセクションでは、こうしたヘッダの一部"
"を見ていきます。"

msgid "Using ``Vary`` headers"
msgstr "``Vary`` ヘッダーを使う"

msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key. For example, if the contents "
"of a web page depend on a user's language preference, the page is said to "
"\"vary on language.\""
msgstr ""
"``Vary`` ヘッダは、キャッシュメカニズムがキャッシュキーを作る際に、どのリクエ"
"ストヘッダを考慮するべきかを定義します。たとえば、ウェブサイトのコンテンツが"
"ユーザーの言語設定に依存する場合、ページは「言語によって異なる (vary)」と言う"
"ことができます。"

msgid ""
"By default, Django's cache system creates its cache keys using the requested "
"fully-qualified URL -- e.g., ``\"https://www.example.com/stories/2005/?"
"order_by=author\"``. This means every request to that URL will use the same "
"cached version, regardless of user-agent differences such as cookies or "
"language preferences. However, if this page produces different content based "
"on some difference in request headers -- such as a cookie, or a language, or "
"a user-agent -- you'll need to use the ``Vary`` header to tell caching "
"mechanisms that the page output depends on those things."
msgstr ""
"デフォルトでは、Django のキャッシュシステムは、リクエストされた完全修飾 URL "
"(たとえば ``\"https://www.example.com/stories/2005/?order_by=author\"``) を"
"使ってキャッシュキーを作成します。つまり、クッキーや 言語設定などのユーザエー"
"ジェントの違いに関係なく、その URL へのリクエストはすべて同じキャッシュバー"
"ジョンを使うことになります。しかし、もしこのページがリクエストヘッダの違い、"
"例えばクッキーや言語、ユーザーエージェントの違いによって異なるコンテンツを生"
"成するのであれば、 ``Vary`` ヘッダを使ってキャッシュ機構にページの出力がそれ"
"らに依存していることを伝える必要があります。"

msgid ""
"To do this in Django, use the convenient :func:`django.views.decorators.vary."
"vary_on_headers` view decorator, like so::"
msgstr ""
"これを Django で行うには、便利な :func:`django.views.decorators.vary."
"vary_on_headers` ビューデコレータを次のように使います:"

msgid ""
"In this case, a caching mechanism (such as Django's own cache middleware) "
"will cache a separate version of the page for each unique user-agent."
msgstr ""
"この場合、(Django 自身のキャッシュミドルウェアのような) キャッシュ機構は、そ"
"れぞれのユニークなユーザエージェントに対して、別バージョンのページをキャッ"
"シュします。"

msgid ""
"The advantage to using the ``vary_on_headers`` decorator rather than "
"manually setting the ``Vary`` header (using something like ``response."
"headers['Vary'] = 'user-agent'``) is that the decorator *adds* to the "
"``Vary`` header (which may already exist), rather than setting it from "
"scratch and potentially overriding anything that was already in there."
msgstr ""
"``vary_on_headers`` デコレータを使用する利点は、手動で ``Vary`` ヘッダーを設"
"定する (``response.headers['Vary'] = 'user-agent'`` のように使用する) のでは"
"なく、デコレータが ``Vary`` ヘッダーに *追加* をする点にあります（これは既に"
"存在するかもしれません）。それにより、最初から設定され、既にそこにあったもの"
"を上書きすることを避けることができます。"

msgid "You can pass multiple headers to ``vary_on_headers()``::"
msgstr "複数のヘッダを ``vary_on_headers()`` に渡すこともできます:"

msgid ""
"This tells downstream caches to vary on *both*, which means each combination "
"of user-agent and cookie will get its own cache value. For example, a "
"request with the user-agent ``Mozilla`` and the cookie value ``foo=bar`` "
"will be considered different from a request with the user-agent ``Mozilla`` "
"and the cookie value ``foo=ham``."
msgstr ""
"これは、下流のキャッシュに対して *両方* の vary に応じるように指示します。こ"
"れは、user-agent と cookie の各組み合わせがそれぞれ独自のキャッシュ値を持つこ"
"とを意味します。例えば、user-agent が ``Mozilla`` で cookie の値が "
"``foo=bar`` のリクエストは、user-agent が ``Mozilla`` で cookie の値が "
"``foo=ham`` のリクエストとは異なるものとみなされます。"

msgid ""
"Because varying on cookie is so common, there's a :func:`django.views."
"decorators.vary.vary_on_cookie` decorator. These two views are equivalent::"
msgstr ""
"クッキーで変化することはとても一般的なので、 :func:`django.views.decorators."
"vary.vary_on_cookie` デコレータがあります。これら2つのビューは等価です:"

msgid ""
"The headers you pass to ``vary_on_headers`` are not case sensitive; ``\"User-"
"Agent\"`` is the same thing as ``\"user-agent\"``."
msgstr ""
"``vary_on_headers`` に渡すヘッダは大文字小文字を区別しません。 ``\"User-"
"Agent\"`` は ``\"user-agent\"`` と同じ意味です。"

msgid ""
"You can also use a helper function, :func:`django.utils.cache."
"patch_vary_headers`, directly. This function sets, or adds to, the ``Vary "
"header``. For example::"
msgstr ""
":func:`django.utils.cache.patch_vary_headers` というヘルパー関数を直接使うこ"
"ともできます。この関数は ``Vary ヘッダ`` を設定、または追加します。たとえば次"
"のようにします:"

msgid ""
"``patch_vary_headers`` takes an :class:`~django.http.HttpResponse` instance "
"as its first argument and a list/tuple of case-insensitive header names as "
"its second argument."
msgstr ""
"``patch_vary_headers`` は :class:`~django.http.HttpResponse` インスタンスを"
"第 1 引数に、大文字小文字を区別しないヘッダ名のリスト/タプルを第 2 引数にとり"
"ます。"

msgid ""
"For more on Vary headers, see the :rfc:`official Vary spec "
"<9110#section-12.5.5>`."
msgstr ""
"Vary ヘッダについての詳細は :rfc:`公式な Vary の仕様 <9110#section-12.5.5>` "
"を参照してください。"

msgid "Controlling cache: Using other headers"
msgstr "キャッシュの制御: 他のヘッダを使用する"

msgid ""
"Other problems with caching are the privacy of data and the question of "
"where data should be stored in a cascade of caches."
msgstr ""
"キャッシュに関するその他の問題点としては、データのプライバシーや、キャッシュ"
"の階層構造のどこにデータを保存すべきかという問題があります。"

msgid ""
"A user usually faces two kinds of caches: their own browser cache (a private "
"cache) and their provider's cache (a public cache). A public cache is used "
"by multiple users and controlled by someone else. This poses problems with "
"sensitive data--you don't want, say, your bank account number stored in a "
"public cache. So web applications need a way to tell caches which data is "
"private and which is public."
msgstr ""
"ユーザーは通常2種類のキャッシュに直面します。自分のブラウザのキャッシュ（プラ"
"イベートキャッシュ）とプロバイダのキャッシュ（パブリックキャッシュ）です。パ"
"ブリックキャッシュは、複数のユーザーによって使用され、他の誰かによって制御さ"
"れます。これは、機密データに関する問題を引き起こします。例えば、銀行の口座番"
"号がパブリックキャッシュに保存されることは避けたいものです。そのため、ウェブ"
"アプリケーションには、どのデータがプライベートで、どのデータがパブリックであ"
"るかをキャッシュに伝える方法が必要です。"

msgid ""
"The solution is to indicate a page's cache should be \"private.\" To do this "
"in Django, use the :func:`~django.views.decorators.cache.cache_control` view "
"decorator. Example::"
msgstr ""
"解決策は、ページのキャッシュを \"private\" にすることです。これを Django で行"
"うには、 :func:`~django.views.decorators.cache.cache_control` ビューデコレー"
"タを使います。例:"

msgid ""
"This decorator takes care of sending out the appropriate HTTP header behind "
"the scenes."
msgstr "このデコレータは、適切な HTTP ヘッダーを背後で送信します。"

msgid ""
"Note that the cache control settings \"private\" and \"public\" are mutually "
"exclusive. The decorator ensures that the \"public\" directive is removed if "
"\"private\" should be set (and vice versa). An example use of the two "
"directives would be a blog site that offers both private and public entries. "
"Public entries may be cached on any shared cache. The following code uses :"
"func:`~django.utils.cache.patch_cache_control`, the manual way to modify the "
"cache control header (it is internally called by the :func:`~django.views."
"decorators.cache.cache_control` decorator)::"
msgstr ""
"キャッシュ制御の設定 \"private\" と \"public\" は互いに排他的であることに注意"
"しましょう。デコレータは、\"private\" が設定されているときは \"public\" ディ"
"レクティブを削除します (逆も同様です)。2つのディレクティブの使用例は、プライ"
"ベートとパブリックのエントリを提供するブログサイトです。公開エントリは共有"
"キャッシュにキャッシュされます。以下のコードでは :func:`~django.utils.cache."
"patch_cache_control` を使っています。これはキャッシュコントロールヘッダを手動"
"で変更する方法です (内部的には :func:`~django.views.decorators.cache."
"cache_control` デコレータから呼び出されます):"

msgid ""
"You can control downstream caches in other ways as well (see :rfc:`9111` for "
"details on HTTP caching). For example, even if you don't use Django's server-"
"side cache framework, you can still tell clients to cache a view for a "
"certain amount of time with the :rfc:`max-age <9111#section-5.2.2.1>` "
"directive::"
msgstr ""
"ダウンストリームのキャッシュは他の方法でも制御できます (HTTP キャッシュの詳細"
"については :rfc:`9111` を参照してください)。たとえば、 Django のサーバーサイ"
"ドキャッシュフレームワークを使わない場合でも、 :rfc:`max-age "
"<9111#section-5.2.2.1>` ディレクティブを使って、ビューを一定時間キャッシュす"
"るようにクライアントに指示できます:"

msgid ""
"(If you *do* use the caching middleware, it already sets the ``max-age`` "
"with the value of the :setting:`CACHE_MIDDLEWARE_SECONDS` setting. In that "
"case, the custom ``max_age`` from the :func:`~django.views.decorators.cache."
"cache_control` decorator will take precedence, and the header values will be "
"merged correctly.)"
msgstr ""
"(キャッシュミドルウェアを使用 *する* 場合、 :setting:"
"`CACHE_MIDDLEWARE_SECONDS` 設定の値で ``max-age`` が既に設定されています。そ"
"の場合、 :func:`~django.views.decorators.cache.cache_control` デコレータで指"
"定した ``max_age`` が優先され、ヘッダ値は正しくマージされます)。"

msgid ""
"Any valid ``Cache-Control`` response directive is valid in "
"``cache_control()``. Here are some more examples:"
msgstr ""
"有効な ``Cache-Control`` レスポンスディレクティブはすべて "
"``cache_control()`` で有効です。以下はその例です:"

msgid "``no_transform=True``"
msgstr "``no_transform=True``"

msgid "``must_revalidate=True``"
msgstr "``must_revalidate=True``"

msgid "``stale_while_revalidate=num_seconds``"
msgstr "``stale_while_revalidate=num_seconds``"

msgid "``no_cache=True``"
msgstr "``no_cache=True``"

msgid ""
"The full list of known directives can be found in the `IANA registry`_ (note "
"that not all of them apply to responses)."
msgstr ""
"既知のディレクティブの全リストは `IANA registry`_ にあります (すべてのディレ"
"クティブがレスポンスに適用されるわけではないことに注意してください)。"

msgid ""
"If you want to use headers to disable caching altogether, :func:`~django."
"views.decorators.cache.never_cache` is a view decorator that adds headers to "
"ensure the response won't be cached by browsers or other caches. Example::"
msgstr ""
"ヘッダーを使用してキャッシュを完全に無効にしたい場合は、 :func:`~django."
"views.decorators.cache.never_cache` が使えます。これはビューのデコレータであ"
"り、レスポンスがブラウザーや他のキャッシュによってキャッシュされないようにす"
"るヘッダーを追加します。例:"

msgid "Order of ``MIDDLEWARE``"
msgstr "``MIDDLEWARE`` の順序"

msgid ""
"If you use caching middleware, it's important to put each half in the right "
"place within the :setting:`MIDDLEWARE` setting. That's because the cache "
"middleware needs to know which headers by which to vary the cache storage. "
"Middleware always adds something to the ``Vary`` response header when it can."
msgstr ""
"キャッシュミドルウェアを使用する場合、下記の2つを :setting:`MIDDLEWARE` 設定"
"の適切な場所に配置することが重要です。キャッシュミドルウェアはどのヘッダに"
"よってキャッシュストレージを変化させるかを知る必要があるからです。ミドルウェ"
"アは常に ``Vary`` レスポンスヘッダに何かを追加します。"

msgid ""
"``UpdateCacheMiddleware`` runs during the response phase, where middleware "
"is run in reverse order, so an item at the top of the list runs *last* "
"during the response phase. Thus, you need to make sure that "
"``UpdateCacheMiddleware`` appears *before* any other middleware that might "
"add something to the ``Vary`` header. The following middleware modules do so:"
msgstr ""
"``UpdateCacheMiddleware`` はレスポンスフェーズの間に実行され、ミドルウェアは"
"逆順に実行されるため、リストの先頭にある項目はレスポンスフェーズの間、 *最後"
"に* 実行されます。したがって、 ``UpdateCacheMiddleware`` が ``Vary`` ヘッダに"
"何かを追加する可能性のある他のミドルウェアの *前に* 配置されていることを確認"
"する必要があります。以下のミドルウェアモジュールは ``Vary`` ヘッダに何らかの"
"ものを追加します:"

msgid "``SessionMiddleware`` adds ``Cookie``"
msgstr "``SessionMiddleware`` は ``Cookie`` を追加します"

msgid "``GZipMiddleware`` adds ``Accept-Encoding``"
msgstr "``GZipMiddleware`` は ``Accept-Encoding`` を追加します"

msgid "``LocaleMiddleware`` adds ``Accept-Language``"
msgstr "``LocaleMiddleware`` は ``Accept-Language`` を追加します"

msgid ""
"``FetchFromCacheMiddleware``, on the other hand, runs during the request "
"phase, where middleware is applied first-to-last, so an item at the top of "
"the list runs *first* during the request phase. The "
"``FetchFromCacheMiddleware`` also needs to run after other middleware "
"updates the ``Vary`` header, so ``FetchFromCacheMiddleware`` must be *after* "
"any item that does so."
msgstr ""
"一方、``FetchFromCacheMiddleware`` はリクエストフェーズで実行され、このフェー"
"ズではミドルウェアが先頭から最後にかけて適用されるため、リストの上部にあるア"
"イテムはリクエストフェーズの *最初* に実行されます。 "
"``FetchFromCacheMiddleware`` もまた、他のミドルウェアが ``Vary`` ヘッダーを更"
"新した後に実行する必要があるので、 ``FetchFromCacheMiddleware`` は ``Vary`` "
"ヘッダーを更新するようなアイテムの *後* になければなりません。"

msgid "System check framework"
msgstr "システムチェックフレームワーク"

msgid ""
"The system check framework is a set of static checks for validating Django "
"projects. It detects common problems and provides hints for how to fix them. "
"The framework is extensible so you can easily add your own checks."
msgstr ""
"システムチェックフレームワークは、Django プロジェクトを検証するための静的"
"チェックのセットです。一般的な問題を検出し、それらを修正するヒントを提供しま"
"す。このフレームワークは拡張性があり、独自のチェックを簡単に追加できます。"

msgid ""
"Checks can be triggered explicitly via the :djadmin:`check` command. Checks "
"are triggered implicitly before most commands, including :djadmin:"
"`runserver` and :djadmin:`migrate`. For performance reasons, checks are not "
"run as part of the WSGI stack that is used in deployment. If you need to run "
"system checks on your deployment server, trigger them explicitly using :"
"djadmin:`check`."
msgstr ""
"チェックは、:djadmin:`check` コマンドを介して明示的にトリガーできます。チェッ"
"クは、:djadmin:`runserver` や :djadmin:`migrate` を含むほとんどのコマンドの前"
"に暗黙的にトリガーされます。パフォーマンスのため、チェックはデプロイメントで"
"使用される WSGI スタックの一部としては実行されません。デプロイメントサーバー"
"でシステムチェックを実行する必要がある場合は、 :djadmin:`check` を使用して明"
"示的にトリガーしてください。"

msgid ""
"Serious errors will prevent Django commands (such as :djadmin:`runserver`) "
"from running at all. Minor problems are reported to the console. If you have "
"inspected the cause of a warning and are happy to ignore it, you can hide "
"specific warnings using the :setting:`SILENCED_SYSTEM_CHECKS` setting in "
"your project settings file."
msgstr ""
"重大なエラーは、Djangoのコマンド (たとえば :djadmin:`runserver`) の実行を完全"
"に停止します。軽微な問題はコンソールに報告されます。警告の原因を調査し、無視"
"しても問題ない場合は、プロジェクトの設定ファイルである :setting:"
"`SILENCED_SYSTEM_CHECKS` 設定を使用して特定の警告を非表示にできます。"

msgid ""
"A full list of all checks that can be raised by Django can be found in the :"
"doc:`System check reference </ref/checks>`."
msgstr ""
"Djangoが発生させる可能性のあるすべてのチェックの完全なリストは、 :doc:`システ"
"ムチェックのリファレンス </ref/checks>` にあります。"

msgid "Writing your own checks"
msgstr "独自のチェックを書く"

msgid ""
"The framework is flexible and allows you to write functions that perform any "
"other kind of check you may require. The following is an example stub check "
"function::"
msgstr ""
"フレームワークは柔軟で、必要に応じて任意の種類のチェックを実行する関数を書く"
"ことができます。以下は、例としてのスタブチェック関数です。"

msgid ""
"The check function *must* accept an ``app_configs`` argument; this argument "
"is the list of applications that should be inspected. If ``None``, the check "
"must be run on *all* installed apps in the project."
msgstr ""
"チェック関数は、 *必ず* ``app_configs`` 引数を受け入れる必要があります。この"
"引数は、調査されるべきアプリケーションのリストです。 ``None`` の場合、チェッ"
"クはプロジェクト内の *すべての* インストールされたアプリで実行される必要があ"
"ります。"

msgid ""
"The check will receive a ``databases`` keyword argument. This is a list of "
"database aliases whose connections may be used to inspect database level "
"configuration. If ``databases`` is ``None``, the check must not use any "
"database connections."
msgstr ""
"チェックは ``databases`` キーワード引数を受け取ります。これは、データベースレ"
"ベルの構成を調査するために使用される可能性のあるデータベースエイリアスのリス"
"トです。 ``databases`` が ``None`` の場合、チェックはどのデータベース接続も使"
"用してはいけません。"

msgid "The ``**kwargs`` argument is required for future expansion."
msgstr "``**kwargs`` 引数は将来の拡張のために必要です。"

msgid "Messages"
msgstr "メッセージ"

msgid ""
"The function must return a list of messages. If no problems are found as a "
"result of the check, the check function must return an empty list."
msgstr ""
"関数は、メッセージのリストを返さなければなりません。チェックの結果、問題が見"
"つからない場合、チェック関数は空のリストを返さなければなりません。"

msgid ""
"The warnings and errors raised by the check method must be instances of :"
"class:`~django.core.checks.CheckMessage`. An instance of :class:`~django."
"core.checks.CheckMessage` encapsulates a single reportable error or warning. "
"It also provides context and hints applicable to the message, and a unique "
"identifier that is used for filtering purposes."
msgstr ""
"チェックメソッドで発生させる警告やエラーは、必ず :class:`~django.core.checks."
"CheckMessage` のインスタンスでなければなりません。:class:`~django.core."
"checks.CheckMessage` のインスタンスは、1つの報告可能なエラーや警告をカプセル"
"化します。また、メッセージに適用可能なコンテキストやヒント、フィルタリングの"
"目的で使用される一意の識別子も提供します。"

msgid ""
"The concept is very similar to messages from the :doc:`message framework </"
"ref/contrib/messages>` or the :doc:`logging framework </topics/logging>`. "
"Messages are tagged with a ``level`` indicating the severity of the message."
msgstr ""
"この概念は、 :doc:`メッセージフレームワーク </ref/contrib/messages>` や :doc:"
"`ログフレームワーク </topics/logging>` のメッセージと非常に似ています。メッ"
"セージには、メッセージの深刻さを示す「レベル」が付けられます。"

msgid ""
"There are also shortcuts to make creating messages with common levels "
"easier. When using these classes you can omit the ``level`` argument because "
"it is implied by the class name."
msgstr ""
"一般的なレベルのメッセージを簡単に作成するためのショートカットもあります。こ"
"れらのクラスを使う場合、引数 ``level`` はクラス名によって省略できます。"

msgid ":class:`Debug`"
msgstr ":class:`Debug`"

msgid ":class:`Info`"
msgstr ":class:`Info`"

msgid ":class:`Warning`"
msgstr ":class:`Warning`"

msgid ":class:`Error`"
msgstr ":class:`Error`"

msgid ":class:`Critical`"
msgstr ":class:`Critical`"

msgid "Registering and labeling checks"
msgstr "チェックの登録とラベリング"

msgid ""
"Lastly, your check function must be registered explicitly with system check "
"registry. Checks should be registered in a file that's loaded when your "
"application is loaded; for example, in the :meth:`AppConfig.ready() <django."
"apps.AppConfig.ready>` method."
msgstr ""
"最後に、チェック関数はシステムのチェックレジストリに明示的に登録する必要があ"
"ります。チェックは、アプリケーションが読み込まれるときに読み込まれるファイル"
"内に登録される必要があります。たとえば、 :meth:`AppConfig.ready() <django."
"apps.AppConfig.ready>` メソッド内などです。"

msgid ""
"You can pass as many tags to ``register`` as you want in order to label your "
"check. Tagging checks is useful since it allows you to run only a certain "
"group of checks. For example, to register a compatibility check, you would "
"make the following call::"
msgstr ""
"``register`` には、チェックにラベルを付けるために必要な数のタグを渡すことがで"
"きます。チェックにタグをつけると、特定のチェックグループだけを実行することが"
"できるので便利です。例えば、互換性チェックを登録するには、以下のように呼び出"
"します:"

msgid ""
"You can register \"deployment checks\" that are only relevant to a "
"production settings file like this::"
msgstr ""
"以下のように、本番用の設定ファイルにのみ関係する「デプロイメントチェック」を"
"登録できます:"

msgid ""
"These checks will only be run if the :option:`check --deploy` option is used."
msgstr ""
"これらのチェックが行われるのは、:option:`check --deploy` オプションが使用され"
"たときだけです。"

msgid ""
"You can also use ``register`` as a function rather than a decorator by "
"passing a callable object (usually a function) as the first argument to "
"``register``."
msgstr ""
"また、呼び出し可能オブジェクト（通常は関数）を ``register`` の第一引数に渡す"
"ことで、デコレータではなく関数として ``register`` を使用することもできます。"

msgid "The code below is equivalent to the code above::"
msgstr "下記のコードは上記のコードと等価です:"

msgid "Field, model, manager, and database checks"
msgstr "フィールド、モデル、マネージャ、およびデータベースのチェック"

msgid ""
"In some cases, you won't need to register your check function -- you can "
"piggyback on an existing registration."
msgstr ""
"場合によっては、チェック機能を登録する必要はありません。既存の登録に「便乗さ"
"せる」ことができます。"

msgid ""
"Fields, models, model managers, and database backends all implement a "
"``check()`` method that is already registered with the check framework. If "
"you want to add extra checks, you can extend the implementation on the base "
"class, perform any extra checks you need, and append any messages to those "
"generated by the base class. It's recommended that you delegate each check "
"to separate methods."
msgstr ""
"フィールド、モデル、モデルマネージャ、データベースバックエンドはすべて "
"``check()`` メソッドを実装しており、チェックフレームワークに登録されていま"
"す。追加でチェックを行いたい場合は、基底クラスの実装を拡張して、必要な追加"
"チェックを行い、基底クラスが生成したメッセージに追加します。各チェックは別々"
"のメソッドに委譲することを推奨します。"

msgid ""
"Consider an example where you are implementing a custom field named "
"``RangedIntegerField``. This field adds ``min`` and ``max`` arguments to the "
"constructor of ``IntegerField``. You may want to add a check to ensure that "
"users provide a min value that is less than or equal to the max value. The "
"following code snippet shows how you can implement this check::"
msgstr ""
"``RangedIntegerField`` というカスタムフィールドを実装する例を考えてみましょ"
"う。このフィールドは ``IntegerField`` のコンストラクタに ``min`` と ``max`` "
"引数を追加します。ユーザの min 値が max 値以下であることを確認するチェックを"
"追加できます。次のコードスニペットは、このチェックを実装する方法を示していま"
"す:"

msgid ""
"If you wanted to add checks to a model manager, you would take the same "
"approach on your subclass of :class:`~django.db.models.Manager`."
msgstr ""
"モデルマネージャにチェックを追加したい場合は、 :class:`~django.db.models."
"Manager` のサブクラスで同じアプローチを取ります。"

msgid ""
"If you want to add a check to a model class, the approach is *almost* the "
"same: the only difference is that the check is a classmethod, not an "
"instance method::"
msgstr ""
"モデルクラスにチェックを追加したい場合、アプローチは *ほとんど* 同じです。唯"
"一の違いは、チェックがインスタンスメソッドではなくクラスメソッドであるという"
"ことです:"

msgid "Writing tests"
msgstr "テストを書く"

msgid "Messages are comparable. That allows you to easily write tests::"
msgstr ""
"メッセージは比較可能なので、次のように簡単にテストを書くことができます。"

msgid "Writing integration tests"
msgstr "インテグレーションテストを書く"

msgid ""
"Given the need to register certain checks when the application loads, it can "
"be useful to test their integration within the system checks framework. This "
"can be accomplished by using the :func:`~django.core.management."
"call_command` function."
msgstr ""
"アプリケーションの読み込み時には特定のチェックを登録する必要があるため、シス"
"テムチェックフレームワーク内での統合をテストするのが便利です。これは :func:"
"`~django.core.management.call_command` 関数を使うことで実現できます。"

msgid ""
"For example, this test demonstrates that the :setting:`SITE_ID` setting must "
"be an integer, a built-in :ref:`check from the sites framework <sites-system-"
"checks>`::"
msgstr ""
"例えば、このテストは :setting:`SITE_ID` の設定が整数でなければならないことを"
"示しています。これは組み込みの :ref:`サイト フレームワークからのチェック "
"<sites-system-checks>` のものです:"

msgid ""
"Consider the following check which issues a warning on deployment if a "
"custom setting named ``ENABLE_ANALYTICS`` is not set to ``True``::"
msgstr ""
"``ENABLE_ANALYTICS`` というカスタム設定が ``True`` に設定されていない場合に、"
"デプロイ時に警告を発行する以下のチェックを考えてみましょう:"

msgid ""
"Given that this check will not raise a ``SystemCheckError``, the presence of "
"the warning message in the ``stderr`` output can be asserted like so::"
msgstr ""
"このチェックが ``SystemCheckError`` を発生させないことを考えると、以下のよう"
"に、 ``stderr`` の出力に警告メッセージがあることをアサートできます:"

msgid "Built-in class-based generic views"
msgstr "組み込みのクラスベースのジェネリックビュー（汎用ビュー）"

msgid ""
"Writing web applications can be monotonous, because we repeat certain "
"patterns again and again. Django tries to take away some of that monotony at "
"the model and template layers, but web developers also experience this "
"boredom at the view level."
msgstr ""
"ウェブアプリケーションを書くのは、特定のパターンを何度も繰り返すことになるた"
"め、単調になりがちです。Django はモデルとテンプレート層で単調さを取り除くこと"
"を試みてきましたが、ウェブ開発者はビューレベルでもこの種の退屈な繰り返しを経"
"験してきました。"

msgid ""
"Django's *generic views* were developed to ease that pain. They take certain "
"common idioms and patterns found in view development and abstract them so "
"that you can quickly write common views of data without having to write too "
"much code."
msgstr ""
"Django の *ジェネリックビュー（汎用ビュー）* は、この苦痛を軽減するために開発"
"されました。ビューの開発には共通のイディオムとパターンが存在するため、それら"
"を抽象化することで、共通のビューデータを少ないコードで素早く記述できます。"

msgid ""
"We can recognize certain common tasks, like displaying a list of objects, "
"and write code that displays a list of *any* object. Then the model in "
"question can be passed as an extra argument to the URLconf."
msgstr ""
"私たちはオブジェクトのリスト表示のような特定の共通タスクを認識することで、*任"
"意の* オブジェクトのリストを表示するコードを書きます。そして、対象のモデルを "
"URLconf から追加の引数として渡します。"

msgid "Django ships with generic views to do the following:"
msgstr "Django のジェネリックビューを使うと、以下のことが可能になります。"

msgid ""
"Display list and detail pages for a single object. If we were creating an "
"application to manage conferences then a ``TalkListView`` and a "
"``RegisteredUserListView`` would be examples of list views. A single talk "
"page is an example of what we call a \"detail\" view."
msgstr ""
"オブジェクトのリストと、1つのオブジェクトに対する詳細ページの表示。カンファレ"
"ンスを管理するアプリケーションを作っている場合、リストビューの例としては、"
"``TalkListView`` や ``RegisteredUserListView`` といったものが考えられます。1"
"つのトークの情報を表示するページが、いわゆる「詳細」ビューの一例です。"

msgid ""
"Present date-based objects in year/month/day archive pages, associated "
"detail, and \"latest\" pages."
msgstr ""
"日付を基本とするオブジェクトと、年・月・日のアーカイブページ、関連する詳細"
"ページと「最新」ページの表示。"

msgid ""
"Allow users to create, update, and delete objects -- with or without "
"authorization."
msgstr ""
"認可の有無に関わらず、ユーザーにオブジェクトの作成・更新・削除を許可する。"

msgid ""
"Taken together, these views provide interfaces to perform the most common "
"tasks developers encounter."
msgstr ""
"これらのビューを総合すると、開発者が遭遇する最も一般的なタスクを実行するため"
"のインターフェースが提供されます。"

msgid "Extending generic views"
msgstr "ジェネリックビューを拡張する"

msgid ""
"There's no question that using generic views can speed up development "
"substantially. In most projects, however, there comes a moment when the "
"generic views no longer suffice. Indeed, the most common question asked by "
"new Django developers is how to make generic views handle a wider array of "
"situations."
msgstr ""
"言うまでもなく、ジェネリックビューは実質的に開発をスピードアップさせてくれま"
"す。しかし、多くのプロジェクトでは遅かれ早かれジェネリックビューだけでは十分"
"ではなくなる瞬間が訪れます。実際、新しい Django 開発者から最もよく聞かれる質"
"問は、幅広い状況に対処するためにジェネリックビューを拡張するにはどうすれば良"
"いのか、というものです。"

msgid ""
"This is one of the reasons generic views were redesigned for the 1.3 release "
"- previously, they were view functions with a bewildering array of options; "
"now, rather than passing in a large amount of configuration in the URLconf, "
"the recommended way to extend generic views is to subclass them, and "
"override their attributes or methods."
msgstr ""
"これが、1.3リリースでジェネリックビューが再設計された理由の一つです。以前の"
"ビューは、オプションが目まぐるしく変化するビュー関数でした。現在では、ジェネ"
"リックビューを拡張する推奨の方法は、URLconfで大量の設定を渡すのではなく、サブ"
"クラス化し、属性やメソッドをオーバーライドする方法です。"

msgid ""
"That said, generic views will have a limit. If you find you're struggling to "
"implement your view as a subclass of a generic view, then you may find it "
"more effective to write just the code you need, using your own class-based "
"or functional views."
msgstr ""
"上で述べたように、ジェネリックビューには限界があります。自作のビューをジェネ"
"リックビューのサブクラスとして実装することに四苦八苦していると、それよりも自"
"作のクラスベースまたは関数ベースのビューを使った方が効率的なのではないかと思"
"うかもしれません。"

msgid ""
"More examples of generic views are available in some third party "
"applications, or you could write your own as needed."
msgstr ""
"ジェネリックビューの例はサードパーティアプリケーションでも利用できます。ある"
"いは、自分で必要に応じてアプリケーションを作ることもできます。"

msgid "Generic views of objects"
msgstr "オブジェクトのジェネリックビュー"

msgid ""
":class:`~django.views.generic.base.TemplateView` certainly is useful, but "
"Django's generic views really shine when it comes to presenting views of "
"your database content. Because it's such a common task, Django comes with a "
"handful of built-in generic views to help generate list and detail views of "
"objects."
msgstr ""
":class:`~django.views.generic.base.TemplateView` はたしかに便利ですが、"
"Django のジェネリックビューが本当の輝きを見せるのは、データベース内のコンテン"
"ツを表示するビューを作成する時です。これは非常に一般的なタスクなので、Django "
"はオブジェクトのリストと詳細ビューを非常に簡単に生成するための組み込みのジェ"
"ネリックビューをいくつか用意しているのです。"

msgid ""
"Let's start by looking at some examples of showing a list of objects or an "
"individual object."
msgstr ""
"オブジェクトのリストや個々のオブジェクトを表示する例から見てみましょう。"

msgid "We'll be using these models::"
msgstr "ここでは、以下のようなモデルを使用します。"

msgid "Now we need to define a view::"
msgstr "次に、ビューを定義しましょう。"

msgid "Finally hook that view into your urls::"
msgstr "最後に、このビューを URL にフックさせます。"

msgid ""
"That's all the Python code we need to write. We still need to write a "
"template, however. We could explicitly tell the view which template to use "
"by adding a ``template_name`` attribute to the view, but in the absence of "
"an explicit template Django will infer one from the object's name. In this "
"case, the inferred template will be ``\"books/publisher_list.html\"`` -- the "
"\"books\" part comes from the name of the app that defines the model, while "
"the \"publisher\" bit is the lowercased version of the model's name."
msgstr ""
"書く必要のある Python コードは、これですべてです。まだテンプレートを書く必要"
"はありますけれど。ビューで使用するテンプレート名を ``template_name`` 属性に明"
"示的に書くこともできますが、この属性を省略した場合でも、Django はオブジェクト"
"名から推論してくれます。この場合は、テンプレート名は ``\"books/"
"publisher_list.html\"`` になります。\"books\" の部分はモデルを定義したアプリ"
"の名前から来ていますが、\"publisher\" の部分はモデル名を小文字にした名前に"
"なっています。"

msgid ""
"Thus, when (for example) the ``APP_DIRS`` option of a ``DjangoTemplates`` "
"backend is set to True in :setting:`TEMPLATES`, a template location could "
"be: /path/to/project/books/templates/books/publisher_list.html"
msgstr ""
"したがって、たとえば :setting:`TEMPLATES` 内で ``DjangoTemplates`` バックエン"
"ドの ``APP_DIRS`` オプションを True に設定した場合、テンプレートの場所は次の"
"パスになります。/path/to/project/books/templates/books/publisher_list.html"

msgid ""
"This template will be rendered against a context containing a variable "
"called ``object_list`` that contains all the publisher objects. A template "
"might look like this:"
msgstr ""
"このテンプレートは、すべての publisher オブジェクトを含んだ ``object_list`` "
"という変数を持つコンテキストとともにレンダリングされます。よって、テンプレー"
"トは次のように書けます。"

msgid ""
"That's really all there is to it. All the cool features of generic views "
"come from changing the attributes set on the generic view. The :doc:`generic "
"views reference</ref/class-based-views/index>` documents all the generic "
"views and their options in detail; the rest of this document will consider "
"some of the common ways you might customize and extend generic views."
msgstr ""
"ジェネリックビューの優れた機能はすべて、ジェネリックビューに設定された属性を"
"変更することで得られます。この :doc:`ジェネリックビューのリファレンス </ref/"
"class-based-views/index>` のドキュメントの残りの部分では、ジェネリックビュー"
"をカスタマイズしたり拡張したりする一般的な方法のいくつかを検討します。本当に"
"それだけです。"

msgid "Making \"friendly\" template contexts"
msgstr "「親切な」テンプレートコンテキストを作る"

msgid ""
"You might have noticed that our sample publisher list template stores all "
"the publishers in a variable named ``object_list``. While this works just "
"fine, it isn't all that \"friendly\" to template authors: they have to "
"\"just know\" that they're dealing with publishers here."
msgstr ""
"コード例の出版社をリストするテンプレートが、すべての出版社を ``object_list`` "
"という名前の変数に格納していたことに気づいたかもしれません。これでもたしかに"
"機能的には正しく動作しますが、テンプレートを書く人にとっては、とてもではあり"
"ませんが「親切」とは言えません。ここではこの変数には出版社のリストが入ってい"
"るのだと「事実として知らなければならない」わけです。"

msgid ""
"Well, if you're dealing with a model object, this is already done for you. "
"When you are dealing with an object or queryset, Django is able to populate "
"the context using the lowercased version of the model class' name. This is "
"provided in addition to the default ``object_list`` entry, but contains "
"exactly the same data, i.e. ``publisher_list``."
msgstr ""
"実は、モデルオブジェクトを扱っている場合には、この問題はすでに対処されていま"
"す。オブジェクトまたは queryset を扱う時、Django はモデルのクラス名を小文字に"
"した名前を使ってコンテキストを設定できます。デフォルトの ``object_list`` エン"
"トリーに加えて、たとえば ``publisher_list`` のような変数に、全く同じデータが"
"格納されているのです。"

msgid ""
"If this still isn't a good match, you can manually set the name of the "
"context variable. The ``context_object_name`` attribute on a generic view "
"specifies the context variable to use::"
msgstr ""
"しかし、この名前でも良くないと感じるなら、コンテキストの変数名を手動で設定す"
"ることもできます。次のように、ジェネリックビューの ``context_object_name`` 属"
"性を設定すると、コンテキスト変数の名前として使えるようになります。"

msgid ""
"Providing a useful ``context_object_name`` is always a good idea. Your "
"coworkers who design templates will thank you."
msgstr ""
"分かりやすい ``context_object_name`` を設定するのはいつでも良い考えです。テン"
"プレートのデザイン担当の同僚に、きっと感謝されるでしょう。"

msgid "Adding extra context"
msgstr "追加のコンテキストを追加する"

msgid ""
"Often you need to present some extra information beyond that provided by the "
"generic view. For example, think of showing a list of all the books on each "
"publisher detail page. The :class:`~django.views.generic.detail.DetailView` "
"generic view provides the publisher to the context, but how do we get "
"additional information in that template?"
msgstr ""
"ジェネリックビューが提供する以外の追加情報が必要になることはよくあります。た"
"とえば、各出版社の詳細ページで全書籍リストを表示したくなったとします。 :"
"class:`~django.views.generic.detail.DetailView` ジェネリックビューは出版社を"
"コンテキストに設定してくれますが、テンプレートに必要な他の追加情報を使うには"
"どうすれば良いのでしょうか？"

msgid ""
"The answer is to subclass :class:`~django.views.generic.detail.DetailView` "
"and provide your own implementation of the ``get_context_data`` method. The "
"default implementation adds the object being displayed to the template, but "
"you can override it to send more::"
msgstr ""
"その答えは、 :class:`~django.views.generic.detail.DetailView` をサブクラス化"
"して、 ``get_context_data`` メソッドを自分で実装することです。デフォルトの実"
"装では、単にテンプレートで表示されるオブジェクトだけを追加しますが、ここで追"
"加情報を送るようにオーバーライドできます。"

msgid ""
"Generally, ``get_context_data`` will merge the context data of all parent "
"classes with those of the current class. To preserve this behavior in your "
"own classes where you want to alter the context, you should be sure to call "
"``get_context_data`` on the super class. When no two classes try to define "
"the same key, this will give the expected results. However if any class "
"attempts to override a key after parent classes have set it (after the call "
"to super), any children of that class will also need to explicitly set it "
"after super if they want to be sure to override all parents. If you're "
"having trouble, review the method resolution order of your view."
msgstr ""
"通常、 ``get_context_data`` はすべての親クラスのコンテキストデータを現在のク"
"ラスのコンテキストデータにマージします。コンテキストを変更したい自分のクラス"
"でこの動作を維持するには、必ずスーパークラスで ``get_context_data`` を呼び出"
"すようにしてください。2 つのクラスが同じキーを定義しようとしない場合、これは"
"期待通りの結果をもたらします。しかし、親クラスがキーを設定した後に (super を"
"呼び出した後に) あるクラスがキーをオーバーライドしようとした場合、そのクラス"
"の子クラスも親クラスを確実にオーバーライドしたいのであれば、super の後に明示"
"的にキーを設定する必要があります。問題がある場合は、ビューのメソッドの解決順"
"序を見直してみてください。"

msgid ""
"Another consideration is that the context data from class-based generic "
"views will override data provided by context processors; see :meth:`~django."
"views.generic.detail.SingleObjectMixin.get_context_data` for an example."
msgstr ""
"もうひとつの考慮点は、クラスベースのジェネリックビューのコンテキストデータが "
"コンテキストプロセッサによって提供されるデータを上書きしてしまうことです。た"
"とえば、 :meth:`~django.views.generic.detail.SingleObjectMixin."
"get_context_data` を参照してください。"

msgid "Viewing subsets of objects"
msgstr "オブジェクトのサブセットを表示する"

msgid ""
"Now let's take a closer look at the ``model`` argument we've been using all "
"along. The ``model`` argument, which specifies the database model that the "
"view will operate upon, is available on all the generic views that operate "
"on a single object or a collection of objects. However, the ``model`` "
"argument is not the only way to specify the objects that the view will "
"operate upon -- you can also specify the list of objects using the "
"``queryset`` argument::"
msgstr ""
"それでは次に、すべての場所で使っていた ``model`` 引数について詳しく見ていきま"
"しょう。``model`` 引数は、ビューの操作対象となるデータベースのモデルを指定し"
"ます。この引数は、1オブジェクトまたは複数オブジェクトを操作するすべてのジェネ"
"リックビューで使用可能です。しかし、``model`` 引数は操作対象のオブジェクトを"
"指定する唯一の方法ではありません。次のように、``queryset`` 引数を使ってオブ"
"ジェクトを指定することもできます。"

msgid ""
"Specifying ``model = Publisher`` is shorthand for saying ``queryset = "
"Publisher.objects.all()``. However, by using ``queryset`` to define a "
"filtered list of objects you can be more specific about the objects that "
"will be visible in the view (see :doc:`/topics/db/queries` for more "
"information about :class:`~django.db.models.query.QuerySet` objects, and see "
"the :doc:`class-based views reference </ref/class-based-views/index>` for "
"the complete details)."
msgstr ""
"``model = Publisher`` を指定することは、``queryset = Publisher.objects."
"all()`` と言うのと同じことです。しかし、``queryset`` を使用してオブジェクトの"
"フィルタリングされたリストを定義することで、ビューで表示されるオブジェクトに"
"ついてより具体的にすることができます（:class:`~django.db.models.query."
"QuerySet` オブジェクトについての詳細は :doc:`/topics/db/queries` を参照し、完"
"全な詳細については :doc:`クラスベースのビューのリファレンス </ref/class-"
"based-views/index>` を参照してください）。"

msgid ""
"To pick an example, we might want to order a list of books by publication "
"date, with the most recent first::"
msgstr ""
"例として、本を出版日で新しい順に並び替えたくなったとしたら、次のように書けま"
"す。"

msgid ""
"That's a pretty minimal example, but it illustrates the idea nicely. You'll "
"usually want to do more than just reorder objects. If you want to present a "
"list of books by a particular publisher, you can use the same technique::"
msgstr ""
"これは小さな例ですが、queryset の概念は上手く表現できていると思います。普通は"
"ただ並び替える以上のことをすることになるでしょう。特定の出版社の書籍リストを"
"表示したい場合にも、同じテクニックが使えます。"

msgid ""
"Notice that along with a filtered ``queryset``, we're also using a custom "
"template name. If we didn't, the generic view would use the same template as "
"the \"vanilla\" object list, which might not be what we want."
msgstr ""
"``queryset`` がフィルタリングされただけではなく、テンプレート名も変更されてい"
"るのがわかります。そうしないと、ジェネリックビューは「素の」オブジェクトリス"
"トと同じテンプレートを使ってしまいます。しかし、それは意図したものではないは"
"ずです。"

msgid ""
"Also notice that this isn't a very elegant way of doing publisher-specific "
"books. If we want to add another publisher page, we'd need another handful "
"of lines in the URLconf, and more than a few publishers would get "
"unreasonable. We'll deal with this problem in the next section."
msgstr ""
"同時に注意しておきたいのは、この方法は特定の出版社の本をリストアップするには"
"あまりエレガントな方法ではないということです。新しく出版社のページを追加する"
"必要が生じるたびにURLconf に数行を追加する必要があるので、これでは数社以上追"
"加するとなるとすでに無理があると分かるでしょう。この問題の解決策は、次のセク"
"ションで議論します。"

msgid ""
"If you get a 404 when requesting ``/books/acme/``, check to ensure you "
"actually have a Publisher with the name 'ACME Publishing'.  Generic views "
"have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-"
"views reference</ref/class-based-views/index>` for more details."
msgstr ""
"``/books/acme`` のリクエスト時に 404 が表示された場合は、本当に 'ACME "
"Publishing' という名前を持つ Publisher が存在しているか確認してください。この"
"ようなケースのためにジェネリックビューには ``allow_empty`` 引数というものもあ"
"ります。詳しくは :doc:`クラスベースビューのリファレンス </ref/class-based-"
"views/index>` を参照してください。"

msgid "Dynamic filtering"
msgstr "動的なフィルタリング"

msgid ""
"Another common need is to filter down the objects given in a list page by "
"some key in the URL. Earlier we hard-coded the publisher's name in the "
"URLconf, but what if we wanted to write a view that displayed all the books "
"by some arbitrary publisher?"
msgstr ""
"もう一つのよくあるニーズは、リストページの URL に指定した何らかのキーを使っ"
"て、表示するオブジェクトをフィルタリングすることです。上の例では、出版社名を "
"URLconf にハードコーディングしてしまっていましたが、もし任意の出版社に対する"
"すべての書籍を表示するようなビューを書きたい場合には、どうすればいいでしょう"
"か？"

msgid ""
"Handily, the ``ListView`` has a :meth:`~django.views.generic.list."
"MultipleObjectMixin.get_queryset` method we can override. By default, it "
"returns the value of the ``queryset`` attribute, but we can use it to add "
"more logic."
msgstr ""
"便利なことに、 ``ListView`` にはオーバーライドできる :meth:`~django.views."
"generic.list.MultipleObjectMixin.get_queryset` メソッドがあります。デフォルト"
"では、 ``queryset`` 属性の値を返しますが、これを使用してロジックを追加できま"
"す。"

msgid ""
"The key part to making this work is that when class-based views are called, "
"various useful things are stored on ``self``; as well as the request (``self."
"request``) this includes the positional (``self.args``) and name-based "
"(``self.kwargs``) arguments captured according to the URLconf."
msgstr ""
"この機能がうまく動作するキーポイントは、クラスベースのビューが呼ばれる段階で "
"``self`` 内には様々な便利な値が格納されていることです。request (``self."
"request``)、位置引数 (``self.args``)、そして、キーワード引数 (``self."
"kwargs``) が、URLconf からキャプチャされてきています。"

msgid "Here, we have a URLconf with a single captured group::"
msgstr ""
"ここでは、次のように URLconf に1つのキャプチャグループがあるとしましょう。"

msgid "Next, we'll write the ``PublisherBookListView`` view itself::"
msgstr "次に、``PublisherBookListView`` ビュー本体を書きます。"

msgid ""
"Using ``get_queryset`` to add logic to the queryset selection is as "
"convenient as it is powerful. For instance, if we wanted, we could use "
"``self.request.user`` to filter using the current user, or other more "
"complex logic."
msgstr ""
"queryset の選択に追加のロジックを加えるために ``get_queryset`` を使うテクニッ"
"クは、便利で強力です。望むなら、たとえば ``self.request.user`` で現在のユー"
"ザーの情報でフィルタリングしたり、もっと複雑なロジックを追加したりすることも"
"可能です。"

msgid ""
"We can also add the publisher into the context at the same time, so we can "
"use it in the template::"
msgstr ""
"次のようにすれば、テンプレートで使えるように、出版社の情報を同時にコンテキス"
"トに追加することもできます。"

msgid "Performing extra work"
msgstr "追加の処理を実行する"

msgid ""
"The last common pattern we'll look at involves doing some extra work before "
"or after calling the generic view."
msgstr ""
"最後に見る共通パターンは、ジェネリックビューの呼び出しの前後で追加の処理を実"
"行するというものです。"

msgid ""
"Imagine we had a ``last_accessed`` field on our ``Author`` model that we "
"were using to keep track of the last time anybody looked at that author::"
msgstr ""
"``Author`` モデルに ``last_accessed`` フィールドがあり、誰かが最後に著者の情"
"報を見た時刻をトラッキングするのに使用しているとします。"

msgid ""
"The generic ``DetailView`` class wouldn't know anything about this field, "
"but once again we could write a custom view to keep that field updated."
msgstr ""
"汎用の ``DetailView`` クラスはこのフィールドについて何も知りませんが、この"
"フィールドを最新の状態に保つためのカスタムビューをもう一度作成できます。"

msgid ""
"First, we'd need to add an author detail bit in the URLconf to point to a "
"custom view::"
msgstr ""
"まず、著者の詳細ビューを追加して、URLconf にカスタムビューを使うようにする必"
"要があります。"

msgid ""
"Then we'd write our new view -- ``get_object`` is the method that retrieves "
"the object -- so we override it and wrap the call::"
msgstr ""
"次に、新しいビューを記述します（ ``get_object`` はオブジェクトを取得するメ"
"ソッドです）。そのため、オブジェクトをオーバーライドして、呼び出しをラップし"
"ます::"

msgid ""
"The URLconf here uses the named group ``pk`` - this name is the default name "
"that ``DetailView`` uses to find the value of the primary key used to filter "
"the queryset."
msgstr ""
"ここで URLconf は ``pk`` という名前のキャプチャグループを使っています。この名"
"前は ``DetailView`` が queryset をフィルタするのに使うプライマリキーの値を見"
"付けるためのデフォルトの名前です。"

msgid ""
"If you want to call the group something else, you can set :attr:`~django."
"views.generic.detail.SingleObjectMixin.pk_url_kwarg` on the view."
msgstr ""
"グループを別の名前で呼び出したい場合は、ビューに :attr:`~django.views."
"generic.detail.SingleObjectMixin.pk_url_kwarg` を指定します。"

msgid "Form handling with class-based views"
msgstr "クラスベースのビューでフォームを扱う"

msgid "Form processing generally has 3 paths:"
msgstr "フォームの処理には、一般に3つの場合分けが存在します。"

msgid "Initial GET (blank or prepopulated form)"
msgstr ""
"最初の GET リクエスト (空白またはデフォルト値が埋め込まれたフォームを返す)"

msgid "POST with invalid data (typically redisplay form with errors)"
msgstr ""
"無効なデータの POST リクエスト (よくあるパターンは、エラー表示を追加した"
"フォームを再表示する)"

msgid "POST with valid data (process the data and typically redirect)"
msgstr ""
"有効なデータの POST リクエスト (データを処理し、普通はリダイレクトを行う)"

msgid ""
"Implementing this yourself often results in a lot of repeated boilerplate "
"code (see :ref:`Using a form in a view<using-a-form-in-a-view>`). To help "
"avoid this, Django provides a collection of generic class-based views for "
"form processing."
msgstr ""
"これらの処理を自分で実装しようとすると、多くの場合、多数の繰り返しの定型コー"
"ドを書くことになってしまいます (:ref:`ビューでフォームを使う <using-a-form-"
"in-a-view>` を参照)。これを避けるために、Django はフォームを処理するための一"
"般的なクラスビューを用意しています。"

msgid "Basic forms"
msgstr "基本的なフォーム"

msgid "Given a contact form:"
msgstr "以下のようなコンタクトフォームがあったとします。"

msgid "``forms.py``"
msgstr "``forms.py``"

msgid "The view can be constructed using a ``FormView``:"
msgstr "このとき、ビューは ``FormView`` を使うことで構築できます。"

msgid "``views.py``"
msgstr "``views.py``"

msgid "Notes:"
msgstr "メモ: "

msgid ""
"FormView inherits :class:`~django.views.generic.base.TemplateResponseMixin` "
"so :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"can be used here."
msgstr ""
"FormView は :class:`~django.views.generic.base.TemplateResponseMixin` を継承"
"するため、ここでは :attr:`~django.views.generic.base.TemplateResponseMixin."
"template_name` を使うことができます。"

msgid ""
"The default implementation for :meth:`~django.views.generic.edit.FormMixin."
"form_valid` simply redirects to the :attr:`~django.views.generic.edit."
"FormMixin.success_url`."
msgstr ""
":meth:`~django.views.generic.edit.FormMixin.form_valid` デフォルトの実装は、"
"ただ単に :attr:`~django.views.generic.edit.FormMixin.success_url` にリダイレ"
"クトするというものです。"

msgid "Model forms"
msgstr "モデルフォーム"

msgid ""
"Generic views really shine when working with models.  These generic views "
"will automatically create a :class:`~django.forms.ModelForm`, so long as "
"they can work out which model class to use:"
msgstr ""
"ジェネリックビューが輝きを見せるのは、モデルとともに使用した時です。ジェネ"
"リックビューは  :class:`~django.forms.ModelForm` を自動的に生成するので、どの"
"モデルクラスを使うのかを選択できます。"

msgid ""
"If the :attr:`~django.views.generic.edit.ModelFormMixin.model` attribute is "
"given, that model class will be used."
msgstr ""
":attr:`~django.views.generic.edit.ModelFormMixin.model` 属性が与えられた場合"
"には、そのモデルクラスが使用されます。"

msgid ""
"If :meth:`~django.views.generic.detail.SingleObjectMixin.get_object()` "
"returns an object, the class of that object will be used."
msgstr ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_object()` がオブ"
"ジェクトを帰す場合には、そのオブジェクトのクラスが使用されます。"

msgid ""
"If a :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` is "
"given, the model for that queryset will be used."
msgstr ""
":attr:`~django.views.generic.detail.SingleObjectMixin.queryset` が与えられた"
"場合には、そのクエリセットに対するモデルが使用されます。"

msgid ""
"Model form views provide a :meth:`~django.views.generic.edit.ModelFormMixin."
"form_valid()` implementation that saves the model automatically.  You can "
"override this if you have any special requirements; see below for examples."
msgstr ""
"モデルフォームビューはモデルを自動的に保存する :meth:`~django.views.generic."
"edit.ModelFormMixin.form_valid()` 実装を提供します。 もし特別な要件があれば、"
"これをオーバーライドできます。以下の例を参照してください。"

msgid ""
"You don't even need to provide a ``success_url`` for :class:`~django.views."
"generic.edit.CreateView` or :class:`~django.views.generic.edit.UpdateView` - "
"they will use :meth:`~django.db.models.Model.get_absolute_url()` on the "
"model object if available."
msgstr ""
":class:`~django.views.generic.edit.CreateView` や :class:`~django.views."
"generic.edit.UpdateView` には ``success_url`` を指定する必要はありません。モ"
"デルオブジェクトに :meth:`~django.db.models.Model.get_absolute_url()` があれ"
"ばそれを使用します。"

msgid ""
"If you want to use a custom :class:`~django.forms.ModelForm` (for instance "
"to add extra validation), set :attr:`~django.views.generic.edit.FormMixin."
"form_class` on your view."
msgstr ""
"カスタムの :class:`~django.forms.ModelForm` を使いたい場合 (インスタンスでバ"
"リデーションを追加したい場合)、 :attr:`~django.views.generic.edit.FormMixin."
"form_class` をビューに指定してください。"

msgid ""
"When specifying a custom form class, you must still specify the model, even "
"though the :attr:`~django.views.generic.edit.FormMixin.form_class` may be a :"
"class:`~django.forms.ModelForm`."
msgstr ""
"カスタムのフォームクラスを指定した場合、:attr:`~django.views.generic.edit."
"FormMixin.form_class` が :class:`~django.forms.ModelForm` だったとしても、モ"
"デルを指定する必要があります。"

msgid ""
"First we need to add :meth:`~django.db.models.Model.get_absolute_url()` to "
"our ``Author`` class:"
msgstr ""
"最初に、``Author`` クラスに :meth:`~django.db.models.Model."
"get_absolute_url()` を追加する必要があります:"

msgid "``models.py``"
msgstr "``models.py``"

msgid ""
"Then we can use :class:`CreateView` and friends to do the actual work. "
"Notice how we're just configuring the generic class-based views here; we "
"don't have to write any logic ourselves:"
msgstr ""
"そうしたら、:class:`CreateView` およびその仲間たちを使って実際に動作させるこ"
"とができます。ここでは一般的なクラスベースのビューのみを設定している点が重要"
"です; 自分自身でロジックを書く必要はありません:"

msgid ""
"We have to use :func:`~django.urls.reverse_lazy` instead of ``reverse()``, "
"as the urls are not loaded when the file is imported."
msgstr ""
"ファイルがインポートされるときに urls は読み込まれないので、 :func:`~django."
"urls.reverse_lazy` を ``reverse()`` の代わりに使う必要があります。"

msgid ""
"The ``fields`` attribute works the same way as the ``fields`` attribute on "
"the inner ``Meta`` class on :class:`~django.forms.ModelForm`. Unless you "
"define the form class in another way, the attribute is required and the view "
"will raise an :exc:`~django.core.exceptions.ImproperlyConfigured` exception "
"if it's not."
msgstr ""
"``fields`` 属性は :class:`~django.forms.ModelForm` の内部 ``Meta`` クラスの "
"``fields`` 属性と同じように動作します。別の方法でフォームクラスを定義しない限"
"り、この属性は必須であり、属性がない場合、ビューは :exc:`~django.core."
"exceptions.ImproperlyConfigured` 例外を発生させます。"

msgid ""
"If you specify both the :attr:`~django.views.generic.edit.ModelFormMixin."
"fields` and :attr:`~django.views.generic.edit.FormMixin.form_class` "
"attributes, an :exc:`~django.core.exceptions.ImproperlyConfigured` exception "
"will be raised."
msgstr ""
":attr:`~django.views.generic.edit.ModelFormMixin.fields` 属性と :attr:"
"`~django.views.generic.edit.FormMixin.form_class` 属性の両方を指定した場"
"合、 :exc:`~django.core.exceptions.ImproperlyConfigured` 例外が発生します。"

msgid "Finally, we hook these new views into the URLconf:"
msgstr "最後に、これらの新しいビューをURLconfにフックします:"

msgid "``urls.py``"
msgstr "``urls.py``"

msgid ""
"These views inherit :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` which uses :attr:`~django.views.generic."
"detail.SingleObjectTemplateResponseMixin.template_name_suffix` to construct "
"the :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"based on the model."
msgstr ""
"これらのビューは :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` を継承しており、 :attr:`~django.views."
"generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix` を使っ"
"てモデルに基づいて :attr:`~django.views.generic.base.TemplateResponseMixin."
"template_name` を構成します。"

msgid "In this example:"
msgstr "この例では:"

msgid ""
":class:`CreateView` and :class:`UpdateView` use ``myapp/author_form.html``"
msgstr ""
":class:`CreateView` と :class:`UpdateView` は ``myapp/author_form.html`` を使"
"用します。"

msgid ":class:`DeleteView` uses ``myapp/author_confirm_delete.html``"
msgstr ""
":class:`DeleteView` は ``myapp/author_confirm_delete.html`` を使用します。"

msgid ""
"If you wish to have separate templates for :class:`CreateView` and :class:"
"`UpdateView`, you can set either :attr:`~django.views.generic.base."
"TemplateResponseMixin.template_name` or :attr:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin.template_name_suffix` on your view class."
msgstr ""
":class:`CreateView` と :class:`UpdateView` で別々のテンプレートを使いたい場合"
"は、 :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"か :attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin."
"template_name_suffix` をビュークラスに指定します。"

msgid "Models and ``request.user``"
msgstr "モデルと ``request.user``"

msgid ""
"To track the user that created an object using a :class:`CreateView`, you "
"can use a custom :class:`~django.forms.ModelForm` to do this. First, add the "
"foreign key relation to the model:"
msgstr ""
":class:`CreateView` を使ってオブジェクトを作成したユーザを追跡するには、カス"
"タムの :class:`~django.forms.ModelForm` を使います。まず、モデルに外部キー関"
"係を追加します："

msgid ""
"In the view, ensure that you don't include ``created_by`` in the list of "
"fields to edit, and override :meth:`~django.views.generic.edit."
"ModelFormMixin.form_valid()` to add the user:"
msgstr ""
"ビューでは、編集するフィールドのリストに ``created_by`` が含まれていないこと"
"を確認し、 :meth:`~django.views.generic.edit.ModelFormMixin.form_valid()` を"
"オーバーライドしてユーザーを追加します:"

msgid ""
":class:`~django.contrib.auth.mixins.LoginRequiredMixin` prevents users who "
"aren't logged in from accessing the form. If you omit that, you'll need to "
"handle unauthorized users in :meth:`~.ModelFormMixin.form_valid()`."
msgstr ""
":class:`~django.contrib.auth.mixins.LoginRequiredMixin` はログインしていない"
"ユーザーがフォームにアクセスできないようにします。これを省略した場合、 :meth:"
"`~.ModelFormMixin.form_valid()` で未承認ユーザを処理する必要があります。"

msgid "Content negotiation example"
msgstr "コンテンツネゴシエーションの例"

msgid ""
"Here is an example showing how you might go about implementing a form that "
"works with an API-based workflow as well as 'normal' form POSTs::"
msgstr ""
"ここでは、API ベースのワークフローと「通常の」フォーム POST で動作するフォー"
"ムの実装例を紹介します:"

msgid "Class-based views"
msgstr "クラスベースビュー"

msgid ""
"A view is a callable which takes a request and returns a response. This can "
"be more than just a function, and Django provides an example of some classes "
"which can be used as views. These allow you to structure your views and "
"reuse code by harnessing inheritance and mixins. There are also some generic "
"views for tasks which we'll get to later, but you may want to design your "
"own structure of reusable views which suits your use case. For full details, "
"see the :doc:`class-based views reference documentation</ref/class-based-"
"views/index>`."
msgstr ""
"ビューはリクエストを受けてレスポンスを返す callable です。これは単なる関数以"
"上のものになる可能性があり、Django ではビューとして使用できるいくつかのクラス"
"の例を提供しています。これらのクラスは、継承やミックスインを利用してビューを"
"構造化し、コードを再利用することを可能にします。後ほど説明するタスクのための"
"汎用的なビューもありますが、あなたのユースケースに合った再利用可能なビューの"
"構造を独自に設計したいと思うかもしれません。詳細については、クラスベースの"
"ビューの :doc:`リファレンスドキュメント</ref/class-based-views/index>` を参照"
"してくださ"

msgid "Basic examples"
msgstr "基本的な例"

msgid ""
"Django provides base view classes which will suit a wide range of "
"applications. All views inherit from the :class:`~django.views.generic.base."
"View` class, which handles linking the view into the URLs, HTTP method "
"dispatching and other common features. :class:`~django.views.generic.base."
"RedirectView` provides a HTTP redirect, and :class:`~django.views.generic."
"base.TemplateView` extends the base class to make it also render a template."
msgstr ""
"Django は、さまざまなアプリケーションに広く適用できるベースビュークラスを用意"
"しています。 :class:`~django.views.generic.base.View` クラスを継承したすべて"
"のビューは、指定した URL へのビューのリンクや、送り出す HTTP メソッド、その他"
"よく使われる機能をハンドリングします。 :class:`~django.views.generic.base."
"RedirectView` は HTTP リダイレクトを行うビュークラス、 :class:`~django.views."
"generic.base.TemplateView` はベースビューを拡張してテンプレートレンダリングの"
"機能をもたせたビュークラスです。"

msgid "Usage in your URLconf"
msgstr "URLconfでの使用法"

msgid ""
"The most direct way to use generic views is to create them directly in your "
"URLconf. If you're only changing a few attributes on a class-based view, you "
"can pass them into the :meth:`~django.views.generic.base.View.as_view` "
"method call itself::"
msgstr ""
"ジェネリックビューを使用する最もダイレクトな方法は、URLconf 内で直接オブジェ"
"クトを作成することです。クラスベースビューの属性をいくつか変更するだけな"
"ら、 :meth:`~django.views.generic.base.View.as_view` のメソッド呼び出しに渡せ"
"ばよいのです。"

msgid ""
"Any arguments passed to :meth:`~django.views.generic.base.View.as_view` will "
"override attributes set on the class. In this example, we set "
"``template_name`` on the ``TemplateView``. A similar overriding pattern can "
"be used for the ``url`` attribute on :class:`~django.views.generic.base."
"RedirectView`."
msgstr ""
":meth:`~django.views.generic.base.View.as_view` に渡されたすべての引数は、ク"
"ラスで設定された属性を上書きします。次の例では ``TemplateView`` の "
"``template_name`` を設定しています。同様の上書きのパターンは、:class:"
"`~django.views.generic.base.RedirectView` の ``url`` 属性でも使えます。"

msgid "Subclassing generic views"
msgstr "ジェネリックビューのサブクラス化"

msgid ""
"The second, more powerful way to use generic views is to inherit from an "
"existing view and override attributes (such as the ``template_name``) or "
"methods (such as ``get_context_data``) in your subclass to provide new "
"values or methods. Consider, for example, a view that just displays one "
"template, ``about.html``. Django has a generic view to do this - :class:"
"`~django.views.generic.base.TemplateView` - so we can subclass it, and "
"override the template name::"
msgstr ""
"次に、ジェネリックビューのもっと強力な使用例として、既存のビューを継承して、"
"新しい値やメソッドを提供するために、 ``template_name`` などの属性や "
"``get_context_data`` などのメソッドをサブクラスで上書きする方法を紹介します。"
"たとえば、1つのテンプレート ``about.html`` だけを表示するビューを作ることを考"
"えてみてください。Django には、このために利用できるジェネリックビュー :class:"
"`~django.views.generic.base.TemplateView` があるので、これをサブクラス化し、"
"テンプレート名を上書きすることで実装できます。"

msgid ""
"Then we need to add this new view into our URLconf. :class:`~django.views."
"generic.base.TemplateView` is a class, not a function, so we point the URL "
"to the :meth:`~django.views.generic.base.View.as_view` class method instead, "
"which provides a function-like entry to class-based views::"
msgstr ""
"あとは、URLconf にこの新しいビューを追加する必要があります。 :class:`~django."
"views.generic.base.TemplateView` は1つのクラスであって、関数ではありません。"
"そのため、指定する URL に対して、代わりに :meth:`~django.views.generic.base."
"View.as_view` クラスメソッドを設定しています。これによって、クラスベース"
"ビューに対する関数ライクな要素を指定できます。"

msgid ""
"For more information on how to use the built in generic views, consult the "
"next topic on :doc:`generic class-based views</topics/class-based-views/"
"generic-display>`."
msgstr ""
"組み込みの汎用ビューの使用方法の詳細については、次のトピック :doc:`汎用のクラ"
"スベースビュー </topics/class-based-views/generic-display>` を参照してくださ"
"い。"

msgid "Supporting other HTTP methods"
msgstr "その他の HTTP メソッドをサポートする"

msgid ""
"Suppose somebody wants to access our book library over HTTP using the views "
"as an API. The API client would connect every now and then and download book "
"data for the books published since last visit. But if no new books appeared "
"since then, it is a waste of CPU time and bandwidth to fetch the books from "
"the database, render a full response and send it to the client. It might be "
"preferable to ask the API when the most recent book was published."
msgstr ""
"誰かが私たちのライブラリに HTTP 経由でアクセスして、ビューを API として使用し"
"たいという状況を考えてください。API クライアントはたびたびコネクションを張"
"り、最終訪問日時以降に出版された本のデータをダウンロードするとします。しか"
"し、新しい本の情報が存在しない場合には、データベースから本のデータを取得し、"
"レスポンステキストをレンダリングし、クライアントに送信し返すための CPU タイム"
"とバンド幅は無駄になってしまいます。最新の本が出版された時点で API に問い合わ"
"せた方が好ましいかもしれません。"

msgid "We map the URL to book list view in the URLconf::"
msgstr ""
"そのために、URLconf 内で、本のリストビューへの URL を次のようにマッピングしま"
"す。"

msgid "And the view::"
msgstr "そして、ビューには次のように書きます。"

msgid ""
"If the view is accessed from a ``GET`` request, an object list is returned "
"in the response (using the ``book_list.html`` template). But if the client "
"issues a ``HEAD`` request, the response has an empty body and the ``Last-"
"Modified`` header indicates when the most recent book was published.  Based "
"on this information, the client may or may not download the full object list."
msgstr ""
"ビューが ``GET`` リクエストからアクセスされた場合、レスポンスにはオブジェクト"
"リストが返されます( ``book_list.html`` テンプレートを使用しています)。しか"
"し、クライアントがHEADリクエストを発行した場合、レスポンスは空のボディを持"
"ち、 ``Last-Modified`` ヘッダーは最新の書籍がいつ発行されたかを示します。この"
"情報に基づいて、クライアントは完全なオブジェクトリストをダウンロードするかど"
"うかを判断します。"

msgid "Asynchronous class-based views"
msgstr "非同期のクラスベース・ビュー"

msgid ""
"As well as the synchronous (``def``) method handlers already shown, ``View`` "
"subclasses may define asynchronous (``async def``) method handlers to "
"leverage asynchronous code using ``await``::"
msgstr ""
"既に示した同期 (``def``) メソッドハンドラと同様に、 ``View`` サブクラスは "
"``await``: を使用して非同期 (``async def``) メソッドハンドラを定義できます:"

msgid ""
"Within a single view-class, all user-defined method handlers must be either "
"synchronous, using ``def``, or all asynchronous, using ``async def``. An "
"``ImproperlyConfigured`` exception will be raised in ``as_view()`` if "
"``def`` and ``async def`` declarations are mixed."
msgstr ""
"1つのビュークラス内では、すべてのユーザー定義メソッドハンドラは ``def`` を使"
"用した同期的なものか、 ``async def`` を使用した非同期的なものでなければなりま"
"せん。 ``def`` と ``async def`` が混在している場合、 ``as_view()`` で "
"``ImproperlyConfigured`` 例外が発生します。"

msgid ""
"Django will automatically detect asynchronous views and run them in an "
"asynchronous context. You can read more about Django's asynchronous support, "
"and how to best use async views, in :doc:`/topics/async`."
msgstr ""
"Django は自動的に非同期ビューを検出し、非同期コンテキストで実行します。"
"Django の非同期サポートや、非同期ビューの最適な使い方については、 :doc:`/"
"topics/async` を参照してください。"

msgid "Introduction to class-based views"
msgstr "クラスベースビュー入門"

msgid ""
"Class-based views provide an alternative way to implement views as Python "
"objects instead of functions. They do not replace function-based views, but "
"have certain differences and advantages when compared to function-based "
"views:"
msgstr ""
"クラスベースビューはビューを実装するもう一つの手段で、関数の代わりに Python "
"のオブジェクトとしてビューを定義します。クラスベースビューは関数ベースの"
"ビューを完全に置き換えるものではありませんが、関数ベースのビューと比較して、"
"以下のような違いと利点があります。"

msgid ""
"Organization of code related to specific HTTP methods (``GET``, ``POST``, "
"etc.) can be addressed by separate methods instead of conditional branching."
msgstr ""
"特定の HTTP メソッド (``GET`` 、 ``POST`` など) に関連するコードの集まりを、"
"条件分岐を使ってかき分けるのではなく、それぞれに独立したメソッドを割り当てる"
"ことができる。"

msgid ""
"Object oriented techniques such as mixins (multiple inheritance) can be used "
"to factor code into reusable components."
msgstr ""
"ミックスイン (多重継承) などのオブジェクト指向のテクニックを使って、コードを"
"再利用可能なコンポーネントに分解できる。"

msgid ""
"The relationship and history of generic views, class-based views, and class-"
"based generic views"
msgstr ""
"ジェネリックビュー、クラスベースビュー、クラスベースジェネリックビューの関係"
"と歴史的経緯"

msgid ""
"In the beginning there was only the view function contract, Django passed "
"your function an :class:`~django.http.HttpRequest` and expected back an :"
"class:`~django.http.HttpResponse`. This was the extent of what Django "
"provided."
msgstr ""
"まず初めに存在したのは、ビュー関数の規約だけでした。Django は、定義された関数"
"に :class:`~django.http.HttpRequest` を渡して、:class:`~django.http."
"HttpResponse` が返ってくることを期待していました。Django が提供する機能はこの"
"範囲まででした。"

msgid ""
"Early on it was recognized that there were common idioms and patterns found "
"in view development. Function-based generic views were introduced to "
"abstract these patterns and ease view development for the common cases."
msgstr ""
"早い内に、ビューの開発には共通のイディオムやパターンが存在することが認識され"
"るようになりました。こうしたパターンを抽象化し、共通ケースに当てはまるような"
"ビューの開発を楽にするために導入されたのが、関数ベースのジェネリックビューで"
"した。"

msgid ""
"The problem with function-based generic views is that while they covered the "
"simple cases well, there was no way to extend or customize them beyond some "
"configuration options, limiting their usefulness in many real-world "
"applications."
msgstr ""
"関数ベースのジェネリックビューの問題点は、単純なケースを十分にカバーしていた"
"ものの、設定オプションを超えて拡張したりカスタマイズしたりする方法がなく、多"
"くの実世界のアプリケーションでの有用性が制限されていたことです。"

msgid ""
"Class-based generic views were created with the same objective as function-"
"based generic views, to make view development easier. However, the way the "
"solution is implemented, through the use of mixins, provides a toolkit that "
"results in class-based generic views being more extensible and flexible than "
"their function-based counterparts."
msgstr ""
"クラスベースのジェネリックビューは関数ベースのジェネリックビューと同様に、"
"ビューの開発を楽にすることを目的に作成されました。しかし、ミックスインを使用"
"するなどの実装方法の工夫により、ツールキットを提供することができ、結果とし"
"て、関数ベースのジェネリックビューに比べて、より拡張性が高く、柔軟なものにす"
"ることができました。"

msgid ""
"If you have tried function based generic views in the past and found them "
"lacking, you should not think of class-based generic views as a class-based "
"equivalent, but rather as a fresh approach to solving the original problems "
"that generic views were meant to solve."
msgstr ""
"もしあなたが昔、関数ベースのジェネリックビューを使用しようとして、物足りない"
"と思ったなら、クラスベースのジェネリックビューを、関数ベースからクラスベース"
"にしただけのようなものとは考えないでください。むしろ、ジェネリックビューが解"
"決しようとしていた、元々あった問題を解くための新しいアプローチとしてとらえて"
"ください。"

msgid ""
"The toolkit of base classes and mixins that Django uses to build class-based "
"generic views are built for maximum flexibility, and as such have many hooks "
"in the form of default method implementations and attributes that you are "
"unlikely to be concerned with in the simplest use cases. For example, "
"instead of limiting you to a class-based attribute for ``form_class``, the "
"implementation uses a ``get_form`` method, which calls a ``get_form_class`` "
"method, which in its default implementation returns the ``form_class`` "
"attribute of the class. This gives you several options for specifying what "
"form to use, from an attribute, to a fully dynamic, callable hook. These "
"options seem to add hollow complexity for simple situations, but without "
"them, more advanced designs would be limited."
msgstr ""
"Django がクラスベースのジェネリックビューを構築するために使用する基底クラス"
"と mixin のツールキットは、最大限の柔軟性を求めて構築されており、デフォルトの"
"メソッド実装や、最も単純なユースケースでは気にすることのない属性の形で多くの"
"フックを持っています。たとえば、``form_class`` のクラスベースの属性に制限する"
"代わりに、実装では ``get_form`` メソッドを使用しており、 ``get_form_class`` "
"メソッドを呼び出します。これにより、どのフォームを使用するかを指定するため"
"に、属性から完全に動的で呼び出し可能なフックまで、いくつかのオプションが用意"
"されています。これらのオプションは、単純な状況では中途半端な複雑さを追加して"
"いるように見えますが、これがなければ、より高度なデザインは制限されてしまいま"
"す。"

msgid "Using class-based views"
msgstr "クラスベースのビューを使用する"

msgid ""
"At its core, a class-based view allows you to respond to different HTTP "
"request methods with different class instance methods, instead of with "
"conditionally branching code inside a single view function."
msgstr ""
"中核となる機能として、クラスベースのビューでは、HTTP リクエストのメソッドに応"
"じてクラスインスタンスの異なるメソッドを呼び出させることができるため、1つの"
"ビュー関数の内部で条件分岐を使わずにすみます。"

msgid ""
"So where the code to handle HTTP ``GET`` in a view function would look "
"something like::"
msgstr ""
"そのため、ビュー関数の場合に HTTP ``GET`` をハンドリングするコードが次のよう"
"になるとすると、"

msgid "In a class-based view, this would become::"
msgstr "クラスベースのビューでは以下のようになります。"

msgid ""
"Because Django's URL resolver expects to send the request and associated "
"arguments to a callable function, not a class, class-based views have an :"
"meth:`~django.views.generic.base.View.as_view` class method which returns a "
"function that can be called when a request arrives for a URL matching the "
"associated pattern. The function creates an instance of the class, calls :"
"meth:`~django.views.generic.base.View.setup` to initialize its attributes, "
"and then calls its :meth:`~django.views.generic.base.View.dispatch` method. "
"``dispatch`` looks at the request to determine whether it is a ``GET``, "
"``POST``, etc, and relays the request to a matching method if one is "
"defined, or raises :class:`~django.http.HttpResponseNotAllowed` if not::"
msgstr ""
"DjangoのURLリゾルバは、クラスではなく、コール可能な関数にリクエストと関連する"
"引数を送信することを期待しているため、クラスベースのビューには、関連するパ"
"ターンに一致するURLに対するリクエストが到着したときに呼び出すことができる関数"
"を返す :meth:`~django.views.generic.base.View.as_view` クラスメソッドがありま"
"す。この関数はクラスのインスタンスを作成し、:meth:`~django.views.generic."
"base.View.setup` を呼び出してその属性を初期化し、次にその :meth:`~django."
"views.generic.base.View.dispatch` メソッドを呼び出します。``dispatch`` はリク"
"エストを調べて、それが ``GET``、``POST`` などであるかを判断し、定義されている"
"場合は一致するメソッドにリクエストを中継し、定義されていない場合は :class:"
"`~django.http.HttpResponseNotAllowed` を発生させます:"

msgid ""
"It is worth noting that what your method returns is identical to what you "
"return from a function-based view, namely some form of :class:`~django.http."
"HttpResponse`. This means that :doc:`http shortcuts </topics/http/"
"shortcuts>` or :class:`~django.template.response.TemplateResponse` objects "
"are valid to use inside a class-based view."
msgstr ""
"メソッドが関数ベースのビューが返すもの、つまり何らかの形の :class:`~django."
"http.HttpResponse` と同等のものしか返せないなら意味はありません。これが意味す"
"るのは、 :doc:`http ショートカット </topics/http/shortcuts>` や :class:"
"`~django.template.response.TemplateResponse` オブジェクトはクラスベースの"
"ビューの内部でも使えるということです。"

msgid ""
"While a minimal class-based view does not require any class attributes to "
"perform its job, class attributes are useful in many class-based designs, "
"and there are two ways to configure or set class attributes."
msgstr ""
"最小限のクラスベースのビューでは、ジョブを実行するのにどんなクラス属性も必要"
"としませんが、クラスベースの設計をする場合にはクラス属性が役に立つことが多い"
"です。クラス属性のカスタマイズと設定を行うには2つの方法があります。"

msgid ""
"The first is the standard Python way of subclassing and overriding "
"attributes and methods in the subclass. So that if your parent class had an "
"attribute ``greeting`` like this::"
msgstr ""
"第1の方法は、通常の Python のサブクラス化を行い、サブクラス上で属性やメソッド"
"を上書きするという方法です。たとえば、次のように親クラスが ``greeting`` とい"
"う属性を持っていたとすると、"

msgid "You can override that in a subclass::"
msgstr "サブクラスでは次のように属性を上書きできます。"

msgid ""
"Another option is to configure class attributes as keyword arguments to the :"
"meth:`~django.views.generic.base.View.as_view` call in the URLconf::"
msgstr ""
"もう一つの方法は、URLconf 内での :meth:`~django.views.generic.base.View."
"as_view` の呼び出し時に、クラス属性をキーワード引数として指定する方法です。"

msgid ""
"While your class is instantiated for each request dispatched to it, class "
"attributes set through the :meth:`~django.views.generic.base.View.as_view` "
"entry point are configured only once at the time your URLs are imported."
msgstr ""
"定義したクラスはリクエストが発行されるごとにインスタンス化されますが、:meth:"
"`~django.views.generic.base.View.as_view` エントリーポイントで指定したクラス"
"属性が設定されるのは、URL がインポートされる際の1回だけです。"

msgid "Using mixins"
msgstr "ミックスイン (mixin) を使用する"

msgid ""
"Mixins are a form of multiple inheritance where behaviors and attributes of "
"multiple parent classes can be combined."
msgstr ""
"ミックスインは、複数の親クラスのメソッドや属性を混合することができる多重継承"
"の形式の1つです。"

msgid ""
"For example, in the generic class-based views there is a mixin called :class:"
"`~django.views.generic.base.TemplateResponseMixin` whose primary purpose is "
"to define the method :meth:`~django.views.generic.base.TemplateResponseMixin."
"render_to_response`. When combined with the behavior of the :class:`~django."
"views.generic.base.View` base class, the result is a :class:`~django.views."
"generic.base.TemplateView` class that will dispatch requests to the "
"appropriate matching methods (a behavior defined in the ``View`` base "
"class), and that has a :meth:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response` method that uses a :attr:`~django."
"views.generic.base.TemplateResponseMixin.template_name` attribute to return "
"a :class:`~django.template.response.TemplateResponse` object (a behavior "
"defined in the ``TemplateResponseMixin``)."
msgstr ""
"たとえば、ジェネリッククラスベースのビューには、 :class:`~django.views."
"generic.base.TemplateResponseMixin` と呼ばれるミックスインがあり、その主な目"
"的はメソッド :meth:`~django.views.generic.base.TemplateResponseMixin."
"render_to_response` を定義することです。 :class:`~django.views.generic.base."
"View` 基底クラスの動作と組み合わせると、適切なマッチングメソッド（ :class:"
"`~django.views.generic.base.View` クラス基底クラスで定義されている動作）にリ"
"クエストをディスパッチする :class:`~django.views.generic.base.TemplateView` "
"メソッドクラスとなり、 :attr:`~django.views.generic.base."
"TemplateResponseMixin.template_name`  属性を使用してTemplateResponseオブジェ"
"クト（``TemplateResponseMixin`` で定義されている動作）を返す :meth:`~django."
"views.generic.base.TemplateResponseMixin.render_to_response` メソッドを持って"
"います。"

msgid ""
"Mixins are an excellent way of reusing code across multiple classes, but "
"they come with some cost. The more your code is scattered among mixins, the "
"harder it will be to read a child class and know what exactly it is doing, "
"and the harder it will be to know which methods from which mixins to "
"override if you are subclassing something that has a deep inheritance tree."
msgstr ""
"ミックスインは複数のクラスにまたがってコードを再利用するためのよい方法です"
"が、それなりの代償も伴います。コードがミックスインの中に散らばると、子クラス"
"を読んだときそのクラスが何をしているのかを正確に知ることが難しくなり、深い継"
"承ツリーを持つクラスをサブクラス化している場合、どのミックスインのどのメソッ"
"ドをオーバーライドすればいいのかわからなくなります。"

msgid ""
"Note also that you can only inherit from one generic view - that is, only "
"one parent class may inherit from :class:`~django.views.generic.base.View` "
"and the rest (if any) should be mixins. Trying to inherit from more than one "
"class that inherits from ``View`` - for example, trying to use a form at the "
"top of a list and combining :class:`~django.views.generic.edit."
"ProcessFormView` and :class:`~django.views.generic.list.ListView` - won't "
"work as expected."
msgstr ""
"また、1つの汎用ビューからしか継承できないことにも注意してください - つまり、"
"親クラスは1つだけ :class:`~django.views.generic.base.View` を継承することがで"
"き、残りのクラスは（もしあれば）ミックスインでなければなりません。``View``  "
"を継承している複数のクラスから継承しようとすると - たとえば、リストの先頭にあ"
"るフォームを使用して  :class:`~django.views.generic.edit.ProcessFormView`  "
"と :class:`~django.views.generic.list.ListView`  を組み合わせようとすると - "
"期待通りには動作しません。"

msgid "Handling forms with class-based views"
msgstr "クラスベースのビューでフォームを扱う"

msgid ""
"A basic function-based view that handles forms may look something like this::"
msgstr "フォームを扱う基本の関数ベースのビューは、次のようなコードになります。"

msgid "A similar class-based view might look like::"
msgstr "同等のクラスベースのビューは、次のようになるでしょう。"

msgid ""
"This is a minimal case, but you can see that you would then have the option "
"of customizing this view by overriding any of the class attributes, e.g. "
"``form_class``, via URLconf configuration, or subclassing and overriding one "
"or more of the methods (or both!)."
msgstr ""
"これは最低限のケースですが、クラス属性を上書きするなどの方法でこのビューをカ"
"スタマイズする手段が用意されていることがわかります。たとえば、 "
"``form_class`` を URLconf 設定で指定したり、サブクラス化して1つ以上のメソッド"
"を上書きしたりすることもできます。"

msgid "Decorating class-based views"
msgstr "クラスベースのビューをデコレーションする"

msgid ""
"The extension of class-based views isn't limited to using mixins. You can "
"also use decorators. Since class-based views aren't functions, decorating "
"them works differently depending on if you're using ``as_view()`` or "
"creating a subclass."
msgstr ""
"クラスベースのビューを拡張する方法は、ミックスインの使用にとどまりません。デ"
"コレータも使用できます。クラスベースのビューは関数ではないので、"
"``as_view()`` を使用した場合とサブクラスを作成した場合では、デコレータは違っ"
"た動作をします。"

msgid "Decorating in URLconf"
msgstr "URLconf でデコレーションする"

msgid ""
"You can adjust class-based views by decorating the result of the :meth:"
"`~django.views.generic.base.View.as_view` method. The easiest place to do "
"this is in the URLconf where you deploy your view::"
msgstr ""
"クラスベースのビューをデコレーションするには、 :meth:`~django.views.generic."
"base.View.as_view` メソッドの結果をデコレートします。これが最も簡単にできる場"
"所は、ビューをデプロイする URLconf の中です。"

msgid ""
"This approach applies the decorator on a per-instance basis. If you want "
"every instance of a view to be decorated, you need to take a different "
"approach."
msgstr ""
"このアプローチではデコレータはインスタンスごとに適用されます。もしあるビュー"
"のすべてのインスタンスをデコレーションしたいばあいは、別のアプローチを取る必"
"要があります。"

msgid "Decorating the class"
msgstr "クラスをデコレーションする"

msgid ""
"To decorate every instance of a class-based view, you need to decorate the "
"class definition itself. To do this you apply the decorator to the :meth:"
"`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""
"クラスベースのビューのすべてのインスタンスをデコレーションするには、クラスの"
"定義自体をデコレーションする必要があります。そのためには、クラスの :meth:"
"`~django.views.generic.base.View.dispatch` メソッドにデコレータを付けます。"

msgid ""
"A method on a class isn't quite the same as a standalone function, so you "
"can't just apply a function decorator to the method -- you need to transform "
"it into a method decorator first. The ``method_decorator`` decorator "
"transforms a function decorator into a method decorator so that it can be "
"used on an instance method. For example::"
msgstr ""
"クラス上のメソッドはスタンドアロンの関数と完全に同じではないため、関数デコ"
"レータを単純にそのままメソッドに適用することはできません。適用前にメソッドデ"
"コレータに変換する必要があります。``method_decorator`` デコレータを使えば、関"
"数デコレータをメソッドデコレータに変換し、インスタンスのメソッドのデコレー"
"ションに使えるようにできます。たとえば、次のように使用します。"

msgid ""
"Or, more succinctly, you can decorate the class instead and pass the name of "
"the method to be decorated as the keyword argument ``name``::"
msgstr ""
"あるいは、より簡潔に、クラスを代わりにデコレートして、デコレーション対象のメ"
"ソッド名をキーワード引数 ``name`` に渡すという方法もあります。"

msgid ""
"If you have a set of common decorators used in several places, you can "
"define a list or tuple of decorators and use this instead of invoking "
"``method_decorator()`` multiple times. These two classes are equivalent::"
msgstr ""
"共通のデコレータ群が複数の場所で呼ばれる場合には、デコレータのリストまたはタ"
"プルを定義して、これを ``method_decorator()`` を複数回呼ぶ代わりに使用できま"
"す。以下の2つのクラスは同じになります。"

msgid ""
"The decorators will process a request in the order they are passed to the "
"decorator. In the example, ``never_cache()`` will process the request before "
"``login_required()``."
msgstr ""
"デコレータは、デコレータに渡された順番でリクエストを処理します。上の例では、"
"``never_cache()`` が ``login_required()`` の前にリクエストを処理します。"

msgid ""
"In this example, every instance of ``ProtectedView`` will have login "
"protection. These examples use ``login_required``, however, the same "
"behavior can be obtained by using :class:`~django.contrib.auth.mixins."
"LoginRequiredMixin`."
msgstr ""
"この例では、 ``ProtectedView`` のすべてのインスタンスがログイン保護されます。"
"これらの例では ``login_required`` を使っていますが、 :class:`~django.contrib."
"auth.mixins.LoginRequiredMixin` を使っても同じことができます。"

msgid ""
"``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the "
"decorated method on the class. If your method does not accept a compatible "
"set of parameters it will raise a ``TypeError`` exception."
msgstr ""
"``method_decorator`` は、クラスのデコレートするメソッドに ``*args`` と "
"``**kwargs`` を引数として渡します。定義されているメソッドが互換性のある引数の"
"セットを受け取れない場合には ``TypeError`` 例外が発生します。"

msgid "Using mixins with class-based views"
msgstr "クラスベースのビューでミックスイン (mixin) を使用する"

msgid ""
"This is an advanced topic. A working knowledge of :doc:`Django's class-based "
"views<index>` is advised before exploring these techniques."
msgstr ""
"これは発展的なトピックです。これらのテクニックについて詳しく読む前に、:doc:"
"`Django のクラスベースビュー <index>` で動作のしくみを知っておくことをおすす"
"めします。"

msgid ""
"Django's built-in class-based views provide a lot of functionality, but some "
"of it you may want to use separately. For instance, you may want to write a "
"view that renders a template to make the HTTP response, but you can't use :"
"class:`~django.views.generic.base.TemplateView`; perhaps you need to render "
"a template only on ``POST``, with ``GET`` doing something else entirely. "
"While you could use :class:`~django.template.response.TemplateResponse` "
"directly, this will likely result in duplicate code."
msgstr ""
"Django のビルトインのクラスベースビューではたくさんの機能が準備されています"
"が、個別に使いたい機能もあるかもしれません。たとえば、HTTP レスポンスを生成す"
"るテンプレートをレンダリングするビューを記述したいとき、:class:`~django."
"views.generic.base.TemplateView` は使えない状況もあります; ``POST`` ではテン"
"プレートをレンダリングするだけで、``GET`` のときはまったく異なる処理がしたい"
"ときなどです。この場合、:class:`~django.template.response.TemplateResponse` "
"を直接使えますが、コードが重複する結果となってしまいます。 "

msgid ""
"For this reason, Django also provides a number of mixins that provide more "
"discrete functionality. Template rendering, for instance, is encapsulated in "
"the :class:`~django.views.generic.base.TemplateResponseMixin`. The Django "
"reference documentation contains :doc:`full documentation of all the mixins</"
"ref/class-based-views/mixins>`."
msgstr ""
"この理由から、Django は個別の機能を提供する多くの mixin を用意しています。た"
"とえば、テンプレートのレンダリングは :class:`~django.views.generic.base."
"TemplateResponseMixin` でカプセル化されています。Django のリファレンスドキュ"
"メントには  :doc:`すべてのミックスインの完全なドキュメント </ref/class-based-"
"views/mixins>` があります。"

msgid "Context and template responses"
msgstr "コンテキストとテンプレートのレスポンス"

msgid ""
"Two central mixins are provided that help in providing a consistent "
"interface to working with templates in class-based views."
msgstr ""
"2 つの中心的なミックスイン (mixin) が用意されており、クラスベースビュー内のテ"
"ンプレートを扱うインターフェースに一貫性を保ちやすくなっています。"

msgid ":class:`~django.views.generic.base.TemplateResponseMixin`"
msgstr ":class:`~django.views.generic.base.TemplateResponseMixin`"

msgid ""
"Every built in view which returns a :class:`~django.template.response."
"TemplateResponse` will call the :meth:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response()` method that "
"``TemplateResponseMixin`` provides. Most of the time this will be called for "
"you (for instance, it is called by the ``get()`` method implemented by both :"
"class:`~django.views.generic.base.TemplateView` and :class:`~django.views."
"generic.detail.DetailView`); similarly, it's unlikely that you'll need to "
"override it, although if you want your response to return something not "
"rendered via a Django template then you'll want to do it. For an example of "
"this, see the :ref:`JSONResponseMixin example <jsonresponsemixin-example>`."
msgstr ""
":class:`~django.template.response.TemplateResponse` を返すビルトインビューは"
"全て、 ``TemplateResponseMixin`` が提供する :meth:`~django.views.generic."
"base.TemplateResponseMixin.render_to_response()` メソッドを呼び出します。ほと"
"んどの場合、これはあなたによって呼び出されます(たとえば、 :class:`~django."
"views.generic.base.TemplateView` と :class:`~django.views.generic.detail."
"DetailView`)の両方で実装されている ``get()`` メソッドによって)。同様に、これ"
"をオーバーライドする必要はほとんどありませんが、Django テンプレートでレンダリ"
"ングされていないものを返したい場合は、オーバーライドする必要があるでしょう。"
"この例については、 :ref:`JSONResponseMixin の例 <jsonresponsemixin-example>` "
"を参照してください。"

msgid ""
"``render_to_response()`` itself calls :meth:`~django.views.generic.base."
"TemplateResponseMixin.get_template_names`, which by default will look up :"
"attr:`~django.views.generic.base.TemplateResponseMixin.template_name` on the "
"class-based view; two other mixins (:class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` and :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`) override this to provide more flexible "
"defaults when dealing with actual objects."
msgstr ""
"``render_to_response()`` 自体は :meth:`~django.views.generic.base."
"TemplateResponseMixin.get_template_names` を呼び出しますが、デフォルトではク"
"ラスベースのビューで :attr:`~django.views.generic.base.TemplateResponseMixin."
"template_name` を検索します。他の2つのミックスイン (:class:`~django.views."
"generic.detail.SingleObjectTemplateResponseMixin` と :class:`~django.views."
"generic.list.MultipleObjectTemplateResponseMixin`) は、実際のオブジェクトを扱"
"うときに、より柔軟なデフォルトを提供するためにこれをオーバーライドします。"

msgid ":class:`~django.views.generic.base.ContextMixin`"
msgstr ":class:`~django.views.generic.base.ContextMixin`"

msgid ""
"Every built in view which needs context data, such as for rendering a "
"template (including ``TemplateResponseMixin`` above), should call :meth:"
"`~django.views.generic.base.ContextMixin.get_context_data()` passing any "
"data they want to ensure is in there as keyword arguments. "
"``get_context_data()`` returns a dictionary; in ``ContextMixin`` it returns "
"its keyword arguments, but it is common to override this to add more members "
"to the dictionary. You can also use the :attr:`~django.views.generic.base."
"ContextMixin.extra_context` attribute."
msgstr ""
"コンテキストデータが必要なすべての組み込みビュー、たとえばテンプレート (上述"
"の ``TemplateResponseMixin`` を含む) をレンダリングするには、 :meth:`~django."
"views.generic.base.ContextMixin.get_context_data()` を呼び出し、そこに含めた"
"いデータをキーワード引数として渡してください。``get_context_data()`` は辞書を"
"返します。``ContextMixin`` ではキーワード引数を返しますが、辞書にさらにメン"
"バーを追加するためにこれをオーバーライドすることはよく行われます。また、:"
"attr:`~django.views.generic.base.ContextMixin.extra_context` 属性も使用できま"
"す。"

msgid "Building up Django's generic class-based views"
msgstr "Django の一般的なクラスベースのビューを構築する"

msgid ""
"Let's look at how two of Django's generic class-based views are built out of "
"mixins providing discrete functionality. We'll consider :class:`~django."
"views.generic.detail.DetailView`, which renders a \"detail\" view of an "
"object, and :class:`~django.views.generic.list.ListView`, which will render "
"a list of objects, typically from a queryset, and optionally paginate them. "
"This will introduce us to four mixins which between them provide useful "
"functionality when working with either a single Django object, or multiple "
"objects."
msgstr ""
"Djangoのクラスベースのジェネリックビューが、個々の機能を提供するミックスイン"
"からどのように構築されているか見てみましょう。オブジェクトの「詳細」ビューを"
"レンダリングする :class:`~django.views.generic.detail.DetailView` と、クエリ"
"セットから典型的にオブジェクトのリストをレンダリングし、オプションでページ分"
"割する :class:`~django.views.generic.list.ListView` を考えます。これにより、"
"単一のDjangoオブジェクトや複数のオブジェクトを扱う際に便利な機能を提供する4つ"
"のミックスインについて紹介します。"

msgid ""
"There are also mixins involved in the generic edit views (:class:`~django."
"views.generic.edit.FormView`, and the model-specific views :class:`~django."
"views.generic.edit.CreateView`, :class:`~django.views.generic.edit."
"UpdateView` and :class:`~django.views.generic.edit.DeleteView`), and in the "
"date-based generic views. These are covered in the :doc:`mixin reference "
"documentation</ref/class-based-views/mixins>`."
msgstr ""
"ジェネリック編集ビュー (:class:`~django.views.generic.edit.FormView` と、モデ"
"ル固有のビュー :class:`~django.views.generic.edit.CreateView`, :class:"
"`~django.views.generic.edit.UpdateView`, :class:`~django.views.generic.edit."
"DeleteView`) と日付ベースのジェネリックビューにもミックスインがあります。これ"
"らは :doc:`ミックスインのリファレンス </ref/class-based-views/mixins>` で紹介"
"されています。"

msgid "``DetailView``: working with a single Django object"
msgstr "``DetailView``: Django の1つのオブジェクトを対象とするビュー"

msgid ""
"To show the detail of an object, we basically need to do two things: we need "
"to look up the object and then we need to make a :class:`~django.template."
"response.TemplateResponse` with a suitable template, and that object as "
"context."
msgstr ""
"オブジェクトの詳細を表示するためには、基本的に2つの作業が必要です。まずはオブ"
"ジェクトを検索し、それから適切なテンプレートと、そのオブジェクトをコンテキス"
"トとして、 :class:`~django.template.response.TemplateResponse` を作成します。"

msgid ""
"To get the object, :class:`~django.views.generic.detail.DetailView` relies "
"on :class:`~django.views.generic.detail.SingleObjectMixin`, which provides "
"a :meth:`~django.views.generic.detail.SingleObjectMixin.get_object` method "
"that figures out the object based on the URL of the request (it looks for "
"``pk`` and ``slug`` keyword arguments as declared in the URLConf, and looks "
"the object up either from the :attr:`~django.views.generic.detail."
"SingleObjectMixin.model` attribute on the view, or the :attr:`~django.views."
"generic.detail.SingleObjectMixin.queryset` attribute if that's provided). "
"``SingleObjectMixin`` also overrides :meth:`~django.views.generic.base."
"ContextMixin.get_context_data()`, which is used across all Django's built in "
"class-based views to supply context data for template renders."
msgstr ""
"オブジェクトを取得するために、 :class:`~django.views.generic.detail."
"DetailView` は :class:`~django.views.generic.detail.SingleObjectMixin` に依存"
"しています。このクラスではリクエストURLに基づいてオブジェクトを見つけ出すメ"
"ソッド :meth:`~django.views.generic.detail.SingleObjectMixin.get_object` を提"
"供しています(このメソッドでは URLConfで宣言されている ``pk`` および ``slug`` "
"キーワード引数を検索し、ビューの :attr:`~django.views.generic.detail."
"SingleObjectMixin.model` 属性、あるいは提供されている場合は :attr:`~django."
"views.generic.detail.SingleObjectMixin.queryset` 属性からオブジェクトを検索し"
"ます)。 ``SingleObjectMixin`` はまた :meth:`~django.views.generic.base."
"ContextMixin.get_context_data()` メソッドも提供しています。このメソッドでは、"
"テンプレートレンダーに渡すコンテキストデータを提供するために、Django組み込み"
"のクラスベースビュー全てで使われています。"

msgid ""
"To then make a :class:`~django.template.response.TemplateResponse`, :class:"
"`DetailView` uses :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`, which extends :class:`~django.views."
"generic.base.TemplateResponseMixin`, overriding :meth:`~django.views.generic."
"base.TemplateResponseMixin.get_template_names()` as discussed above. It "
"actually provides a fairly sophisticated set of options, but the main one "
"that most people are going to use is ``<app_label>/<model_name>_detail."
"html``. The ``_detail`` part can be changed by setting :attr:`~django.views."
"generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix` on a "
"subclass to something else. (For instance, the :doc:`generic edit "
"views<generic-editing>` use ``_form`` for create and update views, and "
"``_confirm_delete`` for delete views.)"
msgstr ""
":class:`~django.template.response.TemplateResponse` を作成するために、:class:"
"`DetailView` は :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` を使用します。これは :class:`~django."
"views.generic.base.TemplateResponseMixin` を拡張し、上記のように :meth:"
"`~django.views.generic.base.TemplateResponseMixin.get_template_names()` を"
"オーバーライドします。実際にはかなり洗練されたオプションのセットを提供してい"
"ますが、ほとんどの人が使用する主なものは ``<app_label>/<model_name>_detail."
"html`` です。``_detail`` 部分は、サブクラス上の :attr:`~django.views.generic."
"detail.SingleObjectTemplateResponseMixin.template_name_suffix` を別のものに設"
"定することで変更できます。（例えば、:doc:`ジェネリック編集ビュー<generic-"
"editing>` は、作成および更新ビューに ``_form`` を、削除ビューには "
"``_confirm_delete`` を使用します。）"

msgid "``ListView``: working with many Django objects"
msgstr "``ListView``: Django の複数のオブジェクトを対象とするビュー"

msgid ""
"Lists of objects follow roughly the same pattern: we need a (possibly "
"paginated) list of objects, typically a :class:`~django.db.models.query."
"QuerySet`, and then we need to make a :class:`~django.template.response."
"TemplateResponse` with a suitable template using that list of objects."
msgstr ""
"オブジェクトのリストもおおよそ同じパターンに従います。オブジェクトの (おそら"
"くページ分割された) リスト、典型的には :class:`~django.db.models.query."
"QuerySet` が必要で、次にそのオブジェクトのリストを使って、適切なテンプレート"
"で :class:`~django.template.response.TemplateResponse` を作る必要があります。"

msgid ""
"To get the objects, :class:`~django.views.generic.list.ListView` uses :class:"
"`~django.views.generic.list.MultipleObjectMixin`, which provides both :meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_queryset` and :meth:"
"`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`. Unlike "
"with :class:`~django.views.generic.detail.SingleObjectMixin`, there's no "
"need to key off parts of the URL to figure out the queryset to work with, so "
"the default uses the :attr:`~django.views.generic.list.MultipleObjectMixin."
"queryset` or :attr:`~django.views.generic.list.MultipleObjectMixin.model` "
"attribute on the view class. A common reason to override :meth:`~django."
"views.generic.list.MultipleObjectMixin.get_queryset` here would be to "
"dynamically vary the objects, such as depending on the current user or to "
"exclude posts in the future for a blog."
msgstr ""
"オブジェクトを取得するために、 :class:`~django.views.generic.list.ListView` "
"は :class:`~django.views.generic.list.MultipleObjectMixin` を使用します。この"
"ミックスインは、 :meth:`~django.views.generic.list.MultipleObjectMixin."
"get_queryset` と :meth:`~django.views.generic.list.MultipleObjectMixin."
"paginate_queryset` の両方を提供します。 :class:`~django.views.generic.detail."
"SingleObjectMixin` とは異なり、URL の一部をキーにしてクエリセットを特定する必"
"要はありません。そのため、デフォルトではビュークラスの :attr:`~django.views."
"generic.list.MultipleObjectMixin.queryset` または :attr:`~django.views."
"generic.list.MultipleObjectMixin.model` 属性が使用されます。ここで :meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_queryset` をオーバーライ"
"ドする一般的な理由は、現在のユーザーに依存するなど、オブジェクトを動的に変化"
"させることで、ブログの場合は将来の投稿を除外することなどが理由となるでしょ"
"う。"

msgid ""
":class:`~django.views.generic.list.MultipleObjectMixin` also overrides :meth:"
"`~django.views.generic.base.ContextMixin.get_context_data()` to include "
"appropriate context variables for pagination (providing dummies if "
"pagination is disabled). It relies on ``object_list`` being passed in as a "
"keyword argument, which :class:`ListView` arranges for it."
msgstr ""
":class:`~django.views.generic.list.MultipleObjectMixin` も :meth:`~django."
"views.generic.base.ContextMixin.get_context_data()` をオーバーライドして、"
"ページ分割に適切なコンテキスト変数を含めます(ページ分割が無効な場合はダミーを"
"提供します)。これは ``object_list`` がキーワード引数として渡される動作に依存"
"しており、 :class:`ListView` がそれを調整します。"

msgid ""
"To make a :class:`~django.template.response.TemplateResponse`, :class:"
"`ListView` then uses :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`; as with :class:`~django.views.generic."
"detail.SingleObjectTemplateResponseMixin` above, this overrides "
"``get_template_names()`` to provide :meth:`a range of options <django.views."
"generic.list.MultipleObjectTemplateResponseMixin>`, with the most commonly-"
"used being ``<app_label>/<model_name>_list.html``, with the ``_list`` part "
"again being taken from the :attr:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin.template_name_suffix` attribute. (The "
"date based generic views use suffixes such as ``_archive``, "
"``_archive_year`` and so on to use different templates for the various "
"specialized date-based list views.)"
msgstr ""
":class:`~django.template.response.TemplateResponse` を作成するために、 :"
"class:`ListView` は :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin` を使用します。上記の :class:`~django."
"views.generic.detail.SingleObjectTemplateResponseMixin` と同様に、これは "
"``get_template_names()`` をオーバーライドして、:meth:`さまざまなオプション "
"<django.views.generic.list.MultipleObjectTemplateResponseMixin>` を提供しま"
"す。最もよく使われるのは ``<app_label>/<model_name>_list.html`` で、"
"``_list`` の部分は :attr:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin.template_name_suffix` 属性から取得されま"
"す。（日付ベースのジェネリックビューでは、 ``_archive`` や ``_archive_year`` "
"などの接尾辞を使用して、様々な用途に特化した日付ベースのリストビューで、異な"
"るテンプレートを使用します）"

msgid "Using Django's class-based view mixins"
msgstr "Django のクラスベースのビューのミックスイン (mixin) を使用する"

msgid ""
"Now we've seen how Django's generic class-based views use the provided "
"mixins, let's look at other ways we can combine them. We're still going to "
"be combining them with either built-in class-based views, or other generic "
"class-based views, but there are a range of rarer problems you can solve "
"than are provided for by Django out of the box."
msgstr ""
"Django のクラスベースのジェネリックビューが、提供されたミックスインをどのよう"
"に使うか見てきたので、それらを組み合わせる他の方法を見てみましょう。組み込み"
"のクラスベースのビューや、他のクラスベースのジェネリックビューと組み合わせる"
"ことに変わりはありませんが、Django を「箱から出してすぐに」使えるものよりも、"
"もっとレアな問題をカバーしています。"

msgid ""
"Not all mixins can be used together, and not all generic class based views "
"can be used with all other mixins. Here we present a few examples that do "
"work; if you want to bring together other functionality then you'll have to "
"consider interactions between attributes and methods that overlap between "
"the different classes you're using, and how `method resolution order`_ will "
"affect which versions of the methods will be called in what order."
msgstr ""
"すべてのミックスインを一緒に使用することができるわけではなく、すべてのクラス"
"ベースのジェネリックビューをすべての他のミックスインと一緒に使用することもで"
"きません。ここではいくつかの動作する例を紹介します。他の機能を組み合わせる場"
"合は、使用するさまざまなクラス間で重複する属性やメソッドの相互作用、および "
"`method resolution order`_ （メソッド解決順序: MRO）が、どのバージョンのメ"
"ソッドがどんな順番で呼び出されるかに影響することを考慮する必要があります。"

msgid ""
"The reference documentation for Django's :doc:`class-based views</ref/class-"
"based-views/index>` and :doc:`class-based view mixins</ref/class-based-views/"
"mixins>` will help you in understanding which attributes and methods are "
"likely to cause conflict between different classes and mixins."
msgstr ""
"Django の :doc:`クラスベースビュー</ref/class-based-views/index>` および :"
"doc:`クラスベースビュー ミックスイン </ref/class-based-views/mixins>` のリ"
"ファレンスドキュメントは、異なるクラスやミックスイン間でよく競合を引き起こす"
"属性やメソッドを理解するのに役立ちます。"

msgid ""
"If in doubt, it's often better to back off and base your work on :class:"
"`View` or :class:`TemplateView`, perhaps with :class:`~django.views.generic."
"detail.SingleObjectMixin` and :class:`~django.views.generic.list."
"MultipleObjectMixin`. Although you will probably end up writing more code, "
"it is more likely to be clearly understandable to someone else coming to it "
"later, and with fewer interactions to worry about you will save yourself "
"some thinking. (Of course, you can always dip into Django's implementation "
"of the generic class-based views for inspiration on how to tackle problems.)"
msgstr ""
"もし迷ったら、 :class:`View` や :class:`TemplateView` をベースにして、 :"
"class:`~django.views.generic.detail.SingleObjectMixin` や :class:`~django."
"views.generic.list.MultipleObjectMixin` を使うのが良いでしょう。おそらく、よ"
"り多くのコードを書くことになるでしょうが、後でそのコードに辿り着いた他の誰か"
"が明確に理解できる可能性が高くなります。(もちろん、Django のクラスベースの"
"ジェネリックビューの実装を見て、問題への取り組み方のヒントを得ることもできま"
"す)。"

msgid "Using ``SingleObjectMixin`` with View"
msgstr "ビューで ``SingleObjectMixin`` を使用する"

msgid ""
"If we want to write a class-based view that responds only to ``POST``, we'll "
"subclass :class:`~django.views.generic.base.View` and write a ``post()`` "
"method in the subclass. However if we want our processing to work on a "
"particular object, identified from the URL, we'll want the functionality "
"provided by :class:`~django.views.generic.detail.SingleObjectMixin`."
msgstr ""
"もし ``POST`` にのみ反応するクラスベースのビューを書きたいのであれば、 :"
"class:`~django.views.generic.base.View` をサブクラス化し、その中に "
"``post()`` メソッドを書きます。しかし、URLから特定したオブジェクトに対して処"
"理を行いたい場合、 :class:`~django.views.generic.detail.SingleObjectMixin` が"
"提供する機能が必要になります。"

msgid ""
"We'll demonstrate this with the ``Author`` model we used in the :doc:"
"`generic class-based views introduction<generic-display>`."
msgstr ""
":doc:`クラスベースのジェネリックビューのイントロダクション <generic-"
"display>` で使用した ``Author`` モデルを使って、このデモンストレーションを行"
"います。"

msgid ""
"In practice you'd probably want to record the interest in a key-value store "
"rather than in a relational database, so we've left that bit out. The only "
"bit of the view that needs to worry about using :class:`~django.views."
"generic.detail.SingleObjectMixin` is where we want to look up the author "
"we're interested in, which it does with a call to ``self.get_object()``. "
"Everything else is taken care of for us by the mixin."
msgstr ""
"実際には、リレーショナルデータベースではなく、キーバリューストアに関心事を記"
"録したいと思うでしょう。その部分は省略しました。 :class:`~django.views."
"generic.detail.SingleObjectMixin` を使用するビューで興味があるのは作者を調べ"
"るところだけで、これは ``self.get_object()`` を呼び出すことで行います。それ以"
"外は全てミックスインが行ってくれます。"

msgid "We can hook this into our URLs easily enough:"
msgstr "これをURLにフックするのは簡単です:"

msgid ""
"Note the ``pk`` named group, which :meth:`~django.views.generic.detail."
"SingleObjectMixin.get_object` uses to look up the ``Author`` instance. You "
"could also use a slug, or any of the other features of :class:`~django.views."
"generic.detail.SingleObjectMixin`."
msgstr ""
"``pk`` という名前のグループに注目してください。 :meth:`~django.views.generic."
"detail.SingleObjectMixin.get_object` は ``Author`` のインスタンスを検索するた"
"めに使用します。スラグを使うこともできますし、 :class:`~django.views.generic."
"detail.SingleObjectMixin` の他の機能を使うこともできます。"

msgid "Using ``SingleObjectMixin`` with ``ListView``"
msgstr "``ListView`` で ``SingleObjectMixin`` を使用する"

msgid ""
":class:`~django.views.generic.list.ListView` provides built-in pagination, "
"but you might want to paginate a list of objects that are all linked (by a "
"foreign key) to another object. In our publishing example, you might want to "
"paginate through all the books by a particular publisher."
msgstr ""
":class:`~django.views.generic.list.ListView` は組み込みのページ分割を提供しま"
"すが、別のオブジェクトに(外部キーで)リンクされたオブジェクトのリストをページ"
"分割したいかもしれません。出版の例では、特定の出版社のすべての本をページ分割"
"したいかもしれません。"

msgid ""
"One way to do this is to combine :class:`ListView` with :class:`~django."
"views.generic.detail.SingleObjectMixin`, so that the queryset for the "
"paginated list of books can hang off the publisher found as the single "
"object. In order to do this, we need to have two different querysets:"
msgstr ""
"これを行う1つの方法は、 :class:`ListView` と :class:`~django.views.generic."
"detail.SingleObjectMixin` を組み合わせることで、ページ分割された本のリストの"
"クエリセットを、見つかった出版社から単一のオブジェクトとしてぶら下げることが"
"できます。これを行うには、2つの異なるクエリセットを用意する必要があります:"

msgid ""
"``Book`` queryset for use by :class:`~django.views.generic.list.ListView`"
msgstr ""
":class:`~django.views.generic.list.ListView` で使用するための ``Book`` の ク"
"エリセット"

msgid ""
"Since we have access to the ``Publisher`` whose books we want to list, we "
"override ``get_queryset()`` and use the ``Publisher``’s :ref:`reverse "
"foreign key manager<backwards-related-objects>`."
msgstr ""
"リストアップしたい本の ``Publisher`` にアクセスできるので、 "
"``get_queryset()`` をオーバーライドして、 ``Publisher`` の :ref:`逆方向の外部"
"キーマネージャ <backwards-related-objects>` を使用します。"

msgid ""
"``Publisher`` queryset for use in :meth:`~django.views.generic.detail."
"SingleObjectMixin.get_object()`"
msgstr ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_object()` で使用す"
"る ``Publisher`` クエリセットです。"

msgid ""
"We'll rely on the default implementation of ``get_object()`` to fetch the "
"correct ``Publisher`` object. However, we need to explicitly pass a "
"``queryset`` argument because otherwise the default implementation of "
"``get_object()`` would call ``get_queryset()`` which we have overridden to "
"return ``Book`` objects instead of ``Publisher`` ones."
msgstr ""
"正しい ``Publisher`` オブジェクトを取得するには、デフォルトの "
"``get_object()`` の実装に頼りましょう。ただし、明示的に ``queryset`` 引数を渡"
"さなければなりません。なぜなら、デフォルトの ``get_object()`` の実装では "
"``get_queryset()`` を呼び出しますが、これは ``Publisher`` の代わりに "
"``Book`` オブジェクトを返すようにオーバーライドしているからです。"

msgid ""
"We have to think carefully about ``get_context_data()``. Since both :class:"
"`~django.views.generic.detail.SingleObjectMixin` and :class:`ListView` will "
"put things in the context data under the value of ``context_object_name`` if "
"it's set, we'll instead explicitly ensure the ``Publisher`` is in the "
"context data. :class:`ListView` will add in the suitable ``page_obj`` and "
"``paginator`` for us providing we remember to call ``super()``."
msgstr ""
"``get_context_data()`` については慎重に考える必要があります。 "
"``context_object_name`` がセットされている場合、 :class:`~django.views."
"generic.detail.SingleObjectMixin` と :class:`ListView` の両方がその値のもとの"
"コンテキストデータに格納されます。そのため、代わりに ``Publisher`` が明示的に"
"コンテキストデータに含まれるようにする必要があります。 :class:`ListView` は "
"``super()`` を呼び出すことを忘れなければ、適切な ``page_obj`` と "
"``paginator`` を自動で追加してくれます。"

msgid "Now we can write a new ``PublisherDetailView``::"
msgstr "これで新しい ``PublisherDetailView`` を書くことができます:"

msgid ""
"Notice how we set ``self.object`` within ``get()`` so we can use it again "
"later in ``get_context_data()`` and ``get_queryset()``. If you don't set "
"``template_name``, the template will default to the normal :class:`ListView` "
"choice, which in this case would be ``\"books/book_list.html\"`` because "
"it's a list of books; :class:`ListView` knows nothing about :class:`~django."
"views.generic.detail.SingleObjectMixin`, so it doesn't have any clue this "
"view is anything to do with a ``Publisher``."
msgstr ""
"``get()`` 内で ``self.object`` を設定していることに注目してください。これによ"
"り、後で ``get_context_data()`` や ``get_queryset()`` で再利用できます。 "
"``template_name`` を指定しない場合、テンプレートは通常の :class:`ListView` の"
"選択肢にデフォルトで設定されます。この場合、それは ``\"books/book_list."
"html\"`` になります。なぜなら、これは本のリストだからです。 :class:"
"`ListView` は :class:`~django.views.generic.detail.SingleObjectMixin` につい"
"て何も知らないため、このビューが ``Publisher`` と関連していることを全く理解し"
"ていません。"

msgid ""
"The ``paginate_by`` is deliberately small in the example so you don't have "
"to create lots of books to see the pagination working! Here's the template "
"you'd want to use:"
msgstr ""
"この例では ``paginate_by`` を意図的に小さくしているので、ページ分割の動作を確"
"認するためにたくさんのブックを作成する必要はありません！以下が使いたいテンプ"
"レートです:"

msgid "Avoid anything more complex"
msgstr "これより複雑なことはやめておきましょう"

msgid ""
"Generally you can use :class:`~django.views.generic.base."
"TemplateResponseMixin` and :class:`~django.views.generic.detail."
"SingleObjectMixin` when you need their functionality. As shown above, with a "
"bit of care you can even combine ``SingleObjectMixin`` with :class:`~django."
"views.generic.list.ListView`. However things get increasingly complex as you "
"try to do so, and a good rule of thumb is:"
msgstr ""
"一般的に必要な機能は、 :class:`~django.views.generic.base."
"TemplateResponseMixin` や :class:`~django.views.generic.detail."
"SingleObjectMixin` で実現できます。上記のように、少し注意すれば、"
"``SingleObjectMixin`` を :class:`~django.views.generic.list.ListView` と組み"
"合わせることもできます。しかし、そうするとますます複雑になります。適切な判断"
"基準は以下の通りです:"

msgid ""
"Each of your views should use only mixins or views from one of the groups of "
"generic class-based views: :doc:`detail, list<generic-display>`, :doc:"
"`editing<generic-editing>` and date. For example it's fine to combine :class:"
"`TemplateView` (built in view) with :class:`~django.views.generic.list."
"MultipleObjectMixin` (generic list), but you're likely to have problems "
"combining ``SingleObjectMixin`` (generic detail) with "
"``MultipleObjectMixin`` (generic list)."
msgstr ""
"各ビューでは、 :doc:`detail, list <generic-display>`, :doc:`editing <generic-"
"editing>`, date のようなクラスベースのジェネリックビューのグループのミックス"
"イン/ビューのうち、それぞれ1つだけを使うようにしてください。たとえば、 :"
"class:`TemplateView` (組み込みのビュー) と :class:`~django.views.generic."
"list.MultipleObjectMixin` (ジェネリックリスト) の組み合わせは問題ありません"
"が、 ``SingleObjectMixin`` (ジェネリック詳細ビュー) と "
"``MultipleObjectMixin`` (ジェネリックリストビュー) の組み合わせは問題が発生し"
"やすいでしょう。"

msgid ""
"To show what happens when you try to get more sophisticated, we show an "
"example that sacrifices readability and maintainability when there is a "
"simpler solution. First, let's look at a naive attempt to combine :class:"
"`~django.views.generic.detail.DetailView` with :class:`~django.views.generic."
"edit.FormMixin` to enable us to ``POST`` a Django :class:`~django.forms."
"Form` to the same URL as we're displaying an object using :class:"
"`DetailView`."
msgstr ""
"より洗練されたものにしようとするとどうなるかを示すために、より単純な解決策が"
"ある場合に可読性と保守性を犠牲にする例を示します。まず、 :class:`~django."
"views.generic.detail.DetailView` と :class:`~django.views.generic.edit."
"FormMixin` を組み合わせて、 :class:`DetailView` を使ってオブジェクトを表示し"
"ているのと同じ URL に Django :class:`~django.forms.Form` を ``POST`` できるよ"
"うにしようという素朴な試みを見てみましょう。"

msgid "Using ``FormMixin`` with ``DetailView``"
msgstr "``DetailView`` で ``FormMixin`` を使用する"

msgid ""
"Think back to our earlier example of using :class:`View` and :class:`~django."
"views.generic.detail.SingleObjectMixin` together. We were recording a user's "
"interest in a particular author; say now that we want to let them leave a "
"message saying why they like them. Again, let's assume we're not going to "
"store this in a relational database but instead in something more esoteric "
"that we won't worry about here."
msgstr ""
"先ほどの :class:`View` と :class:`~django.views.generic.detail."
"SingleObjectMixin` を一緒に使う例を思い出してください。ユーザが特定の作者に興"
"味を持ったことを記録していました。ここで、なぜその作者が好きなのか、メッセー"
"ジを残させたいとします。ここではリレーショナルデータベースではなく、より難解"
"な方法で情報を保存することになると仮定しましょう。その詳細についてはここでは"
"考慮しません。"

msgid ""
"At this point it's natural to reach for a :class:`~django.forms.Form` to "
"encapsulate the information sent from the user's browser to Django. Say also "
"that we're heavily invested in `REST`_, so we want to use the same URL for "
"displaying the author as for capturing the message from the user. Let's "
"rewrite our ``AuthorDetailView`` to do that."
msgstr ""
"この時点で、ユーザのブラウザから Django に送られる情報をカプセル化する :"
"class:`~django.forms.Form` に手を伸ばすのは自然なことです。また、私たちは "
"`REST`_ に重きを置いているので、ユーザからのメッセージを取得するのと同じよう"
"に、作者を表示するのにも同じ URL を使いたいとします。そのために "
"``AuthorDetailView`` を書き換えてみましょう。"

msgid ""
"We'll keep the ``GET`` handling from :class:`DetailView`, although we'll "
"have to add a :class:`~django.forms.Form` into the context data so we can "
"render it in the template. We'll also want to pull in form processing from :"
"class:`~django.views.generic.edit.FormMixin`, and write a bit of code so "
"that on ``POST`` the form gets called appropriately."
msgstr ""
"``GET`` の処理は :class:`DetailView` から引き継ぎますが、コンテキストデータ"
"に :class:`~django.forms.Form` を追加して、テンプレートでレンダリングできるよ"
"うにします。また、 :class:`~django.views.generic.edit.FormMixin` からフォーム"
"処理を取り込みます。そして、 ``POST`` 時にフォームが適切に呼び出されるように"
"コードを少し書きましょう。"

msgid ""
"We use :class:`~django.views.generic.edit.FormMixin` and implement "
"``post()`` ourselves rather than try to mix :class:`DetailView` with :class:"
"`FormView` (which provides a suitable ``post()`` already) because both of "
"the views implement ``get()``, and things would get much more confusing."
msgstr ""
":class:`~django.views.generic.edit.FormMixin` を使用し、自分で ``post()`` を"
"実装します。 :class:`FormView` （すでに適切な ``post()`` を提供している）と :"
"class:`DetailView` は、両方のビューが ``get()`` を実装しているため、混在させ"
"るとより混乱する可能性があるからです。"

msgid "Our new ``AuthorDetailView`` looks like this::"
msgstr "新しい ``AuthorDetailView`` は次のようになります:"

msgid ""
"``get_success_url()`` provides somewhere to redirect to, which gets used in "
"the default implementation of ``form_valid()``. We have to provide our own "
"``post()`` as noted earlier."
msgstr ""
"``get_success_url()`` はリダイレクト先を提供し、デフォルト実装の "
"``form_valid()`` で使用されます。前述のように、独自の ``post()`` を用意する必"
"要があります。"

msgid "A better solution"
msgstr "より良い解決策"

msgid ""
"The number of subtle interactions between :class:`~django.views.generic.edit."
"FormMixin` and :class:`DetailView` is already testing our ability to manage "
"things. It's unlikely you'd want to write this kind of class yourself."
msgstr ""
":class:`~django.views.generic.edit.FormMixin` と :class:`DetailView` の間の微"
"妙な相互作用の数は、すでに私たちの管理能力を試しています。このようなクラスを"
"自分で書こうとは思わないでしょう。"

msgid ""
"In this case, you could write the ``post()`` method yourself, keeping :class:"
"`DetailView` as the only generic functionality, although writing :class:"
"`~django.forms.Form` handling code involves a lot of duplication."
msgstr ""
"この場合、 ``post()`` メソッドを自分で書くことはできますが、 :class:"
"`DetailView` を唯一の汎用機能として保持し、 :class:`~django.forms.Form` を処"
"理するコードを自分で書くことは多くの重複を伴います。"

msgid ""
"Alternatively, it would still be less work than the above approach to have a "
"separate view for processing the form, which could use :class:`~django.views."
"generic.edit.FormView` distinct from :class:`DetailView` without concerns."
msgstr ""
"代わりに、フォームを処理するための別々のビューを持つ方が、上記のアプローチよ"
"りも作業量が少ないでしょう。その場合、 :class:`DetailView` とは別の :class:"
"`~django.views.generic.edit.FormView` を使うことになるでしょう。"

msgid "An alternative better solution"
msgstr "もう一つのより良い解決策"

msgid ""
"What we're really trying to do here is to use two different class based "
"views from the same URL. So why not do just that? We have a very clear "
"division here: ``GET`` requests should get the :class:`DetailView` (with "
"the :class:`~django.forms.Form` added to the context data), and ``POST`` "
"requests should get the :class:`FormView`. Let's set up those views first."
msgstr ""
"ここで本当にやろうとしていることは、同じURLから2つの異なるクラスベースの"
"ビューを使うことです。では、なぜそうしないのでしょうか？ここでは非常に明確な"
"区分があります。 ``GET`` リクエストは :class:`DetailView` (コンテキストデータ"
"に :class:`~django.forms.Form` を追加したもの) を取得し、 ``POST`` リクエスト"
"は :class:`FormView` を取得します。まずはこれらのビューを設定しましょう。"

msgid ""
"The ``AuthorDetailView`` view is almost the same as :ref:`when we first "
"introduced AuthorDetailView<generic-views-extra-work>`; we have to write our "
"own ``get_context_data()`` to make the ``AuthorInterestForm`` available to "
"the template. We'll skip the ``get_object()`` override from before for "
"clarity::"
msgstr ""
"``AuthorDetailView`` ビューは、最初に紹介した :ref:`AuthorDetailView<generic-"
"views-extra-work>` とほとんど同じです。 ``AuthorInterestForm`` をテンプレート"
"で利用できるようにするために、独自の ``get_context_data()`` を書く必要があり"
"ます。わかりやすくするために、先ほどの ``get_object()`` のオーバーライドは省"
"略します:"

msgid ""
"Then the ``AuthorInterestFormView`` is a :class:`FormView`, but we have to "
"bring in :class:`~django.views.generic.detail.SingleObjectMixin` so we can "
"find the author we're talking about, and we have to remember to set "
"``template_name`` to ensure that form errors will render the same template "
"as ``AuthorDetailView`` is using on ``GET``::"
msgstr ""
"次に ``AuthorInterestFormView`` は :class:`FormView` ですが、 :class:"
"`~django.views.generic.detail.SingleObjectMixin` を持ってきて、今話題にしてい"
"る著者を見つけられるようにしなければなりません。また、 ``AuthorDetailView`` "
"が ``GET`` で使用しているのと同じテンプレートをフォームエラーでレンダリングで"
"きるように ``template_name`` を忘れずに指定しなければなりません:"

msgid ""
"Finally we bring this together in a new ``AuthorView`` view. We already know "
"that calling :meth:`~django.views.generic.base.View.as_view()` on a class-"
"based view gives us something that behaves exactly like a function based "
"view, so we can do that at the point we choose between the two subviews."
msgstr ""
"最後に、これを新しい ``AuthorView`` ビューにまとめます。クラスベースのビュー"
"で :meth:`~django.views.generic.base.View.as_view()` を呼び出すと、関数ベース"
"のビューと全く同じように動作するものが得られることは既に知っています。そのた"
"め、2つのサブビューのどちらかを選択する時点でこれを行うことができます。"

msgid ""
"You can pass through keyword arguments to :meth:`~django.views.generic.base."
"View.as_view()` in the same way you would in your URLconf, such as if you "
"wanted the ``AuthorInterestFormView`` behavior to also appear at another URL "
"but using a different template::"
msgstr ""
"キーワード引数を :meth:`~django.views.generic.base.View.as_view()` に渡すに"
"は、 URLconf と同じようにします。例えば、 ``AuthorInterestFormView`` の動作を"
"別の URL にも表示させたいが、別のテンプレートを使いたい場合などです:"

msgid ""
"This approach can also be used with any other generic class-based views or "
"your own class-based views inheriting directly from :class:`View` or :class:"
"`TemplateView`, as it keeps the different views as separate as possible."
msgstr ""
"この方法は、他のクラスベースのジェネリックビューや、 :class:`View` や :class:"
"`TemplateView` を直接継承した独自のクラスベースのビューでも使用できます。異な"
"るビューを可能な限り分離した状態に保つことができるからです。"

msgid "More than just HTML"
msgstr "単純な HTML を超える"

msgid ""
"Where class-based views shine is when you want to do the same thing many "
"times. Suppose you're writing an API, and every view should return JSON "
"instead of rendered HTML."
msgstr ""
"クラスベースビューが役に立つのは、同じことを何度もしたい場合です。たとえば "
"API を作成している場合、全てのビューはレンダリングされた HTML ではなく JSON "
"を返す必要があります。"

msgid ""
"We can create a mixin class to use in all of our views, handling the "
"conversion to JSON once."
msgstr ""
"全てのビューで利用するために、 JSONへの変換処理をするmixinクラスを作成できま"
"す。"

msgid "For example, a JSON mixin might look something like this::"
msgstr "たとえば、JSONのmixinは以下のようになるでしょう。"

msgid ""
"Check out the :doc:`/topics/serialization` documentation for more "
"information on how to correctly transform Django models and querysets into "
"JSON."
msgstr ""
"Djangoモデルやクエリセットを正しくJSONに変換する方法についての詳細は :doc:`/"
"topics/serialization` ドキュメントを参照してください。"

msgid ""
"This mixin provides a ``render_to_json_response()`` method with the same "
"signature as :func:`~django.views.generic.base.TemplateResponseMixin."
"render_to_response()`. To use it, we need to mix it into a ``TemplateView`` "
"for example, and override ``render_to_response()`` to call "
"``render_to_json_response()`` instead::"
msgstr ""
"このmixinは :func:`~django.views.generic.base.TemplateResponseMixin."
"render_to_response()` と同じ引数をもつ ``render_to_json_response()`` メソッド"
"を提供します。これを使用するには、たとえば ``TemplateVIew`` へ取り入れ、 "
"``render_to_response()`` をオーバーライドして代わりに "
"``render_to_json_response()`` を呼び出す必要があります。"

msgid ""
"Equally we could use our mixin with one of the generic views. We can make "
"our own version of :class:`~django.views.generic.detail.DetailView` by "
"mixing ``JSONResponseMixin`` with the :class:`~django.views.generic.detail."
"BaseDetailView` -- (the :class:`~django.views.generic.detail.DetailView` "
"before template rendering behavior has been mixed in)::"
msgstr ""
"同様に、このミックスインをジェネリックビューで使用することもできます。 "
"``JSONResponseMixin`` と :class:`~django.views.generic.detail."
"BaseDetailView` (テンプレートレンダリングの動作が混ざる前の :class:`~django."
"views.generic.detail.DetailView`) をミックスインすることで、 :class:`~django."
"views.generic.detail.DetailView` の独自のバージョンを作ることができます:"

msgid ""
"This view can then be deployed in the same way as any other :class:`~django."
"views.generic.detail.DetailView`, with exactly the same behavior -- except "
"for the format of the response."
msgstr ""
"このビューはレスポンスの作成を除いて、他の :class:`~django.views.generic."
"detail.DetailView` と同じように記述され、同じように動作します。"

msgid ""
"If you want to be really adventurous, you could even mix a :class:`~django."
"views.generic.detail.DetailView` subclass that is able to return *both* HTML "
"and JSON content, depending on some property of the HTTP request, such as a "
"query argument or an HTTP header. Mix in both the ``JSONResponseMixin`` and "
"a :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`, "
"and override the implementation of :func:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response()` to defer to the appropriate "
"rendering method depending on the type of response that the user requested::"
msgstr ""
"本当に冒険をしたいのであれば、クエリ引数や HTTP ヘッダなどの HTTP リクエスト"
"のプロパティに応じて、HTML と JSON の *両方* のコンテンツを返すことができる :"
"class:`~django.views.generic.detail.DetailView` サブクラスを混ぜることもでき"
"ます。 ``JSONResponseMixin`` と :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` の両方をミックスインして、 :func:`~django."
"views.generic.base.TemplateResponseMixin.render_to_response()` の実装をオー"
"バーライドし、ユーザが要求したレスポンスの種類に応じて適切なレンダリングメ"
"ソッドに振り分けます:"

msgid ""
"Because of the way that Python resolves method overloading, the call to "
"``super().render_to_response(context)`` ends up calling the :meth:`~django."
"views.generic.base.TemplateResponseMixin.render_to_response()` "
"implementation of :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""
"Pythonのメソッド多重定義に関する仕様により、 ``super()."
"render_to_response(context)`` の呼び出しは :class:`~django.views.generic."
"base.TemplateResponseMixin` に実装された :meth:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response()` メソッドを呼び出します。"

msgid "Conditional View Processing"
msgstr "条件付きのビュー処理"

msgid ""
"HTTP clients can send a number of headers to tell the server about copies of "
"a resource that they have already seen. This is commonly used when "
"retrieving a web page (using an HTTP ``GET`` request) to avoid sending all "
"the data for something the client has already retrieved. However, the same "
"headers can be used for all HTTP methods (``POST``, ``PUT``, ``DELETE``, "
"etc.)."
msgstr ""
"HTTP クライアントは、さまざまな HTTPヘッダーを送信することで、受信したリソー"
"スについてサーバーに伝えることができます。この方法は、ウェブページを "
"(``GET`` メソッドを利用して) 取得する際に、すでにクライアントが取得している"
"データを送信するのを回避するためによく使われます。しかし、同じヘッダーは、全"
"ての HTTP メソッド (``POST``、``PUT``、``DELETE`` など) で利用できます。"

msgid ""
"For each page (response) that Django sends back from a view, it might "
"provide two HTTP headers: the ``ETag`` header and the ``Last-Modified`` "
"header. These headers are optional on HTTP responses. They can be set by "
"your view function, or you can rely on the :class:`~django.middleware.http."
"ConditionalGetMiddleware` middleware to set the ``ETag`` header."
msgstr ""
"Django がビューから送り返す各ページ (レスポンス) に対して、Django は2種類の "
"HTTP ヘッダ、``ETag`` ヘッダと ``Last-Modified`` ヘッダを提供できます。これら"
"のヘッダは HTTP レスポンス上ではオプションです。ヘッダはビュー関数で設定する"
"ことも、:class:`~django.middleware.http.ConditionalGetMiddleware` ミドルウェ"
"アを使用して ``ETag`` ヘッダを設定してもらうこともできます。"

msgid ""
"When the client next requests the same resource, it might send along a "
"header such as either :rfc:`If-Modified-Since <9110#section-13.1.3>` or :rfc:"
"`If-Unmodified-Since <9110#section-13.1.4>`, containing the date of the last "
"modification time it was sent, or either :rfc:`If-Match "
"<9110#section-13.1.1>` or :rfc:`If-None-Match <9110#section-13.1.2>`, "
"containing the last ``ETag`` it was sent. If the current version of the page "
"matches the ``ETag`` sent by the client, or if the resource has not been "
"modified, a 304 status code can be sent back, instead of a full response, "
"telling the client that nothing has changed.  Depending on the header, if "
"the page has been modified or does not match the ``ETag`` sent by the "
"client, a 412 status code (Precondition Failed) may be returned."
msgstr ""
"クライアントが次に同じリソースをリクエストしたとき、:rfc:`If-Modified-Since "
"<9110#section-13.1.3>` や :rfc:`If-Unmodified-Since <9110#section-13.1.4>` の"
"ような、最後に変更された時刻を含むヘッダ、あるいは、:rfc:`If-Match "
"<9110#section-13.1.1>` や :rfc:`If-None-Match <9110#section-13.1.2>` のよう"
"な、最後に送信された ``ETag`` を含むヘッダとともにリクエストを送信することが"
"あります。もしページの現在のバージョンがクライアントから送信された ``ETag`` "
"と一致するか、リソースが変更されていない場合、完全なレスポンスの代わりに、ス"
"テータスコード304を送り返すことで、クライアントに何も変更がないことを伝えられ"
"ます。ヘッダによりますが、もしページが変更されていなくて、クライアントから送"
"られてきた ``ETag`` とも一致しない場合には、ステータスコード412 "
"(Precondition Failed) が返せます。"

msgid ""
"When you need more fine-grained control you may use per-view conditional "
"processing functions."
msgstr ""
"より細かい粒度のコントロールが必要な場合には、ビューごとの条件付き処理関数を"
"使えます。"

msgid "The ``condition`` decorator"
msgstr "``condition`` デコレータ"

msgid ""
"Sometimes (in fact, quite often) you can create functions to rapidly compute "
"the :rfc:`ETag <9110#section-8.8.3>` value or the last-modified time for a "
"resource, **without** needing to do all the computations needed to construct "
"the full view. Django can then use these functions to provide an \"early "
"bailout\" option for the view processing. Telling the client that the "
"content has not been modified since the last request, perhaps."
msgstr ""
"時には（実際にはかなり頻繁に）、リソースの :rfc:`ETag <9110#section-8.8.3>` "
"値や最終更新時間を迅速に計算する関数も作成できます。これは、完全なビューを構"
"築するために必要なすべての計算を行う **必要がない** 場合です。Django は、これ"
"らの関数を使用して、ビュー処理の「早期脱出」オプションを提供できます。たとえ"
"ば、クライアントに対して、コンテンツが前回のリクエスト以降変更されていないこ"
"とを伝えます。"

msgid ""
"These two functions are passed as parameters to the ``django.views."
"decorators.http.condition`` decorator. This decorator uses the two functions "
"(you only need to supply one, if you can't compute both quantities easily "
"and quickly) to work out if the headers in the HTTP request match those on "
"the resource. If they don't match, a new copy of the resource must be "
"computed and your normal view is called."
msgstr ""
"これら 2 つの関数は ``django.views.decorators.http.condition`` デコレータのパ"
"ラメータとして渡されます。このデコレータは、HTTP リクエストのヘッダがリソース"
"のヘッダと一致するかどうかを調べるために、2 つの関数 (両方の量を簡単かつ迅速"
"に計算できない場合は、1 つだけを渡す必要があります) を使用します。もし一致し"
"なければ、リソースの新しいコピーを計算して通常のビューを呼び出します。"

msgid "The ``condition`` decorator's signature looks like this::"
msgstr "``condition`` デコレータのシグネチャは次のようになります。"

msgid ""
"The two functions, to compute the ETag and the last modified time, will be "
"passed the incoming ``request`` object and the same parameters, in the same "
"order, as the view function they are helping to wrap. The function passed "
"``last_modified_func`` should return a standard datetime value specifying "
"the last time the resource was modified, or ``None`` if the resource doesn't "
"exist. The function passed to the ``etag`` decorator should return a string "
"representing the :rfc:`ETag <9110#section-8.8.3>` for the resource, or "
"``None`` if it doesn't exist."
msgstr ""
"ETag と最終更新時間を計算するための2つの関数は、受信した ``request`` オブジェ"
"クトと、それらがサポートするビュー関数と同じパラメータを、同じ順序で渡されま"
"す。 ``last_modified_func`` に渡された関数は、リソースが最後に変更された時間"
"を指定する標準の datetime 値を返すべきです。または、リソースが存在しない場合"
"は ``None`` を返すべきです。 ``etag`` デコレータに渡された関数は、リソース"
"の :rfc:`ETag <9110#section-8.8.3>` を表す文字列を返すべきです。または、それ"
"が存在しない場合は ``None`` を返すべきです。"

msgid ""
"The decorator sets the ``ETag`` and ``Last-Modified`` headers on the "
"response if they are not already set by the view and if the request's method "
"is safe (``GET`` or ``HEAD``)."
msgstr ""
"デコレータは、それらがビューによってまだ設定されていない場合、そしてリクエス"
"トのメソッドが安全なもの（``GET`` または ``HEAD``）である場合に、レスポンス"
"に ``ETag`` ヘッダと ``Last-Modified`` ヘッダを設定します。"

msgid ""
"Using this feature usefully is probably best explained with an example. "
"Suppose you have this pair of models, representing a small blog system::"
msgstr ""
"この機能を有効に使う方法は、例を挙げて説明するのが一番でしょう。小さなブログ"
"システムを表す次のようなモデルのペアがあるとします。"

msgid ""
"If the front page, displaying the latest blog entries, only changes when you "
"add a new blog entry, you can compute the last modified time very quickly. "
"You need the latest ``published`` date for every entry associated with that "
"blog. One way to do this would be::"
msgstr ""
"最新のブログエントリーを表示するフロントページが、新しいブログエントリーを追"
"加したときだけ変更されるのであれば、最終更新時刻をとても速く計算できます。そ"
"のブログに関連するすべてのエントリーの最新の ``published`` 日付が必要です。こ"
"れを行う一つの方法は次のようなものです。"

msgid ""
"You can then use this function to provide early detection of an unchanged "
"page for your front page view::"
msgstr ""
"この機能を使えば、トップページビューで変更されていないページを早期に検出でき"
"ます。"

msgid "Be careful with the order of decorators"
msgstr "デコレータの順番に注意"

msgid ""
"When ``condition()`` returns a conditional response, any decorators below it "
"will be skipped and won't apply to the response. Therefore, any decorators "
"that need to apply to both the regular view response and a conditional "
"response must be above ``condition()``. In particular, :func:`~django.views."
"decorators.vary.vary_on_cookie`, :func:`~django.views.decorators.vary."
"vary_on_headers`, and :func:`~django.views.decorators.cache.cache_control` "
"should come first because :rfc:`RFC 9110 <9110#section-15.4.5>` requires "
"that the headers they set be present on 304 responses."
msgstr ""
"条件付きレスポンスが ``condition()`` によって返される場合、それ以下のデコレー"
"タはスキップされ、レスポンスに適用されません。したがって、通常のビューレスポ"
"ンスと条件付きレスポンスの両方に適用する必要があるデコレータは "
"``condition()`` より上に置く必要があります。特に、 :func:`~django.views."
"decorators.vary.vary_on_cookie`, :func:`~django.views.decorators.vary."
"vary_on_headers`, :func:`~django.views.decorators.cache.cache_control` は、 :"
"rfc:`RFC 9110 <9110#section-15.4.5>` が 304 レスポンスにヘッダを設定すること"
"を要求しているため、最初に置くべきです。"

msgid "Shortcuts for only computing one value"
msgstr "1つの値を計算するだけのショートカット"

msgid ""
"As a general rule, if you can provide functions to compute *both* the ETag "
"and the last modified time, you should do so. You don't know which headers "
"any given HTTP client will send you, so be prepared to handle both. However, "
"sometimes only one value is easy to compute and Django provides decorators "
"that handle only ETag or only last-modified computations."
msgstr ""
"一般的なルールとして、ETag と最終更新時刻の *両方* を計算する関数を提供できる"
"のであれば、そうすべきです。どの HTTP クライアントがどのヘッダを送ってくるか"
"はわからないので、両方を扱えるように準備しましょう。しかし、片方の値だけを計"
"算するのが簡単な場合もあり、 Django は ETag だけ、あるいは last-modified だけ"
"を計算するデコレータを提供します。"

msgid ""
"The ``django.views.decorators.http.etag`` and ``django.views.decorators.http."
"last_modified`` decorators are passed the same type of functions as the "
"``condition`` decorator. Their signatures are::"
msgstr ""
"``django.views.decorators.http.etag`` と ``django.views.decorators.http."
"last_modified`` デコレータは ``condition`` デコレータと同じ型の関数を渡されま"
"す。これらのシグネチャは次の通りです。"

msgid ""
"We could write the earlier example, which only uses a last-modified "
"function, using one of these decorators::"
msgstr ""
"last-modified 関数だけを使う先ほどの例も、このデコレータを使って書くことがで"
"きます。"

msgid "...or::"
msgstr "もしくは、次のように書きます。"

msgid "Use ``condition`` when testing both conditions"
msgstr "2つの条件をテストする場合に ``condition`` を使う"

msgid ""
"It might look nicer to some people to try and chain the ``etag`` and "
"``last_modified`` decorators if you want to test both preconditions. "
"However, this would lead to incorrect behavior."
msgstr ""
"もし両方の前提条件をテストしたいのであれば、 ``etag`` デコレータと "
"``last_modified`` デコレータを連結させたほうがすっきりするかもしれません。し"
"かし、これは正しくない動作につながります。"

msgid ""
"The first decorator doesn't know anything about the second and might answer "
"that the response is not modified even if the second decorators would "
"determine otherwise. The ``condition`` decorator uses both callback "
"functions simultaneously to work out the right action to take."
msgstr ""
"最初のデコレータは 2 番目のデコレータについて何も知らないので、 2 番目のデコ"
"レータがレスポンスは変更されていると判断した場合でも、変更されていないと答え"
"るかもしれません。条件 ``condition`` デコレータは両方のコールバック関数を同時"
"に使用して、正しい動作を決定します。"

msgid "Using the decorators with other HTTP methods"
msgstr "その他の HTTP メソッドでデコレータを使用する"

msgid ""
"The ``condition`` decorator is useful for more than only ``GET`` and "
"``HEAD`` requests (``HEAD`` requests are the same as ``GET`` in this "
"situation). It can also be used to provide checking for ``POST``, ``PUT`` "
"and ``DELETE`` requests. In these situations, the idea isn't to return a "
"\"not modified\" response, but to tell the client that the resource they are "
"trying to change has been altered in the meantime."
msgstr ""
"``condition`` デコレータは ``GET`` と ``HEAD`` リクエスト以外にも有用です "
"(``HEAD`` リクエストはこの状況では ``GET`` と同じです)。 ``POST``、``PUT``、"
"``DELETE`` リクエストのチェックにも使うことができます。このような状況で"
"は、\"not modified\" 応答を返すのではなく、変更しようとしているリソースがその"
"間に変更されたことをクライアントに伝えることを考えます。"

msgid ""
"For example, consider the following exchange between the client and server:"
msgstr ""
"たとえば、つぎのようなクライアントとサーバを交換する例を考えてみてください。"

msgid "Client requests ``/foo/``."
msgstr "クライアントが ``/foo/`` をリクエストします。"

msgid "Server responds with some content with an ETag of ``\"abcd1234\"``."
msgstr ""
"サーバーは何らかのコンテンツを ``\"abcd1234\"`` という ETag を付けて返しま"
"す。"

msgid ""
"Client sends an HTTP ``PUT`` request to ``/foo/`` to update the resource. It "
"also sends an ``If-Match: \"abcd1234\"`` header to specify the version it is "
"trying to update."
msgstr ""
"クライアントは HTTP ``PUT`` リクエストを ``/foo/`` に送信して、リソースを更新"
"します。``If-Match: \"abcd1234\"`` ヘッダも送信して、更新しようとしているバー"
"ジョンを指定します。"

msgid ""
"Server checks to see if the resource has changed, by computing the ETag the "
"same way it does for a ``GET`` request (using the same function). If the "
"resource *has* changed, it will return a 412 status code, meaning "
"\"precondition failed\"."
msgstr ""
"サーバーは、``GET`` リクエストと同じ方法で (同じ関数を使って) ETag を計算する"
"ことで、リソースが変更されているかどうかをチェックします。もしリソースが *す"
"でに* 変更されていた場合、「precondition failed」を意味するステータスコード"
"412を返します。"

msgid ""
"Client sends a ``GET`` request to ``/foo/``, after receiving a 412 response, "
"to retrieve an updated version of the content before updating it."
msgstr ""
"クライアントは、412レスポンスを受信した後、実際に更新する前に、更新されたバー"
"ジョンのコンテンツを取得するために、``GET`` リクエストを ``/foo/`` に送信しま"
"す。"

msgid ""
"The important thing this example shows is that the same functions can be "
"used to compute the ETag and last modification values in all situations. In "
"fact, you **should** use the same functions, so that the same values are "
"returned every time."
msgstr ""
"この例が示している重要な点は、ETag と最終変更の値を計算するのに、すべての状況"
"で同じ関数が使えるということです。実際、毎回同じ値が返されるように、同じ関数"
"を使う **必要がある** のです。"

msgid "Validator headers with non-safe request methods"
msgstr "安全ではないリクエストメソッドを含むバリデーターヘッダ"

msgid ""
"The ``condition`` decorator only sets validator headers (``ETag`` and ``Last-"
"Modified``) for safe HTTP methods, i.e. ``GET`` and ``HEAD``. If you wish to "
"return them in other cases, set them in your view. See :rfc:"
"`9110#section-9.3.4` to learn about the distinction between setting a "
"validator header in response to requests made with ``PUT`` versus ``POST``."
msgstr ""
"``condition`` デコレータは、安全な HTTP メソッド、つまり ``GET`` と ``HEAD`` "
"に対してのみバリデータヘッダ (``ETag`` と ``Last-Modified``) を設定します。 "
"それ以外の場合にこれらを返したい場合は、ビューで設定してください。 ``PUT`` "
"と ``POST`` のリクエストに対するバリデーションヘッダの設定の違いについては :"
"rfc:`9110#section-9.3.4` を参照してください。"

msgid "Comparison with middleware conditional processing"
msgstr "ミドルウェアの条件付き処理との比較"

msgid ""
"Django provides conditional ``GET`` handling via :class:`django.middleware."
"http.ConditionalGetMiddleware`. While being suitable for many situations, "
"the middleware has limitations for advanced usage:"
msgstr ""
"Django は、:class:`django.middleware.http.ConditionalGetMiddleware` 経由で条"
"件付き ``GET`` 処理を提供しています。多くの状況に適していますが、ミドルウェア"
"は高度な利用に次のような限界があります。"

msgid "It's applied globally to all views in your project."
msgstr "プロジェクト内のすべてのビューにグローバルに適用されてしまう。"

msgid ""
"It doesn't save you from generating the response, which may be expensive."
msgstr ""
"レスポンスを生成する手間が省けるわけではなく、コストがかかる場合がある。"

msgid "It's only appropriate for HTTP ``GET`` requests."
msgstr "HTTP の ``GET`` リクエストに対してのみ適している。"

msgid ""
"You should choose the most appropriate tool for your particular problem "
"here. If you have a way to compute ETags and modification times quickly and "
"if some view takes a while to generate the content, you should consider "
"using the ``condition`` decorator described in this document. If everything "
"already runs fairly quickly, stick to using the middleware and the amount of "
"network traffic sent back to the clients will still be reduced if the view "
"hasn't changed."
msgstr ""
"ここでは、特定の問題に最も適したツールを選択するべきです。もし ETag と変更時"
"刻を高速に計算する手段があり、一部のビューがコンテンツを生成するのに時間がか"
"かるのであれば、このドキュメントで説明した ``condition`` デコレータを使用する"
"ことを検討するべきです。もしすべてがすでにかなり高速に動作しているなら、引き"
"続きミドルウェアを使用し続けてください。ビューが変更されていなければ、クライ"
"アントに送り返されるネットワークトラフィックは、引き続き削減されます。"

msgid "Aggregation"
msgstr "アグリゲーション (集計)"

msgid ""
"The topic guide on :doc:`Django's database-abstraction API </topics/db/"
"queries>` described the way that you can use Django queries that create, "
"retrieve, update and delete individual objects. However, sometimes you will "
"need to retrieve values that are derived by summarizing or *aggregating* a "
"collection of objects. This topic guide describes the ways that aggregate "
"values can be generated and returned using Django queries."
msgstr ""
":doc:`Djangoのデータベース抽象API </topics/db/queries>` のトピックガイドで"
"は、個別のオブジェクトの作成、取得、削除を行うDjangoのクエリの使い方を説明し"
"ました。しかし、オブジェクトのコレクションを *集計 (アグリゲーション)* した値"
"や、集計することによって派生された値を取得しなければならないことがあります。 "
"このトピックガイドはで、Django のクエリを使って集計値を生成して返す方法を説明"
"します。"

msgid ""
"Throughout this guide, we'll refer to the following models. These models are "
"used to track the inventory for a series of online bookstores:"
msgstr ""
"このガイドでは、以下のモデルを使用します。これらのモデルは、一連のオンライン"
"書店の在庫を追跡するために使用されます。"

msgid "Cheat sheet"
msgstr "チートシート"

msgid ""
"In a hurry? Here's how to do common aggregate queries, assuming the models "
"above:"
msgstr ""
"お急ぎですか？ 上のモデルを使った場合の一般的な集計クエリは以下のようになりま"
"す:"

msgid "Generating aggregates over a ``QuerySet``"
msgstr "``QuerySet`` に対して集計を生成する"

msgid ""
"Django provides two ways to generate aggregates. The first way is to "
"generate summary values over an entire ``QuerySet``. For example, say you "
"wanted to calculate the average price of all books available for sale. "
"Django's query syntax provides a means for describing the set of all books:"
msgstr ""
"Django は集計を生成するために2つの方法を提供します。最初の方法は、 ``クエリ"
"セット`` 全体のサマリ値を生成する方法です。たとえば、販売されているすべての本"
"の平均価格を計算したいとします。Django のクエリ構文は、全ての本のセットを記述"
"する方法を提供します:"

msgid ""
"What we need is a way to calculate summary values over the objects that "
"belong to this ``QuerySet``. This is done by appending an ``aggregate()`` "
"clause onto the ``QuerySet``:"
msgstr ""
"必要なのは、この ``QuerySet`` に含まれるオブジェクトに対して合計値を計算する"
"方法です。``QuerySet`` に ``aggregate()`` 句を加えることで計算されます:"

msgid ""
"The ``all()`` is redundant in this example, so this could be simplified to:"
msgstr "この例では ``all()`` は冗長なので、次のように単純化できます:"

msgid ""
"The argument to the ``aggregate()`` clause describes the aggregate value "
"that we want to compute - in this case, the average of the ``price`` field "
"on the ``Book`` model. A list of the aggregate functions that are available "
"can be found in the :ref:`QuerySet reference <aggregation-functions>`."
msgstr ""
"``aggregate()`` 句への引数は計算したい集約値を表します - この例では、 "
"``Book`` モデルの ``price`` フィールドの平均になります。 利用可能な集約関数の"
"一覧は :ref:`QuerySet リファレンス <aggregation-functions>` にあります。"

msgid ""
"``aggregate()`` is a terminal clause for a ``QuerySet`` that, when invoked, "
"returns a dictionary of name-value pairs. The name is an identifier for the "
"aggregate value; the value is the computed aggregate. The name is "
"automatically generated from the name of the field and the aggregate "
"function. If you want to manually specify a name for the aggregate value, "
"you can do so by providing that name when you specify the aggregate clause:"
msgstr ""
"``aggregate()`` は ``QuerySet`` の終了句で、呼び出されると名前と値のペアの辞"
"書を返します。名前は集計句の識別子で、値は計算された集計句です。名前はフィー"
"ルド名と集計関数から自動的に生成されます。もし集計値の名前を手動で指定したい"
"場合は、集計句を指定する際にその名前を指定することで指定できます:"

msgid ""
"If you want to generate more than one aggregate, you add another argument to "
"the ``aggregate()`` clause. So, if we also wanted to know the maximum and "
"minimum price of all books, we would issue the query:"
msgstr ""
"複数の集計を行いたい場合は、 ``aggregate()`` 句に別の引数を追加します。もし、"
"すべての書籍の最高価格と最低価格を知りたい場合は、このクエリを発行します:"

msgid "Generating aggregates for each item in a ``QuerySet``"
msgstr "``QuerySet`` の各アイテムに対する集計を生成する"

msgid ""
"The second way to generate summary values is to generate an independent "
"summary for each object in a :class:`.QuerySet`. For example, if you are "
"retrieving a list of books, you may want to know how many authors "
"contributed to each book. Each Book has a many-to-many relationship with the "
"Author; we want to summarize this relationship for each book in the "
"``QuerySet``."
msgstr ""
":class:`.QuerySet` 内の各オブジェクトに対して個別の集計を生成することもできま"
"す。たとえば、書籍の一覧を取得しようとする場合には、それぞれの書籍に寄稿して"
"いる著者が何名いるのかを知りたいこともあるでしょう。 各 Book は Author に対し"
"て多対多のリレーションを持っています; この ``QuerySet`` 内で、各書籍の関係性"
"を集計できます。"

msgid ""
"Per-object summaries can be generated using the :meth:`~.QuerySet.annotate` "
"clause. When an ``annotate()`` clause is specified, each object in the "
"``QuerySet`` will be annotated with the specified values."
msgstr ""
"オブジェクトごとの集計は :meth:`~.QuerySet.annotate` 句を使うことで生成するこ"
"とができ ます。 ``annotate()`` が指定されると、 ``QuerySet`` の各オブジェクト"
"は 指定された値で注釈付け (annotate) されます。"

msgid ""
"The syntax for these annotations is identical to that used for the :meth:`~."
"QuerySet.aggregate` clause. Each argument to ``annotate()`` describes an "
"aggregate that is to be calculated. For example, to annotate books with the "
"number of authors:"
msgstr ""
"これらのアノテーションの構文は :meth:`~.QuerySet.aggregate` 句の構文と同じで"
"す。 ``annotate()`` の各引数は計算される集計を記述します。たとえば、書籍に著"
"者の数をアノテートする場合です:"

msgid ""
"As with ``aggregate()``, the name for the annotation is automatically "
"derived from the name of the aggregate function and the name of the field "
"being aggregated. You can override this default name by providing an alias "
"when you specify the annotation:"
msgstr ""
"``aggregate()`` と同様に、アノテーションの名前は集計関数の名前と集計される"
"フィールドの名前から自動的に生成されます。アノテーションを指定するときにエイ"
"リアスを指定することで、このデフォルト名を上書きできます。"

msgid ""
"Unlike ``aggregate()``, ``annotate()`` is *not* a terminal clause. The "
"output of the ``annotate()`` clause is a ``QuerySet``; this ``QuerySet`` can "
"be modified using any other ``QuerySet`` operation, including ``filter()``, "
"``order_by()``, or even additional calls to ``annotate()``."
msgstr ""
"``aggregate()`` とは違って、``annotate()`` は最終句では ありません 。"
"``annotate()`` 句のアウトプットは ``QuerySet`` です; この ``QuerySet`` は、他"
"の ``QuerySet`` の操作によって修正可能です。 ``filter()``、``order_by`` など"
"に加えて、別の ``annotate()`` を追加呼び出しすることもできます。"

msgid "Combining multiple aggregations"
msgstr "複数のアグリゲーションを統合する"

msgid ""
"Combining multiple aggregations with ``annotate()`` will :ticket:`yield the "
"wrong results <10060>` because joins are used instead of subqueries:"
msgstr ""
"``annotate()`` を用いて複数の集計 (アグリゲーション) を統合することは、 :"
"ticket:`誤った結果を生み出します <10060>` 。サブクエリの代わりに結合(JOIN)が"
"使われるからです:"

msgid ""
"For most aggregates, there is no way to avoid this problem, however, the :"
"class:`~django.db.models.Count` aggregate has a ``distinct`` parameter that "
"may help:"
msgstr ""
"ほとんどの集計方法では、この問題を逃れるすべはありませんが、:class:`~django."
"db.models.Count` では ``distinct`` が助けになります:"

msgid "If in doubt, inspect the SQL query!"
msgstr "疑わしい場合は、SQLクエリを調べてください！"

msgid ""
"In order to understand what happens in your query, consider inspecting the "
"``query`` property of your ``QuerySet``."
msgstr ""
"あなたのクエリ内で何が起こっているかを理解するために、あなたの ``QuerySet`` "
"の ``query`` プロパティを調べることを検討してみてください。"

msgid "Joins and aggregates"
msgstr "結合と集計方法"

msgid ""
"So far, we have dealt with aggregates over fields that belong to the model "
"being queried. However, sometimes the value you want to aggregate will "
"belong to a model that is related to the model you are querying."
msgstr ""
"これまで、クエリ対象のモデルに属したフィールドに対する集計について扱ってきま"
"した。しかし、集計したい値が、クエリ対象のモデルのリレーション先のモデルに属"
"している場合もあります。"

msgid ""
"When specifying the field to be aggregated in an aggregate function, Django "
"will allow you to use the same :ref:`double underscore notation <field-"
"lookups-intro>` that is used when referring to related fields in filters. "
"Django will then handle any table joins that are required to retrieve and "
"aggregate the related value."
msgstr ""
"集計関数の中で、集計するフィールドを特定するとき、Django ではフィルタ内でリ"
"レーション先のフィールドを参照するために使われるのと同じ :ref:`2重アンダース"
"コア表記 <field-lookups-intro>` が使えます。Django はリレーション先の値を取得"
"し集計するために必要なテーブル結合を処理します。"

msgid ""
"For example, to find the price range of books offered in each store, you "
"could use the annotation:"
msgstr ""
"たとえば、各店舗で扱っている本の価格帯を調べるには、アノテーションを使います:"

msgid ""
"This tells Django to retrieve the ``Store`` model, join (through the many-to-"
"many relationship) with the ``Book`` model, and aggregate on the price field "
"of the book model to produce a minimum and maximum value."
msgstr ""
"これは、``Store`` モデルを取得し、(many-to-many リレーションシップを通じて) "
"``Book`` モデルと結合し、そして書籍モデルの price フィールドの最大値と最小値"
"を計算するように、Django に通知します。"

msgid ""
"The same rules apply to the ``aggregate()`` clause. If you wanted to know "
"the lowest and highest price of any book that is available for sale in any "
"of the stores, you could use the aggregate:"
msgstr ""
"同じルールが ``aggregate()`` 句にも適用されます。もし、どこかのストアで販売さ"
"れている本の最低価格と最高価格を知りたければ、集計が使えます。"

msgid ""
"Join chains can be as deep as you require. For example, to extract the age "
"of the youngest author of any book available for sale, you could issue the "
"query:"
msgstr ""
"連結は必要ならいくつでもできます。たとえば、販売されている本の中で最も若い著"
"者の年齢を抽出するには、次のようなクエリを発行します:"

msgid "Following relationships backwards"
msgstr "逆方向のリレーション"

msgid ""
"In a way similar to :ref:`lookups-that-span-relationships`, aggregations and "
"annotations on fields of models or models that are related to the one you "
"are querying can include traversing \"reverse\" relationships. The lowercase "
"name of related models and double-underscores are used here too."
msgstr ""
":ref:`lookups-that-span-relationships` と似たように、モデルのフィールドやモデ"
"ルのリレーションに関する集計は \"逆方向\" のリレーションを含むことができま"
"す。ここでも小文字にしたモデル名と2つのアンダースコアが用いられます。"

msgid ""
"For example, we can ask for all publishers, annotated with their respective "
"total book stock counters (note how we use ``'book'`` to specify the "
"``Publisher`` -> ``Book`` reverse foreign key hop):"
msgstr ""
"たとえば、すべての出版社にそれぞれの総書籍数カウンターのアノテーションを付け"
"ることができます（ ``Publisher`` -> ``Book`` の逆引き外部キーホップを指定する"
"ために ``'book'`` を使用していることに注意してください）:"

msgid ""
"(Every ``Publisher`` in the resulting ``QuerySet`` will have an extra "
"attribute called ``book__count``.)"
msgstr ""
"(``QuerySet`` に含まれる全ての ``Publisher`` には ``book__count`` という名前"
"の属性が追加されます。)"

msgid ""
"We can also ask for the oldest book of any of those managed by every "
"publisher:"
msgstr ""
"また、各出版社が管理している本のうち、最も古い本を教えてもらうこともできます:"

msgid ""
"(The resulting dictionary will have a key called ``'oldest_pubdate'``. If no "
"such alias were specified, it would be the rather long "
"``'book__pubdate__min'``.)"
msgstr ""
"(結果は ``'oldest_pubdate'`` というキーで参照できるようになります。もしこのよ"
"うに別名を指定しなければ、キーの名前は ``'book__pubdate__min'`` のように長く"
"なります。)"

msgid ""
"This doesn't apply just to foreign keys. It also works with many-to-many "
"relations. For example, we can ask for every author, annotated with the "
"total number of pages considering all the books the author has (co-)authored "
"(note how we use ``'book'`` to specify the ``Author`` -> ``Book`` reverse "
"many-to-many hop):"
msgstr ""
"これは外部キーだけに適用されるわけではありません。多対多のリレーションにも使"
"えます。たとえば、すべての著者について、その著者が(共著で)執筆したすべての本"
"を考慮した総ページ数のアノテーションを求めることができます (``Author`` -> "
"``Book`` の逆多対多のホップを指定するために ``'book'`` を使用していることに注"
"意してください):"

msgid ""
"(Every ``Author`` in the resulting ``QuerySet`` will have an extra attribute "
"called ``total_pages``. If no such alias were specified, it would be the "
"rather long ``book__pages__sum``.)"
msgstr ""
"(``QuerySet`` に含まれる ``Author`` は ``total_pages`` 属性を持ちます。別名が"
"指定されなければ、 ``book__pages__sum`` のようになります。)"

msgid ""
"Or ask for the average rating of all the books written by author(s) we have "
"on file:"
msgstr "また、現在登録されている著者の全書籍の平均評価を求めることもできます:"

msgid ""
"(The resulting dictionary will have a key called ``'average_rating'``. If no "
"such alias were specified, it would be the rather long "
"``'book__rating__avg'``.)"
msgstr ""
"(結果は ``average_rating`` 属性を持ちます。別名が指定されなければ、 "
"``book__rating__avg`` のように長くなります。)"

msgid "Aggregations and other ``QuerySet`` clauses"
msgstr "集計とその他の ``QuerySet`` 句"

msgid "``filter()`` and ``exclude()``"
msgstr "``filter()`` と ``exclude()``"

msgid ""
"Aggregates can also participate in filters. Any ``filter()`` (or "
"``exclude()``) applied to normal model fields will have the effect of "
"constraining the objects that are considered for aggregation."
msgstr ""
"集計はフィルタと一緒に使うこともできます。通常のモデルフィールドに適用される"
"全ての ``filter()`` (または ``exclude()``) は集計に利用できるオブジェクトを構"
"築します。"

msgid ""
"When used with an ``annotate()`` clause, a filter has the effect of "
"constraining the objects for which an annotation is calculated. For example, "
"you can generate an annotated list of all books that have a title starting "
"with \"Django\" using the query:"
msgstr ""
"``annotate()`` 句と一緒に使うと、フィルタはアノテーションが計算されるオブジェ"
"クトを制限する効果があります。たとえば、\"Django\" で始まるタイトルを持つすべ"
"ての書籍のアノテーションリストをクエリを使って生成できます:"

msgid ""
"When used with an ``aggregate()`` clause, a filter has the effect of "
"constraining the objects over which the aggregate is calculated. For "
"example, you can generate the average price of all books with a title that "
"starts with \"Django\" using the query:"
msgstr ""
"``aggregate()`` 句と一緒に使うと、フィルタは集計を計算するオブジェクトを制限"
"する効果があります。たとえば、\"Django\" で始まるタイトルの本の平均価格をクエ"
"リで求めることができます:"

msgid "Filtering on annotations"
msgstr "アノテーションのフィルタリング"

msgid ""
"Annotated values can also be filtered. The alias for the annotation can be "
"used in ``filter()`` and ``exclude()`` clauses in the same way as any other "
"model field."
msgstr ""
"アノテーションされた値もフィルタリングできます。アノテーションのエイリアスは"
"他のモデルフィールドと同じように ``filter()`` 節や ``exclude()`` 句で使うこと"
"ができます。"

msgid ""
"For example, to generate a list of books that have more than one author, you "
"can issue the query:"
msgstr ""
"たとえば、複数の著者を持つ書籍のリストを作成するには、次のクエリを発行します:"

msgid ""
"This query generates an annotated result set, and then generates a filter "
"based upon that annotation."
msgstr ""
"このクエリはアノテーション付きの結果セットを生成し、そのアノテーションに基づ"
"いてフィルタを生成します。"

msgid ""
"If you need two annotations with two separate filters you can use the "
"``filter`` argument with any aggregate. For example, to generate a list of "
"authors with a count of highly rated books:"
msgstr ""
"もし2つのアノテーションを別々のフィルタで付ける必要がある場合は、 ``filter`` "
"引数を任意の集計で使うことができます。たとえば、評価の高い書籍のカウントを持"
"つ著者のリストを生成する場合は、以下のようにします。"

msgid ""
"Each ``Author`` in the result set will have the ``num_books`` and "
"``highly_rated_books`` attributes. See also :ref:`conditional-aggregation`."
msgstr ""
"結果セットの各 ``Author`` は ``num_books`` と ``highly_rated_books`` 属性を持"
"ちます。:ref:`conditional-aggregation` も参照してください。"

msgid "Choosing between ``filter`` and ``QuerySet.filter()``"
msgstr "``filter`` 引数と ``QuerySet.filter()`` のどちらを使うか？"

msgid ""
"Avoid using the ``filter`` argument with a single annotation or aggregation. "
"It's more efficient to use ``QuerySet.filter()`` to exclude rows. The "
"aggregation ``filter`` argument is only useful when using two or more "
"aggregations over the same relations with different conditionals."
msgstr ""
"単一のアノテーションや集計で ``filter`` 引数を使用することは避けてください。 "
"``QuerySet.filter()`` を使用して行を除外する方が効率的です。集計の "
"``filter`` 引数は、同じリレーションに対して異なる条件で2つ以上の集計を行う場"
"合にだけ有効です。"

msgid "Order of ``annotate()`` and ``filter()`` clauses"
msgstr "``annotate()`` 句と ``filter()`` 句の順番"

msgid ""
"When developing a complex query that involves both ``annotate()`` and "
"``filter()`` clauses, pay particular attention to the order in which the "
"clauses are applied to the ``QuerySet``."
msgstr ""
"``annotate()`` と ``filter()`` の両方の句を含む複雑なクエリを開発する場合"
"は、 ``QuerySet`` に適用する順番に特に注意してください。"

msgid ""
"When an ``annotate()`` clause is applied to a query, the annotation is "
"computed over the state of the query up to the point where the annotation is "
"requested. The practical implication of this is that ``filter()`` and "
"``annotate()`` are not commutative operations."
msgstr ""
"``annotate()`` 句がクエリに適用されると、アノテーションはアノテーションが要求"
"された時点までのクエリの状態に対して計算されます。これは、``filter()`` と "
"``annotate()`` は可換な演算ではないことを意味します。"

msgid "Given:"
msgstr "以下のことを仮定します。"

msgid "Publisher A has two books with ratings 4 and 5."
msgstr "出版社Aの本は2冊あり、評価は4と5である。"

msgid "Publisher B has two books with ratings 1 and 4."
msgstr "出版社Bの本は2冊あり、評価は1と4である。"

msgid "Publisher C has one book with rating 1."
msgstr "出版社Cの本は1冊あり、評価は1である。"

msgid "Here's an example with the ``Count`` aggregate:"
msgstr "以下は ``Count`` 集計を使った例です:"

msgid ""
"Both queries return a list of publishers that have at least one book with a "
"rating exceeding 3.0, hence publisher C is excluded."
msgstr ""
"どちらのクエリも、レーティングが3.0を超える本を少なくとも1冊持っている出版社"
"のリストを返すので、出版社Cは除外されます。"

msgid ""
"In the first query, the annotation precedes the filter, so the filter has no "
"effect on the annotation. ``distinct=True`` is required to avoid a :ref:"
"`query bug <combining-multiple-aggregations>`."
msgstr ""
"最初のクエリでは、アノテーションをフィルタよりも先に付けるため、フィルタはア"
"ノテーションに影響を与えません。 ``distinct=True`` は :ref:`クエリのバグ "
"<combining-multiple-aggregations>` を避けるために必要です。"

msgid ""
"The second query counts the number of books that have a rating exceeding 3.0 "
"for each publisher. The filter precedes the annotation, so the filter "
"constrains the objects considered when calculating the annotation."
msgstr ""
"2つ目のクエリは、出版社ごとにレーティングが3.0を超える書籍の数をカウントしま"
"す。フィルタはアノテーションより先にあるので、フィルタはアノテーションを計算"
"するときに考慮されるオブジェクトを制限します。"

msgid "Here's another example with the ``Avg`` aggregate:"
msgstr "これは ``Avg`` 集計を使った別の例です:"

msgid ""
"The first query asks for the average rating of all a publisher's books for "
"publisher's that have at least one book with a rating exceeding 3.0. The "
"second query asks for the average of a publisher's book's ratings for only "
"those ratings exceeding 3.0."
msgstr ""
"最初のクエリは、3.0を超える評価を1冊でも持つ出版社の全書籍の平均評価を求める"
"ものです。2つ目のクエリは、3.0を超えるレーティングを持つ出版社のみについて、"
"その出版社の書籍のレーティングの平均を求めるものです。"

msgid ""
"It's difficult to intuit how the ORM will translate complex querysets into "
"SQL queries so when in doubt, inspect the SQL with ``str(queryset.query)`` "
"and write plenty of tests."
msgstr ""
"ORMが複雑なクエリセットをSQLクエリに変換する方法を直感的に理解するのは難しい"
"ので、疑問がある場合は ``str(QuerySet.query)`` でSQLを検査し、たくさんのテス"
"トを書いてください。"

msgid "``order_by()``"
msgstr "``order_by()``"

msgid ""
"Annotations can be used as a basis for ordering. When you define an "
"``order_by()`` clause, the aggregates you provide can reference any alias "
"defined as part of an ``annotate()`` clause in the query."
msgstr ""
"アノテーションは、ソートの基準として使うことができます。 ``order_by()`` 句を"
"定義すると、クエリの ``annotate()`` 句の中で定義されたエイリアスを参照できま"
"す。"

msgid ""
"For example, to order a ``QuerySet`` of books by the number of authors that "
"have contributed to the book, you could use the following query:"
msgstr ""
"たとえば、本の ``QuerySet`` をその本に貢献した著者の数でソートするには、次の"
"ようなクエリを使います:"

msgid "``values()``"
msgstr "``values()``"

msgid ""
"Ordinarily, annotations are generated on a per-object basis - an annotated "
"``QuerySet`` will return one result for each object in the original "
"``QuerySet``. However, when a ``values()`` clause is used to constrain the "
"columns that are returned in the result set, the method for evaluating "
"annotations is slightly different. Instead of returning an annotated result "
"for each result in the original ``QuerySet``, the original results are "
"grouped according to the unique combinations of the fields specified in the "
"``values()`` clause. An annotation is then provided for each unique group; "
"the annotation is computed over all members of the group."
msgstr ""
"通常、アノテーションはオブジェクトごとに生成されます。アノテーションを付けた "
"``QuerySet`` は、元の ``QuerySet`` の各オブジェクトに対して1つの結果を返しま"
"す。しかし、 ``values()`` 句を使って結果セットで返されるカラムを制限している"
"場合は、アノテーションを付けるしくみが少し異なります。元の ``QuerySet`` の各"
"結果に対してアノテーションを付ける代わりに、元の結果は ``values()`` 句で指定"
"されたフィールドの一意な組み合わせに従ってグループ化されます。アノテーション"
"はグループのすべてのメンバに対して計算されます。"

msgid ""
"For example, consider an author query that attempts to find out the average "
"rating of books written by each author:"
msgstr ""
"たとえば、各著者が書いた本の平均評価を調べるための Author へのクエリを考えて"
"みましょう:"

msgid ""
"This will return one result for each author in the database, annotated with "
"their average book rating."
msgstr ""
"これは、データベース内の各著者について、その本の平均評価をアノテーションした"
"結果を1つ返します。"

msgid ""
"However, the result will be slightly different if you use a ``values()`` "
"clause:"
msgstr "しかし、 ``values()`` 句を使うと結果は少し違ってきます:"

msgid ""
"In this example, the authors will be grouped by name, so you will only get "
"an annotated result for each *unique* author name. This means if you have "
"two authors with the same name, their results will be merged into a single "
"result in the output of the query; the average will be computed as the "
"average over the books written by both authors."
msgstr ""
"この例では、著者は名前によってグループ化されるので、それぞれの *一意な* 著者"
"名に対してのみアノテーションを付けた結果が得られます。つまり、同じ名前の著者"
"が2人いる場合、それらの結果はクエリの出力で1つの結果にマージされます。平均は"
"両方の著者が書いた本の平均として計算されます。"

msgid "Order of ``annotate()`` and ``values()`` clauses"
msgstr "``annotate()`` 句と ``values()`` 句の順番"

msgid ""
"As with the ``filter()`` clause, the order in which ``annotate()`` and "
"``values()`` clauses are applied to a query is significant. If the "
"``values()`` clause precedes the ``annotate()``, the annotation will be "
"computed using the grouping described by the ``values()`` clause."
msgstr ""
"``filter()`` 句と同様に、``annotate()`` と ``values()`` 句をクエリに適用する"
"順序は重要です。もし ``values()`` 句が ``annotate()`` より先に来る場合、注釈"
"は ``values()`` 句によって記述されたグルーピングを使用して計算されます。"

msgid ""
"However, if the ``annotate()`` clause precedes the ``values()`` clause, the "
"annotations will be generated over the entire query set. In this case, the "
"``values()`` clause only constrains the fields that are generated on output."
msgstr ""
"しかし、 ``annotate()`` 句が ``values()`` 句より先に来る場合、注釈はクエリ"
"セット全体に対して生成されます。この場合、 ``values()`` 句は出力されるフィー"
"ルドを制限するだけです。"

msgid ""
"For example, if we reverse the order of the ``values()`` and ``annotate()`` "
"clause from our previous example:"
msgstr ""
"たとえば、先ほどの例の ``values()`` 句と ``annotate()`` 句の順番を逆にする"
"と、次のようになります:"

msgid ""
"This will now yield one unique result for each author; however, only the "
"author's name and the ``average_rating`` annotation will be returned in the "
"output data."
msgstr ""
"これで各著者に対して一意な結果が得られるようになりました。しかし、出力データ"
"には著者名と ``average_rating`` のアノテーションのみが返されます。"

msgid ""
"You should also note that ``average_rating`` has been explicitly included in "
"the list of values to be returned. This is required because of the ordering "
"of the ``values()`` and ``annotate()`` clause."
msgstr ""
"``average_rating`` が返される値のリストに明示的に含まれていることにも注意して"
"ください。これは、``values()`` と ``annotate()`` 句の順序によるものです。"

msgid ""
"If the ``values()`` clause precedes the ``annotate()`` clause, any "
"annotations will be automatically added to the result set. However, if the "
"``values()`` clause is applied after the ``annotate()`` clause, you need to "
"explicitly include the aggregate column."
msgstr ""
"``values()`` 句が ``annotate()`` 句より先にある場合、アノテーションは結果セッ"
"トに自動的に追加されます。しかし、 ``values()`` 句を ``annotate()`` 句の後に"
"適用する場合は、集計列を明示的に含める必要があります。"

msgid "Interaction with ``order_by()``"
msgstr "``order_by()`` と一緒に使う"

msgid ""
"Fields that are mentioned in the ``order_by()`` part of a queryset are used "
"when selecting the output data, even if they are not otherwise specified in "
"the ``values()`` call. These extra fields are used to group \"like\" results "
"together and they can make otherwise identical result rows appear to be "
"separate. This shows up, particularly, when counting things."
msgstr ""
"クエリセットの ``order_by()`` 部分で言及されたフィールドは、 ``values()`` 呼"
"び出しで特に指定されていなくても、出力データの選択時に使用されます。これらの"
"追加フィールドは \"同じような\" 結果をグループ化するため、同じ結果の行が別々"
"の行に見えることがあります。これは特に、何かを数えるときに顕著に現れます。"

msgid "By way of example, suppose you have a model like this::"
msgstr "たとえば、次のようなモデルがあるとします:"

msgid ""
"If you want to count how many times each distinct ``data`` value appears in "
"an ordered queryset, you might try this::"
msgstr ""
"それぞれの ``data`` 値が、並べ替えられたクエリセットに何回現れるかを数えたい"
"場合は、次のようにします:"

msgid ""
"...which will group the ``Item`` objects by their common ``data`` values and "
"then count the number of ``id`` values in each group. Except that it won't "
"quite work. The ordering by ``name`` will also play a part in the grouping, "
"so this query will group by distinct ``(data, name)`` pairs, which isn't "
"what you want. Instead, you should construct this queryset::"
msgstr ""
"...これは ``Item`` オブジェクトを共通の ``data`` 値でグループ化し、各グループ"
"の ``id`` 値の数をカウントします。ただし、これはうまくいきません。 ``name`` "
"によるソートもグループ化に影響するため、このクエリは ``(data, name)`` のペア"
"をグループ化することになります。代わりに、次のようなクエリセットを作成する必"
"要があります:"

msgid ""
"...clearing any ordering in the query. You could also order by, say, "
"``data`` without any harmful effects, since that is already playing a role "
"in the query."
msgstr ""
"...このようにクエリ内のソートをクリアします。たとえば、 ``data`` で並べ替える"
"こともできますが、これはすでにクエリで役割を果たしているため、害はありませ"
"ん。"

msgid ""
"This behavior is the same as that noted in the queryset documentation for :"
"meth:`~django.db.models.query.QuerySet.distinct` and the general rule is the "
"same: normally you won't want extra columns playing a part in the result, so "
"clear out the ordering, or at least make sure it's restricted only to those "
"fields you also select in a ``values()`` call."
msgstr ""
"この動作は、 :meth:`~django.db.models.query.QuerySet.distinct` のクエリセット"
"ドキュメントで指摘されているのと同じで、一般的なルールも同じです。通常、結果"
"に余分な列が影響を与えることは期待されないため、順序付けをクリアするか、少な"
"くとも ``values()`` 呼び出しで選択するフィールドにのみ制限されていることを確"
"認してください。"

msgid ""
"You might reasonably ask why Django doesn't remove the extraneous columns "
"for you. The main reason is consistency with ``distinct()`` and other "
"places: Django **never** removes ordering constraints that you have "
"specified (and we can't change those other methods' behavior, as that would "
"violate our :doc:`/misc/api-stability` policy)."
msgstr ""
"なぜ Django が余分な列を削除しないのか、合理的に疑問に思うかもしれません。主"
"な理由は、 ``distinct()`` やその他の場所との一貫性にあります。Django は、あな"
"たが指定した順序付けの制約を **決して** 削除しません（そして、これらの他の方"
"法の振る舞いを変更することは、私たちの :doc:`/misc/api-stability` ポリシーに"
"違反するため、できません）。"

msgid "Aggregating annotations"
msgstr "アノテーションを集計する"

msgid ""
"You can also generate an aggregate on the result of an annotation. When you "
"define an ``aggregate()`` clause, the aggregates you provide can reference "
"any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""
"アノテーションの結果に対して集計を生成することもできます。``aggregate()`` 句"
"を定義するとき、提供する集計はクエリ内の ``annotate()`` 句の一部として定義さ"
"れた任意のエイリアスを参照できます。"

msgid ""
"For example, if you wanted to calculate the average number of authors per "
"book you first annotate the set of books with the author count, then "
"aggregate that author count, referencing the annotation field:"
msgstr ""
"たとえば、1冊あたりの著者数の平均を計算したい場合、まず著者数をアノテーション"
"付きで本のセットに追加し、その後、アノテーションフィールドを参照して著者数を"
"集計します。"

msgid "Aggregating on empty querysets or groups"
msgstr "空のクエリセットまたはグループでの集計"

msgid ""
"When an aggregation is applied to an empty queryset or grouping, the result "
"defaults to its :ref:`default <aggregate-default>` parameter, typically "
"``None``. This behavior occurs because aggregate functions return ``NULL`` "
"when the executed query returns no rows."
msgstr ""
"集計が空のクエリセットやグループに適用された場合、結果のデフォルトは通常"
"「None」となる :ref:`default <aggregate-default>` パラメータになります。この"
"動作は、実行されたクエリが行を返さない場合に集計関数が「NULL」を返すために発"
"生します。"

msgid ""
"You can specify a return value by providing the :ref:`default <aggregate-"
"default>` argument for most aggregations. However, since :class:`~django.db."
"models.Count` does not support the :ref:`default <aggregate-default>` "
"argument, it will always return ``0`` for empty querysets or groups."
msgstr ""
"ほとんどの集計では、 :ref:`default <aggregate-default>` 引数を渡すことで戻り"
"値を指定できます。しかし、 :class:`~django.db.models.Count` は :ref:`default "
"<aggregate-default>` 引数をサポートしていないため、空のクエリセットやグループ"
"に対しては常に ``0`` を返します。"

msgid ""
"For example, assuming that no book contains *web* in its name, calculating "
"the total price for this book set would return ``None`` since there are no "
"matching rows to compute the :class:`~django.db.models.Sum` aggregation on:"
msgstr ""
"たとえば、書籍名に *web* を含む書籍がないと仮定して、この書籍セットの合計金額"
"を計算すると、 :class:`~django.db.models.Sum` 集計を計算する一致する行がない"
"ため、 ``None`` を返します:"

msgid ""
"However, the :ref:`default <aggregate-default>` argument can be set when "
"calling :class:`~django.db.models.Sum` to return a different default value "
"if no books can be found:"
msgstr ""
"しかし、 :class:`~django.db.models.Sum` を呼び出す際に :ref:`default "
"<aggregate-default>` 引数を指定することで、本が見つからない場合に異なるデフォ"
"ルト値を返すことができます:"

msgid ""
"Under the hood, the :ref:`default <aggregate-default>` argument is "
"implemented by wrapping the aggregate function with :class:`~django.db."
"models.functions.Coalesce`."
msgstr ""
"内部では、 :ref:`default <aggregate-default>` 引数は、集計関数を :class:"
"`~django.db.models.functions.Coalesce` でラップすることによって実装されていま"
"す。"

msgid "Examples of model relationship API usage"
msgstr "モデルリレーション API の使用例"

msgid "Many-to-many relationships"
msgstr "多対多 (many-to-many) 関係"

msgid ""
"To define a many-to-many relationship, use :class:`~django.db.models."
"ManyToManyField`."
msgstr ""
"多対多の関係を定義するには、:class:`~django.db.models.ManyToManyField` を使用"
"します。"

msgid ""
"In this example, an ``Article`` can be published in multiple ``Publication`` "
"objects, and a ``Publication`` has multiple ``Article`` objects:"
msgstr ""
"この例では、一つの ``Article`` は複数の ``Publication`` オブジェクトに掲載す"
"ることができ、一つの ``Publication`` は複数の ``Article`` オブジェクトを持ち"
"ます:"

msgid ""
"What follows are examples of operations that can be performed using the "
"Python API facilities."
msgstr "以下は、Python API の機能を使って実行できる操作の例です。"

msgid "Create a few ``Publications``:"
msgstr "いくつかの ``出版物`` を作成する:"

msgid "Create an ``Article``:"
msgstr "一つの ``Article`` を作成する:"

msgid "You can't associate it with a ``Publication`` until it's been saved:"
msgstr "保存されるまでは ``Publication`` と関連付けることはできません:"

msgid "Save it!"
msgstr "保存しましょう！"

msgid "Associate the ``Article`` with a ``Publication``:"
msgstr "``Article`` と ``Publication`` を関連付ける:"

msgid ""
"Create another ``Article``, and set it to appear in the ``Publications``:"
msgstr ""
"別の ``Article`` を作成し、それを ``Publications`` に表示するようにセットす"
"る:"

msgid "Adding a second time is OK, it will not duplicate the relation:"
msgstr "2回の追加はOKで、関係が重複することはありません:"

msgid "Adding an object of the wrong type raises :exc:`TypeError`:"
msgstr "間違った型のオブジェクトを追加すると :exc:`TypeError` が発生します:"

msgid ""
"Create and add a ``Publication`` to an ``Article`` in one step using :meth:"
"`~django.db.models.fields.related.RelatedManager.create`:"
msgstr ""
"``Article`` に ``Publication`` をワンステップで作成・追加するには :meth:"
"`~django.db.models.fields.related.RelatedManager.create` を使います:"

msgid ""
"``Article`` objects have access to their related ``Publication`` objects:"
msgstr ""
"``Article`` オブジェクトはリレーション先の ``Publication`` オブジェクトにアク"
"セスできます:"

msgid ""
"``Publication`` objects have access to their related ``Article`` objects:"
msgstr ""
"``Publication`` オブジェクトはリレーション先の ``Article`` オブジェクトにアク"
"セスできます:"

msgid ""
"Many-to-many relationships can be queried using :ref:`lookups across "
"relationships <lookups-that-span-relationships>`:"
msgstr ""
"多対多の関係は :ref:`リレーションを横断するルックアップ <lookups-that-span-"
"relationships>` を使ってクエリできます:"

msgid ""
"The :meth:`~django.db.models.query.QuerySet.count` function respects :meth:"
"`~django.db.models.query.QuerySet.distinct` as well:"
msgstr ""
":meth:`~django.db.models.query.QuerySet.count` 関数は :meth:`~django.db."
"models.query.QuerySet.distinct` も尊重します:"

msgid ""
"Reverse m2m queries are supported (i.e., starting at the table that doesn't "
"have a :class:`~django.db.models.ManyToManyField`):"
msgstr ""
"逆の多対多クエリもサポートされています (つまり、 :class:`~django.db.models."
"ManyToManyField` を持たないテーブルから開始できます):"

msgid ""
"Excluding a related item works as you would expect, too (although the SQL "
"involved is a little complex):"
msgstr "リレーション先項目の除外も期待通りに動作します（SQLは少し複雑ですが）:"

msgid ""
"If we delete a ``Publication``, its ``Articles`` won't be able to access it:"
msgstr ""
"もし ``Publication`` を削除すると、その ``Articles`` にはアクセスできなくなり"
"ます:"

msgid ""
"If we delete an ``Article``, its ``Publications`` won't be able to access it:"
msgstr ""
"もし ``Article`` を削除すると、その ``Publications`` にはアクセスできなくなり"
"ます:"

msgid "Adding via the 'other' end of an m2m:"
msgstr "多対多のリレーションシップの「反対側の」端を経由した追加:"

msgid "Adding via the other end using keywords:"
msgstr "キーワードを使った反対側の端からの追加:"

msgid "Removing ``Publication`` from an ``Article``:"
msgstr "``Article`` から ``Publication`` を削除する:"

msgid "And from the other end:"
msgstr "反対側からも:"

msgid "Relation sets can be set:"
msgstr "リレーションのセットも指定できます:"

msgid "Relation sets can be cleared:"
msgstr "リレーションのセットを削除することもできます:"

msgid "And you can clear from the other end:"
msgstr "反対側からも削除できます:"

msgid "Recreate the ``Article`` and ``Publication`` we have deleted:"
msgstr "削除した ``Article`` と ``Publication`` を再作成する:"

msgid ""
"Bulk delete some ``Publications`` - references to deleted publications "
"should go:"
msgstr ""
"複数の ``Publications`` を一括削除 - 削除された出版物への参照は削除されます:"

msgid "Bulk delete some articles - references to deleted objects should go:"
msgstr "複数の記事を一括削除 - 削除したオブジェクトへの参照は削除されます:"

msgid ""
"After the :meth:`~django.db.models.query.QuerySet.delete`, the :class:"
"`~django.db.models.query.QuerySet` cache needs to be cleared, and the "
"referenced objects should be gone:"
msgstr ""
":meth:`~django.db.models.query.QuerySet.delete` の後は、 :class:`~django.db."
"models.query.QuerySet` のキャッシュをクリアする必要があります。参照されたオブ"
"ジェクトは削除されます:"

msgid "Many-to-one relationships"
msgstr "多対一 (many-to-one) 関係"

msgid ""
"To define a many-to-one relationship, use :class:`~django.db.models."
"ForeignKey`."
msgstr ""
"多対一のリレーションシップを定義するには :class:`~django.db.models."
"ForeignKey` を使います。"

msgid ""
"In this example, a ``Reporter`` can be associated with many ``Article`` "
"objects, but an ``Article`` can only have one ``Reporter`` object::"
msgstr ""
"この例では、 ``Reporter`` は複数の ``Article`` オブジェクトと関連付けることが"
"できますが、 ``Article`` は一つの ``Reporter`` オブジェクトしか持つことができ"
"ません:"

msgid "Create a few Reporters:"
msgstr "複数の Reporter を作成する:"

msgid "Create an Article:"
msgstr "Article を作成する:"

msgid ""
"Note that you must save an object before it can be assigned to a foreign key "
"relationship. For example, creating an ``Article`` with unsaved ``Reporter`` "
"raises ``ValueError``:"
msgstr ""
"オブジェクトを外部キーリレーションに代入する前に保存する必要があることに注意"
"してください。たとえば、保存されていない ``Reporter`` で ``Article`` を作成す"
"ると、次のように ``ValueError`` が発生します。"

msgid "Article objects have access to their related Reporter objects:"
msgstr "Article オブジェクトはリレーション先オブジェクトにアクセスできます:"

msgid "Create an Article via the Reporter object:"
msgstr "Reporter オブジェクトを使って Article を作成する:"

msgid "Create a new article:"
msgstr "新しい記事を作成する:"

msgid "Add the same article to a different article set - check that it moves:"
msgstr "同じ記事を別の記事セットに追加する - 移動することを確認します:"

msgid "Adding an object of the wrong type raises TypeError:"
msgstr "間違った型のオブジェクトを追加すると TypeError が発生します:"

msgid "Note that in the last example the article has moved from John to Paul."
msgstr ""
"最後の例では、記事が John から Paul に移動していることに注意してください。"

msgid ""
"Related managers support field lookups as well. The API automatically "
"follows relationships as far as you need. Use double underscores to separate "
"relationships. This works as many levels deep as you want. There's no limit. "
"For example:"
msgstr ""
"関係マネージャはフィールドルックアップもサポートします。APIは必要な範囲まで自"
"動的にリレーションシップをたどります。リレーションシップを区切るには2重アン"
"ダースコアを使用してください。これは、好きなだけ深くできます。制限はありませ"
"ん。たとえば:"

msgid "Exact match is implied here:"
msgstr "これは完全一致を意味します:"

msgid ""
"Query twice over the related field. This translates to an AND condition in "
"the WHERE clause:"
msgstr ""
"リレーション先フィールドに2回クエリをかけます。これはWHERE句のAND条件に変換さ"
"れます:"

msgid ""
"For the related lookup you can supply a primary key value or pass the "
"related object explicitly:"
msgstr ""
"リレーションのルックアップでは、主キーの値を指定するか、リレーション先オブ"
"ジェクトを明示的に渡すことができます:"

msgid "You can also use a queryset instead of a literal list of instances:"
msgstr ""
"インスタンスのリテラルのリストの代わりにクエリセットを使用することもできます:"

msgid "Querying in the opposite direction:"
msgstr "逆方向のクエリ:"

msgid ""
"Counting in the opposite direction works in conjunction with ``distinct()``:"
msgstr "逆方向のカウントは ``distinct()`` と連動して動作します:"

msgid "Queries can go round in circles:"
msgstr "クエリは循環することがあります:"

msgid ""
"If you delete a reporter, their articles will be deleted (assuming that the "
"ForeignKey was defined with :attr:`django.db.models.ForeignKey.on_delete` "
"set to ``CASCADE``, which is the default):"
msgstr ""
"レポーターを削除すると、そのレポーターの記事も削除されます (ForeignKeyが :"
"attr:`django.db.models.ForeignKey.on_delete` に ``CASCADE`` をセットして定義"
"されていることが前提です):"

msgid "You can delete using a JOIN in the query:"
msgstr "クエリで JOIN を使って削除することもできます:"

msgid "One-to-one relationships"
msgstr "一対一 (one-to-one) 関係"

msgid ""
"To define a one-to-one relationship, use :class:`~django.db.models."
"OneToOneField`."
msgstr ""
"一対一の関係を定義するには、:class:`~django.db.models.OneToOneField` を使用し"
"ます。"

msgid "In this example, a ``Place`` optionally can be a ``Restaurant``::"
msgstr "この例では、 ``Place`` は任意で ``Restaurant`` になることができます:"

msgid "Create a couple of Places:"
msgstr "2つの Place を作成する:"

msgid ""
"Create a Restaurant. Pass the \"parent\" object as this object's primary key:"
msgstr ""
"レストランを作成する。オブジェクトの主キーとして \"parent\" オブジェクトを渡"
"します:"

msgid "A Restaurant can access its place:"
msgstr "Restaurant は自身の place にアクセスできます:"

msgid "A Place can access its restaurant, if available:"
msgstr "Place は自身の restaurant に、利用可能ならアクセスできます:"

msgid "p2 doesn't have an associated restaurant:"
msgstr "p2 には関連付けられたレストランがありません:"

msgid "You can also use ``hasattr`` to avoid the need for exception catching:"
msgstr "また、 ``hasattr`` を使えば、例外キャッチが不要になります:"

msgid ""
"Set the place using assignment notation. Because place is the primary key on "
"Restaurant, the save will create a new restaurant:"
msgstr ""
"代入記法を使用して ``place`` をセットします。``place`` は ``Restaurant`` のプ"
"ライマリキーなので、保存すると新しい ``restaurant`` が作成されます:"

msgid "Set the place back again, using assignment in the reverse direction:"
msgstr "また、place を逆方向の割り当てを使用してセットします:"

msgid ""
"Note that you must save an object before it can be assigned to a one-to-one "
"relationship. For example, creating a ``Restaurant`` with unsaved ``Place`` "
"raises ``ValueError``:"
msgstr ""
"オブジェクトを1対1のリレーションシップに割り当てるには、オブジェクトを保存す"
"る必要があることに注意してください。例えば、保存されていない ``Place`` で "
"``Restaurant`` を作成すると ``ValueError`` が発生します:"

msgid ""
"Restaurant.objects.all() returns the Restaurants, not the Places. Note that "
"there are two restaurants - Ace Hardware the Restaurant was created in the "
"call to r.place = p2:"
msgstr ""
"``Restaurant.objects.all()`` は Place のセットではなく、 Restaurant のセット"
"を返します。レストランが2つあることに注意してください - \"Ace Hardware\" は "
"``r.place = p2`` の呼び出しで作成されたレストランです:"

msgid ""
"Place.objects.all() returns all Places, regardless of whether they have "
"Restaurants:"
msgstr ""
"``Place.objects.all()`` は、Restaurant を持つかどうかに関係なく、すべての "
"Place を返します:"

msgid ""
"You can query the models using :ref:`lookups across relationships <lookups-"
"that-span-relationships>`:"
msgstr ""
":ref:`リレーションを横断するルックアップ <lookups-that-span-relationships>` "
"を使ってモデルをクエリできます:"

msgid "This also works in reverse:"
msgstr "これは逆方向にも機能します:"

msgid ""
"If you delete a place, its restaurant will be deleted (assuming that the "
"``OneToOneField`` was defined with :attr:`~django.db.models.ForeignKey."
"on_delete` set to ``CASCADE``, which is the default):"
msgstr ""
"場所を削除した場合、そのレストランは削除されます (``OneToOneField`` が :attr:"
"`~django.db.models.ForeignKey.on_delete` にデフォルトの ``CASCADE`` をセット"
"して定義されていると仮定した場合):"

msgid "Add a Waiter to the Restaurant:"
msgstr "Restaurant に Waiter を追加します:"

msgid "Query the waiters:"
msgstr "waiter にクエリします:"

msgid "Fixtures"
msgstr "フィクスチャ (fixture)"

msgid ":doc:`/howto/initial-data`"
msgstr ":doc:`/howto/initial-data`"

msgid "What is a fixture?"
msgstr "フィクスチャとは何ですか？"

msgid ""
"A *fixture* is a collection of files that contain the serialized contents of "
"the database. Each fixture has a unique name, and the files that comprise "
"the fixture can be distributed over multiple directories, in multiple "
"applications."
msgstr ""
"*フィクスチャ (fixture)* とは、シリアライズされたデータベースのコンテンツを含"
"むファイルのコレクションです。各フィクスチャにはユニークな名前があり、フィク"
"スチャを構成するファイルは、複数のアプリケーションの複数のディレクトリに分散"
"できます。"

msgid "How to produce a fixture?"
msgstr "フィクスチャはどのように作成するべきですか？"

msgid ""
"Fixtures can be generated by :djadmin:`manage.py dumpdata <dumpdata>`. It's "
"also possible to generate custom fixtures by directly using :doc:"
"`serialization tools </topics/serialization>` or even by handwriting them."
msgstr ""
"フィクスチャは :djadmin:`manage.py dumpdata <dumpdata>` によって生成できま"
"す。また、 :doc:`シリアライゼーションツール </topics/serialization>` を直接"
"使って、あるいは手書きでカスタムフィクスチャを生成することもできます。"

msgid "How to use a fixture?"
msgstr "フィクスチャはどう使えばよいのですか？"

msgid ""
"Fixtures can be used to pre-populate database with data for :ref:`tests "
"<topics-testing-fixtures>`:"
msgstr ""
"フィクスチャは :ref:`テスト <topics-testing-fixtures>` 用のデータをあらかじめ"
"データベースに投入するために使えます:"

msgid ""
"or to provide some :ref:`initial data <initial-data-via-fixtures>` using "
"the :djadmin:`loaddata` command:"
msgstr ""
"または :ref:`初期データ <initial-data-via-fixtures>` を :djadmin:`loaddata` "
"コマンドを使って提供することもできます:"

msgid "Where Django looks for fixtures?"
msgstr "Django はどこでフィクスチャを探しますか？"

msgid "Django will search in these locations for fixtures:"
msgstr "Django はこれらの場所でフィクスチャを探します:"

msgid "In the ``fixtures`` directory of every installed application"
msgstr "インストールされた各アプリケーションの ``fixtures`` ディレクトリ内"

msgid "In any directory listed in the :setting:`FIXTURE_DIRS` setting"
msgstr ":setting:`FIXTURE_DIRS` 設定にリストされている任意のディレクトリ内"

msgid "In the literal path named by the fixture"
msgstr "フィクスチャによって名前が付けられたリテラル パス内"

msgid ""
"Django will load any and all fixtures it finds in these locations that match "
"the provided fixture names. If the named fixture has a file extension, only "
"fixtures of that type will be loaded. For example:"
msgstr ""
"Django は、指定されたフィクスチャ名と一致するフィクスチャをすべて読み込みま"
"す。指定されたフィクスチャに拡張子がある場合、そのタイプのフィクスチャだけが"
"読み込まれます。たとえば"

msgid ""
"would only load JSON fixtures called ``mydata``. The fixture extension must "
"correspond to the registered name of a :ref:`serializer <serialization-"
"formats>` (e.g., ``json`` or ``xml``)."
msgstr ""
"``mydata`` と呼ばれる JSON フィクスチャのみを読み込みます。フィクスチャの拡張"
"子は :ref:`シリアライザ <serialization-formats>` に登録された名前 (例: "
"``json`` や ``xml``)  に対応していなければなりません。"

msgid ""
"If you omit the extensions, Django will search all available fixture types "
"for a matching fixture. For example:"
msgstr ""
"拡張子を省略した場合、Django は利用可能なすべてのフィクスチャタイプから、マッ"
"チするフィクスチャを検索します。例えば"

msgid ""
"would look for any fixture of any fixture type called ``mydata``. If a "
"fixture directory contained ``mydata.json``, that fixture would be loaded as "
"a JSON fixture."
msgstr ""
"これは ``mydata`` というフィクスチャタイプのフィクスチャを探します。フィクス"
"チャディレクトリに ``mydata.json`` が含まれていれば、そのフィクスチャは JSON "
"フィクスチャとして読み込まれます。"

msgid ""
"The fixtures that are named can include directory components. These "
"directories will be included in the search path. For example:"
msgstr ""
"命名されたフィクスチャはディレクトリ・コンポーネントを含むことができます。こ"
"れらのディレクトリは検索パスに含まれます。たとえば:"

msgid ""
"would search ``<app_label>/fixtures/foo/bar/mydata.json`` for each installed "
"application, ``<dirname>/foo/bar/mydata.json`` for each directory in :"
"setting:`FIXTURE_DIRS`, and the literal path ``foo/bar/mydata.json``."
msgstr ""
"これは、インストールされている各アプリケーションに対して ``<app_label>/"
"fixtures/foo/bar/mydata.json`` を、 :setting:`FIXTURE_DIRS` 内の各ディレクト"
"リに対して ``<dirname>/foo/bar/mydata.json`` を、そしてリテラルパス ``foo/"
"bar/mydata.json`` を検索します。"

msgid "Fixtures loading order"
msgstr "フィクスチャが読み込まれる順番"

msgid "Multiple fixtures can be specified in the same invocation. For example:"
msgstr "複数のフィクスチャを同じ呼び出しで指定できます。たとえば:"

msgid "or in a test case class:"
msgstr "またはテストケースクラスで:"

msgid ""
"The order in which fixtures are loaded follows the order in which they are "
"listed, whether it's when using the management command or when listing them "
"in the test case class as shown above."
msgstr ""
"フィクスチャが読み込まれる順番は、管理コマンドを使うときでも、上で示したよう"
"にテストケースクラスでリストアップするときでも、リストアップされた順番に従い"
"ます。"

msgid ""
"In these examples, all the fixtures named ``mammals`` from all applications "
"(in the order in which applications are defined in :setting:"
"`INSTALLED_APPS`) will be loaded first. Subsequently, all the ``birds`` "
"fixtures will be loaded, followed by all the ``insects`` fixtures."
msgstr ""
"これらの例では、すべてのアプリケーション（ :setting:`INSTALLED_APPS` で定義さ"
"れたアプリケーションの順番）から ``mammals`` という名前のすべてのフィクスチャ"
"が最初に読み込まれます。続いて、すべての ``birds`` フィクスチャが読み込まれ、"
"続いてすべての ``insects`` フィクスチャが読み込まれます。"

msgid ""
"Be aware that if the database backend supports row-level constraints, these "
"constraints will be checked at the end of the transaction. Any relationships "
"across fixtures may result in a load error if the database configuration "
"does not support deferred constraint checking (refer to the `MySQL`_ docs "
"for an example)."
msgstr ""
"データベースのバックエンドが行レベルの制約をサポートしている場合、これらの制"
"約はトランザクションの最後にチェックされることに注意してください。データベー"
"ス構成が遅延制約チェックをサポートしていない場合、フィクスチャをまたぐリレー"
"ションシップは読み込みエラーになるかもしれません（例については `MySQL`_ のド"
"キュメントを参照してください）。"

msgid "How fixtures are saved to the database?"
msgstr "フィクスチャはどのようにデータベースに保存されますか？"

msgid ""
"When fixture files are processed, the data is saved to the database as is. "
"Model defined :meth:`~django.db.models.Model.save` methods are not called, "
"and any :data:`~django.db.models.signals.pre_save` or :data:`~django.db."
"models.signals.post_save` signals will be called with ``raw=True`` since the "
"instance only contains attributes that are local to the model. You may, for "
"example, want to disable handlers that access related fields that aren't "
"present during fixture loading and would otherwise raise an exception::"
msgstr ""
"フィクスチャファイルが処理されると、データはそのままデータベースに保存されま"
"す。モデルで定義された :meth:`~django.db.models.Model.save` メソッドは呼び出"
"されず、 :data:`~django.db.models.signals.pre_save` や :data:`~django.db."
"models.signals.post_save` シグナルは ``raw=True`` で呼び出されます。インスタ"
"ンスはモデルにローカルな属性しか持たないからです。例えば、フィクスチャの読み"
"込み中に存在せず、例外を発生させるようなリレーション先フィールドにアクセスす"
"るハンドラを無効にしたい場合があるでしょう:"

msgid "You could also write a decorator to encapsulate this logic::"
msgstr "このロジックをカプセル化するデコレータを書くこともできます:"

msgid ""
"Just be aware that this logic will disable the signals whenever fixtures are "
"deserialized, not just during :djadmin:`loaddata`."
msgstr ""
"このロジックは、 :djadmin:`loaddata` の間だけでなく、フィクスチャがデシリアラ"
"イズされるときは常にシグナルを無効にすることに注意してください。"

msgid "Compressed fixtures"
msgstr "圧縮されたフィクスチャ"

msgid ""
"Fixtures may be compressed in ``zip``, ``gz``, ``bz2``, ``lzma``, or ``xz`` "
"format. For example:"
msgstr ""
"フィクスチャは ``zip``、``gz``、``bz2``、``lzma``、``xz`` フォーマットのいず"
"れかに圧縮される場合があります。次に例を示します。"

msgid ""
"would look for any of ``mydata.json``, ``mydata.json.zip``, ``mydata.json."
"gz``, ``mydata.json.bz2``, ``mydata.json.lzma``, or ``mydata.json.xz``. The "
"first file contained within a compressed archive is used."
msgstr ""
"これは ``mydata.json``, ``mydata.json.zip``, ``mydata.json.gz``, ``mydata."
"json.bz2``, ``mydata.json.lzma``, ``mydata.json.xz`` のいずれかを探します。圧"
"縮アーカイブに含まれる最初のファイルが使用されます。"

msgid ""
"Note that if two fixtures with the same name but different fixture type are "
"discovered (for example, if ``mydata.json`` and ``mydata.xml.gz`` were found "
"in the same fixture directory), fixture installation will be aborted, and "
"any data installed in the call to :djadmin:`loaddata` will be removed from "
"the database."
msgstr ""
"同じ名前で異なるフィクスチャタイプを持つ2つのフィクスチャが見つかった場合(例"
"えば、 ``mydata.json`` と ``mydata.xml.gz`` が同じフィクスチャディレクトリで"
"見つかった場合)、フィクスチャのインストールは中断され、 :djadmin:`loaddata` "
"の呼び出しでインストールされたデータはデータベースから削除されることに注意し"
"てください。"

msgid "MySQL with MyISAM and fixtures"
msgstr "MyISAM を使用した MySQL とフィクスチャ"

msgid ""
"The MyISAM storage engine of MySQL doesn't support transactions or "
"constraints, so if you use MyISAM, you won't get validation of fixture data, "
"or a rollback if multiple transaction files are found."
msgstr ""
"MySQL の MyISAM ストレージエンジンはトランザクションや制約をサポートしていな"
"いため、 MyISAM を使用する場合、フィクスチャデータの検証や、複数のトランザク"
"ションファイルが見つかった場合のロールバックはできません。"

msgid "Database-specific fixtures"
msgstr "データベース別のフィクスチャ"

msgid ""
"If you're in a multi-database setup, you might have fixture data that you "
"want to load onto one database, but not onto another. In this situation, you "
"can add a database identifier into the names of your fixtures."
msgstr ""
"複数のデータベースをセットアップしている場合、あるデータベースには読み込ませ"
"たいが、別のデータベースには読み込ませたくないフィクスチャ・データがあるかも"
"しれません。このような状況では、フィクスチャの名前にデータベース識別子を追加"
"できます。"

msgid ""
"For example, if your :setting:`DATABASES` setting has a ``users`` database "
"defined, name the fixture ``mydata.users.json`` or ``mydata.users.json.gz`` "
"and the fixture will only be loaded when you specify you want to load data "
"into the ``users`` database."
msgstr ""
"例えば、 :setting:`DATABASES` 設定に ``users`` データベースが定義されている場"
"合、フィクスチャの名前を ``mydata.users.json`` または ``mydata.users.json."
"gz`` とすると、 ``users`` データベースにデータを読み込むと指定したときだけ"
"フィクスチャが読み込まれます。"

msgid "Models and databases"
msgstr "モデルとデータベース"

msgid ""
"A model is the single, definitive source of information about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Generally, each model maps to a single database table."
msgstr ""
"モデルは、データに関する唯一かつ決定的な情報源です。あなたが保持するデータが"
"必要とするフィールドとその動作を定義します。一般的に、各モデルは単一のデータ"
"ベースのテーブルに対応付けられます。"

msgid "Database instrumentation"
msgstr "データベースの計測"

msgid ""
"To help you understand and control the queries issued by your code, Django "
"provides a hook for installing wrapper functions around the execution of "
"database queries. For example, wrappers can count queries, measure query "
"duration, log queries, or even prevent query execution (e.g. to make sure "
"that no queries are issued while rendering a template with prefetched data)."
msgstr ""
"コードから発行されたクエリを理解して制御するために、Django は、データベースク"
"エリの実行周辺にラッパー関数をインストールするためのフックを提供しています。"
"たとえば、ラッパーは、クエリのカウント、クエリの実行時間の測定、クエリのロ"
"グ、さらにクエリの実行の防止までもできます (たとえば、プリフェッチされたデー"
"タを使用してテンプレートをレンダリングする間にクエリが発行されないようにする"
"ため)。"

msgid ""
"The wrappers are modeled after :doc:`middleware </topics/http/middleware>` "
"-- they are callables which take another callable as one of their arguments. "
"They call that callable to invoke the (possibly wrapped) database query, and "
"they can do what they want around that call. They are, however, created and "
"installed by user code, and so don't need a separate factory like middleware "
"do."
msgstr ""
"ラッパーは :doc:`ミドルウェア </topics/http/middleware>` にならったもので、別"
"の呼び出し可能オブジェクトを引数の1つとして受け取ります。ラッパーはデータベー"
"スクエリ(ラップされている可能性があります)を呼び出すために callable を呼び出"
"します。しかし、これらはユーザーコードによって作成され、インストールされるた"
"め、ミドルウェアのように個別のファクトリを必要としません。"

msgid ""
"Installing a wrapper is done in a context manager -- so the wrappers are "
"temporary and specific to some flow in your code."
msgstr ""
"ラッパーのインストールは、コンテキストマネージャで行われます。そのため、ラッ"
"パーは一時的なもので、コード内の特定のフローに特化したものです。"

msgid ""
"As mentioned above, an example of a wrapper is a query execution blocker. It "
"could look like this::"
msgstr ""
"前述したように、ラッパーの例はクエリ実行ブロッカーです。以下のようなものです:"

msgid ""
"And it would be used in a view to block queries from the template like so::"
msgstr ""
"そして、テンプレートからのクエリをブロックするには、ビューでこのように使用し"
"ます:"

msgid "The parameters sent to the wrappers are:"
msgstr "ラッパーに送られるパラメーターは以下の通りです:"

msgid ""
"``execute`` -- a callable, which should be invoked with the rest of the "
"parameters in order to execute the query."
msgstr ""
"``execute`` -- クエリを実行するために、残りのパラメータと一緒に呼び出される呼"
"び出し可能オブジェクト。"

msgid "``sql`` -- a ``str``, the SQL query to be sent to the database."
msgstr "``sql`` -- データベースに送信する SQL クエリの ``str``。"

msgid ""
"``params`` -- a list/tuple of parameter values for the SQL command, or a "
"list/tuple of lists/tuples if the wrapped call is ``executemany()``."
msgstr ""
"``params`` -- SQL コマンドのパラメータ値のリストまたはタプル、または、ラップ"
"された呼び出しが ``executemany()`` の場合はリストまたはタプルのリストまたはタ"
"プル。"

msgid ""
"``many`` -- a ``bool`` indicating whether the ultimately invoked call is "
"``execute()`` or ``executemany()`` (and whether ``params`` is expected to be "
"a sequence of values, or a sequence of sequences of values)."
msgstr ""
"``many`` -- 最終的に呼び出すのが ``execute()`` なのか ``executemany()`` なの"
"かを示す ``bool`` (``params`` が値のシーケンスなのか、値のシーケンスのシーケ"
"ンスなのかを示します)。"

msgid ""
"``context`` -- a dictionary with further data about the context of "
"invocation. This includes the connection and cursor."
msgstr ""
"``context`` -- 呼び出しのコンテキストに関するデータを含む辞書。これにはコネク"
"ションとカーソルが含まれます。"

msgid ""
"Using the parameters, a slightly more complex version of the blocker could "
"include the connection name in the error message::"
msgstr ""
"このパラメータを使用することで、次のように、もう少し複雑なバージョンのブロッ"
"カーで、エラーメッセージにコネクション名を含めることができます。"

msgid "For a more complete example, a query logger could look like this::"
msgstr "より完全な例として、クエリロガーは次のようになります。"

msgid ""
"To use this, you would create a logger object and install it as a wrapper::"
msgstr ""
"これを使用するには、ロガーオブジェクトを作成し、ラッパーとしてインストールし"
"ます。"

msgid "``connection.execute_wrapper()``"
msgstr "``connection.execute_wrapper()``"

msgid ""
"Returns a context manager which, when entered, installs a wrapper around "
"database query executions, and when exited, removes the wrapper. The wrapper "
"is installed on the thread-local connection object."
msgstr ""
"入力すると、データベースクエリ実行の周囲にラッパーをインストールし、終了する"
"とラッパーを削除するコンテキストマネージャを返します。ラッパーはスレッドロー"
"カルのコネクションオブジェクトにインストールされます。"

msgid ""
"``wrapper`` is a callable taking five arguments.  It is called for every "
"query execution in the scope of the context manager, with arguments "
"``execute``, ``sql``, ``params``, ``many``, and ``context`` as described "
"above. It's expected to call ``execute(sql, params, many, context)`` and "
"return the return value of that call."
msgstr ""
"``wrapper`` は5つの引数を取る呼び出し可能オブジェクトです。 上記のように、 "
"``execute``, ``sql``, ``params``, ``many``, ``context`` を引数として、コンテ"
"キストマネージャのスコープ内でクエリを実行するたびに呼び出されます。 "
"``execute(sql、params、many、context)`` を呼び出して、その戻り値を返すことが"
"期待されます。"

msgid "Managers"
msgstr "マネージャ"

msgid ""
"A ``Manager`` is the interface through which database query operations are "
"provided to Django models. At least one ``Manager`` exists for every model "
"in a Django application."
msgstr ""
"``マネージャ (Manager)`` とは、Django のモデルに対するデータベースクエリの操"
"作を提供するインターフェイスです。Django アプリケーション内の1つのモデルに対"
"して、``Manager`` は最低でも1つは存在します。"

msgid ""
"The way ``Manager`` classes work is documented in :doc:`/topics/db/queries`; "
"this document specifically touches on model options that customize "
"``Manager`` behavior."
msgstr ""
"``Manager`` クラスの詳細については、:doc:`/topics/db/queries` に書かれていま"
"す。ここでは、特に、``Manager`` の動作をカスタマイズするモデルのオプションに"
"ついて説明しています。"

msgid "Manager names"
msgstr "マネージャの名前"

msgid ""
"By default, Django adds a ``Manager`` with the name ``objects`` to every "
"Django model class. However, if you want to use ``objects`` as a field name, "
"or if you want to use a name other than ``objects`` for the ``Manager``, you "
"can rename it on a per-model basis. To rename the ``Manager`` for a given "
"class, define a class attribute of type ``models.Manager()`` on that model. "
"For example::"
msgstr ""
"デフォルトでは、Django は ``objects`` という名前の ``Manager`` を各 Django モ"
"デルクラスに対して追加します。しかし、もし ``objects`` をフィールド名として使"
"いたい場合や、あるいは、``Manager`` に対して ``objects`` 以外の名前を使いたい"
"場合には、各モデル単位で好きな名前を付けることができます。あるクラスの "
"``Manager`` の名前を変えるには、そのクラスの上で ``models.Manager()`` と書い"
"て、クラス変数を定義します。たとえば、次のように書きます。"

msgid ""
"Using this example model, ``Person.objects`` will generate an "
"``AttributeError`` exception, but ``Person.people.all()`` will provide a "
"list of all ``Person`` objects."
msgstr ""
"このモデル例を使うと、``Person.objects`` は ``AttributeError`` 例外を起こしま"
"すが、``Person.people.all()`` と書けば、すべての ``Person`` オブジェクトのリ"
"ストが得られます。"

msgid "Custom managers"
msgstr "マネージャのカスタマイズ"

msgid ""
"You can use a custom ``Manager`` in a particular model by extending the base "
"``Manager`` class and instantiating your custom ``Manager`` in your model."
msgstr ""
"``Manager`` ベースクラスを拡張し、カスタマイズした ``Manager`` をモデル内でイ"
"ンスタンス化すれば、特定のモデル用にカスタマイズした ``Manager`` を使うことが"
"できます。"

msgid ""
"There are two reasons you might want to customize a ``Manager``: to add "
"extra ``Manager`` methods, and/or to modify the initial ``QuerySet`` the "
"``Manager`` returns."
msgstr ""
"``Manager`` をカスタマイズしたくなるシチュエーションとしては、たとえば次の2つ"
"のような場合が考えられます。1つ目は、``Manager`` に新しいメソッドを追加したい"
"場合、もう1つは、``Manager`` が最初に返す ``QuerySet`` を修正したい場合です。"

msgid "Adding extra manager methods"
msgstr "マネージャに新しいメソッドを追加する"

msgid ""
"Adding extra ``Manager`` methods is the preferred way to add \"table-level\" "
"functionality to your models. (For \"row-level\" functionality -- i.e., "
"functions that act on a single instance of a model object -- use :ref:`Model "
"methods <model-methods>`, not custom ``Manager`` methods.)"
msgstr ""
"``Manager`` に新しいメソッドを追加するのがふさわしいのは、モデルに対する"
"「テーブルレベル」での操作を追加したい場合です。(「低レベル」の機能、たとえ"
"ば、あるモデルオブジェクトの1つのインスタンスに作用するような関数の場合には、"
"``Manager`` をカスタマイズするのではなく、:ref:`モデルメソッド <model-"
"methods>` を使ってください。"

msgid "For example, this custom ``Manager`` adds a method ``with_counts()``::"
msgstr ""
"たとえば、このカスタム ``Manager`` は ``with_counts()`` メソッドを追加します:"

msgid ""
"With this example, you'd use ``OpinionPoll.objects.with_counts()`` to get a "
"``QuerySet`` of ``OpinionPoll`` objects with the extra ``num_responses`` "
"attribute attached."
msgstr ""
"この例では、 ``OpinionPoll.objects.with_counts()`` を使うことで、 "
"``num_responses`` 属性が付加された ``OpinionPoll`` オブジェクトの "
"``QuerySet`` を得ることができます。"

msgid ""
"A custom ``Manager`` method can return anything you want. It doesn't have to "
"return a ``QuerySet``."
msgstr ""
"``Manager`` のカスタマイズメソッドは、どんなオブジェクトを返しても構いません"
"が、``QuerySet`` だけは返してはいけません。"

msgid ""
"Another thing to note is that ``Manager`` methods can access ``self.model`` "
"to get the model class to which they're attached."
msgstr ""
"注目すべきもう1つの点は、 ``Manager`` 内のメソッドではself.modelとすること"
"で、 ``Manager`` に紐づいているモデルクラスを取得できることです。"

msgid "Modifying a manager's initial ``QuerySet``"
msgstr "マネージャが初めに返す ``QuerySet`` を修正する"

msgid ""
"A ``Manager``’s base ``QuerySet`` returns all objects in the system. For "
"example, using this model::"
msgstr ""
"``Manager`` のベース ``QuerySet`` は、すべてのオブジェクトを返します。 たとえ"
"ば、このモデルの例では...::"

msgid ""
"...the statement ``Book.objects.all()`` will return all books in the "
"database."
msgstr "``Book.objects.all()`` は、データベース内の全ての本を返します。"

msgid ""
"You can override a ``Manager``’s base ``QuerySet`` by overriding the "
"``Manager.get_queryset()`` method. ``get_queryset()`` should return a "
"``QuerySet`` with the properties you require."
msgstr ""
"``Manager.get_queryset()`` メソッドをオーバーライドすることで、 ``Manager`` "
"のベース ``QuerySet`` を上書きできます。 ``get_queryset()`` は、必要な属性を"
"含む ``QuerySet`` を返す必要があります。"

msgid ""
"For example, the following model has *two* ``Manager``\\s -- one that "
"returns all objects, and one that returns only the books by Roald Dahl::"
msgstr ""
"例えば、次のモデルには *2つ* の ``Manager`` があります。片方はすべてのオブ"
"ジェクトを返し、もう片方はRoald Dahlの本のみを返します:"

msgid ""
"With this sample model, ``Book.objects.all()`` will return all books in the "
"database, but ``Book.dahl_objects.all()`` will only return the ones written "
"by Roald Dahl."
msgstr ""
"このモデルの例では、 ``Book.objects.all()`` はデータベース上の本を全て返 しま"
"すが、 ``Book.dahl_objects.all()`` は Roald Dahl の書いた本だけを返しま す。"

msgid ""
"Because ``get_queryset()`` returns a ``QuerySet`` object, you can use "
"``filter()``, ``exclude()`` and all the other ``QuerySet`` methods on it. So "
"these statements are all legal::"
msgstr ""
"``get_queryset()`` は ``QuerySet`` オブジェクトを返すので、 ``filter()`` 、 "
"``exclude()`` 、その他の ``QuerySet`` オブジェクトのメソッドを全て使えます。"
"したがって、以下のような文も実行できます。"

msgid ""
"This example also pointed out another interesting technique: using multiple "
"managers on the same model. You can attach as many ``Manager()`` instances "
"to a model as you'd like. This is a non-repetitive way to define common "
"\"filters\" for your models."
msgstr ""
"この例では、同じモデルで複数のマネージャを使用するという、追加の面白いテク"
"ニックも紹介しました。一つのモデルに対して、好きなだけ ``Manager()`` インスタ"
"ンスを割り当てることができます。これは、何度も同じコードを書かずにモデルに共"
"通の \"フィルタ\" を定義するための方法です。"

msgid ""
"This example allows you to request ``Person.authors.all()``, ``Person."
"editors.all()``, and ``Person.people.all()``, yielding predictable results."
msgstr ""
"この例では、``Person.authors.all()``、``Person.editors.all()``、``Person."
"people.all()`` を指定でき、期待通りの結果が得られます。"

msgid "Default managers"
msgstr "デフォルトマネージャ"

msgid ""
"If you use custom ``Manager`` objects, take note that the first ``Manager`` "
"Django encounters (in the order in which they're defined in the model) has a "
"special status. Django interprets the first ``Manager`` defined in a class "
"as the \"default\" ``Manager``, and several parts of Django (including :"
"djadmin:`dumpdata`) will use that ``Manager`` exclusively for that model. As "
"a result, it's a good idea to be careful in your choice of default manager "
"in order to avoid a situation where overriding ``get_queryset()`` results in "
"an inability to retrieve objects you'd like to work with."
msgstr ""
"カスタムの ``Manager`` オブジェクトを使う場合、 Django が (モデル内で定義され"
"た順番で) 最初に見つけた ``Manager`` には特別なステータスがあることに注意して"
"ください。Django はクラスで定義された最初の ``Manager`` を「デフォルト」の "
"``Manager`` と解釈し、Django の一部の機能 (:djadmin:`dumpdata` を含む) はその"
"モデル専用にその ``Manager`` を使用します。その結果、``get_queryset()`` を"
"オーバーライドした結果、利用したいオブジェクトを取得できなくなるという事態を"
"避けるために、デフォルトマネージャの選択には注意した方が良いでしょう。"

msgid ""
"You can specify a custom default manager using :attr:`Meta."
"default_manager_name <django.db.models.Options.default_manager_name>`."
msgstr ""
"カスタムのデフォルトマネージャは :attr:`Meta.default_manager_name <django.db."
"models.Options.default_manager_name>` で指定できます。"

msgid ""
"If you're writing some code that must handle an unknown model, for example, "
"in a third-party app that implements a generic view, use this manager (or :"
"attr:`~Model._base_manager`) rather than assuming the model has an "
"``objects`` manager."
msgstr ""
"たとえば、ジェネリックビューを実装しているサードパーティのアプリで、未知のモ"
"デルを扱わなければならないコードを書いている場合、モデルが ``objects`` マネー"
"ジャを持っていると仮定するのではなく、このマネージャ (または :attr:`~Model."
"_base_manager`) を使用してください。"

msgid "Base managers"
msgstr "ベースマネージャ"

msgid "Using managers for related object access"
msgstr "マネージャによるリレーション先オブジェクトへのアクセス"

msgid ""
"By default, Django uses an instance of the ``Model._base_manager`` manager "
"class when accessing related objects (i.e. ``choice.question``), not the "
"``_default_manager`` on the related object. This is because Django needs to "
"be able to retrieve the related object, even if it would otherwise be "
"filtered out (and hence be inaccessible) by the default manager."
msgstr ""
"デフォルトでは、Django はリレーション先オブジェクト (例えば ``choice."
"question``) にアクセスする際に、リレーション先オブジェクトの "
"``_default_manager`` ではなく、 ``Model._base_manager`` マネージャクラスのイ"
"ンスタンスを使います。これは Django がリレーション先オブジェクトを取得できる"
"ようにする必要があるためで、そうしないとデフォルトマネージャでフィルタリング"
"されてしまう (つまりアクセスできない) からです。"

msgid ""
"If the normal base manager class (:class:`django.db.models.Manager`) isn't "
"appropriate for your circumstances, you can tell Django which class to use "
"by setting :attr:`Meta.base_manager_name <django.db.models.Options."
"base_manager_name>`."
msgstr ""
"通常のベースマネージャクラス (:class:`django.db.models.Manager`) があなたの環"
"境に合わない場合、 :attr:`Meta.base_manager_name <django.db.models.Options."
"base_manager_name>` を設定することで、 Django にどのクラスを使うかを指示でき"
"ます。"

msgid ""
"Base managers aren't used when querying on related models, or when :ref:"
"`accessing a one-to-many or many-to-many relationship <backwards-related-"
"objects>`. For example, if the ``Question`` model :ref:`from the tutorial "
"<creating-models>` had a ``deleted`` field and a base manager that filters "
"out instances with ``deleted=True``, a queryset like ``Choice.objects."
"filter(question__name__startswith='What')`` would include choices related to "
"deleted questions."
msgstr ""
"ベースマネージャはリレーション先モデルのクエリや、:ref:`1対多や多対多のリレー"
"ションシップ <backwards-related-objects>` にアクセスする場合には使用されませ"
"ん。たとえば、 :ref:`チュートリアルの <creating-models>` ``Question`` モデル"
"に ``deleted`` フィールドがあり、 ``deleted=True`` のインスタンスをフィルタリ"
"ングするベースマネージャがあった場合、``Choice.objects."
"filter(question__name__startswith='What')`` のようなクエリセットには削除され"
"た質問に関連する選択肢が含まれます。"

msgid "Don't filter away any results in this type of manager subclass"
msgstr ""
"このタイプのマネージャのサブクラスでは、結果をフィルタリングしないでくださ"
"い。"

msgid ""
"This manager is used to access objects that are related to from some other "
"model. In those situations, Django has to be able to see all the objects for "
"the model it is fetching, so that *anything* which is referred to can be "
"retrieved."
msgstr ""
"このマネージャは、他のモデルからリレーション先オブジェクトにアクセスするため"
"に 使用されます。このような状況では、 Django は、参照されるオブジェクトを *す"
"べて* 取得できるように、取得するモデルのすべてのオブジェクトを見ることができ"
"なければなりません。"

msgid ""
"Therefore, you should not override ``get_queryset()`` to filter out any "
"rows. If you do so, Django will return incomplete results."
msgstr ""
"したがって、 ``get_queryset()`` をオーバーライドして行をフィルタリングしては"
"いけません。もしそうすれば、 Django は不完全な結果を返します。"

msgid "Calling custom ``QuerySet`` methods from the manager"
msgstr "カスタマイズした ``QuerySet`` のメソッド をマネージャから呼び出す"

msgid ""
"While most methods from the standard ``QuerySet`` are accessible directly "
"from the ``Manager``, this is only the case for the extra methods defined on "
"a custom ``QuerySet`` if you also implement them on the ``Manager``::"
msgstr ""
"標準の ``QuerySet`` のほとんどのメソッドは ``Manager`` から直接アクセスできま"
"すが、カスタムの ``QuerySet`` で定義したメソッドは ``Manager`` でも実装する必"
"要があります:"

msgid ""
"This example allows you to call both ``authors()`` and ``editors()`` "
"directly from the manager ``Person.people``."
msgstr ""
"この例では ``authors()`` と ``editors()`` の両方をマネージャ ``Person."
"people`` から直接呼び出すことができます。"

msgid "Creating a manager with ``QuerySet`` methods"
msgstr "``QuerySet`` のメソッドで、マネージャを生成する"

msgid ""
"In lieu of the above approach which requires duplicating methods on both the "
"``QuerySet`` and the ``Manager``, :meth:`QuerySet.as_manager() <django.db."
"models.query.QuerySet.as_manager>` can be used to create an instance of "
"``Manager`` with a copy of a custom ``QuerySet``’s methods::"
msgstr ""
"``QuerySet`` と ``Manager`` の両方でメソッドを複製する必要がある上記の方法の"
"代わりに、 :meth:`QuerySet.as_manager() <django.db.models.query.QuerySet."
"as_manager>` を使用すると、カスタムした ``QuerySet`` のメソッドをコピーした "
"``Manager`` のインスタンスを作成できます:"

msgid ""
"The ``Manager`` instance created by :meth:`QuerySet.as_manager() <django.db."
"models.query.QuerySet.as_manager>` will be virtually identical to the "
"``PersonManager`` from the previous example."
msgstr ""
":meth:`QuerySet.as_manager() <django.db.models.query.QuerySet.as_manager>` に"
"よって生成される ``Manager`` インスタンスは、前の例の ``PersonManager`` とほ"
"ぼ同じになります。"

msgid ""
"Not every ``QuerySet`` method makes sense at the ``Manager`` level; for "
"instance we intentionally prevent the :meth:`QuerySet.delete() <django.db."
"models.query.QuerySet.delete>` method from being copied onto the ``Manager`` "
"class."
msgstr ""
"すべての ``QuerySet`` メソッドが ``Manager`` レベルで意味を持つわけではありま"
"せん。例えば、 :meth:`QuerySet.delete() <django.db.models.query.QuerySet."
"delete>` メソッドが ``Manager`` クラスにコピーされることは意図的に防いであり"
"ます。"

msgid "Methods are copied according to the following rules:"
msgstr "メソッドは以下の規則に従ってコピーされます:"

msgid "Public methods are copied by default."
msgstr "パブリックメソッドはデフォルトでコピーされます。"

msgid ""
"Private methods (starting with an underscore) are not copied by default."
msgstr ""
"プライベートメソッド (アンダースコアで始まるメソッド) は、デフォルトではコ"
"ピーされません。"

msgid ""
"Methods with a ``queryset_only`` attribute set to ``False`` are always "
"copied."
msgstr ""
"``queryset_only`` 属性が ``False`` に設定されているメソッドは常にコピーされま"
"す。"

msgid ""
"Methods with a ``queryset_only`` attribute set to ``True`` are never copied."
msgstr ""
"``queryset_only`` 属性が ``True`` に設定されているメソッドはコピーされませ"
"ん。"

msgid "``from_queryset()``"
msgstr "``from_queryset()``"

msgid ""
"For advanced usage you might want both a custom ``Manager`` and a custom "
"``QuerySet``. You can do that by calling ``Manager.from_queryset()`` which "
"returns a *subclass* of your base ``Manager`` with a copy of the custom "
"``QuerySet`` methods::"
msgstr ""
"高度な使い方をする場合には、カスタムの ``Manager`` とカスタムの ``QuerySet`` "
"の両方が必要になるかもしれません。この場合、 ``Manager.from_queryset()`` を呼"
"び出すことで、カスタム ``QuerySet`` メソッドをコピーしたベース ``Manager`` "
"の *サブクラス* を返すことができます:"

msgid "You may also store the generated class into a variable::"
msgstr "生成されたクラスを変数に格納することもできます:"

msgid "Custom managers and model inheritance"
msgstr "カスタムマネージャとモデルの継承"

msgid ""
"Here's how Django handles custom managers and :ref:`model inheritance <model-"
"inheritance>`:"
msgstr ""
"Django がカスタムマネージャと :ref:`モデルの継承 <model-inheritance>` をどの"
"ように扱うかを以下に示します:"

msgid ""
"Managers from base classes are always inherited by the child class, using "
"Python's normal name resolution order (names on the child class override all "
"others; then come names on the first parent class, and so on)."
msgstr ""
"Python の通常の名前解決順序を使って (子クラスの名前は他を全て上書きし、次に最"
"初の親クラスの名前、 というように) 、基底クラスのマネージャは常に子クラスに継"
"承されます。"

msgid ""
"If no managers are declared on a model and/or its parents, Django "
"automatically creates the ``objects`` manager."
msgstr ""
"モデルやその親クラスでマネージャが宣言されていない場合、Django は自動的に "
"``objects`` マネージャを作成します。"

msgid ""
"The default manager on a class is either the one chosen with :attr:`Meta."
"default_manager_name <django.db.models.Options.default_manager_name>`, or "
"the first manager declared on the model, or the default manager of the first "
"parent model."
msgstr ""
"クラスのデフォルトマネージャは :attr:`Meta.default_manager_name <django.db."
"models.Options.default_manager_name>` で選択されたマネージャか、モデル上で最"
"初に宣言されたマネージャか、最初の親モデルのデフォルトマネージャです。"

msgid ""
"These rules provide the necessary flexibility if you want to install a "
"collection of custom managers on a group of models, via an abstract base "
"class, but still customize the default manager. For example, suppose you "
"have this base class::"
msgstr ""
"これらのルールは、抽象的な基底クラスを経由して、カスタムマネージャのコレク"
"ションをモデルのグループにインストールしたい場合でも、デフォルトのマネージャ"
"をカスタマイズするために必要な柔軟性を提供します。たとえば、次のような基底ク"
"ラスがあるとします:"

msgid ""
"If you use this directly in a child class, ``objects`` will be the default "
"manager if you declare no managers in the child class::"
msgstr ""
"これを子クラスで直接使用した場合、子クラスでマネージャを宣言していなければ "
"``objects`` がデフォルトのマネージャになります:"

msgid ""
"If you want to inherit from ``AbstractBase``, but provide a different "
"default manager, you can provide the default manager on the child class::"
msgstr ""
"もし ``AbstractBase`` を継承して別のデフォルトマネージャを指定したい場合は、"
"子クラスにそのデフォルトマネージャを指定できます:"

msgid ""
"Here, ``default_manager`` is the default. The ``objects`` manager is still "
"available, since it's inherited, but isn't used as the default."
msgstr ""
"上記では ``default_manager`` がデフォルトです。 ``objects`` マネージャは継承"
"されているのでまだ使用可能ですが、デフォルトでは使用されません。"

msgid ""
"Finally for this example, suppose you want to add extra managers to the "
"child class, but still use the default from ``AbstractBase``. You can't add "
"the new manager directly in the child class, as that would override the "
"default and you would have to also explicitly include all the managers from "
"the abstract base class. The solution is to put the extra managers in "
"another base class and introduce it into the inheritance hierarchy *after* "
"the defaults::"
msgstr ""
"最後に、この例では ``AbstractBase`` のデフォルトを使用しつつ、子クラスに追加"
"のマネージャを追加したいとします。 新しいマネージャを子クラスに直接追加するこ"
"とはできません。デフォルトをオーバーライドすることになり、抽象基底クラスのす"
"べてのマネージャを明示的にインクルードする必要があるからです。解決策として"
"は、追加のマネージャを別の基底クラスに置き、それをデフォルトクラスの *後の* "
"継承階層に含めることです:"

msgid ""
"Note that while you can *define* a custom manager on the abstract model, you "
"can't *invoke* any methods using the abstract model. That is::"
msgstr ""
"抽象モデル上でカスタムマネージャを *定義* することはできますが、抽象モデルを"
"使ってメソッドを *呼び出す* ことはできないことに注意してください。 つまり:"

msgid "is legal, but::"
msgstr "上記は有効なコードですが、:"

msgid ""
"will raise an exception. This is because managers are intended to "
"encapsulate logic for managing collections of objects. Since you can't have "
"a collection of abstract objects, it doesn't make sense to be managing them. "
"If you have functionality that applies to the abstract model, you should put "
"that functionality in a ``staticmethod`` or ``classmethod`` on the abstract "
"model."
msgstr ""
"上記では例外が発生します。 これはマネージャがオブジェクトのコレクションを管理"
"するためのロジックをカプセル化することを想定しているためです。抽象オブジェク"
"トのコレクションを持つことはできないので、それらを管理することは意味がありま"
"せん。抽象モデルに適用される機能がある場合、その機能は抽象モデルの "
"staticmethod か classmethod に置くべきです。"

msgid "Implementation concerns"
msgstr "実装する際の注意"

msgid ""
"Whatever features you add to your custom ``Manager``, it must be possible to "
"make a shallow copy of a ``Manager`` instance; i.e., the following code must "
"work:"
msgstr ""
"カスタムマネージャにどのような機能を追加するにしても、マネージャインスタンス"
"の浅いコピーを作成できることが必須です:"

msgid ""
"Django makes shallow copies of manager objects during certain queries; if "
"your Manager cannot be copied, those queries will fail."
msgstr ""
"Django は特定のクエリ中にマネージャオブジェクトの浅いコピーを作成します。マ"
"ネージャがコピーできない場合、これらのクエリは失敗します。"

msgid ""
"This won't be an issue for most custom managers. If you are just adding "
"simple methods to your ``Manager``, it is unlikely that you will "
"inadvertently make instances of your ``Manager`` uncopyable. However, if "
"you're overriding ``__getattr__`` or some other private method of your "
"``Manager`` object that controls object state, you should ensure that you "
"don't affect the ability of your ``Manager`` to be copied."
msgstr ""
"ほとんどのカスタムマネージャでは問題にならないでしょう。単純なメソッドを "
"``Manager`` に追加するだけであれば、 ``Manager`` のインスタンスをコピー不可能"
"にすることはまずありません。しかし、オブジェクトの状態をコントロールする "
"``Manager`` オブジェクトの ``__getattr__`` やその他のプライベートメソッドを"
"オーバーライドする場合は、 ``Manager`` のコピー機能に影響を与えないようにする"
"必要があります。"

msgid "Models"
msgstr "モデル"

msgid "The basics:"
msgstr "基本:"

msgid ""
"Each model is a Python class that subclasses :class:`django.db.models.Model`."
msgstr ""
"モデルは各々 Python のクラスであり :class:`django.db.models.Model` のサブクラ"
"スです。"

msgid "Each attribute of the model represents a database field."
msgstr "モデルの属性はそれぞれがデータベースのフィールドを表します。"

msgid ""
"With all of this, Django gives you an automatically-generated database-"
"access API; see :doc:`/topics/db/queries`."
msgstr ""
"これら全てを用いて、Django はデータベースにアクセスする自動生成された API を"
"提供します。 :doc:`/topics/db/queries` を参照してください。"

msgid "Quick example"
msgstr "簡単な例"

msgid ""
"This example model defines a ``Person``, which has a ``first_name`` and "
"``last_name``::"
msgstr ""
"次の例では ``first_name`` と ``last_name`` を持つ ``Person`` というモデルを定"
"義しています。"

msgid ""
"``first_name`` and ``last_name`` are fields_ of the model. Each field is "
"specified as a class attribute, and each attribute maps to a database column."
msgstr ""
"``first_name`` および ``last_name`` はこのモデルの フィールド_ です。各フィー"
"ルドはクラスの属性として定義され、各属性はデータベースのカラムに関連付けられ"
"ます。"

msgid "The above ``Person`` model would create a database table like this:"
msgstr ""
"上記の ``Person`` モデルは以下のようなデータベースのテーブルを作成します:"

msgid "Some technical notes:"
msgstr "技術的な注意点:"

msgid ""
"The name of the table, ``myapp_person``, is automatically derived from some "
"model metadata but can be overridden. See :ref:`table-names` for more "
"details."
msgstr ""
"``myapp_person`` というテーブル名は、いくつかのモデルのメタデータから自動的に"
"生成されますが、それを無効化することもできます。詳細は :ref:`table-names` を"
"参照ください。"

msgid ""
"An ``id`` field is added automatically, but this behavior can be overridden. "
"See :ref:`automatic-primary-key-fields`."
msgstr ""
"``id`` フィールドは自動的に追加されますが、この処理は無効化することもできま"
"す。:ref:`automatic-primary-key-fields` を参照ください。"

msgid ""
"The ``CREATE TABLE`` SQL in this example is formatted using PostgreSQL "
"syntax, but it's worth noting Django uses SQL tailored to the database "
"backend specified in your :doc:`settings file </topics/settings>`."
msgstr ""
"この例における ``CREATE TABLE`` の SQL は PostgreSQL の文法に準拠しています"
"が、Django は :doc:`設定ファイル </topics/settings>` 内に定義されたデータベー"
"スバックエンドに合わせた SQL を適切に生成してくれるということを覚えておくとよ"
"いでしょう。"

msgid "Using models"
msgstr "モデルの利用"

msgid ""
"Once you have defined your models, you need to tell Django you're going to "
"*use* those models. Do this by editing your settings file and changing the :"
"setting:`INSTALLED_APPS` setting to add the name of the module that contains "
"your ``models.py``."
msgstr ""
"一度モデルを定義した後は、Django にこれらのモデルを *利用する* ということを知"
"らせる必要があります。そのためには、設定ファイルを編集して、設定値 :setting:"
"`INSTALLED_APPS` に、定義した ``models.py`` を含むモジュール名を追加します。"

msgid ""
"For example, if the models for your application live in the module ``myapp."
"models`` (the package structure that is created for an application by the :"
"djadmin:`manage.py startapp <startapp>` script), :setting:`INSTALLED_APPS` "
"should read, in part::"
msgstr ""
"たとえば、アプリケーションのモデルが ``myapp.models`` モジュール内に存在する"
"場合 (このパッケージ構造は :djadmin:`manage.py startapp <startapp>` スクリプ"
"トによってアプリケーション内に構築されるものです)、:setting:`INSTALLED_APPS` "
"の部分を次のように定義します。"

msgid ""
"When you add new apps to :setting:`INSTALLED_APPS`, be sure to run :djadmin:"
"`manage.py migrate <migrate>`, optionally making migrations for them first "
"with :djadmin:`manage.py makemigrations <makemigrations>`."
msgstr ""
":setting:`INSTALLED_APPS` 内に新たなアプリケーションを追加した場合、:djadmin:"
"`manage.py migrate <migrate>` を、初回は必要に応じて :djadmin:`manage.py "
"makemigrations <makemigrations>` を忘れずに実行してください。"

msgid "Fields"
msgstr "フィールド"

msgid ""
"The most important part of a model -- and the only required part of a model "
"-- is the list of database fields it defines. Fields are specified by class "
"attributes. Be careful not to choose field names that conflict with the :doc:"
"`models API </ref/models/instances>` like ``clean``, ``save``, or ``delete``."
msgstr ""
"モデルにおいて最も重要な箇所であり -- モデルにおいて唯一必須となっている箇所 "
"-- それはそのモデルが定義するデータベースのフィールドの一覧です。フィールドは"
"クラスの属性として定義されます。``clean``、``save`` あるいは ``delete`` のよ"
"うなフィールド名は、:doc:`モデル API </ref/models/instances>` で利用されてい"
"て衝突してしまうため、選べないことに注意してください。"

msgid "Example::"
msgstr "実装例::"

msgid "Field types"
msgstr "フィールドの型"

msgid ""
"Each field in your model should be an instance of the appropriate :class:"
"`~django.db.models.Field` class. Django uses the field class types to "
"determine a few things:"
msgstr ""
"モデル内の各フィールドは適切に :class:`~django.db.models.Field` クラスのイン"
"スタンスとなっている必要があります。Django は、利用しているフィールドクラスの"
"型に応じて以下のような挙動を決定します。"

msgid ""
"The column type, which tells the database what kind of data to store (e.g. "
"``INTEGER``, ``VARCHAR``, ``TEXT``)."
msgstr ""
"データベースに対して保存するデータのタイプを伝えるカラムの型です (例: "
"``INTEGER``、``VARCHAR``、``TEXT``)。"

msgid ""
"The default HTML :doc:`widget </ref/forms/widgets>` to use when rendering a "
"form field (e.g. ``<input type=\"text\">``, ``<select>``)."
msgstr ""
"フォーム領域をレンダリングする際に利用するデフォルトの HTML :doc:`ウィジェッ"
"ト </ref/forms/widgets>` (例えば ``<input type=\"text\">``、 ``<select>``)。"

msgid ""
"The minimal validation requirements, used in Django's admin and in "
"automatically-generated forms."
msgstr ""
"最低限必要とされる入力値確認、Django の管理機能と自動生成されるフォームにおい"
"て利用されます。"

msgid ""
"Django ships with dozens of built-in field types; you can find the complete "
"list in the :ref:`model field reference <model-field-types>`. You can easily "
"write your own fields if Django's built-in ones don't do the trick; see :doc:"
"`/howto/custom-model-fields`."
msgstr ""
"Django は多くのフィールド型を内蔵しています; それらの完全な一覧は :ref:`"
"フィールドの型 <model-field-types>` で確認できます。もし Django に内蔵された"
"フィールドの型では実現できない機能を実装したい場合は独自のフィールドを簡単に"
"記述できます; :doc:`/howto/custom-model-fields` を参照してください。"

msgid "Field options"
msgstr "フィールドオプション"

msgid ""
"Each field takes a certain set of field-specific arguments (documented in "
"the :ref:`model field reference <model-field-types>`). For example, :class:"
"`~django.db.models.CharField` (and its subclasses) require a :attr:`~django."
"db.models.CharField.max_length` argument which specifies the size of the "
"``VARCHAR`` database field used to store the data."
msgstr ""
"フィールドはそれぞれあらかじめ定められたフィールド特有の引数 ( :ref:`モデルの"
"フィールド型一覧 <model-field-types>` にまとめられています) を受け取ります。"
"例えば、:class:`~django.db.models.CharField` (およびそのサブクラス) はその"
"データを保持するためにデータベース上に定義される ``VARCHAR`` 領域の長さを定義"
"する引数 :attr:`~django.db.models.CharField.max_length` を必要とします。"

msgid ""
"There's also a set of common arguments available to all field types. All are "
"optional. They're fully explained in the :ref:`reference <common-model-field-"
"options>`, but here's a quick summary of the most often-used ones:"
msgstr ""
"全てのフィールドの型で利用できる共通の引数も存在します。すべてオプションの引"
"数です。これらの引数についてはこちらの :ref:`リファレンス <common-model-"
"field-options>` 内で全て説明されていますが、ここでは、特に頻繁に使われるもの"
"について簡単な概要を説明します。"

msgid ":attr:`~Field.null`"
msgstr ":attr:`~Field.null`"

msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr ""
"``True`` の場合、Django はデータベース内に ``NULL`` として空の値を保持しま"
"す。デフォルトは ``False`` です。"

msgid ":attr:`~Field.blank`"
msgstr ":attr:`~Field.blank`"

msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""
"``True`` の場合、フィールドはブランクになることが許容されます。デフォルトは "
"``False`` です。"

msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is "
"purely database-related, whereas :attr:`~Field.blank` is validation-related. "
"If a field has :attr:`blank=True <Field.blank>`, form validation will allow "
"entry of an empty value. If a field has :attr:`blank=False <Field.blank>`, "
"the field will be required."
msgstr ""
":attr:`~Field.null` とは挙動が異なる事に注意してください。 :attr:`~Field."
"blank` がバリデーション由来である一方、 :attr:`~Field.null` は完全にデータ"
"ベース由来です。あるフィールドが :attr:`blank=True <Field.blank>` であれば、"
"フォームのバリデーションは空の値の入力を許容します。あるフィールドが :attr:"
"`blank=False <Field.blank>` の場合は、そのフィールドへの入力は必須となりま"
"す。"

msgid ":attr:`~Field.choices`"
msgstr ":attr:`~Field.choices`"

msgid ""
"A :term:`sequence` of 2-value tuples, a :term:`mapping`, an :ref:"
"`enumeration type <field-choices-enum-types>`, or a callable (that expects "
"no arguments and returns any of the previous formats), to use as choices for "
"this field. If this is given, the default form widget will be a select box "
"instead of the standard text field and will limit choices to the choices "
"given."
msgstr ""
"2 値タプルの :term:`sequence`, もしくは :term:`mapping`, :ref:`列挙型 <field-"
"choices-enum-types>`, または呼び出し可能オブジェクト (引数を指定せず、前述の"
"形式のいずれかを返す) をこのフィールドの選択肢として使用します。これが指定さ"
"れた場合、デフォルトのフォームウィジェットは標準のテキストフィールドではなく"
"セレクトボックスとなり、選択肢は指定されたものに制限されます。"

msgid "A choices list looks like this::"
msgstr "選択肢のリストは以下のようになります。"

msgid "A new migration is created each time the order of ``choices`` changes."
msgstr ""
"``choices`` の順番を変更すると、変更のたびに新しいマイグレーションが生成され"
"ます。"

msgid ""
"The first element in each tuple is the value that will be stored in the "
"database. The second element is displayed by the field's form widget."
msgstr ""
"各タプルの1番目の要素はデータベースに保存される値です。2番目の要素はフォーム"
"ウィジェットに表示される名前です。"

msgid ""
"Given a model instance, the display value for a field with ``choices`` can "
"be accessed using the :meth:`~django.db.models.Model.get_FOO_display` "
"method. For example::"
msgstr ""
"モデルのインスタンスが与えられたとき、``choices`` のフィールドに対して表示さ"
"れる値は、:meth:`~django.db.models.Model.get_FOO_display` メソッドを用いてア"
"クセスできます。たとえば、次のようになります。"

msgid ""
"You can also use enumeration classes to define ``choices`` in a concise way::"
msgstr "列挙型クラスを用いて、``choices`` を簡潔に定義することもできます。"

msgid ""
"Further examples are available in the :ref:`model field reference <field-"
"choices>`."
msgstr ""
"さらに他の例は :ref:`model field リファレンス <field-choices>` で見ることがで"
"きます。"

msgid "Support for mappings and callables was added."
msgstr "マッピングと callable のサポートが追加されました。"

msgid ":attr:`~Field.default`"
msgstr ":attr:`~Field.default`"

msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr ""
"そのフィールドのデフォルト値です。このオプションには特定の値または呼び出し可"
"能オブジェクトを渡すことができます。呼び出し可能オブジェクトの場合、新しくオ"
"ブジェクトが生成される度に呼び出されます。"

msgid ":attr:`~Field.help_text`"
msgstr ":attr:`~Field.help_text`"

msgid ""
"Extra \"help\" text to be displayed with the form widget. It's useful for "
"documentation even if your field isn't used on a form."
msgstr ""
"フォームウィジェットとともに表示される追加の「ヘルプ」テキストです。この値は"
"フィールドがフォームとして利用されない場合でもドキュメントとして役に立ちま"
"す。"

msgid ":attr:`~Field.primary_key`"
msgstr ":attr:`~Field.primary_key`"

msgid "If ``True``, this field is the primary key for the model."
msgstr "``True`` の場合、設定したフィールドはそのモデルの主キーとなります。"

msgid ""
"If you don't specify :attr:`primary_key=True <Field.primary_key>` for any "
"fields in your model, Django will automatically add an :class:`IntegerField` "
"to hold the primary key, so you don't need to set :attr:`primary_key=True "
"<Field.primary_key>` on any of your fields unless you want to override the "
"default primary-key behavior. For more, see :ref:`automatic-primary-key-"
"fields`."
msgstr ""
"定義したモデル内でどのフィールドに対しても :attr:`primary_key=True <Field."
"primary_key>` が設定されなかった場合、Django は自動的に主キーを保存するため"
"に :class:`IntegerField` を追加します、つまり、その主キーに対するデフォルトの"
"動作を変更する必要がない場合は、どのフィールドに対しても :attr:"
"`primary_key=True <Field.primary_key>` を設定する必要がありません。詳細は :"
"ref:`automatic-primary-key-fields` を参照してください。"

msgid ""
"The primary key field is read-only. If you change the value of the primary "
"key on an existing object and then save it, a new object will be created "
"alongside the old one. For example::"
msgstr ""
"主キーとなったフィールドは読み込み専用となります。もし既存のオブジェクトの主"
"キーの値を変更して保存する操作を行うと、既存のオブジェクトに加えて新たなオブ"
"ジェクトが生成されます。以下に例を示します。"

msgid ":attr:`~Field.unique`"
msgstr ":attr:`~Field.unique`"

msgid "If ``True``, this field must be unique throughout the table."
msgstr ""
"``True`` の場合、そのフィールドはテーブル上で一意となる制約を受けます。"

msgid ""
"Again, these are just short descriptions of the most common field options. "
"Full details can be found in the :ref:`common model field option reference "
"<common-model-field-options>`."
msgstr ""
"繰り返しになりますが、これらは特によく利用されるフィールドのオプションの概説"
"です。完全な説明は :ref:`共通のフィールドオプションの説明 <common-model-"
"field-options>` で参照できます。"

msgid "Automatic primary key fields"
msgstr "自動インクリメントのプライマリーキーフィールド"

msgid ""
"By default, Django gives each model an auto-incrementing primary key with "
"the type specified per app in :attr:`AppConfig.default_auto_field <django."
"apps.AppConfig.default_auto_field>` or globally in the :setting:"
"`DEFAULT_AUTO_FIELD` setting. For example::"
msgstr ""
"デフォルトでは、Django は各モデルに、 :attr:`AppConfig.default_auto_field "
"<django.apps.AppConfig.default_auto_field>` でアプリごとに指定した型、また"
"は :setting:`DEFAULT_AUTO_FIELD` 設定でグローバルに指定した型の自動インクリメ"
"ントの主キーを付与します。例えば:"

msgid ""
"If you'd like to specify a custom primary key, specify :attr:"
"`primary_key=True <Field.primary_key>` on one of your fields. If Django sees "
"you've explicitly set :attr:`Field.primary_key`, it won't add the automatic "
"``id`` column."
msgstr ""
"独自の主キーを設定したい場合は、いずれかのフィールドで :attr:"
"`primary_key=True <Field.primary_key>` を設定してください。そのようにして明示"
"的に :attr:`Field.primary_key` が設定されている場合、Djangoは自動的に ``id`` "
"カラムを追加しません。"

msgid ""
"Each model requires exactly one field to have :attr:`primary_key=True <Field."
"primary_key>` (either explicitly declared or automatically added)."
msgstr ""
"各モデルには、:attr:`primary_key=True <Field.primary_key>` が必ず 1 つだけ "
"(明示的に宣言されるか、自動的に追加されるかのどちらかで) 存在する必要がありま"
"す。"

msgid "Verbose field names"
msgstr "詳細な (verbose) フィールド名"

msgid ""
"Each field type, except for :class:`~django.db.models.ForeignKey`, :class:"
"`~django.db.models.ManyToManyField` and :class:`~django.db.models."
"OneToOneField`, takes an optional first positional argument -- a verbose "
"name. If the verbose name isn't given, Django will automatically create it "
"using the field's attribute name, converting underscores to spaces."
msgstr ""
":class:`~django.db.models.ForeignKey`、:class:`~django.db.models."
"ManyToManyField` 、:class:`~django.db.models.OneToOneField` の 3 つを除いた各"
"フィールドは、任意の第 1 引数を取ります -- 詳細な (verbose) 名前です。詳細な"
"名前を与えない場合、Django は自動的にフィールドの属性名のアンダースコアをス"
"ペースに変換したものを生成します。"

msgid "In this example, the verbose name is ``\"person's first name\"``::"
msgstr "以下の例では、詳細な名前は ``\"person's first name\"`` です::"

msgid "In this example, the verbose name is ``\"first name\"``::"
msgstr "以下の例では、詳細な名前は ``\"first name\"`` です::"

msgid ""
":class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` and :class:`~django.db.models.OneToOneField` require the "
"first argument to be a model class, so use the :attr:`~Field.verbose_name` "
"keyword argument::"
msgstr ""
":class:`~django.db.models.ForeignKey`、:class:`~django.db.models."
"ManyToManyField` 、:class:`~django.db.models.OneToOneField` の 3 つは最初の引"
"数にモデルクラスを必要とするので、:attr:`~Field.verbose_name` キーワード引数"
"を使用してください::"

msgid ""
"The convention is not to capitalize the first letter of the :attr:`~Field."
"verbose_name`. Django will automatically capitalize the first letter where "
"it needs to."
msgstr ""
"慣習的に、:attr:`~Field.verbose_name` の最初の文字は大文字にしません。必要に"
"応じて Django が自動的に変換します。"

msgid "Relationships"
msgstr "リレーション"

msgid ""
"Clearly, the power of relational databases lies in relating tables to each "
"other. Django offers ways to define the three most common types of database "
"relationships: many-to-one, many-to-many and one-to-one."
msgstr ""
"リレーショナルデータベースの強力さがテーブル同士の関係によって決まることは疑"
"いがありません。Dango では、最も一般的な 3 つのデータベースリレーションシップ"
"を定義しています: 多対 1、多対多、1 対 1 です。"

msgid ""
"To define a many-to-one relationship, use :class:`django.db.models."
"ForeignKey`. You use it just like any other :class:`~django.db.models.Field` "
"type: by including it as a class attribute of your model."
msgstr ""
"多対 1 の関係を定義するには、:class:`django.db.models.ForeignKey` を使用して"
"ください。 使い方は他の :class:`~django.db.models.Field` 型と同じです: モデル"
"のクラス属性として含めてください。"

msgid ""
":class:`~django.db.models.ForeignKey` requires a positional argument: the "
"class to which the model is related."
msgstr ""
":class:`~django.db.models.ForeignKey` には位置引数が必要です: モデルと関係さ"
"せるクラスです。"

msgid ""
"For example, if a ``Car`` model has a ``Manufacturer`` -- that is, a "
"``Manufacturer`` makes multiple cars but each ``Car`` only has one "
"``Manufacturer`` -- use the following definitions::"
msgstr ""
"たとえば、``Car`` モデル ``Manufacturer`` を持っている場合、つまり、 "
"``Manufacturer`` は複数の car を作る一方で ``Car`` は 1 つしか "
"``Manufacturer`` を持たない場合、以下の定義を使用してください。"

msgid ""
"You can also create :ref:`recursive relationships <recursive-relationships>` "
"(an object with a many-to-one relationship to itself) and :ref:"
"`relationships to models not yet defined <lazy-relationships>`; see :ref:"
"`the model field reference <ref-foreignkey>` for details."
msgstr ""
":ref:`再帰的なリレーションシップ <recursive-relationships>` (自分自身に対する"
"多対 1 の関係を持つオブジェクト) や :ref:`まだ定義されていないモデルへのリ"
"レーションシップ <lazy-relationships>` を作成することもできます。詳細は :ref:"
"`モデルフィールドのリファレンス <ref-foreignkey>` を参照してください。"

msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ForeignKey` field (``manufacturer`` in the example above) be the name "
"of the model, lowercase. You can call the field whatever you want. For "
"example::"
msgstr ""
"必須ではありませんが、:class:`~django.db.models.ForeignKey` フィールド名 (上"
"記の例では ``manufacturer``) はモデル名を小文字にしたものをおすすめします。も"
"ちろん、どんなフィールドでも呼び出すことができます。例えば、以下のような"
"フィールド名にすることも可能です。"

msgid ""
":class:`~django.db.models.ForeignKey` fields accept a number of extra "
"arguments which are explained in :ref:`the model field reference <foreign-"
"key-arguments>`. These options help define how the relationship should work; "
"all are optional."
msgstr ""
":class:`~django.db.models.ForeignKey` フィールドは多数の追加的な引数を受け入"
"れます。これらは :ref:`モデルフィールドのリファレンス <foreign-key-"
"arguments>` にて説明しています。これらの引数は、リレーションシップがどのよう"
"に動作すべきかを定義するのに役立ちます。追加の引数はすべて任意です。"

msgid ""
"For details on accessing backwards-related objects, see the :ref:`Following "
"relationships backward example <backwards-related-objects>`."
msgstr ""
"逆方向のリレーションを持つオブジェクトへのアクセスの詳細については、下記の :"
"ref:`逆方向のリレーションシップの例 <backwards-related-objects>` を参照してく"
"ださい。 "

msgid ""
"For sample code, see the :doc:`Many-to-one relationship model example </"
"topics/db/examples/many_to_one>`."
msgstr ""
"サンプルのコードは、:doc:`多対多のリレーションシップモデルの例 </topics/db/"
"examples/many_to_one>` を参照してください。"

msgid ""
"To define a many-to-many relationship, use :class:`~django.db.models."
"ManyToManyField`. You use it just like any other :class:`~django.db.models."
"Field` type: by including it as a class attribute of your model."
msgstr ""
"多対多の関係を定義するには、:class:`django.db.models.ManyToManyField` を使用"
"してください。 使い方は他の :class:`~django.db.models.Field` 型と同じです: モ"
"デルのクラス属性として含めてください。"

msgid ""
":class:`~django.db.models.ManyToManyField` requires a positional argument: "
"the class to which the model is related."
msgstr ""
":class:`~django.db.models.ManyToManyField` には位置引数が必要です: モデルと関"
"係させるクラスです。"

msgid ""
"For example, if a ``Pizza`` has multiple ``Topping`` objects -- that is, a "
"``Topping`` can be on multiple pizzas and each ``Pizza`` has multiple "
"toppings -- here's how you'd represent that::"
msgstr ""
"たとえば、``Pizza`` が複数の ``Topping`` オブジェクトを持っている（そして "
"``Topping`` は複数の pizza に載ることができ ``Pizza`` は複数の topping を持"
"つ）場合、以下のように表現できます:"

msgid ""
"As with :class:`~django.db.models.ForeignKey`, you can also create :ref:"
"`recursive relationships <recursive-relationships>` (an object with a many-"
"to-many relationship to itself) and :ref:`relationships to models not yet "
"defined <lazy-relationships>`."
msgstr ""
":class:`~django.db.models.ForeignKey` と同様に、:ref:`再帰的なリレーション"
"シップ <recursive-relationships>` (自分自身に対する多対多のリレーションシップ"
"を持つオブジェクト) や :ref:`まだ定義されていないモデルへのリレーションシッ"
"プ <lazy-relationships>` を作成することもできます。"

msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ManyToManyField` (``toppings`` in the example above) be a plural "
"describing the set of related model objects."
msgstr ""
"必須ではありませんが、:class:`~django.db.models.ManyToManyField` フィールド "
"(上記の例では ``toppings``) はリレーション先のモデルオブジェクトの複数形が推"
"奨されています。"

msgid ""
"It doesn't matter which model has the :class:`~django.db.models."
"ManyToManyField`, but you should only put it in one of the models -- not "
"both."
msgstr ""
"どちらのフィールドに :class:`~django.db.models.ManyToManyField` を定義しても"
"構いませんが、片方のフィールドのみに定義するようにしてください -- 両方ではあ"
"りません。"

msgid ""
"Generally, :class:`~django.db.models.ManyToManyField` instances should go in "
"the object that's going to be edited on a form. In the above example, "
"``toppings`` is in ``Pizza`` (rather than ``Topping`` having a ``pizzas`` :"
"class:`~django.db.models.ManyToManyField` ) because it's more natural to "
"think about a pizza having toppings than a topping being on multiple pizzas. "
"The way it's set up above, the ``Pizza`` form would let users select the "
"toppings."
msgstr ""
"一般的に、 :class:`~django.db.models.ManyToManyField` インスタンスは、フォー"
"ムで編集されるオブジェクトの側にあります。上の例では、 ``toppings`` は "
"``Pizza`` の中にあります (``Topping`` が ``pizzas`` の :class:`~django.db."
"models.ManyToManyField` を持つとするよりはそのほうがいいでしょう)。というの"
"は、ピザが複数のトッピングを持つほうが、トッピングが複数のピザの上にあるとい"
"うよりも自然だからです。このようにすることで、ユーザは ``Pizza`` フォームで"
"トッピングを選ぶことができるようになります。"

msgid ""
"See the :doc:`Many-to-many relationship model example </topics/db/examples/"
"many_to_many>` for a full example."
msgstr ""
"完全な実装例は :doc:`多対多のリレーションシップモデルの例 </topics/db/"
"examples/many_to_many>` を参照してください。"

msgid ""
":class:`~django.db.models.ManyToManyField` fields also accept a number of "
"extra arguments which are explained in :ref:`the model field reference "
"<manytomany-arguments>`. These options help define how the relationship "
"should work; all are optional."
msgstr ""
":class:`~django.db.models.ManyToManyField` フィールドは多数の追加的な引数を受"
"け入れます。これらは :ref:`モデルフィールドのリファレンス <manytomany-"
"arguments>` にて説明しています。これらの引数は、リレーションシップがどのよう"
"に動作すべきかを定義するのに役立ちます。引数はすべて任意です。"

msgid "Extra fields on many-to-many relationships"
msgstr "多対多リレーションにおける追加フィールド"

msgid ""
"When you're only dealing with many-to-many relationships such as mixing and "
"matching pizzas and toppings, a standard :class:`~django.db.models."
"ManyToManyField` is all you need. However, sometimes you may need to "
"associate data with the relationship between two models."
msgstr ""
"ピザとトッピングを組み合わせる程度の多対多リレーションを扱うのであれば、標準"
"の :class:`~django.db.models.ManyToManyField` で十分でしょう。しかし、2 つの"
"モデルのリレーションに他のデータを付加したくなることもあります。"

msgid ""
"For example, consider the case of an application tracking the musical groups "
"which musicians belong to. There is a many-to-many relationship between a "
"person and the groups of which they are a member, so you could use a :class:"
"`~django.db.models.ManyToManyField` to represent this relationship. However, "
"there is a lot of detail about the membership that you might want to "
"collect, such as the date at which the person joined the group."
msgstr ""
"たとえば、ミュージシャンが所属する音楽グループを追跡するアプリについて考えて"
"みましょう。ミュージシャンとグループの間には多対多の関係があるので、この関係"
"を表すのに :class:`~django.db.models.ManyToManyField` が使えます。しかし、あ"
"る人がそのグループに加入した日などといった多くの詳細情報も集めたいとします。"

msgid ""
"For these situations, Django allows you to specify the model that will be "
"used to govern the many-to-many relationship. You can then put extra fields "
"on the intermediate model. The intermediate model is associated with the :"
"class:`~django.db.models.ManyToManyField` using the :attr:`through "
"<ManyToManyField.through>` argument to point to the model that will act as "
"an intermediary. For our musician example, the code would look something "
"like this::"
msgstr ""
"このような場合、 Django ではそのような多対多リレーションを規定するのに使われ"
"るモデルを指定できます。そうすることで、中間モデルに追加のフィールドを配置で"
"きます。中間モデルは、 :attr:`through <ManyToManyField.through>` 引数で中間と"
"して振る舞うモデルを指定することで、 :class:`~django.db.models."
"ManyToManyField` に紐付けることができます。ミュージシャンの例では、コードはこ"
"のようになるでしょう::"

msgid ""
"When you set up the intermediary model, you explicitly specify foreign keys "
"to the models that are involved in the many-to-many relationship. This "
"explicit declaration defines how the two models are related."
msgstr ""
"中間モデルを指定する場合は、多対多リレーションに参加するモデルに対する外部"
"キーを明示的に指定します。明示的に指定することで、ふたつのモデルがどのように"
"関係するかが定義されます。"

msgid "There are a few restrictions on the intermediate model:"
msgstr "中間モデルにはいくつかの制約があります。"

msgid ""
"Your intermediate model must contain one - and *only* one - foreign key to "
"the source model (this would be ``Group`` in our example), or you must "
"explicitly specify the foreign keys Django should use for the relationship "
"using :attr:`ManyToManyField.through_fields <ManyToManyField."
"through_fields>`. If you have more than one foreign key and "
"``through_fields`` is not specified, a validation error will be raised. A "
"similar restriction applies to the foreign key to the target model (this "
"would be ``Person`` in our example)."
msgstr ""
"中間モデルには、ソースモデル（この例では ``Group`` ）への外部キーが *ただ1つ"
"だけ* 含まれている必要があります。または、Djangoがリレーションシップに使用す"
"べき外部キーを :attr:`ManyToManyField.through_fields <ManyToManyField."
"through_fields>` を使用して明示的に指定する必要があります。もし複数の外部キー"
"があり、 ``through_fields`` が指定されていない場合、バリデーションエラーが発"
"生します。ターゲットモデル（この例では ``Person`` ）への外部キーにも同様の制"
"限が適用されます。"

msgid ""
"For a model which has a many-to-many relationship to itself through an "
"intermediary model, two foreign keys to the same model are permitted, but "
"they will be treated as the two (different) sides of the many-to-many "
"relationship. If there are *more* than two foreign keys though, you must "
"also specify ``through_fields`` as above, or a validation error will be "
"raised."
msgstr ""
"中間モデルを介して自分自身と多対多のリレーションシップを持つモデルの場合、同"
"じモデルに対する2つの外部キーは許可されますが、多対多のリレーションシップの2"
"つの（異なる）側として扱われます。しかし、2つ以上の外部キーがある場合は、上記"
"のように ``through_fields`` も指定しなければなりません。"

msgid ""
"Now that you have set up your :class:`~django.db.models.ManyToManyField` to "
"use your intermediary model (``Membership``, in this case), you're ready to "
"start creating some many-to-many relationships. You do this by creating "
"instances of the intermediate model:"
msgstr ""
"これで :class:`~django.db.models.ManyToManyField` が中間モデル (この場合は "
"``Membership``) を使うように設定できたので、多対多のリレーションシップを作成"
"する準備ができました。これを行うには、中間モデルのインスタンスを作成します:"

msgid ""
"You can also use :meth:`~django.db.models.fields.related.RelatedManager."
"add`, :meth:`~django.db.models.fields.related.RelatedManager.create`, or :"
"meth:`~django.db.models.fields.related.RelatedManager.set` to create "
"relationships, as long as you specify ``through_defaults`` for any required "
"fields:"
msgstr ""
"また、 :meth:`~django.db.models.fields.related.RelatedManager.add` や :meth:"
"`~django.db.models.fields.related.RelatedManager.create` 、 :meth:`~django."
"db.models.fields.related.RelatedManager.set` を使ってリレーションシップを作成"
"することもできます（``through_defaults`` フィールドの指定は必須です）:"

msgid "You may prefer to create instances of the intermediate model directly."
msgstr "中間モデルのインスタンスを直接作成したいこともあるでしょう。"

msgid ""
"If the custom through table defined by the intermediate model does not "
"enforce uniqueness on the ``(model1, model2)`` pair, allowing multiple "
"values, the :meth:`~django.db.models.fields.related.RelatedManager.remove` "
"call will remove all intermediate model instances:"
msgstr ""
"中間モデルで定義されたカスタムスルーテーブルが ``(model1, model2)`` ペアの一"
"意性を強制せず、複数の値を許容する場合、 :meth:`~django.db.models.fields."
"related.RelatedManager.remove` 呼び出しは全ての中間モデルインスタンスを削除し"
"ます:"

msgid ""
"The :meth:`~django.db.models.fields.related.RelatedManager.clear` method can "
"be used to remove all many-to-many relationships for an instance:"
msgstr ""
":meth:`~django.db.models.fields.related.RelatedManager.clear` メソッドを使用"
"すると、インスタンスの多対多の関係を全て削除できます:"

msgid ""
"Once you have established the many-to-many relationships, you can issue "
"queries. Just as with normal many-to-many relationships, you can query using "
"the attributes of the many-to-many-related model:"
msgstr ""
"多対多のリレーションシップを確立したら、クエリを発行できます。通常の多対多の"
"リレーションシップと同様に、多対多のリレーション先モデルの属性を使用してクエ"
"リを発行できます:"

msgid ""
"As you are using an intermediate model, you can also query on its attributes:"
msgstr ""
"中間モデルを使用しているので、その属性に対してクエリを実行することもできます:"

msgid ""
"If you need to access a membership's information you may do so by directly "
"querying the ``Membership`` model:"
msgstr ""
"会員情報にアクセスする必要がある場合は、直接 ``Membership`` モデルにクエリを"
"発行してください:"

msgid ""
"Another way to access the same information is by querying the :ref:`many-to-"
"many reverse relationship<m2m-reverse-relationships>` from a ``Person`` "
"object:"
msgstr ""
"同じ情報にアクセスするもう一つの方法は、 ``Person`` オブジェクトから :ref:`多"
"対多の逆リレーションシップ <m2m-reverse-relationships>` を問い合わせることで"
"す:"

msgid ""
"To define a one-to-one relationship, use :class:`~django.db.models."
"OneToOneField`. You use it just like any other ``Field`` type: by including "
"it as a class attribute of your model."
msgstr ""
"1対1のリレーションを定義するには、:class:`~django.db.models.OneToOneField` を"
"使用します。単純に他の ``Field`` 型と同じようにして、モデルのクラス属性に設定"
"できます。"

msgid ""
"This is most useful on the primary key of an object when that object "
"\"extends\" another object in some way."
msgstr ""
"あるオブジェクトが他のオブジェクトを何らかの方法で「拡張 (extends)」している"
"とき、オブジェクトの主キーに設定するのが最も便利です。"

msgid ""
":class:`~django.db.models.OneToOneField` requires a positional argument: the "
"class to which the model is related."
msgstr ""
":class:`~django.db.models.OneToOneField` には1つの位置引数として、モデルと関"
"係させるクラスを指定する必要があります。"

msgid ""
"For example, if you were building a database of \"places\", you would build "
"pretty standard stuff such as address, phone number, etc. in the database. "
"Then, if you wanted to build a database of restaurants on top of the places, "
"instead of repeating yourself and replicating those fields in the "
"``Restaurant`` model, you could make ``Restaurant`` have a :class:`~django."
"db.models.OneToOneField` to ``Place`` (because a restaurant \"is a\" place; "
"in fact, to handle this you'd typically use :ref:`inheritance <model-"
"inheritance>`, which involves an implicit one-to-one relation)."
msgstr ""
"例えば、\"場所\" のデータベースを構築する場合、住所や電話番号などの標準的なも"
"のをデータベースに構築します。そして、その場所の上にレストランのデータベース"
"を構築したい場合、 ``Restaurant`` モデルにこれらのフィールドを複製する代わり"
"に、 ``Restaurant`` に ``Place`` に対する :class:`~django.db.models."
"OneToOneField` を持たせることができます (レストランは「場所」だからです。実"
"際、これを扱うには、暗黙の一対一関係を含む :ref:`継承<model-inheritance>` を"
"使うのが一般的です)。"

msgid ""
"As with :class:`~django.db.models.ForeignKey`, a :ref:`recursive "
"relationship <recursive-relationships>` can be defined and :ref:`references "
"to as-yet undefined models <lazy-relationships>` can be made."
msgstr ""
":class:`~django.db.models.ForeignKey` と同様に、:ref:`再帰的なリレーション"
"シップ <recursive-relationships>` や :ref:`まだ定義されていないモデルへの参"
"照 <lazy-relationships>` を作成することもできます。"

msgid ""
"See the :doc:`One-to-one relationship model example </topics/db/examples/"
"one_to_one>` for a full example."
msgstr ""
"完全な実装例は、:doc:`1対1リレーションモデルの例 </topics/db/examples/"
"one_to_one>` を参照してください。"

msgid ""
":class:`~django.db.models.OneToOneField` fields also accept an optional :"
"attr:`~django.db.models.OneToOneField.parent_link` argument."
msgstr ""
":class:`~django.db.models.OneToOneField` フィールドには、オプションの :attr:"
"`~django.db.models.OneToOneField.parent_link` 引数を指定することもできます。"

msgid ""
":class:`~django.db.models.OneToOneField` classes used to automatically "
"become the primary key on a model. This is no longer true (although you can "
"manually pass in the :attr:`~django.db.models.Field.primary_key` argument if "
"you like). Thus, it's now possible to have multiple fields of type :class:"
"`~django.db.models.OneToOneField` on a single model."
msgstr ""
"以前は :class:`~django.db.models.OneToOneField` クラスが自動的にモデルの主"
"キーになっていました。しかし、現在はそうではありません (手動で :attr:"
"`~django.db.models.Field.primary_key` 引数を渡すこともできます)。このため、1"
"つのモデルに :class:`~django.db.models.OneToOneField` 型のフィールドを複数持"
"つことができるようになりました。"

msgid "Models across files"
msgstr "ファイルを横断したモデル"

msgid ""
"It's perfectly OK to relate a model to one from another app. To do this, "
"import the related model at the top of the file where your model is defined. "
"Then, refer to the other model class wherever needed. For example::"
msgstr ""
"モデルを他のアプリのモデルと関連付けることも全く問題ありません。これを行うに"
"は、モデルが定義されているファイルの先頭で、関連するモデルをインポートしま"
"す。そして、必要なところで他のモデルクラスを参照してください。たとえば、次の"
"ようにします:"

msgid "Field name restrictions"
msgstr "フィールド名の制約"

msgid "Django places some restrictions on model field names:"
msgstr "Django はモデルのフィールド名にいくつかの制約を課しています。"

msgid ""
"A field name cannot be a Python reserved word, because that would result in "
"a Python syntax error. For example:"
msgstr ""
"フィールド名はPythonの予約語にはできません。Pythonの構文エラーになるからで"
"す。たとえば次のようなものです:"

msgid ""
"A field name cannot contain more than one underscore in a row, due to the "
"way Django's query lookup syntax works. For example::"
msgstr ""
"フィールド名には連続したアンダースコアを2つ以上含めることはできません。これは"
"Djangoのクエリルックアップ構文のためです。たとえば次のようなものです:"

msgid "A field name cannot end with an underscore, for similar reasons."
msgstr ""
"同様の理由で、フィールド名の最後をアンダースコアにすることはできません。"

msgid ""
"These limitations can be worked around, though, because your field name "
"doesn't necessarily have to match your database column name. See the :attr:"
"`~Field.db_column` option."
msgstr ""
"しかし、これらの制約を回避する手段はあります。なぜなら、フィールド名は必ずし"
"もデータベースのカラム名と一致する必要はないからです。詳細については :attr:"
"`~Field.db_column` オプションをご覧ください。"

msgid ""
"SQL reserved words, such as ``join``, ``where`` or ``select``, *are* allowed "
"as model field names, because Django escapes all database table names and "
"column names in every underlying SQL query. It uses the quoting syntax of "
"your particular database engine."
msgstr ""
"ただし、``join``、``where``、``select`` などの SQL の予約語はモデルのフィール"
"ド名に使用できます。これは、Django がすべての SQL クエリに対して、データベー"
"スデーブル名とカラム名のエスケープを行っているためです。エスケープ処理では、"
"使用しているデータベースエンジンのクオート構文を利用しています。"

msgid "Custom field types"
msgstr "カスタムのフィールドタイプ"

msgid ""
"If one of the existing model fields cannot be used to fit your purposes, or "
"if you wish to take advantage of some less common database column types, you "
"can create your own field class. Full coverage of creating your own fields "
"is provided in :doc:`/howto/custom-model-fields`."
msgstr ""
"既存のモデルフィールドが目的に適わない場合、あるいは一般的ではないデータベー"
"スカラム型を利用したいと考えチエル場合、独自のフィールドクラスを作成できま"
"す。自分自身のフィールドを作成する方法は、:doc:`/howto/custom-model-fields` "
"で提供しています。"

msgid "``Meta`` options"
msgstr "``Meta`` オプション"

msgid "Give your model metadata by using an inner ``class Meta``, like so::"
msgstr ""
"内側に ``class Meta`` というクラスを定義することで、モデルのメタデータを設定"
"できます。"

msgid ""
"Model metadata is \"anything that's not a field\", such as ordering options "
"(:attr:`~Options.ordering`), database table name (:attr:`~Options."
"db_table`), or human-readable singular and plural names (:attr:`~Options."
"verbose_name` and :attr:`~Options.verbose_name_plural`). None are required, "
"and adding ``class Meta`` to a model is completely optional."
msgstr ""
"モデルのメタデータには「フィールド以外のすべての事項」が設定できます。例え"
"ば、並び替えオプション (:attr:`~Options.ordering`)、データベースのテーブル名 "
"(:attr:`~Options.db_table`)、人が読むための単数形と複数形の名前 (:attr:"
"`~Options.verbose_name` と :attr:`~Options.verbose_name_plural`) などです。必"
"須のものはなく、``class Meta`` のモデルへの追加は完全にオプションです。"

msgid ""
"A complete list of all possible ``Meta`` options can be found in the :doc:"
"`model option reference </ref/models/options>`."
msgstr ""
"``Meta`` に指定できるオプションの完全なリストは、:doc:`モデルオプションリファ"
"レンス </ref/models/options>` で確認できます。"

msgid "Model attributes"
msgstr "モデルの属性"

msgid "``objects``"
msgstr "``objects``"

msgid ""
"The most important attribute of a model is the :class:`~django.db.models."
"Manager`. It's the interface through which database query operations are "
"provided to Django models and is used to :ref:`retrieve the instances "
"<retrieving-objects>` from the database. If no custom ``Manager`` is "
"defined, the default name is :attr:`~django.db.models.Model.objects`. "
"Managers are only accessible via model classes, not the model instances."
msgstr ""
"モデルの最も重要な属性は :class:`~django.db.models.Manager` です。これは、"
"Django のモデルにデータベースクエリの操作を渡すインターフェースで、データベー"
"スから :ref:`インスタンスを取り出す <retrieving-objects>` ために使われます。"
"``Manager`` が定義されていない場合、デフォルトの名前は :attr:`~django.db."
"models.Model.objects` となります。マネージャはモデルクラスを通じてのみアクセ"
"スできます。インスタンスからはアクセスできません。"

msgid "Model methods"
msgstr "モデルのメソッド"

msgid ""
"Define custom methods on a model to add custom \"row-level\" functionality "
"to your objects. Whereas :class:`~django.db.models.Manager` methods are "
"intended to do \"table-wide\" things, model methods should act on a "
"particular model instance."
msgstr ""
"オブジェクトに独自の \"行レベルの\" 機能を追加するには、カスタムのメソッドを"
"定義してください。:class:`~django.db.models.Manager` メソッドは \"テーブル単"
"位の\" 操作をするように意図されており、モデルメソッドは特定のモデルインスタン"
"ス上で動作します。"

msgid ""
"This is a valuable technique for keeping business logic in one place -- the "
"model."
msgstr ""
"これは、ビジネスロジックを 1 つの場所（モデル）で管理するための重要なテクニッ"
"クです。"

msgid "For example, this model has a few custom methods::"
msgstr "例えば、以下のモデルはいくつかのカスタムメソッドを持ちます::"

msgid "The last method in this example is a :term:`property`."
msgstr "例にある最後のメソッドは :term:`property` です。"

msgid ""
"The :doc:`model instance reference </ref/models/instances>` has a complete "
"list of :ref:`methods automatically given to each model <model-instance-"
"methods>`. You can override most of these -- see `overriding predefined "
"model methods`_, below -- but there are a couple that you'll almost always "
"want to define:"
msgstr ""
":doc:`モデルインスタンスのリファレンス </ref/models/instances>` には各モデル"
"に自動的に与えられる :ref:`メソッド <model-instance-methods>` の完全なリスト"
"があります。ほとんどはオーバーライドできます（後述の `overriding predefined "
"model methods`_ を参照してください）が、特によく定義することになるものがあり"
"ます："

msgid ":meth:`~Model.__str__`"
msgstr ":meth:`~Model.__str__`"

msgid ""
"A Python \"magic method\" that returns a string representation of any "
"object. This is what Python and Django will use whenever a model instance "
"needs to be coerced and displayed as a plain string. Most notably, this "
"happens when you display an object in an interactive console or in the admin."
msgstr ""
"Python の \"魔法のメソッド\" で、オブジェクトを表す文字列を返しま。 Python "
"と Django は、モデルのインスタンスを文字列で表示する必要に迫られたときにこれ"
"を使います。特に、オブジェクトをインタラクティブコンソール内や admin 内で表示"
"する際に該当します。"

msgid ""
"You'll always want to define this method; the default isn't very helpful at "
"all."
msgstr ""
"このメソッドは常に指定することを推奨します; デフォルトはあまり役に立つもので"
"はありません。"

msgid ":meth:`~Model.get_absolute_url`"
msgstr ":meth:`~Model.get_absolute_url`"

msgid ""
"This tells Django how to calculate the URL for an object. Django uses this "
"in its admin interface, and any time it needs to figure out a URL for an "
"object."
msgstr ""
"Django にオブジェクトの URL の計算方法を定義します。Django はこのメソッドを "
"admin インターフェイスで利用しており、オブジェクトの URL を使用する必要がある"
"あらゆる場面でも使用されます。"

msgid ""
"Any object that has a URL that uniquely identifies it should define this "
"method."
msgstr ""
"ユニークに特定できる URL を持つすべてのオブジェクトには、このメソッドを定義し"
"なければなりません。"

msgid "Overriding predefined model methods"
msgstr "定義済みのモデルメソッドをオーバーライドする"

msgid ""
"There's another set of :ref:`model methods <model-instance-methods>` that "
"encapsulate a bunch of database behavior that you'll want to customize. In "
"particular you'll often want to change the way :meth:`~Model.save` and :meth:"
"`~Model.delete` work."
msgstr ""
"別の一連の :ref:`モデルメソッド <model-instance-methods>` を使って、多くのカ"
"スタマイズしたいデータベース動作をカプセル化できます。特に、:meth:`~Model."
"save` や :meth:`~Model.delete` の動作を変更したいことがよくあります。"

msgid ""
"You're free to override these methods (and any other model method) to alter "
"behavior."
msgstr ""
"これらのメソッド (および他のすべてのメソッド) は自由にオーバーライドして、動"
"作を変更できます。"

msgid ""
"A classic use-case for overriding the built-in methods is if you want "
"something to happen whenever you save an object. For example (see :meth:"
"`~Model.save` for documentation of the parameters it accepts)::"
msgstr ""
"ビルトインのメソッドをオーバーライドする典型的な状況は、オブジェクトを保存す"
"るとき毎回何かを実行したい、という場合です。例えば (受け入れるパラメータにつ"
"いては :meth:`~Model.save` を参照してください)::"

msgid "You can also prevent saving::"
msgstr "保存しないようにすることもできます::"

msgid ""
"It's important to remember to call the superclass method -- that's that "
"``super().save(*args, **kwargs)`` business -- to ensure that the object "
"still gets saved into the database. If you forget to call the superclass "
"method, the default behavior won't happen and the database won't get touched."
msgstr ""
"スーパークラスのメソッドを呼び出し忘れないようにすることが重要です -- "
"``super().save(*args, **kwargs)`` のことです -- これでオブジェクトがデータ"
"ベースに保存されることが保証されます。スーパークラスのメソッドを呼び出し忘れ"
"ると、デフォルトの動作は発生せずデータベースは変更されません。"

msgid ""
"It's also important that you pass through the arguments that can be passed "
"to the model method -- that's what the ``*args, **kwargs`` bit does. Django "
"will, from time to time, extend the capabilities of built-in model methods, "
"adding new arguments. If you use ``*args, **kwargs`` in your method "
"definitions, you are guaranteed that your code will automatically support "
"those arguments when they are added."
msgstr ""
"モデルのメソッドに引数を渡すこともまた重要です -- ``*args, **kwargs`` が行い"
"ます。Django は、しばしばビルトインのモデルメソッドの機能を拡張するため、新し"
"い引数を追加します。自分で記述したメソッド定義内に ``*args, **kwargs`` 使え"
"ば、新しい引数が追加しても自動的にサポートされるようになります。"

msgid ""
"If you wish to update a field value in the :meth:`~Model.save` method, you "
"may also want to have this field added to the ``update_fields`` keyword "
"argument. This will ensure the field is saved when ``update_fields`` is "
"specified. For example::"
msgstr ""
":meth:`~Model.save` メソッド内のフィールドの値をアップデートしたい場合は、"
"``update_fields``  キーワード引数に追加されたこのフィールドを持ちたくなるかも"
"しれません。これにより、``update_fields`` が指定されたときにフィールドが保存"
"されることが保証されます。次に例を示します。"

msgid "See :ref:`ref-models-update-fields` for more details."
msgstr "詳しくは :ref:`ref-models-update-fields` を読んでください。"

msgid "Overridden model methods are not called on bulk operations"
msgstr "オーバーライドされたモデルメソッドはバルク操作では呼ばれません"

msgid ""
"Note that the :meth:`~Model.delete()` method for an object is not "
"necessarily called when :ref:`deleting objects in bulk using a QuerySet "
"<topics-db-queries-delete>` or as a result of a :attr:`cascading delete "
"<django.db.models.ForeignKey.on_delete>`. To ensure customized delete logic "
"gets executed, you can use :data:`~django.db.models.signals.pre_delete` and/"
"or :data:`~django.db.models.signals.post_delete` signals."
msgstr ""
"オブジェクトの :meth:`~Model.delete()` メソッドは、:ref:`QuerySet を使用した"
"オブジェクトの一括削除 <topics-db-queries-delete>` や :attr:`カスケード削除 "
"<django.db.models.ForeignKey.on_delete>` を行ったときに、必ずしも呼ばれるわけ"
"ではないことに注意してください。カスタマイズされた削除ロジックが実行されるこ"
"とを保証するためには、:data:`~django.db.models.signals.pre_delete` と :data:"
"`~django.db.models.signals.post_delete` シグナルのいずれかまたは両方が利用で"
"きます。"

msgid ""
"Unfortunately, there isn't a workaround when :meth:`creating<django.db."
"models.query.QuerySet.bulk_create>` or :meth:`updating<django.db.models."
"query.QuerySet.update>` objects in bulk, since none of :meth:`~Model."
"save()`, :data:`~django.db.models.signals.pre_save`, and :data:`~django.db."
"models.signals.post_save` are called."
msgstr ""
"残念ながら、オブジェクトを一括で :meth:`作成 <django.db.models.query."
"QuerySet.bulk_create>` または :meth:`更新 <django.db.models.query.QuerySet."
"update>` するときにはワークアラウンドはありません。この場合には :meth:"
"`~Model.save()`、:data:`~django.db.models.signals.pre_save`、:data:`~django."
"db.models.signals.post_save` のいずれも呼ばれないためです。"

msgid "Executing custom SQL"
msgstr "カスタムの SQL を実行する"

msgid ""
"Another common pattern is writing custom SQL statements in model methods and "
"module-level methods. For more details on using raw SQL, see the "
"documentation on :doc:`using raw SQL</topics/db/sql>`."
msgstr ""
"その他のよくあるパターンとしては、カスタムの SQL 文をモデルのメソッドやモ"
"ジュールのメソッドとして定義することがあります。生の SQL 文を使用する方法につ"
"いては、:doc:`生の SQL を使用する </topics/db/sql>` を参照してください。"

msgid "Model inheritance"
msgstr "モデルの継承"

msgid ""
"Model inheritance in Django works almost identically to the way normal class "
"inheritance works in Python, but the basics at the beginning of the page "
"should still be followed. That means the base class should subclass :class:"
"`django.db.models.Model`."
msgstr ""
"Django におけるモデルの継承は Python における普通のクラスの継承とほぼ同じ方法"
"で行われますが、最初の段階だけでもここで説明しておいた方がよいでしょう。それ"
"はその基底クラスが :class:`django.db.models.Model` のサブクラスでなければなら"
"ないという事です。"

msgid ""
"The only decision you have to make is whether you want the parent models to "
"be models in their own right (with their own database tables), or if the "
"parents are just holders of common information that will only be visible "
"through the child models."
msgstr ""
"唯一決めるべきことは、親モデルを (保持するデータベースのテーブルと共に) 独自"
"の権限を持ったモデルとするか、それとも子モデルを通じてのみ共通情報を参照する"
"単なる保持者とするかです。"

msgid "There are three styles of inheritance that are possible in Django."
msgstr "Django において可能な継承には 3 つの方式があります。"

msgid ""
"Often, you will just want to use the parent class to hold information that "
"you don't want to have to type out for each child model. This class isn't "
"going to ever be used in isolation, so :ref:`abstract-base-classes` are what "
"you're after."
msgstr ""
"子モデルそれぞれに対して一々定義し直さないで済ませたい情報を保持するためだけ"
"に、親クラスを使用することがあるかもしれません。このクラスが単体で用いられる"
"ことはないので、この場合 :ref:`abstract-base-classes` が適切です。"

msgid ""
"If you're subclassing an existing model (perhaps something from another "
"application entirely) and want each model to have its own database table, :"
"ref:`multi-table-inheritance` is the way to go."
msgstr ""
"もし既存のモデル (完全に別のアプリケーション等から取得した) のサブクラスを作"
"成していてモデルそれぞれにデータベース上のテーブルを定義したい場合、 :ref:"
"`multi-table-inheritance` を利用するとよいでしょう。"

msgid ""
"Finally, if you only want to modify the Python-level behavior of a model, "
"without changing the models fields in any way, you can use :ref:`proxy-"
"models`."
msgstr ""
"最後に、モデルの Python レベルでの振る舞いを、モデルのフィールドを変更せずに"
"修正したい場合は、 :ref:`proxy-models` を利用できます。"

msgid "Abstract base classes"
msgstr "抽象基底クラス"

msgid ""
"Abstract base classes are useful when you want to put some common "
"information into a number of other models. You write your base class and put "
"``abstract=True`` in the :ref:`Meta <meta-options>` class. This model will "
"then not be used to create any database table. Instead, when it is used as a "
"base class for other models, its fields will be added to those of the child "
"class."
msgstr ""
"抽象基底クラスは、複数の他モデルに対して共通の情報を入れ込みたいときに有用で"
"す。基底クラスを書いて :ref:`Meta <meta-options>` クラス内で "
"``abstract=True`` をセットしてください。これで、このモデルはデータベーステー"
"ブルを作成するために使用されることはなくなります。 代わりに、他のモデルで基底"
"クラスとして使われる際に、これら子クラスのフィールドとして追加されます。"

msgid "An example::"
msgstr "実装例::"

msgid ""
"The ``Student`` model will have three fields: ``name``, ``age`` and "
"``home_group``. The ``CommonInfo`` model cannot be used as a normal Django "
"model, since it is an abstract base class. It does not generate a database "
"table or have a manager, and cannot be instantiated or saved directly."
msgstr ""
"``Student`` モデルは ``name``、``age`` そして ``home_group`` の 3 つのフィー"
"ルドを持つことになります。 ``CommonInfo`` モデルは抽象基底クラスであるため、"
"通常の Django モデルとしては利用できません。データベース上にテーブルを生成し"
"たりマネージャを持ったりせず、そしてインスタンス化されたり直接値を保存する事"
"もできません。"

msgid ""
"Fields inherited from abstract base classes can be overridden with another "
"field or value, or be removed with ``None``."
msgstr ""
"抽象基底クラスを継承したフィールドは、他のフィールドや値でオーバーライドした"
"り、 ``None`` を使って削除したりできます。"

msgid ""
"For many uses, this type of model inheritance will be exactly what you want. "
"It provides a way to factor out common information at the Python level, "
"while still only creating one database table per child model at the database "
"level."
msgstr ""
"多くの場合、このタイプのモデル継承があなたの必要としているものでしょう。この"
"方式では、データベースレベルでは子モデルごとのテーブルを 1 つずつ作る一方で、"
"共通情報を Python レベルで因数分解できます。"

msgid "``Meta`` inheritance"
msgstr "``Meta`` の継承"

msgid ""
"When an abstract base class is created, Django makes any :ref:`Meta <meta-"
"options>` inner class you declared in the base class available as an "
"attribute. If a child class does not declare its own :ref:`Meta <meta-"
"options>` class, it will inherit the parent's :ref:`Meta <meta-options>`. If "
"the child wants to extend the parent's :ref:`Meta <meta-options>` class, it "
"can subclass it. For example::"
msgstr ""
"抽象基底クラスを作成した際、Django は基底クラスで宣言したすべての :ref:`Meta "
"<meta-options>` インナークラスを子クラスの属性とします。子クラスが自身の :"
"ref:`Meta <meta-options>` クラスを定義しなければ、親の :ref:`Meta <meta-"
"options>` クラスを継承します。子クラスが親の :ref:`Meta <meta-options>` クラ"
"スを拡張したい場合、サブクラス化できます。例えば::"

msgid ""
"Django does make one adjustment to the :ref:`Meta <meta-options>` class of "
"an abstract base class: before installing the :ref:`Meta <meta-options>` "
"attribute, it sets ``abstract=False``. This means that children of abstract "
"base classes don't automatically become abstract classes themselves. To make "
"an abstract base class that inherits from another abstract base class, you "
"need to explicitly set ``abstract=True`` on the child."
msgstr ""
"Django は抽象基底クラスの :ref:`Meta <meta-options>` クラスに対して 1 つの調"
"整を行います: :ref:`Meta <meta-options>` 属性を子クラスに導入する前に、"
"``abstract=False`` をセットします。これは抽象基底クラスを継承した子クラスは、"
"自身を自動的に抽象基底クラスにはしないことを意味します。他の抽象基底クラスを"
"継承した抽象基底クラスを作るためには、子クラスに ``abstract=True`` を明示的に"
"セットする必要があります。"

msgid ""
"Some attributes won't make sense to include in the :ref:`Meta <meta-"
"options>` class of an abstract base class. For example, including "
"``db_table`` would mean that all the child classes (the ones that don't "
"specify their own :ref:`Meta <meta-options>`) would use the same database "
"table, which is almost certainly not what you want."
msgstr ""
"抽象基底クラスの :ref:`Meta <meta-options>` クラスに持っても意味をなさない属"
"性がいくつか存在します。例えば、属性値 ``db_table`` を指定することは、子クラ"
"ス (のうち自身の :ref:`Meta <meta-options>` を定義していないもの) が全て同じ"
"データベース上のテーブルを利用することを意味しますが、これは明らかに必要なも"
"のではありません。"

msgid ""
"Due to the way Python inheritance works, if a child class inherits from "
"multiple abstract base classes, only the :ref:`Meta <meta-options>` options "
"from the first listed class will be inherited by default. To inherit :ref:"
"`Meta <meta-options>` options from multiple abstract base classes, you must "
"explicitly declare the :ref:`Meta <meta-options>` inheritance. For example::"
msgstr ""
"Python の継承の仕組みにより、子クラスが複数の抽象基底クラスから継承する場合、"
"デフォルトでは、最初にリストされたクラスの :ref:`Meta <meta-options>` オプ"
"ションのみが継承されます。複数の抽象基底クラスから :ref:`Meta <meta-"
"options>` オプションを継承するには、:ref:`Meta <meta-options>` の継承を明示的"
"に宣言する必要があります。以下に例を示します。"

msgid "Be careful with ``related_name`` and ``related_query_name``"
msgstr ""
"``related_name`` と ``related_query_name`` の利用に関して注意するべき点"

msgid ""
"If you are using :attr:`~django.db.models.ForeignKey.related_name` or :attr:"
"`~django.db.models.ForeignKey.related_query_name` on a ``ForeignKey`` or "
"``ManyToManyField``, you must always specify a *unique* reverse name and "
"query name for the field. This would normally cause a problem in abstract "
"base classes, since the fields on this class are included into each of the "
"child classes, with exactly the same values for the attributes (including :"
"attr:`~django.db.models.ForeignKey.related_name` and :attr:`~django.db."
"models.ForeignKey.related_query_name`) each time."
msgstr ""
"``ForeignKey`` もしくは ``ManyToManyField`` に対して :attr:`~django.db."
"models.ForeignKey.related_name` または :attr:`~django.db.models.ForeignKey."
"related_query_name` を使う場合、そのフィールドに対して *一意の* 逆引き名およ"
"びクエリ名を常に定義しなければなりません。これは抽象基底クラスにおいて、"
"フィールドが継承した子クラスそれぞれに含まれ、継承される毎にその属性値が完全"
"に同じ値 (:attr:`~django.db.models.ForeignKey.related_name` と :attr:"
"`~django.db.models.ForeignKey.related_query_name` も含む) となるため、通常問"
"題となります。"

msgid ""
"To work around this problem, when you are using :attr:`~django.db.models."
"ForeignKey.related_name` or :attr:`~django.db.models.ForeignKey."
"related_query_name` in an abstract base class (only), part of the value "
"should contain ``'%(app_label)s'`` and ``'%(class)s'``."
msgstr ""
"この問題に対処するため、抽象基底クラスにおいて :attr:`~django.db.models."
"ForeignKey.related_name` もしくは :attr:`~django.db.models.ForeignKey."
"related_query_name` を用いる場合(のみ)、その値の一部に ``'%(app_label)s'`` "
"と ``'%(class)s'`` を含まなければなりません。"

msgid ""
"``'%(class)s'`` is replaced by the lowercased name of the child class that "
"the field is used in."
msgstr ""
"``'%(class)s'`` は、フィールドが使用されている子クラスの名前を小文字にした文"
"字列と置換されます。"

msgid ""
"``'%(app_label)s'`` is replaced by the lowercased name of the app the child "
"class is contained within. Each installed application name must be unique "
"and the model class names within each app must also be unique, therefore the "
"resulting name will end up being different."
msgstr ""
"``'%(app_label)s'`` は、子クラスが含まれているアプリ名を小文字にした文字列と"
"置換されます。各インストールアプリケーション名はユニークでなければならず、モ"
"デルクラスの名は各アプリ内でもユニークでなければなりません。その結果、すべて"
"の名前が異なるものとなります。"

msgid "For example, given an app ``common/models.py``::"
msgstr ""
"例として、次のような ``common/models.py`` というアプリケーションが存在したと"
"します。"

msgid "Along with another app ``rare/models.py``::"
msgstr "別のアプリケーションの ``rare/models.py`` も存在するとします。"

msgid ""
"The reverse name of the ``common.ChildA.m2m`` field will be "
"``common_childa_related`` and the reverse query name will be "
"``common_childas``. The reverse name of the ``common.ChildB.m2m`` field will "
"be ``common_childb_related`` and the reverse query name will be "
"``common_childbs``. Finally, the reverse name of the ``rare.ChildB.m2m`` "
"field will be ``rare_childb_related`` and the reverse query name will be "
"``rare_childbs``. It's up to you how you use the ``'%(class)s'`` and "
"``'%(app_label)s'`` portion to construct your related name or related query "
"name but if you forget to use it, Django will raise errors when you perform "
"system checks (or run :djadmin:`migrate`)."
msgstr ""
"``common.ChildA.m2m`` フィールドの逆引き名は ``common_childa_related`` となり"
"その逆引きクエリ名は ``common_childas`` となります。 ``common.ChildB.m2m`` "
"フィールドの逆引き名は ``common_childb_related`` となりその逆引きクエリ名は "
"``common_childbs`` となります。最終的に、 ``rare.ChildB.m2m`` フィールドの逆"
"引き名は ``rare_childb_related`` となりその逆引きクエリ名は ``rare_childbs`` "
"となります。 ``'%(class)s'`` と ``'%(app_label)s'`` の箇所をどのように利用し"
"て related name あるいは related query name を作るのかは任意で決められますが"
"もしこれらを利用することを忘れた場合、Django はシステムチェックを実行した時 "
"(もしくは :djadmin:`migrate` を実行した時) にエラーを発生させます。"

msgid ""
"If you don't specify a :attr:`~django.db.models.ForeignKey.related_name` "
"attribute for a field in an abstract base class, the default reverse name "
"will be the name of the child class followed by ``'_set'``, just as it "
"normally would be if you'd declared the field directly on the child class. "
"For example, in the above code, if the :attr:`~django.db.models.ForeignKey."
"related_name` attribute was omitted, the reverse name for the ``m2m`` field "
"would be ``childa_set`` in the ``ChildA`` case and ``childb_set`` for the "
"``ChildB`` field."
msgstr ""
"もし抽象基底クラスで :attr:`~django.db.models.ForeignKey.related_name` 属性を"
"特に定めなかった場合、その逆引き名はデフォルトでは、子クラス上で直接フィール"
"ドを呼び出した場合に通常そうなるのと同様に、末尾に ``'_set'`` を付加した子ク"
"ラス名となります。例として、先のコードでは、もし :attr:`~django.db.models."
"ForeignKey.related_name` 属性が設定されなかった場合、 ``m2m`` フィールドの逆"
"引き名は ``ChildA`` では ``childa_set`` となり ``ChildB`` フィールドでは "
"``childb_set`` となります。"

msgid "Multi-table inheritance"
msgstr "複数テーブルの継承"

msgid ""
"The second type of model inheritance supported by Django is when each model "
"in the hierarchy is a model all by itself. Each model corresponds to its own "
"database table and can be queried and created individually. The inheritance "
"relationship introduces links between the child model and each of its "
"parents (via an automatically-created :class:`~django.db.models."
"OneToOneField`). For example::"
msgstr ""
"Django がサポートするもう一つのモデル継承は、ヒエラルキー内の各モデルすべて"
"が、それ自体モデルであるような場合です。それぞれのモデルはデータベース上の"
"テーブルに対応しており、個別にクエリーを作成したり、テーブルの作成ができま"
"す。継承の関係によって、(自動的に作成される :class:`~django.db.models."
"OneToOneField` を通して) 子モデルとその親モデルとの間にリンクが作られます。こ"
"の継承を利用すると、たとえば、次のように書くことができます。"

msgid ""
"All of the fields of ``Place`` will also be available in ``Restaurant``, "
"although the data will reside in a different database table. So these are "
"both possible:"
msgstr ""
"データはデータベースの異なるテーブルに存在しますが、``Place`` のすべての"
"フィールドは ``Restaurant`` でも利用できます。したがって、以下はともに可能で"
"す。"

msgid ""
"If you have a ``Place`` that is also a ``Restaurant``, you can get from the "
"``Place`` object to the ``Restaurant`` object by using the lowercase version "
"of the model name:"
msgstr ""
"もし、``Restaurant`` でもある ``Place`` が存在する時、小文字にしたモデル名を"
"使うことで、``Place`` オブジェクトから ``Restaurant`` オブジェクトを取得でき"
"ます。"

msgid ""
"However, if ``p`` in the above example was *not* a ``Restaurant`` (it had "
"been created directly as a ``Place`` object or was the parent of some other "
"class), referring to ``p.restaurant`` would raise a ``Restaurant."
"DoesNotExist`` exception."
msgstr ""
"しかし、上の例において ``p`` が ``Restaurant`` オブジェクト *ではない* 場合 "
"(つまり、継承を用いず ``Place`` オブジェクトが直接作成されたもしくは他のクラ"
"スの親であった場合)、``p.restaurant`` を参照すると、``Restaurant."
"DoesNotExist`` 例外が発生します。"

msgid ""
"The automatically-created :class:`~django.db.models.OneToOneField` on "
"``Restaurant`` that links it to ``Place`` looks like this::"
msgstr ""
"``Place`` にリンクする ``Restaurant`` 上に自動的に生成された :class:`~django."
"db.models.OneToOneField` は、次のようなものになります。"

msgid ""
"You can override that field by declaring your own :class:`~django.db.models."
"OneToOneField` with :attr:`parent_link=True <django.db.models.OneToOneField."
"parent_link>` on ``Restaurant``."
msgstr ""
"``Restaurant`` 上で、自分自身の :class:`~django.db.models.OneToOneField` を :"
"attr:`parent_link=True <django.db.models.OneToOneField.parent_link>` を付けて"
"宣言すれば、このフィールドをオーバーライドできます。"

msgid "``Meta`` and multi-table inheritance"
msgstr "``Meta`` と複数テーブルの継承"

msgid ""
"In the multi-table inheritance situation, it doesn't make sense for a child "
"class to inherit from its parent's :ref:`Meta <meta-options>` class. All "
"the :ref:`Meta <meta-options>` options have already been applied to the "
"parent class and applying them again would normally only lead to "
"contradictory behavior (this is in contrast with the abstract base class "
"case, where the base class doesn't exist in its own right)."
msgstr ""
"複数テーブルを継承する状況では、子クラスが親クラスの :ref:`Meta <meta-"
"options>` クラスを継承することは意味がありません。すべての :ref:`Meta <meta-"
"options>` オプションは既に親クラスに適用されており、それらを再度適用すると通"
"常は矛盾した動作につながるだけです（これは、基底クラスが独自の権利を持たない"
"抽象基底クラスの場合とは対照的です）。"

msgid ""
"So a child model does not have access to its parent's :ref:`Meta <meta-"
"options>` class. However, there are a few limited cases where the child "
"inherits behavior from the parent: if the child does not specify an :attr:"
"`~django.db.models.Options.ordering` attribute or a :attr:`~django.db.models."
"Options.get_latest_by` attribute, it will inherit these from its parent."
msgstr ""
"そのため子モデルは親モデルの :ref:`Meta <meta-options>` クラスへのアクセスを"
"持ちません。しかし、限られた状況において子モデルが親モデルから挙動を継承する"
"場合があります。もし子モデルが :attr:`~django.db.models.Options.ordering` 属"
"性もしくは :attr:`~django.db.models.Options.get_latest_by` 属性を設定しなかっ"
"た場合、これらを親モデルから継承します。"

msgid ""
"If the parent has an ordering and you don't want the child to have any "
"natural ordering, you can explicitly disable it::"
msgstr ""
"もし親モデルが ordering 属性を持っており子モデルに既定のデータ並び順を持たせ"
"たくない場合、明示的に無効化する事ができます::"

msgid "Inheritance and reverse relations"
msgstr "継承と関係の逆引き"

msgid ""
"Because multi-table inheritance uses an implicit :class:`~django.db.models."
"OneToOneField` to link the child and the parent, it's possible to move from "
"the parent down to the child, as in the above example. However, this uses up "
"the name that is the default :attr:`~django.db.models.ForeignKey."
"related_name` value for :class:`~django.db.models.ForeignKey` and :class:"
"`~django.db.models.ManyToManyField` relations.  If you are putting those "
"types of relations on a subclass of the parent model, you **must** specify "
"the :attr:`~django.db.models.ForeignKey.related_name` attribute on each such "
"field. If you forget, Django will raise a validation error."
msgstr ""
"複数テーブルの継承は親モデルと子モデルの関連付けに暗黙的な :class:`~django."
"db.models.OneToOneField` を利用するため、先の例で示されたように、親から子に情"
"報を移動させることは可能です。しかしその関連付けには  :class:`~django.db."
"models.ForeignKey` および :class:`~django.db.models.ManyToManyField` に付与さ"
"れたデフォルトの :attr:`~django.db.models.ForeignKey.related_name` の値を利用"
"します。もしこの種類の関連付けを親モデルのサブクラスに対して用いる場合、 :"
"attr:`~django.db.models.ForeignKey.related_name` 属性を各フィールドに **定義"
"しなければなりません** 。もし設定を忘れれば、Django はバリデーション例外を送"
"出します。"

msgid ""
"For example, using the above ``Place`` class again, let's create another "
"subclass with a :class:`~django.db.models.ManyToManyField`::"
msgstr ""
"例として、上で用いた ``Place`` クラスを再度用いて、また別のサブクラスを :"
"class:`~django.db.models.ManyToManyField` によって作成してみましょう::"

msgid "This results in the error:"
msgstr "この処理の結果はエラーとなります。"

msgid ""
"Adding ``related_name`` to the ``customers`` field as follows would resolve "
"the error: ``models.ManyToManyField(Place, related_name='provider')``."
msgstr ""
"``customers`` フィールドに ``related_name`` を追加する事でこのエラーを解消で"
"きます: ``models.ManyToManyField(Place, related_name='provider')``。"

msgid "Specifying the parent link field"
msgstr "親モデルとのリンクに用いるフィールドを定義する"

msgid ""
"As mentioned, Django will automatically create a :class:`~django.db.models."
"OneToOneField` linking your child class back to any non-abstract parent "
"models. If you want to control the name of the attribute linking back to the "
"parent, you can create your own :class:`~django.db.models.OneToOneField` and "
"set :attr:`parent_link=True <django.db.models.OneToOneField.parent_link>` to "
"indicate that your field is the link back to the parent class."
msgstr ""
"先に述べたように、Django は自動的に :class:`~django.db.models.OneToOneField` "
"による子クラスから抽象クラスでないあらゆる親モデルへの関連付けを自動的に作り"
"ます。もしこの親モデルを指す属性値の名前を設定したい場合は、あるフィールドが"
"親クラスに関連を逆引きするための物であることを示すために、独自の  :class:"
"`~django.db.models.OneToOneField` を作り :attr:`parent_link=True <django.db."
"models.OneToOneField.parent_link>` を設定できます。"

msgid ""
"When using :ref:`multi-table inheritance <multi-table-inheritance>`, a new "
"database table is created for each subclass of a model. This is usually the "
"desired behavior, since the subclass needs a place to store any additional "
"data fields that are not present on the base class. Sometimes, however, you "
"only want to change the Python behavior of a model -- perhaps to change the "
"default manager, or add a new method."
msgstr ""
":ref:`複数テーブルの継承 <multi-table-inheritance>` を使用すると、モデルの各"
"サブクラスに対して新しいデータベーステーブルが作成されます。これは通常、望ま"
"しい動作です。なぜなら、サブクラスには基底クラスに存在しない追加のデータ"
"フィールドを格納する場所が必要だからです。しかし、時にはモデルの Python 上で"
"の動作を変更したいだけの場合もあります。たとえば、デフォルトマネージャーを変"
"更する、新しいメソッドを追加するなどです。"

msgid ""
"This is what proxy model inheritance is for: creating a *proxy* for the "
"original model. You can create, delete and update instances of the proxy "
"model and all the data will be saved as if you were using the original (non-"
"proxied) model. The difference is that you can change things like the "
"default model ordering or the default manager in the proxy, without having "
"to alter the original."
msgstr ""
"これがプロキシモデル継承の目的、つまり元のモデルの *プロキシ* を作成すること"
"です。プロキシモデルのインスタンスは作成、削除、更新でき、すべてのデータは元"
"の（非プロキシ）モデルを使用しているかのように保存されます。違いは、元のモデ"
"ルを変更することなく、デフォルトのモデルのソート順やマネージャーの設定をプロ"
"キシ上で変更できるという点です。"

msgid ""
"Proxy models are declared like normal models. You tell Django that it's a "
"proxy model by setting the :attr:`~django.db.models.Options.proxy` attribute "
"of the ``Meta`` class to ``True``."
msgstr ""
"プロキシモデルは通常のモデルと同様に定義されます。Django にそれがプロキシモデ"
"ルである事を伝えるには ``Meta`` クラスの :attr:`~django.db.models.Options."
"proxy` 属性値を ``True`` にします。"

msgid ""
"For example, suppose you want to add a method to the ``Person`` model. You "
"can do it like this::"
msgstr ""
"例として、``Person`` モデルにメソッドを追加すると仮定します。以下のように記述"
"することで実現できます::"

msgid ""
"The ``MyPerson`` class operates on the same database table as its parent "
"``Person`` class. In particular, any new instances of ``Person`` will also "
"be accessible through ``MyPerson``, and vice-versa:"
msgstr ""
"``MyPerson`` クラスはその親である ``Person`` クラスと同じデータベースのテーブ"
"ルを操作しています。次のように、特に、``Person`` の新たなインスタンスはすべ"
"て ``MyPerson`` 経由でもアクセスでき、逆も同様です。"

msgid ""
"You could also use a proxy model to define a different default ordering on a "
"model. You might not always want to order the ``Person`` model, but "
"regularly order by the ``last_name`` attribute when you use the proxy::"
msgstr ""
"あるモデルに対して並び順の既定値を定義するためにもプロキシモデルを利用できま"
"す。``Person`` モデルの並び順を常に指定したいわけではなくても、プロキシを利用"
"することで、定期的に ``last_name`` 属性で並び替えることができます。"

msgid ""
"Now normal ``Person`` queries will be unordered and ``OrderedPerson`` "
"queries will be ordered by ``last_name``."
msgstr ""
"これで通常の ``Person`` に対する問い合わせでは特に結果は並び替えられず "
"``OrderedPerson`` に対する問い合わせでは ``last_name`` に基づいて並び替えられ"
"ます。"

msgid ""
"Proxy models inherit ``Meta`` attributes :ref:`in the same way as regular "
"models <meta-and-multi-table-inheritance>`."
msgstr ""
"プロキシモデルは ``Meta`` の属性値を :ref:`通常のモデルと同様に <meta-and-"
"multi-table-inheritance>` 継承します。"

msgid "``QuerySet``\\s still return the model that was requested"
msgstr "``QuerySet``\\s はリクエストされたモデルを返し続ける"

msgid ""
"There is no way to have Django return, say, a ``MyPerson`` object whenever "
"you query for ``Person`` objects. A queryset for ``Person`` objects will "
"return those types of objects. The whole point of proxy objects is that code "
"relying on the original ``Person`` will use those and your own code can use "
"the extensions you included (that no other code is relying on anyway). It is "
"not a way to replace the ``Person`` (or any other) model everywhere with "
"something of your own creation."
msgstr ""
"``Person`` オブジェクトに対して問い合わせた場合に Django に、あえて言えば、 "
"``MyPerson`` オブジェクトを返させる事はできません。プロキシオブジェクトのポイ"
"ントはオリジナルの ``Person`` に依存しているコードはそちらを使いつつ、新たに"
"含んだ (他のコードがどんな形であれ依存しない) 拡張を使うコードを書けるという"
"点です。 ``Person`` モデル (や他の全てのモデル) を新たに作った何物かに置き換"
"える方法ではありません。"

msgid "Base class restrictions"
msgstr "基底クラスの制限"

msgid ""
"A proxy model must inherit from exactly one non-abstract model class. You "
"can't inherit from multiple non-abstract models as the proxy model doesn't "
"provide any connection between the rows in the different database tables. A "
"proxy model can inherit from any number of abstract model classes, providing "
"they do *not* define any model fields. A proxy model may also inherit from "
"any number of proxy models that share a common non-abstract parent class."
msgstr ""
"プロキシモデルは、ちょうど1つの非抽象モデルクラスを継承しなければなりません。"
"プロキシモデルは異なるデータベースのテーブル上の行の間にコネクションを作らな"
"いため、複数の非抽象クラスを継承することはできません。プロキシモデルは、いか"
"なるモデルフィールドも定義 *しない* 限り、抽象モデルクラスをいくつでも継承で"
"きます。また、プロキシモデルは、共通の非抽象な親クラスを持つプロキシモデルを"
"いくつでも継承できます。"

msgid "Proxy model managers"
msgstr "プロキシモデルマネージャー"

msgid ""
"If you don't specify any model managers on a proxy model, it inherits the "
"managers from its model parents. If you define a manager on the proxy model, "
"it will become the default, although any managers defined on the parent "
"classes will still be available."
msgstr ""
"プロキシモデル上にモデルのマネージャーを定義しない場合、そのプロキシモデルは"
"マネージャーを親のモデルから継承します。プロキシモデル上にマネージャーを定義"
"する場合、親クラス上のマネージャーで定義されて利用可能な物があったとしても、"
"そのマネージャーがデフォルトになります。"

msgid ""
"Continuing our example from above, you could change the default manager used "
"when you query the ``Person`` model like this::"
msgstr ""
"先ほどの例の続きで、``Person`` モデルにクエリを発行するときに使うデフォルトの"
"マネージャを次のように変更できます："

msgid ""
"If you wanted to add a new manager to the Proxy, without replacing the "
"existing default, you can use the techniques described in the :ref:`custom "
"manager <custom-managers-and-inheritance>` documentation: create a base "
"class containing the new managers and inherit that after the primary base "
"class::"
msgstr ""
"既存のデフォルトのマネージャを置き換えることなく、新しいマネージャをプロキシ"
"に追加したい場合は、 :ref:`カスタムマネージャ <custom-managers-and-"
"inheritance>` で説明したテクニックを使用できます。新しいマネージャを含む基底"
"クラスを作成し、それを主要な基底クラスの後に多重継承します： "

msgid ""
"You probably won't need to do this very often, but, when you do, it's "
"possible."
msgstr ""
"これが必要になることはあまりないでしょうが、必要であれば上記のような実装も可"
"能です。"

msgid "Differences between proxy inheritance and unmanaged models"
msgstr "プロキシモデルの継承と管理対象外モデルの違い"

msgid ""
"Proxy model inheritance might look fairly similar to creating an unmanaged "
"model, using the :attr:`~django.db.models.Options.managed` attribute on a "
"model's ``Meta`` class."
msgstr ""
"プロキシモデルの継承は、あるモデルの ``Meta`` クラスにおける :attr:`~django."
"db.models.Options.managed` 属性を用いて Django に管理されないモデルを作成する"
"のにかなり似ています。"

msgid ""
"With careful setting of :attr:`Meta.db_table <django.db.models.Options."
"db_table>` you could create an unmanaged model that shadows an existing "
"model and adds Python methods to it. However, that would be very repetitive "
"and fragile as you need to keep both copies synchronized if you make any "
"changes."
msgstr ""
":attr:`Meta.db_table <django.db.models.Options.db_table>` を入念に設定する事"
"で既に存在するモデルとそれに対応する Python メソッドを隠ぺいする管理対象外モ"
"デルを作成できます。しかしながら、この操作は変更を加えた際に定義を複製して同"
"期する際にとても冗長で変更に弱い物となります。"

msgid ""
"On the other hand, proxy models are intended to behave exactly like the "
"model they are proxying for. They are always in sync with the parent model "
"since they directly inherit its fields and managers."
msgstr ""
"一方、プロキシモデルはプロキシするモデルと全く同じように振る舞うことを企図し"
"ています。それらのモデルは直接フィールドとマネージャーを継承しているため、常"
"に親モデルに同期しています。"

msgid "The general rules are:"
msgstr "原則としては:"

msgid ""
"If you are mirroring an existing model or database table and don't want all "
"the original database table columns, use ``Meta.managed=False``. That option "
"is normally useful for modeling database views and tables not under the "
"control of Django."
msgstr ""
"もし既存のモデルやデータベースのテーブルを反映したいが元となるテーブルのカラ"
"ムの全てを必要とする訳ではない場合は、 ``Meta.managed=False`` を利用してくだ"
"さい。このオプションはデータベースのビューやテーブルを Django の管理下に置き"
"たくない場合に通常有用となります。"

msgid ""
"If you are wanting to change the Python-only behavior of a model, but keep "
"all the same fields as in the original, use ``Meta.proxy=True``. This sets "
"things up so that the proxy model is an exact copy of the storage structure "
"of the original model when data is saved."
msgstr ""
"モデルの Python 上の振る舞いだけを変更したいが、元のモデルと同じフィールドを"
"すべて保持したい場合は、``Meta.proxy=True`` を使用します。これにより、データ"
"が保存される際にプロキシモデルが元のモデルのストレージ構造の正確なコピーとな"
"るように設定されます。"

msgid "Multiple inheritance"
msgstr "多重継承"

msgid ""
"Just as with Python's subclassing, it's possible for a Django model to "
"inherit from multiple parent models. Keep in mind that normal Python name "
"resolution rules apply. The first base class that a particular name (e.g. :"
"ref:`Meta <meta-options>`) appears in will be the one that is used; for "
"example, this means that if multiple parents contain a :ref:`Meta <meta-"
"options>` class, only the first one is going to be used, and all others will "
"be ignored."
msgstr ""
"Pythonのサブクラス化と同様に、Djangoモデルが複数の親モデルから継承することも"
"可能です。通常の Python 名前解決規則が適用されることを念頭に置いてください。"
"特定の名前 (例えば :ref:`Meta <meta-options>`) が最初に現れる基底クラスが使用"
"されることになります。たとえば、複数の親が :ref:`Meta <meta-options>` クラス"
"を含んでいる場合、最初のもののみが使用され、他のすべては無視されることを意味"
"します。"

msgid ""
"Generally, you won't need to inherit from multiple parents. The main use-"
"case where this is useful is for \"mix-in\" classes: adding a particular "
"extra field or method to every class that inherits the mix-in. Try to keep "
"your inheritance hierarchies as simple and straightforward as possible so "
"that you won't have to struggle to work out where a particular piece of "
"information is coming from."
msgstr ""
"通常は複数の親モデルを継承する必要はありません。この機能が有用な主な状況はク"
"ラスの \"ミックスイン\"（そのクラスを継承する全てのクラスに特別なフィールドや"
"メソッドを追加させる技術）を利用する場合です。継承階層をできるだけシンプルで"
"直接的に保つようにして、特定の情報がどこから来ているのかを把握するための苦労"
"をすることのないないようにしてください。"

msgid ""
"Note that inheriting from multiple models that have a common ``id`` primary "
"key field will raise an error. To properly use multiple inheritance, you can "
"use an explicit :class:`~django.db.models.AutoField` in the base models::"
msgstr ""
"共通の ``id`` 主キーフィールドを持った複数のモデルを継承すると例外が送出され"
"ることに注意してください。多重継承を正常に使うために、基底モデル内で明示的"
"に :class:`~django.db.models.AutoField` を利用できます。"

msgid ""
"Or use a common ancestor to hold the :class:`~django.db.models.AutoField`. "
"This requires using an explicit :class:`~django.db.models.OneToOneField` "
"from each parent model to the common ancestor to avoid a clash between the "
"fields that are automatically generated and inherited by the child::"
msgstr ""
"あるいは、共通の祖先を使って :class:`~django.db.models.AutoField` を保持しま"
"す。このためには、以下のように、自動生成されて子に継承されたフィールド間の衝"
"突を避けるために、各親モデルから共通の祖先への :class:`~django.db.models."
"OneToOneField` を明示的に使用する必要があります。"

msgid "Field name \"hiding\" is not permitted"
msgstr "フィールド名の「隠ぺい」は許可されない"

msgid ""
"In normal Python class inheritance, it is permissible for a child class to "
"override any attribute from the parent class. In Django, this isn't usually "
"permitted for model fields. If a non-abstract model base class has a field "
"called ``author``, you can't create another model field or define an "
"attribute called ``author`` in any class that inherits from that base class."
msgstr ""
"通常の Python のクラス継承では、親クラスから継承したあらゆる属性を子クラスが"
"オーバーライドできます。Django では、この挙動は通常モデルのフィールドに対して"
"許容されません。もし非抽象なモデルの基底クラスが ``author`` フィールドを持っ"
"ていたとしたら、そのモデルの基底クラスを継承したあらゆるモデルクラス内では "
"``author`` という名称の属性値を別のモデルのフィールドや属性として定義できなく"
"なります。"

msgid ""
"This restriction doesn't apply to model fields inherited from an abstract "
"model. Such fields may be overridden with another field or value, or be "
"removed by setting ``field_name = None``."
msgstr ""
"この制約は抽象モデルを継承したモデルのフィールドに対しては適用されません。こ"
"ういったフィールドは別のフィールドや値によってオーバーライドされるか "
"``field_name = None`` を設定することで削除する事ができます:"

msgid ""
"Model managers are inherited from abstract base classes. Overriding an "
"inherited field which is referenced by an inherited :class:`~django.db."
"models.Manager` may cause subtle bugs. See :ref:`custom managers and model "
"inheritance <custom-managers-and-inheritance>`."
msgstr ""
"モデルマネージャーは抽象基底クラスより継承されます。継承された :class:"
"`~django.db.models.Manager` から参照される継承されたフィールドをオーバーライ"
"ドすると、ちょっとしたバグを発生させることがあります。詳細は :ref:`カスタムマ"
"ネージャーとモデルの継承 <custom-managers-and-inheritance>` を参照ください。"

msgid ""
"Some fields define extra attributes on the model, e.g. a :class:`~django.db."
"models.ForeignKey` defines an extra attribute with ``_id`` appended to the "
"field name, as well as ``related_name`` and ``related_query_name`` on the "
"foreign model."
msgstr ""
"ある種のフィールドはモデル上に特別な属性を定義します、例えば :class:`~django."
"db.models.ForeignKey` は ``_id`` がフィールド名に付与された属性を、外部モデル"
"上の ``related_name`` と ``related_query_name`` と同じように定義します。"

msgid ""
"These extra attributes cannot be overridden unless the field that defines it "
"is changed or removed so that it no longer defines the extra attribute."
msgstr ""
"これらの特別な属性はその属性を定義しているフィールドが、もはやその特別な属性"
"を定義しなくなるように、変更もしくは削除されなければオーバーライドできませ"
"ん。"

msgid ""
"Overriding fields in a parent model leads to difficulties in areas such as "
"initializing new instances (specifying which field is being initialized in "
"``Model.__init__``) and serialization. These are features which normal "
"Python class inheritance doesn't have to deal with in quite the same way, so "
"the difference between Django model inheritance and Python class inheritance "
"isn't arbitrary."
msgstr ""
"親モデルのフィールドをオーバーライドする事はインスタンス (どのフィールドが初"
"期化されるか ``Model.__init__`` に定義している) の初期化やシリアライズ時の問"
"題につながります。これらは通常の Python のクラス継承で全く同様に扱う事が求め"
"られていない機能であるため、 Django のモデル継承と Python のクラス継承のこう"
"した差異は恣意的な設計による物ではありません。"

msgid ""
"This restriction only applies to attributes which are :class:`~django.db."
"models.Field` instances. Normal Python attributes can be overridden if you "
"wish. It also only applies to the name of the attribute as Python sees it: "
"if you are manually specifying the database column name, you can have the "
"same column name appearing in both a child and an ancestor model for multi-"
"table inheritance (they are columns in two different database tables)."
msgstr ""
"この制限は :class:`~django.db.models.Field` のインスタンスである属性に対して"
"のみ適用されます。通常の Python の属性は望むままにオーバーライドできます。ま"
"たその制約は Python が解析する際の属性の名称にのみ影響します:もしデータベース"
"のカラム名を手動で設定したい場合、複数テーブルの継承 (2 つの異なるデータベー"
"スのテーブルに保持されているカラム) を表現する際に子と祖先のモデルで同じカラ"
"ム名を設定できます。"

msgid ""
"Django will raise a :exc:`~django.core.exceptions.FieldError` if you "
"override any model field in any ancestor model."
msgstr ""
"もし祖先モデルのいずれかに定義されたモデルのフィールドをオーバーライドした場"
"合 Django は :exc:`~django.core.exceptions.FieldError` 例外を送出します。"

msgid ""
"Note that because of the way fields are resolved during class definition, "
"model fields inherited from multiple abstract parent models are resolved in "
"a strict depth-first order. This contrasts with standard Python MRO, which "
"is resolved breadth-first in cases of diamond shaped inheritance. This "
"difference only affects complex model hierarchies, which (as per the advice "
"above) you should try to avoid."
msgstr ""
"クラス定義中のフィールドの解決方法のため、複数の抽象親モデルから継承されたモ"
"デルのフィールドは、厳密な深さ優先順序で解決されることに注意してください。こ"
"れは標準の Python の MRO とは対照的です。MRO では、ダイヤモンド型継承の場合に"
"は、幅優先で解決されます。この違いの影響を受けるのは複雑なモデル階層のみであ"
"り、これは（上記のアドバイスに従って）避けるべきです。"

msgid "Organizing models in a package"
msgstr "パッケージ化したモデルを扱う"

msgid ""
"The :djadmin:`manage.py startapp <startapp>` command creates an application "
"structure that includes a ``models.py`` file. If you have many models, "
"organizing them in separate files may be useful."
msgstr ""
":djadmin:`manage.py startapp <startapp>` コマンドを実行することで ``models."
"py`` ファイルを含むアプリケーション構造が作成されます。多数のモデルが存在する"
"場合、それらを別のファイルとして管理するのが良いかもしれません。"

msgid ""
"To do so, create a ``models`` package. Remove ``models.py`` and create a "
"``myapp/models/`` directory with an ``__init__.py`` file and the files to "
"store your models. You must import the models in the ``__init__.py`` file."
msgstr ""
"それを行うため、 ``models`` パッケージを作成します。 ``models.py`` を削除して"
"モデルを保持するための ``__init__.py`` ファイルを持つ ``myapp/models/`` ディ"
"レクトリを作成します。作成した ``__init__.py`` でモデルをインポートする必要が"
"あります。"

msgid ""
"For example, if you had ``organic.py`` and ``synthetic.py`` in the "
"``models`` directory:"
msgstr ""
"例えば、 ``organic.py`` および ``synthetic.py`` を ``models`` ディレクトリ内"
"に持っている場合:"

msgid "``myapp/models/__init__.py``"
msgstr "``myapp/models/__init__.py``"

msgid ""
"Explicitly importing each model rather than using ``from .models import *`` "
"has the advantages of not cluttering the namespace, making code more "
"readable, and keeping code analysis tools useful."
msgstr ""
"``from .models import *`` という記述を用いずに各モデルを明示的にインポートす"
"る方法には名前空間を汚染しない、可読性を向上させる、コード解析ツールを有用な"
"状態に保つという利点があります。"

msgid ":doc:`The Models Reference </ref/models/index>`"
msgstr ":doc:`モデルの手引き </ref/models/index>`"

msgid ""
"Covers all the model related APIs including model fields, related objects, "
"and ``QuerySet``."
msgstr ""
"モデルのフィールド、関連オブジェクト、``QuerySet`` を含む、モデルに関係するす"
"べての API について説明しています。"

msgid ""
"This topic guide describes Django's support for interacting with multiple "
"databases. Most of the rest of Django's documentation assumes you are "
"interacting with a single database. If you want to interact with multiple "
"databases, you'll need to take some additional steps."
msgstr ""
"ここでは、Djangoがサポートする複数データベースの扱いについて説明します。残り"
"のDjangoのドキュメントの大部分は、あなたが一つのデータベース扱うことを前提と"
"しています。複数のデータベースを使いたいなら、いくつかの追加ステップを踏む必"
"要があります。"

msgid ""
"See :ref:`testing-multi-db` for information about testing with multiple "
"databases."
msgstr ""
"複数のデータベースを使用したテストに付いての情報は、:ref:`testing-multi-db` "
"を参照してください。"

msgid "Defining your databases"
msgstr "データベースを定義する"

msgid ""
"The first step to using more than one database with Django is to tell Django "
"about the database servers you'll be using. This is done using the :setting:"
"`DATABASES` setting. This setting maps database aliases, which are a way to "
"refer to a specific database throughout Django, to a dictionary of settings "
"for that specific connection. The settings in the inner dictionaries are "
"described fully in the :setting:`DATABASES` documentation."
msgstr ""
"Django でデータベースを使う最初のステップは、利用するデータベースサーバーを "
"Django に教えることです。これは、:setting:`DATABASES` の設定で行います。この"
"設定は、データベースへのエイリアスです。Django を通してデータベースを参照する"
"ためのデータベースエイリアスを、辞書にマッピングします。この辞書の設定の詳細"
"は、:setting:`DATABASES` ドキュメントで説明しています。"

msgid ""
"Databases can have any alias you choose. However, the alias ``default`` has "
"special significance. Django uses the database with the alias of ``default`` "
"when no other database has been selected."
msgstr ""
"データベースには、選択した任意のエイリアスを付けることができます。しかし、エ"
"イリアス ``default`` は特別な意味があります。Django は、他のデータベースが選"
"択されていない場合、``default`` というエイリアスを持つデータベースを使用しま"
"す。"

msgid ""
"The following is an example ``settings.py`` snippet defining two databases "
"-- a default PostgreSQL database and a MySQL database called ``users``::"
msgstr ""
"以下に示すのは、2つのデータベース、すなわちデフォルトの PostgreSQL データベー"
"スと ``users`` という名前の MySQL データベースを定義した ``settings.py`` スニ"
"ペットの例です。"

msgid ""
"If the concept of a ``default`` database doesn't make sense in the context "
"of your project, you need to be careful to always specify the database that "
"you want to use. Django requires that a ``default`` database entry be "
"defined, but the parameters dictionary can be left blank if it will not be "
"used. To do this, you must set up :setting:`DATABASE_ROUTERS` for all of "
"your apps' models, including those in any contrib and third-party apps "
"you're using, so that no queries are routed to the default database. The "
"following is an example ``settings.py`` snippet defining two non-default "
"databases, with the ``default`` entry intentionally left empty::"
msgstr ""
"``default`` データベースという概念がプロジェクトのコンテキストで意味をなさな"
"い場合、使用したいデータベースを注意深く常に指定する必要があります。Django "
"は ``default`` データベースエントリーが定義されていることを要求しますが、使用"
"しない場合はパラメータのディクショナリを空白のままにできます。これを行うに"
"は、使用している contrib とサードパーティを含むすべてのアプリのモデルで :"
"setting:`DATABASE_ROUTERS` をセットアップしなければなりません。以下は、"
"``default`` エントリーを意図的に空のままにして、2つの default ではないデータ"
"ベースを定義している ``settings.py`` スニペットの例です。"

msgid ""
"If you attempt to access a database that you haven't defined in your :"
"setting:`DATABASES` setting, Django will raise a ``django.utils.connection."
"ConnectionDoesNotExist`` exception."
msgstr ""
":setting:`DATABASES` 設定で定義されていないデータベースへのアクセスを試みた場"
"合、Django は ``django.utils.connection.ConnectionDoesNotExist`` 例外を発生さ"
"れます。"

msgid "Synchronizing your databases"
msgstr "データベースを同期する"

msgid ""
"The :djadmin:`migrate` management command operates on one database at a "
"time. By default, it operates on the ``default`` database, but by providing "
"the :option:`--database <migrate --database>` option, you can tell it to "
"synchronize a different database. So, to synchronize all models onto all "
"databases in the first example above, you would need to call:"
msgstr ""
":djadmin:`migrate` 管理コマンドは一度に一つのデータベースに対して動作します。"
"デフォルトでは ``default`` データベース上で動作しますが、 :option:`--"
"database <migrate --database>` オプションを指定することで、別のデータベースを"
"同期させることができます。つまり、上記の最初の例ですべてのモデルをすべての"
"データベースに同期させるには、次のように呼び出します:"

msgid ""
"If you don't want every application to be synchronized onto a particular "
"database, you can define a :ref:`database router<topics-db-multi-db-"
"routing>` that implements a policy constraining the availability of "
"particular models."
msgstr ""
"すべてのアプリケーションを特定のデータベースに同期させたくない場合には、特定"
"のモデルの利用を制限するポリシーを実装した :ref:`データベース ルーター "
"<topics-db-multi-db-routing>` を定義できます。"

msgid ""
"If, as in the second example above, you've left the ``default`` database "
"empty, you must provide a database name each time you run :djadmin:"
"`migrate`. Omitting the database name would raise an error. For the second "
"example:"
msgstr ""
"上記の2番目の例のように、 ``default`` データベースを空のままにしている場"
"合、 :djadmin:`migrate` を実行するときは毎回データベース名を指定する必要があ"
"ります。データベース名を省略するとエラーになります。2番目の例では次のようにな"
"ります:"

msgid "Using other management commands"
msgstr "他の管理コマンドを使用する"

msgid ""
"Most other ``django-admin`` commands that interact with the database operate "
"in the same way as :djadmin:`migrate` -- they only ever operate on one "
"database at a time, using ``--database`` to control the database used."
msgstr ""
"データベースとやり取りする他のほとんどの ``django-admin`` コマンドは :"
"djadmin:`migrate` と同じ方法で動作します ― これらは一度に一つのデータベース上"
"でのみ動作し、使用するデータベースを制御するために ``--database`` を使用しま"
"す。"

msgid ""
"An exception to this rule is the :djadmin:`makemigrations` command. It "
"validates the migration history in the databases to catch problems with the "
"existing migration files (which could be caused by editing them) before "
"creating new migrations. By default, it checks only the ``default`` "
"database, but it consults the :meth:`allow_migrate` method of :ref:`routers "
"<topics-db-multi-db-routing>` if any are installed."
msgstr ""
"このルールの例外は :djadmin:`makemigrations` コマンドです。このコマンドは新し"
"いマイグレーションを作成する前に、データベース内のマイグレーション履歴を検証"
"して、既存のマイグレーションファイルの問題 (マイグレーションファイル自体の編"
"集によって起こるものを含む) を検出します。デフォルトでは ``default`` データ"
"ベースのみをチェックしますが、 :ref:`routers <topics-db-multi-db-routing>` が"
"インストールされている場合には :meth:`allow_migrate` メソッドを参照します。"

msgid "Automatic database routing"
msgstr "自動的なデータベースのルーティング"

msgid ""
"The easiest way to use multiple databases is to set up a database routing "
"scheme. The default routing scheme ensures that objects remain 'sticky' to "
"their original database (i.e., an object retrieved from the ``foo`` database "
"will be saved on the same database). The default routing scheme ensures that "
"if a database isn't specified, all queries fall back to the ``default`` "
"database."
msgstr ""
"複数のデータベースを使用する最も簡単な方法は、データベースのルーティングス"
"キームを設定することです。デフォルトのルーティングスキームでは、オブジェクト"
"は元のデータベースに ''くっついた'' まま保存されます (つまり、``foo`` データ"
"ベースから取得したオブジェクトは同じデータベースに保存されます)。デフォルトの"
"ルーティングスキームでは、データベースが指定されていない場合、すべてのクエリ"
"は ``default`` データベースにフォールバックします。"

msgid ""
"You don't have to do anything to activate the default routing scheme -- it "
"is provided 'out of the box' on every Django project. However, if you want "
"to implement more interesting database allocation behaviors, you can define "
"and install your own database routers."
msgstr ""
"デフォルトのルーティングスキームを有効にするために何もする必要はありません "
"-- すべての Django プロジェクトで「箱から出してすぐに」使えます。しかし、もっ"
"と面白いデータベース割り当ての動作を実装したければ、独自の データベース ルー"
"ターを定義してインストールできます。"

msgid "Database routers"
msgstr "データベース ルーター"

msgid "A database Router is a class that provides up to four methods:"
msgstr "データベース ルーターは、以下の 4 つのメソッドを提供するクラスです:"

msgid ""
"Suggest the database that should be used for read operations for objects of "
"type ``model``."
msgstr ""
"``model`` 型のオブジェクトの読み取り操作に使用するデータベースをサジェストし"
"ます。"

msgid ""
"If a database operation is able to provide any additional information that "
"might assist in selecting a database, it will be provided in the ``hints`` "
"dictionary. Details on valid hints are provided :ref:`below <topics-db-multi-"
"db-hints>`."
msgstr ""
"データベース操作がデータベースを選択する際に役立つ追加情報を提供できる場合、"
"それは ``hints`` 辞書で与えられます。有効なヒントの詳細は :ref:`下記 <topics-"
"db-multi-db-hints>` を参照してください。"

msgid "Returns ``None`` if there is no suggestion."
msgstr "サジェストがない場合は ``None`` を返します。"

msgid ""
"Suggest the database that should be used for writes of objects of type Model."
msgstr ""
"Model型のオブジェクトの書き込みに使用するデータベースをサジェストします。"

msgid ""
"Return ``True`` if a relation between ``obj1`` and ``obj2`` should be "
"allowed, ``False`` if the relation should be prevented, or ``None`` if the "
"router has no opinion. This is purely a validation operation, used by "
"foreign key and many to many operations to determine if a relation should be "
"allowed between two objects."
msgstr ""
"もし ``obj1`` と ``obj2`` の間のリレーションが許可されるべきであれば "
"``True`` を、禁止されるべきであれば ``False`` を、ルーターの意見がなければ "
"``None`` を返します。これは純粋に検証操作であり、外部キーや多対多の操作で、2"
"つのオブジェクト間でリレーションが許可されるべきかどうかを判断するために使用"
"されます。"

msgid ""
"If no router has an opinion (i.e. all routers return ``None``), only "
"relations within the same database are allowed."
msgstr ""
"どのルーターも意見を持たない場合 (つまり、すべてのルーターが ``None`` を返す"
"場合)、同じデータベース内のリレーションだけが許可されます。"

msgid ""
"Determine if the migration operation is allowed to run on the database with "
"alias ``db``. Return ``True`` if the operation should run, ``False`` if it "
"shouldn't run, or ``None`` if the router has no opinion."
msgstr ""
"エイリアス ``db`` を持つデータベース上でマイグレーション操作を実行できるかど"
"うかを判定します。操作を実行すべき場合は ``True`` を、実行すべきでない場合は "
"``False`` を、ルーターが意見を持たない場合は ``None`` を返します。"

msgid ""
"The ``app_label`` positional argument is the label of the application being "
"migrated."
msgstr ""
"位置引数 ``app_label`` はマイグレーションするアプリケーションのラベルです。"

msgid ""
"``model_name`` is set by most migration operations to the value of ``model."
"_meta.model_name`` (the lowercased version of the model ``__name__``) of the "
"model being migrated. Its value is ``None`` for the :class:`~django.db."
"migrations.operations.RunPython` and :class:`~django.db.migrations."
"operations.RunSQL` operations unless they provide it using hints."
msgstr ""
"``model_name`` はマイグレーションするモデルの ``model._meta.model_name`` (モ"
"デルの ``__name__`` を小文字にしたもの) に設定されます。この値は :class:"
"`~django.db.migrations.operations.RunPython` と :class:`~django.db."
"migrations.operations.RunSQL` 操作ではヒントを使用しない限り ``None`` です。"

msgid ""
"``hints`` are used by certain operations to communicate additional "
"information to the router."
msgstr "``hints`` は特定の操作でルーターに追加情報を伝えるために使われます。"

msgid ""
"When ``model_name`` is set, ``hints`` normally contains the model class "
"under the key ``'model'``. Note that it may be a :ref:`historical model "
"<historical-models>`, and thus not have any custom attributes, methods, or "
"managers. You should only rely on ``_meta``."
msgstr ""
"``model_name`` がセットされている場合、通常 ``hints`` には ``'model'`` という"
"キーの下にモデルクラスが含まれます。これは :ref:`履歴上のモデル <historical-"
"models>` であり、カスタム属性、メソッド、マネージャを持たないことに注意してく"
"ださい。 ``_meta`` にのみ依存する必要があります。"

msgid ""
"This method can also be used to determine the availability of a model on a "
"given database."
msgstr ""
"この方法は、指定されたデータベース上のモデルの可用性を判断するためにも使用で"
"きます。"

msgid ""
":djadmin:`makemigrations` always creates migrations for model changes, but "
"if ``allow_migrate()`` returns ``False``, any migration operations for the "
"``model_name`` will be silently skipped when running :djadmin:`migrate` on "
"the ``db``. Changing the behavior of ``allow_migrate()`` for models that "
"already have migrations may result in broken foreign keys, extra tables, or "
"missing tables. When :djadmin:`makemigrations` verifies the migration "
"history, it skips databases where no app is allowed to migrate."
msgstr ""
":djadmin:`makemigrations` は常にモデルの変更に対してマイグレーションを作成し"
"ますが、 ``allow_migrate()`` が ``False`` を返した場合、 ``db`` で :djadmin:"
"`migrate` を実行すると、 ``model_name`` に対するマイグレーション操作はすべて"
"警告なしにスキップされます。マイグレーションしているモデルに対して "
"``allow_migrate()`` の動作を変更すると、外部キーが壊れたり、テーブルが増えた"
"り、テーブルがなくなったりする可能性があります。 :djadmin:`makemigrations` が"
"マイグレーション履歴を確認するとき、マイグレーションが許可されていないデータ"
"ベースはスキップされます。"

msgid ""
"A router doesn't have to provide *all* these methods -- it may omit one or "
"more of them. If one of the methods is omitted, Django will skip that router "
"when performing the relevant check."
msgstr ""
"ルーターはこれらのメソッドを *全て* 提供する必要はありません -- 1 つ以上省略"
"してもかまいません。もしメソッドの1つが省略された場合、 Django は関連する"
"チェックを行う際にそのルーターをスキップします。"

msgid "Hints"
msgstr "ヒント"

msgid ""
"The hints received by the database router can be used to decide which "
"database should receive a given request."
msgstr ""
"データベースルーターが受け取ったヒントは、与えられたリクエストをどのデータ"
"ベースが受け取るべきかを決定するために使うことができます。"

msgid ""
"At present, the only hint that will be provided is ``instance``, an object "
"instance that is related to the read or write operation that is underway. "
"This might be the instance that is being saved, or it might be an instance "
"that is being added in a many-to-many relation. In some cases, no instance "
"hint will be provided at all. The router checks for the existence of an "
"instance hint, and determine if that hint should be used to alter routing "
"behavior."
msgstr ""
"現在のところ、提供される唯一のヒントは ``instance`` で、現在進行中の読み取り"
"または書き込み操作に関連するオブジェクトのインスタンスです。これは保存される"
"インスタンスかもしれませんし、多対多の関係で追加されるインスタンスかもしれま"
"せん。場合によっては、インスタンスヒントは全く提供されません。ルーターはイン"
"スタンスヒントの存在をチェックし、そのヒントを使用してルーティング動作を変更"
"すべきかどうかを決定します。"

msgid "Using routers"
msgstr "ルーターを使用する"

msgid ""
"Database routers are installed using the :setting:`DATABASE_ROUTERS` "
"setting. This setting defines a list of class names, each specifying a "
"router that should be used by the base router (``django.db.router``)."
msgstr ""
"データベースルーターは :setting:`DATABASE_ROUTERS` 設定を使ってインストールし"
"ます。この設定はクラス名のリストを定義し、それぞれがベースルーター (``django."
"db.router``) が使用するルーターを指定します。"

msgid ""
"The base router is used by Django's database operations to allocate database "
"usage. Whenever a query needs to know which database to use, it calls the "
"base router, providing a model and a hint (if available). The base router "
"tries each router class in turn until one returns a database suggestion. If "
"no routers return a suggestion, the base router tries the current :attr:"
"`instance._state.db <django.db.models.Model._state>` of the hint instance. "
"If no hint instance was provided, or :attr:`instance._state.db <django.db."
"models.Model._state>` is ``None``, the base router will allocate the "
"``default`` database."
msgstr ""
"ベースルーターは Django のデータベース操作で、データベースの使用量を割り当て"
"るために使われます。クエリがどのデータベースを使うか知る必要があれば常に、"
"ベースルーターを呼び出し、 モデルとヒント (もしあれば) を提供します。ベース"
"ルーターは、データベースのサジェストを返すルーターが現れるまで、順番に各ルー"
"タークラスを試します。ヒントを返すルーターがない場合、ベースルーターはヒント"
"インスタンスの :attr:`instance._state.db <django.db.models.Model._state>` を"
"試します。ヒントインスタンスが提供されなかった場合、または :attr:`instance."
"_state.db <django.db.models.Model._state>` が ``None`` の場合、ベースルーター"
"は ``default`` データベースを割り当てます。"

msgid "An example"
msgstr "例"

msgid "Example purposes only!"
msgstr "例としてのみ使用してください！"

msgid ""
"This example is intended as a demonstration of how the router infrastructure "
"can be used to alter database usage. It intentionally ignores some complex "
"issues in order to demonstrate how routers are used."
msgstr ""
"この例は、ルーターのインフラストラクチャを使用してデータベースの使用状況を変"
"更する方法のデモを示すことだけを目的としています。ルーターの使用方法を紹介す"
"るために、いくつかの複雑な問題を意図的に無視しています。"

msgid ""
"This example won't work if any of the models in ``myapp`` contain "
"relationships to models outside of the ``other`` database. :ref:`Cross-"
"database relationships <no_cross_database_relations>` introduce referential "
"integrity problems that Django can't currently handle."
msgstr ""
"この例は、``myapp`` 内のモデルのいずれかに ``other`` データベースの外部にある"
"モデルとのリレーションが含まれている場合には機能しません。:ref:`クロスデータ"
"ベース リレーション <no_cross_database_relations>` を使うと、現時点では "
"Django が処理できない参照整合性の問題が発生します。"

msgid ""
"The primary/replica (referred to as master/slave by some databases) "
"configuration described is also flawed -- it doesn't provide any solution "
"for handling replication lag (i.e., query inconsistencies introduced because "
"of the time taken for a write to propagate to the replicas). It also doesn't "
"consider the interaction of transactions with the database utilization "
"strategy."
msgstr ""
"プライマリ/レプリカ（一部のデータベースではマスター/スレーブと呼ばれる）構成"
"も欠陥があります。レプリケーション・ラグ（書き込みがレプリカに伝搬するまでに"
"時間がかかるために発生するクエリの不整合）を処理するソリューションを提供して"
"いません。また、トランザクションとデータベース利用戦略との相互作用も考慮され"
"ていません。"

msgid ""
"So - what does this mean in practice? Let's consider another sample "
"configuration. This one will have several databases: one for the ``auth`` "
"application, and all other apps using a primary/replica setup with two read "
"replicas. Here are the settings specifying these databases::"
msgstr ""
"では、実際にはどうなのでしょうか？別のサンプル構成を考えてみましょう。1つは "
"``auth`` アプリケーション用で、他のアプリケーションはプライマリ/レプリカの"
"セットアップを使用し、2つのリードレプリカを使用します。これらのデータベースを"
"指定する設定は以下の通りです:"

msgid ""
"Now we'll need to handle routing. First we want a router that knows to send "
"queries for the ``auth`` and ``contenttypes`` apps to ``auth_db`` (``auth`` "
"models are linked to ``ContentType``, so they must be stored in the same "
"database)::"
msgstr ""
"次に、ルーティングを処理する必要があります。まず、 ``auth`` と "
"``contenttypes`` アプリのクエリを ``auth_db`` に送信するルーターが必要です "
"(``auth`` モデルは ``ContentType`` にリンクされているので、同じデータベースに"
"格納されている必要があります):"

msgid ""
"And we also want a router that sends all other apps to the primary/replica "
"configuration, and randomly chooses a replica to read from::"
msgstr ""
"また、他のすべてのアプリをプライマリ/レプリカ構成に送り、ランダムにレプリカを"
"選んで読み込むルーターも必要です:"

msgid ""
"Finally, in the settings file, we add the following (substituting ``path.to."
"`` with the actual Python path to the module(s) where the routers are "
"defined)::"
msgstr ""
"最後に、設定ファイルに以下を追加します (``path.to.`` はルーターが定義されてい"
"るモジュールの実際のPythonパスで置き換えてください):"

msgid ""
"The order in which routers are processed is significant. Routers will be "
"queried in the order they are listed in the :setting:`DATABASE_ROUTERS` "
"setting. In this example, the ``AuthRouter`` is processed before the "
"``PrimaryReplicaRouter``, and as a result, decisions concerning the models "
"in ``auth`` are processed before any other decision is made. If the :setting:"
"`DATABASE_ROUTERS` setting listed the two routers in the other order, "
"``PrimaryReplicaRouter.allow_migrate()`` would be processed first. The catch-"
"all nature of the PrimaryReplicaRouter implementation would mean that all "
"models would be available on all databases."
msgstr ""
"ルーターが処理される順番は重要です。ルーターは :setting:`DATABASE_ROUTERS` 設"
"定にリストされている順番にクエリされます。この例では、 ``AuthRouter`` が "
"``PrimaryReplicaRouter`` よりも先に処理され、その結果、 ``auth`` のモデルに関"
"する決定が他の決定よりも先に処理されます。もし :setting:`DATABASE_ROUTERS` 設"
"定が2つのルーターを他の順番でリストしていた場合、 ``PrimaryReplicaRouter."
"allow_migrate()`` が最初に処理されます。PrimaryReplicaRouter実装のキャッチ"
"オール特性により、すべてのデータベースですべてのモデルが利用可能になります。"

msgid ""
"With this setup installed, and all databases migrated as per :ref:"
"`synchronizing_multiple_databases`, lets run some Django code:"
msgstr ""
"このセットアップをインストールし、 :ref:`synchronizing_multiple_databases` に"
"従って全てのデータベースをマイグレーションした状態で、Django のコードを実行し"
"てみましょう:"

msgid ""
"This example defined a router to handle interaction with models from the "
"``auth`` app, and other routers to handle interaction with all other apps. "
"If you left your ``default`` database empty and don't want to define a catch-"
"all database router to handle all apps not otherwise specified, your routers "
"must handle the names of all apps in :setting:`INSTALLED_APPS` before you "
"migrate. See :ref:`contrib_app_multiple_databases` for information about "
"contrib apps that must be together in one database."
msgstr ""
"この例では ``auth`` アプリのモデルとのやりとりを処理するルーターと、その他の"
"アプリとのやりとりを処理するルーターを定義しています。もし ``default`` データ"
"ベースを空のままにしていて、他に指定されていないすべてのアプリを処理するため"
"のデータベースルーターを定義したくない場合は、マイグレーションする前に :"
"setting:`INSTALLED_APPS` にあるすべてのアプリの名前をルーターで処理する必要が"
"あります。1つのデータベースにまとめなければならないcontribアプリについては :"
"ref:`contrib_app_multiple_databases` を参照してください。"

msgid "Manually selecting a database"
msgstr "データベースを手動で選択する"

msgid ""
"Django also provides an API that allows you to maintain complete control "
"over database usage in your code. A manually specified database allocation "
"will take priority over a database allocated by a router."
msgstr ""
"Django は、コード中でデータベースの利用を完全に制御できる API も提供し ていま"
"す。手動で指定したデータベースの割り当てが、データベースルーターが割り当てた"
"デー タベースよりも優先されます。"

msgid "Manually selecting a database for a ``QuerySet``"
msgstr "``QuerySet`` のためのデータベースを手動で選択する"

msgid ""
"You can select the database for a ``QuerySet`` at any point in the "
"``QuerySet`` \"chain.\" Call ``using()`` on the ``QuerySet`` to get another "
"``QuerySet`` that uses the specified database."
msgstr ""
"``QuerySet`` の \"チェーン\" のどの時点でも、 ``QuerySet`` のデータベースを選"
"択できます。指定したデータベースを使用する別の ``QuerySet`` を取得するには、 "
"``QuerySet`` の ``using()`` を呼び出します。"

msgid ""
"``using()`` takes a single argument: the alias of the database on which you "
"want to run the query. For example:"
msgstr ""
"``using()`` は引数を1つ取り、クエリを実行したいデータベースのエイリアスを指定"
"します。例えば次のようにします:"

msgid "Selecting a database for ``save()``"
msgstr "``save()`` のためのデータベースを選択する"

msgid ""
"Use the ``using`` keyword to ``Model.save()`` to specify to which database "
"the data should be saved."
msgstr ""
"データを保存するデータベースを指定するには ``Model.save()`` に ``using`` キー"
"ワードを使用します。"

msgid ""
"For example, to save an object to the ``legacy_users`` database, you'd use "
"this:"
msgstr ""
"例えば、 ``legacy_users`` データベースにオブジェクトを保存するには、次のよう"
"にします:"

msgid ""
"If you don't specify ``using``, the ``save()`` method will save into the "
"default database allocated by the routers."
msgstr ""
"もし ``using`` を指定しなければ、 ``save()`` メソッドはルーターが割り当てたデ"
"フォルトのデータベースに保存します。"

msgid "Moving an object from one database to another"
msgstr "オブジェクトを1つのデータベースからもう1つのデータベースに移動する"

msgid ""
"If you've saved an instance to one database, it might be tempting to use "
"``save(using=...)`` as a way to migrate the instance to a new database. "
"However, if you don't take appropriate steps, this could have some "
"unexpected consequences."
msgstr ""
"あるデータベースにインスタンスを保存した場合、インスタンスを新しいデータベー"
"スにマイグレーションする方法として ``save(using=...)`` を使いたくなるかもしれ"
"ません。しかし、適切な手順を踏まないと、これは予期せぬ結果を招く可能性があり"
"ます。"

msgid "Consider the following example:"
msgstr "以下の例を考えてみてください。"

msgid ""
"In statement 1, a new ``Person`` object is saved to the ``first`` database. "
"At this time, ``p`` doesn't have a primary key, so Django issues an SQL "
"``INSERT`` statement. This creates a primary key, and Django assigns that "
"primary key to ``p``."
msgstr ""
"statement 1 では、新しい ``Person`` オブジェクトが ``first`` データベースに保"
"存されます。この時、 ``p`` には主キーがないので、 Django は SQL の "
"``INSERT`` 文を発行します。これにより主キーが作成され、 Django はその主キー"
"を ``p`` に割り当てます。"

msgid ""
"When the save occurs in statement 2, ``p`` already has a primary key value, "
"and Django will attempt to use that primary key on the new database. If the "
"primary key value isn't in use in the ``second`` database, then you won't "
"have any problems -- the object will be copied to the new database."
msgstr ""
"statement 2 で保存が行われるとき、 ``p`` はすでに主キーの値を持っていて、 "
"Django は新しいデータベースでその主キーを使おうとします。もし主キーの値が "
"``second`` のデータベースで使われていなければ、何の問題もありません -- オブ"
"ジェクトは新しいデータベースにコピーされます。"

msgid ""
"However, if the primary key of ``p`` is already in use on the ``second`` "
"database, the existing object in the ``second`` database will be overridden "
"when ``p`` is saved."
msgstr ""
"しかし、 ``p`` の主キーがすでに ``second`` データベースで使用されている場合"
"は、 ``p`` が保存されたときに ``second`` データベースの既存のオブジェクトが上"
"書きされます。"

msgid ""
"You can avoid this in two ways. First, you can clear the primary key of the "
"instance. If an object has no primary key, Django will treat it as a new "
"object, avoiding any loss of data on the ``second`` database:"
msgstr ""
"これを回避するには2つの方法があります。1つ目の方法は、インスタンスの主キーを"
"クリアすることです。オブジェクトに主キーがない場合、 Django はそのオブジェク"
"トを新しいオブジェクトとして扱い、 ``second`` データベースのデータが失われる"
"のを防ぎます:"

msgid ""
"The second option is to use the ``force_insert`` option to ``save()`` to "
"ensure that Django does an SQL ``INSERT``:"
msgstr ""
"2 つ目のオプションは、 ``save()`` に ``force_insert`` オプションをつけて、 "
"Django が SQL の ``INSERT`` を行うようにすることです:"

msgid ""
"This will ensure that the person named ``Fred`` will have the same primary "
"key on both databases. If that primary key is already in use when you try to "
"save onto the ``second`` database, an error will be raised."
msgstr ""
"これにより、 ``Fred`` という人物は両方のデータベースで同じ主キーを持つことに"
"なります。もしその主キーがすでに ``second`` データベースで使用されている場"
"合、 保存しようとするとエラーが発生します。"

msgid "Selecting a database to delete from"
msgstr "削除が行われるデータベースを選択する"

msgid ""
"By default, a call to delete an existing object will be executed on the same "
"database that was used to retrieve the object in the first place:"
msgstr ""
"デフォルトでは、既存のオブジェクトを削除する呼び出しは、最初にオブジェクトを"
"取得するために使用したのと同じデータベース上で実行されます。"

msgid ""
"To specify the database from which a model will be deleted, pass a ``using`` "
"keyword argument to the ``Model.delete()`` method. This argument works just "
"like the ``using`` keyword argument to ``save()``."
msgstr ""
"モデルを削除するデータベースを指定するには、``using`` キーワード引数を "
"``Model.delete()`` メソッドに渡します。この引数は、``save()`` の ``using`` "
"キーワード引数と同じように機能します。"

msgid ""
"For example, if you're migrating a user from the ``legacy_users`` database "
"to the ``new_users`` database, you might use these commands:"
msgstr ""
"例えば、あるユーザーを ``legacy_users`` データベースから ``new_users`` データ"
"ベースにマイグレーションする場合、以下のコマンドを使用します:"

msgid "Using managers with multiple databases"
msgstr "複数のデータベースでマネージャを使う"

msgid ""
"Use the ``db_manager()`` method on managers to give managers access to a non-"
"default database."
msgstr ""
"デフォルト以外のデータベースにマネージャがアクセスできるようにするには、マ"
"ネージャの ``db_manager()`` メソッドを使用します。"

msgid ""
"For example, say you have a custom manager method that touches the database "
"-- ``User.objects.create_user()``. Because ``create_user()`` is a manager "
"method, not a ``QuerySet`` method, you can't do ``User.objects."
"using('new_users').create_user()``. (The ``create_user()`` method is only "
"available on ``User.objects``, the manager, not on ``QuerySet`` objects "
"derived from the manager.) The solution is to use ``db_manager()``, like "
"this::"
msgstr ""
"例えば、データベースにアクセスするカスタムマネージャメソッド ``User.objects."
"create_user()`` があるとします。 ``create_user()`` はマネージャメソッドであ"
"り、 ``QuerySet`` メソッドではないので、 ``User.objects.using('new_users')."
"create_user()`` は実行できません。 (``create_user()`` メソッドはマネージャで"
"ある ``User.objects`` でのみ使用可能で、マネージャから派生した ``QuerySet`` "
"オブジェクトでは使用できません)。解決策は、次のように ``db_manager()`` を使う"
"ことです:"

msgid ""
"``db_manager()`` returns a copy of the manager bound to the database you "
"specify."
msgstr ""
"``db_manager()`` は指定したデータベースに結び付けられたマネージャのコピーを返"
"します。"

msgid "Using ``get_queryset()`` with multiple databases"
msgstr "複数のデータベースで ``get_queryset()`` を使う"

msgid ""
"If you're overriding ``get_queryset()`` on your manager, be sure to either "
"call the method on the parent (using ``super()``) or do the appropriate "
"handling of the ``_db`` attribute on the manager (a string containing the "
"name of the database to use)."
msgstr ""
"マネージャ上で ``get_queryset()`` をオーバーライドする場合は、親メソッドを呼"
"び出す (``super()`` を使用する) か、マネージャの ``_db`` 属性 (使用するデータ"
"ベースの名前を含む文字列) を適切に処理するようにしてください。"

msgid ""
"For example, if you want to return a custom ``QuerySet`` class from the "
"``get_queryset`` method, you could do this::"
msgstr ""
"例えば、カスタム ``QuerySet`` クラスを ``get_queryset`` メソッドから返したい"
"場合は、このようにします:"

msgid "Exposing multiple databases in Django's admin interface"
msgstr "Django の管理インタフェースで複数のデータベースを公開する"

msgid ""
"Django's admin doesn't have any explicit support for multiple databases. If "
"you want to provide an admin interface for a model on a database other than "
"that specified by your router chain, you'll need to write custom :class:"
"`~django.contrib.admin.ModelAdmin` classes that will direct the admin to use "
"a specific database for content."
msgstr ""
"Django の admin は複数のデータベースを明示的にサポートしていません。ルーター"
"チェーンで指定したデータベース以外のデータベース上のモデルに対して admin イン"
"タフェースを提供したい場合は、 admin が特定のデータベースをコンテンツに使うよ"
"うに指示するカスタム :class:`~django.contrib.admin.ModelAdmin` クラスを書く必"
"要があります。"

msgid ""
"``ModelAdmin`` objects have the following methods that require customization "
"for multiple-database support::"
msgstr ""
"``ModelAdmin`` オブジェクトには、複数のデータベースのサポートのためのカスタマ"
"イズが必要な以下のメソッドがあります:"

msgid ""
"The implementation provided here implements a multi-database strategy where "
"all objects of a given type are stored on a specific database (e.g., all "
"``User`` objects are in the ``other`` database). If your usage of multiple "
"databases is more complex, your ``ModelAdmin`` will need to reflect that "
"strategy."
msgstr ""
"ここで示した実装はマルチデータベース戦略を実装したもので、指定されたタイプの"
"オブジェクトはすべて特定のデータベースに保存されます (例えば、すべての "
"``User`` オブジェクトは ``other`` データベースに保存されます)。複数のデータ"
"ベースをより複雑に使用する場合は、 ``ModelAdmin`` にその戦略を反映させる必要"
"があります。"

msgid ""
":class:`~django.contrib.admin.InlineModelAdmin` objects can be handled in a "
"similar fashion. They require three customized methods::"
msgstr ""
":class:`~django.contrib.admin.InlineModelAdmin` オブジェクトも同じように扱う"
"ことができます。これらのオブジェクトには3つのカスタマイズされたメソッドが必要"
"です:"

msgid ""
"Once you've written your model admin definitions, they can be registered "
"with any ``Admin`` instance::"
msgstr "モデル管理定義を書いたら、任意の ``Admin`` インスタンスに登録できます:"

msgid ""
"This example sets up two admin sites. On the first site, the ``Author`` and "
"``Publisher`` objects are exposed; ``Publisher`` objects have a tabular "
"inline showing books published by that publisher. The second site exposes "
"just publishers, without the inlines."
msgstr ""
"この例では2つの管理サイトを設定しています。最初のサイトでは ``Author`` と "
"``Publisher`` オブジェクトが公開され、 ``Publisher`` オブジェクトにはその出版"
"社が出版した書籍を示すインラインが表形式で表示されます。2番目のサイトでは、イ"
"ンラインを使わずに出版社だけを公開しています。"

msgid "Using raw cursors with multiple databases"
msgstr "複数のデータベースで生のカーソルを使う"

msgid ""
"If you are using more than one database you can use ``django.db."
"connections`` to obtain the connection (and cursor) for a specific database. "
"``django.db.connections`` is a dictionary-like object that allows you to "
"retrieve a specific connection using its alias::"
msgstr ""
"複数のデータベースを使用している場合、 ``django.db.connections`` を使用するこ"
"とで、特定のデータベースのコネクション (とカーソル) を取得できます。 "
"``django.db.connections`` は辞書のようなオブジェクトで、次のように、エイリア"
"スを使って個別の接続を取得できます。"

msgid "Limitations of multiple databases"
msgstr "複数データベースの制約"

msgid "Cross-database relations"
msgstr "データベースをまたぐリレーション"

msgid ""
"Django doesn't currently provide any support for foreign key or many-to-many "
"relationships spanning multiple databases. If you have used a router to "
"partition models to different databases, any foreign key and many-to-many "
"relationships defined by those models must be internal to a single database."
msgstr ""
"Djangoは現在、複数のデータベースにまたがる外部キーまたは多対多の関係をサポー"
"トしていません。もしモデルを異なるデータベースに分割するためにルーターを使用"
"している場合、それらのモデルによって定義される外部キーおよび多対多の関係は、"
"単一のデータベース内部に限定されなければなりません。"

msgid ""
"This is because of referential integrity. In order to maintain a "
"relationship between two objects, Django needs to know that the primary key "
"of the related object is valid. If the primary key is stored on a separate "
"database, it's not possible to easily evaluate the validity of a primary key."
msgstr ""
"これは参照整合性のためです。2つのオブジェクト間のリレーションを維持するために"
"は、Djangoはリレーション先オブジェクトの主キーが有効であることを知る必要があ"
"ります。主キーが別のデータベースに格納されている場合、主キーが有効かどうかを"
"判断するのは容易ではありません。"

msgid ""
"If you're using Postgres, SQLite, Oracle, or MySQL with InnoDB, this is "
"enforced at the database integrity level -- database level key constraints "
"prevent the creation of relations that can't be validated."
msgstr ""
"Postgres、SQLite、Oracle、MySQLをInnoDBで使用している場合、これはデータベース"
"の整合性レベルで強制されます。データベースレベルのキー制約は、検証できないリ"
"レーションの作成を防ぎます。"

msgid ""
"However, if you're using MySQL with MyISAM tables, there is no enforced "
"referential integrity; as a result, you may be able to 'fake' cross database "
"foreign keys. However, this configuration is not officially supported by "
"Django."
msgstr ""
"しかし、MySQL で MyISAM テーブルを使用している場合、参照整合性は強制されませ"
"ん。その結果、データベースの外部キーを「偽装」できるかもしれません。しかし、"
"この設定は Django では公式にはサポートされていません。"

msgid "Behavior of contrib apps"
msgstr "contribアプリの振る舞い"

msgid ""
"Several contrib apps include models, and some apps depend on others. Since "
"cross-database relationships are impossible, this creates some restrictions "
"on how you can split these models across databases:"
msgstr ""
"いくつかのcontribアプリはモデルを含み、いくつかのアプリは他のアプリに依存して"
"います。データベースをまたいだリレーションシップは不可能であるため、データ"
"ベースをまたいでこれらのモデルを分割する方法に制限が生じます:"

msgid ""
"each one of ``contenttypes.ContentType``, ``sessions.Session`` and ``sites."
"Site`` can be stored in any database, given a suitable router."
msgstr ""
"``contenttypes.ContentType``, ``sessions.Session``, ``sites.Site`` はいずれ"
"も、適切なルーターがあれば、どのデータベースにも格納できます。"

msgid ""
"``auth`` models — ``User``, ``Group`` and ``Permission`` — are linked "
"together and linked to ``ContentType``, so they must be stored in the same "
"database as ``ContentType``."
msgstr ""
"``User`` 、``Group`` 、``Permission`` の ``auth`` モデルは ``ContentType`` と"
"リンクしているため、 ``ContentType`` と同じデータベースに保存する必要がありま"
"す。"

msgid ""
"``admin`` depends on ``auth``, so its models must be in the same database as "
"``auth``."
msgstr ""
"``admin`` は ``auth`` に依存しているので、そのモデルは ``auth`` と同じデータ"
"ベースに置く必要があります。"

msgid ""
"``flatpages`` and ``redirects`` depend on ``sites``, so their models must be "
"in the same database as ``sites``."
msgstr ""
"``flatpages`` と ``redirects`` は ``sites`` に依存しているため、それらのモデ"
"ルは ``sites`` と同じデータベースに置く必要があります。"

msgid ""
"In addition, some objects are automatically created just after :djadmin:"
"`migrate` creates a table to hold them in a database:"
msgstr ""
"さらに、下記のようないくつかのオブジェクトは :djadmin:`migrate` がデータベー"
"スにテーブルを作成した直後に自動的に作成されます:"

msgid "a default ``Site``,"
msgstr "デフォルトの ``Site``、"

msgid ""
"a ``ContentType`` for each model (including those not stored in that "
"database),"
msgstr ""
"各モデル (そのデータベースに保存されていないものも含む) の ``ContentType`` 、"

msgid ""
"the ``Permission``\\s for each model (including those not stored in that "
"database)."
msgstr ""
"各モデル（そのデータベースに保存されていないものも含む）の ``Permission`` 。"

msgid ""
"For common setups with multiple databases, it isn't useful to have these "
"objects in more than one database. Common setups include primary/replica and "
"connecting to external databases. Therefore, it's recommended to write a :"
"ref:`database router<topics-db-multi-db-routing>` that allows synchronizing "
"these three models to only one database. Use the same approach for contrib "
"and third-party apps that don't need their tables in multiple databases."
msgstr ""
"複数のデータベースを使用する通常のセットアップでは、これらのオブジェクトを複"
"数のデータベースに持つことは有益ではありません。通常のセットアップには、プラ"
"イマリ/レプリカや外部データベースへの接続などがあります。そのため、これら3つ"
"のモデルを1つのデータベースだけに同期させることができる :ref:`データベース"
"ルーター <topics-db-multi-db-routing>` を書くことを推奨します。複数のデータ"
"ベースのテーブルを必要としないcontribやサードパーティアプリにも同じアプローチ"
"を使用してください。"

msgid ""
"If you're synchronizing content types to more than one database, be aware "
"that their primary keys may not match across databases. This may result in "
"data corruption or data loss."
msgstr ""
"コンテンツ・タイプを複数のデータベースに同期する場合、データベース間でプライ"
"マリ・キーが一致しない可能性があることに注意してください。その結果、データが"
"破損したり、データが失われたりする可能性があります。"

msgid "Database access optimization"
msgstr "データベースアクセスの最適化"

msgid ""
"Django's database layer provides various ways to help developers get the "
"most out of their databases. This document gathers together links to the "
"relevant documentation, and adds various tips, organized under a number of "
"headings that outline the steps to take when attempting to optimize your "
"database usage."
msgstr ""
"Djangoのデータベース層は、開発者がデータベースを最大限活用できるように、さま"
"ざまな方法を提供しています。このドキュメントでは、データベースアクセスを最適"
"化する際にとるべき手順を、大まかにいくつかの見出しとしてまとめています。それ"
"ぞれの見出しの下に、関連するドキュメントへのリンクを集約した上で、さまざまな"
"ヒントを追加しています。"

msgid "Profile first"
msgstr "まずはプロファイルを取る"

msgid ""
"As general programming practice, this goes without saying. Find out :ref:"
"`what queries you are doing and what they are costing you <faq-see-raw-sql-"
"queries>`. Use :meth:`.QuerySet.explain` to understand how specific "
"``QuerySet``\\s are executed by your database. You may also want to use an "
"external project like django-debug-toolbar_, or a tool that monitors your "
"database directly."
msgstr ""
"一般的なプログラミング手法と同様に、これは言うまでもないことです。:ref:`どん"
"なクエリを実行し何がコストなのか <faq-see-raw-sql-queries>` を判別してくださ"
"い。:meth:`.QuerySet.explain` を使用し、データベース上で特定の ``QuerySet`` "
"がどのように実行されるかを理解してください。また、django-debug-toolbar_ と"
"いった外部のプロジェクトや、データベースを直接監視するツールを使うのもいいで"
"しょう。"

msgid ""
"Remember that you may be optimizing for speed or memory or both, depending "
"on your requirements. Sometimes optimizing for one will be detrimental to "
"the other, but sometimes they will help each other. Also, work that is done "
"by the database process might not have the same cost (to you) as the same "
"amount of work done in your Python process. It is up to you to decide what "
"your priorities are, where the balance must lie, and profile all of these as "
"required since this will depend on your application and server."
msgstr ""
"要件に従って、速度またはメモリ、およびその両方を最適化できます。片方を最適化"
"することは、もう片方に悪影響を及ぼすことがありますが、互いに助けになることも"
"あります。また、データベースプロセスによって行われる処理と Python のプロセス"
"による処理は (あなたにとって) 必ずしも同等のコストとはなりません。その優先順"
"位とバランスを決めるのはあなた自身です。そして、その設計はアプリケーションや"
"サーバーに依存するため、要求通りに設計するのもあなたの仕事です。"

msgid ""
"With everything that follows, remember to profile after every change to "
"ensure that the change is a benefit, and a big enough benefit given the "
"decrease in readability of your code. **All** of the suggestions below come "
"with the caveat that in your circumstances the general principle might not "
"apply, or might even be reversed."
msgstr ""
"以下で紹介する項目すべてにおいて、あらゆる変更の後に忘れずに分析を行い、施し"
"た変更が有益だったこと、およびその恩恵が可読性の低下を十分上回ることを確認し"
"てください。以下の **すべて** の提案において、一般的な原則があなたの状況に当"
"てはまらない可能性があること、それどころか逆効果になりかねない可能性さえある"
"ことに十分注意してください。"

msgid "Use standard DB optimization techniques"
msgstr "標準的な DB 最適化のテクニックを使う"

msgid "...including:"
msgstr "以下のようなものが上げられます:"

msgid ""
"Indexes_. This is a number one priority, *after* you have determined from "
"profiling what indexes should be added. Use :attr:`Meta.indexes <django.db."
"models.Options.indexes>` or :attr:`Field.db_index <django.db.models.Field."
"db_index>` to add these from Django. Consider adding indexes to fields that "
"you frequently query using :meth:`~django.db.models.query.QuerySet."
"filter()`, :meth:`~django.db.models.query.QuerySet.exclude()`, :meth:"
"`~django.db.models.query.QuerySet.order_by()`, etc. as indexes may help to "
"speed up lookups. Note that determining the best indexes is a complex "
"database-dependent topic that will depend on your particular application. "
"The overhead of maintaining an index may outweigh any gains in query speed."
msgstr ""
"Indexes_. プロファイリングでどのようなインデックスを追加すべきかを決定した *"
"後に* 、最優先事項として行うべきことです。Djangoからインデックスを追加するに"
"は、 :attr:`Meta.indexes <django.db.models.Options.indexes>` や :attr:`Field."
"db_index <django.db.models.Field.db_index>` を使用します。 :meth:`~django.db."
"models.query.QuerySet.filter()` 、 :meth:`~django.db.models.query.QuerySet."
"exclude()` 、 :meth:`~django.db.models.query.QuerySet.order_by()` などで頻繁"
"に参照するフィールドにインデックスを追加することで、参照を高速化させることが"
"できるかもしれません。ただし、最適なインデックスの決定は、各個のアプリケー"
"ションのデータベースに依存する複雑な問題であることに留意してください。イン"
"デックスを維持するためのオーバーヘッドは、クエリの高速化によるメリットよりも"
"大きいかもしれません。"

msgid "Appropriate use of field types."
msgstr "フィールドタイプの適切な使用。"

msgid ""
"We will assume you have done the things listed above. The rest of this "
"document focuses on how to use Django in such a way that you are not doing "
"unnecessary work. This document also does not address other optimization "
"techniques that apply to all expensive operations, such as :doc:`general "
"purpose caching </topics/cache>`."
msgstr ""
"以降は、上記の明確な対処は実行済みだという前提で進めていきます。このドキュメ"
"ントの残りの部分では、不要な作業をしなくて済むように、Django をどのように使え"
"ばいいかを中心に説明します。またこのドキュメントでは、:doc:`汎用キャッシュ </"
"topics/cache>` のような高コストな最適化手法については説明しません。"

msgid "Understand ``QuerySet``\\s"
msgstr "``QuerySet`` を理解する"

msgid ""
"Understanding :doc:`QuerySets </ref/models/querysets>` is vital to getting "
"good performance with simple code. In particular:"
msgstr ""
":doc:`QuerySet </ref/models/querysets>` を理解することは、シンプルなコードで"
"パフォーマンスを上げるために極めて重要です。特に:"

msgid "Understand ``QuerySet`` evaluation"
msgstr "``QuerySet`` の評価を理解する"

msgid "To avoid performance problems, it is important to understand:"
msgstr "パフォーマンスの問題を回避するには、以下を理解することが重要です:"

msgid "that :ref:`QuerySets are lazy <querysets-are-lazy>`."
msgstr ":ref:`QuerySet は遅延評価される <querysets-are-lazy>` こと。"

msgid "when :ref:`they are evaluated <when-querysets-are-evaluated>`."
msgstr ":ref:`いつQuerySet が評価されるのか <when-querysets-are-evaluated>` 。"

msgid "how :ref:`the data is held in memory <caching-and-querysets>`."
msgstr ""
"どのように :ref:`データがメモリ上に保持されるか<caching-and-querysets>`。"

msgid "Understand cached attributes"
msgstr "キャッシュされる属性を理解する"

msgid ""
"As well as caching of the whole ``QuerySet``, there is caching of the result "
"of attributes on ORM objects. In general, attributes that are not callable "
"will be cached. For example, assuming the :ref:`example blog models "
"<queryset-model-example>`:"
msgstr ""
"クエリセット全体のキャッシュだけでなく、ORM オブジェクトの属性の結果のキャッ"
"シュもあります。通常、呼び出し可能でない属性はキャッシュされます。例えば、:"
"ref:`例のブログモデル <queryset-model-example>` においても:"

msgid "But in general, callable attributes cause DB lookups every time:"
msgstr ""
"しかし、一般に、呼び出し可能な属性は毎回DBルックアップを引き起こします:"

msgid ""
"Be careful when reading template code - the template system does not allow "
"use of parentheses, but will call callables automatically, hiding the above "
"distinction."
msgstr ""
"テンプレート上のコードを読む際には注意が必要です。テンプレートシステムは括弧"
"を許容していませんが、呼び出し可能なオブジェクトは自動的に呼び出されるので、"
"上記の区別が隠れてしまいます。"

msgid ""
"Be careful with your own custom properties - it is up to you to implement "
"caching when required, for example using the :class:`~django.utils."
"functional.cached_property` decorator."
msgstr ""
"独自のプロパティにも注意が必要です - 必要なときにキャッシングを実装するのはあ"
"なた次第です。たとえば :class:`~django.utils.functional.cached_property` デコ"
"レータを使用します。"

msgid "Use the ``with`` template tag"
msgstr "``with`` テンプレートタグを使用する"

msgid ""
"To make use of the caching behavior of ``QuerySet``, you may need to use "
"the :ttag:`with` template tag."
msgstr ""
"``QuerySet`` のキャッシュ処理を活用するため、:ttag:`with` テンプレートタグの"
"使用が推奨されます。"

msgid "Use ``iterator()``"
msgstr "``iterator()`` を使用する"

msgid ""
"When you have a lot of objects, the caching behavior of the ``QuerySet`` can "
"cause a large amount of memory to be used. In this case, :meth:`~django.db."
"models.query.QuerySet.iterator()` may help."
msgstr ""
"多くのオブジェクトを扱う際には、``QuerySet`` のキャッシュ動作に多くのメモリが"
"使われる可能性があります。この場合、:meth:`~django.db.models.query.QuerySet."
"iterator()` が有用です。"

msgid "Use ``explain()``"
msgstr "``explain()`` を使用する"

msgid ""
":meth:`.QuerySet.explain` gives you detailed information about how the "
"database executes a query, including indexes and joins that are used. These "
"details may help you find queries that could be rewritten more efficiently, "
"or identify indexes that could be added to improve performance."
msgstr ""
":meth:`.QuerySet.explain` を使うと、使用されているインデックスや結合など、"
"データベースがクエリをどのように実行しているのか、詳細な情報を得られます。こ"
"の詳細情報は、より効率的になるようにクエリを書き換えたり、パフォーマンスを向"
"上させるために追加できるインデックスを特定するのに役立ちます。"

msgid "Do database work in the database rather than in Python"
msgstr "データベースの仕事を Python ではなくデータベースに行わせる"

msgid "For instance:"
msgstr "例えば:"

msgid ""
"At the most basic level, use :ref:`filter and exclude <queryset-api>` to do "
"filtering in the database."
msgstr ""
"最も基本的なレベルでは、:ref:`filter や exclude <queryset-api>` を使ってデー"
"タベース内でフィルタリングを行います。"

msgid ""
"Use :class:`F expressions <django.db.models.F>` to filter based on other "
"fields within the same model."
msgstr ""
":class:`F 式 <django.db.models.F>` を使い、同一モデル内で他のフィールドに基づ"
"くフィルタリングを行います。"

msgid ""
"Use :doc:`annotate to do aggregation in the database </topics/db/"
"aggregation>`."
msgstr ""
":doc:`データベース内の集計をするためアノテーション </topics/db/aggregation>` "
"を使います。"

msgid "If these aren't enough to generate the SQL you need:"
msgstr "必要な SQL を生成するのに不十分な場合は:"

msgid "Use ``RawSQL``"
msgstr "``RawSQL`` を使用する"

msgid ""
"A less portable but more powerful method is the :class:`~django.db.models."
"expressions.RawSQL` expression, which allows some SQL to be explicitly added "
"to the query. If that still isn't powerful enough:"
msgstr ""
"保守性は高くありませんが、より強力な方法は :class:`~django.db.models."
"expressions.RawSQL` 表現です。これにより、SQL を明示的にクエリに追加できま"
"す。これでもまだ不十分な場合は:"

msgid "Use raw SQL"
msgstr "素の SQL を使用する"

msgid ""
"Write your own :doc:`custom SQL to retrieve data or populate models </topics/"
"db/sql>`. Use ``django.db.connection.queries`` to find out what Django is "
"writing for you and start from there."
msgstr ""
":doc:`モデルの取り出しおよび書き込みをするためのカスタム SQL </topics/db/"
"sql>` を記述します。``django.db.connection.queries`` を使い、Django があなた"
"のために何を書いているのかを理解して、そこから始めましょう。"

msgid "Retrieve individual objects using a unique, indexed column"
msgstr "ユニークかつインデックス済みの列を使用して個別のオブジェクトを取得する"

msgid ""
"There are two reasons to use a column with :attr:`~django.db.models.Field."
"unique` or :attr:`~django.db.models.Field.db_index` when using :meth:"
"`~django.db.models.query.QuerySet.get` to retrieve individual objects. "
"First, the query will be quicker because of the underlying database index. "
"Also, the query could run much slower if multiple objects match the lookup; "
"having a unique constraint on the column guarantees this will never happen."
msgstr ""
"個々のオブジェクトを取得するために :meth:`~django.db.models.query.QuerySet."
"get` を使用する際に、:attr:`~django.db.models.Field.unique` や :attr:"
"`~django.db.models.Field.db_index` を持つカラムを使用する理由は2つあります。"
"まず、データベースインデックスによりクエリが高速になります。また、ルックアッ"
"プに一致するオブジェクトが複数ある場合、クエリは非常に遅くなる可能性がありま"
"す。カラムに一意の制約を持つことで、これが決して起こらないことが保証されま"
"す。"

msgid "So using the :ref:`example blog models <queryset-model-example>`:"
msgstr "例えば、:ref:`例のブログモデル <queryset-model-example>` を使うと:"

msgid "will be quicker than:"
msgstr "上記は以下よりも高速です:"

msgid ""
"because ``id`` is indexed by the database and is guaranteed to be unique."
msgstr ""
"これは、``id`` がデータベースによってインデックス化されていて、ユニークだと保"
"証されているからです。"

msgid "Doing the following is potentially quite slow:"
msgstr "以下のようにすると非常に遅くなる恐れがあります:"

msgid ""
"First of all, ``headline`` is not indexed, which will make the underlying "
"database fetch slower."
msgstr ""
"まず第一に、``headline`` はインデックス化されておらず、データベースのデータ取"
"り出しを遅くします。"

msgid ""
"Second, the lookup doesn't guarantee that only one object will be returned. "
"If the query matches more than one object, it will retrieve and transfer all "
"of them from the database. This penalty could be substantial if hundreds or "
"thousands of records are returned. The penalty will be compounded if the "
"database lives on a separate server, where network overhead and latency also "
"play a factor."
msgstr ""
"そして第二に、このルックアップでは単一のオブジェクトが返されることは保証され"
"ません。クエリが 1 つ以上のオブジェクトと一致する場合、すべてのオブジェクトを"
"データベースから取り出して転送します。この余分な負荷は、100 とか 1000 といっ"
"た多量のレコードが返されるときには相当な量になります。データベースが複数の"
"サーバーによって構成される場合、ネットワークのオーバーヘッドと待ち時間が発生"
"するため、この負荷はさらに大きくなります。"

msgid "Retrieve everything at once if you know you will need it"
msgstr "必要なものが分かっているときは一度にすべてを取り出す"

msgid ""
"Hitting the database multiple times for different parts of a single 'set' of "
"data that you will need all parts of is, in general, less efficient than "
"retrieving it all in one query. This is particularly important if you have a "
"query that is executed in a loop, and could therefore end up doing many "
"database queries, when only one was needed. So:"
msgstr ""
"すべての部分を必要とする単一のデータセットの異なる部分に対してデータベースを"
"何度もヒットするのは、一般的に、1 つのクエリですべてを取得するよりも非効率で"
"す。 これは、1 つのクエリだけが必要なときにループ内でクエリを実行し、その結果"
"何度もデータベースクエリを実行することになってしまう場合に、特に重要となりま"
"す。そこで:"

msgid "Use ``QuerySet.select_related()`` and ``prefetch_related()``"
msgstr "``QuerySet.select_related()`` や ``prefetch_related()`` を使用する"

msgid ""
"Understand :meth:`~django.db.models.query.QuerySet.select_related` and :meth:"
"`~django.db.models.query.QuerySet.prefetch_related` thoroughly, and use them:"
msgstr ""
":meth:`~django.db.models.query.QuerySet.select_related` と :meth:`~django.db."
"models.query.QuerySet.prefetch_related` を徹底的に理解し、使用してください:"

msgid ""
"in :doc:`managers and default managers </topics/db/managers>` where "
"appropriate. Be aware when your manager is and is not used; sometimes this "
"is tricky so don't make assumptions."
msgstr ""
"必要に応じて、:doc:`マネージャとデフォルトマネージャ </topics/db/managers>` "
"の中で。マネージャが使用されているときと使用されていないときに注意してくださ"
"い; 誤りやすい部分なので、思い込みのないようにしてください。"

msgid ""
"in view code or other layers, possibly making use of :func:`~django.db."
"models.prefetch_related_objects` where needed."
msgstr ""
"ビューのコードや他のレイヤーの中で。必要に応じて :func:`~django.db.models."
"prefetch_related_objects` が利用できます。"

msgid "Don't retrieve things you don't need"
msgstr "必要ないものを取り出さない"

msgid "Use ``QuerySet.values()`` and ``values_list()``"
msgstr "``QuerySet.values()`` や ``values_list()`` を使用する"

msgid ""
"When you only want a ``dict`` or ``list`` of values, and don't need ORM "
"model objects, make appropriate usage of :meth:`~django.db.models.query."
"QuerySet.values()`. These can be useful for replacing model objects in "
"template code - as long as the dicts you supply have the same attributes as "
"those used in the template, you are fine."
msgstr ""
"単に値の ``dict`` や ``list`` がほしいだけで ORM モデルオブジェクトが必要ない"
"ときは、:meth:`~django.db.models.query.QuerySet.values()` を適切に使用してく"
"ださい。テンプレートのコード内で、モデルオブジェクトを置き換えるのに役立ちま"
"す - 辞書がテンプレートで使われているものと同じ属性を持っている限り問題ありま"
"せん。"

msgid "Use ``QuerySet.defer()`` and ``only()``"
msgstr "``QuerySet.defer()`` や ``only()`` を使用する"

msgid ""
"Use :meth:`~django.db.models.query.QuerySet.defer()` and :meth:`~django.db."
"models.query.QuerySet.only()` if there are database columns you know that "
"you won't need (or won't need in most cases) to avoid loading them. Note "
"that if you *do* use them, the ORM will have to go and get them in a "
"separate query, making this a pessimization if you use it inappropriately."
msgstr ""
"データベースに不要な(もしくはほとんど必要とされない)列がある場合は、それらを"
"読み込むことを防ぐために、 :meth:`~django.db.models.query.QuerySet.defer()` "
"や :meth:`~django.db.models.query.QuerySet.only()` を使用します。もし除外した"
"列を *使用する* 場合、ORMは異なるクエリでそれらを取得する必要があるため、不適"
"切な使用はパフォーマンスの低下を招くことに注意してください。"

msgid ""
"Don't be too aggressive in deferring fields without profiling as the "
"database has to read most of the non-text, non-``VARCHAR`` data from the "
"disk for a single row in the results, even if it ends up only using a few "
"columns. The ``defer()`` and ``only()`` methods are most useful when you can "
"avoid loading a lot of text data or for fields that might take a lot of "
"processing to convert back to Python. As always, profile first, then "
"optimize."
msgstr ""
"プロファイリングなしに、あまり積極的にフィールドの遅延を行わないようにしてく"
"ださい。たとえ、いくつかのカラムしか使用しないことになったとしても、データ"
"ベースは結果の1行のために、非テキスト、非 ``VARCHAR`` データのほとんどをディ"
"スクから読み込まなければならないからです。 ``defer()`` と ``only()`` メソッド"
"は、多くのテキストデータの読み込みを避けられる場合や、Python に戻すのに多くの"
"処理が必要なフィールドに対して最も有効なメソッドです。いつものように、まずは"
"プロファイルを作成し、次に最適化を行ってください。"

msgid "Use ``QuerySet.contains(obj)``"
msgstr "``QuerySet.contains(obj)`` を使用する"

msgid ""
"...if you only want to find out if ``obj`` is in the queryset, rather than "
"``if obj in queryset``."
msgstr ""
"...単に ``obj`` がクエリセットに存在するかどうかを知りたいだけなら、 ``if "
"obj in queryset`` よりも適切です。"

msgid "Use ``QuerySet.count()``"
msgstr "``QuerySet.count()`` を使用する"

msgid "...if you only want the count, rather than doing ``len(queryset)``."
msgstr "...単に数を知りたいだけなら、 ``len(queryset)`` よりも適切です。"

msgid "Use ``QuerySet.exists()``"
msgstr "``QuerySet.exists()`` を使用する"

msgid ""
"...if you only want to find out if at least one result exists, rather than "
"``if queryset``."
msgstr ""
"...単に1つ以上の結果が存在するかどうかを知りたいだけなら、 ``if queryset`` よ"
"りも適切です。"

msgid "But:"
msgstr "しかし:"

msgid "Don't overuse ``contains()``, ``count()``, and ``exists()``"
msgstr "``contains()`` 、 ``count()`` 、 ``exists()`` を使いすぎない"

msgid ""
"If you are going to need other data from the QuerySet, evaluate it "
"immediately."
msgstr ""
"もしクエリセットの他のデータが必要になったときは、すぐに評価を行います。"

msgid ""
"For example, assuming a ``Group`` model that has a many-to-many relation to "
"``User``, the following code is optimal::"
msgstr ""
"例えば、 ``User`` と多対多の関連をもつ ``Group`` モデルを考えたとき、以下の"
"コードが最適です::"

msgid "It is optimal because:"
msgstr "最適である理由:"

msgid ""
"Since QuerySets are lazy, this does no database queries if "
"``display_group_members`` is ``False``."
msgstr ""
"クエリセットは遅延評価されるので、 ``display_group_members`` が ``False`` の"
"場合、データベースクエリは発行されない"

msgid ""
"Storing ``group.members.all()`` in the ``members`` variable allows its "
"result cache to be reused."
msgstr ""
"``members`` 変数に ``group.members.all()`` を格納することで、クエリ結果の"
"キャッシュを再利用できる。"

msgid ""
"The line ``if members:`` causes ``QuerySet.__bool__()`` to be called, which "
"causes the ``group.members.all()`` query to be run on the database. If there "
"aren't any results, it will return ``False``, otherwise ``True``."
msgstr ""
"``if members:`` の行は ``QuerySet.__bool__()`` を呼び出すことになり、これは"
"データベースで ``group.members.all()`` のクエリが処理されることになる。もし結"
"果が得られない場合、 ``False`` を返され、そうでない場合は ``True`` が返され"
"る。"

msgid ""
"The line ``if current_user in members:`` checks if the user is in the result "
"cache, so no additional database queries are issued."
msgstr ""
"``if current_user in members:`` の行は、結果のキャッシュにユーザーが含まれる"
"かどうかを確認するので、新たなデータベースクエリは発行されない。"

msgid ""
"The use of ``len(members)`` calls ``QuerySet.__len__()``, reusing the result "
"cache, so again, no database queries are issued."
msgstr ""
"``len(members)`` を使用することで ``QuerySet.__len__()`` が呼び出される。この"
"とき、結果のキャッシュが再利用されるので、新たなデータベースクエリは発行され"
"ない。"

msgid "The ``for member`` loop iterates over the result cache."
msgstr "``for member`` は結果のキャッシュを繰り返し処理する。"

msgid ""
"In total, this code does either one or zero database queries. The only "
"deliberate optimization performed is using the ``members`` variable. Using "
"``QuerySet.exists()`` for the ``if``, ``QuerySet.contains()`` for the "
"``in``, or ``QuerySet.count()`` for the count would each cause additional "
"queries."
msgstr ""
"まとめると、このコードで発行されるデータベースクエリは0個または1個です。意図"
"的なクエリの最適化は ``members`` 変数の使用のみです。 ``if`` に対して "
"``QuerySet.exists()`` を、 ``in`` に対して ``QuerySet.contains()`` を、カウン"
"トに ``QuerySet.count()`` を使うことで、それぞれに追加のクエリが発生します。"

msgid "Use ``QuerySet.update()`` and ``delete()``"
msgstr "``QuerySet.update()`` や ``delete()`` を使用する"

msgid ""
"Rather than retrieve a load of objects, set some values, and save them "
"individual, use a bulk SQL UPDATE statement, via :ref:`QuerySet.update() "
"<topics-db-queries-update>`. Similarly, do :ref:`bulk deletes <topics-db-"
"queries-delete>` where possible."
msgstr ""
"複数のオブジェクトを読み込んで値を設定し、それらを個別に保存するのではなく、:"
"ref:`QuerySet.update() <topics-db-queries-update>` を用いてSQLの一括UPDATE文"
"を使用してください。同様に、可能であれば :ref:`一括削除 <topics-db-queries-"
"delete>` を使用してください。"

msgid ""
"Note, however, that these bulk update methods cannot call the ``save()`` or "
"``delete()`` methods of individual instances, which means that any custom "
"behavior you have added for these methods will not be executed, including "
"anything driven from the normal database object :doc:`signals </ref/"
"signals>`."
msgstr ""
"ただし、これらの一括更新メソッドは、個々のインスタンスの ``save()`` や "
"``delete()`` メソッドを呼び出すことはできないので、通常のデータベースオブジェ"
"クト :doc:`シグナル </ref/signals>` に由来するものを含め、これらのメソッドに"
"追加した独自の処理は実行されないことに注意してください。"

msgid "Use foreign key values directly"
msgstr "外部キーの値を直接使用する"

msgid ""
"If you only need a foreign key value, use the foreign key value that is "
"already on the object you've got, rather than getting the whole related "
"object and taking its primary key. i.e. do::"
msgstr ""
"外部キーの値だけが必要な場合は、関連するオブジェクト全体を取得してその主キー"
"を取るのではなく、既に持っているオブジェクトにある外部キーの値を使います。つ"
"まり、次のようにします::"

msgid "instead of::"
msgstr "代わりに、次のようにします::"

msgid "Don't order results if you don't care"
msgstr "気にならないなら結果を並べ替えない"

msgid ""
"Ordering is not free; each field to order by is an operation the database "
"must perform. If a model has a default ordering (:attr:`Meta.ordering "
"<django.db.models.Options.ordering>`) and you don't need it, remove it on a "
"``QuerySet`` by calling :meth:`~django.db.models.query.QuerySet.order_by()` "
"with no parameters."
msgstr ""
"ソートには計算コストがかかります。データベースはソートする各フィールドに対し"
"て操作を行わなければなりません。モデルにデフォルトのソート順 (:attr:`Meta."
"ordering <django.db.models.Options.ordering>`) があり、それが不要な場合は、パ"
"ラメータなしで :meth:`~django.db.models.query.QuerySet.order_by()` を呼び出す"
"ことで ``QuerySet`` からそれを削除します。"

msgid ""
"Adding an index to your database may help to improve ordering performance."
msgstr ""
"データベースにインデックスを追加すると、並べ替えのパフォーマンスが向上する可"
"能性があります。"

msgid "Use bulk methods"
msgstr "一括メソッドを使用する"

msgid "Use bulk methods to reduce the number of SQL statements."
msgstr "SQL文の数を減らすために一括（bulk）メソッドを使用する"

msgid "Create in bulk"
msgstr "一括で作成する"

msgid ""
"When creating objects, where possible, use the :meth:`~django.db.models."
"query.QuerySet.bulk_create()` method to reduce the number of SQL queries. "
"For example::"
msgstr ""
"オブジェクトを作成するとき、可能であれば :meth:`~django.db.models.query."
"QuerySet.bulk_create()` を呼び出し、SQL文の数を減らしてください。例えば::"

msgid "...is preferable to::"
msgstr "...これは下記よりも適切です:"

msgid ""
"Note that there are a number of :meth:`caveats to this method <django.db."
"models.query.QuerySet.bulk_create>`, so make sure it's appropriate for your "
"use case."
msgstr ""
":meth:`このメソッド <django.db.models.query.QuerySet.bulk_create>` には多くの"
"注意事項があるので、自分のユースケースに適切であることを確認してください。"

msgid "Update in bulk"
msgstr "一括で更新する"

msgid ""
"When updating objects, where possible, use the :meth:`~django.db.models."
"query.QuerySet.bulk_update()` method to reduce the number of SQL queries. "
"Given a list or queryset of objects::"
msgstr ""
"オブジェクトを更新するとき、可能であれば :meth:`~django.db.models.query."
"QuerySet.bulk_create()` を呼び出し、SQL文の数を減らしてください。次のようなオ"
"ブジェクトのリストまたはクエリセットを考えます::"

msgid "The following example::"
msgstr "以下のような例を考えます::"

msgid ""
"Note that there are a number of :meth:`caveats to this method <django.db."
"models.query.QuerySet.bulk_update>`, so make sure it's appropriate for your "
"use case."
msgstr ""
":meth:`このメソッド <django.db.models.query.QuerySet.bulk_update>` には多くの"
"注意事項があるので、自分のユースケースに適切であることを確認してください。"

msgid "Insert in bulk"
msgstr "一括で挿入する"

msgid ""
"When inserting objects into :class:`ManyToManyFields <django.db.models."
"ManyToManyField>`, use :meth:`~django.db.models.fields.related."
"RelatedManager.add` with multiple objects to reduce the number of SQL "
"queries. For example::"
msgstr ""
":class:`ManyToManyFields <django.db.models.ManyToManyField>` にオブジェクトを"
"追加するとき、可能であれば :meth:`~django.db.models.fields.related."
"RelatedManager.add` を呼び出し、SQL文の数を減らしてください。例えば::"

msgid "...where ``Bands`` and ``Artists`` have a many-to-many relationship."
msgstr "... ここで、 ``Bands`` と ``Artists`` は多対多の関係です。"

msgid ""
"When inserting different pairs of objects into :class:`~django.db.models."
"ManyToManyField` or when the custom :attr:`~django.db.models.ManyToManyField."
"through` table is defined, use :meth:`~django.db.models.query.QuerySet."
"bulk_create()` method to reduce the number of SQL queries. For example::"
msgstr ""
":class:`~django.db.models.ManyToManyField` に異なるオブジェクトのペアを挿入す"
"る場合、またはカスタムの :attr:`~django.db.models.ManyToManyField.through` "
"テーブルが定義されている場合は、SQLクエリの数を減らすために :meth:`~django."
"db.models.query.QuerySet.bulk_create()` メソッドを使用します。例えば以下のよ"
"うにします："

msgid ""
"...where ``Pizza`` and ``Topping`` have a many-to-many relationship. Note "
"that there are a number of :meth:`caveats to this method <django.db.models."
"query.QuerySet.bulk_create>`, so make sure it's appropriate for your use "
"case."
msgstr ""
"ここで、 ``Pizza`` と ``Topping`` は多対多の関連を持っています。:meth:`このメ"
"ソッド <django.db.models.query.QuerySet.bulk_create>` には多くの注意事項があ"
"るので、自分のユースケースに適切であることを確認してください。"

msgid "Remove in bulk"
msgstr "一括で削除する"

msgid ""
"When removing objects from :class:`ManyToManyFields <django.db.models."
"ManyToManyField>`, use :meth:`~django.db.models.fields.related."
"RelatedManager.remove` with multiple objects to reduce the number of SQL "
"queries. For example::"
msgstr ""
":class:`ManyToManyFields <django.db.models.ManyToManyField>` からオブジェクト"
"を取り除くとき、可能であれば :meth:`~django.db.models.fields.related."
"RelatedManager.remove` を呼び出し、SQL文の数を減らしてください。例えば:"

msgid ""
"When removing different pairs of objects from :class:`ManyToManyFields "
"<django.db.models.ManyToManyField>`, use :meth:`~django.db.models.query."
"QuerySet.delete` on a :class:`~django.db.models.Q` expression with multiple :"
"attr:`~django.db.models.ManyToManyField.through`  model instances to reduce "
"the number of SQL queries. For example::"
msgstr ""
":class:`ManyToManyFields <django.db.models.ManyToManyField>` から異なるペアの"
"オブジェクトを取り除くとき、複数の :attr:`~django.db.models.ManyToManyField."
"through` モデルインスタンスと :class:`~django.db.models.Q` 式を用いて、 :"
"meth:`~django.db.models.query.QuerySet.delete` を呼び出し、SQL文の数を減らし"
"てください。例えば::"

msgid "...where ``Pizza`` and ``Topping`` have a many-to-many relationship."
msgstr "... ここで、 ``Pizza`` と ``Topping`` は多対多の関係です。"

msgid "Making queries"
msgstr "クエリを作成する"

msgid ""
"Once you've created your :doc:`data models </topics/db/models>`, Django "
"automatically gives you a database-abstraction API that lets you create, "
"retrieve, update and delete objects. This document explains how to use this "
"API. Refer to the :doc:`data model reference </ref/models/index>` for full "
"details of all the various model lookup options."
msgstr ""
"一度 :doc:`データモデル </topics/db/models>` を作成すれば、Django はデータオ"
"ブジェクトの作成、取得、更新および削除を行えるようにデータベースを抽象化した "
"API を自動的に提供します。本ドキュメントではこの API をどのように用いるかを説"
"明します。多様なモデル探索オプション全てに関する詳細については :doc:`データモ"
"デルの項目 </ref/models/index>` を参照ください。"

msgid ""
"Throughout this guide (and in the reference), we'll refer to the following "
"models, which comprise a blog application:"
msgstr ""
"本項( および参照する文章 )では、以下に定義されたブログアプリケーションを構成"
"するモデル定義を利用します:"

msgid "Creating objects"
msgstr "オブジェクトを作成する"

msgid ""
"To represent database-table data in Python objects, Django uses an intuitive "
"system: A model class represents a database table, and an instance of that "
"class represents a particular record in the database table."
msgstr ""
"データベースのテーブル上のデータを Python オブジェクトに対応付けるため、 "
"Django は直観的なシステムを利用しています: 1 つのモデルクラスが 1 つのデータ"
"ベーステーブルに対応し、そのモデルクラスの 1 インスタンスが対応するデータベー"
"ステーブルの特定のレコードに対応します。"

msgid ""
"To create an object, instantiate it using keyword arguments to the model "
"class, then call :meth:`~django.db.models.Model.save` to save it to the "
"database."
msgstr ""
"オブジェクトを生成するためには、作成するモデルのクラスにキーワード引数を渡し"
"てインスタンス化し、そのデータをデータベースに保存するために :meth:`~django."
"db.models.Model.save` を呼び出します。"

msgid ""
"Assuming models live in a file ``mysite/blog/models.py``, here's an example:"
msgstr "モデルが ``mysite/blog/models.py`` ファイルにある場合の例です:"

msgid ""
"This performs an ``INSERT`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call :meth:`~django.db.models.Model."
"save`."
msgstr ""
"この例では内部で ``INSERT`` SQL 文が処理されます。明示的に :meth:`~django.db."
"models.Model.save` を呼ぶまで Django はデータベースを操作しません。"

msgid "The :meth:`~django.db.models.Model.save` method has no return value."
msgstr ":meth:`~django.db.models.Model.save` メソッドは値を返しません。"

msgid ""
":meth:`~django.db.models.Model.save` takes a number of advanced options not "
"described here. See the documentation for :meth:`~django.db.models.Model."
"save` for complete details."
msgstr ""
":meth:`~django.db.models.Model.save` はここには記述されていない多数の高度なオ"
"プションを持ちます。詳細については :meth:`~django.db.models.Model.save` の項"
"目を参照してください。"

msgid ""
"To create and save an object in a single step, use the :meth:`~django.db."
"models.query.QuerySet.create()` method."
msgstr ""
"オブジェクトの作成と保存を一つの処理で行うには、 :meth:`~django.db.models."
"query.QuerySet.create()` メソッドを利用してください。"

msgid "Saving changes to objects"
msgstr "オブジェクトに対する変更を保存する"

msgid ""
"To save changes to an object that's already in the database, use :meth:"
"`~django.db.models.Model.save`."
msgstr ""
"既にデータベース上に存在する 1 つのオブジェクトに対する変更を保存するには、 :"
"meth:`~django.db.models.Model.save` を利用します。"

msgid ""
"Given a ``Blog`` instance ``b5`` that has already been saved to the "
"database, this example changes its name and updates its record in the "
"database:"
msgstr ""
"すでにデータベースに保存されている ``Blog`` インスタンス ``b5`` がある場合、"
"この例ではその名前を変更し、データベース内のレコードを更新します:"

msgid ""
"This performs an ``UPDATE`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call :meth:`~django.db.models.Model."
"save`."
msgstr ""
"この例では内部で ``UPDATE`` SQL 文が処理されます。明示的に :meth:`~django.db."
"models.Model.save` が呼ばれるまで Django はデータベースを操作しません。"

msgid "Saving ``ForeignKey`` and ``ManyToManyField`` fields"
msgstr "``ForeignKey`` と ``ManyToManyField`` フィールドを扱う"

msgid ""
"Updating a :class:`~django.db.models.ForeignKey` field works exactly the "
"same way as saving a normal field -- assign an object of the right type to "
"the field in question. This example updates the ``blog`` attribute of an "
"``Entry`` instance ``entry``, assuming appropriate instances of ``Entry`` "
"and ``Blog`` are already saved to the database (so we can retrieve them "
"below):"
msgstr ""
":class:`~django.db.models.ForeignKey` フィールドを更新する方法は、通常の"
"フィールドを保存するのと全く同じです ― 該当のフィールドに適切なタイプのオブ"
"ジェクトを割り当てます。以下の例では、 ``Entry`` インスタンス ``entry`` の "
"``blog`` 属性を更新しています。ここでは、 ``Entry`` と ``Blog`` の適切なイン"
"スタンスが既にデータベースに保存されていると仮定しています（したがって、以下"
"でそれらを取得できます）:"

msgid ""
"Updating a :class:`~django.db.models.ManyToManyField` works a little "
"differently -- use the :meth:`~django.db.models.fields.related."
"RelatedManager.add` method on the field to add a record to the relation. "
"This example adds the ``Author`` instance ``joe`` to the ``entry`` object:"
msgstr ""
":class:`~django.db.models.ManyToManyField` を更新する方法は少し異なります。関"
"連するフィールド上の :meth:`~django.db.models.fields.related.RelatedManager."
"add` メソッドを使用して、リレーションにレコードを追加します。以下の例では、 "
"``Author`` インスタンス ``joe`` を ``entry`` オブジェクトに追加しています:"

msgid ""
"To add multiple records to a :class:`~django.db.models.ManyToManyField` in "
"one go, include multiple arguments in the call to :meth:`~django.db.models."
"fields.related.RelatedManager.add`, like this:"
msgstr ""
"複数のレコードを :class:`~django.db.models.ManyToManyField` に一気に追加する"
"には、 :meth:`~django.db.models.fields.related.RelatedManager.add` の呼び出し"
"に複数の引数を含めてください:"

msgid ""
"Django will complain if you try to assign or add an object of the wrong type."
msgstr ""
"もし間違った型のオブジェクトを設定もしくは追加しようとすれば Django はエラー"
"を発生させます。"

msgid "Retrieving objects"
msgstr "オブジェクトを取得する"

msgid ""
"To retrieve objects from your database, construct a :class:`~django.db."
"models.query.QuerySet` via a :class:`~django.db.models.Manager` on your "
"model class."
msgstr ""
"データベースからオブジェクトを取得するには、モデルクラスの :class:`~django."
"db.models.Manager` から :class:`~django.db.models.query.QuerySet` を作りま"
"す。"

msgid ""
"A :class:`~django.db.models.query.QuerySet` represents a collection of "
"objects from your database. It can have zero, one or many *filters*. Filters "
"narrow down the query results based on the given parameters. In SQL terms, "
"a :class:`~django.db.models.query.QuerySet` equates to a ``SELECT`` "
"statement, and a filter is a limiting clause such as ``WHERE`` or ``LIMIT``."
msgstr ""
":class:`~django.db.models.query.QuerySet` はデータベース上のオブジェクトの集"
"合を表しています。多数の *フィルタ* を持つことができます。フィルタは与えられ"
"たパラメータに基づいてクエリの検索結果を絞り込みます。SQL 文においては、 :"
"class:`~django.db.models.query.QuerySet` は ``SELECT`` 句、フィルタは "
"``WHERE`` や ``LIMIT`` のような絞り込みに用いる句に対応しています。"

msgid ""
"You get a :class:`~django.db.models.query.QuerySet` by using your model's :"
"class:`~django.db.models.Manager`. Each model has at least one :class:"
"`~django.db.models.Manager`, and it's called :attr:`~django.db.models.Model."
"objects` by default. Access it directly via the model class, like so:"
msgstr ""
"モデルの :class:`~django.db.models.query.QuerySet` を取得するには、モデルの :"
"class:`~django.db.models.Manager` を使用します。各モデルには少なくとも1つの :"
"class:`~django.db.models.Manager` があり、デフォルトでは :attr:`~django.db."
"models.Model.objects` という名前がついています。モデルクラスから直接アクセス"
"してください:"

msgid ""
"``Managers`` are accessible only via model classes, rather than from model "
"instances, to enforce a separation between \"table-level\" operations and "
"\"record-level\" operations."
msgstr ""
"``Manager`` はモデルのインスタンスでなく、モデルのクラスを経由してのみアクセ"
"スでき、それは \"テーブル水準\" の処理と \"レコード水準\" の処理とで責任を明"
"確に分離するためです。"

msgid ""
"The :class:`~django.db.models.Manager` is the main source of ``QuerySets`` "
"for a model. For example, ``Blog.objects.all()`` returns a :class:`~django."
"db.models.query.QuerySet` that contains all ``Blog`` objects in the database."
msgstr ""
":class:`~django.db.models.Manager` はモデルの ``QuerySet`` の主な取得元になり"
"ます。たとえば、 ``Blog.objects.all()`` はデータベース内の ``Blog`` オブジェ"
"クト全てを含んだ :class:`~django.db.models.query.QuerySet` を返します。"

msgid "Retrieving all objects"
msgstr "すべてのオブジェクトを取得する"

msgid ""
"The simplest way to retrieve objects from a table is to get all of them. To "
"do this, use the :meth:`~django.db.models.query.QuerySet.all` method on a :"
"class:`~django.db.models.Manager`:"
msgstr ""
"テーブルからオブジェクトを取得する最も簡単な方法は、全てのオブジェクトを取得"
"することです。これを行うには、 :class:`~django.db.models.Manager` の :meth:"
"`~django.db.models.query.QuerySet.all` メソッドを使います:"

msgid ""
"The :meth:`~django.db.models.query.QuerySet.all` method returns a :class:"
"`~django.db.models.query.QuerySet` of all the objects in the database."
msgstr ""
":meth:`~django.db.models.query.QuerySet.all` メソッドは、データベース内のすべ"
"てのオブジェクトを含んだ :class:`~django.db.models.query.QuerySet` を返しま"
"す。"

msgid "Retrieving specific objects with filters"
msgstr "フィルタを使って特定のオブジェクトを取得する"

msgid ""
"The :class:`~django.db.models.query.QuerySet` returned by :meth:`~django.db."
"models.query.QuerySet.all` describes all objects in the database table. "
"Usually, though, you'll need to select only a subset of the complete set of "
"objects."
msgstr ""
":meth:`~django.db.models.query.QuerySet.all` が返す :class:`~django.db."
"models.query.QuerySet` には、データベーステーブルのすべてのオブジェクトが含ま"
"れています。しかし、ふつう必要になるのはオブジェクト全体の集合ではなく、その"
"部分集合でしょう。"

msgid ""
"To create such a subset, you refine the initial :class:`~django.db.models."
"query.QuerySet`, adding filter conditions. The two most common ways to "
"refine a :class:`~django.db.models.query.QuerySet` are:"
msgstr ""
"そのような部分集合を作るには、条件フィルタを追加して最初の :class:`~django."
"db.models.query.QuerySet` を絞り込みます。 :class:`~django.db.models.query."
"QuerySet` を絞り込む代表的な方法として次の2つのものがあります。"

msgid "``filter(**kwargs)``"
msgstr "``filter(**kwargs)``"

msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that match the given lookup parameters."
msgstr ""
"与えられたルックアップパラメータにマッチする新しい :class:`~django.db.models."
"query.QuerySet` を返します。"

msgid "``exclude(**kwargs)``"
msgstr "``exclude(**kwargs)``"

msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that do *not* match the given lookup parameters."
msgstr ""
"与えられたルックアップパラメータにマッチ *しない* 新しい :class:`~django.db."
"models.query.QuerySet` を返します。"

msgid ""
"The lookup parameters (``**kwargs`` in the above function definitions) "
"should be in the format described in `Field lookups`_ below."
msgstr ""
"ルックアップパラメータ (上の関数定義における ``**kwargs`` ) は、以下の "
"`Field lookups`_ で説明するフォーマットに従わなければなりません。"

msgid ""
"For example, to get a :class:`~django.db.models.query.QuerySet` of blog "
"entries from the year 2006, use :meth:`~django.db.models.query.QuerySet."
"filter` like so::"
msgstr ""
"たとえば、2006年以降のブログエントリーの :class:`~django.db.models.query."
"QuerySet` を取得するには、 :meth:`~django.db.models.query.QuerySet.filter` を"
"次のように使用します。"

msgid "With the default manager class, it is the same as::"
msgstr "デフォルトの manager クラスの場合、これは次のコードと等価です。"

msgid "Chaining filters"
msgstr "フィルタの連結"

msgid ""
"The result of refining a :class:`~django.db.models.query.QuerySet` is itself "
"a :class:`~django.db.models.query.QuerySet`, so it's possible to chain "
"refinements together. For example:"
msgstr ""
"絞り込みを行った :class:`~django.db.models.query.QuerySet` の結果自体も :"
"class:`~django.db.models.query.QuerySet` です。そのため、複数の絞り込みを連結"
"することが可能です。たとえば、次のように書くことができます。"

msgid ""
"This takes the initial :class:`~django.db.models.query.QuerySet` of all "
"entries in the database, adds a filter, then an exclusion, then another "
"filter. The final result is a :class:`~django.db.models.query.QuerySet` "
"containing all entries with a headline that starts with \"What\", that were "
"published between January 30, 2005, and the current day."
msgstr ""
"これはデータベース内のすべてのエントリーを含む :class:`~django.db.models."
"query.QuerySet` をとり、フィルタを追加し、除外フィルタを追加し、さらにもう1つ"
"のフィルタを追加しています。最終的な結果は、\"What\" で始まるヘッドラインを持"
"ち、2005年1月30日から今日までに公開されたすべてのエントリーを含んだ :class:"
"`~django.db.models.query.QuerySet` となります。"

msgid "Filtered ``QuerySet``\\s are unique"
msgstr "フィルタを適用した ``QuerySet`` はユニーク"

msgid ""
"Each time you refine a :class:`~django.db.models.query.QuerySet`, you get a "
"brand-new :class:`~django.db.models.query.QuerySet` that is in no way bound "
"to the previous :class:`~django.db.models.query.QuerySet`. Each refinement "
"creates a separate and distinct :class:`~django.db.models.query.QuerySet` "
"that can be stored, used and reused."
msgstr ""
":class:`~django.db.models.query.QuerySet` に対して絞り込みを適用するごとに、"
"前の :class:`~django.db.models.query.QuerySet` から独立した完全に新しい :"
"class:`~django.db.models.query.QuerySet` が作られます。絞り込みごとに独立し"
"た :class:`~django.db.models.query.QuerySet` が作られるため、保存したり何度も"
"再利用したりできます。"

msgid "Example:"
msgstr "例:"

msgid ""
"These three ``QuerySets`` are separate. The first is a base :class:`~django."
"db.models.query.QuerySet` containing all entries that contain a headline "
"starting with \"What\". The second is a subset of the first, with an "
"additional criteria that excludes records whose ``pub_date`` is today or in "
"the future. The third is a subset of the first, with an additional criteria "
"that selects only the records whose ``pub_date`` is today or in the future. "
"The initial :class:`~django.db.models.query.QuerySet` (``q1``) is unaffected "
"by the refinement process."
msgstr ""
"これら3つの ``QuerySets`` は独立しています。1番目は基本の :class:`~django.db."
"models.query.QuerySet` で、\"What\" で始まるヘッドラインを持つ全てのエント"
"リーを含みます。2番めは1番目の部分集合で、 ``pub_date`` が今日または未来の日"
"付であるレコードを除外する追加条件を持ちます。3番目も1番目の部分集合で、 "
"``pub_date`` が今日または未来の日付であるレコードだけを選択する追加条件を持ち"
"ます。1番目の :class:`~django.db.models.query.QuerySet` (``q1``) は、絞り込み"
"の過程において何ら影響を受けません。"

msgid "``QuerySet``\\s are lazy"
msgstr "``QuerySet`` は遅延評価される"

msgid ""
"``QuerySets`` are lazy -- the act of creating a :class:`~django.db.models."
"query.QuerySet` doesn't involve any database activity. You can stack filters "
"together all day long, and Django won't actually run the query until the :"
"class:`~django.db.models.query.QuerySet` is *evaluated*. Take a look at this "
"example:"
msgstr ""
"``QuerySets`` は遅延評価されます。 :class:`~django.db.models.query.QuerySet` "
"を作る行為はいかなるデータベース操作も引き起こしません。たとえあなたが 1 日中"
"フィルタのスタックを積み上げたとしても、:class:`~django.db.models.query."
"QuerySet` が *評価される* までは、Django は実際にはクエリを実行しません。次の"
"例を見てください。"

msgid ""
"Though this looks like three database hits, in fact it hits the database "
"only once, at the last line (``print(q)``). In general, the results of a :"
"class:`~django.db.models.query.QuerySet` aren't fetched from the database "
"until you \"ask\" for them. When you do, the :class:`~django.db.models.query."
"QuerySet` is *evaluated* by accessing the database. For more details on "
"exactly when evaluation takes place, see :ref:`when-querysets-are-evaluated`."
msgstr ""
"この例ではデータベースに3回アクセスしているように見えますが、実際にアクセスし"
"ているのは、最終行 (``print(q)``) での1回だけです。一般に、 :class:`~django."
"db.models.query.QuerySet` の結果は、明示的に要求するまでデータベースから取得"
"されません。取得するように要求した時点で、 :class:`~django.db.models.query."
"QuerySet` は *評価* され、データベースへのアクセスが発生します。評価が起こる"
"正確なタイミングの詳細については、 :ref:`when-querysets-are-evaluated` を参照"
"してください。"

msgid "Retrieving a single object with ``get()``"
msgstr "``get()`` を使って1つのオブジェクトを取得する"

msgid ""
":meth:`~django.db.models.query.QuerySet.filter` will always give you a :"
"class:`~django.db.models.query.QuerySet`, even if only a single object "
"matches the query - in this case, it will be a :class:`~django.db.models."
"query.QuerySet` containing a single element."
msgstr ""
":meth:`~django.db.models.query.QuerySet.filter` は、たとえクエリーにマッチし"
"たのが1つのオブジェクトだけだったとしても、常に :class:`~django.db.models."
"query.QuerySet` を返します。この場合、 :class:`~django.db.models.query."
"QuerySet` には1つの要素だけが含まれることになります。"

msgid ""
"If you know there is only one object that matches your query, you can use "
"the :meth:`~django.db.models.query.QuerySet.get` method on a :class:`~django."
"db.models.Manager` which returns the object directly:"
msgstr ""
"クエリーにマッチするのは1つのオブジェクトだけだと分かっている場合、  :class:"
"`~django.db.models.Manager` の :meth:`~django.db.models.query.QuerySet.get` "
"メソッドを呼べば、そのオブジェクトが直接返されます。"

msgid ""
"You can use any query expression with :meth:`~django.db.models.query."
"QuerySet.get`, just like with :meth:`~django.db.models.query.QuerySet."
"filter` - again, see `Field lookups`_ below."
msgstr ""
":meth:`~django.db.models.query.QuerySet.filter` と同じように、 :meth:"
"`~django.db.models.query.QuerySet.get` には任意のクエリー表現が使用できま"
"す。 繰り返しますが、詳しくはあとで説明する `Field lookups`_ を見てください。"

msgid ""
"Note that there is a difference between using :meth:`~django.db.models.query."
"QuerySet.get`, and using :meth:`~django.db.models.query.QuerySet.filter` "
"with a slice of ``[0]``. If there are no results that match the query, :meth:"
"`~django.db.models.query.QuerySet.get` will raise a ``DoesNotExist`` "
"exception. This exception is an attribute of the model class that the query "
"is being performed on - so in the code above, if there is no ``Entry`` "
"object with a primary key of 1, Django will raise ``Entry.DoesNotExist``."
msgstr ""
":meth:`~django.db.models.query.QuerySet.get` と :meth:`~django.db.models."
"query.QuerySet.filter` を ``[0]`` でスライスすることには、次のような違いがあ"
"ることに注意してください。クエリにマッチする結果が存在しない場合、 :meth:"
"`~django.db.models.query.QuerySet.get` は ``DoesNotExist`` 例外を起こします。"
"この例外はクエリーが実行されるモデルクラスの属性です。たとえば上のコードで"
"は、1というプライマリーキーを持つ ``Entry`` オブジェクトがなければ、Django "
"は ``Entry.DoesNotExist`` 例外を起こします。"

msgid ""
"Similarly, Django will complain if more than one item matches the :meth:"
"`~django.db.models.query.QuerySet.get` query. In this case, it will raise :"
"exc:`~django.core.exceptions.MultipleObjectsReturned`, which again is an "
"attribute of the model class itself."
msgstr ""
"同様に :meth:`~django.db.models.query.QuerySet.get` のクエリーが2つ以上のアイ"
"テムにマッチした場合にも、Djangoは文句を言います。この場合には、やはり同じク"
"エリのモデルクラスの属性の :exc:`~django.core.exceptions."
"MultipleObjectsReturned` 例外が起こります。"

msgid "Other ``QuerySet`` methods"
msgstr "その他の ``QuerySet`` メソッド"

msgid ""
"Most of the time you'll use :meth:`~django.db.models.query.QuerySet.all`, :"
"meth:`~django.db.models.query.QuerySet.get`, :meth:`~django.db.models.query."
"QuerySet.filter` and :meth:`~django.db.models.query.QuerySet.exclude` when "
"you need to look up objects from the database. However, that's far from all "
"there is; see the :ref:`QuerySet API Reference <queryset-api>` for a "
"complete list of all the various :class:`~django.db.models.query.QuerySet` "
"methods."
msgstr ""
"データベースからオブジェクトを検索する必要がある大抵の場合は、 :meth:"
"`~django.db.models.query.QuerySet.all`, :meth:`~django.db.models.query."
"QuerySet.get`, :meth:`~django.db.models.query.QuerySet.filter` および :meth:"
"`~django.db.models.query.QuerySet.exclude` のいずれかを使うことになるでしょ"
"う。しかしこれらのメソッドだけでは不十分な場合は、さまざまな :class:`~django."
"db.models.query.QuerySet` メソッドの全リストが掲載されている :ref:`QuerySet "
"API リファレンス <queryset-api>` を参照してください。"

msgid "Limiting ``QuerySet``\\s"
msgstr "``QuerySet`` の要素数を制限する"

msgid ""
"Use a subset of Python's array-slicing syntax to limit your :class:`~django."
"db.models.query.QuerySet` to a certain number of results. This is the "
"equivalent of SQL's ``LIMIT`` and ``OFFSET`` clauses."
msgstr ""
"Python のリストスライスのサブセットを使うことで :class:`~django.db.models."
"query.QuerySet` の結果を特定の要素数に制限できます。これは SQL の ``LIMIT`` "
"と ``OFFSET`` 句に対応します。"

msgid "For example, this returns the first 5 objects (``LIMIT 5``):"
msgstr ""
"たとえば、次のコードは最初の5つのオブジェクトを返します (``LIMIT 5``)。"

msgid "This returns the sixth through tenth objects (``OFFSET 5 LIMIT 5``):"
msgstr ""
"次のコードは、6番目から10番目までのオブジェクトを返します (``OFFSET 5 LIMIT "
"5``)。"

msgid "Negative indexing (i.e. ``Entry.objects.all()[-1]``) is not supported."
msgstr ""
"負のインデックスには対応していません (例: ``Entry.objects.all()[-1]``)。"

msgid ""
"Generally, slicing a :class:`~django.db.models.query.QuerySet` returns a "
"new :class:`~django.db.models.query.QuerySet` -- it doesn't evaluate the "
"query. An exception is if you use the \"step\" parameter of Python slice "
"syntax. For example, this would actually execute the query in order to "
"return a list of every *second* object of the first 10:"
msgstr ""
"一般に、 :class:`~django.db.models.query.QuerySet` をスライスしたとしても、新"
"しい :class:`~django.db.models.query.QuerySet` が返り、クエリーの評価は行われ"
"ません。例外は、Python のリストスライス構文の \"step\" パラメーターを使用した"
"場合です。たとえば、次のコードは実際にクエリを実行し、最初の10個のオブジェク"
"トから一つおきにとったオブジェクトのリストを返します。"

msgid ""
"Further filtering or ordering of a sliced queryset is prohibited due to the "
"ambiguous nature of how that might work."
msgstr ""
"スライスされたクエリーセットのフィルタリングやソートは、動作が曖昧なため禁止"
"されています。"

msgid ""
"To retrieve a *single* object rather than a list (e.g. ``SELECT foo FROM bar "
"LIMIT 1``), use an index instead of a slice. For example, this returns the "
"first ``Entry`` in the database, after ordering entries alphabetically by "
"headline:"
msgstr ""
"リスト (例: ``SELECT foo FROM bar LIMIT 1``) ではなく *1つの* オブジェクトを"
"取得するには、スライスではなくリストのインデックスを使用してください。たとえ"
"ば、次のコードは、ヘッドラインでアルファベット順にソートしたあと、データベー"
"スの1番目の ``Entry`` を返します。"

msgid "This is roughly equivalent to:"
msgstr "上の例は次のコードとほとんど同じです。"

msgid ""
"Note, however, that the first of these will raise ``IndexError`` while the "
"second will raise ``DoesNotExist`` if no objects match the given criteria. "
"See :meth:`~django.db.models.query.QuerySet.get` for more details."
msgstr ""
"ただし、与えられた条件を満たすオブジェクトが存在しない場合に、前者は "
"``IndexError`` を起こすのに対して、後者は ``DoesNotExist`` を起こすことに注意"
"してください。詳細については :meth:`~django.db.models.query.QuerySet.get` を"
"参照してください。"

msgid "Field lookups"
msgstr "フィールドルックアップ"

msgid ""
"Field lookups are how you specify the meat of an SQL ``WHERE`` clause. "
"They're specified as keyword arguments to the :class:`~django.db.models."
"query.QuerySet` methods :meth:`~django.db.models.query.QuerySet.filter`, :"
"meth:`~django.db.models.query.QuerySet.exclude` and :meth:`~django.db.models."
"query.QuerySet.get`."
msgstr ""
"フィールドルックアップは、SQL の ``WHERE`` 句の内容を指定する手段です。 :"
"class:`~django.db.models.query.QuerySet` メソッド、 :meth:`~django.db.models."
"query.QuerySet.filter` 、 :meth:`~django.db.models.query.QuerySet.exclude` お"
"よび :meth:`~django.db.models.query.QuerySet.get` にキーワード引数として指定"
"します。"

msgid ""
"Basic lookups keyword arguments take the form ``field__lookuptype=value``. "
"(That's a double-underscore). For example:"
msgstr ""
"基本のルックアップキーワード引数は ``field__lookuptype=value`` という形を取り"
"ます (2文字連続するアンダースコアです)。たとえば、"

msgid "translates (roughly) into the following SQL:"
msgstr "というコードは、(だいたい) 次の SQL 文に変換されます。"

msgid "How this is possible"
msgstr "動作のしくみ"

msgid ""
"Python has the ability to define functions that accept arbitrary name-value "
"arguments whose names and values are evaluated at runtime. For more "
"information, see :ref:`tut-keywordargs` in the official Python tutorial."
msgstr ""
"Python には任意の name-value 形式の引数をとる関数を定義する能力があり、name "
"と value の値を実行時に評価します。詳しい情報については、公式の Python チュー"
"トリアルの :ref:`tut-keywordargs` を参照してください。"

msgid ""
"The field specified in a lookup has to be the name of a model field. There's "
"one exception though, in case of a :class:`~django.db.models.ForeignKey` you "
"can specify the field name suffixed with ``_id``. In this case, the value "
"parameter is expected to contain the raw value of the foreign model's "
"primary key. For example:"
msgstr ""
"ルックアップに指定するフィールドはモデルが持つフィールド名でなければなりませ"
"ん。ただし1つだけ例外があり、 :class:`~django.db.models.ForeignKey` の場合に"
"はフィールド名の末尾に ``_id`` を付けた名前を指定できます。その場合、value  "
"パラメータには外部モデルのプライマリーキーの生の値を書くことが期待されます。"

msgid ""
"If you pass an invalid keyword argument, a lookup function will raise "
"``TypeError``."
msgstr ""
"無効なキーワード引数を指定すると、ルックアップ関数は ``TypeError`` を起こしま"
"す。"

msgid ""
"The database API supports about two dozen lookup types; a complete reference "
"can be found in the :ref:`field lookup reference <field-lookups>`. To give "
"you a taste of what's available, here's some of the more common lookups "
"you'll probably use:"
msgstr ""
"データベース API は約30個のルックアップタイプをサポートしており、完全なガイド"
"は :ref:`フィールドルックアップのリファレンス <field-lookups>` で見ることがで"
"きます。ルックアップを使って何ができるのかがよく分かるように、以下によく使う"
"一般的なルックアップをいくつか挙げます。"

msgid ":lookup:`exact`"
msgstr ":lookup:`exact`"

msgid "An \"exact\" match. For example:"
msgstr "完全な (\"exact\") マッチを行います。たとえば、"

msgid "Would generate SQL along these lines:"
msgstr "は次のような SQL を生成します。"

msgid ""
"If you don't provide a lookup type -- that is, if your keyword argument "
"doesn't contain a double underscore -- the lookup type is assumed to be "
"``exact``."
msgstr ""
"ルックアップタイプを指定しなかった場合、つまりキーワード引数がダブルアンダー"
"スコアを含まない場合、ルックアップタイプは ``exact`` が指定されたものとみなさ"
"れます。"

msgid "For example, the following two statements are equivalent:"
msgstr "たとえば、次の2つの文は等価です。"

msgid "This is for convenience, because ``exact`` lookups are the common case."
msgstr ""
"``exact`` ルックアップが最もよく使われるため、利便性のためにこのようになって"
"います。"

msgid ":lookup:`iexact`"
msgstr ":lookup:`iexact`"

msgid "A case-insensitive match. So, the query:"
msgstr "case-insensitive  なマッチを行います。したがって、次のクエリ"

msgid ""
"Would match a ``Blog`` titled ``\"Beatles Blog\"``, ``\"beatles blog\"``, or "
"even ``\"BeAtlES blOG\"``."
msgstr ""
"は ``\"Beatles Blog\"``、 ``\"beatles blog\"``、あるいは ``\"BeAtlES "
"blOG\"`` というタイトルを持つ ``Blog`` にもマッチします。"

msgid ":lookup:`contains`"
msgstr ":lookup:`contains`"

msgid "Case-sensitive containment test. For example::"
msgstr "case-sensitive な部分一致テストを行います。たとえば、"

msgid "Roughly translates to this SQL:"
msgstr "はだいたい次のような SQL に変換されます。"

msgid ""
"Note this will match the headline ``'Today Lennon honored'`` but not "
"``'today lennon honored'``."
msgstr ""
"この例では、ヘッドライン ``'Today Lennon honored'`` にはマッチしても "
"``'today lennon honored'`` にはマッチしないことに注意してください。"

msgid "There's also a case-insensitive version, :lookup:`icontains`."
msgstr "case-insensitive バージョンの :lookup:`icontains` もあります。"

msgid ":lookup:`startswith`, :lookup:`endswith`"
msgstr ":lookup:`startswith` と :lookup:`endswith`"

msgid ""
"Starts-with and ends-with search, respectively. There are also case-"
"insensitive versions called :lookup:`istartswith` and :lookup:`iendswith`."
msgstr ""
"それぞれ starts-with と ends-with 検索を行います。case-insensitive バージョ"
"ン :lookup:`istartswith` と :lookup:`iendswith` もあります。"

msgid ""
"Again, this only scratches the surface. A complete reference can be found in "
"the :ref:`field lookup reference <field-lookups>`."
msgstr ""
"繰り返しになりますが、以上はルックアップの表面をさらったに過ぎません。完全な"
"リファレンスは :ref:`フィールドルックアップのリファレンス <field-lookups>` を"
"参照してください。"

msgid "Lookups that span relationships"
msgstr "リレーションを横断するルックアップ"

msgid ""
"Django offers a powerful and intuitive way to \"follow\" relationships in "
"lookups, taking care of the SQL ``JOIN``\\s for you automatically, behind "
"the scenes. To span a relationship, use the field name of related fields "
"across models, separated by double underscores, until you get to the field "
"you want."
msgstr ""
"Django はルックアップの中でリレーションを「横断する」強力で直感的な方法を提供"
"します。あなたのために、背後で SQL の ``JOIN`` を自動的に実行しています。リ"
"レーションを横断するには、使いたいフィールドにたどり着くまで、モデル間を横断"
"する関連フィールドのフィールド名をダブルアンダースコアで繋ぎます。"

msgid ""
"This example retrieves all ``Entry`` objects with a ``Blog`` whose ``name`` "
"is ``'Beatles Blog'``:"
msgstr ""
"次の例は、``name`` に ``'Beatles Blog'`` を持つ ``Blog`` のすべての "
"``Entry`` オブジェクトを取得します。"

msgid "This spanning can be as deep as you'd like."
msgstr "この横断は好きなだけ深くすることができます。"

msgid ""
"It works backwards, too. While it :attr:`can be customized <.ForeignKey."
"related_query_name>`, by default you refer to a \"reverse\" relationship in "
"a lookup using the lowercase name of the model."
msgstr ""
"逆方向にも動作します。 :attr:`カスタマイズすることもできます<.ForeignKey."
"related_query_name>` が、デフォルトでは、モデルの小文字の名前を使用して、ルッ"
"クアップで「逆」リレーションシップを参照します。"

msgid ""
"This example retrieves all ``Blog`` objects which have at least one "
"``Entry`` whose ``headline`` contains ``'Lennon'``:"
msgstr ""
"次の例は、少なくとも1つの ``headline`` が ``'Lennon'`` を含む ``Entry`` を持"
"つ、すべての ``Blog`` オブジェクトを取得します。"

msgid ""
"If you are filtering across multiple relationships and one of the "
"intermediate models doesn't have a value that meets the filter condition, "
"Django will treat it as if there is an empty (all values are ``NULL``), but "
"valid, object there. All this means is that no error will be raised. For "
"example, in this filter::"
msgstr ""
"複数のリレーションにまたがってフィルタリングをしていて、仲介するどれかが条件"
"に合致しない場合、Django は空 (すべての値が ``NULL``) だけど有効なオブジェク"
"トとして扱います これが意味するのは、エラーが投げられないと言うことです。例え"
"ば、以下のフィルタでは::"

msgid ""
"(if there was a related ``Author`` model), if there was no ``author`` "
"associated with an entry, it would be treated as if there was also no "
"``name`` attached, rather than raising an error because of the missing "
"``author``. Usually this is exactly what you want to have happen. The only "
"case where it might be confusing is if you are using :lookup:`isnull`. Thus::"
msgstr ""
"(関係づけられた ``Author`` モデルがあった場合で) entry に関係づけられた "
"``author`` がない場合、 ``name`` がなかったかのように扱われ、``author`` がな"
"いという理由でエラーを投げることはありません。通常、これは必要とされる動作で"
"す。もし混乱するとしたら、:lookup:`isnull` を使っている場合でしょう。なので::"

msgid ""
"will return ``Blog`` objects that have an empty ``name`` on the ``author`` "
"and also those which have an empty ``author`` on the ``entry``. If you don't "
"want those latter objects, you could write::"
msgstr ""
"これは ``author`` に空の ``name`` を持つ ``Blog`` オブジェクトと ``entry`` に"
"空の ``author`` を返します。後者のオブジェクトがほしくない場合、以下のように"
"書くことができます::"

msgid "Spanning multi-valued relationships"
msgstr "複数の値を持つリレーションの横断"

msgid ""
"When spanning a :class:`~django.db.models.ManyToManyField` or a reverse :"
"class:`~django.db.models.ForeignKey` (such as from ``Blog`` to ``Entry``), "
"filtering on multiple attributes raises the question of whether to require "
"each attribute to coincide in the same related object. We might seek blogs "
"that have an entry from 2008 with *“Lennon”* in its headline, or we might "
"seek blogs that merely have any entry from 2008 as well as some newer or "
"older entry with *“Lennon”* in its headline."
msgstr ""
":class:`~django.db.models.ManyToManyField` や逆の :class:`~django.db.models."
"ForeignKey` (例えば ``Blog`` から ``Entry`` へ) をまたぐ場合、複数の属性で"
"フィルタリングを行うと、それぞれの属性がリレーション先の同じオブジェクトの中"
"で一致する必要があるかどうかが問題になります。見出しに *\"Lennon\"* が含まれ"
"る2008年のエントリーを持つブログを探すかもしれませんし、見出しに "
"*\"Lennon\"* が含まれる2008年のエントリーと、それより新しいかまたは古いエント"
"リーを持つブログを探すかもしれません。"

msgid ""
"To select all blogs containing at least one entry from 2008 having "
"*\"Lennon\"* in its headline (the same entry satisfying both conditions), we "
"would write::"
msgstr ""
"少なくとも1つの2008年のエントリーを含み、かつそのエントリーに「Lennon」という"
"ヘッドラインが含まれている（同じエントリーが両方の条件を満たしている）ブログ"
"をすべて取得する場合、このように書きます:"

msgid ""
"Otherwise, to perform a more permissive query selecting any blogs with "
"merely *some* entry with *\"Lennon\"* in its headline and *some* entry from "
"2008, we would write::"
msgstr ""
"一方、ヘッドラインに「Lennon」が含まれる *何らか* のエントリーと、2008年の *"
"何らかの* エントリーを持つ任意のブログを取得する寛容なクエリを実行する場合"
"は、次のように書きます:"

msgid ""
"Suppose there is only one blog that has both entries containing *\"Lennon\"* "
"and entries from 2008, but that none of the entries from 2008 contained "
"*\"Lennon\"*. The first query would not return any blogs, but the second "
"query would return that one blog. (This is because the entries selected by "
"the second filter may or may not be the same as the entries in the first "
"filter. We are filtering the ``Blog`` items with each filter statement, not "
"the ``Entry`` items.) In short, if each condition needs to match the same "
"related object, then each should be contained in a single :meth:`~django.db."
"models.query.QuerySet.filter` call."
msgstr ""
"*\"Lennon \"* を含むエントリーと2008年のエントリーの両方を持つブログが1つだけ"
"あり、2008年のエントリーには *\"Lennon \"* が含まれていなかったとします。最初"
"のクエリはどのブログも返しませんが、2番目のクエリはその1つのブログを返します "
"(これは、2番目のフィルタによって選択されたエントリーが1番目のフィルタのエント"
"リーと違っていても構わないからです。私たちはそれぞれのフィルタ文で、 "
"``Entry`` アイテムではなく、 ``Blog`` アイテムをフィルタしているのです)。つま"
"り、各条件がリレーション先の同じオブジェクトにマッチする必要がある場合、それ"
"ぞれを 1 つの :meth:`~django.db.models.query.QuerySet.filter` 呼び出しに含め"
"る必要があります。"

msgid ""
"As the second (more permissive) query chains multiple filters, it performs "
"multiple joins to the primary model, potentially yielding duplicates."
msgstr ""
"2番目の（より寛容な）クエリは複数のフィルタを連鎖させるので、最初のモデルに複"
"数の結合を実行し、重複を生成することがあります。"

msgid ""
"The behavior of :meth:`~django.db.models.query.QuerySet.filter` for queries "
"that span multi-value relationships, as described above, is not implemented "
"equivalently for :meth:`~django.db.models.query.QuerySet.exclude`. Instead, "
"the conditions in a single :meth:`~django.db.models.query.QuerySet.exclude` "
"call will not necessarily refer to the same item."
msgstr ""
"上記のような複数の値のリレーションシップをまたぐクエリに対する :meth:"
"`~django.db.models.query.QuerySet.filter` の動作は、 :meth:`~django.db."
"models.query.QuerySet.exclude` と同等には実装されていません。その代わり、1つ"
"の :meth:`~django.db.models.query.QuerySet.exclude` 呼び出しにおける条件は必"
"ずしも同じアイテムを参照するとは限りません。"

msgid ""
"For example, the following query would exclude blogs that contain *both* "
"entries with *\"Lennon\"* in the headline *and* entries published in 2008::"
msgstr ""
"例えば、以下のクエリは、見出しに *\"Lennon\"* を含むエントリー *と* 、2008年"
"に公開されたエントリーの *両方* を含むブログを除外します:"

msgid ""
"However, unlike the behavior when using :meth:`~django.db.models.query."
"QuerySet.filter`, this will not limit blogs based on entries that satisfy "
"both conditions. In order to do that, i.e. to select all blogs that do not "
"contain entries published with *\"Lennon\"* that were published in 2008, you "
"need to make two queries::"
msgstr ""
"しかし、 :meth:`~django.db.models.query.QuerySet.filter` を使ったときの動作と"
"は異なり、このクエリは両方の条件を満たすエントリでブログを絞り込むわけではあ"
"りません。つまり、「2008年に *\"Lennon\"* によって公開されたエントリー」を含"
"まないブログすべてを取得するには、このように2つのクエリを書く必要があります:"

msgid "Filters can reference fields on the model"
msgstr "フィルタはモデルのフィールドを参照できる"

msgid ""
"In the examples given so far, we have constructed filters that compare the "
"value of a model field with a constant. But what if you want to compare the "
"value of a model field with another field on the same model?"
msgstr ""
"今まで見てきた例では、モデルのフィールドの値を定数と比較するフィルタを作って"
"きました。しかし、もしモデルのフィールドの値を、同じモデルの他のフィールドと"
"比較したい時にはどうすればいいのでしょう？"

msgid ""
"Django provides :class:`F expressions <django.db.models.F>` to allow such "
"comparisons. Instances of ``F()`` act as a reference to a model field within "
"a query. These references can then be used in query filters to compare the "
"values of two different fields on the same model instance."
msgstr ""
"そのような比較を行うために、Django は :class:`F 式 <django.db.models.F>` を用"
"意しています。 ``F()`` のインスタンスは、クエリの中でモデルのフィールドへの参"
"照として振る舞います。したがって、この参照をクエリの中で使うことで、同じモデ"
"ルのインスタンスの異なる2つのフィールドの値を比較できます。"

msgid ""
"For example, to find a list of all blog entries that have had more comments "
"than pingbacks, we construct an ``F()`` object to reference the pingback "
"count, and use that ``F()`` object in the query:"
msgstr ""
"たとえば、pingback の数よりコメントの数のほうが多いすべてのブログエントリーの"
"リストを検索するには、pingback の数を参照する ``F()`` オブジェクトを作り、そ"
"の ``F()`` オブジェクトをクエリの中で次のように使います。"

msgid ""
"Django supports the use of addition, subtraction, multiplication, division, "
"modulo, and power arithmetic with ``F()`` objects, both with constants and "
"with other ``F()`` objects. To find all the blog entries with more than "
"*twice* as many comments as pingbacks, we modify the query:"
msgstr ""
"Django は ``F()`` オブジェクトを使った足し算、引き算、掛け算、割り算、モジュ"
"ロ、累乗算術を、定数や他の ``F()`` オブジェクトとの両方でサポートしています。"
"コメント数がピンバック数の *2倍* を超えるブログエントリをすべて見つけるには、"
"このようにクエリを変更します:"

msgid ""
"To find all the entries where the rating of the entry is less than the sum "
"of the pingback count and comment count, we would issue the query:"
msgstr ""
"エントリーのレーティングがピンバック数とコメント数の合計より少ないエントリー"
"をすべて見つけるには、次のようなクエリを発行します:"

msgid ""
"You can also use the double underscore notation to span relationships in an "
"``F()`` object. An ``F()`` object with a double underscore will introduce "
"any joins needed to access the related object. For example, to retrieve all "
"the entries where the author's name is the same as the blog name, we could "
"issue the query:"
msgstr ""
"``F()`` オブジェクトのリレーションシップに 2重アンダースコア表記を使うことも"
"できます。 ``F()`` オブジェクトに2重アンダースコアを付けると、リレーション先"
"オブジェクトにアクセスするために必要な結合を行うことができます。例えば、作者"
"名がブログ名と同じすべてのエントリを取得するには、次のようなクエリを発行しま"
"す:"

msgid ""
"For date and date/time fields, you can add or subtract a :class:`~datetime."
"timedelta` object. The following would return all entries that were modified "
"more than 3 days after they were published:"
msgstr ""
"日付と日付/時刻フィールドには、 :class:`~datetime.timedelta` オブジェクトを足"
"し引きできます。次のようにすると、公開から3日以上経ってから更新されたすべての"
"エントリーが返されます:"

msgid ""
"The ``F()`` objects support bitwise operations by ``.bitand()``, ``."
"bitor()``, ``.bitxor()``, ``.bitrightshift()``, and ``.bitleftshift()``. For "
"example:"
msgstr ""
"``F()`` オブジェクトは ``.bitand()``, ``.bitor()``, ``.bitxor()``, ``."
"bitrightshift()``, ``.bitleftshift()`` によるビット演算をサポートしています。"
"例えばこのようにします:"

msgid "Oracle"
msgstr "Oracle について"

msgid "Oracle doesn't support bitwise XOR operation."
msgstr "オラクルはXORビット演算をサポートしていません。"

msgid "Expressions can reference transforms"
msgstr "式はトランスフォーム（Transform）を参照できる"

msgid "Django supports using transforms in expressions."
msgstr "Django は式でトランスフォーム（変換）を使うことをサポートしています。"

msgid ""
"For example, to find all ``Entry`` objects published in the same year as "
"they were last modified:"
msgstr ""
"たとえば、次のコードは最終更新年と同じ年に発行されたすべてのEntryオブジェクト"
"を検索します:"

msgid ""
"To find the earliest year an entry was published, we can issue the query:"
msgstr "最も古い出版年を調べるには、次のクエリを実行します:"

msgid ""
"This example finds the value of the highest rated entry and the total number "
"of comments on all entries for each year:"
msgstr ""
"たとえばこの例では、各年の最高評価エントリーの値と、全エントリーに対するコメ"
"ントの総数を求めています:"

msgid "The ``pk`` lookup shortcut"
msgstr "``pk`` ルックアップショートカット"

msgid ""
"For convenience, Django provides a ``pk`` lookup shortcut, which stands for "
"\"primary key\"."
msgstr ""
"利便性のために、Django は ``pk`` ルックアップショートカットを用意しています。"
"pk とは \"primary key\" を表します。"

msgid ""
"In the example ``Blog`` model, the primary key is the ``id`` field, so these "
"three statements are equivalent:"
msgstr ""
"例の ``Blog`` モデルでは、プライマリキーは ``id`` フィールドなので、次の3つの"
"文は等価です:"

msgid ""
"The use of ``pk`` isn't limited to ``__exact`` queries -- any query term can "
"be combined with ``pk`` to perform a query on the primary key of a model:"
msgstr ""
"``pk`` は、 ``__exact`` クエリ以外でも使えます。好きなクエリ語句を ``pk`` と"
"組み合わせて、モデルの主キーに対するクエリを実行できます:"

msgid ""
"``pk`` lookups also work across joins. For example, these three statements "
"are equivalent:"
msgstr ""
"``pk`` ルックアップは結合をまたいでも動作します。たとえば、次の3つの文は等価"
"です:"

msgid "Escaping percent signs and underscores in ``LIKE`` statements"
msgstr "``LIKE`` 文の中ではパーセント記号とアンダースコアがエスケープされる"

msgid ""
"The field lookups that equate to ``LIKE`` SQL statements (``iexact``, "
"``contains``, ``icontains``, ``startswith``, ``istartswith``, ``endswith`` "
"and ``iendswith``) will automatically escape the two special characters used "
"in ``LIKE`` statements -- the percent sign and the underscore. (In a "
"``LIKE`` statement, the percent sign signifies a multiple-character wildcard "
"and the underscore signifies a single-character wildcard.)"
msgstr ""
"``LIKE`` SQL文 (``iexact``, ``contains``, ``icontains``, ``startswith``, "
"``istartswith``, ``endswith``, ``iendswith``) に相当するフィールドルックアッ"
"プでは、 ``LIKE`` 文で使用される2つの特殊文字 (パーセント記号とアンダースコ"
"ア) が自動的にエスケープされます。 (``LIKE`` 文では、パーセント記号は複数文字"
"のワイルドカードを意味し、アンダースコアは1文字のワイルドカードを意味しま"
"す)。"

msgid ""
"This means things should work intuitively, so the abstraction doesn't leak. "
"For example, to retrieve all the entries that contain a percent sign, use "
"the percent sign as any other character:"
msgstr ""
"つまり、直感的に動作するので、抽象化が漏れることはありません。たとえば、パー"
"セント記号を含むすべてのエントリを取得するには、パーセント記号を他の文字と同"
"じように使用します:"

msgid ""
"Django takes care of the quoting for you; the resulting SQL will look "
"something like this:"
msgstr "Django は以下のように、あなたの代わりにクォート処理をしてくれます:"

msgid ""
"Same goes for underscores. Both percentage signs and underscores are handled "
"for you transparently."
msgstr ""
"アンダースコアも同様です。パーセント記号もアンダースコアも透過的に処理されま"
"す。"

msgid "Caching and ``QuerySet``\\s"
msgstr "キャッシュと ``QuerySet``"

msgid ""
"Each :class:`~django.db.models.query.QuerySet` contains a cache to minimize "
"database access. Understanding how it works will allow you to write the most "
"efficient code."
msgstr ""
"それぞれの :class:`~django.db.models.query.QuerySet` には、データベースへのア"
"クセスを最小にするために内部にキャッシュがあります。キャッシュのしくみを理解"
"すれば、最も効率の良いコードが書けるようになります。"

msgid ""
"In a newly created :class:`~django.db.models.query.QuerySet`, the cache is "
"empty. The first time a :class:`~django.db.models.query.QuerySet` is "
"evaluated -- and, hence, a database query happens -- Django saves the query "
"results in the :class:`~django.db.models.query.QuerySet`’s cache and returns "
"the results that have been explicitly requested (e.g., the next element, if "
"the :class:`~django.db.models.query.QuerySet` is being iterated over). "
"Subsequent evaluations of the :class:`~django.db.models.query.QuerySet` "
"reuse the cached results."
msgstr ""
"新しく作成された :class:`~django.db.models.query.QuerySet` では、キャッシュは"
"空です。初めて :class:`~django.db.models.query.QuerySet` が評価されたとき、つ"
"まりデータベースへのクエリが発生したとき、Django はクエリの結果を :class:"
"`~django.db.models.query.QuerySet` のキャッシュに保存し、明示的に要求された結"
"果 (例えば、 :class:`~django.db.models.query.QuerySet` が繰り返し処理されてい"
"る場合は次の要素) を返します。それ以降の :class:`~django.db.models.query."
"QuerySet` の評価はキャッシュされた結果を再利用します。"

msgid ""
"Keep this caching behavior in mind, because it may bite you if you don't use "
"your :class:`~django.db.models.query.QuerySet`\\s correctly. For example, "
"the following will create two :class:`~django.db.models.query.QuerySet`\\s, "
"evaluate them, and throw them away:"
msgstr ""
"このキャッシュの動作は覚えておきましょう。 :class:`~django.db.models.query."
"QuerySet` を正しく使わないと、痛い目を見るかもしれません。たとえば、次のよう"
"にしてしまうと :class:`~django.db.models.query.QuerySet` が 2 つ作成され、評"
"価され、そして破棄されます:"

msgid ""
"That means the same database query will be executed twice, effectively "
"doubling your database load. Also, there's a possibility the two lists may "
"not include the same database records, because an ``Entry`` may have been "
"added or deleted in the split second between the two requests."
msgstr ""
"つまり、同じデータベースクエリが2回実行されることになり、事実上データベースの"
"負荷が2倍になります。また、2つのリクエストの間の一瞬の間に ``Entry`` が追加さ"
"れたり削除されたりして、2つのリストに同じデータベースレコードが含まれない可能"
"性もあります。"

msgid ""
"To avoid this problem, save the :class:`~django.db.models.query.QuerySet` "
"and reuse it:"
msgstr ""
"この問題を回避するには、 :class:`~django.db.models.query.QuerySet` を保存して"
"再利用します:"

msgid "When ``QuerySet``\\s are not cached"
msgstr "``QuerySet`` がキャッシュされないケース"

msgid ""
"Querysets do not always cache their results.  When evaluating only *part* of "
"the queryset, the cache is checked, but if it is not populated then the "
"items returned by the subsequent query are not cached. Specifically, this "
"means that :ref:`limiting the queryset <limiting-querysets>` using an array "
"slice or an index will not populate the cache."
msgstr ""
"クエリセットは常に結果をキャッシュするわけではありません。 クエリセットの *一"
"部* だけを評価する場合、キャッシュがチェックされますが、もしキャッシュに値が"
"入力されていなければ、後続のクエリで返される項目はキャッシュされません。具体"
"的には、配列のスライスやインデックスを使用して :ref:`クエリセットを制限"
"<limiting-querysets>` しても、キャッシュは生成されません。"

msgid ""
"For example, repeatedly getting a certain index in a queryset object will "
"query the database each time:"
msgstr ""
"たとえば、クエリセットオブジェクトで特定のインデックスを繰り返し取得すると、"
"その度にデータベースにクエリが送られます:"

msgid ""
"However, if the entire queryset has already been evaluated, the cache will "
"be checked instead:"
msgstr ""
"しかし、クエリセット全体がすでに評価されている場合は、代わりにキャッシュが調"
"べられます:"

msgid ""
"Here are some examples of other actions that will result in the entire "
"queryset being evaluated and therefore populate the cache:"
msgstr ""
"以下に、クエリセット全体が評価され、その結果キャッシュに入力される他の操作の"
"例をいくつか示します:"

msgid ""
"Simply printing the queryset will not populate the cache. This is because "
"the call to ``__repr__()`` only returns a slice of the entire queryset."
msgstr ""
"単にクエリセットを表示するだけではキャッシュにデータを入れることはできませ"
"ん。これは ``__repr__()`` の呼び出しがクエリセット全体のスライスを返すだけだ"
"からです。"

msgid "Asynchronous queries"
msgstr "非同期クエリ"

msgid ""
"If you are writing asynchronous views or code, you cannot use the ORM for "
"queries in quite the way we have described above, as you cannot call "
"*blocking* synchronous code from asynchronous code - it will block up the "
"event loop (or, more likely, Django will notice and raise a "
"``SynchronousOnlyOperation`` to stop that from happening)."
msgstr ""
"非同期ビューやコードを書いている場合、上記で説明した方法でORMをクエリに使用す"
"ることはできません。非同期コードから *ブロッキングな* 同期コードを呼び出すこ"
"とはできず、イベントループをブロックしてしまいます（それか、大抵はDjangoがそ"
"のことを検出し、 ``SynchronousOnlyOperation`` を発生させて防ぐでしょう）。"

msgid ""
"Fortunately, you can do many queries using Django's asynchronous query APIs. "
"Every method that might block - such as ``get()`` or ``delete()`` - has an "
"asynchronous variant (``aget()`` or ``adelete()``), and when you iterate "
"over results, you can use asynchronous iteration (``async for``) instead."
msgstr ""
"幸い、Django の非同期クエリ API を使えば、多くのクエリを実行できます。 "
"``get()`` や  ``delete()`` のようなブロッキングされる可能性のあるメソッドには"
"すべて非同期型 (``aget()`` や ``adelete()``) があり、結果を反復処理するときに"
"は、代わりに非同期反復処理 (``async for``) が使えます。"

msgid "Query iteration"
msgstr "クエリの繰り返し（イテレーション）"

msgid ""
"The default way of iterating over a query - with ``for`` - will result in a "
"blocking database query behind the scenes as Django loads the results at "
"iteration time. To fix this, you can swap to ``async for``::"
msgstr ""
"クエリを繰り返し処理するデフォルトの方法 ``for`` では、 Django が繰り返し処理"
"時に結果をロードするため、裏でデータベースのクエリがブロッキングされます。こ"
"れを修正するには、 ``async for`` に変更します:"

msgid ""
"Be aware that you also can't do other things that might iterate over the "
"queryset, such as wrapping ``list()`` around it to force its evaluation (you "
"can use ``async for`` in a comprehension, if you want it)."
msgstr ""
"例えば、 ``list()`` をクエリセットにラップして強制的にクエリセットを評価する"
"ようなことはできません (必要であれば、内包表記の中で ``async for`` を使うこと"
"ができます)。"

msgid ""
"Because ``QuerySet`` methods like ``filter()`` and ``exclude()`` do not "
"actually run the query - they set up the queryset to run when it's iterated "
"over - you can use those freely in asynchronous code. For a guide to which "
"methods can keep being used like this, and which have asynchronous versions, "
"read the next section."
msgstr ""
"``filter()`` や ``exclude()`` のような ``QuerySet`` メソッドは実際にクエリを"
"実行するわけではなく、クエリセットがイテレートされたときに実行されるように指"
"定するものなので、非同期コードで自由に使用できます。どのメソッドがこのように"
"使い続けられるか、またどのメソッドに非同期バージョンがあるかについては、次の"
"セクションを読んでください。"

msgid "``QuerySet`` and manager methods"
msgstr "``QuerySet`` とマネージャメソッド"

msgid ""
"Some methods on managers and querysets - like ``get()`` and ``first()`` - "
"force execution of the queryset and are blocking. Some, like ``filter()`` "
"and ``exclude()``, don't force execution and so are safe to run from "
"asynchronous code. But how are you supposed to tell the difference?"
msgstr ""
"マネージャやクエリセットに関するメソッドの中には、 ``get()`` や ``first()`` "
"のように、クエリセットを強制的に実行し、ブロッキングするものがあります。 "
"``filter()`` や ``exclude()`` のように、実行を強制しないメソッドもあります。"
"しかし、どうやって見分けるのでしょうか？"

msgid ""
"While you could poke around and see if there is an ``a``-prefixed version of "
"the method (for example, we have ``aget()`` but not ``afilter()``), there is "
"a more logical way - look up what kind of method it is in the :doc:`QuerySet "
"reference </ref/models/querysets>`."
msgstr ""
"メソッドに ``a`` で始まるバージョンがあるかどうかを探ることもできます（例え"
"ば、``aget()`` はありますが、 ``afilter()`` はありません）。しかし、もっとロ"
"ジカルな方法があります。それは、 :doc:`QuerySet リファレンス </ref/models/"
"querysets>` でそのメソッドがどのような種類のものかを調べることです。"

msgid ""
"In there, you'll find the methods on QuerySets grouped into two sections:"
msgstr "そこでは、QuerySet に関するメソッドを2つのセクションに分けています:"

msgid ""
"*Methods that return new querysets*: These are the non-blocking ones, and "
"don't have asynchronous versions. You're free to use these in any situation, "
"though read the notes on ``defer()`` and ``only()`` before you use them."
msgstr ""
"*新しいクエリセットを返すメソッド*: これらはノンブロッキングのもので、非同期"
"バージョンはありません。これらはどんな状況でも自由に使うことができますが、使"
"う前に ``defer()`` と ``only()`` に関する注意事項を読んでください。"

msgid ""
"*Methods that do not return querysets*: These are the blocking ones, and "
"have asynchronous versions - the asynchronous name for each is noted in its "
"documentation, though our standard pattern is to add an ``a`` prefix."
msgstr ""
"*クエリセットを返さないメソッド*: これらはブロッキングメソッドで、非同期バー"
"ジョンもあります。それぞれの非同期名はドキュメントに書かれていますが、私たち"
"の標準的なパターンは接頭辞に ``a`` をつけることです。"

msgid ""
"Using this distinction, you can work out when you need to use asynchronous "
"versions, and when you don't. For example, here's a valid asynchronous "
"query::"
msgstr ""
"この区別を使えば、非同期バージョンを使う必要があるときとないときを判断できま"
"す。たとえば、これは有効な非同期クエリです:"

msgid ""
"``filter()`` returns a queryset, and so it's fine to keep chaining it inside "
"an asynchronous environment, whereas ``first()`` evaluates and returns a "
"model instance - thus, we change to ``afirst()``, and use ``await`` at the "
"front of the whole expression in order to call it in an asynchronous-"
"friendly way."
msgstr ""
"``filter()`` はクエリセットを返すため、非同期環境内で連結して使用しても問題あ"
"りません。一方で ``first()`` は評価してモデルインスタンスを返すため、 "
"``afirst()`` に変更し、非同期に適した方法で呼び出すために、式全体の前に "
"``await`` を使用します。"

msgid ""
"If you forget to put the ``await`` part in, you may see errors like "
"*\"coroutine object has no attribute x\"* or *\"<coroutine …>\"* strings in "
"place of your model instances. If you ever see these, you are missing an "
"``await`` somewhere to turn that coroutine into a real value."
msgstr ""
"もし ``await`` の部分を入れ忘れると、 *\"coroutine object has no attribute x "
"\"* や *\"<coroutine ...>\"* のようなエラーがモデルインスタンスの代わりに表示"
"されるかもしれません。このようなエラーが表示される場合は、コルーチンを実際の"
"値に変換するための ``await`` 部分が不足しています。"

msgid "Transactions"
msgstr "トランザクション"

msgid ""
"Transactions are **not** currently supported with asynchronous queries and "
"updates. You will find that trying to use one raises "
"``SynchronousOnlyOperation``."
msgstr ""
"トランザクションは現在、非同期クエリや更新ではサポートされていません。これを"
"使用しようとすると ``SynchronousOnlyOperation`` が発生します。"

msgid ""
"If you wish to use a transaction, we suggest you write your ORM code inside "
"a separate, synchronous function and then call that using ``sync_to_async`` "
"- see :doc:`/topics/async` for more."
msgstr ""
"トランザクションを使用したい場合は、ORMコードを別の同期関数の中に記述し、 "
"``sync_to_async`` を使用して呼び出すことをおすすめします。詳しくは :doc:`/"
"topics/async` を参照してください。"

msgid "Querying ``JSONField``"
msgstr "``JSONField`` へのクエリ"

msgid ""
"Lookups implementation is different in :class:`~django.db.models.JSONField`, "
"mainly due to the existence of key transformations. To demonstrate, we will "
"use the following example model::"
msgstr ""
":class:`~django.db.models.JSONField` では、ルックアップの実装は主にキーのトラ"
"ンスフォーム（変換）の存在によって異なります。デモンストレーションのために、"
"次のモデル例を使います:"

msgid "Storing and querying for ``None``"
msgstr "``None`` の保存とクエリ"

msgid ""
"As with other fields, storing ``None`` as the field's value will store it as "
"SQL ``NULL``. While not recommended, it is possible to store JSON scalar "
"``null`` instead of SQL ``NULL`` by using :class:`Value(None, JSONField()) "
"<django.db.models.Value>`."
msgstr ""
"他のフィールドと同様に、フィールドの値として ``None`` を格納すると、SQL の "
"``NULL`` として格納されます。推奨はしませんが、 :class:`Value(None, "
"JSONField()) <django.db.models.Value>` を使用することで、 SQL の ``NULL`` の"
"代わりに JSON のスカラー値 ``null`` を格納できます。"

msgid ""
"Whichever of the values is stored, when retrieved from the database, the "
"Python representation of the JSON scalar ``null`` is the same as SQL "
"``NULL``, i.e. ``None``. Therefore, it can be hard to distinguish between "
"them."
msgstr ""
"どちらの値が格納されていても、データベースから取得したとき、JSON のスカラー "
"``null`` の Python 表現は SQL の ``NULL`` と同じ、つまり ``None`` になりま"
"す。そのため、両者を区別するのは難しいでしょう。"

msgid ""
"This only applies to ``None`` as the top-level value of the field. If "
"``None`` is inside a :py:class:`list` or :py:class:`dict`, it will always be "
"interpreted as JSON ``null``."
msgstr ""
"これはフィールドのトップレベルの値としての ``None`` にだけ適用されます。もし "
"``None`` が :py:class:`list` や :py:class:`dict` の中にある場合、常に JSON "
"の ``null`` として解釈されます。"

msgid ""
"When querying, ``None`` value will always be interpreted as JSON ``null``. "
"To query for SQL ``NULL``, use :lookup:`isnull`:"
msgstr ""
"クエリの際、 ``None`` 値は常に JSON ``null`` として解釈されます。SQL の "
"``NULL`` をクエリするには :lookup:`isnull` を使用します:"

msgid ""
"Unless you are sure you wish to work with SQL ``NULL`` values, consider "
"setting ``null=False`` and providing a suitable default for empty values, "
"such as ``default=dict``."
msgstr ""
"SQL の ``NULL`` 値を使いたいのでなければ、 ``null=False`` を設定し、 "
"``default=dict`` のように空の値に対して適切なデフォルト値を指定することを検討"
"してください。"

msgid ""
"Storing JSON scalar ``null`` does not violate :attr:`null=False <django.db."
"models.Field.null>`."
msgstr ""
"JSON スカラー値の ``null`` を格納することは :attr:`null=False <django.db."
"models.Field.null>` に反しません。"

msgid ""
"Support for expressing JSON ``null`` using ``Value(None, JSONField())`` was "
"added."
msgstr ""
"JSONの ``null`` を ``Value(None, JSONField())`` で表現できるようになりまし"
"た。"

msgid "Passing ``Value(\"null\")`` to express JSON ``null`` is deprecated."
msgstr ""
"JSON の ``null`` を表現するために ``Value(\"null\")`` を渡すことは非推奨で"
"す。"

msgid "Key, index, and path transforms"
msgstr "キー、インデックス、パス（経路）のトランスフォーム（変換）"

msgid ""
"To query based on a given dictionary key, use that key as the lookup name:"
msgstr ""
"指定された辞書のキーに基づいてクエリを実行するには、そのキーをルックアップ名"
"として使います:"

msgid "Multiple keys can be chained together to form a path lookup:"
msgstr ""
"複数のキーを連結して1本のルックアップパス（経路）を形成することもできます。"

msgid ""
"If the key is an integer, it will be interpreted as an index transform in an "
"array:"
msgstr ""
"キーが整数の場合は、配列のインデックスのトランスフォームとして解釈されます:"

msgid ""
"If the key you wish to query by clashes with the name of another lookup, use "
"the :lookup:`contains <jsonfield.contains>` lookup instead."
msgstr ""
"クエリしたいキーが他のルックアップ名と衝突する場合は、代わりに :lookup:"
"`contains <jsonfield.contains>` ルックアップを使用してください。"

msgid "To query for missing keys, use the ``isnull`` lookup:"
msgstr ""
"欠損したキーをクエリで探したいときは、 ``isnull`` ルックアップを使用します:"

msgid ""
"The lookup examples given above implicitly use the :lookup:`exact` lookup. "
"Key, index, and path transforms can also be chained with: :lookup:"
"`icontains`, :lookup:`endswith`, :lookup:`iendswith`, :lookup:`iexact`, :"
"lookup:`regex`, :lookup:`iregex`, :lookup:`startswith`, :lookup:"
"`istartswith`, :lookup:`lt`, :lookup:`lte`, :lookup:`gt`, and :lookup:`gte`, "
"as well as with :ref:`containment-and-key-lookups`."
msgstr ""
"上記のルックアップ例は暗黙的に :lookup:`exact` ルックアップを使用しています。"
"キー、インデックス、およびパス（経路）のトランスフォーム（変換）は、 :lookup:"
"`icontains`, :lookup:`endswith`, :lookup:`iendswith`, :lookup:`iexact`, :"
"lookup:`regex`, :lookup:`iregex`, :lookup:`startswith`, :lookup:"
"`istartswith`, :lookup:`lt`, :lookup:`lte`, :lookup:`gt`, および :lookup:"
"`gte` に加え、 :ref:`containment-and-key-lookups` とも連結できます。"

msgid "``KT()`` expressions"
msgstr "``KT()`` 式"

msgid ""
"Represents the text value of a key, index, or path transform of :class:"
"`~django.db.models.JSONField`. You can use the double underscore notation in "
"``lookup`` to chain dictionary key and index transforms."
msgstr ""
":class:`~django.db.models.JSONField` のキー、インデックス、パス（経路）のトラ"
"ンスフォーム（変換）のテキスト値を表します。 ``lookup`` で2重アンダースコア表"
"記を使用すると、辞書のキーやインデックス変換を連結できます。"

msgid "For example:"
msgstr "例えば次のようにします:"

msgid ""
"Due to the way in which key-path queries work, :meth:`~django.db.models."
"query.QuerySet.exclude` and :meth:`~django.db.models.query.QuerySet.filter` "
"are not guaranteed to produce exhaustive sets. If you want to include "
"objects that do not have the path, add the ``isnull`` lookup."
msgstr ""
"キーパスクエリの動作上、 :meth:`~django.db.models.query.QuerySet.exclude` "
"と :meth:`~django.db.models.query.QuerySet.filter` は網羅的なセットを生成する"
"ことを保証しません。パスを持たないオブジェクトを含めたい場合は、 ``isnull`` "
"ルックアップを追加してください。"

msgid ""
"Since any string could be a key in a JSON object, any lookup other than "
"those listed below will be interpreted as a key lookup. No errors are "
"raised. Be extra careful for typing mistakes, and always check your queries "
"work as you intend."
msgstr ""
"JSON オブジェクトでは、どのような文字列もキーになる可能性があるため、以下に示"
"す以外のルックアップはキーのルックアップとして解釈されます。エラーは発生しま"
"せん。タイプミスに十分注意し、クエリが意図したとおりに動作することを常に確認"
"してください。"

msgid "MariaDB and Oracle users"
msgstr "MariaDB または Oracle ユーザーの場合"

msgid ""
"Using :meth:`~django.db.models.query.QuerySet.order_by` on key, index, or "
"path transforms will sort the objects using the string representation of the "
"values. This is because MariaDB and Oracle Database do not provide a "
"function that converts JSON values into their equivalent SQL values."
msgstr ""
"キー、インデックス、パスのトランスフォームで :meth:`~django.db.models.query."
"QuerySet.order_by` を使用すると、値の文字列表現を使ってオブジェクトをソートし"
"ます。これは、MariaDB と Oracle Database が JSON 値を同等の SQL 値に変換する"
"関数を提供していないからです。"

msgid "Oracle users"
msgstr "Oracle ユーザーの場合"

msgid ""
"On Oracle Database, using ``None`` as the lookup value in an :meth:`~django."
"db.models.query.QuerySet.exclude` query will return objects that do not have "
"``null`` as the value at the given path, including objects that do not have "
"the path. On other database backends, the query will return objects that "
"have the path and the value is not ``null``."
msgstr ""
"Oracle Databaseで、 :meth:`~django.db.models.query.QuerySet.exclude` クエリ内"
"でルックアップ値として ``None`` を使用すると、指定されたパスで ``null`` でな"
"い値を持つオブジェクト、およびパスを持たないオブジェクトが返されます。他の"
"データベースバックエンドでは、クエリはパスを持ち、かつ値が ``null`` でないオ"
"ブジェクトを返します。"

msgid "PostgreSQL users"
msgstr "PostgreSQL の場合"

msgid ""
"On PostgreSQL, if only one key or index is used, the SQL operator ``->`` is "
"used. If multiple operators are used then the ``#>`` operator is used."
msgstr ""
"PostgreSQLでは、キーやインデックスが1つしか使用されない場合、SQL演算子 ``-"
">`` が使用されます。複数の演算子を使用する場合は ``#>`` 演算子が使用されま"
"す。"

msgid "SQLite users"
msgstr "SQLite ユーザーの場合"

msgid ""
"On SQLite, ``\"true\"``, ``\"false\"``, and ``\"null\"`` string values will "
"always be interpreted as ``True``, ``False``, and JSON ``null`` respectively."
msgstr ""
"SQLite では、文字列 ``\"true\"``, ``\"false\"``, ``\"null\"`` は常にそれぞれ "
"``True``, ``False``, JSON ``null`` として解釈されます。"

msgid "Containment and key lookups"
msgstr "``contain`` の概念とキーのルックアップ"

msgid "``contains``"
msgstr "``contains``"

msgid ""
"The :lookup:`contains` lookup is overridden on ``JSONField``. The returned "
"objects are those where the given ``dict`` of key-value pairs are all "
"contained in the top-level of the field. For example:"
msgstr ""
":lookup:`contains` ルックアップは ``JSONField`` でオーバーライドされます。返"
"されるオブジェクトは、与えられた ``dict`` キーと値のペアが、フィールドのトッ"
"プレベルにすべて含まれているものです。たとえば、次のようになります:"

msgid "Oracle and SQLite"
msgstr "Oracle と SQLite の場合"

msgid "``contains`` is not supported on Oracle and SQLite."
msgstr "``contains`` は Oracle と SQLite ではサポートされていません。"

msgid "``contained_by``"
msgstr "``contained_by``"

msgid ""
"This is the inverse of the :lookup:`contains <jsonfield.contains>` lookup - "
"the objects returned will be those where the key-value pairs on the object "
"are a subset of those in the value passed. For example:"
msgstr ""
"これは :lookup:`contains <jsonfield.contains>` ルックアップの逆です。そのオブ"
"ジェクト上のキーと値のペアが、引数で渡されたJSON値のサブセットになるようなオ"
"ブジェクトを返します。例えば:"

msgid "``contained_by`` is not supported on Oracle and SQLite."
msgstr "``contained_by`` は Oracle と SQLite ではサポートされていません。"

msgid "``has_key``"
msgstr "``has_key``"

msgid ""
"Returns objects where the given key is in the top-level of the data. For "
"example:"
msgstr ""
"与えられたキーがデータのトップレベルにあるオブジェクトを返します。たとえば次"
"のようになります:"

msgid "``has_keys``"
msgstr "``has_keys``"

msgid ""
"Returns objects where all of the given keys are in the top-level of the "
"data. For example:"
msgstr ""
"与えられたキーがすべて、データのトップレベルにあるオブジェクトを返します。た"
"とえば次のようになります:"

msgid "``has_any_keys``"
msgstr "``has_any_keys``"

msgid ""
"Returns objects where any of the given keys are in the top-level of the "
"data. For example:"
msgstr ""
"与えられたキーのいずれかがデータのトップレベルにあるオブジェクトを返します。"
"たとえば次のようになります:"

msgid "Complex lookups with ``Q`` objects"
msgstr "``Q`` オブジェクトを使った複雑なルックアップ"

msgid ""
"Keyword argument queries -- in :meth:`~django.db.models.query.QuerySet."
"filter`, etc. -- are \"AND\"ed together. If you need to execute more complex "
"queries (for example, queries with ``OR`` statements), you can use :class:`Q "
"objects <django.db.models.Q>`."
msgstr ""
"キーワード引数クエリ (:meth:`~django.db.models.query.QuerySet.filter` などで"
"使用されるもの) は \"AND\" 条件で結合されます。もしより複雑なクエリ（例え"
"ば、 \"OR\" 文を含むクエリ）を実行する必要がある場合、 :class:`Qオブジェクト "
"<django.db.models.Q>` を使用できます。"

msgid ""
"A :class:`Q object <django.db.models.Q>` (``django.db.models.Q``) is an "
"object used to encapsulate a collection of keyword arguments. These keyword "
"arguments are specified as in \"Field lookups\" above."
msgstr ""
":class:`Q オブジェクト <django.db.models.Q>` (``django.db.models.Q``) はキー"
"ワード引数のコレクションをカプセル化するためのオブジェクトです。これらのキー"
"ワード引数は上記の \"フィールドルックアップ\" のように指定します。"

msgid "For example, this ``Q`` object encapsulates a single ``LIKE`` query::"
msgstr ""
"たとえば、次の ``Q`` オブジェクトは、1つの ``LIKE`` クエリをカプセル化してい"
"ます。"

msgid ""
"``Q`` objects can be combined using the ``&``, ``|``, and ``^`` operators. "
"When an operator is used on two ``Q`` objects, it yields a new ``Q`` object."
msgstr ""
"``Q`` オブジェクトは ``&``, ``|``, ``^`` 演算子を使って結合できます。演算子を"
"2つの ``Q`` オブジェクトに使用すると、新しい ``Q`` オブジェクトが生成されま"
"す。"

msgid ""
"For example, this statement yields a single ``Q`` object that represents the "
"\"OR\" of two ``\"question__startswith\"`` queries::"
msgstr ""
"たとえば、次の文は2つの ``\"question__startswith\"`` の \"OR\" を表す、1つの "
"``Q`` オブジェクトを生み出します。"

msgid "This is equivalent to the following SQL ``WHERE`` clause:"
msgstr "このコードは次の SQL の ``WHERE`` 句と同等です:"

msgid ""
"You can compose statements of arbitrary complexity by combining ``Q`` "
"objects with the ``&``, ``|``, and ``^`` operators and use parenthetical "
"grouping. Also, ``Q`` objects can be negated using the ``~`` operator, "
"allowing for combined lookups that combine both a normal query and a negated "
"(``NOT``) query::"
msgstr ""
"``Q`` オブジェクトと ``&``, ``|``, ``^`` 演算子を組み合わせ、括弧でグループ化"
"することで、任意の複雑な文を作成できます。また、 ``Q`` オブジェクトは ``~`` "
"演算子を使用して否定することができ、通常のクエリと否定された (``NOT``) クエリ"
"の両方を組み合わせてルックアップできます:"

msgid ""
"Each lookup function that takes keyword-arguments (e.g. :meth:`~django.db."
"models.query.QuerySet.filter`, :meth:`~django.db.models.query.QuerySet."
"exclude`, :meth:`~django.db.models.query.QuerySet.get`) can also be passed "
"one or more ``Q`` objects as positional (not-named) arguments. If you "
"provide multiple ``Q`` object arguments to a lookup function, the arguments "
"will be \"AND\"ed together. For example::"
msgstr ""
"キーワード引数を取るルックアップ関数 (例えば :meth:`~django.db.models.query."
"QuerySet.filter`, :meth:`~django.db.models.query.QuerySet.exclude`, :meth:"
"`~django.db.models.query.QuerySet.get`) には、1つ以上の ``Q`` オブジェクトを"
"（名前なし）位置引数として渡すこともできます。複数の ``Q`` オブジェクトの引数"
"をルックアップ関数に渡すと、引数は \"AND\" されます。たとえば、次のようになり"
"ます:"

msgid "... roughly translates into the SQL:"
msgstr "... これは大ざっぱにSQLに翻訳すると次のようになります:"

msgid ""
"Lookup functions can mix the use of ``Q`` objects and keyword arguments. All "
"arguments provided to a lookup function (be they keyword arguments or ``Q`` "
"objects) are \"AND\"ed together. However, if a ``Q`` object is provided, it "
"must precede the definition of any keyword arguments. For example::"
msgstr ""
"ルックアップ関数は ``Q`` オブジェクトとキーワード引数を混ぜて使うことができま"
"す。ルックアップ関数に提供されたすべての引数は（キーワード引数でも ``Q`` オブ"
"ジェクトでも） \"AND\" で結合されます。しかし、もし ``Q`` オブジェクトが指定"
"された場合は、キーワード引数の定義よりも前に指定する必要があります。たとえば"
"次のようにします:"

msgid "... would be a valid query, equivalent to the previous example; but::"
msgstr "...上記は有効なクエリで、1つ前の例と同じです。しかし、:"

msgid "... would not be valid."
msgstr "...これは無効なクエリです。"

msgid ""
"The :source:`OR lookups examples <tests/or_lookups/tests.py>` in Django's "
"unit tests show some possible uses of ``Q``."
msgstr ""
"Django のユニットテストにある :source:`OR ルックアップの例 <tests/or_lookups/"
"tests.py>` は ``Q`` の可能な使い方をいくつか示しています。"

msgid "Comparing objects"
msgstr "オブジェクトを比較する"

msgid ""
"To compare two model instances, use the standard Python comparison operator, "
"the double equals sign: ``==``. Behind the scenes, that compares the primary "
"key values of two models."
msgstr ""
"2つのモデルインスタンスを比較するには、Pythonの標準的な比較演算子である二重の"
"等号 ``==`` を使います。裏では、2つのモデルの主キーの値を比較します。"

msgid ""
"Using the ``Entry`` example above, the following two statements are "
"equivalent:"
msgstr "上記の ``Entry`` を例にすると、次の2つの文は等価です:"

msgid ""
"If a model's primary key isn't called ``id``, no problem. Comparisons will "
"always use the primary key, whatever it's called. For example, if a model's "
"primary key field is called ``name``, these two statements are equivalent:"
msgstr ""
"モデルの主キーが ``id`` という名前でなくても問題ありません。どのような名前で"
"あっても、比較は常に主キーを使用します。たとえば、モデルの主キーフィールドが "
"``name`` と呼ばれている場合、これら2つの文は等価です:"

msgid "Deleting objects"
msgstr "オブジェクトを削除する"

msgid ""
"The delete method, conveniently, is named :meth:`~django.db.models.Model."
"delete`. This method immediately deletes the object and returns the number "
"of objects deleted and a dictionary with the number of deletions per object "
"type. Example:"
msgstr ""
"削除メソッドは便利なことに :meth:`~django.db.models.Model.delete` という名前"
"です。このメソッドはオブジェクトを即座に削除し、削除されたオブジェクトの数"
"と、オブジェクトの種類ごとの削除数を辞書として返します。例:"

msgid ""
"You can also delete objects in bulk. Every :class:`~django.db.models.query."
"QuerySet` has a :meth:`~django.db.models.query.QuerySet.delete` method, "
"which deletes all members of that :class:`~django.db.models.query.QuerySet`."
msgstr ""
"オブジェクトを一括で削除することもできます。すべての :class:`~django.db."
"models.query.QuerySet` は :meth:`~django.db.models.query.QuerySet.delete` メ"
"ソッドを持っており、その :class:`~django.db.models.query.QuerySet` のすべての"
"メンバーを削除します。"

msgid ""
"For example, this deletes all ``Entry`` objects with a ``pub_date`` year of "
"2005:"
msgstr ""
"たとえば、これは ``pub_date`` が2005年の ``Entry`` オブジェクトをすべて削除し"
"ます:"

msgid ""
"Keep in mind that this will, whenever possible, be executed purely in SQL, "
"and so the ``delete()`` methods of individual object instances will not "
"necessarily be called during the process. If you've provided a custom "
"``delete()`` method on a model class and want to ensure that it is called, "
"you will need to \"manually\" delete instances of that model (e.g., by "
"iterating over a :class:`~django.db.models.query.QuerySet` and calling "
"``delete()`` on each object individually) rather than using the bulk :meth:"
"`~django.db.models.query.QuerySet.delete` method of a :class:`~django.db."
"models.query.QuerySet`."
msgstr ""
"注意してほしいのは、この処理は可能な場合には純粋に SQL で実行され、個別のオブ"
"ジェクトインスタンスの ``delete()`` メソッドはプロセス中に呼ぶ必要はないとい"
"うことです。モデルクラスで独自の ``delete()`` メソッドを定義していて確実に呼"
"び出されるようにしたい場合、:class:`~django.db.models.query.QuerySet` で一括"
"の :meth:`~django.db.models.query.QuerySet.delete` を使用するのではなく、その"
"モデルのインスタンスを \"手動で\" 削除する必要があります (例えば、:class:"
"`~django.db.models.query.QuerySet` を繰り返し処理し、各オブジェクトで個別に "
"``delete()`` を呼び出します)。"

msgid ""
"When Django deletes an object, by default it emulates the behavior of the "
"SQL constraint ``ON DELETE CASCADE`` -- in other words, any objects which "
"had foreign keys pointing at the object to be deleted will be deleted along "
"with it. For example::"
msgstr ""
"Django がオブジェクトを削除するとき、デフォルトでは SQL の制限 ``ON DELETE "
"CASCADE`` の動作をエミュレートします -- 言い換えると、削除するオブジェクトを"
"指している外部キーを持つすべてのオブジェクトは、ともに削除されることになりま"
"す。例えば::"

msgid ""
"This cascade behavior is customizable via the :attr:`~django.db.models."
"ForeignKey.on_delete` argument to the :class:`~django.db.models.ForeignKey`."
msgstr ""
"このカスケードの動作は、:class:`~django.db.models.ForeignKey` に対する :attr:"
"`~django.db.models.ForeignKey.on_delete` 属性によってカスタマイズできます。"

msgid ""
"Note that :meth:`~django.db.models.query.QuerySet.delete` is the only :class:"
"`~django.db.models.query.QuerySet` method that is not exposed on a :class:"
"`~django.db.models.Manager` itself. This is a safety mechanism to prevent "
"you from accidentally requesting ``Entry.objects.delete()``, and deleting "
"*all* the entries. If you *do* want to delete all the objects, then you have "
"to explicitly request a complete query set::"
msgstr ""
":meth:`~django.db.models.query.QuerySet.delete` は、:class:`~django.db."
"models.Manager` で露出していない唯一の :class:`~django.db.models.query."
"QuerySet` のメソッドです。これは、``Entry.objects.delete()`` を誤ってリクエス"
"トして *すべての* entry を削除してしまうことを防ぐ安全上の仕組みです。すべて"
"のオブジェクトを削除 *したい* 場合、明示的に完全なクエリセットをリクエストす"
"る必要があります::"

msgid "Copying model instances"
msgstr "モデルのインスタンスを複製する"

msgid ""
"Although there is no built-in method for copying model instances, it is "
"possible to easily create new instance with all fields' values copied. In "
"the simplest case, you can set ``pk`` to ``None`` and :attr:`_state.adding "
"<django.db.models.Model._state>` to ``True``. Using our blog example::"
msgstr ""
"モデルインスタンスをコピーする組み込みメソッドはありませんが、全てのフィール"
"ドの値をコピーした新しいインスタンスは簡単に作ることができます。最も単純な"
"ケースでは、 ``pk`` を ``None`` に設定し、 :attr:`_state.adding <django.db."
"models.Model._state>` を ``True`` に設定します。ブログの例で説明すると、次の"
"ようになります:"

msgid ""
"Things get more complicated if you use inheritance. Consider a subclass of "
"``Blog``::"
msgstr ""
"継承を使っている場合、もっと複雑になります。``Blog`` のサブクラスを考えると:"

msgid ""
"Due to how inheritance works, you have to set both ``pk`` and ``id`` to "
"``None``, and ``_state.adding`` to ``True``::"
msgstr ""
"継承のしくみ上、``pk`` と ``id`` の両方を ``None`` に設定し、 ``_state."
"adding`` を ``True`` に設定する必要があります:"

msgid ""
"This process doesn't copy relations that aren't part of the model's database "
"table. For example, ``Entry`` has a ``ManyToManyField`` to ``Author``. After "
"duplicating an entry, you must set the many-to-many relations for the new "
"entry::"
msgstr ""
"この処理では、モデルのデータベーステーブルの一部ではないリレーションは複製し"
"ません。例えば、``Entry`` は ``Author`` への ``ManyToManyField`` を持ちます。"
"entry の複製後、新しい entry に対して多対多のリレーションをセットする必要があ"
"ります::"

msgid ""
"For a ``OneToOneField``, you must duplicate the related object and assign it "
"to the new object's field to avoid violating the one-to-one unique "
"constraint. For example, assuming ``entry`` is already duplicated as above::"
msgstr ""
"``OneToOneField`` については、1 対 1 のユニーク制限への違反を避けるため、関係"
"オブジェクトを複製して新しいオブジェクトのフィールドに割り当てる必要がありま"
"す。例えば、``entry`` が上記のようにすでに複製されているものとすると::"

msgid "Updating multiple objects at once"
msgstr "複数のオブジェクトを一括で更新する"

msgid ""
"Sometimes you want to set a field to a particular value for all the objects "
"in a :class:`~django.db.models.query.QuerySet`. You can do this with the :"
"meth:`~django.db.models.query.QuerySet.update` method. For example::"
msgstr ""
":class:`~django.db.models.query.QuerySet` のすべてのオブジェクトに、特定の値"
"をセットしたい場合があります。:meth:`~django.db.models.query.QuerySet."
"update` を使えば実現できます。例えば::"

msgid ""
"You can only set non-relation fields and :class:`~django.db.models."
"ForeignKey` fields using this method. To update a non-relation field, "
"provide the new value as a constant. To update :class:`~django.db.models."
"ForeignKey` fields, set the new value to be the new model instance you want "
"to point to. For example:"
msgstr ""
"このメソッドを使ってセットできるのは非リレーションフィールドと :class:"
"`~django.db.models.ForeignKey` フィールドのみです。非リレーションフィールドを"
"更新するには、新しい値を定数として渡します。 :class:`~django.db.models."
"ForeignKey` フィールドを更新するには、結び付けたい新しいモデルインスタンスを"
"新しい値にセットしてください。たとえば、次のようにします:"

msgid ""
"The ``update()`` method is applied instantly and returns the number of rows "
"matched by the query (which may not be equal to the number of rows updated "
"if some rows already have the new value). The only restriction on the :class:"
"`~django.db.models.query.QuerySet` being updated is that it can only access "
"one database table: the model's main table. You can filter based on related "
"fields, but you can only update columns in the model's main table. Example:"
msgstr ""
"``update()`` は即座に適用され、クエリにマッチした行数を返します (行はすでに新"
"しい値を持っていることがあるので、更新された行の数と一致するとは限りません)。"
"更新する :class:`~django.db.models.query.QuerySet` の唯一の制限は、1 つのデー"
"タベーステーブル (モデルのメインテーブル) にしかアクセスできないことです。リ"
"レーション先のフィールドでフィルタすることもできますが、モデルのメインテーブ"
"ルのカラムしか更新できません。例えば:"

msgid ""
"Be aware that the ``update()`` method is converted directly to an SQL "
"statement. It is a bulk operation for direct updates. It doesn't run any :"
"meth:`~django.db.models.Model.save` methods on your models, or emit the "
"``pre_save`` or ``post_save`` signals (which are a consequence of calling :"
"meth:`~django.db.models.Model.save`), or honor the :attr:`~django.db.models."
"DateField.auto_now` field option. If you want to save every item in a :class:"
"`~django.db.models.query.QuerySet` and make sure that the :meth:`~django.db."
"models.Model.save` method is called on each instance, you don't need any "
"special function to handle that. Loop over them and call :meth:`~django.db."
"models.Model.save`::"
msgstr ""
"``update()`` は直接 SQL文に変換されることに注意してください。これは、直接更新"
"する一括操作です。 :meth:`~django.db.models.Model.save` を実行することは一切"
"なく、(:meth:`~django.db.models.Model.save` を呼び出した結果である) "
"``pre_save`` や ``post_save`` のシグナルも出しません。 :attr:`~django.db."
"models.DateField.auto_now` フィールドオプションも実施しません。 :class:"
"`~django.db.models.query.QuerySet` のすべてのアイテムを保存し、各インスタンス"
"で :meth:`~django.db.models.Model.save` メソッドが確実に呼ばれるようにしたい"
"場合、特別な機能は不要です。これらをループし、 :meth:`~django.db.models."
"Model.save` を呼び出してください:"

msgid ""
"Calls to update can also use :class:`F expressions <django.db.models.F>` to "
"update one field based on the value of another field in the model. This is "
"especially useful for incrementing counters based upon their current value. "
"For example, to increment the pingback count for every entry in the blog:"
msgstr ""
"update の呼び出しでは、 :class:`F 式 <django.db.models.F>` を使ってモデル内の"
"別のフィールドの値に基づいてフィールドを更新することもできます。これは、現在"
"値に基づいてカウンタを増加させる場合に特に有用です。例えば、ブログの各 entry "
"のpingback カウントを増加させるには:"

msgid ""
"However, unlike ``F()`` objects in filter and exclude clauses, you can't "
"introduce joins when you use ``F()`` objects in an update -- you can only "
"reference fields local to the model being updated. If you attempt to "
"introduce a join with an ``F()`` object, a ``FieldError`` will be raised:"
msgstr ""
"しかし、filter および exclude 句での ``F()`` オブジェクトとは異なり、更新で "
"``F()`` オブジェクトを使うときには join を導入することはできません -- できる"
"のは、更新されるモデルに関係付いたフィールドを参照することだけです。 ``F()`` "
"オブジェクトで join の導入を試みた場合、 ``FieldError`` が送出されます:"

msgid "Related objects"
msgstr "リレーション先のオブジェクト"

msgid ""
"When you define a relationship in a model (i.e., a :class:`~django.db.models."
"ForeignKey`, :class:`~django.db.models.OneToOneField`, or :class:`~django.db."
"models.ManyToManyField`), instances of that model will have a convenient API "
"to access the related object(s)."
msgstr ""
"モデルでリレーションシップを定義した場合 (例えば :class:`~django.db.models."
"ForeignKey`、:class:`~django.db.models.OneToOneField`、:class:`~django.db."
"models.ManyToManyField` の 3 つです)、そのモデルのインスタンスはリレーション"
"先のオブジェクトにアクセスするための便利な API を持ちます。"

msgid ""
"Using the models at the top of this page, for example, an ``Entry`` object "
"``e`` can get its associated ``Blog`` object by accessing the ``blog`` "
"attribute: ``e.blog``."
msgstr ""
"このページで最初に提示したモデルを使うと、例えば、``Entry`` オブジェクト "
"``e`` は、``blog`` 属性 (``e.blog``) にアクセスすることで、関連付けられた "
"``Blog`` オブジェクトを得ることができます。"

msgid ""
"(Behind the scenes, this functionality is implemented by Python :doc:"
"`descriptors <python:howto/descriptor>`. This shouldn't really matter to "
"you, but we point it out here for the curious.)"
msgstr ""
"(裏では、この機能は Python :doc:`descriptors <python:howto/descriptor>` に"
"よって実装されています。これはとくに重要ではありませんが、興味がある人のため"
"にここに書いておきます)。"

msgid ""
"Django also creates API accessors for the \"other\" side of the relationship "
"-- the link from the related model to the model that defines the "
"relationship. For example, a ``Blog`` object ``b`` has access to a list of "
"all related ``Entry`` objects via the ``entry_set`` attribute: ``b.entry_set."
"all()``."
msgstr ""
"リレーションの \"反対\" 側のために、Django は API アクセサも提供します -- リ"
"レーションを定義するモデルに対するリレーション先モデルからのリンクです。例え"
"ば、``Blog`` オブジェクト ``b`` は、``entry_set`` の属性 (``b.entry_set."
"all()``) を通じて、すべての関係 ``Entry`` オブジェクトのリストへにアクセスで"
"きます。"

msgid ""
"All examples in this section use the sample ``Blog``, ``Author`` and "
"``Entry`` models defined at the top of this page."
msgstr ""
"このセクションのすべての例で使われたサンプルの ``Blog``、``Author``、"
"``Entry`` モデルは、このページの最初で定義したものです。"

msgid "One-to-many relationships"
msgstr "一対多のリレーションシップ"

msgid "Forward"
msgstr "順方向のアクセス"

msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of that "
"model will have access to the related (foreign) object via an attribute of "
"the model."
msgstr ""
"モデルに :class:`~django.db.models.ForeignKey` がある場合、そのモデルのインス"
"タンスは、モデルの属性を介してリレーション先の（外部）オブジェクトにアクセス"
"できます。"

msgid ""
"You can get and set via a foreign-key attribute. As you may expect, changes "
"to the foreign key aren't saved to the database until you call :meth:"
"`~django.db.models.Model.save`. Example:"
msgstr ""
"外部キー属性で取得したりセットしたりできます。お察しの通り、外部キーの変更"
"は :meth:`~django.db.models.Model.save` を呼び出すまでデータベースに保存され"
"ません。たとえば次のようになります:"

msgid ""
"If a :class:`~django.db.models.ForeignKey` field has ``null=True`` set (i."
"e., it allows ``NULL`` values), you can assign ``None`` to remove the "
"relation. Example:"
msgstr ""
":class:`~django.db.models.ForeignKey` フィールドに ``null=True`` が設定されて"
"いる場合 (つまり、 ``NULL`` 値を許可している場合)、 ``None`` を代入することで"
"リレーションを削除できます。例"

msgid ""
"Forward access to one-to-many relationships is cached the first time the "
"related object is accessed. Subsequent accesses to the foreign key on the "
"same object instance are cached. Example:"
msgstr ""
"一対多のリレーションシップへの順方向のアクセスは、リレーション先オブジェクト"
"に最初にアクセスしたときにキャッシュされます。同じオブジェクトインスタンスの"
"外部キーへのその後のアクセスはキャッシュされます。例えば次のコードはキャッ"
"シュを使います:"

msgid ""
"Note that the :meth:`~django.db.models.query.QuerySet.select_related` :class:"
"`~django.db.models.query.QuerySet` method recursively prepopulates the cache "
"of all one-to-many relationships ahead of time. Example:"
msgstr ""
":meth:`~django.db.models.query.QuerySet.select_related` :class:`~django.db."
"models.query.QuerySet` メソッドは、全ての一対多のリレーションシップのキャッ"
"シュを再帰的に先読みします。たとえば次のようになります:"

msgid "Following relationships \"backward\""
msgstr "\"逆方向\" のリレーションシップ"

msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of the "
"foreign-key model will have access to a :class:`~django.db.models.Manager` "
"that returns all instances of the first model. By default, this :class:"
"`~django.db.models.Manager` is named ``FOO_set``, where ``FOO`` is the "
"source model name, lowercased. This :class:`~django.db.models.Manager` "
"returns ``QuerySets``, which can be filtered and manipulated as described in "
"the \"Retrieving objects\" section above."
msgstr ""
"モデルが :class:`~django.db.models.ForeignKey` を持つ場合、外部キーのモデルの"
"インスタンスは最初のモデルのインスタンスを返す :class:`~django.db.models."
"Manager` にアクセスできます。デフォルトでは、この :class:`~django.db.models."
"Manager` は ``FOO_set`` と名付けられており、``FOO`` には元のモデル名が小文字"
"で入ります。この :class:`~django.db.models.Manager` は ``QuerySets`` を返し、"
"上述の \"オブジェクトを取り出す\" セクションで説明したようにフィルタおよび操"
"作が可能です。"

msgid ""
"You can override the ``FOO_set`` name by setting the :attr:`~django.db."
"models.ForeignKey.related_name` parameter in the :class:`~django.db.models."
"ForeignKey` definition. For example, if the ``Entry`` model was altered to "
"``blog = ForeignKey(Blog, on_delete=models.CASCADE, "
"related_name='entries')``, the above example code would look like this:"
msgstr ""
":class:`~django.db.models.ForeignKey` 定義の :attr:`~django.db.models."
"ForeignKey.related_name` パラメータを指定することで、 ``FOO_set`` の名前を上"
"書きできます。たとえば、 ``Entry`` モデルを ``blog = ForeignKey(Blog, "
"on_delete=models.CASCADE, related_name='entries')`` に変更した場合、上記の"
"コード例は次のようになります:"

msgid "Using a custom reverse manager"
msgstr "カスタムのリバースマネージャを使う"

msgid ""
"By default the :class:`~django.db.models.fields.related.RelatedManager` used "
"for reverse relations is a subclass of the :ref:`default manager <manager-"
"names>` for that model. If you would like to specify a different manager for "
"a given query you can use the following syntax::"
msgstr ""
"デフォルトでは、逆方向のリレーションシップに使われる :class:`~django.db."
"models.fields.related.RelatedManager` はモデルに対する :ref:`デフォルト マ"
"ネージャ <manager-names>` のサブクラスです。与えられたクエリに対して別のマ"
"ネージャを指定したい場合、以下の構文が使用できます:"

msgid ""
"If ``EntryManager`` performed default filtering in its ``get_queryset()`` "
"method, that filtering would apply to the ``all()`` call."
msgstr ""
"``EntryManager`` が、``get_queryset()`` メソッドでデフォルトのフィルタ動作を"
"した場合、``all()`` の呼び出しに適用されます。"

msgid ""
"Specifying a custom reverse manager also enables you to call its custom "
"methods::"
msgstr ""
"カスタムリバースマネージャを指定すると、そのカスタムメソッドを呼び出すことも"
"できます:"

msgid "Interaction with prefetching"
msgstr "プリフェッチ（先読み）との関係"

msgid ""
"When calling :meth:`~django.db.models.query.QuerySet.prefetch_related` with "
"a reverse relation, the default manager will be used. If you want to "
"prefetch related objects using a custom reverse manager, use :class:"
"`Prefetch() <django.db.models.Prefetch>`. For example::"
msgstr ""
"逆リレーションを指定して :meth:`~django.db.models.query.QuerySet."
"prefetch_related` をコールすると、 デフォルトのマネージャが使用されます。カス"
"タムのリバースマネージャを使用して リレーション先のオブジェクトをプリフェッチ"
"したい場合は、 :class:`Prefetch() <django.db.models.Prefetch>` を使用します。"
"たとえば次のようになります:"

msgid "Additional methods to handle related objects"
msgstr "リレーション先オブジェクトを処理する他のメソッド"

msgid ""
"In addition to the :class:`~django.db.models.query.QuerySet` methods defined "
"in \"Retrieving objects\" above, the :class:`~django.db.models.ForeignKey` :"
"class:`~django.db.models.Manager` has additional methods used to handle the "
"set of related objects. A synopsis of each is below, and complete details "
"can be found in the :doc:`related objects reference </ref/models/relations>`."
msgstr ""
"上述の \"オブジェクトを取り出す\" で定義した :class:`~django.db.models.query."
"QuerySet` メソッドに加えて、:class:`~django.db.models.ForeignKey` :class:"
"`~django.db.models.Manager` はリレーション先オブジェクトのセットを処理するた"
"めに使われる他のメソッドを持っています。それぞれの概略は以下の通りです。完全"
"な詳細は :doc:`リレーション先オブジェクトのリファレンス </ref/models/"
"relations>` で確認できます。"

msgid "``add(obj1, obj2, ...)``"
msgstr "``add(obj1, obj2, ...)``"

msgid "Adds the specified model objects to the related object set."
msgstr ""
"指定したモデルオブジェクトをリレーション先オブジェクトのセットに追加します。"

msgid "``create(**kwargs)``"
msgstr "``create(**kwargs)``"

msgid ""
"Creates a new object, saves it and puts it in the related object set. "
"Returns the newly created object."
msgstr ""
"新しいオブジェクトを作成、保存して、リレーション先オブジェクトのセットに格納"
"します。新しく作成されたオブジェクトを返します。"

msgid "``remove(obj1, obj2, ...)``"
msgstr "``remove(obj1, obj2, ...)``"

msgid "Removes the specified model objects from the related object set."
msgstr ""
"リレーション先オブジェクトのセットから、指定したモデルオブジェクトを削除しま"
"す。"

msgid "``clear()``"
msgstr "``clear()``"

msgid "Removes all objects from the related object set."
msgstr ""
"リレーション先オブジェクトのセットからすべてのオブジェクトを削除します。"

msgid "``set(objs)``"
msgstr "``set(objs)``"

msgid "Replace the set of related objects."
msgstr "リレーション先オブジェクトのセットを置き換えます。"

msgid ""
"To assign the members of a related set, use the ``set()`` method with an "
"iterable of object instances. For example, if ``e1`` and ``e2`` are "
"``Entry`` instances::"
msgstr ""
"リレーション先のセットのメンバーを代入するには、オブジェクトインスタンスのイ"
"テラブルとともに ``set()`` メソッドを使ってください。 例えば、``e1`` と "
"``e2`` が ``Entry`` のインスタンスだとして:"

msgid ""
"If the ``clear()`` method is available, any preexisting objects will be "
"removed from the ``entry_set`` before all objects in the iterable (in this "
"case, a list) are added to the set. If the ``clear()`` method is *not* "
"available, all objects in the iterable will be added without removing any "
"existing elements."
msgstr ""
"もし ``clear()`` メソッドが利用可能なら、既存のオブジェクトは ``entry_set`` "
"から削除された後、イテラブル (この場合はリスト) のすべてのオブジェクトがセッ"
"トに追加されます。もし ``clear()`` メソッドが利用可能 *でない* 場合は、既存の"
"要素を削除することなく、イテラブル内のすべてのオブジェクトが追加されます。"

msgid ""
"Each \"reverse\" operation described in this section has an immediate effect "
"on the database. Every addition, creation and deletion is immediately and "
"automatically saved to the database."
msgstr ""
"このセクションで説明した \"逆方向\" の操作は、すべて即座にデータベースに反映"
"されます。すべての追加、作成、削除の操作は自動的にデータベースに保存されま"
"す。"

msgid ""
"Both ends of a many-to-many relationship get automatic API access to the "
"other end. The API works similar to a \"backward\" one-to-many relationship, "
"above."
msgstr ""
"多対多リレーションシップの両方の側で、もう片方に対する自動的な API アクセスを"
"使えます。API は、上述の \"逆方向\" の1 対多リレーションシップと似た形で動作"
"します。"

msgid ""
"One difference is in the attribute naming: The model that defines the :class:"
"`~django.db.models.ManyToManyField` uses the attribute name of that field "
"itself, whereas the \"reverse\" model uses the lowercased model name of the "
"original model, plus ``'_set'`` (just like reverse one-to-many "
"relationships)."
msgstr ""
"一つの違いは属性の命名です。 :class:`~django.db.models.ManyToManyField` を定"
"義するモデルでは、そのフィールドの属性名そのものを使いますが、\"逆\" モデルで"
"は元のモデルの小文字のモデル名に ``'_set'`` を加えたものを使います (逆の一対"
"多リレーションシップと同じです)。"

msgid "An example makes this easier to understand::"
msgstr "例を挙げるとわかりやすいでしょう:"

msgid ""
"Like :class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` can specify :attr:`~django.db.models.ManyToManyField."
"related_name`. In the above example, if the :class:`~django.db.models."
"ManyToManyField` in ``Entry`` had specified ``related_name='entries'``, then "
"each ``Author`` instance would have an ``entries`` attribute instead of "
"``entry_set``."
msgstr ""
":class:`~django.db.models.ForeignKey` と同様に、:class:`~django.db.models."
"ManyToManyField` も :attr:`~django.db.models.ManyToManyField.related_name` を"
"指定できます。上記の例で、もし ``Entry`` の :class:`~django.db.models."
"ManyToManyField` が ``related_name='entries'`` を指定していた場合、各 "
"``Author`` インスタンスは ``entry_set`` の代わりに ``entries`` 属性を持つこと"
"になります。"

msgid ""
"Another difference from one-to-many relationships is that in addition to "
"model instances,  the ``add()``, ``set()``, and ``remove()`` methods on many-"
"to-many relationships accept primary key values. For example, if ``e1`` and "
"``e2`` are ``Entry`` instances, then these ``set()`` calls work identically::"
msgstr ""
"一対多のリレーションシップとのもう一つの違いは、モデルインスタンスに加えて、"
"多対多のリレーションシップの ``add()``, ``set()``, ``remove()`` メソッドでも"
"主キーの値を受け付けることです。たとえば、 ``e1`` と ``e2`` が ``Entry`` イン"
"スタンスである場合、これらの ``set()`` 呼び出しは同じように動作します:"

msgid ""
"One-to-one relationships are very similar to many-to-one relationships. If "
"you define a :class:`~django.db.models.OneToOneField` on your model, "
"instances of that model will have access to the related object via an "
"attribute of the model."
msgstr ""
"一対一のリレーションシップは多対一のリレーションシップとよく似ています。モデ"
"ルに :class:`~django.db.models.OneToOneField` を定義すると、そのモデルのイン"
"スタンスはモデルの属性を介してリレーション先オブジェクトにアクセスできるよう"
"になります。"

msgid ""
"The difference comes in \"reverse\" queries. The related model in a one-to-"
"one relationship also has access to a :class:`~django.db.models.Manager` "
"object, but that :class:`~django.db.models.Manager` represents a single "
"object, rather than a collection of objects::"
msgstr ""
"違いは \"逆\" クエリにあります。一対一のリレーション先モデルも :class:"
"`~django.db.models.Manager` オブジェクトにアクセスできますが、 :class:"
"`~django.db.models.Manager` はオブジェクトのコレクションではなく、単一のオブ"
"ジェクトを表します："

msgid ""
"If no object has been assigned to this relationship, Django will raise a "
"``DoesNotExist`` exception."
msgstr ""
"このリレーションシップにオブジェクトが割り当てられていない場合、 Django は "
"``DoesNotExist`` 例外を発生させます。"

msgid ""
"Instances can be assigned to the reverse relationship in the same way as you "
"would assign the forward relationship::"
msgstr ""
"インスタンスは、順方向のリレーションシップを割り当てるのと同じ方法で、逆方向"
"のリレーションシップに割り当てることができます:"

msgid "How are the backward relationships possible?"
msgstr "どうやって逆方向のリレーションシップを実現しているのか？"

msgid ""
"Other object-relational mappers require you to define relationships on both "
"sides. The Django developers believe this is a violation of the DRY (Don't "
"Repeat Yourself) principle, so Django only requires you to define the "
"relationship on one end."
msgstr ""
"他のオブジェクトリレーショナルマッパでは、リレーションシップを両サイドで定義"
"する必要があります。Django の開発陣はこれは DRY (Don't Repeat Yourself) の原"
"則に反していると考えており、Django では片側でリレーションシップを定義する必要"
"があるだけとなりました。"

msgid ""
"But how is this possible, given that a model class doesn't know which other "
"model classes are related to it until those other model classes are loaded?"
msgstr ""
"しかし、どのようにして実現しているのでしょうか? モデルクラスは、他のどのモデ"
"ルクラスと関係しているのか、関係先のモデルクラスが読み込まれるまで分からない"
"はずです。"

msgid ""
"The answer lies in the :data:`app registry <django.apps.apps>`. When Django "
"starts, it imports each application listed in :setting:`INSTALLED_APPS`, and "
"then the ``models`` module inside each application. Whenever a new model "
"class is created, Django adds backward-relationships to any related models. "
"If the related models haven't been imported yet, Django keeps tracks of the "
"relationships and adds them when the related models eventually are imported."
msgstr ""
"答えは :data:`アプリレジストリ <django.apps.apps>` にあります。Djangoが起動す"
"ると、:setting:`INSTALLED_APPS` に記載された各アプリケーションをインポート"
"し、その後各アプリケーション内の ``models`` モジュールをインポートします。新"
"しいモデルクラスが作成されるたびに、Djangoは関連するモデルに逆方向のリレー"
"ションシップを追加します。リレーション先のモデルがまだインポートされていない"
"場合、Djangoはこのリレーションシップを追跡し、リレーション先のモデルが最終的"
"にインポートされたときにそれらを追加します。"

msgid ""
"For this reason, it's particularly important that all the models you're "
"using be defined in applications listed in :setting:`INSTALLED_APPS`. "
"Otherwise, backwards relations may not work properly."
msgstr ""
"この理由により、:setting:`INSTALLED_APPS` にリストアップするアプリケーション"
"内に、使おうとしているモデルをすべて定義することが特に重要となります。そうし"
"ないと、逆方向のリレーションがうまく動作しなくなります。"

msgid "Queries over related objects"
msgstr "リレーション先オブジェクトをまたいだクエリ"

msgid ""
"Queries involving related objects follow the same rules as queries involving "
"normal value fields. When specifying the value for a query to match, you may "
"use either an object instance itself, or the primary key value for the "
"object."
msgstr ""
"リレーション先オブジェクトを含むクエリは、通常の値フィールドを含むクエリと同"
"じルールに従います。クエリにマッチするための値を指定する際、オブジェクトイン"
"スタンス自体かオブジェクトの主キー値のどちらかを使用します。"

msgid ""
"For example, if you have a Blog object ``b`` with ``id=5``, the following "
"three queries would be identical::"
msgstr ""
"例えば、``id=5`` の Blog オブジェクト ``b`` がある場合、以下の 3 つのクエリは"
"同一となります:"

msgid "Falling back to raw SQL"
msgstr "素の SQL にフォールバックする"

msgid ""
"If you find yourself needing to write an SQL query that is too complex for "
"Django's database-mapper to handle, you can fall back on writing SQL by "
"hand. Django has a couple of options for writing raw SQL queries; see :doc:`/"
"topics/db/sql`."
msgstr ""
"Django のデータベースマッパが扱うには複雑すぎる SQL クエリを記述する必要があ"
"る場合、手書きで SQL を書くことができます。Django には、素の SQL クエリを記述"
"するための方法がいくつかあります; :doc:`/topics/db/sql` を参照してください。"

msgid ""
"Finally, it's important to note that the Django database layer is merely an "
"interface to your database. You can access your database via other tools, "
"programming languages or database frameworks; there's nothing Django-"
"specific about your database."
msgstr ""
"最後に、覚えておいてほしい重要な点は、Django のデータベースレイヤはあなたの"
"データベースに対する単なるインターフェースでしかないということです。あなた"
"は、他のツール、プログラミング言語、データベースフレームワークなどを通じて"
"データベースを操作することもできます; データベースに関して Django 特有のこと"
"は何もありません。"

msgid "Search"
msgstr "検索"

msgid ""
"A common task for web applications is to search some data in the database "
"with user input. In a simple case, this could be filtering a list of objects "
"by a category. A more complex use case might require searching with "
"weighting, categorization, highlighting, multiple languages, and so on. This "
"document explains some of the possible use cases and the tools you can use."
msgstr ""
"ウェブアプリケーションの一般的なタスクは、ユーザーからの入力を用いてデータ"
"ベース内のデータを検索することです。簡単なケースなら、オブジェクトのリストを"
"カテゴリごとにフィルタリングすることで実現できるかもしれません。しかし、もっ"
"と複雑なユースケースでは、重み付き検索、カテゴリー分け、ハイライト、複数言語"
"対応などが必要になることもあります。このドキュメントでは、そのようなユース"
"ケースについて説明するとともに、利用できるツールを紹介します。"

msgid "We'll refer to the same models used in :doc:`/topics/db/queries`."
msgstr ""
"ここでは :doc:`/topics/db/queries` で使われたのと同じモデルを使って説明しま"
"す。"

msgid "Use Cases"
msgstr "ユースケース"

msgid "Standard textual queries"
msgstr "標準的なテキストのクエリ"

msgid ""
"Text-based fields have a selection of matching operations. For example, you "
"may wish to allow lookup up an author like so:"
msgstr ""
"テキストベースのフィールドには、マッチング処理の選択肢があります。たとえば、"
"次のように著者をルックアップしたいと思うかも知れません:"

msgid ""
"This is a very fragile solution as it requires the user to know an exact "
"substring of the author's name. A better approach could be a case-"
"insensitive match (:lookup:`icontains`), but this is only marginally better."
msgstr ""
"これは非常に弱い解決方法です。なぜなら、ユーザーが著者名の正確な部分文字列を"
"知っている必要があるからです。case-insensitive なマッチ (:lookup:"
"`icontains`) を利用すれば少しはましになりますが、ほとんど違いはありません。"

msgid "A database's more advanced comparison functions"
msgstr "データベースが持つ高度な比較関数"

msgid ""
"If you're using PostgreSQL, Django provides :doc:`a selection of database "
"specific tools </ref/contrib/postgres/search>` to allow you to leverage more "
"complex querying options. Other databases have different selections of "
"tools, possibly via plugins or user-defined functions. Django doesn't "
"include any support for them at this time. We'll use some examples from "
"PostgreSQL to demonstrate the kind of functionality databases may have."
msgstr ""
"PostgreSQL を使っている場合、 Django は :doc:`データベース固有のツールの選択"
"肢 </ref/contrib/postgres/search>` があり、より複雑なクエリオプションが利用で"
"きます。他のデータベースでは、プラグインやユーザ定義関数を使うことで、様々な"
"ツ ールを選択できます。Django は今のところ、そのようなツールをサポートしてい"
"ません。PostgreSQL の例をいくつか使って、データベースがどのような機能を持って"
"いるかを説明します。"

msgid "Searching in other databases"
msgstr "他のデータベースにおける検索"

msgid ""
"All of the searching tools provided by :mod:`django.contrib.postgres` are "
"constructed entirely on public APIs such as :doc:`custom lookups </ref/"
"models/lookups>` and :doc:`database functions </ref/models/database-"
"functions>`. Depending on your database, you should be able to construct "
"queries to allow similar APIs. If there are specific things which cannot be "
"achieved this way, please open a ticket."
msgstr ""
":mod:`django.contrib.postgres` が提供するすべての検索ツールは、 :doc:`カスタ"
"ムルックアップ </ref/models/lookups>` や :doc:`データベース関数 </ref/models/"
"database-functions>` のようなパブリック API を利用して構築されています。デー"
"タベースによっては、同様のAPIを許可するクエリを構築できるはずです。この方法で"
"実現できない特定のことがあれば、チケットをオープンしてください。"

msgid ""
"In the above example, we determined that a case insensitive lookup would be "
"more useful. When dealing with non-English names, a further improvement is "
"to use :lookup:`unaccented comparison <unaccent>`:"
msgstr ""
"上記の例では、大文字と小文字を区別しないルックアップがの方が使いやすいでしょ"
"う。英語以外の名前を扱う場合、さらなる改善は :lookup:`アクセントなし比較 "
"<unaccent>` を使うことです:"

msgid ""
"This shows another issue, where we are matching against a different spelling "
"of the name. In this case we have an asymmetry though - a search for "
"``Helen`` will pick up ``Helena`` or ``Hélène``, but not the reverse. "
"Another option would be to use a :lookup:`trigram_similar` comparison, which "
"compares sequences of letters."
msgstr ""
"これには別の問題があります。異なる綴りの名前とマッチする場合です。 ``Helen`` "
"を検索すると ``Helena`` や ``Hélène`` がヒットしますが、その逆はヒットしませ"
"ん。もう一つの方法は :lookup:`trigram_similar` 比較を使うことです。"

msgid ""
"Now we have a different problem - the longer name of \"Helena Bonham "
"Carter\" doesn't show up as it is much longer. Trigram searches consider all "
"combinations of three letters, and compares how many appear in both search "
"and source strings. For the longer name, there are more combinations that "
"don't appear in the source string, so it is no longer considered a close "
"match."
msgstr ""
"今度は別の問題です。\"Helena Bonham Carter \"という長い名前は、もっと長いので"
"表示されません。trigram 検索では、3文字のすべての組み合わせを考慮し、検索文字"
"列とソース文字列の両方で何回現れるかを比較します。より長い名前では、ソース文"
"字列に現れない組み合わせが多くなるため、近接一致とは見なされなくなります。"

msgid ""
"The correct choice of comparison functions here depends on your particular "
"data set, for example the language(s) used and the type of text being "
"searched. All of the examples we've seen are on short strings where the user "
"is likely to enter something close (by varying definitions) to the source "
"data."
msgstr ""
"ここでの比較関数の正しい選択は、使用されている言語や検索されるテキストのタイ"
"プなど、データセットによって異なります。これまで見てきた例はすべて、ユーザー"
"がソースデータに近いものを（さまざまな定義で）入力する可能性が高い短い文字列"
"に関するものです。"

msgid "Document-based search"
msgstr "文書ベースの検索"

msgid ""
"Standard database operations stop being a useful approach when you start "
"considering large blocks of text. Whereas the examples above can be thought "
"of as operations on a string of characters, full text search looks at the "
"actual words. Depending on the system used, it's likely to use some of the "
"following ideas:"
msgstr ""
"標準的なデータベース操作は、大きなテキストブロックを考慮し始めると、有用なア"
"プローチではなくなります。上記の例は文字列に対する操作と考えることができます"
"が、全文検索は実際の単語を調べます。使用するシステムにもよりますが、以下のよ"
"うな考え方が使われるでしょう:"

msgid "Ignoring \"stop words\" such as \"a\", \"the\", \"and\"."
msgstr "\"a\", \"the\", \"and \"などの \"ストップワード\" は無視する。"

msgid "Stemming words, so that \"pony\" and \"ponies\" are considered similar."
msgstr ""
"\"pony\" と \"ponies\" が似ているとみなされるように、単語のステミング"
"（Stemming）を行う。"

msgid ""
"Weighting words based on different criteria such as how frequently they "
"appear in the text, or the importance of the fields, such as the title or "
"keywords, that they appear in."
msgstr ""
"テキスト内での出現頻度や、タイトルやキーワードのようなフィールドの重要性に基"
"づいて単語に重みを付けるなど、異なる基準に基づいて単語を重み付けする。"

msgid ""
"There are many alternatives for using searching software, some of the most "
"prominent are Elastic_ and Solr_. These are full document-based search "
"solutions. To use them with data from Django models, you'll need a layer "
"which translates your data into a textual document, including back-"
"references to the database ids. When a search using the engine returns a "
"certain document, you can then look it up in the database. There are a "
"variety of third-party libraries which are designed to help with this "
"process."
msgstr ""
"検索ソフトウェアを使用するための代替手段は数多くありますが、その中でも最も有"
"名なものに Elastic_ と Solr_ があります。これらは完全なドキュメントベースの検"
"索ソリューションです。Django モデルからのデータでこれらを使うには、データベー"
"ス ID への後方参照を含め、データをテキスト文書に変換するレイヤが必要です。こ"
"のエンジンを使って検索すると、特定の文書が返され、それをデータベースで調べる"
"ことができます。このプロセスを支援するために設計された、さまざまなサードパー"
"ティライブラリがあります。"

msgid "PostgreSQL support"
msgstr "PostgreSQL のサポート"

msgid ""
"PostgreSQL has its own full text search implementation built-in. While not "
"as powerful as some other search engines, it has the advantage of being "
"inside your database and so can easily be combined with other relational "
"queries such as categorization."
msgstr ""
"PostgreSQLには独自の全文検索実装が組み込まれています。他の検索エンジンほど強"
"力ではありませんが、データベース内にあるため、カテゴリ分類などの他のリレー"
"ショナルクエリと簡単に組み合わせることができるという利点があります。"

msgid ""
"The :mod:`django.contrib.postgres` module provides some helpers to make "
"these queries. For example, a query might select all the blog entries which "
"mention \"cheese\":"
msgstr ""
":mod:`django.contrib.postgres` モジュールは、これらのクエリを作成するためのヘ"
"ルパーをいくつか提供しています。例えば、\"cheese\" に言及している全てのブログ"
"エントリを選択するクエリがあります:"

msgid "You can also filter on a combination of fields and on related models:"
msgstr ""
"また、フィールドの組み合わせやリレーション先モデルでフィルタをかけることもで"
"きます:"

msgid ""
"See the ``contrib.postgres`` :doc:`/ref/contrib/postgres/search` document "
"for complete details."
msgstr ""
"詳細は ``contrib.postgres`` :doc:`/ref/contrib/postgres/search` ドキュメント"
"を参照してください。"

msgid "Performing raw SQL queries"
msgstr "素の SQL 文の実行"

msgid ""
"Django gives you two ways of performing raw SQL queries: you can use :meth:"
"`Manager.raw()` to `perform raw queries and return model instances`__, or "
"you can avoid the model layer entirely and `execute custom SQL directly`__."
msgstr ""
"Django は素の SQL を処理する方法を 2 つ提供しています。あなたは素のクエリを実"
"行するために `perform raw queries and return model instances`__ :meth:"
"`Manager.raw()` を使うか、あるいはモデル層の利用を完全に避けてカスタムのSQLを"
"直接実行する `execute custom SQL directly`__ ことができます。"

msgid "Explore the ORM before using raw SQL!"
msgstr "素のSQLを使う前にORMを調べましょう！"

msgid ""
"The Django ORM provides many tools to express queries without writing raw "
"SQL. For example:"
msgstr ""
"Django ORM は、素の SQL を書かずにクエリを表現するための多くのツールを提供 し"
"ています。たとえば、次のようなものです:"

msgid "The :doc:`QuerySet API </ref/models/querysets>` is extensive."
msgstr ""
":doc:`QuerySet API </ref/models/querysets>` は広範囲の用途をカバーしていま"
"す。"

msgid ""
"You can :meth:`annotate <.QuerySet.annotate>` and :doc:`aggregate </topics/"
"db/aggregation>` using many built-in :doc:`database functions </ref/models/"
"database-functions>`. Beyond those, you can create :doc:`custom query "
"expressions </ref/models/expressions/>`."
msgstr ""
"多くの組み込みの :doc:`データベース関数 </ref/models/database-functions>` を"
"使用して、:meth:`アノテーション <.QuerySet.annotate>` と :doc:`集計 </topics/"
"db/aggregation>` を行うことができます。それらを超えて、:doc:`独自のクエリ式 "
"</ref/models/expressions/>` を作成することもできます。"

msgid ""
"Before using raw SQL, explore :doc:`the ORM </topics/db/index>`. Ask on one "
"of :doc:`the support channels </faq/help>` to see if the ORM supports your "
"use case."
msgstr ""
"素のSQLを使う前に、 :doc:`ORM </topics/db/index>` を調べてください。ORMがあな"
"たのユースケースをサポートしているかどうか、 :doc:`サポートチャンネル </faq/"
"help>` で尋ねてみてください。"

msgid ""
"You should be very careful whenever you write raw SQL. Every time you use "
"it, you should properly escape any parameters that the user can control by "
"using ``params`` in order to protect against SQL injection attacks. Please "
"read more about :ref:`SQL injection protection <sql-injection-protection>`."
msgstr ""
"直接 SQL を書く場合はいかなる時も十分警戒するべきです。それを利用する時は毎"
"回、利用者が ``引数`` を利用する事で任意に設定可能な全てのパラメータは SQL イ"
"ンジェクション攻撃から防御するため適切にエスケープすべきです。詳細は :ref:"
"`SQL インジェクションの防御 <sql-injection-protection>` を参照してください。"

msgid "Performing raw queries"
msgstr "素のクエリを実行する"

msgid ""
"The ``raw()`` manager method can be used to perform raw SQL queries that "
"return model instances:"
msgstr ""
"``raw()`` マネージャメソッドは素の SQL 文を処理してモデルのインスタンスを返さ"
"せる場合に利用できます:"

msgid ""
"This method takes a raw SQL query, executes it, and returns a ``django.db."
"models.query.RawQuerySet`` instance. This ``RawQuerySet`` instance can be "
"iterated over like a normal :class:`~django.db.models.query.QuerySet` to "
"provide object instances."
msgstr ""
"このメソッドは素の SQL クエリを受け取り、実行し、 ``django.db.models.query."
"RawQuerySet`` インスタンスを返します。この ``RawQuerySet`` インスタンスは通常"
"の :class:`~django.db.models.query.QuerySet` のようにイテレートしてオブジェク"
"トインスタンスを生成できます。"

msgid ""
"This is best illustrated with an example. Suppose you have the following "
"model::"
msgstr ""
"これは例で説明するのが一番わかりやすいでしょう。次のようなモデルがあるとしま"
"す:"

msgid "You could then execute custom SQL like so:"
msgstr "このとき、以下のように独自の SQL を実行できます:"

msgid ""
"This example isn't very exciting -- it's exactly the same as running "
"``Person.objects.all()``. However, ``raw()`` has a bunch of other options "
"that make it very powerful."
msgstr ""
"この例はたいしてエキサイティングではありません。これは ``Person.objects."
"all()`` を実行したのと全く同じです。しかしながら、 ``raw()`` はその機能を極め"
"て強力なものにする数々のオプションを備えています。"

msgid "Model table names"
msgstr "モデルのテーブル名"

msgid "Where did the name of the ``Person`` table come from in that example?"
msgstr ""
"この例で示したモデル ``Person`` のテーブル名はどのようにして得られたのでしょ"
"うか？"

msgid ""
"By default, Django figures out a database table name by joining the model's "
"\"app label\" -- the name you used in ``manage.py startapp`` -- to the "
"model's class name, with an underscore between them. In the example we've "
"assumed that the ``Person`` model lives in an app named ``myapp``, so its "
"table would be ``myapp_person``."
msgstr ""
"デフォルトでは、Django はモデルの \"app label\" (``manage.py startapp`` で"
"使った名前) とモデルのクラス名をアンダースコアでつないで、データベースのテー"
"ブル名を決定します。たとえば、``Person`` モデルは ``myapp`` という名前のアプ"
"リの中にあると仮定しているので、そのテーブルは ``myapp_person`` となります。"

msgid ""
"For more details check out the documentation for the :attr:`~Options."
"db_table` option, which also lets you manually set the database table name."
msgstr ""
"詳細に関しては、手動でデータベースのテーブル名を設定できる :attr:`~Options."
"db_table` オプションのドキュメントを参照してください。"

msgid ""
"No checking is done on the SQL statement that is passed in to ``.raw()``. "
"Django expects that the statement will return a set of rows from the "
"database, but does nothing to enforce that. If the query does not return "
"rows, a (possibly cryptic) error will result."
msgstr ""
"``.raw()`` に対して渡された SQL 文はチェックされません。Django はそこに記述さ"
"れた内容によってデータベースが行を返す事を期待しますが、それを強制する処理は"
"行いません。もし記述したクエリが行を返さない場合、(おそらく不可解な)例外が発"
"生します。"

msgid ""
"If you are performing queries on MySQL, note that MySQL's silent type "
"coercion may cause unexpected results when mixing types. If you query on a "
"string type column, but with an integer value, MySQL will coerce the types "
"of all values in the table to an integer before performing the comparison. "
"For example, if your table contains the values ``'abc'``, ``'def'`` and you "
"query for ``WHERE mycolumn=0``, both rows will match. To prevent this, "
"perform the correct typecasting before using the value in a query."
msgstr ""
"もしあなたが MySQL でクエリを処理する場合は、複数の型を扱う際に MySQL の暗黙"
"的な型変換が予期しない結果をもたらす場合がある事に注意してください。もし文字"
"列型で定義したカラムに対し、数値型の値で問い合わせた場合、MySQL は比較処理を"
"行う前にテーブル上の全ての値の型を数値型に変換します。例えば ``'abc'``、 "
"``'def'`` といった値が含まれているテーブルに対して ``WHERE mycolumn=0`` とい"
"う条件での問い合わせを行うと、両方の行がマッチします。これを防ぐため、クエリ"
"の値を利用する前に適切な型キャストを行ってください。"

msgid "Mapping query fields to model fields"
msgstr "クエリのフィールドをモデルのフィールドにマップする"

msgid ""
"``raw()`` automatically maps fields in the query to fields on the model."
msgstr ""
"``raw()`` は自動的にクエリのフィールドをモデルのフィールドにマップします。"

msgid ""
"The order of fields in your query doesn't matter. In other words, both of "
"the following queries work identically:"
msgstr ""
"クエリのフィールドの順番は重要ではありません。つまり、以下のクエリはどちらも"
"同じように動作します:"

msgid ""
"Matching is done by name. This means that you can use SQL's ``AS`` clauses "
"to map fields in the query to model fields. So if you had some other table "
"that had ``Person`` data in it, you could easily map it into ``Person`` "
"instances:"
msgstr ""
"マッチングは名前によって行われます。つまり、SQL の ``AS`` 句を使用して、クエ"
"リのフィールドをモデルのフィールドにマッピングできます。もし、他のテーブルで "
"``Person`` のデータがあれば、簡単に ``Person`` のインスタンスにマッピングでき"
"ます:"

msgid ""
"As long as the names match, the model instances will be created correctly."
msgstr "名称が一致している限り、そのモデルのインスタンスは適切に生成されます。"

msgid ""
"Alternatively, you can map fields in the query to model fields using the "
"``translations`` argument to ``raw()``. This is a dictionary mapping names "
"of fields in the query to names of fields on the model. For example, the "
"above query could also be written:"
msgstr ""
"あるいは、 ``raw()`` の引数 ``translations`` を使って、クエリのフィールドをモ"
"デルのフィールドにマッピングすることもできます。これはクエリのフィールド名と"
"モデルのフィールド名をマッピングした辞書です。たとえば、上記のクエリは次のよ"
"うに書くこともできます:"

msgid "Index lookups"
msgstr "インデックスの利用"

msgid ""
"``raw()`` supports indexing, so if you need only the first result you can "
"write:"
msgstr ""
"raw() はインデックスをサポートしているので、最初の結果だけが必要な場合はこう"
"書きます:"

msgid ""
"However, the indexing and slicing are not performed at the database level. "
"If you have a large number of ``Person`` objects in your database, it is "
"more efficient to limit the query at the SQL level:"
msgstr ""
"ただし、インデックス作成とスライスはデータベースレベルでは実行されません。"
"データベースに多数の Person オブジェクトがある場合は、SQL レベルでクエリを制"
"限する方が効率的です:"

msgid "Deferring model fields"
msgstr "モデルのフィールドの遅延評価"

msgid "Fields may also be left out:"
msgstr "モデルのフィールドは省略可能です:"

msgid ""
"The ``Person`` objects returned by this query will be deferred model "
"instances (see :meth:`~django.db.models.query.QuerySet.defer()`). This means "
"that the fields that are omitted from the query will be loaded on demand. "
"For example:"
msgstr ""
"上記のクエリから得られる ``Person`` オブジェクトは遅延評価されるモデルのイン"
"スタンスになります(:meth:`~django.db.models.query.QuerySet.defer()` を参照)。"
"これはクエリから省略されたフィールドが要求に応じて読み出される事を意味しま"
"す。以下はその例になります:"

msgid ""
"From outward appearances, this looks like the query has retrieved both the "
"first name and last name. However, this example actually issued 3 queries. "
"Only the first names were retrieved by the ``raw()`` query -- the last names "
"were both retrieved on demand when they were printed."
msgstr ""
"見た目上は、そのクエリが名前と苗字を両方取得しているように見えます。しかし、"
"この例は実際には 3 つのクエリを発行しています。名前だけが ``raw()`` 内のクエ"
"リによって取得され、苗字は両方とも表示される時点でその都度取得されました。"

msgid ""
"There is only one field that you can't leave out - the primary key field. "
"Django uses the primary key to identify model instances, so it must always "
"be included in a raw query. A :class:`~django.core.exceptions."
"FieldDoesNotExist` exception will be raised if you forget to include the "
"primary key."
msgstr ""
"省略できないフィールドが一つだけあります。主キーのフィールドです。Django はモ"
"デルのインスタンスの識別に主キーを利用するので、素のクエリには必ず含む必要が"
"あります。もし主キーを入れ忘れると、 :class:`~django.core.exceptions."
"FieldDoesNotExist` 例外が発生します。"

msgid "Adding annotations"
msgstr "付加情報（アノテーション）の追加"

msgid ""
"You can also execute queries containing fields that aren't defined on the "
"model. For example, we could use `PostgreSQL's age() function`__ to get a "
"list of people with their ages calculated by the database:"
msgstr ""
"モデル内に定義されていないフィールドを含んだクエリを実行する事もできます。例"
"えば、 `PostgreSQL's age() function`__ によってデータベース上で計算された年齢"
"とともに人物の一覧を取得できます:"

msgid ""
"You can often avoid using raw SQL to compute annotations by instead using a :"
"ref:`Func() expression <func-expressions>`."
msgstr ""
"代わりに :ref:`Func() 式 <func-expressions>` を使うことで、素の SQL を使って"
"アノテーションを計算するのを避けることができます。"

msgid "Passing parameters into ``raw()``"
msgstr "``raw()`` にパラメータを渡す"

msgid ""
"If you need to perform parameterized queries, you can use the ``params`` "
"argument to ``raw()``:"
msgstr ""
"パラメータを用いたクエリを使用する場合は、``raw()`` に対して ``params`` 引数"
"を利用できます:"

msgid ""
"``params`` is a list or dictionary of parameters. You'll use ``%s`` "
"placeholders in the query string for a list, or ``%(key)s`` placeholders for "
"a dictionary (where ``key`` is replaced by a dictionary key), regardless of "
"your database engine. Such placeholders will be replaced with parameters "
"from the ``params`` argument."
msgstr ""
"``params`` はパラメータのリストもしくは辞書です。リストの場合は ``%s`` という"
"プレースホルダーを使い、辞書の場合は ``%(key)s`` というプレースホルダーを使い"
"ます ( ``key`` は辞書のキーに置き換えられます)、データベースエンジンを意識す"
"る必要はありません。このようなプレースホルダは ``params`` 引数のパラメータに"
"置き換えられます。"

msgid ""
"Dictionary params are not supported with the SQLite backend; with this "
"backend, you must pass parameters as a list."
msgstr ""
"SQLite バックエンドにおいて辞書はサポートされていません。パラメータはリストで"
"渡す必要があります。"

msgid ""
"**Do not use string formatting on raw queries or quote placeholders in your "
"SQL strings!**"
msgstr ""
"**素のSQLクエリで文字列書式を使用したり、SQL文字列で引用符プレースホルダを使"
"用しないでください。**"

msgid "It's tempting to write the above query as:"
msgstr "上記のクエリをこう書きたくなる誘惑に駆られるでしょう:"

msgid ""
"You might also think you should write your query like this (with quotes "
"around ``%s``):"
msgstr ""
"また、クエリはこのように書くべきだと思うかもしれません（ ``%s`` を引用符で囲"
"む）:"

msgid "**Don't make either of these mistakes.**"
msgstr "**どちらのミスも犯してはなりません。**"

msgid ""
"As discussed in :ref:`sql-injection-protection`, using the ``params`` "
"argument and leaving the placeholders unquoted protects you from `SQL "
"injection attacks`__, a common exploit where attackers inject arbitrary SQL "
"into your database. If you use string interpolation or quote the "
"placeholder, you're at risk for SQL injection."
msgstr ""
":ref:`sql-injection-protection` で議論されているように、``params`` 引数を使用"
"し、プレースホルダーを引用符で囲まないことで、攻撃者が任意のSQLをデータベース"
"に注入する、一般的な脆弱性である `SQL injection attacks`__ から保護されます。"
"文字列補間を使用したり、プレースホルダーを引用符で囲んだりすると、SQLインジェ"
"クションのリスクがあります。"

msgid "Executing custom SQL directly"
msgstr "独自の SQL を直接実行する"

msgid ""
"Sometimes even :meth:`Manager.raw` isn't quite enough: you might need to "
"perform queries that don't map cleanly to models, or directly execute "
"``UPDATE``, ``INSERT``, or ``DELETE`` queries."
msgstr ""
":meth:`Manager.raw` でも要求を満たせない場合があります:きれいにモデルにマップ"
"できないクエリを扱ったり、``UPDATE``、 ``INSERT`` あるいは ``DELETE`` を直接"
"実行したりする必要が有るかもしれません。"

msgid ""
"In these cases, you can always access the database directly, routing around "
"the model layer entirely."
msgstr ""
"こういったケースでは、モデル層を完全に迂回してデータベースにいつでも直接アク"
"セスできます。"

msgid ""
"The object ``django.db.connection`` represents the default database "
"connection. To use the database connection, call ``connection.cursor()`` to "
"get a cursor object. Then, call ``cursor.execute(sql, [params])`` to execute "
"the SQL and ``cursor.fetchone()`` or ``cursor.fetchall()`` to return the "
"resulting rows."
msgstr ""
"``django.db.connection`` オブジェクトは、デフォルトのデータベースコネクション"
"を表します。データベースコネクションを利用するには、カーソルオブジェクトを取"
"得するため ``connection.cursor()`` を呼び出してください。そして、``cursor."
"execute(sql, [params])`` を呼び出して SQL を実行した後、``cursor."
"fetchone()`` もしくは ``cursor.fetchall()`` が結果の行を返します。"

msgid ""
"To protect against SQL injection, you must not include quotes around the "
"``%s`` placeholders in the SQL string."
msgstr ""
"SQLインジェクションから保護するために、SQL文字列の ``%s`` プレースホルダの前"
"後に引用符を含めてはいけません。"

msgid ""
"Note that if you want to include literal percent signs in the query, you "
"have to double them in the case you are passing parameters::"
msgstr ""
"もしリテラルなパーセント記号をクエリ中で使いたい場合、パラメータを渡す際に二"
"重に記述する必要が有る事に注意してください::"

msgid ""
"If you are using :doc:`more than one database </topics/db/multi-db>`, you "
"can use ``django.db.connections`` to obtain the connection (and cursor) for "
"a specific database. ``django.db.connections`` is a dictionary-like object "
"that allows you to retrieve a specific connection using its alias::"
msgstr ""
":doc:`2 つ以上のデータベース </topics/db/multi-db>` を利用している場合、特定"
"のコネクション (とカーソル) を取得するのに ``django.db.connections`` を利用で"
"きます。``django.db.connections`` は、エイリアスを指定することで特定のコネク"
"ションを得られる、辞書に似たオブジェクトです。"

msgid ""
"By default, the Python DB API will return results without their field names, "
"which means you end up with a ``list`` of values, rather than a ``dict``. At "
"a small performance and memory cost, you can return results as a ``dict`` by "
"using something like this::"
msgstr ""
"デフォルトでは、Python データベース API は返す結果にフィールド名を含まず、つ"
"まり ``辞書`` でなく、 ``リスト`` の値として結果を返します。処理能力とメモリ"
"を少々利用して、次のような処理を用いる事で結果を ``辞書`` として得られます::"

msgid ""
"Another option is to use :func:`collections.namedtuple` from the Python "
"standard library. A ``namedtuple`` is a tuple-like object that has fields "
"accessible by attribute lookup; it's also indexable and iterable. Results "
"are immutable and accessible by field names or indices, which might be "
"useful::"
msgstr ""
"別の選択肢は Python 標準ライブラリに含まれる :func:`collections.namedtuple` "
"を利用する事です。``namedtuple`` は属性を指定して値へのアクセスが可能なタプル"
"に似たオブジェクトです; 加えてインデックスが利用でき、イテレート可能でもあり"
"ます。取得した結果は不変であり属性名もしくはインデックスでアクセスできて便利"
"です::"

msgid ""
"The ``dictfetchall()`` and ``namedtuplefetchall()`` examples assume unique "
"column names, since a cursor cannot distinguish columns from different "
"tables."
msgstr ""
"``dictfetchall()`` と ``namedtuplefetchall()`` の例は、異なるテーブルの列を"
"カーソルは区別できないため、一意な列名を想定しています。"

msgid "Here is an example of the difference between the three:"
msgstr "この3つの違いの例を挙げましょう:"

msgid "Connections and cursors"
msgstr "コネクションとカーソル"

msgid ""
"``connection`` and ``cursor`` mostly implement the standard Python DB-API "
"described in :pep:`249` — except when it comes to :doc:`transaction handling "
"</topics/db/transactions>`."
msgstr ""
"``connection`` と ``cursor`` の実装は :pep:`249` に規定された Python DB-API "
"の基準にほぼ完全に準拠しています — :doc:`トランザクション操作 </topics/db/"
"transactions>` は例外となります。"

msgid ""
"If you're not familiar with the Python DB-API, note that the SQL statement "
"in ``cursor.execute()`` uses placeholders, ``\"%s\"``, rather than adding "
"parameters directly within the SQL. If you use this technique, the "
"underlying database library will automatically escape your parameters as "
"necessary."
msgstr ""
"Python DB-API に精通していない場合、``cursor.execute()`` 内の SQL 文には直接"
"値を追加せずに、``\"%s\"`` というプレースホルダーを利用する事に注意してくださ"
"い。この手法を用いる事で、内部で動作しているデータベースライブラリは自動的に"
"必要に応じて値のエスケープを行ってくれます。"

msgid ""
"Also note that Django expects the ``\"%s\"`` placeholder, *not* the ``\"?"
"\"`` placeholder, which is used by the SQLite Python bindings. This is for "
"the sake of consistency and sanity."
msgstr ""
"加えて Django はプレースホルダーとして Python に内蔵された SQLite モジュール"
"で用いられる ``\"?\"`` でなく ``\"%s\"`` を期待して動作する事にも注意してくだ"
"さい。これは全体の調和と健全性のためです。"

msgid "Using a cursor as a context manager::"
msgstr "コンテキストマネージャとしてのカーソルの利用::"

msgid "is equivalent to::"
msgstr "これは以下と同じです::"

msgid "Calling stored procedures"
msgstr "ストアドプロシージャの呼び出し"

msgid ""
"Calls a database stored procedure with the given name. A sequence "
"(``params``) or dictionary (``kparams``) of input parameters may be "
"provided. Most databases don't support ``kparams``. Of Django's built-in "
"backends, only Oracle supports it."
msgstr ""
"与えられた名前のストアドプロシージャを呼び出します。入力パラメータのシーケン"
"ス (``params``) または辞書 (``kparams``) を指定できます。ほとんどのデータベー"
"スは ``kparams`` をサポートしていません。Django の組み込みバックエンドでは、 "
"Oracle だけがサポートしています。"

msgid "For example, given this stored procedure in an Oracle database:"
msgstr ""
"たとえば、Oracleデータベースで次のようなストアドプロシージャがあるとします:"

msgid "This will call it::"
msgstr "これは以下のコードで呼び出すことができます。:"

msgid "Tablespaces"
msgstr "テーブル空間（tablespace）"

msgid ""
"A common paradigm for optimizing performance in database systems is the use "
"of `tablespaces`_ to organize disk layout."
msgstr ""
"データベースシステムのパフォーマンスを最適化するための一般的なパラダイムは、"
"ディスクレイアウトを整理するためにテーブル空間 `tablespaces`_ を使用すること"
"です。"

msgid ""
"Django does not create the tablespaces for you. Please refer to your "
"database engine's documentation for details on creating and managing "
"tablespaces."
msgstr ""
"Django はテーブル空間を作成しません。テーブル空間の作成と管理の詳細は、データ"
"ベースエンジンのドキュメントを参照してください。"

msgid "Declaring tablespaces for tables"
msgstr "テーブルにテーブル空間を宣言する"

msgid ""
"A tablespace can be specified for the table generated by a model by "
"supplying the :attr:`~django.db.models.Options.db_tablespace` option inside "
"the model's ``class Meta``. This option also affects tables automatically "
"created for :class:`~django.db.models.ManyToManyField`\\ s in the model."
msgstr ""
"モデルによって生成されるテーブルにテーブル空間を指定するには、モデルの "
"``class Meta`` 内で :attr:`~django.db.models.Options.db_tablespace` オプショ"
"ンを指定します。このオプションはモデルの :class:`~django.db.models."
"ManyToManyField` に対して自動的に生成されるテーブルにも影響します。"

msgid ""
"You can use the :setting:`DEFAULT_TABLESPACE` setting to specify a default "
"value for :attr:`~django.db.models.Options.db_tablespace`. This is useful "
"for setting a tablespace for the built-in Django apps and other applications "
"whose code you cannot control."
msgstr ""
":setting:`DEFAULT_TABLESPACE` 設定を使うと、 :attr:`~django.db.models."
"Options.db_tablespace` のデフォルト値を指定できます。これは、組み込みの "
"Django アプリケーションや、自分でコードを制御できないアプリケーションのテーブ"
"ル空間を設定するのに便利です。"

msgid "Declaring tablespaces for indexes"
msgstr "インデックスにテーブル空間を宣言する"

msgid ""
"You can pass the :attr:`~django.db.models.Index.db_tablespace` option to an "
"``Index`` constructor to specify the name of a tablespace to use for the "
"index. For single field indexes, you can pass the :attr:`~django.db.models."
"Field.db_tablespace` option to a ``Field`` constructor to specify an "
"alternate tablespace for the field's column index. If the column doesn't "
"have an index, the option is ignored."
msgstr ""
":attr:`~django.db.models.Index.db_tablespace` オプションを ``Index`` コンスト"
"ラクタに渡すことで、インデックスに使用するテーブル空間の名前を指定できます。"
"単一フィールドインデックスの場合、 :attr:`~django.db.models.Field."
"db_tablespace` オプションを ``Field`` コンストラクタに渡すことで、フィールド"
"のカラムインデックスに使用するテーブル空間を指定できます。カラムにインデック"
"スがない場合、このオプションは無視されます。"

msgid ""
"You can use the :setting:`DEFAULT_INDEX_TABLESPACE` setting to specify a "
"default value for :attr:`~django.db.models.Field.db_tablespace`."
msgstr ""
":setting:`DEFAULT_INDEX_TABLESPACE` 設定を使って :attr:`~django.db.models."
"Field.db_tablespace` のデフォルト値を指定できます。"

msgid ""
"If :attr:`~django.db.models.Field.db_tablespace` isn't specified and you "
"didn't set :setting:`DEFAULT_INDEX_TABLESPACE`, the index is created in the "
"same tablespace as the tables."
msgstr ""
":attr:`~django.db.models.Field.db_tablespace` が指定されておらず、 :setting:"
"`DEFAULT_INDEX_TABLESPACE` も設定されていない場合、インデックスはテーブルと同"
"じテーブル空間に作成されます。"

msgid ""
"In this example, the tables generated by the ``TablespaceExample`` model (i."
"e. the model table and the many-to-many table) would be stored in the "
"``tables`` tablespace. The index for the name field and the indexes on the "
"many-to-many table would be stored in the ``indexes`` tablespace. The "
"``data`` field would also generate an index, but no tablespace for it is "
"specified, so it would be stored in the model tablespace ``tables`` by "
"default. The index for the ``shortcut`` field would be stored in the "
"``other_indexes`` tablespace."
msgstr ""
"この例では、 ``TablespaceExample`` モデルによって生成されたテーブル (つまり、"
"モデルテーブルと多対多テーブル) は ``tables`` テーブル空間に格納されます。"
"name フィールドのインデックスと多対多テーブルのインデックスは ``indexes`` "
"テーブル空間に格納されます。 ``data`` フィールドもインデックスを生成します"
"が、テーブル空間が指定されていないため、デフォルトではモデルのテーブル空間 "
"``tables`` に格納されます。 ``shortcut`` フィールドのインデックスは "
"``other_indexes`` テーブル空間に格納されます。"

msgid "Database support"
msgstr "データベースのサポート"

msgid ""
"PostgreSQL and Oracle support tablespaces. SQLite, MariaDB and MySQL don't."
msgstr ""
"PostgreSQLとOracleはテーブル空間をサポートしています。SQLite、MariaDB、MySQL"
"はサポートしていません。"

msgid ""
"When you use a backend that lacks support for tablespaces, Django ignores "
"all tablespace-related options."
msgstr ""
"テーブル空間をサポートしていないバックエンドを使う場合、 Django はテーブル空"
"間関連のオプションを全て無視します。"

msgid "Database transactions"
msgstr "データベースのトランザクション"

msgid ""
"Django gives you a few ways to control how database transactions are managed."
msgstr ""
"Django では、データベースのトランザクションをコントロールする方法が提供されて"
"います。"

msgid "Managing database transactions"
msgstr "データベースのトランザクションを管理する"

msgid "Django's default transaction behavior"
msgstr "Django のデフォルトのトランザクションの動作"

msgid ""
"Django's default behavior is to run in autocommit mode. Each query is "
"immediately committed to the database, unless a transaction is active. :ref:"
"`See below for details <autocommit-details>`."
msgstr ""
"Django のデフォルトの動作は、オートコミットモードで実行することです。トランザ"
"クションがアクティブでない限り、各クエリは即座にデータベースにコミットされま"
"す。:ref:`詳しくは下記を参照してください <autocommit-details>`。"

msgid ""
"Django uses transactions or savepoints automatically to guarantee the "
"integrity of ORM operations that require multiple queries, especially :ref:"
"`delete() <topics-db-queries-delete>` and :ref:`update() <topics-db-queries-"
"update>` queries."
msgstr ""
"Django は、自動的にトランザクションやセーブポイントを使い、特に :ref:"
"`delete() <topics-db-queries-delete>` と :ref:`update() <topics-db-queries-"
"update>` クエリにおいて、複数のクエリを要求する ORM 操作の信頼性を担保しま"
"す。"

msgid ""
"Django's :class:`~django.test.TestCase` class also wraps each test in a "
"transaction for performance reasons."
msgstr ""
"Django の :class:`~django.test.TestCase` クラスは、パフォーマンス向上のため、"
"各テストをトランザクションでラップします。"

msgid "Tying transactions to HTTP requests"
msgstr "HTTP リクエストにトランザクションを結びつける"

msgid ""
"A common way to handle transactions on the web is to wrap each request in a "
"transaction. Set :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` to "
"``True`` in the configuration of each database for which you want to enable "
"this behavior."
msgstr ""
"ウェブ上でトランザクションを扱う一般的な方法は、各リクエストをトランザクショ"
"ンでラップすることです。この動作を有効化したい各データベースの設定で、:"
"setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` を ``True`` にセットして"
"ください。"

msgid ""
"It works like this. Before calling a view function, Django starts a "
"transaction. If the response is produced without problems, Django commits "
"the transaction. If the view produces an exception, Django rolls back the "
"transaction."
msgstr ""
"これは、次のように動作します。まず、ビュー関数を呼び出す前に、Django はトラン"
"ザクションを開始します。レスポンスが問題なく生成された場合は、Django はトラン"
"ザクションをコミットします。もしビューが例外を生成した場合は、Django はトラン"
"ザクションをロールバックします。"

msgid ""
"You may perform subtransactions using savepoints in your view code, "
"typically with the :func:`atomic` context manager. However, at the end of "
"the view, either all or none of the changes will be committed."
msgstr ""
"ビューのコード (通常は :func:`atomic` コンテキストマネージャー) の中で、セー"
"ブポイントを使ったサブトランザクションを扱うことができます。ただし、ビューの"
"最後では、すべての変更がコミットされるか、何もコミットされないかのどちらかで"
"す。"

msgid ""
"While the simplicity of this transaction model is appealing, it also makes "
"it inefficient when traffic increases. Opening a transaction for every view "
"has some overhead. The impact on performance depends on the query patterns "
"of your application and on how well your database handles locking."
msgstr ""
"このトランザクションモデルは簡潔ではありますが、トラフィックが増加するときに"
"は非効率となります。全てのビューでトランザクションを扱うとオーバーヘッドが増"
"加します。パフォーマンスへの影響は、アプリケーションのクエリパターンと、どれ"
"だけうまくデータベースがロッキングを扱うかに依存します。"

msgid "Per-request transactions and streaming responses"
msgstr "リクエストごとのトランザクションとストリーミングレスポンス"

msgid ""
"When a view returns a :class:`~django.http.StreamingHttpResponse`, reading "
"the contents of the response will often execute code to generate the "
"content. Since the view has already returned, such code runs outside of the "
"transaction."
msgstr ""
"ビューが :class:`~django.http.StreamingHttpResponse` を返すとき、レスポンスの"
"内容読み出しが内容を生成するためのコードを実行することがあります。ビューはす"
"でに返されているので、このコードはトランザクションの外で走ります。"

msgid ""
"Generally speaking, it isn't advisable to write to the database while "
"generating a streaming response, since there's no sensible way to handle "
"errors after starting to send the response."
msgstr ""
"一般的に言って、ストリーミングレスポンスが生成されている間はデータベースに書"
"き込みすることは推奨されません。レスポンスを送信開始した後にエラーを扱う適切"
"な方法が存在しないからです。"

msgid ""
"In practice, this feature wraps every view function in the :func:`atomic` "
"decorator described below."
msgstr ""
"実際には、この機能はすべてのビュー関数を以下で説明する :func:`atomic` デコ"
"レータでラップします。"

msgid ""
"Note that only the execution of your view is enclosed in the transactions. "
"Middleware runs outside of the transaction, and so does the rendering of "
"template responses."
msgstr ""
"あなたのビューの実行だけがトランザクションで閉じられることに注意してくださ"
"い。ミドルウェアはトランザクションの外で実行し、テンプレートレスポンスのレン"
"ダリングを実行します。"

msgid ""
"When :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` is enabled, it's "
"still possible to prevent views from running in a transaction."
msgstr ""
":setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` が有効な場合、ビューが"
"トランザクション内で実行するのを防ぐことができます。"

msgid ""
"This decorator will negate the effect of :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` for a given view::"
msgstr ""
"このデコレータは、与えられたビューのために :setting:`ATOMIC_REQUESTS "
"<DATABASE-ATOMIC_REQUESTS>` を無効化します。"

msgid "It only works if it's applied to the view itself."
msgstr "ビュー自身に適用される場合にのみ作動します。"

msgid "Controlling transactions explicitly"
msgstr "明示的にトランザクションをコントロールする"

msgid "Django provides a single API to control database transactions."
msgstr ""
"Django は、データベーストランザクションをコントロールするための一つの API を"
"提供しています。"

msgid ""
"Atomicity is the defining property of database transactions. ``atomic`` "
"allows us to create a block of code within which the atomicity on the "
"database is guaranteed. If the block of code is successfully completed, the "
"changes are committed to the database. If there is an exception, the changes "
"are rolled back."
msgstr ""
"Atomicityは、データベーストランザクションの定義プロパティです。``atomic`` "
"は、データベースの atomicity が保証されるコードブロックを作成することを可能に"
"します。 コードブロックが正常に完了すると、変更はデータベースにコミットされま"
"す。 例外がある場合、変更はロールバックされます。"

msgid ""
"``atomic`` blocks can be nested. In this case, when an inner block completes "
"successfully, its effects can still be rolled back if an exception is raised "
"in the outer block at a later point."
msgstr ""
"``atomic`` のブロックはネスト可能です。この場合、内側のブロックが成功裏に完了"
"しても、その効果は後で外側のブロックで例外が発生した場合にロールバック可能と"
"なっています。"

msgid ""
"It is sometimes useful to ensure an ``atomic`` block is always the outermost "
"``atomic`` block, ensuring that any database changes are committed when the "
"block is exited without errors. This is known as durability and can be "
"achieved by setting ``durable=True``. If the ``atomic`` block is nested "
"within another it raises a ``RuntimeError``."
msgstr ""
"アトミックなブロックを常に一番外側のアトミックなブロックにすることで、そのブ"
"ロックがエラーにならずに終了したときにデータベースの変更がコミットされるよう"
"にすると便利なことがあります。これは耐久性 (durability) と呼ばれ、 "
"``durable=True`` を設定することで実現できます。もし ``atomic`` ブロックが他の"
"ブロックの中に入れ子になっている場合、 ``RuntimeError`` が発生します。"

msgid "``atomic`` is usable both as a :py:term:`decorator`::"
msgstr "``atomic`` は、:py:term:`decorator` として使用することも::"

msgid "and as a :py:term:`context manager`::"
msgstr ":py:term:`context manager` として使用することも可能です::"

msgid ""
"Wrapping ``atomic`` in a try/except block allows for natural handling of "
"integrity errors::"
msgstr ""
"try/except ブロック内で ``atomic`` をラップすると、integrity error を自然な形"
"で処理できます::"

msgid ""
"In this example, even if ``generate_relationships()`` causes a database "
"error by breaking an integrity constraint, you can execute queries in "
"``add_children()``, and the changes from ``create_parent()`` are still there "
"and bound to the same transaction. Note that any operations attempted in "
"``generate_relationships()`` will already have been rolled back safely when "
"``handle_exception()`` is called, so the exception handler can also operate "
"on the database if necessary."
msgstr ""
"この例では、 ``generate_relationships()`` が整合性制約を破ってデータベースエ"
"ラーを起こしたとしても、 ``add_children()`` でクエリを実行でき、 "
"``create_parent()`` での変更はそのまま同じトランザクションにバインドされま"
"す。 ``generate_relationships()`` 内での試行は、``handle_exception()`` が呼び"
"出された時点ですでに安全にロールバックされていることに留意してください。した"
"がって、必要に応じてデータベース上で例外ハンドラを使用できます。"

msgid "Avoid catching exceptions inside ``atomic``!"
msgstr "``atomic`` の内部で例外をキャッチしない！"

msgid ""
"When exiting an ``atomic`` block, Django looks at whether it's exited "
"normally or with an exception to determine whether to commit or roll back. "
"If you catch and handle exceptions inside an ``atomic`` block, you may hide "
"from Django the fact that a problem has happened. This can result in "
"unexpected behavior."
msgstr ""
"``atomic`` ブロックの処理を終える際、Django は通常の終了なのか例外を伴うのか"
"を見て、コミットするかロールバックするかを決定します。``atomic`` ブロック内で"
"例外をキャッチしてハンドする場合、Django に対して問題が発生したことを隠すこと"
"になります。これは予期しない動作の原因となります。"

msgid ""
"This is mostly a concern for :exc:`~django.db.DatabaseError` and its "
"subclasses such as :exc:`~django.db.IntegrityError`. After such an error, "
"the transaction is broken and Django will perform a rollback at the end of "
"the ``atomic`` block. If you attempt to run database queries before the "
"rollback happens, Django will raise a :class:`~django.db.transaction."
"TransactionManagementError`. You may also encounter this behavior when an "
"ORM-related signal handler raises an exception."
msgstr ""
"この挙動は、:exc:`~django.db.DatabaseError` およびそのサブクラス　(:exc:"
"`~django.db.IntegrityError` など) に対する懸念となります。こうしたエラーが起"
"きた場合、Djangoは ``atomic`` ブロックの最後にロー路バックを実施します。ロー"
"ルバックが発生する前にデータベースクエリを実行しようとすると、Django は :"
"class:`~django.db.transaction.TransactionManagementError` を送出します。ORM "
"関連のシグナルハンドラが例外を送出した際にも同様の挙動となります。"

msgid ""
"The correct way to catch database errors is around an ``atomic`` block as "
"shown above. If necessary, add an extra ``atomic`` block for this purpose. "
"This pattern has another advantage: it delimits explicitly which operations "
"will be rolled back if an exception occurs."
msgstr ""
"データベースエラーをキャッチする正しい方法は、上記で示した通りの ``atomic`` "
"ブロックです。必要に応じてさらに ``atomic`` ブロックを追加してください。この"
"パターンはもう一つのメリットがあります: 例外が発生した場合にどの操作がロール"
"バックされるかを限定できることです。"

msgid ""
"If you catch exceptions raised by raw SQL queries, Django's behavior is "
"unspecified and database-dependent."
msgstr ""
"素の SQL クエリによって発生した例外をキャッチした場合、Django の挙動は決まっ"
"ておらず、データベースに依存します。"

msgid ""
"You may need to manually revert app state when rolling back a transaction."
msgstr ""
"トランザクションをロールバックする際、アプリの状態を手動で戻す必要がある場合"
"があります。"

msgid ""
"The values of a model's fields won't be reverted when a transaction rollback "
"happens. This could lead to an inconsistent model state unless you manually "
"restore the original field values."
msgstr ""
"トランザクションのロールバックが発生しても、モデルのフィールドの値は元に戻り"
"ません。これは、手動で元のフィールドの値を復元しない限り、一貫性のないモデル"
"の状態につながる可能性があります。"

msgid ""
"For example, given ``MyModel`` with an ``active`` field, this snippet "
"ensures that the ``if obj.active`` check at the end uses the correct value "
"if updating ``active`` to ``True`` fails in the transaction::"
msgstr ""
"たとえば、``active`` フィールドを持つ ``MyModel`` が与えられた場合、以下の"
"コードはトランザクション内で ``active`` の ``True`` への更新が失敗した場合"
"に、最後の ``if obj.active`` チェックで正しい値が使用されることを保証します:"

msgid ""
"This also applies to any other mechanism that may hold app state, such as "
"caching or global variables. For example, if the code proactively updates "
"data in the cache after saving an object, it's recommended to use :ref:"
"`transaction.on_commit() <performing-actions-after-commit>` instead, to "
"defer cache alterations until the transaction is actually committed."
msgstr ""
"これはキャッシュやグローバル変数など、アプリの状態を保持する他のメカニズムに"
"も当てはまります。たとえば、コードがオブジェクトを保存した後にキャッシュ内の"
"データを積極的に更新する場合、トランザクションが実際にコミットされるまで"
"キャッシュの改変を延期するために、代わりに :ref:`transaction.on_commit() "
"<performing-actions-after-commit>` を使用することを推奨します。"

msgid ""
"In order to guarantee atomicity, ``atomic`` disables some APIs. Attempting "
"to commit, roll back, or change the autocommit state of the database "
"connection within an ``atomic`` block will raise an exception."
msgstr ""
"アトミックを保証するために、``atomic`` はいくつかの API を無効にします。アト"
"ミックな ``atomic`` ブロック内で、データベースコネクションのコミット、ロール"
"バック、または自動コミットの状態を変更しようとすると、例外が発生します。"

msgid ""
"``atomic`` takes a ``using`` argument which should be the name of a "
"database. If this argument isn't provided, Django uses the ``\"default\"`` "
"database."
msgstr ""
"``atomic`` は ``using`` 引数を取り、データベース名を指定します。この引数が与"
"えられない場合、 Django は ``\"default\"`` データベースを使用します。"

msgid "Under the hood, Django's transaction management code:"
msgstr "以下の通り、Djangoのトランザクション管理コードは、:"

msgid "opens a transaction when entering the outermost ``atomic`` block;"
msgstr "一番外側のアトミックブロックに入るときにトランザクションを開きます;"

msgid "creates a savepoint when entering an inner ``atomic`` block;"
msgstr "内側のアトミックブロックに入るときにセーブポイントを作成します;"

msgid "releases or rolls back to the savepoint when exiting an inner block;"
msgstr ""
"内側のブロックを抜けるときに、セーブポイントを解放するかロールバックします;"

msgid "commits or rolls back the transaction when exiting the outermost block."
msgstr ""
"一番外側のブロックを抜けるときに、トランザクションをコミットするかロールバッ"
"ク します。"

msgid ""
"You can disable the creation of savepoints for inner blocks by setting the "
"``savepoint`` argument to ``False``. If an exception occurs, Django will "
"perform the rollback when exiting the first parent block with a savepoint if "
"there is one, and the outermost block otherwise. Atomicity is still "
"guaranteed by the outer transaction. This option should only be used if the "
"overhead of savepoints is noticeable. It has the drawback of breaking the "
"error handling described above."
msgstr ""
"引数 ``savepoint`` を ``False`` に設定することで、内部ブロックのセーブポイン "
"トの作成を無効にできます。例外が発生した場合、 Django はセーブポイントがあれ"
"ば最初の親ブロックを、なければ一番外側のブロックを終了するときにロールバック"
"を行います。原子性は外側のトランザクションで保証されたままです。このオプショ"
"ンは、セーブポイントのオーバーヘッドが目立つ場合にのみ使うべきです。このオプ"
"ションには、上述のエラー処理を壊してしまうという欠点があります。"

msgid ""
"You may use ``atomic`` when autocommit is turned off. It will only use "
"savepoints, even for the outermost block."
msgstr ""
"オートコミットがオフの場合は ``atomic`` を使用できます。一番外側のブロックで"
"あっても、セーブポイントだけを使用します。"

msgid "Performance considerations"
msgstr "パフォーマンスに関する注意事項"

msgid ""
"Open transactions have a performance cost for your database server. To "
"minimize this overhead, keep your transactions as short as possible. This is "
"especially important if you're using :func:`atomic` in long-running "
"processes, outside of Django's request / response cycle."
msgstr ""
"オープン中のトランザクションは、データベース・サーバーにとってパフォーマン"
"ス・コストとなります。このオーバヘッドを最小にするために、トランザクションは"
"できるだけ短くしてください。これは特に、 Django のリクエスト/レスポンスサイク"
"ル以外の、長時間実行するプロセスで :func:`atomic` を使っている場合に重要で"
"す。"

msgid "Autocommit"
msgstr "自動コミット"

msgid "Why Django uses autocommit"
msgstr "なぜ Django は自動コミットを使うのか"

msgid ""
"In the SQL standards, each SQL query starts a transaction, unless one is "
"already active. Such transactions must then be explicitly committed or "
"rolled back."
msgstr ""
"標準SQLでは、SQLクエリはそれぞれトランザクションを開始します。そのようなトラ"
"ンザクションは、明示的にコミットするかロールバックしなければなりません。"

msgid ""
"This isn't always convenient for application developers. To alleviate this "
"problem, most databases provide an autocommit mode. When autocommit is "
"turned on and no transaction is active, each SQL query gets wrapped in its "
"own transaction. In other words, not only does each such query start a "
"transaction, but the transaction also gets automatically committed or rolled "
"back, depending on whether the query succeeded."
msgstr ""
"これはアプリケーション開発者にとっては必ずしも便利ではありません。この問題を"
"軽減するために、ほとんどのデータベースは自動コミットモードを提供しています。"
"オートコミットが有効でトランザクションがアクティブでない場合、各 SQL クエリは"
"独自のトランザクションに包まれます。言い換えると、それぞれのクエリがトランザ"
"クションを開始するだけでなく、クエリが成功したかどうかに応じて、トランザク"
"ションも自動的にコミットまたはロールバックされます。"

msgid ""
":pep:`249`, the Python Database API Specification v2.0, requires autocommit "
"to be initially turned off. Django overrides this default and turns "
"autocommit on."
msgstr ""
":pep:`249`, Python Database API Specification v2.0 では、オートコミッ トは初"
"期状態ではオフになっている必要があります。Django はこのデフォルトを上書きし、"
"自動コミットをオンにします。"

msgid ""
"To avoid this, you can :ref:`deactivate the transaction management "
"<deactivate-transaction-management>`, but it isn't recommended."
msgstr ""
"これを避けるために、 :ref:`トランザクション管理 <deactivate-transaction-"
"management>` を無効にすることもできますが、推奨されません。"

msgid "Deactivating transaction management"
msgstr "トランザクション管理を無効化する"

msgid ""
"You can totally disable Django's transaction management for a given database "
"by setting :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` to ``False`` in its "
"configuration. If you do this, Django won't enable autocommit, and won't "
"perform any commits. You'll get the regular behavior of the underlying "
"database library."
msgstr ""
"データベースの設定で :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` を "
"``False`` にすると、Django のトランザクション管理を完全に無効にできます。こう"
"すると、 Django は自動コミットを有効にせず、コミットも行いません。基礎となる"
"データベースライブラリの通常の動作になります。"

msgid ""
"This requires you to commit explicitly every transaction, even those started "
"by Django or by third-party libraries. Thus, this is best used in situations "
"where you want to run your own transaction-controlling middleware or do "
"something really strange."
msgstr ""
"この場合、Django やサードパーティのライブラリで開始されたトランザクションで"
"あっても、全てのトランザクションを明示的にコミットする必要があります。した"
"がって、これは独自のトランザクション制御ミドルウェアを実行したい場合や、本当"
"に変わったことをしたい場合に最適な方法です。"

msgid "Performing actions after commit"
msgstr "コミット後にアクションを実行する"

msgid ""
"Sometimes you need to perform an action related to the current database "
"transaction, but only if the transaction successfully commits. Examples "
"might include a background task, an email notification, or a cache "
"invalidation."
msgstr ""
"現在のデータベーストランザクションに関連するアクションを実行する必要がある"
"が、トランザクションが正常にコミットされた場合にだけ実行したいことがありま"
"す。たとえば、バックグラウンドタスク、メール通知、キャッシュの無効化などが考"
"えられます。"

msgid ""
":func:`on_commit` allows you to register callbacks that will be executed "
"after the open transaction is successfully committed:"
msgstr ""
":func:`on_commit` では、オープンしたトランザクションが正常にコミットされた後"
"に実行されるコールバックを登録できます:"

msgid "Pass a function, or any callable, to :func:`on_commit`::"
msgstr ""
":func:`on_commit`: に関数または callable (呼び出し可能オブジェクト) を渡しま"
"す:"

msgid ""
"Callbacks will not be passed any arguments, but you can bind them with :func:"
"`functools.partial`::"
msgstr ""
"コールバックには引数は渡されませんが、 :func:`functools.partial` で渡すことが"
"できます:"

msgid ""
"Callbacks are called after the open transaction is successfully committed. "
"If the transaction is instead rolled back (typically when an unhandled "
"exception is raised in an :func:`atomic` block), the callback will be "
"discarded, and never called."
msgstr ""
"コールバックはオープンしたトランザクションが正常にコミットされた後に呼び出さ"
"れます。トランザクションがロールバックされた場合（通常は :func:`atomic` ブ"
"ロックで例外を発生させた場合）、コールバックは破棄され、呼び出されることはあ"
"りません。"

msgid ""
"If you call ``on_commit()`` while there isn't an open transaction, the "
"callback will be executed immediately."
msgstr ""
"トランザクションがオープンされていない状態で ``on_commit()`` を呼び出すと、"
"コールバックはすぐに実行されます。"

msgid ""
"It's sometimes useful to register callbacks that can fail. Passing "
"``robust=True`` allows the next callbacks to be executed even if the current "
"one throws an exception. All errors derived from Python's ``Exception`` "
"class are caught and logged to the ``django.db.backends.base`` logger."
msgstr ""
"失敗する可能性のあるコールバックを登録すると便利なことがあります。 "
"``robust=True`` を渡すと、現在のコールバックが例外をスローしても、次のコール"
"バックを実行できます。Python の ``Exception`` クラスに由来するエラーはすべて"
"捕捉され、 ``django.db.backends.base`` ロガーに記録されます。"

msgid ""
"You can use :meth:`.TestCase.captureOnCommitCallbacks` to test callbacks "
"registered with :func:`on_commit`."
msgstr ""
":func:`on_commit` で登録されたコールバックをテストするには :meth:`.TestCase."
"captureOnCommitCallbacks` を使用します。"

msgid "The ``robust`` argument was added."
msgstr "引数 ``robust`` が追加されました。"

msgid "Savepoints"
msgstr "セーブポイント"

msgid ""
"Savepoints (i.e. nested :func:`atomic` blocks) are handled correctly. That "
"is, an :func:`on_commit` callable registered after a savepoint (in a nested :"
"func:`atomic` block) will be called after the outer transaction is "
"committed, but not if a rollback to that savepoint or any previous savepoint "
"occurred during the transaction::"
msgstr ""
"セーブポイント（ネストされた :func:`atomic` ブロック）は正しく処理されます。"
"つまり、(入れ子になった :func:`atomic` ブロック内の) セーブポイントの後に登録"
"された :func:`on_commit` callable は、外側のトランザクションがコミットされた"
"後に呼び出されます:"

msgid ""
"On the other hand, when a savepoint is rolled back (due to an exception "
"being raised), the inner callable will not be called::"
msgstr ""
"一方、（例外が発生して）セーブポイントがロールバックされると、内部の "
"callable は呼び出されません:"

msgid "Order of execution"
msgstr "実行順"

msgid ""
"On-commit functions for a given transaction are executed in the order they "
"were registered."
msgstr "トランザクションの On-commit 関数は、登録された順に実行されます。"

msgid "Exception handling"
msgstr "例外のハンドリング"

msgid ""
"If one on-commit function registered with ``robust=False`` within a given "
"transaction raises an uncaught exception, no later registered functions in "
"that same transaction will run. This is the same behavior as if you'd "
"executed the functions sequentially yourself without :func:`on_commit`."
msgstr ""
"あるトランザクション内で ``robust=False`` で登録された on-commit 関数が例外を"
"発生させた場合、同じトランザクション内でそれ以降に登録された関数は実行されま"
"せん。これは :func:`on_commit` なしで関数を順番に実行した場合と同じ動作です。"

msgid "Timing of execution"
msgstr "実行タイミング"

msgid ""
"Your callbacks are executed *after* a successful commit, so a failure in a "
"callback will not cause the transaction to roll back. They are executed "
"conditionally upon the success of the transaction, but they are not *part* "
"of the transaction. For the intended use cases (mail notifications, "
"background tasks, etc.), this should be fine. If it's not (if your follow-up "
"action is so critical that its failure should mean the failure of the "
"transaction itself), then you don't want to use the :func:`on_commit` hook. "
"Instead, you may want `two-phase commit`_ such as the :ref:`psycopg Two-"
"Phase Commit protocol support <psycopg:two-phase-commit>` and the :pep:"
"`optional Two-Phase Commit Extensions in the Python DB-API specification "
"<249#optional-two-phase-commit-extensions>`."
msgstr ""
"コールバックはコミットが成功した *後に* 実行されるので、コールバックに失敗し"
"てもトランザクションがロールバックされることはありません。コールバックはトラ"
"ンザクションの成功時に条件付きで実行されますが、トランザクションの *一部* で"
"はありません。想定される使用例（メール通知、バックグラウンドタスクなど）で"
"は、これで問題ないでしょう。もしそうでなければ（フォローアップアクションが非"
"常にクリティカルで、その失敗がトランザクション自体の失敗を意味するのであれ"
"ば）、 :func:`on_commit` フックを使うべきではありません。その代わりに、 :ref:"
"`psycopg Two-Phase Commit protocol support <psycopg:two-phase-commit>` や :"
"pep:`optional Two-Phase Commit Extensions in the Python DB-API specification "
"<249#optional-two-phase-commit-extensions>` のような `two-phase commit`_ が必"
"要かもしれません。"

msgid ""
"Callbacks are not run until autocommit is restored on the connection "
"following the commit (because otherwise any queries done in a callback would "
"open an implicit transaction, preventing the connection from going back into "
"autocommit mode)."
msgstr ""
"コールバックは、コミット後のコネクションでオートコミットがリストアされるまで"
"実行されません (そうしないと、コールバックで実行されたクエリが暗黙のトランザ"
"クションをオープンしてしまい、コネクションが自動コミットモードに戻るのを防い"
"でしまうからです)。"

msgid ""
"When in autocommit mode and outside of an :func:`atomic` block, the function "
"will run immediately, not on commit."
msgstr ""
"自動コミットモードで :func:`atomic` ブロックの外にある場合、関数はコミット時"
"ではなく即座に実行されます。"

msgid ""
"On-commit functions only work with :ref:`autocommit mode <managing-"
"autocommit>` and the :func:`atomic` (or :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>`) transaction API. Calling :func:`on_commit` when "
"autocommit is disabled and you are not within an atomic block will result in "
"an error."
msgstr ""
"on-commit 関数は :ref:`autocommit mode <managing-autocommit>` と :func:"
"`atomic` (または :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>`) トラ"
"ンザクション API でのみ動作します。オートコミットが無効でアトミックブロック内"
"にいない時に :func:`on_commit` を呼び出すとエラーになります。"

msgid "Use in tests"
msgstr "テストでの使用"

msgid ""
"Django's :class:`~django.test.TestCase` class wraps each test in a "
"transaction and rolls back that transaction after each test, in order to "
"provide test isolation. This means that no transaction is ever actually "
"committed, thus your :func:`on_commit` callbacks will never be run."
msgstr ""
"Django の :class:`~django.test.TestCase` クラスは各テストをトランザクションで"
"ラップし、テストの分離を行うために、各テストの後にそのトランザクションをロー"
"ルバックします。つまり、実際にトランザクションがコミットされることはなく、 :"
"func:`on_commit` コールバックが実行されることはありません。"

msgid ""
"You can overcome this limitation by using :meth:`.TestCase."
"captureOnCommitCallbacks`. This captures your :func:`on_commit` callbacks in "
"a list, allowing you to make assertions on them, or emulate the transaction "
"committing by calling them."
msgstr ""
"この制限を克服するには :meth:`.TestCase.captureOnCommitCallbacks` を使用しま"
"す。これは :func:`on_commit` コールバックをリストにキャプチャし、それに対して"
"アサーションを行ったり、それらを呼び出してトランザクションのコミットをエミュ"
"レートしたりすることができます。"

msgid ""
"Another way to overcome the limitation is to use :class:`~django.test."
"TransactionTestCase` instead of :class:`~django.test.TestCase`. This will "
"mean your transactions are committed, and the callbacks will run. However :"
"class:`~django.test.TransactionTestCase` flushes the database between tests, "
"which is significantly slower than :class:`~django.test.TestCase`\\'s "
"isolation."
msgstr ""
"この制限を克服するもう一つの方法は、 :class:`~django.test.TestCase` の代わり"
"に :class:`~django.test.TransactionTestCase` を使うことです。これにより、トラ"
"ンザクションがコミットされ、コールバックが実行されます。しかし、 :class:"
"`~django.test.TransactionTestCase` はテストとテストの間にデータベースを "
"flush するので、 分離されている :class:`~django.test.TestCase` よりも大幅に遅"
"くなります。"

msgid "Why no rollback hook?"
msgstr "なぜロールバックフックがないのですか？"

msgid ""
"A rollback hook is harder to implement robustly than a commit hook, since a "
"variety of things can cause an implicit rollback."
msgstr ""
"ロールバックフックはコミットフックよりもロバストに実装するのが難しいです。"

msgid ""
"For instance, if your database connection is dropped because your process "
"was killed without a chance to shut down gracefully, your rollback hook will "
"never run."
msgstr ""
"たとえば、プロセスが正常にシャットダウンする機会なく終了してデータベースコネ"
"クションが切断された場合、ロールバックフックは実行されないでしょう。"

msgid ""
"But there is a solution: instead of doing something during the atomic block "
"(transaction) and then undoing it if the transaction fails, use :func:"
"`on_commit` to delay doing it in the first place until after the transaction "
"succeeds. It's a lot easier to undo something you never did in the first "
"place!"
msgstr ""
"アトミックブロック（トランザクション）中に何かを行い、トランザクションが失敗"
"した場合にそれを元に戻すのではなく、:func:`on_commit` を使ってトランザクショ"
"ンが成功するまで最初の処理を遅らせるのです。そもそもやっていないことを元に戻"
"すのはとても簡単です！"

msgid "Low-level APIs"
msgstr "低レベルAPI"

msgid ""
"Always prefer :func:`atomic` if possible at all. It accounts for the "
"idiosyncrasies of each database and prevents invalid operations."
msgstr ""
"可能であれば、常に :func:`atomic` を選択してください。各データベースの特異性"
"を考慮し、不正な操作を防ぐことができます。"

msgid ""
"The low level APIs are only useful if you're implementing your own "
"transaction management."
msgstr ""
"低レベルのAPIは、独自のトランザクション管理を実装する場合にだけ有用です。"

msgid ""
"Django provides an API in the :mod:`django.db.transaction` module to manage "
"the autocommit state of each database connection."
msgstr ""
"Django は :mod:`django.db.transaction` モジュールで、各データベースコネクショ"
"ンの自動コミット状態を管理する API を提供しています。"

msgid ""
"These functions take a ``using`` argument which should be the name of a "
"database. If it isn't provided, Django uses the ``\"default\"`` database."
msgstr ""
"``atomic`` は ``using`` 引数を取り、データベース名を指定します。この引数が与"
"えられない場合、 Django は ``\"default\"`` データベースを使用します。"

msgid ""
"Autocommit is initially turned on. If you turn it off, it's your "
"responsibility to restore it."
msgstr ""
"オートコミットは初期状態ではオンになっています。オフにした場合、元に戻すのは"
"あなたの責任です。"

msgid ""
"Once you turn autocommit off, you get the default behavior of your database "
"adapter, and Django won't help you. Although that behavior is specified in :"
"pep:`249`, implementations of adapters aren't always consistent with one "
"another. Review the documentation of the adapter you're using carefully."
msgstr ""
"自動コミットをオフにすると、データベースアダプタのデフォルトの動作になり、 "
"Django は助けてくれません。この動作は :pep:`249` で指定されていますが、アダプ"
"タの実装は互いに一貫性があるとは限りません。使っているアダプタのドキュメント"
"をよく読んでください。"

msgid ""
"You must ensure that no transaction is active, usually by issuing a :func:"
"`commit` or a :func:`rollback`, before turning autocommit back on."
msgstr ""
"自動コミットをオンに戻す前に、通常は :func:`commit` または :func:`rollback` "
"を発行して、トランザクションがアクティブでないことを確認する必要があります。"

msgid ""
"Django will refuse to turn autocommit off when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr ""
"Django は :func:`atomic` ブロックがアクティブなときに自動コミットをオフにする"
"ことを拒否します。"

msgid ""
"A transaction is an atomic set of database queries. Even if your program "
"crashes, the database guarantees that either all the changes will be "
"applied, or none of them."
msgstr ""
"トランザクションはアトミックなデータベースクエリの集合です。たとえプログラム"
"がクラッシュしても、データベースはすべての変更が適用されるか、あるいはまった"
"く適用されないかを保証します。"

msgid ""
"Django doesn't provide an API to start a transaction. The expected way to "
"start a transaction is to disable autocommit with :func:`set_autocommit`."
msgstr ""
"Django はトランザクションを開始する API を提供していません。トランザクション"
"を開始するために期待される方法は、 :func:`set_autocommit` で自動コミットを無"
"効にすることです。"

msgid ""
"Once you're in a transaction, you can choose either to apply the changes "
"you've performed until this point with :func:`commit`, or to cancel them "
"with :func:`rollback`. These functions are defined in :mod:`django.db."
"transaction`."
msgstr ""
"トランザクションに入ったら、 :func:`commit` でそれまでの変更を適用するか、 :"
"func:`rollback` で取り消すかを選択できます。これらの関数は :mod:`django.db."
"transaction` で定義されています。"

msgid ""
"Django will refuse to commit or to rollback when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr ""
"Django は :func:`atomic` ブロックがアクティブなとき、コミットやロールバックを"
"拒否します。"

msgid ""
"A savepoint is a marker within a transaction that enables you to roll back "
"part of a transaction, rather than the full transaction. Savepoints are "
"available with the SQLite, PostgreSQL, Oracle, and MySQL (when using the "
"InnoDB storage engine) backends. Other backends provide the savepoint "
"functions, but they're empty operations -- they don't actually do anything."
msgstr ""
"セーブポイントはトランザクション内のマーカーで、トランザクション全体ではなく"
"トランザクションの一部をロールバックできます。セーブポイントはSQLite、"
"PostgreSQL、Oracle、MySQL（InnoDBストレージエンジンを使用している場合）のバッ"
"クエンドで使用できます。他のバックエンドはセーブポイント関数を提供しますが、"
"空の操作です。"

msgid ""
"Savepoints aren't especially useful if you are using autocommit, the default "
"behavior of Django. However, once you open a transaction with :func:"
"`atomic`, you build up a series of database operations awaiting a commit or "
"rollback. If you issue a rollback, the entire transaction is rolled back. "
"Savepoints provide the ability to perform a fine-grained rollback, rather "
"than the full rollback that would be performed by ``transaction.rollback()``."
msgstr ""
"Django のデフォルトの動作である autocommit を使っている場合、セーブポイントは"
"特に役に立ちません。しかし、いったん :func:`atomic` でトランザクションをオー"
"プンすると、コミットやロールバックを待つ一連のデータベース操作が構築されま"
"す。ロールバックを行うと、トランザクション全体がロールバックされます。セーブ"
"ポイントは、 ``transaction.rollback()`` によって実行される完全なロールバック"
"ではなく、きめ細かいロールバックを実行する機能を提供します。"

msgid ""
"When the :func:`atomic` decorator is nested, it creates a savepoint to allow "
"partial commit or rollback. You're strongly encouraged to use :func:`atomic` "
"rather than the functions described below, but they're still part of the "
"public API, and there's no plan to deprecate them."
msgstr ""
":func:`atomic` デコレータがネストされている場合、部分的なコミットやロールバッ"
"クを可能にするためにセーブポイントを作成します。以下に説明する関数よりも :"
"func:`atomic` を使用することを強く推奨しますが、これらはまだパブリック API の"
"一部であり、非推奨とする予定はありません。"

msgid ""
"Each of these functions takes a ``using`` argument which should be the name "
"of a database for which the behavior applies.  If no ``using`` argument is "
"provided then the ``\"default\"`` database is used."
msgstr ""
"これらの関数はそれぞれ ``using`` 引数を取り、その引数には動作が適用されるデー"
"タベースの名前を指定します。 引数に ``using`` が指定されていない場合は、 "
"``\"default\"`` データベースが使用されます。"

msgid ""
"Savepoints are controlled by three functions in :mod:`django.db.transaction`:"
msgstr ""
"セーブポイントは :mod:`django.db.transaction` の3つの関数で制御されます:"

msgid ""
"Creates a new savepoint. This marks a point in the transaction that is known "
"to be in a \"good\" state. Returns the savepoint ID (``sid``)."
msgstr ""
"新しいセーブポイントを作成します。これはトランザクションの中で \"良い\" 状態"
"であることが分かっている点をマークします。セーブポイントID (``sid``) を返しま"
"す。"

msgid ""
"Releases savepoint ``sid``. The changes performed since the savepoint was "
"created become part of the transaction."
msgstr ""
"セーブポイント ``sid`` を解放します。セーブポイントが作成されてから行われた変"
"更は、トランザクションの一部となります。"

msgid "Rolls back the transaction to savepoint ``sid``."
msgstr "トランザクションをセーブポイント ``sid`` にロールバックします。"

msgid ""
"These functions do nothing if savepoints aren't supported or if the database "
"is in autocommit mode."
msgstr ""
"これらの関数は、セーブポイントがサポートされていない場合やデータベースが自動"
"コミットモードの場合は何もしません。"

msgid "In addition, there's a utility function:"
msgstr "さらに、ユーティリティ関数があります:"

msgid "Resets the counter used to generate unique savepoint IDs."
msgstr "一意のセーブポイントIDを生成するためのカウンタをリセットします。"

msgid "The following example demonstrates the use of savepoints::"
msgstr "以下に、セーブポイントの使い方の例を示します:"

msgid ""
"Savepoints may be used to recover from a database error by performing a "
"partial rollback. If you're doing this inside an :func:`atomic` block, the "
"entire block will still be rolled back, because it doesn't know you've "
"handled the situation at a lower level! To prevent this, you can control the "
"rollback behavior with the following functions."
msgstr ""
"セーブポイントは部分的なロールバックを行うことで、データベースエラーから回復"
"するために使用できます。:func:`atomic` ブロックの中でこの処理を行っている場"
"合、ブロック全体がロールバックされます！これを防ぐために、以下の関数でロール"
"バックの動作を制御できます。"

msgid ""
"Setting the rollback flag to ``True`` forces a rollback when exiting the "
"innermost atomic block. This may be useful to trigger a rollback without "
"raising an exception."
msgstr ""
"ロールバックフラグを ``True`` に設定すると、最も内側のアトミックブロックを終"
"了するときにロールバックします。これは例外を発生させずにロールバックを行うの"
"に便利です。"

msgid ""
"Setting it to ``False`` prevents such a rollback. Before doing that, make "
"sure you've rolled back the transaction to a known-good savepoint within the "
"current atomic block! Otherwise you're breaking atomicity and data "
"corruption may occur."
msgstr ""
"これを ``False`` に設定すると、このようなロールバックを防ぐことができます。こ"
"れを行う前に、トランザクションを現在のアトミックブロック内の既知のセーブポイ"
"ントまでロールバックしたことを確認してください！そうしないと、アトミック性が"
"壊れてしまい、データの破損が発生する可能性があります。"

msgid "Database-specific notes"
msgstr "データベース固有の注意事項"

msgid "Savepoints in SQLite"
msgstr "SQLite におけるセーブポイント"

msgid ""
"While SQLite supports savepoints, a flaw in the design of the :mod:`sqlite3` "
"module makes them hardly usable."
msgstr ""
"SQLiteはセーブポイントをサポートしていますが、 :mod:`sqlite3` モジュールの設"
"計に欠陥があるため、セーブポイントはほとんど使えません。"

msgid ""
"When autocommit is enabled, savepoints don't make sense. When it's "
"disabled, :mod:`sqlite3` commits implicitly before savepoint statements. (In "
"fact, it commits before any statement other than ``SELECT``, ``INSERT``, "
"``UPDATE``, ``DELETE`` and ``REPLACE``.) This bug has two consequences:"
msgstr ""
"自動コミットが有効な場合、セーブポイントは意味を成しません。これが無効な場"
"合、 :mod:`sqlite3` はセーブポイントステートメントの前に暗黙的にコミットしま"
"す。(実際には ``SELECT`` 、 ``INSERT`` 、 ``UPDATE`` 、 ``DELETE`` 、 "
"``REPLACE`` 以外のステートメントの前にコミットします)。このバグには2つの影響"
"があります:"

msgid ""
"The low level APIs for savepoints are only usable inside a transaction i.e. "
"inside an :func:`atomic` block."
msgstr ""
"セーブポイントの低レベルのAPIはトランザクションの中、つまり :func:`atomic` ブ"
"ロックの中でしか使えません。"

msgid "It's impossible to use :func:`atomic` when autocommit is turned off."
msgstr ""
"自動コミットがオフになっている場合、:func:`atomic` を使用することはできませ"
"ん。"

msgid "Transactions in MySQL"
msgstr "MySQL におけるトランザクション"

msgid ""
"If you're using MySQL, your tables may or may not support transactions; it "
"depends on your MySQL version and the table types you're using. (By \"table "
"types,\" we mean something like \"InnoDB\" or \"MyISAM\".) MySQL transaction "
"peculiarities are outside the scope of this article, but the MySQL site has "
"`information on MySQL transactions`_."
msgstr ""
"MySQL を使用している場合、テーブルがトランザクションをサポートしているかどう"
"かは MySQL のバージョンと使用しているテーブルタイプに依存します。(「テーブル"
"タイプ」とは、「InnoDB」や「MyISAM」のようなものを意味します。) MySQLのトラン"
"ザクションに関する特殊性はこの記事の範囲外ですが、MySQLのサイトには "
"`information on MySQL transactions`_ があります。"

msgid ""
"If your MySQL setup does *not* support transactions, then Django will always "
"function in autocommit mode: statements will be executed and committed as "
"soon as they're called. If your MySQL setup *does* support transactions, "
"Django will handle transactions as explained in this document."
msgstr ""
"MySQL がトランザクションをサポートしていない場合、 Django は常に自動コミット"
"モードで動作します。MySQL がトランザクションをサポートしている場合、 Django "
"はこの文書で説明されているようにトランザクションを処理します。"

msgid "Handling exceptions within PostgreSQL transactions"
msgstr "PostgreSQLトランザクション内での例外ハンドリング"

msgid ""
"This section is relevant only if you're implementing your own transaction "
"management. This problem cannot occur in Django's default mode and :func:"
"`atomic` handles it automatically."
msgstr ""
"このセクションは、独自のトランザクション管理を実装している場合にだけ関係があ"
"ります。この問題は Django のデフォルトモードでは発生せず、 :func:`atomic` が"
"自動的に処理します。"

msgid ""
"Inside a transaction, when a call to a PostgreSQL cursor raises an exception "
"(typically ``IntegrityError``), all subsequent SQL in the same transaction "
"will fail with the error \"current transaction is aborted, queries ignored "
"until end of transaction block\". While the basic use of ``save()`` is "
"unlikely to raise an exception in PostgreSQL, there are more advanced usage "
"patterns which might, such as saving objects with unique fields, saving "
"using the ``force_insert``/``force_update`` flag, or invoking custom SQL."
msgstr ""
"トランザクション内で、PostgreSQLカーソルの呼び出しが例外（通常は "
"``IntegrityError`` ）を発生させた場合、同じトランザクション内の後続のSQLはす"
"べて \"current transaction is aborted, queries ignored until end of "
"transaction block\" というエラーで失敗します。 ``save()`` の基本的な使用では"
"例外を発生させる可能性は低いですが、一意なフィールドを持つオブジェクトの保"
"存、 ``force_insert``/``force_update`` フラグを使用した保存、カスタムSQLの実"
"行など、より高度な使用パターンでは例外が発生する可能性があります。"

msgid "There are several ways to recover from this sort of error."
msgstr "この種のエラーから回復する方法はいくつかあります。"

msgid "Transaction rollback"
msgstr "トランザクションのロールバック"

msgid "The first option is to roll back the entire transaction. For example::"
msgstr ""
"一つ目の選択肢は、トランザクション全体をロールバックすることです。たとえば:"

msgid ""
"Calling ``transaction.rollback()`` rolls back the entire transaction. Any "
"uncommitted database operations will be lost. In this example, the changes "
"made by ``a.save()`` would be lost, even though that operation raised no "
"error itself."
msgstr ""
"``transaction.rollback()`` を呼び出すと、トランザクション全体がロールバックさ"
"れます。コミットされていないデータベース操作はすべて失われます。この例では、"
"``a.save()`` による変更は、その操作自体がエラーを発生させなかったにもかかわら"
"ず、失われることになります。"

msgid "Savepoint rollback"
msgstr "セーブポイントのロールバック"

msgid ""
"You can use :ref:`savepoints <topics-db-transactions-savepoints>` to control "
"the extent of a rollback. Before performing a database operation that could "
"fail, you can set or update the savepoint; that way, if the operation fails, "
"you can roll back the single offending operation, rather than the entire "
"transaction. For example::"
msgstr ""
":ref:`セーブポイント <topics-db-transactions-savepoints>` を使用すると、ロー"
"ルバックの範囲を制御できます。失敗する可能性のあるデータベース操作を実行する"
"前に、セーブポイントを設定または更新できます。こうすることで、操作に失敗した"
"場合にトランザクション全体ではなく、問題のある操作だけをロールバックできま"
"す。たとえば、次のようにします:"

msgid ""
"In this example, ``a.save()`` will not be undone in the case where ``b."
"save()`` raises an exception."
msgstr ""
"この例では、 ``b.save()`` が例外を発生させても、 ``a.save()`` は元に戻りませ"
"ん。"

msgid "Sending email"
msgstr "メールを送信する"

msgid ""
"Although Python provides a mail sending interface via the :mod:`smtplib` "
"module, Django provides a couple of light wrappers over it. These wrappers "
"are provided to make sending email extra quick, to help test email sending "
"during development, and to provide support for platforms that can't use SMTP."
msgstr ""
"Python は :mod:`smtplib` モジュールを使ってメール送信インタフェースを提供して"
"いますが、Django はさらにいくつかの軽いラッパーを用意しています。これらのラッ"
"パーは、 メールをよりすばやく送信したり、開発中にメール送信をテストしたり、"
"SMTP を使用できないプラットフォームをサポートしたりするために用意されていま"
"す。"

msgid "The code lives in the ``django.core.mail`` module."
msgstr "コードは ``django.core.mail`` モジュールにあります。"

msgid "In two lines::"
msgstr "次の 2 文を書くことで、"

msgid ""
"Mail is sent using the SMTP host and port specified in the :setting:"
"`EMAIL_HOST` and :setting:`EMAIL_PORT` settings. The :setting:"
"`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD` settings, if set, are "
"used to authenticate to the SMTP server, and the :setting:`EMAIL_USE_TLS` "
"and :setting:`EMAIL_USE_SSL` settings control whether a secure connection is "
"used."
msgstr ""
"設定内の :setting:`EMAIL_HOST` と :setting:`EMAIL_PORT` で指定された SMTP ホ"
"ストとポートを使用して、メールが送信されます。:setting:`EMAIL_HOST_USER` と :"
"setting:`EMAIL_HOST_PASSWORD` が指定されている場合は、SMTP サーバーの認証に使"
"われます。そして、:setting:`EMAIL_USE_TLS` と :setting:`EMAIL_USE_SSL` 設定に"
"より、セキュアコネクションを使うかどうかをコントロールします。"

msgid ""
"The character set of email sent with ``django.core.mail`` will be set to the "
"value of your :setting:`DEFAULT_CHARSET` setting."
msgstr ""
"``django.core.mail`` で送信されるメールの文字セットは、:setting:"
"`DEFAULT_CHARSET` 設定の値にセットされます。"

msgid "``send_mail()``"
msgstr "``send_mail()``"

msgid ""
"In most cases, you can send email using ``django.core.mail.send_mail()``."
msgstr ""
"ほとんどの場合、 ``django.core.mail.send_mail()`` を使ってメールを送信できま"
"す。"

msgid ""
"The ``subject``, ``message``, ``from_email`` and ``recipient_list`` "
"parameters are required."
msgstr ""
"``subject``、``message``、``from_email``、``recipient_list`` の 4 つの引数は"
"必須です。"

msgid "``subject``: A string."
msgstr "``subject``: 文字列。"

msgid "``message``: A string."
msgstr "``message``: 文字列。"

msgid ""
"``from_email``: A string. If ``None``, Django will use the value of the :"
"setting:`DEFAULT_FROM_EMAIL` setting."
msgstr ""
"``from_email``: 文字列。もし ``None`` なら、 Django は :setting:"
"`DEFAULT_FROM_EMAIL` 設定の値を使います。"

msgid ""
"``recipient_list``: A list of strings, each an email address. Each member of "
"``recipient_list`` will see the other recipients in the \"To:\" field of the "
"email message."
msgstr ""
"``recipient_list``: メールアドレスを表す文字列のリスト。``recipient_list`` の"
"各メンバーは、メールメッセージの \"To:\" フィールドで他の受信者を見ることがで"
"きます。"

msgid ""
"``fail_silently``: A boolean. When it's ``False``, ``send_mail()`` will "
"raise an :exc:`smtplib.SMTPException` if an error occurs. See the :mod:"
"`smtplib` docs for a list of possible exceptions, all of which are "
"subclasses of :exc:`~smtplib.SMTPException`."
msgstr ""
"``fail_silently``: 真偽値です。これが ``False`` の場合、エラーが発生したとき"
"に ``send_mail()`` は :exc:`smtplib.SMTPException` を発生させます。可能な例外"
"のリストについては :mod:`smtplib` のドキュメントを参照してください。これらの"
"例外はすべて :exc:`~smtplib.SMTPException` のサブクラスです。"

msgid ""
"``auth_user``: The optional username to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_USER` setting."
msgstr ""
"``auth_user``: SMTP サーバー認証のためのユーザー名で、省略可能。指定されな"
"かった場合、Django :setting:`EMAIL_HOST_USER` 設定の値を使います。"

msgid ""
"``auth_password``: The optional password to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_PASSWORD` setting."
msgstr ""
"``auth_password``: SMTP サーバー認証のためのパスワードで、省略可能。指定され"
"なかった場合、Django は :setting:`EMAIL_HOST_PASSWORD` 設定の値を使います。"

msgid ""
"``connection``: The optional email backend to use to send the mail. If "
"unspecified, an instance of the default backend will be used. See the "
"documentation on :ref:`Email backends <topic-email-backends>` for more "
"details."
msgstr ""
"``connection``: メール送信のために使うバックエンドで、省略可能。指定しなかっ"
"た場合、デフォルトのバックエンドのインスタンスが使われます。詳しくは :ref:`"
"メールのバックエンド <topic-email-backends>` を参照してください。"

msgid ""
"``html_message``: If ``html_message`` is provided, the resulting email will "
"be a :mimetype:`multipart/alternative` email with ``message`` as the :"
"mimetype:`text/plain` content type and ``html_message`` as the :mimetype:"
"`text/html` content type."
msgstr ""
"``html_message``: ``html_message`` が指定された場合、送信されるメールは :"
"mimetype:`multipart/alternative` となり、:mimetype:`text/plain` コンテンツタ"
"イプを持つ ``message`` と :mimetype:`text/html` コンテンツタイプを持つ "
"``html_message`` を合わせ持つものになります。"

msgid ""
"The return value will be the number of successfully delivered messages "
"(which can be ``0`` or ``1`` since it can only send one message)."
msgstr ""
"返り値は、送信に成功したメッセージの数です (送信されるメッセージが 1 つだけの"
"場合もあるため、``0`` や ``1`` になることもあります)。"

msgid "``send_mass_mail()``"
msgstr "``send_mass_mail()``"

msgid ""
"``django.core.mail.send_mass_mail()`` is intended to handle mass emailing."
msgstr ""
"``django.core.mail.send_mass_mail()`` は、大量のメール送信を扱うために用意さ"
"れています。"

msgid "``datatuple`` is a tuple in which each element is in this format::"
msgstr ""
"``datatuple`` はメッセージの集合を表すタプルです。タプル内の各要素は、それぞ"
"れ1種類のメッセージを表すタプルであり、次の形式を持ちます。"

msgid ""
"``fail_silently``, ``auth_user`` and ``auth_password`` have the same "
"functions as in :meth:`~django.core.mail.send_mail()`."
msgstr ""
"``fail_silently``、``auth_user``、``auth_password`` の 3 つは、:meth:"
"`~django.core.mail.send_mail()` と同じように機能します。"

msgid ""
"Each separate element of ``datatuple`` results in a separate email message. "
"As in :meth:`~django.core.mail.send_mail()`, recipients in the same "
"``recipient_list`` will all see the other addresses in the email messages' "
"\"To:\" field."
msgstr ""
"``datatuple`` に含まれる各要素は、最終的には別々のメールメッセージとなりま"
"す。:meth:`~django.core.mail.send_mail()` における挙動と同じく、"
"``recipient_list`` 内の受信者は、メールメッセージの \"To:\" フィールドに書か"
"れている他の受信者のアドレスを見ることができます。"

msgid ""
"For example, the following code would send two different messages to two "
"different sets of recipients; however, only one connection to the mail "
"server would be opened::"
msgstr ""
"たとえば、次のコードは異なる 2 つのメッセージを 異なる 2 つの受信者のセットに"
"送信します。しかし、メールサーバーへのコネクションは 1 つしか開かれません。"

msgid "The return value will be the number of successfully delivered messages."
msgstr "戻り値は、メッセージ送信に成功した数です。"

msgid "``send_mass_mail()`` vs. ``send_mail()``"
msgstr "``send_mass_mail()`` と ``send_mail()`` の比較"

msgid ""
"The main difference between :meth:`~django.core.mail.send_mass_mail()` and :"
"meth:`~django.core.mail.send_mail()` is that :meth:`~django.core.mail."
"send_mail()` opens a connection to the mail server each time it's executed, "
"while :meth:`~django.core.mail.send_mass_mail()` uses a single connection "
"for all of its messages. This makes :meth:`~django.core.mail."
"send_mass_mail()` slightly more efficient."
msgstr ""
":meth:`~django.core.mail.send_mass_mail()` と :meth:`~django.core.mail."
"send_mail()` 違いは、:meth:`~django.core.mail.send_mail()` が実行されるごとに"
"毎回コネクションを開くのに対して、:meth:`~django.core.mail.send_mass_mail()` "
"はすべてのメッセージに対して 1 つだけコネクションを使います。これにより、:"
"meth:`~django.core.mail.send_mass_mail()` の方が若干効率がよくなっています。"

msgid "``mail_admins()``"
msgstr "``mail_admins()``"

msgid ""
"``django.core.mail.mail_admins()`` is a shortcut for sending an email to the "
"site admins, as defined in the :setting:`ADMINS` setting."
msgstr ""
"``django.core.mail.mail_admins()`` は、:setting:`ADMINS` 設定で定義されている"
"サイト管理者 (admin) に対してメールを送信するためのショートカットです。"

msgid ""
"``mail_admins()`` prefixes the subject with the value of the :setting:"
"`EMAIL_SUBJECT_PREFIX` setting, which is ``\"[Django] \"`` by default."
msgstr ""
"``mail_admins()`` は件名の前に :setting:`EMAIL_SUBJECT_PREFIX` 設定の値を付け"
"ますが、デフォルトでは ``\"[Django] \"`` です。"

msgid ""
"The \"From:\" header of the email will be the value of the :setting:"
"`SERVER_EMAIL` setting."
msgstr ""
"メールの \"From: \" ヘッダは :setting:`SERVER_EMAIL` 設定の値になります。"

msgid "This method exists for convenience and readability."
msgstr "このメソッドは利便性と読みやすさのために存在します。"

msgid ""
"If ``html_message`` is provided, the resulting email will be a :mimetype:"
"`multipart/alternative` email with ``message`` as the :mimetype:`text/plain` "
"content type and ``html_message`` as the :mimetype:`text/html` content type."
msgstr ""
"``html_message`` が指定された場合、送信されるメールは :mimetype:`multipart/"
"alternative` となり、:mimetype:`text/plain` コンテンツタイプを持つ "
"``message`` と :mimetype:`text/html` コンテンツタイプを持つ ``html_message`` "
"を合わせ持つものになります。"

msgid "``mail_managers()``"
msgstr "``mail_managers()``"

msgid ""
"``django.core.mail.mail_managers()`` is just like ``mail_admins()``, except "
"it sends an email to the site managers, as defined in the :setting:"
"`MANAGERS` setting."
msgstr ""
"``django.core.mail.mail_managers()`` は、``mail_admins()`` とほぼ同じで、:"
"setting:`MANAGERS` 設定で定義されているサイト管理者 (manager) にメールを送信"
"します。"

msgid "Examples"
msgstr "例"

msgid ""
"This sends a single email to john@example.com and jane@example.com, with "
"them both appearing in the \"To:\"::"
msgstr ""
"以下の例は、john@example.com と jane@example.com に1つのメールを送信します。2"
"人とも \"To:\" 内に宛先が見られます。"

msgid ""
"This sends a message to john@example.com and jane@example.com, with them "
"both receiving a separate email::"
msgstr ""
"次の例は、john@example.com と jane@example.com にメールを送信しますが、受信者"
"はどちらも個別のメールを受け取ります。"

msgid "Preventing header injection"
msgstr "ヘッダインジェクションを防止する"

msgid ""
"`Header injection`_ is a security exploit in which an attacker inserts extra "
"email headers to control the \"To:\" and \"From:\" in email messages that "
"your scripts generate."
msgstr ""
"`ヘッダインジェクション`_ は、攻撃者が 、スクリプトで生成されたメールメッセー"
"ジの \"To:\" と \"From:\" をコントロールするために、メールヘッダを挿入してし"
"まうセキュリティ上の脆弱性です。"

msgid ""
"The Django email functions outlined above all protect against header "
"injection by forbidding newlines in header values. If any ``subject``, "
"``from_email`` or ``recipient_list`` contains a newline (in either Unix, "
"Windows or Mac style), the email function (e.g. :meth:`~django.core.mail."
"send_mail()`) will raise ``django.core.mail.BadHeaderError`` (a subclass of "
"``ValueError``) and, hence, will not send the email. It's your "
"responsibility to validate all data before passing it to the email functions."
msgstr ""
"上述した Django のメール機能は、ヘッダー値の改行を禁止することによってヘッダ"
"インジェクションを防ぎます。 ``subject``、``from_email``、``recipient_list`` "
"のいずれかに 改行 (Unix、Windows ないし Mac のスタイル) が含まれている場合、"
"email 関数 (例えば :meth:`~django.core.mail.send_mail()`) は ``django.core."
"mail.BadHeaderError`` (``ValueError`` のサブクラス) 投げるため、メールは送信"
"されません。メール送信を行う関数にデータを渡す前に、開発者は責任を持ってすべ"
"てのデータを検証しておく必要があります。"

msgid ""
"If a ``message`` contains headers at the start of the string, the headers "
"will be printed as the first bit of the email message."
msgstr ""
"ヘッダーが含まれている文字列を ``message`` として渡した場合、ヘッダー部分は"
"メールメッセージの冒頭に出力されます。"

msgid ""
"Here's an example view that takes a ``subject``, ``message`` and "
"``from_email`` from the request's POST data, sends that to admin@example.com "
"and redirects to \"/contact/thanks/\" when it's done::"
msgstr ""
"次の例は、リクエストの POST データから ``subject``、``message``、"
"``from_email`` を取得し、それを admin@example.com に送信し、完了したら \"/"
"contact/thanks/\" にリダイレクトします。"

msgid "The ``EmailMessage`` class"
msgstr "``EmailMessage`` クラス"

msgid ""
"Django's :meth:`~django.core.mail.send_mail()` and :meth:`~django.core.mail."
"send_mass_mail()` functions are actually thin wrappers that make use of the :"
"class:`~django.core.mail.EmailMessage` class."
msgstr ""
"Django の :meth:`~django.core.mail.send_mail()` と :meth:`~django.core.mail."
"send_mass_mail()` 関数は :class:`~django.core.mail.EmailMessage` クラスを実際"
"に使うための小さなラッパーです。"

msgid ""
"Not all features of the :class:`~django.core.mail.EmailMessage` class are "
"available through the :meth:`~django.core.mail.send_mail()` and related "
"wrapper functions. If you wish to use advanced features, such as BCC'ed "
"recipients, file attachments, or multi-part email, you'll need to create :"
"class:`~django.core.mail.EmailMessage` instances directly."
msgstr ""
":class:`~django.core.mail.EmailMessage` クラスの機能のすべてが :meth:"
"`~django.core.mail.send_mail()` やその他のラッパーで使用可能というわけではあ"
"りません。高度な機能を使いたい場合 (例えば BCC の利用、ファイル添付やマルチ"
"パートのメールなど) :class:`~django.core.mail.EmailMessage` のインスタンスを"
"直接作成する必要があります。"

msgid ""
"This is a design feature. :meth:`~django.core.mail.send_mail()` and related "
"functions were originally the only interface Django provided. However, the "
"list of parameters they accepted was slowly growing over time. It made sense "
"to move to a more object-oriented design for email messages and retain the "
"original functions only for backwards compatibility."
msgstr ""
"これは設計特性です。:meth:`~django.core.mail.send_mail()` およびその関連の関"
"数は、元は Django が提供した唯一のインタフェースでした。しかし、受け入れるパ"
"ラメータのリストが次第に肥大化してきてしまったので、よりオブジェクト指向的な"
"設計に移行し、元の関数は後方互換性確保のためだけに残すことになりました。"

msgid ""
":class:`~django.core.mail.EmailMessage` is responsible for creating the "
"email message itself. The :ref:`email backend <topic-email-backends>` is "
"then responsible for sending the email."
msgstr ""
":class:`~django.core.mail.EmailMessage` はメールメッセージ本体を作成する役割"
"を担っており、その後、:ref:`メールのバックエンド <topic-email-backends>` が"
"メールを送信する役目を果たします。"

msgid ""
"For convenience, :class:`~django.core.mail.EmailMessage` provides a "
"``send()`` method for sending a single email. If you need to send multiple "
"messages, the email backend API :ref:`provides an alternative <topics-"
"sending-multiple-emails>`."
msgstr ""
"利便性のため、 :class:`~django.core.mail.EmailMessage` には単一のメールを送信"
"するための ``send()`` メソッドが用意されています。複数のメッセージを送信する"
"必要がある場合は、メールバックエンドAPIが :ref:`別の方法 <topics-sending-"
"multiple-emails>` を提供しています。"

msgid "``EmailMessage`` Objects"
msgstr "``EmailMessage`` オブジェクト"

msgid ""
"The :class:`~django.core.mail.EmailMessage` class is initialized with the "
"following parameters (in the given order, if positional arguments are used). "
"All parameters are optional and can be set at any time prior to calling the "
"``send()`` method."
msgstr ""
":class:`~django.core.mail.EmailMessage` クラスは、以下のパラメータで (省略可"
"能な引数が使われた場合、その順番で) 初期化されます。全てのパラメータは省略可"
"能で、``send()`` メソッドを呼ぶ前のタイミングでセットされます。"

msgid "``subject``: The subject line of the email."
msgstr "``subject``: メールの件名の行。"

msgid "``body``: The body text. This should be a plain text message."
msgstr ""
"``body``: 本文のテキスト。プレーンテキストのメッセージでなければなりません。"

msgid ""
"``from_email``: The sender's address. Both ``fred@example.com`` and "
"``\"Fred\" <fred@example.com>`` forms are legal. If omitted, the :setting:"
"`DEFAULT_FROM_EMAIL` setting is used."
msgstr ""
"``from_email``: 送信者のアドレス。 ``fred@example.com`` と ``\"Fred\" "
"<fred@example.com>`` のどちらの形式でも構いません。省略された場合は :setting:"
"`DEFAULT_FROM_EMAIL` の設定が使用されます。"

msgid "``to``: A list or tuple of recipient addresses."
msgstr "``to``: 受信者のメールアドレスのリストまたはタプル。"

msgid ""
"``bcc``: A list or tuple of addresses used in the \"Bcc\" header when "
"sending the email."
msgstr ""
"``bcc``: メールを送信するときに \"Bcc\" ヘッダ内で使われるメールアドレスのリ"
"ストまたはタプル。"

msgid ""
"``connection``: An email backend instance. Use this parameter if you want to "
"use the same connection for multiple messages. If omitted, a new connection "
"is created when ``send()`` is called."
msgstr ""
"``connection``: メールバックエンドのインスタンス。複数のメッセージに同一のコ"
"ネクションを使いたいときに指定します。省略した場合、``send()`` が呼ばれる時に"
"新しいコネクションが生成されます。"

msgid ""
"``attachments``: A list of attachments to put on the message. These can be "
"either :class:`~email.mime.base.MIMEBase` instances, or ``(filename, "
"content, mimetype)`` triples."
msgstr ""
"``attachments``： メッセージに添付する添付ファイルのリスト。 :class:`~email."
"mime.base.MIMEBase` インスタンスか ``(filename, content, mimetype)`` の3値タ"
"プルです。"

msgid ""
"``headers``: A dictionary of extra headers to put on the message. The keys "
"are the header name, values are the header values. It's up to the caller to "
"ensure header names and values are in the correct format for an email "
"message. The corresponding attribute is ``extra_headers``."
msgstr ""
"``headers``: メッセージに追加するヘッダーの辞書。キーはヘッダ名、値はヘッダ値"
"です。メールメッセージに対して適切なヘッダ名と値にするのは、呼び出す側の責任"
"です。対応する属性は ``extra_headers`` です。"

msgid ""
"``cc``: A list or tuple of recipient addresses used in the \"Cc\" header "
"when sending the email."
msgstr ""
"メールを送信するときに \"Cc\" ヘッダ内で使われる、受信者のアドレスのリストま"
"たはタプル。"

msgid ""
"``reply_to``: A list or tuple of recipient addresses used in the \"Reply-"
"To\" header when sending the email."
msgstr ""
"``reply_to``: メールを送信するときに \"Reply-To\" ヘッダ内で使われる、受信者"
"のアドレスのリストまたはタプル。"

msgid "The class has the following methods:"
msgstr "このクラスには以下のメソッドがあります。"

msgid ""
"``send(fail_silently=False)`` sends the message. If a connection was "
"specified when the email was constructed, that connection will be used. "
"Otherwise, an instance of the default backend will be instantiated and used. "
"If the keyword argument ``fail_silently`` is ``True``, exceptions raised "
"while sending the message will be quashed. An empty list of recipients will "
"not raise an exception. It will return ``1`` if the message was sent "
"successfully, otherwise ``0``."
msgstr ""
"``send(fail_silently=False)`` はメールを送信します。メールの作成時にコネク"
"ションが指定されていた場合は、そのコネクションが使用されます。 そうでない場合"
"は、デフォルトのバックエンドのインスタンスがインスタンス化され、使用されま"
"す。キーワード引数 ``fail_silently`` が ``True`` の場合、メッセージの送信中に"
"例外が発生した場合、その例外は処理されます。空の受信者リストは例外を発生させ"
"ません。メッセージが正常に送信された場合は ``1`` を返し、そうでない場合は "
"``0`` を返します。"

msgid ""
"``message()`` constructs a ``django.core.mail.SafeMIMEText`` object (a "
"subclass of Python's :class:`~email.mime.text.MIMEText` class) or a ``django."
"core.mail.SafeMIMEMultipart`` object holding the message to be sent. If you "
"ever need to extend the :class:`~django.core.mail.EmailMessage` class, "
"you'll probably want to override this method to put the content you want "
"into the MIME object."
msgstr ""
"``message()`` は送信するメッセージを保持する ``django.core.mail."
"SafeMIMEText`` オブジェクト (Python の :class:`~email.mime.text.MIMEText` ク"
"ラスのサブクラス) または ``django.core.mail.SafeMIMEMultipart`` オブジェクト"
"を構築します。もし :class:`~django.core.mail.EmailMessage` クラスを拡張する必"
"要がある場合は、おそらくこのメソッドをオーバーライドして MIME オブジェクトに"
"必要な内容を入れることになるでしょう。"

msgid ""
"``recipients()`` returns a list of all the recipients of the message, "
"whether they're recorded in the ``to``, ``cc`` or ``bcc`` attributes. This "
"is another method you might need to override when subclassing, because the "
"SMTP server needs to be told the full list of recipients when the message is "
"sent. If you add another way to specify recipients in your class, they need "
"to be returned from this method as well."
msgstr ""
"``recipients()`` は、``to``、``cc``、``bcc`` のいずれかの属性に記録されてい"
"る、メッセージの全ての受信者のリストを返します。サブクラス化するときには、"
"メッセージの送信時に SMTP サーバが受信者の完全な一覧を必要とするため、このメ"
"ソッドもオーバーライドする必要があります。クラス内で受信者を指定する別の方法"
"を追加する場合は、このメソッドからも返される必要があります。"

msgid ""
"``attach()`` creates a new file attachment and adds it to the message. There "
"are two ways to call ``attach()``:"
msgstr ""
"``attach()`` は新しい添付ファイルを作成し、メッセージに追加します。"
"``attach()`` を呼ぶには2 つの方法があります。"

msgid ""
"You can pass it a single argument that is a :class:`~email.mime.base."
"MIMEBase` instance. This will be inserted directly into the resulting "
"message."
msgstr ""
":class:`~email.mime.base.MIMEBase` のインスタンスを引数として渡すことができま"
"す。これは生成されるメッセージに直接挿入されます。"

msgid ""
"Alternatively, you can pass ``attach()`` three arguments: ``filename``, "
"``content`` and ``mimetype``. ``filename`` is the name of the file "
"attachment as it will appear in the email, ``content`` is the data that will "
"be contained inside the attachment and ``mimetype`` is the optional MIME "
"type for the attachment. If you omit ``mimetype``, the MIME content type "
"will be guessed from the filename of the attachment."
msgstr ""
"もしくは、``attach()`` の 3 つの引数を引き渡します: ``filename``、"
"``content``、``mimetype`` です。``filename`` は、メール内に表示される添付ファ"
"イルの名前です。``content`` は、添付ファイル内に含まれるデータです。"
"``mimetype`` は添付ファイルに対する MIME タイプで、省略可能です。"
"``mimetype`` を省略した場合、MIME コンテンツタイプは添付ファイルのファイル名"
"から推測されます。"

msgid ""
"If you specify a ``mimetype`` of :mimetype:`message/rfc822`, it will also "
"accept :class:`django.core.mail.EmailMessage` and :py:class:`email.message."
"Message`."
msgstr ""
"また :mimetype:`message/rfc822` の ``mimetype`` を指定すると、 :class:"
"`django.core.mail.EmailMessage` や :py:class:`email.message.Message` も受け付"
"けます。"

msgid ""
"For a ``mimetype`` starting with :mimetype:`text/`, content is expected to "
"be a string. Binary data will be decoded using UTF-8, and if that fails, the "
"MIME type will be changed to :mimetype:`application/octet-stream` and the "
"data will be attached unchanged."
msgstr ""
":mimetype:`text/` で始まる ``mimetype`` では、コンテンツは文字列であることが"
"期待されます。バイナリデータはUTF-8でデコードされ、それが失敗した場合、MIMEタ"
"イプは :mimetype:`application/octet-stream` に変更され、データは変更されずに"
"添付されます。"

msgid ""
"In addition, :mimetype:`message/rfc822` attachments will no longer be base64-"
"encoded in violation of :rfc:`2046#section-5.2.1`, which can cause issues "
"with displaying the attachments in `Evolution`__ and `Thunderbird`__."
msgstr ""
"さらに、 :mimetype:`message/rfc822` の添付ファイルは :rfc:"
"`2046#section-5.2.1` に違反して base64 エンコードされることはなくなりました。"
"これは `Evolution`__ と `Thunderbird`__ で添付ファイルを表示する際に問題を引"
"き起こす可能性があります。"

msgid ""
"``attach_file()`` creates a new attachment using a file from your "
"filesystem. Call it with the path of the file to attach and, optionally, the "
"MIME type to use for the attachment. If the MIME type is omitted, it will be "
"guessed from the filename. You can use it like this::"
msgstr ""
"``attach_file()`` はファイルシステム上のファイルを使って新しい添付ファイルを"
"作成します。添付するファイルのパスと、: オプションで添付に使用する MIME タイ"
"プを指定して呼び出してください。MIMEタイプが省略された場合は、ファイル名から"
"推測されます。次のように使用します:"

msgid ""
"For MIME types starting with :mimetype:`text/`, binary data is handled as in "
"``attach()``."
msgstr ""
":mimetype:`text/` で始まるMIMEタイプでは、バイナリデータは ``attach()`` のよ"
"うに扱われます。"

msgid "Sending alternative content types"
msgstr "代替のコンテンツタイプを送信する"

msgid ""
"It can be useful to include multiple versions of the content in an email; "
"the classic example is to send both text and HTML versions of a message. "
"With Django's email library, you can do this using the "
"``EmailMultiAlternatives`` class. This subclass of :class:`~django.core.mail."
"EmailMessage` has an ``attach_alternative()`` method for including extra "
"versions of the message body in the email. All the other methods (including "
"the class initialization) are inherited directly from :class:`~django.core."
"mail.EmailMessage`."
msgstr ""
"メール内にコンテンツの複数のバージョンを入れておくのが便利です; 古典的な手法"
"では、メッセージをテキストと HTML の両方のバージョンで送信します。 Django の"
"メールのライブラリで、``EmailMultiAlternatives`` を使ってこれを実現できます。"
"この :class:`~django.core.mail.EmailMessage` のサブクラスには、"
"``attach_alternative()`` があり、メール内のメッセージ本文の別バージョンを追加"
"できます。(クラスの初期化を含む) 他のメソッドは :class:`~django.core.mail."
"EmailMessage` から直接継承されます。"

msgid "To send a text and HTML combination, you could write::"
msgstr "テキストと HTML の組み合わせを送るには、以下のように書きます::"

msgid ""
"By default, the MIME type of the ``body`` parameter in an :class:`~django."
"core.mail.EmailMessage` is ``\"text/plain\"``. It is good practice to leave "
"this alone, because it guarantees that any recipient will be able to read "
"the email, regardless of their mail client. However, if you are confident "
"that your recipients can handle an alternative content type, you can use the "
"``content_subtype`` attribute on the :class:`~django.core.mail.EmailMessage` "
"class to change the main content type. The major type will always be "
"``\"text\"``, but you can change the subtype. For example::"
msgstr ""
"デフォルトでは、:class:`~django.core.mail.EmailMessage` 内の ``body`` パラ"
"メータの MIME タイプは ``\"text/plain\"`` です。この設定だとメールクライアン"
"トにかかわらず全ての受信者がメールを読むことができるので、このままにしておく"
"のが実用的です。しかし、受信者が代替のコンテンツタイプを扱えることが確かな場"
"合には、:class:`~django.core.mail.EmailMessage` の ``content_subtype`` 属性を"
"使ってメインのコンテンツタイプを変更することもできます。主なタイプは常に "
"``\"text\"`` ですが、サブタイプを変更できます。例えば::"

msgid "Email backends"
msgstr "メールのバックエンド"

msgid "The actual sending of an email is handled by the email backend."
msgstr "実際のメール送信は、メールバックエンドによって処理されます。"

msgid "The email backend class has the following methods:"
msgstr "メールバックエンドのクラスには以下のメソッドがあります:"

msgid "``open()`` instantiates a long-lived email-sending connection."
msgstr ""
"``open()`` は、長寿命のメール送信のコネクションをインスタンス化します。"

msgid "``close()`` closes the current email-sending connection."
msgstr "``close()`` は、現在のメール送信のコネクションを閉じます。"

msgid ""
"``send_messages(email_messages)`` sends a list of :class:`~django.core.mail."
"EmailMessage` objects. If the connection is not open, this call will "
"implicitly open the connection, and close the connection afterward. If the "
"connection is already open, it will be left open after mail has been sent."
msgstr ""
"``send_messages(email_messages)`` は :class:`~django.core.mail.EmailMessage` "
"オブジェクトのリストを送信します。コネクションがオープンになっていない場合、"
"この呼び出しを行うと暗黙的にコネクションがオープンになり、その後コネクション"
"がクローズされます。コネクションがすでにオープンになっている場合は、メールが"
"送信された後もオープンのままです。"

msgid ""
"It can also be used as a context manager, which will automatically call "
"``open()`` and ``close()`` as needed::"
msgstr ""
"コンテキストマネジャーとしても使うことができ、必要に応じて自動的に "
"``open()`` と ``close()`` 呼びます::"

msgid "Obtaining an instance of an email backend"
msgstr "メールバックエンドのインスタンスを取得する"

msgid ""
"The :meth:`get_connection` function in ``django.core.mail`` returns an "
"instance of the email backend that you can use."
msgstr ""
"``django.core.mail`` 内の :meth:`get_connection` 関数は、利用可能なメールバッ"
"クエンドのインスタンスを返します。"

msgid ""
"By default, a call to ``get_connection()`` will return an instance of the "
"email backend specified in :setting:`EMAIL_BACKEND`. If you specify the "
"``backend`` argument, an instance of that backend will be instantiated."
msgstr ""
"デフォルトでは、``get_connection()`` を呼び出すと :setting:`EMAIL_BACKEND` 内"
"で指定されたメールバックエンドのインスタンスを返します。``backend`` 引数を指"
"定した場合、そのバックエンドがインスタンス化されます。"

msgid ""
"The ``fail_silently`` argument controls how the backend should handle "
"errors. If ``fail_silently`` is True, exceptions during the email sending "
"process will be silently ignored."
msgstr ""
"``fail_silently`` 引数は、バックエンドがエラーをどのように扱うかをコントロー"
"ルします。``fail_silently`` が True の場合、メール送信プロセスの間に発生した"
"例外は何の通知もされずに無視されます。"

msgid ""
"All other arguments are passed directly to the constructor of the email "
"backend."
msgstr ""
"他の全ての引数は、メールバックエンドのコンストラクタに直接引き渡されます。"

msgid ""
"Django ships with several email sending backends. With the exception of the "
"SMTP backend (which is the default), these backends are only useful during "
"testing and development. If you have special email sending requirements, you "
"can :ref:`write your own email backend <topic-custom-email-backend>`."
msgstr ""
"Django には複数のメール送信バックエンドを付属しています。SMTP バックエンド "
"(デフォルトです) を除いて、これらのバックエンドはテストと開発のみで役立ちま"
"す。特別なメール送信が必要な場合には、:ref:`独自のメールバックエンドを記述す"
"る <topic-custom-email-backend>` を参照してください。"

msgid "SMTP backend"
msgstr "SMTP バックエンド"

msgid "This is the default backend. Email will be sent through a SMTP server."
msgstr "デフォルトのバックエンド。メールは SMTP サーバを通して送信されます。"

msgid ""
"The value for each argument is retrieved from the matching setting if the "
"argument is ``None``:"
msgstr ""
"引数が ``None`` の場合、各引数に対する値は、以下のそれぞれの設定から取得され"
"ます。"

msgid "``host``: :setting:`EMAIL_HOST`"
msgstr "``host``: :setting:`EMAIL_HOST`"

msgid "``port``: :setting:`EMAIL_PORT`"
msgstr "``port``: :setting:`EMAIL_PORT`"

msgid "``username``: :setting:`EMAIL_HOST_USER`"
msgstr "``username``: :setting:`EMAIL_HOST_USER`"

msgid "``password``: :setting:`EMAIL_HOST_PASSWORD`"
msgstr "``password``: :setting:`EMAIL_HOST_PASSWORD`"

msgid "``use_tls``: :setting:`EMAIL_USE_TLS`"
msgstr "``use_tls``: :setting:`EMAIL_USE_TLS`"

msgid "``use_ssl``: :setting:`EMAIL_USE_SSL`"
msgstr "``use_ssl``: :setting:`EMAIL_USE_SSL`"

msgid "``timeout``: :setting:`EMAIL_TIMEOUT`"
msgstr "``timeout``: :setting:`EMAIL_TIMEOUT`"

msgid "``ssl_keyfile``: :setting:`EMAIL_SSL_KEYFILE`"
msgstr "``ssl_keyfile``: :setting:`EMAIL_SSL_KEYFILE`"

msgid "``ssl_certfile``: :setting:`EMAIL_SSL_CERTFILE`"
msgstr "``ssl_certfile``: :setting:`EMAIL_SSL_CERTFILE`"

msgid ""
"The SMTP backend is the default configuration inherited by Django. If you "
"want to specify it explicitly, put the following in your settings::"
msgstr ""
"SMTP バックエンドは、Django によって継承されるデフォルトの構成です。明示的に"
"指定したい場合は、設定内で以下の通り記述してください::"

msgid ""
"If unspecified, the default ``timeout`` will be the one provided by :func:"
"`socket.getdefaulttimeout()`, which defaults to ``None`` (no timeout)."
msgstr ""
"指定しなかった場合は、デフォルトの ``timeout`` は :func:`socket."
"getdefaulttimeout()` によって指定されたものになり、デフォルトは ``None`` (タ"
"イムアウトなし) になります。"

msgid "Console backend"
msgstr "コンソールバックエンド"

msgid ""
"Instead of sending out real emails the console backend just writes the "
"emails that would be sent to the standard output. By default, the console "
"backend writes to ``stdout``. You can use a different stream-like object by "
"providing the ``stream`` keyword argument when constructing the connection."
msgstr ""
"実際のメールを送信する代わりに、コンソールバックエンドは単に標準出力に送信さ"
"れるメールを書き込みます。 デフォルトでは、コンソールバックエンドは "
"``stdout`` に書き込みます。 コネクションを構築するときに ``stream`` キーワー"
"ド引数を指定することで、別のストリーム的なオブジェクトを使用できます。"

msgid "To specify this backend, put the following in your settings::"
msgstr "このバックエンドを指定するには、設定内に以下の通り記述してください::"

msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development."
msgstr ""
"このバックエンドはプロダクトでの使用を想定していません -- 開発中の利便性のた"
"めに提供されています。"

msgid "File backend"
msgstr "ファイルバックエンド"

msgid ""
"The file backend writes emails to a file. A new file is created for each new "
"session that is opened on this backend. The directory to which the files are "
"written is either taken from the :setting:`EMAIL_FILE_PATH` setting or from "
"the ``file_path`` keyword when creating a connection with :meth:`~django."
"core.mail.get_connection`."
msgstr ""
"ファイルバックエンドは、メールをファイルに書き込みます。新しいファイルは、こ"
"のバックエンド上で開いたそれぞれの新しいセッションに対して作成されます。ファ"
"イルが書き込まれるディレクトリは、 :meth:`~django.core.mail.get_connection` "
"でコネクションを生成したときに :setting:`EMAIL_FILE_PATH` 設定または "
"``file_path`` キーワードから取得されます。"

msgid "In-memory backend"
msgstr "インメモリーバックエンド"

msgid ""
"The ``'locmem'`` backend stores messages in a special attribute of the "
"``django.core.mail`` module. The ``outbox`` attribute is created when the "
"first message is sent. It's a list with an :class:`~django.core.mail."
"EmailMessage` instance for each message that would be sent."
msgstr ""
"``'locmem'`` バックエンドは、 ``django.core.mail`` モジュールの特別な属性内に"
"メッセージを保持します。``outbox`` 属性は最初のメッセージが送信されるときに生"
"成されます。送信される書くメッセージに対する :class:`~django.core.mail."
"EmailMessage` インスタンスのリストです。"

msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development and testing."
msgstr ""
"このバックエンドはプロダクトでの使用を想定していません -- 開発とテストにおけ"
"る利便性のために提供されています。"

msgid ""
"Django's test runner :ref:`automatically uses this backend for testing "
"<topics-testing-email>`."
msgstr ""
"Django のテストランナーは :ref:`自動的にこのバックエンドをテストに使います "
"<topics-testing-email>` 。"

msgid "Dummy backend"
msgstr "ダミーバックエンド"

msgid ""
"As the name suggests the dummy backend does nothing with your messages. To "
"specify this backend, put the following in your settings::"
msgstr ""
"名前が示すように、ダミーバックエンドはメッセージに何もしません。このバックエ"
"ンドを指定するには、設定内に以下の通り記述してください::"

msgid "Defining a custom email backend"
msgstr "独自のメールバックエンドを定義する"

msgid ""
"If you need to change how emails are sent you can write your own email "
"backend. The :setting:`EMAIL_BACKEND` setting in your settings file is then "
"the Python import path for your backend class."
msgstr ""
"メール送信の方法を変更する必要がある場合、独自のメールバックエンドを記述でき"
"ます。設定ファイル内の :setting:`EMAIL_BACKEND` 設定が独自のバックエンドのク"
"ラスへの Python のインポートパスとなります。"

msgid ""
"Custom email backends should subclass ``BaseEmailBackend`` that is located "
"in the ``django.core.mail.backends.base`` module. A custom email backend "
"must implement the ``send_messages(email_messages)`` method. This method "
"receives a list of :class:`~django.core.mail.EmailMessage` instances and "
"returns the number of successfully delivered messages. If your backend has "
"any concept of a persistent session or connection, you should also implement "
"the ``open()`` and ``close()`` methods. Refer to ``smtp.EmailBackend`` for a "
"reference implementation."
msgstr ""
"独自のメールバックエンドは、``django.core.mail.backends.base`` にある "
"``BaseEmailBackend`` をサブクラス化して作ります。独自のメールバックエンドに"
"は ``send_messages(email_messages)`` メソッドを実装する必要があります。このメ"
"ソッドは :class:`~django.core.mail.EmailMessage` インスタンスのリストを受け取"
"り、送信に成功したメッセージの数を返します。バックエンドに永続的な "
"(persistent) セッションやコネクションの概念がある場合は、``open()`` メソッド"
"と ``close()`` メソッドも実装する必要があります。実装のリファレンスについて"
"は ``smtp.EmailBackend`` を参照してください。"

msgid "Sending multiple emails"
msgstr "複数のメールを送信する"

msgid ""
"Establishing and closing an SMTP connection (or any other network "
"connection, for that matter) is an expensive process. If you have a lot of "
"emails to send, it makes sense to reuse an SMTP connection, rather than "
"creating and destroying a connection every time you want to send an email."
msgstr ""
"SMTP コネクション (またはその他のネットワークコネクション) の確立とクローズ"
"は、負荷の高い処理です。 送信するメールがたくさんある場合は、メールを送信する"
"たびにコネクションの生成と破棄を繰り返すのではなく、SMTP コネクションを再利用"
"する方が効率的です。"

msgid "There are two ways you tell an email backend to reuse a connection."
msgstr ""
"メールバックエンドにコネクションを再利用するよう通知するには、2 つの方法があ"
"ります。"

msgid ""
"Firstly, you can use the ``send_messages()`` method. ``send_messages()`` "
"takes a list of :class:`~django.core.mail.EmailMessage` instances (or "
"subclasses), and sends them all using a single connection."
msgstr ""
"1つ目は、``send_messages()`` メソッドを使う方法です。``send_messages()`` は :"
"class:`~django.core.mail.EmailMessage` インスタンス (ないしサブクラス) のリス"
"トを取得し、この全てを単一のコネクションを使って送信します。"

msgid ""
"For example, if you have a function called ``get_notification_email()`` that "
"returns a list of :class:`~django.core.mail.EmailMessage` objects "
"representing some periodic email you wish to send out, you could send these "
"emails using a single call to send_messages::"
msgstr ""
"例えば、定期的なメール送信を表す :class:`~django.core.mail.EmailMessage` オブ"
"ジェクトのリストを返す ``get_notification_email()`` と呼ばれる関数がある場"
"合、send_messages を 1度呼び出すだけでこれらのメールを送信できます::"

msgid ""
"In this example, the call to ``send_messages()`` opens a connection on the "
"backend, sends the list of messages, and then closes the connection again."
msgstr ""
"この例では、``send_messages()`` を呼び出してバックエンドのコネクションを開"
"き、メッセージのリストを送信した後、再びコネクションを閉じています。"

msgid ""
"The second approach is to use the ``open()`` and ``close()`` methods on the "
"email backend to manually control the connection. ``send_messages()`` will "
"not manually open or close the connection if it is already open, so if you "
"manually open the connection, you can control when it is closed. For "
"example::"
msgstr ""
"2つ目のアプローチは、メールバックエンドの ``open()`` メソッドと ``close()`` "
"メソッドを使って手動でコネクションをコントロールする方法です。"
"``send_messages()`` は、すでにコネクションが開いている場合、自動でコネクショ"
"ンを開いたり閉じたりはしません。手動でコネクションを開いた場合、閉じるタイミ"
"ングを自分でコントロールできます。たとえば、次のように書くことができます。"

msgid "Configuring email for development"
msgstr "開発用にメールを設定する"

msgid ""
"There are times when you do not want Django to send emails at all. For "
"example, while developing a website, you probably don't want to send out "
"thousands of emails -- but you may want to validate that emails will be sent "
"to the right people under the right conditions, and that those emails will "
"contain the correct content."
msgstr ""
"Django に電子メールをまったく送信させたくない場合もあるでしょう。たとえば、"
"ウェブサイトの開発中に数千通のメールを送信したくはないでしょう。しかし、適切"
"な条件で適切な人々にメールが送信され、これらのメールが正しい内容を含んでいる"
"か検証したいことがあるかもしれません。"

msgid ""
"The easiest way to configure email for local development is to use the :ref:"
"`console <topic-email-console-backend>` email backend. This backend "
"redirects all email to ``stdout``, allowing you to inspect the content of "
"mail."
msgstr ""
"ローカル開発用にメールを設定する最も簡単な方法は :ref:`console <topic-email-"
"console-backend>` メールバックエンドを使うことです。このバックエンドはすべて"
"のメールを ``stdout`` にリダイレクトし、メールの内容を検査できるようにしま"
"す。"

msgid ""
"The :ref:`file <topic-email-file-backend>` email backend can also be useful "
"during development -- this backend dumps the contents of every SMTP "
"connection to a file that can be inspected at your leisure."
msgstr ""
":ref:`ファイル <topic-email-file-backend>` メールバックエンドも開発に役立ちま"
"す。このバックエンドは全ての SMTP コネクションをファイルにダンプし、都合の良"
"いときに調べられるようにします。"

msgid ""
"Another approach is to use a \"dumb\" SMTP server that receives the emails "
"locally and displays them to the terminal, but does not actually send "
"anything. The `aiosmtpd`_ package provides a way to accomplish this:"
msgstr ""
"もう 1 つのアプローチは、\"dumb\" SMTP サーバを使うことです。これは、メールを"
"ローカルで受け取りターミナルに表示しますが、実際には何も送信しません。 "
"`aiosmtpd`_ パッケージで、この方法を実現できます:"

msgid ""
"This command will start a minimal SMTP server listening on port 8025 of "
"localhost. This server prints to standard output all email headers and the "
"email body. You then only need to set the :setting:`EMAIL_HOST` and :setting:"
"`EMAIL_PORT` accordingly. For a more detailed discussion of SMTP server "
"options, see the documentation of the `aiosmtpd`_ module."
msgstr ""
"このコマンドは、localhostのポート8025で待ち受ける最小限のSMTPサーバを起動しま"
"す。このサーバはすべてのメールヘッダとメール本文を標準出力に出力します。あと"
"は :setting:`EMAIL_HOST` と :setting:`EMAIL_PORT` を適宜設定するだけです。"
"SMTPサーバのオプションについてのより詳細な議論については、 `aiosmtpd`_ モ"
"ジュールのドキュメントを参照してください。"

msgid ""
"For information about unit-testing the sending of emails in your "
"application, see the :ref:`topics-testing-email` section of the testing "
"documentation."
msgstr ""
"アプリケーションでのメール送信のユニットテストについては、テストのドキュメン"
"トの :ref:`topics-testing-email` セクションを参照してください。"

msgid "External packages"
msgstr "外部パッケージ"

msgid ""
"Django ships with a variety of extra, optional tools that solve common "
"problems (``contrib.*``). For easier maintenance and to trim the size of the "
"codebase, a few of those applications have been moved out to separate "
"projects."
msgstr ""
"Django には、よくある問題を解決する様々なオプションツール (``contrib.*``) が"
"同梱されています。保守性を向上し、コードベースを小さくするために、これらのア"
"プリケーションの一部は別のプロジェクトに移されました。"

msgid "Localflavor"
msgstr "ローカルフレーバー"

msgid ""
"``django-localflavor`` is a collection of utilities for particular countries "
"and cultures."
msgstr ""
"``django-localflavor`` は、特定の国や文化のためのユーティリティの集まりです。"

msgid "`GitHub <https://github.com/django/django-localflavor>`__"
msgstr "`GitHub <https://github.com/django/django-localflavor>`__"

msgid "`Documentation <https://django-localflavor.readthedocs.io/>`__"
msgstr "`ドキュメント <https://django-localflavor.readthedocs.io/>`__"

msgid ":pypi:`PyPI <django-localflavor>`"
msgstr ":pypi:`PyPI <django-localflavor>`"

msgid "Comments"
msgstr "Comments"

msgid ""
"``django-contrib-comments`` can be used to attach comments to any model, so "
"you can use it for comments on blog entries, photos, book chapters, or "
"anything else. Most users will be better served with a custom solution, or a "
"hosted product like Disqus."
msgstr ""
"``django-contrib-comments`` を使うと、どんなモデルにもコメントを付けることが"
"できるので、 ブログのエントリや写真、本の章など、どんなものにもコメントを付け"
"ることができます。ほとんどのユーザは、カスタムソリューションか、Disqus のよう"
"なホスティングされた製品を使った方が良いでしょう。"

msgid "`GitHub <https://github.com/django/django-contrib-comments>`__"
msgstr "`GitHub <https://github.com/django/django-contrib-comments>`__"

msgid "`Documentation <https://django-contrib-comments.readthedocs.io/>`__"
msgstr "`ドキュメント <https://django-contrib-comments.readthedocs.io/>`__"

msgid ":pypi:`PyPI <django-contrib-comments>`"
msgstr ":pypi:`PyPI <django-contrib-comments>`"

msgid "Formtools"
msgstr "Formtools"

msgid ""
"``django-formtools`` is a collection of assorted utilities to work with "
"forms."
msgstr "``django-formtools`` はフォームを操作するユーティリティの集まりです。"

msgid "`GitHub <https://github.com/jazzband/django-formtools/>`__"
msgstr "`GitHub <https://github.com/jazzband/django-formtools/>`__"

msgid "`Documentation <https://django-formtools.readthedocs.io/>`__"
msgstr "`ドキュメント <https://django-formtools.readthedocs.io/>`__"

msgid ":pypi:`PyPI <django-formtools>`"
msgstr ":pypi:`PyPI <django-formtools>`"

msgid "Managing files"
msgstr "ファイルの管理"

msgid ""
"This document describes Django's file access APIs for files such as those "
"uploaded by a user. The lower level APIs are general enough that you could "
"use them for other purposes. If you want to handle \"static files\" (JS, "
"CSS, etc.), see :doc:`/howto/static-files/index`."
msgstr ""
"この文書では、ユーザがアップロードしたようなファイルに対する Django のファイ"
"ルアクセス API について説明します。下位レベルの API は十分一般的なので、他の"
"目的にも使えます。\"静的ファイル\" (JS や CSS など) を扱いたい場合は、 :doc:"
"`/howto/static-files/index` を参照してください。"

msgid ""
"By default, Django stores files locally, using the :setting:`MEDIA_ROOT` "
"and :setting:`MEDIA_URL` settings. The examples below assume that you're "
"using these defaults."
msgstr ""
"デフォルトでは、Django は :setting:`MEDIA_ROOT` と :setting:`MEDIA_URL` の設"
"定を使って、ファイルをローカルに保存します。以下の例では、これらのデフォルト"
"を使うことを前提にしています。"

msgid ""
"However, Django provides ways to write custom `file storage systems`_ that "
"allow you to completely customize where and how Django stores files. The "
"second half of this document describes how these storage systems work."
msgstr ""
"しかしながら、Djangoは、 Djangoがどこにどうやってファイルを保存するかの複雑な"
"カスタムを許可するファイルストレージシステム `file storage systems`_ を提供し"
"ています。このドキュメントの後半では、それらのストレージシステムの働きについ"
"て説明します。"

msgid "Using files in models"
msgstr "モデルでファイルを使う"

msgid ""
"When you use a :class:`~django.db.models.FileField` or :class:`~django.db."
"models.ImageField`, Django provides a set of APIs you can use to deal with "
"that file."
msgstr ""
":class:`~django.db.models.FileField` や :class:`~django.db.models."
"ImageField` を使うと、 Django はそのファイルを扱うために使える API を提供しま"
"す。"

msgid ""
"Consider the following model, using an :class:`~django.db.models.ImageField` "
"to store a photo::"
msgstr ""
"次のモデルを考えてみましょう。 :class:`~django.db.models.ImageField` を使って"
"写真を保存します:"

msgid ""
"Any ``Car`` instance will have a ``photo`` attribute that you can use to get "
"at the details of the attached photo:"
msgstr ""
"どの ``Car`` インスタンスにも ``photo`` 属性があり、それを使って添付写真の詳"
"細を見ることができます:"

msgid ""
"This object -- ``car.photo`` in the example -- is a ``File`` object, which "
"means it has all the methods and attributes described below."
msgstr ""
"このオブジェクト（例では ``car.photo`` ）は ``File`` オブジェクトであり、以下"
"に説明するすべてのメソッドと属性を持ちます。"

msgid ""
"The file is saved as part of saving the model in the database, so the actual "
"file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""
"このファイルは、モデルをデータベースに保存する際に一緒に保存されるため、ディ"
"スク上で実際に使用されるファイル名は、モデルが保存されるまで当てになりませ"
"ん。"

msgid ""
"For example, you can change the file name by setting the file's :attr:"
"`~django.core.files.File.name` to a path relative to the file storage's "
"location (:setting:`MEDIA_ROOT` if you are using the default :class:`~django."
"core.files.storage.FileSystemStorage`):"
msgstr ""
"例えば、ファイルの :attr:`~django.core.files.File.name` にファイルストレージ"
"の場所（デフォルトの :class:`~django.core.files.storage.FileSystemStorage` を"
"使用している場合は :setting:`MEDIA_ROOT` ）からの相対パスを指定することで、"
"ファイル名を変更できます:"

msgid ""
"To save an existing file on disk to a :class:`~django.db.models.FileField`:"
msgstr ""
"ディスク上の既存のファイルを :class:`~django.db.models.FileField` に保存しま"
"す:"

msgid ""
"While :class:`~django.db.models.ImageField` non-image data attributes, such "
"as ``height``, ``width``, and ``size`` are available on the instance, the "
"underlying image data cannot be used without reopening the image. For "
"example:"
msgstr ""
":class:`~django.db.models.ImageField` のインスタンスでは、 ``height``, "
"``width``, ``size`` などの画像データ以外の属性は利用可能ですが、ベースとなる"
"画像データは画像を開き直さなければ利用できません。たとえば:"

msgid "The ``File`` object"
msgstr "``File`` オブジェクト"

msgid ""
"Internally, Django uses a :class:`django.core.files.File` instance any time "
"it needs to represent a file."
msgstr ""
"内部的には、Django はファイルを表現する必要があるときは常に :class:`django."
"core.files.File` インスタンスを使います。"

msgid ""
"Most of the time you'll use a ``File`` that Django's given you (i.e. a file "
"attached to a model as above, or perhaps an uploaded file)."
msgstr ""
"たいていの場合、Django から与えられた ``ファイル`` を使うことになるでしょう "
"(つまり、上記のようにモデルに添付されたファイルや、アップロードされたファイル"
"など)。"

msgid ""
"If you need to construct a ``File`` yourself, the easiest way is to create "
"one using a Python built-in ``file`` object:"
msgstr ""
"自分で ``File`` を作成する必要がある場合、最も簡単な方法は Python 組み込みの "
"``file`` オブジェクトを使って作成することです:"

msgid ""
"Now you can use any of the documented attributes and methods of the :class:"
"`~django.core.files.File` class."
msgstr ""
"これで、 :class:`~django.core.files.File` クラスのドキュメント化された属性と"
"メソッドのすべてを使えるようになりました。"

msgid ""
"Be aware that files created in this way are not automatically closed. The "
"following approach may be used to close files automatically:"
msgstr ""
"この方法で作成されたファイルは、自動的に閉じないことに注意してください。ファ"
"イルを自動的に閉じるには、以下の方法が便利です:"

msgid ""
"Closing files is especially important when accessing file fields in a loop "
"over a large number of objects. If files are not manually closed after "
"accessing them, the risk of running out of file descriptors may arise. This "
"may lead to the following error:"
msgstr ""
"ファイルを閉じることは、多数のオブジェクトをループしてファイルフィールドにア"
"クセスする場合に特に重要です。ファイルにアクセスした後、ファイルを手動でク"
"ローズしないと、ファイル記述子が不足する危険性があります。これは以下のような"
"エラーにつながる可能性があります:"

msgid "File storage"
msgstr "ファイルストレージ"

msgid ""
"Behind the scenes, Django delegates decisions about how and where to store "
"files to a file storage system. This is the object that actually understands "
"things like file systems, opening and reading files, etc."
msgstr ""
"舞台裏では、Django はファイルをどこにどのように保存するかという決定を、ファイ"
"ルストレージシステムに委譲します。これは、ファイルシステム、ファイルを開いた"
"り読み込んだりといったことを実際に理解するオブジェクトです。"

msgid ""
"Django's default file storage is ``'``:class:`django.core.files.storage."
"FileSystemStorage`\\ ``'``. If you don't explicitly provide a storage system "
"in the ``default`` key of the :setting:`STORAGES` setting, this is the one "
"that will be used."
msgstr ""
"Django のデフォルトのファイルストレージは ``'``:class:`django.core.files."
"storage.FileSystemStorage`\\ ``'`` です。もし :setting:`STORAGES` 設定の "
"``default`` キーでストレージシステムを明示的に指定しなければ、これが使われま"
"す。"

msgid ""
"See below for details of the built-in default file storage system, and see :"
"doc:`/howto/custom-file-storage` for information on writing your own file "
"storage system."
msgstr ""
"組み込みのデフォルトのファイルストレージシステムの詳細については以下を参照し"
"てください。また、独自のファイルストレージシステムを作成する方法については :"
"doc:`/howto/custom-file-storage` を参照してください。"

msgid "Storage objects"
msgstr "ストレージ オブジェクト"

msgid ""
"Though most of the time you'll want to use a ``File`` object (which "
"delegates to the proper storage for that file), you can use file storage "
"systems directly. You can create an instance of some custom file storage "
"class, or -- often more useful -- you can use the global default storage "
"system:"
msgstr ""
"ほとんどの場合、適切なストレージにそのファイルを委任する ``File`` オブジェク"
"トを使用したいと思うでしょう。しかし、ファイルストレージシステムを直接使うこ"
"ともできます。独自のファイルストレージクラスのインスタンスを作成するか、（た"
"いていはより便利な）グローバルなデフォルトストレージシステムを使用できます。"

msgid "See :doc:`/ref/files/storage` for the file storage API."
msgstr ""
"ファイルストレージAPIについては :doc:`/ref/files/storage` を参照してくださ"
"い。"

msgid "The built-in filesystem storage class"
msgstr "組み込みのファイルシステムストレージクラス"

msgid ""
"Django ships with a :class:`django.core.files.storage.FileSystemStorage` "
"class which implements basic local filesystem file storage."
msgstr ""
"Django には :class:`django.core.files.storage.FileSystemStorage` クラスが同梱"
"されており、基本的なローカルファイルシステムのファイルストレージを実装してい"
"ます。"

msgid ""
"For example, the following code will store uploaded files under ``/media/"
"photos`` regardless of what your :setting:`MEDIA_ROOT` setting is::"
msgstr ""
"例えば、以下のコードは :setting:`MEDIA_ROOT` の設定に関係なく、アップロードさ"
"れたファイルを ``/media/photos`` に保存します:"

msgid ""
":doc:`Custom storage systems </howto/custom-file-storage>` work the same "
"way: you can pass them in as the ``storage`` argument to a :class:`~django."
"db.models.FileField`."
msgstr ""
":doc:`カスタムのストレージシステム </howto/custom-file-storage>` も同じように"
"動作します。 :class:`~django.db.models.FileField` の ``storage`` 引数として渡"
"すことができます。"

msgid "Using a callable"
msgstr "呼び出し可能オブジェクト (callable) を使う"

msgid ""
"You can use a callable as the :attr:`~django.db.models.FileField.storage` "
"parameter for :class:`~django.db.models.FileField` or :class:`~django.db."
"models.ImageField`. This allows you to modify the used storage at runtime, "
"selecting different storages for different environments, for example."
msgstr ""
"呼び出し可能オブジェクトは :class:`~django.db.models.FileField` や :class:"
"`~django.db.models.ImageField` の :attr:`~django.db.models.FileField."
"storage` パラメータとして使用できます。これにより、実行時に使用するストレージ"
"を変更し、例えば環境ごとに異なるストレージを選択できます。"

msgid ""
"Your callable will be evaluated when your models classes are loaded, and "
"must return an instance of :class:`~django.core.files.storage.Storage`."
msgstr ""
"呼び出し可能オブジェクトは、モデルクラスが読み込まれたときに評価され、 :"
"class:`~django.core.files.storage.Storage` のインスタンスを返す必要がありま"
"す。"

msgid ""
"In order to set a storage defined in the :setting:`STORAGES` setting you can "
"use :data:`~django.core.files.storage.storages`::"
msgstr ""
":setting:`STORAGES` 設定で定義されたストレージを設定するには :data:`~django."
"core.files.storage.storages` を使います:"

msgid "Support for ``storages`` was added."
msgstr "``storages`` のサポートが追加されました。"

msgid "Formsets"
msgstr "フォームセット (Formset)"

msgid ""
"A formset is a layer of abstraction to work with multiple forms on the same "
"page. It can be best compared to a data grid. Let's say you have the "
"following form:"
msgstr ""
"フォームセットは、同じページで複数のフォームを扱うための抽象レイヤーです。"
"データグリッドに例えるとわかりやすいでしょう。次のようなフォームがあるとしま"
"しょう:"

msgid ""
"You might want to allow the user to create several articles at once. To "
"create a formset out of an ``ArticleForm`` you would do:"
msgstr ""
"ユーザーが一度に複数の記事を作成できるようにしたいと思うかもしれません。 "
"``ArticleForm`` からフォームセットを作るには、次のようにします:"

msgid ""
"You now have created a formset class named ``ArticleFormSet``. Instantiating "
"the formset gives you the ability to iterate over the forms in the formset "
"and display them as you would with a regular form:"
msgstr ""
"これで ``ArticleFormSet`` という名前のフォームセットクラスが作成されました。"
"フォームセットをインスタンス化することで、フォームセット内のフォームをイテ"
"レートし、通常のフォームと同じように表示できます:"

msgid ""
"As you can see it only displayed one empty form. The number of empty forms "
"that is displayed is controlled by the ``extra`` parameter. By default, :"
"func:`~django.forms.formsets.formset_factory` defines one extra form; the "
"following example will create a formset class to display two blank forms:"
msgstr ""
"見てのとおり、空のフォームがひとつだけ表示されました。表示される空のフォーム"
"の数は ``extra`` パラメータで制御できます。デフォルトでは、 :func:`~django."
"forms.formsets.formset_factory` は空のフォームを1つ定義します。次の例では、"
"フォームセットクラスを作成して空のフォームを2つ表示します:"

msgid ""
"Iterating over a formset will render the forms in the order they were "
"created. You can change this order by providing an alternate implementation "
"for the ``__iter__()`` method."
msgstr ""
"フォームセットをイテレートすると、フォームが作成された順にレンダリングされま"
"す。この順序を変更するには、 ``__iter__()`` メソッドの実装を変更します。"

msgid ""
"Formsets can also be indexed into, which returns the corresponding form. If "
"you override ``__iter__``, you will need to also override ``__getitem__`` to "
"have matching behavior."
msgstr ""
"フォームセットでは、インデックスをつけて、一致するフォームを返すこともできま"
"す。``__iter__`` をオーバーライドした場合、動作を一貫させるため "
"``__getitem__`` もオーバーライドする必要があります。"

msgid "Using initial data with a formset"
msgstr "フォームセットで初期データを指定する"

msgid ""
"Initial data is what drives the main usability of a formset. As shown above "
"you can define the number of extra forms. What this means is that you are "
"telling the formset how many additional forms to show in addition to the "
"number of forms it generates from the initial data. Let's take a look at an "
"example:"
msgstr ""
"初期データはフォームセットの使いやすさを左右します。上で示したように、追加"
"フォームの数を定義できます。これは、フォームセットが初期データから生成する"
"フォームに加え、追加で表示するフォームの数を指定することを意味します。例を見"
"てみましょう:"

msgid ""
"There are now a total of three forms showing above. One for the initial data "
"that was passed in and two extra forms. Also note that we are passing in a "
"list of dictionaries as the initial data."
msgstr ""
"上の例では、今度は 3 つのフォームが表示されました。初期データとして渡された "
"1 つと、2 つの追加フォームです。初期データとして、辞書のリストを渡しているこ"
"とにも注意してください。"

msgid ""
"If you use an ``initial`` for displaying a formset, you should pass the same "
"``initial`` when processing that formset's submission so that the formset "
"can detect which forms were changed by the user. For example, you might have "
"something like: ``ArticleFormSet(request.POST, initial=[...])``."
msgstr ""
"フォームセットを描画するために ``initial`` を使う場合、フォームセットの送信を"
"処理するときに同じ ``initial`` を渡して、どのフォームがユーザによって変更され"
"たかをフォームセットが検出できるようにしてください。例えば、"
"``ArticleFormSet(request.POST, initial=[...])`` のようになるでしょう。"

msgid ""
":ref:`Creating formsets from models with model formsets <model-formsets>`."
msgstr ""
":ref:`モデルフォームセットを使ってモデルからフォームセットを作る <model-"
"formsets>`."

msgid "Limiting the maximum number of forms"
msgstr "フォームの最大表示数を制限する"

msgid ""
"The ``max_num`` parameter to :func:`~django.forms.formsets.formset_factory` "
"gives you the ability to limit the number of forms the formset will display:"
msgstr ""
":func:`~django.forms.formsets.formset_factory` に ``max_num`` パラメータを渡"
"すと、フォームセットが表示するフォームの数を制限できます:"

msgid ""
"If the value of ``max_num`` is greater than the number of existing items in "
"the initial data, up to ``extra`` additional blank forms will be added to "
"the formset, so long as the total number of forms does not exceed "
"``max_num``. For example, if ``extra=2`` and ``max_num=2`` and the formset "
"is initialized with one ``initial`` item, a form for the initial item and "
"one blank form will be displayed."
msgstr ""
"もし、``max_num`` の値が初期データ内に存在するオブジェクトの合計より大きい場"
"合、 ``extra`` を上限として空のフォームがフォームセットに追加されます。 "
"フォームの合計の長さは ``max_num`` を超えることはできません。例えば、"
"``extra=2`` と ``max_num=2``、そしてフォームセットが 1 つの ``initial`` 項目"
"で初期化される場合、この初期項目のフォームと 1 つの空のフォームが表示されま"
"す。"

msgid ""
"If the number of items in the initial data exceeds ``max_num``, all initial "
"data forms will be displayed regardless of the value of ``max_num`` and no "
"extra forms will be displayed. For example, if ``extra=3`` and ``max_num=1`` "
"and the formset is initialized with two initial items, two forms with the "
"initial data will be displayed."
msgstr ""
"初期データ内の項目数が ``max_num`` を超える場合、``max_num`` の値に関わらず全"
"ての初期データのフォームが表示され、追加フォームは 1 つも表示されません。例え"
"ば、``extra=3`` と ``max_num=1``、そしてフォームセットが 2 つの初期項目で初期"
"化される場合、2 つのフォームが初期データとともに表示されます。"

msgid ""
"A ``max_num`` value of ``None`` (the default) puts a high limit on the "
"number of forms displayed (1000). In practice this is equivalent to no limit."
msgstr ""
"``max_num`` の値が ``None`` (デフォルト) だった場合、表示されるフォームの上限"
"は大きな数になります (1000)。この数は、実際には制限がないと見なせるでしょう。"

msgid ""
"By default, ``max_num`` only affects how many forms are displayed and does "
"not affect validation.  If ``validate_max=True`` is passed to the :func:"
"`~django.forms.formsets.formset_factory`, then ``max_num`` will affect "
"validation.  See :ref:`validate_max`."
msgstr ""
"デフォルトでは、``max_num`` はいくつのフォームが表示されるかだけに影響し、バ"
"リデーションには影響しません。``validate_max=True`` が :func:`~django.forms."
"formsets.formset_factory` に渡される場合は、``max_num`` はバリデーションに影"
"響します。:ref:`validate_max` をご覧ください。"

msgid "Limiting the maximum number of instantiated forms"
msgstr "インスタンス化できるフォームの数を制限する"

msgid ""
"The ``absolute_max`` parameter to :func:`.formset_factory` allows limiting "
"the number of forms that can be instantiated when supplying ``POST`` data. "
"This protects against memory exhaustion attacks using forged ``POST`` "
"requests:"
msgstr ""
":func:`.formset_factory` の ``absolute_max`` パラメータによって、 ``POST`` "
"データを与えたときにインスタンス化できるフォームの数を制限できます。これによ"
"り、偽造された ``POST`` リクエストを使用したメモリ枯渇攻撃から守ることができ"
"ます:"

msgid ""
"When ``absolute_max`` is ``None``, it defaults to ``max_num + 1000``. (If "
"``max_num`` is ``None``, it defaults to ``2000``)."
msgstr ""
"``absolute_max`` が ``None`` の場合、デフォルトは ``max_num + 1000`` になりま"
"す (``max_num`` が ``None`` の場合、デフォルトは ``2000`` になります)。"

msgid ""
"If ``absolute_max`` is less than ``max_num``, a ``ValueError`` will be "
"raised."
msgstr ""
"``absolute_max`` が ``max_num`` よりも小さい場合、 ``ValueError`` が発生しま"
"す。"

msgid "Formset validation"
msgstr "フォームセットのバリデーション"

msgid ""
"Validation with a formset is almost identical to a regular ``Form``. There "
"is an ``is_valid`` method on the formset to provide a convenient way to "
"validate all forms in the formset:"
msgstr ""
"フォームセットでのバリデーションは通常の ``Form`` とほとんど同じです。フォー"
"ムセットには便利な ``is_valid`` メソッドがあり、フォームセット内のすべての"
"フォームを検証できます:"

msgid ""
"We passed in no data to the formset which is resulting in a valid form. The "
"formset is smart enough to ignore extra forms that were not changed. If we "
"provide an invalid article:"
msgstr ""
"フォームセットに何もデータを渡さなかったので、有効なフォームとみなされます。"
"フォームセットは十分に賢いので、変更されていない余分なフォームは無視します。"
"無効な記事を提供すると、:"

msgid ""
"As we can see, ``formset.errors`` is a list whose entries correspond to the "
"forms in the formset. Validation was performed for each of the two forms, "
"and the expected error message appears for the second item."
msgstr ""
"見て分かるように、 ``formset.errors`` はリストで、 そのエントリーはフォーム"
"セット内のフォームと一致します。 バリデーションは、2 つのフォームそれぞれに働"
"いて、2 つ目の項目にエラーメッセージが表示されています。"

msgid ""
"Just like when using a normal ``Form``, each field in a formset's forms may "
"include HTML attributes such as ``maxlength`` for browser validation. "
"However, form fields of formsets won't include the ``required`` attribute as "
"that validation may be incorrect when adding and deleting forms."
msgstr ""
"通常の ``Form`` を使うときとまったく同じように、フォームセットのフォーム内の"
"それぞれのフィールドは、ブラウザのバリデーションのための ``maxlength`` のよう"
"な HTML 属性を含むことができます。ただし、フォームセットのフォームフィールド"
"は、``required`` 属性を含みません。これは、フォームを追加したり削除するときに"
"バリデーションが正しく働かない可能性があるためです。"

msgid ""
"To check how many errors there are in the formset, we can use the "
"``total_error_count`` method:"
msgstr ""
"フォームセット内のエラーの数を確認するには、 ``total_error_count`` メソッドを"
"使用します:"

msgid ""
"We can also check if form data differs from the initial data (i.e. the form "
"was sent without any data):"
msgstr ""
"また、フォームのデータが初期データと異なるかどうか（つまり、フォームがデータ"
"なしで送信されたかどうか）もチェックできます:"

msgid "Understanding the ``ManagementForm``"
msgstr "``ManagementForm`` を理解する"

msgid ""
"You may have noticed the additional data (``form-TOTAL_FORMS``, ``form-"
"INITIAL_FORMS``) that was required in the formset's data above. This data is "
"required for the ``ManagementForm``. This form is used by the formset to "
"manage the collection of forms contained in the formset. If you don't "
"provide this management data, the formset will be invalid:"
msgstr ""
"上のフォームセットのデータに追加のデータ (``form-TOTAL_FORMS``, ``form-"
"INITIAL_FORMS``) が必要なことに気づいたかもしれません。このデータは "
"``ManagementForm`` に必要です。このフォームは、フォームセットに含まれるフォー"
"ムのコレクションを管理するために使用されます。この管理データを渡さないと、"
"フォームセットは無効になります:"

msgid ""
"It is used to keep track of how many form instances are being displayed. If "
"you are adding new forms via JavaScript, you should increment the count "
"fields in this form as well. On the other hand, if you are using JavaScript "
"to allow deletion of existing objects, then you need to ensure the ones "
"being removed are properly marked for deletion by including ``form-#-"
"DELETE`` in the ``POST`` data. It is expected that all forms are present in "
"the ``POST`` data regardless."
msgstr ""
"これは、表示されているフォームインスタンスの数を追跡するために使用されます。 "
"JavaScriptを使用して新しいフォームを追加する場合は、フォームのカウントフィー"
"ルドもインクリメントする必要があります。 一方、既存のオブジェクトの削除を許可"
"するためにJavaScriptを使用している場合は、``POST`` データに ``form-#-"
"DELETE`` を含めることで、削除対象のマークが適切に削除されていることを確認する"
"必要があります。 すべてのフォームがそれにかかわらず ``POST`` データに存在する"
"ことが期待されます。"

msgid ""
"The management form is available as an attribute of the formset itself. When "
"rendering a formset in a template, you can include all the management data "
"by rendering ``{{ my_formset.management_form }}`` (substituting the name of "
"your formset as appropriate)."
msgstr ""
"ManagementFormは、フォームセット自体の属性として使用できます。 テンプレートで"
"フォームセットをレンダリングするときは、``{{ my_formset.management_form }}`` "
"(my_formsetは適切な名前に置き換えます)をレンダリングすることで、すべての管理"
"データを含めることができます。"

msgid ""
"As well as the ``form-TOTAL_FORMS`` and ``form-INITIAL_FORMS`` fields shown "
"in the examples here, the management form also includes ``form-"
"MIN_NUM_FORMS`` and ``form-MAX_NUM_FORMS`` fields. They are output with the "
"rest of the management form, but only for the convenience of client-side "
"code. These fields are not required and so are not shown in the example "
"``POST`` data."
msgstr ""
"ここで例として示した ``form-TOTAL_FORMS`` と ``form-INITIAL_FORMS`` フィール"
"ドの他に、管理フォームには ``form-MIN_NUM_FORMS`` と ``form-MAX_NUM_FORMS`` "
"フィールドがあります。これらは管理フォームの残りの部分と一緒に出力されます"
"が、これはクライアント側のコードの利便性のためだけのものです。これらのフィー"
"ルドは必須ではないので、例の ``POST`` データには表示されていません。"

msgid "``total_form_count`` and ``initial_form_count``"
msgstr "``total_form_count`` と ``initial_form_count``"

msgid ""
"``BaseFormSet`` has a couple of methods that are closely related to the "
"``ManagementForm``, ``total_form_count`` and ``initial_form_count``."
msgstr ""
"``BaseFormSet`` には、``ManagementForm``、``total_form_count``、"
"``initial_form_count`` と密接に関わる 2 つのメソッドがあります。"

msgid ""
"``total_form_count`` returns the total number of forms in this formset. "
"``initial_form_count`` returns the number of forms in the formset that were "
"pre-filled, and is also used to determine how many forms are required. You "
"will probably never need to override either of these methods, so please be "
"sure you understand what they do before doing so."
msgstr ""
"``total_form_count`` は、対象のフィールドセット内のフォームの合計数を返しま"
"す。``initial_form_count`` は、記入前のフォームセット内のフォームの数を返し、"
"またいくつのフォームが必須なのかを決めるためにも使われます。通常、これらのメ"
"ソッドをオーバーライドする必要はありませんが、もし必要な場合はメソッドの動作"
"を理解してからオーバーライドしてください。"

msgid "``empty_form``"
msgstr "``empty_form``"

msgid ""
"``BaseFormSet`` provides an additional attribute ``empty_form`` which "
"returns a form instance with a prefix of ``__prefix__`` for easier use in "
"dynamic forms with JavaScript."
msgstr ""
"``BaseFormSet`` には追加の属性 ``empty_form`` があり、``__prefix__`` というプ"
"レフィックスとともにフォームのインスタンスを返します。これにより、JavaScript "
"で動的にフォームを操作することが容易となります。"

msgid "``error_messages``"
msgstr "``error_messages``"

msgid ""
"The ``error_messages`` argument lets you override the default messages that "
"the formset will raise. Pass in a dictionary with keys matching the error "
"messages you want to override. Error message keys include "
"``'too_few_forms'``, ``'too_many_forms'``, and "
"``'missing_management_form'``. The ``'too_few_forms'`` and "
"``'too_many_forms'`` error messages may contain ``%(num)d``, which will be "
"replaced with ``min_num`` and ``max_num``, respectively."
msgstr ""
"引数 ``error_messages`` で、フォームセットが表示するデフォルトのメッセージを"
"上書きできます。上書きしたいエラーメッセージにマッチするキーを持つ辞書を渡し"
"ます。エラーメッセージのキーには ``'too_few_forms'``, ``'too_many_forms'``, "
"``'missing_management_form'`` があります。 ``too_few_forms'`` と "
"``too_many_forms'`` のエラーメッセージには ``%(num)d`` を含めることができ、そ"
"れぞれ ``min_num`` と ``max_num`` に置き換えられます。"

msgid ""
"For example, here is the default error message when the management form is "
"missing:"
msgstr ""
"例えば、管理フォームがない場合のデフォルトのエラーメッセージは以下の通りです:"

msgid "And here is a custom error message:"
msgstr "そしてこれはカスタムエラーメッセージです:"

msgid "Custom formset validation"
msgstr "フォームセットのバリデーションをカスタマイズする"

msgid ""
"A formset has a ``clean`` method similar to the one on a ``Form`` class. "
"This is where you define your own validation that works at the formset level:"
msgstr ""
"フォームセットには ``Form`` クラスと同じような ``clean`` メソッドがあります。"
"ここで、フォームセットレベルで動作する独自のバリデーションを定義します:"

msgid ""
"The formset ``clean`` method is called after all the ``Form.clean`` methods "
"have been called. The errors will be found using the ``non_form_errors()`` "
"method on the formset."
msgstr ""
"フォームセットの ``clean`` メソッドは、``Form.clean`` メソッドが呼ばれた後に"
"呼び出されます。エラーを取得するには、フォームセットの ``non_form_errors()`` "
"メソッドを使います。"

msgid ""
"Non-form errors will be rendered with an additional class of ``nonform`` to "
"help distinguish them from form-specific errors. For example, ``{{ formset."
"non_form_errors }}`` would look like:"
msgstr ""
"フォーム以外のエラーは、フォーム固有のエラーと区別するために ``nonform`` とい"
"う追加のクラスでレンダリングされます。たとえば、 ``{{ formset."
"non_form_errors }}`` は次のようになります:"

msgid "Validating the number of forms in a formset"
msgstr "フォームセット内のフォームの数を検証する"

msgid ""
"Django provides a couple ways to validate the minimum or maximum number of "
"submitted forms. Applications which need more customizable validation of the "
"number of forms should use custom formset validation."
msgstr ""
"送信されたフォームの最小および最大数を検証するために、Django にはいくつかの方"
"法が用意されています。フォームの数のバリデーションをさらにカスタマイズする必"
"要があるときは、カスタムのフォームセットバリデーションを使用する必要がありま"
"す。"

msgid "``validate_max``"
msgstr "``validate_max``"

msgid ""
"If ``validate_max=True`` is passed to :func:`~django.forms.formsets."
"formset_factory`, validation will also check that the number of forms in the "
"data set, minus those marked for deletion, is less than or equal to "
"``max_num``."
msgstr ""
":func:`~django.forms.formsets.formset_factory` に ``validate_max=True`` が渡"
"された場合、データセット内のフォーム数から削除マークが付けられたフォーム数を"
"除いた数が ``max_num`` 以下であるかどうかも検証されます。"

msgid ""
"``validate_max=True`` validates against ``max_num`` strictly even if "
"``max_num`` was exceeded because the amount of initial data supplied was "
"excessive."
msgstr ""
"``validate_max=True`` は ``max_num`` に対して厳密にバリデーションを行います。"
"たとえ ``max_num`` を超過した原因が初期データの量が多すぎたことだったとしても"
"です。"

msgid ""
"The error message can be customized by passing the ``'too_many_forms'`` "
"message to the :ref:`formsets-error-messages` argument."
msgstr ""
"エラーメッセージは :ref:`formsets-error-messages` 引数に "
"``'too_many_forms'`` メッセージを渡すことでカスタマイズできます。"

msgid ""
"Regardless of ``validate_max``, if the number of forms in a data set exceeds "
"``absolute_max``, then the form will fail to validate as if ``validate_max`` "
"were set, and additionally only the first ``absolute_max`` forms will be "
"validated. The remainder will be truncated entirely. This is to protect "
"against memory exhaustion attacks using forged POST requests. See :ref:"
"`formsets-absolute-max`."
msgstr ""
"``validate_max`` に関係なく、データセット内のフォームの数が ``absolute_max`` "
"を超えた場合、 ``validate_max`` が指定されている場合と同様にフォームのバリ"
"デーションは失敗し、さらに最初の ``absolute_max`` 内のフォームのみがバリデー"
"トされます。残りは完全に切り捨てられます。これは POST リクエストを偽装してメ"
"モリを使い果たす攻撃から守るためです。詳細は :ref:`formsets-absolute-max` を"
"参照してください。"

msgid "``validate_min``"
msgstr "``validate_min``"

msgid ""
"If ``validate_min=True`` is passed to :func:`~django.forms.formsets."
"formset_factory`, validation will also check that the number of forms in the "
"data set, minus those marked for deletion, is greater than or equal to "
"``min_num``."
msgstr ""
":func:`~django.forms.formsets.formset_factory` に ``validate_min=True`` が渡"
"された場合、バリデーションはデータセット内のフォームの数から削除マークが付け"
"られたものを除いた数が ``min_num`` 以上であることもチェックします。"

msgid ""
"The error message can be customized by passing the ``'too_few_forms'`` "
"message to the :ref:`formsets-error-messages` argument."
msgstr ""
"エラーメッセージは :ref:`formsets-error-messages` 引数に ``'too_few_forms'`` "
"メッセージを渡すことでカスタマイズできます。"

msgid ""
"Regardless of ``validate_min``, if a formset contains no data, then ``extra "
"+ min_num`` empty forms will be displayed."
msgstr ""
"``validate_min`` に関係なく、フォームセットにデータが含まれていない場合、 "
"``extra + min_num`` 空のフォームが表示されます。"

msgid "Dealing with ordering and deletion of forms"
msgstr "フォームのソートと削除に対応させる"

msgid ""
"The :func:`~django.forms.formsets.formset_factory` provides two optional "
"parameters ``can_order`` and ``can_delete`` to help with ordering of forms "
"in formsets and deletion of forms from a formset."
msgstr ""
":func:`~django.forms.formsets.formset_factory` には、フォームセット内のフォー"
"ムの順序およびフォームセットからのフォームの削除に役立つ 2 つのオプション引数"
"があります。"

msgid "``can_order``"
msgstr "``can_order``"

msgid "Default: ``False``"
msgstr "デフォルト値: ``False``"

msgid "Lets you create a formset with the ability to order:"
msgstr "下記のように、ソート可能なフォームセットを作成できます:"

msgid ""
"This adds an additional field to each form. This new field is named "
"``ORDER`` and is an ``forms.IntegerField``. For the forms that came from the "
"initial data it automatically assigned them a numeric value. Let's look at "
"what will happen when the user changes these values:"
msgstr ""
"これで、各フォームにフィールドが追加されます。この新しいフィールドは "
"``ORDER`` という名前で、``forms.IntegerField`` です。初期データのフォームには"
"自動的に数値が割り当てられます。ユーザーがこれらの値を変更すると何が起こるか"
"を見てみましょう:"

msgid ""
":class:`~django.forms.formsets.BaseFormSet` also provides an :attr:`~django."
"forms.formsets.BaseFormSet.ordering_widget` attribute and :meth:`~django."
"forms.formsets.BaseFormSet.get_ordering_widget` method that control the "
"widget used with :attr:`~django.forms.formsets.BaseFormSet.can_order`."
msgstr ""
":class:`~django.forms.formsets.BaseFormSet` には :attr:`~django.forms."
"formsets.BaseFormSet.ordering_widget` 属性と :meth:`~django.forms.formsets."
"BaseFormSet.get_ordering_widget` メソッドがあり、 :attr:`~django.forms."
"formsets.BaseFormSet.can_order` で使用するウィジェットを制御します。"

msgid "``ordering_widget``"
msgstr "``ordering_widget``"

msgid "Default: :class:`~django.forms.NumberInput`"
msgstr "デフォルト値: :class:`~django.forms.NumberInput`"

msgid ""
"Set ``ordering_widget`` to specify the widget class to be used with "
"``can_order``:"
msgstr ""
"``ordering_widget`` をセットすると、 ``can_order`` で使用するウィジェットクラ"
"スを指定できます:"

msgid "``get_ordering_widget``"
msgstr "``get_ordering_widget``"

msgid ""
"Override ``get_ordering_widget()`` if you need to provide a widget instance "
"for use with ``can_order``:"
msgstr ""
"``can_order`` で使用するウィジェットのインスタンスを指定する必要がある場合"
"は、 ``get_ordering_widget()`` をオーバーライドします:"

msgid "``can_delete``"
msgstr "``can_delete``"

msgid ""
"Lets you create a formset with the ability to select forms for deletion:"
msgstr "削除するフォームを選択できるフォームセットを作成できます:"

msgid ""
"Similar to ``can_order`` this adds a new field to each form named ``DELETE`` "
"and is a ``forms.BooleanField``. When data comes through marking any of the "
"delete fields you can access them with ``deleted_forms``:"
msgstr ""
"``can_order`` と同様に、各フォームに ``DELETE`` という名前の新しいフィールド"
"が追加されます。このフィールドは ``forms.BooleanField`` です。削除フィールド"
"のいずれかをマークしてデータが渡されると、それらに ``deleted_forms`` でアクセ"
"スできます。"

msgid ""
"If you are using a :class:`ModelFormSet<django.forms.models."
"BaseModelFormSet>`, model instances for deleted forms will be deleted when "
"you call ``formset.save()``."
msgstr ""
":class:`ModelFormSet<django.forms.models.BaseModelFormSet>` を使っている場"
"合、 ``formset.save()`` を呼び出すと、削除されたフォームのモデルインスタンス"
"は削除されます。"

msgid ""
"If you call ``formset.save(commit=False)``, objects will not be deleted "
"automatically.  You'll need to call ``delete()`` on each of the :attr:"
"`formset.deleted_objects <django.forms.models.BaseModelFormSet."
"deleted_objects>` to actually delete them:"
msgstr ""
"``formset.save(commit=False)`` を呼び出すと、オブジェクトは自動的に削除されま"
"せん。 実際に削除するには、 :attr:`formset.deleted_objects <django.forms."
"models.BaseModelFormSet.deleted_objects>` のそれぞれに対して ``delete()`` を"
"呼び出す必要があります:"

msgid ""
"On the other hand, if you are using a plain ``FormSet``, it's up to you to "
"handle ``formset.deleted_forms``, perhaps in your formset's ``save()`` "
"method, as there's no general notion of what it means to delete a form."
msgstr ""
"一方、普通の ``FormSet`` を使用している場合は、フォームを削除するという一般的"
"な概念がないため、あなた自身でフォームセットの ``save()`` メソッドで "
"``formset.deleted_forms`` を処理することになります。"

msgid ""
":class:`~django.forms.formsets.BaseFormSet` also provides a :attr:`~django."
"forms.formsets.BaseFormSet.deletion_widget` attribute and :meth:`~django."
"forms.formsets.BaseFormSet.get_deletion_widget` method that control the "
"widget used with :attr:`~django.forms.formsets.BaseFormSet.can_delete`."
msgstr ""
":class:`~django.forms.formsets.BaseFormSet` には :attr:`~django.forms."
"formsets.BaseFormSet.deletion_widget` 属性と :meth:`~django.forms.formsets."
"BaseFormSet.get_deletion_widget` メソッドもあり、 :attr:`~django.forms."
"formsets.BaseFormSet.can_delete` で使用するウィジェットを制御します。"

msgid "``deletion_widget``"
msgstr "``deletion_widget``"

msgid "Default: :class:`~django.forms.CheckboxInput`"
msgstr "デフォルト値: :class:`~django.forms.CheckboxInput`"

msgid ""
"Set ``deletion_widget`` to specify the widget class to be used with "
"``can_delete``:"
msgstr ""
"``delete_widget`` をセットすると、 ``can_delete`` で使用するウィジェットクラ"
"スを指定できます:"

msgid "``get_deletion_widget``"
msgstr "``get_deletion_widget``"

msgid ""
"Override ``get_deletion_widget()`` if you need to provide a widget instance "
"for use with ``can_delete``:"
msgstr ""
"``can_delete`` で使用するウィジェットのインスタンスを指定する必要がある場合"
"は、 ``get_deletion_widget()`` をオーバーライドします:"

msgid "``can_delete_extra``"
msgstr "``can_delete_extra``"

msgid "Default: ``True``"
msgstr "デフォルト値: ``True``"

msgid ""
"While setting ``can_delete=True``, specifying ``can_delete_extra=False`` "
"will remove the option to delete extra forms."
msgstr ""
"``can_delete=True`` を設定しているときに ``can_delete_extra=False`` を指定す"
"ると、余分なフォームを削除するオプションがなくなります。"

msgid "Adding additional fields to a formset"
msgstr "フォームセットにフィールドを追加する"

msgid ""
"If you need to add additional fields to the formset this can be easily "
"accomplished. The formset base class provides an ``add_fields`` method. You "
"can override this method to add your own fields or even redefine the default "
"fields/attributes of the order and deletion fields:"
msgstr ""
"フォームセットに追加のフィールドを追加する必要がある場合、これは簡単に実現で"
"きます。フォームセットの基底クラスには ``add_fields`` メソッドがあります。こ"
"のメソッドをオーバーライドすることで、独自のフィールドを追加したり、 デフォル"
"トのフィールドや属性を再定義したりすることができます:"

msgid "Passing custom parameters to formset forms"
msgstr "フォームセットのフォームにカスタムパラメータを渡す"

msgid ""
"Sometimes your form class takes custom parameters, like ``MyArticleForm``. "
"You can pass this parameter when instantiating the formset:"
msgstr ""
"フォームクラスには、``MyArticleForm`` のようなカスタムパラメータを指定するこ"
"とがあります。フォームセットをインスタンス化するときに、このパラメータを渡す"
"ことができます:"

msgid ""
"The ``form_kwargs`` may also depend on the specific form instance. The "
"formset base class provides a ``get_form_kwargs`` method. The method takes a "
"single argument - the index of the form in the formset. The index is "
"``None`` for the :ref:`empty_form`:"
msgstr ""
"``form_kwargs`` はフォームのインスタンスによって異なります。フォームセットの"
"基底クラスには ``get_form_kwargs`` メソッドがあります。このメソッドは引数とし"
"てフォームセット内のフォームのインデックスを受け取ります。 :ref:`empty_form` "
"の場合は ``None`` です:"

msgid "Customizing a formset's prefix"
msgstr "フォームセットのプレフィックスをカスタマイズする"

msgid ""
"In the rendered HTML, formsets include a prefix on each field's name. By "
"default, the prefix is ``'form'``, but it can be customized using the "
"formset's ``prefix`` argument."
msgstr ""
"レンダリングされた HTML では、フォームセットは各フィールド名のプレフィックス"
"を含みます。デフォルトではプレフィックスは ``'form'`` ですが、フォームセット"
"の ``prefix`` 引数を使用してカスタマイズすることもできます。"

msgid "For example, in the default case, you might see:"
msgstr "たとえば、デフォルトの場合は次のように表示されます:"

msgid "But with ``ArticleFormset(prefix='article')`` that becomes:"
msgstr ""
"しかし、``ArticleFormset(prefix='article')`` を使うと、以下のようになります:"

msgid ""
"This is useful if you want to :ref:`use more than one formset in a view "
"<multiple-formsets-in-view>`."
msgstr ""
"これは :ref:`ビュー <multiple-formsets-in-view>` の中で複数のフォームセットを"
"使いたいときに便利です。"

msgid "Using a formset in views and templates"
msgstr "ビューとテンプレートでフォームセットを使う"

msgid ""
"Formsets have the following attributes and methods associated with rendering:"
msgstr ""
"フォームセットには、レンダリングに関連する以下の属性とメソッドがあります:"

msgid ""
"Specifies the :doc:`renderer </ref/forms/renderers>` to use for the formset. "
"Defaults to the renderer specified by the :setting:`FORM_RENDERER` setting."
msgstr ""
"フォームセットに使用する :doc:`レンダラー </ref/forms/renderers>` を指定しま"
"す。デフォルトは :setting:`FORM_RENDERER` 設定で指定されたレンダラーです。"

msgid ""
"The name of the template rendered if the formset is cast into a string, e.g. "
"via ``print(formset)`` or in a template via ``{{ formset }}``."
msgstr ""
"``print(formset)`` やテンプレート内で ``{{ formset }}`` を使ってフォームセッ"
"トを文字列にキャストした場合にレンダリングされるテンプレートの名前です。"

msgid ""
"By default, a property returning the value of the renderer's :attr:`~django."
"forms.renderers.BaseRenderer.formset_template_name`. You may set it as a "
"string template name in order to override that for a particular formset "
"class."
msgstr ""
"デフォルトでは、レンダラーの :attr:`~django.forms.renderers.BaseRenderer."
"formset_template_name` の値を返すプロパティです。テンプレート名に文字列を指定"
"することで、特定のフォームセットクラスのテンプレート名を上書きできます。"

msgid ""
"This template will be used to render the formset's management form, and then "
"each form in the formset as per the template defined by the form's :attr:"
"`~django.forms.Form.template_name`."
msgstr ""
"このテンプレートは、フォームセットの管理フォームをレンダリングするために使用"
"され、フォームセット内の各フォームは、フォームの :attr:`~django.forms.Form."
"template_name` で定義されたテンプレートに従ってレンダリングされます。"

msgid ""
"The name of the template used when calling :meth:`.as_div`. By default this "
"is ``\"django/forms/formsets/div.html\"``. This template renders the "
"formset's management form and then each form in the formset as per the "
"form's :meth:`~django.forms.Form.as_div` method."
msgstr ""
":meth:`.as_div` を呼び出す際に使用するテンプレートの名前です。デフォルトでは "
"``\"django/forms/formsets/div.html\"`` です。このテンプレートはフォームセット"
"の管理フォームをレンダリングし、 フォームセット内の各フォームをフォームの :"
"meth:`~django.forms.Form.as_div` メソッドに従ってレンダリングします。"

msgid ""
"The name of the template used when calling :meth:`.as_p`. By default this is "
"``\"django/forms/formsets/p.html\"``. This template renders the formset's "
"management form and then each form in the formset as per the form's :meth:"
"`~django.forms.Form.as_p` method."
msgstr ""
":meth:`.as_p` を呼び出す際に使用するテンプレートの名前です。デフォルトでは "
"``\"django/forms/formsets/p.html\"`` です。このテンプレートはフォームセットの"
"管理フォームをレンダリングし、 フォームセット内の各フォームをフォームの :"
"meth:`~django.forms.Form.as_p` メソッドに従ってレンダリングします。"

msgid ""
"The name of the template used when calling :meth:`.as_table`. By default "
"this is ``\"django/forms/formsets/table.html\"``. This template renders the "
"formset's management form and then each form in the formset as per the "
"form's :meth:`~django.forms.Form.as_table` method."
msgstr ""
":meth:`.as_table` を呼び出す際に使用するテンプレートの名前です。デフォルトで"
"は ``\"django/forms/formsets/table.html\"`` です。このテンプレートはフォーム"
"セットの管理フォームをレンダリングし、 フォームセット内の各フォームをフォーム"
"の :meth:`~django.forms.Form.as_table` メソッドに従ってレンダリングします。"

msgid ""
"The name of the template used when calling :meth:`.as_ul`. By default this "
"is ``\"django/forms/formsets/ul.html\"``. This template renders the "
"formset's management form and then each form in the formset as per the "
"form's :meth:`~django.forms.Form.as_ul` method."
msgstr ""
":meth:`.as_ul` を呼び出す際に使用するテンプレートの名前です。デフォルトでは "
"``\"django/forms/formsets/ul.html\"`` です。このテンプレートはフォームセット"
"の管理フォームをレンダリングし、 フォームセット内の各フォームをフォームの :"
"meth:`~django.forms.Form.as_ul` メソッドに従ってレンダリングします。"

msgid "Returns the context for rendering a formset in a template."
msgstr ""
"テンプレート内のフォームセットをレンダリングするためのコンテキストを返しま"
"す。"

msgid "The available context is:"
msgstr "利用可能なコンテキストは次のとおりです。"

msgid "``formset`` : The instance of the formset."
msgstr "``formset``: フォームセットのインスタンス。"

msgid ""
"The render method is called by ``__str__`` as well as the :meth:`.as_div`, :"
"meth:`.as_p`, :meth:`.as_ul`, and :meth:`.as_table` methods. All arguments "
"are optional and will default to:"
msgstr ""
"render メソッドは ``str__`` メソッド、 :meth:`.as_div` メソッド、 :meth:`."
"as_p` メソッド、 :meth:`.as_ul` メソッド、 :meth:`.as_table` メソッドから呼び"
"出されます。すべての引数は省略可能で、デフォルトは下記です:"

msgid "``template_name``: :attr:`.template_name`"
msgstr "``template_name``: :attr:`.template_name`"

msgid "``context``: Value returned by :meth:`.get_context`"
msgstr "``context``: :meth:`.get_context` が返す値"

msgid "``renderer``: Value returned by :attr:`.renderer`"
msgstr "``renderer``: :attr:`.renderer` が返す値"

msgid "Renders the formset with the :attr:`.template_name_div` template."
msgstr ""
"フォームセットを :attr:`.template_name_div` テンプレートでレンダリングしま"
"す。"

msgid "Renders the formset with the :attr:`.template_name_p` template."
msgstr ""
"フォームセットを :attr:`.template_name_p` テンプレートでレンダリングします。"

msgid "Renders the formset with the :attr:`.template_name_table` template."
msgstr ""
"フォームセットを :attr:`.template_name_table` テンプレートでレンダリングしま"
"す。"

msgid "Renders the formset with the :attr:`.template_name_ul` template."
msgstr ""
"フォームセットを :attr:`.template_name_ul` テンプレートでレンダリングします。"

msgid ""
"Using a formset inside a view is not very different from using a regular "
"``Form`` class. The only thing you will want to be aware of is making sure "
"to use the management form inside the template. Let's look at a sample view::"
msgstr ""
"ビュー内でフォームセットを使用するのは、通常の ``Form`` クラスを使用するのと"
"あまり変わりません。ただひとつだけ注意したいのが、テンプレート内で管理フォー"
"ムを使用することです。ビューのサンプルを見てみましょう:"

msgid "The ``manage_articles.html`` template might look like this:"
msgstr "``manage_articles.html`` テンプレートは次のようになります:"

msgid ""
"However there's a slight shortcut for the above by letting the formset "
"itself deal with the management form:"
msgstr ""
"ただし、フォームセット自体が管理フォームを処理するためのちょっとしたショート"
"カットもあります。"

msgid ""
"The above ends up calling the :meth:`BaseFormSet.render` method on the "
"formset class. This renders the formset using the template specified by the :"
"attr:`~BaseFormSet.template_name` attribute. Similar to forms, by default "
"the formset will be rendered ``as_table``, with other helper methods of "
"``as_p`` and ``as_ul`` being available. The rendering of the formset can be "
"customized by specifying the ``template_name`` attribute, or more generally "
"by :ref:`overriding the default template <overriding-built-in-formset-"
"templates>`."
msgstr ""
"上記は、フォームセットクラスの :meth:`BaseFormSet.render` メソッドを呼び出す"
"ことになります。これは :attr:`~BaseFormSet.template_name` 属性で指定されたテ"
"ンプレートを使用してフォームセットをレンダリングします。フォームと同様に、デ"
"フォルトではフォームセットは ``as_table`` でレンダリングされ、その他のヘル"
"パーメソッドとして ``as_p`` と ``as_ul`` が利用可能です。 :ref:`デフォルトの"
"テンプレートをオーバーライド <overriding-built-in-formset-templates>` するこ"
"とで、フォームセットのレンダリングをカスタマイズできます。"

msgid "Manually rendered ``can_delete`` and ``can_order``"
msgstr "``can_delete`` や ``can_order`` のときに手動でレンダリングする"

msgid ""
"If you manually render fields in the template, you can render ``can_delete`` "
"parameter with ``{{ form.DELETE }}``:"
msgstr ""
"テンプレート内で手動でフィールドをレンダリングする場合、 ``can_delete`` パラ"
"メータを ``{{ form.DELETE }}`` でレンダリングできます:"

msgid ""
"Similarly, if the formset has the ability to order (``can_order=True``), it "
"is possible to render it with ``{{ form.ORDER }}``."
msgstr ""
"同様に、フォームセットに並び替えの機能 (``can_order=True``) がある場合,  "
"``{{ form.ORDER }}`` でレンダリングできます。"

msgid "Using more than one formset in a view"
msgstr "ビューで複数のフォームセットを使う"

msgid ""
"You are able to use more than one formset in a view if you like. Formsets "
"borrow much of its behavior from forms. With that said you are able to use "
"``prefix`` to prefix formset form field names with a given value to allow "
"more than one formset to be sent to a view without name clashing. Let's take "
"a look at how this might be accomplished::"
msgstr ""
"必要に応じて、1 つのビューで複数のフォームセットを使用できます。フォームセッ"
"トはその動作の多くをフォームから借用しています。そのため、``prefix`` を使用し"
"て、フォームセットのフォームフィールド名の前に指定した値を付与することで、 名"
"前の衝突を避けて複数のフォームセットをビューに送信できます。これをどのように"
"実現するか見てみましょう:"

msgid ""
"You would then render the formsets as normal. It is important to point out "
"that you need to pass ``prefix`` on both the POST and non-POST cases so that "
"it is rendered and processed correctly."
msgstr ""
"フォームセットは通常どおりレンダリングされます。ここで重要なのは、POST の場合"
"とそうでない場合の両方で ``prefix`` を渡す必要があるということです。"

msgid ""
"Each formset's :ref:`prefix <formset-prefix>` replaces the default ``form`` "
"prefix that's added to each field's ``name`` and ``id`` HTML attributes."
msgstr ""
"各フォームセットの :ref:`prefix <formset-prefix>` は、各フィールドの "
"``name`` と ``id`` の HTML 属性に追加されるデフォルトの ``form`` プレフィック"
"スを置き換えます。"

msgid "Working with forms"
msgstr "フォームを使う"

msgid "About this document"
msgstr "このドキュメントについて"

msgid ""
"This document provides an introduction to the basics of web forms and how "
"they are handled in Django. For a more detailed look at specific areas of "
"the forms API, see :doc:`/ref/forms/api`, :doc:`/ref/forms/fields`, and :doc:"
"`/ref/forms/validation`."
msgstr ""
"このドキュメントでは、Web フォームの基本と、それらを Django で扱う方法を紹介"
"しています。より詳しく知りたいときは、フォーム API の特定の領域、 :doc:`/ref/"
"forms/api` 、 :doc:`/ref/forms/fields` または :doc:`/ref/forms/validation` を"
"ご覧ください。"

msgid ""
"Unless you're planning to build websites and applications that do nothing "
"but publish content, and don't accept input from your visitors, you're going "
"to need to understand and use forms."
msgstr ""
"あなたの作ろうとしているウェブサイトやアプリケーションが、単にコンテンツを公"
"開したり訪問者からのインプットを受け付けないサイトでない限り、フォームを理解"
"し利用する必要があります。"

msgid ""
"Django provides a range of tools and libraries to help you build forms to "
"accept input from site visitors, and then process and respond to the input."
msgstr ""
"Django はフォームの構築を助けるさまざまなツールやライブラリを提供しています。"
"これらを利用することで、サイト訪問者からデータの入力を受け入れ、そのデータを"
"処理したあと、入力に応じたレスポンスを返すことができるようになります。"

msgid "HTML forms"
msgstr "HTML フォーム"

msgid ""
"In HTML, a form is a collection of elements inside ``<form>...</form>`` that "
"allow a visitor to do things like enter text, select options, manipulate "
"objects or controls, and so on, and then send that information back to the "
"server."
msgstr ""
"HTMLでは、フォームは ``<form>...</form>`` 内の要素の集まりで、訪問者によるテ"
"キスト入力、オプション選択、オブジェクトやコントロールの操作などを可能にし、"
"これらの情報をサーバーに送り返します。"

msgid ""
"Some of these form interface elements - text input or checkboxes - are built "
"into HTML itself. Others are much more complex; an interface that pops up a "
"date picker or allows you to move a slider or manipulate controls will "
"typically use JavaScript and CSS as well as HTML form ``<input>`` elements "
"to achieve these effects."
msgstr ""
"いくつかのフォームインターフェイスの要素、例えばテキストインプットやチェック"
"ボックスは、とてもシンプルで HTML 自体に組み込まれています。そのほかに、とて"
"も複雑な要素もあります; Date ピッカーをポップアップさせたり、スライダーを動か"
"しコントロールを操作するようなインターフェイスは、一般的に HTML フォームの "
"``1`` 要素だけではなく JavaScriptと CSS を使って実現されます。"

msgid "As well as its ``<input>`` elements, a form must specify two things:"
msgstr ""
"``<input>`` 要素に加えて、フォームには次の 2 つのことを指定しなければなりませ"
"ん。"

msgid ""
"*where*: the URL to which the data corresponding to the user's input should "
"be returned"
msgstr "*どこで*: ユーザーのインプットに対応するデータの宛先となるべきURL"

msgid "*how*: the HTTP method the data should be returned by"
msgstr "*どのように*: データが返される方法として使われる HTTP メソッド"

msgid ""
"As an example, the login form for the Django admin contains several "
"``<input>`` elements: one of ``type=\"text\"`` for the username, one of "
"``type=\"password\"`` for the password, and one of ``type=\"submit\"`` for "
"the \"Log in\" button. It also contains some hidden text fields that the "
"user doesn't see, which Django uses to determine what to do next."
msgstr ""
"例として、Django admin にあるいくつかの ``<input>`` 要素のログインフォームを"
"見てみましょう。ユーザー名のための ``type=\"text\"`` 、パスワードのための "
"``type=\"password\"``、そしてログインボタンのための ``type=\"submit\"`` があ"
"ります。他にも Django が次の行動を決めるために使われる、ユーザーからは見えな"
"い隠しテキストフィールドもあります。"

msgid ""
"It also tells the browser that the form data should be sent to the URL "
"specified in the ``<form>``’s ``action`` attribute - ``/admin/`` - and that "
"it should be sent using the HTTP mechanism specified by the ``method`` "
"attribute - ``post``."
msgstr ""
"また、フォームのデータが ``<form>`` の ``action`` 属性によって指定された URL "
"- ``/admin/`` - に送信されるべきこと、そして ``method`` 属性によって指定され"
"たHTTP メカニズム - ``post`` - を使って送信されるべきこともブラウザーに伝えて"
"います。"

msgid ""
"When the ``<input type=\"submit\" value=\"Log in\">`` element is triggered, "
"the data is returned to ``/admin/``."
msgstr ""
"``<input type=\"submit\" value=\"Log in\">`` 要素がトリガーされると、データ"
"は ``/admin/`` に返されます。"

msgid "``GET`` and ``POST``"
msgstr "``GET`` と ``POST``"

msgid ""
"``GET`` and ``POST`` are the only HTTP methods to use when dealing with "
"forms."
msgstr ""
"フォームを扱うときに使用する HTTP メソッドは、``GET`` と ``POST`` だけです。"

msgid ""
"Django's login form is returned using the ``POST`` method, in which the "
"browser bundles up the form data, encodes it for transmission, sends it to "
"the server, and then receives back its response."
msgstr ""
"Django のログインフォームは、``POST`` メソッドを使って返されます。この中で、"
"ブラウザがフォームデータをひとまとめにし、送信用にエンコードし、サーバーに"
"送った上で、サーバーからの応答を受け取ります。"

msgid ""
"``GET``, by contrast, bundles the submitted data into a string, and uses "
"this to compose a URL. The URL contains the address where the data must be "
"sent, as well as the data keys and values. You can see this in action if you "
"do a search in the Django documentation, which will produce a URL of the "
"form ``https://docs.djangoproject.com/search/?q=forms&release=1``."
msgstr ""
"``GET`` は、対照的に、送信されたデータを文字列に添付し、URL を構成するために"
"使います。URL はデータが送られるべきアドレスのほか、データキーと値を含みま"
"す。実際に、Django ドキュメンテーションで何かを検索してみると、フォーム "
"``https://docs.djangoproject.com/search/?q=forms&release=1`` といった URL が"
"生成されるのが分かるでしょう。"

msgid "``GET`` and ``POST`` are typically used for different purposes."
msgstr "``GET`` と ``POST`` は、一般的には異なる目的に使われます。"

msgid ""
"Any request that could be used to change the state of the system - for "
"example, a request that makes changes in the database - should use ``POST``. "
"``GET`` should be used only for requests that do not affect the state of the "
"system."
msgstr ""
"システムの状態を変更する可能性のあるあらゆるリクエスト（例えばデータベース内"
"での変更を行うリクエスト）では ``POST`` を使うべきです。 ``GET`` は、システム"
"の状態に影響を与えないリクエストにのみ使われるべきです。"

msgid ""
"``GET`` would also be unsuitable for a password form, because the password "
"would appear in the URL, and thus, also in browser history and server logs, "
"all in plain text. Neither would it be suitable for large quantities of "
"data, or for binary data, such as an image. A web application that uses "
"``GET`` requests for admin forms is a security risk: it can be easy for an "
"attacker to mimic a form's request to gain access to sensitive parts of the "
"system. ``POST``, coupled with other protections like Django's :doc:`CSRF "
"protection </ref/csrf/>` offers more control over access."
msgstr ""
"``GET`` はパスワードフォームには不適です。なぜならば、パスワードが URL 内はも"
"ちろんのこと、ブラウザーの履歴やサーバーログといったプレーンテキストの中すべ"
"てに表示されるからです。大量のデータや、画像のようなバイナリデータにも不適で"
"す。``GET`` リクエストを admin フォームのために使ような Web アプリケーション"
"は、セキュリティ上のリスクです: 攻撃者がシステムの繊細な部分へのアクセス権を"
"得るために、フォームのリクエストを偽装することは簡単なのです。Django の :doc:"
"`CSRF 保護 </ref/csrf/>` のような他の保護と組み合わされた ``POST`` は、アクセ"
"スをより適切にコントロールできるようにします。"

msgid ""
"On the other hand, ``GET`` is suitable for things like a web search form, "
"because the URLs that represent a ``GET`` request can easily be bookmarked, "
"shared, or resubmitted."
msgstr ""
"一方で、 ``GET`` は Web 検索フォームのようなものに適しています。なぜならば、 "
"``GET`` リクエストを表現している URL は、簡単にブックマーク、共有、再送信がで"
"きるからです。"

msgid "Django's role in forms"
msgstr "フォームにおける Django の役割"

msgid ""
"Handling forms is a complex business. Consider Django's admin, where "
"numerous items of data of several different types may need to be prepared "
"for display in a form, rendered as HTML, edited using a convenient "
"interface, returned to the server, validated and cleaned up, and then saved "
"or passed on for further processing."
msgstr ""
"フォームを扱うのは大変な仕事です。Django admin を考えてみると、複数の異なるタ"
"イプのデータの、たくさんのアイテムがフォーム内に表示されるために準備を必要と"
"し、HTML としてレンダリングされ、便利なインターフェイスを使って編集され、サー"
"バーに返され、検証され、クリーンアップされます。そして、保存されたり次の処理"
"のために値が渡されたりするのです。"

msgid ""
"Django's form functionality can simplify and automate vast portions of this "
"work, and can also do it more securely than most programmers would be able "
"to do in code they wrote themselves."
msgstr ""
"Django のフォーム機能は、この仕事のうち膨大な部分を簡素化・自動化します。そし"
"てさらに、多くのプログラマーたちが自分自身でコードを書くよりも安全にこれらを"
"実現します。"

msgid "Django handles three distinct parts of the work involved in forms:"
msgstr ""
"Django は、フォームに含まれる仕事のうち、3つのまったく異なるパーツを扱います:"

msgid "preparing and restructuring data to make it ready for rendering"
msgstr "データがレンダリングできるように準備し、再構成すること"

msgid "creating HTML forms for the data"
msgstr "データのために HTML フォームを生成すること"

msgid "receiving and processing submitted forms and data from the client"
msgstr "クライアントから送信されたフォームとデータを受け取り、処理すること"

msgid ""
"It is *possible* to write code that does all of this manually, but Django "
"can take care of it all for you."
msgstr ""
"これら全ては手動でコードに書くことが *できます* が、Django がこれらすべてをう"
"まく処理します。"

msgid "Forms in Django"
msgstr "Django におけるフォーム"

msgid ""
"We've described HTML forms briefly, but an HTML ``<form>`` is just one part "
"of the machinery required."
msgstr ""
"HTML フォームについては簡単に説明しましたが、HTML ``<form>`` は必要となる仕掛"
"けの一部分に過ぎません。"

msgid ""
"In the context of a web application, 'form' might refer to that HTML "
"``<form>``, or to the Django :class:`Form` that produces it, or to the "
"structured data returned when it is submitted, or to the end-to-end working "
"collection of these parts."
msgstr ""
"Web アプリケーションの文脈では、 form という言葉は HTML ``<form>``、フォーム"
"を提供する Django の :class:`Form`、データが送信されたときに返された体系化さ"
"れたデータ、もしくは端末相互間で動くこれらパーツの集合を意味するでしょう。"

msgid "The Django :class:`Form` class"
msgstr "Django の :class:`Form` クラス"

msgid ""
"At the heart of this system of components is Django's :class:`Form` class. "
"In much the same way that a Django model describes the logical structure of "
"an object, its behavior, and the way its parts are represented to us, a :"
"class:`Form` class describes a form and determines how it works and appears."
msgstr ""
"このコンポーネントシステムの中心は、Django の :class:`Form` クラスです。 "
"Django モデルがオブジェクトの論理構造、その動作、そしてその部分が私たちに表現"
"される方法を記述するのと同じように、 :class:`Form` クラスはフォームを記述し、"
"それがどのように動作し表示されるかを決定します。"

msgid ""
"In a similar way that a model class's fields map to database fields, a form "
"class's fields map to HTML form ``<input>`` elements. (A :class:`ModelForm` "
"maps a model class's fields to HTML form ``<input>`` elements via a :class:"
"`Form`; this is what the Django admin is based upon.)"
msgstr ""
"モデルクラスのフィールドがデータベースのフィールドにマッピングされるのと同様"
"に、フォームクラスのフィールドはHTMLフォームの ``<input>`` 要素にマッピングさ"
"れます。 (:class:`ModelForm` はモデルクラスのフィールドを :class:`Form` 経由"
"でHTMLフォームの ``<input>`` 要素にマッピングします。これがDjango admin サイ"
"トの基盤です。)"

msgid ""
"A form's fields are themselves classes; they manage form data and perform "
"validation when a form is submitted. A :class:`DateField` and a :class:"
"`FileField` handle very different kinds of data and have to do different "
"things with it."
msgstr ""
"フォームのフィールド自体はクラスです; フォームが送信されたとき、フォームデー"
"タを管理し、検証を実施します。 :class:`DateField` と :class:`FileField` は、"
"非常に異なる種類のデータを扱い、異なることをしなければなりません。"

msgid ""
"A form field is represented to a user in the browser as an HTML \"widget\" - "
"a piece of user interface machinery. Each field type has an appropriate "
"default :doc:`Widget class </ref/forms/widgets/>`, but these can be "
"overridden as required."
msgstr ""
"フォームフィールドは、HTML \"ウィジェット”（ユーザーインターフェイスの装置の"
"一つです）としてブラウザ内のユーザーに表されます。それぞれのフィールドタイプ"
"は、適切なデフォルトの :doc:`ウィジェットクラス </ref/forms/widgets/>` を持っ"
"ていますが、これらは必要に応じてオーバーライドできます。"

msgid "Instantiating, processing, and rendering forms"
msgstr "フォームをインスタンス化し、処理し、レンダリングする"

msgid "When rendering an object in Django, we generally:"
msgstr ""
"Django でオブジェクトをレンダリングするとき、通常は次のような手順を取ります。"

msgid "get hold of it in the view (fetch it from the database, for example)"
msgstr ""
"ビューの中でオブジェクトを取得する (例えば、データベースからオブジェクトを取"
"得する)"

msgid "pass it to the template context"
msgstr "オブジェクトをテンプレートのコンテキストに引き渡す"

msgid "expand it to HTML markup using template variables"
msgstr "テンプレートの変数を使って、オブジェクトを HTML マークアップに展開する"

msgid ""
"Rendering a form in a template involves nearly the same work as rendering "
"any other kind of object, but there are some key differences."
msgstr ""
"テンプレートの中でフォームをレンダリングすることは、他のあらゆる種類のオブ"
"ジェクトをレンダリングする働きとほとんど同じですが、いくつかの重要な違いがあ"
"ります。"

msgid ""
"In the case of a model instance that contained no data, it would rarely if "
"ever be useful to do anything with it in a template. On the other hand, it "
"makes perfect sense to render an unpopulated form - that's what we do when "
"we want the user to populate it."
msgstr ""
"データを持たないモデルインスタンスのケースでは、テンプレート内で何かをするの"
"が有益であることはほとんどありません。一方、未入力のフォームをレンダリングす"
"ることはまったく合理的です - これは、ユーザーに入力してほしいときに行うことで"
"す。"

msgid ""
"So when we handle a model instance in a view, we typically retrieve it from "
"the database. When we're dealing with a form we typically instantiate it in "
"the view."
msgstr ""
"したがって、ビューの中でモデルインスタンスを扱うときには、一般的にデータベー"
"スから取り出します。フォームを処理するときには、一般的にビューの中でインスタ"
"ンス化します。"

msgid ""
"When we instantiate a form, we can opt to leave it empty or prepopulate it, "
"for example with:"
msgstr ""
"フォームをインスタンス化するときは、空のままにするか、あらかじめ入力しておく"
"ことができます。たとえば:"

msgid ""
"data from a saved model instance (as in the case of admin forms for editing)"
msgstr ""
"保存されたモデルインスタンスからのデータ (編集のための admin フォームの場合の"
"ように)"

msgid "data that we have collated from other sources"
msgstr "他のソースから照合したデータ"

msgid "data received from a previous HTML form submission"
msgstr "前回の HTML フォーム送信から受信したデータ"

msgid ""
"The last of these cases is the most interesting, because it's what makes it "
"possible for users not just to read a website, but to send information back "
"to it too."
msgstr ""
"最後のケースが最も興味深いです。なぜならば、それはユーザーが単にウェブサイト"
"を見るだけでなく、情報を送り返すことができるようにするからです。"

msgid "Building a form"
msgstr "フォームを作る"

msgid "The work that needs to be done"
msgstr "すべきこと"

msgid ""
"Suppose you want to create a simple form on your website, in order to obtain "
"the user's name. You'd need something like this in your template:"
msgstr ""
"ユーザーの名前を取得するために、ウェブサイトで簡単なフォームを作ることを考え"
"てみましょう:"

msgid ""
"This tells the browser to return the form data to the URL ``/your-name/``, "
"using the ``POST`` method. It will display a text field, labeled \"Your name:"
"\", and a button marked \"OK\". If the template context contains a "
"``current_name`` variable, that will be used to pre-fill the ``your_name`` "
"field."
msgstr ""
"これは、``POST`` メソッドを使って、URL ``/your-name/`` にフォームデータを返す"
"よう、ブラウザに通知します。テキストフィールド、\"Your name:\" ラベル、そし"
"て \"OK\" ボタンを表示します。テンプレートのコンテキストが ``current_name`` "
"変数を含む場合は、 ``your_name`` フィールドをあらかじめ入力するために使われま"
"す。"

msgid ""
"You'll need a view that renders the template containing the HTML form, and "
"that can supply the ``current_name`` field as appropriate."
msgstr ""
"HTML フォームを含むテンプレートをレンダリングし、 ``current_name`` フィールド"
"を適切に提供するビューが必要になります。"

msgid ""
"When the form is submitted, the ``POST`` request which is sent to the server "
"will contain the form data."
msgstr ""
"フォームが送信されるとき、サーバーに送信される ``POST`` リクエストは、フォー"
"ムのデータを含みます。"

msgid ""
"Now you'll also need a view corresponding to that ``/your-name/`` URL which "
"will find the appropriate key/value pairs in the request, and then process "
"them."
msgstr ""
"今度は、その ``/your-name/`` URL と対応するビューも必要です。このURLは、リク"
"エストの中から適切なキー/値のペアを見つけ、それらを処理します。"

msgid ""
"This is a very simple form. In practice, a form might contain dozens or "
"hundreds of fields, many of which might need to be prepopulated, and we "
"might expect the user to work through the edit-submit cycle several times "
"before concluding the operation."
msgstr ""
"これは非常にシンプルなフォームです。実践では、1つのフォームが数十または数百の"
"フィールドを含んでいて、しかも多くがあらかじめ入力されている必要があるかもし"
"れません。また、操作が完了する前にユーザーが何回も編集と送信を繰り返すことも"
"考えられます。"

msgid ""
"We might require some validation to occur in the browser, even before the "
"form is submitted; we might want to use much more complex fields, that allow "
"the user to do things like pick dates from a calendar and so on."
msgstr ""
"フォームが送信される前でも、ブラウザ上で多少の検証が必要となるかもしれませ"
"ん; ユーザーがカレンダーから日付を選ぶといったような、より複雑なフィールドを"
"使うこともあるでしょう。"

msgid ""
"At this point it's much easier to get Django to do most of this work for us."
msgstr "Django にこれらを任せると、比較的簡単に実現させることができます。"

msgid "Building a form in Django"
msgstr "Django でフォームを作る"

msgid "The :class:`Form` class"
msgstr ":class:`Form` クラス"

msgid ""
"We already know what we want our HTML form to look like. Our starting point "
"for it in Django is this:"
msgstr ""
"HTML フォームをどのように見せたいかは、すでに分かっています。Django で実現す"
"るためのスタート地点は以下の通りです:"

msgid ""
"This defines a :class:`Form` class with a single field (``your_name``). "
"We've applied a human-friendly label to the field, which will appear in the "
"``<label>`` when it's rendered (although in this case, the :attr:`~Field."
"label` we specified is actually the same one that would be generated "
"automatically if we had omitted it)."
msgstr ""
"これは、単一のフィールド (``your_name``) で :class:`Form` クラスを定義しま"
"す。人間が読みやすいラベルをフィールドに適用してあり、このラベルはレンダリン"
"グされたときに ``<label>`` の中に表示されます (このケースでは、仮にラベルの指"
"定を省略したとしても、実際には指定した :attr:`~Field.label` が自動的に生成さ"
"れるラベルと同じではありますが)。"

msgid ""
"The field's maximum allowable length is defined by :attr:`~CharField."
"max_length`. This does two things. It puts a ``maxlength=\"100\"`` on the "
"HTML ``<input>`` (so the browser should prevent the user from entering more "
"than that number of characters in the first place). It also means that when "
"Django receives the form back from the browser, it will validate the length "
"of the data."
msgstr ""
"フィールドの最大文字数は :attr:`~CharField.max_length` によって定義されます。"
"これは2つのことをします。HTML の ``<input>`` に ``maxlength=\"100\"`` を配置"
"します (そしてブラウザはユーザーがこの数値以上の文字数をそもそも入力できない"
"ようにするはずです). これはさらに、Django がブラウザからフォームを受け取った"
"ときにデータの文字数を検証することも意味します。"

msgid ""
"A :class:`Form` instance has an :meth:`~Form.is_valid()` method, which runs "
"validation routines for all its fields. When this method is called, if all "
"fields contain valid data, it will:"
msgstr ""
":class:`Form` インスタンスは、すべてのフィールドに対して検証ルーチンを実行す"
"る :meth:`~Form.is_valid()` メソッドを持ちます。このメソッドが呼ばれたとき、"
"全てのフィールドが有効なデータを持っていれば、メソッドは次のように動作しま"
"す。"

msgid "return ``True``"
msgstr "``True`` を返します"

msgid "place the form's data in its :attr:`~Form.cleaned_data` attribute."
msgstr "フォームのデータを :attr:`~Form.cleaned_data` 属性に配置します"

msgid "The whole form, when rendered for the first time, will look like:"
msgstr ""
"フォーム全体は、初めてレンダリングされたとき、次のような見た目になります。"

msgid ""
"Note that it **does not** include the ``<form>`` tags, or a submit button. "
"We'll have to provide those ourselves in the template."
msgstr ""
"``<form>`` や送信ボタンを含んで **いない** ことに注意してください。私たち自身"
"が、これらをテンプレート内で提供する必要があります。"

msgid "The view"
msgstr "ビュー"

msgid ""
"Form data sent back to a Django website is processed by a view, generally "
"the same view which published the form. This allows us to reuse some of the "
"same logic."
msgstr ""
"Django ウェブサイトに送り返されたフォームで他は、ビューによって処理されます。"
"通常、ビューはフォームを発行したビューと同じものです。これは、いくつかの同じ"
"ロジックを再利用することを可能にします。"

msgid ""
"To handle the form we need to instantiate it in the view for the URL where "
"we want it to be published:"
msgstr ""
"フォームを処理するためには、フォームを発行したいと考えているURLに対して、"
"ビューの中でインスタンス化する必要があります。"

msgid ""
"If we arrive at this view with a ``GET`` request, it will create an empty "
"form instance and place it in the template context to be rendered. This is "
"what we can expect to happen the first time we visit the URL."
msgstr ""
"もし ``GET`` とともにビューにたどり着いた場合は、空のフォームインスタンスを生"
"成し、レンダリングのためテンプレートの context に配置します。これは、初めて "
"URL を訪れたときに起こると考えられることです。"

msgid ""
"If the form is submitted using a ``POST`` request, the view will once again "
"create a form instance and populate it with data from the request: ``form = "
"NameForm(request.POST)`` This is called \"binding data to the form\" (it is "
"now a *bound* form)."
msgstr ""
"``POST`` リクエストを使ってフォームが送信された場合は、ビューはもう一度フォー"
"ムインスタンスを生成し、リクエストからのデータを格納します: ``form = "
"NameForm(request.POST)`` これは \"フォームにデータをバインドする\" と呼ばれま"
"す (そして \"バインドされた\" フォームとなりました)。"

msgid ""
"We call the form's ``is_valid()`` method; if it's not ``True``, we go back "
"to the template with the form. This time the form is no longer empty "
"(*unbound*) so the HTML form will be populated with the data previously "
"submitted, where it can be edited and corrected as required."
msgstr ""
"フォームの ``is_valid()`` メソッドを呼び出します。もし ``True`` でない場合、"
"フォームをとともにテンプレートに戻ります。この時、フォームはもはや空 (*バイン"
"ドされていない*) ではないため、HTMLフォームには前回送信されたデータが入力さ"
"れ、必要に応じて編集や修正が可能になります。"

msgid ""
"If ``is_valid()`` is ``True``, we'll now be able to find all the validated "
"form data in its ``cleaned_data`` attribute. We can use this data to update "
"the database or do other processing before sending an HTTP redirect to the "
"browser telling it where to go next."
msgstr ""
"``is_valid()`` が ``True`` の場合は、 ``cleaned_data`` 属性で検証済みのフォー"
"ムデータを見出すことができます。このデータは、データベースを更新するために"
"使ったり、次に進むための HTTP リダイレクトをブラウザに送る前に、何らかの処理"
"をできます。"

msgid "The template"
msgstr "テンプレート"

msgid "We don't need to do much in our ``name.html`` template:"
msgstr "``name.html`` テンプレートですべきことは多くありません。"

msgid ""
"All the form's fields and their attributes will be unpacked into HTML markup "
"from that ``{{ form }}`` by Django's template language."
msgstr ""
"すべてのフォームのフィールドと属性は、Django のテンプレート言語によって、こ"
"の ``{{ form }}`` から HTML マークアップに展開されます。"

msgid "Forms and Cross Site Request Forgery protection"
msgstr "フォームとクロスサイトリクエストフォージェリ保護"

msgid ""
"Django ships with an easy-to-use :doc:`protection against Cross Site Request "
"Forgeries </ref/csrf>`. When submitting a form via ``POST`` with CSRF "
"protection enabled you must use the :ttag:`csrf_token` template tag as in "
"the preceding example. However, since CSRF protection is not directly tied "
"to forms in templates, this tag is omitted from the following examples in "
"this document."
msgstr ""
"Djangoには、使いやすい :doc:`クロスサイトリクエストフォージェリ対策 </ref/"
"csrf>` が含まれています。CSRF保護が有効な状態で ``POST`` 経由でフォームを送信"
"する場合、先の例のように :ttag:`csrf_token` テンプレートタグを使用する必要が"
"あります。しかし、CSRF保護はテンプレート内のフォームに直接結びついているわけ"
"ではないため、このタグはこのドキュメントの以下の例からは省略されます。"

msgid "HTML5 input types and browser validation"
msgstr "HTML5 の input の種類とブラウザ検証"

msgid ""
"If your form includes a :class:`~django.forms.URLField`, an :class:`~django."
"forms.EmailField` or any integer field type, Django will use the ``url``, "
"``email`` and ``number`` HTML5 input types. By default, browsers may apply "
"their own validation on these fields, which may be stricter than Django's "
"validation. If you would like to disable this behavior, set the "
"``novalidate`` attribute on the ``form`` tag, or specify a different widget "
"on the field, like :class:`TextInput`."
msgstr ""
"フォームが :class:`~django.forms.URLField` 、 :class:`~django.forms."
"EmailField` もしくは何か数値のフィールドタイプを含むとき、Django は "
"``url``、 ``email``、 ``number`` という HTML5 の input タイプを使います。デ"
"フォルトでは、ブラウザはこれらのフィールドにブラウザ自身の検証を適用します。"
"これらは Django の検証より厳密かもしれません。このような動作を無効化したいと"
"きは、 ``form`` タグの ``novalidate`` 属性をセットするか、フィールドで :"
"class:`TextInput` のような異なるウィジェットを指定してください。"

msgid ""
"We now have a working web form, described by a Django :class:`Form`, "
"processed by a view, and rendered as an HTML ``<form>``."
msgstr ""
"これで、Django の :class:`Form` によって記述され, ビューによって処理され、"
"HTML ``<form>`` としてレンダリングされた Web フォームを動かせるようになりまし"
"た。"

msgid ""
"That's all you need to get started, but the forms framework puts a lot more "
"at your fingertips. Once you understand the basics of the process described "
"above, you should be prepared to understand other features of the forms "
"system and ready to learn a bit more about the underlying machinery."
msgstr ""
"始めるために必要なことは以上ですが、フォームフレームワークはまだまだ多くのこ"
"とを用意しています。上記で説明してきた基本が理解できたら、フォームシステムの"
"ほかの機能を理解し、もう少しだけ根本的な仕組みを身につける準備をするようお勧"
"めします。"

msgid "More about Django :class:`Form` classes"
msgstr "Django の :class:`Form` クラスの詳細"

msgid ""
"All form classes are created as subclasses of either :class:`django.forms."
"Form` or :class:`django.forms.ModelForm`. You can think of ``ModelForm`` as "
"a subclass of ``Form``. ``Form`` and ``ModelForm`` actually inherit common "
"functionality from a (private) ``BaseForm`` class, but this implementation "
"detail is rarely important."
msgstr ""
"すべてのフォームクラスは、:class:`django.forms.Form` ないし :class:`django."
"forms.ModelForm` のサブクラスとして作成されています。``ModelForm`` も "
"``Form`` のサブクラスとして考えられます。``Form`` や ``ModelForm`` は実際に"
"は (プライベートの) ``BaseForm`` クラスを継承していますが、 実装の詳細が重要"
"になることはほとんどありません。"

msgid "Models and Forms"
msgstr "モデルとフォーム"

msgid ""
"In fact if your form is going to be used to directly add or edit a Django "
"model, a :doc:`ModelForm </topics/forms/modelforms>` can save you a great "
"deal of time, effort, and code, because it will build a form, along with the "
"appropriate fields and their attributes, from a ``Model`` class."
msgstr ""
"実のところDjango モデルを直接追加または編集するためにフォームを使用する場"
"合、:doc:`ModelForm </topics/forms/modelforms>` は ``Model`` クラスから適切な"
"フィールドと属性とともにフォームを作成するため、時間、労力、コードを大幅に節"
"約できます。"

msgid "Bound and unbound form instances"
msgstr ""
"バインドされた (bound) および バインドされていない (unbound) フォームインスタ"
"ンス"

msgid ""
"The distinction between :ref:`ref-forms-api-bound-unbound` is important:"
msgstr ":ref:`ref-forms-api-bound-unbound` の区別は重要です:"

msgid ""
"An unbound form has no data associated with it. When rendered to the user, "
"it will be empty or will contain default values."
msgstr ""
"バインドされていない (unboundの) フォームには連結したデータがありません。ユー"
"ザーにレンダリングするとき、空ないしデフォルト値となります。"

msgid ""
"A bound form has submitted data, and hence can be used to tell if that data "
"is valid. If an invalid bound form is rendered, it can include inline error "
"messages telling the user what data to correct."
msgstr ""
"バインドされた (bound の) フォームは送信されたデータを持っており、したがって"
"データの有効性を検証できます。無効なバインドされたフォームがレンダリングされ"
"ている場合、ユーザーがデータを修正できるようにエラーメッセージを表示できま"
"す。"

msgid ""
"The form's :attr:`~Form.is_bound` attribute will tell you whether a form has "
"data bound to it or not."
msgstr ""
"フォームの :attr:`~Form.is_bound` 属性で、フォームにデータがバインドされてい"
"る (bound) かどうかを調べることができます。"

msgid "More on fields"
msgstr "フィールドについて"

msgid ""
"Consider a more useful form than our minimal example above, which we could "
"use to implement \"contact me\" functionality on a personal website:"
msgstr ""
"上記の最低限の例よりも実用的なフォームを考えましょう。個人のウェブサイトで "
"\"お問い合わせ\" 機能を実装します:"

msgid ""
"Our earlier form used a single field, ``your_name``, a :class:`CharField`. "
"In this case, our form has four fields: ``subject``, ``message``, ``sender`` "
"and ``cc_myself``. :class:`CharField`, :class:`EmailField` and :class:"
"`BooleanField` are just three of the available field types; a full list can "
"be found in :doc:`/ref/forms/fields`."
msgstr ""
"前回の例では、:class:`CharField` の ``your_name`` という単一のフィールドを扱"
"いました。今回は 4 つのフィールドがあります: ``subject``、``message``、"
"``sender``、``cc_myself`` です。 :class:`CharField`、:class:`EmailField`、:"
"class:`BooleanField` は利用可能なフィールドタイプのうちの3つに過ぎません。す"
"べての種類は :doc:`/ref/forms/fields` から確認できます。"

msgid "Widgets"
msgstr "ウィジェット"

msgid ""
"Each form field has a corresponding :doc:`Widget class </ref/forms/widgets/"
">`, which in turn corresponds to an HTML form widget such as ``<input "
"type=\"text\">``."
msgstr ""
"各フォームのフィールドは対応する :doc:`Widget クラス </ref/forms/widgets/>` "
"を持ち、順に ``<input type=\"text\">`` のような HTML フォームウィジェットと対"
"応します。"

msgid ""
"In most cases, the field will have a sensible default widget. For example, "
"by default, a :class:`CharField` will have a :class:`TextInput` widget, that "
"produces an ``<input type=\"text\">`` in the HTML. If you needed "
"``<textarea>`` instead, you'd specify the appropriate widget when defining "
"your form field, as we have done for the ``message`` field."
msgstr ""
"多くの場合、フィールドは最適なデフォルトウィジェットを持っています。例えば、:"
"class:`CharField` は :class:`TextInput` ウィジェットを持ち、HTML 内で "
"``<input type=\"text\">`` を生成します。代わりに ``<textarea>`` が必要な場"
"合、``message`` フィールドで行っているように、フォームフィールドを定義する際"
"に適切なウィジェットを指定してください。"

msgid "Field data"
msgstr "フィールドデータ"

msgid ""
"Whatever the data submitted with a form, once it has been successfully "
"validated by calling ``is_valid()`` (and ``is_valid()`` has returned "
"``True``), the validated form data will be in the ``form.cleaned_data`` "
"dictionary. This data will have been nicely converted into Python types for "
"you."
msgstr ""
"フォームで送信されたデータが何であっても、``is_valid()`` を呼び出して正常に検"
"証されると (そして ``is_valid()`` が ``True`` を返すと)、検証されたフォーム"
"データは ``form.cleaned_data`` ディクショナリに格納されます。 このデータは "
"Python の型に適宜変換されています。"

msgid ""
"You can still access the unvalidated data directly from ``request.POST`` at "
"this point, but the validated data is better."
msgstr ""
"この時点では、``request.POST`` から検証前のデータを取り出せますが、検証済みの"
"データを使うのがよい方法です。"

msgid ""
"In the contact form example above, ``cc_myself`` will be a boolean value. "
"Likewise, fields such as :class:`IntegerField` and :class:`FloatField` "
"convert values to a Python ``int`` and ``float`` respectively."
msgstr ""
"上の連絡先フォームの例では、``cc_myself`` はブール値になります。 同様に、:"
"class:`IntegerField` や :class:`FloatField` などのフィールドは、それぞれ値を "
"Python の ``int`` および ``float`` に変換します。"

msgid ""
"Here's how the form data could be processed in the view that handles this "
"form:"
msgstr ""
"このフォームを処理するビューで、フォームデータを処理する方法は次のとおりで"
"す。"

msgid "For more on sending email from Django, see :doc:`/topics/email`."
msgstr ""
"Django からメールを送信するのに詳しくは :doc:`/topics/email` をご覧ください。"

msgid ""
"Some field types need some extra handling. For example, files that are "
"uploaded using a form need to be handled differently (they can be retrieved "
"from ``request.FILES``, rather than ``request.POST``). For details of how to "
"handle file uploads with your form, see :ref:`binding-uploaded-files`."
msgstr ""
"一部のフィールドタイプでは、余分な処理が必要になります。 たとえば、フォームを"
"使用してアップロードされたファイルは、別々に処理する必要があります "
"(``request.POST`` ではなく、``request.FILES`` から取得できます)。 フォームで"
"ファイルのアップロードを処理する方法の詳細については、:ref:`binding-uploaded-"
"files` を参照してください。"

msgid "Working with form templates"
msgstr "フォームテンプレートを扱う"

msgid ""
"All you need to do to get your form into a template is to place the form "
"instance into the template context. So if your form is called ``form`` in "
"the context, ``{{ form }}`` will render its ``<label>`` and ``<input>`` "
"elements appropriately."
msgstr ""
"フォームをテンプレートにするために必要なことは、フォームインスタンスをテンプ"
"レートコンテキストに配置することだけです。 なのでフォームがコンテキストで "
"``form`` が呼ばれる場合、 ``{{form}}`` はその ``<label>`` 要素と ``<input>`` "
"要素を適切にレンダリングします。"

msgid "Additional form template furniture"
msgstr "フォームテンプレート部品の追加"

msgid ""
"Don't forget that a form's output does *not* include the surrounding "
"``<form>`` tags, or the form's ``submit`` control. You will have to provide "
"these yourself."
msgstr ""
"フォームの出力に、 ``<form>`` や送信ボタンを含んで **いない** ことに注意して"
"ください。これらはテンプレート内で提供する必要があります。"

msgid "Reusable form templates"
msgstr "再利用可能なフォームテンプレート"

msgid ""
"The HTML output when rendering a form is itself generated via a template. "
"You can control this by creating an appropriate template file and setting a "
"custom :setting:`FORM_RENDERER` to use that :attr:`~django.forms.renderers."
"BaseRenderer.form_template_name` site-wide. You can also customize per-form "
"by overriding the form's :attr:`~django.forms.Form.template_name` attribute "
"to render the form using the custom template, or by passing the template "
"name directly to :meth:`.Form.render`."
msgstr ""
"フォームをレンダリングする際の HTML 出力は、テンプレートによって生成されま"
"す。適切なテンプレートファイルを作成し、カスタムの :setting:`FORM_RENDERER` "
"を設定して、 :attr:`~django.forms.renderers.BaseRenderer.form_template_name` "
"をサイト全体で使用することで、これを制御できます。また、フォームの :attr:"
"`~django.forms.Form.template_name` 属性をオーバーライドして、カスタムテンプ"
"レートを使ってフォームをレンダリングしたり、 :meth:`.Form.render` に直接テン"
"プレート名を渡して、フォームごとにカスタマイズすることもできます。"

msgid ""
"The example below will result in ``{{ form }}`` being rendered as the output "
"of the ``form_snippet.html`` template."
msgstr ""
"以下の例では ``{{ form }}`` が ``form_snippet.html`` テンプレートの出力として"
"レンダリングされます。"

msgid "In your templates:"
msgstr "テンプレートで次のようにしてください:"

msgid "Then you can configure the :setting:`FORM_RENDERER` setting:"
msgstr "それから :setting:`FORM_RENDERER` の設定を行います:"

msgid "``settings.py``"
msgstr "``settings.py``"

msgid "… or for a single form::"
msgstr "... または単一のフォームの場合:"

msgid ""
"… or for a single render of a form instance, passing in the template name to "
"the :meth:`.Form.render`. Here's an example of this being used in a view::"
msgstr ""
"... あるいは、 :meth:`.Form.render` にテンプレート名を渡すことで、フォームイ"
"ンスタンスの単一のレンダリングを行います。これをビューで使用する例を示します:"

msgid "See :ref:`ref-forms-api-outputting-html` for more details."
msgstr "詳しくは、 :ref:`ref-forms-api-outputting-html` を参照してください。"

msgid "Reusable field group templates"
msgstr "再利用可能なフィールドグループテンプレート"

msgid ""
"Each field is available as an attribute of the form, using ``{{ form."
"name_of_field }}`` in a template. A field has a :meth:`~django.forms."
"BoundField.as_field_group` method which renders the related elements of the "
"field as a group, its label, widget, errors, and help text."
msgstr ""
"各フィールドはフォームの属性として利用可能で、テンプレート内で ``{{form."
"name_of_field }}`` を使用します。フィールドには :meth:`~django.forms."
"BoundField.as_field_group` メソッドがあり、フィールドの関連要素、ラベル、ウィ"
"ジェット、エラー、ヘルプテキストをグループとしてレンダリングします。"

msgid ""
"This allows generic templates to be written that arrange fields elements in "
"the required layout. For example:"
msgstr ""
"これにより、フィールド要素を必要なレイアウトに配置する汎用テンプレートを書く"
"ことができます。たとえば:"

msgid ""
"By default Django uses the ``\"django/forms/field.html\"`` template which is "
"designed for use with the default ``\"django/forms/div.html\"`` form style."
msgstr ""
"Django はデフォルトで、 ``\"django/forms/field.html\"`` テンプレートを使いま"
"す。これはデフォルトの ``\"django/forms/div.html\"`` フォームスタイルで使うよ"
"うに設計されています。"

msgid ""
"The default template can be customized by setting :attr:`~django.forms."
"renderers.BaseRenderer.field_template_name` in your project-level :setting:"
"`FORM_RENDERER`::"
msgstr ""
"デフォルトのテンプレートは、プロジェクトレベルの :setting:`FORM_RENDERER` "
"で :attr:`~django.forms.renderers.BaseRenderer.field_template_name` を指定す"
"ることでカスタマイズできます:"

msgid "… or on a single field::"
msgstr "... または単一のフィールドの場合:"

msgid ""
"… or on a per-request basis by calling :meth:`.BoundField.render` and "
"supplying a template name::"
msgstr ""
"... :meth:`.BoundField.render` を呼び出してテンプレート名を指定することで、リ"
"クエストごとに指定することもできます:"

msgid "Rendering fields manually"
msgstr "フィールドを手動でレンダリングする"

msgid ""
"More fine grained control over field rendering is also possible. Likely this "
"will be in a custom field template, to allow the template to be written once "
"and reused for each field. However, it can also be directly accessed from "
"the field attribute on the form. For example:"
msgstr ""
"フィールドのレンダリングをより細かく制御することも可能です。おそらくこれはカ"
"スタムフィールドテンプレートになるでしょう。しかし、フォームのフィールド属性"
"から直接アクセスすることもできます。たとえば:"

msgid ""
"Complete ``<label>`` elements can also be generated using the :meth:`~django."
"forms.BoundField.label_tag`. For example:"
msgstr ""
"完全な ``<label>`` 要素は、 :meth:`~django.forms.BoundField.label_tag` を使用"
"して生成することもできます。 例えば次のようにできます:"

msgid "Rendering form error messages"
msgstr "フォームのエラーメッセージをレンダリングする"

msgid ""
"The price of this flexibility is a bit more work. Until now we haven't had "
"to worry about how to display form errors, because that's taken care of for "
"us. In this example we have had to make sure we take care of any errors for "
"each field and any errors for the form as a whole. Note ``{{ form."
"non_field_errors }}`` at the top of the form and the template lookup for "
"errors on each field."
msgstr ""
"この柔軟性の代償として、少し作業が増えます。これまでは、フォームエラーの表示"
"方法について心配する必要はありませんでした。この例では、各フィールドのエラー"
"と、フォーム全体のエラーを確実に処理しなければなりません。フォームの一番上に"
"ある ``{{ form.non_field_errors }}`` と、各フィールドのエラーのテンプレート"
"ルックアップに注目してください。"

msgid ""
"Using ``{{ form.name_of_field.errors }}`` displays a list of form errors, "
"rendered as an unordered list. This might look like:"
msgstr ""
"``{{ form.name_of_field.errors }}`` を使用すると、フォームエラーのリストが順"
"序なしリストとして表示されます。これは次のようになります:"

msgid ""
"The list has a CSS class of ``errorlist`` to allow you to style its "
"appearance. If you wish to further customize the display of errors you can "
"do so by looping over them:"
msgstr ""
"このリストには ``errorlist`` というCSSクラスがあり、見た目をカスタマイズでき"
"ます。もしエラーの表示をさらにカスタマイズしたい場合は、ループさせることでカ"
"スタマイズできます:"

msgid ""
"Non-field errors (and/or hidden field errors that are rendered at the top of "
"the form when using helpers like ``form.as_p()``) will be rendered with an "
"additional class of ``nonfield`` to help distinguish them from field-"
"specific errors. For example, ``{{ form.non_field_errors }}`` would look "
"like:"
msgstr ""
"非フィールドエラー(および/または ``form.as_p()`` のようなヘルパーを使用したと"
"きにフォームの先頭にレンダリングされる隠しフィールドエラー)は、フィールド固有"
"のエラーと区別するために ``nonfield`` という追加のクラスでレンダリングされま"
"す。例えば、 ``{{ form.non_field_errors }}`` は以下のようになります:"

msgid ""
"See :doc:`/ref/forms/api` for more on errors, styling, and working with form "
"attributes in templates."
msgstr ""
"エラー、スタイリング、テンプレートでのフォーム属性の扱いについては :doc:`/"
"ref/forms/api` を参照してください。"

msgid "Looping over the form's fields"
msgstr "フォームのフィールドをループする"

msgid ""
"If you're using the same HTML for each of your form fields, you can reduce "
"duplicate code by looping through each field in turn using a ``{% for %}`` "
"loop:"
msgstr ""
"フォームフィールドごとに同じ HTML を使用している場合、 ``{％ for ％}`` ループ"
"を使用して各フィールドを順番にループすることで、重複するコードを減らすことが"
"できます。"

msgid "Useful attributes on ``{{ field }}`` include:"
msgstr "``{{ field }}`` の有用な属性は次のとおりです:"

msgid "``{{ field.errors }}``"
msgstr "``{{ field.errors }}``"

msgid ""
"Outputs a ``<ul class=\"errorlist\">`` containing any validation errors "
"corresponding to this field. You can customize the presentation of the "
"errors with a ``{% for error in field.errors %}`` loop. In this case, each "
"object in the loop is a string containing the error message."
msgstr ""
"このフィールドに対応するバリデーションエラーを含む ``<ul "
"class=\"errorlist\">`` を出力します。エラーの表示は ``{% for error in field."
"errors %}`` ループでカスタマイズできます。この場合、ループ内の各オブジェクト"
"はエラーメッセージを含む文字列となります。"

msgid "``{{ field.field }}``"
msgstr "``{{ field.field }}``"

msgid ""
"The :class:`~django.forms.Field` instance from the form class that this :"
"class:`~django.forms.BoundField` wraps. You can use it to access :class:"
"`~django.forms.Field` attributes, e.g. ``{{ char_field.field.max_length }}``."
msgstr ""
":class:`~django.forms.BoundField` がラップするフォームクラスの :class:"
"`~django.forms.Field` 。 :class:`~django.forms.Field` 属性にアクセスするため"
"に使用できます。  例: ``{{char_field.field.max_length}}``"

msgid "``{{ field.help_text }}``"
msgstr "``{{ field.help_text }}``"

msgid "Any help text that has been associated with the field."
msgstr "フィールドに関連付けられたヘルプテキスト。"

msgid "``{{ field.html_name }}``"
msgstr "``{{ field.html_name }}``"

msgid ""
"The name of the field that will be used in the input element's name field. "
"This takes the form prefix into account, if it has been set."
msgstr ""
"input要素のnameフィールドで使用されるフィールドの名前。 フォームのプレフィッ"
"クスが設定されていれば考慮に入れます。"

msgid "``{{ field.id_for_label }}``"
msgstr "``{{ field.id_for_label }}``"

msgid ""
"The ID that will be used for this field (``id_email`` in the example above). "
"If you are constructing the label manually, you may want to use this in lieu "
"of ``label_tag``. It's also useful, for example, if you have some inline "
"JavaScript and want to avoid hardcoding the field's ID."
msgstr ""
"フィールドに使用されるID(上記の例では ``id_email``)。 ラベルを手動で作成する"
"場合は、``label_tag`` の代わりにこのラベルを使用します。 たとえば、インライン"
"JavaScriptがあり、フィールドのIDをハードコーディングしないようにしたい場合に"
"も便利です。"

msgid "``{{ field.is_hidden }}``"
msgstr "``{{ field.is_hidden }}``"

msgid ""
"This attribute is ``True`` if the form field is a hidden field and ``False`` "
"otherwise. It's not particularly useful as a template variable, but could be "
"useful in conditional tests such as:"
msgstr ""
"この属性は、フォームフィールドがhiddenフィールドの場合はTrue、それ以外の場合"
"はFalseです。 テンプレート変数としては特に有用ではありませんが、以下のような"
"条件テストに役立ちます。"

msgid "``{{ field.label }}``"
msgstr "``{{ field.label }}``"

msgid "The label of the field, e.g. ``Email address``."
msgstr "フィールドのラベル。例) ``Email address``."

msgid "``{{ field.label_tag }}``"
msgstr "``{{ field.label_tag }}``"

msgid ""
"The field's label wrapped in the appropriate HTML ``<label>`` tag. This "
"includes the form's :attr:`~django.forms.Form.label_suffix`. For example, "
"the default ``label_suffix`` is a colon:"
msgstr ""
"フィールドのラベルは、適切なHTMLの ``<label>`` タグで囲まれています。 これに"
"はフォームの :attr:`~django.forms.Form.label_suffix` が含まれます。 たとえ"
"ば、デフォルトの ``label_suffix`` は次のようになります。"

msgid "``{{ field.legend_tag }}``"
msgstr "``{{ field.legend_tag }}``"

msgid ""
"Similar to ``field.label_tag`` but uses a ``<legend>`` tag in place of "
"``<label>``, for widgets with multiple inputs wrapped in a ``<fieldset>``."
msgstr ""
"``field.label_tag`` と似ていますが、 ``<label>`` の代わりに ``<legend>`` タグ"
"を使用します。複数の入力を ``<fieldset>`` でラップしたウィジェット用です。"

msgid "``{{ field.use_fieldset }}``"
msgstr "``{{ field.use_fieldset }}``"

msgid ""
"This attribute is ``True`` if the form field's widget contains multiple "
"inputs that should be semantically grouped in a ``<fieldset>`` with a "
"``<legend>`` to improve accessibility. An example use in a template:"
msgstr ""
"この属性は、フォームフィールドのウィジェットが複数の入力を含み、アクセシビリ"
"ティを向上させるために ``<fieldset>`` と ``<legend>`` で意味的にグループ化さ"
"れるべき場合に ``True`` になります。テンプレートでの使用例:"

msgid "``{{ field.value }}``"
msgstr "``{{ field.value }}``"

msgid "The value of the field. e.g ``someone@example.com``."
msgstr "フィールドの値。例:  ``someone@example.com``"

msgid ""
"For a complete list of attributes and methods, see :class:`~django.forms."
"BoundField`."
msgstr ""
"属性とメソッドの完全な一覧については、 :class:`~django.forms.BoundField` を参"
"照してください。"

msgid "Looping over hidden and visible fields"
msgstr "Hidden および可視のフィールドをループする"

msgid ""
"If you're manually laying out a form in a template, as opposed to relying on "
"Django's default form layout, you might want to treat ``<input "
"type=\"hidden\">`` fields differently from non-hidden fields. For example, "
"because hidden fields don't display anything, putting error messages \"next "
"to\" the field could cause confusion for your users -- so errors for those "
"fields should be handled differently."
msgstr ""
"Django のデフォルトのフォームレイアウトに頼るのではなく、手作業でテンプレート"
"に フォームをレイアウトする場合、 ``<input type=\"hidden\">`` フィールドを、"
"隠しフィールドとは異なるように扱いたいかもしれません。例えば、隠しフィールド"
"は何も表示しないので、エラーメッセージをフィールドの「隣」に置くとユーザを混"
"乱させる可能性があります。"

msgid ""
"Django provides two methods on a form that allow you to loop over the hidden "
"and visible fields independently: ``hidden_fields()`` and "
"``visible_fields()``. Here's a modification of an earlier example that uses "
"these two methods:"
msgstr ""
"Django は、隠しフィールドと可視フィールドを個別にループできる 2 つのメソッ ド"
"をフォームに提供しています。 ``hidden_fields()`` と ``visible_fields()`` で"
"す。以下は、この 2 つのメソッドを使い、前述の例を修正したものです:"

msgid ""
"This example does not handle any errors in the hidden fields. Usually, an "
"error in a hidden field is a sign of form tampering, since normal form "
"interaction won't alter them. However, you could easily insert some error "
"displays for those form errors, as well."
msgstr ""
"この例では隠しフィールドのエラーは処理しません。通常、隠しフィールドのエラー"
"はフォームが改ざんされているサインです。しかし、これらのフォームエラーのため"
"にエラー表示を挿入することも簡単にできます。"

msgid "Further topics"
msgstr "その他のトピック"

msgid "This covers the basics, but forms can do a whole lot more:"
msgstr ""
"ここまでで基本的なことをカバーしますが、フォームはもっと多くのことができま"
"す。"

msgid ":doc:`The Forms Reference </ref/forms/index>`"
msgstr ":doc:`フォームのリファレンス </ref/forms/index>`"

msgid ""
"Covers the full API reference, including form fields, form widgets, and form "
"and field validation."
msgstr ""
"フォームフィールド、フォームウィジェット、フォームとフィールドの検証など、API"
"リファレンス全体をカバーします。"

msgid "Form Assets (the ``Media`` class)"
msgstr "フォームアセット (``Media`` クラス)"

msgid ""
"Rendering an attractive and easy-to-use web form requires more than just "
"HTML - it also requires CSS stylesheets, and if you want to use fancy "
"widgets, you may also need to include some JavaScript on each page. The "
"exact combination of CSS and JavaScript that is required for any given page "
"will depend upon the widgets that are in use on that page."
msgstr ""
"魅力的で使いやすいウェブのフォームを作るには、HTML だけでは不十分です。CSS ス"
"タイルシートも必要です。さらに豪華なウィジェットを使いたければ、JavaScript を"
"各ページに配置する必要もあるでしょう。あるページに必要な CSS と JavaScript の"
"組み合わせは、そのページに使用されるウィジェットによって異なります。"

msgid ""
"This is where asset definitions come in. Django allows you to associate "
"different files -- like stylesheets and scripts -- with the forms and "
"widgets that require those assets. For example, if you want to use a "
"calendar to render DateFields, you can define a custom Calendar widget. This "
"widget can then be associated with the CSS and JavaScript that is required "
"to render the calendar. When the Calendar widget is used on a form, Django "
"is able to identify the CSS and JavaScript files that are required, and "
"provide the list of file names in a form suitable for inclusion on your web "
"page."
msgstr ""
"ここでアセット定義の出番です。Django では異なるファイル（例えばスタイルシート"
"とスクリプト）を、これらを必要とするフォームおよびウィジェットと結びつけるこ"
"とができます。例として、DateFields を描画するのにカレンダーを使いたい場合、独"
"自の Calendar ウィジェットを定義したとき、このウィジェットは CSS や "
"JavaScript と紐付けることができます。フォーム上でこの Calendar ウィジェットを"
"使用するとき、Django は必要な CSS および JavaScript のファイルを特定し、Web "
"ページ上で参照できるよう、フォーム内にファイル名のリストを生成します。"

msgid "Assets and Django Admin"
msgstr "アセットと Django Admin"

msgid ""
"The Django Admin application defines a number of customized widgets for "
"calendars, filtered selections, and so on. These widgets define asset "
"requirements, and the Django Admin uses the custom widgets in place of the "
"Django defaults. The Admin templates will only include those files that are "
"required to render the widgets on any given page."
msgstr ""
"Django Admin アプリケーションでは、カレンダーやフィルタリング選択など、いく"
"つ かのカスタマイズされたウィジェットが定義されています。これらのウィジェット"
"はアセット要件を定義し、 Django Admin は Django のデフォルトの代わりにカスタ"
"ムウィジェットを使います。Admin テンプレートは、任意のページでウィジェットを"
"レンダリングするのに必要なファイルだけを含めます。"

msgid ""
"If you like the widgets that the Django Admin application uses, feel free to "
"use them in your own application! They're all stored in ``django.contrib."
"admin.widgets``."
msgstr ""
"Django Admin アプリケーションが使っているウィジェットが気に入ったら、ご自分"
"の アプリケーションで自由に使ってください！これらは全て ``django.contrib."
"admin.widgets`` に格納されています。"

msgid "Which JavaScript toolkit?"
msgstr "どの JavaScript ツールキットを使えばいいの？"

msgid ""
"Many JavaScript toolkits exist, and many of them include widgets (such as "
"calendar widgets) that can be used to enhance your application. Django has "
"deliberately avoided blessing any one JavaScript toolkit. Each toolkit has "
"its own relative strengths and weaknesses - use whichever toolkit suits your "
"requirements. Django is able to integrate with any JavaScript toolkit."
msgstr ""
"多くの JavaScript ツールキットが存在し、その多くにはウィジェット (カレンダ ー"
"ウィジェットなど) が含まれていて、アプリケーションの拡張に利用できます。"
"Django は、意図的に一つの JavaScript ツールキットだけを使うことを避けていま"
"す。それぞれのツールキットには、相対的な長所と短所があります。Django はどん"
"な JavaScript ツールキットとも統合できます。"

msgid "Assets as a static definition"
msgstr "定数として定義されたアセット"

msgid ""
"The easiest way to define assets is as a static definition. Using this "
"method, the declaration is an inner ``Media`` class. The properties of the "
"inner class define the requirements."
msgstr ""
"アセットを定義する最も簡単な方法は、定数とすることです。この方法を利用するに"
"は、内部 ``Media`` クラスに宣言します。内部クラスのプロパティで必要なものを定"
"義します。"

msgid "Here's an example::"
msgstr "以下に例を示します。"

msgid ""
"This code defines a ``CalendarWidget``, which will be based on "
"``TextInput``. Every time the CalendarWidget is used on a form, that form "
"will be directed to include the CSS file ``pretty.css``, and the JavaScript "
"files ``animations.js`` and ``actions.js``."
msgstr ""
"このコードでは、``CalendarWidget`` を定義しており、これは ``TextInput`` に基"
"づいています。CalendarWidget をフォーム上で使用すると、CSS ファイル ``pretty."
"css`` と JavaScript ファイル  ``animations.js`` および ``actions.js`` を読み"
"込めるようになります。"

msgid ""
"This static definition is converted at runtime into a widget property named "
"``media``. The list of assets for a ``CalendarWidget`` instance can be "
"retrieved through this property:"
msgstr ""
"この静的定義は実行時に ``media`` というウィジェットプロパティに変換されま"
"す。 ``CalendarWidget`` インスタンスのアセットリストは、このプロパティから取"
"得できます:"

msgid ""
"Here's a list of all possible ``Media`` options. There are no required "
"options."
msgstr "以下は指定可能な ``Media`` オプションです。必須のものはありません。"

msgid "``css``"
msgstr "``css``"

msgid ""
"A dictionary describing the CSS files required for various forms of output "
"media."
msgstr ""
"様々な形式の出力メディアに対して、必要な CSSファイルを定義するディクショナリ"
"です。"

msgid ""
"The values in the dictionary should be a tuple/list of file names. See :ref:"
"`the section on paths <form-asset-paths>` for details of how to specify "
"paths to these files."
msgstr ""
"ディクショナリの値はファイル名のタプルかリストで指定します。ファイルのパスを"
"指定する方法は :ref:`パスの章 <form-asset-paths>` を参照してください。"

msgid ""
"The keys in the dictionary are the output media types. These are the same "
"types accepted by CSS files in media declarations: 'all', 'aural', "
"'braille', 'embossed', 'handheld', 'print', 'projection', 'screen', 'tty' "
"and 'tv'. If you need to have different stylesheets for different media "
"types, provide a list of CSS files for each output medium. The following "
"example would provide two CSS options -- one for the screen, and one for "
"print::"
msgstr ""
"ディクショナリのキーは、出力するメディアタイプを表します。これらは CSS ファイ"
"ル認識可能なメディアタイプと同じです: "
"'all'、'aural'、'braille'、'embossed'、'handheld'、'print'、'projection'、'screen'、'tty'、'tv'。"
"メディアタイプに応じたスタイルシートを提供する必要がある場合、各出力メディア"
"に対して CSS ファイルを作成してください。以下の例は 2 つの CSS オプションを提"
"供します -- 1 つはスクリーン用でもう一つは印刷用です::"

msgid ""
"If a group of CSS files are appropriate for multiple output media types, the "
"dictionary key can be a comma separated list of output media types. In the "
"following example, TV's and projectors will have the same media "
"requirements::"
msgstr ""
"1 つのCSS ファイルのグループを複数の出力メディアタイプに適用するには、出力メ"
"ディアタイプをカンマで区切ってディス書なりのキーに指定します。以下の例では、"
"TV とプロジェクターは同じメディアを参照します::"

msgid ""
"If this last CSS definition were to be rendered, it would become the "
"following HTML:"
msgstr "上記のCSS定義をレンダリングすると、次のようなHTMLになります:"

msgid "``js``"
msgstr "``js``"

msgid ""
"A tuple describing the required JavaScript files. See :ref:`the section on "
"paths <form-asset-paths>` for details of how to specify paths to these files."
msgstr ""
"必要な JavaScript ファイルを定義したタプルです。ファイルのパスを指定する方法"
"は :ref:`パスの章 <form-asset-paths>` を参照してください。"

msgid "``extend``"
msgstr "``extend``"

msgid "A boolean defining inheritance behavior for ``Media`` declarations."
msgstr "``Media`` 宣言に対する継承動作を定義する真偽値です。"

msgid ""
"By default, any object using a static ``Media`` definition will inherit all "
"the assets associated with the parent widget. This occurs regardless of how "
"the parent defines its own requirements. For example, if we were to extend "
"our basic Calendar widget from the example above:"
msgstr ""
"デフォルトでは、静的な ``Media`` 定義を使用しているオブジェクトは、親ウィ"
"ジェットに関連するすべてのアセットを継承します。これは、親ウィジェットが自身"
"の要件をどのように定義しているかによりません。例えば、上の例の基本的なカレン"
"ダーウィジェットを拡張するとします:"

msgid ""
"The FancyCalendar widget inherits all the assets from its parent widget. If "
"you don't want ``Media`` to be inherited in this way, add an "
"``extend=False`` declaration to the ``Media`` declaration:"
msgstr ""
"FancyCalendar ウィジェットは親ウィジェットからすべてのアセットを継承します。"
"このように ``Media`` を継承させたくない場合は、``Media`` の宣言に "
"``extend=False`` 宣言を追加してください:"

msgid ""
"If you require even more control over inheritance, define your assets using "
"a :ref:`dynamic property <dynamic-property>`. Dynamic properties give you "
"complete control over which files are inherited, and which are not."
msgstr ""
"継承をさらにコントロールしたい場合は、 :ref:`動的なプロパティ <dynamic-"
"property>` を使ってアセットを定義してください。動的なプロパティはどのファイル"
"を継承し、どのファイルを継承しないかを完全にコントロールできます。"

msgid "``Media`` as a dynamic property"
msgstr "動的プロパティとしての ``Media``"

msgid ""
"If you need to perform some more sophisticated manipulation of asset "
"requirements, you can define the ``media`` property directly. This is done "
"by defining a widget property that returns an instance of ``forms.Media``.  "
"The constructor for ``forms.Media`` accepts ``css`` and ``js`` keyword "
"arguments in the same format as that used in a static media definition."
msgstr ""
"アセット要件のより詳細な操作が必要な場合、``media`` プロパティを直接定義でき"
"ます。これは、``forms.Media`` のインスタンスを返すウィジェットプロパティを定"
"義することで実現できます。``forms.Media`` に対するコンストラクタは、定数によ"
"るメディア定義と同様の形式で、``css`` と ``js`` のキーワード引数を認識しま"
"す。"

msgid ""
"For example, the static definition for our Calendar Widget could also be "
"defined in a dynamic fashion::"
msgstr ""
"例えば、上記例で扱ってきた Calendar Widget に対する定数の定義は、動的な方法で"
"は以下のように定義できます::"

msgid ""
"See the section on `Media objects`_ for more details on how to construct "
"return values for dynamic ``media`` properties."
msgstr ""
"動的な ``media`` プロパティに対する戻り値を構成する方法については、 `Media "
"objects`_ を参照してください。"

msgid "Paths in asset definitions"
msgstr "アセット定義内のパス"

msgid "Paths as strings"
msgstr "文字列のパス"

msgid ""
"String paths used to specify assets can be either relative or absolute. If a "
"path starts with ``/``, ``http://`` or ``https://``, it will be interpreted "
"as an absolute path, and left as-is. All other paths will be prepended with "
"the value of the appropriate prefix. If the :mod:`django.contrib."
"staticfiles` app is installed, it will be used to serve assets."
msgstr ""
"アセットを指定する文字列パスは相対パスと絶対パスがあります。パスが ``/``, "
"``http://``, ``https://`` で始まる場合、絶対パスとして解釈され、そのまま残さ"
"れます。それ以外のパスは適切なプレフィックスの値が先頭に付加されます。 :mod:"
"`django.contrib.staticfiles` アプリがインストールされている場合、アセットを配"
"信するために使用されます。"

msgid ""
"Whether or not you use :mod:`django.contrib.staticfiles`,  the :setting:"
"`STATIC_URL` and :setting:`STATIC_ROOT` settings are required to render a "
"complete web page."
msgstr ""
":mod:`django.contrib.staticfiles` を使うかどうかに関わらず、ウェブページを完"
"全に表示するために :setting:`STATIC_URL` と :setting:`STATIC_ROOT` の設定が必"
"要となります。"

msgid ""
"To find the appropriate prefix to use, Django will check if the :setting:"
"`STATIC_URL` setting is not ``None`` and automatically fall back to using :"
"setting:`MEDIA_URL`. For example, if the :setting:`MEDIA_URL` for your site "
"was ``'http://uploads.example.com/'`` and :setting:`STATIC_URL` was ``None``:"
msgstr ""
"適切なプレフィックスを見つけるために、Django は :setting:`STATIC_URL` の設定"
"が ``None`` でないかどうかをチェックし、自動的に :setting:`MEDIA_URL` を使う"
"ようにフォールバックします。たとえば、あなたのサイトの :setting:`MEDIA_URL` "
"が ``'http://uploads.example.com/'`` で、 :setting:`STATIC_URL` が ``None`` "
"だったとします:"

msgid "But if :setting:`STATIC_URL` is ``'http://static.example.com/'``:"
msgstr ""
"しかし、 :setting:`STATIC_URL` が ``'http://static.example.com/'`` の場合は下"
"記のようになります:"

msgid ""
"Or if :mod:`~django.contrib.staticfiles` is configured using the :class:"
"`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage`:"
msgstr ""
"または :mod:`~django.contrib.staticfiles` が :class:`~django.contrib."
"staticfiles.storage.ManifestStaticFilesStorage` を使って設定されている場合、"
"下記のようになります:"

msgid "Paths as objects"
msgstr "オブジェクトとしてのパス"

msgid ""
"Asset paths may also be given as hashable objects implementing an "
"``__html__()`` method. The ``__html__()`` method is typically added using "
"the :func:`~django.utils.html.html_safe` decorator. The object is "
"responsible for outputting the complete HTML ``<script>`` or ``<link>`` tag "
"content:"
msgstr ""
"アセットパスは ``__html__()`` メソッドを実装したハッシュ可能なオブジェクトと"
"して指定することもできます。 :func:`~django.utils.html.html_safe` デコレータ"
"を使って ``__html__()`` メソッドを追加します。このオブジェクトは HTML の "
"``<script>`` や ``<link>`` タグの内容を出力します:"

msgid "``Media`` objects"
msgstr "``Media`` objects"

msgid ""
"When you interrogate the ``media`` attribute of a widget or form, the value "
"that is returned is a ``forms.Media`` object. As we have already seen, the "
"string representation of a ``Media`` object is the HTML required to include "
"the relevant files in the ``<head>`` block of your HTML page."
msgstr ""
"ウィジェットやフォームの ``media`` 属性に応答指令信号を送ると、``forms."
"Media`` オブジェクトが戻り値となります。すでに見たように、``Media`` オブジェ"
"クトの文字列表現は HTMLで、HTML ページ内の ``<head>`` ブロックに関連ファイル"
"を含める必要があります。"

msgid "However, ``Media`` objects have some other interesting properties."
msgstr ""
"ただし、``Media`` オブジェクトにはいくつかの面白いプロパティが存在します。"

msgid "Subsets of assets"
msgstr "アセットのサブセット"

msgid ""
"If you only want files of a particular type, you can use the subscript "
"operator to filter out a medium of interest. For example:"
msgstr ""
"特定のタイプのファイルだけが必要な場合は、添え字を使って、欲しいメディアだけ"
"をフィルタリングできます。たとえば以下のようにします:"

msgid ""
"When you use the subscript operator, the value that is returned is a new "
"``Media`` object -- but one that only contains the media of interest."
msgstr ""
"添え字演算子を使うと、返される値は、指定したメディアだけを含む新しい "
"``Media`` オブジェクトです。"

msgid "Combining ``Media`` objects"
msgstr "``Media`` オブジェクトを結合する"

msgid ""
"``Media`` objects can also be added together. When two ``Media`` objects are "
"added, the resulting ``Media`` object contains the union of the assets "
"specified by both:"
msgstr ""
"``Media`` オブジェクトは一緒に追加することもできます。2 つの ``Media`` オブ"
"ジェクトを追加した場合、結果として生成される ``Media`` オブジェクトには両方の"
"アセットが含まれます:"

msgid "Order of assets"
msgstr "アセットの順序"

msgid ""
"The order in which assets are inserted into the DOM is often important. For "
"example, you may have a script that depends on jQuery. Therefore, combining "
"``Media`` objects attempts to preserve the relative order in which assets "
"are defined in each ``Media`` class."
msgstr ""
"DOM に挿入されるアセットの順序が重要になることがあります。例えば、jQuery に依"
"存したスクリプトがあるかもしれません。したがって、結合した ``Media`` オブジェ"
"クトは、各 ``Media`` クラス内で定義された順序を保持します。"

msgid ""
"Combining ``Media`` objects with assets in a conflicting order results in a "
"``MediaOrderConflictWarning``."
msgstr ""
"順序が矛盾した ``Media`` オブジェクトを結合すると "
"``MediaOrderConflictWarning`` となります。"

msgid "``Media`` on Forms"
msgstr "フォームの ``Media``"

msgid ""
"Widgets aren't the only objects that can have ``media`` definitions -- forms "
"can also define ``media``. The rules for ``media`` definitions on forms are "
"the same as the rules for widgets: declarations can be static or dynamic; "
"path and inheritance rules for those declarations are exactly the same."
msgstr ""
"ウィジェットだけでなく、フォームにも ``media`` の定義を行うことができます。"
"フォーム上での ``media`` 定義のルールはウィジェットと同じです: 宣言は定数およ"
"び動的に行えます; パスと継承についてのルールもまったく同じです。"

msgid ""
"Regardless of whether you define a ``media`` declaration, *all* Form objects "
"have a ``media`` property. The default value for this property is the result "
"of adding the ``media`` definitions for all widgets that are part of the "
"form:"
msgstr ""
"``media`` 宣言を定義しているかどうかに関わらず、すべてのフォームオブジェクト"
"は ``media`` プロパティを持ちます。このプロパティのデフォルト値は、フォームの"
"一部であるすべてのウィジェットの ``media`` 定義を追加した結果です:"

msgid ""
"If you want to associate additional assets with a form -- for example, CSS "
"for form layout -- add a ``Media`` declaration to the form:"
msgstr ""
"フォームレイアウト用のCSSなど、フォームに追加のアセットを関連付けたい場合は、"
"フォームに ``Media`` 宣言を追加します:"

msgid "Creating forms from models"
msgstr "モデルからフォームを作成する"

msgid "``ModelForm``"
msgstr "``ModelForm``"

msgid ""
"If you're building a database-driven app, chances are you'll have forms that "
"map closely to Django models. For instance, you might have a ``BlogComment`` "
"model, and you want to create a form that lets people submit comments. In "
"this case, it would be redundant to define the field types in your form, "
"because you've already defined the fields in your model."
msgstr ""
"データベース中心のアプリケーションを作成している場合、Django モデルに密接に"
"マップするフォームを使うことになるでしょう。例えば、``BlogComment`` モデルを"
"持っていて、閲覧者がコメントを送信できるフォームを作成したくなったとしましょ"
"う。この場合、すでにモデル内にフィールドが定義されているので、フォーム内に"
"フィールドタイプを改めて定義するのは冗長でしょう。"

msgid ""
"For this reason, Django provides a helper class that lets you create a "
"``Form`` class from a Django model."
msgstr ""
"このためDjango には、Django モデルから ``Form`` クラスを生成できるようなヘル"
"パークラスを用意してあります。"

msgid ""
"The generated ``Form`` class will have a form field for every model field "
"specified, in the order specified in the ``fields`` attribute."
msgstr ""
"生成された ``Form`` クラスは、指定された全てのモデルフィールドに対して、"
"``fields`` 属性で指定された順番でフォームフィールドを有します。"

msgid ""
"Each model field has a corresponding default form field. For example, a "
"``CharField`` on a model is represented as a ``CharField`` on a form. A "
"model ``ManyToManyField`` is represented as a ``MultipleChoiceField``. Here "
"is the full list of conversions:"
msgstr ""
"各モデルフィールドは、対応するデフォルトのフォームフィールドを持ちます。例え"
"ば、モデル上の ``CharField``  はフォーム上で ``CharField`` として表現されま"
"す。モデル ``ManyToManyField`` は ``MultipleChoiceField`` として表現されま"
"す。 以下は、各フィールドの対応表です:"

msgid "Model field"
msgstr "モデルフィールド"

msgid "Form field"
msgstr "フォームフィールド"

msgid ":class:`AutoField`"
msgstr ":class:`AutoField`"

msgid "Not represented in the form"
msgstr "フォーム上では表示されません。"

msgid ":class:`BigAutoField`"
msgstr ":class:`BigAutoField`"

msgid ":class:`BigIntegerField`"
msgstr ":class:`BigIntegerField`"

msgid ""
":class:`~django.forms.IntegerField` with ``min_value`` set to "
"-9223372036854775808 and ``max_value`` set to 9223372036854775807."
msgstr ""
":class:`~django.forms.IntegerField` で ``min_value`` が -9223372036854775808 "
"から ``max_value`` に 9223372036854775807 セットされます。"

msgid ":class:`BinaryField`"
msgstr ":class:`BinaryField`"

msgid ""
":class:`~django.forms.CharField`, if :attr:`~.Field.editable` is set to "
"``True`` on the model field, otherwise not represented in the form."
msgstr ""
":attr:`~.Field.editable` がモデルフィールド上で ``True`` にセットされていた場"
"合、:class:`~django.forms.CharField` です。それ以外の場合フォーム内で描画され"
"ません。"

msgid ":class:`BooleanField`"
msgstr ":class:`BooleanField`"

msgid ""
":class:`~django.forms.BooleanField`, or :class:`~django.forms."
"NullBooleanField` if ``null=True``."
msgstr ""
":class:`~django.forms.BooleanField` です。``null=True`` の場合は :class:"
"`~django.forms.NullBooleanField` です。"

msgid ":class:`CharField`"
msgstr ":class:`CharField`"

msgid ""
":class:`~django.forms.CharField` with ``max_length`` set to the model "
"field's ``max_length`` and :attr:`~django.forms.CharField.empty_value` set "
"to ``None`` if ``null=True``."
msgstr ""
":class:`~django.forms.CharField` で、``max_length`` はモデルフィールドの "
"``max_length`` にセットされます。また ``null=True`` の場合 :attr:`~django."
"forms.CharField.empty_value` が ``None`` にセットされます。"

msgid ":class:`DateField`"
msgstr ":class:`DateField`"

msgid ":class:`~django.forms.DateField`"
msgstr ":class:`~django.forms.DateField`"

msgid ":class:`DateTimeField`"
msgstr ":class:`DateTimeField`"

msgid ":class:`~django.forms.DateTimeField`"
msgstr ":class:`~django.forms.DateTimeField`"

msgid ":class:`DecimalField`"
msgstr ":class:`DecimalField`"

msgid ":class:`~django.forms.DecimalField`"
msgstr ":class:`~django.forms.DecimalField`"

msgid ":class:`DurationField`"
msgstr ":class:`DurationField`"

msgid ":class:`~django.forms.DurationField`"
msgstr ":class:`~django.forms.DurationField`"

msgid ":class:`EmailField`"
msgstr ":class:`EmailField`"

msgid ":class:`~django.forms.EmailField`"
msgstr ":class:`~django.forms.EmailField`"

msgid ":class:`FileField`"
msgstr ":class:`FileField`"

msgid ":class:`~django.forms.FileField`"
msgstr ":class:`~django.forms.FileField`"

msgid ":class:`FilePathField`"
msgstr ":class:`FilePathField`"

msgid ":class:`~django.forms.FilePathField`"
msgstr ":class:`~django.forms.FilePathField`"

msgid ":class:`FloatField`"
msgstr ":class:`FloatField`"

msgid ":class:`~django.forms.FloatField`"
msgstr ":class:`~django.forms.FloatField`"

msgid ":class:`ForeignKey`"
msgstr ":class:`ForeignKey`"

msgid ":class:`~django.forms.ModelChoiceField` (see below)"
msgstr ":class:`~django.forms.ModelChoiceField` (see below)"

msgid ":class:`ImageField`"
msgstr ":class:`ImageField`"

msgid ":class:`~django.forms.ImageField`"
msgstr ":class:`~django.forms.ImageField`"

msgid ":class:`IntegerField`"
msgstr ":class:`IntegerField`"

msgid ":class:`~django.forms.IntegerField`"
msgstr ":class:`~django.forms.IntegerField`"

msgid "``IPAddressField``"
msgstr "``IPAddressField``"

msgid ":class:`GenericIPAddressField`"
msgstr ":class:`GenericIPAddressField`"

msgid ":class:`~django.forms.GenericIPAddressField`"
msgstr ":class:`~django.forms.GenericIPAddressField`"

msgid ":class:`JSONField`"
msgstr ":class:`JSONField`"

msgid ":class:`~django.forms.JSONField`"
msgstr ":class:`~django.forms.JSONField`"

msgid ":class:`ManyToManyField`"
msgstr ":class:`ManyToManyField`"

msgid ":class:`~django.forms.ModelMultipleChoiceField` (see below)"
msgstr ":class:`~django.forms.ModelMultipleChoiceField` (以下を参照)"

msgid ":class:`PositiveBigIntegerField`"
msgstr ":class:`PositiveBigIntegerField`"

msgid ":class:`PositiveIntegerField`"
msgstr ":class:`PositiveIntegerField`"

msgid ":class:`PositiveSmallIntegerField`"
msgstr ":class:`PositiveSmallIntegerField`"

msgid ":class:`SlugField`"
msgstr ":class:`SlugField`"

msgid ":class:`~django.forms.SlugField`"
msgstr ":class:`~django.forms.SlugField`"

msgid ":class:`SmallAutoField`"
msgstr ":class:`SmallAutoField`"

msgid ":class:`SmallIntegerField`"
msgstr ":class:`SmallIntegerField`"

msgid ":class:`TextField`"
msgstr ":class:`TextField`"

msgid ":class:`~django.forms.CharField` with ``widget=forms.Textarea``"
msgstr ":class:`~django.forms.CharField` で ``widget=forms.Textarea`` です。"

msgid ":class:`TimeField`"
msgstr ":class:`TimeField`"

msgid ":class:`~django.forms.TimeField`"
msgstr ":class:`~django.forms.TimeField`"

msgid ":class:`URLField`"
msgstr ":class:`URLField`"

msgid ":class:`~django.forms.URLField`"
msgstr ":class:`~django.forms.URLField`"

msgid ":class:`UUIDField`"
msgstr ":class:`UUIDField`"

msgid ":class:`~django.forms.UUIDField`"
msgstr ":class:`~django.forms.UUIDField`"

msgid ""
"As you might expect, the ``ForeignKey`` and ``ManyToManyField`` model field "
"types are special cases:"
msgstr ""
"お気付きかもしれませんが、 ``ForeignKey`` と ``ManyToManyField`` の 2 つのモ"
"デルフィールドは特殊なケースとなります:"

msgid ""
"``ForeignKey`` is represented by ``django.forms.ModelChoiceField``, which is "
"a ``ChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""
"``ForeignKey`` は ``django.forms.ModelChoiceField`` によって表現され、モデル"
"の ``QuerySet`` を選択肢として持つ ``ChoiceField`` です。"

msgid ""
"``ManyToManyField`` is represented by ``django.forms."
"ModelMultipleChoiceField``, which is a ``MultipleChoiceField`` whose choices "
"are a model ``QuerySet``."
msgstr ""
"``ManyToManyField`` は ``django.forms.ModelMultipleChoiceField`` によって表現"
"され、モデルの ``QuerySet`` を選択肢として持つ ``MultipleChoiceField`` です。"

msgid "In addition, each generated form field has attributes set as follows:"
msgstr ""
"加えて、生成されたフォームフィールドはそれぞれ以下の通り属性がセットされます:"

msgid ""
"If the model field has ``blank=True``, then ``required`` is set to ``False`` "
"on the form field. Otherwise, ``required=True``."
msgstr ""
"モデルフィールドに ``blank=True`` が設定されている場合、フォームフィールド上"
"で ``required`` が ``False`` にセットされます。それ以外の場合は "
"``required=True`` となります。"

msgid ""
"The form field's ``label`` is set to the ``verbose_name`` of the model "
"field, with the first character capitalized."
msgstr ""
"フォームフィールドの ``label`` はモデルフィールドの ``verbose_name`` の最初の"
"文字を大文字にしたものがセットされます。"

msgid ""
"The form field's ``help_text`` is set to the ``help_text`` of the model "
"field."
msgstr ""
"フォームフィールドの ``help_text`` はモデルフィールドの ``help_text`` がセッ"
"トされます。"

msgid ""
"If the model field has ``choices`` set, then the form field's ``widget`` "
"will be set to ``Select``, with choices coming from the model field's "
"``choices``. The choices will normally include the blank choice which is "
"selected by default. If the field is required, this forces the user to make "
"a selection. The blank choice will not be included if the model field has "
"``blank=False`` and an explicit ``default`` value (the ``default`` value "
"will be initially selected instead)."
msgstr ""
"モデルフィールドに ``choices`` が設定されている場合、フォームフィールドの "
"``widget`` は ``Select`` にセットされ、選択肢にはモデルフィールドの "
"``choices`` が使われます。通常、選択肢には空欄の選択肢が追加され、デフォルト"
"で選択されることになります。フィールドが required の場合、ユーザは選択肢を選"
"ぶ必要があります。モデルフィールドに ``blank=False`` および明示的な "
"``default`` 値が設定されている場合、空欄の選択肢は表示されません (代わりに "
"``default`` 値が選択された状態で表示されます) 。"

msgid ""
"Finally, note that you can override the form field used for a given model "
"field. See `Overriding the default fields`_ below."
msgstr ""
"与えられたモデルフィールドに対して使われるフォームフィールドをオーバーライド"
"することもできます。後述の `Overriding the default fields`_ を参照してくださ"
"い。"

msgid "Consider this set of models::"
msgstr "以下のような一連のモデルを考えていきましょう::"

msgid ""
"With these models, the ``ModelForm`` subclasses above would be roughly "
"equivalent to this (the only difference being the ``save()`` method, which "
"we'll discuss in a moment.)::"
msgstr ""
"これらのモデルでは、上記の ``ModelForm`` サブクラスはおおむね以下と同等と言え"
"ます (唯一の違いは ``save()`` メソッドで、これからすぐ説明します)::"

msgid "Validation on a ``ModelForm``"
msgstr "``ModelForm`` の検証 (バリデーション)"

msgid "There are two main steps involved in validating a ``ModelForm``:"
msgstr "``ModelForm`` のバリデーションには、以下の 2 つのステップが存在します:"

msgid ":doc:`Validating the form </ref/forms/validation>`"
msgstr ":doc:`フォームのバリデーションを実施する </ref/forms/validation>`"

msgid ":ref:`Validating the model instance <validating-objects>`"
msgstr ""
":ref:`モデルのインスタンスのバリデーションを実施する <validating-objects>`"

msgid ""
"Just like normal form validation, model form validation is triggered "
"implicitly when calling :meth:`~django.forms.Form.is_valid()` or accessing "
"the :attr:`~django.forms.Form.errors` attribute and explicitly when calling "
"``full_clean()``, although you will typically not use the latter method in "
"practice."
msgstr ""
"通常のフォームのバリデーションと同じように、モデルフォームのバリデーション"
"は :meth:`~django.forms.Form.is_valid()` が呼ばれたときや :attr:`~django."
"forms.Form.errors` 属性にアクセスしたとき、暗黙的に実行されます。また、実際に"
"はあまり使うメソッドではありませんが、明示的に ``full_clean()`` を呼んだとき"
"にもバリデーションが実行されます。"

msgid ""
"``Model`` validation (:meth:`Model.full_clean() <django.db.models.Model."
"full_clean()>`) is triggered from within the form validation step, right "
"after the form's ``clean()`` method is called."
msgstr ""
"``Model`` バリデーション (:meth:`Model.full_clean() <django.db.models.Model."
"full_clean()>`) は、フォームバリデーションのステップ内でフォームの "
"``clean()`` メソッドが呼ばれたすぐ直後に実行されます。"

msgid ""
"The cleaning process modifies the model instance passed to the ``ModelForm`` "
"constructor in various ways. For instance, any date fields on the model are "
"converted into actual date objects. Failed validation may leave the "
"underlying model instance in an inconsistent state and therefore it's not "
"recommended to reuse it."
msgstr ""
"クリーニングのプロセスは、様々な方法で ``ModelForm`` コンストラクタに渡された"
"モデルのインスタンスを修正します。例えば、モデル上のあらゆる日付フィールド"
"は、実際の date オブジェクトに変換されます。失敗したバリデーションは、一貫性"
"のない状態でモデルインスタンスを元のままにしておくため、これを再利用するのは"
"お勧めできません。"

msgid "Overriding the ``clean()`` method"
msgstr "``clean()`` メソッドをオーバーライドする"

msgid ""
"You can override the ``clean()`` method on a model form to provide "
"additional validation in the same way you can on a normal form."
msgstr ""
"通常のフォームと同じ方法でモデルフォーム上の ``clean()`` メソッドをオーバーラ"
"イドして、バリデーションの動作を追加できます。"

msgid ""
"A model form instance attached to a model object will contain an "
"``instance`` attribute that gives its methods access to that specific model "
"instance."
msgstr ""
"モデルのオブジェクトに付属したモデルフォームのインスタンスは、``instance`` 属"
"性を持ち、メソッドが特定のモデルのインスタンスにアクセスできるようにします。"

msgid ""
"The ``ModelForm.clean()`` method sets a flag that makes the :ref:`model "
"validation <validating-objects>` step validate the uniqueness of model "
"fields that are marked as ``unique``, ``unique_together`` or "
"``unique_for_date|month|year``."
msgstr ""
"``ModelForm.clean()`` メソッドは、:ref:`モデルバリデーション <validating-"
"objects>` に、``unique``、``unique_together`` または ``unique_for_date|month|"
"year`` としてマークされたモデルフィールドの一意性を検証させます。"

msgid ""
"If you would like to override the ``clean()`` method and maintain this "
"validation, you must call the parent class's ``clean()`` method."
msgstr ""
"``clean()`` メソッドをオーバーライドして、なおかつこのバリデーションを維持し"
"たい場合、親クラスの ``clean()`` メソッドを呼ぶ必要があります。"

msgid "Interaction with model validation"
msgstr "モデルバリデーションとのやり取り"

msgid ""
"As part of the validation process, ``ModelForm`` will call the ``clean()`` "
"method of each field on your model that has a corresponding field on your "
"form. If you have excluded any model fields, validation will not be run on "
"those fields. See the :doc:`form validation </ref/forms/validation>` "
"documentation for more on how field cleaning and validation work."
msgstr ""
"バリデーションプロセスの一部として、``ModelForm`` フォーム上で対応するフィー"
"ルドを持つモデルのそれぞれのフィールドの ``clean()`` メソッドを呼び出します。"
"モデルフィールドを除外した場合、これらのフィールドに対してはバリデーションが"
"実行されません。フィールドのクリーニングとバリデーションの詳しい働き方につい"
"ては、:doc:`フォームバリデーション </ref/forms/validation>` ドキュメントを参"
"照してください。"

msgid ""
"The model's ``clean()`` method will be called before any uniqueness checks "
"are made. See :ref:`Validating objects <validating-objects>` for more "
"information on the model's ``clean()`` hook."
msgstr ""
"モデルの ``clean()`` メソッドは一意性のチェックがされる前に呼び出されます。モ"
"デルの ``clean()`` フックのより詳しい情報については、:ref:`オブジェクトのバリ"
"デーションを行う <validating-objects>` を参照してください。"

msgid "Considerations regarding model's ``error_messages``"
msgstr "モデルの ``error_messages`` のレンダリングを考える"

msgid ""
"Error messages defined at the :attr:`form field <django.forms.Field."
"error_messages>` level or at the :ref:`form Meta <modelforms-overriding-"
"default-fields>` level always take precedence over the error messages "
"defined at the :attr:`model field <django.db.models.Field.error_messages>` "
"level."
msgstr ""
":attr:`フォームフィールド <django.forms.Field.error_messages>` や :ref:`"
"フォーム Meta <modelforms-overriding-default-fields>` のレベルで定義されたエ"
"ラーメッセージは、常に :attr:`モデルフィールド <django.db.models.Field."
"error_messages>` のレベルで定義されたエラーメッセージより優先されます。"

msgid ""
"Error messages  defined on :attr:`model fields <django.db.models.Field."
"error_messages>` are only used when the ``ValidationError`` is raised during "
"the :ref:`model validation <validating-objects>` step and no corresponding "
"error messages are defined at the form level."
msgstr ""
":attr:`モデルフィールド <django.db.models.Field.error_messages>` で定義された"
"エラーメッセージは、:ref:`モデルバリデーション <validating-objects>` のステッ"
"プの間に ``ValidationError`` が発生したときに、対応するエラーメッセージが"
"フォームのレベルで定義されていない場合にのみ使用されます。"

msgid ""
"You can override the error messages from ``NON_FIELD_ERRORS`` raised by "
"model validation by adding the :data:`~django.core.exceptions."
"NON_FIELD_ERRORS` key to the ``error_messages`` dictionary of the "
"``ModelForm``’s inner ``Meta`` class::"
msgstr ""
":data:`~django.core.exceptions.NON_FIELD_ERRORS` キーを ``Meta`` クラス内の "
"``error_messages`` ディクショナリに追加することで、モデルバリデーションによっ"
"て発生する ``NON_FIELD_ERRORS`` に対するエラーメッセージをオーバーライドでき"
"ます。 ::"

msgid "The ``save()`` method"
msgstr "``save()`` メソッド"

msgid ""
"Every ``ModelForm`` also has a ``save()`` method. This method creates and "
"saves a database object from the data bound to the form. A subclass of "
"``ModelForm`` can accept an existing model instance as the keyword argument "
"``instance``; if this is supplied, ``save()`` will update that instance. If "
"it's not supplied, ``save()`` will create a new instance of the specified "
"model:"
msgstr ""
"全ての ``ModelForm`` は ``save()`` メソッドも持っています。このメソッドは、"
"フォームに結びつけられたデータからデータベースオブジェクトを生成して保存しま"
"す。``ModelForm`` のサブクラスはキーワード引数 ``instance`` として既存のモデ"
"ルインスタンスを受け取ることができます; これが指定されると、``save()`` はその"
"インスタンスを更新するようになります。 指定されない場合は、``save()`` は指定"
"されたモデルの新しいインスタンスを生成します:"

msgid ""
"Note that if the form :ref:`hasn't been validated <validation-on-"
"modelform>`, calling ``save()`` will do so by checking ``form.errors``. A "
"``ValueError`` will be raised if the data in the form doesn't validate -- i."
"e., if ``form.errors`` evaluates to ``True``."
msgstr ""
"フォームが :ref:`バリデーションされていない <validation-on-modelform>` 場合、"
"``save()`` を呼び出すと、``form.errors`` をチェックすることでこれを行います。"
"フォーム内のデータが適正ではない場合は ``ValueError`` が発生します -- 例え"
"ば、``form.errors`` が ``True`` だと評価された場合です。"

msgid ""
"If an optional field doesn't appear in the form's data, the resulting model "
"instance uses the model field :attr:`~django.db.models.Field.default`, if "
"there is one, for that field. This behavior doesn't apply to fields that "
"use :class:`~django.forms.CheckboxInput`, :class:`~django.forms."
"CheckboxSelectMultiple`, or :class:`~django.forms.SelectMultiple` (or any "
"custom widget whose :meth:`~django.forms.Widget.value_omitted_from_data` "
"method always returns ``False``) since an unchecked checkbox and unselected "
"``<select multiple>`` don't appear in the data of an HTML form submission. "
"Use a custom form field or widget if you're designing an API and want the "
"default fallback behavior for a field that uses one of these widgets."
msgstr ""
"オプションのフィールドがフォームのデータに表示されない場合、結果のモデルイン"
"スタンスはモデルフィールドの :attr:`~django.db.models.Field.default` を使用し"
"ます。この動作は、 :class:`~django.forms.CheckboxInput`, :class:`~django."
"forms.CheckboxSelectMultiple`, または :class:`~django.forms.SelectMultiple` "
"(または :meth:`~django.forms.Widget.value_omitted_from_data` メソッドが常に "
"``False`` を返すカスタムウィジェット) を使用するフィールドには適用されませ"
"ん。チェックされていないチェックボックスと、選択されていない ``<select "
"multiple>`` は HTML フォーム送信のデータには表示されないからです。 API を設計"
"していて、これらのウィジェットを使用するフィールドのデフォルトのフォールバッ"
"ク動作が必要な場合は、カスタムフォームフィールドまたはウィジェットを使用しま"
"す。"

msgid ""
"This ``save()`` method accepts an optional ``commit`` keyword argument, "
"which accepts either ``True`` or ``False``. If you call ``save()`` with "
"``commit=False``, then it will return an object that hasn't yet been saved "
"to the database. In this case, it's up to you to call ``save()`` on the "
"resulting model instance. This is useful if you want to do custom processing "
"on the object before saving it, or if you want to use one of the "
"specialized :ref:`model saving options <ref-models-force-insert>`. "
"``commit`` is ``True`` by default."
msgstr ""
"この ``save()`` には、省略可能な ``commit`` キーワード引数があり、``True`` な"
"いし ``False`` を取ります。``save()`` を ``commit=False`` で呼び出した場合、"
"データベースにまだ保存されていないオブジェクトを返します。この場合、結果のモ"
"デルインスタンスで ``save()`` を呼び出すかどうかはあなた次第です。これは、保"
"存前にオブジェクトで独自のプロセスを実行したい場合、もしくは特別な :ref:`モデ"
"ル保存オプション <ref-models-force-insert>` を使いたい場合に有用です。 "
"``commit`` はデフォルトでは ``True`` です。"

msgid ""
"Another side effect of using ``commit=False`` is seen when your model has a "
"many-to-many relation with another model. If your model has a many-to-many "
"relation and you specify ``commit=False`` when you save a form, Django "
"cannot immediately save the form data for the many-to-many relation. This is "
"because it isn't possible to save many-to-many data for an instance until "
"the instance exists in the database."
msgstr ""
"``commit=False`` を使う際のもう 1 つの副作用は、モデルに他のモデルとの多対多"
"の関係がある場合に見られます。フォームを save するときにモデルに多対多の関係"
"があり ``commit=False`` を指定した場合、Django は多対多の関係に対してフォーム"
"のデータを即座に保存することができません。これは、インスタンスがデータベース"
"上に存在するようになるまで、インスタンスに対して多対多のデータを保存すること"
"が不可能だからです。"

msgid ""
"To work around this problem, every time you save a form using "
"``commit=False``, Django adds a ``save_m2m()`` method to your ``ModelForm`` "
"subclass. After you've manually saved the instance produced by the form, you "
"can invoke ``save_m2m()`` to save the many-to-many form data. For example:"
msgstr ""
"この問題を扱うために、``commit=False`` を使ったフォームを save するたびに、"
"Django は ``save_m2m()`` メソッドをあなたの ``ModelForm`` サブクラスに追加し"
"ます。フォームによって生成されたインスタンスを手動で save した後に、多対多の"
"フォームデータを保存するには ``save_m2m()`` を実行します。例えば:"

msgid ""
"Calling ``save_m2m()`` is only required if you use ``save(commit=False)``. "
"When you use a ``save()`` on a form, all data -- including many-to-many data "
"-- is saved without the need for any additional method calls.  For example:"
msgstr ""
"``save_m2m()`` を呼び出す必要があるのは ``save(commit=False)`` を使ったときだ"
"けです。フォーム上で ``save()`` を使用すると、多対多のデータを含むすべての"
"データが保存されます。 たとえば:"

msgid ""
"Other than the ``save()`` and ``save_m2m()`` methods, a ``ModelForm`` works "
"exactly the same way as any other ``forms`` form. For example, the "
"``is_valid()`` method is used to check for validity, the ``is_multipart()`` "
"method is used to determine whether a form requires multipart file upload "
"(and hence whether ``request.FILES`` must be passed to the form), etc. See :"
"ref:`binding-uploaded-files` for more information."
msgstr ""
"``save()`` と ``save_m2m()`` メソッドのほかは、``ModelForm`` は ``forms`` の"
"フォームとまったく同じ方法で動作します。例えば、``is_valid()`` メソッドは妥当"
"性をチェックするために使用される、``is_multipart()`` メソッドはフォームがマル"
"チパートのファイルアップロードを必要とするかどうかを (ゆえに ``request."
"FILES`` がフォームに渡される必要があるかどうかも) 決める、などです。詳しく"
"は :ref:`binding-uploaded-files` を参照してください。"

msgid "Selecting the fields to use"
msgstr "使うフィールドを選択する"

msgid ""
"It is strongly recommended that you explicitly set all fields that should be "
"edited in the form using the ``fields`` attribute. Failure to do so can "
"easily lead to security problems when a form unexpectedly allows a user to "
"set certain fields, especially when new fields are added to a model. "
"Depending on how the form is rendered, the problem may not even be visible "
"on the web page."
msgstr ""
"``fields`` 属性を使って、フォームで編集すべき全てのフィールドを明示的に指定す"
"ることを強くお勧めします。そうしないと、フォームで予期せず特定のフィールドを"
"設定できるようになり、セキュリティ上の問題が発生しやすくなります。特に新しい"
"フィールドがモデルに追加されたときに起こりがちです。フォームのレンダリング方"
"法によっては、Webページで問題が目に見えないことさえあります。"

msgid ""
"The alternative approach would be to include all fields automatically, or "
"remove only some. This fundamental approach is known to be much less secure "
"and has led to serious exploits on major websites (e.g. `GitHub <https://"
"github.blog/2012-03-04-public-key-security-vulnerability-and-mitigation/>`_)."
msgstr ""
"別のアプローチとしては、すべてのフィールドを自動的に含めるか、一部のフィール"
"ドだけを削除する方法があります。この基本的なアプローチは安全性がかなり低いこ"
"とが知られており、主要なウェブサイトで深刻な悪用が行われています (`GitHub "
"<https://github.blog/2012-03-04-public-key-security-vulnerability-and-"
"mitigation/>`_ など)。"

msgid ""
"There are, however, two shortcuts available for cases where you can "
"guarantee these security concerns do not apply to you:"
msgstr ""
"しかし、これらのセキュリティ上の懸念があなたに当てはまらないと保証できる場合"
"には、2 つのショートカットが利用可能です:"

msgid ""
"Set the ``fields`` attribute to the special value ``'__all__'`` to indicate "
"that all fields in the model should be used. For example::"
msgstr ""
"``fields`` 属性に、特殊な値 ``'__all__'`` をセットして、モデル内の全ての"
"フィールドが使われるように指定します。例えば::"

msgid ""
"Set the ``exclude`` attribute of the ``ModelForm``’s inner ``Meta`` class to "
"a list of fields to be excluded from the form."
msgstr ""
"``ModelForm`` の中の ``Meta`` クラスの ``exclude`` 属性に、フォームから除外さ"
"れるフィールドのリストをセットします。"

msgid ""
"Since the ``Author`` model has the 3 fields ``name``, ``title`` and "
"``birth_date``, this will result in the fields ``name`` and ``birth_date`` "
"being present on the form."
msgstr ""
"``Author`` モデルは 3 つのフィールド ``name``、``title``、``birth_date`` を"
"持っているため、これで ``name`` と ``birth_date`` がフォームに表示されること"
"になります。"

msgid ""
"If either of these are used, the order the fields appear in the form will be "
"the order the fields are defined in the model, with ``ManyToManyField`` "
"instances appearing last."
msgstr ""
"このどちらかが使われた場合、フォーム内で表示されるフィールドの順番はモデル内"
"でフィールドが定義された順番となり、``ManyToManyField`` インスタンスは最後に"
"表示されます。"

msgid ""
"In addition, Django applies the following rule: if you set "
"``editable=False`` on the model field, *any* form created from the model via "
"``ModelForm`` will not include that field."
msgstr ""
"加えて、Django は以下のルールも適用します: モデルフィールドで "
"``editable=False`` をセットした場合、``ModelForm`` を通じて生成された *全ての"
"* フォームはそのフィールドを含みません。"

msgid ""
"Any fields not included in a form by the above logic will not be set by the "
"form's ``save()`` method. Also, if you manually add the excluded fields back "
"to the form, they will not be initialized from the model instance."
msgstr ""
"上記のロジックでフォームに含まれない全てのフィールドは、フォームの "
"``save()`` メソッドでセットされません。また、除外したフィールドを手動でフォー"
"ムに追加し直した場合、モデルインスタンスから初期化されることはありません。"

msgid ""
"Django will prevent any attempt to save an incomplete model, so if the model "
"does not allow the missing fields to be empty, and does not provide a "
"default value for the missing fields, any attempt to ``save()`` a "
"``ModelForm`` with missing fields will fail.  To avoid this failure, you "
"must instantiate your model with initial values for the missing, but "
"required fields::"
msgstr ""
"Django は不完全なモデルを保存しないようにするため、モデルの設定でフィールドを"
"空にすることを許容しておらず、かつ除外されたフィールドに対するデフォルト値を"
"指定しなかった場合、除外されたフィールドを含む ``ModelForm`` を ``save()`` し"
"ようとすると失敗します。この失敗を避けるには、除外する必須フィールドに初期値"
"を指定してモデルをインスタンス化する必要があります::"

msgid ""
"Alternatively, you can use ``save(commit=False)`` and manually set any extra "
"required fields::"
msgstr ""
"もしくは、``save(commit=False)`` を使って手動で追加の必須フィールドをセットで"
"きます::"

msgid ""
"See the `section on saving forms`_ for more details on using "
"``save(commit=False)``."
msgstr ""
"``save(commit=False)`` の使用について、詳しくは `section on saving forms`_ を"
"参照してください。"

msgid "Overriding the default fields"
msgstr "デフォルトのフィールドをオーバライドする"

msgid ""
"The default field types, as described in the `Field types`_ table above, are "
"sensible defaults. If you have a ``DateField`` in your model, chances are "
"you'd want that to be represented as a ``DateField`` in your form. But "
"``ModelForm`` gives you the flexibility of changing the form field for a "
"given model."
msgstr ""
"前述の `Field types`_ テーブルで説明したとおり、デフォルトのフィールドタイプ"
"は実用的なデフォルトです。モデルに ``DateField`` がある場合、フォーム内で "
"``DateField`` として表示したいことでしょう。しかし、``ModelForm`` では、与え"
"られたモデルに足してフォームフィールドを変更する柔軟性があります。"

msgid ""
"To specify a custom widget for a field, use the ``widgets`` attribute of the "
"inner ``Meta`` class. This should be a dictionary mapping field names to "
"widget classes or instances."
msgstr ""
"フィールドに対して独自のウィジェットを指定するには、内部の ``Meta`` クラスの "
"``widgets`` を使用してください。これは、フィールド名としジェットのクラスやイ"
"ンスタンスをマッピングするディクショナリです。"

msgid ""
"For example, if you want the ``CharField`` for the ``name`` attribute of "
"``Author`` to be represented by a ``<textarea>`` instead of its default "
"``<input type=\"text\">``, you can override the field's widget::"
msgstr ""
"例えば、``Authoer`` の ``name`` 属性に対する ``CharField`` を、デフォルトの "
"``<input type=\"text\">`` の代わりに ``<textarea>`` で表示したい場合、フィー"
"ルドのウィジェットをオーバーライドします:"

msgid ""
"The ``widgets`` dictionary accepts either widget instances (e.g., "
"``Textarea(...)``) or classes (e.g., ``Textarea``). Note that the "
"``widgets`` dictionary is ignored for a model field with a non-empty "
"``choices`` attribute. In this case, you must override the form field to use "
"a different widget."
msgstr ""
"``widgets`` 辞書はウィジェットのインスタンス（例: ``Textarea(...)`` ）または"
"クラス（例: ``Textarea``）を受け付けます。空でない ``choices`` 属性を持つモデ"
"ルフィールドでは ``widgets`` 辞書は無視されることに注意してください。この場"
"合、フォームフィールドをオーバーライドして別のウィジェットを使用する必要があ"
"ります。"

msgid ""
"Similarly, you can specify the ``labels``, ``help_texts`` and "
"``error_messages`` attributes of the inner ``Meta`` class if you want to "
"further customize a field."
msgstr ""
"同様に、フィールドをさらにカスタマイズしたい場合、内部の ``Meta`` クラスの "
"``labels``、``help_texts``、``error_messages`` と言った属性を指定できます。"

msgid ""
"For example if you wanted to customize the wording of all user facing "
"strings for the ``name`` field::"
msgstr ""
"例えば、``name`` フィールドに対する文字列に直面する全てのユーザの文章をカスタ"
"マイズしたい場合::"

msgid ""
"You can also specify ``field_classes`` or ``formfield_callback`` to "
"customize the type of fields instantiated by the form."
msgstr ""
"また、 ``field_classes`` や ``formfield_callback`` を指定して、フォームがイン"
"スタンス化するフィールドのタイプをカスタマイズすることもできます。"

msgid ""
"For example, if you wanted to use ``MySlugFormField`` for the ``slug`` "
"field, you could do the following::"
msgstr ""
"例えば、``slug`` フィールドに対して ``MySlugFormField`` を使いたい場合、以下"
"のようにできます::"

msgid "or::"
msgstr "もしくは::"

msgid ""
"Finally, if you want complete control over of a field -- including its type, "
"validators, required, etc. -- you can do this by declaratively specifying "
"fields like you would in a regular ``Form``."
msgstr ""
"最後に、フィールドを完全に -- タイプ、バリデータ、必須かどうかなどを含めて "
"-- コントロールしたい場合、通常の ``Form`` で行うのと同じようにフィールドを宣"
"言的に指定することで実現できます。"

msgid ""
"If you want to specify a field's validators, you can do so by defining the "
"field declaratively and setting its ``validators`` parameter::"
msgstr ""
"フィールドのバリデータを指定したい場合、フィールドを宣言的に定義して "
"``validators`` パラメータを設定することで実現できます::"

msgid ""
"When you explicitly instantiate a form field like this, it is important to "
"understand how ``ModelForm`` and regular ``Form`` are related."
msgstr ""
"以下のように明示的にフォームフィールドをインスタンス化したとき、"
"``ModelForm`` と 通常の ``Form`` が連動する方法を理解することが重要となりま"
"す。"

msgid ""
"``ModelForm`` is a regular ``Form`` which can automatically generate certain "
"fields. The fields that are automatically generated depend on the content of "
"the ``Meta`` class and on which fields have already been defined "
"declaratively. Basically, ``ModelForm`` will **only** generate fields that "
"are **missing** from the form, or in other words, fields that weren't "
"defined declaratively."
msgstr ""
"``ModelForm`` は、特定のフィールドを自動的に生成できる通常の ``Form`` です。"
"自動的に生成されるフィールドは、``Meta`` クラスの内容とどのフィールドが宣言的"
"に定義されているかに依存します。基本的に、``ModelForm`` は フォームから **除"
"外された** フィールド、言い換えると宣言的に定義されなかったフィールド **のみ"
"** を生成します。"

msgid ""
"Fields defined declaratively are left as-is, therefore any customizations "
"made to ``Meta`` attributes such as ``widgets``, ``labels``, ``help_texts``, "
"or ``error_messages`` are ignored; these only apply to fields that are "
"generated automatically."
msgstr ""
"宣言的に定義されたフィールドはそのままになります。したがって、``Meta`` 属性に"
"対するカスタマイズ、例えば ``widgets``、``labels``、``help_texts``、"
"``error_messages`` は無視されます; これらは自動的に生成されたフィールドにのみ"
"適用されます。"

msgid ""
"Similarly, fields defined declaratively do not draw their attributes like "
"``max_length`` or ``required`` from the corresponding model. If you want to "
"maintain the behavior specified in the model, you must set the relevant "
"arguments explicitly when declaring the form field."
msgstr ""
"同様に、宣言的に定義されたフィールドは、対応するモデルから引き継がれた "
"``max_length`` や ``required`` のような属性を描画しません。モデル内で定義され"
"た動作を引き継ぎたい場合は、フォームフィールドを宣言する際に明示的に関連する"
"属性をセットする必要があります。"

msgid "For example, if the ``Article`` model looks like this::"
msgstr "例えば、``Article`` モデルは以下のようになります::"

msgid ""
"and you want to do some custom validation for ``headline``, while keeping "
"the ``blank`` and ``help_text`` values as specified, you might define "
"``ArticleForm`` like this::"
msgstr ""
"そして、指定されたとおりに ``blank`` と ``help_text`` が維持されている一方"
"で、``headline`` に対して独自のバリデーションを実施するために、"
"``ArticleForm`` を以下のように定義します::"

msgid ""
"You must ensure that the type of the form field can be used to set the "
"contents of the corresponding model field. When they are not compatible, you "
"will get a ``ValueError`` as no implicit conversion takes place."
msgstr ""
"フォームフィールドのタイプを使用して、対応するモデルフィールドの内容を設定で"
"きることを確認する必要があります。 互換性がない場合、暗黙的な変換が行われない"
"ので、 \"ValueError\" を取得します。"

msgid ""
"See the :doc:`form field documentation </ref/forms/fields>` for more "
"information on fields and their arguments."
msgstr ""
"フィールドとその属性について、詳しくは :doc:`フォームフィールドのドキュメン"
"テーション </ref/forms/fields>` を参照してください。"

msgid "The ``Meta.formfield_callback`` attribute was added."
msgstr "``Meta.formfield_callback`` 属性が追加されました。"

msgid "Enabling localization of fields"
msgstr "フィールドのローカライズを有効にする"

msgid ""
"By default, the fields in a ``ModelForm`` will not localize their data. To "
"enable localization for fields, you can use the ``localized_fields`` "
"attribute on the ``Meta`` class."
msgstr ""
"デフォルトでは、``ModelForm`` 内のフィールドはデータをローカライズしません。"
"フィールドのデータをローカライズするには、``Meta`` クラスの "
"``localized_fields`` 属性が使用できます。"

msgid ""
"If ``localized_fields`` is set to the special value ``'__all__'``, all "
"fields will be localized."
msgstr ""
"``localized_fields`` が特殊な値 ``'__all__'`` にセットされた場合、全ての"
"フィールドがローカライズされます。"

msgid "Form inheritance"
msgstr "フォームの継承"

msgid ""
"As with basic forms, you can extend and reuse ``ModelForms`` by inheriting "
"them. This is useful if you need to declare extra fields or extra methods on "
"a parent class for use in a number of forms derived from models. For "
"example, using the previous ``ArticleForm`` class:"
msgstr ""
"基本的なフォームと同様に、 ``ModelForms`` を継承して拡張したり再利用したりす"
"ることができます。これは、モデルから派生した多くのフォームで使用するために、"
"親クラスに追加フィールドや追加メソッドを宣言する必要がある場合に便利です。た"
"とえば、以前の ``ArticleForm`` クラスを使います:"

msgid ""
"This creates a form that behaves identically to ``ArticleForm``, except "
"there's some extra validation and cleaning for the ``pub_date`` field."
msgstr ""
"これは ``ArticleForm`` と同じように動作するフォームを作成しますが、"
"``pub_date`` フィールドのバリデーションとクリーニングが追加されます。"

msgid ""
"You can also subclass the parent's ``Meta`` inner class if you want to "
"change the ``Meta.fields`` or ``Meta.exclude`` lists:"
msgstr ""
"``Meta.fields`` や ``Meta.exclude`` のリストを変更したい場合は、親の "
"``Meta`` インナークラスをサブクラス化することもできます:"

msgid ""
"This adds the extra method from the ``EnhancedArticleForm`` and modifies the "
"original ``ArticleForm.Meta`` to remove one field."
msgstr ""
"これは ``EnhancedArticleForm`` からの追加メソッドを追加し、1つのフィールドを"
"削除するようにオリジナルの ``ArticleForm.Meta`` を修正します。"

msgid "There are a couple of things to note, however."
msgstr "ただ、注意すべき点がいくつかあります。"

msgid ""
"Normal Python name resolution rules apply. If you have multiple base classes "
"that declare a ``Meta`` inner class, only the first one will be used. This "
"means the child's ``Meta``, if it exists, otherwise the ``Meta`` of the "
"first parent, etc."
msgstr ""
"通常の Python の名前解決ルールが適用されます。内部クラス ``Meta`` を宣言して"
"いる基底クラスが複数ある場合、最初のものだけが使用されます。つまり、子クラス"
"の ``Meta`` が存在する場合はそれが使用され、そうでない場合は最初の親の "
"``Meta`` などが使用されます。"

msgid ""
"It's possible to inherit from both ``Form`` and ``ModelForm`` "
"simultaneously, however, you must ensure that ``ModelForm`` appears first in "
"the MRO. This is because these classes rely on different metaclasses and a "
"class can only have one metaclass."
msgstr ""
"``Form`` と ``ModelForm`` の両方から同時に継承することは可能ですが、必ず "
"``ModelForm`` が MRO (Method Resolution Order) の中で最初に現れるようにする必"
"要があります。なぜなら、これらのクラスは異なるメタクラスに依存しており、一つ"
"のクラスは一つのメタクラスしか持つことができないからです。"

msgid ""
"It's possible to declaratively remove a ``Field`` inherited from a parent "
"class by setting the name to be ``None`` on the subclass."
msgstr ""
"親クラスから継承した ``Field`` を宣言的に削除するには、サブクラスで名前を "
"``None`` に設定します。"

msgid ""
"You can only use this technique to opt out from a field defined "
"declaratively by a parent class; it won't prevent the ``ModelForm`` "
"metaclass from generating a default field. To opt-out from default fields, "
"see :ref:`modelforms-selecting-fields`."
msgstr ""
"このテクニックを使用できるのは、親クラスによって宣言的に定義されたフィールド"
"からオプトアウトする場合のみです。 ``ModelForm`` メタクラスがデフォルトフィー"
"ルドを生成するのを防ぐことはできません。デフォルトのフィールドからオプトアウ"
"トするには、 :ref:`modelforms-selecting-fields` を参照してください。"

msgid "Providing initial values"
msgstr "初期値を指定する"

msgid ""
"As with regular forms, it's possible to specify initial data for forms by "
"specifying an ``initial`` parameter when instantiating the form. Initial "
"values provided this way will override both initial values from the form "
"field and values from an attached model instance. For example:"
msgstr ""
"通常のフォームと同様に、フォームのインスタンスを作成する際に ``initial`` パラ"
"メータを指定することで、フォームの初期データを指定できます。この方法で指定さ"
"れた初期値は、フォームフィールドからの初期値と、アタッチされたモデルインスタ"
"ンスからの値の両方を上書きします。たとえば、下記のようにします:"

msgid "ModelForm factory function"
msgstr "ModelForm factory 関数"

msgid ""
"You can create forms from a given model using the standalone function :func:"
"`~django.forms.models.modelform_factory`, instead of using a class "
"definition. This may be more convenient if you do not have many "
"customizations to make:"
msgstr ""
"クラス定義ではなく、スタンドアロン関数 :func:`~django.forms.models."
"modelform_factory` を使って、与えられたモデルからフォームを作成することもでき"
"ます。あまりカスタマイズをしないなら、こちらの方が便利でしょう:"

msgid ""
"This can also be used to make modifications to existing forms, for example "
"by specifying the widgets to be used for a given field:"
msgstr ""
"これは既存のフォームを修正するためにも使用できます。たとえば、指定された"
"フィールドに使用するウィジェットを指定できます:"

msgid ""
"The fields to include can be specified using the ``fields`` and ``exclude`` "
"keyword arguments, or the corresponding attributes on the ``ModelForm`` "
"inner ``Meta`` class. Please see the ``ModelForm`` :ref:`modelforms-"
"selecting-fields` documentation."
msgstr ""
"含むフィールドは ``fields`` や ``exclude`` のキーワード引数、もしくは "
"``ModelForm`` 内部の ``Meta`` クラスの対応する属性を使って指定できます。"
"``ModelForm`` :ref:`modelforms-selecting-fields` ドキュメントを参照してくださ"
"い。"

msgid "... or enable localization for specific fields:"
msgstr "... 特定のフィールドのローカライズを有効にすることもできます:"

msgid "Model formsets"
msgstr "モデルのフォームセット"

msgid ""
"Like :doc:`regular formsets </topics/forms/formsets>`, Django provides a "
"couple of enhanced formset classes to make working with Django models more "
"convenient. Let's reuse the ``Author`` model from above:"
msgstr ""
":doc:`通常のフォームセット </topics/forms/formsets>` のように、 Django は "
"Django モデルでの作業をより便利にするために、いくつかの拡張 フォームセットク"
"ラスを提供しています。上の ``Author`` モデルを再利用してみましょう:"

msgid ""
"Using ``fields`` restricts the formset to use only the given fields. "
"Alternatively, you can take an \"opt-out\" approach, specifying which fields "
"to exclude:"
msgstr ""
"``fields`` を使用すると、フォームセットが指定されたフィールドだけを使うように"
"制限されます。または、除外するフィールドを指定する \"オプトアウト\" アプロー"
"チをとることもできます:"

msgid ""
"This will create a formset that is capable of working with the data "
"associated with the ``Author`` model. It works just like a regular formset:"
msgstr ""
"これは ``Author`` モデルに関連付けられたデータを扱うことができるフォームセッ"
"トを作成します。通常のフォームセットと同じように動作します:"

msgid ""
":func:`~django.forms.models.modelformset_factory` uses :func:`~django.forms."
"formsets.formset_factory` to generate formsets. This means that a model "
"formset is an extension of a basic formset that knows how to interact with a "
"particular model."
msgstr ""
":func:`~django.forms.models.modelformset_factory` は :func:`~django.forms."
"formsets.formset_factory` を使ってフォームセットを生成します。つまり、モデル"
"のフォームセットは基本フォームセットを拡張したもので、特定のモデルとどのよう"
"に相互作用するかを知っています。"

msgid ""
"When using :ref:`multi-table inheritance <multi-table-inheritance>`, forms "
"generated by a formset factory will contain a parent link field (by default "
"``<parent_model_name>_ptr``) instead of an ``id`` field."
msgstr ""
":ref:`複数テーブルの継承 <multi-table-inheritance>` を使用している場合、"
"フォームセットファクトリによって生成されたフォームは ``id`` フィールドの代わ"
"りに親リンクフィールド (デフォルトでは ``<parent_model_name>_ptr``) を含みま"
"す。"

msgid "Changing the queryset"
msgstr "クエリセットを変更する"

msgid ""
"By default, when you create a formset from a model, the formset will use a "
"queryset that includes all objects in the model (e.g., ``Author.objects."
"all()``). You can override this behavior by using the ``queryset`` argument:"
msgstr ""
"デフォルトでは、モデルからフォームセットを作成する場合、フォームセットはモデ"
"ル内のすべてのオブジェクトを含むクエリセットを使用します (例 ``Author."
"objects.all()``) 。 ``queryset`` 引数を使用することで、この動作をオーバーライ"
"ドできます:"

msgid ""
"Alternatively, you can create a subclass that sets ``self.queryset`` in "
"``__init__``::"
msgstr ""
"もしくは、``__init__`` の中で ``self.queryset`` をセットするサブクラスを作成"
"できます::"

msgid "Then, pass your ``BaseAuthorFormSet`` class to the factory function:"
msgstr "そして、ファクトリ関数に ``BaseAuthorFormSet`` クラスを渡します:"

msgid ""
"If you want to return a formset that doesn't include *any* preexisting "
"instances of the model, you can specify an empty QuerySet:"
msgstr ""
"既存のモデルのインスタンスを *一切* 含まないフォームセットを返したい場合は、"
"空の QuerySet を指定します:"

msgid "Changing the form"
msgstr "フォームを変更する"

msgid ""
"By default, when you use ``modelformset_factory``, a model form will be "
"created using :func:`~django.forms.models.modelform_factory`. Often, it can "
"be useful to specify a custom model form. For example, you can create a "
"custom model form that has custom validation::"
msgstr ""
"デフォルトでは、 ``modelformset_factory`` を使うと、 :func:`~django.forms."
"models.modelform_factory` を使ってモデルフォームが作成されます。多くの場合、"
"カスタムモデルフォームを指定すると便利です。たとえば、カスタムバリデーション"
"を持つカスタムモデルフォームを作成できます:"

msgid "Then, pass your model form to the factory function::"
msgstr "次に、モデルフォームをファクトリ関数に渡します:"

msgid ""
"It is not always necessary to define a custom model form. The "
"``modelformset_factory`` function has several arguments which are passed "
"through to ``modelform_factory``, which are described below."
msgstr ""
"必ずしもカスタムモデルフォームを定義する必要はありません。 "
"``modelformset_factory`` 関数には ``modelform_factory`` に渡されるいくつかの"
"引数があります。以下で説明します。"

msgid "Specifying widgets to use in the form with ``widgets``"
msgstr "``widgets`` を使って、フォームで使用するウィジェットを指定する"

msgid ""
"Using the ``widgets`` parameter, you can specify a dictionary of values to "
"customize the ``ModelForm``’s widget class for a particular field. This "
"works the same way as the ``widgets`` dictionary on the inner ``Meta`` class "
"of a ``ModelForm`` works:"
msgstr ""
"パラメータ ``widgets`` を使うことで、特定のフィールドに対して ``ModelForm`` "
"のウィジェットクラスをカスタマイズするための値の辞書を指定できます。これは "
"``ModelForm`` の内部 ``Meta`` クラスの ``widgets`` 辞書と同じように動作しま"
"す:"

msgid "Enabling localization for fields with ``localized_fields``"
msgstr "``localized_fields`` でフィールドのローカライズを有効にする"

msgid ""
"Using the ``localized_fields`` parameter, you can enable localization for "
"fields in the form."
msgstr ""
"``localized_fields`` パラメータを使って、フォームのフィールドのローカライズを"
"有効にできます。"

msgid ""
"As with regular formsets, it's possible to :ref:`specify initial data "
"<formsets-initial-data>` for forms in the formset by specifying an "
"``initial`` parameter when instantiating the model formset class returned "
"by :func:`~django.forms.models.modelformset_factory`. However, with model "
"formsets, the initial values only apply to extra forms, those that aren't "
"attached to an existing model instance. If the length of ``initial`` exceeds "
"the number of extra forms, the excess initial data is ignored. If the extra "
"forms with initial data aren't changed by the user, they won't be validated "
"or saved."
msgstr ""
"通常のフォームセットと同様に、 :func:`~django.forms.models."
"modelformset_factory` によって返されるモデルフォームセットクラスをインスタン"
"ス化する際に ``initial`` パラメータを指定することで、 :ref:`初期データ "
"<formsets-initial-data>` をフォームセット内のフォームに指定できます。しかし、"
"モデルフォームセットでは、初期値は既存のモデルインスタンスにアタッチされてい"
"ない余分なフォームにだけ適用されます。もし ``initial`` の長さが余分なフォーム"
"の数を超えた場合、余分な初期データは無視されます。初期データを持つ余分な"
"フォームがユーザーによって変更されなかった場合、それらはバリデーションも保存"
"もされません。"

msgid "Saving objects in the formset"
msgstr "フォームセット内のオブジェクトを保存する"

msgid ""
"As with a ``ModelForm``, you can save the data as a model object. This is "
"done with the formset's ``save()`` method:"
msgstr ""
"``ModelForm`` と同様に、データをモデルオブジェクトとして保存できます。これは"
"フォームセットの ``save()`` メソッドで行います:"

msgid ""
"The ``save()`` method returns the instances that have been saved to the "
"database. If a given instance's data didn't change in the bound data, the "
"instance won't be saved to the database and won't be included in the return "
"value (``instances``, in the above example)."
msgstr ""
"``save()`` メソッドはデータベースに保存されたインスタンスを返します。指定した"
"インスタンスのデータがバインドされたデータで変更されなかった場合、そのインス"
"タンスはデータベースに保存されず、戻り値 (上記の例では ``instances``) にも含"
"まれません。"

msgid ""
"When fields are missing from the form (for example because they have been "
"excluded), these fields will not be set by the ``save()`` method. You can "
"find more information about this restriction, which also holds for regular "
"``ModelForms``, in `Selecting the fields to use`_."
msgstr ""
"フォームにフィールドがない場合 (例えば除外されている場合など)、これらのフィー"
"ルドは ``save()`` メソッドではセットされません。通常の ``ModelForms`` にも適"
"用されるこの制限についての詳細は `Selecting the fields to use`_ を参照してく"
"ださい。"

msgid "Pass ``commit=False`` to return the unsaved model instances:"
msgstr "未保存のモデルインスタンスを返すには ``commit=False`` を渡します:"

msgid ""
"This gives you the ability to attach data to the instances before saving "
"them to the database. If your formset contains a ``ManyToManyField``, you'll "
"also need to call ``formset.save_m2m()`` to ensure the many-to-many "
"relationships are saved properly."
msgstr ""
"これにより、データベースに保存する前にインスタンスにデータを付加できます。"
"フォームセットに ``ManyToManyField`` が含まれている場合は、 ``formset."
"save_m2m()`` を呼び出して、多対多のリレーションシップが適切に保存されるように"
"する必要があります。"

msgid ""
"After calling ``save()``, your model formset will have three new attributes "
"containing the formset's changes:"
msgstr ""
"``save()`` を呼び出すと、モデルのフォームセットにはフォームセットの変更を表す"
"3つの新しい属性が追加されます:"

msgid "Limiting the number of editable objects"
msgstr "編集可能なオブジェクトの数を制限する"

msgid ""
"As with regular formsets, you can use the ``max_num`` and ``extra`` "
"parameters to :func:`~django.forms.models.modelformset_factory` to limit the "
"number of extra forms displayed."
msgstr ""
"通常のフォームセットと同様に、 :func:`~django.forms.models."
"modelformset_factory` の ``max_num`` と ``extra`` パラメータを使って、表示さ"
"れる追加のフォームの数を制限できます。"

msgid "``max_num`` does not prevent existing objects from being displayed:"
msgstr ""
"``max_num`` は既存のオブジェクトが表示されないようにするものではありません:"

msgid ""
"Also, ``extra=0`` doesn't prevent creation of new model instances as you "
"can :ref:`add additional forms with JavaScript <understanding-the-"
"managementform>` or send additional POST data. See :ref:`model-formsets-edit-"
"only` on how to do this."
msgstr ""
"また、 ``extra=0`` は新しいモデルインスタンスの作成を妨げるものではありませ"
"ん。 :ref:`JavaScriptでフォームを追加 <understanding-the-managementform>` し"
"たり、追加のPOSTデータを送信したりすることができます。この方法については :"
"ref:`model-formsets-edit-only` を参照してください。"

msgid ""
"If the value of ``max_num`` is greater than the number of existing related "
"objects, up to ``extra`` additional blank forms will be added to the "
"formset, so long as the total number of forms does not exceed ``max_num``:"
msgstr ""
"もし ``max_num`` の値が既存の関連オブジェクトの数よりも大きい場合、フォームの"
"総数が ``max_num`` を超えない限り、最大 ``extra`` 個の空白のフォームがフォー"
"ムセットに追加されます:"

msgid "Preventing new objects creation"
msgstr "新しいオブジェクトの作成を防ぐ"

msgid ""
"Using the ``edit_only`` parameter, you can prevent creation of any new "
"objects:"
msgstr ""
"``edit_only`` パラメータを使用すると、新しいオブジェクトを作成しないようにす"
"ることができます:"

msgid ""
"Here, the formset will only edit existing ``Author`` instances. No other "
"objects will be created or edited."
msgstr ""
"ここでは、フォームセットは既存の ``Author`` インスタンスのみを編集します。他"
"のオブジェクトは作成も編集もされません。"

msgid "Using a model formset in a view"
msgstr "ビューでモデルフォームセットを使う"

msgid ""
"Model formsets are very similar to formsets. Let's say we want to present a "
"formset to edit ``Author`` model instances::"
msgstr ""
"モデルのフォームセットはフォームセットにとても似ています。例えば、``Author`` "
"モデルのインスタンスを編集するフォームセットを表示したいとしましょう:"

msgid ""
"As you can see, the view logic of a model formset isn't drastically "
"different than that of a \"normal\" formset. The only difference is that we "
"call ``formset.save()`` to save the data into the database. (This was "
"described above, in :ref:`saving-objects-in-the-formset`.)"
msgstr ""
"見てのとおり、モデルフォームセットのビューロジックは、「通常の」フォームセッ"
"トと大きく異なるものではありません。唯一の違いは、 ``formset.save()`` を呼び"
"出してデータをデータベースに保存できることです。(これは上記の :ref:`saving-"
"objects-in-the-formset` で説明しています)。"

msgid "Overriding ``clean()`` on a ``ModelFormSet``"
msgstr "``ModelFormSet`` の ``clean()`` をオーバーライドする"

msgid ""
"Just like with ``ModelForms``, by default the ``clean()`` method of a "
"``ModelFormSet`` will validate that none of the items in the formset violate "
"the unique constraints on your model (either ``unique``, ``unique_together`` "
"or ``unique_for_date|month|year``).  If you want to override the ``clean()`` "
"method on a ``ModelFormSet`` and maintain this validation, you must call the "
"parent class's ``clean`` method::"
msgstr ""
"モデルフォームの ``ModelForms`` と同様に、デフォルトでは ``ModelFormSet`` の "
"``clean()`` メソッドは、フォームセット内のアイテムがモデルのユニーク制約 "
"(``unique``, ``unique_together`` または ``unique_for_date|month|year``) に違"
"反していないことを検証します。 もし ``ModelFormSet`` の ``clean()`` メソッド"
"をオーバーライドし、この検証を維持したい場合は、親クラスの ``clean`` メソッド"
"を呼び出す必要があります:"

msgid ""
"Also note that by the time you reach this step, individual model instances "
"have already been created for each ``Form``. Modifying a value in ``form."
"cleaned_data`` is not sufficient to affect the saved value. If you wish to "
"modify a value in ``ModelFormSet.clean()`` you must modify ``form."
"instance``::"
msgstr ""
"また、このステップに到達するまでに、各 ``Form`` に対して個別のモデルインスタ"
"ンスが既に作成されていることに注意してください。 ``form.cleaned_data`` の値を"
"変更するだけでは、保存された値に影響を与えることはできません。 "
"``ModelFormSet.clean()`` の値を変更したい場合は、 ``form.instance`` を変更す"
"る必要があります:"

msgid "Using a custom queryset"
msgstr "カスタムのクエリセットを使う"

msgid ""
"As stated earlier, you can override the default queryset used by the model "
"formset::"
msgstr ""
"前述のように、モデルのフォームセットで使われるデフォルトのクエリセットはオー"
"バーライドできます:"

msgid ""
"Note that we pass the ``queryset`` argument in both the ``POST`` and ``GET`` "
"cases in this example."
msgstr ""
"この例では ``POST`` と ``GET`` の両方で ``queryset`` 引数を渡していることに注"
"意してください。"

msgid "Using the formset in the template"
msgstr "テンプレートでフォームセットを使う"

msgid "There are three ways to render a formset in a Django template."
msgstr ""
"Django テンプレートでフォームセットをレンダリングするには 3 つの方法がありま"
"す。"

msgid "First, you can let the formset do most of the work:"
msgstr "1つめは、フォームセットにほとんどの作業を任せる方法です:"

msgid ""
"Second, you can manually render the formset, but let the form deal with "
"itself:"
msgstr ""
"2 つめは、フォームセットを手動でレンダリングして、フォーム自身に処理させる方"
"法です:"

msgid ""
"When you manually render the forms yourself, be sure to render the "
"management form as shown above. See the :ref:`management form documentation "
"<understanding-the-managementform>`."
msgstr ""
"手動でフォームをレンダリングする場合は、必ず上記のように管理フォームをレンダ"
"リングしてください。 :ref:`管理フォームのドキュメント <understanding-the-"
"managementform>` を参照してください。"

msgid "Third, you can manually render each field:"
msgstr "3 つめは、各フィールドを手動でレンダリングする方法です:"

msgid ""
"If you opt to use this third method and you don't iterate over the fields "
"with a ``{% for %}`` loop, you'll need to render the primary key field. For "
"example, if you were rendering the ``name`` and ``age`` fields of a model:"
msgstr ""
"この3つめのメソッドを使用し、 ``{% for %}`` ループでフィールドをイテレートし"
"ない場合、主キーフィールドをレンダリングする必要があります。たとえば、モデル"
"の ``name`` フィールドと ``age`` フィールドをレンダリングする場合、以下のよう"
"にします:"

msgid ""
"Notice how we need to explicitly render ``{{ form.id }}``. This ensures that "
"the model formset, in the ``POST`` case, will work correctly. (This example "
"assumes a primary key named ``id``. If you've explicitly defined your own "
"primary key that isn't called ``id``, make sure it gets rendered.)"
msgstr ""
"明示的に ``{{ form.id }}`` をレンダリングする必要があることに注意してくださ"
"い。これにより、``POST`` の場合のモデルのフォームセットが正しく動作するように"
"なります。(この例では ``id`` という主キーを想定しています。もし ``id`` という"
"名前ではない独自の主キーを明示的に定義している場合は、それが確実にレンダリン"
"グされるようにしてください)。"

msgid "Inline formsets"
msgstr "インラインフォームセット"

msgid ""
"Inline formsets is a small abstraction layer on top of model formsets. These "
"simplify the case of working with related objects via a foreign key. Suppose "
"you have these two models::"
msgstr ""
"インラインフォームセットは、モデルフォームセット上の小さな抽象化レイヤーで"
"す。これを使うと、外部キーで関連するオブジェクトを操作することが簡単になりま"
"す。以下の 2 つのモデルがあるとします::"

msgid ""
"If you want to create a formset that allows you to edit books belonging to a "
"particular author, you could do this:"
msgstr ""
"特定の著者の本を編集できるフォームセットを作成したい場合、下記のように書くこ"
"とができます:"

msgid ""
"``BookFormSet``'s :ref:`prefix <formset-prefix>` is ``'book_set'`` (``<model "
"name>_set`` ). If ``Book``'s ``ForeignKey`` to ``Author`` has a :attr:"
"`~django.db.models.ForeignKey.related_name`, that's used instead."
msgstr ""
"``BookFormSet`` の :ref:`prefix <formset-prefix>` は ``'book_set'`` "
"(``<model name>_set``) です。ただし、 ``Book`` の ``Author`` への "
"``ForeignKey`` に :attr:`~django.db.models.ForeignKey.related_name` がある場"
"合、その名前が代わりに使用されます。"

msgid ""
":func:`~django.forms.models.inlineformset_factory` uses :func:`~django.forms."
"models.modelformset_factory` and marks ``can_delete=True``."
msgstr ""
":func:`~django.forms.models.inlineformset_factory` は、 :func:`~django.forms."
"models.modelformset_factory` を使い、``can_delete=True`` をセットします。"

msgid ""
":ref:`Manually rendered can_delete and can_order <manually-rendered-can-"
"delete-and-can-order>`."
msgstr ""
":ref:`手動でレンダリングされた can_delete と can_order <manually-rendered-"
"can-delete-and-can-order>`."

msgid "Overriding methods on an ``InlineFormSet``"
msgstr "``InlineFormSet`` のメソッドをオーバーライドする"

msgid ""
"When overriding methods on ``InlineFormSet``, you should subclass :class:"
"`~models.BaseInlineFormSet` rather than :class:`~models.BaseModelFormSet`."
msgstr ""
"``InlineFormSet`` のメソッドをオーバーライドするには、 :class:`~models."
"BaseModelFormSet` ではなく、 :class:`~models.BaseInlineFormSet` をサブクラス"
"化します。"

msgid "For example, if you want to override ``clean()``::"
msgstr "例えば、 ``clean()`` をオーバーライドするとします::"

msgid "See also :ref:`model-formsets-overriding-clean`."
msgstr ":ref:`model-formsets-overriding-clean` も参照してください。"

msgid ""
"Then when you create your inline formset, pass in the optional argument "
"``formset``:"
msgstr ""
"そして、インラインフォームセットを作成するときに、オプションの引数 "
"``formset`` を渡します:"

msgid "More than one foreign key to the same model"
msgstr "複数の外部キーをひとつのモデルが持っている場合"

msgid ""
"If your model contains more than one foreign key to the same model, you'll "
"need to resolve the ambiguity manually using ``fk_name``. For example, "
"consider the following model::"
msgstr ""
"同じモデルが 1 つよりも多くの外部キーを持っている場合、 ``fk_name`` を使い手"
"動で曖昧さを解消しなければなりません。例として、次のモデルについて考えます::"

msgid ""
"To resolve this, you can use ``fk_name`` to :func:`~django.forms.models."
"inlineformset_factory`:"
msgstr ""
"これを解決するには、 :func:`~django.forms.models.inlineformset_factory` に "
"``fk_name`` を使用します:"

msgid "Using an inline formset in a view"
msgstr "ビューでインラインフォームセットを使う"

msgid ""
"You may want to provide a view that allows a user to edit the related "
"objects of a model. Here's how you can do that::"
msgstr ""
"モデルに紐付いたオブジェクトを編集する機能をユーザーに提供するビューを作るに"
"は、こうします::"

msgid "Notice how we pass ``instance`` in both the ``POST`` and ``GET`` cases."
msgstr ""
"``POST`` と ``GET`` いずれにおいても ``instance`` を渡していることに注目して"
"ください"

msgid "Specifying widgets to use in the inline form"
msgstr "インラインフォームにウィジェットを指定する"

msgid ""
"``inlineformset_factory`` uses ``modelformset_factory`` and passes most of "
"its arguments to ``modelformset_factory``. This means you can use the "
"``widgets`` parameter in much the same way as passing it to "
"``modelformset_factory``. See `Specifying widgets to use in the form with "
"widgets`_ above."
msgstr ""
"``inlineformset_factory`` は ``modelformset_factory`` を使っており、多くの引"
"数は ``modelformset_factory`` に渡されます。これは ``modelformset_factory`` "
"と同様に、 ``widgets`` 引数を渡すことができることを意味しています。詳細は、上"
"記 `Specifying widgets to use in the form with widgets`_ を参照してください。"

msgid "View decorators"
msgstr "ビューのデコレータ"

msgid ""
"Django provides several decorators that can be applied to views to support "
"various HTTP features."
msgstr ""
"Djangoでは、さまざまなHTTP機能をサポートするために、ビューに適用できるいくつ"
"かのデコレータが提供されています。"

msgid ""
"See :ref:`decorating-class-based-views` for how to use these decorators with "
"class-based views."
msgstr ""
"ここで紹介するデコレータをクラスベースのビューで使用する方法については、 :"
"ref:`decorating-class-based-views` を参照してください。"

msgid "Allowed HTTP methods"
msgstr "特定のHTTPメソッドのみ許可する"

msgid ""
"The decorators in :mod:`django.views.decorators.http` can be used to "
"restrict access to views based on the request method. These decorators will "
"return a :class:`django.http.HttpResponseNotAllowed` if the conditions are "
"not met."
msgstr ""
":mod:`django.views.decorators.http` にあるデコレータを使用することで、リクエ"
"ストメソッドに基づいてビューへのアクセスを制限できます。アクセスが制限される"
"とき、これらのデコレータは :class:`django.http.HttpResponseNotAllowed` を返し"
"ます。"

msgid ""
"Decorator to require that a view only accepts particular request methods. "
"Usage::"
msgstr ""
"ビューが特定のリクエストメソッドのみを受け付けるようにするデコレータです。以"
"下のように使います。"

msgid "Note that request methods should be in uppercase."
msgstr "リクエストメソッドは大文字で指定する必要があることに注意してください。"

msgid "Support for wrapping asynchronous view functions was added."
msgstr "非同期ビュー関数のラップをサポートしました。"

msgid "Decorator to require that a view only accepts the GET method."
msgstr "ビューがGETメソッドのみを受け付けるようにするデコレータです。"

msgid "Decorator to require that a view only accepts the POST method."
msgstr "ビューがPOSTメソッドのみを受け付けるようにするデコレータです。"

msgid ""
"Decorator to require that a view only accepts the GET and HEAD methods. "
"These methods are commonly considered \"safe\" because they should not have "
"the significance of taking an action other than retrieving the requested "
"resource."
msgstr ""
"ビューが GET メソッドと HEAD メソッドのみを受け付けるようにするデコレータで"
"す。これらのメソッドは、要求されたリソースを取得する以外の動作をする意図を持"
"たないので、一般的に \"安全である\" と考えられています。"

msgid ""
"Web servers should automatically strip the content of responses to HEAD "
"requests while leaving the headers unchanged, so you may handle HEAD "
"requests exactly like GET requests in your views. Since some software, such "
"as link checkers, rely on HEAD requests, you might prefer using "
"``require_safe`` instead of ``require_GET``."
msgstr ""
"Webサーバーは、ヘッダーを変更せずに、レスポンスのコンテンツをHEADリクエストか"
"ら自動的に削除するべきです。そのため、ビューではHEADリクエストをGETリクエスト"
"とまったく同じように処理できます。リンクチェッカーなどの一部のソフトウェアは"
"HEADリクエストに依存しているため、 ``require_GET`` の代わりに "
"``require_safe`` を使用することをお勧めします。"

msgid "Conditional view processing"
msgstr "条件付きのビュー処理"

msgid ""
"The following decorators in :mod:`django.views.decorators.http` can be used "
"to control caching behavior on particular views."
msgstr ""
":mod:`django.views.decorators.http` にある以下のデコレータを使って、特定の"
"ビューのキャッシュ動作を制御できます。"

msgid ""
"These decorators can be used to generate ``ETag`` and ``Last-Modified`` "
"headers; see :doc:`conditional view processing </topics/conditional-view-"
"processing>`."
msgstr ""
"これらのデコレータは ``ETag`` と ``Last-Modified`` ヘッダを生成するために使用"
"できます。詳細は :doc:`条件付きのビュー処理 </topics/conditional-view-"
"processing>` を参照してください。"

msgid "GZip compression"
msgstr "GZip 圧縮"

msgid ""
"The decorators in :mod:`django.views.decorators.gzip` control content "
"compression on a per-view basis."
msgstr ""
":mod:`django.views.decorators.gzip` のデコレータは、ビュー単位でコンテンツの"
"圧縮を制御します。"

msgid ""
"This decorator compresses content if the browser allows gzip compression. It "
"sets the ``Vary`` header accordingly, so that caches will base their storage "
"on the ``Accept-Encoding`` header."
msgstr ""
"このデコレータは、ブラウザが gzip 圧縮を許可している場合にコンテンツを圧縮し"
"ます。それに応じて ``Vary`` ヘッダを設定し、キャッシュがそのストレージを "
"``Accept-Encoding`` ヘッダに基づいて行うようにします。"

msgid "Vary headers"
msgstr "Vary ヘッダ"

msgid ""
"The decorators in :mod:`django.views.decorators.vary` can be used to control "
"caching based on specific request headers."
msgstr ""
":mod:`django.views.decorators.vary` のデコレータを使って、特定のリクエスト"
"ヘッダに基づいてキャッシュを制御できます。"

msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key."
msgstr ""
"``Vary`` ヘッダーはキャッシュメカニズムがキャッシュキーを構築するときにどのリ"
"クエストヘッダを考慮すべきかを定義します。"

msgid "See :ref:`using vary headers <using-vary-headers>`."
msgstr ""
"詳しくは :ref:`vary ヘッダを使う <using-vary-headers>` を参照してください。"

msgid "Caching"
msgstr "キャッシュ"

msgid ""
"The decorators in :mod:`django.views.decorators.cache` control server and "
"client-side caching."
msgstr ""
":mod:`django.views.decorators.cache` のデコレータで、サーバーサイドとクライア"
"ントサイドのキャッシュを制御できます。"

msgid ""
"This decorator patches the response's ``Cache-Control`` header by adding all "
"of the keyword arguments to it. See :func:`~django.utils.cache."
"patch_cache_control` for the details of the transformation."
msgstr ""
"このデコレータはレスポンスの ``Cache-Control`` ヘッダにキーワード引数を全て追"
"加してパッチを適用します。変換の詳細については :func:`~django.utils.cache."
"patch_cache_control` を参照してください。"

msgid "This decorator adds an ``Expires`` header to the current date/time."
msgstr "このデコレータは、現在の日付/時刻に ``Expires`` ヘッダを追加します。"

msgid ""
"This decorator adds a ``Cache-Control: max-age=0, no-cache, no-store, must-"
"revalidate, private`` header to a response to indicate that a page should "
"never be cached."
msgstr ""
"このデコレータは、 ``Cache-Control: max-age=0, no-cache, no-store, must-"
"revalidate, private`` ヘッダをレスポンスに追加し、ページがキャッシュされない"
"ように設定します。"

msgid "Each header is only added if it isn't already set."
msgstr "それぞれのヘッダーは、未設定の場合にのみ追加されます。"

msgid "Common"
msgstr "Common（一般）"

msgid ""
"The decorators in :mod:`django.views.decorators.common` allow per-view "
"customization of :class:`~django.middleware.common.CommonMiddleware` "
"behavior."
msgstr ""
":mod:`django.views.decorators.common` のデコレータで、 :class:`~django."
"middleware.common.CommonMiddleware` の動作をビューごとにカスタマイズできま"
"す。"

msgid ""
"This decorator allows individual views to be excluded from :setting:"
"`APPEND_SLASH` URL normalization."
msgstr ""
"このデコレータは、個々のビューを :setting:`APPEND_SLASH` URL 正規化から除外し"
"ます。"

msgid "File Uploads"
msgstr "ファイルのアップロード"

msgid ""
"When Django handles a file upload, the file data ends up placed in :attr:"
"`request.FILES <django.http.HttpRequest.FILES>` (for more on the ``request`` "
"object see the documentation for :doc:`request and response objects </ref/"
"request-response>`). This document explains how files are stored on disk and "
"in memory, and how to customize the default behavior."
msgstr ""
"Django がファイルアップロードを扱うとき、ファイルデータは :attr:`request."
"FILES <django.http.HttpRequest.FILES>` に格納されます (``request`` についての"
"詳細は :doc:`リクエスト/レスポンス オブジェクト </ref/request-response>` を参"
"照してください)。ここでは、ファイルがどのようにディスクとメモリに保管され、ま"
"たどうやってデフォルトの動作を変更するかを説明します。"

msgid ""
"There are security risks if you are accepting uploaded content from "
"untrusted users! See the security guide's topic on :ref:`user-uploaded-"
"content-security` for mitigation details."
msgstr ""
"信頼できないユーザーからコンテンツアップロードを許可する場合、セキュリティリ"
"スクが存在します！緩和策の詳細は、:ref:`user-uploaded-content-security` のセ"
"キュリティガイドをご覧ください。"

msgid "Basic file uploads"
msgstr "ファイルのアップロードの基本"

msgid "Consider a form containing a :class:`~django.forms.FileField`:"
msgstr ":class:`~django.forms.FileField` を持つフォームを考えてみましょう:"

msgid ""
"A view handling this form will receive the file data in :attr:`request.FILES "
"<django.http.HttpRequest.FILES>`, which is a dictionary containing a key for "
"each :class:`~django.forms.FileField` (or :class:`~django.forms.ImageField`, "
"or other :class:`~django.forms.FileField` subclass) in the form. So the data "
"from the above form would be accessible as ``request.FILES['file']``."
msgstr ""
"このフォームをハンドリングするビューは、ファイルのデータを :attr:`request."
"FILES <django.http.HttpRequest.FILES>` というディクショナリの中に受け取りま"
"す。このディクショナリには、キーと、それぞれのキーに対応するフォームの :"
"class:`~django.forms.FileField` (または :class:`~django.forms.ImageField` ま"
"たは他の :class:`~django.forms.FileField` のサブクラス) が格納されています。"
"そのため、上のフォームから送信されたデータには、``request.FILES['file']`` で"
"アクセスできます。"

msgid ""
"Note that :attr:`request.FILES <django.http.HttpRequest.FILES>` will only "
"contain data if the request method was ``POST``, at least one file field was "
"actually posted, and the ``<form>`` that posted the request has the "
"attribute ``enctype=\"multipart/form-data\"``. Otherwise, ``request.FILES`` "
"will be empty."
msgstr ""
"ただし、:attr:`request.FILES <django.http.HttpRequest.FILES>` にデータが格納"
"されるのは、リクエストメソッドが ``POST`` で、少なくとも1つのファイルフィール"
"ドが実際に投稿され、かつリクエストをポストした ``<form>`` の属性に "
"``enctype=\"multipart/form-data\"`` が設定されていた場合に限られることに注意"
"してください。そうでない場合には、``request.FILES`` は空の辞書になります。"

msgid ""
"Most of the time, you'll pass the file data from ``request`` into the form "
"as described in :ref:`binding-uploaded-files`. This would look something "
"like:"
msgstr ""
"ほとんどの場合、:ref:`binding-uploaded-files` で説明されているように、"
"``request`` からフォームへデータを引き渡せばよいでしょう。その場合、下記のよ"
"うになります:"

msgid ""
"Notice that we have to pass :attr:`request.FILES <django.http.HttpRequest."
"FILES>` into the form's constructor; this is how file data gets bound into a "
"form."
msgstr ""
"ここで、:attr:`request.FILES <django.http.HttpRequest.FILES>` をフォームのコ"
"ンストラクタに渡す必要があることに注意してください。"

msgid "Here's a common way you might handle an uploaded file::"
msgstr ""
"アップロードされたファイルをハンドルする一般的な方法は、次のようになります。"

msgid ""
"Looping over ``UploadedFile.chunks()`` instead of using ``read()`` ensures "
"that large files don't overwhelm your system's memory."
msgstr ""
"``read()`` を使う代わりに ``UploadedFile.chunks()`` でループすることで、大き"
"なサイズのファイルがアップロードされた時にメモリが専有されることを防げます。"

msgid ""
"There are a few other methods and attributes available on ``UploadedFile`` "
"objects; see :class:`UploadedFile` for a complete reference."
msgstr ""
"``UploadedFile`` オブジェクトには、他にもいくつかのメソッドと属性があります。"
"完全なリファレンスについては、:class:`UploadedFile` を読んでください。"

msgid "Handling uploaded files with a model"
msgstr "モデルを使用したアップロードファイルのハンドリング"

msgid ""
"If you're saving a file on a :class:`~django.db.models.Model` with a :class:"
"`~django.db.models.FileField`, using a :class:`~django.forms.ModelForm` "
"makes this process much easier. The file object will be saved to the "
"location specified by the :attr:`~django.db.models.FileField.upload_to` "
"argument of the corresponding :class:`~django.db.models.FileField` when "
"calling ``form.save()``::"
msgstr ""
":class:`~django.db.models.FileField` を持つ :class:`~django.db.models.Model` "
"上のファイルを保存するときは、:class:`~django.forms.ModelForm` を使えば、この"
"プロセスはとても簡単になります。この場合、ファイルオブジェクトは、``form."
"save()`` を呼び出すだけで、対応する :class:`~django.db.models.FileField` の :"
"attr:`~django.db.models.FileField.upload_to` 引数で指定した場所に保存されま"
"す。"

msgid ""
"If you are constructing an object manually, you can assign the file object "
"from :attr:`request.FILES <django.http.HttpRequest.FILES>` to the file field "
"in the model::"
msgstr ""
"手動でオブジェクトを作成する場合には、:attr:`request.FILES <django.http."
"HttpRequest.FILES>` 内のファイルオブジェクトを、モデルの file_field 引数に指"
"定します。"

msgid ""
"If you are constructing an object manually outside of a request, you can "
"assign a :class:`~django.core.files.File` like object to the :class:`~django."
"db.models.FileField`::"
msgstr ""
"リクエストの外で手動でオブジェクトを構築する場合は、 :class:`~django.db."
"models.FileField` に :class:`~django.core.files.File` のようなオブジェクトを"
"代入できます:"

msgid "Uploading multiple files"
msgstr "複数のファイルをアップロードする"

msgid ""
"If you want to upload multiple files using one form field, create a subclass "
"of the field's widget and set the ``allow_multiple_selected`` attribute on "
"it to ``True``."
msgstr ""
"1つのフォームフィールドを使って複数のファイルをアップロードしたい場合は、"
"フィールドのウィジェットのサブクラスを作成し、 ``allow_multiple_selected`` 属"
"性を ``True`` に設定してください。"

msgid ""
"In order for such files to be all validated by your form (and have the value "
"of the field include them all), you will also have to subclass "
"``FileField``. See below for an example."
msgstr ""
"このようなファイルをすべてフォームで検証する (そしてフィールドの値にすべてを"
"含める) ためには、 ``FileField`` をサブクラス化する必要があります。例を以下に"
"示します。"

msgid "Multiple file field"
msgstr "複数ファイルのフィールド"

msgid ""
"Django is likely to have a proper multiple file field support at some point "
"in the future."
msgstr ""
"Django は将来、適切な複数ファイルフィールドをサポートするようになる予定です。"

msgid ""
"Then override the ``post`` method of your :class:`~django.views.generic.edit."
"FormView` subclass to handle multiple file uploads:"
msgstr ""
"そして、複数のファイルアップロードを扱うために、あなたの :class:`~django."
"views.generic.edit.FormView` サブクラスの ``post`` メソッドをオーバーライドし"
"ます:"

msgid ""
"This will allow you to handle multiple files at the form level only. Be "
"aware that you cannot use it to put multiple files on a single model "
"instance (in a single field), for example, even if the custom widget is used "
"with a form field related to a model ``FileField``."
msgstr ""
"これにより、フォームレベルでのみ複数のファイルを扱うことができるようになりま"
"す。例えば、カスタムウィジェットがモデル ``FileField`` にリレーション先のモデ"
"ルフィールドで使用されている場合でも、複数のファイルを単一のモデルインスタン"
"ス（単一のフィールド）に入れることはできません。"

msgid ""
"In previous versions, there was no support for the "
"``allow_multiple_selected`` class attribute, and users were advised to "
"create the widget with the HTML attribute ``multiple`` set through the "
"``attrs`` argument. However, this caused validation of the form field to be "
"applied only to the last file submitted, which could have adverse security "
"implications."
msgstr ""
"以前のバージョンでは ``allow_multiple_selected`` クラス属性がサポートされてい"
"なかったため、ユーザは ``attrs`` 引数で HTML 属性 ``multiple`` を指定してウィ"
"ジェットを作成することが推奨されていました。しかし、これはフォームフィールド"
"のバリデーションが最後に送信されたファイルだけに適用される原因となり、セキュ"
"リティ上不利な影響を与える可能性がありました。"

msgid "Upload Handlers"
msgstr "アップロードハンドラ"

msgid ""
"When a user uploads a file, Django passes off the file data to an *upload "
"handler* -- a small class that handles file data as it gets uploaded. Upload "
"handlers are initially defined in the :setting:`FILE_UPLOAD_HANDLERS` "
"setting, which defaults to::"
msgstr ""
"サイトのユーザがファイルをアップロードした時、Django はそのファイルのデータ"
"を *アップロードハンドラ (upload handler)* という、ファイルがアップロードされ"
"た時にデータをハンドリングするための小さなクラスへ渡します。アップロードハン"
"ドラは、初めに設定の :setting:`FILE_UPLOAD_HANDLERS` で定義されています。デ"
"フォルトでは次のようになっています。"

msgid ""
"Together :class:`MemoryFileUploadHandler` and :class:"
"`TemporaryFileUploadHandler` provide Django's default file upload behavior "
"of reading small files into memory and large ones onto disk."
msgstr ""
":class:`MemoryFileUploadHandler` と :class:`TemporaryFileUploadHandler` はと"
"もに、Django でファイルがアップロードされた時のデフォルトの動作（小さなファイ"
"ルはメモリ上に保存し、大きなファイルはディスクに保存する）を提供しています。"

msgid ""
"You can write custom handlers that customize how Django handles files. You "
"could, for example, use custom handlers to enforce user-level quotas, "
"compress data on the fly, render progress bars, and even send data to "
"another storage location directly without storing it locally. See :ref:"
"`custom_upload_handlers` for details on how you can customize or completely "
"replace upload behavior."
msgstr ""
"カスタマイズハンドラを書けば、Django がファイルをハンドリングする方法をカスタ"
"マイズできます。たとえば、カスタムハンドラを使うことで、ユーザレベルでのク"
"オータを設定したり、データをその場で圧縮したり、プログレスバーを表示したり、"
"あるいは、送られたデータをローカルに保存せずに、別のストレージに転送すること"
"さえ可能です。ハンドラをカスタマイズしたり、アップロード時の動作を完全に置き"
"換えたりする方法については、詳しくは :ref:`custom_upload_handlers` を読んでく"
"ださい。"

msgid "Where uploaded data is stored"
msgstr "アップロードされたデータの保存場所"

msgid "Before you save uploaded files, the data needs to be stored somewhere."
msgstr ""
"アップロードされたファイルを保存する時点で、そのデータはコンピュータ上のどこ"
"かに保存されているはずです。"

msgid ""
"By default, if an uploaded file is smaller than 2.5 megabytes, Django will "
"hold the entire contents of the upload in memory. This means that saving the "
"file involves only a read from memory and a write to disk and thus is very "
"fast."
msgstr ""
"デフォルトでは、アップロードファイルが 2.5 MB 未満ならば、Django はデータ全体"
"をメモリ上に保持します。つまり、この場合にファイルを保存するというのは、メモ"
"リ上からデータを読み込んでディスクにファイルを書き込むだけなので、処理は短時"
"間しかかかりません。"

msgid ""
"However, if an uploaded file is too large, Django will write the uploaded "
"file to a temporary file stored in your system's temporary directory. On a "
"Unix-like platform this means you can expect Django to generate a file "
"called something like ``/tmp/tmpzfp6I6.upload``. If an upload is large "
"enough, you can watch this file grow in size as Django streams the data onto "
"disk."
msgstr ""
"しかし、アップロードファイルのサイズが大きい場合、Django はアップロードファイ"
"ルをシステムの一時ディレクトリ内に、一時ファイルとして保存します。Unix-like "
"なプラットフォームなら、Django は ``/tmp/tmpzfp6I6.upload`` のようなファイル"
"を作成すると考えて良いです。アップロードされたファイルが十分大きければ、"
"Django がデータストリームをディスクに書き込むにつれ、このファイルのサイズが大"
"きくなってゆくのを観察することができるでしょう。"

msgid ""
"These specifics -- 2.5 megabytes; ``/tmp``; etc. -- are \"reasonable "
"defaults\" which can be customized as described in the next section."
msgstr ""
"これらの特定の設定（2.5 MB や ``/tmp`` ディレクトリなど）は、「常識的なデフォ"
"ルト」として設定されているだけなので、次のセクションで説明するように、自分で"
"カスタマイズできます。"

msgid "Changing upload handler behavior"
msgstr "アップロードハンドラの動作の変更"

msgid ""
"There are a few settings which control Django's file upload behavior. See :"
"ref:`File Upload Settings <file-upload-settings>` for details."
msgstr ""
"Django のファイルアップロードの動作を制御するための設定がいくつかあります。詳"
"しくは、 :ref:`ファイルアップロードの設定 <file-upload-settings>` を参照して"
"ください。"

msgid "Modifying upload handlers on the fly"
msgstr "その場でアップロードハンドラを修正する"

msgid ""
"Sometimes particular views require different upload behavior. In these "
"cases, you can override upload handlers on a per-request basis by modifying "
"``request.upload_handlers``. By default, this list will contain the upload "
"handlers given by :setting:`FILE_UPLOAD_HANDLERS`, but you can modify the "
"list as you would any other list."
msgstr ""
"時として特定のビューが異なるアップロード動作を必要とすることがあります。この"
"ような場合には、``request.upload_handlers`` を修正することで、1リクエストごと"
"に、アップロードハンドラをオーバーライドすることが可能です。デフォルトでは、"
"このリストには :setting:`FILE_UPLOAD_HANDLERS` の設定で指定したアップロードハ"
"ンドラが入っていますが、このリストは自由に修正できます。"

msgid ""
"For instance, suppose you've written a ``ProgressBarUploadHandler`` that "
"provides feedback on upload progress to some sort of AJAX widget. You'd add "
"this handler to your upload handlers like this::"
msgstr ""
"たとえば、アップロードの進行状況を計算して、AJAX のウィジェットなどにフィード"
"バックを返す ``ProgressBarUploadHandler`` というハンドラを作ったとしましょ"
"う。このハンドラを、次のようにアップロードハンドラのリストに追加します。"

msgid ""
"You'd probably want to use ``list.insert()`` in this case (instead of "
"``append()``) because a progress bar handler would need to run *before* any "
"other handlers. Remember, the upload handlers are processed in order."
msgstr ""
"この場合には、``list.append()`` メソッドの代わりに ``list.insert()`` を使った"
"ほうが良いでしょう。なぜなら、プログレスバーハンドラーは、他のハンドラの *前"
"に* 実行する必要があるでしょうから。アップロードハンドラは、リストの前から順"
"に処理されることに注意してください。"

msgid ""
"If you want to replace the upload handlers completely, you can assign a new "
"list::"
msgstr ""
"アップロードハンドラ全体を置き換えたい場合は、新しいリストを代入します。"

msgid ""
"You can only modify upload handlers *before* accessing ``request.POST`` or "
"``request.FILES`` -- it doesn't make sense to change upload handlers after "
"upload handling has already started. If you try to modify ``request."
"upload_handlers`` after reading from ``request.POST`` or ``request.FILES`` "
"Django will throw an error."
msgstr ""
"アップロードハンドラは、``request.POST`` や ``request.FILES`` にアクセスする "
"*前に* のみ修正できます。処理が始まってからアップロードハンドラを修正しても無"
"意味だからです。もし ``request.POST`` や ``request.FILES`` を読み込んだ後に "
"``request.upload_handlers`` を修正しようとしたならば、Django はエラーを投げま"
"す。"

msgid ""
"Thus, you should always modify uploading handlers as early in your view as "
"possible."
msgstr ""
"したがって、アップロードハンドラの修正は、常にビューのできるだけ早い段階で行"
"うようにするべきです。"

msgid ""
"Also, ``request.POST`` is accessed by :class:`~django.middleware.csrf."
"CsrfViewMiddleware` which is enabled by default. This means you will need to "
"use :func:`~django.views.decorators.csrf.csrf_exempt` on your view to allow "
"you to change the upload handlers.  You will then need to use :func:`~django."
"views.decorators.csrf.csrf_protect` on the function that actually processes "
"the request.  Note that this means that the handlers may start receiving the "
"file upload before the CSRF checks have been done. Example code::"
msgstr ""
"さらに、``request.POST`` は、デフォルトで有効になっている :class:`~django."
"middleware.csrf.CsrfViewMiddleware` によってアクセスされます。つまり、アップ"
"ロードハンドラを変更できるようにするためには、ビュー上で :func:`~django."
"views.decorators.csrf.csrf_exempt` を使う必要があります。それから、実際にその"
"リクエストを処理する関数上で、:func:`~django.views.decorators.csrf."
"csrf_protect` を使う必要があります。ハンドラは、CSRF チェックが終わる前にファ"
"イルアップロードの受け取りを開始する可能性があることに注意してください。以下"
"はコードの例です::"

msgid ""
"If you are using a class-based view, you will need to use :func:`~django."
"views.decorators.csrf.csrf_exempt` on its :meth:`~django.views.generic.base."
"View.dispatch` method and :func:`~django.views.decorators.csrf.csrf_protect` "
"on the method that actually processes the request. Example code::"
msgstr ""
"クラスベースのビューを使用している場合は、その :meth:`~django.views.generic."
"base.View.dispatch` メソッドで :func:`~django.views.decorators.csrf."
"csrf_exempt` を使用し、実際にリクエストを処理するメソッドで :func:`~django."
"views.decorators.csrf.csrf_protect` を使用する必要があります。下記はコード例"
"です:"

msgid "Generic views"
msgstr "ジェネリックビュー (汎用ビュー)"

msgid "See :doc:`/ref/class-based-views/index`."
msgstr ":doc:`/ref/class-based-views/index` を参照してください。"

msgid "Handling HTTP requests"
msgstr "HTTP リクエストのハンドリング"

msgid "Information on handling HTTP requests in Django:"
msgstr "Django における HTTP リクエストのハンドリングに関する情報"

msgid "Middleware"
msgstr "ミドルウェア (Middleware)"

msgid ""
"Middleware is a framework of hooks into Django's request/response "
"processing. It's a light, low-level \"plugin\" system for globally altering "
"Django's input or output."
msgstr ""
"ミドルウェアは、Django のリクエスト/レスポンス処理にフックを加えるためのフ"
"レームワークです。これは、Django の入力あるいは出力をグローバルに置き換えるた"
"めの、軽量で低レベルの「プラグイン」システムです。"

msgid ""
"Each middleware component is responsible for doing some specific function. "
"For example, Django includes a middleware component, :class:`~django.contrib."
"auth.middleware.AuthenticationMiddleware`, that associates users with "
"requests using sessions."
msgstr ""
"各ミドルウェアのコンポーネントは、それぞれある特定の機能を実行する役目を持っ"
"ています。たとえば、Django には :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` というミドルウェアコンポーネントがあります。このミ"
"ドルウェアは、セッションを利用して、リクエストとユーザーとを関連付けます。"

msgid ""
"This document explains how middleware works, how you activate middleware, "
"and how to write your own middleware. Django ships with some built-in "
"middleware you can use right out of the box. They're documented in the :doc:"
"`built-in middleware reference </ref/middleware>`."
msgstr ""
"このドキュメントでは、ミドルウェアが機能するしくみ、ミドルウェアを有効にする"
"方法、そして、自分でミドルウェアを書く方法について説明します。Django には組み"
"込みのミドルウェアがいくつか用意されているので、自分で書かなくてもすぐに使い"
"始めることができます。これらの組み込みのミドルウェアについては、:doc:`組み込"
"みミドルウェアリファレンス </ref/middleware>` にドキュメントされているので参"
"照してください。"

msgid "Writing your own middleware"
msgstr "自分でミドルウェアを書く"

msgid ""
"A middleware factory is a callable that takes a ``get_response`` callable "
"and returns a middleware. A middleware is a callable that takes a request "
"and returns a response, just like a view."
msgstr ""
"ミドルウェアファクトリは、ミドルウェアを返す ``get_response`` を取る呼び出し"
"可能なオブジェクトです。ミドルウェアは (ビューと同じように) リクエストを受け"
"取ってレスポンスを返す呼び出し可能なオブジェクトです。"

msgid "A middleware can be written as a function that looks like this::"
msgstr "ミドルウェアは、以下のように関数として書くことができます::"

msgid ""
"Or it can be written as a class whose instances are callable, like this::"
msgstr "もしくは、インスタンスを呼び出し可能なクラスとして書くこともできます::"

msgid ""
"The ``get_response`` callable provided by Django might be the actual view "
"(if this is the last listed middleware) or it might be the next middleware "
"in the chain. The current middleware doesn't need to know or care what "
"exactly it is, just that it represents whatever comes next."
msgstr ""
"Django によって渡される ``get_response`` 呼び出し可能オブジェクトは、実際の "
"(これがミドルウェアの最後にリストアップされている場合) ビューか、チェーン内の"
"次のミドルウェアの可能性があります。現在のミドルウェアはこれが何かを知る必要"
"も気にする必要もなく、ただ次に来るものを表します。"

msgid ""
"The above is a slight simplification -- the ``get_response`` callable for "
"the last middleware in the chain won't be the actual view but rather a "
"wrapper method from the handler which takes care of applying :ref:`view "
"middleware <view-middleware>`, calling the view with appropriate URL "
"arguments, and applying :ref:`template-response <template-response-"
"middleware>` and :ref:`exception <exception-middleware>` middleware."
msgstr ""
"上記は、わずかに単純化したものです -- チェーン内の際にリストアップされたミド"
"ルウェアに対する ``get_response`` は実際のビューではなく :ref:`ビューミドル"
"ウェア <view-middleware>` を適用する処理を行うハンドラからのラッパーメソッド"
"です。これは適切な URL 属性でビューを呼び出し、:ref:`テンプレートレスポンス "
"<template-response-middleware>` と :ref:`例外 <exception-middleware>` を適用"
"します。"

msgid ""
"Middleware can either support only synchronous Python (the default), only "
"asynchronous Python, or both. See :ref:`async-middleware` for details of how "
"to advertise what you support, and know what kind of request you are getting."
msgstr ""
"ミドルウェアは同期 Python のみ(デフォルト)、非同期 Python のみ、または両方を"
"サポートできます。どのようなリクエストをサポートするのか、またどのようなリク"
"エストを受け取るのかについての詳細は :ref:`async-middleware` を参照してくださ"
"い。"

msgid "Middleware can live anywhere on your Python path."
msgstr "ミドルウェアは、あなたの Ptyhon パスのどこでも使うことができます。"

msgid "``__init__(get_response)``"
msgstr "``__init__(get_response)``"

msgid ""
"Middleware factories must accept a ``get_response`` argument. You can also "
"initialize some global state for the middleware. Keep in mind a couple of "
"caveats:"
msgstr ""
"ミドルウェアファクトリは ``get_response`` 引数を受け取る必要があります。ミド"
"ルウェアに対してグローバルな宣言を初期化することもできます。いくつかの注意事"
"項があります:"

msgid ""
"Django initializes your middleware with only the ``get_response`` argument, "
"so you can't define ``__init__()`` as requiring any other arguments."
msgstr ""
"Django は ``get_response`` 引数でミドルウェアを初期化するため、"
"``__init__()`` で他の引数を必須にすることはできません。"

msgid ""
"Unlike the ``__call__()`` method which is called once per request, "
"``__init__()`` is called only *once*, when the web server starts."
msgstr ""
"リクエストごとに 1 回呼ばれる ``__call__()`` メソッドとは異なり、"
"``__init__()`` はウェブサーバが起動したときに *1回だけ* 呼ばれます。"

msgid "Marking middleware as unused"
msgstr "ミドルウェアを不使用としてマークする"

msgid ""
"It's sometimes useful to determine at startup time whether a piece of "
"middleware should be used. In these cases, your middleware's ``__init__()`` "
"method may raise :exc:`~django.core.exceptions.MiddlewareNotUsed`. Django "
"will then remove that middleware from the middleware process and log a debug "
"message to the :ref:`django-request-logger` logger when :setting:`DEBUG` is "
"``True``."
msgstr ""
"起動時にミドルウェアを使うかどうかを決めることは、ときに有用です。この場合、"
"ミドルウェアの ``__init__()`` メソッドが :exc:`~django.core.exceptions."
"MiddlewareNotUsed` を投げる可能性があります。Django はミドルウェアプロセスか"
"らこのミドルウェアを削除し、:setting:`DEBUG` が ``True`` のときはデバッグメッ"
"セージを :ref:`django-request-logger` ロガーに記録します。"

msgid "Activating middleware"
msgstr "ミドルウェアを有効にする"

msgid ""
"To activate a middleware component, add it to the :setting:`MIDDLEWARE` list "
"in your Django settings."
msgstr ""
"ミドルウェア要素をアクティブ化するには、Django の設定内の :setting:"
"`MIDDLEWARE` リストに追加してください。"

msgid ""
"In :setting:`MIDDLEWARE`, each middleware component is represented by a "
"string: the full Python path to the middleware factory's class or function "
"name. For example, here's the default value created by :djadmin:`django-"
"admin startproject <startproject>`::"
msgstr ""
":setting:`MIDDLEWARE` では、各ミドルウェア要素は文字列で表されます: ミドル"
"ウェアファクトリのクラスや関数名に対する完全な Python パスです。 例えば、以下"
"は :djadmin:`django-admin startproject <startproject>` で生成されるデフォルト"
"値です::"

msgid ""
"A Django installation doesn't require any middleware — :setting:`MIDDLEWARE` "
"can be empty, if you'd like — but it's strongly suggested that you at least "
"use :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""
"Django の導入では、ミドルウェアは必須ではありません — お望みならば :setting:"
"`MIDDLEWARE` は空でも構いません — しかし、最低でも :class:`~django."
"middleware.common.CommonMiddleware` を使うことを強くお勧めします。"

msgid ""
"The order in :setting:`MIDDLEWARE` matters because a middleware can depend "
"on other middleware. For instance, :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` stores the authenticated user in the session; "
"therefore, it must run after :class:`~django.contrib.sessions.middleware."
"SessionMiddleware`. See :ref:`middleware-ordering` for some common hints "
"about ordering of Django middleware classes."
msgstr ""
"ミドルウェアは他のミドルウェアに依存するため、:setting:`MIDDLEWARE` の順番は"
"重要です。:class:`~django.contrib.auth.middleware.AuthenticationMiddleware` "
"はセッション内に認証済みユーザを保持します。したがって、:class:`~django."
"contrib.sessions.middleware.SessionMiddleware` の後に起動する必要があります。"
"Django のミドルウェアクラスの順番については、:ref:`middleware-ordering` を参"
"照してください。"

msgid "Middleware order and layering"
msgstr "ミドルウェアの順番とレイヤ"

msgid ""
"During the request phase, before calling the view, Django applies middleware "
"in the order it's defined in :setting:`MIDDLEWARE`, top-down."
msgstr ""
"ビューを呼び出す前、リクエストの段階で、Django は :setting:`MIDDLEWARE` 内で"
"定義された順番で上から下に向かってミドルウェアを適用します。"

msgid ""
"You can think of it like an onion: each middleware class is a \"layer\" that "
"wraps the view, which is in the core of the onion. If the request passes "
"through all the layers of the onion (each one calls ``get_response`` to pass "
"the request in to the next layer), all the way to the view at the core, the "
"response will then pass through every layer (in reverse order) on the way "
"back out."
msgstr ""
"これはタマネギのように考えることができます: 各ミドルウェアクラスは、タマネギ"
"の中心にあるビューをラップする \"レイヤ\" です。リクエストがタマネギのすべて"
"のレイヤ (つまり中心にあるビューにいたる全ての道) を通過すると (各レイヤーは "
"``get_response`` を呼び出してリクエストを次のレイヤに渡します)、レスポンスは"
"各レイヤーを (逆順で) 通過して戻ります。"

msgid ""
"If one of the layers decides to short-circuit and return a response without "
"ever calling its ``get_response``, none of the layers of the onion inside "
"that layer (including the view) will see the request or the response. The "
"response will only return through the same layers that the request passed in "
"through."
msgstr ""
"いずれかのレイヤが短絡し、``get_response`` を呼び出さずにレスポンスを返すこと"
"を決定した場合、そのレイヤの内側にあるタマネギの (ビューを含む) レイヤはリク"
"エストおよびレスポンスを受け取りません。 レスポンスは、リクエストが通過したの"
"と同じレイヤーを介してのみ返されます。"

msgid "Other middleware hooks"
msgstr "他のミドルウェアのフック"

msgid ""
"Besides the basic request/response middleware pattern described earlier, you "
"can add three other special methods to class-based middleware:"
msgstr ""
"上述した基本的なリクエストやレスポンスのミドルウェアパターンのほかに、3 つの"
"特殊なメソッドをクラスベースのミドルウェアに追加できます:"

msgid "``process_view()``"
msgstr "``process_view()``"

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is "
"the Python function that Django is about to use. (It's the actual function "
"object, not the name of the function as a string.) ``view_args`` is a list "
"of positional arguments that will be passed to the view, and ``view_kwargs`` "
"is a dictionary of keyword arguments that will be passed to the view. "
"Neither ``view_args`` nor ``view_kwargs`` include the first view argument "
"(``request``)."
msgstr ""
"``request`` は :class:`~django.http.HttpRequest` クラスのオブジェクトです。"
"``view_func`` は、直後に Django が使用する Python の関数です (関数の名前の文"
"字列ではなく、実際の関数オブジェクトです)。``view_args`` はビューに渡される位"
"置引数のリスト、``view_kwargs`` はビューに渡されるキーワード引数のディクショ"
"ナリです。``view_args`` も ``view_kwargs`` も、第一引数 (``request``) を含ん"
"でいません。"

msgid "``process_view()`` is called just before Django calls the view."
msgstr "``process_view()`` は、Django がビューを呼び出す直前に呼び出されます。"

msgid ""
"It should return either ``None`` or an :class:`~django.http.HttpResponse` "
"object. If it returns ``None``, Django will continue processing this "
"request, executing any other ``process_view()`` middleware and, then, the "
"appropriate view. If it returns an :class:`~django.http.HttpResponse` "
"object, Django won't bother calling the appropriate view; it'll apply "
"response middleware to that :class:`~django.http.HttpResponse` and return "
"the result."
msgstr ""
"``None`` もしくは :class:`~django.http.HttpResponse` オブジェクトを返す必要が"
"あります。``None`` を返す場合、Django はこのリクエストの処理を続け、他のすべ"
"ての ``process_view()`` ミドルウェアを実行し、さらに適切なビューを実行しま"
"す。:class:`~django.http.HttpResponse` オブジェクトを返す場合、Django はわざ"
"わざ適切なビューを呼び出すことはしません; レスポンスミドルウェアを :class:"
"`~django.http.HttpResponse` に適用し、結果を返します。"

msgid ""
"Accessing :attr:`request.POST <django.http.HttpRequest.POST>` inside "
"middleware before the view runs or in ``process_view()`` will prevent any "
"view running after the middleware from being able to :ref:`modify the upload "
"handlers for the request <modifying_upload_handlers_on_the_fly>`, and should "
"normally be avoided."
msgstr ""
"ビューが実行される、ミドルウェアの内側もしくは ``process_view()`` 内の :attr:"
"`request.POST <django.http.HttpRequest.POST>` にアクセスすると、ミドルウェア"
"の後に実行される全てのビューが :ref:`リクエストに対するアップロードハンドラを"
"修正する <modifying_upload_handlers_on_the_fly>` ことができなくなるため、通常"
"は避けられるべきです。"

msgid ""
"The :class:`~django.middleware.csrf.CsrfViewMiddleware` class can be "
"considered an exception, as it provides the :func:`~django.views.decorators."
"csrf.csrf_exempt` and :func:`~django.views.decorators.csrf.csrf_protect` "
"decorators which allow views to explicitly control at what point the CSRF "
"validation should occur."
msgstr ""
":class:`~django.middleware.csrf.CsrfViewMiddleware` クラスだけは例外と考えて"
"いいでしょう。というのも、このミドルウェアには、:func:`~django.views."
"decorators.csrf.csrf_exempt` と :func:`~django.views.decorators.csrf."
"csrf_protect` というデコレータが用意されていて、このデコレータを使えば、CSRF "
"の検証が必要になったどの時点でも、明示的にビューを制御できるからです。"

msgid "``process_exception()``"
msgstr "``process_exception()``"

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``exception`` is "
"an ``Exception`` object raised by the view function."
msgstr ""
"``request`` は :class:`~django.http.HttpRequest` オブジェクトです。"
"``exception`` は、ビュー関数から投げられた ``Exception`` オブジェクトです。"

msgid ""
"Django calls ``process_exception()`` when a view raises an exception. "
"``process_exception()`` should return either ``None`` or an :class:`~django."
"http.HttpResponse` object. If it returns an :class:`~django.http."
"HttpResponse` object, the template response and response middleware will be "
"applied and the resulting response returned to the browser. Otherwise, :ref:"
"`default exception handling <error-views>` kicks in."
msgstr ""
"Django は、ビューが例外を起こした時に ``process_exception()`` を呼び出しま"
"す。``process_exception()`` は ``None`` あるいは :class:`~django.http."
"HttpResponse` オブジェクトを返さなければなりません。 :class:`~django.http."
"HttpResponse` オブジェクトを返した場合、テンプレートレスポンスミドルウェアお"
"よびレスポンスミドルウェアが適用され、その結果得られたレスポンスがブラウザに"
"返されます。そうでなければ、 :ref:`デフォルトの例外のハンドリング <error-"
"views>` が行われます。"

msgid ""
"Again, middleware are run in reverse order during the response phase, which "
"includes ``process_exception``. If an exception middleware returns a "
"response, the ``process_exception`` methods of the middleware classes above "
"that middleware won't be called at all."
msgstr ""
"繰り返しますが、ミドルウェアは ``process_exception`` を含むレスポンスフェーズ"
"で逆順に実行されます。例外ミドルウェアがレスポンスを返した場合、そのミドル"
"ウェアの上のミドルウェアクラスの ``process_exception`` メソッドは全く呼び出さ"
"れません。"

msgid "``process_template_response()``"
msgstr "``process_template_response()``"

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"the :class:`~django.template.response.TemplateResponse` object (or "
"equivalent) returned by a Django view or by a middleware."
msgstr ""
"``request`` は :class:`~django.http.HttpRequest` クラスのオブジェクトです。"
"``response`` は、Django のビューまたはミドルウェアから返される、:class:"
"`~django.template.response.TemplateResponse` クラスのオブジェクト (あるいはそ"
"れと同等なもの) です。"

msgid ""
"``process_template_response()`` is called just after the view has finished "
"executing, if the response instance has a ``render()`` method, indicating "
"that it is a :class:`~django.template.response.TemplateResponse` or "
"equivalent."
msgstr ""
"``process_template_response()`` は、レスポンスオブジェクトが ``render()`` メ"
"ソッドを持っている場合、つまり、:class:`~django.template.response."
"TemplateResponse` クラスのオブジェクトあるいはそれと同等のものである場合に、"
"ビューの実行の直後に呼ばれます。"

msgid ""
"It must return a response object that implements a ``render`` method. It "
"could alter the given ``response`` by changing ``response.template_name`` "
"and ``response.context_data``, or it could create and return a brand-new :"
"class:`~django.template.response.TemplateResponse` or equivalent."
msgstr ""
"このメソッドは、``render`` メソッドを実装したレスポンスオブジェクトでなければ"
"なりません。このメソッド内では、与えられた ``response`` に対して ``response."
"template_name`` や ``response.context_data`` を修正したり、あるいは、新規に :"
"class:`~django.template.response.TemplateResponse` クラスのオブジェクト (ある"
"いはそれと同等なもの) を作成したりすることができます。"

msgid ""
"You don't need to explicitly render responses -- responses will be "
"automatically rendered once all template response middleware has been called."
msgstr ""
"ただし、レスポンスを自分でレンダリング (render) する必要はありません。なぜな"
"ら、レスポンスオブジェクトは、すべてのテンプレートレスポンスミドルウェアが呼"
"び出された後に、自動的にレンダリングされるからです。"

msgid ""
"Middleware are run in reverse order during the response phase, which "
"includes ``process_template_response()``."
msgstr ""
"レスポンスフェーズでは、ミドルウェアは逆順に呼び出されます。これには、"
"``process_template_response()`` も含まれます。"

msgid "Dealing with streaming responses"
msgstr "ストリーミングレスポンス (streaming responses) を扱う"

msgid ""
"Unlike :class:`~django.http.HttpResponse`, :class:`~django.http."
"StreamingHttpResponse` does not have a ``content`` attribute. As a result, "
"middleware can no longer assume that all responses will have a ``content`` "
"attribute. If they need access to the content, they must test for streaming "
"responses and adjust their behavior accordingly::"
msgstr ""
":class:`~django.http.HttpResponse` とは違い、:class:`~django.http."
"StreamingHttpResponse` は ``content`` 属性を持ちません。そのため、ミドルウェ"
"アはもはや、すべてのレスポンスが ``content`` 属性を持っていることを前提にする"
"ことができなくなります。したがって、content にアクセスする必要がある場合に"
"は、レスポンスオブジェクトがストリーミングレスポンスオブジェクトかどうかを"
"チェックし、その結果によって処理を場合分けしなければなりません。"

msgid ""
"``streaming_content`` should be assumed to be too large to hold in memory. "
"Response middleware may wrap it in a new generator, but must not consume it. "
"Wrapping is typically implemented as follows::"
msgstr ""
"``streaming_content`` はメモリ上に置けないくらい大きいと想定しておくべきで"
"す。レスポンスミドルウェアでは、これを新しいジェネレータでラップできます。し"
"かし、このジェネレータを処理することがあってはなりません。典型的なラップの方"
"法は、次のようになります。"

msgid ""
":class:`~django.http.StreamingHttpResponse` allows both synchronous and "
"asynchronous iterators. The wrapping function must match. Check :attr:"
"`StreamingHttpResponse.is_async <django.http.StreamingHttpResponse."
"is_async>` if your middleware needs to support both types of iterator."
msgstr ""
":class:`~django.http.StreamingHttpResponse` は同期イテレータと非同期イテレー"
"タの両方を受け付けます。ラッピング関数は一致する必要があります。ミドルウェア"
"がこの種のイテレータをサポートする必要がある場合には、:attr:"
"`StreamingHttpResponse.is_async <django.http.StreamingHttpResponse."
"is_async>` 確認してください。"

msgid "Support for streaming responses with asynchronous iterators was added."
msgstr ""
"非同期イテレータを使用したストリーミングレスポンスのサポートが追加されまし"
"た。"

msgid ""
"Django automatically converts exceptions raised by the view or by middleware "
"into an appropriate HTTP response with an error status code. :ref:`Certain "
"exceptions <error-views>` are converted to 4xx status codes, while an "
"unknown exception is converted to a 500 status code."
msgstr ""
"Django はビューまたはミドルウェアによって起こされた例外を、エラーステータス"
"コードを持つ適切な HTTP レスポンスに自動的に変換します。:ref:`特定の例外"
"<error-views>` は 4xx ステータスコードに変換されますが、未知の例外は 500 ス"
"テータスコードに変換されます。"

msgid ""
"This conversion takes place before and after each middleware (you can think "
"of it as the thin film in between each layer of the onion), so that every "
"middleware can always rely on getting some kind of HTTP response back from "
"calling its ``get_response`` callable. Middleware don't need to worry about "
"wrapping their call to ``get_response`` in a ``try/except`` and handling an "
"exception that might have been raised by a later middleware or the view. "
"Even if the very next middleware in the chain raises an :class:`~django.http."
"Http404` exception, for example, your middleware won't see that exception; "
"instead it will get an :class:`~django.http.HttpResponse` object with a :"
"attr:`~django.http.HttpResponse.status_code` of 404."
msgstr ""
"この変換は各ミドルウェアの前と後で行われます (玉ねぎの各層の間にある薄い皮の"
"ようなものとして考えられます)。そのため、すべてのミドルウェアは常に、呼び出し"
"可能な ``get_response`` の呼び出しから返ってきたある種の HTTP レスポンスを取"
"得することに依存しています。ミドルウェアは、``get_response`` への呼び出しを "
"``try/except`` の中にラッピングしたり、後ろのミドルウェアまたはビューから発生"
"する可能性のある例外を心配したり必要はありません。たとえ呼び出しチェーンのす"
"ぐ次のミドルウェアがたとえば :class:`~django.http.Http404` 例外を発生させたと"
"しても、ミドルウェアがその例外を見ることはなく、代わりに得るのは 404 の :"
"attr:`~django.http.HttpResponse.status_code` を持つ :class:`~django.http."
"HttpResponse` オブジェクトです。"

msgid ""
"You can set :setting:`DEBUG_PROPAGATE_EXCEPTIONS` to ``True`` to skip this "
"conversion and propagate exceptions upward."
msgstr ""
"この変換をスキップして例外を上に伝搬するには、:setting:"
"`DEBUG_PROPAGATE_EXCEPTIONS` を ``True`` に設定できます。"

msgid ""
"Middleware can support any combination of synchronous and asynchronous "
"requests. Django will adapt requests to fit the middleware's requirements if "
"it cannot support both, but at a performance penalty."
msgstr ""
"ミドルウェアは同期リクエストと非同期リクエストのどのような組み合わせでもサ"
"ポートできます。ミドルウェアが両方をサポートできない場合、Django はリクエスト"
"をミドルウェアの要求に合うように適応させますが、パフォーマンス上は不利になり"
"ます。"

msgid ""
"By default, Django assumes that your middleware is capable of handling only "
"synchronous requests. To change these assumptions, set the following "
"attributes on your middleware factory function or class:"
msgstr ""
"デフォルトでは、Django はミドルウェアが同期リクエストのみを処理できると想定し"
"ます。この前提を変更するには、ミドルウェア ファクトリ関数またはクラスに次の属"
"性を設定します。"

msgid ""
"``sync_capable`` is a boolean indicating if the middleware can handle "
"synchronous requests. Defaults to ``True``."
msgstr ""
"``sync_capable`` は、ミドルウェアが同期リクエストを処理できるかどうかを表す"
"ブール値です。デフォルトは ``True``。"

msgid ""
"``async_capable`` is a boolean indicating if the middleware can handle "
"asynchronous requests. Defaults to ``False``."
msgstr ""
"``async_capable`` は、ミドルウェアが非同期リクエストを処理できるかどうかを表"
"すブール値です。デフォルトは ``False``。"

msgid ""
"If your middleware has both ``sync_capable = True`` and ``async_capable = "
"True``, then Django will pass it the request without converting it. In this "
"case, you can work out if your middleware will receive async requests by "
"checking if the ``get_response`` object you are passed is a coroutine "
"function, using ``asgiref.sync.iscoroutinefunction``."
msgstr ""
"ミドルウェアが ``sync_capable = True`` と ``async_capable = True`` の両方を"
"持っている場合、Django はそれを変換せずにリクエストに渡します。この場合、ミド"
"ルウェアが非同期リクエストを受け取ったかどうかは、渡された ``get_response`` "
"オブジェクトがコルーチン関数かどうかを ``asgiref.sync.iscoroutinefunction`` "
"で確認できます。"

msgid ""
"The ``django.utils.decorators`` module contains :func:`~django.utils."
"decorators.sync_only_middleware`, :func:`~django.utils.decorators."
"async_only_middleware`, and :func:`~django.utils.decorators."
"sync_and_async_middleware` decorators that allow you to apply these flags to "
"middleware factory functions."
msgstr ""
"``django.utils.decorators`` モジュールには、ミドルウェアのファクトリ関数にこ"
"れらのフラグを設定できる :func:`~django.utils.decorators."
"sync_only_middleware`、:func:`~django.utils.decorators."
"async_only_middleware`、:func:`~django.utils.decorators."
"sync_and_async_middleware` デコレータが含まれています。"

msgid ""
"The returned callable must match the sync or async nature of the "
"``get_response`` method. If you have an asynchronous ``get_response``, you "
"must return a coroutine function (``async def``)."
msgstr ""
"返された callable は、``get_response`` メソッドの同期または非同期の性質と一致"
"していなければなりません。非同期の ``get_response`` がある場合、コルーチン関"
"数 (``async def``) を返さなければなりません。"

msgid ""
"``process_view``, ``process_template_response`` and ``process_exception`` "
"methods, if they are provided, should also be adapted to match the sync/"
"async mode. However, Django will individually adapt them as required if you "
"do not, at an additional performance penalty."
msgstr ""
"``process_view``、``process_template_response``、``process_exception`` メソッ"
"ドは、もし提供された場合、同期/非同期モードにも一致するように適応する必要があ"
"ります。ただし、適応させなかった場合でも Django は必要に応じてそれらを個別に"
"調整させますが、パフォーマンスがさらに低下します。"

msgid ""
"Here's an example of how to create a middleware function that supports both::"
msgstr "以下は、両方をサポートするミドルウェア関数の作成方法の例です。"

msgid ""
"If you declare a hybrid middleware that supports both synchronous and "
"asynchronous calls, the kind of call you get may not match the underlying "
"view. Django will optimize the middleware call stack to have as few sync/"
"async transitions as possible."
msgstr ""
"同期呼び出しと非同期呼び出しの両方をサポートするハイブリッド ミドルウェアを宣"
"言する場合、得られる呼び出しの種類が基になるビューと一致しなくなる可能性があ"
"ります。Django は同期/非同期の遷移ができる限り少なくなるように、ミドルウェア"
"のコールスタックを最適化します。"

msgid ""
"Thus, even if you are wrapping an async view, you may be called in sync mode "
"if there is other, synchronous middleware between you and the view."
msgstr ""
"よって、たとえ非同期ビューをラップしている場合でも、ビューとの間に他の同期ミ"
"ドルウェアが存在する場合、同期モードで呼び出される可能性があります。"

msgid ""
"When using an asynchronous class-based middleware, you must ensure that "
"instances are correctly marked as coroutine functions::"
msgstr ""
"非同期のクラスベースのミドルウェアを使用する場合は、次のようにしてインスタン"
"スが正しくコルーチン関数としてマークされていることを確認する必要があります。"

msgid "Upgrading pre-Django 1.10-style middleware"
msgstr "Django 1.10 以前のスタイルのミドルウェアをアップグレードする"

msgid ""
"Django provides ``django.utils.deprecation.MiddlewareMixin`` to ease "
"creating middleware classes that are compatible with both :setting:"
"`MIDDLEWARE` and the old ``MIDDLEWARE_CLASSES``, and support synchronous and "
"asynchronous requests. All middleware classes included with Django are "
"compatible with both settings."
msgstr ""
"Django は ``django.utils.deprecation.MiddlewareMixin`` を提供しています。これ"
"を使うと、:setting:`MIDDLEWARE` と古い ``MIDDLEWARE_CLASSES`` 両方に互換性が"
"あり、同期リクエストと非同期リクエストの両方をサポートするミドルウェアクラス"
"の作成が簡単になります。Django に含まれるすべてのミドルウェアクラスは、両方の"
"設定と互換性があります。"

msgid ""
"The mixin provides an ``__init__()`` method that requires a ``get_response`` "
"argument and stores it in ``self.get_response``."
msgstr ""
"mixin は ``__init__()`` メソッドを提供しています。これは、必須の "
"``get_response`` 引数を受け取って ``self.get_response`` に保持します。"

msgid "The ``__call__()`` method:"
msgstr "``__call__()`` メソッド:"

msgid "Calls ``self.process_request(request)`` (if defined)."
msgstr ""
"(定義されている場合) ``self.process_request(request)`` を呼び出します。"

msgid ""
"Calls ``self.get_response(request)`` to get the response from later "
"middleware and the view."
msgstr ""
"``self.get_response(request)`` を呼び出し、後のミドルウェアとビューからレスポ"
"ンスを得ます。"

msgid "Calls ``self.process_response(request, response)`` (if defined)."
msgstr ""
"(定義されている場合) ``self.process_response(request, response)`` を呼び出し"
"ます。"

msgid "Returns the response."
msgstr "レスポンスを返します。"

msgid ""
"If used with ``MIDDLEWARE_CLASSES``, the ``__call__()`` method will never be "
"used; Django calls ``process_request()`` and ``process_response()`` directly."
msgstr ""
"``MIDDLEWARE_CLASSES`` で使われている場合は、``__call__()`` メソッドは決して"
"使われません; Django は ``process_request()`` と ``process_response()`` を直"
"接呼び出します。"

msgid ""
"In most cases, inheriting from this mixin will be sufficient to make an old-"
"style middleware compatible with the new system with sufficient backwards-"
"compatibility. The new short-circuiting semantics will be harmless or even "
"beneficial to the existing middleware. In a few cases, a middleware class "
"may need some changes to adjust to the new semantics."
msgstr ""
"ほとんどの場合、この mixin を継承することで、旧式のミドルウェアと十分な下位互"
"換性を持つ新しいシステムと互換性を持たせることができます。 新しい短絡セマン"
"ティクスは無害であり、既存のミドルウェアにとっても有益です。 いくつかのケース"
"では、ミドルウェアクラスは新しいセマンティクスに調整するためにいくつかの変更"
"を必要とすることがあります。"

msgid ""
"These are the behavioral differences between using :setting:`MIDDLEWARE` and "
"``MIDDLEWARE_CLASSES``:"
msgstr ""
":setting:`MIDDLEWARE` と ``MIDDLEWARE_CLASSES`` の動作には以下のような違いが"
"あります。"

msgid ""
"Under ``MIDDLEWARE_CLASSES``, every middleware will always have its "
"``process_response`` method called, even if an earlier middleware short-"
"circuited by returning a response from its ``process_request`` method. "
"Under :setting:`MIDDLEWARE`, middleware behaves more like an onion: the "
"layers that a response goes through on the way out are the same layers that "
"saw the request on the way in. If a middleware short-circuits, only that "
"middleware and the ones before it in :setting:`MIDDLEWARE` will see the "
"response."
msgstr ""
"``MIDDLEWARE_CLASSES`` のもとでは、全てのミドルウェアは常にその "
"``process_response`` メソッドが呼び出されます。たとえその前のミドルウェアが "
"``process_request`` メソッドからレスポンスを返してショート（短絡）した場合で"
"もです。 :setting:`MIDDLEWARE` のもとでは、ミドルウェアはオニオンのように動作"
"します。レスポンスが外に出るときに通過するレイヤーは、リクエストが入るときに"
"見たのと同じレイヤーです。ミドルウェアがショートした場合、そのミドルウェアと"
"それより前にある :setting:`MIDDLEWARE` のミドルウェアのみがレスポンスを見るこ"
"とになります。"

msgid ""
"Under ``MIDDLEWARE_CLASSES``, ``process_exception`` is applied to exceptions "
"raised from a middleware ``process_request`` method. Under :setting:"
"`MIDDLEWARE`, ``process_exception`` applies only to exceptions raised from "
"the view (or from the ``render`` method of a :class:`~django.template."
"response.TemplateResponse`). Exceptions raised from a middleware are "
"converted to the appropriate HTTP response and then passed to the next "
"middleware."
msgstr ""
"``MIDDLEWARE_CLASSES`` のもとでは、ミドルウェアの ``process_request`` メソッ"
"ドから発生した例外に ``process_exception`` が適用されます。 :setting:"
"`MIDDLEWARE` のもとでは、 ``process_exception`` はビュー（または :class:"
"`~django.template.response.TemplateResponse` の ``render`` メソッド）から発生"
"した例外にのみ適用されます。ミドルウェアから発生した例外は適切な HTTP レスポ"
"ンスに変換され、次のミドルウェアに渡されます。"

msgid ""
"Under ``MIDDLEWARE_CLASSES``, if a ``process_response`` method raises an "
"exception, the ``process_response`` methods of all earlier middleware are "
"skipped and a ``500 Internal Server Error`` HTTP response is always returned "
"(even if the exception raised was e.g. an :class:`~django.http.Http404`). "
"Under :setting:`MIDDLEWARE`, an exception raised from a middleware will "
"immediately be converted to the appropriate HTTP response, and then the next "
"middleware in line will see that response. Middleware are never skipped due "
"to a middleware raising an exception."
msgstr ""
"``MIDDLEWARE_CLASSES`` のもとでは、もし ``process_response`` メソッドが例外を"
"発生させた場合、それ以前の全てのミドルウェアの ``process_response`` メソッド"
"はスキップされ、常に ``500 Internal Server Error`` HTTP レスポンスが返されま"
"す（たとえ発生した例外がたとえば :class:`~django.http.Http404` だったとしても"
"です）。 :setting:`MIDDLEWARE` のもとでは、ミドルウェアから例外が発生した場"
"合、直ちに適切な HTTP レスポンスに変換され、次のミドルウェアがそのレスポンス"
"を見ることになります。ミドルウェアが例外を発生させたことを理由にミドルウェア"
"がスキップされることはありません。"

msgid "How to use sessions"
msgstr "セッションの使いかた"

msgid ""
"Django provides full support for anonymous sessions. The session framework "
"lets you store and retrieve arbitrary data on a per-site-visitor basis. It "
"stores data on the server side and abstracts the sending and receiving of "
"cookies. Cookies contain a session ID -- not the data itself (unless you're "
"using the :ref:`cookie based backend<cookie-session-backend>`)."
msgstr ""
"Django は、匿名のセッションをフルサポートしています。このセッションフレーム"
"ワークを使えば、任意のデータを、サイトの訪問者ごとに保存し、取得できます。"
"データはサーバー側に保存され、クッキーの送受信によって抽象化します。クッキー"
"には、データそのものではなくセッション ID が書かれています ( :ref:`クッキー"
"ベースのバックエンド <cookie-session-backend>` を使用しない限り)。"

msgid "Enabling sessions"
msgstr "セッションを有効にする"

msgid ""
"Sessions are implemented via a piece of :doc:`middleware </ref/middleware>`."
msgstr ""
"セッションは、 :doc:`ミドルウェア </ref/middleware>` の1つを使って実装されて"
"います。"

msgid "To enable session functionality, do the following:"
msgstr "セッションの機能を有効にするには、次のように設定を行います。"

msgid ""
"Edit the :setting:`MIDDLEWARE` setting and make sure it contains ``'django."
"contrib.sessions.middleware.SessionMiddleware'``. The default ``settings."
"py`` created by ``django-admin startproject`` has ``SessionMiddleware`` "
"activated."
msgstr ""
":setting:`MIDDLEWARE` 設定を編集し ``'django.contrib.sessions.middleware."
"SessionMiddleware'`` を含むようにする。 ``django-admin startproject`` で作ら"
"れるデフォルトの ``settings.py`` は ``SessionMiddleware`` が有効化されていま"
"す。"

msgid ""
"If you don't want to use sessions, you might as well remove the "
"``SessionMiddleware`` line from :setting:`MIDDLEWARE` and ``'django.contrib."
"sessions'`` from your :setting:`INSTALLED_APPS`. It'll save you a small bit "
"of overhead."
msgstr ""
"セッションを使いたくない場合は、 :setting:`MIDDLEWARE` 内の "
"``SessionMiddleware`` 行と :setting:`INSTALLED_APPS` 内の ``'django.contrib."
"sessions'`` を削除しても構いません。これで、オーバーヘッドが少しだけ短縮され"
"ます。"

msgid "Configuring the session engine"
msgstr "セッションエンジンを設定する"

msgid ""
"By default, Django stores sessions in your database (using the model "
"``django.contrib.sessions.models.Session``). Though this is convenient, in "
"some setups it's faster to store session data elsewhere, so Django can be "
"configured to store session data on your filesystem or in your cache."
msgstr ""
"デフォルトでは、Django はセッションを、(``django.contrib.sessions.models."
"Session`` モデルを用いて) データベースに保存します。これは便利ですが、セット"
"アップによってはセッションのデータを他の場所においたほうが高速化できる場合が"
"あります。そのため、Django はセッションデータをファイルシステムやキャッシュに"
"保存するように設定できます。"

msgid "Using database-backed sessions"
msgstr "データベースを使ったセッション"

msgid ""
"If you want to use a database-backed session, you need to add ``'django."
"contrib.sessions'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""
"データベースを使った (database-backed) セッションを使いたい場合には、設定ファ"
"イルの :setting:`INSTALLED_APPS`  に ``'django.contrib.sessions'`` を追加する"
"必要があります。"

msgid ""
"Once you have configured your installation, run ``manage.py migrate`` to "
"install the single database table that stores session data."
msgstr ""
"一度インストールの設定をすれば、``manage.py migrate`` を実行することで、セッ"
"ションデータを保存する1つのデータベーステーブルをインストールできます。"

msgid "Using cached sessions"
msgstr "キャッシュを使ったセッション"

msgid ""
"For better performance, you may want to use a cache-based session backend."
msgstr ""
"よいパフォーマンスを発揮するには、キャッシュを使ったセッションバックエンドを"
"利用した方が良いかもしれません。"

msgid ""
"To store session data using Django's cache system, you'll first need to make "
"sure you've configured your cache; see the :doc:`cache documentation </"
"topics/cache>` for details."
msgstr ""
"Django のキャッシュシステムを使ってセッションデータを保存するには、まず初め"
"に、キャッシュの設定を済ませておく必要があります。詳しくは、 :doc:`キャッシュ"
"のドキュメンテーション </topics/cache>` を読んでください。"

msgid ""
"You should only use cache-based sessions if you're using the Memcached or "
"Redis cache backend. The local-memory cache backend doesn't retain data long "
"enough to be a good choice, and it'll be faster to use file or database "
"sessions directly instead of sending everything through the file or database "
"cache backends. Additionally, the local-memory cache backend is NOT multi-"
"process safe, therefore probably not a good choice for production "
"environments."
msgstr ""
"キャッシュを使ったセッションを用いるのは、Memcached または Redis キャッシュ"
"バックエンドを使用している場合だけにするべきです。ローカルなメモリキャッシュ"
"バックエンドを使用している場合、長時間データをメモリ上に保持しておくのは良い"
"考えではありませんし、全てのデータをファイルやデータベースキャッシュバックエ"
"ンドを通して送信するよりも、ファイルやデータベースに保存されたセッションから"
"直接送信した方が高速だからです。加えて、ローカルなメモリキャッシュバックエン"
"ドは、マルチプロセスに対して安全「ではありません」。したがって、実環境ではあ"
"まり良い選択とは言えないでしょう。"

msgid ""
"If you have multiple caches defined in :setting:`CACHES`, Django will use "
"the default cache. To use another cache, set :setting:`SESSION_CACHE_ALIAS` "
"to the name of that cache."
msgstr ""
"設定ファイルの :setting:`CACHES` で複数のキャッシュを定義している場合、"
"Django はデフォルトのキャッシュを使用します。他のキャッシュを使用するには、:"
"setting:`SESSION_CACHE_ALIAS` を使用したいキャッシュの名前に変更します。"

msgid ""
"Once your cache is configured, you have to choose between a database-backed "
"cache or a non-persistent cache."
msgstr ""
"一度キャッシュが設定されると、データベース ベースのキャッシュ(database-"
"backed cache) か非永続キャッシュ (non-persistent cache) のどちらかを選択する"
"必要があります。"

msgid ""
"The cached database backend (``cached_db``) uses a write-through cache -- "
"session writes are applied to both the cache and the database. Session reads "
"use the cache, or the database if the data has been evicted from the cache. "
"To use this backend, set :setting:`SESSION_ENGINE` to ``\"django.contrib."
"sessions.backends.cached_db\"``, and follow the configuration instructions "
"for the `using database-backed sessions`_."
msgstr ""
"キャッシュされたデータベースバックエンド (``cached_db``) はライトスルーキャッ"
"シュを使用します。セッションの書き込みはキャッシュとデータベースの両方に適用"
"されます。セッションの読み取りはキャッシュを使用し、データがキャッシュから追"
"い出されている場合はデータベースを使用します。このバックエンドを使用するに"
"は、 :setting:`SESSION_ENGINE` を ``\"django.contrib.sessions.backends."
"cached_db\"`` に設定し、 `using database-backed sessions`_ の設定手順に従って"
"ください。"

msgid ""
"The cache backend (``cache``) stores session data only in your cache. This "
"is faster because it avoids database persistence, but you will have to "
"consider what happens when cache data is evicted. Eviction can occur if the "
"cache fills up or the cache server is restarted, and it will mean session "
"data is lost, including logging out users. To use this backend, set :setting:"
"`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cache\"``."
msgstr ""
"キャッシュバックエンド (``cache``) はセッションデータをキャッシュにのみ保存し"
"ます。これはデータベースの永続化を避けることができるので高速ですが、キャッ"
"シュデータが削除されたときのことを考慮しなければなりません。キャッシュが一杯"
"になったりキャッシュサーバーが再起動したりしたときにキャッシュが削除される可"
"能性があり、ユーザーのログアウトを含めてセッションデータが失われることになり"
"ます。このバックエンドを使うには、 :setting:`SESSION_ENGINE` を ``\"django."
"contrib.sessions.backends.cache\"`` に設定してください。"

msgid ""
"The cache backend can be made persistent by using a persistent cache, such "
"as Redis with appropriate configuration. But unless your cache is definitely "
"configured for sufficient persistence, opt for the cached database backend. "
"This avoids edge cases caused by unreliable data storage in production."
msgstr ""
"キャッシュバックエンドを永続化するには、Redis などの永続キャッシュを適切な設"
"定で使用します。しかし、キャッシュが十分に永続化できるように確実に設定されて"
"いない限り、キャッシュデータベースバックエンドを選びましょう。これにより、運"
"用時に信頼性の低いデータストレージによって引き起こされるエッジケースを避ける"
"ことができます。"

msgid "Using file-based sessions"
msgstr "ファイルを使ったセッション"

msgid ""
"To use file-based sessions, set the :setting:`SESSION_ENGINE` setting to "
"``\"django.contrib.sessions.backends.file\"``."
msgstr ""
"ファイルを使ったセッションを使用するには、:setting:`SESSION_ENGINE` を "
"``\"django.contrib.sessions.backends.file\"`` に設定します。"

msgid ""
"You might also want to set the :setting:`SESSION_FILE_PATH` setting (which "
"defaults to output from ``tempfile.gettempdir()``, most likely ``/tmp``) to "
"control where Django stores session files. Be sure to check that your web "
"server has permissions to read and write to this location."
msgstr ""
"Django がセッションファイルを保存する場所を設定したい場合には、:setting:"
"`SESSION_FILE_PATH` を設定します (出力先のデフォルト値は、``tempfile."
"gettempdir()``、普通は ``/tmp`` になっています)。ウェブサーバが設定した場所の"
"読み書きの権限を持っていることを確認しておいてください。"

msgid "Using cookie-based sessions"
msgstr "クッキーを使ったセッション"

msgid ""
"To use cookies-based sessions, set the :setting:`SESSION_ENGINE` setting to "
"``\"django.contrib.sessions.backends.signed_cookies\"``. The session data "
"will be stored using Django's tools for :doc:`cryptographic signing </topics/"
"signing>` and the :setting:`SECRET_KEY` setting."
msgstr ""
"クッキーを使ったセッションを使用するには、 :setting:`SESSION_ENGINE` を "
"``\"django.contrib.sessions.backends.signed_cookies\"`` に設定します。セッ"
"ションデータは、 :doc:`暗号化署名 </topics/signing>` のための Django のツール"
"と :setting:`SECRET_KEY` を使って保存されます。"

msgid ""
"It's recommended to leave the :setting:`SESSION_COOKIE_HTTPONLY` setting on "
"``True`` to prevent access to the stored data from JavaScript."
msgstr ""
"保存されたデータに JavaScript からアクセスできないように、:setting:"
"`SESSION_COOKIE_HTTPONLY` を ``True`` に設定しておくことをおすすめします。"

msgid "**The session data is signed but not encrypted**"
msgstr ""
"**このセッションデータは、署名はされていますが、暗号化はされていません。**"

msgid ""
"When using the cookies backend the session data can be read by the client."
msgstr ""
"クッキーバックエンドを使う時には、セッションデータはクライアントが自由に読む"
"ことができます。"

msgid ""
"A MAC (Message Authentication Code) is used to protect the data against "
"changes by the client, so that the session data will be invalidated when "
"being tampered with. The same invalidation happens if the client storing the "
"cookie (e.g. your user's browser) can't store all of the session cookie and "
"drops data. Even though Django compresses the data, it's still entirely "
"possible to exceed the :rfc:`common limit of 4096 bytes <2965#section-5.3>` "
"per cookie."
msgstr ""
"MAC (Message Authentication Code; メッセージ認証コード) を使っているので、た"
"とえクライアントがデータを勝手に書き変えてしまったとしても、書き換えられた"
"セッションデータは無効と判定されます。しかし、たとえばミューザのブラウザが保"
"存しているクッキーを保存できたとしても、セッションクッキーのデータがすべて保"
"存できず、データの一部が失われることがあり、この場合にもセッションデータは無"
"効となってしまいます。Django はデータを圧縮しますが、それでもデータのサイズが"
"1クッキーごとの  :rfc:`一般的な制限の 4096 バイト <2965#section-5.3>` を超え"
"てしまうことは十分に考えられることです。"

msgid "**No freshness guarantee**"
msgstr "**情報が最新であることは保証されません**"

msgid ""
"Note also that while the MAC can guarantee the authenticity of the data "
"(that it was generated by your site, and not someone else), and the "
"integrity of the data (that it is all there and correct), it cannot "
"guarantee freshness i.e. that you are being sent back the last thing you "
"sent to the client. This means that for some uses of session data, the "
"cookie backend might open you up to `replay attacks`_. Unlike other session "
"backends which keep a server-side record of each session and invalidate it "
"when a user logs out, cookie-based sessions are not invalidated when a user "
"logs out. Thus if an attacker steals a user's cookie, they can use that "
"cookie to login as that user even if the user logs out. Cookies will only be "
"detected as 'stale' if they are older than your :setting:"
"`SESSION_COOKIE_AGE`."
msgstr ""
"MAC のおかげで、データの認証性 (データが他のサイトではなく、確実に自分のサイ"
"トで作られたものであること) と、完全性 (データが存在し、データが正しいこと) "
"は保証されますが、そのデータが最新のものであることは保証することができませ"
"ん。つまり、クライアントからデータを受け取ったとしても、そのデータがユーザに"
"最後に送った最新のデータであることは保証できないのです。ということは、セッ"
"ションデータの使い方によっては、クッキーバックエンドでは  `replay attacks`_ "
"ができてしまうことになります。他のセッションバックエンドでは、サーバー側に各"
"セッションの記録が残るので、ユーザがログアウトした時にそれを無効化できます"
"が、クッキーを使ったセッションの場合には、ユーザがログアウトしてもセッション"
"は無効化されません。したがって、攻撃者がユーザのクッキーを盗めば、たとえユー"
"ザがログアウトしていたとしても、そのクッキーを使ってユーザになりすますことが"
"できてしまいます。クッキーが「古くなった」と判断できるのは、:setting:"
"`SESSION_COOKIE_AGE` を過ぎた場合だけだからです。"

msgid "**Performance**"
msgstr "**パフォーマンス**"

msgid ""
"Finally, the size of a cookie can have an impact on the speed of your site."
msgstr ""
"最後に、クッキーのサイズが大きくなると、サイトの速度にも大きな影響がありま"
"す。"

msgid "Using sessions in views"
msgstr "ビューでセッションを使う"

msgid ""
"When ``SessionMiddleware`` is activated, each :class:`~django.http."
"HttpRequest` object -- the first argument to any Django view function -- "
"will have a ``session`` attribute, which is a dictionary-like object."
msgstr ""
"``SessionMiddleware`` を有効にすれば、それぞれの :class:`~django.http."
"HttpRequest` オブジェクト（Django のビュー関数に渡される最初の引数）は、辞書"
"ライクなオブジェクトの ``session`` 属性を持つようになります。"

msgid ""
"You can read it and write to ``request.session`` at any point in your view. "
"You can edit it multiple times."
msgstr ""
"この ``request.session`` には、ビューの好きな場所で、何度でも、読み書きを行う"
"ことができます。"

msgid ""
"This is the base class for all session objects. It has the following "
"standard dictionary methods:"
msgstr ""
"このオブジェクトは、すべてのセッションオブジェクトのベースクラスとなっている"
"ので、以下に挙げるような基本的なディクショナリのメソッドを持っています。"

msgid "Example: ``fav_color = request.session['fav_color']``"
msgstr "例: ``fav_color = request.session['fav_color']``"

msgid "Example: ``request.session['fav_color'] = 'blue'``"
msgstr "例: ``request.session['fav_color'] = 'blue'``"

msgid ""
"Example: ``del request.session['fav_color']``. This raises ``KeyError`` if "
"the given ``key`` isn't already in the session."
msgstr ""
"例: ``del request.session['fav_color']`` 与えられた ``key`` がセッション内に"
"ない場合には、``KeyError`` 例外を起こします。"

msgid "Example: ``'fav_color' in request.session``"
msgstr "例: ``'fav_color' in request.session``"

msgid "Example: ``fav_color = request.session.get('fav_color', 'red')``"
msgstr "例: ``fav_color = request.session.get('fav_color', 'red')``"

msgid "Example: ``fav_color = request.session.pop('fav_color', 'blue')``"
msgstr "例: ``fav_color = request.session.pop('fav_color', 'blue')``"

msgid "It also has these methods:"
msgstr "また、次のようなメソッドも利用できます。"

msgid ""
"Deletes the current session data from the session and deletes the session "
"cookie. This is used if you want to ensure that the previous session data "
"can't be accessed again from the user's browser (for example, the :func:"
"`django.contrib.auth.logout()` function calls it)."
msgstr ""
"セッションから現在のセッションデータを削除し、セッションクッキーを削除しま"
"す。このメソッドは、前回のセッションデータがユーザのブラウザから再びアクセス"
"されないようにするためなどに使います (たとえば、:func:`django.contrib.auth."
"logout()` がこの関数を呼びます)。"

msgid ""
"Sets a test cookie to determine whether the user's browser supports cookies. "
"Due to the way cookies work, you won't be able to test this until the user's "
"next page request. See `Setting test cookies`_ below for more information."
msgstr ""
"ユーザのブラウザがクッキーをサポートしているかどうか判定するために、テスト用"
"のクッキーをセットします。クッキーの動作原理により、ユーザが次のページへのリ"
"クエストを行わないとこのテストは行えません。詳しい情報については、下の "
"`Setting test cookies`_ を読んでください。"

msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"browser accepted the test cookie. Due to the way cookies work, you'll have "
"to call ``set_test_cookie()`` on a previous, separate page request. See "
"`Setting test cookies`_ below for more information."
msgstr ""
"ユーザのブラウザがテストクッキーを正しく保存したかどうかに応じて、``True`` ま"
"たは ``False`` を返します。クッキーの動作原理により、あらかじめ別のページのリ"
"クエストとして ``set_test_cookie()`` を呼び出しておく必要があります。詳しい情"
"報については、下の `Setting test cookies`_ を読んでください。"

msgid "Deletes the test cookie. Use this to clean up after yourself."
msgstr ""
"テストクッキーを削除します。クッキーをきれいにしておくために使ってください。"

msgid ""
"Returns the value of the setting :setting:`SESSION_COOKIE_AGE`. This can be "
"overridden in a custom session backend."
msgstr ""
":setting:`SESSION_COOKIE_AGE` の設定値を返します。これはカスタム セッション "
"バックエンドで上書きできます。"

msgid ""
"Sets the expiration time for the session. You can pass a number of different "
"values:"
msgstr ""
"セッションの有効期限を設定します。以下に挙げるようなさまざまな値を与えること"
"ができます。"

msgid ""
"If ``value`` is an integer, the session will expire after that many seconds "
"of inactivity. For example, calling ``request.session.set_expiry(300)`` "
"would make the session expire in 5 minutes."
msgstr ""
"もし ``value`` が整数なら、与えられた秒数だけ活動がなかった時にセッションを破"
"棄します。たとえば、``request.session.set_expiry(300)`` と呼び出せば、5分後に"
"セッションを破棄するように設定できます。"

msgid ""
"If ``value`` is a ``datetime`` or ``timedelta`` object, the session will "
"expire at that specific date/time."
msgstr ""
"もし ``value`` が ``datetime`` または ``timedelta`` オブジェクトであれば、"
"セッションはその日時で終了します。"

msgid ""
"If ``value`` is ``0``, the user's session cookie will expire when the user's "
"web browser is closed."
msgstr ""
"もし ``value`` が ``0`` ならば、ユーザのセッションクッキーは、ユーザがウェブ"
"ブラウザを閉じた時に破棄されます。"

msgid ""
"If ``value`` is ``None``, the session reverts to using the global session "
"expiry policy."
msgstr ""
"もし ``value`` が ``None`` ならば、セッションはグローバルなセッション有効期限"
"ポリシーにしたがって扱われます。"

msgid ""
"Reading a session is not considered activity for expiration purposes. "
"Session expiration is computed from the last time the session was *modified*."
msgstr ""
"セッションの読み込みを行っても、有効期限は延長されません。セッションの有効期"
"限は、セッションが最後に *修正された* 時点を基に計算されます。"

msgid ""
"Returns the number of seconds until this session expires. For sessions with "
"no custom expiration (or those set to expire at browser close), this will "
"equal :setting:`SESSION_COOKIE_AGE`."
msgstr ""
"このセッションの有効期限までの残りの秒数を返します。カスタムの有効期限を持た"
"ない (または、ブラウザを閉じた時とセットした) セッションの場合、この値は :"
"setting:`SESSION_COOKIE_AGE` と等しいです。"

msgid "This function accepts two optional keyword arguments:"
msgstr "この関数は 2 つの省略可能なキーワード引数を取ることができます。"

msgid ""
"``modification``: last modification of the session, as a :class:`~datetime."
"datetime` object. Defaults to the current time."
msgstr ""
"``modification``: セッションを最後に修正した時刻を :class:`~datetime."
"datetime` オブジェクトとして与える。デフォルトは現在の時刻。"

msgid ""
"``expiry``: expiry information for the session, as a :class:`~datetime."
"datetime` object, an :class:`int` (in seconds), or ``None``. Defaults to the "
"value stored in the session by :meth:`set_expiry`, if there is one, or "
"``None``."
msgstr ""
"``expiry``: セッションの有効期限の情報を :class:`~datetime.datetime` オブジェ"
"クト、:class:`int` (秒数で)、または ``None`` として与えます。デフォルトの値"
"は、もしあれば、セッションに保存されている :meth:`set_expiry` で得られる値、"
"なければ ``None`` です。"

msgid ""
"This method is used by session backends to determine the session expiry age "
"in seconds when saving the session. It is not really intended for usage "
"outside of that context."
msgstr ""
"このメソッドは、セッションを保存する際にセッションの有効期限を秒単位で決定す"
"るためにセッションバックエンドで使用されます。このようなコンテキスト以外での"
"使用は想定していません。"

msgid ""
"In particular, while it is **possible** to determine the remaining lifetime "
"of a session **just when** you have the correct ``modification`` value "
"**and** the ``expiry`` is set as a ``datetime`` object, where you do have "
"the ``modification`` value, it is more straight-forward to calculate the "
"expiry by-hand::"
msgstr ""
"特に、正しい ``modification`` 値があり、 **かつ** ``expiry`` が ``datetime`` "
"オブジェクトとしてセットされている場合にのみ、セッションの残り寿命を決定する"
"ことが **可能** ですが、 ``modification`` 値を持っている場合、有効期限を手動"
"で計算する方がより直接的です:"

msgid ""
"Returns the date this session will expire. For sessions with no custom "
"expiration (or those set to expire at browser close), this will equal the "
"date :setting:`SESSION_COOKIE_AGE` seconds from now."
msgstr ""
"このセッションが破棄される日付を返します。カスタムの有効期限を持たない (また"
"は、ブラウザを閉じた時とセットした) セッションに対しては、現在時刻から :"
"setting:`SESSION_COOKIE_AGE` の秒数までの日付に等しいです。"

msgid ""
"This function accepts the same keyword arguments as :meth:`get_expiry_age`, "
"and similar notes on usage apply."
msgstr ""
"この関数は、:meth:`get_expiry_age` と同じキーワード引数を取ることができ、使用"
"の際の注意点も同じです。"

msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"session cookie will expire when the user's web browser is closed."
msgstr ""
"ユーザのセッションクッキーがユーザのブラウザが閉じた時に破棄されるかどうかに"
"応じて、``True`` または ``False`` を返します。"

msgid ""
"Removes expired sessions from the session store. This class method is called "
"by :djadmin:`clearsessions`."
msgstr ""
"保存されているセッションから、有効期限が切れているものを削除します。このクラ"
"スメソッドは、:djadmin:`clearsessions` から呼び出されます。"

msgid ""
"Creates a new session key while retaining the current session data. :func:"
"`django.contrib.auth.login()` calls this method to mitigate against session "
"fixation."
msgstr ""
"現在のセッションデータを保持したまま、新しいセッションキーを作成します。:"
"func:`django.contrib.auth.login()` は、このメソッドを呼び出すことで、過去の"
"セッションを継続できるようにしています。"

msgid "Session serialization"
msgstr "セッションのシリアライズ"

msgid ""
"By default, Django serializes session data using JSON. You can use the :"
"setting:`SESSION_SERIALIZER` setting to customize the session serialization "
"format. Even with the caveats described in :ref:`custom-serializers`, we "
"highly recommend sticking with JSON serialization *especially if you are "
"using the cookie backend*."
msgstr ""
"デフォルトでは、Django はセッションデータを JSON を用いてシリアライズします。"
"設定ファイルの :setting:`SESSION_SERIALIZER` に設定すれば、セッションをシリア"
"ライズするフォーマットをカスカムできます。 :ref:`custom-serializers` に書いた"
"注意書きの通り、JSON によるシリアライズを強く推奨します。 *クッキーバックエン"
"ドを利用している場合は特に* です。"

msgid ""
"For example, here's an attack scenario if you use :mod:`pickle` to serialize "
"session data. If you're using the :ref:`signed cookie session backend "
"<cookie-session-backend>` and :setting:`SECRET_KEY` (or any key of :setting:"
"`SECRET_KEY_FALLBACKS`) is known by an attacker (there isn't an inherent "
"vulnerability in Django that would cause it to leak), the attacker could "
"insert a string into their session which, when unpickled, executes arbitrary "
"code on the server. The technique for doing so is simple and easily "
"available on the internet. Although the cookie session storage signs the "
"cookie-stored data to prevent tampering, a :setting:`SECRET_KEY` leak "
"immediately escalates to a remote code execution vulnerability."
msgstr ""
"たとえば、セッションデータをシリアライズするために :mod:`pickle` を使用してい"
"た場合の、こんな攻撃のシナリオを考えてみましょう。あなたは :ref:`署名したクッ"
"キーセッションバックエンド <cookie-session-backend>` を使用していて、:"
"setting:`SECRET_KEY` (または :setting:`SECRET_KEY_FALLBACKS` の任意のキー) が"
"攻撃者に知られてしまっていたとします (もちろん、これは Django にキーが流出す"
"る脆弱性が内在しているというわけではありません)。この時、攻撃者は、セッション"
"に任意の文字列を挿入することができてしまい、このセッションを unpickle する"
"と、サーバ上で任意のコードが実行されてしまいます。このような攻撃は、インター"
"ネット上のどこからでも簡単にできてしまいます。クッキーセッションストレージ"
"は、クッキーに保存されているデータが勝手に書き換えられないようにクッキーに署"
"名をしていますが、 :setting:`SECRET_KEY` が流出するだけで、リモートからコード"
"を実行されてしまう脆弱性が生まれてしまうのです。"

msgid "Bundled serializers"
msgstr "バンドルされているシリアライザ"

msgid ""
"A wrapper around the JSON serializer from :mod:`django.core.signing`. Can "
"only serialize basic data types."
msgstr ""
":mod:`django.core.signing` の JSON シリアライザのラッパーです。基本的なデータ"
"型だけがシリアライズ可能です。"

msgid ""
"In addition, as JSON supports only string keys, note that using non-string "
"keys in ``request.session`` won't work as expected:"
msgstr ""
"また、JSON は文字列のキーしかサポートしていないので、``request.session`` に文"
"字列以外のキーを使用してしまうと、次のように期待通りに動いてくれません。"

msgid ""
"Similarly, data that can't be encoded in JSON, such as non-UTF8 bytes like "
"``'\\xd9'`` (which raises :exc:`UnicodeDecodeError`), can't be stored."
msgstr ""
"同様に、 ``'\\xd9'`` のような UTF-8 以外のバイトなど、JSONでエンコードできな"
"いデータは保存できません（これは :exc:`UnicodeDecodeError` を発生させます）。"

msgid ""
"See the :ref:`custom-serializers` section for more details on limitations of "
"JSON serialization."
msgstr ""
"JSON によるシリアライズの制限について詳しくは、:ref:`custom-serializers` セク"
"ションを読んでください。"

msgid "Write your own serializer"
msgstr "自作のシリアライザを書く"

msgid ""
"Note that the :class:`~django.contrib.sessions.serializers.JSONSerializer` "
"cannot handle arbitrary Python data types. As is often the case, there is a "
"trade-off between convenience and security. If you wish to store more "
"advanced data types including ``datetime`` and ``Decimal`` in JSON backed "
"sessions, you will need to write a custom serializer (or convert such values "
"to a JSON serializable object before storing them in ``request.session``). "
"While serializing these values is often straightforward (:class:`~django."
"core.serializers.json.DjangoJSONEncoder` may be helpful), writing a decoder "
"that can reliably get back the same thing that you put in is more fragile. "
"For example, you run the risk of returning a ``datetime`` that was actually "
"a string that just happened to be in the same format chosen for "
"``datetime``\\s)."
msgstr ""
":class:`~django.contrib.sessions.serializers.JSONSerializer` では、任意の "
"Python データ型を扱うことができません。よくあることですが、利便性とセキュリ"
"ティはトレード・オフの関係にあります。JSON を使ったセッション内に "
"``datetime`` や ``Decimal`` といった、より高度なデータ型を保存したければ、カ"
"スタムのシリアライザを書く (か、``request.session`` に保存する前に、あらかじ"
"めその値を JSON でシリアライズ可能なオブジェクトに変換しておく) 必要がありま"
"す。これらの値をシリアライズするのは全然難しくありません (:class:`~django."
"core.serializers.json.DjangoJSONEncoder` が役に立つかも知れません) が、シリア"
"ライズしたオブジェクトと全く同じデータを再取得できる信頼性の高いデコーダを書"
"く方は、もう少し難しい仕事になります。たとえば、本当は文字列であるにも関わら"
"ず、たまたま ``datetime`` を表現するのと全く同じフォーマットの文字列に出会う"
"という可能性があります。"

msgid ""
"Your serializer class must implement two methods, ``dumps(self, obj)`` and "
"``loads(self, data)``, to serialize and deserialize the dictionary of "
"session data, respectively."
msgstr ""
"シリアライザのクラスは、必ず次の2つのメソッドを実装しなければなりません。セッ"
"ションデータのディクショナリをシリアライズする ``dumps(self, obj)`` と、それ"
"をデシリアライズする ``loads(self, data)`` の2つです。"

msgid "Session object guidelines"
msgstr "セッションオブジェクトのガイドライン"

msgid ""
"Use normal Python strings as dictionary keys on ``request.session``. This is "
"more of a convention than a hard-and-fast rule."
msgstr ""
"Python の普通の文字列を、``request.session`` におけるディクショナリのキーとし"
"て使うこと。これは慣習のためというよりも、確実で高速にするためのルールです。"

msgid ""
"Session dictionary keys that begin with an underscore are reserved for "
"internal use by Django."
msgstr ""
"セッションのディクショナリのキーで、アンダースコアで始まるキーは、Django が内"
"部で使用するために予約されているものと考えること。"

msgid ""
"Don't override ``request.session`` with a new object, and don't access or "
"set its attributes. Use it like a Python dictionary."
msgstr ""
"``request.session`` を新しいオブジェクトで上書きせず、その属性にアクセスした"
"り、値をセットしたりしないこと。Python のディクショナリのように扱うこと。"

msgid ""
"This simplistic view sets a ``has_commented`` variable to ``True`` after a "
"user posts a comment. It doesn't let a user post a comment more than once::"
msgstr ""
"次の簡単なビューは、ユーザがコメントを投稿した後で、``has_commented`` 変数を "
"``True`` に設定します。こうすることで、同じユーザが2回以上コメントできないよ"
"うにすることができます。"

msgid "This simplistic view logs in a \"member\" of the site::"
msgstr ""
"次の次の簡単なビューでは、サイトの「メンバー (member)」にログインする手続きを"
"行います。"

msgid "...And this one logs a member out, according to ``login()`` above::"
msgstr ""
"そして、次の例では、上の ``login()`` に対応するメンバーのログアウト処理を行い"
"ます。"

msgid ""
"The standard :meth:`django.contrib.auth.logout` function actually does a bit "
"more than this to prevent inadvertent data leakage. It calls the :meth:"
"`~backends.base.SessionBase.flush` method of ``request.session``. We are "
"using this example as a demonstration of how to work with session objects, "
"not as a full ``logout()`` implementation."
msgstr ""
"ふつう実際に使われる :meth:`django.contrib.auth.logout` 関数では、データの意"
"図しない漏洩を防ぐために、この例より少し複雑な処理、``request.session`` の :"
"meth:`~backends.base.SessionBase.flush` メソッドを呼び出すなどの処理を行って"
"います。ここで挙げた例は、単にセッションオブジェクトの振る舞いをデモンスト"
"レーションすることが目的なので、完全ではない ``logout()`` を実装しました。"

msgid "Setting test cookies"
msgstr "テストクッキーを設定する"

msgid ""
"As a convenience, Django provides a way to test whether the user's browser "
"accepts cookies. Call the :meth:`~backends.base.SessionBase.set_test_cookie` "
"method of ``request.session`` in a view, and call :meth:`~backends.base."
"SessionBase.test_cookie_worked` in a subsequent view -- not in the same view "
"call."
msgstr ""
"利便性のため、Django はユーザのブラウザがクッキーを受け入れることができるかど"
"うかをテストするための方法を提供しています。テストをするには、一度ビューの中"
"で ``request.session`` の :meth:`~backends.base.SessionBase.set_test_cookie` "
"メソッドを呼び出してから、同じビューではなく、次に呼び出されるビューの中"
"で、 :meth:`~backends.base.SessionBase.test_cookie_worked` メソッドを呼び出し"
"ます。"

msgid ""
"This awkward split between ``set_test_cookie()`` and "
"``test_cookie_worked()`` is necessary due to the way cookies work. When you "
"set a cookie, you can't actually tell whether a browser accepted it until "
"the browser's next request."
msgstr ""
"このように ``set_test_cookie()`` と ``test_cookie_worked()`` を分離しなければ"
"ならないのはちょっと気持ち悪いですが、クッキーの動作原理により、こうするより"
"仕方がないのです。一度ブラウザにクッキーを設定しても、そのクッキーがブラウザ"
"に保存されたかどうかを確認するには、ブラウザがもう一度リクエストを行わなけれ"
"ばならないからです。"

msgid ""
"It's good practice to use :meth:`~backends.base.SessionBase."
"delete_test_cookie()` to clean up after yourself. Do this after you've "
"verified that the test cookie worked."
msgstr ""
"テストクッキーがちゃんと機能していることを確認できたら、:meth:`~backends."
"base.SessionBase.delete_test_cookie()` を使ってセッションをきれいにしておくこ"
"とにしましょう。"

msgid "Here's a typical usage example::"
msgstr "以下に、テストクッキーの典型的な使用例を挙げます。"

msgid "Using sessions out of views"
msgstr "ビューの外でセッションを使う"

msgid ""
"The examples in this section import the ``SessionStore`` object directly "
"from the ``django.contrib.sessions.backends.db`` backend. In your own code, "
"you should consider importing ``SessionStore`` from the session engine "
"designated by :setting:`SESSION_ENGINE`, as below:"
msgstr ""
"このセクションの例では、``SessionStore`` オブジェクトを直接 ``django.contrib."
"sessions.backends.db`` バックエンドからインポートしています。しかし、実際に自"
"分でコートを書く場合には、以下のようにして、:setting:`SESSION_ENGINE` が指す"
"セッションエンジンから ``SessionStore`` をインポートすることを考えるべきで"
"す。"

msgid "An API is available to manipulate session data outside of a view:"
msgstr ""
"次のようにして、ビューの外からセッションデータを操作する API が利用可能です。"

msgid ""
"``SessionStore.create()`` is designed to create a new session (i.e. one not "
"loaded from the session store and with ``session_key=None``). ``save()`` is "
"designed to save an existing session (i.e. one loaded from the session "
"store). Calling ``save()`` on a new session may also work but has a small "
"chance of generating a ``session_key`` that collides with an existing one. "
"``create()`` calls ``save()`` and loops until an unused ``session_key`` is "
"generated."
msgstr ""
"``SessionStore.create()`` は新しいセッション(つまりセッションストアから読み込"
"まれていない、``session_key=None`` のセッション)を作成するためのものです。"
"``save()`` は既存のセッションを保存するために設計されています（つまり、セッ"
"ションストアから読み込まれたもの）。新しいセッションに対して ``save()`` を呼"
"び出すこともできますが、既存のセッションと ``session_key`` が衝突する可能性が"
"あります。 ``create()`` は ``save()`` を呼び出し、使用されていない "
"``session_key`` が生成されるまでループします。"

msgid ""
"If you're using the ``django.contrib.sessions.backends.db`` backend, each "
"session is a normal Django model. The ``Session`` model is defined in :"
"source:`django/contrib/sessions/models.py`. Because it's a normal model, you "
"can access sessions using the normal Django database API:"
msgstr ""
"``django.contrib.sessions.backends.db`` バックエンドを使用している場合、各"
"セッションは単なる Django のモデルになっていて、``Session`` モデルは :source:"
"`django/contrib/sessions/models.py` で定義されています。普通のモデルにすぎな"
"いので、普通の Django データベース API からセッションにアクセスできます。"

msgid ""
"Note that you'll need to call :meth:`~base_session.AbstractBaseSession."
"get_decoded()` to get the session dictionary. This is necessary because the "
"dictionary is stored in an encoded format:"
msgstr ""
"セッションのディクショナリを取得するには、:meth:`~base_session."
"AbstractBaseSession.get_decoded()` を呼ばなければならないことに注意してくださ"
"い。これが必要なのは、ディクショナリがエンコードされたフォーマットで保存され"
"ているためです。"

msgid "When sessions are saved"
msgstr "セッションが保存されるタイミング"

msgid ""
"By default, Django only saves to the session database when the session has "
"been modified -- that is if any of its dictionary values have been assigned "
"or deleted::"
msgstr ""
"デフォルトでは、Django がセッションデータベースへデータを保存するのは、セッ"
"ションが修正された時だけ、つまり、ディクショナリ直下の値が代入または削除され"
"た時だけです。"

msgid ""
"In the last case of the above example, we can tell the session object "
"explicitly that it has been modified by setting the ``modified`` attribute "
"on the session object::"
msgstr ""
"上の例の場合、セッションオブジェクトに修正したことを明示的に伝えるためには、"
"``modified`` 属性を設定すれば良いです。"

msgid ""
"To change this default behavior, set the :setting:"
"`SESSION_SAVE_EVERY_REQUEST` setting to ``True``. When set to ``True``, "
"Django will save the session to the database on every single request."
msgstr ""
"このデフォルトの動作を変更するには、設定ファイルの :setting:"
"`SESSION_SAVE_EVERY_REQUEST` を ``True`` に設定します。``True`` に設定する"
"と、Django は1リクエストごとに、セッションをデータベースに保存してくれるよう"
"になります。"

msgid ""
"Note that the session cookie is only sent when a session has been created or "
"modified. If :setting:`SESSION_SAVE_EVERY_REQUEST` is ``True``, the session "
"cookie will be sent on every request."
msgstr ""
"セッションクッキーが送信されるのは、セッションの作成及び修正時のみであること"
"に注意してください。:setting:`SESSION_SAVE_EVERY_REQUEST` を ``True`` に設定"
"すると、各リクエストごとにセッションクッキーが送信されるようになります。"

msgid ""
"Similarly, the ``expires`` part of a session cookie is updated each time the "
"session cookie is sent."
msgstr ""
"同時に、セッションクッキーの ``expires`` 部分も、セッションクッキーが送信され"
"るごとに更新されます。"

msgid "The session is not saved if the response's status code is 500."
msgstr ""
"レスポンスステータスコードが 500 の時には、セッションは保存されません。"

msgid "Browser-length sessions vs. persistent sessions"
msgstr "ブラウザ起動中のみ有効なセッション vs. 永続的なセッション"

msgid ""
"You can control whether the session framework uses browser-length sessions "
"vs. persistent sessions with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` "
"setting."
msgstr ""
":setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` 設定を使うと、セッションフレーム"
"ワークが、ブラウザ起動中のみ有効なセッションと永続的なセッションのどちらを使"
"うか設定できます。"

msgid ""
"By default, :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``False``, "
"which means session cookies will be stored in users' browsers for as long "
"as :setting:`SESSION_COOKIE_AGE`. Use this if you don't want people to have "
"to log in every time they open a browser."
msgstr ""
"デフォルトでは、:setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` は ``False`` に"
"セットされていて、セッションクッキーは :setting:`SESSION_COOKIE_AGE` の期間"
"ユーザのブラウザに保持されます。これにより、ユーザはブラウザを開くたびにログ"
"インし直さずに済みます。"

msgid ""
"If :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``True``, Django "
"will use browser-length cookies -- cookies that expire as soon as the user "
"closes their browser. Use this if you want people to have to log in every "
"time they open a browser."
msgstr ""
":setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` を ``True`` に設定すると、Django "
"はブラウザ起動中のみ有効なクッキーを使用します。このクッキーは、ブラウザを閉"
"じた瞬間に破棄されます。ユーザがブラウザを開くたびにログインするようにしたい"
"場合には、この設定を利用してください。"

msgid ""
"This setting is a global default and can be overwritten at a per-session "
"level by explicitly calling the :meth:`~backends.base.SessionBase."
"set_expiry` method of ``request.session`` as described above in `using "
"sessions in views`_."
msgstr ""
"この設定はグローバルなデフォルトですが、1セッションごとのレベルで設定を上書き"
"できます。その場合には、上の `using sessions in views`_ で書いたようにして、"
"``request.session`` の :meth:`~backends.base.SessionBase.set_expiry` メソッド"
"を呼び出してください。"

msgid ""
"Some browsers (Chrome, for example) provide settings that allow users to "
"continue browsing sessions after closing and reopening the browser. In some "
"cases, this can interfere with the :setting:"
"`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting and prevent sessions from expiring "
"on browser close. Please be aware of this while testing Django applications "
"which have the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting enabled."
msgstr ""
"一部のブラウザ (たとえば Chrome) では、ブラウザを閉じて再度開いてもセッション"
"を継続できるようにする設定が提供されています。場合によっては、この設定が :"
"setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` 設定を妨げて、ブラウザが閉じてもセ"
"ションが破棄されないことがあります。:setting:"
"`SESSION_EXPIRE_AT_BROWSER_CLOSE` を有効にした Django アプリケーションのテス"
"トをする時には、この点に注意してください。"

msgid "Clearing the session store"
msgstr "セッションストアのクリア"

msgid ""
"As users create new sessions on your website, session data can accumulate in "
"your session store. If you're using the database backend, the "
"``django_session`` database table will grow. If you're using the file "
"backend, your temporary directory will contain an increasing number of files."
msgstr ""
"ユーザがウェブサイトで新しいセッションを作成した時、セッションデータはセッ"
"ションストアに溜め込まれます。データベースのバックエンドを使っている場合に"
"は、``django_session`` データベーステーブルが増大し、ファイルバックエンドを"
"使っている場合には、一時ディレクトリのファイル数が増えてゆくでしょう。"

msgid ""
"To understand this problem, consider what happens with the database backend. "
"When a user logs in, Django adds a row to the ``django_session`` database "
"table. Django updates this row each time the session data changes. If the "
"user logs out manually, Django deletes the row. But if the user does *not* "
"log out, the row never gets deleted. A similar process happens with the file "
"backend."
msgstr ""
"この問題を理解するには、データベースバックエンドで起きていることを考えてみて"
"ください。ユーザがログインすると、Django は ``django_session`` データベースの"
"テーブルに1行を追加します。Django はセッションのデータが変更されるたびに、こ"
"の行を更新します。ユーザが手動でログアウトすると、Django はこの行を削除しま"
"す。しかし、ユーザがログアウト *しなかった* 場合には、この行は決して削除され"
"ません。同様のプロセスが、ファイルバックエンドの場合にも発生します。"

msgid ""
"Django does *not* provide automatic purging of expired sessions. Therefore, "
"it's your job to purge expired sessions on a regular basis. Django provides "
"a clean-up management command for this purpose: :djadmin:`clearsessions`. "
"It's recommended to call this command on a regular basis, for example as a "
"daily cron job."
msgstr ""
"Django は、有効期限の切れたセッションを自動的に削除する機能を提供 *しません"
"* 。したがって、定期的に有効期限の切れたセッションを削除する仕事は、開発者の"
"手に委ねられています。Django はこの目的のために、クリーンナップ用の管理コマン"
"ド :djadmin:`clearsessions` を用意しています。たとえば、cron の毎日のジョブに"
"追加するなどの方法で、定期的にこのコマンドを実行することが推奨されています。"

msgid ""
"Note that the cache backend isn't vulnerable to this problem, because caches "
"automatically delete stale data. Neither is the cookie backend, because the "
"session data is stored by the users' browsers."
msgstr ""
"キャッシュバックエンドの場合はこの問題が発生しないことに注意してください。"
"キャッシュの場合、不要なデータは自動的に削除されるようになっているからです。"
"しかし、クッキーバックエンドの場合はそうではありません。セッションデータは"
"ユーザのブラウザに保存されるからです。"

msgid "Settings"
msgstr "設定"

msgid ""
"A few :ref:`Django settings <settings-sessions>` give you control over "
"session behavior:"
msgstr ""
"以下の :ref:`Django の設定 <settings-sessions>` を使うと、セッションの動作を"
"コントロールできます。"

msgid ":setting:`SESSION_CACHE_ALIAS`"
msgstr ":setting:`SESSION_CACHE_ALIAS`"

msgid ":setting:`SESSION_COOKIE_AGE`"
msgstr ":setting:`SESSION_COOKIE_AGE`"

msgid ":setting:`SESSION_COOKIE_DOMAIN`"
msgstr ":setting:`SESSION_COOKIE_DOMAIN`"

msgid ":setting:`SESSION_COOKIE_HTTPONLY`"
msgstr ":setting:`SESSION_COOKIE_HTTPONLY`"

msgid ":setting:`SESSION_COOKIE_NAME`"
msgstr ":setting:`SESSION_COOKIE_NAME`"

msgid ":setting:`SESSION_COOKIE_PATH`"
msgstr ":setting:`SESSION_COOKIE_PATH`"

msgid ":setting:`SESSION_COOKIE_SAMESITE`"
msgstr ":setting:`SESSION_COOKIE_SAMESITE`"

msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ":setting:`SESSION_COOKIE_SECURE`"

msgid ":setting:`SESSION_ENGINE`"
msgstr ":setting:`SESSION_ENGINE`"

msgid ":setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE`"
msgstr ":setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE`"

msgid ":setting:`SESSION_FILE_PATH`"
msgstr ":setting:`SESSION_FILE_PATH`"

msgid ":setting:`SESSION_SAVE_EVERY_REQUEST`"
msgstr ":setting:`SESSION_SAVE_EVERY_REQUEST`"

msgid ":setting:`SESSION_SERIALIZER`"
msgstr ":setting:`SESSION_SERIALIZER`"

msgid "Session security"
msgstr "セッションのセキュリティ"

msgid ""
"Subdomains within a site are able to set cookies on the client for the whole "
"domain. This makes session fixation possible if cookies are permitted from "
"subdomains not controlled by trusted users."
msgstr ""
"サイトのサブドメインからは、クライアントに対して、ドメイン全体に対するクッ"
"キーを設定できます。信頼できるユーザに管理されていないサブドメインから送られ"
"たクッキーを許可している場合、この方法でセッションの固定化 (session "
"fixation) 攻撃が可能になってしまいます。"

msgid ""
"For example, an attacker could log into ``good.example.com`` and get a valid "
"session for their account. If the attacker has control over ``bad.example."
"com``, they can use it to send their session key to you since a subdomain is "
"permitted to set cookies on ``*.example.com``. When you visit ``good.example."
"com``, you'll be logged in as the attacker and might inadvertently enter "
"your sensitive personal data (e.g. credit card info) into the attacker's "
"account."
msgstr ""
"たとえば、攻撃者が ``good.example.com`` にログインして、攻撃者のアカウントに"
"対する有効なセッションを取得したとしましょう。この攻撃者が ``bad.example."
"com`` を自由に使えた場合、サブドメインからは ``*.example.com`` に対してクッ"
"キーを設定できるので、先ほど取得したセッションを利用して、攻撃者のセッション"
"キーをターゲットの利用者に送信できてしまいます。次にこの利用者が ``good."
"example.com`` を訪問すると、この利用者は攻撃者のアカウントにログインすること"
"になり、そのことに気付かずに大切な個人のデータ (たとえば、クレジットカード情"
"報など) を攻撃者のアカウントに入力してしまう恐れがあります。"

msgid ""
"Another possible attack would be if ``good.example.com`` sets its :setting:"
"`SESSION_COOKIE_DOMAIN` to ``\"example.com\"`` which would cause session "
"cookies from that site to be sent to ``bad.example.com``."
msgstr ""
"もう一つ考えられる攻撃は、``good.example.com`` というサイトが :setting:"
"`SESSION_COOKIE_DOMAIN` を ``\"example.com\"`` に設定していた場合に、そのサイ"
"トのセッションクッキーが ``bad.example.com`` に送信されてしまう、というもので"
"す。"

msgid "Technical details"
msgstr "技術的な詳細"

msgid ""
"The session dictionary accepts any :mod:`json` serializable value when "
"using :class:`~django.contrib.sessions.serializers.JSONSerializer`."
msgstr ""
"セッション辞書は、:class:`~django.contrib.sessions.serializers."
"JSONSerializer` を使用する場合、任意の :mod:`json` シリアライズ可能な値を受け"
"入れます。"

msgid "Session data is stored in a database table named ``django_session`` ."
msgstr ""
"セッションデータは、データベースの ``django_session`` という名前のテーブルに"
"保存されます。"

msgid ""
"Django only sends a cookie if it needs to. If you don't set any session "
"data, it won't send a session cookie."
msgstr ""
"Django は必要なときにだけクッキーを送信します。新しくセッションデータを設定し"
"なければ、Django はセッションクッキーを送信しません。"

msgid "The ``SessionStore`` object"
msgstr "``SessionStore`` オブジェクト"

msgid ""
"When working with sessions internally, Django uses a session store object "
"from the corresponding session engine. By convention, the session store "
"object class is named ``SessionStore`` and is located in the module "
"designated by :setting:`SESSION_ENGINE`."
msgstr ""
"Django が内部でセッションを操作する時は、対応するセッションエンジンの "
"session store オブジェクトを使用します。慣習により、session store オブジェク"
"トは ``SessionStore`` と名付けられていて、:setting:`SESSION_ENGINE` で指定し"
"たモジュール内に置かれています。"

msgid ""
"All ``SessionStore`` classes available in Django inherit from :class:"
"`~backends.base.SessionBase` and implement data manipulation methods, namely:"
msgstr ""
"Django で利用可能なすべての ``SessionStore`` クラスは、:class:`~backends."
"base.SessionBase` を継承していて、以下のデータを操作するメソッドを実装してい"
"ます。"

msgid "``exists()``"
msgstr "``exists()``"

msgid "``create()``"
msgstr "``create()``"

msgid "``save()``"
msgstr "``save()``"

msgid "``delete()``"
msgstr "``delete()``"

msgid "``load()``"
msgstr "``load()``"

msgid ":meth:`~backends.base.SessionBase.clear_expired`"
msgstr ":meth:`~backends.base.SessionBase.clear_expired`"

msgid ""
"In order to build a custom session engine or to customize an existing one, "
"you may create a new class inheriting from :class:`~backends.base."
"SessionBase` or any other existing ``SessionStore`` class."
msgstr ""
"独自のセッションエンジンを作ったり、既存のものをカスタマイズするには、:class:"
"`~backends.base.SessionBase` か既存の ``SessionStore`` クラスを継承した新しい"
"クラスを作る必要があるでしょう。"

msgid ""
"You can extend the session engines, but doing so with database-backed "
"session engines generally requires some extra effort (see the next section "
"for details)."
msgstr ""
"セッションエンジンを拡張することもできますが、データベースをバックエンドとす"
"るセッションエンジンを拡張するには通常、追加の労力が必要です（詳しくは次のセ"
"クションを参照してください）。"

msgid "Extending database-backed session engines"
msgstr "データベースを使ったセッションを拡張する"

msgid ""
"Creating a custom database-backed session engine built upon those included "
"in Django (namely ``db`` and ``cached_db``) may be done by inheriting :class:"
"`~base_session.AbstractBaseSession` and either ``SessionStore`` class."
msgstr ""
"Django に含まれるデータベースを使ったセッションエンジン (具体的に言えば、"
"``db`` と ``cached_db``) をカスタマイズするには、:class:`~base_session."
"AbstractBaseSession` とともに ``SessionStore`` クラスを継承する必要があるかも"
"しれません。"

msgid ""
"``AbstractBaseSession`` and ``BaseSessionManager`` are importable from "
"``django.contrib.sessions.base_session`` so that they can be imported "
"without including ``django.contrib.sessions`` in :setting:`INSTALLED_APPS`."
msgstr ""
"``AbstractBaseSession`` と ``BaseSessionManager`` は、:setting:"
"`INSTALLED_APPS` に ``django.contrib.sessions`` を追加しなくても、``django."
"contrib.sessions.base_session`` からインポートできます。"

msgid "The abstract base session model."
msgstr "ベースとなる抽象的なセッションのモデルです。"

msgid ""
"Primary key. The field itself may contain up to 40 characters. The current "
"implementation generates a 32-character string (a random sequence of digits "
"and lowercase ASCII letters)."
msgstr ""
"プライマリーキーです。フィールド自体は40文字までの文字列を格納できますが、現"
"在の実装では、32文字の文字列 (数字と小文字のASCII文字のランダムな列) を生成し"
"ます。"

msgid "A string containing an encoded and serialized session dictionary."
msgstr ""
"エンコード・シリアライズされた、セッションディクショナリーを含む文字列です。"

msgid "A datetime designating when the session expires."
msgstr "セッションの有効期限を表す datetime オブジェクトです。"

msgid ""
"Expired sessions are not available to a user, however, they may still be "
"stored in the database until the :djadmin:`clearsessions` management command "
"is run."
msgstr ""
"有効期限が切れたセッションをユーザが利用することはできませんが、:djadmin:"
"`clearsessions` 管理コマンドを実行するまでは、ふつうはデータベースに保存され"
"ています。"

msgid "Returns a session store class to be used with this session model."
msgstr "セッションモデルで使用するセッションストアクラスを返します。"

msgid "Returns decoded session data."
msgstr "デコードしたセッションデータを返します。"

msgid "Decoding is performed by the session store class."
msgstr "デコードは、セッションストアのクラスで実行されます。"

msgid ""
"You can also customize the model manager by subclassing :class:`~django."
"contrib.sessions.base_session.BaseSessionManager`:"
msgstr ""
":class:`~django.contrib.sessions.base_session.BaseSessionManager` のサブクラ"
"スを作ることで、モデルマネージャをカスタマイズすることもできます。"

msgid ""
"Returns the given session dictionary serialized and encoded as a string."
msgstr ""
"与えられたセッションディクショナリを、シリアライズ・エンコードした文字列とし"
"て返します。"

msgid "Encoding is performed by the session store class tied to a model class."
msgstr ""
"エンコードは、モデルクラスに関連付けられたセッションストアのクラスで実行され"
"ます。"

msgid ""
"Saves session data for a provided session key, or deletes the session in "
"case the data is empty."
msgstr ""
"与えられたセッションキーに対するセッションデータを保存します。データが空の場"
"合には、セッションを削除します。"

msgid ""
"Customization of ``SessionStore`` classes is achieved by overriding methods "
"and properties described below:"
msgstr ""
"``SessionStore`` クラスのカスタマイズは、以下に挙げるメソッドやプロパティを"
"オーバーライドすることで行えます。"

msgid "Implements database-backed session store."
msgstr "データベースを使ったセッションストアを実装しています。"

msgid "Override this method to return a custom session model if you need one."
msgstr ""
"カスタマイズしたセッションモデルを返す必要がある場合には、このメソッドをオー"
"バーライドします。"

msgid ""
"Returns a new instance of the session model object, which represents the "
"current session state."
msgstr ""
"現在のセッションの状態を表す、セッションモデルオブジェクトの新しいインスタン"
"スを返します。"

msgid ""
"Overriding this method provides the ability to modify session model data "
"before it's saved to database."
msgstr ""
"このメソッドをオーバーライドすると、セッションモデルのデータをデータベースへ"
"保存する前に修正できます。"

msgid "Implements cached database-backed session store."
msgstr "キャッシュデータベースを使ったセッションストアを実装しています。"

msgid "A prefix added to a session key to build a cache key string."
msgstr ""
"キャッシュのキー文字列を作るためにセッションキーに追加するプリフィックスで"
"す。"

msgid "Example"
msgstr "カスタマイズ例"

msgid ""
"The example below shows a custom database-backed session engine that "
"includes an additional database column to store an account ID (thus "
"providing an option to query the database for all active sessions for an "
"account)::"
msgstr ""
"以下の例は、アカウントIDを格納するための追加のデータベース列を含むカスタムの"
"データベースバックのセッションエンジンを示しており、アカウントのすべてのアク"
"ティブセッションに対してデータベースをクエリするオプションを提供します:"

msgid ""
"If you are migrating from the Django's built-in ``cached_db`` session store "
"to a custom one based on ``cached_db``, you should override the cache key "
"prefix in order to prevent a namespace clash::"
msgstr ""
"Django の組み込みの ``cached_db`` セッションストアから、``cached_db`` をベー"
"スにしたカスタムのものにマイグレーションする場合は、名前空間の衝突を防ぐため"
"にキャッシュキーのプレフィックスをオーバーライドするべきです:"

msgid "Session IDs in URLs"
msgstr "URL 内のセッション ID"

msgid ""
"The Django sessions framework is entirely, and solely, cookie-based. It does "
"not fall back to putting session IDs in URLs as a last resort, as PHP does. "
"This is an intentional design decision. Not only does that behavior make "
"URLs ugly, it makes your site vulnerable to session-ID theft via the "
"\"Referer\" header."
msgstr ""
"Django のセッションフレームワークは、完全かつ単独でクッキーをベースにしていま"
"す。PHP のように最後の手段として URL にセッション ID を入れるようなことはあり"
"ません。これは、意図的な設計上の決定です。そのような振る舞いは、URL を醜くし"
"てしまうだけではなく、\"Referer\" ヘッダを介したセッション ID の盗難に対して"
"サイトを脆弱にしてしまいます。"

msgid "Django shortcut functions"
msgstr "Django のショートカット関数"

msgid ""
"The package ``django.shortcuts`` collects helper functions and classes that "
"\"span\" multiple levels of MVC. In other words, these functions/classes "
"introduce controlled coupling for convenience's sake."
msgstr ""
"``django.shortcuts`` パッケージは、MVC の複数のレベルにまたがるヘルパー関数と"
"クラスを集めたものです。言い換えれば、これらの関数やクラスは、便宜上、控えめ"
"な結合を取り入れます。"

msgid "``render()``"
msgstr "``render()``"

msgid ""
"Combines a given template with a given context dictionary and returns an :"
"class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""
"与えられたテンプレートとコンテキスト辞書を組み合わせてレンダリングされたテキ"
"ストを持つ、 :class:`~django.http.HttpResponse` オブジェクトを返します。"

msgid ""
"Django does not provide a shortcut function which returns a :class:`~django."
"template.response.TemplateResponse` because the constructor of :class:"
"`~django.template.response.TemplateResponse` offers the same level of "
"convenience as :func:`render()`."
msgstr ""
"Djangoは、 :class:`~django.template.response.TemplateResponse` を返すショート"
"カット関数を提供していません。なぜなら、 :class:`~django.template.response."
"TemplateResponse` のコンストラクタは、 :func:`render()` と同じくらい便利な機"
"能を提供しているからです。"

msgid "Required arguments"
msgstr "必須の引数"

msgid "``request``"
msgstr "``request``"

msgid "The request object used to generate this response."
msgstr "このレスポンスを生成するのに使用されるリクエスト オブジェクト。"

msgid "``template_name``"
msgstr "``template_name``"

msgid ""
"The full name of a template to use or sequence of template names. If a "
"sequence is given, the first template that exists will be used. See the :ref:"
"`template loading documentation <template-loading>` for more information on "
"how templates are found."
msgstr ""
"使用するテンプレートの完全な名前、または、テンプレート名のシーケンス。シーケ"
"ンスが指定された場合、最初に存在するテンプレートが使用されます。テンプレート"
"の検索方法については、:ref:`テンプレートの読み込みドキュメント <template-"
"loading>` を参照してください。"

msgid "Optional arguments"
msgstr "オプションの引数"

msgid "``context``"
msgstr "``context``"

msgid ""
"A dictionary of values to add to the template context. By default, this is "
"an empty dictionary. If a value in the dictionary is callable, the view will "
"call it just before rendering the template."
msgstr ""
"テンプレートコンテキストに追加する値の辞書です。デフォルトでは空の辞書です。"
"辞書内の値が呼び出し可能な場合、ビューはテンプレートをレンダリングする直前に"
"それを呼び出します。"

msgid "``content_type``"
msgstr "``content_type``"

msgid ""
"The MIME type to use for the resulting document. Defaults to ``'text/html'``."
msgstr ""
"結果のドキュメントに適用するMIMEタイプ。デフォルトは ``'text/html'`` です。"

msgid "``status``"
msgstr "``status``"

msgid "The status code for the response. Defaults to ``200``."
msgstr "レスポンスのステータスコード。デフォルトは ``200`` です。"

msgid "``using``"
msgstr "``using``"

msgid ""
"The :setting:`NAME <TEMPLATES-NAME>` of a template engine to use for loading "
"the template."
msgstr ""
"テンプレートを読み込むために使用するテンプレートエンジンの :setting:`NAME "
"<TEMPLATES-NAME>` を指定します。"

msgid ""
"The following example renders the template ``myapp/index.html`` with the "
"MIME type :mimetype:`application/xhtml+xml`::"
msgstr ""
"次の例では、テンプレート ``myapp/index.html`` をMIMEタイプ ``application/"
"xhtml+xml`` でレンダリングしてみます。"

msgid "This example is equivalent to::"
msgstr "この例は次のコードと等価です。"

msgid "``redirect()``"
msgstr "``redirect()``"

msgid ""
"Returns an :class:`~django.http.HttpResponseRedirect` to the appropriate URL "
"for the arguments passed."
msgstr ""
"渡された引数に対して、 適切な URLへの :class:`~django.http."
"HttpResponseRedirect` を返します。"

msgid "The arguments could be:"
msgstr "引数には以下が含まれます:"

msgid ""
"A model: the model's :meth:`~django.db.models.Model.get_absolute_url()` "
"function will be called."
msgstr ""
"モデル：モデルの :meth:`~django.db.models.Model.get_absolute_url()` 関数が呼"
"び出されます。"

msgid ""
"A view name, possibly with arguments: :func:`~django.urls.reverse` will be "
"used to reverse-resolve the name."
msgstr ""
"ビュー名（引数を渡せます）: :func:`~django.urls.reverse` を使って名前を逆解決"
"します。"

msgid ""
"An absolute or relative URL, which will be used as-is for the redirect "
"location."
msgstr "絶対URLまたは相対URL。これはそのままリダイレクト先になります。"

msgid ""
"By default issues a temporary redirect; pass ``permanent=True`` to issue a "
"permanent redirect."
msgstr ""
"デフォルトでは一時的なリダイレクトを発行します。 ``permanent=True`` を渡すと"
"恒久的なリダイレクトを発行します。"

msgid "You can use the :func:`redirect` function in a number of ways."
msgstr ":func:`redirect` 関数の使い方はいくつかあります。"

msgid ""
"By passing some object; that object's :meth:`~django.db.models.Model."
"get_absolute_url` method will be called to figure out the redirect URL::"
msgstr ""
"オブジェクトを渡すことで、そのオブジェクトの :meth:`~django.db.models.Model."
"get_absolute_url` メソッドが呼び出され、リダイレクト URL を返します:"

msgid ""
"By passing the name of a view and optionally some positional or keyword "
"arguments; the URL will be reverse resolved using the :func:`~django.urls."
"reverse` method::"
msgstr ""
"ビューの名前と、オプションで位置引数またはキーワード引数を渡すことで、 :func:"
"`~django.urls.reverse` メソッドを使って URL を逆引きできます:"

msgid "By passing a hardcoded URL to redirect to: ::"
msgstr "リダイレクト先としてハードコーディングされたURLを渡せます:"

msgid "This also works with full URLs: ::"
msgstr "これは完全なURLでも機能します:"

msgid ""
"By default, :func:`redirect` returns a temporary redirect. All of the above "
"forms accept a ``permanent`` argument; if set to ``True`` a permanent "
"redirect will be returned::"
msgstr ""
"デフォルトでは :func:`redirect` は一時的なリダイレクトを返します。上記のすべ"
"ての形式で ``permanent`` 引数が使えます。 ``True`` に設定された場合、恒久的な"
"リダイレクトを返します:"

msgid "``get_object_or_404()``"
msgstr "``get_object_or_404()``"

msgid "*Asynchronous version*: ``aget_object_or_404()``"
msgstr "*非同期バージョン*: ``aget_object_or_404()``"

msgid ""
"Calls :meth:`~django.db.models.query.QuerySet.get()` on a given model "
"manager, but it raises :class:`~django.http.Http404` instead of the model's :"
"class:`~django.db.models.Model.DoesNotExist` exception."
msgstr ""
"与えられたモデルマネージャに対して :meth:`~django.db.models.query.QuerySet."
"get()` を呼び出しますが、モデルの :class:`~django.db.models.Model."
"DoesNotExist` 例外の代わりに :class:`~django.http.Http404` 例外を発生させま"
"す。"

msgid "Arguments"
msgstr "引数"

msgid "``klass``"
msgstr "``klass``"

msgid ""
"A :class:`~django.db.models.Model` class, a :class:`~django.db.models."
"Manager`, or a :class:`~django.db.models.query.QuerySet` instance from which "
"to get the object."
msgstr ""
"オブジェクトを取得するための :class:`~django.db.models.Model` クラス、 :"
"class:`~django.db.models.Manager` または :class:`~django.db.models.query."
"QuerySet` インスタンスです。"

msgid "``*args``"
msgstr "``*args``"

msgid ":class:`Q objects <django.db.models.Q>`."
msgstr ":class:`Q オブジェクト <django.db.models.Q>` 。"

msgid "``**kwargs``"
msgstr "``**kwargs``"

msgid ""
"Lookup parameters, which should be in the format accepted by ``get()`` and "
"``filter()``."
msgstr ""
"ルックアップパラメータ。 ``get()`` および ``filter()`` が受入可能なフォーマッ"
"トにします。"

msgid ""
"The following example gets the object with the primary key of 1 from "
"``MyModel``::"
msgstr ""
"以下の例では ``MyModel`` から主キーが 1 のオブジェクトを取得しています:"

msgid ""
"The most common use case is to pass a :class:`~django.db.models.Model`, as "
"shown above. However, you can also pass a :class:`~django.db.models.query."
"QuerySet` instance::"
msgstr ""
"最もよくある使用例は、上記のように :class:`~django.db.models.Model` を渡すも"
"のです。しかし、 :class:`~django.db.models.query.QuerySet` インスタンスを渡す"
"こともできます:"

msgid "The above example is a bit contrived since it's equivalent to doing::"
msgstr "上の例は下記と等価なので、少し不自然ではあります:"

msgid ""
"but it can be useful if you are passed the ``queryset`` variable from "
"somewhere else."
msgstr "しかし、他の場所から ``QuerySet`` 変数を渡された場合には便利です。"

msgid ""
"Finally, you can also use a :class:`~django.db.models.Manager`. This is "
"useful for example if you have a :ref:`custom manager<custom-managers>`::"
msgstr ""
"最後に、 :class:`~django.db.models.Manager` を使うこともできます。これは例え"
"ば :ref:`カスタムマネージャ <custom-managers>` がある場合に便利です:"

msgid ""
"You can also use :class:`related managers<django.db.models.fields.related."
"RelatedManager>`::"
msgstr ""
":class:`関係マネージャ <django.db.models.fields.related.RelatedManager>` を使"
"うこともできます:"

msgid ""
"Note: As with ``get()``, a :class:`~django.core.exceptions."
"MultipleObjectsReturned` exception will be raised if more than one object is "
"found."
msgstr ""
"注意: ``get()`` と同様に、複数のオブジェクトが見つかった場合は :class:"
"`~django.core.exceptions.MultipleObjectsReturned` 例外が発生します。"

msgid "``aget_object_or_404()`` function was added."
msgstr "``aget_object_or_404()`` 関数が追加されました。"

msgid "``get_list_or_404()``"
msgstr "``get_list_or_404()``"

msgid "*Asynchronous version*: ``aget_list_or_404()``"
msgstr "*非同期バージョン*: ``aget_list_or_404()``"

msgid ""
"Returns the result of :meth:`~django.db.models.query.QuerySet.filter()` on a "
"given model manager cast to a list, raising :class:`~django.http.Http404` if "
"the resulting list is empty."
msgstr ""
"与えられたモデルマネージャの :meth:`~django.db.models.query.QuerySet."
"filter()` の結果をリストにキャストして返します。結果のリストが空の場合は、 :"
"class:`~django.http.Http404` を発生させます。"

msgid ""
"A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :"
"class:`~django.db.models.query.QuerySet` instance from which to get the list."
msgstr ""
"リストを取得するための :class:`~django.db.models.Model`, :class:`~django.db."
"models.Manager` または :class:`~django.db.models.query.QuerySet` インスタンス"
"です。"

msgid "The following example gets all published objects from ``MyModel``::"
msgstr ""
"以下の例では ``MyModel`` から全ての公開されたオブジェクトを取得しています:"

msgid "``aget_list_or_404()`` function was added."
msgstr "``aget_list_or_404()`` 関数が追加されました。"

msgid "URL dispatcher"
msgstr "URL ディスパッチャ"

msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality web "
"application. Django lets you design URLs however you want, with no framework "
"limitations."
msgstr ""
"すっきりした、簡潔で明解な URL スキームは、高品質な Web アプリケーションでは"
"重要な要素です。 Django では、フレームワークの制限なしに、望み通りの URL を設"
"計できます。"

msgid ""
"See `Cool URIs don't change`_, by World Wide Web creator Tim Berners-Lee, "
"for excellent arguments on why URLs should be clean and usable."
msgstr ""
"URL はすっきりした扱いやすいものにすべきであるという主張については、ワール ド"
"ワイドウェブの産みの親である Tim Berners-Lee の優れた解説、 `Cool URIs don't "
"change`_ を参照してください。"

msgid ""
"To design URLs for an app, you create a Python module informally called a "
"**URLconf** (URL configuration). This module is pure Python code and is a "
"mapping between URL path expressions to Python functions (your views)."
msgstr ""
"アプリケーションのURLを設計するには、俗に **URLconf** (URL configuration) と"
"呼ばれる Python モジュールを作る必要があります。このモジュールは pure  "
"Python コードであり、URLパス表記とあなたの書いたビューの Python 関数とのマッ"
"ピングです。"

msgid ""
"This mapping can be as short or as long as needed. It can reference other "
"mappings. And, because it's pure Python code, it can be constructed "
"dynamically."
msgstr ""
"このマッピングは短くもできますし、必要なだけ長くもできます。他のマッピングも"
"参照できます。また、pure Python コードなので、動的に生成できます。"

msgid ""
"Django also provides a way to translate URLs according to the active "
"language. See the :ref:`internationalization documentation <url-"
"internationalization>` for more information."
msgstr ""
"Django は有効にされている言語に従って URL を翻訳するための手段も提供していま"
"す。詳しくは :ref:`国際化のドキュメント <url-internationalization>` を参照し"
"てください。"

msgid "How Django processes a request"
msgstr "Django のリクエスト処理"

msgid ""
"When a user requests a page from your Django-powered site, this is the "
"algorithm the system follows to determine which Python code to execute:"
msgstr ""
"ユーザが Django で作られたサイト上のページをリクエストした時に、どの Python "
"コードが実行されるかは以下のアルゴリズムで決定されます。"

msgid ""
"Django determines the root URLconf module to use. Ordinarily, this is the "
"value of the :setting:`ROOT_URLCONF` setting, but if the incoming "
"``HttpRequest`` object has a :attr:`~django.http.HttpRequest.urlconf` "
"attribute (set by middleware), its value will be used in place of the :"
"setting:`ROOT_URLCONF` setting."
msgstr ""
"まず、Django は、どのモジュールをルート URLconf として使うか決定します。通常"
"は、この値は :setting:`ROOT_URLCONF` に設定されています。ただし、 "
"HttpRequest オブジェクトに :attr:`~django.http.HttpRequest.urlconf` という属"
"性が設定されていた場合 ( middleware で設定されます) 、その値を :setting:"
"`ROOT_URLCONF` の代わりに使います。"

msgid ""
"Django loads that Python module and looks for the variable ``urlpatterns``. "
"This should be a :term:`sequence` of :func:`django.urls.path` and/or :func:"
"`django.urls.re_path` instances."
msgstr ""
"Django はその Python モジュールをロードして、``urlpatterns`` という名前の変数"
"を探します。この変数の値は :func:`django.urls.path` または :func:`django."
"urls.re_path` インスタンスの :term:`sequence` でなければなりません。"

msgid ""
"Django runs through each URL pattern, in order, and stops at the first one "
"that matches the requested URL, matching against :attr:`~django.http."
"HttpRequest.path_info`."
msgstr ""
"Django は URL パターンを順に調べて、 :attr:`~django.http.HttpRequest."
"path_info` にマッチする、リクエストされた URL にマッチする最初のパターンで停"
"止します。"

msgid ""
"Once one of the URL patterns matches, Django imports and calls the given "
"view, which is a Python function (or a :doc:`class-based view </topics/class-"
"based-views/index>`). The view gets passed the following arguments:"
msgstr ""
"ある 1 個の正規表現にマッチしたら、 Django はマッピングで指定されたビューを "
"import して呼び出します。そのビューは Python 関数 (もしくは :doc:`クラスベー"
"スのビュー </topics/class-based-views/index>`) です。ビューには以下の引数が渡"
"されます:"

msgid "An instance of :class:`~django.http.HttpRequest`."
msgstr ":class:`~django.http.HttpRequest` のインスタンス。"

msgid ""
"If the matched URL pattern contained no named groups, then the matches from "
"the regular expression are provided as positional arguments."
msgstr ""
"マッチしたURLパターンに名前付きグループが含まれていない場合、正規表現でマッチ"
"した値が位置引数として提供されます。"

msgid ""
"The keyword arguments are made up of any named parts matched by the path "
"expression that are provided, overridden by any arguments specified in the "
"optional ``kwargs`` argument to :func:`django.urls.path` or :func:`django."
"urls.re_path`."
msgstr ""
"指定された URL パス表現でマッチした名前付き部分からはキーワード引数が作られま"
"す。ただし、 :func:`django.urls.path` や :func:`django.urls.re_path` に "
"``kwargs`` オプション引数が指定されていた場合は、その中の引数で上書きされま"
"す。"

msgid ""
"If no URL pattern matches, or if an exception is raised during any point in "
"this process, Django invokes an appropriate error-handling view. See `Error "
"handling`_ below."
msgstr ""
"もし、 URL 正規表現が何にもマッチしなかったり、パターンマッチングプロセスの途"
"中のどこかで例外が発生した場合、Django は適切なエラーハンドリングビューを呼び"
"出します。下の `Error handling`_ を見てください。"

msgid "Here's a sample URLconf::"
msgstr "URLconf のサンプルです。"

msgid "To capture a value from the URL, use angle brackets."
msgstr "URLから値をキャプチャするには、角括弧を使用します。"

msgid ""
"Captured values can optionally include a converter type. For example, use "
"``<int:name>`` to capture an integer parameter. If a converter isn't "
"included, any string, excluding a ``/`` character, is matched."
msgstr ""
"取り込んだ値にはオプションでコンバータタイプを含めることができます。たとえ"
"ば、整数のパラメータをキャプチャするには ``<int:name>`` を使用します。コン"
"バータが含まれていない場合は、 ``/`` 文字を除いた文字列がマッチします。"

msgid ""
"There's no need to add a leading slash, because every URL has that. For "
"example, it's ``articles``, not ``/articles``."
msgstr ""
"スラッシュを先頭につける必要はありません。たとえば、 ``/articles`` ではなく "
"``articles`` です。"

msgid "Example requests:"
msgstr "リクエストの例:"

msgid ""
"A request to ``/articles/2005/03/`` would match the third entry in the list. "
"Django would call the function ``views.month_archive(request, year=2005, "
"month=3)``."
msgstr ""
"``articles/2005/03/`` へのリクエストはリストの 3 番目のエントリにマッチしま"
"す。Django は関数 ``views.month_archive(request, year=2005, month=3)`` を呼び"
"出します。"

msgid ""
"``/articles/2003/`` would match the first pattern in the list, not the "
"second one, because the patterns are tested in order, and the first one is "
"the first test to pass. Feel free to exploit the ordering to insert special "
"cases like this. Here, Django would call the function ``views."
"special_case_2003(request)``"
msgstr ""
"``/articles/2003/`` はリストの最初のパターンにマッチしますが、2番目のパターン"
"にはマッチしません。なぜなら、パターンはソート順に検査され、最初のパターンが"
"最初に通るからです。ソートを利用して、このような特殊なケースを挿入するのは自"
"由です。ここでは、 Django は関数 ``views.special_case_2003(request)`` を呼び"
"出します。"

msgid ""
"``/articles/2003`` would not match any of these patterns, because each "
"pattern requires that the URL end with a slash."
msgstr ""
"各パターンはURLの末尾がスラッシュであることを要求するので、``/"
"articles/2003`` はこれらのパターンのどれにもマッチしません。"

msgid ""
"``/articles/2003/03/building-a-django-site/`` would match the final pattern. "
"Django would call the function ``views.article_detail(request, year=2003, "
"month=3, slug=\"building-a-django-site\")``."
msgstr ""
"``/articles/2003/03/building-a-django-site/`` は最後のパターンにマッチしま"
"す。Django は関数 ``views.article_detail(request, year=2003, month=3, "
"slug=\"building-a-django-site\")`` を呼び出します。"

msgid "Path converters"
msgstr "パス コンバータ"

msgid "The following path converters are available by default:"
msgstr "デフォルトでは、以下のパスコンバータが使用可能です:"

msgid ""
"``str`` - Matches any non-empty string, excluding the path separator, "
"``'/'``. This is the default if a converter isn't included in the expression."
msgstr ""
"``str`` - パスの区切り文字 ``'/`` を除く、空でない文字列にマッチします。これ"
"は式にコンバータが含まれていない場合のデフォルトです。"

msgid "``int`` - Matches zero or any positive integer. Returns an ``int``."
msgstr ""
"``int`` - ゼロまたは任意の正の整数にマッチします。 ``int`` を返します。"

msgid ""
"``slug`` - Matches any slug string consisting of ASCII letters or numbers, "
"plus the hyphen and underscore characters. For example, ``building-your-1st-"
"django-site``."
msgstr ""
"``slug`` - ASCII 文字か数字、ハイフン、アンダースコアからなるスラグ文字列に"
"マッチします。たとえば、 ``building-your-1st-django-site`` のようなものです。"

msgid ""
"``uuid`` - Matches a formatted UUID. To prevent multiple URLs from mapping "
"to the same page, dashes must be included and letters must be lowercase. For "
"example, ``075194d3-6885-417e-a8a8-6c931e272f00``. Returns a :class:`~uuid."
"UUID` instance."
msgstr ""
"``uuid`` - フォーマットされたUUIDにマッチします。複数のURLが同じページにマッ"
"ピングされるのを防ぐため、ダッシュを入れ、アルファベットは小文字にする必要が"
"あります。たとえば ``075194d3-6885-417e-a8a8-6c931e272f00`` のようになりま"
"す。 :class:`~uuid.UUID` インスタンスを返します。"

msgid ""
"``path`` - Matches any non-empty string, including the path separator, "
"``'/'``. This allows you to match against a complete URL path rather than a "
"segment of a URL path as with ``str``."
msgstr ""
"``path`` - パスの区切り文字 ``'/'`` を含む、空ではない文字列にマッチします。"
"これにより、 ``str`` のようにURLパスのセグメントではなく、完全なURLパスに対し"
"てマッチすることができます。"

msgid "Registering custom path converters"
msgstr "独自のパスコンバータを登録する"

msgid ""
"For more complex matching requirements, you can define your own path "
"converters."
msgstr ""
"より複雑なマッチング要件については、独自のパスコンバータを定義できます。"

msgid "A converter is a class that includes the following:"
msgstr "コンバーターとは、以下のようなクラスです:"

msgid "A ``regex`` class attribute, as a string."
msgstr "文字列としての ``regex`` クラス属性を持ちます。"

msgid ""
"A ``to_python(self, value)`` method, which handles converting the matched "
"string into the type that should be passed to the view function. It should "
"raise ``ValueError`` if it can't convert the given value. A ``ValueError`` "
"is interpreted as no match and as a consequence a 404 response is sent to "
"the user unless another URL pattern matches."
msgstr ""
"``to_python(self, value)`` メソッドで、マッチした文字列をビュー関数に渡す型に"
"変換します。与えられた値を変換できない場合は ``ValueError`` を発生させます。 "
"``ValueError`` はマッチしないと解釈され、別のURLパターンがマッチしない限り、"
"結果として404レスポンスがユーザーに送信されます。"

msgid ""
"A ``to_url(self, value)`` method, which handles converting the Python type "
"into a string to be used in the URL. It should raise ``ValueError`` if it "
"can't convert the given value. A ``ValueError`` is interpreted as no match "
"and as a consequence :func:`~django.urls.reverse` will raise :class:`~django."
"urls.NoReverseMatch` unless another URL pattern matches."
msgstr ""
"``to_url(self, value)`` メソッドで、 Python の型を URL で使用する文字列に変換"
"します。与えられた値を変換できない場合は ``ValueError`` を発生させる必要があ"
"ります。 ``ValueError`` はマッチしないと解釈され、結果として :func:`~django."
"urls.reverse` は :class:`~django.urls.NoReverseMatch` を発生させます。"

msgid ""
"Register custom converter classes in your URLconf using :func:`~django.urls."
"register_converter`::"
msgstr ""
":func:`~django.urls.register_converter`: を使用して、URLconf にカスタムコン"
"バータクラスを登録します:"

msgid "Using regular expressions"
msgstr "正規表現を使う"

msgid ""
"If the paths and converters syntax isn't sufficient for defining your URL "
"patterns, you can also use regular expressions. To do so, use :func:`~django."
"urls.re_path` instead of :func:`~django.urls.path`."
msgstr ""
"パスとコンバータ構文だけでは URL パターンを定義するのに不十分な場合は、正規表"
"現を使うこともできます。その場合は :func:`~django.urls.path` の代わりに :"
"func:`~django.urls.re_path` を使ってください。"

msgid ""
"In Python regular expressions, the syntax for named regular expression "
"groups is ``(?P<name>pattern)``, where ``name`` is the name of the group and "
"``pattern`` is some pattern to match."
msgstr ""
"Python の正規表現では、名前付き正規表現グループの構文は ``(?"
"P<name>pattern)`` です。ここで ``name`` はグループの名前で、 ``pattern`` は"
"マッチするパターンです。"

msgid ""
"Here's the example URLconf from earlier, rewritten using regular "
"expressions::"
msgstr "先ほどのURLconfの例を正規表現を使って書き直したものです:"

msgid ""
"This accomplishes roughly the same thing as the previous example, except:"
msgstr "これは、前の例とほぼ同じことを実現します:"

msgid ""
"The exact URLs that will match are slightly more constrained. For example, "
"the year 10000 will no longer match since the year integers are constrained "
"to be exactly four digits long."
msgstr ""
"マッチする正確なURLは少し制約があります。たとえば、西暦10000年はマッチしなく"
"なります。西暦の整数は正確に4桁になるように制約されているからです。"

msgid ""
"Each captured argument is sent to the view as a string, regardless of what "
"sort of match the regular expression makes."
msgstr ""
"キャプチャされた各引数は、正規表現がどのようなマッチをするかには関係なく、文"
"字列としてビューに送信されます。"

msgid ""
"When switching from using :func:`~django.urls.path` to :func:`~django.urls."
"re_path` or vice versa, it's particularly important to be aware that the "
"type of the view arguments may change, and so you may need to adapt your "
"views."
msgstr ""
":func:`~django.urls.path` を使っていたのを :func:`~django.urls.re_path` に切"
"り替えたり、その逆を行ったりする場合は、ビューの引数の型が変わる可能性がある"
"ことに十分注意してください。"

msgid "Using unnamed regular expression groups"
msgstr "名前なし正規表現グループの使用"

msgid ""
"As well as the named group syntax, e.g. ``(?P<year>[0-9]{4})``, you can also "
"use the shorter unnamed group, e.g. ``([0-9]{4})``."
msgstr ""
"名前付きグループ構文、例えば ``(?P<year>[0-9]{4})`` の他に、より短い名前なし"
"グループ、例えば ``([0-9]{4})`` を使うこともできます。"

msgid ""
"This usage isn't particularly recommended as it makes it easier to "
"accidentally introduce errors between the intended meaning of a match and "
"the arguments of the view."
msgstr ""
"このような使い方をすると、マッチの意図した意味とビューの引数との対応を間違え"
"やすくなり、バグが混入しやすくなるので、使わないことを強く推奨します。"

msgid ""
"In either case, using only one style within a given regex is recommended. "
"When both styles are mixed, any unnamed groups are ignored and only named "
"groups are passed to the view function."
msgstr ""
"どちらの場合でも、指定した正規表現内で1つのスタイルだけを使用することを推奨し"
"ます。両方のスタイルが混在している場合、名前のないグループは無視され、名前の"
"あるグループだけがビュー関数に渡されます。"

msgid "Nested arguments"
msgstr "ネストされた引数"

msgid ""
"Regular expressions allow nested arguments, and Django will resolve them and "
"pass them to the view. When reversing, Django will try to fill in all outer "
"captured arguments, ignoring any nested captured arguments. Consider the "
"following URL patterns which optionally take a page argument::"
msgstr ""
"正規表現ではネストされた引数を使うことができ、Django はこれらを解決してビュー"
"に渡します。このとき、Django は全ての外側のキャプチャされた引数を埋めようと"
"し、ネストされたキャプチャされた引数を無視します。任意でページ引数を取る以下"
"の URL パターンを考えてみます::"

msgid ""
"Both patterns use nested arguments and will resolve: for example, ``blog/"
"page-2/`` will result in a match to ``blog_articles`` with two positional "
"arguments: ``page-2/`` and ``2``. The second pattern for ``comments`` will "
"match ``comments/page-2/`` with keyword argument ``page_number`` set to 2. "
"The outer argument in this case is a non-capturing argument ``(?:...)``."
msgstr ""
"両方のパターンでネストされた引数を使っており、解決します: 例えば、 ``blog/"
"page-2/`` は 2 つの潜在的な引数 (``page-2/`` と ``2``) で ``blog_articles`` "
"と一致する結果となります。``comments`` の 2 番目のパターンは、2 にセットされ"
"たキーワード引数 ``page_number`` で ``comments/page-2/`` と一致します。  この"
"例での外部の引数は、キャプチャされない引数 ``(?:...)`` です。"

msgid ""
"The ``blog_articles`` view needs the outermost captured argument to be "
"reversed, ``page-2/`` or no arguments in this case, while ``comments`` can "
"be reversed with either no arguments or a value for ``page_number``."
msgstr ""
"``blog_articles`` ビューは一番外側のキャプチャされた引数が解決されるのを必要"
"としますが (この例では ``page-2/`` か引数なし)、``comments`` は引数なしか "
"``page_number`` に対する値のどちらかで解決できます。"

msgid ""
"Nested captured arguments create a strong coupling between the view "
"arguments and the URL as illustrated by ``blog_articles``: the view receives "
"part of the URL (``page-2/``) instead of only the value the view is "
"interested in. This coupling is even more pronounced when reversing, since "
"to reverse the view we need to pass the piece of URL instead of the page "
"number."
msgstr ""
"ネストされたキャプチャされた引数は、``blog_articles`` (ビューが興味を持つ値だ"
"けでなく URL ``page-2/`` の部分を受け取るビュー) によって示されるように、"
"ビュー引数と URL の間に強力な結合を作ります: この結合は、ビューを解決する際に"
"ページ番号ではなくURLの部分を渡す必要があるため、解決するときにはさらに顕著に"
"なります。"

msgid ""
"As a rule of thumb, only capture the values the view needs to work with and "
"use non-capturing arguments when the regular expression needs an argument "
"but the view ignores it."
msgstr ""
"経験則として、正規表現が引数を必要とする一方でビューがそれを無視するときに"
"は、ビューが必要とする値だけをキャプチャして、キャプチャしない引数を使ってく"
"ださい。"

msgid "What the URLconf searches against"
msgstr "URLconf の検索対象"

msgid ""
"The URLconf searches against the requested URL, as a normal Python string. "
"This does not include GET or POST parameters, or the domain name."
msgstr ""
"URLconf はリクエストされた URL を通常の Python 文字列として検索します。これに"
"は GET や POST パラメータ、ドメイン名は含まれません。"

msgid ""
"For example, in a request to ``https://www.example.com/myapp/``, the URLconf "
"will look for ``myapp/``."
msgstr ""
"たとえば、``https://www.example.com/myapp/`` へのリクエストでは、URLconf は "
"``myapp/`` を探します。"

msgid ""
"In a request to ``https://www.example.com/myapp/?page=3``, the URLconf will "
"look for ``myapp/``."
msgstr ""
"``https://www.example.com/myapp/?page=3`` へのリクエストでは、URLconf は "
"``myapp/`` を探します。"

msgid ""
"The URLconf doesn't look at the request method. In other words, all request "
"methods -- ``POST``, ``GET``, ``HEAD``, etc. -- will be routed to the same "
"function for the same URL."
msgstr ""
"URLconf はリクエストメソッドを見ません。つまり、すべてのリクエストメソッド "
"(``POST``, ``GET``, ``HEAD`` など) は同じURLの同じ関数にルーティングされま"
"す。"

msgid "Specifying defaults for view arguments"
msgstr "ビュー引数のデフォルト値を指定する"

msgid ""
"A convenient trick is to specify default parameters for your views' "
"arguments. Here's an example URLconf and view::"
msgstr ""
"便利なテクニックは、ビューの引数にデフォルトのパラメータを指定することです。"
"以下は URLconf とビューの例です:"

msgid ""
"In the above example, both URL patterns point to the same view -- ``views."
"page`` -- but the first pattern doesn't capture anything from the URL. If "
"the first pattern matches, the ``page()`` function will use its default "
"argument for ``num``, ``1``. If the second pattern matches, ``page()`` will "
"use whatever ``num`` value was captured."
msgstr ""
"上記の例では、URLパターンはどちらも同じビュー、 ``views.page`` を指しています"
"が、最初のパターンはURLから何も取得していません。最初のパターンにマッチした場"
"合、 ``page()`` 関数は ``num`` のデフォルト引数である ``1`` を使用します。2番"
"目のパターンにマッチした場合、 ``page()`` はキャプチャされた ``num`` の値を使"
"用します。"

msgid ""
"Django processes regular expressions in the ``urlpatterns`` list which is "
"compiled the first time it's accessed. Subsequent requests use the cached "
"configuration via the URL resolver."
msgstr ""
"Django は ``urlpatterns`` リストにある正規表現を処理します。それ以降のリクエ"
"ストでは、 URL リゾルバ経由でキャッシュされた設定を使います。"

msgid "Syntax of the ``urlpatterns`` variable"
msgstr "``urlpatterns`` 変数の構文"

msgid ""
"``urlpatterns`` should be a :term:`sequence` of :func:`~django.urls.path` "
"and/or :func:`~django.urls.re_path` instances."
msgstr ""
"``urlpatterns`` は :func:`django.urls.path` または :func:`django.urls."
"re_path` インスタンスの :term:`sequence` でなければなりません。"

msgid "Error handling"
msgstr "エラーハンドリング"

msgid ""
"When Django can't find a match for the requested URL, or when an exception "
"is raised, Django invokes an error-handling view."
msgstr ""
"Django がリクエストされた URL にマッチするものを見つけられなかったり、例外 が"
"発生したりすると、Django はエラーハンドリングビューを起動します。"

msgid ""
"The views to use for these cases are specified by four variables. Their "
"default values should suffice for most projects, but further customization "
"is possible by overriding their default values."
msgstr ""
"これらのケースで使用するビューは、4種類の変数で指定します。ほとんどのプロジェ"
"クトではデフォルト値で十分ですが、デフォルト値を上書きすることでさらにカスタ"
"マイズできます。"

msgid ""
"See the documentation on :ref:`customizing error views <customizing-error-"
"views>` for the full details."
msgstr ""
"詳細は :ref:`エラービューをカスタマイズする <customizing-error-views>` を参照"
"してください。"

msgid ""
"Such values can be set in your root URLconf. Setting these variables in any "
"other URLconf will have no effect."
msgstr ""
"このような値はルートの URLconf で設定できます。他の URLconf でこれらの変数を"
"設定しても意味はありません。"

msgid ""
"Values must be callables, or strings representing the full Python import "
"path to the view that should be called to handle the error condition at hand."
msgstr ""
"値は呼び出し可能オブジェクト、つまり、エラー状態を処理するために呼び出すべき"
"ビューへの Python インポートパスを表す文字列でなければなりません。"

msgid "The variables are:"
msgstr "変数の種類は下記です。"

msgid "``handler400`` -- See :data:`django.conf.urls.handler400`."
msgstr "``handler400`` -- :data:`django.conf.urls.handler400` を参照。"

msgid "``handler403`` -- See :data:`django.conf.urls.handler403`."
msgstr "``handler403`` -- :data:`django.conf.urls.handler403` を参照。"

msgid "``handler404`` -- See :data:`django.conf.urls.handler404`."
msgstr "``handler404`` -- :data:`django.conf.urls.handler404` を参照。"

msgid "``handler500`` -- See :data:`django.conf.urls.handler500`."
msgstr "``handler500`` -- :data:`django.conf.urls.handler500` を参照。"

msgid "Including other URLconfs"
msgstr "他の URLconfs をインクルードする"

msgid ""
"At any point, your ``urlpatterns`` can \"include\" other URLconf modules. "
"This essentially \"roots\" a set of URLs below other ones."
msgstr ""
"いずれの時点でも、``urlpatterns`` は他の URLconf モジュールを \"含む (インク"
"ルードする)\" ことができます。これは基本的に、他の URL パターンに定義されてい"
"る URL のセットを探索します。"

msgid ""
"For example, here's an excerpt of the URLconf for the `Django website`_ "
"itself. It includes a number of other URLconfs::"
msgstr ""
"例えば、以下は `Django website`_ 自体に対する URLconf の引用です。これは複数"
"の他の URLconfs をインクルードしています::"

msgid ""
"Whenever Django encounters :func:`~django.urls.include()`, it chops off "
"whatever part of the URL matched up to that point and sends the remaining "
"string to the included URLconf for further processing."
msgstr ""
"Django が :func:`~django.urls.include` に出会うたびに、そのポイントまでにマッ"
"チした URL の部分を切り落とし、残りの文字列を、インクルードされた URLconf へ"
"渡し、次の処理が行われます。"

msgid ""
"Another possibility is to include additional URL patterns by using a list "
"of :func:`~django.urls.path` instances. For example, consider this URLconf::"
msgstr ""
"他の方法として、 :func:`~django.urls.path` インスタンスのリストを使うことに"
"よって追加的な URL をインクルードすることもできます。例えば、以下の URLconf "
"があったとします:"

msgid ""
"In this example, the ``/credit/reports/`` URL will be handled by the "
"``credit_views.report()`` Django view."
msgstr ""
"この例では、``/credit/reports/`` という URL は ``credit_views.report()`` とい"
"うビューによって処理されます。"

msgid ""
"This can be used to remove redundancy from URLconfs where a single pattern "
"prefix is used repeatedly. For example, consider this URLconf::"
msgstr ""
"これを使うと、単一のパターンの接頭辞が繰り返し使われるような URLconf の冗長さ"
"を回避できます。例えば、以下の URLconf を考えてみます::"

msgid ""
"We can improve this by stating the common path prefix only once and grouping "
"the suffixes that differ::"
msgstr ""
"これは、パスの共通部分である接頭辞を一度だけ記述し、異なる接尾辞を以下のよう"
"にグループ化することで改善できます::"

msgid "Captured parameters"
msgstr "取り込まれたパラメータ"

msgid ""
"An included URLconf receives any captured parameters from parent URLconfs, "
"so the following example is valid::"
msgstr ""
"インクルードされた URLconf は親の URLconf から取り込まれた全てのパラメータを"
"受け取るので、以下の例は有効です:"

msgid ""
"In the above example, the captured ``\"username\"`` variable is passed to "
"the included URLconf, as expected."
msgstr ""
"上の例では、取り込まれた ``\"username\"`` 変数はインクルードされたURLconf に"
"渡されます。"

msgid "Passing extra options to view functions"
msgstr "追加的なオプションをビュー関数に渡す"

msgid ""
"URLconfs have a hook that lets you pass extra arguments to your view "
"functions, as a Python dictionary."
msgstr ""
"URLconfs は、Ptyhon のディクショナリとして、ビュー関数に追加の引数を引き渡せ"
"るようにするフックを持っています。"

msgid ""
"The :func:`~django.urls.path` function can take an optional third argument "
"which should be a dictionary of extra keyword arguments to pass to the view "
"function."
msgstr ""
":func:`~django.urls.path` 関数はオプションで第3引数を取ることができます。第3"
"引数にはビュー関数に渡す追加のキーワード引数の辞書を指定します。"

msgid ""
"In this example, for a request to ``/blog/2005/``, Django will call ``views."
"year_archive(request, year=2005, foo='bar')``."
msgstr ""
"この例では、``/blog/2005/`` へのリクエストに対して、Django は ``views."
"year_archive(request, year=2005, foo='bar')`` を呼び出します。"

msgid ""
"This technique is used in the :doc:`syndication framework </ref/contrib/"
"syndication>` to pass metadata and options to views."
msgstr ""
"このテクニックは :doc:`配信フィードフレームワーク </ref/contrib/"
"syndication>` で使われ、メタデータとオプションをビューに引き渡します。"

msgid "Dealing with conflicts"
msgstr "競合を解決する"

msgid ""
"It's possible to have a URL pattern which captures named keyword arguments, "
"and also passes arguments with the same names in its dictionary of extra "
"arguments. When this happens, the arguments in the dictionary will be used "
"instead of the arguments captured in the URL."
msgstr ""
"名付けられたキーワード引数をキャプチャする URL パターンを使うこともできます。"
"これは、追加の引数のディクショナリ内と同じ名前の引数を引き渡します。このと"
"き、URL 内でキャプチャされた引数ではなく、ディクショナリ内の引数が使われま"
"す。"

msgid "Passing extra options to ``include()``"
msgstr "``include()`` に追加のオプションを引き渡す"

msgid ""
"Similarly, you can pass extra options to :func:`~django.urls.include` and "
"each line in the included URLconf will be passed the extra options."
msgstr ""
"同様に、 :func:`~django.urls.include` に追加オプションを渡すと、 インクルード"
"された URLconf の各行に追加オプションが渡されます。"

msgid "For example, these two URLconf sets are functionally identical:"
msgstr "例えば、以下の 2 つの URLconf のセットはまったく同じように機能します:"

msgid "Set one::"
msgstr "セット 1::"

msgid "Set two::"
msgstr "セット 2::"

msgid ""
"Note that extra options will *always* be passed to *every* line in the "
"included URLconf, regardless of whether the line's view actually accepts "
"those options as valid. For this reason, this technique is only useful if "
"you're certain that every view in the included URLconf accepts the extra "
"options you're passing."
msgstr ""
"行のビューが実際にそれらのオプションを有効として受け入れるかどうかに関わら"
"ず、追加のオプションが *常に* インクルードされている URLconfの *すべての* 行"
"に引き渡されることに注意してください。 このため、このテクニックは、インクルー"
"ドされた URLconf のすべてのビューが、引き渡される追加のオプションを受け入れる"
"ことが確実である場合にのみ役立ちます。"

msgid "Reverse resolution of URLs"
msgstr "URL の逆引き"

msgid ""
"A common need when working on a Django project is the possibility to obtain "
"URLs in their final forms either for embedding in generated content (views "
"and assets URLs, URLs shown to the user, etc.) or for handling of the "
"navigation flow on the server side (redirections, etc.)"
msgstr ""
"Django プロジェクトで作業するときの一般的なニーズとして、生成されたコンテン"
"ツ (ビューとアセットのURL、ユーザーに表示されるURLなど) への埋め込み、または"
"サーバーサイドでのナビゲーションフローの処理 (リダイレクトなど) のどちらかに"
"対して、最終的なフォーム内で URL を取得することが挙げられます。"

msgid ""
"It is strongly desirable to avoid hard-coding these URLs (a laborious, non-"
"scalable and error-prone strategy). Equally dangerous is devising ad-hoc "
"mechanisms to generate URLs that are parallel to the design described by the "
"URLconf, which can result in the production of URLs that become stale over "
"time."
msgstr ""
"こうした URL のハードコーディング (手間がかかり、スケールしにくく、誤りが起こ"
"りやすい戦略) は、避けることが強く望まれます。 同様に危険なのは、URLconf で記"
"述された設計と並行して URL を生成するような一時的な仕組みを考え出してしまうこ"
"とです。これは、時間の経過とともに古くて使えない URL が生成されてしまう原因と"
"なります。"

msgid ""
"In other words, what's needed is a DRY mechanism. Among other advantages it "
"would allow evolution of the URL design without having to go over all the "
"project source code to search and replace outdated URLs."
msgstr ""
"言い換えると、必要なのはDRYな仕組みです。 数々の利点の中でも、これは URL 設計"
"が進化していけるようにします。プロジェクトソースコードを全て検索して古い URL "
"を置換する必要はありません。"

msgid ""
"The primary piece of information we have available to get a URL is an "
"identification (e.g. the name) of the view in charge of handling it. Other "
"pieces of information that necessarily must participate in the lookup of the "
"right URL are the types (positional, keyword) and values of the view "
"arguments."
msgstr ""
"URLを取得するために利用可能な主な情報は、それを扱うビューの識別（例えば名前）"
"です。正しい URL を探し出すために必要な他の情報は、ビューの引数の型 (位置、"
"キーワード) と値です。"

msgid ""
"Django provides a solution such that the URL mapper is the only repository "
"of the URL design. You feed it with your URLconf and then it can be used in "
"both directions:"
msgstr ""
"Django は URL マッパーが URL 設計の唯一のリポジトリとなるような解決策を提供し"
"ます。URLconfを入力すると、双方向で使用できます:"

msgid ""
"Starting with a URL requested by the user/browser, it calls the right Django "
"view providing any arguments it might need with their values as extracted "
"from the URL."
msgstr ""
"ユーザ/ブラウザから要求された URL を起点に、URL から抽出した値で必要な引数を"
"与え、適切な Django ビューを呼び出します。"

msgid ""
"Starting with the identification of the corresponding Django view plus the "
"values of arguments that would be passed to it, obtain the associated URL."
msgstr ""
"Djangoにおいて、特定のビューとそれに渡される引数の値を特定した上で、関連する"
"URLを取得するプロセスが存在します。このプロセスでは、ビューの識別と引数の値を"
"もとに、それに紐づくURLを生成または特定できます。"

msgid ""
"The first one is the usage we've been discussing in the previous sections. "
"The second one is what is known as *reverse resolution of URLs*, *reverse "
"URL matching*, *reverse URL lookup*, or simply *URL reversing*."
msgstr ""
"最初のものは、前のセクションで説明した使い方です。もう1つは、 *URLの逆解決"
"* 、 *逆URLマッチング* 、 *逆URLルックアップ* 、あるいは単に *URLの逆引き* と"
"して知られているものです。"

msgid ""
"Django provides tools for performing URL reversing that match the different "
"layers where URLs are needed:"
msgstr ""
"Django は、 URL が必要とされる様々なレイヤにマッチする URL の逆引きを実行する"
"ためのツールを提供します:"

msgid "In templates: Using the :ttag:`url` template tag."
msgstr "テンプレートでは: :ttag:`url` を使います。"

msgid "In Python code: Using the :func:`~django.urls.reverse` function."
msgstr "Pythonコードでは: :func:`~django.urls.reverse` 関数を使います。"

msgid ""
"In higher level code related to handling of URLs of Django model instances: "
"The :meth:`~django.db.models.Model.get_absolute_url` method."
msgstr ""
"Django モデルインスタンスの URL のハンドリングに関連する、より高レベルのコー"
"ドでは: :meth:`~django.db.models.Model.get_absolute_url` を使います。"

msgid "Consider again this URLconf entry::"
msgstr "このURLconfのエントリーについてもう一度考えてみましょう:"

msgid ""
"According to this design, the URL for the archive corresponding to year "
"*nnnn* is ``/articles/<nnnn>/``."
msgstr ""
"この設計によると、 *nnnn* 年に対応するアーカイブのURLは ``/articles/<nnnn>/"
"`` です。"

msgid "You can obtain these in template code by using:"
msgstr "これらをテンプレートコードで取得するには、次のようにします:"

msgid "Or in Python code::"
msgstr "または Python コードで次のようにします:"

msgid ""
"If, for some reason, it was decided that the URLs where content for yearly "
"article archives are published at should be changed then you would only need "
"to change the entry in the URLconf."
msgstr ""
"もし何らかの理由で、年間記事アーカイブのコンテンツが公開されるURLを変更するこ"
"とになった場合、URLconfのエントリを変更するだけです。"

msgid ""
"In some scenarios where views are of a generic nature, a many-to-one "
"relationship might exist between URLs and views. For these cases the view "
"name isn't a good enough identifier for it when comes the time of reversing "
"URLs. Read the next section to know about the solution Django provides for "
"this."
msgstr ""
"ビューが一般的なものである場合、URLとビューの間に多対一の関係が存在することが"
"あります。このような場合、 URL を反転させるときに、ビュー名は十分な識別子では"
"ありません。Django が提供する解決策を知るには、次の節を読んでください。"

msgid "Naming URL patterns"
msgstr "URL パターンに名前をつける"

msgid ""
"In order to perform URL reversing, you'll need to use **named URL patterns** "
"as done in the examples above. The string used for the URL name can contain "
"any characters you like. You are not restricted to valid Python names."
msgstr ""
"URL のリバースを処理するためには、上述の例で行ったように **名前をつけられた "
"URL パターン** を使う必要があります。URL 名として使う文字列には、どんな文字で"
"も含めることができます。Python の有効な名前に制限を受けません。"

msgid ""
"When naming URL patterns, choose names that are unlikely to clash with other "
"applications' choice of names. If you call your URL pattern ``comment`` and "
"another application does the same thing, the URL that :func:`~django.urls."
"reverse()` finds depends on whichever pattern is last in your project's "
"``urlpatterns`` list."
msgstr ""
"URL パターンに名前をつけるときは、他のアプリケーションが選んだ名前と衝突しに"
"くい名前を選んでください。URL パターンを ``comment`` と命名し、他のアプリケー"
"ションが同じことをした場合、 :func:`~django.urls.reverse()` が見つける URL "
"は、プロジェクトの ``urlpatterns`` リストの最後にあるパターンに依存します。"

msgid ""
"Putting a prefix on your URL names, perhaps derived from the application "
"name (such as ``myapp-comment`` instead of ``comment``), decreases the "
"chance of collision."
msgstr ""
"URL名にプレフィックス、例えばアプリケーション名から派生したもの"
"（ ``comment`` の代わりに ``myapp-comment`` など）を付けると、衝突の可能性を"
"減らせます。"

msgid ""
"You can deliberately choose the *same URL name* as another application if "
"you want to override a view. For example, a common use case is to override "
"the :class:`~django.contrib.auth.views.LoginView`. Parts of Django and most "
"third-party apps assume that this view has a URL pattern with the name "
"``login``. If you have a custom login view and give its URL the name "
"``login``, :func:`~django.urls.reverse()` will find your custom view as long "
"as it's in ``urlpatterns`` after ``django.contrib.auth.urls`` is included "
"(if that's included at all)."
msgstr ""
"ビューをオーバーライドしたい場合、他のアプリケーションと *同じURL名* を意図的"
"に選択できます。たとえば、よくある使用例は :class:`~django.contrib.auth."
"views.LoginView` をオーバーライドすることです。Django の一部やほとんどのサー"
"ドパーティアプリは、このビューが ``login`` という名前の URL パターンを持って"
"いると仮定しています。カスタムログインビューがあり、その URL に ``login`` と"
"いう名前をつけている場合、 :func:`~django.urls.reverse()` は、``django."
"contrib.auth.urls`` がインクルードされた後の ``urlpatterns`` にある限り（すべ"
"てを探して含まれていれば）、カスタムビューを見つけます。"

msgid ""
"You may also use the same name for multiple URL patterns if they differ in "
"their arguments. In addition to the URL name, :func:`~django.urls.reverse()` "
"matches the number of arguments and the names of the keyword arguments. Path "
"converters can also raise ``ValueError`` to indicate no match, see :ref:"
"`registering-custom-path-converters` for details."
msgstr ""
"引数が異なれば、複数の URL パターンに同じ名前を使うこともできます。URL 名に加"
"えて、 :func:`~django.urls.reverse()` は引数の数とキーワード引数の名前もマッ"
"チします。パスコンバータは、マッチしなかったことを示すために ``ValueError`` "
"を発生させることがあります。詳細は :ref:`registering-custom-path-converters` "
"を参照してください。"

msgid "URL namespaces"
msgstr "URL の名前空間"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"URL namespaces allow you to uniquely reverse :ref:`named URL patterns "
"<naming-url-patterns>` even if different applications use the same URL "
"names. It's a good practice for third-party apps to always use namespaced "
"URLs (as we did in the tutorial). Similarly, it also allows you to reverse "
"URLs if multiple instances of an application are deployed. In other words, "
"since multiple instances of a single application will share named URLs, "
"namespaces provide a way to tell these named URLs apart."
msgstr ""
"URL名前空間を使用すると、異なるアプリケーションが同じURL名を使用していて"
"も、 :ref:`名前付きURLパターン <naming-url-patterns>` を一意に逆引きできま"
"す。サードパーティアプリは常に名前空間付きのURLを使用することが良い習慣です"
"（チュートリアルで行ったように）。同様に、アプリケーションの複数のインスタン"
"スがデプロイされている場合にURLを逆引きすることも可能にします。言い換えれば、"
"単一のアプリケーションの複数のインスタンスが名前付きURLを共有する場合、名前空"
"間はこれらの名前付きURLを区別する方法を提供します。"

msgid ""
"Django applications that make proper use of URL namespacing can be deployed "
"more than once for a particular site. For example :mod:`django.contrib."
"admin` has an :class:`~django.contrib.admin.AdminSite` class which allows "
"you to :ref:`deploy more than one instance of the admin <multiple-admin-"
"sites>`.  In a later example, we'll discuss the idea of deploying the polls "
"application from the tutorial in two different locations so we can serve the "
"same functionality to two different audiences (authors and publishers)."
msgstr ""
"URL の名前空間を適切に使用する Django アプリケーションは、特定のサイトに対し"
"て何回でもデプロイできます。 たとえば :mod:`django.contrib.admin` には :"
"class:`~django.contrib.admin.AdminSite` クラスがあり、 :ref:`admin のインスタ"
"ンスを複数回デプロイ <multiple-admin-sites>` することができます。後者の例で"
"は、2 つの異なるユーザー (著者と出版者) に同じ機能を提供できるよう、チュート"
"リアルで扱った polls アプリケーションを例に、2 つの異なる場所にデプロイすると"
"いう考え方について説明します。"

msgid "A URL namespace comes in two parts, both of which are strings:"
msgstr "URL の名前空間は 2 つの部分に分かれ、両方とも文字列で表されます:"

msgid "application namespace"
msgstr "アプリケーションの名前空間"

msgid ""
"This describes the name of the application that is being deployed. Every "
"instance of a single application will have the same application namespace. "
"For example, Django's admin application has the somewhat predictable "
"application namespace of ``'admin'``."
msgstr ""
"デプロイされているアプリケーションの名前を示します。 単一のアプリケーションの"
"すべてのインスタンスは、同一のアプリケーション名前空間を持ちます。 例えば、"
"Django の admin アプリケーションには、``'admin'`` という比較的分かりやすいア"
"プリケーション名前空間を持っています。"

msgid "instance namespace"
msgstr "インスタンスの名前空間"

msgid ""
"This identifies a specific instance of an application. Instance namespaces "
"should be unique across your entire project. However, an instance namespace "
"can be the same as the application namespace. This is used to specify a "
"default instance of an application. For example, the default Django admin "
"instance has an instance namespace of ``'admin'``."
msgstr ""
"アプリケーションの特定のインスタンスを識別します。 インスタンス名前空間は、プ"
"ロジェクト全体で一意である必要があります。ただし、インスタンス名前空間は、ア"
"プリケーション名前空間と同じにすることができます。これは、アプリケーションの"
"デフォルトインスタンスを指定するために使用されます。 例えば、デフォルトの "
"Django admin インスタンスは ``'admin'`` というインスタンス名前空間を持ってい"
"ます。"

msgid ""
"Namespaced URLs are specified using the ``':'`` operator. For example, the "
"main index page of the admin application is referenced using ``'admin:"
"index'``. This indicates a namespace of ``'admin'``, and a named URL of "
"``'index'``."
msgstr ""
"名前空間の URL は、 ``':'`` 演算子を使って指定します。 たとえば、admin アプリ"
"ケーションのメインインデックスページは ``'admin:index'`` で参照されます。 こ"
"れは ``'admin'`` という名前空間と ``'index'`` という名前の URL を示します。"

msgid ""
"Namespaces can also be nested. The named URL ``'sports:polls:index'`` would "
"look for a pattern named ``'index'`` in the namespace ``'polls'`` that is "
"itself defined within the top-level namespace ``'sports'``."
msgstr ""
"名前空間はネストすることもできます。 名前付きの URL ``'sports:polls:index'`` "
"は、トップレベルの名前空間 ``'sports'`` 内で定義されている名前空間 "
"``'polls'`` 内で ``'index'`` と名前がつけられたパターンを探します。"

msgid "Reversing namespaced URLs"
msgstr "名前空間の URL を逆引きする"

msgid ""
"When given a namespaced URL (e.g. ``'polls:index'``) to resolve, Django "
"splits the fully qualified name into parts and then tries the following "
"lookup:"
msgstr ""
"名前空間の URL (例: ``'polls:index'``) が与えられると、Django 完全修飾名を"
"パーツに分割し、以下のルックアップを試みます:"

msgid ""
"First, Django looks for a matching :term:`application namespace` (in this "
"example, ``'polls'``). This will yield a list of instances of that "
"application."
msgstr ""
"まず最初に、Django は :term:`アプリケーションの名前空間` (ここでは "
"``'polls'``) との一致を検索します。これは、このアプリケーションのインスタンス"
"のリストを生成します。"

msgid ""
"If there is a current application defined, Django finds and returns the URL "
"resolver for that instance. The current application can be specified with "
"the ``current_app`` argument to the :func:`~django.urls.reverse()` function."
msgstr ""
"現在のアプリケーションが定義されている場合、Django はそのインスタンスに対し"
"て URL リゾルバを探し出し、返します。現在のアプリケーションは :func:`~django."
"urls.reverse()` 関数への ``current_app`` 引数で指定できます。"

msgid ""
"The :ttag:`url` template tag uses the namespace of the currently resolved "
"view as the current application in a :class:`~django.template."
"RequestContext`. You can override this default by setting the current "
"application on the :attr:`request.current_app <django.http.HttpRequest."
"current_app>` attribute."
msgstr ""
":ttag:`url` テンプレートタグは、:class:`~django.template.RequestContext` 内で"
"現在のアプリケーションとされているビューの名前空間を使います。このデフォルト"
"設定は、:attr:`request.current_app <django.http.HttpRequest.current_app>` 属"
"性で現在のアプリケーションを設定することでオーバーライドできます。"

msgid ""
"If there is no current application, Django looks for a default application "
"instance. The default application instance is the instance that has an :term:"
"`instance namespace` matching the :term:`application namespace` (in this "
"example, an instance of ``polls`` called ``'polls'``)."
msgstr ""
"現在のアプリケーションがない場合、Django はデフォルトのアプリケーションインス"
"タンスを探します。デフォルトのアプリケーションインスタンスは、 :term:"
"`application namespace` と一致する :term:`instance namespace` を持つインスタ"
"ンスです。 (ここでは ``'polls'`` と呼ばれる ``polls`` のインスタンスです)."

msgid ""
"If there is no default application instance, Django will pick the last "
"deployed instance of the application, whatever its instance name may be."
msgstr ""
"デフォルトのアプリケーションインスタンスがない場合、Django は、そのインスタン"
"ス名が何であれ、アプリケーションの最後にデプロイされたインスタンスを利用しま"
"す。"

msgid ""
"If the provided namespace doesn't match an :term:`application namespace` in "
"step 1, Django will attempt a direct lookup of the namespace as an :term:"
"`instance namespace`."
msgstr ""
"提供された名前空間がステップ 1 の :term:`application namespace` と一致しない"
"場合、Django は名前空間のルックアップを :term:`instance namespace` として直接"
"試みます。"

msgid ""
"If there are nested namespaces, these steps are repeated for each part of "
"the namespace until only the view name is unresolved. The view name will "
"then be resolved into a URL in the namespace that has been found."
msgstr ""
"ネストされた名前空間がある場合、これらのステップはビューの名前のみが未解決に"
"なるまで名前空間の各パートに対して繰り返されます。その後に、このビュー名は見"
"つかった名前空間内の URL として解決されます。"

msgid ""
"To show this resolution strategy in action, consider an example of two "
"instances of the ``polls`` application from the tutorial: one called "
"``'author-polls'`` and one called ``'publisher-polls'``. Assume we have "
"enhanced that application so that it takes the instance namespace into "
"consideration when creating and displaying polls."
msgstr ""
"実際の名前解決戦略を示すため、チュートリアルで扱った ``polls`` アプリケーショ"
"ンの 2 つのインスタンスの例を考えてみましょう: 1 つは ``'author-polls'``、も"
"う 1 つは ``'publisher-polls'`` と名付けられています。polls を作成して表示す"
"るときにインスタンス名前空間を考慮するように、そのアプリケーションを拡張した"
"とします。"

msgid "``polls/urls.py``"
msgstr "``polls/urls.py``"

msgid "Using this setup, the following lookups are possible:"
msgstr "この設定を使うことで、以下のルックアップが可能となります:"

msgid ""
"If one of the instances is current - say, if we were rendering the detail "
"page in the instance ``'author-polls'`` - ``'polls:index'`` will resolve to "
"the index page of the ``'author-polls'`` instance; i.e. both of the "
"following will result in ``\"/author-polls/\"``."
msgstr ""
"インスタンスの一つが現在参照されている場合（例えば、インスタンス ``'author-"
"polls'`` の詳細ページをレンダリングしている場合） ``'polls:index'`` は "
"``'author-polls'`` インスタンスのインデックスページを解決します。つまり、以下"
"のどちらも ``\"/author-polls/\"`` という結果になります。"

msgid "In the method of a class-based view::"
msgstr "クラスベースビューのメソッド内::"

msgid "and in the template:"
msgstr "テンプレート内:"

msgid ""
"If there is no current instance - say, if we were rendering a page somewhere "
"else on the site - ``'polls:index'`` will resolve to the last registered "
"instance of ``polls``. Since there is no default instance (instance "
"namespace of ``'polls'``), the last instance of ``polls`` that is registered "
"will be used. This would be ``'publisher-polls'`` since it's declared last "
"in the ``urlpatterns``."
msgstr ""
"現在のインスタンスがない場合（例えば、サイトの他の場所でページをレンダリング"
"している場合） ``'polls:index'`` は ``polls`` の最後に登録されたインスタンス"
"に名前解決されます。デフォルトのインスタンス (``'polls'`` のインスタンス名前"
"空間) がないため、登録された最後の ``polls`` のインスタンスが使用されます。こ"
"れは、``urlpatterns`` で最後に宣言されている ``'publisher-polls'`` になりま"
"す。"

msgid ""
"``'author-polls:index'`` will always resolve to the index page of the "
"instance ``'author-polls'`` (and likewise for ``'publisher-polls'``) ."
msgstr ""
"``'author-polls:index'`` は、常に ``'author-polls'`` のインスタンスのインデッ"
"クスページに名前解決します (そして ``'publisher-polls'`` に対しても同じで"
"す) ."

msgid ""
"If there were also a default instance - i.e., an instance named ``'polls'`` "
"- the only change from above would be in the case where there is no current "
"instance (the second item in the list above). In this case ``'polls:index'`` "
"would resolve to the index page of the default instance instead of the "
"instance declared last in ``urlpatterns``."
msgstr ""
"デフォルトのインスタンス、つまり ``'polls'`` という名前のインスタンスがある場"
"合、上記からの唯一の変更点は現在のインスタンスがない場合（上記リストの2番目の"
"項目）です。この場合、``'polls:index'`` は ``urlpatterns`` で最後に宣言された"
"インスタンスの代わりにデフォルトインスタンスのインデックスページに名前解決さ"
"れます。"

msgid "URL namespaces and included URLconfs"
msgstr "URLの名前空間とインクルードされた URLconfs"

msgid ""
"Application namespaces of included URLconfs can be specified in two ways."
msgstr ""
"インクルードされた URLconfs のアプリケーション名前空間は、2 つの方法で指定で"
"きます。"

msgid ""
"Firstly, you can set an ``app_name`` attribute in the included URLconf "
"module, at the same level as the ``urlpatterns`` attribute. You have to pass "
"the actual module, or a string reference to the module, to :func:`~django."
"urls.include`, not the list of ``urlpatterns`` itself."
msgstr ""
"1 つめは、インクルードされた URLconf で ``app_name`` 属性をセットする方法で、"
"これは ``urlpatterns`` 属性と同じレベルに記述します。``urlpatterns`` のリスト"
"自体ではなく、実際のモジュールないし :func:`~django.urls.include` への文字列"
"参照に対して引き渡す必要があります。"

msgid ""
"The URLs defined in ``polls.urls`` will have an application namespace "
"``polls``."
msgstr ""
"``polls.urls`` 内で定義された URL は、アプリケーション名前空間 ``polls`` を持"
"ちます。"

msgid ""
"Secondly, you can include an object that contains embedded namespace data. "
"If you ``include()`` a list of :func:`~django.urls.path` or :func:`~django."
"urls.re_path` instances, the URLs contained in that object will be added to "
"the global namespace. However, you can also ``include()`` a 2-tuple "
"containing:"
msgstr ""
"2つめは、埋め込みの名前空間データを含むオブジェクトをインクルードする方法で"
"す。 :func:`~django.urls.path` または :func:`~django.urls.re_path` インスタン"
"スのリストを ``include()`` する場合、このオブジェクトに含まれる URL はグロー"
"バルの名前空間に含まれるようになります。ただし、以下を含む 2値タプルを "
"``include()`` することもできます:"

msgid ""
"This will include the nominated URL patterns into the given application "
"namespace."
msgstr ""
"これは、与えられたアプリケーション名前空間に、指定された URL パターンをインク"
"ルードします。"

msgid ""
"The instance namespace can be specified using the ``namespace`` argument to :"
"func:`~django.urls.include`. If the instance namespace is not specified, it "
"will default to the included URLconf's application namespace. This means it "
"will also be the default instance for that namespace."
msgstr ""
"インスタンスの名前空間は、 :func:`~django.urls.include` に ``namespace`` 引数"
"を使うことで指定できます。インスタンス名前空間が指定されていない場合、インク"
"ルードされた URLconf のアプリケーション名前空間がデフォルトとなります。つま"
"り、その名前空間のデフォルトインスタンスになります。"

msgid "Writing views"
msgstr "ビューを記述する"

msgid ""
"A view function, or *view* for short, is a Python function that takes a web "
"request and returns a web response. This response can be the HTML contents "
"of a web page, or a redirect, or a 404 error, or an XML document, or an "
"image . . . or anything, really. The view itself contains whatever arbitrary "
"logic is necessary to return that response. This code can live anywhere you "
"want, as long as it's on your Python path. There's no other requirement--no "
"\"magic,\" so to speak. For the sake of putting the code *somewhere*, the "
"convention is to put views in a file called ``views.py``, placed in your "
"project or application directory."
msgstr ""
"ビュー関数、つまり *view* は、Web リクエストを受け取って Web レスポンスを返す"
"Python 関数です。 このレスポンスは、WebページのHTMLコンテンツ、リダイレクトや"
"404エラー、またはXMLドキュメントやイメージ、その他何にでもなり得ます (本当に"
"そうなんです)。ビュー自体には、このレスポンスを返すために必要な、任意の論理が"
"含まれます。 このコードは、Python パス上にあればどこでも好きな場所に置くこと"
"ができます。それ以外の要件はありません -- つまり \"魔法\" はないのです。 コー"
"ドを *どこかに* 置くために、慣習ではプロジェクトやアプリケーションのディレク"
"トリに置かれた ``views.py`` というファイルにビューを記述します。"

msgid "A simple view"
msgstr "シンプルなビュー"

msgid ""
"Here's a view that returns the current date and time, as an HTML document::"
msgstr "以下は、HTML ドキュメントとして、現在の日付と時刻を返すビューです::"

msgid "Let's step through this code one line at a time:"
msgstr "1 行ずつコードを見ていきましょう:"

msgid ""
"First, we import the class :class:`~django.http.HttpResponse` from the :mod:"
"`django.http` module, along with Python's ``datetime`` library."
msgstr ""
"最初に、Python の ``datetime`` ライブラリ とともに、クラス :class:`~django."
"http.HttpResponse` を :mod:`django.http` モジュールからインポートします。"

msgid ""
"Next, we define a function called ``current_datetime``. This is the view "
"function. Each view function takes an :class:`~django.http.HttpRequest` "
"object as its first parameter, which is typically named ``request``."
msgstr ""
"次に、``current_datetime`` という関数を定義します。これがビュー関数です。それ"
"ぞれのビュー関数は、:class:`~django.http.HttpRequest` のオブジェクトを第 1 引"
"数として受け取り、一般的には ``request`` と名付けられます。"

msgid ""
"Note that the name of the view function doesn't matter; it doesn't have to "
"be named in a certain way in order for Django to recognize it. We're calling "
"it ``current_datetime`` here, because that name clearly indicates what it "
"does."
msgstr ""
"ビュー関数の名前は重要ではありません; Django が識別するために特別な方法で名前"
"を付ける必要はありません。ここでは、``current_datetime`` という名前はその機能"
"を的確に表しているので、ビュー関数を ``current_datetime`` と呼ぶことにしま"
"す。"

msgid ""
"The view returns an :class:`~django.http.HttpResponse` object that contains "
"the generated response. Each view function is responsible for returning an :"
"class:`~django.http.HttpResponse` object. (There are exceptions, but we'll "
"get to those later.)"
msgstr ""
"このビューは、生成されたレスポンスを含む :class:`~django.http.HttpResponse` "
"のオブジェクトを返します。それぞれのビュー関数には、:class:`~django.http."
"HttpResponse` オブジェクトを返す義務があります。(例外もありますので、後で説明"
"します。)"

msgid "Django's Time Zone"
msgstr "Django のタイムゾーン"

msgid ""
"Django includes a :setting:`TIME_ZONE` setting that defaults to ``America/"
"Chicago``. This probably isn't where you live, so you might want to change "
"it in your settings file."
msgstr ""
"Django は :setting:`TIME_ZONE` 設定を含んでおり、デフォルトは ``America/"
"Chicago`` です。これはあなたの住む場所ではないかもしれませんので、あなたの設"
"定ファイルを変更する必要があるかもしれません。"

msgid "Mapping URLs to views"
msgstr "URL をビューにマッピングする"

msgid ""
"So, to recap, this view function returns an HTML page that includes the "
"current date and time. To display this view at a particular URL, you'll need "
"to create a *URLconf*; see :doc:`/topics/http/urls` for instructions."
msgstr ""
"要約すると、このビュー関数は現在の日付と時刻を含む HTML ページを返します。こ"
"のビューを特定の URL で表示するには、*URLconf* を作成する必要があります。その"
"方法は、:doc:`/topics/http/urls` を参照してください。"

msgid "Returning errors"
msgstr "エラーを返す"

msgid ""
"Django provides help for returning HTTP error codes. There are subclasses "
"of :class:`~django.http.HttpResponse` for a number of common HTTP status "
"codes other than 200 (which means *\"OK\"*). You can find the full list of "
"available subclasses in the :ref:`request/response <ref-httpresponse-"
"subclasses>` documentation. Return an instance of one of those subclasses "
"instead of a normal :class:`~django.http.HttpResponse` in order to signify "
"an error. For example::"
msgstr ""
"Django には HTTP エラーコードを返す便利な方法が用意されています。(*\"OK\"* を"
"意味する) 200 以外の数ある一般的なHTTPステータスコードに対して、:class:"
"`~django.http.HttpResponse` サブクラスがあります。使用可能なサブクラスの完全"
"なリストは、:ref:`request/response <ref-httpresponse-subclasses>` ドキュメン"
"トにあります。エラーを知らせるためには、通常の :class:`~django.http."
"HttpResponse` の代わりに、これらのサブクラスのインスタンスを返してください。"
"例えば:"

msgid ""
"There isn't a specialized subclass for every possible HTTP response code, "
"since many of them aren't going to be that common. However, as documented in "
"the :class:`~django.http.HttpResponse` documentation, you can also pass the "
"HTTP status code into the constructor for :class:`~django.http.HttpResponse` "
"to create a return class for any status code you like. For example::"
msgstr ""
"レスポンスコードの多くは使用頻度が低いため、発生しうる HTTP レスポンスコード"
"すべてにそれぞれ特化したサブクラスが用意されているわけではありません。 しか"
"し、:class:`~django.http.HttpResponse` のドキュメントに書かれているように、"
"HTTP ステータスコードをコンストラクタに渡して、:class:`~django.http."
"HttpResponse` が任意のステータスコードを返すクラスを作成することもできます。"
"例えば::"

msgid ""
"Because 404 errors are by far the most common HTTP error, there's an easier "
"way to handle those errors."
msgstr ""
"404 エラーは最も一般的な HTTP エラーなので、簡単に扱える方法があります。"

msgid "The ``Http404`` exception"
msgstr "``Http404`` 例外"

msgid ""
"When you return an error such as :class:`~django.http.HttpResponseNotFound`, "
"you're responsible for defining the HTML of the resulting error page::"
msgstr ""
"エラーを返すときは (例えば :class:`~django.http.HttpResponseNotFound`)、エ"
"ラーページを結果とする HTML を定義する責任があります::"

msgid ""
"For convenience, and because it's a good idea to have a consistent 404 error "
"page across your site, Django provides an ``Http404`` exception. If you "
"raise ``Http404`` at any point in a view function, Django will catch it and "
"return the standard error page for your application, along with an HTTP "
"error code 404."
msgstr ""
"利便性に加え、サイト全体を通じて一貫性のある 404 ページを表示できるようにする"
"ため、Djangoは ``Http404`` 例外を提供しています。ビュー関数の任意のポイント"
"で ``Http404`` を発生させると、Djangoはそれをキャッチして、アプリケーションの"
"標準エラーページとHTTPエラーコード404を返します。"

msgid ""
"In order to show customized HTML when Django returns a 404, you can create "
"an HTML template named ``404.html`` and place it in the top level of your "
"template tree. This template will then be served when :setting:`DEBUG` is "
"set to ``False``."
msgstr ""
"Django が 404 を返したときに独自の HTML を表示したいときは、``404.html`` とい"
"う名前の HTML テンプレートを作成し、テンプレートツリーのトップレベルの場所に"
"置いてください。:setting:`DEBUG` が ``False`` にセットされているとき、このテ"
"ンプレートが使われます。"

msgid ""
"When :setting:`DEBUG` is ``True``, you can provide a message to ``Http404`` "
"and it will appear in the standard 404 debug template. Use these messages "
"for debugging purposes; they generally aren't suitable for use in a "
"production 404 template."
msgstr ""
":setting:`DEBUG` が ``True`` の場合、``Http404`` にメッセージを提供し、標準的"
"な 404 デバッグテンプレートに表示させることができます。このメッセージ機能はデ"
"バッグ用に使用してください; 通常、プロダクトの404 テンプレートとしては不向き"
"です。"

msgid "Customizing error views"
msgstr "エラービューをカスタマイズする"

msgid ""
"The default error views in Django should suffice for most web applications, "
"but can easily be overridden if you need any custom behavior. Specify the "
"handlers as seen below in your URLconf (setting them anywhere else will have "
"no effect)."
msgstr ""
"Django のデフォルトのエラービューは、ほとんどの Web アプリケーションで十分で"
"すが、独自の動作が必要な場合は簡単にオーバーライドできます。 URLconf で以下の"
"ようにハンドラを指定してください (他の場所で設定しても効果はありません)。"

msgid ""
"The :func:`~django.views.defaults.page_not_found` view is overridden by :"
"data:`~django.conf.urls.handler404`::"
msgstr ""
":func:`~django.views.defaults.page_not_found` ビューは :data:`~django.conf."
"urls.handler404` でオーバーライドされます::"

msgid ""
"The :func:`~django.views.defaults.server_error` view is overridden by :data:"
"`~django.conf.urls.handler500`::"
msgstr ""
":func:`~django.views.defaults.server_error` ビューは :data:`~django.conf."
"urls.handler500` でオーバーライドされます::"

msgid ""
"The :func:`~django.views.defaults.permission_denied` view is overridden by :"
"data:`~django.conf.urls.handler403`::"
msgstr ""
":func:`~django.views.defaults.permission_denied` ビューは :data:`~django."
"conf.urls.handler403` でオーバーライドされます::"

msgid ""
"The :func:`~django.views.defaults.bad_request` view is overridden by :data:"
"`~django.conf.urls.handler400`::"
msgstr ""
":func:`~django.views.defaults.bad_request` ビューは :data:`~django.conf.urls."
"handler400` でオーバーライドされます::"

msgid ""
"Use the :setting:`CSRF_FAILURE_VIEW` setting to override the CSRF error view."
msgstr ""
"CSRF エラービューをオーバーライドするには、:setting:`CSRF_FAILURE_VIEW` 設定"
"を使用してください。"

msgid "Testing custom error views"
msgstr "カスタムエラービューのテスト"

msgid ""
"To test the response of a custom error handler, raise the appropriate "
"exception in a test view. For example::"
msgstr ""
"カスタムエラーのハンドラーのレスポンスをテストするには、たとえば以下のよう"
"に、テストビューの中で適切な例外を起こします。"

msgid ""
"As well as being synchronous functions, views can also be asynchronous "
"(\"async\") functions, normally defined using Python's ``async def`` syntax. "
"Django will automatically detect these and run them in an async context. "
"However, you will need to use an async server based on ASGI to get their "
"performance benefits."
msgstr ""
"同期関数だけでなく、ビューは非同期(\"async\")関数にすることもでき、通常は "
"Python の ``async def`` 構文を使って定義します。Django はこれらを自動的に検出"
"し、非同期コンテキストで実行します。しかし、そのパフォーマンス上の利点を得る"
"には、 ASGI ベースの非同期サーバを使う必要があります。"

msgid "Here's an example of an async view::"
msgstr "以下は非同期ビューの例です:"

msgid ""
"You can read more about Django's async support, and how to best use async "
"views, in :doc:`/topics/async`."
msgstr ""
"Django の非同期サポートや、非同期ビューの最適な使い方については、 :doc:`/"
"topics/async` を参照してください。"

msgid "Format localization"
msgstr "表示形式のローカライズ"

msgid ""
"Django's formatting system is capable of displaying dates, times and numbers "
"in templates using the format specified for the current :term:`locale "
"<locale name>`. It also handles localized input in forms."
msgstr ""
"Django の表示形式システムは、カレント :term:`ロケール <locale name>` に合った"
"表示形式を使って日付、時刻、数値をテンプレート内で表示することができます。ま"
"た、フォームでのローカライズされた入力も処理します。"

msgid ""
"Two users accessing the same content may see dates, times and numbers "
"formatted in different ways, depending on the formats for their current "
"locale."
msgstr ""
"同じコンテンツにアクセスする2人のユーザーが、現在のロケールのフォーマットに応"
"じて、日付、時刻、数字を異なる方法で表示することがあります。"

msgid ""
"To enable number formatting with thousand separators, it is necessary to "
"set :setting:`USE_THOUSAND_SEPARATOR = True <USE_THOUSAND_SEPARATOR>` in "
"your settings file. Alternatively, you could use :tfilter:`intcomma` to "
"format numbers in your template."
msgstr ""
"3桁区切りを使用した数値フォーマットを有効にするには、設定ファイルで :setting:"
"`USE_THOUSAND_SEPARATOR = True <USE_THOUSAND_SEPARATOR>` を設定する必要があり"
"ます。別の方法として、 :tfilter:`intcomma` を使ってテンプレート内で数値を"
"フォーマットすることもできます。"

msgid ""
"There is a related :setting:`USE_I18N` setting that controls if Django "
"should activate translation. See :doc:`/topics/i18n/translation` for more "
"details."
msgstr ""
"関連する :setting:`USE_I18N` 設定があり、 Django が翻訳を有効にするかどうかを"
"制御します。詳しくは :doc:`/topics/i18n/translation` を参照してください。"

msgid "Locale aware input in forms"
msgstr "フォームでのロケールを認識する入力"

msgid ""
"When formatting is enabled, Django can use localized formats when parsing "
"dates, times and numbers in forms. That means it tries different formats for "
"different locales when guessing the format used by the user when inputting "
"data on forms."
msgstr ""
"表示形式機能が有効のとき、Django がフォーム内で日付、時刻、数値を描画する際"
"に、ローカライズされた表示形式を使用できます。フォームにデータが入力されたと"
"き、ユーザによって使用される表示形式を推測し、異なるロケールに対する異なる表"
"示形式を試みることを意味します。"

msgid ""
"Django uses different formats for displaying data to those it uses for "
"parsing data. Most notably, the formats for parsing dates can't use the "
"``%a`` (abbreviated weekday name), ``%A`` (full weekday name), ``%b`` "
"(abbreviated month name), ``%B`` (full month name), or ``%p`` (AM/PM)."
msgstr ""
"Django は、データを描画するために使うものに対して、データを表示するための異な"
"る表示形式を使います。特に、日付を描画するための表示形式は、``%a`` (省略され"
"た曜日名)、``%A`` (曜日名), ``%b`` (省略された月名)、``%B`` (月名)、``%p`` "
"(AM/PM) を使うことができません。"

msgid ""
"To enable a form field to localize input and output data use its "
"``localize`` argument::"
msgstr ""
"フォームフィールドの入出力データをローカライズするには ``localize`` 引数を使"
"います:"

msgid "Controlling localization in templates"
msgstr "テンプレート内でローカライズをコントロールする"

msgid ""
"Django tries to use a locale specific format whenever it outputs a value in "
"a template."
msgstr ""
"Django はテンプレートで値を出力するときは常にロケール固有の書式を使おうとし "
"ます。"

msgid ""
"However, it may not always be appropriate to use localized values -- for "
"example, if you're outputting JavaScript or XML that is designed to be "
"machine-readable, you will always want unlocalized values. You may also want "
"to use localization in selected templates, rather than using localization "
"everywhere."
msgstr ""
"しかし、ローカライズされた値を使うことが適切ではないこともあります -- 例え"
"ば、機械が読み込むためにデザインされた JavaScript や XML を出力している場合、"
"どんなときでも非ローカルの値が必要でしょう。また、全ての場所でローカライズを"
"適用するのではなく、特定のテンプレートだけで使いたいときもあるかもしれませ"
"ん。"

msgid ""
"To allow for fine control over the use of localization, Django provides the "
"``l10n`` template library that contains the following tags and filters."
msgstr ""
"ローカライズの仕様について細かいコントロールをするために、Django は ``l10n`` "
"テンプレートライブラリを提供しています。これは、以下のタグやフィルタを含んで"
"います。"

msgid "Template tags"
msgstr "テンプレートタグ"

msgid "``localize``"
msgstr "``localize``"

msgid ""
"Enables or disables localization of template variables in the contained "
"block."
msgstr ""
"ブロック内で、テンプレート変数のローカライズを有効化または無効化します。"

msgid "To activate or deactivate localization for a template block, use:"
msgstr ""
"テンプレートブロックのローカライズを有効または無効にするには、次のようにしま"
"す:"

msgid ""
"See :tfilter:`localize` and :tfilter:`unlocalize` for template filters that "
"will do the same job on a per-variable basis."
msgstr ""
"各変数ベースで同じ仕事をするテンプレートフィルタについて、:tfilter:"
"`localize` と :tfilter:`unlocalize` を参照してください。"

msgid "Template filters"
msgstr "テンプレートフィルタ"

msgid "Forces localization of a single value."
msgstr "単数のローカライズを強制します。"

msgid ""
"To disable localization on a single value, use :tfilter:`unlocalize`. To "
"control localization over a large section of a template, use the :ttag:"
"`localize` template tag."
msgstr ""
"単数のローカライズを無効化するには、:tfilter:`unlocalize` を使ってください。"
"テンプレートの大きな範囲を通じてローカライズをコントロールするには、:ttag:"
"`localize` テンプレートタグを使ってください。"

msgid "``unlocalize``"
msgstr "``unlocalize``"

msgid "Forces a single value to be printed without localization."
msgstr "単数形がローカライズされずに表示されるように強制します。"

msgid ""
"To force localization of a single value, use :tfilter:`localize`. To control "
"localization over a large section of a template, use the :ttag:`localize` "
"template tag."
msgstr ""
"単数のローカライズを強制するには、:tfilter:`localize` を使ってください。テン"
"プレートの大きな範囲を通じてローカライズをコントロールするには、:ttag:"
"`localize` テンプレートタグを使ってください。"

msgid ""
"Returns a string representation for unlocalized numbers  (``int``, "
"``float``, or ``Decimal``)."
msgstr ""
"ローカライズされていない数値 (``int`` 、 ``float`` 、 ``Decimal``) の文字列表"
"現を返します。"

msgid "Creating custom format files"
msgstr "独自の表示形式ファイルを作成する"

msgid ""
"Django provides format definitions for many locales, but sometimes you might "
"want to create your own, because a format file doesn't exist for your "
"locale, or because you want to overwrite some of the values."
msgstr ""
"Django は多くのロケール用のフォーマット定義を提供していますが、自分のロケール"
"用のフォーマットファイルが存在しなかったり、いくつかの値を上書きしたりするた"
"めに、自分でフォーマット定義を作りたいこともあるでしょう。"

msgid ""
"To use custom formats, specify the path where you'll place format files "
"first.  To do that, set your :setting:`FORMAT_MODULE_PATH` setting to the "
"package where format files will exist, for instance::"
msgstr ""
"カスタムフォーマットを使用するには、まずフォーマットファイルを置くパスを指定"
"します。 そのためには :setting:`FORMAT_MODULE_PATH` 設定をフォーマットファイ"
"ルが存在するパッケージに設定します、例えば次のようにします:"

msgid ""
"Files are not placed directly in this directory, but in a directory named as "
"the locale, and must be named ``formats.py``. Be careful not to put "
"sensitive information in these files as values inside can be exposed if you "
"pass the string to ``django.utils.formats.get_format()`` (used by the :"
"tfilter:`date` template filter)."
msgstr ""
"ファイルはこのディレクトリに直接置くのではなく、ロケールと同じ名前のディレク"
"トリに置き、 ``formats.py`` という名前にする必要があります。 ``django.utils."
"formats.get_format()`` (:tfilter:`date` テンプレートフィルタで使用されます) "
"に文字列を渡すと、中の値が公開される可能性があるので、これらのファイルに機密"
"情報を書かないように注意してください。"

msgid ""
"To customize the English formats, a structure like this would be needed:"
msgstr "英語のフォーマットをカスタマイズするには、このような構造が必要です:"

msgid ""
"where :file:`formats.py` contains custom format definitions. For example::"
msgstr ""
"ここで :file:`formats.py` はカスタムフォーマットの定義を含んでいます。たとえ"
"ば:"

msgid ""
"to use a non-breaking space (Unicode ``00A0``) as a thousand separator, "
"instead of the default for English, a comma."
msgstr ""
"上記のようにすると、英語のデフォルトであるコンマの代わりに、区切りのないス"
"ペース（Unicode ``00A0``）を3桁区切りとして使うことができます。"

msgid "Limitations of the provided locale formats"
msgstr "提供されているロケール表示形式の限界"

msgid ""
"Some locales use context-sensitive formats for numbers, which Django's "
"localization system cannot handle automatically."
msgstr ""
"いくつかのロケールは、数字に対して文脈依存の表示形式を使います。これは、"
"Django のローカライズシステムでは自動的に扱うことはできません。"

msgid "Switzerland (German)"
msgstr "スイス (ドイツ語)"

msgid ""
"The Swiss number formatting depends on the type of number that is being "
"formatted. For monetary values, a comma is used as the thousand separator "
"and a decimal point for the decimal separator. For all other numbers, a "
"comma is used as decimal separator and a space as thousand separator. The "
"locale format provided by Django uses the generic separators, a comma for "
"decimal and a space for thousand separators."
msgstr ""
"スイスの数値の表示形式は、対象となる数字の種類によって決まります。貨幣の値に"
"対しては、カンマが 1000 区切りに使われ、小数点が小数区切りに使われます。他の"
"数字に対しては、カンマは小数区切りとして使われ、空白が 1000 区切りとして使わ"
"れます。Django によって提供されるロケール表示形式は、一般的な区切り文字、つま"
"り小数にはカンマそして1000 区切りには空白を使用します。"

msgid "Internationalization and localization"
msgstr "国際化とローカライズ"

msgid ""
"The goal of internationalization and localization is to allow a single web "
"application to offer its content in languages and formats tailored to the "
"audience."
msgstr ""
"国際化とローカライズの目的は、単一の Web アプリケーションが、閲覧者に合わせた"
"言語や表示形式でコンテンツを提供できるようにすることです。"

msgid ""
"Django has full support for :doc:`translation of text </topics/i18n/"
"translation>`, :doc:`formatting of dates, times and numbers </topics/i18n/"
"formatting>`, and :doc:`time zones </topics/i18n/timezones>`."
msgstr ""
"Django は :doc:`テキスト翻訳 </topics/i18n/translation>` 、:doc:`日時と数字の"
"表示形式 </topics/i18n/formatting>` 、:doc:`タイムゾーン </topics/i18n/"
"timezones>` をフルサポートしています。"

msgid "Essentially, Django does two things:"
msgstr "Django は、本質的には以下の2つを行います:"

msgid ""
"It allows developers and template authors to specify which parts of their "
"apps should be translated or formatted for local languages and cultures."
msgstr ""
"開発者やテンプレート作成者に、アプリケーションのどの部分がローカルな言語や文"
"化に合わせて翻訳や表示形式の設定がされるべきかを指定できるようにします。"

msgid ""
"It uses these hooks to localize web apps for particular users according to "
"their preferences."
msgstr ""
"特定のユーザの言語設定に従って、彼らに対して Web アプリケーションをローカライ"
"ズするために、フックを使います。"

msgid ""
"Translation depends on the target language, and formatting usually depends "
"on the target country. This information is provided by browsers in the "
"``Accept-Language`` header. However, the time zone isn't readily available."
msgstr ""
"翻訳は対象の言語により、表示形式は対象の国によります。これらの情報は、ブラウ"
"ザによって ``Accept-Language`` ヘッダにて提供されます。ただし、タイムゾーンは"
"簡単には利用できません。"

msgid "Definitions"
msgstr "定義"

msgid ""
"The words \"internationalization\" and \"localization\" often cause "
"confusion; here's a simplified definition:"
msgstr ""
"「国際化 (internationalization) 」と「ローカライズ (localization) 」という言"
"葉は混乱を招くことがあるため、ここで簡単に定義しておきます:"

msgid "internationalization"
msgstr "国際化 (internationalization)"

msgid "Preparing the software for localization. Usually done by developers."
msgstr ""
"ソフトウェアをローカライズに備えさせることです。通常、開発者によって行われま"
"す。"

msgid "localization"
msgstr "ローカライズ (localization)"

msgid ""
"Writing the translations and local formats. Usually done by translators."
msgstr ""
"翻訳およびローカルな表示形式を記述することです。通常、翻訳者によって行われま"
"す。"

msgid ""
"More details can be found in the `W3C Web Internationalization FAQ`_, the "
"`Wikipedia article`_ or the `GNU gettext documentation`_."
msgstr ""
"より詳しくは、`W3C Web Internationalization FAQ`_、`Wikipedia article`_、"
"`GNU gettext documentation`_ をご覧ください。"

msgid ""
"Translation is controlled by the :setting:`USE_I18N` setting. However, it "
"involves internationalization and localization. The name of the setting is "
"an unfortunate result of Django's history."
msgstr ""
"翻訳は :setting:`USE_I18N` 設定によって制御されます。しかし、これは国際化と"
"ローカライズを含んでいます。この設定の名前は Django の不幸な歴史の結果です。"

msgid ""
"Here are some other terms that will help us to handle a common language:"
msgstr ""
"その他、私たちが共通の言葉を使うにあたり、いくつかの専門用語が手助けとなるで"
"しょう:"

msgid "locale name"
msgstr "ロケール名"

msgid ""
"A locale name, either a language specification of the form ``ll`` or a "
"combined language and country specification of the form ``ll_CC``. Examples: "
"``it``, ``de_AT``, ``es``, ``pt_BR``, ``sr_Latn``. The language part is "
"always in lowercase. The country part is in titlecase if it has more than 2 "
"characters, otherwise it's in uppercase. The separator is an underscore."
msgstr ""
"ロケール名は ``ll`` 形式の言語指定、または ``ll_CC`` 形式の言語と国を組み合わ"
"せた指定です。たとえば ``it``, ``de_AT``, ``es``, ``pt_BR``, ``sr_Latn``. 言"
"語部分は常に小文字です。国名部分は2文字以上の場合はタイトルケース、それ以外は"
"大文字です。区切り文字はアンダースコアです。"

msgid "language code"
msgstr "言語コード"

msgid ""
"Represents the name of a language. Browsers send the names of the languages "
"they accept in the ``Accept-Language`` HTTP header using this format. "
"Examples: ``it``, ``de-at``, ``es``, ``pt-br``. Language codes are generally "
"represented in lowercase, but the HTTP ``Accept-Language`` header is case-"
"insensitive. The separator is a dash."
msgstr ""
"言語名を表します。ブラウザは ``Accept-Language`` HTTPヘッダの中でこの表示形式"
"を使って表示可能な言語名を通知します。 例えば ``it``、 ``de-at``、 ``es``、 "
"``pt-br`` が該当します。言語コードは、一般的に小文字で表されますが、HTTP の "
"``Accept-Language`` ヘッダーは大文字・小文字を区別しません。区切り文字はダッ"
"シュ (-) です。"

msgid "message file"
msgstr "メッセージファイル"

msgid ""
"A message file is a plain-text file, representing a single language, that "
"contains all available :term:`translation strings <translation string>` and "
"how they should be represented in the given language. Message files have a "
"``.po`` file extension."
msgstr ""
"メッセージファイルは一つの言語を表すプレーンテキストファイルです。この中で"
"は、利用可能な全ての :term:`翻訳文字列 <translation string>` と、それらがその"
"言語でどのように表されるかが記述されます。ファイル拡張子は ``.po`` です。"

msgid "translation string"
msgstr "翻訳文字列"

msgid "A literal that can be translated."
msgstr "翻訳可能なリテラル文字列です。"

msgid "format file"
msgstr "表示形式ファイル"

msgid ""
"A format file is a Python module that defines the data formats for a given "
"locale."
msgstr ""
"書式設定ファイルは Python モジュールで、対象のロケールに対するデータの表示形"
"式を定義します。"

msgid "Time zones"
msgstr "タイムゾーン"

msgid ""
"When support for time zones is enabled, Django stores datetime information "
"in UTC in the database, uses time-zone-aware datetime objects internally, "
"and translates them to the end user's time zone in templates and forms."
msgstr ""
"タイムゾーンのサポートが有効のとき、Django は内部的にタイムゾーンを意識した "
"(aware な) タイムゾーンオブジェクトを使用して、データベース内に UTC で日時の"
"情報を保持します。そして、テンプレートやフォーム内でエンドユーザのタイムゾー"
"ンに変換します。"

msgid ""
"This is handy if your users live in more than one time zone and you want to "
"display datetime information according to each user's wall clock."
msgstr ""
"この機能は、ユーザが複数のタイムゾーンを使用しており、またユーザに対して彼ら"
"の時計と同じ日時を表示したいときに有用です。"

msgid ""
"Even if your website is available in only one time zone, it's still good "
"practice to store data in UTC in your database. The main reason is daylight "
"saving time (DST). Many countries have a system of DST, where clocks are "
"moved forward in spring and backward in autumn. If you're working in local "
"time, you're likely to encounter errors twice a year, when the transitions "
"happen. This probably doesn't matter for your blog, but it's a problem if "
"you over bill or under bill your customers by one hour, twice a year, every "
"year. The solution to this problem is to use UTC in the code and use local "
"time only when interacting with end users."
msgstr ""
"あなたのウェブサイトが1つのタイムゾーンでしか利用できない場合でも、データベー"
"スにUTCでデータを保存するのはよいことです。主な理由はサマータイム（DST）で"
"す。多くの国では、春に時計を進め、秋に時計を戻すサマータイム制度を採用してい"
"ます。現地時間で作業している場合、年に2回、この移行時にエラーが発生する可能性"
"があります。あなたのブログには関係ないことかもしれませんが、毎年2回、顧客に1"
"時間ずつ過大請求したり過小請求したりするのは問題です。この問題の解決策は、"
"コード内でUTCを使用し、エンドユーザーとのやりとりの時だけローカルタイムを使用"
"することです。"

msgid ""
"Time zone support is enabled by default. To disable it, set :setting:`USE_TZ "
"= False <USE_TZ>` in your settings file."
msgstr ""
"タイムゾーンのサポートはデフォルトで有効になっています。無効にするには、設定"
"ファイルで :setting:`USE_TZ = False <USE_TZ>` を設定してください。"

msgid "In older version, time zone support was disabled by default."
msgstr ""
"古いバージョンでは、タイムゾーンのサポートはデフォルトで無効になっていまし"
"た。"

msgid ""
"Time zone support uses :mod:`zoneinfo`, which is part of the Python standard "
"library from Python 3.9."
msgstr ""
"タイムゾーンのサポートには :mod:`zoneinfo` を使います。これは Python 3.9 か"
"ら Python 標準ライブラリの一部となりました。"

msgid ""
"If you're wrestling with a particular problem, start with the :ref:`time "
"zone FAQ <time-zones-faq>`."
msgstr ""
"特定の問題と格闘している場合は、:ref:`タイムゾーンの FAQ <time-zones-faq>` を"
"参照してください。"

msgid "Concepts"
msgstr "コンセプト"

msgid "Naive and aware datetime objects"
msgstr "native と aware の日時オブジェクト"

msgid ""
"Python's :class:`datetime.datetime` objects have a ``tzinfo`` attribute that "
"can be used to store time zone information, represented as an instance of a "
"subclass of :class:`datetime.tzinfo`. When this attribute is set and "
"describes an offset, a datetime object is **aware**. Otherwise, it's "
"**naive**."
msgstr ""
"Python の :class:`datetime.datetime` のオブジェクトには、タイムゾーン情報を保"
"持するために使える ``tzinfo`` 属性があり、これは :class:`datetime.tzinfo` の"
"サブクラスのインスタンスで表されます。 この属性がセットされオフセットを示すと"
"き、datetime オブジェクトは **aware** (タイムゾーンを意識した日時) となりま"
"す。それ以外の場合は **naive** (タイムゾーンを意識しない素朴な日時) となりま"
"す。"

msgid ""
"You can use :func:`~django.utils.timezone.is_aware` and :func:`~django.utils."
"timezone.is_naive` to determine whether datetimes are aware or naive."
msgstr ""
":func:`~django.utils.timezone.is_aware`  :func:`~django.utils.timezone."
"is_naive` を使って、datatime を aware にするか native にするかを決めることも"
"できます。"

msgid ""
"When time zone support is disabled, Django uses naive datetime objects in "
"local time. This is sufficient for many use cases. In this mode, to obtain "
"the current time, you would write::"
msgstr ""
"タイムゾーンのサポートが無効になっている場合、 Django はローカル時間の naive "
"な datetime オブジェクトを使います。多くの場合、これで十分です。このモードで"
"は、現在時刻を取得するには、次のように書きます:"

msgid ""
"When time zone support is enabled (:setting:`USE_TZ=True <USE_TZ>`), Django "
"uses time-zone-aware datetime objects. If your code creates datetime "
"objects, they should be aware too. In this mode, the example above becomes::"
msgstr ""
"タイムゾーンサポートが有効化 (:setting:`USE_TZ=True <USE_TZ>` ) されていると"
"きは、Django は タイムゾーンを認識する (awareな) datetime オブジェクトを使用"
"します。コード内で datetime オブジェクトを作成した場合も、aware となります。"
"このモードでは、上の例は以下のようになります::"

msgid ""
"Dealing with aware datetime objects isn't always intuitive. For instance, "
"the ``tzinfo`` argument of the standard datetime constructor doesn't work "
"reliably for time zones with DST. Using UTC is generally safe; if you're "
"using other time zones, you should review the :mod:`zoneinfo` documentation "
"carefully."
msgstr ""
"認識された datetime オブジェクトを扱うことは、必ずしも直感的ではありません。"
"例えば、標準の datetime コンストラクタの ``tzinfo`` 引数は、夏時間を含むタイ"
"ムゾーンでは正しく動作しません。他のタイムゾーンを使用する場合は、 :mod:"
"`zoneinfo` のドキュメントをよく確認してください。"

msgid ""
"Python's :class:`datetime.time` objects also feature a ``tzinfo`` attribute, "
"and PostgreSQL has a matching ``time with time zone`` type. However, as "
"PostgreSQL's docs put it, this type \"exhibits properties which lead to "
"questionable usefulness\"."
msgstr ""
"Python の :class:`datetime.time` オブジェクトは、``tzinfo`` 属性を持ちます。"
"また PostgreSQL には、これに相当する ``time with time zone`` タイプがありま"
"す。ただし、PostgreSQL のドキュメントにあるとおり、このタイプは \"不確かな有"
"用性に導く特性を示しています\"。"

msgid ""
"Django only supports naive time objects and will raise an exception if you "
"attempt to save an aware time object, as a timezone for a time with no "
"associated date does not make sense."
msgstr ""
"Django は naive な time オブジェクトのみをサポートしており、aware な time オ"
"ブジェクトを保存しようとすると例外を投げます。これは、日付を伴わない時刻に対"
"するタイムゾーンには意味がないからです。"

msgid "Interpretation of naive datetime objects"
msgstr "native な datetime オブジェクトの変換"

msgid ""
"When :setting:`USE_TZ` is ``True``, Django still accepts naive datetime "
"objects, in order to preserve backwards-compatibility. When the database "
"layer receives one, it attempts to make it aware by interpreting it in the :"
"ref:`default time zone <default-current-time-zone>` and raises a warning."
msgstr ""
"後方互換性を維持するため、 :setting:`USE_TZ` が ``True`` のときでも、Django "
"は naive な datetime オブジェクトを受け入れます。データベースレイヤがそのよう"
"なオブジェクトを受け取ると、:ref:`デフォルトのタイムゾーン <default-current-"
"time-zone>` として解釈して aware に変換しようと試み、警告を発します。"

msgid ""
"Unfortunately, during DST transitions, some datetimes don't exist or are "
"ambiguous. That's why you should always create aware datetime objects when "
"time zone support is enabled. (See the :mod:`Using ZoneInfo section of the "
"zoneinfo docs <zoneinfo>` for examples using the ``fold`` attribute to "
"specify the offset that should apply to a datetime during a DST transition.)"
msgstr ""
"残念ながら、夏時間（DST）の移行中には、存在しない日時や曖昧な日時があります。"
"そのため、タイムゾーンサポートが有効な場合は常に aware な日時オブジェクトを作"
"成するべきです。（DST移行中に日時に適用すべきオフセットを指定するために "
"``fold`` 属性を使用する例については、:mod:`zoneinfo ドキュメントの Using "
"ZoneInfo セクション <zoneinfo>` を参照してください。）"

msgid ""
"In practice, this is rarely an issue. Django gives you aware datetime "
"objects in the models and forms, and most often, new datetime objects are "
"created from existing ones through :class:`~datetime.timedelta` arithmetic. "
"The only datetime that's often created in application code is the current "
"time, and :func:`timezone.now() <django.utils.timezone.now>` automatically "
"does the right thing."
msgstr ""
"実際には、これはめったに問題になりません。Django はモデルやーフォームでは "
"aware な datetime オブジェクトを渡し、ほとんどの場合、新しい datetime オブ"
"ジェクトは :class:`~datetime.timedelta` 計算を通じて他の日時から作成されま"
"す。唯一アプリケーションのコード内でよく作成される datetime は現在の時刻で、:"
"func:`timezone.now() <django.utils.timezone.now>` は自動的に適切な処理を行い"
"ます。"

msgid "Default time zone and current time zone"
msgstr "デフォルトタイムゾーンとカレントタイムゾーン"

msgid ""
"The **default time zone** is the time zone defined by the :setting:"
"`TIME_ZONE` setting."
msgstr ""
"**デフォルトタイムゾーン** は、:setting:`TIME_ZONE` 設定によって定義されるタ"
"イムゾーンです。"

msgid "The **current time zone** is the time zone that's used for rendering."
msgstr "**カレントタイムゾーン** は、レンダリングに使われるタイムゾーンです。"

msgid ""
"You should set the current time zone to the end user's actual time zone "
"with :func:`~django.utils.timezone.activate`. Otherwise, the default time "
"zone is used."
msgstr ""
":func:`~django.utils.timezone.activate` を使って、エンドユーザの実際のタイム"
"ゾーンに対するカレントタイムゾーンをセットする必要があります。 そうしないと、"
"デフォルトタイムゾーンが使用されます。"

msgid ""
"As explained in the documentation of :setting:`TIME_ZONE`, Django sets "
"environment variables so that its process runs in the default time zone. "
"This happens regardless of the value of :setting:`USE_TZ` and of the current "
"time zone."
msgstr ""
":setting:`TIME_ZONE` のドキュメントで説明されているとおり、Django は環境変数"
"をセットし、プロセスがデフォルトタイムゾーンで動くようにします。 これは、:"
"setting:`USE_TZ` やカレントタイムゾーンの値にかかわらず発生します。"

msgid ""
"When :setting:`USE_TZ` is ``True``, this is useful to preserve backwards-"
"compatibility with applications that still rely on local time. However, :ref:"
"`as explained above <naive-datetime-objects>`, this isn't entirely reliable, "
"and you should always work with aware datetimes in UTC in your own code. For "
"instance, use :meth:`~datetime.datetime.fromtimestamp` and set the ``tz`` "
"parameter to :attr:`~datetime.timezone.utc`."
msgstr ""
":setting:`USE_TZ` が ``True`` の場合、ローカルタイムに依存しているアプリケー"
"ションとの後方互換性を保つために便利です。しかし、 :ref:`上で説明したように "
"<naive-datetime-objects>` 、これは完全に信頼できるものではありません。自分の"
"コードでは常にUTCで認識されたdatetimeを扱う必要があります。例えば、 :meth:"
"`~datetime.datetime.fromtimestamp` を使用し、 ``tz`` パラメータに :attr:"
"`~datetime.timezone.utc` を指定します。"

msgid "Selecting the current time zone"
msgstr "カレントタイムゾーンを選択する"

msgid ""
"The current time zone is the equivalent of the current :term:`locale <locale "
"name>` for translations. However, there's no equivalent of the ``Accept-"
"Language`` HTTP header that Django could use to determine the user's time "
"zone automatically. Instead, Django provides :ref:`time zone selection "
"functions <time-zone-selection-functions>`. Use them to build the time zone "
"selection logic that makes sense for you."
msgstr ""
"カレントタイムゾーンは、翻訳に対する :term:`locale <locale name>` に相当しま"
"す。ただし、Django がユーザのタイムゾーンを自動的に決めるために使える "
"``Accept-Language`` HTTP ヘッダに相当するものはありません。代わりに、Django "
"は :ref:`タイムゾーン選択関数 <time-zone-selection-functions>` を提供していま"
"す。これらを使って、あなたにとって有用なタイムゾーン選択ロジックを組み立てて"
"ください。"

msgid ""
"Most websites that care about time zones ask users in which time zone they "
"live and store this information in the user's profile. For anonymous users, "
"they use the time zone of their primary audience or UTC. :func:`zoneinfo."
"available_timezones` provides a set of available timezones that you can use "
"to build a map from likely locations to time zones."
msgstr ""
"タイムゾーンを気にするほとんどのウェブサイトは、ユーザーにどのタイムゾーンに"
"住んでいるかを尋ね、この情報をユーザーのプロフィールに保存します。匿名ユー"
"ザーの場合は、主な視聴者のタイムゾーンまたはUTCを使用します。 :func:"
"`zoneinfo.available_timezones` は利用可能なタイムゾーンのセットを提供し、ロ"
"ケーションからタイムゾーンへのマッピングを構築できます 。"

msgid ""
"Here's an example that stores the current timezone in the session. (It skips "
"error handling entirely for the sake of simplicity.)"
msgstr ""
"以下は、セッション内にカレントタイムゾーンを保持する例です。(シンプルにするた"
"め、全体的にエラー処理を省略しています。)"

msgid "Add the following middleware to :setting:`MIDDLEWARE`::"
msgstr "以下のミドルウェアを :setting:`MIDDLEWARE` に追加します::"

msgid "Create a view that can set the current timezone::"
msgstr "カレントタイムゾーンをセットできるビューを作成します::"

msgid "Include a form in ``template.html`` that will ``POST`` to this view:"
msgstr "このビューに ``POST`` するフォームを ``template.html`` に入れます:"

msgid "Time zone aware input in forms"
msgstr "フォームでのタイムゾーン aware な入力"

msgid ""
"When you enable time zone support, Django interprets datetimes entered in "
"forms in the :ref:`current time zone <default-current-time-zone>` and "
"returns aware datetime objects in ``cleaned_data``."
msgstr ""
"タイムゾーンサポートを有効にしたとき、Django はフォーム内に入力された日時を :"
"ref:`カレントタイムゾーン <default-current-time-zone>` で変換し、"
"``cleaned_data`` 内で aware な datetime オブジェクトを返します。"

msgid ""
"Converted datetimes that don't exist or are ambiguous because they fall in a "
"DST transition will be reported as invalid values."
msgstr ""
"変換されたdatetimeが存在しないか、または夏時間の移行期間中であるためにあいま"
"いな場合は、無効な値として報告されます。"

msgid "Time zone aware output in templates"
msgstr "テンプレートでのタイムゾーン aware な出力"

msgid ""
"When you enable time zone support, Django converts aware datetime objects to "
"the :ref:`current time zone <default-current-time-zone>` when they're "
"rendered in templates. This behaves very much like :doc:`format localization "
"</topics/i18n/formatting>`."
msgstr ""
"タイムゾーンサポートを有効にしているとき、Django はテンプレートでレンダリング"
"する際に aware な datetime オブジェクトを :ref:`カレントタイムゾーン "
"<default-current-time-zone>` に変換します。この動作は、 :doc:`表示形式のロー"
"カライズ </topics/i18n/formatting>` と非常によく似ています。"

msgid ""
"Django doesn't convert naive datetime objects, because they could be "
"ambiguous, and because your code should never produce naive datetimes when "
"time zone support is enabled. However, you can force conversion with the "
"template filters described below."
msgstr ""
"Django は naive な日時オブジェクトは変換しません。これは、曖昧であることと、"
"タイムゾーンサポートが有効化されているときは naive な日時を生成すべきではない"
"からです。ただし、後述するテンプレートフィルタを使えば強制的に変換させること"
"もできます。"

msgid ""
"Conversion to local time isn't always appropriate -- you may be generating "
"output for computers rather than for humans. The following filters and tags, "
"provided by the ``tz`` template tag library, allow you to control the time "
"zone conversions."
msgstr ""
"現地時刻への転換は、適切ではないことがあります -- 人手はなくコンピュータに対"
"してアウトプットを生成するときなどです。以下のフィルタやタグ (``tz`` テンプ"
"レートタグライブラリによって提供されています) で、タイムゾーンの転換をコント"
"ロールできます。"

msgid "``localtime``"
msgstr "``localtime``"

msgid ""
"Enables or disables conversion of aware datetime objects to the current time "
"zone in the contained block."
msgstr ""
"ブロック内で、aware な datetime オブジェクトのカレントタイムゾーンへの転換を"
"有効化または無効化します。"

msgid ""
"This tag has exactly the same effects as the :setting:`USE_TZ` setting as "
"far as the template engine is concerned. It allows a more fine grained "
"control of conversion."
msgstr ""
"このタグは、テンプレートエンジンに関する限り、:setting:`USE_TZ` 設定とまった"
"く同じ効果を持ちます。これを使うと、より細かい粒度の転換をコントロールできま"
"す。"

msgid "To activate or deactivate conversion for a template block, use:"
msgstr ""
"テンプレートブロックの変換を有効または無効にするには、次のようにします:"

msgid ""
"The value of :setting:`USE_TZ` isn't respected inside of a ``{% localtime %}"
"`` block."
msgstr ""
":setting:`USE_TZ` の値は、``{% localtime %}`` ブロックの中では尊重されませ"
"ん。"

msgid "``timezone``"
msgstr "``timezone``"

msgid ""
"Sets or unsets the current time zone in the contained block. When the "
"current time zone is unset, the default time zone applies."
msgstr ""
"ブロック内でカレントタイムゾーンをセットまたは解除します。カレントタイムゾー"
"ンがセットされていないときは、デフォルトタイムゾーンが適用されます。"

msgid "``get_current_timezone``"
msgstr "``get_current_timezone``"

msgid ""
"You can get the name of the current time zone using the "
"``get_current_timezone`` tag:"
msgstr ""
"``get_current_timezone`` タグを使えば、カレントタイムゾーンの名前を取得できま"
"す:"

msgid ""
"Alternatively, you can activate the :func:`~django.template."
"context_processors.tz` context processor and use the ``TIME_ZONE`` context "
"variable."
msgstr ""
"これ以外に、:func:`~django.template.context_processors.tz` コンテキストプロ"
"セッサを有効化して ``TIME_ZONE`` コンテキスト変数を使うことができます。"

msgid ""
"These filters accept both aware and naive datetimes. For conversion "
"purposes, they assume that naive datetimes are in the default time zone. "
"They always return aware datetimes."
msgstr ""
"以下のフィルタは、aware と native の日時の両方を受け入れます。転換するため"
"に、これらは native な日時はデフォルトタイムゾーンにあると仮定します。これら"
"は常に aware な日時を返します。"

msgid "Forces conversion of a single value to the current time zone."
msgstr "単一の値からカレントタイムゾーンへの変換を強制します。"

msgid "``utc``"
msgstr "``utc``"

msgid "Forces conversion of a single value to UTC."
msgstr "単一の値から UTC への転換を強制します。"

msgid "Forces conversion of a single value to an arbitrary timezone."
msgstr "単一の値から指定したタイムゾーンへの転換を強制します。"

msgid ""
"The argument must be an instance of a :class:`~datetime.tzinfo` subclass or "
"a time zone name."
msgstr ""
"引数は :class:`~datetime.tzinfo` サブクラスのインスタンスか、タイムゾーンの名"
"前である必要があります。"

msgid "Migration guide"
msgstr "マイグレーションガイド"

msgid ""
"Here's how to migrate a project that was started before Django supported "
"time zones."
msgstr ""
"以下は、Django がタイムゾーンをサポートする以前に開始したプロジェクトをマイグ"
"レーションする方法です。"

msgid "Database"
msgstr "データベース"

msgid "PostgreSQL"
msgstr "PostgreSQL"

msgid ""
"The PostgreSQL backend stores datetimes as ``timestamp with time zone``. In "
"practice, this means it converts datetimes from the connection's time zone "
"to UTC on storage, and from UTC to the connection's time zone on retrieval."
msgstr ""
"PostgreSQL バックエンドは datetime を ``timestamp with time zone`` として保存"
"します。実際には、これが意味するのは、datetime をコネクションのタイムゾーンか"
"らストレージ上では UTC に変換して、取得時には UTC からコネクションのタイム"
"ゾーンに変換するということです。"

msgid ""
"As a consequence, if you're using PostgreSQL, you can switch between "
"``USE_TZ = False`` and ``USE_TZ = True`` freely. The database connection's "
"time zone will be set to :setting:`DATABASE-TIME_ZONE` or ``UTC`` "
"respectively, so that Django obtains correct datetimes in all cases. You "
"don't need to perform any data conversions."
msgstr ""

msgid "Time zone settings"
msgstr ""

msgid ""
"The :setting:`time zone <DATABASE-TIME_ZONE>` configured for the connection "
"in the :setting:`DATABASES` setting is distinct from the general :setting:"
"`TIME_ZONE` setting."
msgstr ""

msgid "Other databases"
msgstr "他のデータベース"

msgid ""
"Other backends store datetimes without time zone information. If you switch "
"from ``USE_TZ = False`` to ``USE_TZ = True``, you must convert your data "
"from local time to UTC -- which isn't deterministic if your local time has "
"DST."
msgstr ""
"他のバックエンドは、タイムゾーン情報なしで日時を保持します。``USE_TZ = "
"False`` から ``USE_TZ = True`` に切り替えた場合、現地時刻から UTC に転換する"
"必要があります -- あなたの現地時刻に DST がある場合、これは確実に 1 つに決ま"
"るわけではありません。"

msgid "Code"
msgstr "コード"

msgid ""
"The first step is to add :setting:`USE_TZ = True <USE_TZ>` to your settings "
"file. At this point, things should mostly work. If you create naive datetime "
"objects in your code, Django makes them aware when necessary."
msgstr ""
"最初のステップは、設定ファイルに :setting:`USE_TZ = True <USE_TZ>` を追加する"
"ことです。この時点では、だいたいのことがうまく動くはずです。コード内で naive "
"な datetime オブジェクトを生成した場合、Django は必要に応じて aware にしま"
"す。"

msgid ""
"However, these conversions may fail around DST transitions, which means you "
"aren't getting the full benefits of time zone support yet. Also, you're "
"likely to run into a few problems because it's impossible to compare a naive "
"datetime with an aware datetime. Since Django now gives you aware datetimes, "
"you'll get exceptions wherever you compare a datetime that comes from a "
"model or a form with a naive datetime that you've created in your code."
msgstr ""
"ただし、これらの変換ではDSTの移行が失敗する可能性があります。これは、まだ対ー"
"無ゾーンサポートの利点が完全には得られていないことを意味します。 また、naive "
"な日時と aware な日時を比較することは不可能なため、いくつかの問題に遭遇する可"
"能性があります。 Django はaware な日時を提供するので、モデルやフォームから来"
"た datetime と、コード内に作成した naive な datetime を比較すると例外が発生し"
"ます。"

msgid ""
"So the second step is to refactor your code wherever you instantiate "
"datetime objects to make them aware. This can be done incrementally. :mod:"
"`django.utils.timezone` defines some handy helpers for compatibility code: :"
"func:`~django.utils.timezone.now`, :func:`~django.utils.timezone.is_aware`, :"
"func:`~django.utils.timezone.is_naive`, :func:`~django.utils.timezone."
"make_aware`, and :func:`~django.utils.timezone.make_naive`."
msgstr ""
"したがって、第2のステップは、datetime オブジェクトをインスタンス化している部"
"分を aware に変更するため、コードをリファクタリングすることです。 これは段階"
"的に行うことができます。:mod:`django.utils.timezone` は、互換性のための便利な"
"ヘルパーをいくつ定義しています :func:`~django.utils.timezone.now`、:func:"
"`~django.utils.timezone.is_aware`、:func:`~django.utils.timezone.is_naive`、:"
"func:`~django.utils.timezone.make_aware` そして :func:`~django.utils."
"timezone.make_naive` です。"

msgid ""
"Finally, in order to help you locate code that needs upgrading, Django "
"raises a warning when you attempt to save a naive datetime to the database:"
msgstr ""
"最後に、アップグレードが必要なコードを見つけやすくするために、Django は "
"naive な datetime をデータベースに保存しようとすると警告を出します:"

msgid ""
"During development, you can turn such warnings into exceptions and get a "
"traceback by adding the following to your settings file::"
msgstr ""
"開発中、以下を設定ファイルに追加することで、これらの警告を例外として発生する"
"ように変更し、トラックバックを得ることができます::"

msgid ""
"When serializing an aware datetime, the UTC offset is included, like this::"
msgstr ""
"aware な日時をシリアライズするとき、以下のように UTC オフセットが含まれます::"

msgid "While for a naive datetime, it isn't::"
msgstr "しかし、naive な日付の場合はそうではありません:"

msgid ""
"For models with :class:`~django.db.models.DateTimeField`\\ s, this "
"difference makes it impossible to write a fixture that works both with and "
"without time zone support."
msgstr ""
":class:`~django.db.models.DateTimeField` を使ったモデルに対しては、この違いに"
"より、タイムゾーンサポートのありとなし両方に対して動作するフィクスチャを記述"
"することができません。"

msgid ""
"Fixtures generated with ``USE_TZ = False``, or before Django 1.4, use the "
"\"naive\" format. If your project contains such fixtures, after you enable "
"time zone support, you'll see :exc:`RuntimeWarning`\\ s when you load them. "
"To get rid of the warnings, you must convert your fixtures to the \"aware\" "
"format."
msgstr ""
"``USE_TZ = False`` もしくは Django 1.4 以前 で生成されたフィクスチャ"
"は、\"naive\" 形式を使用します。このようなフィクスチャがプロジェクトに含まれ"
"る場合、タイムゾーンサポートを有効化した後に、これらをロードする際に :exc:"
"`RuntimeWarning` を参照してください。警告を破棄するには、これらのフィクスチャ"
"を \"aware\" 形式に転換する必要があります。"

msgid ""
"You can regenerate fixtures with :djadmin:`loaddata` then :djadmin:"
"`dumpdata`. Or, if they're small enough, you can edit them to add the UTC "
"offset that matches your :setting:`TIME_ZONE` to each serialized datetime."
msgstr ""
":djadmin:`loaddata` と :djadmin:`dumpdata` でフィクスチャを再生成できます。ま"
"たは、それらが十分に小さい場合、シリアライズされた各日時に :setting:"
"`TIME_ZONE` に一致する UTC オフセットを追加するように編集できます。"

msgid "FAQ"
msgstr "FAQ"

msgid "Setup"
msgstr "セットアップ"

msgid ""
"**I don't need multiple time zones. Should I enable time zone support?**"
msgstr ""
"**複数のタイムゾーンを必要としません。タイムゾーンサポートを有効化するべきで"
"すか？**"

msgid ""
"Yes. When time zone support is enabled, Django uses a more accurate model of "
"local time. This shields you from subtle and unreproducible bugs around "
"daylight saving time (DST) transitions."
msgstr ""
"はい。タイムゾーンのサポートを有効にすると、 Django はより正確な現地時間のモ"
"デルを使います。これにより、夏時間 (DST) の遷移にまつわる微妙で再現不可能なバ"
"グを回避できます。"

msgid ""
"When you enable time zone support, you'll encounter some errors because "
"you're using naive datetimes where Django expects aware datetimes. Such "
"errors show up when running tests. You'll quickly learn how to avoid invalid "
"operations."
msgstr ""
"タイムゾーンのサポートを有効にすると、Django の aware な datetime を期待して"
"いるところで naive な datetime を使っていることが原因のエラーが発生します。こ"
"のようなエラーはテストを実行するときに現れます。無効な操作を避ける方法をすぐ"
"に知ることができるでしょう。"

msgid ""
"On the other hand, bugs caused by the lack of time zone support are much "
"harder to prevent, diagnose and fix. Anything that involves scheduled tasks "
"or datetime arithmetic is a candidate for subtle bugs that will bite you "
"only once or twice a year."
msgstr ""
"一方、タイムゾーンのサポートがないために起こるバグは、予防、診断、修正が非常"
"に困難です。スケジュールされたタスクや datetime 演算を含むものは、年に1度か2"
"度しか発生しない微妙なバグの原因になります。"

msgid ""
"For these reasons, time zone support is enabled by default in new projects, "
"and you should keep it unless you have a very good reason not to."
msgstr ""
"このような理由から、新しいプロジェクトではタイムゾーンのサポートがデフォルト"
"で有効になっています。"

msgid "**I've enabled time zone support. Am I safe?**"
msgstr "**タイムゾーンサポートを有効化しました。私は安全ですか？**"

msgid ""
"Maybe. You're better protected from DST-related bugs, but you can still "
"shoot yourself in the foot by carelessly turning naive datetimes into aware "
"datetimes, and vice-versa."
msgstr ""
"おそらく。DST 関連のバグからは守られるようになりましたが、それでも不用意な変"
"換 ( naive な日時を aware な日時に変更する、およびその逆）ことによって自ら墓"
"穴を掘る可能性があります。"

msgid ""
"If your application connects to other systems -- for instance, if it queries "
"a web service -- make sure datetimes are properly specified. To transmit "
"datetimes safely, their representation should include the UTC offset, or "
"their values should be in UTC (or both!)."
msgstr ""
"アプリケーションが他のシステムに接続する場合、例えばウェブサービスにクエリす"
"る場合、datetime が適切に指定されていることを確認してください。datetime を安"
"全に送信するには、その表現に UTC オフセットを含めるか、その値を UTC にする必"
"要があります（あるいはその両方！）。"

msgid ""
"Finally, our calendar system contains interesting edge cases. For example, "
"you can't always subtract one year directly from a given date:"
msgstr ""
"最後に、私たちのカレンダーシステムには興味深いエッジケースがあります。例え"
"ば、ある日付から直接1年を引くことはできません:"

msgid ""
"To implement such a function correctly, you must decide whether 2012-02-29 "
"minus one year is 2011-02-28 or 2011-03-01, which depends on your business "
"requirements."
msgstr ""
"このような関数を正しく実装するには、2012-02-29から1年を引いた値が2011-02-28な"
"のか、2011-03-01なのかを決める必要があります。"

msgid ""
"**How do I interact with a database that stores datetimes in local time?**"
msgstr ""
"**現地時刻で日時を保持しているデータベースと、どのようにやり取りすればいいで"
"すか？**"

msgid ""
"Set the :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` option to the appropriate "
"time zone for this database in the :setting:`DATABASES` setting."
msgstr ""
":setting:`TIME_ZONE <DATABASE-TIME_ZONE>` オプションを、:setting:`DATABASES` "
"設定内のデータベースに適したタイムゾーンにセットしてください。"

msgid ""
"This is useful for connecting to a database that doesn't support time zones "
"and that isn't managed by Django when :setting:`USE_TZ` is ``True``."
msgstr ""
"これは、 :setting:`USE_TZ` が ``True`` のときに、タイムゾーンをサポートしてお"
"らず、 Django が管理していないデータベースに接続するのに便利です。"

msgid "Troubleshooting"
msgstr "トラブルシューティング"

msgid ""
"**My application crashes with** ``TypeError: can't compare offset-naive`` "
"``and offset-aware datetimes`` **-- what's wrong?**"
msgstr ""
"**私のアプリケーションが** ``TypeError: can't compare offset-naive`` ``and "
"offset-aware datetimes`` **とともにクラッシュします -- 何がいけませんか？**"

msgid "Let's reproduce this error by comparing a naive and an aware datetime:"
msgstr ""
"naive な datetime と aware な datetime を比較して、このエラーを再現してみま"
"しょう:"

msgid ""
"If you encounter this error, most likely your code is comparing these two "
"things:"
msgstr ""
"このエラーに遭遇した場合、あなたのコードはこれら 2 つを比較している可能性が高"
"いです:"

msgid ""
"a datetime provided by Django -- for instance, a value read from a form or a "
"model field. Since you enabled time zone support, it's aware."
msgstr ""
"Django が提供する datetime -- 例えば、フォームやモデルフィールド から読み込ん"
"だ値。タイムゾーンのサポートが有効になっているので、aware です。"

msgid ""
"a datetime generated by your code, which is naive (or you wouldn't be "
"reading this)."
msgstr ""
"あなたのコードによって生成された datetime。これは naive です（そうでなけれ"
"ば、あなたはこれを読んでいないでしょう）。"

msgid ""
"Generally, the correct solution is to change your code to use an aware "
"datetime instead."
msgstr ""
"通常、正しい解決策は、代わりに aware な datetime を使うようにコードを変更する"
"ことです。"

msgid ""
"If you're writing a pluggable application that's expected to work "
"independently of the value of :setting:`USE_TZ`, you may find :func:`django."
"utils.timezone.now` useful. This function returns the current date and time "
"as a naive datetime when ``USE_TZ = False`` and as an aware datetime when "
"``USE_TZ = True``. You can add or subtract :class:`datetime.timedelta` as "
"needed."
msgstr ""
":setting:`USE_TZ` の値とは関係なく動作するようなプラグイン可能なアプリケー"
"ションを書いている場合、 :func:`django.utils.timezone.now` が役に立つかもしれ"
"ません。この関数は、 ``USE_TZ = False`` の場合は naive な datetime として、 "
"``USE_TZ = True`` の場合は aware な datetime として現在の日時を返します。必要"
"に応じて :class:`datetime.timedelta` を足したり引いたりすることができます。"

msgid ""
"**I see lots of** ``RuntimeWarning: DateTimeField received a naive "
"datetime`` ``(YYYY-MM-DD HH:MM:SS)`` ``while time zone support is active`` "
"**-- is that bad?**"
msgstr ""
"**多くの** ``RuntimeWarning: DateTimeField received a naive datetime`` "
"``(YYYY-MM-DD HH:MM:SS)`` ``while time zone support is active`` **が発生しま"
"す。 -- これは悪いことですか？**"

msgid ""
"When time zone support is enabled, the database layer expects to receive "
"only aware datetimes from your code. This warning occurs when it receives a "
"naive datetime. This indicates that you haven't finished porting your code "
"for time zone support. Please refer to the :ref:`migration guide <time-zones-"
"migration-guide>` for tips on this process."
msgstr ""
"タイムゾーンのサポートが有効になっている場合、データベース層はコードから "
"aware な datetime だけを受け取ることを期待します。この警告は、naive な "
"datetime を受け取ったときに発生します。これは、タイムゾーンをサポートするため"
"のコードの移植が完了していないことを示しています。このプロセスのヒントについ"
"ては :ref:`マイグレーションガイド <time-zones-migration-guide>` を参照してく"
"ださい。"

msgid ""
"In the meantime, for backwards compatibility, the datetime is considered to "
"be in the default time zone, which is generally what you expect."
msgstr ""
"一方、後方互換性のために、datetime はデフォルトのタイムゾーンにあるとみなされ"
"ます。"

msgid "``now.date()`` **is yesterday! (or tomorrow)**"
msgstr "``now.date()`` **が昨日 (もしくは明日) になります！**"

msgid ""
"If you've always used naive datetimes, you probably believe that you can "
"convert a datetime to a date by calling its :meth:`~datetime.datetime.date` "
"method. You also consider that a :class:`~datetime.date` is a lot like a :"
"class:`~datetime.datetime`, except that it's less accurate."
msgstr ""
"常に naive な日時を使用してきた場合、:meth:`~datetime.datetime.date` メソッド"
"を呼び出すことで日時を日付に変換できると考えているかもしれません。また、:"
"class:`~datetime.date` は :class:`~datetime.datetime` に非常に似ているが、精"
"度が低いとも考えるでしょう。"

msgid "None of this is true in a time zone aware environment:"
msgstr "タイムゾーンを意識した環境では、どれも正しくありません:"

msgid ""
"As this example shows, the same datetime has a different date, depending on "
"the time zone in which it is represented. But the real problem is more "
"fundamental."
msgstr ""
"この例が示すように、同じdatetimeでも、それを表現するタイムゾーンによって日付"
"が異なります。しかし、本当の問題はもっと根本的なところにあります。"

msgid ""
"A datetime represents a **point in time**. It's absolute: it doesn't depend "
"on anything. On the contrary, a date is a **calendaring concept**. It's a "
"period of time whose bounds depend on the time zone in which the date is "
"considered. As you can see, these two concepts are fundamentally different, "
"and converting a datetime to a date isn't a deterministic operation."
msgstr ""
"datetime は **時点** を表します。それは絶対的なもので、何にも依存しません。逆"
"に、日付は **カレンダーの概念** です。その境界は日付が扱われるタイムゾーンに"
"依存します。このように、この2つの概念は根本的に異なっており、datetime を "
"date に変換することは決定論的な操作ではありません。"

msgid "What does this mean in practice?"
msgstr "これは実際のところ何を意味するのでしょうか？"

msgid ""
"Generally, you should avoid converting a :class:`~datetime.datetime` to :"
"class:`~datetime.date`. For instance, you can use the :tfilter:`date` "
"template filter to only show the date part of a datetime. This filter will "
"convert the datetime into the current time zone before formatting it, "
"ensuring the results appear correctly."
msgstr ""
"一般的に、 :class:`~datetime.datetime` を :class:`~datetime.date` に変換する"
"ことは避けるべきです。例えば、 :tfilter:`date` テンプレートフィルタを使うと、"
"datetime の日付部分だけを表示できます。このフィルタは datetime をフォーマット"
"する前にカレントタイムゾーンに変換し、結果が正しく表示されるようにします。"

msgid ""
"If you really need to do the conversion yourself, you must ensure the "
"datetime is converted to the appropriate time zone first. Usually, this will "
"be the current timezone:"
msgstr ""
"どうしても自分で変換する必要がある場合は、まず datetime が適切なタイムゾーン"
"に変換されていることを確認する必要があります。通常、これはカレントタイムゾー"
"ンになります:"

msgid ""
"**I get an error** \"``Are time zone definitions for your database installed?"
"``\""
msgstr ""
"**エラーが発生しました** \"``Are time zone definitions for your database "
"installed?``\""

msgid ""
"If you are using MySQL, see the :ref:`mysql-time-zone-definitions` section "
"of the MySQL notes for instructions on loading time zone definitions."
msgstr ""
"MySQLを使用している場合は、MySQLノートの :ref:`mysql-time-zone-definitions` "
"セクションを参照してタイムゾーン定義を読み込んでください。"

msgid ""
"**I have a string** ``\"2012-02-21 10:28:45\"`` **and I know it's in the** "
"``\"Europe/Helsinki\"`` **time zone. How do I turn that into an aware "
"datetime?**"
msgstr ""
"**文字列** ``\"2012-02-21 10:28:45\"`` **があり、** ``\"Europe/Helsinki\"`` "
"**タイムゾーンであることが分かっています。aware な日時に変換するにはどうすれ"
"ばよいですか？**"

msgid ""
"Here you need to create the required ``ZoneInfo`` instance and attach it to "
"the naïve datetime:"
msgstr ""
"この場合、必要な ``ZoneInfo`` インスタンスを作成し、それを naive な datetime "
"に付加する必要があります。"

msgid "**How can I obtain the local time in the current time zone?**"
msgstr "**カレントタイムゾーンで現地時刻を取得するにはどうすればよいですか？**"

msgid "Well, the first question is, do you really need to?"
msgstr "そうですね。最初に質問させてください。それは本当に必要ですか？"

msgid ""
"You should only use local time when you're interacting with humans, and the "
"template layer provides :ref:`filters and tags <time-zones-in-templates>` to "
"convert datetimes to the time zone of your choice."
msgstr ""
"人間とやり取りするときだけ、現地時刻を使うべきです。そして、テンプレートレイ"
"ヤは日時をあなたが選択したタイムゾーンに転換するための :ref:`フィルタとタグ "
"<time-zones-in-templates>` を提供しています。"

msgid ""
"Furthermore, Python knows how to compare aware datetimes, taking into "
"account UTC offsets when necessary. It's much easier (and possibly faster) "
"to write all your model and view code in UTC. So, in most circumstances, the "
"datetime in UTC returned by :func:`django.utils.timezone.now` will be "
"sufficient."
msgstr ""
"さらに、Python は認識された datetime を比較する方法を知っており、必要に応じ"
"て UTC オフセットを考慮します。すべてのモデルやビューのコードを UTC で書く方"
"がずっと簡単です (そしておそらく速い)。ですから、ほとんどの場合、 :func:"
"`django.utils.timezone.now` で返される UTC での datetime で十分です。"

msgid ""
"For the sake of completeness, though, if you really want the local time in "
"the current time zone, here's how you can obtain it:"
msgstr ""
"ただし、完全のため、カレントタイムゾーンの現地時間が本当に必要な場合は、以下"
"の方法で取得できます:"

msgid "In this example, the current time zone is ``\"Europe/Paris\"``."
msgstr "この例では、カレントタイムゾーンは ``\"Europe/Paris\"`` です。"

msgid "**How can I see all available time zones?**"
msgstr "**全ての利用可能なタイムゾーンを参照するにはどうすればいいですか？**"

msgid ""
":func:`zoneinfo.available_timezones` provides the set of all valid keys for "
"IANA time zones available to your system. See the docs for usage "
"considerations."
msgstr ""
":func:`zoneinfo.available_timezones` は、あなたのシステムで利用可能なIANAタイ"
"ムゾーンの全ての有効なキーを提供します。使用上の注意についてはドキュメントを"
"参照してください。"

msgid "Translation"
msgstr "翻訳"

msgid ""
"In order to make a Django project translatable, you have to add a minimal "
"number of hooks to your Python code and templates. These hooks are called :"
"term:`translation strings <translation string>`. They tell Django: \"This "
"text should be translated into the end user's language, if a translation for "
"this text is available in that language.\" It's your responsibility to mark "
"translatable strings; the system can only translate strings it knows about."
msgstr ""
"Django プロジェクトを翻訳可能にするためには、Python コードやテンプレートに、"
"多少のフックを加筆しなければなりません。このフックは :term:`翻訳文字列 "
"<translation string>` と呼ばれます。翻訳文字列は Django に「このテキストに対"
"する翻訳が有効な場合、このテキストはエンドユーザの言語に翻訳すべきだ」という"
"ことを通知します。翻訳可能な文字列をマークすることは開発者の責任です。システ"
"ムが翻訳できるのは指定された文字列だけなのです。"

msgid ""
"Django then provides utilities to extract the translation strings into a :"
"term:`message file`. This file is a convenient way for translators to "
"provide the equivalent of the translation strings in the target language. "
"Once the translators have filled in the message file, it must be compiled. "
"This process relies on the GNU gettext toolset."
msgstr ""
"Django は、翻訳文字列を :term:`メッセージファイル` に抽出するユーティリティを"
"提供します。このファイルがあるため、翻訳者が対象の言語において翻訳文字列に対"
"応する文字列を用意することが簡単になります。翻訳者がメッセージファイルの中身"
"を書き終わったら、それをコンパイルしなければなりません。このプロセスは GNU "
"gettext ツー ルキットに依存しています。"

msgid ""
"Once this is done, Django takes care of translating web apps on the fly in "
"each available language, according to users' language preferences."
msgstr ""
"これが済めば、 Django はユーザの言語設定に従って、オンザフライでアプリケー"
"ションを利用可能な言語に翻訳するようになります。"

msgid ""
"Django's internationalization hooks are on by default, and that means "
"there's a bit of i18n-related overhead in certain places of the framework. "
"If you don't use internationalization, you should take the two seconds to "
"set :setting:`USE_I18N = False <USE_I18N>` in your settings file. Then "
"Django will make some optimizations so as not to load the "
"internationalization machinery."
msgstr ""
"Django の国際化フックはデフォルトで有効になっており、これは、フレームワークの"
"特定の箇所で i18n に関する小さなオーバーヘッドが発生することを意味します。国"
"際化を使わない場合は、 :setting:`USE_I18N = False <USE_I18N>` を設定ファイル"
"に記述してください。そうすれば Django は国際化の部品を読み込まないようにして"
"多少の最適化をします。"

msgid ""
"Make sure you've activated translation for your project (the fastest way is "
"to check if :setting:`MIDDLEWARE` includes :mod:`django.middleware.locale."
"LocaleMiddleware`). If you haven't yet, see :ref:`how-django-discovers-"
"language-preference`."
msgstr ""
"プロジェクトで翻訳機能が有効になっていることを確認してください (最も早いの"
"は、 :setting:`MIDDLEWARE` が :mod:`django.middleware.locale."
"LocaleMiddleware` を含むかどうかチェックすることです) 。まだの場合は、:ref:"
"`how-django-discovers-language-preference` を参照してください。"

msgid "Internationalization: in Python code"
msgstr "Python コードでの国際化"

msgid "Standard translation"
msgstr "標準的な翻訳"

msgid ""
"Specify a translation string by using the function :func:`~django.utils."
"translation.gettext`. It's convention to import this as a shorter alias, "
"``_``, to save typing."
msgstr ""
"翻訳対象の文字列を関数 :func:`~django.utils.translation.gettext` で指定しま"
"す。入力の手間を省くため、この関数は短い別名 ``_`` としてインポートするのが慣"
"例です。"

msgid ""
"Python's standard library ``gettext`` module installs ``_()`` into the "
"global namespace, as an alias for ``gettext()``. In Django, we have chosen "
"not to follow this practice, for a couple of reasons:"
msgstr ""
"Python の標準ライブラリ ``gettext`` モジュールは、グローバルの名前空間に "
"``_()`` という名前で ``gettext()`` をインストールします。 Django ではこの方法"
"に従っていませんが、それは以下の理由からです:"

msgid ""
"Sometimes, you should use :func:`~django.utils.translation.gettext_lazy` as "
"the default translation method for a particular file. Without ``_()`` in the "
"global namespace, the developer has to think about which is the most "
"appropriate translation function."
msgstr ""
"特定のファイルのデフォルトの翻訳メソッドとして :func:`~django.utils."
"translation.gettext_lazy` を使うべき場合もあります。グローバル名前空間に "
"``_()`` がないと、開発者はどれが最も適切な翻訳関数かを考えなければなりませ"
"ん。"

msgid ""
"The underscore character (``_``) is used to represent \"the previous "
"result\" in Python's interactive shell and doctest tests. Installing a "
"global ``_()`` function causes interference. Explicitly importing "
"``gettext()`` as ``_()`` avoids this problem."
msgstr ""
"アンダースコア文字 (``_``) は、 Python の対話シェルや doctest で書かれたテス"
"トの中では「直前の式の値」を表します。そのため、グローバル名前空間に ``_()`` "
"をインストールすると、干渉して問題を引き起こします。 ``gettext()`` を "
"``_()`` という名前で明示的に import すれば、この問題を回避できます。"

msgid "What functions may be aliased as ``_``?"
msgstr "``_`` として別名をつけられる関数は？"

msgid ""
"Because of how ``xgettext`` (used by :djadmin:`makemessages`) works, only "
"functions that take a single string argument can be imported as ``_``:"
msgstr ""
"(:djadmin:`makemessages` で使われる) ``xgettext`` が動作する方法のせいで、単"
"一の文字列引数を持つ関数のみが ``_`` として import できます。"

msgid ":func:`~django.utils.translation.gettext`"
msgstr ":func:`~django.utils.translation.gettext`"

msgid ":func:`~django.utils.translation.gettext_lazy`"
msgstr ":func:`~django.utils.translation.gettext_lazy`"

msgid ""
"In this example, the text ``\"Welcome to my site.\"`` is marked as a "
"translation string::"
msgstr ""
"この例では、``\"Welcome to my site.\"`` というテキストが翻訳文字列としてマー"
"クされています::"

msgid ""
"You could code this without using the alias. This example is identical to "
"the previous one::"
msgstr ""
"別名を付けなくても同じコードを書くことができます。次の例は、上の例とまったく"
"同一です::"

msgid ""
"Translation works on computed values. This example is identical to the "
"previous two::"
msgstr ""
"翻訳は、計算済みの値に適用されます。次の例は、上の2つの例とまったく同一です::"

msgid "Translation works on variables. Again, here's an identical example::"
msgstr "翻訳は変数にも適用されます。次の例もまた、上の例とまったく同一です::"

msgid ""
"(The caveat with using variables or computed values, as in the previous two "
"examples, is that Django's translation-string-detecting utility, :djadmin:"
"`django-admin makemessages <makemessages>`, won't be able to find these "
"strings. More on :djadmin:`makemessages` later.)"
msgstr ""
"(上の 2 つの例のように変数や計算済みの値を使う場合の注意点として、Django の翻"
"訳文字列検出ユーティリティ :djadmin:`django-admin makemessages "
"<makemessages>` はこれらの文字列を検出できません。詳しくは後の :djadmin:"
"`makemessages` の節で説明します。)"

msgid ""
"The strings you pass to ``_()`` or ``gettext()`` can take placeholders, "
"specified with Python's standard named-string interpolation syntax. Example::"
msgstr ""
"``_()`` や ``gettext()`` に渡す文字列には、Pyton の標準の名前付き補完構文によ"
"るプレースホルダを使えます。例えば::"

msgid ""
"This technique lets language-specific translations reorder the placeholder "
"text. For example, an English translation may be ``\"Today is November 26."
"\"``, while a Spanish translation may be ``\"Hoy es 26 de noviembre.\"`` -- "
"with the month and the day placeholders swapped."
msgstr ""
"このテクニックを使うと、言語ごとの翻訳でプレースホルダを並び替えられるように"
"なります。例えば、英語の翻訳文 ``\"Today is Nobember, 26.\"`` に対して、スペ"
"イン語では ``\"Hoy es 26 de noviembre.\"`` となるように、月と日のプレースホル"
"ダの位置を入れ替えることができます。"

msgid ""
"For this reason, you should use named-string interpolation (e.g., "
"``%(day)s``) instead of positional interpolation (e.g., ``%s`` or ``%d``) "
"whenever you have more than a single parameter. If you used positional "
"interpolation, translations wouldn't be able to reorder placeholder text."
msgstr ""
"この理由から、引数が複数ある場合には、固定引数を使った補完 (``%s`` や "
"``%d``) ではなく、名前付きの補完 (``%(day)s``) を使ってください。固定引数によ"
"る補完を使った場合、プレースホルダを正しい順番で翻訳できない場合があります。"

msgid ""
"Since string extraction is done by the ``xgettext`` command, only syntaxes "
"supported by ``gettext`` are supported by Django. In particular, Python :py:"
"ref:`f-strings <f-strings>` are not yet supported by ``xgettext``, and "
"JavaScript template strings need ``gettext`` 0.21+."
msgstr ""
"文字列抽出は ``xgettext`` コマンドで行われるため、Django がサポートするのは "
"``gettext`` がサポートする構文のみです。特に、Python の :py:ref:`f-strings "
"<f-strings>` はまだ ``xgettext`` でサポートされておらず、JavaScript テンプ"
"レート文字列は ``gettext`` 0.21+ が必要です。"

msgid "Comments for translators"
msgstr "翻訳者へのコメント"

msgid ""
"If you would like to give translators hints about a translatable string, you "
"can add a comment prefixed with the ``Translators`` keyword on the line "
"preceding the string, e.g.::"
msgstr ""
"翻訳可能な文字列についてのヒントを翻訳者に示したい場合、文字列の直前の行で "
"``Translators`` キーワードでプレフィックスされたコメントを追加できます。例え"
"ば::"

msgid ""
"The comment will then appear in the resulting ``.po`` file associated with "
"the translatable construct located below it and should also be displayed by "
"most translation tools."
msgstr ""
"コメントは、後に記述された翻訳可能な文章に関連付けられた、結果の ``.po`` ファ"
"イル内に表示され、ほとんどの翻訳ツールで表示されます。"

msgid ""
"Just for completeness, this is the corresponding fragment of the resulting "
"``.po`` file:"
msgstr ""
"完全を期すために示すと、以下が結果として生成される対応する  ``.po`` ファイル"
"の断片です。"

msgid ""
"This also works in templates. See :ref:`translator-comments-in-templates` "
"for more details."
msgstr ""
"これはテンプレート内でも動作します。詳しくは :ref:`translator-comments-in-"
"templates` を参照してください。"

msgid "Marking strings as no-op"
msgstr "no-op (何もしない) として文字列をマークする"

msgid ""
"Use the function :func:`django.utils.translation.gettext_noop()` to mark a "
"string as a translation string without translating it. The string is later "
"translated from a variable."
msgstr ""
"翻訳しない文字列としてマークするためには、:func:`django.utils.translation."
"gettext_noop()` を使ってください。文字列は、変数より後で翻訳されます。"

msgid ""
"Use this if you have constant strings that should be stored in the source "
"language because they are exchanged over systems or users -- such as strings "
"in a database -- but should be translated at the last possible point in "
"time, such as when the string is presented to the user."
msgstr ""
"ソース言語内に保持すべき構成文字列がある場合、これを使ってください。これは、"
"システムやユーザー (たとえばデータベース内の文字列) を介して交換される一方"
"で、最後の時点 (たとえばユーザに文字列が表示されるとき) で翻訳される必要があ"
"るからです。"

msgid "Pluralization"
msgstr "複数形"

msgid ""
"Use the function :func:`django.utils.translation.ngettext()` to specify "
"pluralized messages."
msgstr ""
"複数形のメッセージを指定するには、関数 :func:`django.utils.translation."
"ngettext()` を使ってください。"

msgid ""
"``ngettext()`` takes three arguments: the singular translation string, the "
"plural translation string and the number of objects."
msgstr ""
"``ngettext`` は 3 つの引数を取ります: 単数形の文字列、複数形の文字列、オブ"
"ジェクトの数です。"

msgid ""
"This function is useful when you need your Django application to be "
"localizable to languages where the number and complexity of `plural forms "
"<https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_ is "
"greater than the two forms used in English ('object' for the singular and "
"'objects' for all the cases where ``count`` is different from one, "
"irrespective of its value.)"
msgstr ""
"この関数は、Django アプリケーションを数と `複数形 <https://www.gnu.org/"
"software/gettext/manual/gettext.html#Plural-forms>`_ の複雑さが英語で 2 より"
"大きい (その値にかかわらず、単数には 'object'、そして ``count`` が 1 ではない"
"全ての場合に 'objects' となります。) 言語にローカライズさせる必要がある場合に"
"役立ちます。"

msgid ""
"In this example the number of objects is passed to the translation languages "
"as the ``count`` variable."
msgstr ""
"この例では、オブジェクトの数値は ``count`` 変数として翻訳言語に渡されます。"

msgid ""
"Note that pluralization is complicated and works differently in each "
"language. Comparing ``count`` to 1 isn't always the correct rule. This code "
"looks sophisticated, but will produce incorrect results for some languages::"
msgstr ""
"複数形は、複雑で言語によって異なる動作をすることに注意してください。"
"``count`` と 1 の比較は正しいルールではないことがあります。以下のコードは洗練"
"されて見えますが、いくつかの言語に対しては誤った結果を生み出します::"

msgid ""
"Don't try to implement your own singular-or-plural logic; it won't be "
"correct. In a case like this, consider something like the following::"
msgstr ""
"あなた自身の単数複数ロジックを実装しないでください。おそらく正しくなりませ"
"ん。このようなケースでは、以下のようなコードを考えてみてください。"

msgid ""
"When using ``ngettext()``, make sure you use a single name for every "
"extrapolated variable included in the literal. In the examples above, note "
"how we used the ``name`` Python variable in both translation strings. This "
"example, besides being incorrect in some languages as noted above, would "
"fail::"
msgstr ""
"``ngettext()`` を使うときは、リテラルで挿入される全ての変数に対して単一の名前"
"を使うようにしてください。以下の例で、2 つの翻訳文字列でどのように ``name`` "
"Python 変数が使われるかに注意してください。この例は、上述した通りいくつかの言"
"語で間違っている以外に、失敗するでしょう::"

msgid ""
"You would get an error when running :djadmin:`django-admin compilemessages "
"<compilemessages>`:"
msgstr ""
":djadmin:`django-admin compilemessages <compilemessages>` を実行すると、以下"
"のエラーが発生するでしょう。"

msgid "Contextual markers"
msgstr "文脈マーカー"

msgid ""
"Sometimes words have several meanings, such as ``\"May\"`` in English, which "
"refers to a month name and to a verb. To enable translators to translate "
"these words correctly in different contexts, you can use the :func:`django."
"utils.translation.pgettext()` function, or the :func:`django.utils."
"translation.npgettext()` function if the string needs pluralization. Both "
"take a context string as the first variable."
msgstr ""
"単語は複数の意味を持っている場合があります。例えば、英語の ``\"May\"`` は、月"
"名と動詞を指します。翻訳者が異なる文脈でこれらの単語を正しく翻訳できるように"
"するには、:func:`django.utils.translation.pgettext()` 関数、もしくは文字列が"
"複数形を必要とする場合は  :func:`django.utils.translation.npgettext()` 関数を"
"使うことができます。両方とも、第 1 変数として文脈文字列を取ります。"

msgid ""
"In the resulting ``.po`` file, the string will then appear as often as there "
"are different contextual markers for the same string (the context will "
"appear on the ``msgctxt`` line), allowing the translator to give a different "
"translation for each of them."
msgstr ""
"結果の ``.po`` ファイルで、文字列は同じ文字列に対する異なる文脈マーカーがある"
"のと同じ頻度で出現し (コンテキストは ``msgctxt`` 行に出現します)、これらそれ"
"ぞれに対して翻訳者が異なる翻訳ができるようにします。"

msgid "will appear in the ``.po`` file as:"
msgstr "これは ``.po`` ファイル内に以下のように出現します:"

msgid ""
"Contextual markers are also supported by the :ttag:`translate` and :ttag:"
"`blocktranslate` template tags."
msgstr ""
"文脈マーカーは、:ttag:`translate` と :ttag:`blocktranslate` テンプレートタグ"
"によってもサポートされています。"

msgid "Lazy translation"
msgstr "遅延 (Lazy な) 翻訳"

msgid ""
"Use the lazy versions of translation functions in :mod:`django.utils."
"translation` (easily recognizable by the ``lazy`` suffix in their names) to "
"translate strings lazily -- when the value is accessed rather than when "
"they're called."
msgstr ""
"Lazy に、つまり遅延的に、値が呼ばれたときではなくアクセスされたときに文字列を"
"翻訳するためには、:mod:`django.utils.translation` (名前の ``lazy`` 接尾辞です"
"ぐ分かります) の翻訳関数の lazy バージョンを使ってください、"

msgid ""
"These functions store a lazy reference to the string -- not the actual "
"translation. The translation itself will be done when the string is used in "
"a string context, such as in template rendering."
msgstr ""
"これらの関数は、Lazy な文字列参照を保持します -- 実際の翻訳ではありません。翻"
"訳自体はテンプレートレンダリング内のように、文字列が文字列コンテキスト内で使"
"われるときに行われます。"

msgid ""
"This is essential when calls to these functions are located in code paths "
"that are executed at module load time."
msgstr ""
"これらの関数への呼び出しがモジュールのロード時に実行されるコードパスにある場"
"合は、これは不可欠です。"

msgid ""
"This is something that can easily happen when defining models, forms and "
"model forms, because Django implements these such that their fields are "
"actually class-level attributes. For that reason, make sure to use lazy "
"translations in the following cases:"
msgstr ""
"これは、モデル、フォーム、モデルフォームを定義するときに簡単に発生することが"
"できるものです。これは、Django がフィールドを実際にクラスレベルの属性にするよ"
"うに実装するためです。 そのため、以下のような場合は lazy な翻訳を使用してくだ"
"さい:"

msgid ""
"Model fields and relationships ``verbose_name`` and ``help_text`` option "
"values"
msgstr ""
"モデルフィールドとリレーションシップの ``verbose_name`` と ``help_text`` オプ"
"ションの値"

msgid ""
"For example, to translate the help text of the *name* field in the following "
"model, do the following::"
msgstr ""
"例えば、以下のモデルの *name* フィールドのヘルプテキストを翻訳するためには、"
"以下のようにします::"

msgid ""
"You can mark names of :class:`~django.db.models.ForeignKey`, :class:`~django."
"db.models.ManyToManyField` or :class:`~django.db.models.OneToOneField` "
"relationship as translatable by using their :attr:`~django.db.models.Options."
"verbose_name` options::"
msgstr ""
":attr:`~django.db.models.Options.verbose_name` オプションを使えば、:class:"
"`~django.db.models.ForeignKey`、:class:`~django.db.models.ManyToManyField` "
"や :class:`~django.db.models.OneToOneField` リレーションシップの名前を翻訳可"
"能にできます::"

msgid ""
"Just like you would do in :attr:`~django.db.models.Options.verbose_name` you "
"should provide a lowercase verbose name text for the relation as Django will "
"automatically titlecase it when required."
msgstr ""
":attr:`~django.db.models.Options.verbose_name` と同様に、必要に応じて Django "
"が自動的にタイトルケースに直すので、リレーションシップに対する小文字の冗長な"
"名前テキストを提供する必要があります。"

msgid "Model verbose names values"
msgstr "モデルの冗長な名前の値"

msgid ""
"It is recommended to always provide explicit :attr:`~django.db.models."
"Options.verbose_name` and :attr:`~django.db.models.Options."
"verbose_name_plural` options rather than relying on the fallback English-"
"centric and somewhat naïve determination of verbose names Django performs by "
"looking at the model's class name::"
msgstr ""
"フォールバックの英語中心とモデルのクラス名を見ることによって Django が動作す"
"る冗長な名前の純粋な決定に頼るよりも、明示的な :attr:`~django.db.models."
"Options.verbose_name` と :attr:`~django.db.models.Options."
"verbose_name_plural` オプションを指定することが推奨されます::"

msgid "Model methods ``description`` argument to the ``@display`` decorator"
msgstr "モデルメソッド ``description`` を ``@display`` デコレーターに渡す。"

msgid ""
"For model methods, you can provide translations to Django and the admin site "
"with the ``description`` argument to the :func:`~django.contrib.admin."
"display` decorator::"
msgstr ""
"モデルメソッドに対しては、:func:`~django.contrib.admin.display` デコレータの "
"``short_description`` 引数で Djangoと admin サイトへの翻訳が提供できます。"

msgid "Working with lazy translation objects"
msgstr "遅延 (Lazyな) 翻訳オブジェクトの使用方法"

msgid ""
"The result of a ``gettext_lazy()`` call can be used wherever you would use a "
"string (a :class:`str` object) in other Django code, but it may not work "
"with arbitrary Python code. For example, the following won't work because "
"the :pypi:`requests` library doesn't handle ``gettext_lazy`` objects::"
msgstr ""
"``gettext_lazy()`` 呼び出しの結果は、他の Django コード内で文字列 (:class:"
"`str` オブジェクト) を使うときはいつでも使うことができますが、気まぐれな "
"Python コードでうまく動作しないかもしれません。例えば、:pypi:`requests` ライ"
"ブラリが ``gettext_lazy`` オブジェクトを処理しないので、以下は動作しません::"

msgid ""
"You can avoid such problems by casting ``gettext_lazy()`` objects to text "
"strings before passing them to non-Django code::"
msgstr ""
"``gettext_lazy()`` オブジェクトを非 Django コードに渡す前にテキスト文字列に"
"キャストすることで、この問題を防ぐことができます::"

msgid ""
"If you don't like the long ``gettext_lazy`` name, you can alias it as ``_`` "
"(underscore), like so::"
msgstr ""
"``gettext_lazy`` という長い名前を使いたくない場合は、次のように ``_`` (アン"
"ダースコア) としてエイリアスできます。"

msgid ""
"Using ``gettext_lazy()`` and ``ngettext_lazy()`` to mark strings in models "
"and utility functions is a common operation. When you're working with these "
"objects elsewhere in your code, you should ensure that you don't "
"accidentally convert them to strings, because they should be converted as "
"late as possible (so that the correct locale is in effect). This "
"necessitates the use of the helper function described next."
msgstr ""
"モデルやユーティリティ関数内で文字列に ``gettext_lazy()`` や "
"``ngettext_lazy()`` を使用してマークすることはよく行われます。これらのオブ"
"ジェクトをコードの他の場所で扱う際には、誤って文字列に変換しないよう注意する"
"必要があります。なぜなら、これらの変換は可能な限り遅延されるべきだからです"
"（正しいロケールが効果を発揮するため）。これには、次に説明するヘルパー関数の"
"使用が必要です。"

msgid "Lazy translations and plural"
msgstr "遅延翻訳と複数形"

msgid ""
"When using lazy translation for a plural string (``n[p]gettext_lazy``), you "
"generally don't know the ``number`` argument at the time of the string "
"definition. Therefore, you are authorized to pass a key name instead of an "
"integer as the ``number`` argument. Then ``number`` will be looked up in the "
"dictionary under that key during string interpolation. Here's example::"
msgstr ""
"複数の文字列に対して遅延翻訳 (``n[p]gettext_lazy``) を使用する場合、一般的に"
"文字列を定義する時点では ``number`` 引数を知りません。そのため、 ``number`` "
"引数に整数ではなくキー名を渡すことが許可されています。そうすると、文字列の補"
"間時に ``number`` がそのキーの辞書で検索されます。以下に例を示します:"

msgid ""
"If the string contains exactly one unnamed placeholder, you can interpolate "
"directly with the ``number`` argument::"
msgstr ""
"文字列の中に名前のないプレースホルダが1つだけ含まれている場合は、 ``number`` "
"引数で直接補間できます:"

msgid "Formatting strings: ``format_lazy()``"
msgstr "文字列のフォーマット: ``format_lazy()``"

msgid ""
"Python's :meth:`str.format()` method will not work when either the "
"``format_string`` or any of the arguments to :meth:`str.format()` contains "
"lazy translation objects. Instead, you can use :func:`django.utils.text."
"format_lazy()`, which creates a lazy object that runs the ``str.format()`` "
"method only when the result is included in a string. For example::"
msgstr ""
"Python の :meth:`str.format()` メソッドは ``format_string`` や :meth:`str."
"format()` の引数に遅延 (lazy) 翻訳オブジェクトが含まれている場合には動作しま"
"せん。その代わりに :func:`django.utils.text.format_lazy()` を使うことができま"
"す。これは結果が文字列に含まれるときだけ ``str.format()`` メソッドを実行する"
"遅延オブジェクトを作成します。たとえば、次のようになります:"

msgid ""
"In this case, the lazy translations in ``result`` will only be converted to "
"strings when ``result`` itself is used in a string (usually at template "
"rendering time)."
msgstr ""
"この場合、 ``result`` 内の遅延翻訳は、 ``result`` 自体が文字列で使用されると"
"き（通常はテンプレートのレンダリング時）にだけ文字列に変換されます。"

msgid "Other uses of lazy in delayed translations"
msgstr "その他の遅延翻訳の使い方"

msgid ""
"For any other case where you would like to delay the translation, but have "
"to pass the translatable string as argument to another function, you can "
"wrap this function inside a lazy call yourself. For example::"
msgstr ""
"翻訳を遅らせたいが、翻訳可能な文字列を別の関数の引数として渡さなければならな"
"い場合、この関数を遅延 (Lazy) 呼び出しでラップできます。たとえば次のようにし"
"ます:"

msgid "And then later::"
msgstr "その後、次のようにします:"

msgid "Localized names of languages"
msgstr "言語のローカライズされた名前"

msgid ""
"The ``get_language_info()`` function provides detailed information about "
"languages:"
msgstr "``get_language_info()`` 関数は、言語について詳細な情報を提供します::"

msgid ""
"The ``name``, ``name_local``, and ``name_translated`` attributes of the "
"dictionary contain the name of the language in English, in the language "
"itself, and in your current active language respectively.  The ``bidi`` "
"attribute is True only for bi-directional languages."
msgstr ""
"ディクショナリの ``name``、``name_local``、``name_translated`` 属性は、言語の"
"英語名、言語自体、カレントのアクティブ言語をそれぞれ含んでいます。``bidi`` 属"
"性は双方向性の言語に対してのみ True です。"

msgid ""
"The source of the language information is the ``django.conf.locale`` module. "
"Similar access to this information is available for template code. See below."
msgstr ""
"言語情報のソースは ``django.conf.locale`` モジュールです。テンプレートコード"
"でも、この情報に対して同じようにアクセスできます。以下を参照してください。"

msgid "Internationalization: in template code"
msgstr "国際化: テンプレート内"

msgid ""
"Translations in :doc:`Django templates </ref/templates/language>` uses two "
"template tags and a slightly different syntax than in Python code. To give "
"your template access to these tags, put ``{% load i18n %}`` toward the top "
"of your template. As with all template tags, this tag needs to be loaded in "
"all templates which use translations, even those templates that extend from "
"other templates which have already loaded the ``i18n`` tag."
msgstr ""
":doc:`Django テンプレート </ref/templates/language>` 内での翻訳は 2 つのテン"
"プレートタグと Pthon コードとはやや異なるシンタックスを使います。テンプレート"
"でこれらのタグを使えるようにするには、``{% load i18n %}`` をテンプレートの先"
"頭に対して設置してください。全てのテンプレートタグと同じように、すでに "
"``i18n`` をロードしているテンプレートを extend している場合であっても、翻訳を"
"使用する全てのテンプレートでロードする必要があります。"

msgid ""
"Translated strings will not be escaped when rendered in a template. This "
"allows you to include HTML in translations, for example for emphasis, but "
"potentially dangerous characters (e.g. ``\"``) will also be rendered "
"unchanged."
msgstr ""
"翻訳された文字列はテンプレートでレンダリングされるときにエスケープされませ"
"ん。これにより、たとえば強調のために HTML を翻訳に含めることができますが、潜"
"在的に危険な文字 (``\"`` など) も変更されずにレンダリングされます。"

msgid "``translate`` template tag"
msgstr "``translate`` テンプレートタグ"

msgid ""
"The ``{% translate %}`` template tag translates either a constant string "
"(enclosed in single or double quotes) or variable content:"
msgstr ""
"``{% translate %}`` テンプレートタグは、(シングルクオートやダブルクオートで囲"
"まれた) 定数文字列や変数コンテンツを翻訳します:"

msgid ""
"If the ``noop`` option is present, variable lookup still takes place but the "
"translation is skipped. This is useful when \"stubbing out\" content that "
"will require translation in the future:"
msgstr ""
"``noop`` オプションが存在する場合、変数はそのままですが翻訳の対象外となりま"
"す。将来的に翻訳を必要とするコンテンツを \"もみ消している\" ときに役立ちます:"

msgid ""
"Internally, inline translations use a :func:`~django.utils.translation."
"gettext` call."
msgstr ""
"内部的には、インラインの翻訳は :func:`~django.utils.translation.gettext` 呼び"
"出しを使っています。"

msgid ""
"In case a template var (``myvar`` above) is passed to the tag, the tag will "
"first resolve such variable to a string at run-time and then look up that "
"string in the message catalogs."
msgstr ""
"テンプレート var (上記の ``myvar``) がタグに渡された場合、最初にランタイムで"
"変数から文字列へと解決し、それからメッセージカタログ内でその文字列をルック"
"アップします。"

msgid ""
"It's not possible to mix a template variable inside a string within ``{% "
"translate %}``. If your translations require strings with variables "
"(placeholders), use :ttag:`{% blocktranslate %}<blocktranslate>` instead."
msgstr ""
"``{% translate %}`` 内の文字列でテンプレート変数を混ぜることはできません。翻"
"訳が変数 (プレースホルダ) とともに文字列を必要とする場合は、代わりに :ttag:"
"`{% blocktranslate %} <blocktranslate>` を使ってください。"

msgid ""
"If you'd like to retrieve a translated string without displaying it, you can "
"use the following syntax:"
msgstr ""
"翻訳された文字列を表示させずに取り出したい場合は、以下の構文が使用できます:"

msgid ""
"In practice you'll use this to get a string you can use in multiple places "
"in a template or so you can use the output as an argument for other template "
"tags or filters:"
msgstr ""
"実際には、テンプレート内の複数の場所で使用できる文字列を取得したり、他のテン"
"プレートタグやフィルタリングするための引数として出力を使用したりする目的でこ"
"れを使うことになるでしょう:"

msgid ""
"``{% translate %}`` also supports :ref:`contextual markers<contextual-"
"markers>` using the ``context`` keyword:"
msgstr ""
"``{% translate %}`` は、``context`` キーワードを使う :ref:`文脈マーカー"
"<contextual-markers>` もサポートしています:"

msgid "``blocktranslate`` template tag"
msgstr "``blocktranslate`` テンプレートタグ"

msgid ""
"Contrarily to the :ttag:`translate` tag, the ``blocktranslate`` tag allows "
"you to mark complex sentences consisting of literals and variable content "
"for translation by making use of placeholders:"
msgstr ""
":ttag:`translate` タグとは対照的に、 ``blocktranslate`` タグはプレースホル"
"ダーを使うことで、リテラルその他の内容からなる複雑な文章を翻訳できます:"

msgid ""
"To translate a template expression -- say, accessing object attributes or "
"using template filters -- you need to bind the expression to a local "
"variable for use within the translation block. Examples:"
msgstr ""
"オブジェクトの ``object`` 属性にアクセスしたり、テンプレートフィルタを使った"
"りといったテンプレート式を翻訳するには、その式を翻訳ブロック内で使うローカル"
"変数に結びつける必要があります。たとえば、次のようにします:"

msgid ""
"You can use multiple expressions inside a single ``blocktranslate`` tag:"
msgstr "単一の ``blocktranslate`` タグ内で複数の式を使うこともできます:"

msgid ""
"The previous more verbose format is still supported: ``{% blocktranslate "
"with book|title as book_t and author|title as author_t %}``"
msgstr ""
"次のような、冗長な古い書式もまだサポートされています: ``{% blocktranslate "
"with book|title as book_t and author|title as author_t %}``"

msgid ""
"Other block tags (for example :ttag:`{% for %}<for>` or :ttag:`{% if %}"
"<if>`) are not allowed inside a ``blocktranslate`` tag."
msgstr ""
"他のブロックタグ (例えば :ttag:`{% for %} <for>` や :ttag:`{% if %} <if>`) "
"は ``blocktranslate`` タグの中では使えません。"

msgid ""
"If resolving one of the block arguments fails, ``blocktranslate`` will fall "
"back to the default language by deactivating the currently active language "
"temporarily with the :func:`~django.utils.translation.deactivate_all` "
"function."
msgstr ""
"ブロック引数の解決に失敗した場合、 ``blocktranslate`` は :func:`~django."
"utils.translation.deactivate_all` 関数を用いて、現在アクティブな言語を一時的"
"に非アクティブにすることで、デフォルトの言語にフォールバックします。"

msgid "This tag also provides for pluralization. To use it:"
msgstr "このタグは複数形にも対応しています。使用するには:"

msgid ""
"Designate and bind a counter value with the name ``count``. This value will "
"be the one used to select the right plural form."
msgstr ""
"カウンタの値を ``count`` という名前で指定し結び付けます。この値は正しい複数形"
"の選択に使用されます。"

msgid ""
"Specify both the singular and plural forms separating them with the ``{% "
"plural %}`` tag within the ``{% blocktranslate %}`` and ``{% "
"endblocktranslate %}`` tags."
msgstr ""
"``{% blocktranslate %}`` と ``{% endblocktranslate %}`` のタグの中で単数形と"
"複数形を ``{% plural %}`` タグで区切って指定してください。"

msgid "An example:"
msgstr "例:"

msgid "A more complex example:"
msgstr "より複雑な例:"

msgid ""
"When you use both the pluralization feature and bind values to local "
"variables in addition to the counter value, keep in mind that the "
"``blocktranslate`` construct is internally converted to an ``ngettext`` "
"call. This means the same :ref:`notes regarding ngettext variables "
"<pluralization-var-notes>` apply."
msgstr ""
"カウンターの値の追加に複数化機能とローカル変数への値のバインドの両方を使用す"
"る場合、 ``blocktranslate`` 構文は内部的に ``ngettext`` 呼び出しに変換される"
"ことに注意してください。つまり、 :ref:`ngettext 変数に関する注意事項 "
"<pluralization-var-notes>` と同じことに気を付ける必要があります。"

msgid ""
"Reverse URL lookups cannot be carried out within the ``blocktranslate`` and "
"should be retrieved (and stored) beforehand:"
msgstr ""
"URLの逆引きは ``blocktranslate`` 内では行えないので、事前に取得（保存）してお"
"く必要があります:"

msgid ""
"In practice you'll use this to get a string you can use in multiple places "
"in a template or so you can use the output as an argument for other template "
"tags or filters."
msgstr ""
"実際には、テンプレート内の複数の場所で使用できる文字列を取得したり、他のテン"
"プレートタグやフィルタリングするための引数として出力を使用したりする目的でこ"
"れを使うことになるでしょう:"

msgid ""
"In older versions, ``asvar`` instances weren't marked as safe for (HTML) "
"output purposes."
msgstr ""
"古いバージョンでは、``asvar`` インスタンスは（HTML）出力するのに安全であると"
"マークされていませんでした。"

msgid ""
"``{% blocktranslate %}`` also supports :ref:`contextual markers<contextual-"
"markers>` using the ``context`` keyword:"
msgstr ""
"``{% blocktranslate %}`` は、``context`` キーワードを使う :ref:`文脈マーカー"
"<contextual-markers>` もサポートしています:"

msgid ""
"Another feature ``{% blocktranslate %}`` supports is the ``trimmed`` option. "
"This option will remove newline characters from the beginning and the end of "
"the content of the ``{% blocktranslate %}`` tag, replace any whitespace at "
"the beginning and end of a line and merge all lines into one using a space "
"character to separate them. This is quite useful for indenting the content "
"of a ``{% blocktranslate %}`` tag without having the indentation characters "
"end up in the corresponding entry in the ``.po`` file, which makes the "
"translation process easier."
msgstr ""
"``{% blocktranslate %}`` タグのもう1つの機能は、``trimmed`` オプションです。"
"このオプションは、``{% blocktranslate %}`` タグのコンテンツの先頭と末尾から改"
"行文字を削除し、行の先頭と末尾の空白を置き換え、すべての行を空白文字で区切っ"
"て1行に結合します。これは、``{% blocktranslate %}`` タグのコンテンツをインデ"
"ントしても、インデント文字が対応する ``.po`` ファイルのエントリに含まれないよ"
"うにするのに非常に便利で、翻訳作業が簡単になります。"

msgid "For instance, the following ``{% blocktranslate %}`` tag:"
msgstr "例えば、次の ``{% blocktranslate %}`` タグ:"

msgid ""
"will result in the entry ``\"First sentence. Second paragraph.\"`` in the ``."
"po`` file, compared to ``\"\\n  First sentence.\\n  Second paragraph."
"\\n\"``, if the ``trimmed`` option had not been specified."
msgstr ""
"の出力結果は ``.po`` ファイル内では ``\"First sentence. Second paragraph."
"\"`` となります。対照に、 ``trimmed`` オプションが指定されていない場合は "
"``\"\\n First sentence.\\n Second paragraph.\\n\"`` となります。"

msgid "String literals passed to tags and filters"
msgstr "タグとフィルタに渡される文字列リテラル"

msgid ""
"You can translate string literals passed as arguments to tags and filters by "
"using the familiar ``_()`` syntax:"
msgstr ""
"タグやフィルタの引数として渡された文字列リテラルは、見慣れた ``_()`` 構文を"
"使って翻訳できます:"

msgid ""
"In this case, both the tag and the filter will see the translated string, so "
"they don't need to be aware of translations."
msgstr ""
"この場合、タグもフィルタも翻訳された文字列を見るので、翻訳を意識する必要はあ"
"りません。"

msgid ""
"In this example, the translation infrastructure will be passed the string "
"``\"yes,no\"``, not the individual strings ``\"yes\"`` and ``\"no\"``. The "
"translated string will need to contain the comma so that the filter parsing "
"code knows how to split up the arguments. For example, a German translator "
"might translate the string ``\"yes,no\"`` as ``\"ja,nein\"`` (keeping the "
"comma intact)."
msgstr ""
"この例では、個々の文字列 ``\"yes\"`` と ``\"no\"`` ではなく、``\"yes,no\"`` "
"という文字列が翻訳基盤に渡されます。翻訳された文字列は、フィルタをパースする"
"コードが引数をどう分割するかを知るために、カンマを含む必要があります。たとえ"
"ば、ドイツ語の翻訳者は文字列 ``\"yes,no\"`` を ``\"ja,nein\"`` (カンマはその"
"まま) と翻訳するでしょう。"

msgid "Comments for translators in templates"
msgstr "テンプレートにおける翻訳者のためのコメント"

msgid ""
"Just like with :ref:`Python code <translator-comments>`, these notes for "
"translators can be specified using comments, either with the :ttag:`comment` "
"tag:"
msgstr ""
":ref:`Pythonコード <translator-comments>` の場合と同様に、これらの翻訳者向け"
"のメモはコメントを使用して指定できます。:ttag:`comment` タグを使用する場合が"
"その一例です："

msgid ""
"or with the ``{#`` ... ``#}`` :ref:`one-line comment constructs <template-"
"comments>`:"
msgstr ""
"または :ref:`一行コメント構文 <template-comments>` ``{#`` ... ... ``#}`` で:"

msgid ""
"Just for completeness, these are the corresponding fragments of the "
"resulting ``.po`` file:"
msgstr ""
"完全を期すために示すと、以下が結果として生成される対応する  ``.po`` ファイル"
"の断片です。:"

msgid "Switching language in templates"
msgstr "テンプレートで言語を切り替える"

msgid ""
"If you want to select a language within a template, you can use the "
"``language`` template tag:"
msgstr ""
"テンプレートの中で言語を選択したい場合、 ``language`` テンプレートタグが使用"
"できます:"

msgid ""
"While the first occurrence of \"Welcome to our page\" uses the current "
"language, the second will always be in English."
msgstr ""
"\"Welcome to our page\" は、1つめのコードでは現在の言語を使って表示されます"
"が、2つめのコードでは常に英語になります。"

msgid "Other tags"
msgstr "その他のタグ"

msgid "These tags also require a ``{% load i18n %}``."
msgstr "これらのタグには同時に ``{% load i18n %}`` が必要です。"

msgid "``get_available_languages``"
msgstr "``get_available_languages``"

msgid ""
"``{% get_available_languages as LANGUAGES %}`` returns a list of tuples in "
"which the first element is the :term:`language code` and the second is the "
"language name (translated into the currently active locale)."
msgstr ""
"``{% get_available_languages as LANGUAGES %}`` はタプルのリストを返します。最"
"初の要素は言語コード :term:`language code` で、2番目の要素は言語名 (現在アク"
"ティブなロケールに翻訳されたもの) です。"

msgid "``get_current_language``"
msgstr "``get_current_language``"

msgid ""
"``{% get_current_language as LANGUAGE_CODE %}`` returns the current user's "
"preferred language as a string. Example: ``en-us``. See :ref:`how-django-"
"discovers-language-preference`."
msgstr ""
"``{% get_current_language as LANGUAGE_CODE %}`` は現在のユーザの優先言語を文"
"字列として返します。たとえば ``en-us`` です。 :ref:`how-django-discovers-"
"language-preference` を参照してください。"

msgid "``get_current_language_bidi``"
msgstr "``get_current_language_bidi``"

msgid ""
"``{% get_current_language_bidi as LANGUAGE_BIDI %}`` returns the current "
"locale's direction. If ``True``, it's a right-to-left language, e.g. Hebrew, "
"Arabic. If ``False`` it's a left-to-right language, e.g. English, French, "
"German, etc."
msgstr ""
"``{% get_current_language_bidi as LANGUAGE_BIDI %}`` は現在のロケールの文章を"
"書く方向を返します。もし ``True`` なら、ヘブライ語やアラビア語などの右から左"
"へ書く言語です。もし ``False`` なら、英語、フランス語、ドイツ語などの左から右"
"へ書く言語です。"

msgid "``i18n`` context processor"
msgstr "``i18n`` コンテキストプロセッサ"

msgid ""
"If you enable the :class:`django.template.context_processors.i18n` context "
"processor, then each ``RequestContext`` will have access to ``LANGUAGES``, "
"``LANGUAGE_CODE``, and ``LANGUAGE_BIDI`` as defined above."
msgstr ""
"もし :class:`django.template.context_processors.i18n` コンテキストプロセッサ"
"を有効にすると、各 ``RequestContext`` は上で定義した ``LANGUAGES``, "
"``LANGUAGE_CODE``, ``LANGUAGE_BIDI`` にアクセスできるようになります。"

msgid "``get_language_info``"
msgstr "``get_language_info``"

msgid ""
"You can also retrieve information about any of the available languages using "
"provided template tags and filters. To get information about a single "
"language, use the ``{% get_language_info %}`` tag:"
msgstr ""
"また、提供されているテンプレートタグとフィルタを使えば、利用可能な言語の情報"
"を取得することもできます。一つの言語に関する情報を取得するには ``{% "
"get_language_info %}`` タグを使います:"

msgid "You can then access the information:"
msgstr "その後、下記のように情報にアクセスできます:"

msgid "``get_language_info_list``"
msgstr "``get_language_info_list``"

msgid ""
"You can also use the ``{% get_language_info_list %}`` template tag to "
"retrieve information for a list of languages (e.g. active languages as "
"specified in :setting:`LANGUAGES`). See :ref:`the section about the "
"set_language redirect view <set_language-redirect-view>` for an example of "
"how to display a language selector using ``{% get_language_info_list %}``."
msgstr ""
"また、``{% get_language_info_list %}`` のテンプレートタグを使えば、言語のリス"
"ト(例えば :setting:`LANGUAGES` で指定されたアクティブな言語)の情報を取得でき"
"ます。``{% get_language_info_list %}`` を使って言語セレクタを表示する方法の例"
"は :ref:`set_language リダイレクトビューのセクション <set_language-redirect-"
"view>` を参照してください。"

msgid ""
"In addition to :setting:`LANGUAGES` style list of tuples, ``{% "
"get_language_info_list %}`` supports lists of language codes. If you do this "
"in your view:"
msgstr ""
":setting:`LANGUAGES` 形式のタプルのリストに加え、``{% get_language_info_list "
"%}`` は言語コードのリストをサポートしています。これをビューで実行すると:"

msgid "you can iterate over those languages in the template:"
msgstr ""
"を使用すると、テンプレート内でそれらの言語のリストをイテレートできます:"

msgid "There are also some filters available for convenience:"
msgstr "いくつかの便利なフィルタが使えます:"

msgid "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"
msgstr "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"

msgid "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"
msgstr "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"

msgid "``{{ LANGUAGE_CODE|language_bidi }}`` (False)"
msgstr "``{{ LANGUAGE_CODE|language_bidi }}`` (False)"

msgid ""
"``{{ LANGUAGE_CODE|language_name_translated }}`` (\"německy\", when active "
"language is Czech)"
msgstr ""
"``{{ LANGUAGE_CODE|language_name_translated }}`` (\"německy\", when active "
"language is Czech)"

msgid "Internationalization: in JavaScript code"
msgstr "国際化: JavaScript コード内"

msgid "Adding translations to JavaScript poses some problems:"
msgstr "JavaScript に対する翻訳には、いくつか問題があります:"

msgid "JavaScript code doesn't have access to a ``gettext`` implementation."
msgstr "JavaScript コードは ``gettext`` 実行にアクセスできません。"

msgid ""
"JavaScript code doesn't have access to ``.po`` or ``.mo`` files; they need "
"to be delivered by the server."
msgstr ""
"JavaScript コードは ``.po`` や ``.mo`` ファイルにアクセスできません; サーバー"
"によって配布される必要があります。"

msgid ""
"The translation catalogs for JavaScript should be kept as small as possible."
msgstr "JavaScript 用の翻訳カタログはできる限り小さくなければなりません。"

msgid ""
"Django provides an integrated solution for these problems: It passes the "
"translations into JavaScript, so you can call ``gettext``, etc., from within "
"JavaScript."
msgstr ""
"Django には、これらの問題に対する総合的な解決策が用意されています: 翻訳を "
"JavaScript に渡し、``gettext`` などを JavaScript 内から呼び出せるようにする方"
"法です。"

msgid ""
"The main solution to these problems is the following ``JavaScriptCatalog`` "
"view, which generates a JavaScript code library with functions that mimic "
"the ``gettext`` interface, plus an array of translation strings."
msgstr ""
"主な解決策は以下の ``JavaScriptCatalog`` ビューです。これは、``gettext`` を擬"
"似的に再現する関数と翻訳文字列の配列で JavaScript コードライブラリを生成しま"
"す。"

msgid "The ``JavaScriptCatalog`` view"
msgstr "``JavaScriptCatalog`` ビュー"

msgid ""
"A view that produces a JavaScript code library with functions that mimic the "
"``gettext`` interface, plus an array of translation strings."
msgstr ""
"``gettext`` インターフェイスを擬似的に再現する関数と翻訳文字列の配列で、"
"JavaScriptのコードライブラリを生成するビューです。"

msgid "**Attributes**"
msgstr "**属性**"

msgid ""
"Translation domain containing strings to add in the view output. Defaults to "
"``'djangojs'``."
msgstr ""
"ビューの出力に追加する文字列を含む翻訳ドメインです。デフォルトは "
"``'djangojs'`` です。"

msgid ""
"A list of :attr:`application names <django.apps.AppConfig.name>` among "
"installed applications. Those apps should contain a ``locale`` directory. "
"All those catalogs plus all catalogs found in :setting:`LOCALE_PATHS` (which "
"are always included) are merged into one catalog. Defaults to ``None``, "
"which means that all available translations from all :setting:"
"`INSTALLED_APPS` are provided in the JavaScript output."
msgstr ""
"インストールされたアプリケーション間の :attr:`application names <django.apps."
"AppConfig.name>` のリストです。これらのアプリケーションは ``locale`` ディレク"
"トリを含んでいる必要があります。これらのカタログに加えて  (常に含まれてい"
"る) :setting:`LOCALE_PATHS` 内で見つかった全てのカタログは、1 つのカタログに"
"統合されます。デフォルトは ``None`` で、全ての :setting:`INSTALLED_APPS` から"
"の利用可能な翻訳は JavaScript の出力に渡されることを意味します。"

msgid "**Example with default values**::"
msgstr "**デフォルト値を使った例**::"

msgid "**Example with custom packages**::"
msgstr "**独自のパッケージを使った例**::"

msgid ""
"If your root URLconf uses :func:`~django.conf.urls.i18n.i18n_patterns`, "
"``JavaScriptCatalog`` must also be wrapped by ``i18n_patterns()`` for the "
"catalog to be correctly generated."
msgstr ""
"ルートの URLconf が :func:`~django.conf.urls.i18n.i18n_patterns`、"
"``JavaScriptCatalog`` を使っている場合、カタログが正しく生成されるように "
"``i18n_patterns()`` によるラップも必要となります。"

msgid "**Example with** ``i18n_patterns()``::"
msgstr "``i18n_patterns()`` **を使った例**::"

msgid ""
"The precedence of translations is such that the packages appearing later in "
"the ``packages`` argument have higher precedence than the ones appearing at "
"the beginning. This is important in the case of clashing translations for "
"the same literal."
msgstr ""
"翻訳の優先順位は、``packages`` 引数で後に現れるパッケージの方が、最初に現れる"
"ものよりも高くなります。これは、同じリテラルに対する翻訳が衝突する場合に重要"
"です。"

msgid ""
"If you use more than one ``JavaScriptCatalog`` view on a site and some of "
"them define the same strings, the strings in the catalog that was loaded "
"last take precedence."
msgstr ""
"サイト上で複数の ``JavaScriptCatalog`` ビューを使っていてそのうちのいくつかが"
"同じ文字列を定義している場合、最後にロードされたカタログ内の文字列が優先され"
"ます。"

msgid "Using the JavaScript translation catalog"
msgstr "JavaScript 翻訳カタログを使う"

msgid "To use the catalog, pull in the dynamically generated script like this:"
msgstr ""
"カタログを使うには、以下のように動的に生成されたスクリプトを参照してください:"

msgid ""
"This uses reverse URL lookup to find the URL of the JavaScript catalog view. "
"When the catalog is loaded, your JavaScript code can use the following "
"methods:"
msgstr ""
"これは、reverse URL を使用して、JavaScript カタログビューの URL をルックアッ"
"プします。カタログがロードされると、JavaScript コードは以下のメソッドを使える"
"ようになります:"

msgid "``gettext``"
msgstr "``gettext``"

msgid "``ngettext``"
msgstr "``ngettext``"

msgid "``interpolate``"
msgstr "``interpolate``"

msgid "``get_format``"
msgstr "``get_format``"

msgid "``gettext_noop``"
msgstr "``gettext_noop``"

msgid "``pgettext``"
msgstr "``pgettext``"

msgid "``npgettext``"
msgstr "``npgettext``"

msgid "``pluralidx``"
msgstr "``pluralidx``"

msgid ""
"The ``gettext`` function behaves similarly to the standard ``gettext`` "
"interface within your Python code::"
msgstr ""
"``gettext`` 関数は、Python コード内の標準の ``gettext`` インターフェースと同"
"じように動作します::"

msgid ""
"The ``ngettext`` function provides an interface to pluralize words and "
"phrases:"
msgstr ""
"``ngettext`` 関数は単語やフレーズを複数形にするインターフェースを提供します:"

msgid ""
"The ``interpolate`` function supports dynamically populating a format "
"string. The interpolation syntax is borrowed from Python, so the "
"``interpolate`` function supports both positional and named interpolation:"
msgstr ""
"``interpolate`` 関数は表示形式の文字列の動的な記入をサポートします。補完の構"
"文は  Python を模しているので、``interpolate`` 関数は位置および名前付きの補完"
"の両方をサポートします。"

msgid ""
"Positional interpolation: ``obj`` contains a JavaScript Array object whose "
"elements values are then sequentially interpolated in their corresponding "
"``fmt`` placeholders in the same order they appear. For example:"
msgstr ""
"位置による補完: ``obj`` は、表示されるのと同じ順番で要素の値が一致する "
"``fmt`` プレースホルダ内で連続的に補完される JavaScript Array オブジェクトを"
"含んでいます。例えば:"

msgid ""
"Named interpolation: This mode is selected by passing the optional boolean "
"``named`` parameter as ``true``. ``obj`` contains a JavaScript object or "
"associative array. For example:"
msgstr ""
"名前付きの補完: このモードは ``named`` パラメータを ``true`` として渡すことで"
"選択されます。``obj`` は JavaScript オブジェクトや結合配列を含みます。例えば:"

msgid ""
"You shouldn't go over the top with string interpolation, though: this is "
"still JavaScript, so the code has to make repeated regular-expression "
"substitutions. This isn't as fast as string interpolation in Python, so keep "
"it to those cases where you really need it (for example, in conjunction with "
"``ngettext`` to produce proper pluralizations)."
msgstr ""
"ただし文字列補間は、やり過ぎるべきではありません。これはまだ JavaScript なの"
"で、コードは何度も正規表現による置換を行う必要があります。これは Python の文"
"字列補間ほど速くはないので、本当に必要な場合（例えば、``ngettext`` と組み合わ"
"せて適切な複数形を生成する場合など）に限定してください。"

msgid ""
"The ``get_format`` function has access to the configured i18n formatting "
"settings and can retrieve the format string for a given setting name:"
msgstr ""
"``get_format`` 関数は設定済みの i18n 表示形式設定にアクセスでき、与えられた設"
"定名に対して表示形式文字列を取り出します:"

msgid "It has access to the following settings:"
msgstr "以下の設定に対してアクセスします:"

msgid ":setting:`DATE_FORMAT`"
msgstr ":setting:`DATE_FORMAT`"

msgid ":setting:`DATE_INPUT_FORMATS`"
msgstr ":setting:`DATE_INPUT_FORMATS`"

msgid ":setting:`DATETIME_FORMAT`"
msgstr ":setting:`DATETIME_FORMAT`"

msgid ":setting:`DATETIME_INPUT_FORMATS`"
msgstr ":setting:`DATETIME_INPUT_FORMATS`"

msgid ":setting:`DECIMAL_SEPARATOR`"
msgstr ":setting:`DECIMAL_SEPARATOR`"

msgid ":setting:`FIRST_DAY_OF_WEEK`"
msgstr ":setting:`FIRST_DAY_OF_WEEK`"

msgid ":setting:`MONTH_DAY_FORMAT`"
msgstr ":setting:`MONTH_DAY_FORMAT`"

msgid ":setting:`NUMBER_GROUPING`"
msgstr ":setting:`NUMBER_GROUPING`"

msgid ":setting:`SHORT_DATE_FORMAT`"
msgstr ":setting:`SHORT_DATE_FORMAT`"

msgid ":setting:`SHORT_DATETIME_FORMAT`"
msgstr ":setting:`SHORT_DATETIME_FORMAT`"

msgid ":setting:`THOUSAND_SEPARATOR`"
msgstr ":setting:`THOUSAND_SEPARATOR`"

msgid ":setting:`TIME_FORMAT`"
msgstr ":setting:`TIME_FORMAT`"

msgid ":setting:`TIME_INPUT_FORMATS`"
msgstr ":setting:`TIME_INPUT_FORMATS`"

msgid ":setting:`YEAR_MONTH_FORMAT`"
msgstr ":setting:`YEAR_MONTH_FORMAT`"

msgid ""
"This is useful for maintaining formatting consistency with the Python-"
"rendered values."
msgstr ""
"これは、Python によってレンダリングされる値と一貫性を持った表示形式を保守する"
"ために役立ちます。"

msgid ""
"This emulates the ``gettext`` function but does nothing, returning whatever "
"is passed to it::"
msgstr ""
"これは ``gettext`` 関数をエミュレートしますが、何もせず、渡されたものをそのま"
"ま返します::"

msgid ""
"This is useful for stubbing out portions of the code that will need "
"translation in the future."
msgstr ""
"これは、将来的に翻訳が必要なコードの部分をもみ消しておくのに役立ちます。"

msgid ""
"The ``pgettext`` function behaves like the Python variant (:func:`~django."
"utils.translation.pgettext()`), providing a contextually translated word::"
msgstr ""
"``pgettext`` 関数は Python の変数 (:func:`~django.utils.translation."
"pgettext()`) のように動作し、文脈的に翻訳される単語を提供します::"

msgid ""
"The ``npgettext`` function also behaves like the Python variant (:func:"
"`~django.utils.translation.npgettext()`), providing a **pluralized** "
"contextually translated word:"
msgstr ""
"``npgettext`` 関数も Python 変数 (:func:`~django.utils.translation."
"npgettext()`) のように動作し、**複数形の** 文脈的に翻訳される単語を提供しま"
"す:"

msgid ""
"The ``pluralidx`` function works in a similar way to the :tfilter:"
"`pluralize` template filter, determining if a given ``count`` should use a "
"plural form of a word or not:"
msgstr ""
"``pluralidx`` 関数は :tfilter:`pluralize` テンプレートフィルタと同じように動"
"作し、与えられた ``count`` が単語の複数形を使うべきかどうかを決めます:"

msgid ""
"In the simplest case, if no custom pluralization is needed, this returns "
"``false`` for the integer ``1`` and ``true`` for all other numbers."
msgstr ""
"最も単純なケースでは、独自の複数形が必要ない場合、これは整数 ``1`` に対して "
"``false`` を返し、他の数に対して ``true`` を返します。"

msgid ""
"However, pluralization is not this simple in all languages. If the language "
"does not support pluralization, an empty value is provided."
msgstr ""
"ただし、複数形は全ての言語でこのようにシンプルではありません。言語が複数形を"
"サポートしていない場合、空の値が渡されます。"

msgid ""
"Additionally, if there are complex rules around pluralization, the catalog "
"view will render a conditional expression. This will evaluate to either a "
"``true`` (should pluralize) or ``false`` (should **not** pluralize) value."
msgstr ""
"加えて、複数形に関して複雑なルールが存在する場合、カタログビューは条件付きの"
"表現をレンダリングします。これは、値を ``true`` (複数形) と ``false`` (複数"
"形 **ではない** ) のどちらにするかを評価します。"

msgid "The ``JSONCatalog`` view"
msgstr "``JSONCatalog`` ビュー"

msgid ""
"In order to use another client-side library to handle translations, you may "
"want to take advantage of the ``JSONCatalog`` view. It's similar to :class:"
"`~django.views.i18n.JavaScriptCatalog` but returns a JSON response."
msgstr ""
"他のクライアントサイドのライブラリを使って翻訳を扱うためには、"
"``JSONCatalog`` を利用するのがいいでしょう。:class:`~django.views.i18n."
"JavaScriptCatalog` と似ていますが、JSON のレスポンスを返します。"

msgid ""
"See the documentation for :class:`~django.views.i18n.JavaScriptCatalog` to "
"learn about possible values and use of the ``domain`` and ``packages`` "
"attributes."
msgstr ""
"使える値を知るには、:class:`~django.views.i18n.JavaScriptCatalog` を参照して"
"ください。また、``domain`` と ``packages`` 属性を使用してください。"

msgid "The response format is as follows:"
msgstr "レスポンスの形式は以下の通りです:"

msgid "Note on performance"
msgstr "実行速度についての覚え書き"

msgid ""
"The various JavaScript/JSON i18n views generate the catalog from ``.mo`` "
"files on every request. Since its output is constant, at least for a given "
"version of a site, it's a good candidate for caching."
msgstr ""
"たくさんの JavaScript/JSON i18n ビューは全てのリクエストで ``.mo`` ファイルか"
"らカタログを生成します。出力は一定なので、少なくとも与えられたサイトのバー"
"ジョンに対しては、キャッシュが有力な選択肢となります。"

msgid ""
"Server-side caching will reduce CPU load. It's easily implemented with the :"
"func:`~django.views.decorators.cache.cache_page` decorator. To trigger cache "
"invalidation when your translations change, provide a version-dependent key "
"prefix, as shown in the example below, or map the view at a version-"
"dependent URL::"
msgstr ""
"サーバーサイドのキャッシシュは CPU の負担を軽減します。 :func:`~django.views."
"decorators.cache.cache_page` デコレータを使うと簡単に実装できます。翻訳を変更"
"したときにキャッシュの無効部分をトリガーするには、以下の例にあるようにバー"
"ジョンに依存したキープレフィックスを使ってください。もしくは、バージョンに依"
"存した URL でビューをマッピングしてください:"

msgid ""
"Client-side caching will save bandwidth and make your site load faster. If "
"you're using ETags (:class:`~django.middleware.http."
"ConditionalGetMiddleware`), you're already covered. Otherwise, you can "
"apply :ref:`conditional decorators <conditional-decorators>`. In the "
"following example, the cache is invalidated whenever you restart your "
"application server::"
msgstr ""
"クライアントサイドのキャッシュは帯域を節約し、サイトの読み込みを速くします。"
"ETags (:class:`~django.middleware.http.ConditionalGetMiddleware`) を使ってい"
"る場合、すでに適用済みです。それ以外の場合は、:ref:`条件付きデコレータ "
"<conditional-decorators>` を参照してみてください。以下の例では、アプリケー"
"ションサーバを再起動するとキャッシュの効力がなくなります:"

msgid ""
"You can even pre-generate the JavaScript catalog as part of your deployment "
"procedure and serve it as a static file. This radical technique is "
"implemented in django-statici18n_."
msgstr ""
"また、開発プロシージャの一部として JavaScript カタログを事前に生成して、静的"
"ファイルとして提供することもできます。この抜本的テクニックは django-"
"statici18n_ で実装されます。"

msgid "Internationalization: in URL patterns"
msgstr "国際化: URL パターン内"

msgid "Django provides two mechanisms to internationalize URL patterns:"
msgstr ""
"Django には、URL パターンを国際化するための 2 つの仕組みが用意されています:"

msgid ""
"Adding the language prefix to the root of the URL patterns to make it "
"possible for :class:`~django.middleware.locale.LocaleMiddleware` to detect "
"the language to activate from the requested URL."
msgstr ""
":class:`~django.middleware.locale.LocaleMiddleware` が、リクエストされた URL "
"からアクティブにする言語を検出できるようにするため、URL パターンのルートに言"
"語のプレフィックスを追加します。"

msgid ""
"Making URL patterns themselves translatable via the :func:`django.utils."
"translation.gettext_lazy()` function."
msgstr ""
"URL パターン自体を :func:`django.utils.translation.gettext_lazy()` 関数を通じ"
"て翻訳可能にする。"

msgid ""
"Using either one of these features requires that an active language be set "
"for each request; in other words, you need to have :class:`django.middleware."
"locale.LocaleMiddleware` in your :setting:`MIDDLEWARE` setting."
msgstr ""
"この 2 つのうちどちらを使う場合でも、各リクエストに対してアクティブな言語を"
"セットすることが必要となります; 言い換えれば、:setting:`MIDDLEWARE` 設定内"
"に :class:`django.middleware.locale.LocaleMiddleware` を記述しておく必要があ"
"ります。"

msgid "Language prefix in URL patterns"
msgstr "URL パターンにおける言語プレフィックス"

msgid ""
"This function can be used in a root URLconf and Django will automatically "
"prepend the current active language code to all URL patterns defined within :"
"func:`~django.conf.urls.i18n.i18n_patterns`."
msgstr ""
"この関数は、ルートの URLconf で使うことができ、Django は自動的に現在アクティ"
"ブな言語のコードを :func:`~django.conf.urls.i18n.i18n_patterns` で定義された"
"全ての URL パターンの先頭に追加します。"

msgid ""
"Setting ``prefix_default_language`` to ``False`` removes the prefix from the "
"default language (:setting:`LANGUAGE_CODE`). This can be useful when adding "
"translations to existing site so that the current URLs won't change."
msgstr ""
"``prefix_default_language`` を ``False`` にセットすると、デフォルト言語 (:"
"setting:`LANGUAGE_CODE`) からプレフィックスを除去します。これは、現在の URL "
"を変更しないよう既存のサイトに翻訳を追加するとき、役に立ちます。"

msgid "Example URL patterns::"
msgstr "URL パターンの例::"

msgid ""
"After defining these URL patterns, Django will automatically add the "
"language prefix to the URL patterns that were added by the ``i18n_patterns`` "
"function. Example:"
msgstr ""
"これらの URL パターンを定義すると、Django は自動的に ``i18n_patterns`` 関数で"
"追加された URL パターンに言語プレフィックスを追加します。例:"

msgid ""
"With ``prefix_default_language=False`` and  ``LANGUAGE_CODE='en'``, the URLs "
"will be:"
msgstr ""
"``prefix_default_language=False`` と ``LANGUAGE_CODE='en'`` を使うと、URL は"
"以下のようになります:"

msgid ""
":func:`~django.conf.urls.i18n.i18n_patterns` is only allowed in a root "
"URLconf. Using it within an included URLconf will throw an :exc:`~django."
"core.exceptions.ImproperlyConfigured` exception."
msgstr ""
":func:`~django.conf.urls.i18n.i18n_patterns` はルートの URLconf のみで使うこ"
"とができます。インクルードされた URLconf で使うと :exc:`~django.core."
"exceptions.ImproperlyConfigured` 例外を投げます。"

msgid ""
"Ensure that you don't have non-prefixed URL patterns that might collide with "
"an automatically-added language prefix."
msgstr ""
"自動的に追加される言語プレフィックスと重複するようなプレフィックスを持った "
"URL パターンにしないように注意してください。"

msgid "Translating URL patterns"
msgstr "URL パターンを翻訳する"

msgid ""
"URL patterns can also be marked translatable using the :func:`~django.utils."
"translation.gettext_lazy` function. Example::"
msgstr ""
"URL パターンは、:func:`~django.utils.translation.gettext_lazy` 関数を使って、"
"翻訳可能にマークすることもできます。例えば:"

msgid ""
"After you've created the translations, the :func:`~django.urls.reverse` "
"function will return the URL in the active language. Example:"
msgstr ""
"翻訳を作成した後に、:func:`~django.urls.reverse` 関数はアクティブな言語で "
"URL を返します。例えば:"

msgid ""
"In most cases, it's best to use translated URLs only within a language code "
"prefixed block of patterns (using :func:`~django.conf.urls.i18n."
"i18n_patterns`), to avoid the possibility that a carelessly translated URL "
"causes a collision with a non-translated URL pattern."
msgstr ""
"ほとんどの場合、（ :func:`~django.conf.urls.i18n.i18n_patterns` を使用して）"
"翻訳されたURLは、言語コードが接頭辞として付けられたパターンのブロック内でのみ"
"使用することが最も良い選択です。不用意に翻訳された URL が翻訳されていない "
"URL パターンと衝突するのを避けるためです。"

msgid "Reversing in templates"
msgstr "テンプレート内で逆引きする"

msgid ""
"If localized URLs get reversed in templates they always use the current "
"language. To link to a URL in another language use the :ttag:`language` "
"template tag. It enables the given language in the enclosed template section:"
msgstr ""
"ローカライズされた URL がテンプレート内でリバースされる場合、常に現在の言語が"
"使用されます。他の言語の URL にリンクを貼るには、:ttag:`language` テンプレー"
"トタグを使ってください。これは、テンプレートの囲まれた範囲内で、指定された言"
"語を有効化します:"

msgid ""
"The :ttag:`language` tag expects the language code as the only argument."
msgstr ":ttag:`language` タグは引数のみとして言語コードを予期します。"

msgid "Localization: how to create language files"
msgstr "ローカライズ: 言語ファイルを作成する方法"

msgid ""
"Once the string literals of an application have been tagged for later "
"translation, the translation themselves need to be written (or obtained). "
"Here's how that works."
msgstr ""
"アプリケーションの文字列リテラルが後の翻訳にためにタグづけされ終わったら、翻"
"訳自体を記述する (もしくは取得する) 必要があります。以下は、その方法です。"

msgid "Message files"
msgstr "メッセージファイル"

msgid ""
"The first step is to create a :term:`message file` for a new language. A "
"message file is a plain-text file, representing a single language, that "
"contains all available translation strings and how they should be "
"represented in the given language. Message files have a ``.po`` file "
"extension."
msgstr ""
"最初のステップは、新しい言語に対する :term:`message file` を作成することで"
"す。メッセージファイルはプレーンテキストファイルで、単一の言語を記述します。"
"このファイルは、全ての翻訳可能な文字列とそれらがどのように与えられた言語で表"
"示されるかを含みます。メッセージファイルは ``.po`` ファイル拡張子を持ちます。"

msgid ""
"Django comes with a tool, :djadmin:`django-admin makemessages "
"<makemessages>`, that automates the creation and upkeep of these files."
msgstr ""
"Djangoには :djadmin:`django-admin makemessages <makemessages>` というツールが"
"用意してあり、これらのファイルの作成と保全を自動化します。"

msgid "Gettext utilities"
msgstr "Gettext ユーティリティ"

msgid ""
"The ``makemessages`` command (and ``compilemessages`` discussed later) use "
"commands from the GNU gettext toolset: ``xgettext``, ``msgfmt``, "
"``msgmerge`` and ``msguniq``."
msgstr ""
"``makemessages`` コマンド (と後述する ``compilemessages``) は、GNU gettext "
"ツールセットからのコマンドを使用します: ``xgettext``、``msgfmt``、"
"``msgmerge``、``msguniq`` です。"

msgid "The minimum version of the ``gettext`` utilities supported is 0.15."
msgstr ""
"サポートされている ``gettext`` ユーティリティの最小バージョンは 0.15 です。"

msgid "To create or update a message file, run this command:"
msgstr ""
"メッセージファイルを作成または更新するには、以下のコマンドを実行してください:"

msgid ""
"...where ``de`` is the :term:`locale name` for the message file you want to "
"create. For example, ``pt_BR`` for Brazilian Portuguese, ``de_AT`` for "
"Austrian German or ``id`` for Indonesian."
msgstr ""
"...ここでの ``de`` は作成したいメッセージファイルに対するロケール名 :term:"
"`locale name` です。例えば、ブラジル系のポルトガル語に対する ``pt_BR``、オー"
"ストリア系のドイツ語に対する ``de_AT``、インドネシアに対する ``id`` などで"
"す。"

msgid "The script should be run from one of two places:"
msgstr "スクリプトは、2 つの場所のうち 1 つから実行する必要があります:"

msgid ""
"The root directory of your Django project (the one that contains ``manage."
"py``)."
msgstr "Django プロジェクトのルートディレクトリ (``manage.py`` を含むところ)。"

msgid "The root directory of one of your Django apps."
msgstr "Django アプリケーションのルートディレクトリ。"

msgid ""
"The script runs over your project source tree or your application source "
"tree and pulls out all strings marked for translation (see :ref:`how-django-"
"discovers-translations` and be sure :setting:`LOCALE_PATHS` is configured "
"correctly). It creates (or updates) a message file in the directory ``locale/"
"LANG/LC_MESSAGES``. In the ``de`` example, the file will be ``locale/de/"
"LC_MESSAGES/django.po``."
msgstr ""
"スクリプトは、プロジェクトのソースツリーもしくはアプリケーションのソースツ"
"リーを通じて実行され、翻訳用にマークされた全ての文字列 (:ref:`how-django-"
"discovers-translations` を参照して :setting:`LOCALE_PATHS` を正しく設定してく"
"ださい) を抽出します。ディレクトリ ``locale/LANG/LC_MESSAGES`` にメッセージ"
"ファイルを作成 (もしくは更新) します。``de`` の例では、ファイルは ``locale/"
"de/LC_MESSAGES/django.po`` となります。"

msgid ""
"When you run ``makemessages`` from the root directory of your project, the "
"extracted strings will be automatically distributed to the proper message "
"files. That is, a string extracted from a file of an app containing a "
"``locale`` directory will go in a message file under that directory. A "
"string extracted from a file of an app without any ``locale`` directory will "
"either go in a message file under the directory listed first in :setting:"
"`LOCALE_PATHS` or will generate an error if :setting:`LOCALE_PATHS` is empty."
msgstr ""
"プロジェクトのルートディレクトリから ``makemessages`` を実行したとき、抽出さ"
"れた文字列は自動的に適切なメッセージファイルへと分配されます。つまり、"
"``locale`` ディレクトリを含むアプリケーションのファイルから抽出された文字列"
"は、そのディレクトリ下のメッセージファイルに格納されます。``locale`` ディレク"
"トリがないアプリケーションのファイルから抽出された文字列は、:setting:"
"`LOCALE_PATHS` 内に最初にリストアップされたディレクトリ下にあるメッセージファ"
"イルか、もしくは :setting:`LOCALE_PATHS` が空の場合はエラーを生成します。"

msgid ""
"By default :djadmin:`django-admin makemessages <makemessages>` examines "
"every file that has the ``.html``, ``.txt`` or ``.py`` file extension. If "
"you want to override that default, use the :option:`--extension "
"<makemessages --extension>` or ``-e`` option to specify the file extensions "
"to examine:"
msgstr ""
"デフォルトでは :djadmin:`django-admin makemessages <makemessages>` は ``."
"html`` 、 ``.txt`` または ``py`` のファイル拡張子を持つファイルを全て検査しま"
"す。このデフォルトの動作をオーバーライドしたい場合は、 :option:`--extension "
"<makemessages --extension>` か ``-e`` オプションを使って検査するファイル拡張"
"子を指定します:"

msgid ""
"Separate multiple extensions with commas and/or use ``-e`` or ``--"
"extension`` multiple times:"
msgstr ""
"複数の拡張子をカンマで区切るか、``-e`` または ``--extension`` を複数回使用し"
"てください:"

msgid ""
"When :ref:`creating message files from JavaScript source code <creating-"
"message-files-from-js-code>` you need to use the special ``djangojs`` "
"domain, **not** ``-e js``."
msgstr ""
":ref:`JavaScript のソースコードからメッセージファイルを作成する <creating-"
"message-files-from-js-code>` とき、 ``-e js`` **ではなく** 、特別な "
"``djangojs`` ドメインを使用する必要があります。"

msgid "Using Jinja2 templates?"
msgstr "Jinja2 テンプレートを使う？"

msgid ""
":djadmin:`makemessages` doesn't understand the syntax of Jinja2 templates. "
"To extract strings from a project containing Jinja2 templates, use `Message "
"Extracting`_ from Babel_ instead."
msgstr ""
":djadmin:`makemessages` はJinja2テンプレートの構文を理解しません。Jinja2テン"
"プレートを含むプロジェクトから文字列を抽出するには、代わりに Babel_ の "
"`Message Extracting`_ を使ってください。"

msgid "Here's an example ``babel.cfg`` configuration file:"
msgstr "以下は ``babel.cfg`` 設定ファイルの例です:"

msgid ""
"Make sure you list all extensions you're using! Otherwise Babel won't "
"recognize the tags defined by these extensions and will ignore Jinja2 "
"templates containing them entirely."
msgstr ""
"使用しているすべての拡張機能をリストアップしてください！そうしないと、Babel "
"はこれらの拡張機能によって定義されたタグを認識せず、それらを含む Jinja2 テン"
"プレートを完全に無視します。"

msgid ""
"Babel provides similar features to :djadmin:`makemessages`, can replace it "
"in general, and doesn't depend on ``gettext``. For more information, read "
"its documentation about `working with message catalogs`_."
msgstr ""
"Babel は :djadmin:`makemessages` と似たような機能を提供し、一般的に置き換える"
"ことができ、 ``gettext`` に依存しません。より詳しい情報は `メッセージカタログ"
"の操作`_ に関するドキュメントを参照してください。"

msgid "No gettext?"
msgstr "gettext がない？"

msgid ""
"If you don't have the ``gettext`` utilities installed, :djadmin:"
"`makemessages` will create empty files. If that's the case, either install "
"the ``gettext`` utilities or copy the English message file (``locale/en/"
"LC_MESSAGES/django.po``) if available and use it as a starting point, which "
"is an empty translation file."
msgstr ""
"``gettext`` ユーティリティがインストールされていない場合、 :djadmin:"
"`makemessages` は空のファイルを作成します。そのような場合は、 ``gettext`` "
"ユーティリティをインストールするか、英語のメッセージファイル (``locale/ja/"
"LC_MESSAGES/django.po``) があれば、それをコピーして、空の翻訳ファイルから始め"
"てください。"

msgid "Working on Windows?"
msgstr "Windows で動作する？"

msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`makemessages` works, see :ref:`gettext_on_windows` for more "
"information."
msgstr ""
"あなたが Windows を使っていて、:djadmin:`makemessages` が動作するように GNU "
"gettext ユーティリティをインストールする必要がある場合は、:ref:"
"`gettext_on_windows` で詳しい情報を参照してください。"

msgid ""
"Each ``.po`` file contains a small bit of metadata, such as the translation "
"maintainer's contact information, but the bulk of the file is a list of "
"**messages** -- mappings between translation strings and the actual "
"translated text for the particular language."
msgstr ""
"各 ``.po`` ファイルは、翻訳保守者の連絡先情報などのわずかなメタデータを含みま"
"すが、大部分は **メッセージ** のリストです。これは、特定の言語に対する、翻訳"
"文字列と実際の翻訳済みテキストのマッピングです。"

msgid ""
"For example, if your Django app contained a translation string for the text "
"``\"Welcome to my site.\"``, like so::"
msgstr ""
"例えば以下のように、Django アプリケーションが ``\"Welcome to my site.\"`` に"
"対する翻訳文字列を含んでいる場合、::"

msgid ""
"...then :djadmin:`django-admin makemessages <makemessages>` will have "
"created a ``.po`` file containing the following snippet -- a message:"
msgstr ""
"...それから :djadmin:`django-admin makemessages <makemessages>` は ``.po`` "
"ファイルを生成し、そのファイルは以下のようなスニペットを含みます -- メッセー"
"ジ:"

msgid "A quick explanation:"
msgstr "簡単に説明すると:"

msgid ""
"``msgid`` is the translation string, which appears in the source. Don't "
"change it."
msgstr "``msgid`` は翻訳文字列で、ソース内に存在します。変更しないでください。"

msgid ""
"``msgstr`` is where you put the language-specific translation. It starts out "
"empty, so it's your responsibility to change it. Make sure you keep the "
"quotes around your translation."
msgstr ""
"``msgstr`` はあなたが言語に対応する翻訳を記述する場所です。これは空の状態から"
"始まるので、変更するのはあなたの役割です。翻訳をクオートで囲むようにしてくだ"
"さい。"

msgid ""
"As a convenience, each message includes, in the form of a comment line "
"prefixed with ``#`` and located above the ``msgid`` line, the filename and "
"line number from which the translation string was gleaned."
msgstr ""
"利便性のため、各メッセージは、``#`` でプレフィックスされ ``msgid`` 行の直前に"
"位置するコメント行の形式の中に、翻訳文字列がどこから拾い集められたかを示す"
"ファイル名と行数を含みます。"

msgid ""
"Long messages are a special case. There, the first string directly after the "
"``msgstr`` (or ``msgid``) is an empty string. Then the content itself will "
"be written over the next few lines as one string per line. Those strings are "
"directly concatenated. Don't forget trailing spaces within the strings; "
"otherwise, they'll be tacked together without whitespace!"
msgstr ""
"長いメッセージは特殊なケースです。そこでは、``msgstr`` (もしくは ``msgid``) "
"直後の最初の文字列は空の文字列です。それからコンテンツ自身が行ごとに 1 つの文"
"字列として次の数行にわたって記述されます。これらの文字列は直接連結されます。"
"文字列内で最後のスペースを忘れないでください; さもなくば、空白スペースなしで"
"接合されることになります！"

msgid "Mind your charset"
msgstr "文字コードを気にしてください"

msgid ""
"Due to the way the ``gettext`` tools work internally and because we want to "
"allow non-ASCII source strings in Django's core and your applications, you "
"**must** use UTF-8 as the encoding for your ``.po`` files (the default when "
"``.po`` files are created).  This means that everybody will be using the "
"same encoding, which is important when Django processes the ``.po`` files."
msgstr ""
"``gettext`` ツールが内部的に動作する方法および非 ASCII ソースの文字列を "
"Django のコアとあなたのアプリケーション内で許容するために、 ``.po`` ファイル"
"に対するエンコーディングとして UTF-8 ( ``.po`` ファイルが生成される際のデフォ"
"ルトです) を **使わなければなりません**。これは、全員が同じエンコーディングを"
"使用することを意味し、Django が ``.po`` ファイルを処理する際に重要となりま"
"す。"

msgid "Fuzzy entries"
msgstr "Fuzzy（あいまいな）エントリー"

msgid ""
":djadmin:`makemessages` sometimes generates translation entries marked as "
"fuzzy, e.g. when translations are inferred from previously translated "
"strings. By default, fuzzy entries are **not** processed by :djadmin:"
"`compilemessages`."
msgstr ""
":djadmin:`makemessages` は翻訳が以前に翻訳された文字列から推測される場合など"
"に、あいまい (fuzzy) としてマークされた翻訳エントリーを生成することがありま"
"す。デフォルトでは、あいまいなエントリは :djadmin:`compilemessages` によって"
"処理されません。"

msgid ""
"To reexamine all source code and templates for new translation strings and "
"update all message files for **all** languages, run this:"
msgstr ""
"新しい翻訳文字列に対して全てのコードとテンプレートを再検査して **全ての** 言"
"語に対する全てのメッセージファイルを更新するには、以下を実行してください:"

msgid "Compiling message files"
msgstr "メッセージファイルをコンパイルする"

msgid ""
"After you create your message file -- and each time you make changes to it "
"-- you'll need to compile it into a more efficient form, for use by "
"``gettext``. Do this with the :djadmin:`django-admin compilemessages "
"<compilemessages>` utility."
msgstr ""
"メッセージファイルを作成した後 -- そして変更を加えたときそれぞれで -- "
"``gettext`` による使用のために、より効率的な形式にコンパイルする必要がありま"
"す。:djadmin:`django-admin compilemessages <compilemessages>` ユーティリティ"
"を利用してください。"

msgid ""
"This tool runs over all available ``.po`` files and creates ``.mo`` files, "
"which are binary files optimized for use by ``gettext``. In the same "
"directory from which you ran :djadmin:`django-admin makemessages "
"<makemessages>`, run :djadmin:`django-admin compilemessages "
"<compilemessages>` like this:"
msgstr ""
"このツールは、全ての有効な ``.po`` ファイルを通じて動作し、``.mo`` ファイルを"
"生成します。これは ``gettext`` による使用のために最適化されたバイナリファイル"
"です。:djadmin:`django-admin makemessages <makemessages>` を実行した同じディ"
"レクトリで、以下のように :djadmin:`django-admin compilemessages "
"<compilemessages>` を実行してください:"

msgid "That's it. Your translations are ready for use."
msgstr "これで終わりです。翻訳は使う準備ができました。"

msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`django-admin compilemessages <compilemessages>` works see :ref:"
"`gettext_on_windows` for more information."
msgstr ""
"あなたが Windows を使っていて、:djadmin:`django-admin compilemessages "
"<compilemessages>` が動作するように GNU gettext ユーティリティをインストール"
"する必要がある場合は、:ref:`gettext_on_windows` で詳しい情報を参照してくださ"
"い。"

msgid "``.po`` files: Encoding and BOM usage."
msgstr "``.po`` ファイル: エンコーディングと BOM の使用"

msgid ""
"Django only supports ``.po`` files encoded in UTF-8 and without any BOM "
"(Byte Order Mark) so if your text editor adds such marks to the beginning of "
"files by default then you will need to reconfigure it."
msgstr ""
"Django は、UTF-8 でエンコードされ BOM (Byte Order Mark) を持たない ``.po`` "
"ファイルのみをサポートします。そのため、テキストエディタがデフォルトでこれら"
"のマークをファイルの最初に追加した場合、再構成する必要があります。"

msgid ""
"Troubleshooting: ``gettext()`` incorrectly detects ``python-format`` in "
"strings with percent signs"
msgstr ""
"トラブルシューティング: ``gettext()`` がパーセント文字を伴う文字列内で "
"``python-format`` を誤って見つけてしまう"

msgid ""
"In some cases, such as strings with a percent sign followed by a space and "
"a :ref:`string conversion type <old-string-formatting>` (e.g. ``_(\"10% "
"interest\")``), :func:`~django.utils.translation.gettext` incorrectly flags "
"strings with ``python-format``."
msgstr ""
"例えば、パーセント記号に続いて空白と :ref:`文字列変換タイプ <old-string-"
"formatting>` がある文字列（例: ``_(\"10% interest\")``）などに、:func:"
"`~django.utils.translation.gettext` は誤って ``python-format`` で文字列をフラ"
"グ付けすることがあります。"

msgid ""
"If you try to compile message files with incorrectly flagged strings, you'll "
"get an error message like ``number of format specifications in 'msgid' and "
"'msgstr' does not match`` or ``'msgstr' is not a valid Python format string, "
"unlike 'msgid'``."
msgstr ""
"誤ってフラグが立てられた文字列でメッセージファイルをコンパイルしようとする"
"と、``number of format specifications in 'msgid' and 'msgstr' does not "
"match`` もしくは ``'msgstr' is not a valid Python format string, unlike "
"'msgid'``. といったエラーが発生します。"

msgid ""
"To workaround this, you can escape percent signs by adding a second percent "
"sign::"
msgstr "これを解決するには、パーセント文字を 2 つ重ねてエスケープします:"

msgid ""
"Or you can use ``no-python-format`` so that all percent signs are treated as "
"literals::"
msgstr ""
"もしくは ``no-python-format`` を使ってパーセント文字がリテラルとして扱われる"
"ようにします::"

msgid "Creating message files from JavaScript source code"
msgstr "JavaScript ソースコードからメッセージファイルを作成する"

msgid ""
"You create and update the message files the same way as the other Django "
"message files -- with the :djadmin:`django-admin makemessages "
"<makemessages>` tool. The only difference is you need to explicitly specify "
"what in gettext parlance is known as a domain in this case the ``djangojs`` "
"domain, by providing a ``-d djangojs`` parameter, like this:"
msgstr ""
"他の Django メッセージファイルと同じ方法で (:djadmin:`django-admin "
"makemessages <makemessages>` ツールを使って) 作成や更新を行います。唯一の違い"
"は、``-d djangojs`` パラメータを提供することによって、gettext 用語がドメイン"
"であること (このケースでは ``djangojs`` ドメイン) を、以下のように明示的に指"
"定する必要があることです:"

msgid ""
"This would create or update the message file for JavaScript for German. "
"After updating message files, run :djadmin:`django-admin compilemessages "
"<compilemessages>` the same way as you do with normal Django message files."
msgstr ""
"これは、ドイツ語に対して JavaScript 用のメッセージファイルを作成または更新し"
"ます。メッセージファイルの更新後、通常の Django ファイルと同様の方法で :"
"djadmin:`django-admin compilemessages <compilemessages>` を実行してください。"

msgid "``gettext`` on Windows"
msgstr "Windows での ``gettext``"

msgid ""
"This is only needed for people who either want to extract message IDs or "
"compile message files (``.po``). Translation work itself involves editing "
"existing files of this type, but if you want to create your own message "
"files, or want to test or compile a changed message file, download `a "
"precompiled binary installer <https://mlocati.github.io/articles/gettext-"
"iconv-windows.html>`_."
msgstr ""
"これはメッセージ ID を抽出したり、メッセージファイル(``.po``)をコンパイルした"
"い人だけが必要です。翻訳作業そのものは既存のこの種類のファイルを編集すること"
"になりますが、独自のメッセージファイルを作成したい場合や、変更したメッセージ"
"ファイルをテストしたりコンパイルしたりしたい場合は、 `コンパイル済みのバイナ"
"リインストーラ <https://mlocati.github.io/articles/gettext-iconv-windows."
"html>`_ をダウンロードしてください。"

msgid ""
"You may also use ``gettext`` binaries you have obtained elsewhere, so long "
"as the ``xgettext --version`` command works properly. Do not attempt to use "
"Django translation utilities with a ``gettext`` package if the command "
"``xgettext --version`` entered at a Windows command prompt causes a popup "
"window saying \"``xgettext.exe`` has generated errors and will be closed by "
"Windows\"."
msgstr ""
"``xgettext --version`` コマンドが正しく動作する限り、他の場所で入手した "
"``gettext`` バイナリを使うこともできます。Windows のコマンドプロンプトでコマ"
"ンド ``xgettext --version`` を入力すると、ポップアップウィンドウに "
"\"``xgettext.exe`` has generated errors and will be closed by Windows\" と表"
"示される場合は、 ``gettext`` パッケージを使って Django の翻訳ユーティリティを"
"使おうとしないでください。"

msgid "Customizing the ``makemessages`` command"
msgstr "``makemessages`` コマンドをカスタマイズする"

msgid ""
"If you want to pass additional parameters to ``xgettext``, you need to "
"create a custom :djadmin:`makemessages` command and override its "
"``xgettext_options`` attribute::"
msgstr ""
"``xgettext`` に追加のパラメータを渡したい場合、独自の :djadmin:"
"`makemessages` コマンドを作成して、その ``xgettext_options`` 属性をオーバーラ"
"イドする必要があります::"

msgid ""
"If you need more flexibility, you could also add a new argument to your "
"custom :djadmin:`makemessages` command::"
msgstr ""
"もっと柔軟に使う必要があるとき場合には、:djadmin:`makemessages` コマンドに新"
"しい引数を追加することもできます::"

msgid "Miscellaneous"
msgstr "その他"

msgid "The ``set_language`` redirect view"
msgstr "``set_language`` リダイレクトビュー"

msgid ""
"As a convenience, Django comes with a view, :func:`django.views.i18n."
"set_language`, that sets a user's language preference and redirects to a "
"given URL or, by default, back to the previous page."
msgstr ""
"利便性のために、 Django にはビュー :func:`django.views.i18n.set_language` が"
"付属しており、 ユーザの言語設定を行い、指定された URL にリダイレクトします。"
"デフォルトでは前のページに戻ります。"

msgid "Activate this view by adding the following line to your URLconf::"
msgstr "URLconfに以下の行を追加して、このビューを有効にします:"

msgid ""
"(Note that this example makes the view available at ``/i18n/setlang/``.)"
msgstr ""
"(この例では ``/i18n/setlang/`` でビューを利用できるようにしていることに注意し"
"てください)。"

msgid ""
"Make sure that you don't include the above URL within :func:`~django.conf."
"urls.i18n.i18n_patterns` - it needs to be language-independent itself to "
"work correctly."
msgstr ""
"上記の URL を :func:`~django.conf.urls.i18n.i18n_patterns` 内に含めないように"
"してください。正しく動作するためには、それ自身が言語に依存せず独立している必"
"要があります。"

msgid ""
"The view expects to be called via the ``POST`` method, with a ``language`` "
"parameter set in request. If session support is enabled, the view saves the "
"language choice in the user's session. It also saves the language choice in "
"a cookie that is named ``django_language`` by default. (The name can be "
"changed through the :setting:`LANGUAGE_COOKIE_NAME` setting.)"
msgstr ""
"このビューは ``POST`` メソッドで呼び出され、 ``language`` パラメータがリクエ"
"ストに設定されることを想定しています。セッションサポートが有効な場合、ビュー"
"は言語選択をユーザのセッションに保存します。また、デフォルトでは "
"``django_language`` という名前のクッキーにも言語選択を保存します。(この名前"
"は :setting:`LANGUAGE_COOKIE_NAME` 設定で変更できます)。"

msgid ""
"After setting the language choice, Django looks for a ``next`` parameter in "
"the ``POST`` or ``GET`` data. If that is found and Django considers it to be "
"a safe URL (i.e. it doesn't point to a different host and uses a safe "
"scheme), a redirect to that URL will be performed. Otherwise, Django may "
"fall back to redirecting the user to the URL from the ``Referer`` header or, "
"if it is not set, to ``/``, depending on the nature of the request:"
msgstr ""
"言語選択を設定した後、Django は ``POST`` または ``GET`` データの ``next`` パ"
"ラメータを探します。もしそれが見つかり、 Django が安全な URL (つまり、別のホ"
"ストを指しておらず、安全なスキームを使っている) と判断した場合、その URL への"
"リダイレクトが実行されます。そうでない場合、 Django はリクエストの性質に応じ"
"て、 ``Referer`` ヘッダの URL にリダイレクトしたり、ヘッダが設定されていない"
"場合は ``/`` にリダイレクトしたりします:"

msgid ""
"If the request accepts HTML content (based on its ``Accept`` HTTP header), "
"the fallback will always be performed."
msgstr ""
"リクエストが(``Accept`` HTTPヘッダに基づいて)HTMLコンテンツを受け入れる場合、"
"フォールバックは常に実行されます。"

msgid ""
"If the request doesn't accept HTML, the fallback will be performed only if "
"the ``next`` parameter was set. Otherwise a 204 status code (No Content) "
"will be returned."
msgstr ""
"リクエストがHTMLを受け付けない場合、 ``next`` パラメータが指定されている場合"
"のみフォールバックが実行されます。そうでない場合はステータスコード 204 (No "
"Content) が返されます。"

msgid "Here's example HTML template code:"
msgstr "以下はHTMLテンプレートコードの例です:"

msgid ""
"In this example, Django looks up the URL of the page to which the user will "
"be redirected in the ``redirect_to`` context variable."
msgstr ""
"この例では、 Django は ``redirect_to`` コンテキスト変数で、ユーザがリダイレク"
"トされるページの URL を調べます。"

msgid "Explicitly setting the active language"
msgstr "明示的にアクティブな言語をセットする"

msgid ""
"You may want to set the active language for the current session explicitly. "
"Perhaps a user's language preference is retrieved from another system, for "
"example. You've already been introduced to :func:`django.utils.translation."
"activate()`. That applies to the current thread only. To persist the "
"language for the entire session in a cookie, set the :setting:"
"`LANGUAGE_COOKIE_NAME` cookie on the response::"
msgstr ""
"明示的に、現在のセッションに対して、アクティブな言語をセットしたくなるかもし"
"れません。例えば、他のシステムを活用すれば、ユーザの言語設定を取得できます。:"
"func:`django.utils.translation.activate()` はすでに紹介済みですね。これは現在"
"のスレッドに対してのみ適用されます。セッション全体の言語をクッキーに恒久的に"
"保持するには、レスポンスに :setting:`LANGUAGE_COOKIE_NAME` クッキーを設定しま"
"す。"

msgid ""
"You would typically want to use both: :func:`django.utils.translation."
"activate()` changes the language for this thread, and setting the cookie "
"makes this preference persist in future requests."
msgstr ""
"通常、両方を使う必要があるでしょう: :func:`django.utils.translation."
"activate()` はこのスレッドに対して言語を変更します。そして、クッキーをセット"
"するとこの設定が将来のリクエストに恒久的に反映されます。"

msgid "Using translations outside views and templates"
msgstr "ビューやテンプレートの外で翻訳を使う"

msgid ""
"While Django provides a rich set of i18n tools for use in views and "
"templates, it does not restrict the usage to Django-specific code. The "
"Django translation mechanisms can be used to translate arbitrary texts to "
"any language that is supported by Django (as long as an appropriate "
"translation catalog exists, of course). You can load a translation catalog, "
"activate it and translate text to language of your choice, but remember to "
"switch back to original language, as activating a translation catalog is "
"done on per-thread basis and such change will affect code running in the "
"same thread."
msgstr ""
"Django はビューやテンプレートで使うための豊富な国際化ツールセットを提供してい"
"ますが、Django 固有のコードに使い方を限定しているわけではありません。Django "
"の翻訳システムを使えば、任意のテキストを Django がサポートしている任意の言語"
"に翻訳できます (もちろん、適切な翻訳カタログが存在する場合に限ります)。翻訳カ"
"タログを読み込んで有効にし、テキストを好きな言語に翻訳することも可能ですが、"
"元の言語に戻すことを忘れないでください。翻訳カタログの有効化はスレッド単位で"
"行われ、そのような変更は同じスレッドで実行されているコードに影響するからで"
"す。"

msgid ""
"Calling this function with the value ``'de'`` will give you "
"``\"Willkommen\"``, regardless of :setting:`LANGUAGE_CODE` and language set "
"by middleware."
msgstr ""
"この関数を ``'de'`` という値で呼び出すと、 :setting:`LANGUAGE_CODE` やミドル"
"ウェアで設定されている言語に関係なく、 ``\"Willkommen\"`` が返されます。"

msgid ""
"Functions of particular interest are :func:`django.utils.translation."
"get_language()` which returns the language used in the current thread, :func:"
"`django.utils.translation.activate()` which activates a translation catalog "
"for the current thread, and :func:`django.utils.translation."
"check_for_language()` which checks if the given language is supported by "
"Django."
msgstr ""
"特に注目すべき関数は、現在のスレッドで使われている言語を返す :func:`django."
"utils.translation.get_language()` 、現在のスレッドの翻訳カタログを有効にす"
"る :func:`django.utils.translation.activate()` 、与えられた言語が Django でサ"
"ポートされているかどうかをチェックする :func:`django.utils.translation."
"check_for_language()` です。"

msgid ""
"To help write more concise code, there is also a context manager :func:"
"`django.utils.translation.override()` that stores the current language on "
"enter and restores it on exit. With it, the above example becomes::"
msgstr ""
"より簡潔なコードを書くために、コンテキストマネージャ :func:`django.utils."
"translation.override()` も用意されています、これは実行時に現在の言語を保存"
"し、終了時にそれを復元します。これを使うと、上の例は次のようになります:"

msgid "Language cookie"
msgstr "言語クッキー"

msgid "A number of settings can be used to adjust language cookie options:"
msgstr "言語クッキーのオプションを調整するには、多くの設定が使用できます:"

msgid ":setting:`LANGUAGE_COOKIE_NAME`"
msgstr ":setting:`LANGUAGE_COOKIE_NAME`"

msgid ":setting:`LANGUAGE_COOKIE_AGE`"
msgstr ":setting:`LANGUAGE_COOKIE_AGE`"

msgid ":setting:`LANGUAGE_COOKIE_DOMAIN`"
msgstr ":setting:`LANGUAGE_COOKIE_DOMAIN`"

msgid ":setting:`LANGUAGE_COOKIE_HTTPONLY`"
msgstr ":setting:`LANGUAGE_COOKIE_HTTPONLY`"

msgid ":setting:`LANGUAGE_COOKIE_PATH`"
msgstr ":setting:`LANGUAGE_COOKIE_PATH`"

msgid ":setting:`LANGUAGE_COOKIE_SAMESITE`"
msgstr ":setting:`LANGUAGE_COOKIE_SAMESITE`"

msgid ":setting:`LANGUAGE_COOKIE_SECURE`"
msgstr ":setting:`LANGUAGE_COOKIE_SECURE`"

msgid "Implementation notes"
msgstr "実装時のためのノート"

msgid "Specialties of Django translation"
msgstr "Djangoの翻訳の特徴"

msgid ""
"Django's translation machinery uses the standard ``gettext`` module that "
"comes with Python. If you know ``gettext``, you might note these specialties "
"in the way Django does translation:"
msgstr ""
"Django の翻訳システムは Python に付属している標準の ``gettext`` モジュールを"
"使います。 ``gettext`` を知っていれば、Django が翻訳を行う方法について、以下"
"のような特徴があることに気づくかもしれません:"

msgid ""
"The string domain is ``django`` or ``djangojs``. This string domain is used "
"to differentiate between different programs that store their data in a "
"common message-file library (usually ``/usr/share/locale/``). The ``django`` "
"domain is used for Python and template translation strings and is loaded "
"into the global translation catalogs. The ``djangojs`` domain is only used "
"for JavaScript translation catalogs to make sure that those are as small as "
"possible."
msgstr ""
"文字列ドメインは ``django`` または ``djangojs`` です。この文字列ドメインは、"
"共通のメッセージファイルライブラリ (通常は ``/usr/share/locale/``) にデータを"
"保存する異なるプログラムを区別するために使用されます。 ``django`` ドメインは "
"Python とテンプレートの翻訳文字列に使われ、グローバル翻訳カタログに読み込まれ"
"ます。 ``djangojs`` ドメインはできるだけ小さくなるように、 JavaScript の翻訳"
"カタログにだけ使われます。"

msgid ""
"Django doesn't use ``xgettext`` alone. It uses Python wrappers around "
"``xgettext`` and ``msgfmt``. This is mostly for convenience."
msgstr ""
"Django は ``xgettext`` だけを使っているわけではありません。これは "
"``xgettext`` と ``msgfmt`` を Python でラップしたものです。これは主に利便性の"
"ためです。"

msgid "How Django discovers language preference"
msgstr "Django はどうやって言語の優先順位を検出するのか？"

msgid ""
"Once you've prepared your translations -- or, if you want to use the "
"translations that come with Django -- you'll need to activate translation "
"for your app."
msgstr ""
"翻訳を準備したら、あるいは Django に付属している翻訳を使いたい場合は、アプリ"
"の設定で翻訳を有効にする必要があります。"

msgid ""
"Behind the scenes, Django has a very flexible model of deciding which "
"language should be used -- installation-wide, for a particular user, or both."
msgstr ""
"Djangoは、インストール全体、特定のユーザー、またはその両方に対して、使用する"
"言語を決定する非常に柔軟なモデルを持っています。"

msgid ""
"To set an installation-wide language preference, set :setting:"
"`LANGUAGE_CODE`. Django uses this language as the default translation -- the "
"final attempt if no better matching translation is found through one of the "
"methods employed by the locale middleware (see below)."
msgstr ""
"インストール全体の優先言語を設定するには、 :setting:`LANGUAGE_CODE` を設定し"
"てください。Django はこの言語をデフォルトの翻訳として使います。ロケールミドル"
"ウェアが採用するメソッド (下記参照) を使って、より適切な翻訳が見つからなかっ"
"た場合の最終的な翻訳です。"

msgid ""
"If all you want is to run Django with your native language all you need to "
"do is set :setting:`LANGUAGE_CODE` and make sure the corresponding :term:"
"`message files <message file>` and their compiled versions (``.mo``) exist."
msgstr ""
"Django を母国語で動かしたいだけなら、 :setting:`LANGUAGE_CODE` を設定し、対応"
"する :term:`メッセージファイル <message file>` とそのコンパイルバージョン "
"(``.mo``) が存在することを確認するだけです。"

msgid ""
"If you want to let each individual user specify which language they prefer, "
"then you also need to use the ``LocaleMiddleware``. ``LocaleMiddleware`` "
"enables language selection based on data from the request. It customizes "
"content for each user."
msgstr ""
"各ユーザに好きな言語を指定させたい場合は、 ``LocaleMiddleware`` を使用する必"
"要があります。ロケール ミドルウェア ``LocaleMiddleware`` はリクエストのデータ"
"に基づいて言語を選択できるようにします。これは各ユーザのためにコンテンツをカ"
"スタマイズします。"

msgid ""
"To use ``LocaleMiddleware``, add ``'django.middleware.locale."
"LocaleMiddleware'`` to your :setting:`MIDDLEWARE` setting. Because "
"middleware order matters, follow these guidelines:"
msgstr ""
"``LocaleMiddleware`` を使うには、``django.middleware.locale."
"LocaleMiddleware'`` を :setting:`MIDDLEWARE` 設定に追加します。ミドルウェアの"
"順番は重要なので、以下のガイドラインに従ってください:"

msgid "Make sure it's one of the first middleware installed."
msgstr ""
"最初にインストールされるミドルウェアの1つであることを確認してください。"

msgid ""
"It should come after ``SessionMiddleware``, because ``LocaleMiddleware`` "
"makes use of session data. And it should come before ``CommonMiddleware`` "
"because ``CommonMiddleware`` needs an activated language in order to resolve "
"the requested URL."
msgstr ""
"なぜなら ``LocaleMiddleware`` はセッションデータを利用するからです。また、 "
"``CommonMiddleware`` はリクエストされたURLを解決するために有効な言語を必要と"
"するので、 ``CommonMiddleware`` の前に来る必要があります。"

msgid "If you use ``CacheMiddleware``, put ``LocaleMiddleware`` after it."
msgstr ""
"``CacheMiddleware`` を使用する場合は、その後ろに ``LocaleMiddleware`` を記述"
"してください。"

msgid "For example, your :setting:`MIDDLEWARE` might look like this::"
msgstr "たとえば、:setting:`MIDDLEWARE` は次のようになります:"

msgid ""
"(For more on middleware, see the :doc:`middleware documentation </topics/"
"http/middleware>`.)"
msgstr ""
"(ミドルウェアについては :doc:`ミドルウェアのドキュメント </topics/http/"
"middleware>` を参照してください)。"

msgid ""
"``LocaleMiddleware`` tries to determine the user's language preference by "
"following this algorithm:"
msgstr ""
"``LocaleMiddleware`` は以下のアルゴリズムに従ってユーザーの言語設定を決定しよ"
"うとします:"

msgid ""
"First, it looks for the language prefix in the requested URL.  This is only "
"performed when you are using the ``i18n_patterns`` function in your root "
"URLconf. See :ref:`url-internationalization` for more information about the "
"language prefix and how to internationalize URL patterns."
msgstr ""
"最初に、リクエストされたURLの言語プレフィックスを探します。 これはルートの "
"URLconf で ``i18n_patterns`` 関数を使用している場合にだけ実行されます。言語プ"
"レフィックスとURLパターンの国際化方法についての詳細は :ref:`url-"
"internationalization` を参照してください。"

msgid "Failing that, it looks for a cookie."
msgstr "それに失敗すれば、クッキーを探します。"

msgid ""
"The name of the cookie used is set by the :setting:`LANGUAGE_COOKIE_NAME` "
"setting. (The default name is ``django_language``.)"
msgstr ""
"使用されるクッキーの名前は :setting:`LANGUAGE_COOKIE_NAME` 設定によって設定さ"
"れます。(デフォルトの名前は ``django_language`` です)。"

msgid ""
"Failing that, it looks at the ``Accept-Language`` HTTP header. This header "
"is sent by your browser and tells the server which language(s) you prefer, "
"in order by priority. Django tries each language in the header until it "
"finds one with available translations."
msgstr ""
"それに失敗した場合は ``Accept-Language`` HTTPヘッダを調べます。このヘッダはブ"
"ラウザから送られ、サーバにどの言語を優先するのかを伝えます。Django は、翻訳可"
"能な言語が見つかるまで、ヘッダの各言語を試します。"

msgid "Failing that, it uses the global :setting:`LANGUAGE_CODE` setting."
msgstr ""
"それに失敗すると、グローバルな :setting:`LANGUAGE_CODE` 設定を使用します。"

msgid ""
"In each of these places, the language preference is expected to be in the "
"standard :term:`language format<language code>`, as a string. For example, "
"Brazilian Portuguese is ``pt-br``."
msgstr ""
"これらの場所では、言語設定は標準の :term:`言語コード <language code>` 文字列"
"で指定します。たとえば、ブラジルポルトガル語は ``pt-br`` です。"

msgid ""
"If a base language is available but the sublanguage specified is not, Django "
"uses the base language. For example, if a user specifies ``de-at`` (Austrian "
"German) but Django only has ``de`` available, Django uses ``de``."
msgstr ""
"ベース言語が利用可能で、指定されたサブ言語が利用できない場合、 Django はベー"
"ス言語を使います。たとえば、ユーザが ``de-at`` (オーストリアのドイツ語) を指"
"定したが、 Django には ``de`` しかない場合、 Django は ``de`` を使います。"

msgid ""
"Only languages listed in the :setting:`LANGUAGES` setting can be selected. "
"If you want to restrict the language selection to a subset of provided "
"languages (because your application doesn't provide all those languages), "
"set :setting:`LANGUAGES` to a list of languages. For example::"
msgstr ""
"選択できるのは :setting:`LANGUAGES` 設定にリストされている言語だけです。言語"
"選択を提供されている言語のサブセットに制限したい場合(アプリケーションがすべて"
"の言語を提供していないため)、 :setting:`LANGUAGES` に言語のリストを設定しま"
"す。たとえば、次のようにします："

msgid ""
"This example restricts languages that are available for automatic selection "
"to German and English (and any sublanguage, like ``de-ch`` or ``en-us``)."
msgstr ""
"この例では、自動選択できる言語をドイツ語と英語（および ``de-ch`` や ``en-"
"us`` のようなサブ言語）に制限しています。"

msgid ""
"If you define a custom :setting:`LANGUAGES` setting, as explained in the "
"previous bullet, you can mark the language names as translation strings -- "
"but use :func:`~django.utils.translation.gettext_lazy` instead of :func:"
"`~django.utils.translation.gettext` to avoid a circular import."
msgstr ""
"前の箇所で説明したように、カスタムの :setting:`LANGUAGES` 設定を定義すれば、"
"言語名を翻訳文字列としてマークできます。ただし、循環インポートを避けるため"
"に、 :func:`~django.utils.translation.gettext` の代わりに :func:`~django."
"utils.translation.gettext_lazy` を使ってください。"

msgid "Here's a sample settings file::"
msgstr "以下はサンプルの設定ファイルです::"

msgid ""
"Once ``LocaleMiddleware`` determines the user's preference, it makes this "
"preference available as ``request.LANGUAGE_CODE`` for each :class:`~django."
"http.HttpRequest`. Feel free to read this value in your view code. Here's an "
"example::"
msgstr ""
"``LocaleMiddleware`` がユーザの設定を決定すると、その設定を :class:`~django."
"http.HttpRequest` の ``request.LANGUAGE_CODE`` として利用できるようにします。"
"この値はビューのコードで自由に読み込むことができます。以下に例を示します:"

msgid ""
"Note that, with static (middleware-less) translation, the language is in "
"``settings.LANGUAGE_CODE``, while with dynamic (middleware) translation, "
"it's in ``request.LANGUAGE_CODE``."
msgstr ""
"静的な(ミドルウェアを使わない)翻訳では、言語は ``settings.LANGUAGE_CODE`` に"
"あり、動的な(ミドルウェアを使った)翻訳では ``request.LANGUAGE_CODE`` にあるこ"
"とに注意してください。"

msgid "How Django discovers translations"
msgstr "Djangoはどうやって翻訳を見つけるのか？"

msgid ""
"At runtime, Django builds an in-memory unified catalog of literals-"
"translations. To achieve this it looks for translations by following this "
"algorithm regarding the order in which it examines the different file paths "
"to load the compiled :term:`message files <message file>` (``.mo``) and the "
"precedence of multiple translations for the same literal:"
msgstr ""
"実行時に、 Django はリテラルと翻訳の統合カタログをメモリ内に構築します。これ"
"を実現するために、コンパイルされた :term:`メッセージファイル <message file>` "
"(``.mo``) を読み込むために異なるファイルパスを調べる順序と、同じリテラルに対"
"して複数の翻訳がある場合の優先順位について、以下のアルゴリズムに従って翻訳を"
"探します:"

msgid ""
"The directories listed in :setting:`LOCALE_PATHS` have the highest "
"precedence, with the ones appearing first having higher precedence than the "
"ones appearing later."
msgstr ""
":setting:`LOCALE_PATHS` に列挙されているディレクトリが最も優先され、最初に記"
"述されているものが後に記述されているものよりも優先されます。"

msgid ""
"Then, it looks for and uses if it exists a ``locale`` directory in each of "
"the installed apps listed in :setting:`INSTALLED_APPS`.  The ones appearing "
"first have higher precedence than the ones appearing later."
msgstr ""
"次に、 :setting:`INSTALLED_APPS` に列挙されている各インストール済みアプリの "
"``locale`` ディレクトリを探し、存在すればそれを使用します。 このとき、最初に"
"指定されたものが後に指定されたものよりも優先されます。"

msgid ""
"Finally, the Django-provided base translation in :source:`django/conf/"
"locale` is used as a fallback."
msgstr ""
"最後に、 :source:`django/conf/locale` にある Django が提供する基本翻訳が"
"フォールバックとして使われます。"

msgid ""
"The translations for literals included in JavaScript assets are looked up "
"following a similar but not identical algorithm. See :class:`."
"JavaScriptCatalog` for more details."
msgstr ""
"JavaScriptアセットに含まれるリテラルの翻訳は同じようなアルゴリズムで検索され"
"ますが、同じではありません。詳細は :class:`.JavaScriptCatalog` を参照してくだ"
"さい。"

msgid ""
"You can also put :ref:`custom format files <custom-format-files>` in the :"
"setting:`LOCALE_PATHS` directories if you also set :setting:"
"`FORMAT_MODULE_PATH`."
msgstr ""
"また、 :setting:`FORMAT_MODULE_PATH` を設定すれば、 :ref:`カスタムフォーマッ"
"トファイル <custom-format-files>` を :setting:`LOCALE_PATHS` ディレクトリに置"
"くこともできます。"

msgid ""
"In all cases the name of the directory containing the translation is "
"expected to be named using :term:`locale name` notation. E.g. ``de``, "
"``pt_BR``, ``es_AR``, etc. Untranslated strings for territorial language "
"variants use the translations of the generic language. For example, "
"untranslated ``pt_BR`` strings use ``pt`` translations."
msgstr ""
"すべての場合において、翻訳を含むディレクトリの名前は :term:`locale name` 表記"
"で指定します。例えば ``de``、``pt_BR``、``es_AR`` などです。地域言語バリアン"
"トの未翻訳の文字列は一般言語の翻訳を使用します。たとえば、未翻訳の ``pt_BR`` "
"文字列は ``pt`` の翻訳を使用します。"

msgid ""
"This way, you can write applications that include their own translations, "
"and you can override base translations in your project. Or, you can build a "
"big project out of several apps and put all translations into one big common "
"message file specific to the project you are composing. The choice is yours."
msgstr ""
"こうすることで、独自の翻訳を含むアプリケーションを書くことができ、プロジェク"
"トでベースとなる翻訳を上書きできます。あるいは、いくつかのアプリから大きなプ"
"ロジェクトを作り、すべての翻訳を、作成中のプロジェクトに特化した1つの大きな共"
"通メッセージファイルにまとめることもできます。選択肢はあなたの自由です。"

msgid "All message file repositories are structured the same way. They are:"
msgstr ""
"メッセージ・ファイルのリポジトリはすべて同じ構造になっています。それらは下記"
"のようなものです:"

msgid ""
"All paths listed in :setting:`LOCALE_PATHS` in your settings file are "
"searched for ``<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""
"設定ファイルの :setting:`LOCALE_PATHS` にリストされているすべてのパスは、"
"``<language>/LC_MESSAGES/django.(po|mo)`` で検索されます。"

msgid "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"

msgid ""
"``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""
"``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"

msgid ""
"To create message files, you use the :djadmin:`django-admin makemessages "
"<makemessages>` tool. And you use :djadmin:`django-admin compilemessages "
"<compilemessages>` to produce the binary ``.mo`` files that are used by "
"``gettext``."
msgstr ""
"メッセージファイルを作成するには :djadmin:`django-admin makemessages "
"<makemessages>` ツールを使用します。また、 :djadmin:`django-admin "
"compilemessages <compilemessages>` を使って、 ``gettext`` が使用するバイナリ"
"ファイル ``.mo`` を作成します。"

msgid ""
"You can also run :djadmin:`django-admin compilemessages --settings=path.to."
"settings <compilemessages>` to make the compiler process all the directories "
"in your :setting:`LOCALE_PATHS` setting."
msgstr ""
"また、 :djadmin:`django-admin compilemessages --settings=path.to.settings "
"<compilemessages>` を実行すると、コンパイラが :setting:`LOCALE_PATHS` 設定に"
"あるすべてのディレクトリを処理するようになります。"

msgid "Using a non-English base language"
msgstr "英語以外の言語をベース言語として使う"

msgid ""
"Django makes the general assumption that the original strings in a "
"translatable project are written in English. You can choose another "
"language, but you must be aware of certain limitations:"
msgstr ""
"Django は、翻訳可能なプロジェクト内の元の文字列は英語で書かれているという一般"
"的な前提に立っています。他の言語を選ぶこともできますが、ある制限に注意する必"
"要があります:"

msgid ""
"``gettext`` only provides two plural forms for the original messages, so you "
"will also need to provide a translation for the base language to include all "
"plural forms if the plural rules for the base language are different from "
"English."
msgstr ""
"``gettext`` はオリジナルのメッセージに対して2つの複数形しか提供しないので、も"
"しベース言語の複数形のルールが英語と異なる場合は、すべての複数形を含むように"
"ベース言語の翻訳も提供する必要があります。"

msgid ""
"When an English variant is activated and English strings are missing, the "
"fallback language will not be the :setting:`LANGUAGE_CODE` of the project, "
"but the original strings. For example, an English user visiting a site with :"
"setting:`LANGUAGE_CODE` set to Spanish and original strings written in "
"Russian will see Russian text rather than Spanish."
msgstr ""
"英語のバージョンが有効になっていて、英語の文字列がない場合、フォールバック言"
"語はプロジェクトの :setting:`LANGUAGE_CODE` ではなく、オリジナルの文字列にな"
"ります。たとえば、:setting:`LANGUAGE_CODE` がスペイン語に設定されていて、元の"
"文字列がロシア語で書かれているサイトを訪れた英語のユーザは、スペイン語ではな"
"くロシア語のテキストを見ることになります。"

msgid "Using Django"
msgstr "Django を使う"

msgid "Introductions to all the key parts of Django you'll need to know:"
msgstr ""
"このセクションでは、Django を使う上でキーとなるすべて要素について紹介します。"

msgid "How to install Django"
msgstr "Django のインストール方法"

msgid "This document will get you up and running with Django."
msgstr ""
"このドキュメントを読めば、Django をセットアップして、起動することができます。"

msgid "Install Python"
msgstr "Python をインストールする"

msgid ""
"Django is a Python web framework. See :ref:`faq-python-version-support` for "
"details."
msgstr ""
"Django は Python のウェブフレームワークです。詳しくは :ref:`faq-python-"
"version-support` を参照してください。"

msgid ""
"Get the latest version of Python at https://www.python.org/downloads/ or "
"with your operating system's package manager."
msgstr ""
"最新版のPythonを https://www.python.org/downloads/ もしくはOSのパッケージ管理"
"ツールで取得してください。"

msgid "Python on Windows"
msgstr "Windows にインストールする"

msgid ""
"If you are just starting with Django and using Windows, you may find :doc:`/"
"howto/windows` useful."
msgstr ""
"もし Windows を使っていてこれから Django を始めるなら、 :doc:`/howto/"
"windows` を読むとよいでしょう。"

msgid "Install Apache and ``mod_wsgi``"
msgstr "Apache と ``mod_wsgi`` のインストール"

msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight web server you can use for testing, so you "
"won't need to set up Apache until you're ready to deploy Django in "
"production."
msgstr ""
"もし単に Django を使って実験したいだけなら、このセクションは飛ばしてくださ"
"い。 Django には軽量 web サーバーが含まれており、テスト用にそれが使えます。本"
"番環境にデプロイするときまで、 Apache をセットアップする必要はありません。"

msgid ""
"If you want to use Django on a production site, use `Apache`_ with "
"`mod_wsgi`_. mod_wsgi operates in one of two modes: embedded mode or daemon "
"mode. In embedded mode, mod_wsgi is similar to mod_perl -- it embeds Python "
"within Apache and loads Python code into memory when the server starts. Code "
"stays in memory throughout the life of an Apache process, which leads to "
"significant performance gains over other server arrangements. In daemon "
"mode, mod_wsgi spawns an independent daemon process that handles requests. "
"The daemon process can run as a different user than the web server, possibly "
"leading to improved security. The daemon process can be restarted without "
"restarting the entire Apache web server, possibly making refreshing your "
"codebase more seamless. Consult the mod_wsgi documentation to determine "
"which mode is right for your setup. Make sure you have Apache installed with "
"the mod_wsgi module activated. Django will work with any version of Apache "
"that supports mod_wsgi."
msgstr ""
"本番サイトで Django を使用する場合は、`Apache`_ と `mod_wsgi`_ を使用します。"
"mod_wsgi は、埋め込みモードまたはデーモンモードの2つのモードのいずれかで動作"
"します。埋め込みモードでは、mod_wsgi は mod_perl と似ています。つまり Apache "
"に Python を埋め込み、サーバーの起動時に Python コードをメモリにロードしま"
"す。コードは Apache プロセスの存続期間中、メモリに残ります。これにより、他の"
"サーバー配置よりも大幅にパフォーマンスが向上します。デーモンモードでは、"
"mod_wsgi はリクエストを処理する独立したデーモンプロセスを生成します。デーモン"
"プロセスはウェブサーバーとは異なるユーザーとして実行できるため、セキュリティ"
"が向上する可能性があります。デーモンプロセスは、Apache ウェブサーバー全体を再"
"起動せずに再起動できるため、コードベースの更新がよりシームレスになります。"
"mod_wsgi のドキュメントを参照して、セットアップに適したモードを判断してくださ"
"い。mod_wsgi モジュールをアクティブにして Apache がインストールされていること"
"を確認してください。Django は、mod_wsgi をサポートするすべてのバージョンの "
"Apache で動作します。"

msgid ""
"See :doc:`How to use Django with mod_wsgi </howto/deployment/wsgi/modwsgi>` "
"for information on how to configure mod_wsgi once you have it installed."
msgstr ""
"インストール完了後の mod_wsgi の設定方法に関する情報については、:doc:`Django "
"を Apache と mod_swgi とともに使うには？ </howto/deployment/wsgi/modwsgi>` を"
"読んでください。"

msgid ""
"If you can't use mod_wsgi for some reason, fear not: Django supports many "
"other deployment options. One is :doc:`uWSGI </howto/deployment/wsgi/"
"uwsgi>`; it works very well with `nginx`_. Additionally, Django follows the "
"WSGI spec (:pep:`3333`), which allows it to run on a variety of server "
"platforms."
msgstr ""
"何らかの理由により mod_wsgi が使えなかったとしても、心配はいりません。Django "
"は他にもさまざまな開発オプションをサポートしています。そのうちの一つは :doc:"
"`uWSGI </howto/deployment/wsgi/uwsgi>` で、`nginx`_ と非常に上手く連携できま"
"す。さらに、Django は WSGI の仕様 (:pep:`3333`) を満たしているので、各種の"
"サーバープラットフォーム上で動作することが保証されています。"

msgid "Get your database running"
msgstr "データベースを動かす"

msgid ""
"If you plan to use Django's database API functionality, you'll need to make "
"sure a database server is running. Django supports many different database "
"servers and is officially supported with PostgreSQL_, MariaDB_, MySQL_, "
"Oracle_ and SQLite_."
msgstr ""
"DjangoのデータベースAPI機能を使用する場合は、データベースサーバーが実行されて"
"いることを確認する必要があります。Djangoは多くの異なるデータベースサーバーを"
"サポートし、PostgreSQL_、MariaDB_、MySQL_、Oracle_ および SQLite_ で公式にサ"
"ポートされています。"

msgid ""
"If you are developing a small project or something you don't plan to deploy "
"in a production environment, SQLite is generally the best option as it "
"doesn't require running a separate server. However, SQLite has many "
"differences from other databases, so if you are working on something "
"substantial, it's recommended to develop with the same database that you "
"plan on using in production."
msgstr ""
"もしあなたが開発しているプロジェクトが小規模なものか、あるいは本番環境にデプ"
"ロイしないプロジェクトなら、通常は SQLite が最もよい選択肢です。というのは、"
"SQLite 用にサーバーを動かす必要がないからです。しかし、SQLite は他のデータ"
"ベースと色々な点で異なります。そのため、もし何か重要なプロジェクトを作る場合"
"は、本番環境で使うデータベースと同じものを使うことを推奨します。"

msgid ""
"In addition to the officially supported databases, there are :ref:`backends "
"provided by 3rd parties <third-party-notes>` that allow you to use other "
"databases with Django."
msgstr ""
"公式にサポートされているデータベースの他に、 :ref:`サードパーティ製のバックエ"
"ンド <third-party-notes>` もあります（これらを使うと、他のデータベースを "
"Django から使えます）。"

msgid ""
"In addition to a database backend, you'll need to make sure your Python "
"database bindings are installed."
msgstr ""
"バックエンドに加えて、 Python のデータベースバインディングをインストールする"
"必要があります。"

msgid ""
"If you're using PostgreSQL, you'll need the `psycopg`_ or `psycopg2`_ "
"package. Refer to the :ref:`PostgreSQL notes <postgresql-notes>` for further "
"details."
msgstr ""
"もし PostgreSQL を使うなら、`psycopg`_ または `psycopg2`_ パッケージが必要に"
"なります。詳細は :ref:`PostgreSQL notes <postgresql-notes>` を見てください。"

msgid ""
"If you're using MySQL or MariaDB, you'll need a :ref:`DB API driver <mysql-"
"db-api-drivers>` like ``mysqlclient``. See :ref:`notes for the MySQL backend "
"<mysql-notes>` for details."
msgstr ""
"MySQL や MariaDB を使うなら、 ``mysqlclient`` のような :ref:`DB API ドライ"
"バー <mysql-db-api-drivers>` が必要になります。詳細は :ref:`MySQL バックエン"
"ドのためのメモ <mysql-notes>` を見てください。"

msgid ""
"If you're using SQLite you might want to read the :ref:`SQLite backend notes "
"<sqlite-notes>`."
msgstr ""
"SQLite を使うなら、 :ref:`SQLite backend notes <sqlite-notes>` を読むと良いで"
"しょう。"

msgid ""
"If you're using Oracle, you'll need to install oracledb_, but please read "
"the :ref:`notes for the Oracle backend <oracle-notes>` for details regarding "
"supported versions of both Oracle and ``oracledb``."
msgstr ""
"Oracleを使用している場合は、 oracledb_ をインストールする必要がありますが、サ"
"ポートされている Oracle と ``oracledb`` のバージョンの詳細については :ref:"
"`notes for the Oracle backend <oracle-notes>` を参照してください。"

msgid ""
"If you're using an unofficial 3rd party backend, please consult the "
"documentation provided for any additional requirements."
msgstr ""
"もし非公式のサードパーティ製バックエンドを使う場合、その他の動作要件について"
"はそのドキュメントを確認してください。"

msgid ""
"If you plan to use Django's ``manage.py migrate`` command to automatically "
"create database tables for your models (after first installing Django and "
"creating a project), you'll need to ensure that Django has permission to "
"create and alter tables in the database you're using; if you plan to "
"manually create the tables, you can grant Django ``SELECT``, ``INSERT``, "
"``UPDATE`` and ``DELETE`` permissions. After creating a database user with "
"these permissions, you'll specify the details in your project's settings "
"file, see :setting:`DATABASES` for details."
msgstr ""
"もし Django の ``manage.py migrate`` コマンドを使って自動的にデータベースの"
"テーブルを作る (Django のインストールとプロジェクト作成のあとに) つもりなら、"
"そのデータベースに対して Django が create table, alter table のパーミッション"
"を持つ必要があります。一方、手動でテーブルを作るつもりなら、 Django に対して "
"``SELECT``、``INSERT``、``UPDATE``、``DELETE`` のパーミッションを与えます。こ"
"れらのパーミッションを付与してデータベースユーザを作成したあと、プロジェクト"
"の設定ファイルで詳細を指定することになります。詳細については :setting:"
"`DATABASES` を見てください。"

msgid ""
"If you're using Django's :doc:`testing framework</topics/testing/index>` to "
"test database queries, Django will need permission to create a test database."
msgstr ""
"データベースのクエリをテストするために Django の :doc:`testing framework</"
"topics/testing/index>` を使う場合、テスト用データベースを作成するためのパー"
"ミッションが Django に必要です。"

msgid "Install the Django code"
msgstr "Django コードをインストールする"

msgid ""
"Installation instructions are slightly different depending on whether you're "
"installing a distribution-specific package, downloading the latest official "
"release, or fetching the latest development version."
msgstr ""
"インストール手順は特定ディストリビューションのパッケージ、最新公式リリースの"
"ダウンロード、最新の開発バージョンなど、インストール対象によって少し異なりま"
"す。"

msgid "Installing an official release with ``pip``"
msgstr "``pip`` を使用して公式リリースをインストールする"

msgid "This is the recommended way to install Django."
msgstr "これが Django をインストールするおすすめの方法です。"

msgid ""
"Install pip_. The easiest is to use the `standalone pip installer`_. If your "
"distribution already has ``pip`` installed, you might need to update it if "
"it's outdated. If it's outdated, you'll know because installation won't work."
msgstr ""
"pip_ をインストールします。最も簡単なのは、`スタンドアローンの pip インストー"
"ラー`_ を使う方法です。もしディストリビューションにすでにインストール済みの "
"``pip`` があり、バージョンが古い場合は、pip をアップデートする必要があるかも"
"しれません。古い場合は、インストールが機能しないためわかるはずです。"

msgid ""
"Take a look at :doc:`venv <python:tutorial/venv>`. This tool provides "
"isolated Python environments, which are more practical than installing "
"packages systemwide. It also allows installing packages without "
"administrator privileges. The :doc:`contributing tutorial </intro/"
"contributing>` walks through how to create a virtual environment."
msgstr ""
":doc:`venv <python:tutorial/venv>` を一読してください。このツールは隔離され"
"た Python 環境を提供します。隔離された環境は、システム全体にパッケージをイン"
"ストールするより実用的です。また、管理者権限なしでもパッケージをインストール"
"できます。:doc:`チュートリアルへの貢献 </intro/contributing>` は、仮想環境を"
"作成する方法について説明しています。"

msgid ""
"After you've created and activated a virtual environment, enter the command:"
msgstr "仮想環境を作成してアクティブ化したら、次のコマンドを入力します。"

msgid "Installing a distribution-specific package"
msgstr "特定ディストリビューション向けのパッケージをインストールする"

msgid ""
"Check the :doc:`distribution specific notes </misc/distributions>` to see if "
"your platform/distribution provides official Django packages/installers. "
"Distribution-provided packages will typically allow for automatic "
"installation of dependencies and supported upgrade paths; however, these "
"packages will rarely contain the latest release of Django."
msgstr ""
":doc:`ディストリビューション固有のメモ </misc/distributions>` を読み、プラッ"
"トフォームやディストリビューションが公式の Django パッケージやインストーラー"
"を提供しているかどうか確認してください。ディストリビューションが提供するパッ"
"ケージは、依存関係や対応アップグレードパスの自動インストールが可能になること"
"が多いですが、Django の最新リリースが含まれていることは稀です。"

msgid "Installing the development version"
msgstr "開発バージョンをインストールする"

msgid "Tracking Django development"
msgstr "Django の開発をトラッキングする"

msgid ""
"If you decide to use the latest development version of Django, you'll want "
"to pay close attention to `the development timeline`_, and you'll want to "
"keep an eye on the :ref:`release notes for the upcoming release "
"<development_release_notes>`. This will help you stay on top of any new "
"features you might want to use, as well as any changes you'll need to make "
"to your code when updating your copy of Django. (For stable releases, any "
"necessary changes are documented in the release notes.)"
msgstr ""
"最新の開発版の Django を使うことを決めた場合、`開発タイムライン`_ に十分注意"
"を払い、:ref:`次のリリースに向けたリリースノート "
"<development_release_notes>` を常に目を向けることをおすすめします。こうするこ"
"とで、使いたくなるかもしれない最新の新機能や、手元の Django のコピーを更新す"
"るときに変更する必要があるコードを追いかけるのに役立ちます。(安定リリースで"
"は、必要な変更の全てはリリースノートにドキュメントが書かれます。)"

msgid ""
"If you'd like to be able to update your Django code occasionally with the "
"latest bug fixes and improvements, follow these instructions:"
msgstr ""
"最新のバグ修正や改善を反映して、Django コードを定期的にアップデートできるよう"
"にしたい場合は、以下の指示に従ってください。"

msgid ""
"Make sure that you have Git_ installed and that you can run its commands "
"from a shell. (Enter ``git help`` at a shell prompt to test this.)"
msgstr ""
"Git_ がインストールされていて、シェルからコマンドを実行できることをを確認す"
"る。(これをテストするには、シェルのプロンプトに ``git help`` と入力します。)"

msgid "Check out Django's main development branch like so:"
msgstr "次のように、Django の main 開発ブランチをチェックアウトする。"

msgid "This will create a directory ``django`` in your current directory."
msgstr ""
"これにより、ディレクトリ ``django`` が現在のディレクトリ内に作成されます。"

msgid ""
"Make sure that the Python interpreter can load Django's code. The most "
"convenient way to do this is to use a virtual environment and pip_. The :doc:"
"`contributing tutorial </intro/contributing>` walks through how to create a "
"virtual environment."
msgstr ""
"Python インタープリタが Django のコードを読み込めることを確認する。これを行う"
"最も便利な方法は、仮想環境と pip_ を使用することです。:doc:`コントリビュー"
"ターのチュートリアル </intro/contributing>` では、仮想環境の作成方法を説明し"
"ています。"

msgid ""
"After setting up and activating the virtual environment, run the following "
"command:"
msgstr "セットアップして仮想環境を有効化した後、以下のコマンドを実行する。"

msgid ""
"This will make Django's code importable, and will also make the ``django-"
"admin`` utility command available. In other words, you're all set!"
msgstr ""
"これにより、Django のコードがインポート可能になり、``django-admin`` ユーティ"
"リティコマンドも利用できるようになります。言い換えれば、準備完了です！"

msgid ""
"When you want to update your copy of the Django source code, run the command "
"``git pull`` from within the ``django`` directory. When you do this, Git "
"will download any changes."
msgstr ""
"Django のソースコードのコピーをアップデートしたいときは、``django`` ディレク"
"トリ内で ``git pull`` コマンドを実行してください。これを行うと、Git はすべて"
"の変更をダウンロードします。"

msgid "Logging"
msgstr "ロギング"

msgid ":ref:`logging-how-to`"
msgstr ":ref:`logging-how-to`"

msgid ":ref:`Django logging reference <logging-ref>`"
msgstr ":ref:`Django ロギング リファレンス <logging-ref>`"

msgid ""
"Python programmers will often use ``print()`` in their code as a quick and "
"convenient debugging tool. Using the logging framework is only a little more "
"effort than that, but it's much more elegant and flexible. As well as being "
"useful for debugging, logging can also provide you with more - and better "
"structured - information about the state and health of your application."
msgstr ""
"Python プログラマは、素早く便利なデバッグツールとして、コード内で "
"``print()`` をよく使います。ロギングフレームワークを使用するのはわずかな手間"
"がかかるだけですが、それよりはるかにエレガントで柔軟です。デバッギングに便利"
"であることに加えて、ロギングは、アプリケーションの状態と健全性に対して、より"
"よく構造化されたより多くの情報も提供してくれます。"

msgid ""
"Django uses and extends Python's builtin :mod:`logging` module to perform "
"system logging. This module is discussed in detail in Python's own "
"documentation; this section provides a quick overview."
msgstr ""
"Django は、システムのロギングを実行するために、Python 組み込みの :mod:"
"`logging` モジュールを使用・拡張しています。このモジュールは、Python 自体のド"
"キュメントで詳細に解説されています。このセクションでは、簡単な概要を説明しま"
"す。"

msgid "The cast of players"
msgstr "登場人物"

msgid "A Python logging configuration consists of four parts:"
msgstr "Pythonのロギングは4つの部分で構成されます。"

msgid ":ref:`topic-logging-parts-loggers`"
msgstr ":ref:`topic-logging-parts-loggers`"

msgid ":ref:`topic-logging-parts-handlers`"
msgstr ":ref:`topic-logging-parts-handlers`"

msgid ":ref:`topic-logging-parts-filters`"
msgstr ":ref:`topic-logging-parts-filters`"

msgid ":ref:`topic-logging-parts-formatters`"
msgstr ":ref:`topic-logging-parts-formatters`"

msgid "Loggers"
msgstr "ロガー"

msgid ""
"A *logger* is the entry point into the logging system. Each logger is a "
"named bucket to which messages can be written for processing."
msgstr ""
"*ロガー* は、ロギングシステムのエントリーポイントです。各ロガーは処理が記述さ"
"れたメッセージの名前付けされたバケットです。"

msgid ""
"A logger is configured to have a *log level*. This log level describes the "
"severity of the messages that the logger will handle. Python defines the "
"following log levels:"
msgstr ""
"ロガーには *ログレベル* が設定されています。このログレベルはハンドリングされ"
"たログメッセージの深刻さを表しています。Pythonは下記のログレベルを定義してい"
"ます。"

msgid "``DEBUG``: Low level system information for debugging purposes"
msgstr "``DEBUG``: デバッグのための低レベルシステム情報"

msgid "``INFO``: General system information"
msgstr "``INFO``: 一般的なシステム情報"

msgid "``WARNING``: Information describing a minor problem that has occurred."
msgstr "``WARNING``: 重要度の小さい問題が発生したことを示す情報"

msgid "``ERROR``: Information describing a major problem that has occurred."
msgstr "``ERROR``: 大きな問題が発生したことを示す情報"

msgid ""
"``CRITICAL``: Information describing a critical problem that has occurred."
msgstr "``CRITICAL``: 重大な問題が発生したことを示す情報"

msgid ""
"Each message that is written to the logger is a *Log Record*. Each log "
"record also has a *log level* indicating the severity of that specific "
"message. A log record can also contain useful metadata that describes the "
"event that is being logged. This can include details such as a stack trace "
"or an error code."
msgstr ""
"ロガーに記載された各メッセージは *ログレコード* です。各ログレコードは、特定"
"のメッセージの重要性を表す *ログレベル* を持ちます。ログレコードには、記録さ"
"れたイベントを説明するメタデータを含むことができます。これには、スタックト"
"レースやエラーコードと言った詳細を含めることができます。"

msgid ""
"When a message is given to the logger, the log level of the message is "
"compared to the log level of the logger. If the log level of the message "
"meets or exceeds the log level of the logger itself, the message will "
"undergo further processing. If it doesn't, the message will be ignored."
msgstr ""
"ロガーにメッセージが渡されたとき、メッセージのログレベルはロガーのログレベル"
"と比較されます。メッセージのログレベルがロガー自体のログレベルと同等以上の場"
"合、メッセージは次の処理に進みます。それ以外の場合、メッセージは無視されま"
"す。"

msgid ""
"Once a logger has determined that a message needs to be processed, it is "
"passed to a *Handler*."
msgstr ""
"ロガーによってメッセージの処理が必要だと判断された場合、メッセージは *ハンド"
"ラ* に渡されます。"

msgid "Handlers"
msgstr "ハンドラ"

msgid ""
"The *handler* is the engine that determines what happens to each message in "
"a logger. It describes a particular logging behavior, such as writing a "
"message to the screen, to a file, or to a network socket."
msgstr ""
"*ハンドラ* は、ロガー上で書くメッセージに何をするかを決定するための原動力で"
"す。ここで、メッセージを表示する、ファイルに書き込む、ネットワークソケットに"
"送信する、といった特定のロギング動作を記述します。"

msgid ""
"Like loggers, handlers also have a log level. If the log level of a log "
"record doesn't meet or exceed the level of the handler, the handler will "
"ignore the message."
msgstr ""
"ロガーと同様に、ハンドラもログレベルを持ちます。ログレコードのログレベルがハ"
"ンドラのレベルに満たない場合、ハンドラはメッセージを無視します。"

msgid ""
"A logger can have multiple handlers, and each handler can have a different "
"log level. In this way, it is possible to provide different forms of "
"notification depending on the importance of a message. For example, you "
"could install one handler that forwards ``ERROR`` and ``CRITICAL`` messages "
"to a paging service, while a second handler logs all messages (including "
"``ERROR`` and ``CRITICAL`` messages) to a file for later analysis."
msgstr ""
"ロガーには複数のハンドラを設定でき、また各ハンドラは異なるログレベルを持つこ"
"とができます。この方法により、メッセージの重要性に応じて通知方法を変えること"
"ができます。たとえば、``ERROR`` と ``CRITICAL`` メッセージを呼び出しサービス"
"に転送するハンドラを設定する一方で、後で分析するために (``ERROR`` や "
"``CRITICAL`` も含む) すべてのメッセージをファイルに記録する 2 つめのハンドラ"
"を設定できます。"

msgid "Filters"
msgstr "フィルタ"

msgid ""
"A *filter* is used to provide additional control over which log records are "
"passed from logger to handler."
msgstr ""
"*フィルタ* は、どのログレコードがロガーからハンドラへ渡されるかについて、追加"
"的なコントロールを提供します。"

msgid ""
"By default, any log message that meets log level requirements will be "
"handled. However, by installing a filter, you can place additional criteria "
"on the logging process. For example, you could install a filter that only "
"allows ``ERROR`` messages from a particular source to be emitted."
msgstr ""
"デフォルトでは、ログレベル要件を満たしたすべてのログメッセージが処理されま"
"す。しかし、フィルタを使用することで、ロギングのプロセスに追加的な要件を設定"
"できます。たとえば、特定のソースからの ``ERROR`` のみを処理するようにフィルタ"
"を設定することができます。"

msgid ""
"Filters can also be used to modify the logging record prior to being "
"emitted. For example, you could write a filter that downgrades ``ERROR`` log "
"records to ``WARNING`` records if a particular set of criteria are met."
msgstr ""
"フィルタは、処理前にログレコードを修正するためにも使えます。たとえば、特定の"
"条件を満たした場合に ``ERROR`` ログレコードを ``WARNING`` レコードに格下げさ"
"せるようなフィルタを設定できます。"

msgid ""
"Filters can be installed on loggers or on handlers; multiple filters can be "
"used in a chain to perform multiple filtering actions."
msgstr ""
"フィルタは、ロガーもしくはハンドラに対して設定できます; 複数のフィルタを使っ"
"て複数のフィルタ動作を連鎖させることも可能です。"

msgid "Formatters"
msgstr "フォーマッタ"

msgid ""
"Ultimately, a log record needs to be rendered as text. *Formatters* describe "
"the exact format of that text. A formatter usually consists of a Python "
"formatting string containing :ref:`LogRecord attributes <python:logrecord-"
"attributes>`; however, you can also write custom formatters to implement "
"specific formatting behavior."
msgstr ""
"最終的には、ログレコードはテキストとして表現される必要があります。 *フォー"
"マッタ* はこのテキストの書式を定義します。フォーマッタは、通常は Python の文"
"字列フォーマットで、:ref:`LogRecord 属性<python:logrecord-attributes>` を含み"
"ます; しかし、特定の書式設定を行うような独自のフォーマッタを記述することもで"
"きます。"

msgid "Security implications"
msgstr "セキュリティへの影響"

msgid ""
"The logging system handles potentially sensitive information. For example, "
"the log record may contain information about a web request or a stack trace, "
"while some of the data you collect in your own loggers may also have "
"security implications. You need to be sure you know:"
msgstr ""
"ロギングシステムは潜在的にセンシティブな情報を取り扱うことになります。たとえ"
"ば、ログレコードにはウェブリクエストやスタックトレースに関する情報が含まれる"
"ことがありますが、ロガーで収集されたデータの一部にはセキュリティへの影響もあ"
"るかもしれません。あなたは次のことを理解しておく必要があります。"

msgid "what information is collected"
msgstr "どの情報を収集するか"

msgid "where it will subsequently be stored"
msgstr "最終的にその情報はどこに保存されることになるか"

msgid "how it will be transferred"
msgstr "その情報の転送はどのように行われるか"

msgid "who might have access to it."
msgstr "その情報にアクセスする可能性があるのは誰か"

msgid ""
"To help control the collection of sensitive information, you can explicitly "
"designate certain sensitive information to be filtered out of error reports "
"-- read more about how to :ref:`filter error reports <filtering-error-"
"reports>`."
msgstr ""
"センシティブな情報の収集をコントロールするために、特定のセンシティブな情報を"
"エラーレポートからフィルタリングするように明示的に指定できます。その方法につ"
"いては :ref:`エラーレポートをフィルタリングする <filtering-error-reports>` を"
"参照してください。"

msgid "``AdminEmailHandler``"
msgstr "``AdminEmailHandler``"

msgid ""
"The built-in :class:`~django.utils.log.AdminEmailHandler` deserves a mention "
"in the context of security. If its ``include_html`` option is enabled, the "
"email message it sends will contain a full traceback, with names and values "
"of local variables at each level of the stack, plus the values of your "
"Django settings (in other words, the same level of detail that is exposed in "
"a web page when :setting:`DEBUG` is ``True``)."
msgstr ""
"組み込みの :class:`~django.utils.log.AdminEmailHandler` はセキュリティの文脈"
"で言及に値します。もし ``include_html`` オプションが有効なら、送信するメール"
"には、スタックの各レベルのローカル変数の名前と値、そして Django の設定値（言"
"い換えれば、 :setting:`DEBUG` が ``True`` のときに Web ページで公開されるのと"
"同じレベルの詳細）が完全なトレースバックとして含まれます。"

msgid ""
"It's generally not considered a good idea to send such potentially sensitive "
"information over email. Consider instead using one of the many third-party "
"services to which detailed logs can be sent to get the best of multiple "
"worlds -- the rich information of full tracebacks, clear management of who "
"is notified and has access to the information, and so on."
msgstr ""
"通常、このような潜在的にセンシティブな情報を電子メールで送信するのは良くない"
"とされています。その代わりに、詳細なログを送信できる多くのサードパーティ・"
"サービスを利用することで、完全なトレースバックによる豊富な情報、通知先や情報"
"へのアクセス権の明確な管理など、複数の利点が得られます。"

msgid "Configuring logging"
msgstr "ロギングを設定する"

msgid ""
"Python's logging library provides several techniques to configure logging, "
"ranging from a programmatic interface to configuration files. By default, "
"Django uses the :ref:`dictConfig format <logging-config-dictschema>`."
msgstr ""
"Python のロギングライブラリは、実用的なインターフェースから設定ファイルまで、"
"ロギング設定のテクニックを提供しています。デフォルトでは、Django は :ref:"
"`dictConfig フォーマット <logging-config-dictschema>` を使用します。"

msgid ""
"In order to configure logging, you use :setting:`LOGGING` to define a "
"dictionary of logging settings. These settings describe the loggers, "
"handlers, filters and formatters that you want in your logging setup, and "
"the log levels and other properties that you want those components to have."
msgstr ""
"ロギングを設定するためには、:setting:`LOGGING` を使用してロギング設定の辞書を"
"定義します。この設定には、ロギングセットアップで使いたいロガー、ハンドラ、"
"フィルタ、フォーマッタを記述し、それらのコンポーネントで使用したいログレベル"
"とその他のプロパティを記述します。"

msgid ""
"By default, the :setting:`LOGGING` setting is merged with :ref:`Django's "
"default logging configuration <default-logging-configuration>` using the "
"following scheme."
msgstr ""
"デフォルトでは、:setting:`LOGGING` 設定は、以下のスキームを使って :ref:"
"`Django のデフォルトロギング設定 <default-logging-configuration>` に統合され"
"ています。"

msgid ""
"If the ``disable_existing_loggers`` key in the :setting:`LOGGING` dictConfig "
"is set to ``True`` (which is the ``dictConfig`` default if the key is "
"missing) then all loggers from the default configuration will be disabled. "
"Disabled loggers are not the same as removed; the logger will still exist, "
"but will silently discard anything logged to it, not even propagating "
"entries to a parent logger. Thus you should be very careful using "
"``'disable_existing_loggers': True``; it's probably not what you want. "
"Instead, you can set ``disable_existing_loggers`` to ``False`` and redefine "
"some or all of the default loggers; or you can set :setting:`LOGGING_CONFIG` "
"to ``None`` and :ref:`handle logging config yourself <disabling-logging-"
"configuration>`."
msgstr ""
":setting:`LOGGING` の ``disable_existing_loggers`` キーの値を ``True`` にする"
"と、全てのデフォルトの設定が無効になります（キーが存在しない場合は "
"``dictConfig`` のデフォルトになります）。このため、 "
"``'disable_existing_loggers': True`` を使う場合は注意してください。 ``True`` "
"を設定する必要は殆どないでしょう。 ``disable_existing_loggers`` を ``False`` "
"に設定して、デフォルトのロガーの一部、または全てを定義しなおすこともできま"
"す。あるいは、 :setting:`LOGGING_CONFIG` を ``None`` に設定して、 :ref:`ロギ"
"ングの設定を自分で行うこと<disabling-logging-configuration>` も出来ます。"

msgid ""
"Logging is configured as part of the general Django ``setup()`` function. "
"Therefore, you can be certain that loggers are always ready for use in your "
"project code."
msgstr ""
"ロギングは、一般的な Django の ``setup()`` 関数の一部として設定されます。した"
"がって、ロガーが常にプロジェクトコード内で使用準備ができていることが保証され"
"ています。"

msgid ""
"The full documentation for :ref:`dictConfig format <logging-config-"
"dictschema>` is the best source of information about logging configuration "
"dictionaries. However, to give you a taste of what is possible, here are "
"several examples."
msgstr ""
":ref:`dictConfig フォーマット <logging-config-dictschema>` に関する完全なド"
"キュメントが、ロギング設定ディクショナリの最高の教材です。とはいえ、どんなこ"
"とが可能なのか知ってもらうため、以下にいくつかの例を示します。"

msgid ""
"To begin, here's a small configuration that will allow you to output all log "
"messages to the console:"
msgstr ""
"最初に、全てのログメッセージをコンソールに出力するための最低限の設定がこちら"
"です。"

msgid ""
"This configures the parent ``root`` logger to send messages with the "
"``WARNING`` level and higher to the console handler. By adjusting the level "
"to ``INFO`` or ``DEBUG`` you can display more messages. This may be useful "
"during development."
msgstr ""
"この設定では、 ``root`` という名前の親のロガーがあり、 ``WARNING`` レベル以上"
"のメッセージを受け取ったら、 console ハンドラに送るようになっています。 "
"level を ``INFO`` または ``DEBUG`` にすると、より詳細なメッセージも表示される"
"ようになります。この設定は開発中に役に立ちます。"

msgid ""
"Next we can add more fine-grained logging. Here's an example of how to make "
"the logging system print more messages from just the :ref:`django-logger` "
"named logger:"
msgstr ""
"次に、より詳細なロギングを追加します。次の例は、ロギングシステムが :ref:"
"`django-logger` という名前のロガーからより多くのメッセージを出力するようにす"
"る方法を示しています。"

msgid ""
"By default, this config sends messages from the ``django`` logger of level "
"``INFO`` or higher to the console. This is the same level as Django's "
"default logging config, except that the default config only displays log "
"records when ``DEBUG=True``. Django does not log many such ``INFO`` level "
"messages. With this config, however, you can also set the environment "
"variable ``DJANGO_LOG_LEVEL=DEBUG`` to see all of Django's debug logging "
"which is very verbose as it includes all database queries."
msgstr ""
"デフォルトでは、この設定は、``INFO`` 以上のメッセージを ``django`` ロガーから"
"コンソールに送信します。このレベルは、デフォルト設定ではログレコードを表示す"
"るのが ``DEBUG=True`` のときだけであること以外、Django のデフォルトのロギング"
"設定と同じです。Django はそのような ``INFO`` レベルのログはそこまで多くログ出"
"力しません。しかし、この設定では、環境変数 ``DJANGO_LOG_LEVEL=DEBUG`` を設定"
"することで、Django のすべての debug ログを表示できます。これにはすべてのデー"
"タベースクエリが含まれるため、非常に冗長です。"

msgid ""
"You don't have to log to the console. Here's a configuration which writes "
"all logging from the :ref:`django-logger` named logger to a local file:"
msgstr ""
"必ずしもコンソールに出力する必要はありません。:ref:`django-logger` という名前"
"のロガーをファイルに書き込むには、次のように設定します。"

msgid ""
"If you use this example, be sure to change the ``'filename'`` path to a "
"location that's writable by the user that's running the Django application."
msgstr ""
"この例を使用するときは、``'filename'`` のパスを Django アプリケーションを実行"
"しているユーザーが書き込み可能な場所に変更してください。"

msgid "Finally, here's an example of a fairly complex logging setup:"
msgstr "最後に、かなり複雑なロギングの設定の例です。"

msgid "This logging configuration does the following things:"
msgstr "このロギング設定は、以下のことを行います:"

msgid ""
"Identifies the configuration as being in 'dictConfig version 1' format. At "
"present, this is the only dictConfig format version."
msgstr ""
"設定が「dictConfig バージョン 1」形式であることを明示します。 現在、これが唯"
"一の dictConfig 形式のバージョンです。"

msgid "Defines two formatters:"
msgstr "2 つのフォーマッタを定義します:"

msgid ""
"``simple``, that outputs the log level name (e.g., ``DEBUG``) and the log "
"message."
msgstr ""
"``simple`` は、ログレベル名 (例: ``DEBUG``) とログメッセージを出力します。"

msgid ""
"The ``format`` string is a normal Python formatting string describing the "
"details that are to be output on each logging line. The full list of detail "
"that can be output can be found in :ref:`formatter-objects`."
msgstr ""
"この ``format`` 文字列は標準の Python 文字列フォーマットで、各ログ行で出力さ"
"れる詳細を定義します。出力可能な詳細の全リストは :ref:`formatter-objects` で"
"確認できます。"

msgid ""
"``verbose``, that outputs the log level name, the log message, plus the "
"time, process, thread and module that generate the log message."
msgstr ""
"``verbose`` は、ログレベルの名称とログメッセージに加えて、時刻、プロセス、ス"
"レッド、ログメッセージを生成したモジュールを出力します。"

msgid "Defines two filters:"
msgstr "2 つのフィルタを定義します:"

msgid ""
"``project.logging.SpecialFilter``, using the alias ``special``. If this "
"filter required additional arguments, they can be provided as additional "
"keys in the filter configuration dictionary. In this case, the argument "
"``foo`` will be given a value of ``bar`` when instantiating "
"``SpecialFilter``."
msgstr ""
"``project.logging.SpecialFilter`` は、エイリアス ``special`` を使っています。"
"もしこのフィルタが追加の引数を必要とする場合、フィルタ設定の辞書に追加のキー"
"として提供できます。今回の場合、``SpecialFilter`` をインスタンス化するとき"
"に、引数 ``foo`` に ``bar`` の値が与えられます。"

msgid ""
"``django.utils.log.RequireDebugTrue``, which passes on records when :setting:"
"`DEBUG` is ``True``."
msgstr ""
"``django.utils.log.RequireDebugTrue`` は、:setting:`DEBUG` が ``True`` のとき"
"にレコードの処理を進めます。"

msgid "Defines two handlers:"
msgstr "2 つのハンドラを定義します:"

msgid ""
"``console``, a :class:`~logging.StreamHandler`, which prints any ``INFO`` "
"(or higher) message to ``sys.stderr``. This handler uses the ``simple`` "
"output format."
msgstr ""
"``console`` は、すべての ``INFO`` 以上のメッセージを ``sys.stderr`` に表示 "
"(print) する :class:`~logging.StreamHandler` クラスです。このハンドラは "
"``simple`` 出力フォーマットを使用します。"

msgid ""
"``mail_admins``, an :class:`~django.utils.log.AdminEmailHandler`, which "
"emails any ``ERROR`` (or higher) message to the site :setting:`ADMINS`. This "
"handler uses the ``special`` filter."
msgstr ""
"``mail_admins`` は、``ERROR`` (またはそれより上) のすべてのメッセージをサイト"
"の :setting:`ADMINS` にメール送信する :class:`~django.utils.log."
"AdminEmailHandler` クラスです。このハンドラは ``special`` フィルタを使用しま"
"す。"

msgid "Configures three loggers:"
msgstr "3 つのロガーを設定します:"

msgid "``django``, which passes all messages to the ``console`` handler."
msgstr "``django`` は、すべてのメッセージを ``console`` ハンドラに渡します。"

msgid ""
"``django.request``, which passes all ``ERROR`` messages to the "
"``mail_admins`` handler. In addition, this logger is marked to *not* "
"propagate messages. This means that log messages written to ``django."
"request`` will not be handled by the ``django`` logger."
msgstr ""
"``django.request`` は、すべての ``ERROR`` メッセージを ``mail_admins`` ハンド"
"ラに渡します。加えて、このロガーはメッセージを親に *伝えない* よう設定されて"
"います。これは、``django.request`` 内に記述されたログメッセージは ``django`` "
"ロガーで処理されないことを意味します。"

msgid ""
"``myproject.custom``, which passes all messages at ``INFO`` or higher that "
"also pass the ``special`` filter to two handlers -- the ``console``, and "
"``mail_admins``. This means that all ``INFO`` level messages (or higher) "
"will be printed to the console; ``ERROR`` and ``CRITICAL`` messages will "
"also be output via email."
msgstr ""
"``myproject.custom`` は ``INFO`` もしくはそれ以上のすべてのメッセージを渡し、"
"``special`` フィルタを 2 つのハンドラに引き渡します -- ``console`` と "
"``mail_admins`` です。これは、``INFO`` 以上のレベルのメッセージがコンソールで"
"表示され、さらに ``ERROR`` と ``CRITICAL`` のメッセージはメールでも出力される"
"ことを意味します。"

msgid "Custom logging configuration"
msgstr "カスタムのロギング設定"

msgid ""
"If you don't want to use Python's dictConfig format to configure your "
"logger, you can specify your own configuration scheme."
msgstr ""
"ロガーの設定に Python の dictConfig フォーマットを使用したくない場合は、あな"
"た自身の設定スキームを定義できます。"

msgid ""
"The :setting:`LOGGING_CONFIG` setting defines the callable that will be used "
"to configure Django's loggers. By default, it points at Python's :func:"
"`logging.config.dictConfig()` function. However, if you want to use a "
"different configuration process, you can use any other callable that takes a "
"single argument. The contents of :setting:`LOGGING` will be provided as the "
"value of that argument when logging is configured."
msgstr ""
":setting:`LOGGING_CONFIG` 設定は、Django のロガーを設定するために使われる呼び"
"出し可能関数を定義します。デフォルトでは、Python の :func:`logging.config."
"dictConfig()` 関数を指します。しかし、異なる設定処理を使いたい場合は、他の引"
"数を1つ取る任意の呼び出し可能関数を使用できます。:setting:`LOGGING` のコンテ"
"ンツは、ロギング設定時に引数の値として提供されます。"

msgid "Disabling logging configuration"
msgstr "ロギング設定を無効化する"

msgid ""
"If you don't want to configure logging at all (or you want to manually "
"configure logging using your own approach), you can set :setting:"
"`LOGGING_CONFIG` to ``None``. This will disable the configuration process "
"for :ref:`Django's default logging <default-logging-configuration>`."
msgstr ""
"ロギングを全く設定したくない (あるいは、自分のやり方でロギング手動で設定した"
"い) なら、 :setting:`LOGGING_CONFIG` を ``None`` に設定することもできます。こ"
"れにより、:ref:`Django のデフォルトのロギング設定<default-logging-"
"configuration>` を無効化できます。"

msgid ""
"Setting :setting:`LOGGING_CONFIG` to ``None`` only means that the automatic "
"configuration process is disabled, not logging itself. If you disable the "
"configuration process, Django will still make logging calls, falling back to "
"whatever default logging behavior is defined."
msgstr ""
":setting:`LOGGING_CONFIG` を ``None`` に設定すると、自動でロギングの設定が行"
"われなくなるだけです。ロギング自体が使えなくなるわけではありません。自動での"
"ロギング設定を無効化しても、Django はロギングのメソッドを呼び、もしログ設定が"
"されていれば、そこに出力されます。"

msgid ""
"Here's an example that disables Django's logging configuration and then "
"manually configures logging:"
msgstr ""
"Django の自動でのロギング設定を無効化し、手動で設定する場合はこのようにしま"
"す。"

msgid ""
"Note that the default configuration process only calls :setting:"
"`LOGGING_CONFIG` once settings are fully-loaded. In contrast, manually "
"configuring the logging in your settings file will load your logging config "
"immediately. As such, your logging config must appear *after* any settings "
"on which it depends."
msgstr ""
"デフォルトの設定処理は、設定が完全にロードされた後にのみ :setting:"
"`LOGGING_CONFIG` を呼ばないことに注意してください。対照的に、設定ファイル内で"
"手動で設定するロギングは、ロギング設定を直ちにロードします。そのため、ロギン"
"グ設定は、必ずロギングが依存しているすべての設定の *後に* 書く必要がありま"
"す。"

msgid "Migrations"
msgstr "マイグレーション"

msgid ""
"Migrations are Django's way of propagating changes you make to your models "
"(adding a field, deleting a model, etc.) into your database schema. They're "
"designed to be mostly automatic, but you'll need to know when to make "
"migrations, when to run them, and the common problems you might run into."
msgstr ""
"マイグレーション (Migrations) は、Django でモデルに対して行った変更 (フィール"
"ドの追加やモデルの削除など) をデータベーススキーマに反映させる方法です。大抵"
"のマイグレーションは自動で行われるものの、いつマイグレーションが作られ、いつ"
"実行され、どんな問題がよく起こるのかは、知っておいた方がいいでしょう。"

msgid "The Commands"
msgstr "コマンド"

msgid ""
"There are several commands which you will use to interact with migrations "
"and Django's handling of database schema:"
msgstr ""
"マイグレーションと Django のデータベーススキーマの操作に関わる時によく使うコ"
"マンドを、いくつか挙げておきましょう。"

msgid ""
":djadmin:`migrate`, which is responsible for applying and unapplying "
"migrations."
msgstr ""
":djadmin:`migrate` は、マイグレーションを適用したり、適用をキャンセルするのに"
"使います。"

msgid ""
":djadmin:`makemigrations`, which is responsible for creating new migrations "
"based on the changes you have made to your models."
msgstr ""
":djadmin:`makemigrations` は、モデルに対して行った変更をもとに、新しいマイグ"
"レーションを作成します。"

msgid ""
":djadmin:`sqlmigrate`, which displays the SQL statements for a migration."
msgstr ""
":djadmin:`sqlmigrate` は、マイグレーションに対応する SQL 文を表示します。"

msgid ""
":djadmin:`showmigrations`, which lists a project's migrations and their "
"status."
msgstr ""
":djadmin:`showmigrations` は、プロジェクトのマイグレーションとそのステータス"
"をリストします。"

msgid ""
"You should think of migrations as a version control system for your database "
"schema. ``makemigrations`` is responsible for packaging up your model "
"changes into individual migration files - analogous to commits - and "
"``migrate`` is responsible for applying those to your database."
msgstr ""
"マイグレーションというのは、データベーススキーマに対するバージョン管理システ"
"ムのようなものです。``makemigrations`` はモデルの変更点を1つのマイグレーショ"
"ンファイルにパッケージングし(コミットのようなものです)、``migrate`` はその変"
"更点をデータベースに適用する、というわけです。"

msgid ""
"The migration files for each app live in a \"migrations\" directory inside "
"of that app, and are designed to be committed to, and distributed as part "
"of, its codebase. You should be making them once on your development machine "
"and then running the same migrations on your colleagues' machines, your "
"staging machines, and eventually your production machines."
msgstr ""
"各アプリのマイグレーションファイルはそのアプリの \"migrations\" ディレクトリ"
"の中に保管され、コードベースの一部としてコミットされ、配布されるようにデザイ"
"ンされています。いったん開発用マシンでマイグレーションファイルが作成されれ"
"ば、その後、チームメンバーのマシンやステージング環境のマシン上で同一のマイグ"
"レーションが行われ、最終的にプロダクション環境でも同じマイグレーションが行わ"
"れます。"

msgid ""
"It is possible to override the name of the package which contains the "
"migrations on a per-app basis by modifying the :setting:`MIGRATION_MODULES` "
"setting."
msgstr ""
"アプリのパッケージの名に migrations が含まれ、上書きされてしまう場合には、設"
"定ファイルの :setting:`MIGRATION_MODULES` を修正してください。"

msgid ""
"Migrations will run the same way on the same dataset and produce consistent "
"results, meaning that what you see in development and staging is, under the "
"same circumstances, exactly what will happen in production."
msgstr ""
"マイグレーションが同じデータセットに同じ方法で実行され、一貫した結果を生み出"
"すということは、開発環境やステージング環境下で目にする結果が、プロダクション"
"環境下でも全く同じになるということです。"

msgid ""
"Django will make migrations for any change to your models or fields - even "
"options that don't affect the database - as the only way it can reconstruct "
"a field correctly is to have all the changes in the history, and you might "
"need those options in some data migrations later on (for example, if you've "
"set custom validators)."
msgstr ""
"Django は、モデルやフィールドに変更があった場合、たとえデータベースに影響を与"
"えないオプションであっても、マイグレーションを行います。フィールドを正しく再"
"構築する唯一の方法は、すべての変更が履歴に残っていることであり、後々のデータ"
"マイグレーションで、これらのオプションが必要になるかもしれないからです (たと"
"えば、カスタムバリデータを設定した場合など)。"

msgid "Backend Support"
msgstr "対応するバックエンド"

msgid ""
"Migrations are supported on all backends that Django ships with, as well as "
"any third-party backends if they have programmed in support for schema "
"alteration (done via the :doc:`SchemaEditor </ref/schema-editor>` class)."
msgstr ""
"マイグレーションは Django で標準で利用できるすべてのバックエンドに対応してい"
"ます。サードパーティ製のバックエンドでも、プログラムからのスキーマの変更の操"
"作(:doc:`SchemaEditor </ref/schema-editor>` クラスで実行される)に対応していれ"
"ば大丈夫です。"

msgid ""
"However, some databases are more capable than others when it comes to schema "
"migrations; some of the caveats are covered below."
msgstr ""
"しかし、スキーマのマイグレーションは、データベースによってが得手・不得手があ"
"ります。注意点を以下で説明します。"

msgid ""
"PostgreSQL is the most capable of all the databases here in terms of schema "
"support."
msgstr ""
"PostgreSQLはスキーマのサポートという点で、ここにあるすべてのデータベースの中"
"で最も有能です。"

msgid "MySQL"
msgstr "MySQL"

msgid ""
"MySQL lacks support for transactions around schema alteration operations, "
"meaning that if a migration fails to apply you will have to manually unpick "
"the changes in order to try again (it's impossible to roll back to an "
"earlier point)."
msgstr ""
"MySQL はスキーマの変更操作周りのトランザクションをサポートしていません。つま"
"り、マイグレーションの適用が失敗した場合には、手動で変更点を調べあげ、やり直"
"さなければならないということです (過去の時点にロールバックすることは不可能と"
"いうことです)。"

msgid ""
"MySQL 8.0 introduced significant performance enhancements for `DDL "
"operations`_, making them more efficient and reducing the need for full "
"table rebuilds. However, it cannot guarantee a complete absence of locks or "
"interruptions. In situations where locks are still necessary, the duration "
"of these operations will be proportionate to the number of rows involved."
msgstr ""
"MySQL 8.0 では `DDL operations`_ のパフォーマンスが大幅に強化され、より効率的"
"になり、テーブルの完全な再構築の必要性が減りました。しかし、ロックや中断が完"
"全に発生しないことは保証されません。ロックが必要な場合、操作時間は対象の行数"
"に比例して長くなります。"

msgid ""
"Finally, MySQL has a relatively small limit on the combined size of all "
"columns an index covers. This means that indexes that are possible on other "
"backends will fail to be created under MySQL."
msgstr ""
"最後に、MySQL ではインデックスがカバーするすべてのカラムの合計サイズに比較的"
"小さな制限があります。これは、他のバックエンドでは可能なインデックスが MySQL "
"では作成できないことを意味します。"

msgid "SQLite"
msgstr "SQLite"

msgid ""
"SQLite has very little built-in schema alteration support, and so Django "
"attempts to emulate it by:"
msgstr ""
"SQLite はビルトインのスキーマ変更操作をほとんどサポートしていません。そのた"
"め、Django は以下のようにしてスキーマの変更動作をエミュレートします。"

msgid "Creating a new table with the new schema"
msgstr "新しいスキーマで、新しいテーブルを作成する"

msgid "Copying the data across"
msgstr "テーブル間でデータをコピーする"

msgid "Dropping the old table"
msgstr "古いテーブルを削除する"

msgid "Renaming the new table to match the original name"
msgstr "新しいテーブルを元のテーブル名に変更する"

msgid ""
"This process generally works well, but it can be slow and occasionally "
"buggy. It is not recommended that you run and migrate SQLite in a production "
"environment unless you are very aware of the risks and its limitations; the "
"support Django ships with is designed to allow developers to use SQLite on "
"their local machines to develop less complex Django projects without the "
"need for a full database."
msgstr ""
"この方法で大抵はうまくいきますが、遅かったりたまにテーブルが壊れてしまうこと"
"があります。そのため、SQLite をプロダクション環境で使用するのは、このリスクと"
"制限を十分理解している場合以外には、おすすめしません。Django がデフォルトで "
"SQLite を使用しているのは、開発者が SQLite をローカルマシンでかんたんに実行で"
"きるようにすることで、本格的なデータベースがなくても Django のプロジェクトが"
"開発できるようにして、複雑さを除くようにデザインされているからです。"

msgid "Workflow"
msgstr "ワークフロー"

msgid ""
"Django can create migrations for you. Make changes to your models - say, add "
"a field and remove a model - and then run :djadmin:`makemigrations`:"
msgstr ""
"Django はあなたに代わってマイグレーションを作成します。たとえば、フィールドを"
"追加してモデルを削除するなど、モデルに変更を加えてから、:djadmin:"
"`makemigrations` を実行してください。"

msgid ""
"Your models will be scanned and compared to the versions currently contained "
"in your migration files, and then a new set of migrations will be written "
"out. Make sure to read the output to see what ``makemigrations`` thinks you "
"have changed - it's not perfect, and for complex changes it might not be "
"detecting what you expect."
msgstr ""
"すると、あなたが書いたモデルがスキャンされ、現在のバージョンのマイグレーショ"
"ンファイルに記録されているモデルと比較されます。この時、``makemigrations`` が"
"あなたが何を変更したと考えているのかを理解するために、出力をよく読んでくださ"
"い。不完全だったり、意図したよりも複雑な結果が表示されるかもしれません。"

msgid ""
"Once you have your new migration files, you should apply them to your "
"database to make sure they work as expected:"
msgstr ""
"問題なく新しいマイグレーションファイルが生成されたら、期待通りに変更が行われ"
"るように、データベースに適用します:"

msgid ""
"Once the migration is applied, commit the migration and the models change to "
"your version control system as a single commit - that way, when other "
"developers (or your production servers) check out the code, they'll get both "
"the changes to your models and the accompanying migration at the same time."
msgstr ""
"マイグレーションを適用したら、マイグレーションとモデルの変更をバージョン管理"
"システムに1つのコミットとしてコミットしましょう。こうすることで、他の開発者 "
"(やプロダクションサーバー) がコードをチェックアウトした時に、モデルの変更とマ"
"イグレーションの適用を同時に実行できます。"

msgid ""
"If you want to give the migration(s) a meaningful name instead of a "
"generated one, you can use the :option:`makemigrations --name` option:"
msgstr ""
"マイグレーションに、自動生成された名前ではなく、意味のある名前を与えたけれ"
"ば、:option:`makemigrations --name` オプションが使えます。"

msgid "Version control"
msgstr "バージョン管理"

msgid ""
"Because migrations are stored in version control, you'll occasionally come "
"across situations where you and another developer have both committed a "
"migration to the same app at the same time, resulting in two migrations with "
"the same number."
msgstr ""
"マイグレーションはバージョン管理システムに保管されるため、あなたがマイグレー"
"ションをコミットしたのと同じアプリに、同じタイミングで、他の開発者もマイグ"
"レーションをコミットしてしまい、結果として同じ数字のマイグレーションが2つでき"
"てしまう、というシチュエーションに遭遇するかもしれません。"

msgid ""
"Don't worry - the numbers are just there for developers' reference, Django "
"just cares that each migration has a different name. Migrations specify "
"which other migrations they depend on - including earlier migrations in the "
"same app - in the file, so it's possible to detect when there's two new "
"migrations for the same app that aren't ordered."
msgstr ""
"でも、大丈夫。マイグレーションの数字は開発者が参考にするために付けられている"
"だけなのです。Django が気にするのは、マイグレーションの名前が異なっているかど"
"うかだけです。マイグレーションはファイルの中で、自分が依存している他のマイグ"
"レーション (同じアプリの過去のマイグレーションを含む) を明記しています。その"
"ため、同じアプリへの2つの順序関係がない新しいマイグレーションが存在していれ"
"ば、それらをちゃんと検出できます。"

msgid ""
"When this happens, Django will prompt you and give you some options. If it "
"thinks it's safe enough, it will offer to automatically linearize the two "
"migrations for you. If not, you'll have to go in and modify the migrations "
"yourself - don't worry, this isn't difficult, and is explained more in :ref:"
"`migration-files` below."
msgstr ""
"このような状況が起きた場合、Django はいくつかの選択肢を提示します。それを読ん"
"で十分安全だと判断できれば、2つのマイグレーションを自動的に2つの連続するマイ"
"グレーションに変更してくれます。そうでなければ、マイグレーションファイルを自"
"分で修正する必要があります。でも、難しくないので心配はいりません。詳しくは、"
"下の :ref:`migration-files` で説明しています。"

msgid ""
"On databases that support DDL transactions (SQLite and PostgreSQL), all "
"migration operations will run inside a single transaction by default. In "
"contrast, if a database doesn't support DDL transactions (e.g. MySQL, "
"Oracle) then all operations will run without a transaction."
msgstr ""
"DDL トランザクションをサポートしているデータベース (SQLite や PostgreSQL) で"
"は、すべてのマイグレーション操作はデフォルトで単一のトランザクション内で実行"
"されます。一方、データベースが DDL トランザクションをサポートしていない場合 "
"(MySQL や Oracle など)、すべての操作はトランザクションなしで実行されます。"

msgid ""
"You can prevent a migration from running in a transaction by setting the "
"``atomic`` attribute to ``False``. For example::"
msgstr ""
"マイグレーションをトランザクション内で実行しないようにするには、``atomic`` 属"
"性を ``False`` に設定します。たとえば次のようにします。"

msgid ""
"It's also possible to execute parts of the migration inside a transaction "
"using :func:`~django.db.transaction.atomic()` or by passing ``atomic=True`` "
"to :class:`~django.db.migrations.operations.RunPython`. See :ref:`non-atomic-"
"migrations` for more details."
msgstr ""
":func:`~django.db.transaction.atomic()` を使うか、 :class:`~django.db."
"migrations.operations.RunPython` に ``atomic=True`` を渡すことで、マイグレー"
"ションの一部をトランザクション内で実行することもできます。詳しくは :ref:`non-"
"atomic-migrations` を参照してください。"

msgid "Dependencies"
msgstr "依存関係"

msgid ""
"While migrations are per-app, the tables and relationships implied by your "
"models are too complex to be created for one app at a time. When you make a "
"migration that requires something else to run - for example, you add a "
"``ForeignKey`` in your ``books`` app to your ``authors`` app - the resulting "
"migration will contain a dependency on a migration in ``authors``."
msgstr ""
"マイグレーションはアプリごとに作られますが、モデルが表しているテーブルとリ"
"レーションは、一度に一つのアプリに対して作るには複雑すぎます。他のマイグレー"
"ションの実行を要求するマイグレーション、たとえば ``books`` アプリ内の "
"``ForeignKey`` を ``authors`` アプリに加えるような場合、結果として作られるマ"
"イグレーションには、``authors`` のマイグレーションへの依存関係が生じます。"

msgid ""
"This means that when you run the migrations, the ``authors`` migration runs "
"first and creates the table the ``ForeignKey`` references, and then the "
"migration that makes the ``ForeignKey`` column runs afterward and creates "
"the constraint. If this didn't happen, the migration would try to create the "
"``ForeignKey`` column without the table it's referencing existing and your "
"database would throw an error."
msgstr ""
"つまり、マイグレーションを実行すると、最初に ``authors`` のマイグレーションが"
"実行されて ``ForeignKey`` リファレンスが参照するテーブルが作成され、その後で "
"``ForeignKey`` カラムを作るマイグレーションが実行された後、制約が作られます。"
"もしそうでなかったら、``books`` のマイグレーションが存在しないテーブルを参照"
"する ``ForeignKey`` カラムを作ろうとして、結果、データベースはエラーを出して"
"しまうでしょう。"

msgid ""
"This dependency behavior affects most migration operations where you "
"restrict to a single app. Restricting to a single app (either in "
"``makemigrations`` or ``migrate``) is a best-efforts promise, and not a "
"guarantee; any other apps that need to be used to get dependencies correct "
"will be."
msgstr ""
"この依存関係の動作は、1つのアプリに制限するマイグレーション操作のほとんどに影"
"響します。(``makemigrations`` または ``migrate`` で)1つのアプリに制限すること"
"は最善の努力であり、保証ではありません。"

msgid ""
"Apps without migrations must not have relations (``ForeignKey``, "
"``ManyToManyField``, etc.) to apps with migrations. Sometimes it may work, "
"but it's not supported."
msgstr ""
"マイグレーションをしていないアプリは、マイグレーションをしているアプリとリ"
"レーション (``ForeignKey``、``ManyToManyField`` など) を持ってはいけません。"
"うまくいくこともありますが、サポートはされていません。"

msgid "Swappable dependencies"
msgstr "スワップ (交換) 可能な依存関係"

msgid ""
"The ``swappable_dependency()`` function is used in migrations to declare "
"\"swappable\" dependencies on migrations in the app of the swapped-in model, "
"currently, on the first migration of this app. As a consequence, the swapped-"
"in model should be created in the initial migration. The argument ``value`` "
"is a string ``\"<app label>.<model>\"`` describing an app label and a model "
"name, e.g. ``\"myapp.MyModel\"``."
msgstr ""
"``swappable_dependency()`` 関数はマイグレーションで使用され、スワップインモデ"
"ルのアプリでマイグレーションに対する「スワップ可能な」依存関係を宣言します。"
"結果として、スワップインモデルは最初のマイグレーションで作成される必要があり"
"ます。引数 ``value`` には、アプリのラベルとモデル名を表す文字列 ``\"<app "
"label>.<model>\"`` を指定します。たとえば ``\"myapp.MyModel\"`` のように指定"
"します。"

msgid ""
"By using ``swappable_dependency()``, you inform the migration framework that "
"the migration relies on another migration which sets up a swappable model, "
"allowing for the possibility of substituting the model with a different "
"implementation in the future. This is typically used for referencing models "
"that are subject to customization or replacement, such as the custom user "
"model (``settings.AUTH_USER_MODEL``, which defaults to ``\"auth.User\"``) in "
"Django's authentication system."
msgstr ""
"``swappable_dependency()`` を使用することで、マイグレーションがスワップ可能な"
"モデルを設定する別のマイグレーションに依存していることをマイグレーションフ"
"レームワークに通知し、将来的にモデルを別の実装で置き換えることができるように"
"します。これは通常、Django の認証システムのカスタムユーザモデル (``settings."
"AUTH_USER_MODEL``、デフォルトは ``\"auth.User\"``) のような、カスタマイズや置"
"き換えの対象となるモデルを参照するために使われます。"

msgid "Migration files"
msgstr "マイグレーションファイル"

msgid ""
"Migrations are stored as an on-disk format, referred to here as \"migration "
"files\". These files are actually normal Python files with an agreed-upon "
"object layout, written in a declarative style."
msgstr ""
"マイグレーションはディスク上のファイルとして保存されます。ここではそれを「マ"
"イグレーションファイル」と呼びます。このファイルは実際には、決まった仕方でオ"
"ブジェクトを配置した、宣言型のスタイルで書かれたふつうの Python ファイルで"
"す。"

msgid "A basic migration file looks like this::"
msgstr "基本的なマイグレーションファイルは、次のような形式です。"

msgid ""
"What Django looks for when it loads a migration file (as a Python module) is "
"a subclass of ``django.db.migrations.Migration`` called ``Migration``. It "
"then inspects this object for four attributes, only two of which are used "
"most of the time:"
msgstr ""
"Django が (Python モジュールとして) マイグレーションファイルを読み込んだ時に"
"最初に探すのは、``Migration`` という名前の ``django.db.migrations."
"Migration`` のサブクラスです。そして、このサブクラスの4つの属性を調べますが、"
"ほとんど場合に使われるのは、次の2つの属性です。"

msgid "``dependencies``, a list of migrations this one depends on."
msgstr ""
"``dependencies`` は、このマイグレーションが依存する他のマイグレーションのリス"
"トです。"

msgid ""
"``operations``, a list of ``Operation`` classes that define what this "
"migration does."
msgstr ""
"``operations`` は、このマイグレーションが行う操作を定義している "
"``Operation`` クラスのリストです。"

msgid ""
"The operations are the key; they are a set of declarative instructions which "
"tell Django what schema changes need to be made. Django scans them and "
"builds an in-memory representation of all of the schema changes to all apps, "
"and uses this to generate the SQL which makes the schema changes."
msgstr ""
"operations がポイントです。これは、宣言的な命令の集まりで、Django にどんなス"
"キーマの変更が必要かを教えます。Django はそれらをスキャンして、全アプリへのス"
"キーマの変更を完全に表現するデータ構造をメモリ上に作り上げ、これを利用して、"
"Django スキーマを実際に変化させる SQL 文を生成します。"

msgid ""
"That in-memory structure is also used to work out what the differences are "
"between your models and the current state of your migrations; Django runs "
"through all the changes, in order, on an in-memory set of models to come up "
"with the state of your models last time you ran ``makemigrations``. It then "
"uses these models to compare against the ones in your ``models.py`` files to "
"work out what you have changed."
msgstr ""
"この時に作られるメモリ上のデータ構造は、新しいモデルと現在のマイグレーション"
"の状態の差分を計算するのにも使われます。Django は、メモリ上のモデルの集まりの"
"すべての変更点を順番にたどって行き、最後に ``makemigrations`` した時のモデル"
"の状態を理解します。そして、そのモデルと ``models.py`` ファイルにあるモデルと"
"を比較し、行った変更に対して作業を行うのです。"

msgid ""
"You should rarely, if ever, need to edit migration files by hand, but it's "
"entirely possible to write them manually if you need to. Some of the more "
"complex operations are not autodetectable and are only available via a hand-"
"written migration, so don't be scared about editing them if you have to."
msgstr ""
"ごく稀にマイグレーションファイルを手で修正しなければならないことがあります"
"が、必要があればすべて手で書くことも特に難しい作業ではありません。複雑なデー"
"タベース操作の中には自動的には検出できないものもあり、その場合にはマイグレー"
"ションを手で書くことが必須になることがあります。でも必要な場合には、自分の手"
"で書くのを怖がらないでください。"

msgid "Custom fields"
msgstr "カスタムフィールド"

msgid ""
"You can't modify the number of positional arguments in an already migrated "
"custom field without raising a ``TypeError``. The old migration will call "
"the modified ``__init__`` method with the old signature. So if you need a "
"new argument, please create a keyword argument and add something like "
"``assert 'argument_name' in kwargs`` in the constructor."
msgstr ""
"すでにマイグレートしたカスタムのフィールドの位置引数の数を変更しようとする"
"と、``TypeError`` が発生してしまします。古いマイグレーションは、修正した "
"``__init__`` メソッドを古い引数で呼んでしまいます。そこで、新しい引数が必要な"
"場合は、キーワード引数を作り、コンストラクタ内に ``assert 'argument_name' in "
"kwargs`` のような一文を追加してください。"

msgid "Model managers"
msgstr "モデルマネージャ"

msgid ""
"You can optionally serialize managers into migrations and have them "
"available in :class:`~django.db.migrations.operations.RunPython` operations. "
"This is done by defining a ``use_in_migrations`` attribute on the manager "
"class::"
msgstr ""
"オプションとして、マネージャをマイグレーションにシリアライズして、:class:"
"`~django.db.migrations.operations.RunPython` の中で使えるようにすることができ"
"ます。それには次のように、マネージャクラスの中で ``use_in_migrations`` 属性を"
"定義します。"

msgid ""
"If you are using the :meth:`~django.db.models.from_queryset` function to "
"dynamically generate a manager class, you need to inherit from the generated "
"class to make it importable::"
msgstr ""
"もし :meth:`~django.db.models.from_queryset` 関数で動的に生成されたマネージャ"
"クラスを使うなら、インポートできるように生成されたクラスを継承する必要があり"
"ます。"

msgid ""
"Please refer to the notes about :ref:`historical-models` in migrations to "
"see the implications that come along."
msgstr ""
"それに伴う影響については、マイグレーションにおける :ref:`historical-models` "
"のメモも参考にしてください。"

msgid "Initial migrations"
msgstr "初期マイグレーション"

msgid ""
"The \"initial migrations\" for an app are the migrations that create the "
"first version of that app's tables. Usually an app will have one initial "
"migration, but in some cases of complex model interdependencies it may have "
"two or more."
msgstr ""
"アプリの「初期マイグレーション」とは、そのアプリのテーブルの最初のバージョン"
"を作成するマイグレーションです。通常、アプリの初期マイグレーションは1つです"
"が、モデルの相互依存関係が複雑な場合は2つ以上になることもあります。"

msgid ""
"Initial migrations are marked with an ``initial = True`` class attribute on "
"the migration class. If an ``initial`` class attribute isn't found, a "
"migration will be considered \"initial\" if it is the first migration in the "
"app (i.e. if it has no dependencies on any other migration in the same app)."
msgstr ""
"初期マイグレーションはマイグレーションクラスの ``initial = True`` クラス属性"
"でマークされます。もし ``initial`` クラス属性が見つからない場合、マイグレー"
"ションはアプリ内で最初のマイグレーションであれば（つまり、同じアプリ内の他の"
"マイグレーションに依存していなければ）、\"初期 \"とみなされます。"

msgid ""
"When the :option:`migrate --fake-initial` option is used, these initial "
"migrations are treated specially. For an initial migration that creates one "
"or more tables (``CreateModel`` operation), Django checks that all of those "
"tables already exist in the database and fake-applies the migration if so. "
"Similarly, for an initial migration that adds one or more fields "
"(``AddField`` operation), Django checks that all of the respective columns "
"already exist in the database and fake-applies the migration if so. Without "
"``--fake-initial``, initial migrations are treated no differently from any "
"other migration."
msgstr ""
":option:`migrate --fake-initial` オプションを使うと、これらの初期マイグレー"
"ションは特別に扱われます。1 つ以上のテーブルを作成するマイグレーション "
"(``CreateModel`` オペレーション) では、 Django はそれらのテーブルが既にデータ"
"ベースに存在するかどうかをチェックし、存在する場合にはマイグレーションをフェ"
"イク適用します。同様に、1つ以上のフィールドを追加する最初のマイグレーション "
"(``AddField`` オペレーション) では、 Django はそれぞれのカラムが既にデータ"
"ベースに存在するかどうかをチェックし、存在すればマイグレーションをフェイク適"
"用します。 ``--fake-initial`` がなければ、初期マイグレーションは他のマイグ"
"レーションと同じように扱われます。"

msgid "History consistency"
msgstr "履歴の一貫性"

msgid ""
"As previously discussed, you may need to linearize migrations manually when "
"two development branches are joined. While editing migration dependencies, "
"you can inadvertently create an inconsistent history state where a migration "
"has been applied but some of its dependencies haven't. This is a strong "
"indication that the dependencies are incorrect, so Django will refuse to run "
"migrations or make new migrations until it's fixed. When using multiple "
"databases, you can use the :meth:`allow_migrate` method of :ref:`database "
"routers <topics-db-multi-db-routing>` to control which databases :djadmin:"
"`makemigrations` checks for consistent history."
msgstr ""
"前に説明したように、2つの開発ブランチを結合するときに、マイグレーションを手動"
"で線形化する必要があるかもしれません。マイグレーションの依存関係を編集してい"
"るときに、マイグレーションは適用されたのに、 その依存関係のいくつかは適用され"
"ていないというような、一貫性のない履歴状態をうっかり作ってしまうことがありま"
"す。これは依存関係が正しくないことを強く示しているので、 Django はそれが修正"
"されるまでマイグレーションを実行したり、新しいマイグレーショ ンを作成したりす"
"ることを拒否します。複数のデータベースを使う場合、 :ref:`データベースルー"
"ター <topics-db-multi-db-routing>` の :meth:`allow_migrate` メソッドを使うこ"
"とで、 :djadmin:`makemigrations` がどのデータベースをチェックし、履歴が一貫し"
"ているかを制御できます。"

msgid "Adding migrations to apps"
msgstr "アプリにマイグレーションを追加する"

msgid ""
"New apps come preconfigured to accept migrations, and so you can add "
"migrations by running :djadmin:`makemigrations` once you've made some "
"changes."
msgstr ""
"新しいアプリはマイグレーションを受け入れるようにあらかじめ設定されているの"
"で、ある程度変更したら :djadmin:`makemigrations` を実行してマイグレーションを"
"追加できます。"

msgid ""
"If your app already has models and database tables, and doesn't have "
"migrations yet (for example, you created it against a previous Django "
"version), you'll need to convert it to use migrations by running:"
msgstr ""
"もしあなたのアプリがすでにモデルとデータベーステーブルを持っていて、マイグ"
"レーションをまだ持っていない場合（たとえば、以前の Django バージョンに対して"
"作成した場合）、下記のコマンドを実行することでマイグレーションを使うように変"
"換する必要があります:"

msgid ""
"This will make a new initial migration for your app. Now, run ``python "
"manage.py migrate --fake-initial``, and Django will detect that you have an "
"initial migration *and* that the tables it wants to create already exist, "
"and will mark the migration as already applied. (Without the :option:"
"`migrate --fake-initial` flag, the command would error out because the "
"tables it wants to create already exist.)"
msgstr ""
"これにより、アプリの新しい初期マイグレーションが作成されます。次に、``python "
"manage.py migrate --fake-initial`` を実行すると、Djangoは初期マイグレーション"
"があり、*かつ* 作成しようとするテーブルが既に存在することを検出し、マイグレー"
"ションを既に適用済みとしてマークします。 (:option:`migrate --fake-initial` フ"
"ラグがない場合、コマンドは作成しようとするテーブルが既に存在するためエラーに"
"なります。)"

msgid "Note that this only works given two things:"
msgstr "ただし、これは以下の2つの条件を満たした場合にのみ有効です:"

msgid ""
"You have not changed your models since you made their tables. For migrations "
"to work, you must make the initial migration *first* and then make changes, "
"as Django compares changes against migration files, not the database."
msgstr ""
"テーブルを作ってからモデルを変更していません。マイグレーションを動作させるた"
"めには、初期マイグレーションを *最初に* 行い、それから変更を加える必要があり"
"ます。Django は変更をデータベースではなくマイグレーションファイルと比較するか"
"らです。"

msgid ""
"You have not manually edited your database - Django won't be able to detect "
"that your database doesn't match your models, you'll just get errors when "
"migrations try to modify those tables."
msgstr ""
"データベースを手動で編集していないので、 Django はデータベースがモデルにマッ"
"チしていないことを検知できません。マイグレーションがこれらのテーブルを変更し"
"ようとするとエラーが出るだけです。"

msgid "Reversing migrations"
msgstr "マイグレーションを元に戻す"

msgid ""
"Migrations can be reversed with :djadmin:`migrate` by passing the number of "
"the previous migration. For example, to reverse migration ``books.0003``:"
msgstr ""
"マイグレーションを元に戻すには、  :djadmin:`migrate` で前のマイグレーションの"
"番号を渡します。たとえば、マイグレーション ``books.0003`` を元に戻すには、次"
"のようにします:"

msgid ""
"If you want to reverse all migrations applied for an app, use the name "
"``zero``:"
msgstr ""
"アプリに適用されたマイグレーションをすべて元に戻したい場合は、``zero`` という"
"名前を使います："

msgid ""
"A migration is irreversible if it contains any irreversible operations. "
"Attempting to reverse such migrations will raise ``IrreversibleError``:"
msgstr ""
"マイグレーションに不可逆な操作が含まれている場合、そのマイグレーションは不可"
"逆です。このようなマイグレーションを元に戻そうとすると ``IrreversibleError`` "
"が発生します:"

msgid "Historical models"
msgstr "履歴上のモデル"

msgid ""
"When you run migrations, Django is working from historical versions of your "
"models stored in the migration files. If you write Python code using the :"
"class:`~django.db.migrations.operations.RunPython` operation, or if you have "
"``allow_migrate`` methods on your database routers, you **need to use** "
"these historical model versions rather than importing them directly."
msgstr ""
"マイグレーションを実行するとき、 Django はマイグレーションファイルに保存され"
"たモデルの過去のバージョンから作業しています。 :class:`~django.db.migrations."
"operations.RunPython` オペレーションを使って Python コードを書いたり、データ"
"ベースルーターに ``allow_migrate`` メソッドがある場合、 直接インポートするの"
"ではなく、 これらの履歴上のモデルバージョンを **使う必要があります** 。"

msgid ""
"If you import models directly rather than using the historical models, your "
"migrations *may work initially* but will fail in the future when you try to "
"rerun old migrations (commonly, when you set up a new installation and run "
"through all the migrations to set up the database)."
msgstr ""
"履歴上のモデルを使用するのではなく、モデルを直接インポートした場合、マイグ"
"レーションは初期にはうまくいくかもしれませんが、将来、古いマイグレーションを"
"再実行しようとしたときに（通常は新しいインストールをセットアップし、データ"
"ベースをセットアップするためにすべてのマイグレーションを実行したときに）失敗"
"します。"

msgid ""
"This means that historical model problems may not be immediately obvious. If "
"you run into this kind of failure, it's OK to edit the migration to use the "
"historical models rather than direct imports and commit those changes."
msgstr ""
"つまり、履歴上のモデルの問題はすぐには明らかにならない可能性があります。この"
"ような不具合が発生した場合は、直接インポートするのではなく、履歴上のモデルを"
"使用するようにマイグレーションを編集し、その変更をコミットすれば問題ありませ"
"ん。"

msgid ""
"Because it's impossible to serialize arbitrary Python code, these historical "
"models will not have any custom methods that you have defined. They will, "
"however, have the same fields, relationships, managers (limited to those "
"with ``use_in_migrations = True``) and ``Meta`` options (also versioned, so "
"they may be different from your current ones)."
msgstr ""
"任意のPythonコードをシリアライズすることは不可能なので、これらの履歴上のモデ"
"ルはあなたが定義したカスタムメソッドを持ちません。しかし、同じフィールド、リ"
"レーションシップ、マネージャ(``use_in_migrations = True`` を持つものに限られ"
"ます)、``Meta`` オプション(バージョン管理されているので、現在のものとは異なる"
"かもしれません)を持つことになります。"

msgid ""
"This means that you will NOT have custom ``save()`` methods called on "
"objects when you access them in migrations, and you will NOT have any custom "
"constructors or instance methods. Plan appropriately!"
msgstr ""
"つまり、マイグレーションでオブジェクトにアクセスするときに、カスタムメソッド "
"``save()`` が呼び出されることはありませんし、カスタムコンストラクタやカスタム"
"インスタンスメソッドもありません。適切な計画を立ててください！"

msgid ""
"References to functions in field options such as ``upload_to`` and "
"``limit_choices_to`` and model manager declarations with managers having "
"``use_in_migrations = True`` are serialized in migrations, so the functions "
"and classes will need to be kept around for as long as there is a migration "
"referencing them. Any :doc:`custom model fields </howto/custom-model-"
"fields>` will also need to be kept, since these are imported directly by "
"migrations."
msgstr ""
"``upload_to`` や ``limit_choices_to`` のようなフィールドオプションの関数への"
"参照や、 ``use_in_migrations = True`` を持つマネージャのモデルマネージャ宣言"
"はマイグレーションでシリアライズされます。 :doc:`カスタムのモデルフィールド "
"</howto/custom-model-fields>` もマイグレーションで直接インポートされるので、"
"残しておく必要があります。"

msgid ""
"In addition, the concrete base classes of the model are stored as pointers, "
"so you must always keep base classes around for as long as there is a "
"migration that contains a reference to them. On the plus side, methods and "
"managers from these base classes inherit normally, so if you absolutely need "
"access to these you can opt to move them into a superclass."
msgstr ""
"加えて、モデルの具体的な基底クラスはポインタとして保存されるので、それらへの"
"参照を含むマイグレーションが存在する限り、常に基底クラスを保持しておく必要が"
"あります。 プラス面として、これらの基底クラスからのメソッドとマネージャは普通"
"に継承されるので、どうしてもこれらにアクセスする必要がある場合は、スーパーク"
"ラスに移動させることを選択できます。"

msgid ""
"To remove old references, you can :ref:`squash migrations <migration-"
"squashing>` or, if there aren't many references, copy them into the "
"migration files."
msgstr ""
"古い参照を削除するには、:ref:`マイグレーションをスカッシュ（squash） "
"<migration-squashing>` するか、参照数が少ない場合はマイグレーションファイルに"
"コピーします。"

msgid "Considerations when removing model fields"
msgstr "モデルのフィールドを削除するときに考えるべきこと"

msgid ""
"Similar to the \"references to historical functions\" considerations "
"described in the previous section, removing custom model fields from your "
"project or third-party app will cause a problem if they are referenced in "
"old migrations."
msgstr ""
"前のセクションで説明した「履歴上の機能への参照」の注意事項と同様に、プロジェ"
"クトやサードパーティアプリからカスタムモデルフィールドを削除すると、それらが"
"古いマイグレーションで参照されている場合に問題が発生します。"

msgid ""
"To help with this situation, Django provides some model field attributes to "
"assist with model field deprecation using the :doc:`system checks framework "
"</topics/checks>`."
msgstr ""
"このような状況を解決するために、 Django は :doc:`システムチェックフレームワー"
"ク </topics/checks>` を使ってモデルフィールドの非推奨化を支援するモデルフィー"
"ルド属性をいくつか提供しています。"

msgid ""
"Add the ``system_check_deprecated_details`` attribute to your model field "
"similar to the following::"
msgstr ""
"以下のように、``system_check_deprecated_details`` 属性をモデルフィールドに追"
"加します:"

msgid ""
"After a deprecation period of your choosing (two or three feature releases "
"for fields in Django itself), change the ``system_check_deprecated_details`` "
"attribute to ``system_check_removed_details`` and update the dictionary "
"similar to::"
msgstr ""
"あなたが選んだ非推奨期間 (Django 自体のフィールドでは 2、3 回の機能リリース) "
"が経過したら、 ``system_check_deprecated_details`` 属性を "
"``system_check_removed_details`` に変更し、次のように辞書を更新してください:"

msgid ""
"You should keep the field's methods that are required for it to operate in "
"database migrations such as ``__init__()``, ``deconstruct()``, and "
"``get_internal_type()``. Keep this stub field for as long as any migrations "
"which reference the field exist. For example, after squashing migrations and "
"removing the old ones, you should be able to remove the field completely."
msgstr ""
"``__init__()``、``deconstruct()``、``get_internal_type()`` などのデータベース"
"マイグレーションで動作するために必要なフィールドのメソッドは残しておく必要が"
"あります。フィールドを参照するマイグレーションが存在する限り、このスタブ"
"フィールドを保持します。たとえば、マイグレーションを潰して（squashして）古い"
"マイグレーションを削除したら、フィールドを完全に削除できるはずです。"

msgid "Data Migrations"
msgstr "データのマイグレーション"

msgid ""
"As well as changing the database schema, you can also use migrations to "
"change the data in the database itself, in conjunction with the schema if "
"you want."
msgstr ""
"データベースのスキーマを変更するだけでなく、必要であれば、マイグレーションを"
"使用して、スキーマと連動してデータベース自体のデータを変更することもできま"
"す。"

msgid ""
"Migrations that alter data are usually called \"data migrations\"; they're "
"best written as separate migrations, sitting alongside your schema "
"migrations."
msgstr ""
"データを変更するマイグレーションは通常「データマイグレーション」と呼びます。"
"スキーママイグレーションと並行して、別のマイグレーションとして記述するのが最"
"適です。"

msgid ""
"Django can't automatically generate data migrations for you, as it does with "
"schema migrations, but it's not very hard to write them. Migration files in "
"Django are made up of :doc:`Operations </ref/migration-operations>`, and the "
"main operation you use for data migrations is :class:`~django.db.migrations."
"operations.RunPython`."
msgstr ""
"Django はスキーママイグレーションのようにデータマイグレーションを自動生成する"
"ことはできませんが、書くのはそれほど難しくありません。Django のマイグレーショ"
"ンファイルは :doc:`オペレーション </ref/migration-operations>` で構成され、"
"データマイグレーションに使う主なオペレーションは :class:`~django.db."
"migrations.operations.RunPython` です。"

msgid ""
"To start, make an empty migration file you can work from (Django will put "
"the file in the right place, suggest a name, and add dependencies for you):"
msgstr ""
"手始めに、作業可能な空のマイグレーションファイルを作成してください (Django が"
"ファイルを適切な場所に置き、名前を提案し、依存関係を追加してくれます):"

msgid "Then, open up the file; it should look something like this::"
msgstr ""
"そして、そのファイルを開いてください。次のようなファイルになっているはずです:"

msgid ""
"Now, all you need to do is create a new function and have :class:`~django.db."
"migrations.operations.RunPython` use it. :class:`~django.db.migrations."
"operations.RunPython` expects a callable as its argument which takes two "
"arguments - the first is an :doc:`app registry </ref/applications/>` that "
"has the historical versions of all your models loaded into it to match where "
"in your history the migration sits, and the second is a :doc:`SchemaEditor </"
"ref/schema-editor>`, which you can use to manually effect database schema "
"changes (but beware, doing this can confuse the migration autodetector!)"
msgstr ""
"あとは新しい関数を作って :class:`~django.db.migrations.operations.RunPython` "
"に使ってもらうだけです。 :class:`~django.db.migrations.operations.RunPython` "
"は、引数として2つの引数を取る呼び出し可能オブジェクトを期待します。1つ目は :"
"doc:`アプリ レジストリ </ref/applications/>` で、マイグレーションが履歴のどこ"
"に位置するかに合わせて、履歴上のモデルのバージョンを読み込んだものです。そし"
"てもう1つは :doc:`スキーマエディタ </ref/schema-editor>` で、手動でデータベー"
"スのスキーマを変更するのに使用できます (ただし、これをやるとマイグレーション"
"自動検出器が混乱してしまうので注意してください！)。"

msgid ""
"Let's write a migration that populates our new ``name`` field with the "
"combined values of ``first_name`` and ``last_name`` (we've come to our "
"senses and realized that not everyone has first and last names). All we need "
"to do is use the historical model and iterate over the rows::"
msgstr ""
"新しい ``name`` フィールドに ``first_name`` と ``last_name`` を組み合わせた値"
"を入力するマイグレーションを書いてみましょう (すべての人が姓と名を持つわけで"
"はないことに気がつきました)。あとは履歴上のモデルを使用して行をイテレートする"
"だけです:"

msgid ""
"Once that's done, we can run ``python manage.py migrate`` as normal and the "
"data migration will run in place alongside other migrations."
msgstr ""
"これが完了したら、通常通り ``python manage.py migrate`` を実行し、他のマイグ"
"レーションと並行してデータマイグレーションを実行します。"

msgid ""
"You can pass a second callable to :class:`~django.db.migrations.operations."
"RunPython` to run whatever logic you want executed when migrating backwards. "
"If this callable is omitted, migrating backwards will raise an exception."
msgstr ""
"2 番目の呼び出し可能オブジェクトを :class:`~django.db.migrations.operations."
"RunPython` に渡すことで、逆方向へのマイグレーションの際に実行したいロジックを"
"実行できます。この呼び出し可能オブジェクトが省略された場合、逆方向にマイグ"
"レーションすると例外が発生します。"

msgid "Accessing models from other apps"
msgstr "他のアプリからモデルにアクセスする"

msgid ""
"When writing a ``RunPython`` function that uses models from apps other than "
"the one in which the migration is located, the migration's ``dependencies`` "
"attribute should include the latest migration of each app that is involved, "
"otherwise you may get an error similar to: ``LookupError: No installed app "
"with label 'myappname'`` when you try to retrieve the model in the "
"``RunPython`` function using ``apps.get_model()``."
msgstr ""
"``RunPython`` 関数で、マイグレーションが配置されているアプリ以外のアプリのモ"
"デルを使用する場合、マイグレーションの ``dependencies`` 属性には、関係する各"
"アプリの最新のマイグレーションが含まれている必要があります。含まれていない場"
"合、 ``RunPython`` 関数内で ``apps.get_model()`` を使用してモデルを取得しよう"
"とすると、 ``LookupError: No installed app with label 'myappname'`` のような"
"エラーが発生する可能性があります。"

msgid ""
"In the following example, we have a migration in ``app1`` which needs to use "
"models in ``app2``. We aren't concerned with the details of ``move_m1`` "
"other than the fact it will need to access models from both apps. Therefore "
"we've added a dependency that specifies the last migration of ``app2``::"
msgstr ""
"次の例では、``app1`` のマイグレーションで、``app2`` のモデルを使用する必要が"
"あります。私たちは ``move_m1`` が両方のアプリのモデルにアクセスする必要がある"
"という事実以外、その詳細には関心がありません。そのため、``app2`` の最後のマイ"
"グレーションを指定する依存関係を追加しました:"

msgid "More advanced migrations"
msgstr "より高度なマイグレーション"

msgid ""
"If you're interested in the more advanced migration operations, or want to "
"be able to write your own, see the :doc:`migration operations reference </"
"ref/migration-operations>` and the \"how-to\" on :doc:`writing migrations </"
"howto/writing-migrations>`."
msgstr ""
"より高度なマイグレーション操作に興味があったり、自分でマイグレーションを書け"
"るようになりたければ、 :doc:`マイグレーション操作のリファレンス </ref/"
"migration-operations>` と :doc:`マイグレーションを書く </howto/writing-"
"migrations>` の \"how-to\" を参照してください。"

msgid "Squashing migrations"
msgstr "マイグレーションのスカッシュ (Squash)"

msgid ""
"You are encouraged to make migrations freely and not worry about how many "
"you have; the migration code is optimized to deal with hundreds at a time "
"without much slowdown. However, eventually you will want to move back from "
"having several hundred migrations to just a few, and that's where squashing "
"comes in."
msgstr ""
"マイグレーションは自由に作成し、その数について心配する必要はありません。マイ"
"グレーションコードは、一度に数百ものマイグレーションを効率的に扱えるよう最適"
"化されています。しかし、最終的には数百ものマイグレーションを数個にまとめたい"
"と思う時が来ます。その時には、マイグレーションの圧縮 (squash) が役立ちます。"

msgid ""
"Squashing is the act of reducing an existing set of many migrations down to "
"one (or sometimes a few) migrations which still represent the same changes."
msgstr ""
"スカッシュ (squash: 潰す) とは、既存の多数のマイグレーションから、同じ変更を"
"表すマイグレーションを1つ (場合によっては数個) に減らすことです。"

msgid ""
"Django does this by taking all of your existing migrations, extracting their "
"``Operation``\\s and putting them all in sequence, and then running an "
"optimizer over them to try and reduce the length of the list - for example, "
"it knows that :class:`~django.db.migrations.operations.CreateModel` and :"
"class:`~django.db.migrations.operations.DeleteModel` cancel each other out, "
"and it knows that :class:`~django.db.migrations.operations.AddField` can be "
"rolled into :class:`~django.db.migrations.operations.CreateModel`."
msgstr ""
"Django は、既存のマイグレーションをすべて取り出し、その ``Operation`` を抽出"
"して順番に並べ、オプティマイザを実行してリストの長さを短くしようとします。 例"
"えば、 :class:`~django.db.migrations.operations.CreateModel` と :class:"
"`~django.db.migrations.operations.DeleteModel` が互いに打ち消し合うことも、 :"
"class:`~django.db.migrations.operations.AddField` が :class:`~django.db."
"migrations.operations.CreateModel` にロールインできることも知っています。"

msgid ""
"Once the operation sequence has been reduced as much as possible - the "
"amount possible depends on how closely intertwined your models are and if "
"you have any :class:`~django.db.migrations.operations.RunSQL` or :class:"
"`~django.db.migrations.operations.RunPython` operations (which can't be "
"optimized through unless they are marked as ``elidable``) - Django will then "
"write it back out into a new set of migration files."
msgstr ""
"操作シーケンスを可能な限り減らしたら (どれだけ減らせるかは、モデルがどれだけ"
"密接に絡み合っているか、また ``elidable`` とマークされていない限り最適化でき"
"ない :class:`~django.db.migrations.operations.RunSQL` や :class:`~django.db."
"migrations.operations.RunPython` 操作があるかどうかによって決まります)、"
"Django はそれを新しいマイグレーションファイル群に書き戻します。"

msgid ""
"These files are marked to say they replace the previously-squashed "
"migrations, so they can coexist with the old migration files, and Django "
"will intelligently switch between them depending where you are in the "
"history. If you're still part-way through the set of migrations that you "
"squashed, it will keep using them until it hits the end and then switch to "
"the squashed history, while new installs will use the new squashed migration "
"and skip all the old ones."
msgstr ""
"これらのファイルは、以前にスカッシュされたマイグレーションを置き換えるものと"
"してマークされているため、古いマイグレーションファイルと共存でき、Djangoは履"
"歴のどこにいるかに応じて賢く切り替えます。スカッシュしたマイグレーションセッ"
"トの途中であれば、それらを使用し続け、最後に達した後でスカッシュされた履歴に"
"切り替えます。一方、新しいインストールでは新しいスカッシュマイグレーションが"
"使用され、古いものはすべてスキップされます。"

msgid ""
"This enables you to squash and not mess up systems currently in production "
"that aren't fully up-to-date yet. The recommended process is to squash, "
"keeping the old files, commit and release, wait until all systems are "
"upgraded with the new release (or if you're a third-party project, ensure "
"your users upgrade releases in order without skipping any), and then remove "
"the old files, commit and do a second release."
msgstr ""
"これにより、まだ完全に最新の状態ではない本番システムを混乱させずにマイグレー"
"ションを圧縮できます。推奨されるプロセスは、古いファイルを保持しながらスカッ"
"シュし、コミットしてリリースし、すべてのシステムが新しいリリースでアップグ"
"レードされるのを待つことです (または、サードパーティのプロジェクトであれば、"
"ユーザーがリリースを順番にアップグレードするようにします)。その後、古いファイ"
"ルを削除し、コミットして2回目のリリースを行います。"

msgid ""
"The command that backs all this is :djadmin:`squashmigrations` - pass it the "
"app label and migration name you want to squash up to, and it'll get to work:"
msgstr ""
"このプロセスを支えるコマンドは :djadmin:`squashmigrations` です。スカッシュし"
"たいアプリのラベルとマイグレーション名を指定して実行すると、作業が始まりま"
"す。"

msgid ""
"Use the :option:`squashmigrations --squashed-name` option if you want to set "
"the name of the squashed migration rather than use an autogenerated one."
msgstr ""
":option:`squashmigrations --squashed-name` オプションを使用すると、自動生成さ"
"れた名前を使用する代わりに、スカッシュされたマイグレーションの名前を指定でき"
"ます。"

msgid ""
"Note that model interdependencies in Django can get very complex, and "
"squashing may result in migrations that do not run; either mis-optimized (in "
"which case you can try again with ``--no-optimize``, though you should also "
"report an issue), or with a ``CircularDependencyError``, in which case you "
"can manually resolve it."
msgstr ""
"Djangoのモデル間の依存関係は非常に複雑になる可能性があり、マイグレーションの"
"スカッシュによっては正常に実行されないマイグレーションが発生することがありま"
"す。これには、最適化されていない場合 (この場合は ``--no-optimize`` オプション"
"を試すか、問題を報告してください) や、``CircularDependencyError`` が発生した"
"場合が含まれます。後者の場合は、手動で解決する必要があります。"

msgid ""
"To manually resolve a ``CircularDependencyError``, break out one of the "
"ForeignKeys in the circular dependency loop into a separate migration, and "
"move the dependency on the other app with it. If you're unsure, see how :"
"djadmin:`makemigrations` deals with the problem when asked to create brand "
"new migrations from your models. In a future release of Django, :djadmin:"
"`squashmigrations` will be updated to attempt to resolve these errors itself."
msgstr ""
"``CircularDependencyError`` を手動で解決するには、循環依存ループ内の外部キー"
"の1つを別のマイグレーションに分割し、その他のアプリへの依存をそれと一緒に移動"
"します。不明な場合は、モデルから新しいマイグレーションを作成するように依頼さ"
"れたときに :djadmin:`makemigrations` が問題をどのように扱うかを確認してくださ"
"い。将来のDjangoリリースでは、 :djadmin:`squashmigrations` がこれらのエラーを"
"自動的に解決しようとする機能が追加される予定です。"

msgid ""
"Once you've squashed your migration, you should then commit it alongside the "
"migrations it replaces and distribute this change to all running instances "
"of your application, making sure that they run ``migrate`` to store the "
"change in their database."
msgstr ""
"マイグレーションをスカッシュしたら、それを置き換えるマイグレーションと共にコ"
"ミットし、アプリケーションを実行しているすべてのインスタンスにこの変更を配布"
"し、データベースに変更を記録するために ``migrate`` を確実に実行してください。"

msgid ""
"You must then transition the squashed migration to a normal migration by:"
msgstr ""
"その後、スカッシュしたマイグレーションを通常のマイグレーションに移行するに"
"は、次の手順を実行する必要があります:"

msgid "Deleting all the migration files it replaces."
msgstr ""
"マイグレーションが置き換えるすべてのマイグレーションファイルを削除します。"

msgid ""
"Updating all migrations that depend on the deleted migrations to depend on "
"the squashed migration instead."
msgstr ""
"削除されたマイグレーションに依存しているすべてのマイグレーションを、 代わりに"
"スカッシュしたマイグレーションに依存するように更新します。"

msgid ""
"Removing the ``replaces`` attribute in the ``Migration`` class of the "
"squashed migration (this is how Django tells that it is a squashed "
"migration)."
msgstr ""
"スカッシュしたマイグレーションの ``Migration`` クラスの ``replaces`` 属性を削"
"除します (これで Django はそれがスカッシュしたマイグレーションだとわかりま"
"す)。"

msgid ""
"Once you've squashed a migration, you should not then re-squash that "
"squashed migration until you have fully transitioned it to a normal "
"migration."
msgstr ""
"一度マイグレーションをスカッシュしたら、通常のマイグレーションに完全に移行す"
"るまで、そのスカッシュしたマイグレーションを再度スカッシュすべきではありませ"
"ん。"

msgid "Pruning references to deleted migrations"
msgstr "削除されたマイグレーションへの参照の整理"

msgid ""
"If it is likely that you may reuse the name of a deleted migration in the "
"future, you should remove references to it from Django’s migrations table "
"with the :option:`migrate --prune` option."
msgstr ""
"削除したマイグレーションの名前を将来再利用する可能性がある場合は、 :option:"
"`migrate --prune` オプションを使って Django の migrations テーブルからそのマ"
"イグレーションへの参照を削除してください。"

msgid "Serializing values"
msgstr "値のシリアライズ"

msgid ""
"Migrations are Python files containing the old definitions of your models - "
"thus, to write them, Django must take the current state of your models and "
"serialize them out into a file."
msgstr ""
"マイグレーションは、モデルの古い定義が書かれた Python ファイルです。よって、"
"マイグレーションを書くには、Django はモデルの現在の状態を取得して、その状態を"
"シリアライズしてファイルに出力できなければなりません。"

msgid ""
"While Django can serialize most things, there are some things that we just "
"can't serialize out into a valid Python representation - there's no Python "
"standard for how a value can be turned back into code (``repr()`` only works "
"for basic values, and doesn't specify import paths)."
msgstr ""
"Django はほとんどのオブジェクトをシリアライズできますが、有効な Python 表現へ"
"と単純にはシリアライズできないオブジェクトもあります。しかし、任意の値を "
"Python のコードにデコードするような Python の標準は存在しません(``repr()`` は"
"基本的な値にしか機能しませんし、import path は指定できません)。"

msgid "Django can serialize the following:"
msgstr "Django がシリアライズできるのは、以下のオブジェクトです。"

msgid ""
"``int``, ``float``, ``bool``, ``str``, ``bytes``, ``None``, ``NoneType``"
msgstr ""
"``int``、``float``、``bool``、``str``、``bytes``、``None``、``NoneType``"

msgid "``list``, ``set``, ``tuple``, ``dict``, ``range``."
msgstr "``list``、``set``、``tuple``、``dict``、``range``。"

msgid ""
"``datetime.date``, ``datetime.time``, and ``datetime.datetime`` instances "
"(include those that are timezone-aware)"
msgstr ""
"``datetime.date``、``datetime.time``、``datetime.datetime`` インスタンス "
"(timezone-aware なものも含む)"

msgid "``decimal.Decimal`` instances"
msgstr "``decimal.Decimal`` インスタンス"

msgid "``enum.Enum``  and ``enum.Flag`` instances"
msgstr "``enum.Enum``  または ``enum.Flag`` インスタンス"

msgid "``uuid.UUID`` instances"
msgstr "``uuid.UUID`` インスタンス"

msgid ""
":func:`functools.partial` and :class:`functools.partialmethod` instances "
"which have serializable ``func``, ``args``, and ``keywords`` values."
msgstr ""
"シリアライズできる ``func``、``args``、``keywords`` の値を持つ :func:"
"`functools.partial` または :class:`functools.partialmethod` インスタンス"

msgid ""
"Pure and concrete path objects from :mod:`pathlib`. Concrete paths are "
"converted to their pure path equivalent, e.g. :class:`pathlib.PosixPath` to :"
"class:`pathlib.PurePosixPath`."
msgstr ""
":mod:`pathlib` から取得した純粋パスオブジェクトと具象パスオブジェクト。たとえ"
"ば、:class:`pathlib.PosixPath` は :class:`pathlib.PurePosixPath` に変換されま"
"す。"

msgid ""
":class:`os.PathLike` instances, e.g. :class:`os.DirEntry`, which are "
"converted to ``str`` or ``bytes`` using :func:`os.fspath`."
msgstr ""
":class:`os.PathLike` インスタンス、たとえば :class:`os.DirEntry` は、:func:"
"`os.fspath` を使用して ``str`` または ``bytes`` に変換されます。"

msgid "``LazyObject`` instances which wrap a serializable value."
msgstr "シリアライズできる値をラッピングした ``LazyObject`` インスタンス"

msgid ""
"Enumeration types (e.g. ``TextChoices`` or ``IntegerChoices``) instances."
msgstr "列挙型 (``TextChoices`` や ``IntegerChoices`` など) のインスタンス。"

msgid "Any Django field"
msgstr "任意の Django フィールド"

msgid ""
"Any function or method reference (e.g. ``datetime.datetime.today``) (must be "
"in module's top-level scope)"
msgstr ""
"任意の関数またはメソッドへのリファレンス (例: ``datetime.datetime.today``) "
"(ただし、モジュールのトップレベルのスコープにいなければならない)"

msgid ""
"Functions may be decorated if wrapped properly, i.e. using :func:`functools."
"wraps`"
msgstr ""
"関数は適切にラップされていればデコレートできます、つまり :func:`functools."
"wraps` を使います。"

msgid ""
"The :func:`functools.cache` and :func:`functools.lru_cache` decorators are "
"explicitly supported"
msgstr ""
":func:`functools.cache` デコレータと :func:`functools.lru_cache` デコレータは"
"明示的にサポートされています。"

msgid "Unbound methods used from within the class body"
msgstr "クラスの本体から使用されている束縛されていないメソッド"

msgid "Any class reference (must be in module's top-level scope)"
msgstr ""
"任意のクラスへのリファレンス (ただし、モジュールのトップレベルのスコープにい"
"なければならない)"

msgid ""
"Anything with a custom ``deconstruct()`` method (:ref:`see below <custom-"
"deconstruct-method>`)"
msgstr ""
"カスタムの ``deconstruct()`` メソッドを持つすべてのオブジェクト (:ref:`以下を"
"参照 <custom-deconstruct-method>`)"

msgid "Serialization support for ``enum.Flag`` was added."
msgstr "``enum.Flag`` のシリアライズのサポートが追加されました。"

msgid ""
"Serialization support for functions decorated with :func:`functools.cache` "
"or :func:`functools.lru_cache` was added."
msgstr ""
":func:`functools.cache` または :func:`functools.lru_cache` で装飾された関数の"
"シリアライズのサポートが追加されました。"

msgid "Django cannot serialize:"
msgstr "Django は以下のオブジェクトをシリアライズできません。"

msgid "Nested classes"
msgstr "ネストしたクラス"

msgid "Arbitrary class instances (e.g. ``MyClass(4.3, 5.7)``)"
msgstr "任意のクラスのインスタンス (例: ``MyClass(4.3, 5.7)``)"

msgid "Lambdas"
msgstr "ラムダ式"

msgid "Custom serializers"
msgstr "カスタムシリアライザ"

msgid ""
"You can serialize other types by writing a custom serializer. For example, "
"if Django didn't serialize :class:`~decimal.Decimal` by default, you could "
"do this::"
msgstr ""
"カスタムシリアライザを書けば、他の型もシリアライズできます。たとえば、 "
"Django がデフォルトで :class:`~decimal.Decimal` をシリアライズしていない場"
"合、次のようにできます:"

msgid ""
"The first argument of ``MigrationWriter.register_serializer()`` is a type or "
"iterable of types that should use the serializer."
msgstr ""
"``MigrationWriter.register_serializer()`` の第一引数には、シリアライザを使用"
"する型または型のイテラブルを指定します。"

msgid ""
"The ``serialize()`` method of your serializer must return a string of how "
"the value should appear in migrations and a set of any imports that are "
"needed in the migration."
msgstr ""
"シリアライザの ``serialize()`` メソッドは、値がマイグレーションでどのように表"
"示されるかを示す文字列と、マイグレーションで必要なインポートのセットを返す必"
"要があります。"

msgid "Adding a ``deconstruct()`` method"
msgstr "``deconstruct()`` メソッドを追加する"

msgid ""
"You can let Django serialize your own custom class instances by giving the "
"class a ``deconstruct()`` method. It takes no arguments, and should return a "
"tuple of three things ``(path, args, kwargs)``:"
msgstr ""
"自作のカスタムクラスに ``deconstruct()`` メソッドを実装することで、インスタン"
"スを Django にシリアライズさせることができます。このメソッドは引数を取らず、 "
"``(path, args, kwargs)`` からなる3タプルを返す必要があります。"

msgid ""
"``path`` should be the Python path to the class, with the class name "
"included as the last part (for example, ``myapp.custom_things.MyClass``). If "
"your class is not available at the top level of a module it is not "
"serializable."
msgstr ""
"``path`` はクラス名を最後に含むクラスへの Python パスでなければなりません (た"
"とえば、``myapp.custom_things.MyClass``)。自作のクラスがモジュールのトップレ"
"ベルで使用できない場合は、シリアライズすることはできません。"

msgid ""
"``args`` should be a list of positional arguments to pass to your class' "
"``__init__`` method. Everything in this list should itself be serializable."
msgstr ""
"``args`` はクラスの ``__init__`` メソッドに渡される位置引数のリストでなければ"
"なりません。このリストに含まれる要素は、それ自体でシリアライズ可能である必要"
"があります。"

msgid ""
"``kwargs`` should be a dict of keyword arguments to pass to your class' "
"``__init__`` method. Every value should itself be serializable."
msgstr ""
"``kwargs`` はクラスの ``__init__`` メソッドに渡されるキーワード引数の dict で"
"なければなりません。すべての値はそれ自体でシリアライズ可能である必要がありま"
"す。"

msgid ""
"This return value is different from the ``deconstruct()`` method :ref:`for "
"custom fields <custom-field-deconstruct-method>` which returns a tuple of "
"four items."
msgstr ""
"この戻り値は :ref:`カスタムフィールドのための <custom-field-deconstruct-"
"method>` ``deconstruct()`` メソッド とは異なり、4つの項目のタプルを返します。"

msgid ""
"Django will write out the value as an instantiation of your class with the "
"given arguments, similar to the way it writes out references to Django "
"fields."
msgstr ""
"Django は、Django のフィールドへの参照を書き出すのと同じように、与えられた引"
"数を持つクラスのインスタンス化として値を書き出します。"

msgid ""
"To prevent a new migration from being created each time :djadmin:"
"`makemigrations` is run, you should also add a ``__eq__()`` method to the "
"decorated class. This function will be called by Django's migration "
"framework to detect changes between states."
msgstr ""
":djadmin:`makemigrations` が実行されるたびに新しいマイグレーションが作成され"
"るのを防ぐために、クラスに追加情報を与える ``__eq__()`` メソッドも追加した方"
"がいいでしょう。この関数は、Django のマイグレーションフレームワークが状態の変"
"更を検出するために呼び出します。"

msgid ""
"As long as all of the arguments to your class' constructor are themselves "
"serializable, you can use the ``@deconstructible`` class decorator from "
"``django.utils.deconstruct`` to add the ``deconstruct()`` method::"
msgstr ""
"クラスのコンストラクタのすべての引数がそれ自体でシリアライズ可能である場合に"
"は、次のように ``django.utils.deconstruct`` の ``@deconstructible`` クラスデ"
"コレータを使うことで ``deconstruct()`` メソッドを追加できます。"

msgid ""
"The decorator adds logic to capture and preserve the arguments on their way "
"into your constructor, and then returns those arguments exactly when "
"deconstruct() is called."
msgstr ""
"デコレータは、コンストラクタに与えられる引数を独自の方法でキャプチャし保存し"
"ておきます。そして、``deconstruct()`` が呼ばれるタイミングで、保存しておいた"
"引数を返すようにしてくれます。"

msgid "Supporting multiple Django versions"
msgstr "Django の複数のバージョンをサポートする"

msgid ""
"If you are the maintainer of a third-party app with models, you may need to "
"ship migrations that support multiple Django versions. In this case, you "
"should always run :djadmin:`makemigrations` **with the lowest Django version "
"you wish to support**."
msgstr ""
"もしあなたが、モデルを持つサードパーティのアプリのメンテナならば、Django の複"
"数のバージョンをサポートするマイグレーションを入れておきたいでしょう。その場"
"合、必ず **あなたがサポートしたい Django の下限のバージョンで** :djadmin:"
"`makemigrations` を実行するようにしてください。"

msgid ""
"The migrations system will maintain backwards-compatibility according to the "
"same policy as the rest of Django, so migration files generated on Django X."
"Y should run unchanged on Django X.Y+1. The migrations system does not "
"promise forwards-compatibility, however. New features may be added, and "
"migration files generated with newer versions of Django may not work on "
"older versions."
msgstr ""
"マイグレーションのシステムは、Django の他のポリシーと同じく、後方互換性を持ち"
"ます。そのため、Django X.Y で生成されたマイグレーションファイルは、変更なし"
"に Django X.Y+1 で動作します。しかし、マイグレーションのシステムは前方互換性"
"は保証しません。新しい機能が追加され、新しいバージョンの Django でマイグレー"
"ションファイルが生成されれば、そのマイグレーションは古いバージョンでは動きま"
"せん。"

msgid ":doc:`The Migrations Operations Reference </ref/migration-operations>`"
msgstr ":doc:`マイグレーション操作リファレンス </ref/migration-operations>`"

msgid ""
"Covers the schema operations API, special operations, and writing your own "
"operations."
msgstr ""
"スキーマ操作の API、特別な操作、自作の操作の書き方などについて書いてありま"
"す。"

msgid ":doc:`The Writing Migrations \"how-to\" </howto/writing-migrations>`"
msgstr ""
":doc:`マイグレーション (Migrations) を書くための ”how-to” </howto/writing-"
"migrations>`"

msgid ""
"Explains how to structure and write database migrations for different "
"scenarios you might encounter."
msgstr ""
"遭遇するかもしれない異なるシチュエーション下での、データベースのマイグレー"
"ションの構造化方法と書き方を説明しています。"

msgid "Pagination"
msgstr "ページ分割 (Pagination) "

msgid ""
"Django provides high-level and low-level ways to help you manage paginated "
"data -- that is, data that's split across several pages, with \"Previous/"
"Next\" links."
msgstr ""
"Django は、ページ分割 (ページネーション) されたデータを管理するための高レベル"
"と低レベルの方法を提供しています。つまり、\"前へ/次へ\" リンクを持つ、複数の"
"ページに分割されたデータです。"

msgid "The ``Paginator`` class"
msgstr "``Paginator`` クラス"

msgid ""
"Under the hood, all methods of pagination use the :class:`~django.core."
"paginator.Paginator` class. It does all the heavy lifting of actually "
"splitting a ``QuerySet`` into :class:`~django.core.paginator.Page` objects."
msgstr ""
"内部では、ページ分割に関するすべてのメソッドは :class:`~django.core."
"paginator.Paginator` クラスを利用しています。このクラスが、実際に "
"``QuerySet`` を :class:`~django.core.paginator.Page` オブジェクトに分割する処"
"理をすべて代わりに実行してくれます。"

msgid ""
"Give :class:`~django.core.paginator.Paginator` a list of objects, plus the "
"number of items you'd like to have on each page, and it gives you methods "
"for accessing the items for each page:"
msgstr ""
":class:`~django.core.paginator.Paginator` にオブジェクトのリストと、各ページ"
"に持たせたいアイテムの数を与えてください。すると、各ページのアイテムにアクセ"
"スできるメソッドが使えるようになります。"

msgid ""
"Note that you can give ``Paginator`` a list/tuple, a Django ``QuerySet``, or "
"any other object with a ``count()`` or ``__len__()`` method. When "
"determining the number of objects contained in the passed object, "
"``Paginator`` will first try calling ``count()``, then fallback to using "
"``len()`` if the passed object has no ``count()`` method. This allows "
"objects such as Django's ``QuerySet`` to use a more efficient ``count()`` "
"method when available."
msgstr ""
"``Paginator`` には、リストやタプル、 Django の ``QuerySet``、``count()`` また"
"は ``__len__()`` メソッドを持つどんなオブジェクトでも与えることができます。渡"
"されたオブジェクトに含まれるオブジェクト数を特定するとき、``Paginator`` は最"
"初に ``count()`` メソッドの実行を試み、その後、渡されたオブジェクトが "
"``count()`` メソッドを実装していなかった場合のフォールバックとして ``len()`` "
"を使用します。この工夫により、Djangoの ``QuerySet`` などで、より効率のよい "
"``count()`` メソッドを利用できます。"

msgid "Paginating a ``ListView``"
msgstr "``ListView`` のページ分割"

msgid ""
":class:`django.views.generic.list.ListView` provides a builtin way to "
"paginate the displayed list. You can do this by adding a :attr:`~django."
"views.generic.list.MultipleObjectMixin.paginate_by` attribute to your view "
"class, for example::"
msgstr ""
":class:`django.views.generic.list.ListView` は、表示されたリストをページ分割"
"するビルトインの手段を提供します。そのためには、:attr:`~django.views.generic."
"list.MultipleObjectMixin.paginate_by` 属性をビュークラスに追加します。以下に"
"例を示します。"

msgid ""
"This limits the number of objects per page and adds a ``paginator`` and "
"``page_obj`` to the ``context``. To allow your users to navigate between "
"pages, add links to the next and previous page, in your template like this:"
msgstr ""
"これにより、各ページのオブジェクト数が制限され、``paginator`` と "
"``page_obj`` が ``context`` に追加されます。ユーザーがページ間を移動できるよ"
"うに、次のようにしてテンプレートに次のページと前のページへのリンクを追加しま"
"しょう。"

msgid "Using ``Paginator`` in a view function"
msgstr "``Paginator`` をビュー関数で使用する"

msgid ""
"Here's an example using :class:`~django.core.paginator.Paginator` in a view "
"function to paginate a queryset::"
msgstr ""
"以下は、queryset をページ分割するビュー関数内の :class:`~django.core."
"paginator.Paginator` の一例です。"

msgid ""
"In the template :file:`list.html`, you can include navigation between pages "
"in the same way as in the template for the ``ListView`` above."
msgstr ""
"テンプレート :file:`list.html` では、上に示した ``ListView`` のテンプレートと"
"同じ方法で、ページ間のナビゲーションを追加できます。"

msgid "Performance and optimization"
msgstr "パフォーマンスと最適化"

msgid ""
"This document provides an overview of techniques and tools that can help get "
"your Django code running more efficiently - faster, and using fewer system "
"resources."
msgstr ""
"このドキュメントでは、Django コードをより効率よく、早く、より少ないリソースで"
"実行するためのテクニックとツールについて、その概要を説明します。"

msgid ""
"Generally one's first concern is to write code that *works*, whose logic "
"functions as required to produce the expected output. Sometimes, however, "
"this will not be enough to make the code work as *efficiently* as one would "
"like."
msgstr ""
"一般に、最も関心があるのは、コードが正しく *動作する*、つまり、書かれたコード"
"のロジックがが期待通りの出力を生成することです。しかし、それだけでは、期待通"
"りに *効率よく* 動作しているとは言えません。"

msgid ""
"In this case, what's needed is something - and in practice, often a "
"collection of things - to improve the code's performance without, or only "
"minimally, affecting its behavior."
msgstr ""
"この場合、必要なのは、コードの振る舞いに影響を与えることなく、あるいは影響を"
"最小限に保ちつつ、そのパフォーマンスを向上させる実用的な方法です。"

msgid "General approaches"
msgstr "一般的なアプローチ"

msgid "What are you optimizing *for*?"
msgstr "*何のために* 最適化をしようとしているのか？"

msgid ""
"It's important to have a clear idea what you mean by 'performance'. There is "
"not just one metric of it."
msgstr ""
"最適化する「パフォーマンス」という言葉で何を意味しているのか、はっきりと考え"
"ておくことが大切です。パフォーマンスを測る指標は1つではないからです。"

msgid ""
"Improved speed might be the most obvious aim for a program, but sometimes "
"other performance improvements might be sought, such as lower memory "
"consumption or fewer demands on the database or network."
msgstr ""
"高速化というものがプログラムのために最も明らかな目的かもしれません。しかし、"
"他の観点からパフォーマンスを向上することもできます。たとえば、メモリー消費量"
"を少なくするとか、データベースやネットワークのアクセス量を削減するといったこ"
"とが考えられます。"

msgid ""
"Improvements in one area will often bring about improved performance in "
"another, but not always; sometimes one can even be at the expense of "
"another. For example, an improvement in a program's speed might cause it to "
"use more memory. Even worse, it can be self-defeating - if the speed "
"improvement is so memory-hungry that the system starts to run out of memory, "
"you'll have done more harm than good."
msgstr ""
"1つの領域を改善すると、別の領域の性能も向上することがよくありますが、常にそう"
"とは限らず、一方が他方を犠牲にすることさえあります。たとえば、プログラムの速"
"度の改善がメモリ使用量の増加を引き起こすかもしれません。さらに悪いことに、そ"
"れが自滅的になるかもしれません。もし速度の改善がメモリを大幅に消費してしまっ"
"たら、システム上のメモリが足りなくなり、結果的に利益よりも害を与えることに"
"なってしまうでしょう。"

msgid ""
"There are other trade-offs to bear in mind. Your own time is a valuable "
"resource, more precious than CPU time. Some improvements might be too "
"difficult to be worth implementing, or might affect the portability or "
"maintainability of the code. Not all performance improvements are worth the "
"effort."
msgstr ""
"他にも気に留めておく必要があるトレードオフがあります。あなた自身の時間が CPU "
"時間以上に貴重なリソースだということです。一部の改善は実装する価値がないほど"
"難しすぎるかもしれず、ポータビリティやコードメンテナンスに影響を与えてしまう"
"かもしれません。すべての性能改善に努力する価値があるわけではないのです。"

msgid ""
"So, you need to know what performance improvements you are aiming for, and "
"you also need to know that you have a good reason for aiming in that "
"direction - and for that you need:"
msgstr ""
"そのため、何を目的としたパフォーマンスの改善なのかを知っておくべき必要があり"
"ます。また、その目的とした方針に相応の理由があるかを知っておく必要もありま"
"す。"

msgid "Performance benchmarking"
msgstr "パフォーマンスのベンチマーク"

msgid ""
"It's no good just guessing or assuming where the inefficiencies lie in your "
"code."
msgstr ""
"コード中で効率の悪い部分を、単に想像したり当て推量したりするというのは、あま"
"り良い考えではありません。"

msgid "Django tools"
msgstr "Django のツール"

msgid ""
"`django-debug-toolbar <https://github.com/jazzband/django-debug-toolbar/>`_ "
"is a very handy tool that provides insights into what your code is doing and "
"how much time it spends doing it. In particular it can show you all the SQL "
"queries your page is generating, and how long each one has taken."
msgstr ""
"`django-debug-toolbar <https://github.com/jazzband/django-debug-toolbar/>`_ "
"は、コードの動作や実行時間を確認する手段を提供してくれる、非常に便利なツール"
"です。特に、ページが生成するすべての SQL クエリと、そのそれぞれの実行時間を表"
"示してくれる機能が有用です。"

msgid ""
"Third-party panels are also available for the toolbar, that can (for "
"example) report on cache performance and template rendering times."
msgstr ""
"サードパーティ製のパネルをツールバーに追加することも可能です。それにより、た"
"とえば、キャッシュのパフォーマンスや、テンプレートのレンダリング時間を測定で"
"きます。"

msgid "Third-party services"
msgstr "サードパーティのサービス"

msgid ""
"There are a number of free services that will analyze and report on the "
"performance of your site's pages from the perspective of a remote HTTP "
"client, in effect simulating the experience of an actual user."
msgstr ""
"サイト上のページのパフォーマンスを分析・レポートしてくれる無料のサービスが数"
"多く存在します。これらのサービスでは、実際のユーザーエクスペリエンスをリモー"
"トの HTTP クライアントの観点からシミュレートしてくれます。"

msgid ""
"These can't report on the internals of your code, but can provide a useful "
"insight into your site's overall performance, including aspects that can't "
"be adequately measured from within Django environment. Examples include:"
msgstr ""
"これらのサービスは、コードの内部について報告することはできませんが、Django 環"
"境内部からでは十分に測定できない観点も含めて、サイト全体のパフォーマンスにつ"
"いて役に立つ見解を提供してくれます。例えば、次のようなサービスがあります。"

msgid "`Yahoo's Yslow <http://yslow.org/>`_"
msgstr "`Yahoo's Yslow <http://yslow.org/>`_"

msgid "`Google PageSpeed <https://developers.google.com/speed/>`_"
msgstr "`Google PageSpeed <https://developers.google.com/speed/>`_"

msgid ""
"There are also several paid-for services that perform a similar analysis, "
"including some that are Django-aware and can integrate with your codebase to "
"profile its performance far more comprehensively."
msgstr ""
"同様の分析を実施する有料サービスもいくつかあり、一部は Django を認識するた"
"め、コードベースと統合して性能のプロファイルをより包括的に得られます。"

msgid "Get things right from the start"
msgstr "最初から物事を正しく行う"

msgid ""
"Some work in optimization involves tackling performance shortcomings, but "
"some of the work can be built-in to what you'd do anyway, as part of the "
"good practices you should adopt even before you start thinking about "
"improving performance."
msgstr ""
"最適化には、パフォーマンスの悪い部分を改善する作業も含まれますが、パフォーマ"
"ンスの向上を考える前に取り入れるべき点として、どんな場合でも作業に採用できる"
"良い習慣があります。"

msgid ""
"In this respect Python is an excellent language to work with, because "
"solutions that look elegant and feel right usually are the best performing "
"ones. As with most skills, learning what \"looks right\" takes practice, but "
"one of the most useful guidelines is:"
msgstr ""
"この点においてPython は優れた言語であり、エレガントに見え、正しいと感じる解決"
"策が通常、最も性能が良いものです。ほとんどのスキルと同様に、「正しいと見え"
"る」ものを学ぶには実践が必要ですが、最も有用なガイドラインの一つはこれです:"

msgid "Work at the appropriate level"
msgstr "適切なレベルで作業する"

msgid ""
"Django offers many different ways of approaching things, but just because "
"it's possible to do something in a certain way doesn't mean that it's the "
"most appropriate way to do it. For example, you might find that you could "
"calculate the same thing - the number of items in a collection, perhaps - in "
"a ``QuerySet``, in Python, or in a template."
msgstr ""
"Django は様々なアプローチ方法を提供しますが、ある方法で何かができるからといっ"
"て、それが最も適切な方法であるとは限りません。例えば、同じこと (コレクション"
"内のアイテムの数など) を ``QuerySet`` で、 Python で、あるいはテンプレートで"
"計算できるかもしれません。"

msgid ""
"However, it will almost always be faster to do this work at lower rather "
"than higher levels. At higher levels the system has to deal with objects "
"through multiple levels of abstraction and layers of machinery."
msgstr ""
"しかし、この作業を高いレベルよりも低いレベルで行う方が、ほとんどの場合、速く"
"なります。高いレベルでは、システムは複数の抽象化レベルとマシンの層を通じてオ"
"ブジェクトを扱わなければなりません。"

msgid ""
"That is, the database can typically do things faster than Python can, which "
"can do them faster than the template language can::"
msgstr ""
"つまり、データベースは通常、Pythonよりも速く処理ができ、Pythonはテンプレート"
"言語よりも速く処理ができます:"

msgid ""
"Generally speaking, the most appropriate level for the job is the lowest-"
"level one that it is comfortable to code for."
msgstr ""
"通常、その仕事に最も適したレベルは、コードを書くのに快適な最も低いレベルのも"
"のです。"

msgid "The example above is merely illustrative."
msgstr "上記の例は単なる例示に過ぎません"

msgid ""
"Firstly, in a real-life case you need to consider what is happening before "
"and after your count to work out what's an optimal way of doing it *in that "
"particular context*. The database optimization documents describes :ref:`a "
"case where counting in the template would be better "
"<overuse_of_count_and_exists>`."
msgstr ""
"まず第一に、実際のケースでは、カウントの前後に何が起こっているかを考慮し、 *"
"その特定のコンテキストにおいて* 最適な方法を見つけ出す必要があります。データ"
"ベースの最適化に関するドキュメントでは、 :ref:`テンプレートの中でカウントした"
"方が良い場合 <overuse_of_count_and_exists>` について説明しています。"

msgid ""
"Secondly, there are other options to consider: in a real-life case, "
"``{{ my_bicycles.count }}``, which invokes the ``QuerySet`` ``count()`` "
"method directly from the template, might be the most appropriate choice."
msgstr ""
"次に、他の選択肢も考慮すべきです。実際のケースでは、テンプレートから直接 "
"``QuerySet`` の ``count()`` メソッドを呼び出す ``{{ my_bicycles.count }}`` が"
"最も適切な選択かもしれません。"

msgid ""
"Often it is expensive (that is, resource-hungry and slow) to compute a "
"value, so there can be huge benefit in saving the value to a quickly "
"accessible cache, ready for the next time it's required."
msgstr ""
"値の計算は高コストになる（つまり、リソースを多く消費し、遅い）ことが多いの"
"で、その値をすぐにアクセス可能なキャッシュに保存しておくことで、次に必要にな"
"る時のための大きなメリットになります。"

msgid ""
"It's a sufficiently significant and powerful technique that Django includes "
"a comprehensive caching framework, as well as other smaller pieces of "
"caching functionality."
msgstr ""
"これは十分に重要で強力な技術なため、Djangoには包括的なキャッシュフレームワー"
"クと他の小さなキャッシュ機能の部品が含まれています。"

msgid ":doc:`The caching framework </topics/cache>`"
msgstr ":doc:`キャッシュフレームワーク </topics/cache>`"

msgid ""
"Django's :doc:`caching framework </topics/cache>` offers very significant "
"opportunities for performance gains, by saving dynamic content so that it "
"doesn't need to be calculated for each request."
msgstr ""
"Django の :doc:`キャッシュフレームワーク </topics/cache>` は、動的なコンテン"
"ツを保存して、リクエストごとに再計算しないで済むようにすることで、パフォーマ"
"ンスを向上するための非常に大きな可能性を提供します。"

msgid ""
"For convenience, Django offers different levels of cache granularity: you "
"can cache the output of specific views, or only the pieces that are "
"difficult to produce, or even an entire site."
msgstr ""
"利便性のため、Django は様々なレベルのキャッシュの粒度を提供しています。特定の"
"ビューの出力をキャッシュしたり、生成するのに時間のかかるパーツだけをキャッ"
"シュしたり、あるいは、サイト全体をキャッシュすることでさえ可能です。"

msgid ""
"Implementing caching should not be regarded as an alternative to improving "
"code that's performing poorly because it has been written badly. It's one of "
"the final steps toward producing well-performing code, not a shortcut."
msgstr ""
"キャッシュの実装は、書き方が良くないことが原因でパフォーマンスが悪いコードを"
"改善する手段として考えるべきではありません。キャッシュは、パフォーマンスの良"
"いコードを生み出すための最終段階の一つであり、近道ではありません。"

msgid ":class:`~django.utils.functional.cached_property`"
msgstr ":class:`~django.utils.functional.cached_property`"

msgid ""
"It's common to have to call a class instance's method more than once. If "
"that function is expensive, then doing so can be wasteful."
msgstr ""
"クラスのインスタンスのメソッドを複数回呼ぶ必要があるというのはよくあることで"
"す。その関数の実行が高コストである場合、複数回の呼び出しは無駄が多いです。"

msgid ""
"Using the :class:`~django.utils.functional.cached_property` decorator saves "
"the value returned by a property; the next time the function is called on "
"that instance, it will return the saved value rather than re-computing it. "
"Note that this only works on methods that take ``self`` as their only "
"argument and that it changes the method to a property."
msgstr ""
":class:`~django.utils.functional.cached_property` デコレータを使うことで、プ"
"ロパティが返す値を保存して、次回同じインスタンスで関数が呼ばれた時、その値を"
"再計算する代わりに、保存しておいた値を返すようにすることができます。ただし、"
"このデコレータが機能するのは、メソッドが引数として ``self`` のみを取り、メ"
"ソッドをプロパティーに変えられる場合のみなので、注意してください。"

msgid ""
"Certain Django components also have their own caching functionality; these "
"are discussed below in the sections related to those components."
msgstr ""
"特定の Django コンポーネントは、独自のキャッシュ機能を実装しています。以下の"
"それらのコンポーネントに関係するセクションで解説します。"

msgid "Understanding laziness"
msgstr "遅延について理解する"

msgid ""
"*Laziness* is a strategy complementary to caching. Caching avoids "
"recomputation by saving results; laziness delays computation until it's "
"actually required."
msgstr ""
"*遅延 (laziness)* とは、キャッシュ機能を補完するもう1つの戦略です。キャッシュ"
"は結果を保存することで再計算を防ぎますが、遅延は実際に値が必要になるまで、計"
"算の実行を遅らせます。"

msgid ""
"Laziness allows us to refer to things before they are instantiated, or even "
"before it's possible to instantiate them. This has numerous uses."
msgstr ""
"遅延によりインスタンス化される前に、またはインスタンス化が可能になる以前で"
"あっても参照できるようになります。これにはさまざまな用途があります。"

msgid ""
"For example, :ref:`lazy translation <lazy-translations>` can be used before "
"the target language is even known, because it doesn't take place until the "
"translated string is actually required, such as in a rendered template."
msgstr ""
"たとえば、:ref:`遅延翻訳 <lazy-translations>` は対象となる言語自体が判別され"
"る前に使用できます。翻訳後の文字列がレンダリングされたテンプレートなどで実際"
"に必要になるまで使用されなくなるためです。"

msgid ""
"Laziness is also a way to save effort by trying to avoid work in the first "
"place. That is, one aspect of laziness is not doing anything until it has to "
"be done, because it may not turn out to be necessary after all. Laziness can "
"therefore have performance implications, and the more expensive the work "
"concerned, the more there is to gain through laziness."
msgstr ""
"そもそも怠惰（Laziness）とは、仕事を避けることで労力を節約することでもありま"
"す。つまり、怠け癖の一面は、やらなければならないことがあるまで何もしないこと"
"です。そのため、怠け癖はパフォーマンスにも影響し、高価な仕事であればあるほ"
"ど、怠け癖によって得られるものは大きくなります。"

msgid ""
"Python provides a number of tools for lazy evaluation, particularly through "
"the :py:term:`generator` and :py:term:`generator expression` constructs. "
"It's worth reading up on laziness in Python to discover opportunities for "
"making use of lazy patterns in your code."
msgstr ""
"Python は特に :py:term:`generator` と :py:term:`generator expression` を使っ"
"て、遅延評価のための多くのツールを提供します。あなたのコードで遅延パターンを"
"利用する機会を見つけるために、Pythonの遅延（Laziness）について読む価値があり"
"ます。"

msgid "Laziness in Django"
msgstr "Django における遅延"

msgid ""
"Django is itself quite lazy. A good example of this can be found in the "
"evaluation of ``QuerySets``. :ref:`QuerySets are lazy <querysets-are-lazy>`. "
"Thus a ``QuerySet`` can be created, passed around and combined with other "
"``QuerySets``, without actually incurring any trips to the database to fetch "
"the items it describes. What gets passed around is the ``QuerySet`` object, "
"not the collection of items that - eventually - will be required from the "
"database."
msgstr ""
"Django は遅延をうまく使います。このよい例として、``QuerySet`` の評価が挙げら"
"れます。:ref:`QuerySet は遅延評価されます <querysets-are-lazy>`。そのため、"
"``QuerySet`` は作成後、記述したアイテムを取得するためにデータベースへのアクセ"
"スを一切行うことなく、さまざまな場所に渡したり、他の ``QuerySet`` と組み合わ"
"せることができます。渡されるのは ``QuerySet`` オブジェクトであって、最終的に"
"はデータベースから取得されるアイテムのコレクションではないのです。"

msgid ""
"On the other hand, :ref:`certain operations will force the evaluation of a "
"QuerySet <when-querysets-are-evaluated>`. Avoiding the premature evaluation "
"of a ``QuerySet`` can save making an expensive and unnecessary trip to the "
"database."
msgstr ""
"他方で、:ref:`特定の操作は QuerySet の評価を強制します <when-querysets-are-"
"evaluated>`。``QuerySet`` の時期尚早な評価を回避することで、高コストで不必要"
"なデータベースへのアクセスを節約できます。"

msgid ""
"Django also offers a :meth:`~django.utils.functional.keep_lazy` decorator. "
"This allows a function that has been called with a lazy argument to behave "
"lazily itself, only being evaluated when it needs to be. Thus the lazy "
"argument - which could be an expensive one - will not be called upon for "
"evaluation until it's strictly required."
msgstr ""
"Django には :meth:`~django.utils.functional.keep_lazy` デコレータもあります。"
"これにより、遅延引数で呼び出された関数は、必要なときだけ評価されるようになり"
"ます。このため、遅延引数 (高コストな引数である可能性もあります) は、必要なと"
"きだけ評価されるようになります。"

msgid "Databases"
msgstr "データベース"

msgid "Database optimization"
msgstr "データベースの最適化"

msgid ""
"Django's database layer provides various ways to help developers get the "
"best performance from their databases. The :doc:`database optimization "
"documentation </topics/db/optimization>` gathers together links to the "
"relevant documentation and adds various tips that outline the steps to take "
"when attempting to optimize your database usage."
msgstr ""
"Djangoのデータベース層は、開発者がデータベースを最大限活用できるように、さま"
"ざまな方法を提供しています。 :doc:`データベースアクセスの最適化ドキュメント "
"</topics/db/optimization>` では、データベースの利用を最適化する際にとるべき手"
"順を、大まかにいくつかの見出しとしてまとめています。それぞれの見出しの下に、"
"関連するドキュメントへのリンクを集約した上で、さまざまなヒントを追加していま"
"す。"

msgid "Other database-related tips"
msgstr "その他のデータベース関連の tips"

msgid ""
"Enabling :ref:`persistent-database-connections` can speed up connections to "
"the database accounts for a significant part of the request processing time."
msgstr ""
":ref:`persistent-database-connections` を有効化すると、リクエストの処理時間の"
"かなりの部分を占めるデータベースへのコネクションが高速化できます。"

msgid ""
"This helps a lot on virtualized hosts with limited network performance, for "
"example."
msgstr ""
"これは、たとえばネットワーク性能が限定された仮想化ホストにおいて、とても効果"
"的です。"

msgid "HTTP performance"
msgstr "HTTP のパフォーマンス"

msgid ""
"Django comes with a few helpful pieces of :doc:`middleware </ref/"
"middleware>` that can help optimize your site's performance. They include:"
msgstr ""
"Django は、サイトのパフォーマンス改善に役立ついくつかの :doc:`ミドルウェア </"
"ref/middleware>` を用意しています。以下のようなものがあります。"

msgid ":class:`~django.middleware.http.ConditionalGetMiddleware`"
msgstr ":class:`~django.middleware.http.ConditionalGetMiddleware`"

msgid ""
"Adds support for modern browsers to conditionally GET responses based on the "
"``ETag`` and ``Last-Modified`` headers. It also calculates and sets an ETag "
"if needed."
msgstr ""
"モダンなブラウザが ``ETag`` と ``Last-Modified`` ヘッダを元に条件的にレスポン"
"スを GET するためのサポートを追加します。"

msgid ":class:`~django.middleware.gzip.GZipMiddleware`"
msgstr ":class:`~django.middleware.gzip.GZipMiddleware`"

msgid ""
"Compresses responses for all modern browsers, saving bandwidth and transfer "
"time. Note that GZipMiddleware is currently considered a security risk, and "
"is vulnerable to attacks that nullify the protection provided by TLS/SSL. "
"See the warning in :class:`~django.middleware.gzip.GZipMiddleware` for more "
"information."
msgstr ""
"すべてのモダンブラウザのレスポンスを圧縮し、帯域幅と転送時間を節約します。た"
"だし、GZipMiddleware は現在セキュリティリスクと見なされており、TLS/SSL によっ"
"て提供される保護を無効にする攻撃に対して脆弱です。詳細については、 :class:"
"`~django.middleware.gzip.GZipMiddleware` の警告を参照してください。"

msgid "Sessions"
msgstr "セッション"

msgid ""
":ref:`Using cached sessions <cached-sessions-backend>` may be a way to "
"increase performance by eliminating the need to load session data from a "
"slower storage source like the database and instead storing frequently used "
"session data in memory."
msgstr ""
":ref:`キャッシュされたセッションの使用 <cached-sessions-backend>` は、データ"
"ベースのような遅いストレージソースからセッションデータを読み込む必要をなく"
"し、頻繁に使用されるセッションデータをメモリ内に保存することで、パフォーマン"
"スを向上させるかもしれません。"

msgid "Static files"
msgstr "静的ファイル"

msgid ""
"Static files, which by definition are not dynamic, make an excellent target "
"for optimization gains."
msgstr ""
"静的ファイル (定義により、動的に生成されないファイル) は、最適化を施すのに格"
"好のターゲットです。"

msgid ":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage`"
msgstr ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage`"

msgid ""
"By taking advantage of web browsers' caching abilities, you can eliminate "
"network hits entirely for a given file after the initial download."
msgstr ""
"ウェブブラウザのキャッシュ機能を利用することで、あるファイルを最初にダウン"
"ロードした後のネットワークヒットを完全に無くすことができます。"

msgid ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` "
"appends a content-dependent tag to the filenames of :doc:`static files </ref/"
"contrib/staticfiles>` to make it safe for browsers to cache them long-term "
"without missing future changes - when a file changes, so will the tag, so "
"browsers will reload the asset automatically."
msgstr ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` は、"
"ブラウザが将来の変更を見逃すことなく長期間にわたって安全にキャッシュできるよ"
"うに、 :doc:`静的ファイル </ref/contrib/staticfiles>` のファイル名に内容依存"
"のタグを追加します。ファイルが変更されるとタグも変更されるため、ブラウザは自"
"動的にアセットをリロードします。"

msgid "\"Minification\""
msgstr "\"Minification\""

msgid ""
"Several third-party Django tools and packages provide the ability to "
"\"minify\" HTML, CSS, and JavaScript. They remove unnecessary whitespace, "
"newlines, and comments, and shorten variable names, and thus reduce the size "
"of the documents that your site publishes."
msgstr ""
"いくつかのサードパーティ製の Django ツールやパッケージは、HTML、CSS、そして "
"JavaScript を最小化する (\"minify\") 機能を提供します。これらは不要なホワイト"
"スペースや改行、コメントを取り除き、変数名を短縮することで、サイトが公開する"
"ドキュメントのサイズを削減してくれます。"

msgid "Template performance"
msgstr "テンプレートのパフォーマンス"

msgid "Note that:"
msgstr "注意:"

msgid "using ``{% block %}`` is faster than using ``{% include %}``"
msgstr "``{% block %}`` の使用は ``{% include %}`` より高速です。"

msgid ""
"heavily-fragmented templates, assembled from many small pieces, can affect "
"performance"
msgstr ""
"多数の分割されたテンプレートパーツからページを生成すると、パフォーマンスに影"
"響することがあります。"

msgid "The cached template loader"
msgstr "キャッシュテンプレートローダー"

msgid ""
"Enabling the :class:`cached template loader <django.template.loaders.cached."
"Loader>` often improves performance drastically, as it avoids compiling each "
"template every time it needs to be rendered."
msgstr ""
":class:`cached template loader <django.template.loaders.cached.Loader>` を有"
"効にすると、パフォーマンスが劇的に改善する場合が多いです。このローダーを使用"
"することで、テンプレートのレンダリングが必要になった場合に、各テンプレートを"
"毎回コンパイルせずに済むようになるためです。"

msgid "Using different versions of available software"
msgstr "利用可能なソフトウェアの異なるバージョンを使う"

msgid ""
"It can sometimes be worth checking whether different and better-performing "
"versions of the software that you're using are available."
msgstr ""
"現在使用しているソフトウェアの、より性能の高い別バージョンが利用可能かどうか"
"を確認する価値がある場合もあります。"

msgid ""
"These techniques are targeted at more advanced users who want to push the "
"boundaries of performance of an already well-optimized Django site."
msgstr ""
"これらのテクニックは、すでに最適化された Django サイトのパフォーマンスの限界"
"に挑戦したい上級ユーザーを対象としています。"

msgid ""
"However, they are not magic solutions to performance problems, and they're "
"unlikely to bring better than marginal gains to sites that don't already do "
"the more basic things the right way."
msgstr ""
"しかし、これらはパフォーマンス問題に対する魔法のような解決策ではありません"
"し、より基本的なことをすでに正しい方法で行っていないサイトに、わずかな利益以"
"上のものをもたらす可能性は低いでしょう。"

msgid ""
"It's worth repeating: **reaching for alternatives to software you're already "
"using is never the first answer to performance problems**. When you reach "
"this level of optimization, you need a formal benchmarking solution."
msgstr ""
"繰り返しになりますが **すでに使用しているソフトウェアの代替を探すことは、パ"
"フォーマンス問題に対する最初の答えでは決してありません** 。このレベルの最適化"
"に達すると、正式なベンチマーク・ソリューションが必要になります。"

msgid "Newer is often - but not always - better"
msgstr "新しいものは (常にとはいえないけれども) より良いものである"

msgid ""
"It's fairly rare for a new release of well-maintained software to be less "
"efficient, but the maintainers can't anticipate every possible use-case - so "
"while being aware that newer versions are likely to perform better, don't "
"assume that they always will."
msgstr ""
"よくメンテナンスされたソフトウェアの新しいリリースの動作が遅くなることはかな"
"り稀ですが、メンテナーはすべてのユースケースを予測することはできません。その"
"ため、新しいバージョンは性能が向上する可能性が高いことを認識しつつも、常にそ"
"うであると仮定するべきではありません。"

msgid ""
"This is true of Django itself. Successive releases have offered a number of "
"improvements across the system, but you should still check the real-world "
"performance of your application, because in some cases you may find that "
"changes mean it performs worse rather than better."
msgstr ""
"これは Django 自体にも当てはまります。リリースを重ねるごとに、システム全体に"
"わたって多くの改良が施されていますが、アプリケーションの実際のパフォーマンス"
"を確認するべきです。なぜなら、場合によっては変更によってパフォーマンスが向上"
"するどころか悪化する可能性もあるからです。"

msgid ""
"Newer versions of Python, and also of Python packages, will often perform "
"better too - but measure, rather than assume."
msgstr ""
"Pythonの新しいバージョンや、Pythonパッケージの新しいバージョンも、しばしばパ"
"フォーマンスが向上しますが、推測するのではなく、実際に測定してください。"

msgid ""
"Unless you've encountered an unusual performance problem in a particular "
"version, you'll generally find better features, reliability, and security in "
"a new release and that these benefits are far more significant than any "
"performance you might win or lose."
msgstr ""
"特定のバージョンで異常なパフォーマンスの問題に遭遇しない限り、通常新しいリ"
"リースはより優れた機能、信頼性、セキュリティ性能を持ち、これらの利点は、あな"
"たが得るか失うかもしれないパフォーマンスよりもはるかに重要です。"

msgid "Alternatives to Django's template language"
msgstr "Django テンプレート言語の代替"

msgid ""
"For nearly all cases, Django's built-in template language is perfectly "
"adequate. However, if the bottlenecks in your Django project seem to lie in "
"the template system and you have exhausted other opportunities to remedy "
"this, a third-party alternative may be the answer."
msgstr ""
"ほとんど全ての場合において、Django の組み込みテンプレート言語は十分です。しか"
"し、もしあなたの Django プロジェクトのボトルネックがテンプレートシステムにあ"
"ると見られ、それを改善するための他の機会を使い果たしたのなら、サードパーティ"
"製の代替手段が解決策になるかもしれません。"

msgid ""
"Jinja2_ can offer performance improvements, particularly when it comes to "
"speed."
msgstr ""
"Jinja2_ を使うと、パフォーマンス、特に速度の向上が得られる可能性があります。"

msgid ""
"Alternative template systems vary in the extent to which they share Django's "
"templating language."
msgstr ""
"代替テンプレートシステムは、Django のテンプレート言語をどの程度共有するかに"
"よって異なります。"

msgid ""
"*If* you experience performance issues in templates, the first thing to do "
"is to understand exactly why. Using an alternative template system may prove "
"faster, but the same gains may also be available without going to that "
"trouble - for example, expensive processing and logic in your templates "
"could be done more efficiently in your views."
msgstr ""
"テンプレートでパフォーマンスの問題が発生した場合、最初に行うべきことは、その"
"理由を正確に理解することです。代替のテンプレートシステムを使用することで速度"
"が向上するかもしれませんが、その手間をかけずに同じ利益を得ることも可能です。"
"たとえば、テンプレート内の高コストな処理やロジックは、ビュー内でより効率的に"
"行うことができます。"

msgid "Alternative software implementations"
msgstr "代替のソフトウェア実装"

msgid ""
"It may be worth checking whether Python software you're using has been "
"provided in a different implementation that can execute the same code faster."
msgstr ""
"あなたが使っているPythonソフトウェアが、同じコードをより速く実行できる別の実"
"装で提供されていないか確認する価値があるかもしれません。"

msgid ""
"However: most performance problems in well-written Django sites aren't at "
"the Python execution level, but rather in inefficient database querying, "
"caching, and templates. If you're relying on poorly-written Python code, "
"your performance problems are unlikely to be solved by having it execute "
"faster."
msgstr ""
"しかし、適切に書かれた Django サイトのほとんどのパフォーマンス問題は、Python "
"の実行レベルではなく、非効率なデータベースクエリ、キャッシュ、およびテンプ"
"レートにあります。もし、不適切に書かれた Python コードに依存している場合、そ"
"れがより速く実行されるようになっても、パフォーマンス問題が解決されることはあ"
"りません。"

msgid ""
"Using an alternative implementation may introduce compatibility, deployment, "
"portability, or maintenance issues. It goes without saying that before "
"adopting a non-standard implementation you should ensure it provides "
"sufficient performance gains for your application to outweigh the potential "
"risks."
msgstr ""
"別の実装を使用すると、互換性、デプロイメント、移植性、メンテナンスの問題が発"
"生する可能性があります。非標準の実装を採用する前に、それが潜在的なリスクを上"
"回る十分なパフォーマンスをアプリケーションにもたらすことを確認する必要がある"
"ことは言うまでもありません。"

msgid "With these caveats in mind, you should be aware of:"
msgstr "これらの注意事項を念頭に置いた上で、次の項を読んでください:"

msgid "`PyPy <https://www.pypy.org/>`_"
msgstr "`PyPy <https://www.pypy.org/>`_"

msgid ""
"`PyPy <https://www.pypy.org/>`_ is an implementation of Python in Python "
"itself (the 'standard' Python implementation is in C). PyPy can offer "
"substantial performance gains, typically for heavyweight applications."
msgstr ""
"`PyPy <https://www.pypy.org/>`_ は Python 自身で書かれた Python 実装です ('標"
"準の' Python 実装は C で書かれています)。heavyweight なアプリケーションの場"
"合、PyPy を使用するとパフォーマンスが大幅に向上する可能性があります。"

msgid ""
"A key aim of the PyPy project is `compatibility <https://www.pypy.org/compat."
"html>`_ with existing Python APIs and libraries. Django is compatible, but "
"you will need to check the compatibility of other libraries you rely on."
msgstr ""
"PyPy プロジェクトの主目的の1つは、既存の Python API とライブラリとの `互換性 "
"<https://www.pypy.org/compat.html>`_ です。Django は互換性がありますが、他の"
"依存ライブラリの互換性については確認が必要です。"

msgid "C implementations of Python libraries"
msgstr "Python ライブラリの C 実装"

msgid ""
"Some Python libraries are also implemented in C, and can be much faster. "
"They aim to offer the same APIs. Note that compatibility issues and behavior "
"differences are not unknown (and not always immediately evident)."
msgstr ""
"一部の Python ライブラリは C 言語で実装されており、はるかに高速です。これらは"
"同じ API を提供することを目指しています。互換性の問題や振る舞いの違いが存在す"
"ることが知られています（そして、それらは常にすぐには明らかにならないこともあ"
"ります）。"

msgid "Security in Django"
msgstr "Django におけるセキュリティ"

msgid ""
"This document is an overview of Django's security features. It includes "
"advice on securing a Django-powered site."
msgstr ""
"このドキュメントは、Django のセキュリティ機能の概要です。Django を利用したサ"
"イトを安全なものにするためのヒントを説明します。"

msgid "Cross site scripting (XSS) protection"
msgstr "クロス・サイト・スクリプティング (XSS) の防御"

msgid ""
"XSS attacks allow a user to inject client side scripts into the browsers of "
"other users. This is usually achieved by storing the malicious scripts in "
"the database where it will be retrieved and displayed to other users, or by "
"getting users to click a link which will cause the attacker's JavaScript to "
"be executed by the user's browser. However, XSS attacks can originate from "
"any untrusted source of data, such as cookies or web services, whenever the "
"data is not sufficiently sanitized before including in a page."
msgstr ""
"XSS 攻撃はあるユーザーに対してクライアント用のスクリプトを別のユーザーのブラ"
"ウザに読み込ませることを可能にしてしまいます。この攻撃は通常他のユーザーに対"
"して選択・表示を行うデータベース内に悪意のあるスクリプトを保存させる、あるい"
"は攻撃者の JavaScript がブラウザで実行されるリンクをユーザーにクリックさせる"
"ことでなされます。しかしながら、XSS 攻撃はページを読み込む前に十分なサニタイ"
"ズを行っていなければ、信頼できないクッキーやウェブ・サービスのようなデータが"
"発生の原因となることがあります。"

msgid ""
"Using Django templates protects you against the majority of XSS attacks. "
"However, it is important to understand what protections it provides and its "
"limitations."
msgstr ""
"Django のテンプレートを用いる事で多数の XSS 攻撃に対抗できます。しかしなが"
"ら、それがどのような防御策が用意でき、またその利用に際する制限について知るこ"
"とが重要になります。"

msgid ""
"Django templates :ref:`escape specific characters <automatic-html-escaping>` "
"which are particularly dangerous to HTML. While this protects users from "
"most malicious input, it is not entirely foolproof. For example, it will not "
"protect the following:"
msgstr ""
"Django は HTML に対して特に危険とみなされる :ref:`特定の文字列のエスケープ "
"<automatic-html-escaping>` を行います。この防御によってユーザーは大半の悪意の"
"ある入力から守られますが、いつも簡単で容易に利用できる訳ではありません。たと"
"えば、次に示す例では防御がなされません。"

msgid ""
"If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this can "
"result in unauthorized JavaScript execution, depending on how the browser "
"renders imperfect HTML. (Quoting the attribute value would fix this case.)"
msgstr ""
"もし ``var`` の値が ``'class1 onmouseover=javascript:func()'`` にセットされた"
"場合、不完全な HTML をそのブラウザがどのようにレンダリングするかによっては、"
"許可されていない Javascript を実行させる事になります。(このケースであれば属性"
"値のクオートを行えば対処できます)"

msgid ""
"It is also important to be particularly careful when using ``is_safe`` with "
"custom template tags, the :tfilter:`safe` template tag, :mod:`mark_safe "
"<django.utils.safestring>`, and when autoescape is turned off."
msgstr ""
"カスタム・テンプレート・タグと共に ``is_safe`` を用いたり、 :tfilter:`safe` "
"テンプレートタグや、 :mod:`mark_safe <django.utils.safestring>` の利用に加え"
"てオートエスケープが無効化されている場合十分な注意を払う必要があります。"

msgid ""
"In addition, if you are using the template system to output something other "
"than HTML, there may be entirely separate characters and words which require "
"escaping."
msgstr ""
"ここまでの内容に加えて、HTML 以外を出力するのにテンプレートシステムを利用して"
"いる場合、完全に別のエスケープすべき文字や単語が存在するかもしれません。"

msgid ""
"You should also be very careful when storing HTML in the database, "
"especially when that HTML is retrieved and displayed."
msgstr ""
"HTML をデータベース内に収集、特にその HTML が選択・表示される場合は十分な注意"
"を払う必要があります。"

msgid "Cross site request forgery (CSRF) protection"
msgstr "クロス・サイト・リクエスト・フォージェリ(CSRF)の防御"

msgid ""
"CSRF attacks allow a malicious user to execute actions using the credentials "
"of another user without that user's knowledge or consent."
msgstr ""
"CSRF 攻撃は悪意ある利用者が、あるユーザーが自身で持っている情報や承認を用いず"
"に、そのユーザーの認証情報での処理を発生させてしまう攻撃です。"

msgid ""
"Django has built-in protection against most types of CSRF attacks, providing "
"you have :ref:`enabled and used it <using-csrf>` where appropriate. However, "
"as with any mitigation technique, there are limitations. For example, it is "
"possible to disable the CSRF module globally or for particular views. You "
"should only do this if you know what you are doing. There are other :ref:"
"`limitations <csrf-limitations>` if your site has subdomains that are "
"outside of your control."
msgstr ""
"Django は大半の CSRF 攻撃に対応したビルトインの防御機構を備え、適切な所で :"
"ref:`有効化して利用できます <using-csrf>` 。しかしながら、いかなる緩和策にも"
"制限が存在します。たとえば、CSRF モジュールをグローバルにあるいは特定のビュー"
"だけ無効化できます。これは自身が何をしているのか理解している場合のみ行うべき"
"です。もしあなたのサイト内に管理対象外のサブドメインが存在すればそこにも :"
"ref:`制限 <csrf-limitations>` が存在します。"

msgid ""
":ref:`CSRF protection works <how-csrf-works>` by checking for a secret in "
"each POST request. This ensures that a malicious user cannot \"replay\" a "
"form POST to your website and have another logged in user unwittingly submit "
"that form. The malicious user would have to know the secret, which is user "
"specific (using a cookie)."
msgstr ""
":ref:`CSRFプロテクション <how-csrf-works>` はそれぞれのPOSTリクエストのシーク"
"レットを検証することで動作します。これにより、悪意のあるユーザーがあなたの"
"ウェブサイトに対してフォームのPOSTを「再送信」することはできず、他のログイン"
"済みユーザーは意識することなくフォームを送信できます。悪意のあるユーザーは"
"Cookieを使用したユーザー固有のシークレットを知る必要があります。"

msgid ""
"When deployed with :ref:`HTTPS <security-recommendation-ssl>`, "
"``CsrfViewMiddleware`` will check that the HTTP referer header is set to a "
"URL on the same origin (including subdomain and port). Because HTTPS "
"provides additional security, it is imperative to ensure connections use "
"HTTPS where it is available by forwarding insecure connection requests and "
"using HSTS for supported browsers."
msgstr ""
":ref:`HTTPS <security-recommendation-ssl>` でデプロイした場合、"
"``CsrfViewMiddleware`` は HTTP referer ヘッダが (サブドメインとポートを含め) "
"同一オリジンの URL にセットされているかをチェックします。HTTPS では強化された"
"セキュリティを利用できるため、可能な限り安全でないコネクションのリクエストを"
"転送したり、サポートされたブラウザでは HSTS を使用するなどして HTTPS コネク"
"ションを使用することが不可欠です。"

msgid ""
"Be very careful with marking views with the ``csrf_exempt`` decorator unless "
"it is absolutely necessary."
msgstr ""
"どうしても必要という場合を除いて、 ``csrf_exempt`` デコレータでビューをマーク"
"する際には十分注意してください。"

msgid "SQL injection protection"
msgstr "SQL injectionへの防御"

msgid ""
"SQL injection is a type of attack where a malicious user is able to execute "
"arbitrary SQL code on a database. This can result in records being deleted "
"or data leakage."
msgstr ""
"SQL injectionは、悪意ある攻撃者がデータベース任意のSQLコードを実行する攻撃で"
"す。これによって、レコードが削除されたり、情報が漏洩する可能性があります。"

msgid ""
"Django's querysets are protected from SQL injection since their queries are "
"constructed using query parameterization. A query's SQL code is defined "
"separately from the query's parameters. Since parameters may be user-"
"provided and therefore unsafe, they are escaped by the underlying database "
"driver."
msgstr ""
"Djangoのクエリセットは、クエリのパラメータ化によってクエリを構成するため、"
"SQL injectionから守られています。クエリのSQLコードはそのクエリのパラメータと"
"は独立に定義されています。パラメータはユーザが指定するものも有り、安全ではな"
"いので、低レイヤのデータベースドライバーによってエスケープされます。"

msgid ""
"Django also gives developers power to write :ref:`raw queries <executing-raw-"
"queries>` or execute :ref:`custom sql <executing-custom-sql>`. These "
"capabilities should be used sparingly and you should always be careful to "
"properly escape any parameters that the user can control. In addition, you "
"should exercise caution when using :meth:`~django.db.models.query.QuerySet."
"extra` and :class:`~django.db.models.expressions.RawSQL`."
msgstr ""
"Djangoは開発者に、:ref:`素のクエリを実行する <executing-raw-queries>` また"
"は :ref:`カスタムSQLを実行する <executing-custom-sql>` 力も与えています。これ"
"らの機能は慎重に使用すべきであり、ユーザーが制御できるパラメータを適切にエス"
"ケープすることを常に注意すべきです。さらに、:meth:`~django.db.models.query."
"QuerySet.extra` や :class:`~django.db.models.expressions.RawSQL` を使用する際"
"には注意が必要です。"

msgid "Clickjacking protection"
msgstr "クリックジャッキング (Clickjacking) に対する防御"

msgid ""
"Clickjacking is a type of attack where a malicious site wraps another site "
"in a frame. This attack can result in an unsuspecting user being tricked "
"into performing unintended actions on the target site."
msgstr ""
"クリックジャッキング (Clickjacking) は、悪意のあるサイトが他のサイトをフレー"
"ムの中に表示するタイプの攻撃です。攻撃の結果、疑いのないユーザーが騙されて"
"ターゲットのサイトに対して意図しない操作を行ってしまいます。"

msgid ""
"Django contains :ref:`clickjacking protection <clickjacking-prevention>` in "
"the form of the :mod:`X-Frame-Options middleware <django.middleware."
"clickjacking.XFrameOptionsMiddleware>` which in a supporting browser can "
"prevent a site from being rendered inside a frame. It is possible to disable "
"the protection on a per view basis or to configure the exact header value "
"sent."
msgstr ""
"Djangoは :ref:`クリックジャッキング保護 <clickjacking-prevention>` の仕組み"
"を :mod:`X-Frame-Options ミドルウェア <django.middleware.clickjacking."
"XFrameOptionsMiddleware>` で提供しています。サポートしているブラウザではサイ"
"トをフレーム内で描画しないようにします。この保護はビュー単位で無効化できま"
"す。あるいは、固定的にヘッダーの値を送信できます。"

msgid ""
"The middleware is strongly recommended for any site that does not need to "
"have its pages wrapped in a frame by third party sites, or only needs to "
"allow that for a small section of the site."
msgstr ""
"サードパーティのサイト上でページをフレーム内に表示する必要がないか、もし合っ"
"たとしてもごく少数のセクションしかないようなあらゆるサイトは、このミドルウェ"
"アを使用することを強く推奨します。"

msgid "SSL/HTTPS"
msgstr "SSL/HTTPS"

msgid ""
"It is always better for security to deploy your site behind HTTPS. Without "
"this, it is possible for malicious network users to sniff authentication "
"credentials or any other information transferred between client and server, "
"and in some cases -- **active** network attackers -- to alter data that is "
"sent in either direction."
msgstr ""
"セキュリティの観点から、サイトを HTTPS の下でデプロイするのは常に良い選択で"
"す。HTTPS がなければ、悪意のあるネットワークユーザーが、クライアント・サー"
"バー間で通信される認証情報やその他あらゆる情報を盗み見たり、場合によっては、"
"**積極的な** ネットワーク攻撃者がどちらの方向でもデータ書き換えが可能になって"
"しまいます。"

msgid ""
"If you want the protection that HTTPS provides, and have enabled it on your "
"server, there are some additional steps you may need:"
msgstr ""
"HTTPS による保護をサーバー上で有効にするためには、多少の追加作業が必要になり"
"ます:"

msgid ""
"If necessary, set :setting:`SECURE_PROXY_SSL_HEADER`, ensuring that you have "
"understood the warnings there thoroughly. Failure to do this can result in "
"CSRF vulnerabilities, and failure to do it correctly can also be dangerous!"
msgstr ""
"必要な場合は、関連する注意点を完全に理解した上で、:setting:"
"`SECURE_PROXY_SSL_HEADER` をセットしてください。この設定に失敗すると、CSRF の"
"脆弱性の原因となり、大変な危険につながりかねません！"

msgid ""
"Set :setting:`SECURE_SSL_REDIRECT` to ``True``, so that requests over HTTP "
"are redirected to HTTPS."
msgstr ""
":setting:`SECURE_SSL_REDIRECT` を ``True`` にセットして、HTTP によるリクエス"
"トが HTTPS にリダイレクトされるようにしてください。"

msgid ""
"Please note the caveats under :setting:`SECURE_PROXY_SSL_HEADER`. For the "
"case of a reverse proxy, it may be easier or more secure to configure the "
"main web server to do the redirect to HTTPS."
msgstr ""
":setting:`SECURE_PROXY_SSL_HEADER` の注意点を確認してください。リバースプロキ"
"シの場合、メインのウェブサーバーを HTTPS にリダイレクトするよう設定した方が簡"
"単で安全かもしれません。"

msgid "Use 'secure' cookies."
msgstr "'安全な' クッキーを使用してください。"

msgid ""
"If a browser connects initially via HTTP, which is the default for most "
"browsers, it is possible for existing cookies to be leaked. For this reason, "
"you should set your :setting:`SESSION_COOKIE_SECURE` and :setting:"
"`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the browser to "
"only send these cookies over HTTPS connections. Note that this will mean "
"that sessions will not work over HTTP, and the CSRF protection will prevent "
"any POST data being accepted over HTTP (which will be fine if you are "
"redirecting all HTTP traffic to HTTPS)."
msgstr ""
"ブラウザが最初 HTTP で通信した場合 (これはブラウザのデフォルトの動作です)、既"
"存のクッキーが誰でも見える状態になっている可能性があります。そのため、:"
"setting:`SESSION_COOKIE_SECURE` と :setting:`CSRF_COOKIE_SECURE` を ``True`` "
"にセットする必要があります。これにより、ブラウザは HTTPS コネクションによる"
"クッキーを送信するようになります。これは、セッションが HTTP では動作せず、 "
"CSRF 保護が HTTP によって受け入れられたあらゆる POST データを防止することを意"
"味します (ただし、HTTP 通信を HTTPS にリダイレクトするよう設定しておけば問題"
"ありません)。"

msgid "Use :ref:`http-strict-transport-security` (HSTS)"
msgstr ":ref:`http-strict-transport-security` (HSTS) を使用してください。"

msgid ""
"HSTS is an HTTP header that informs a browser that all future connections to "
"a particular site should always use HTTPS. Combined with redirecting "
"requests over HTTP to HTTPS, this will ensure that connections always enjoy "
"the added security of SSL provided one successful connection has occurred. "
"HSTS may either be configured with :setting:`SECURE_HSTS_SECONDS`, :setting:"
"`SECURE_HSTS_INCLUDE_SUBDOMAINS`, and :setting:`SECURE_HSTS_PRELOAD`, or on "
"the web server."
msgstr ""
"HSTS は HTTP ヘッダで、特定のサイトに対する以降のコネクションが常に HTTPS を"
"使うことをブラウザに伝えるものです。HTTP から HTTPS にリクエストをリダイレク"
"トさせることと合わせて、コネクションが 1 つ成功したときに提供される SSL の安"
"全性を担保します。 HSTS は、:setting:`SECURE_HSTS_SECONDS`、:setting:"
"`SECURE_HSTS_INCLUDE_SUBDOMAINS`, と :setting:`SECURE_HSTS_PRELOAD`、もしくは"
"ウェブサーバ上のどれかで設定されます。"

msgid "Host header validation"
msgstr "Host ヘッダーの検証"

msgid ""
"Django uses the ``Host`` header provided by the client to construct URLs in "
"certain cases. While these values are sanitized to prevent Cross Site "
"Scripting attacks, a fake ``Host`` value can be used for Cross-Site Request "
"Forgery, cache poisoning attacks, and poisoning links in emails."
msgstr ""
"Django はいくつかのケースで、URL を組み立てるためにクライアントから送られてき"
"た ``Host`` ヘッダーを使用します。``Host`` ヘッダーの値は、クロス サイト スク"
"リプティング (XSS) 攻撃を回避するためにサニタイズされますが、それでもまだ偽"
"の ``Host`` 値はクロス サイト リクエスト フォージェリ (CSRF) やキャッシュポイ"
"ズニング攻撃、メールアドレス内のリンクへのポイズニング等に使用されます。"

msgid ""
"Because even seemingly-secure web server configurations are susceptible to "
"fake ``Host`` headers, Django validates ``Host`` headers against the :"
"setting:`ALLOWED_HOSTS` setting in the :meth:`django.http.HttpRequest."
"get_host()` method."
msgstr ""
"一見安全なウェブサーバー設定であっても偽の ``Host`` ヘッダーの可能性が残るた"
"め、Djangoは :meth:`django.http.HttpRequest.get_host()` メソッド内で "
"``Host`` ヘッダーの値を :setting:`ALLOWED_HOSTS` 設定で検証します。"

msgid ""
"This validation only applies via :meth:`~django.http.HttpRequest."
"get_host()`; if your code accesses the ``Host`` header directly from "
"``request.META`` you are bypassing this security protection."
msgstr ""
"このヘッダの検証は :meth:`~django.http.HttpRequest.get_host()` メソッドの実行"
"時にのみ適用されます。もし ``request.META`` から直接 ``Host`` ヘッダにアクセ"
"スするコードを書いてしまうと、このセキュリティプロテクションを回避してしまう"
"ので注意してください。"

msgid "For more details see the full :setting:`ALLOWED_HOSTS` documentation."
msgstr ""
"より詳しい情報については、:setting:`ALLOWED_HOSTS` ドキュメントをご覧くださ"
"い。"

msgid ""
"Previous versions of this document recommended configuring your web server "
"to ensure it validates incoming HTTP ``Host`` headers. While this is still "
"recommended, in many common web servers a configuration that seems to "
"validate the ``Host`` header may not in fact do so. For instance, even if "
"Apache is configured such that your Django site is served from a non-default "
"virtual host with the ``ServerName`` set, it is still possible for an HTTP "
"request to match this virtual host and supply a fake ``Host`` header. Thus, "
"Django now requires that you set :setting:`ALLOWED_HOSTS` explicitly rather "
"than relying on web server configuration."
msgstr ""
"以前のドキュメントでは、外部から渡される ``Host`` ヘッダーを検証して正しい値"
"にするようにウェブサーバーを設定することを推奨していました。これはまだ推奨さ"
"れますが、多くの一般的なウェブサーバーは ``Host`` ヘッダーを正しく検証するよ"
"うに設定できません。例えば、Apacheがそのように設定されたとしても、あなたの"
"Djangoサイトが ``ServerName`` に設定された非デフォルトの仮想ホストを扱うよう"
"にApacheに設定された場合、その仮想ホスト名に一致するような偽の ``Host`` ヘッ"
"ダーを与えたHTTPリクエストを作れます。したがって、ウェブサーバー設定にたよる"
"だけでなく、Djangoの :setting:`ALLOWED_HOSTS` に明示的に設定する必要がありま"
"す。"

msgid ""
"Additionally, Django requires you to explicitly enable support for the ``X-"
"Forwarded-Host`` header (via the :setting:`USE_X_FORWARDED_HOST` setting) if "
"your configuration requires it."
msgstr ""
"さらに、Djangoでは ``X-Forwarded-Host`` ヘッダーのサポートを使いたければ ( :"
"setting:`USE_X_FORWARDED_HOST` 設定で)明示的に有効にする必要があります。"

msgid "Referrer policy"
msgstr "リファラ ポリシー"

msgid ""
"Browsers use the ``Referer`` header as a way to send information to a site "
"about how users got there. By setting a *Referrer Policy* you can help to "
"protect the privacy of your users, restricting under which circumstances the "
"``Referer`` header is set. See :ref:`the referrer policy section of the "
"security middleware reference <referrer-policy>` for details."
msgstr ""
"ブラウザは ``Referer`` ヘッダーを、ユーザーがどのようにしてそのサイトにたどり"
"着いたかについての情報をサイトに送信する手段として使用します。 *Referrer "
"Policy* を設定することで、どのような状況で ``Referer`` ヘッダが設定されるかを"
"制限し、ユーザーのプライバシーを守ることができます。詳しくは :ref:`セキュリ"
"ティミドルウェアのリファレンス <referrer-policy>` のリファラポリシーのセク"
"ションを参照してください。"

msgid "Cross-origin opener policy"
msgstr "クロスオリジン・オープナー・ポリシー"

msgid ""
"The cross-origin opener policy (COOP) header allows browsers to isolate a "
"top-level window from other documents by putting them in a different context "
"group so that they cannot directly interact with the top-level window. If a "
"document protected by COOP opens a cross-origin popup window, the popup’s "
"``window.opener`` property will be ``null``. COOP protects against cross-"
"origin attacks. See :ref:`the cross-origin opener policy section of the "
"security middleware reference <cross-origin-opener-policy>` for details."
msgstr ""
"クロスオリジンオープナーポリシー（COOP）ヘッダーは、ブラウザがトップレベル"
"ウィンドウを他のドキュメントから隔離し、異なるコンテキストグループに配置する"
"ことを可能にします。これにより、それらがトップレベルウィンドウと直接的にやり"
"取りすることができなくなります。COOPで保護されたドキュメントがクロスオリジン"
"のポップアップウィンドウを開いた場合、ポップアップの ``window.opener`` プロパ"
"ティは ``null`` になります。COOPはクロスオリジン攻撃から保護します。詳細につ"
"いては、 :ref:`セキュリティミドルウェアリファレンスのクロスオリジンオープナー"
"ポリシーのセクション <cross-origin-opener-policy>` を参照してください。"

msgid ""
"Similar to the :ref:`CSRF limitations <csrf-limitations>` requiring a site "
"to be deployed such that untrusted users don't have access to any "
"subdomains, :mod:`django.contrib.sessions` also has limitations. See :ref:"
"`the session topic guide section on security <topics-session-security>` for "
"details."
msgstr ""
":ref:`CSRF limitation <csrf-limitations>` が、信頼できないユーザがサブドメイ"
"ンにアクセスできないようにサイトを配置することを要求しているのと同様に、 :"
"mod:`django.contrib.sessions` にも制限があります。詳細は :ref:`セッション・ト"
"ピックガイドのセキュリティに関するセクション <topics-session-security>` を参"
"照してください。"

msgid "User-uploaded content"
msgstr "ユーザーがアップロードしたコンテンツ"

msgid ""
"Consider :ref:`serving static files from a cloud service or CDN <staticfiles-"
"from-cdn>` to avoid some of these issues."
msgstr ""
"以下に説明する問題を回避するには :ref:`クラウドサービスやCDNから静的ファイル"
"を配信する <staticfiles-from-cdn>` ことを検討してください。"

msgid ""
"If your site accepts file uploads, it is strongly advised that you limit "
"these uploads in your web server configuration to a reasonable size in order "
"to prevent denial of service (DOS) attacks. In Apache, this can be easily "
"set using the LimitRequestBody_ directive."
msgstr ""
"あなたのサイトがファイルのアップロードを受け入れる場合、サービス拒否 (DOS) 攻"
"撃を防ぐために、Webサーバの設定でこれらのアップロードを適切なサイズに制限する"
"ことを強くお勧めします。Apache では LimitRequestBody_ ディレクティブを使って"
"簡単に設定できます。"

msgid ""
"If you are serving your own static files, be sure that handlers like "
"Apache's ``mod_php``, which would execute static files as code, are "
"disabled. You don't want users to be able to execute arbitrary code by "
"uploading and requesting a specially crafted file."
msgstr ""
"独自の静的ファイルを提供している場合は、Apache の ``mod_php`` のような、静的"
"ファイルをコードとして実行するハンドラが無効になっていることを確認してくださ"
"い。特別に細工されたファイルをアップロードしてリクエストすることで、ユーザが"
"任意のコードを実行できるようになるのは望ましくありません。"

msgid ""
"Django's media upload handling poses some vulnerabilities when that media is "
"served in ways that do not follow security best practices. Specifically, an "
"HTML file can be uploaded as an image if that file contains a valid PNG "
"header followed by malicious HTML. This file will pass verification of the "
"library that Django uses for :class:`~django.db.models.ImageField` image "
"processing (Pillow). When this file is subsequently displayed to a user, it "
"may be displayed as HTML depending on the type and configuration of your web "
"server."
msgstr ""
"Django のメディアアップロード処理には、セキュリティのベストプラクティスに従わ"
"ない方法でメディアが提供された場合、いくつかの脆弱性があります。具体的には、"
"有効な PNG ヘッダの後に悪意のある HTML が続く場合、HTML ファイルを画像として"
"アップロードできます。このファイルは、 Django が :class:`~django.db.models."
"ImageField` の画像処理 (Pillow) に使っているライブラリの検証を通過します。こ"
"のファイルがユーザに表示されるとき、 Web サーバの種類や設定によっては HTML と"
"して表示されるかもしれません。"

msgid ""
"No bulletproof technical solution exists at the framework level to safely "
"validate all user uploaded file content, however, there are some other steps "
"you can take to mitigate these attacks:"
msgstr ""
"フレームワークレベルですべてのユーザーがアップロードしたファイルの内容を安全"
"に検証するための完璧な技術的な解決策はありません。ただし、これらの攻撃を緩和"
"できるいくつかの手順があります:"

msgid ""
"One class of attacks can be prevented by always serving user uploaded "
"content from a distinct top-level or second-level domain. This prevents any "
"exploit blocked by `same-origin policy`_ protections such as cross site "
"scripting. For example, if your site runs on ``example.com``, you would want "
"to serve uploaded content (the :setting:`MEDIA_URL` setting) from something "
"like ``usercontent-example.com``. It's *not* sufficient to serve content "
"from a subdomain like ``usercontent.example.com``."
msgstr ""
"ある種の攻撃は、ユーザがアップロードしたコンテンツを常に異なるトップレベルま"
"たはセカンドレベルドメインから提供することで防ぐことができます。これにより、"
"クロスサイトスクリプティングのような `same-origin policy`_ の保護によってブ"
"ロックされる攻撃を防ぐことができます。例えば、あなたのサイトが ``example."
"com`` で運営されている場合、アップロードされたコンテンツ（:setting:"
"`MEDIA_URL` 設定）は ``usercontent-example.com`` のようなドメインから提供され"
"ることが望ましいです。 ``usercontent.example.com`` のようなサブドメインからコ"
"ンテンツを提供するだけでは十分ではありません。"

msgid ""
"Beyond this, applications may choose to define a list of allowable file "
"extensions for user uploaded files and configure the web server to only "
"serve such files."
msgstr ""
"さらに、アプリケーションは、ユーザーがアップロードしたファイルに対して許可さ"
"れるファイル拡張子のリストを定義し、そのようなファイルのみを提供するように "
"Web サーバーを設定することもできます。"

msgid "Additional security topics"
msgstr "その他のセキュリティトピック"

msgid ""
"While Django provides good security protection out of the box, it is still "
"important to properly deploy your application and take advantage of the "
"security protection of the web server, operating system and other components."
msgstr ""
"Django は、「箱から出してすぐに」優れたセキュリティ保護を提供しますが、アプリ"
"ケーションを適切にデプロイし、Web サーバやオペレーティングシステム、その他の"
"コンポーネントのセキュリティ保護を利用することが重要です。"

msgid ""
"Make sure that your Python code is outside of the web server's root. This "
"will ensure that your Python code is not accidentally served as plain text "
"(or accidentally executed)."
msgstr ""
"PythonコードがWebサーバのルートの外にあることを確認してください。こうすること"
"で、Pythonコードが誤ってプレーンテキストとして提供されない（あるいは誤って実"
"行されない）ようになります。"

msgid "Take care with any :ref:`user uploaded files <file-upload-security>`."
msgstr ""
":ref:`ユーザがアップロードしたファイル <file-upload-security>` には注意してく"
"ださい。"

msgid ""
"Django does not throttle requests to authenticate users. To protect against "
"brute-force attacks against the authentication system, you may consider "
"deploying a Django plugin or web server module to throttle these requests."
msgstr ""
"Djangoはユーザーを認証するためのリクエストの制限を行いません。認証システムへ"
"の総当たり攻撃から保護するためには、これらのリクエストを制限するためのDjango"
"プラグインやWebサーバーモジュールを導入することを検討してください。"

msgid ""
"Keep your :setting:`SECRET_KEY`, and :setting:`SECRET_KEY_FALLBACKS` if in "
"use, secret."
msgstr ""
"あなたの :setting:`SECRET_KEY` と :setting:`SECRET_KEY_FALLBACKS` を秘密にし"
"ておいてください。"

msgid ""
"It is a good idea to limit the accessibility of your caching system and "
"database using a firewall."
msgstr ""
"ファイアウォールを使用して、キャッシュシステムとデータベースへのアクセスを制"
"限することをお勧めします。"

msgid ""
"Take a look at the Open Web Application Security Project (OWASP) `Top 10 "
"list`_ which identifies some common vulnerabilities in web applications. "
"While Django has tools to address some of the issues, other issues must be "
"accounted for in the design of your project."
msgstr ""
"Open Web Application Security Project (OWASP) の `Top 10 list`_ を見てくださ"
"い。OWASP は、Web アプリケーションによくある脆弱性をいくつか挙げています。"
"Django には、いくつかの問題に対処するためのツールがありますが、それ以外はプロ"
"ジェクトの設計で考慮する必要があります。"

msgid ""
"Mozilla discusses various topics regarding `web security`_. Their pages also "
"include security principles that apply to any system."
msgstr ""
"Mozilla は `web security`_ に関する様々なトピックについて議論しています。彼ら"
"のページには、どのようなシステムにも適用できるセキュリティの原則も含まれてい"
"ます。"

msgid "Serializing Django objects"
msgstr "Django オブジェクトのシリアライズ"

msgid ""
"Django's serialization framework provides a mechanism for \"translating\" "
"Django models into other formats. Usually these other formats will be text-"
"based and used for sending Django data over a wire, but it's possible for a "
"serializer to handle any format (text-based or not)."
msgstr ""
"Django のシリアライズフレームワークは、Django のモデルを他のフォーマットに"
"「翻訳」する仕組みを提供します。通常、このような他のフォーマットはテキスト"
"ベースや Django データをネットワーク越しに送信するために使われるフォーマット"
"になりますが、シリアライザーはどんなフォーマットも (テキストベースと非テキス"
"トベースのいずれも) 処理可能です。"

msgid ""
"If you just want to get some data from your tables into a serialized form, "
"you could use the :djadmin:`dumpdata` management command."
msgstr ""
"あるデータをテーブルからシリアライズされた形式として取得したい場合、:djadmin:"
"`dumpdata` 管理コマンドが使用できます。"

msgid "Serializing data"
msgstr "データのシリアライズ"

msgid "At the highest level, you can serialize data like this::"
msgstr "最も高いレベルでは、次のようにデータをシリアライズできます。"

msgid ""
"The arguments to the ``serialize`` function are the format to serialize the "
"data to (see `Serialization formats`_) and a :class:`~django.db.models.query."
"QuerySet` to serialize. (Actually, the second argument can be any iterator "
"that yields Django model instances, but it'll almost always be a QuerySet)."
msgstr ""
"``serialize`` 関数の引数は、データをシリアライズするフォーマット (`シリアライ"
"ズフォーマット`_) とシリアライズする :class:`~django.db.models.query."
"QuerySet` です。(実際、第2引数は Django モデルのインスタンスを yield するどん"
"なイテレータでも渡せますが、ほとんど場合は QuerySet になります。)"

msgid "You can also use a serializer object directly::"
msgstr "シリアライザーオブジェクトを次のように直接使用することもできます。"

msgid ""
"This is useful if you want to serialize data directly to a file-like object "
"(which includes an :class:`~django.http.HttpResponse`)::"
msgstr ""
"これは次のようにデータをファイルライクなオブジェクト (:class:`~django.http."
"HttpResponse` を含む) に直接シリアライズしたい場合に便利です。"

msgid ""
"Calling :func:`~django.core.serializers.get_serializer` with an unknown :ref:"
"`format <serialization-formats>` will raise a ``django.core.serializers."
"SerializerDoesNotExist`` exception."
msgstr ""
":func:`~django.core.serializers.get_serializer` を未知の :ref:`フォーマット "
"<serialization-formats>` で呼び出すと、``django.core.serializers."
"SerializerDoesNotExist`` 例外が発生します。"

msgid "Subset of fields"
msgstr "フィールドのサブセット"

msgid ""
"If you only want a subset of fields to be serialized, you can specify a "
"``fields`` argument to the serializer::"
msgstr ""
"フィールドのサブセットのみをシリアライズしたい場合は、次のようにシリアライ"
"ザーに ``fields`` 引数を指定できます。"

msgid ""
"In this example, only the ``name`` and ``size`` attributes of each model "
"will be serialized. The primary key is always serialized as the ``pk`` "
"element in the resulting output; it never appears in the ``fields`` part."
msgstr ""
"この例では、各モデルの ``name`` と ``size`` 属性だけがシリアライズされます。"
"主キーは常に出力結果内の ``pk`` 要素としてシリアライズされ、``fields`` 部分に"
"は決して現れません。"

msgid ""
"Depending on your model, you may find that it is not possible to deserialize "
"a model that only serializes a subset of its fields. If a serialized object "
"doesn't specify all the fields that are required by a model, the "
"deserializer will not be able to save deserialized instances."
msgstr ""
"モデルによってはフィールドのサブセットだけをシリアライズしたモデルをデシリア"
"ライズすることは不可能かもしれません。もしシリアライズしたオブジェクトがモデ"
"ルで必須のすべてのフィールドを指定しなかった場合、デシリアライザーはデシリア"
"ライズされたインスタンスを保存できないでしょう。"

msgid "Inherited models"
msgstr "継承されたモデル"

msgid ""
"If you have a model that is defined using an :ref:`abstract base class "
"<abstract-base-classes>`, you don't have to do anything special to serialize "
"that model. Call the serializer on the object (or objects) that you want to "
"serialize, and the output will be a complete representation of the "
"serialized object."
msgstr ""
":ref:`抽象ベースクラス <abstract-base-classes>` を使用して定義したモデルの場"
"合、そのモデルをシリアライズするために特別なことは何もする必要がありません。"
"シリアライズしたいオブジェクト (または複数のオブジェクト) 上でシリアライザー"
"を呼べば、出力はシリアライズされたオブジェクトの完全な表現になります。"

msgid ""
"However, if you have a model that uses :ref:`multi-table inheritance <multi-"
"table-inheritance>`, you also need to serialize all of the base classes for "
"the model. This is because only the fields that are locally defined on the "
"model will be serialized. For example, consider the following models::"
msgstr ""
"しかし、:ref:`複数テーブルの継承 <multi-table-inheritance>` を利用したモデル"
"の場合、そのモデルのすべてのベースクラスもシリアライズする必要があります。な"
"ぜなら、モデル上でローカルに定義されたフィールドだけがシリアライズされるため"
"です。たとえば、次のようなモデルを考えてみてください。"

msgid "If you only serialize the Restaurant model::"
msgstr "もし次のように Reastaurant モデルだけをシリアライズした場合、"

msgid ""
"the fields on the serialized output will only contain the "
"``serves_hot_dogs`` attribute. The ``name`` attribute of the base class will "
"be ignored."
msgstr ""
"シリアライズされた出力のフィールドには、``serves_hot_dogs`` 属性だけが含まれ"
"ます。ベースクラスの ``name`` 属性は無視されます。"

msgid ""
"In order to fully serialize your ``Restaurant`` instances, you will need to "
"serialize the ``Place`` models as well::"
msgstr ""
"``Restaurant`` インスタンスを完全にシリアライズするためには、``Place`` モデル"
"も同様にシリアライズする必要があります。"

msgid "Deserializing data"
msgstr "データのデシリアライズ"

msgid "Deserializing data is very similar to serializing it::"
msgstr "データのデシリアライズも、シリアライズと非常によく似ています。"

msgid ""
"As you can see, the ``deserialize`` function takes the same format argument "
"as ``serialize``, a string or stream of data, and returns an iterator."
msgstr ""
"見ての通り、``deserialize`` 関数は、``serialize`` と同じ形式の引数であるデー"
"タの文字列またはストリームを取り、イテレータを返します。"

msgid ""
"However, here it gets slightly complicated. The objects returned by the "
"``deserialize`` iterator *aren't* regular Django objects. Instead, they are "
"special ``DeserializedObject`` instances that wrap a created -- but unsaved "
"-- object and any associated relationship data."
msgstr ""
"しかし、ここで処理は少し複雑になります。``deserialize`` イテレータによって返"
"されるオブジェクトは、通常の Django オブジェクト *ではありません*。代わりに、"
"作成された (ただし、保存されていない) オブジェクトと関連するリレーションデー"
"タをラップした、特別な ``DeserializedObject`` インスタンスです。"

msgid "Calling ``DeserializedObject.save()`` saves the object to the database."
msgstr ""
"``DeserializedObject.save()`` を呼ぶと、オブジェクトはデータベースに保存され"
"ます。"

msgid ""
"If the ``pk`` attribute in the serialized data doesn't exist or is null, a "
"new instance will be saved to the database."
msgstr ""
"もしシリアライズされたデータ内に ``pk`` 属性が存在しないか、null だった場合、"
"新しいインスタンスがデータベースに保存されます。"

msgid ""
"This ensures that deserializing is a non-destructive operation even if the "
"data in your serialized representation doesn't match what's currently in the "
"database. Usually, working with these ``DeserializedObject`` instances looks "
"something like::"
msgstr ""
"これにより、もしシリアライズされた表現内のデータが現在データベース内にある"
"データと一致しなかったとしても、デシリアライズ処理は非破壊的な操作であること"
"が保証されます。通常、``DeserializedObject`` インスタンスを用いた操作は、次の"
"ようになります。"

msgid ""
"In other words, the usual use is to examine the deserialized objects to make "
"sure that they are \"appropriate\" for saving before doing so. If you trust "
"your data source you can instead save the object directly and move on."
msgstr ""
"言い換えれば、通常の使用では、デシリアライズされたオブジェクトが保存する前に"
"保存するのに「適している」ことを確認します。もしデータソースを信頼しているな"
"ら、代わりにオブジェクトを直接保存してそのまま先に進めます。"

msgid ""
"The Django object itself can be inspected as ``deserialized_object.object``. "
"If fields in the serialized data do not exist on a model, a "
"``DeserializationError`` will be raised unless the ``ignorenonexistent`` "
"argument is passed in as ``True``::"
msgstr ""
"Django オブジェクト自体は、``deserialized_object.object`` として検査できま"
"す。シリアライズされたデータ内のフィールドがモデル上に存在しない場合は、"
"``ignorenonexistent`` 引数に ``True`` が渡されていない限り、"
"``DeserializationError`` が発生します。"

msgid "Serialization formats"
msgstr "シリアライズフォーマット"

msgid ""
"Django supports a number of serialization formats, some of which require you "
"to install third-party Python modules:"
msgstr ""
"Django は多数のシリアライズフォーマットをサポートしてします。一部のフォーマッ"
"トはサードパーティの Python モジュールが必要です。"

msgid "Identifier"
msgstr "識別子"

msgid "Information"
msgstr "情報"

msgid "``xml``"
msgstr "``xml``"

msgid "Serializes to and from a simple XML dialect."
msgstr "シンプルな XML 方言のシリアライズ・デシリアライズを行います。"

msgid "``json``"
msgstr "``json``"

msgid "Serializes to and from JSON_."
msgstr "JSON_ のシリアライズ・デシリアライズを行います。"

msgid "``jsonl``"
msgstr "``jsonl``"

msgid "Serializes to and from JSONL_."
msgstr "JSONL_ のシリアライズ・デシリアライズを行います。"

msgid "``yaml``"
msgstr "``yaml``"

msgid ""
"Serializes to YAML (YAML Ain't a Markup Language). This serializer is only "
"available if PyYAML_ is installed."
msgstr ""
"YAML (YAML Ain't a Markup Language) のシリアライズ・デシリアライズを行いま"
"す。このシリアライザーは PyYAML_ がインストールされている場合のみ利用できま"
"す。"

msgid "XML"
msgstr "XML"

msgid "The basic XML serialization format looks like this:"
msgstr "基本的なXMLのシリアライズフォーマットは以下のようなものです:"

msgid ""
"The whole collection of objects that is either serialized or deserialized is "
"represented by a ``<django-objects>``-tag which contains multiple "
"``<object>``-elements. Each such object has two attributes: \"pk\" and "
"\"model\", the latter being represented by the name of the app "
"(\"sessions\") and the lowercase name of the model (\"session\") separated "
"by a dot."
msgstr ""
"シリアライズまたはデシリアライズされたオブジェクトのコレクション全体は、複数"
"の ``<object>`` 要素を含む ``<djangoobjects>`` タグで表現されます。このような"
"オブジェクトはそれぞれ2つの属性を持ちます。\"pk\" と \"model\" です。後者はア"
"プリの名前 (\"sessions\") とモデルの小文字の名前 (\"session\") をドットで区"
"切って表します。"

msgid ""
"Each field of the object is serialized as a ``<field>``-element sporting the "
"fields \"type\" and \"name\". The text content of the element represents the "
"value that should be stored."
msgstr ""
"オブジェクトの各フィールドは \"type \"と \"name \"のフィールドを持つ "
"``<field>`` 要素としてシリアライズされます。要素のテキストコンテンツは格納さ"
"れるべき値を表します。"

msgid ""
"Foreign keys and other relational fields are treated a little bit "
"differently:"
msgstr "外部キーとその他のリレーション先フィールドは、少し違う扱いになります:"

msgid ""
"In this example we specify that the ``auth.Permission`` object with the PK "
"27 has a foreign key to the ``contenttypes.ContentType`` instance with the "
"PK 9."
msgstr ""
"この例では、PK 27の ``auth.Permission`` オブジェクトが、PK 9の "
"``contenttypes.ContentType`` インスタンスに対する外部キーを持つように指定して"
"います。"

msgid ""
"ManyToMany-relations are exported for the model that binds them. For "
"instance, the ``auth.User`` model has such a relation to the ``auth."
"Permission`` model:"
msgstr ""
"多対多のリレーションはそれらを結びつけるモデルに対してエクスポートされます。"
"例えば、``auth.User`` モデルは ``auth.Permission`` モデルに対してこのようなリ"
"レーションを持っています:"

msgid ""
"This example links the given user with the permission models with PKs 46 and "
"47."
msgstr ""
"この例では、与えられたユーザーをPK46と47を持つパーミッションモデルにリンクし"
"ています。"

msgid "Control characters"
msgstr "制御文字"

msgid ""
"If the content to be serialized contains control characters that are not "
"accepted in the XML 1.0 standard, the serialization will fail with a :exc:"
"`ValueError` exception. Read also the W3C's explanation of `HTML, XHTML, XML "
"and Control Codes <https://www.w3.org/International/questions/qa-controls>`_."
msgstr ""
"シリアライズされるコンテンツにXML 1.0標準では認められていない制御文字が含まれ"
"ている場合、 :exc:`ValueError` 例外が発生してシリアライズは失敗します。詳しく"
"はW3Cの `HTML, XHTML, XML and Control Codes <https://www.w3.org/"
"International/questions/qa-controls>`_ の説明を参照してください。"

msgid "JSON"
msgstr "JSON"

msgid ""
"When staying with the same example data as before it would be serialized as "
"JSON in the following way::"
msgstr ""
"以前と同じ例のデータを使うと、データは JSON として次のようにシリアライズされ"
"ます。"

msgid ""
"The formatting here is a bit simpler than with XML. The whole collection is "
"just represented as an array and the objects are represented by JSON objects "
"with three properties: \"pk\", \"model\" and \"fields\". \"fields\" is again "
"an object containing each field's name and value as property and property-"
"value respectively."
msgstr ""
"このフォーマットは、XML よりも少しシンプルです。コレクション全体は array とし"
"て表現され、オブジェクトは3つのプロパティ \"pk\"、\"model\"、\"fields\" を持"
"つ JSON オブジェクトとして表現されています。\"fields\" もオブジェクトであり、"
"各フィールド名と値がそれぞれプロパティとプロパティ値として含まれています。"

msgid ""
"Foreign keys have the PK of the linked object as property value. ManyToMany-"
"relations are serialized for the model that defines them and are represented "
"as a list of PKs."
msgstr ""
"外部キーは、プロパティ値としてリンクされたオブジェクトの PK を持ちます。"
"ManyToMany リレーションは、それを定義したモデルに対してシリアライズされ、PK "
"のリストとして表現されます。"

msgid ""
"Be aware that not all Django output can be passed unmodified to :mod:`json`. "
"For example, if you have some custom type in an object to be serialized, "
"you'll have to write a custom :mod:`json` encoder for it. Something like "
"this will work::"
msgstr ""
"すべての Django 出力が未修正のまま :mod:`json` に渡せるとは限らないことに注意"
"してください。たとえば、シリアライズするオブジェクトにカスタム型がある場合、"
"そのためのカスタム :mod:`json` エンコーダを書く必要があります。以下のようなも"
"のが機能します。"

msgid ""
"You can then pass ``cls=LazyEncoder`` to the ``serializers.serialize()`` "
"function::"
msgstr ""
"そして、``cls=LazyEncoder`` を ``serializers.serialize()`` 関数に渡します。"

msgid ""
"Also note that GeoDjango provides a :doc:`customized GeoJSON serializer </"
"ref/contrib/gis/serializers>`."
msgstr ""
"GeoDjango は :doc:`カスタマイズされた GeoJSON シリアライザー </ref/contrib/"
"gis/serializers>` を提供していることにも注意してください。"

msgid "``DjangoJSONEncoder``"
msgstr "``DjangoJSONEncoder``"

msgid ""
"The JSON serializer uses ``DjangoJSONEncoder`` for encoding. A subclass of :"
"class:`~json.JSONEncoder`, it handles these additional types:"
msgstr ""
"JSON シリアライザーは ``DjangoJSONEncoder`` をエンコーディングに使用します。:"
"class:`~json.JSONEncoder` のサブクラスであり、以下の追加の型を処理します。"

msgid ":class:`~datetime.datetime`"
msgstr ":class:`~datetime.datetime`"

msgid ""
"A string of the form ``YYYY-MM-DDTHH:mm:ss.sssZ`` or ``YYYY-MM-DDTHH:mm:ss."
"sss+HH:MM`` as defined in `ECMA-262`_."
msgstr ""
"`ECMA-262`_ で定義されている ``YYYY-MM-DDTHH:mm:ss.sssZ`` または ``YYYY-MM-"
"DDTHH:mm:ss.sss+HH:MM`` という形式の文字列。"

msgid ":class:`~datetime.date`"
msgstr ":class:`~datetime.date`"

msgid "A string of the form ``YYYY-MM-DD`` as defined in `ECMA-262`_."
msgstr "``YYYY-MM-DD`` という形式の文字列は、`ECMA-262`_ で定義されています。"

msgid ":class:`~datetime.time`"
msgstr ":class:`~datetime.time`"

msgid "A string of the form ``HH:MM:ss.sss`` as defined in `ECMA-262`_."
msgstr ""
"``HH:MM:ss.sss`` という形式の文字列は、`ECMA-262`_ で定義されています。"

msgid ":class:`~datetime.timedelta`"
msgstr ":class:`~datetime.timedelta`"

msgid ""
"A string representing a duration as defined in ISO-8601. For example, "
"``timedelta(days=1, hours=2, seconds=3.4)`` is represented as "
"``'P1DT02H00M03.400000S'``."
msgstr ""
"期間を表現する文字列は ISO-8601 で定義されています。たとえば、"
"``timedelta(days=1, hours=2, seconds=3.4)`` は ``'P1DT02H00M03.400000S'`` と"
"表現されます。"

msgid ""
":class:`~decimal.Decimal`, ``Promise`` (``django.utils.functional.lazy()`` "
"objects), :class:`~uuid.UUID`"
msgstr ""
":class:`~decimal.Decimal`, ``Promise`` (``django.utils.functional.lazy()`` "
"objects), :class:`~uuid.UUID`"

msgid "A string representation of the object."
msgstr "オブジェクトの文字列表現です。"

msgid "JSONL"
msgstr "JSONL"

msgid ""
"*JSONL* stands for *JSON Lines*. With this format, objects are separated by "
"new lines, and each line contains a valid JSON object. JSONL serialized data "
"looks like this::"
msgstr ""
"*JSONL* は *JSON Lines* の略です。このフォーマットでは、オブジェクトは改行で"
"区切られ、各行には有効なJSONオブジェクトが含まれます。JSONLでシリアライズされ"
"たデータは次のようになります:"

msgid ""
"JSONL can be useful for populating large databases, since the data can be "
"processed line by line, rather than being loaded into memory all at once."
msgstr ""
"JSONLは、データを一度にメモリに読み込むのではなく、一行ずつ処理できるため、大"
"規模なデータベースにデータを入力するのに便利です。"

msgid "YAML"
msgstr "YAML"

msgid ""
"YAML serialization looks quite similar to JSON. The object list is "
"serialized as a sequence mappings with the keys \"pk\", \"model\" and "
"\"fields\". Each field is again a mapping with the key being name of the "
"field and the value the value:"
msgstr ""
"YAML シリアライズは JSON にとてもよく似ています。オブジェクトリストは "
"\"pk\"、\"model\"、\"fields\" を持つマッピングのシーケンスとしてシリアライズ"
"されます。各フィールドもマッピングで、キーがフィールド名、値が値になります。"

msgid "Referential fields are again represented by the PK or sequence of PKs."
msgstr "参照フィールドは、同様に PK または PK のシーケンスとして表現されます。"

msgid "Natural keys"
msgstr "ナチュラルキー"

msgid ""
"The default serialization strategy for foreign keys and many-to-many "
"relations is to serialize the value of the primary key(s) of the objects in "
"the relation. This strategy works well for most objects, but it can cause "
"difficulty in some circumstances."
msgstr ""
"デフォルトの外部キーと多対多リレーションのシリアライズ戦略は、オブジェクトの"
"プライマリーキーの値をリレーション内にシリアライズするというものです。この戦"
"略はほとんどのオブジェクトに対してうまく機能しますが、いくつかの状況で困難を"
"引き起こします。"

msgid ""
"Consider the case of a list of objects that have a foreign key referencing :"
"class:`~django.contrib.contenttypes.models.ContentType`. If you're going to "
"serialize an object that refers to a content type, then you need to have a "
"way to refer to that content type to begin with. Since ``ContentType`` "
"objects are automatically created by Django during the database "
"synchronization process, the primary key of a given content type isn't easy "
"to predict; it will depend on how and when :djadmin:`migrate` was executed. "
"This is true for all models which automatically generate objects, notably "
"including :class:`~django.contrib.auth.models.Permission`, :class:`~django."
"contrib.auth.models.Group`, and :class:`~django.contrib.auth.models.User`."
msgstr ""
":class:`~django.contrib.contenttypes.models.ContentType` を参照する外部キーを"
"持つオブジェクトのリストの場合を考えてみてください。もしcontent type を参照す"
"るオブジェクトをシリアライズしようとした場合、最初に content type を参照する"
"手段が必要になります。``ContentType`` オブジェクトは Django がデータベースの"
"同期処理の間に自動的に作成するため、与えられた content type のプライマリー"
"キーは簡単には予測できず、:djadmin:`migrate` が実行される方法とタイミングに依"
"存することになってしまいます。同じことは、特に :class:`~django.contrib.auth."
"models.Permission`、:class:`~django.contrib.auth.models.Group`、:class:"
"`~django.contrib.auth.models.User` を含む、オブジェクトを自動生成するすべての"
"モデルにも当てはまります。"

msgid ""
"You should never include automatically generated objects in a fixture or "
"other serialized data. By chance, the primary keys in the fixture may match "
"those in the database and loading the fixture will have no effect. In the "
"more likely case that they don't match, the fixture loading will fail with "
"an :class:`~django.db.IntegrityError`."
msgstr ""
"自動生成されたオブジェクトは、決してフィクスチャや他のシリアライズされたデー"
"タに含めるべきではありません。偶然、フィクスチャ内のプライマリーキーがデータ"
"ベース内のものと一致して、フィクスチャの読み込みに効果がないかもしれません。"
"より起こりえる状況はプライマリーキーが一致しなかった場合で、フィクスチャの"
"ロードは :class:`~django.db.IntegrityError` で失敗してしまいます。"

msgid ""
"There is also the matter of convenience. An integer id isn't always the most "
"convenient way to refer to an object; sometimes, a more natural reference "
"would be helpful."
msgstr ""
"利便性の問題もあります。integer id というのは、必ずしもオブジェクトを参照する"
"ための最も便利な方法というわけではありません。ときには、より自然な (ナチュラ"
"ルな) 参照が助けになることがあります。"

msgid ""
"It is for these reasons that Django provides *natural keys*. A natural key "
"is a tuple of values that can be used to uniquely identify an object "
"instance without using the primary key value."
msgstr ""
"このような理由のために Django が提供しているのが、*ナチュラルキー (natural "
"key)* です。ナチュラルキーは、オブジェクトのインスタンスをプライマリーキーの"
"値を使用せずに一意に識別するために使える値のタプルです。"

msgid "Deserialization of natural keys"
msgstr "ナチュラルキーのデシリアライズ"

msgid "Consider the following two models::"
msgstr "次の2つのモデルを考えてみてください。"

msgid ""
"Ordinarily, serialized data for ``Book`` would use an integer to refer to "
"the author. For example, in JSON, a Book might be serialized as::"
msgstr ""
"通常は、``Book`` のシリアライズされたデータは、著者 (author) を参照するために"
"整数を使うことになります。たとえば、JSON では、Book は次のようにシリアライズ"
"されるでしょう。"

msgid ""
"This isn't a particularly natural way to refer to an author. It requires "
"that you know the primary key value for the author; it also requires that "
"this primary key value is stable and predictable."
msgstr ""
"これは、著者を参照するのに特に自然な方法とは言えません。著者のプライマリー"
"キーの値を知っていなければなりませんし、しかも、プライマリーキーの値は安定し"
"ていて予測可能でなければなりません。"

msgid ""
"However, if we add natural key handling to Person, the fixture becomes much "
"more humane. To add natural key handling, you define a default Manager for "
"Person with a ``get_by_natural_key()`` method. In the case of a Person, a "
"good natural key might be the pair of first and last name::"
msgstr ""
"しかし、Person にナチュラルキーの処理を追加した場合、フィクスチャはもっとずっ"
"と人間によってわかりやすくなります。ナチュラルキーの処理を追加するには、"
"Person のデフォルトの Manager を ``get_by_natural_key()`` を使用して定義しま"
"す。Person の場合、よいナチュラルキーは、first name と last name のペアになる"
"でしょう。"

msgid "Now books can use that natural key to refer to ``Person`` objects::"
msgstr ""
"新しい本では、``Person`` オブジェクトを参照するためにナチュラルキーが使えま"
"す。"

msgid ""
"When you try to load this serialized data, Django will use the "
"``get_by_natural_key()`` method to resolve ``[\"Douglas\", \"Adams\"]`` into "
"the primary key of an actual ``Person`` object."
msgstr ""
"シリアライズされたデータをロードしようとするとき、Django は "
"``get_by_natural_key()`` メソッドを使って ``[\"Douglas\", \"Adams\"]`` を実際"
"の ``Person`` オブジェクトのプライマリーキーに解決します。"

msgid ""
"Whatever fields you use for a natural key must be able to uniquely identify "
"an object. This will usually mean that your model will have a uniqueness "
"clause (either ``unique=True`` on a single field, or a ``UniqueConstraint`` "
"or ``unique_together`` over multiple fields) for the field or fields in your "
"natural key. However, uniqueness doesn't need to be enforced at the database "
"level. If you are certain that a set of fields will be effectively unique, "
"you can still use those fields as a natural key."
msgstr ""
"ナチュラルキーに使用するフィールドは、オブジェクトを一意に識別できる必要があ"
"ります。これは通常、モデルがナチュラルキーのフィールドや複数フィールドに対し"
"てユニーク制約 (単一フィールドに対する ``unique=True``、または複数フィールド"
"にわたる ``UniqueConstraint`` や ``unique_together``) を持つことを意味しま"
"す。しかし、一意性がデータベースレベルで強制される必要はありません。一連の"
"フィールドが実際に一意であるという確信がある場合は、それらのフィールドをナ"
"チュラルキーとして使用できます。"

msgid ""
"Deserialization of objects with no primary key will always check whether the "
"model's manager has a ``get_by_natural_key()`` method and if so, use it to "
"populate the deserialized object's primary key."
msgstr ""
"プライマリーキーがないオブジェクトのデシリアライズには、モデルのマネージャに "
"``get_by_natural_key()`` メソッドがあるかどうかを常にチェックします。ある場合"
"は、これを使用して、デシリアライズされるオブジェクトのプライマリーキーを設定"
"します。"

msgid "Serialization of natural keys"
msgstr "ナチュラルキーのシリアライズ"

msgid ""
"So how do you get Django to emit a natural key when serializing an object? "
"Firstly, you need to add another method -- this time to the model itself::"
msgstr ""
"それでは、オブジェクトをシリアライズするときに、Django にナチュラルキーを発行"
"させるにはどうすればいいのでしょうか？ はじめに、もう1つのメソッドを追加する"
"必要があります。今回は、次のようにモデル自体に追加します。"

msgid ""
"That method should always return a natural key tuple -- in this example, "
"``(first name, last name)``. Then, when you call ``serializers."
"serialize()``, you provide ``use_natural_foreign_keys=True`` or "
"``use_natural_primary_keys=True`` arguments:"
msgstr ""
"メソッドは、常にナチュラルキーの他ルプを返す必要があります。この例では、"
"``(first name, last name)`` です。そして、``serializers.serialize()`` を呼ぶ"
"ときに、``use_natural_foreign_keys=True`` または "
"``use_natural_primary_keys=True`` 引数を提供します。"

msgid ""
"When ``use_natural_foreign_keys=True`` is specified, Django will use the "
"``natural_key()`` method to serialize any foreign key reference to objects "
"of the type that defines the method."
msgstr ""
"``use_natural_foreign_keys=True`` が指定されたときは、Django は "
"``natural_key()`` メソッドを使用して、メソッドを定義している型のオブジェクト"
"への外部キーの参照をシリアライズします。"

msgid ""
"When ``use_natural_primary_keys=True`` is specified, Django will not provide "
"the primary key in the serialized data of this object since it can be "
"calculated during deserialization::"
msgstr ""
"``use_natural_primary_keys=True`` が指定されたときは、Django はこのオブジェク"
"トのシリアライズされたデータ内に、プライマリーキーを提供しません。プライマ"
"リーキーは、デシリアライズ時に計算可能であるためです。"

msgid ""
"This can be useful when you need to load serialized data into an existing "
"database and you cannot guarantee that the serialized primary key value is "
"not already in use, and do not need to ensure that deserialized objects "
"retain the same primary keys."
msgstr ""
"これは、シリアライズされたデータを既存のデータベースに読み込む必要があり、シ"
"リアライズされた主キーの値がすでに使用されていないことを保証できず、デシリア"
"ライズされたオブジェクトが同じ主キーを保持していることを保証する必要がない場"
"合に便利です。"

msgid ""
"If you are using :djadmin:`dumpdata` to generate serialized data, use the :"
"option:`dumpdata --natural-foreign` and :option:`dumpdata --natural-primary` "
"command line flags to generate natural keys."
msgstr ""
":djadmin:`dumpdata` を使用してシリアライズデータを生成する場合は、 :option:"
"`dumpdata --natural-foreign` と :option:`dumpdata --natural-primary` コマンド"
"ラインフラグを使用してナチュラルキーを生成します。"

msgid ""
"You don't need to define both ``natural_key()`` and "
"``get_by_natural_key()``. If you don't want Django to output natural keys "
"during serialization, but you want to retain the ability to load natural "
"keys, then you can opt to not implement the ``natural_key()`` method."
msgstr ""
"``natural_key()`` と ``get_by_natural_key()`` の両方を定義する必要はありませ"
"ん。もし Django にシリアライズ時にナチュラルキーを出力させたくないが、 ナチュ"
"ラルキーを読み込む機能は残しておきたい場合は、 ``natural_key()`` メソッドを実"
"装しなくても構いません。"

msgid ""
"Conversely, if (for some strange reason) you want Django to output natural "
"keys during serialization, but *not* be able to load those key values, just "
"don't define the ``get_by_natural_key()`` method."
msgstr ""
"逆に、（特別な理由で）Django にシリアライズ時にナチュラルキーを出力させたい"
"が、そのキーの値を読み込ませたく *ない* 場合は、 ``get_by_natural_key()`` メ"
"ソッドを定義しなければいいだけです。"

msgid "Natural keys and forward references"
msgstr "ナチュラルキーと前方参照"

msgid ""
"Sometimes when you use :ref:`natural foreign keys <topics-serialization-"
"natural-keys>` you'll need to deserialize data where an object has a foreign "
"key referencing another object that hasn't yet been deserialized. This is "
"called a \"forward reference\"."
msgstr ""
":ref:`ナチュラル外部キー <topics-serialization-natural-keys>` を使用すると"
"き、データをシリアライズする必要があるけれども、オブジェクトの外部キーが参照"
"している他のオブジェクトが、まだシリアライズされていないような場合がありま"
"す。このことを「前方参照 (forward reference)」と呼びます。"

msgid "For instance, suppose you have the following objects in your fixture::"
msgstr ""
"たとえば、フィクスチャに次のようなオブジェクトがあると想定してください。"

msgid ""
"In order to handle this situation, you need to pass "
"``handle_forward_references=True`` to ``serializers.deserialize()``. This "
"will set the ``deferred_fields`` attribute on the ``DeserializedObject`` "
"instances. You'll need to keep track of ``DeserializedObject`` instances "
"where this attribute isn't ``None`` and later call "
"``save_deferred_fields()`` on them."
msgstr ""
"この状況を処理するには、``serializers.deserialize()`` に "
"``handle_forward_references=True`` を渡す必要があります。これにより、"
"``DeserializedObject`` インスタンスに ``deferred_fields`` 属性が設定されま"
"す。この属性が ``None`` ではない ``DeserializedObject`` インスタンスを追跡し"
"て、後でそれらに対して ``save_deferred_fields()`` を呼び出す必要があります。"

msgid "Typical usage looks like this::"
msgstr "典型的な使用方法は次のようになります。"

msgid ""
"For this to work, the ``ForeignKey`` on the referencing model must have "
"``null=True``."
msgstr ""
"これが機能するには、参照しているモデル上の ``ForeignKey`` に ``null=True`` が"
"設定されている必要があります。"

msgid "Dependencies during serialization"
msgstr "シリアライズ中の依存関係"

msgid ""
"It's often possible to avoid explicitly having to handle forward references "
"by taking care with the ordering of objects within a fixture."
msgstr ""
"フィクスチャ内のオブジェクトの順番に注意することで、明示的に前方参照を扱わず"
"に済むことがよくあります。"

msgid ""
"To help with this, calls to :djadmin:`dumpdata` that use the :option:"
"`dumpdata --natural-foreign` option will serialize any model with a "
"``natural_key()`` method before serializing standard primary key objects."
msgstr ""
"これを支援するために、 :option:`dumpdata --natural-foreign` オプションを使用"
"して :djadmin:`dumpdata` を呼び出すと、標準のプライマリキーオブジェクトをシリ"
"アライズする前に、``natural_key()`` メソッドを持つ任意のモデルがシリアライズ"
"されます。"

msgid ""
"However, this may not always be enough. If your natural key refers to "
"another object (by using a foreign key or natural key to another object as "
"part of a natural key), then you need to be able to ensure that the objects "
"on which a natural key depends occur in the serialized data before the "
"natural key requires them."
msgstr ""
"しかし、これは必ずしも十分とは限りません。ナチュラルキーが別のオブジェクトを"
"参照する場合 (ナチュラルキーの一部として外部キーまたは別のオブジェクトへのナ"
"チュラルキーを使用する場合)、ナチュラルキーが依存するオブジェクトが、ナチュラ"
"ルキーが要求する前にシリアライズされたデータ内に存在することを保証できる必要"
"があります。"

msgid ""
"To control this ordering, you can define dependencies on your "
"``natural_key()`` methods. You do this by setting a ``dependencies`` "
"attribute on the ``natural_key()`` method itself."
msgstr ""
"この順序を制御するには、 ``natural_key()`` メソッドに依存関係を定義します。こ"
"れは ``natural_key()`` メソッド自体に ``dependencies`` 属性を設定することで行"
"います。"

msgid ""
"For example, let's add a natural key to the ``Book`` model from the example "
"above::"
msgstr ""
"たとえば、上の例の ``Book`` モデルにナチュラルキーを追加してみましょう:"

msgid ""
"The natural key for a ``Book`` is a combination of its name and its author. "
"This means that ``Person`` must be serialized before ``Book``. To define "
"this dependency, we add one extra line::"
msgstr ""
"``Book`` のナチュラルキーは名前と著者の組み合わせです。つまり、 ``Person`` "
"は ``Book`` の前にシリアライズされなければなりません。この依存関係を定義する"
"ために、1行追加します:"

msgid ""
"This definition ensures that all ``Person`` objects are serialized before "
"any ``Book`` objects. In turn, any object referencing ``Book`` will be "
"serialized after both ``Person`` and ``Book`` have been serialized."
msgstr ""
"この定義により、すべての ``Person`` オブジェクトは ``Book`` オブジェクトより"
"も先にシリアライズされます。また、``Book`` を参照するオブジェクトは "
"``Person`` と ``Book`` の両方がシリアライズされた後にシリアライズされます。"

msgid "Django settings"
msgstr "Djangoの設定"

msgid ""
"A Django settings file contains all the configuration of your Django "
"installation. This document explains how settings work and which settings "
"are available."
msgstr ""
"Djangoの設定ファイルには、インストールしたDjangoの全ての設定が含まれていま"
"す。このドキュメントでは、各設定の役割と、どのような設定を利用できるか説明し"
"ていきます。"

msgid "The basics"
msgstr "基礎"

msgid "A settings file is just a Python module with module-level variables."
msgstr ""
"設定ファイルはモジュールレベルの変数が記述された、ただのPythonモジュールで"
"す。"

msgid "Here are a couple of example settings::"
msgstr "設定例を幾つか示します::"

msgid ""
"If you set :setting:`DEBUG` to ``False``, you also need to properly set the :"
"setting:`ALLOWED_HOSTS` setting."
msgstr ""
"もし :setting:`DEBUG` を ``False`` にした場合、 :setting:`ALLOWED_HOSTS` も設"
"定する必要があります。"

msgid "Because a settings file is a Python module, the following apply:"
msgstr ""
"設定ファイルはPythonのモジュールなので、以下のような性質を備えています。"

msgid "It doesn't allow for Python syntax errors."
msgstr "Pythonの構文エラーになってはいけません。"

msgid ""
"It can assign settings dynamically using normal Python syntax. For example::"
msgstr "通常の Pythonの構文を使って、動的に値を設定する事ができます。例えば::"

msgid "It can import values from other settings files."
msgstr "他の設定ファイルから値を import できます。"

msgid "Designating the settings"
msgstr "設定ファイルの指定"

msgid ""
"When you use Django, you have to tell it which settings you're using. Do "
"this by using an environment variable, :envvar:`DJANGO_SETTINGS_MODULE`."
msgstr ""
"Django を使うとき、どの設定を使うかを Django に伝える必要があります。そのため"
"には環境変数 :envvar:`DJANGO_SETTINGS_MODULE` を使います。"

msgid ""
"The value of :envvar:`DJANGO_SETTINGS_MODULE` should be in Python path "
"syntax, e.g. ``mysite.settings``. Note that the settings module should be on "
"the Python :py:data:`sys.path`."
msgstr ""
":envvar:`DJANGO_SETTINGS_MODULE` の値は Python のパス構文、例えば ``mysite."
"settings`` で指定します。設定モジュールはPythonの :py:data:`sys.path` にある"
"ことに注意してください。"

msgid "The ``django-admin`` utility"
msgstr "``django-admin`` ユーティリティ"

msgid ""
"When using :doc:`django-admin </ref/django-admin>`, you can either set the "
"environment variable once, or explicitly pass in the settings module each "
"time you run the utility."
msgstr ""
":doc:`django-admin </ref/django-admin>` を使う場合、環境変数を予め指定してお"
"くか、ユーティリティを起動する度に設定モジュールを明示的に渡します。"

msgid "Example (Unix Bash shell):"
msgstr "例 (Unix Bash シェル):"

msgid "Example (Windows shell):"
msgstr "例 (Windows シェル):"

msgid ""
"Use the ``--settings`` command-line argument to specify the settings "
"manually:"
msgstr ""
"コマンドライン引数で設定モジュールを指定するには、次のように ``--settings`` "
"を使用します。"

msgid "On the server (``mod_wsgi``)"
msgstr "サーバ (``mod_wsgi``) の設定"

msgid ""
"In your live server environment, you'll need to tell your WSGI application "
"what settings file to use. Do that with ``os.environ``::"
msgstr ""
"実際のサーバ環境では、 WSGI アプリケーションにどの設定ファイルを使うのか教え"
"てあげる必要があります。これには ``os.environ``:: を使います。"

msgid ""
"Read the :doc:`Django mod_wsgi documentation </howto/deployment/wsgi/"
"modwsgi>` for more information and other common elements to a Django WSGI "
"application."
msgstr ""
"さらなる情報や他のDjango WSGI アプリケーションでの共通の設定は :doc:`Django "
"mod_wsgi ドキュメント </howto/deployment/wsgi/modwsgi>` を参照してください。"

msgid "Default settings"
msgstr "デフォルトの設定"

msgid ""
"A Django settings file doesn't have to define any settings if it doesn't "
"need to. Each setting has a sensible default value. These defaults live in "
"the module :source:`django/conf/global_settings.py`."
msgstr ""
"Django の設定ファイルでは、特に必要のない限り設定を行う必要はありません。各々"
"の設定には注意深く決められたデフォルト値が入っています。デフォルト値は :"
"source:`django/conf/global_settings.py` に記述されています。"

msgid "Here's the algorithm Django uses in compiling settings:"
msgstr ""
"Django が設定をコンパイルする際には、以下のようなアルゴリズムを使います::"

msgid "Load settings from ``global_settings.py``."
msgstr "``global_settings.py`` から設定を読みだす。"

msgid ""
"Load settings from the specified settings file, overriding the global "
"settings as necessary."
msgstr ""
"指定された設定ファイルから設定を読み込み、グローバルな設定を必要に応じて上書"
"きします。"

msgid ""
"Note that a settings file should *not* import from ``global_settings``, "
"because that's redundant."
msgstr ""
"設定ファイルから ``global_settings`` を読み込むのは冗長なのでやらないでくださ"
"い。"

msgid "Seeing which settings you've changed"
msgstr "設定の変更を確かめる"

msgid ""
"The command ``python manage.py diffsettings`` displays differences between "
"the current settings file and Django's default settings."
msgstr ""
"``python manage.py diffsettings`` コマンドは、現在の設定と Django のデフォル"
"トの設定との違いを表示します。"

msgid "For more, see the :djadmin:`diffsettings` documentation."
msgstr "詳しくは :djadmin:`diffsettings` のドキュメントを参照してください。"

msgid "Using settings in Python code"
msgstr "Pythonのコード内で設定を参照する"

msgid ""
"In your Django apps, use settings by importing the object ``django.conf."
"settings``. Example::"
msgstr ""
"自作のDjangoアプリケーションからは ``django.conf.settings`` をimportすること"
"で設定を参照できます。例::"

msgid ""
"Note that ``django.conf.settings`` isn't a module -- it's an object. So "
"importing individual settings is not possible::"
msgstr ""
"``django.conf.settings`` はモジュールではなく、ただのオブジェクトです。そのた"
"め個々の設定は別々にimportできません。"

msgid ""
"Also note that your code should *not* import from either ``global_settings`` "
"or your own settings file. ``django.conf.settings`` abstracts the concepts "
"of default settings and site-specific settings; it presents a single "
"interface. It also decouples the code that uses settings from the location "
"of your settings."
msgstr ""
"また ``global_settings`` や自作の設定ファイルをimportしてはいけません。 "
"``django.conf.settings`` はデフォルト設定とサイト固有の設定を抽象化し、単一の"
"インタフェースを提供しています。また設定を使うコードと設定ファイルの場所を分"
"離しています。"

msgid "Altering settings at runtime"
msgstr "実行時に設定を変更する"

msgid ""
"You shouldn't alter settings in your applications at runtime. For example, "
"don't do this in a view::"
msgstr ""
"アプリケーションの実行中に設定を変えてはいけません。例えば、viewの中で以下の"
"実装を行ってはいけません。"

msgid "The only place you should assign to settings is in a settings file."
msgstr "設定を変えて良いのは、設定ファイルの中だけです。"

msgid "Security"
msgstr "セキュリティ"

msgid ""
"Because a settings file contains sensitive information, such as the database "
"password, you should make every attempt to limit access to it. For example, "
"change its file permissions so that only you and your web server's user can "
"read it. This is especially important in a shared-hosting environment."
msgstr ""
"設定ファイルにはデータベースのパスワードのような重要な情報が入っているため、"
"設定ファイルへのアクセスはできるだけ制限してください。たとえば、設定ファイル"
"のパーミッションを、あなたとウェブサーバだけが読み取れるようにしてください。"
"共有ホスティング環境で運用する場合、これは極めて重要な事項です。"

msgid "Available settings"
msgstr "利用可能な設定"

msgid ""
"For a full list of available settings, see the :doc:`settings reference </"
"ref/settings>`."
msgstr ""
"利用可能な設定は :doc:`settings リファレンス </ref/settings>` を参照してくだ"
"さい。"

msgid "Creating your own settings"
msgstr "設定項目を自作する"

msgid ""
"There's nothing stopping you from creating your own settings, for your own "
"Django apps, but follow these guidelines:"
msgstr ""
"Django アプリケーションの設定項目は自由に作成できますが、以下のガイドラインに"
"従ってください。"

msgid "Setting names must be all uppercase."
msgstr "設定項目の変数名は、全て大文字にしなければなりません。"

msgid "Don't reinvent an already-existing setting."
msgstr "既存の設定の再発明はやめましょう。"

msgid ""
"For settings that are sequences, Django itself uses lists, but this is only "
"a convention."
msgstr ""
"設定値をシーケンスにする際は、リストを使ってください。ただしこれはDjangoの慣"
"習です。"

msgid "Using settings without setting :envvar:`DJANGO_SETTINGS_MODULE`"
msgstr ":envvar:`DJANGO_SETTINGS_MODULE` 設定を使わない設定方法"

msgid ""
"In some cases, you might want to bypass the :envvar:`DJANGO_SETTINGS_MODULE` "
"environment variable. For example, if you're using the template system by "
"itself, you likely don't want to have to set up an environment variable "
"pointing to a settings module."
msgstr ""
":envvar:`DJANGO_SETTINGS_MODULE` 環境変数をパイパスしたい場合もあるかもしれま"
"せん。たとえば、テンプレートシステムを単体で使いたい場合、設定モジュールを示"
"すような環境変数は設定したくないでしょう。"

msgid ""
"In these cases, you can configure Django's settings manually. Do this by "
"calling:"
msgstr ""
"こういったケースのため、Djangoでは以下の関数を呼ぶことで手動で設定できるよう"
"になっています。"

msgid ""
"Pass ``configure()`` as many keyword arguments as you'd like, with each "
"keyword argument representing a setting and its value. Each argument name "
"should be all uppercase, with the same name as the settings described above. "
"If a particular setting is not passed to ``configure()`` and is needed at "
"some later point, Django will use the default setting value."
msgstr ""
"``configure()`` には、キーワード引数を好きなだけ渡すことができ、各キーワード"
"引数は設定とその値を表します。各引数名はすべて大文字で、上述の設定と同じ名前"
"であるべきです。特定の設定が ``configure()`` に渡されず、後で必要になった場"
"合、Djangoはデフォルトの設定値を使用します。"

msgid ""
"Configuring Django in this fashion is mostly necessary -- and, indeed, "
"recommended -- when you're using a piece of the framework inside a larger "
"application."
msgstr ""
"この方法でDjangoを設定することは、主にフレームワークの一部をより大きなアプリ"
"ケーション内で使用している場合に必要であり、実際に推奨されています。"

msgid ""
"Consequently, when configured via ``settings.configure()``, Django will not "
"make any modifications to the process environment variables (see the "
"documentation of :setting:`TIME_ZONE` for why this would normally occur). "
"It's assumed that you're already in full control of your environment in "
"these cases."
msgstr ""
"したがって、``settings.configure()`` を介して設定された場合、Djangoはプロセス"
"環境変数を変更しません (これが通常発生する理由については、:setting:"
"`TIME_ZONE` のドキュメントを参照してください)。これらの場合、すでに環境を完全"
"に制御していることが前提となります。"

msgid "Custom default settings"
msgstr "カスタムのデフォルト設定"

msgid ""
"If you'd like default values to come from somewhere other than ``django.conf."
"global_settings``, you can pass in a module or class that provides the "
"default settings as the ``default_settings`` argument (or as the first "
"positional argument) in the call to ``configure()``."
msgstr ""
"デフォルト値を ``django.conf.global_settings`` 以外の場所から取得したい場合"
"は、デフォルト設定を提供するモジュールやクラスを ``configure()`` 呼び出し時"
"の ``default_settings`` 引数（または最初の位置引数）として渡すことができま"
"す。"

msgid ""
"In this example, default settings are taken from ``myapp_defaults``, and "
"the :setting:`DEBUG` setting is set to ``True``, regardless of its value in "
"``myapp_defaults``::"
msgstr ""
"この例では、デフォルトの設定は ``myapp_defaults`` から取得され、 :setting:"
"`DEBUG` 設定は ``myapp_defaults`` での値に関係なく ``True`` に設定されます:"

msgid ""
"The following example, which uses ``myapp_defaults`` as a positional "
"argument, is equivalent::"
msgstr ""
"次の例では、 ``myapp_defaults`` を位置引数として使っていますが、等価です:"

msgid ""
"Normally, you will not need to override the defaults in this fashion. The "
"Django defaults are sufficiently tame that you can safely use them. Be aware "
"that if you do pass in a new default module, it entirely *replaces* the "
"Django defaults, so you must specify a value for every possible setting that "
"might be used in the code you are importing. Check in ``django.conf.settings."
"global_settings`` for the full list."
msgstr ""
"通常、このような方法でデフォルトを上書きする必要はありません。Django のデ"
"フォ ルトは十分に無難なので、安全に使うことができます。新しいデフォルトモ"
"ジュールを渡す場合、Djangoのデフォルトを完全に *置き換える* ため、インポート"
"しているコードで使用される可能性のあるすべての設定に対して値を指定する必要が"
"あることに注意してください。全リストは ``django.conf.settings."
"global_settings`` を参照してください。"

msgid "Either ``configure()`` or :envvar:`DJANGO_SETTINGS_MODULE` is required"
msgstr "``configure()`` と :envvar:`DJANGO_SETTINGS_MODULE` は片方だけが必要"

msgid ""
"If you're not setting the :envvar:`DJANGO_SETTINGS_MODULE` environment "
"variable, you *must* call ``configure()`` at some point before using any "
"code that reads settings."
msgstr ""
"環境変数 :envvar:`DJANGO_SETTINGS_MODULE` を設定していない場合、設定を読み込"
"むコードを使用する前に ``configure()`` を呼び出す *必要があります* 。"

msgid ""
"If you don't set :envvar:`DJANGO_SETTINGS_MODULE` and don't call "
"``configure()``, Django will raise an ``ImportError`` exception the first "
"time a setting is accessed."
msgstr ""
":envvar:`DJANGO_SETTINGS_MODULE` を設定せず、 ``configure()`` を呼び出さない"
"場合、 Django は設定に初めてアクセスしたときに ``ImportError`` 例外を発生させ"
"ます。"

msgid ""
"If you set :envvar:`DJANGO_SETTINGS_MODULE`, access settings values somehow, "
"*then* call ``configure()``, Django will raise a ``RuntimeError`` indicating "
"that settings have already been configured. There is a property for this "
"purpose:"
msgstr ""
":envvar:`DJANGO_SETTINGS_MODULE` を設定し、何らかの方法で設定値にアクセス"
"し、 *その後に* ``configure()`` を呼び出すと、Django は設定が既に設定されてい"
"ることを示す ``RuntimeError`` を送出します。このためのプロパティがあります:"

msgid ""
"Also, it's an error to call ``configure()`` more than once, or to call "
"``configure()`` after any setting has been accessed."
msgstr ""
"また、 ``configure()`` を2回以上呼び出したり、設定にアクセスした後に "
"``configure()`` を呼び出したりするとエラーになります。"

msgid ""
"It boils down to this: Use exactly one of either ``configure()`` or :envvar:"
"`DJANGO_SETTINGS_MODULE`. Not both, and not neither."
msgstr ""
"結論はこうです： ``configure()`` と :envvar:`DJANGO_SETTINGS_MODULE` のどちら"
"か片方だけを使ってください。両方使うのも、両方使わないのもいけません。"

msgid "Calling ``django.setup()`` is required for \"standalone\" Django usage"
msgstr ""
"スタンドアロンで Django を使うには ``django.setup()`` を呼び出す必要がある"

msgid ""
"If you're using components of Django \"standalone\" -- for example, writing "
"a Python script which loads some Django templates and renders them, or uses "
"the ORM to fetch some data -- there's one more step you'll need in addition "
"to configuring settings."
msgstr ""
"Django のコンポーネントを \"スタンドアロン\" で使う場合、たとえば、 Django テ"
"ンプレートを読み込んでレンダリングする Python スクリプトを書いたり、 ORM を"
"使ってデータを取得したりする場合、設定の他にもう一つ必要なステップがありま"
"す。"

msgid ""
"After you've either set :envvar:`DJANGO_SETTINGS_MODULE` or called "
"``configure()``, you'll need to call :func:`django.setup()` to load your "
"settings and populate Django's application registry. For example::"
msgstr ""
":envvar:`DJANGO_SETTINGS_MODULE` を設定するか、 ``configure()`` を呼び出した"
"ら、 :func:`django.setup()` を呼び出して設定をロードし、 Django のアプリケー"
"ションレジストリに入力する必要があります。たとえば、以下のようにします:"

msgid ""
"Note that calling ``django.setup()`` is only necessary if your code is truly "
"standalone. When invoked by your web server, or through :doc:`django-admin </"
"ref/django-admin>`, Django will handle this for you."
msgstr ""
"``django.setup()`` を呼び出す必要があるのは、あなたのコードが本当にスタンドア"
"ロンである場合だけだということに注意してください。ウェブサーバから起動された"
"場合、あるいは :doc:`django-admin </ref/django-admin>` から起動された場合は、"
"Django がこの処理を行います。"

msgid "``django.setup()`` may only be called once."
msgstr "``django.setup()`` は一度しか呼び出せません。"

msgid ""
"Therefore, avoid putting reusable application logic in standalone scripts so "
"that you have to import from the script elsewhere in your application. If "
"you can't avoid that, put the call to ``django.setup()`` inside an ``if`` "
"block::"
msgstr ""
"そのため、再利用可能なアプリケーションロジックをスタンドアロンスクリプトに置"
"いて、アプリケーションの他の場所でそのスクリプトからインポートしなければなら"
"ないようにするのは避けてください。それを避けられない場合は、下記のように "
"``django.setup()`` の呼び出しを ``if`` ブロックの中に入れてください:"

msgid ":doc:`The Settings Reference </ref/settings>`"
msgstr ":doc:`設定のリファレンス </ref/settings>`"

msgid "Contains the complete list of core and contrib app settings."
msgstr "コア・アプリと contlib アプリの設定の完全なリストを記載しています。"

msgid "Signals"
msgstr "シグナル"

msgid ""
"Django includes a \"signal dispatcher\" which helps decoupled applications "
"get notified when actions occur elsewhere in the framework. In a nutshell, "
"signals allow certain *senders* to notify a set of *receivers* that some "
"action has taken place. They're especially useful when many pieces of code "
"may be interested in the same events."
msgstr ""
"Django には \"シグナルディスパッチャ\" があり、フレームワークの他の場所でアク"
"ションが発生したときに、ほかのアプリケーションが通知を受けるのを助けてくれま"
"す。簡単に言うと、シグナルは特定の *送り手* が、あるアクションが発生したこと"
"を一連の *受け手* に通知できるようにします。特に、多くのコードが同じイベント"
"に関連している場合に便利です。"

msgid ""
"For example, a third-party app can register to be notified of settings "
"changes::"
msgstr ""
"例えば、サードパーティのアプリを登録して、設定変更の通知を受けることができま"
"す:"

msgid ""
"Django's :doc:`built-in signals </ref/signals>` let user code get notified "
"of certain actions."
msgstr ""
"Django の :doc:`組み込みのシグナル </ref/signals>` は、ユーザコードに特定のア"
"クションを通知します。"

msgid ""
"You can also define and send your own custom signals. See :ref:`defining-and-"
"sending-signals` below."
msgstr ""
"また、独自のカスタムシグナルを定義して送信することもできます。以下の :ref:"
"`defining-and-sending-signals` を参照してください。"

msgid ""
"Signals give the appearance of loose coupling, but they can quickly lead to "
"code that is hard to understand, adjust and debug."
msgstr ""
"シグナルは疎結合のように見えますが、すぐに理解や調整、デバッグが難しいコード"
"につながります。"

msgid ""
"Where possible you should opt for directly calling the handling code, rather "
"than dispatching via a signal."
msgstr ""
"可能であれば、シグナルでディスパッチするのではなく、処理コードを直接呼び出す"
"ことを選ぶべきです。"

msgid "Listening to signals"
msgstr "シグナルを待ち受ける"

msgid ""
"To receive a signal, register a *receiver* function using the :meth:`Signal."
"connect` method. The receiver function is called when the signal is sent. "
"All of the signal's receiver functions are called one at a time, in the "
"order they were registered."
msgstr ""
"シグナルを受信するには、 :meth:`Signal.connect` メソッドを使って *receiver* "
"関数を登録します。シグナルが送信されると、レシーバ関数が呼び出されます。シグ"
"ナルのすべてのレシーバ関数は、登録された順番に1つずつ呼び出されます。"

msgid ""
"The callback function which will be connected to this signal. See :ref:"
"`receiver-functions` for more information."
msgstr ""
"このシグナルに接続されるコールバック関数です。詳しくは :ref:`receiver-"
"functions` を参照してください。"

msgid ""
"Specifies a particular sender to receive signals from. See :ref:`connecting-"
"to-specific-signals` for more information."
msgstr ""
"シグナルを受信する送信者を指定します。詳しくは :ref:`connecting-to-specific-"
"signals` を参照してください。"

msgid ""
"Django stores signal handlers as weak references by default. Thus, if your "
"receiver is a local function, it may be garbage collected. To prevent this, "
"pass ``weak=False`` when you call the signal's ``connect()`` method."
msgstr ""
"Django はデフォルトでシグナルハンドラを弱い参照として保存します。従って、レ"
"シーバがローカル関数の場合、ガベージコレクションされる可能性 があります。これ"
"を防ぐには、シグナルの ``connect()`` メソッドを呼び出すときに ``weak=False`` "
"を渡してください。"

msgid ""
"A unique identifier for a signal receiver in cases where duplicate signals "
"may be sent. See :ref:`preventing-duplicate-signals` for more information."
msgstr ""
"シグナルが重複して送信される可能性がある場合の、シグナル受信機の一意な識別"
"子。詳しくは :ref:`preventing-duplicate-signals` を参照してください。"

msgid ""
"Let's see how this works by registering a signal that gets called after each "
"HTTP request is finished. We'll be connecting to the :data:`~django.core."
"signals.request_finished` signal."
msgstr ""
"HTTP リクエストが終了するたびに呼び出されるシグナルを登録することで、この仕組"
"みを見てみましょう。ここでは :data:`~django.core.signals.request_finished` シ"
"グナルに接続します。"

msgid "Receiver functions"
msgstr "レシーバ関数"

msgid ""
"First, we need to define a receiver function. A receiver can be any Python "
"function or method::"
msgstr ""
"まず、レシーバ関数を定義する必要があります。レシーバはPythonの関数やメソッド"
"であれば何でもかまいません:"

msgid ""
"Notice that the function takes a ``sender`` argument, along with wildcard "
"keyword arguments (``**kwargs``); all signal handlers must take these "
"arguments."
msgstr ""
"この関数は ``sender`` 引数とワイルドカードキーワード引数 (``**kwargs``) を取"
"ることに注意してください。すべてのシグナルハンドラはこれらの引数を取らなけれ"
"ばなりません。"

msgid ""
"We'll look at senders :ref:`a bit later <connecting-to-specific-signals>`, "
"but right now look at the ``**kwargs`` argument. All signals send keyword "
"arguments, and may change those keyword arguments at any time. In the case "
"of :data:`~django.core.signals.request_finished`, it's documented as sending "
"no arguments, which means we might be tempted to write our signal handling "
"as ``my_callback(sender)``."
msgstr ""
"送信者については :ref:`もう少し後で <connecting-to-specific-signals>` 見るの"
"で、今は ``**kwargs`` 引数を見てください。すべてのシグナルはキーワード引数を"
"送信し、いつでもそのキーワード引数を変更できます。 :data:`~django.core."
"signals.request_finished` の場合、引数を送らないようにドキュメント化されてい"
"るので、シグナル処理を ``my_callback(sender)`` と書きたくなるかもしれません。"

msgid ""
"This would be wrong -- in fact, Django will throw an error if you do so. "
"That's because at any point arguments could get added to the signal and your "
"receiver must be able to handle those new arguments."
msgstr ""
"これは間違いです。実際、そうすると Django はエラーを返します。というのも、シ"
"グナルに引数が追加される可能性があり、レシーバはその新しい引数を扱えなければ"
"ならないからです。"

msgid ""
"Receivers may also be asynchronous functions, with the same signature but "
"declared using ``async def``::"
msgstr ""
"レシーバーは同じシグネチャーを持ち、``async def`` を使って宣言された非同期関"
"数になることもできます:"

msgid ""
"Signals can be sent either synchronously or asynchronously, and receivers "
"will automatically be adapted to the correct call-style. See :ref:`sending "
"signals <sending-signals>` for more information."
msgstr ""
"シグナルは同期でも非同期でも送ることができ、受信側は自動的に正しいコールスタ"
"イルに合わせられます。詳細は :ref:`シグナルを送る <sending-signals>` を参照し"
"てください。"

msgid "Support for asynchronous receivers was added."
msgstr "非同期レシーバのサポートが追加されました。"

msgid "Connecting receiver functions"
msgstr "レシーバ関数に接続する"

msgid ""
"There are two ways you can connect a receiver to a signal. You can take the "
"manual connect route::"
msgstr "受信機を信号に接続する方法は2つあります。手動で接続する方法です:"

msgid "Alternatively, you can use a :func:`receiver` decorator:"
msgstr "あるいは、 :func:`receiver` デコレータを使うこともできます:"

msgid "A signal or a list of signals to connect a function to."
msgstr "関数を接続するシグナルまたはシグナルのリスト。"

msgid ""
"Wildcard keyword arguments to pass to a :ref:`function <receiver-functions>`."
msgstr ""
":ref:`関数 <receiver-functions>` に渡すワイルドカードキーワード引数です。"

msgid "Here's how you connect with the decorator::"
msgstr "下記がデコレーターとの繋げ方です:"

msgid ""
"Now, our ``my_callback`` function will be called each time a request "
"finishes."
msgstr ""
"これで、リクエストが終了するたびに ``my_callback`` 関数が呼ばれるようになりま"
"す。"

msgid "Where should this code live?"
msgstr "コードはどこに置くの？"

msgid ""
"Strictly speaking, signal handling and registration code can live anywhere "
"you like, although it's recommended to avoid the application's root module "
"and its ``models`` module to minimize side-effects of importing code."
msgstr ""
"厳密には、シグナル処理と登録のコードは好きな場所に置くことができますが、コー"
"ドのインポートによる副作用を最小限にするために、アプリケーションのルートモ"
"ジュールと ``models`` モジュールの置くのは避けることを推奨します。"

msgid ""
"In practice, signal handlers are usually defined in a ``signals`` submodule "
"of the application they relate to. Signal receivers are connected in the :"
"meth:`~django.apps.AppConfig.ready` method of your application :ref:"
"`configuration class <configuring-applications-ref>`. If you're using the :"
"func:`receiver` decorator, import the ``signals`` submodule inside :meth:"
"`~django.apps.AppConfig.ready`, this will implicitly connect signal "
"handlers::"
msgstr ""
"実際には、シグナルハンドラは通常、関連するアプリケーションの ``signals`` サブ"
"モジュールで定義されます。シグナルレシーバーはアプリケーションの  :ref:"
"`configuration クラス <configuring-applications-ref>` の :meth:`~django.apps."
"AppConfig.ready` メソッドで接続されます。 :func:`receiver` デコレータを使って"
"いる場合は、 :meth:`~django.apps.AppConfig.ready` の中にある ``signals`` サブ"
"モジュールをインポートしてください、これによりシグナルハンドラが暗黙的に接続"
"されます:"

msgid ""
"The :meth:`~django.apps.AppConfig.ready` method may be executed more than "
"once during testing, so you may want to :ref:`guard your signals from "
"duplication <preventing-duplicate-signals>`, especially if you're planning "
"to send them within tests."
msgstr ""
"テスト中に :meth:`~django.apps.AppConfig.ready` メソッドが複数回実行されるこ"
"とがあるため、特にテスト内でシグナルを送信する予定がある場合は、:ref:`シグナ"
"ルの重複を防ぐ <preventing-duplicate-signals>` ためにシグナルを保護することを"
"検討するとよいでしょう。"

msgid "Connecting to signals sent by specific senders"
msgstr "特定の送信者によって送られたシグナルに接続する"

msgid ""
"Some signals get sent many times, but you'll only be interested in receiving "
"a certain subset of those signals. For example, consider the :data:`django."
"db.models.signals.pre_save` signal sent before a model gets saved. Most of "
"the time, you don't need to know when *any* model gets saved -- just when "
"one *specific* model is saved."
msgstr ""
"シグナルの中には何度も送信されるものがありますが、そのようなシグナルの特定の"
"サブセットだけを受信したいと思うかも知れません。例えば、モデルが保存される前"
"に送られるシグナル :data:`django.db.models.signals.pre_save` を考えてみましょ"
"う。ほとんどの場合、 *どの* モデルが保存されるかを知る必要はありません。ある "
"*特定の* モデルが保存されたときだけ知る必要があります。"

msgid ""
"In these cases, you can register to receive signals sent only by particular "
"senders. In the case of :data:`django.db.models.signals.pre_save`, the "
"sender will be the model class being saved, so you can indicate that you "
"only want signals sent by some model::"
msgstr ""
"このような場合、特定の送信者のみが送信するシグナルを受信するように登録できま"
"す。 :data:`django.db.models.signals.pre_save` の場合、送信者は保存されるモデ"
"ルクラスになるので、あるモデルから送信されるシグナルだけが欲しいことを示すこ"
"とができます:"

msgid ""
"The ``my_handler`` function will only be called when an instance of "
"``MyModel`` is saved."
msgstr ""
"``my_handler`` 関数は ``MyModel`` のインスタンスが保存されたときにだけ呼び出"
"されます。"

msgid ""
"Different signals use different objects as their senders; you'll need to "
"consult the :doc:`built-in signal documentation </ref/signals>` for details "
"of each particular signal."
msgstr ""
"異なるシグナルは異なるオブジェクトを送信元として使用します。それぞれのシグナ"
"ルの詳細については :doc:`組み込みシグナルのドキュメント </ref/signals>` を参"
"照する必要があります。"

msgid "Preventing duplicate signals"
msgstr "重複したシグナルを防止する"

msgid ""
"In some circumstances, the code connecting receivers to signals may run "
"multiple times. This can cause your receiver function to be registered more "
"than once, and thus called as many times for a signal event. For example, "
"the :meth:`~django.apps.AppConfig.ready` method may be executed more than "
"once during testing. More generally, this occurs everywhere your project "
"imports the module where you define the signals, because signal registration "
"runs as many times as it is imported."
msgstr ""
"状況によっては、レシーバーをシグナルに接続するコードが複数回実行されることが"
"あります。そのため、レシーバ関数が複数回登録され、シグナルイベントに対して複"
"数回呼び出される可能性があります。例えば、 :meth:`~django.apps.AppConfig."
"ready` メソッドがテスト中に複数回実行されるかもしれません。より一般的には、シ"
"グナル登録はインポートされた回数だけ実行されるため、 シグナルを定義したモ"
"ジュールをインポートしたプロジェクトではどこでも発生します。"

msgid ""
"If this behavior is problematic (such as when using signals to send an email "
"whenever a model is saved), pass a unique identifier as the ``dispatch_uid`` "
"argument to identify your receiver function. This identifier will usually be "
"a string, although any hashable object will suffice. The end result is that "
"your receiver function will only be bound to the signal once for each unique "
"``dispatch_uid`` value::"
msgstr ""
"この動作が問題となる場合 (シグナルを使用してモデルが保存されるたびにメールを"
"送信する場合など)、受信関数を識別するために ``dispatch_uid`` 引数に一意な識別"
"子を渡します。この識別子は通常文字列ですが、ハッシュ可能なオブジェクトであれ"
"ば何でもかまいません。この結果、受信関数は一意な ``dispatch_uid`` の値ごとに"
"一度だけシグナルにバインドされることになります:"

msgid "Defining and sending signals"
msgstr "シグナルの定義と送信"

msgid ""
"Your applications can take advantage of the signal infrastructure and "
"provide its own signals."
msgstr "アプリケーションは信号インフラを利用し、独自の信号を提供できます。"

msgid "When to use custom signals"
msgstr "カスタムシグナルを使うべきタイミング"

msgid ""
"Signals are implicit function calls which make debugging harder. If the "
"sender and receiver of your custom signal are both within your project, "
"you're better off using an explicit function call."
msgstr ""
"シグナルは暗黙の関数呼び出しなので、デバッグが難しくなります。カスタムシグナ"
"ルの送信側と受信側の両方がプロジェクト内にある場合は、明示的な関数呼び出しを"
"使ったほうがよいでしょう。"

msgid "Defining signals"
msgstr "シグナルを定義する"

msgid "All signals are :class:`django.dispatch.Signal` instances."
msgstr "すべてのシグナルは :class:`django.dispatch.Signal` インスタンスです。"

msgid "This declares a ``pizza_done`` signal."
msgstr "このコードは、``pizza_done`` シグナルを宣言しています。"

msgid "Sending signals"
msgstr "シグナルを送信する"

msgid "There are two ways to send signals synchronously in Django."
msgstr "Django でシグナルを同期的に送信する方法は2つあります。"

msgid "Signals may also be sent asynchronously."
msgstr "シグナルは非同期に送信することもできます。"

msgid ""
"To send a signal, call either :meth:`Signal.send`, :meth:`Signal."
"send_robust`, :meth:`await Signal.asend()<Signal.asend>`, or :meth:`await "
"Signal.asend_robust() <Signal.asend_robust>`. You must provide the "
"``sender`` argument (which is a class most of the time) and may provide as "
"many other keyword arguments as you like."
msgstr ""
"シグナルを送信するには、:meth:`Signal.send`、:meth:`Signal.send_robust`、:"
"meth:`await Signal.asend()<Signal.asend>`、:meth:`await Signal."
"asend_robust() <Signal.asend_robust>` のどれかを呼び出します。引数として "
"``sender`` (ほとんどの場合クラス) を指定する必要があり、他のキーワード引数を"
"好きなだけ指定できます。"

msgid "For example, here's how sending our ``pizza_done`` signal might look::"
msgstr "たとえば、``pizza_done`` シグナルを送信するには、次のようにします:"

msgid ""
"All four methods return a list of tuple pairs ``[(receiver, "
"response), ...]``, representing the list of called receiver functions and "
"their response values."
msgstr ""
"4つのメソッドはすべて、呼び出されたレシーバー関数とそのレスポンス値のリストを"
"表すタプルのペア ``[(receiver, response), ...]`` のリストを返します。"

msgid ""
"``send()`` differs from ``send_robust()`` in how exceptions raised by "
"receiver functions are handled. ``send()`` does *not* catch any exceptions "
"raised by receivers; it simply allows errors to propagate. Thus not all "
"receivers may be notified of a signal in the face of an error."
msgstr ""
"``send()`` は ``send_robust()`` と異なり、レシーバ関数が発生させた例外をどの"
"ようにハンド リングするかという点で異なります。 ``send()`` はレシーバが発生さ"
"せた例外をキャッチしません。そのため、エラーが発生してもすべてのレシーバにシ"
"グナルが通知されるとは限りません。"

msgid ""
"``send_robust()`` catches all errors derived from Python's ``Exception`` "
"class, and ensures all receivers are notified of the signal. If an error "
"occurs, the error instance is returned in the tuple pair for the receiver "
"that raised the error."
msgstr ""
"``send_robust()`` は Python の ``Exception`` クラスに由来するすべてのエラーを"
"キャッチし、すべてのレシーバにシグナルが通知されるようにします。エラーが発生"
"した場合、エラーを発生させたレシーバのタプルのペアにエラーインスタンスが返さ"
"れます。"

msgid ""
"The tracebacks are present on the ``__traceback__`` attribute of the errors "
"returned when calling ``send_robust()``."
msgstr ""
"トレースバックは ``send_robust()`` を呼び出したときに返されるエラーの "
"``__traceback__`` 属性に存在します。"

msgid ""
"``asend()`` is similar as ``send()``, but it is coroutine that must be "
"awaited::"
msgstr ""
"``asend()`` は ``send()`` と似ていますが、コルーチンで await する必要がありま"
"す。"

msgid ""
"Whether synchronous or asynchronous, receivers will be correctly adapted to "
"whether ``send()`` or ``asend()`` is used. Synchronous receivers will be "
"called using :func:`~.sync_to_async` when invoked via ``asend()``. "
"Asynchronous receivers will be called using :func:`~.async_to_sync` when "
"invoked via ``sync()``. Similar to the :ref:`case for middleware "
"<async_performance>`, there is a small performance cost to adapting "
"receivers in this way. Note that in order to reduce the number of sync/async "
"calling-style switches within a ``send()`` or ``asend()`` call, the "
"receivers are grouped by whether or not they are async before being called. "
"This means that an asynchronous receiver registered before a synchronous "
"receiver may be executed after the synchronous receiver. In addition, async "
"receivers are executed concurrently using ``asyncio.gather()``."
msgstr ""
"同期であっても非同期であっても、レシーバは ``send()`` と ``asend()`` のどちら"
"を使用しても正しく適応されます。``asend()`` で呼び出された場合、同期レシーバ"
"は :func:`~.sync_to_async` を使って呼び出されます。非同期レシーバは、"
"``sync()`` によって呼び出された場合、 :func:`~.async_to_sync` を使って呼び出"
"されます。:ref:`ミドルウェア <async_performance>` のケースと同様に、この方法"
"でレシーバを適合させることには、わずかなパフォーマンスコストがあります。"
"``send()`` または ``asend()`` 呼び出しの中で同期/非同期の呼び出しスタイルの切"
"り替えの回数を減らすために、呼び出す前に非同期かどうかでレシーバをグループ化"
"していることに注意してください。これは、同期レシーバの前に登録された非同期レ"
"シーバが、同期レシーバの後に実行される可能性があることを意味します。さらに、"
"非同期レシーバは ``asyncio.gather()`` を使って同時に実行されます。"

msgid ""
"All built-in signals, except those in the async request-response cycle, are "
"dispatched using :meth:`Signal.send`."
msgstr ""
"非同期のリクエスト/レスポンス・サイクル以外のすべての組み込みシグナルは :"
"meth:`Signal.send` を使ってディスパッチされます。"

msgid "Support for asynchronous signals was added."
msgstr "非同期シグナルのサポートが追加されました。"

msgid "Disconnecting signals"
msgstr "シグナルを切断する"

msgid ""
"To disconnect a receiver from a signal, call :meth:`Signal.disconnect`. The "
"arguments are as described in :meth:`.Signal.connect`. The method returns "
"``True`` if a receiver was disconnected and ``False`` if not. When "
"``sender`` is passed as a lazy reference to ``<app label>.<model>``, this "
"method always returns ``None``."
msgstr ""
"シグナルからレシーバーを切断するには :meth:`Signal.disconnect` を呼び出しま"
"す。引数は :meth:`.Signal.connect` の説明と同じです。このメソッドは、レシーバ"
"が切断された場合は ``True`` を、切断されなかった場合は ``False`` を返します。"
"``sender`` が ``<app label>.<model>`` への遅延参照として渡された場合、このメ"
"ソッドは常に ``None`` を返します。"

msgid ""
"The ``receiver`` argument indicates the registered receiver to disconnect. "
"It may be ``None`` if ``dispatch_uid`` is used to identify the receiver."
msgstr ""
"引数 ``receiver`` は、切断する登録済みのレシーバを指定します。レシーバを識別"
"するために ``dispatch_uid`` を使用する場合は ``None`` を指定します。"

msgid "Cryptographic signing"
msgstr "暗号署名"

msgid ""
"The golden rule of web application security is to never trust data from "
"untrusted sources. Sometimes it can be useful to pass data through an "
"untrusted medium. Cryptographically signed values can be passed through an "
"untrusted channel safe in the knowledge that any tampering will be detected."
msgstr ""
"ウェブアプリケーションのセキュリティの黄金律は、信頼できない情報源からのデー"
"タを決して信頼しないことです。時には、信頼されていない媒体を通してデータを渡"
"すことが有用な場合もあります。暗号的に署名された値は、改ざんが検知されること"
"を前提に、信頼されていない経路を安全に通過させることができます。"

msgid ""
"Django provides both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in web applications."
msgstr ""
"Django は、値の署名に関する低レベル API と、Web アプリケーションでの署名の最"
"も一般的な用途の一つである署名付きクッキーの設定と読み取りに関する高レベル "
"API の両方を提供しています。"

msgid "You may also find signing useful for the following:"
msgstr "また、以下のような場合にも署名が役に立つでしょう:"

msgid ""
"Generating \"recover my account\" URLs for sending to users who have lost "
"their password."
msgstr "パスワードを紛失したユーザーに送信する「アカウントの回復」URLの生成。"

msgid "Ensuring data stored in hidden form fields has not been tampered with."
msgstr ""
"非表示のフォームフィールドに保存されたデータが改ざんされていないことの確認。"

msgid ""
"Generating one-time secret URLs for allowing temporary access to a protected "
"resource, for example a downloadable file that a user has paid for."
msgstr ""
"保護されたリソースへの一時的なアクセスを許可するためのワンタイムシークレット"
"URLの生成。例えばユーザーが料金を支払ったダウンロード可能なファイルなど。"

msgid "Protecting ``SECRET_KEY`` and ``SECRET_KEY_FALLBACKS``"
msgstr "``SECRET_KEY`` と ``SECRET_KEY_FALLBACKS`` の保護"

msgid ""
"When you create a new Django project using :djadmin:`startproject`, the "
"``settings.py`` file is generated automatically and gets a random :setting:"
"`SECRET_KEY` value. This value is the key to securing signed data -- it is "
"vital you keep this secure, or attackers could use it to generate their own "
"signed values."
msgstr ""
":djadmin:`startproject` によって新しいプロジェクトを作る際、 ``settings.py`` "
"が生成され、ランダムな :setting:`SECRET_KEY` を得ます。この値が、署名された"
"データを安全に保つ鍵になります。このキーを安全に保存するとこは極めて重要で、"
"さもなければ攻撃を行うひとたちが彼らの署名を生成するのにも使えるからです。"

msgid ""
":setting:`SECRET_KEY_FALLBACKS` can be used to rotate secret keys. The "
"values will not be used to sign data, but if specified, they will be used to "
"validate signed data and must be kept secure."
msgstr ""
":setting:`SECRET_KEY_FALLBACKS` は秘密鍵のローテーションに使用できます。この"
"値はデータへの署名には使用されませんが、指定された場合は署名されたデータを検"
"証するために使用されるので、安全に保つ必要があります。"

msgid "Using the low-level API"
msgstr "低レベルの API を利用する"

msgid ""
"Django's signing methods live in the ``django.core.signing`` module. To sign "
"a value, first instantiate a ``Signer`` instance:"
msgstr ""
"Django の署名メソッドは ``django.core.signing`` モジュールにあります。値に署"
"名するには、まず ``Signer`` インスタンスを作成します。"

msgid ""
"The signature is appended to the end of the string, following the colon. You "
"can retrieve the original value using the ``unsign`` method:"
msgstr ""
"署名が文字列の最後にコロンに続いて付加されます。元の値を取得するには、"
"``unsign`` メソッドを使用します。"

msgid ""
"If you pass a non-string value to ``sign``, the value will be forced to "
"string before being signed, and the ``unsign`` result will give you that "
"string value:"
msgstr ""
"もし ``sign`` に文字列でない値を渡すと、その値は署名される前に強制的に文字列"
"に変換され、``unsign`` の結果にはその文字列の値が返されます。"

msgid ""
"If you wish to protect a list, tuple, or dictionary you can do so using the "
"``sign_object()`` and ``unsign_object()`` methods:"
msgstr ""
"リスト、タプル、辞書を保護したい場合は 、``sign_object()`` と "
"``unsign_object()`` メソッドを使います。"

msgid "See :ref:`signing-complex-data` for more details."
msgstr "詳細は :ref:`signing-complex-data` を参照してください。"

msgid ""
"If the signature or value have been altered in any way, a ``django.core."
"signing.BadSignature`` exception will be raised:"
msgstr ""
"何らかの理由により署名の値が書き換わってしまった場合、``django.core.signing."
"BadSignature`` 例外が起こります。"

msgid ""
"By default, the ``Signer`` class uses the :setting:`SECRET_KEY` setting to "
"generate signatures. You can use a different secret by passing it to the "
"``Signer`` constructor:"
msgstr ""
"デフォルトでは、``Signer`` クラスは :setting:`SECRET_KEY` 設定の値を署名生成"
"に利用します。次のように ``Signer`` のコンストラクタに任意の値を渡すことで、"
"異なる秘密鍵を使用することもできます。"

msgid ""
"Returns a signer which uses ``key`` to generate signatures and ``sep`` to "
"separate values. ``sep`` cannot be in the :rfc:`URL safe base64 alphabet "
"<4648#section-5>`. This alphabet contains alphanumeric characters, hyphens, "
"and underscores. ``algorithm`` must be an algorithm supported by :py:mod:"
"`hashlib`, it defaults to ``'sha256'``. ``fallback_keys`` is a list of "
"additional values used to validate signed data, defaults to :setting:"
"`SECRET_KEY_FALLBACKS`."
msgstr ""
"署名の生成に ``key`` を使用し、値の区切りに ``sep`` を使用する signer （署名"
"器）を返します。 ``sep`` には :rfc:`URL セーフな base64 英数字 "
"<4648#section-5>` を使用することはできません。このアルファベットには英数字、"
"ハイフン、アンダースコアが含まれます。 ``algorithm`` は :py:mod:`hashlib` が"
"サポートするアルゴリズムでなければなりません。デフォルトは ``'sha256'`` で"
"す。``fallback_keys`` は署名されたデータを検証するために使用する追加の値のリ"
"ストです。デフォルトは :setting:`SECRET_KEY_FALLBACKS` です。"

msgid "Support for passing positional arguments is deprecated."
msgstr "位置引数のサポートは非推奨になりました。"

msgid "Using the ``salt`` argument"
msgstr "``salt`` 引数を使用する"

msgid ""
"If you do not wish for every occurrence of a particular string to have the "
"same signature hash, you can use the optional ``salt`` argument to the "
"``Signer`` class. Using a salt will seed the signing hash function with both "
"the salt and your :setting:`SECRET_KEY`:"
msgstr ""
"特定の文字列が出現するたびに同じ署名ハッシュを使用したくない場合は、オプショ"
"ンで ``Signer`` クラスの引数 ``salt`` を使用できます。ソルトを使用すると、署"
"名ハッシュ関数にソルトと :setting:`SECRET_KEY` の両方をシードにします:"

msgid ""
"Using salt in this way puts the different signatures into different "
"namespaces.  A signature that comes from one namespace (a particular salt "
"value) cannot be used to validate the same plaintext string in a different "
"namespace that is using a different salt setting. The result is to prevent "
"an attacker from using a signed string generated in one place in the code as "
"input to another piece of code that is generating (and verifying) signatures "
"using a different salt."
msgstr ""
"この方法でソルトを使用すると、異なる署名が異なる名前空間に配置されます。 ある"
"名前空間（特定のソルト値）に由来する署名は、異なるソルト設定を使用している別"
"の名前空間で、同じ平文文字列を検証するためには使用できません。その結果、攻撃"
"者がコードのある場所で生成された署名付き文字列を、異なるソルトを使用して署名"
"を生成（検証）している別のコードの入力として使うことを防止できます。"

msgid ""
"Unlike your :setting:`SECRET_KEY`, your salt argument does not need to stay "
"secret."
msgstr ""
":setting:`SECRET_KEY` とは異なり、salt 引数は秘密にする必要はありません。"

msgid "Verifying timestamped values"
msgstr "タイムスタンプ値の検証"

msgid ""
"``TimestampSigner`` is a subclass of :class:`~Signer` that appends a signed "
"timestamp to the value. This allows you to confirm that a signed value was "
"created within a specified period of time:"
msgstr ""
"``TimestampSigner`` は :class:`~Signer` のサブクラスで、値に署名されたタイム"
"スタンプを追加します。これにより、署名された値が指定された期間内に作成された"
"ことを確認できます:"

msgid "Sign ``value`` and append current timestamp to it."
msgstr "値 ``value`` に署名し、現在のタイムスタンプを追加します。"

msgid ""
"Checks if ``value`` was signed less than ``max_age`` seconds ago, otherwise "
"raises ``SignatureExpired``. The ``max_age`` parameter can accept an integer "
"or a :py:class:`datetime.timedelta` object."
msgstr ""
"値が ``max_age`` 秒前より後に署名されたことを確認します。パラメータ "
"``max_age`` には整数または :py:class:`datetime.timedelta` オブジェクトを指定"
"します。"

msgid ""
"Encode, optionally compress, append current timestamp, and sign complex data "
"structure (e.g. list, tuple, or dictionary)."
msgstr ""
"複雑なデータ構造（例えば、リスト、タプル、または辞書）をエンコードし、オプ"
"ションで圧縮し、現在のタイムスタンプを追加し署名します。"

msgid ""
"Checks if ``signed_obj`` was signed less than ``max_age`` seconds ago, "
"otherwise raises ``SignatureExpired``. The ``max_age`` parameter can accept "
"an integer or a :py:class:`datetime.timedelta` object."
msgstr ""
"値が ``signed_obj`` 秒前より後に署名されたことを確認します。パラメータ "
"``max_age`` には整数または :py:class:`datetime.timedelta` オブジェクトを指定"
"します。"

msgid "Protecting complex data structures"
msgstr "複雑なデータ構造の保護"

msgid ""
"If you wish to protect a list, tuple or dictionary you can do so using the "
"``Signer.sign_object()`` and ``unsign_object()`` methods, or signing "
"module's ``dumps()`` or ``loads()`` functions (which are shortcuts for "
"``TimestampSigner(salt='django.core.signing').sign_object()/"
"unsign_object()``). These use JSON serialization under the hood. JSON "
"ensures that even if your :setting:`SECRET_KEY` is stolen an attacker will "
"not be able to execute arbitrary commands by exploiting the pickle format:"
msgstr ""
"リスト、タプル、辞書を保護したい場合は、 ``Signer.sign_object()`` と "
"``unsign_object()`` メソッド、あるいは署名モジュールの ``dumps()`` や "
"``loads()`` 関数 (``TimestampSigner(salt='django.core.signing')."
"sign_object()/unsign_object()`` のショートカットです) を使って保護できます。"
"これらは JSON シリアライズを使っています。JSONにすることで、 :setting:"
"`SECRET_KEY` が盗まれても、攻撃者が pickle フォーマットを悪用して任意のコマン"
"ドを実行できないようにします:"

msgid ""
"Because of the nature of JSON (there is no native distinction between lists "
"and tuples) if you pass in a tuple, you will get a list from ``signing."
"loads(object)``:"
msgstr ""
"JSONの性質上（ネイティブではリストとタプルの区別がありません）、タプルを渡す"
"と ``signing.loads(object)`` からリストが返されます:"

msgid ""
"Returns URL-safe, signed base64 compressed JSON string. Serialized object is "
"signed using :class:`~TimestampSigner`."
msgstr ""
"URL セーフな、署名付き base64 圧縮 JSON 文字列を返します。シリアライズされた"
"オブジェクトは :class:`~TimestampSigner` を使って署名されます。"

msgid ""
"Reverse of ``dumps()``, raises ``BadSignature`` if signature fails. Checks "
"``max_age`` (in seconds) if given."
msgstr ""
"``dumps()`` の逆で、署名に失敗した場合に ``BadSignature`` を返します。指定さ"
"れた場合は ``max_age`` (秒単位) をチェックします。"

msgid "Templates"
msgstr "テンプレート"

msgid ""
"Being a web framework, Django needs a convenient way to generate HTML "
"dynamically. The most common approach relies on templates. A template "
"contains the static parts of the desired HTML output as well as some special "
"syntax describing how dynamic content will be inserted. For a hands-on "
"example of creating HTML pages with templates, see :doc:`Tutorial 3 </intro/"
"tutorial03>`."
msgstr ""
"Django はウェブフレームワークなので、HTML を動的に生成する便利な手段が必要で"
"した。最も一般的なアプローチは、テンプレートに頼ることです。テンプレートに"
"は、出力したい HTML を書いた静的な部分と、動的なコンテンツを挿入する方法を書"
"いた特別な構文の部分からなります。テンプレートを使って HTML ページを作るハン"
"ズオンの例については、:doc:`チュートリアル 3 </intro/tutorial03>` を見てくだ"
"さい。"

msgid ""
"A Django project can be configured with one or several template engines (or "
"even zero if you don't use templates). Django ships built-in backends for "
"its own template system, creatively called the Django template language "
"(DTL), and for the popular alternative Jinja2_. Backends for other template "
"languages may be available from third-parties. You can also write your own "
"custom backend, see :doc:`Custom template backend </howto/custom-template-"
"backend>`"
msgstr ""
"Django プロジェクトは、1つまたは複数のテンプレートエンジンで構成できます (テ"
"ンプレートを使わなければ、ゼロでも構いません)。Django は、Django テンプレート"
"言語 (DTL) と呼ばれる独自のテンプレートシステムや、人気のある代替テンプレート"
"である Jinja2_ 用のバックエンドをビルトインで同梱しています。他のテンプレート"
"言語用のバックエンドはサードパーティから入手できるかもしれません。 :doc:`カス"
"タムテンプレートバックエンド </howto/custom-template-backend>` を参照してくだ"
"さい。"

msgid ""
"Django defines a standard API for loading and rendering templates regardless "
"of the backend. Loading consists of finding the template for a given "
"identifier and preprocessing it, usually compiling it to an in-memory "
"representation. Rendering means interpolating the template with context data "
"and returning the resulting string."
msgstr ""
"Django は、バックエンドにかかわらず使用できる、テンプレートの読み込みとレンダ"
"リングのための標準の API を定義しています。読み込みのパートでは、指定された名"
"前からテンプレートを探し、テンプレートを前処理し、通常はメモリ上のデータに変"
"換します。レンダリングのパートでは、テンプレートの中にコンテキストデータを埋"
"め込み、最終的な文字列を返します。"

msgid ""
"The :doc:`Django template language </ref/templates/language>` is Django's "
"own template system. Until Django 1.8 it was the only built-in option "
"available. It's a good template library even though it's fairly opinionated "
"and sports a few idiosyncrasies. If you don't have a pressing reason to "
"choose another backend, you should use the DTL, especially if you're writing "
"a pluggable application and you intend to distribute templates. Django's "
"contrib apps that include templates, like :doc:`django.contrib.admin </ref/"
"contrib/admin/index>`, use the DTL."
msgstr ""
":doc:`Django テンプレート言語 (DTL) </ref/templates/language>` はDjango 用の"
"テンプレートシステムです。Django 1.8 までは、ビルトインのオプションしか選択で"
"きませんでした。小さな癖もありますが、とても良いテンプレートライブラリです。"
"他のバックエンドを無理して選択しなければならない特別な理由がない限り、DTL を"
"使用することをおすすめします。アプリケーションを書いてテンプレートを配布しよ"
"うと考えている場合は、特にそうです。たとえば、Django のテンプレートを含んでい"
"る :doc:`django.contrib.admin </ref/contrib/admin/index>` のような contrib ア"
"プリは、DTL を使用しています。"

msgid ""
"For historical reasons, both the generic support for template engines and "
"the implementation of the Django template language live in the ``django."
"template`` namespace."
msgstr ""
"歴史的な理由により、テンプレートエンジンの一般的なサポートと Django テンプ"
"レート言語の実装は、両方とも ``django.template`` 名前空間に定義されています。"

msgid ""
"The template system isn't safe against untrusted template authors. For "
"example, a site shouldn't allow its users to provide their own templates, "
"since template authors can do things like perform XSS attacks and access "
"properties of template variables that may contain sensitive information."
msgstr ""
"テンプレートシステムは、信頼できないテンプレートの作者に対しては安全ではあり"
"ません。たとえば、サイトではユーザー自身がテンプレートを送信できるようにして"
"はなりません。テンプレートの作者は XSS 攻撃と同様のことが可能になり、テンプ"
"レート変数の属性にアクセスして、秘密にしなければならない情報にアクセスできて"
"しまう可能性があるからです。"

msgid "The Django template language"
msgstr "Django テンプレート言語"

msgid "Syntax"
msgstr "構文"

msgid "About this section"
msgstr "このセクションについて"

msgid ""
"This is an overview of the Django template language's syntax. For details "
"see the :doc:`language syntax reference </ref/templates/language>`."
msgstr ""
"このセクションで紹介するのは、Django テンプレート言語の構文の概要です。詳細に"
"ついては、 :doc:`言語構文のリファレンス </ref/templates/language>` を参照して"
"ください。"

msgid ""
"A Django template is a text document or a Python string marked-up using the "
"Django template language. Some constructs are recognized and interpreted by "
"the template engine. The main ones are variables and tags."
msgstr ""
"Django テンプレートは、 Django テンプレート言語を使ってマークアップされたテキ"
"スト文書や Python 文字列です。いくつかの構文はテンプレートエンジンによって認"
"識され、解釈されます。主なものは変数とタグです。"

msgid ""
"A template is rendered with a context. Rendering replaces variables with "
"their values, which are looked up in the context, and executes tags. "
"Everything else is output as is."
msgstr ""
"テンプレートは、コンテキストともにレンダリングされます。レンダリングでは、変"
"数が見つかると、コンテキスト内に記録された変数の値に置換され、タグが実行され"
"ます。それ以外の文字列は、そのまま出力されます。"

msgid "The syntax of the Django template language involves four constructs."
msgstr "Django テンプレート言語の構文は、4つの構成要素に分類できます。"

msgid "Variables"
msgstr "変数"

msgid ""
"A variable outputs a value from the context, which is a dict-like object "
"mapping keys to values."
msgstr ""
"変数は、コンテキストから値を出力します。コンテキストは、キーと値をマッピング"
"する辞書のようなオブジェクトです。"

msgid "Variables are surrounded by ``{{`` and ``}}`` like this:"
msgstr "変数はこのように ``{{`` と ``}}`` で囲まれます:"

msgid ""
"With a context of ``{'first_name': 'John', 'last_name': 'Doe'}``, this "
"template renders to:"
msgstr ""
"コンテキストが ``{'first_name': 'John', 'last_name': 'Doe'}`` の場合、このテ"
"ンプレートは次のようにレンダリングされます:"

msgid ""
"Dictionary lookup, attribute lookup and list-index lookups are implemented "
"with a dot notation:"
msgstr ""
"辞書ルックアップ、属性ルックアップ、リストインデックスルックアップはドット記"
"法で実装されています:"

msgid ""
"If a variable resolves to a callable, the template system will call it with "
"no arguments and use its result instead of the callable."
msgstr ""
"変数が呼び出し可能オブジェクトに解決される場合、テンプレート・システムは引数"
"なしで呼び出し、呼び出し可能オブジェクトの代わりにその結果を使用します。"

msgid "Tags"
msgstr "タグ"

msgid "Tags provide arbitrary logic in the rendering process."
msgstr "タグはレンダリングプロセスにおいて任意のロジックを提供します。"

msgid ""
"This definition is deliberately vague. For example, a tag can output "
"content, serve as a control structure e.g. an \"if\" statement or a \"for\" "
"loop, grab content from a database, or even enable access to other template "
"tags."
msgstr ""
"この定義は意図的に曖昧にしてあります。たとえば、タグはコンテンツを出力した"
"り、 \"if\" 文や \"for\" ループなどの制御構造として提供したり、データベースか"
"らコンテンツを取得したり、あるいは他のテンプレートタグへのアクセスを可能にし"
"たりすることができます。"

msgid "Tags are surrounded by ``{%`` and ``%}`` like this:"
msgstr "タグはこのように ``{%`` と ``%}`` で囲まれます:"

msgid "Most tags accept arguments:"
msgstr "ほとんどのタグは引数を受け付けます:"

msgid "Some tags require beginning and ending tags:"
msgstr "タグによっては開始タグと終了タグが必要です:"

msgid ""
"A :ref:`reference of built-in tags <ref-templates-builtins-tags>` is "
"available as well as :ref:`instructions for writing custom tags <howto-"
"writing-custom-template-tags>`."
msgstr ""
"関連項目: :ref:`組み込みタグのリファレンス <ref-templates-builtins-"
"tags>` 、 :ref:`独自のテンプレートタグの書き方 <howto-writing-custom-"
"template-tags>`"

msgid "Filters transform the values of variables and tag arguments."
msgstr "フィルタは変数やタグの引数の値を変換します。"

msgid "They look like this:"
msgstr "たとえばこのようなものです:"

msgid ""
"With a context of ``{'django': 'the web framework for perfectionists with "
"deadlines'}``, this template renders to:"
msgstr ""
"コンテキストを ``{'django': 'the web framework for perfectionists with "
"deadlines'}`` とすると、このテンプレートは次のようにレンダリングされます:"

msgid "Some filters take an argument:"
msgstr "引数を必要とするフィルタもあります:"

msgid ""
"A :ref:`reference of built-in filters <ref-templates-builtins-filters>` is "
"available as well as :ref:`instructions for writing custom filters <howto-"
"writing-custom-template-filters>`."
msgstr ""
"関連項目: :ref:`組み込みフィルタのリファレンス <ref-templates-builtins-"
"filters>` 、 :ref:`独自のテンプレートフィルタの書き方 <howto-writing-custom-"
"template-filters>`"

msgid "Comments look like this:"
msgstr "コメントはこのように書きます:"

msgid "A :ttag:`{% comment %} <comment>` tag provides multi-line comments."
msgstr ":ttag:`{% comment %} <comment>` タグで複数行のコメントを書けます。"

msgid "Components"
msgstr "コンポーネント"

msgid ""
"This is an overview of the Django template language's APIs. For details see "
"the :doc:`API reference </ref/templates/api>`."
msgstr ""
"このセクションで紹介するのは、Django テンプレート言語の API の概要です。詳細"
"については、:doc:`API リファレンス </ref/templates/api>` をご覧ください。"

msgid "Engine"
msgstr "エンジン"

msgid ""
":class:`django.template.Engine` encapsulates an instance of the Django "
"template system. The main reason for instantiating an :class:`~django."
"template.Engine` directly is to use the Django template language outside of "
"a Django project."
msgstr ""
":class:`django.template.Engine` は Django テンプレートシステムのインスタンス"
"をカプセル化します。 :class:`~django.template.Engine` を直接インスタンス化す"
"る主な理由は、 Django プロジェクトの外で Django テンプレート言語を使うためで"
"す。"

msgid ""
":class:`django.template.backends.django.DjangoTemplates` is a thin wrapper "
"adapting :class:`django.template.Engine` to Django's template backend API."
msgstr ""
":class:`django.template.backends.django.DjangoTemplates` は、 :class:`django."
"template.Engine` を Django のテンプレートバックエンド API に適応させる薄い"
"ラッパーです。"

msgid "Template"
msgstr "テンプレート"

msgid ""
":class:`django.template.Template` represents a compiled template. Templates "
"are obtained with :meth:`.Engine.get_template` or :meth:`.Engine."
"from_string`."
msgstr ""
":class:`django.template.Template` はコンパイルされたテンプレートを表します。"
"テンプレートは :meth:`.Engine.get_template` または :meth:`.Engine."
"from_string` で取得できます。"

msgid ""
"Likewise ``django.template.backends.django.Template`` is a thin wrapper "
"adapting :class:`django.template.Template` to the common template API."
msgstr ""
"同様に ``django.template.backends.django.Template`` は :class:`django."
"template.Template` を一般的なテンプレート API に適応させるための薄いラッパー"
"です。"

msgid "Context"
msgstr "コンテキスト"

msgid ""
":class:`django.template.Context` holds some metadata in addition to the "
"context data. It is passed to :meth:`.Template.render` for rendering a "
"template."
msgstr ""
":class:`django.template.Context` はコンテキストデータの他にいくつかのメタデー"
"タを保持します。これはテンプレートをレンダリングするために :meth:`.Template."
"render` に渡されます。"

msgid ""
":class:`django.template.RequestContext` is a subclass of :class:`~django."
"template.Context` that stores the current :class:`~django.http.HttpRequest` "
"and runs template context processors."
msgstr ""
":class:`django.template.RequestContext` は :class:`~django.template.Context` "
"のサブクラスで、現在の :class:`~django.http.HttpRequest` を保存し、テンプレー"
"トコンテキストプロセッサを実行します。"

msgid ""
"The common API doesn't have an equivalent concept. Context data is passed in "
"a plain :class:`dict` and the current :class:`~django.http.HttpRequest` is "
"passed separately if needed."
msgstr ""
"共通 API には等価な概念がありません。コンテキストデータはプレーンな :class:"
"`dict` で渡され、現在の :class:`~django.http.HttpRequest` は必要に応じて別途"
"渡されます。"

msgid "Loaders"
msgstr "ローダー"

msgid ""
"Template loaders are responsible for locating templates, loading them, and "
"returning :class:`~django.template.Template` objects."
msgstr ""
"テンプレートローダーが責任を持つのは、テンプレートの検索、テンプレートの読み"
"込み、:class:`~django.template.Template` オブジェクトを返すことです。"

msgid ""
"Django provides several :ref:`built-in template loaders <template-loaders>` "
"and supports :ref:`custom template loaders <custom-template-loaders>`."
msgstr ""
"Django はいくつかの :ref:`ビルトインのテンプレートローダー <template-"
"loaders>` を提供していて、 :ref:`カスタム テンプレートローダー <custom-"
"template-loaders>` をサポートしています。"

msgid "Context processors"
msgstr "コンテキストプロセッサ"

msgid ""
"Context processors are functions that receive the current :class:`~django."
"http.HttpRequest` as an argument and return a :class:`dict` of data to be "
"added to the rendering context."
msgstr ""
"コンテキストプロセッサは、現在の :class:`~django.http.HttpRequest` を引数とし"
"ておけとり、データの :class:`dict` をレンダリングコンテキストに追加して返しま"
"す。"

msgid ""
"Their main use is to add common data shared by all templates to the context "
"without repeating code in every view."
msgstr ""
"主な用途は、すべてのビューでコードを繰り返すことなく、すべてのテンプレートで"
"共有される共通のデータをコンテキストに追加することです。"

msgid ""
"Django provides many :ref:`built-in context processors <context-"
"processors>`, and you can implement your own additional context processors, "
"too."
msgstr ""
"Django は多くの :ref:`組み込みのコンテキストプロセッサ <context-processors>` "
"を提供し、独自のコンテキストプロセッサを追加実装することもできます。"

msgid "Support for template engines"
msgstr "テンプレートエンジンのサポート"

msgid "Configuration"
msgstr "設定"

msgid ""
"Templates engines are configured with the :setting:`TEMPLATES` setting. It's "
"a list of configurations, one for each engine. The default value is empty. "
"The ``settings.py`` generated by the :djadmin:`startproject` command defines "
"a more useful value::"
msgstr ""
"テンプレートエンジンは、:setting:`TEMPLATES` で設定できます。ここには、各エン"
"ジンに対する設定のリストを設定します。デフォルト値は空リストです。:djadmin:"
"`startproject` コマンドで生成された ``settings.py`` には、以下のように便利な"
"値がいくつか設定されます。"

msgid ""
":setting:`BACKEND <TEMPLATES-BACKEND>` is a dotted Python path to a template "
"engine class implementing Django's template backend API. The built-in "
"backends are :class:`django.template.backends.django.DjangoTemplates` and :"
"class:`django.template.backends.jinja2.Jinja2`."
msgstr ""
":setting:`BACKEND <TEMPLATES-BACKEND>` は、Django テンプレートバックエンド "
"API を実装したテンプレートエンジンのクラスへの、ドット区切りの Python path で"
"す。ビルトインのバックエンドは、:class:`django.template.backends.django."
"DjangoTemplates` と :class:`django.template.backends.jinja2.Jinja2` です。"

msgid ""
"Since most engines load templates from files, the top-level configuration "
"for each engine contains two common settings:"
msgstr ""
"ほとんどのエンジンはファイルからテンプレートを読み込むため、各エンジンのトッ"
"プレベルの設定には次の2つの設定があります。"

msgid ""
":setting:`DIRS <TEMPLATES-DIRS>` defines a list of directories where the "
"engine should look for template source files, in search order."
msgstr ""
":setting:`DIRS <TEMPLATES-DIRS>` には、エンジンがテンプレートのソースファイル"
"を検索するディレクトリのリストを、検索順に定義します。"

msgid ""
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>` tells whether the engine should "
"look for templates inside installed applications. Each backend defines a "
"conventional name for the subdirectory inside applications where its "
"templates should be stored."
msgstr ""
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>` には、エンジンがインストールしたアプ"
"リケーション内のテンプレートを検索するべきかどうかを指定します。各バックエン"
"ドは、アプリケーション内でテンプレートを保存するべきサブディレクトリ名とし"
"て、慣習的な名前を定義しています。"

msgid ""
"While uncommon, it's possible to configure several instances of the same "
"backend with different options. In that case you should define a unique :"
"setting:`NAME <TEMPLATES-NAME>` for each engine."
msgstr ""
"めったにないことですが、同じバックエンドの複数のインスタンスを、オプションだ"
"け変えて設定することも可能です。その場合、各エンジンに対して、:setting:`NAME "
"<TEMPLATES-NAME>` にユニークな名前を設定しなければなりません。"

msgid ""
":setting:`OPTIONS <TEMPLATES-OPTIONS>` contains backend-specific settings."
msgstr ""
":setting:`OPTIONS <TEMPLATES-OPTIONS>` には、バックエンド特有の設定を書きま"
"す。"

msgid ""
"The ``django.template.loader`` module defines two functions to load "
"templates."
msgstr ""
"``django.template.loader`` モジュールは、テンプレートを読み込むための2つの関"
"数を定義しています。"

msgid ""
"This function loads the template with the given name and returns a "
"``Template`` object."
msgstr ""
"この関数は、指定した名前のテンプレートを読み込み、``Template`` オブジェクトを"
"返します。"

msgid ""
"The exact type of the return value depends on the backend that loaded the "
"template. Each backend has its own ``Template`` class."
msgstr ""
"戻り値の正確な型はテンプレートを読み込んだバックエンドに依存します。それぞれ"
"のバックエンドは独自の ``Template`` クラスを持っています。"

msgid ""
"``get_template()`` tries each template engine in order until one succeeds. "
"If the template cannot be found, it raises :exc:`~django.template."
"TemplateDoesNotExist`. If the template is found but contains invalid syntax, "
"it raises :exc:`~django.template.TemplateSyntaxError`."
msgstr ""
"``get_template()`` は各テンプレートエンジンを見つけるまで順番に試します。テン"
"プレートが見つからない場合、 :exc:`~django.template.TemplateDoesNotExist` を"
"発生します。テンプレートが見つかったが無効な構文を含んでいる場合、 :exc:"
"`~django.template.TemplateSyntaxError` を発生します。"

msgid ""
"How templates are searched and loaded depends on each engine's backend and "
"configuration."
msgstr ""
"テンプレートがどのように検索され読み込まれるかは、各エンジンのバックエンドと"
"設定によって異なります。"

msgid ""
"If you want to restrict the search to a particular template engine, pass the "
"engine's :setting:`NAME <TEMPLATES-NAME>` in the ``using`` argument."
msgstr ""
"検索を特定のテンプレートエンジンに限定したい場合は、 ``using`` 引数にそのエン"
"ジンの :setting:`NAME <TEMPLATES-NAME>` を渡します。"

msgid ""
"``select_template()`` is just like ``get_template()``, except it takes a "
"list of template names. It tries each name in order and returns the first "
"template that exists."
msgstr ""
"``select_template()`` は ``get_template()`` に似ていますが、1つのテンプレート"
"名の代わりにテンプレート名のリストを取ります。各名前のテンプレートを順番に探"
"し、最初に見つかったテンプレートを返します。"

msgid ""
"If loading a template fails, the following two exceptions, defined in "
"``django.template``, may be raised:"
msgstr ""
"テンプレートの読み込みに失敗した場合、 ``django.template`` で定義されている以"
"下の2つの例外が発生する可能性があります:"

msgid ""
"This exception is raised when a template cannot be found. It accepts the "
"following optional arguments for populating the :ref:`template postmortem "
"<template-postmortem>` on the debug page:"
msgstr ""
"この例外はテンプレートが見つからない場合に発生します。デバッグページの :ref:"
"`template postmortem <template-postmortem>` に入力するために、以下のオプショ"
"ン引数を受け付けます:"

msgid "``backend``"
msgstr "``backend``"

msgid "The template backend instance from which the exception originated."
msgstr "例外が発生したテンプレートバックエンドのインスタンス。"

msgid "``tried``"
msgstr "``tried``"

msgid ""
"A list of sources that were tried when finding the template. This is "
"formatted as a list of tuples containing ``(origin, status)``, where "
"``origin`` is an :ref:`origin-like <template-origin-api>` object and "
"``status`` is a string with the reason the template wasn't found."
msgstr ""
"テンプレートを見つける際に試されたソースのリスト。フォーマットは ``(origin, "
"status)`` を含むタプルのリストです。ここで ``origin`` は :ref:`origin-like "
"<template-origin-api>` オブジェクトで、``status`` はテンプレートが見つからな"
"かった理由を表す文字列です。"

msgid "``chain``"
msgstr "``chain``"

msgid ""
"A list of intermediate :exc:`~django.template.TemplateDoesNotExist` "
"exceptions raised when trying to load a template. This is used by functions, "
"such as :func:`~django.template.loader.get_template`, that try to load a "
"given template from multiple engines."
msgstr ""
"テンプレートを読み込もうとしたときに発生した例外 :exc:`~django.template."
"TemplateDoesNotExist` の中間値のリストです。これは :func:`~django.template."
"loader.get_template` のような、与えられたテンプレートを複数のエンジンから読み"
"込もうとする関数で使用されます。"

msgid "This exception is raised when a template was found but contains errors."
msgstr ""
"この例外は、テンプレートが見つかったが、エラーを含んでいる場合に発生します。"

msgid ""
"``Template`` objects returned by ``get_template()`` and "
"``select_template()`` must provide a ``render()`` method with the following "
"signature:"
msgstr ""
"``get_template()`` と ``select_template()`` が返す ``Template`` オブジェクト"
"は以下のシグネチャを持つ ``render()`` メソッドを提供しなければなりません:"

msgid "Renders this template with a given context."
msgstr "与えられたコンテキストを用いて、このテンプレートをレンダリングします。"

msgid ""
"If ``context`` is provided, it must be a :class:`dict`. If it isn't "
"provided, the engine will render the template with an empty context."
msgstr ""
"``context`` を指定する場合は、:class:`dict` でなければなりません。もし指定し"
"なければ、エンジンは空のコンテキストでレンダリングします。"

msgid ""
"If ``request`` is provided, it must be an :class:`~django.http.HttpRequest`. "
"Then the engine must make it, as well as the CSRF token, available in the "
"template. How this is achieved is up to each backend."
msgstr ""
"``request`` を指定する場合は、:class:`~django.http.HttpRequest` でなければな"
"りません。テンプレートエンジンは、テンプレート内では、このインスタンスと "
"CSRF トークンを使用できるようにする必要があります。そのための実装はバックエン"
"ドに依存します。"

msgid ""
"Here's an example of the search algorithm. For this example the :setting:"
"`TEMPLATES` setting is::"
msgstr ""
"以下に、検索アルゴリズムの例を示します。この例の場合、:setting:`TEMPLATES` 設"
"定は次のようになっています。"

msgid ""
"If you call ``get_template('story_detail.html')``, here are the files Django "
"will look for, in order:"
msgstr ""
"``get_template('story_detail.html')`` を呼び出した場合、Django は次の順番に"
"ファイルを探します。"

msgid "``/home/html/example.com/story_detail.html`` (``'django'`` engine)"
msgstr "``/home/html/example.com/story_detail.html`` (``'django'`` エンジン)"

msgid "``/home/html/default/story_detail.html`` (``'django'`` engine)"
msgstr "``/home/html/default/story_detail.html`` (``'django'`` エンジン)"

msgid "``/home/html/jinja2/story_detail.html`` (``'jinja2'`` engine)"
msgstr "``/home/html/jinja2/story_detail.html`` (``'jinja2'`` エンジン)"

msgid ""
"If you call ``select_template(['story_253_detail.html', 'story_detail."
"html'])``, here's what Django will look for:"
msgstr ""
"``select_template(['story_253_detail.html', 'story_detail.html'])`` を呼び出"
"した場合、Djangoは以下の順番にファイルを探します。"

msgid "``/home/html/example.com/story_253_detail.html`` (``'django'`` engine)"
msgstr ""
"``/home/html/example.com/story_253_detail.html`` (``'django'`` エンジン)"

msgid "``/home/html/default/story_253_detail.html`` (``'django'`` engine)"
msgstr "``/home/html/default/story_253_detail.html`` (``'django'`` エンジン)"

msgid "``/home/html/jinja2/story_253_detail.html`` (``'jinja2'`` engine)"
msgstr "``/home/html/jinja2/story_253_detail.html`` (``'jinja2'`` エンジン)"

msgid "When Django finds a template that exists, it stops looking."
msgstr "Django がテンプレートを発見したら、その時点で探索は停止します。"

msgid "Use ``django.template.loader.select_template()`` for more flexibility"
msgstr ""
"より柔軟性を求める場合は ``django.template.loader.select_template()`` を使っ"
"てください。"

msgid ""
"You can use :func:`~django.template.loader.select_template()` for flexible "
"template loading. For example, if you've written a news story and want some "
"stories to have custom templates, use something like "
"``select_template(['story_%s_detail.html' % story.id, 'story_detail."
"html'])``. That'll allow you to use a custom template for an individual "
"story, with a fallback template for stories that don't have custom templates."
msgstr ""
":func:`~django.template.loader.select_template()` を使うと、柔軟にテンプレー"
"トを読み込むことができます。たとえば、ニュース記事を書いていて、いくつかの記"
"事にカスタムテンプレートを持たせたい場合、 "
"``select_template(['story_%s_detail.html' % story.id, 'story_detail."
"html'])`` のように使います。これにより、個々のストーリーにカスタムテンプレー"
"トを使用することができ、カスタムテンプレートを持たないストーリーにはフォール"
"バックテンプレートを使用できます。"

msgid ""
"It's possible -- and preferable -- to organize templates in subdirectories "
"inside each directory containing templates. The convention is to make a "
"subdirectory for each Django app, with subdirectories within those "
"subdirectories as needed."
msgstr ""
"テンプレートを含む各ディレクトリの中のサブディレクトリにテンプレートを整理す"
"ることは可能であり、望ましいことです。慣習としては、Django アプリごとにサブ"
"ディレクトリを作り、必要に応じてその中にサブディレクトリを作ります。"

msgid ""
"Do this for your own sanity. Storing all templates in the root level of a "
"single directory gets messy."
msgstr ""
"正気を保つためにも、そうしてください。すべてのテンプレートを1つのディレクトリ"
"のルートレベルに保存すると、面倒なことになります。"

msgid "To load a template that's within a subdirectory, use a slash, like so::"
msgstr ""
"サブディレクトリ内のテンプレートを読み込むには、次のようにスラッシュを使いま"
"す:"

msgid ""
"Using the same :setting:`TEMPLATES` option as above, this will attempt to "
"load the following templates:"
msgstr ""
"上記と同じ :setting:`TEMPLATES` オプションを使用すると、以下のテンプレートを"
"読み込もうとします:"

msgid "``/home/html/example.com/news/story_detail.html`` (``'django'`` engine)"
msgstr ""
"``/home/html/example.com/news/story_detail.html`` (``'django'`` エンジン)"

msgid "``/home/html/default/news/story_detail.html`` (``'django'`` engine)"
msgstr "``/home/html/default/news/story_detail.html`` (``'django'`` エンジン)"

msgid "``/home/html/jinja2/news/story_detail.html`` (``'jinja2'`` engine)"
msgstr "``/home/html/jinja2/news/story_detail.html`` (``'jinja2'`` エンジン)"

msgid ""
"In addition, to cut down on the repetitive nature of loading and rendering "
"templates, Django provides a shortcut function which automates the process."
msgstr ""
"さらに、テンプレートの読み込みやレンダリングの繰り返しを減らすために、Django "
"は処理を自動化するショートカット関数を提供しています。"

msgid ""
"``render_to_string()`` loads a template like :func:`get_template` and calls "
"its ``render()`` method immediately. It takes the following arguments."
msgstr ""
"``render_to_string()`` は :func:`get_template` のようにテンプレートを読み込ん"
"で、すぐに ``render()`` メソッドを呼び出します。以下の引数を取ります。"

msgid ""
"The name of the template to load and render. If it's a list of template "
"names, Django uses :func:`select_template` instead of :func:`get_template` "
"to find the template."
msgstr ""
"読み込んでレンダリングするテンプレートの名前です。テンプレート名のリストの場"
"合、 Django はテンプレートを見つけるのに :func:`get_template` の代わりに :"
"func:`select_template` を使います。"

msgid "A :class:`dict` to be used as the template's context for rendering."
msgstr ""
"レンダリングのためにテンプレートのコンテキストとして使用される :class:`dict` "
"です。"

msgid ""
"An optional :class:`~django.http.HttpRequest` that will be available during "
"the template's rendering process."
msgstr ""
"オプション :class:`~django.http.HttpRequest` で、テンプレートのレンダリング処"
"理中に利用できます。"

msgid ""
"An optional template engine :setting:`NAME <TEMPLATES-NAME>`. The search for "
"the template will be restricted to that engine."
msgstr ""
"オプションのテンプレートエンジン :setting:`NAME <TEMPLATES-NAME>` です。テン"
"プレートの検索はそのエンジンに制限されます。"

msgid "Usage example::"
msgstr "使用例:"

msgid ""
"See also the :func:`~django.shortcuts.render()` shortcut which calls :func:"
"`render_to_string()` and feeds the result into an :class:`~django.http."
"HttpResponse` suitable for returning from a view."
msgstr ""
":func:`~django.shortcuts.render()` ショートカットも参照してください。この"
"ショートカットは :func:`render_to_string()` を呼び出して、その結果をビューか"
"ら返すのに適した :class:`~django.http.HttpResponse` に出力します。"

msgid "Finally, you can use configured engines directly:"
msgstr "最後に、設定されたエンジンを直接使用することもできます:"

msgid "Template engines are available in ``django.template.engines``::"
msgstr "テンプレートエンジンは ``django.template.engines`` で利用できます:"

msgid ""
"The lookup key — ``'django'`` in this example — is the engine's :setting:"
"`NAME <TEMPLATES-NAME>`."
msgstr ""
"ルックアップのキー (この例では ``'django'``) はエンジンの :setting:`NAME "
"<TEMPLATES-NAME>` です。"

msgid "Built-in backends"
msgstr "組み込みのバックエンド"

msgid ""
"Set :setting:`BACKEND <TEMPLATES-BACKEND>` to ``'django.template.backends."
"django.DjangoTemplates'`` to configure a Django template engine."
msgstr ""
"Django テンプレートエンジンを設定するには、 :setting:`BACKEND <TEMPLATES-"
"BACKEND>` を ``'django.template.backends.django.DjangoTemplates'`` にセットし"
"ます。"

msgid ""
"When :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is ``True``, "
"``DjangoTemplates`` engines look for templates in the ``templates`` "
"subdirectory of installed applications. This generic name was kept for "
"backwards-compatibility."
msgstr ""
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>` が ``True`` の場合、 "
"``DjangoTemplates`` エンジンはインストールされたアプリケーションの "
"``templates`` サブディレクトリにあるテンプレートを探します。この一般名は後方"
"互換性のために残されています。"

msgid ""
"``DjangoTemplates`` engines accept the following :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>`:"
msgstr ""
"``DjangoTemplates`` エンジンは以下の :setting:`OPTIONS <TEMPLATES-OPTIONS>` "
"を受け付けます:"

msgid ""
"``'autoescape'``: a boolean that controls whether HTML autoescaping is "
"enabled."
msgstr ""
"``'autoescape'``: HTMLのオートエスケープを有効にするかどうかをコントロールす"
"る真偽値です。"

msgid "It defaults to ``True``."
msgstr "デフォルトは ``True`` です。"

msgid "Only set it to ``False`` if you're rendering non-HTML templates!"
msgstr ""
"HTML以外のテンプレートをレンダリングする場合のみ ``False`` に設定してくださ"
"い！"

msgid ""
"``'context_processors'``: a list of dotted Python paths to callables that "
"are used to populate the context when a template is rendered with a request. "
"These callables take a request object as their argument and return a :class:"
"`dict` of items to be merged into the context."
msgstr ""
"``'context_processors'``: リクエストでテンプレートがレンダリングされるときに"
"コンテキストを生成するために使用される呼び出し可能オブジェクトへの Python の"
"ドット区切りパスのリストです。これらの呼び出し可能オブジェクトはリクエストオ"
"ブジェクトを引数として取り、コンテキストにマージされるアイテムの :class:"
"`dict` を返します。"

msgid "It defaults to an empty list."
msgstr "デフォルトは空のリストです。"

msgid "See :class:`~django.template.RequestContext` for more information."
msgstr "詳しくは :class:`~django.template.RequestContext` を参照してください。"

msgid ""
"``'debug'``: a boolean that turns on/off template debug mode. If it is "
"``True``, the fancy error page will display a detailed report for any "
"exception raised during template rendering. This report contains the "
"relevant snippet of the template with the appropriate line highlighted."
msgstr ""
"``'debug'``: テンプレートのデバッグモードのオン/オフを切り替える真偽値です。"
"もし ``True`` なら、テンプレートのレンダリング中に例外が発生した場合、fancy "
"エラーページに詳細なレポートが表示されます。このレポートには、該当する行がハ"
"イライトされたテンプレートのスニペットが含まれます。"

msgid "It defaults to the value of the :setting:`DEBUG` setting."
msgstr "デフォルトは :setting:`DEBUG` 設定の値です。"

msgid ""
"``'loaders'``: a list of dotted Python paths to template loader classes. "
"Each ``Loader`` class knows how to import templates from a particular "
"source. Optionally, a tuple can be used instead of a string. The first item "
"in the tuple should be the ``Loader`` class name, and subsequent items are "
"passed to the ``Loader`` during initialization."
msgstr ""
"``'loaders'``: テンプレートローダクラスへの Python のドット区切りパスのリスト"
"です。各 ``Loader`` クラスは特定のソースからテンプレートをインポートする方法"
"を知っています。任意で、文字列の代わりにタプルを使うこともできます。タプルの"
"最初の項目は ``Loader`` クラス名で、それ以降の項目は初期化時に ``Loader`` に"
"渡されます。"

msgid ""
"The default depends on the values of :setting:`DIRS <TEMPLATES-DIRS>` and :"
"setting:`APP_DIRS <TEMPLATES-APP_DIRS>`."
msgstr ""
"デフォルトは :setting:`DIRS <TEMPLATES-DIRS>` と :setting:`APP_DIRS "
"<TEMPLATES-APP_DIRS>` の値に依存します。"

msgid "See :ref:`template-loaders` for details."
msgstr "詳しくは :ref:`template-loaders` を参照してください。"

msgid ""
"``'string_if_invalid'``: the output, as a string, that the template system "
"should use for invalid (e.g. misspelled) variables."
msgstr ""
"``'string_if_invalid'``: 無効な(例えばスペルミスのある)変数に対してテンプレー"
"トシステムが使用する文字列です。"

msgid "It defaults to an empty string."
msgstr "デフォルトは空文字列です。"

msgid "See :ref:`invalid-template-variables` for details."
msgstr "詳しくは :ref:`invalid-template-variables` を参照してください。"

msgid "``'file_charset'``: the charset used to read template files on disk."
msgstr ""
"``'file_charset'``: ディスク上のテンプレートファイルを読み込む際に使用する文"
"字セットです。"

msgid "It defaults to ``'utf-8'``."
msgstr "デフォルトは ``'utf-8'`` です。"

msgid ""
"``'libraries'``: A dictionary of labels and dotted Python paths of template "
"tag modules to register with the template engine. This can be used to add "
"new libraries or provide alternate labels for existing ones. For example::"
msgstr ""
"``'libraries'``: テンプレートエンジンに登録するテンプレートタグモジュールのラ"
"ベルとドット区切りPythonパスの辞書。これは新しいライブラリを追加したり、既存"
"のライブラリの代替ラベルを提供するために使用できます。たとえば:"

msgid ""
"Libraries can be loaded by passing the corresponding dictionary key to the :"
"ttag:`{% load %}<load>` tag."
msgstr ""
":ttag:`{% load %}<load>` タグに対応する辞書のキーを渡すことでライブラリをロー"
"ドできます。"

msgid ""
"``'builtins'``: A list of dotted Python paths of template tag modules to add "
"to :doc:`built-ins </ref/templates/builtins>`. For example::"
msgstr ""
"``'builtins'``: :doc:`ビルトイン </ref/templates/builtins>` に追加するテンプ"
"レートタグモジュールのドット区切りPythonパスのリストです。たとえば:"

msgid ""
"Tags and filters from built-in libraries can be used without first calling "
"the :ttag:`{% load %} <load>` tag."
msgstr ""
":ttag:`{% load %} <load>` タグを呼び出さなくても、組み込みライブラリのタグや"
"フィルタを使うことができます。"

msgid "Requires Jinja2_ to be installed:"
msgstr "Jinja2_ がインストールされている必要があります:"

msgid ""
"Set :setting:`BACKEND <TEMPLATES-BACKEND>` to ``'django.template.backends."
"jinja2.Jinja2'`` to configure a Jinja2_ engine."
msgstr ""
"Jinja2_ エンジンを指定するには :setting:`BACKEND <TEMPLATES-BACKEND>` に "
"``'django.template.backends.jinja2.Jinja2'`` を設定します。"

msgid ""
"When :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is ``True``, ``Jinja2`` "
"engines look for templates in the ``jinja2`` subdirectory of installed "
"applications."
msgstr ""
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>` が ``True`` の場合、 ``Jinja2`` エン"
"ジンはインストールされているアプリケーションの ``jinja2`` サブディレクトリに"
"あるテンプレートを探します。"

msgid ""
"The most important entry in :setting:`OPTIONS <TEMPLATES-OPTIONS>` is "
"``'environment'``. It's a dotted Python path to a callable returning a "
"Jinja2 environment. It defaults to ``'jinja2.Environment'``. Django invokes "
"that callable and passes other options as keyword arguments. Furthermore, "
"Django adds defaults that differ from Jinja2's for a few options:"
msgstr ""
":setting:`OPTIONS <TEMPLATES-OPTIONS>` の中で最も重要なエントリは "
"``'environment'`` です。これはJinja2の環境を返す呼び出し可能オブジェクトへの"
"Pythonのドット区切りパスです。デフォルトは ``'jinja2.Environment'`` です。"
"Django はその呼び出し可能オブジェクトを起動し、他のオプションをキーワード引数"
"として渡します。さらに、 Django はいくつかのオプションに Jinja2 とは異なるデ"
"フォルトを追加します:"

msgid "``'autoescape'``: ``True``"
msgstr "``'autoescape'``: ``True``"

msgid ""
"``'loader'``: a loader configured for :setting:`DIRS <TEMPLATES-DIRS>` and :"
"setting:`APP_DIRS <TEMPLATES-APP_DIRS>`"
msgstr ""
"``'loader'``: :setting:`DIRS <TEMPLATES-DIRS>` と :setting:`APP_DIRS "
"<TEMPLATES-APP_DIRS>` に設定されたローダー。"

msgid "``'auto_reload'``: ``settings.DEBUG``"
msgstr "``'auto_reload'``: ``settings.DEBUG``"

msgid "``'undefined'``: ``DebugUndefined if settings.DEBUG else Undefined``"
msgstr "``'undefined'``: ``DebugUndefined if settings.DEBUG else Undefined``"

msgid ""
"``Jinja2`` engines also accept the following :setting:`OPTIONS <TEMPLATES-"
"OPTIONS>`:"
msgstr ""
"また、 ``Jinja2`` エンジンは以下の :setting:`OPTIONS <TEMPLATES-OPTIONS>` も"
"受け付けます:"

msgid "Using context processors with Jinja2 templates is discouraged."
msgstr ""
"Jinja2テンプレートでコンテキストプロセッサを使用することは推奨されません。"

msgid ""
"Context processors are useful with Django templates because Django templates "
"don't support calling functions with arguments. Since Jinja2 doesn't have "
"that limitation, it's recommended to put the function that you would use as "
"a context processor in the global variables available to the template using "
"``jinja2.Environment`` as described below. You can then call that function "
"in the template:"
msgstr ""
"Django テンプレートは引数付き関数の呼び出しをサポートしていないので、 コンテ"
"キストプロセッサは Django テンプレートで有用です。Jinja2 にはその制限がないの"
"で、コンテキストプロセッサとして使う関数を ``jinja2.Environment`` を使ってテ"
"ンプレートのグローバル変数に置くことをお勧めします。そうすれば、テンプレート"
"の中でその関数を呼び出すことができます:"

msgid ""
"Some Django templates context processors return a fixed value. For Jinja2 "
"templates, this layer of indirection isn't necessary since you can add "
"constants directly in ``jinja2.Environment``."
msgstr ""
"いくつかの Django テンプレートコンテキストプロセッサは固定値を返します。"
"Jinja2 テンプレートでは、 ``jinja2.Environment`` で直接定数を追加できるので、"
"このような間接的なレイヤーは不要です。"

msgid ""
"The original use case for adding context processors for Jinja2 involved:"
msgstr ""
"Jinja2用のコンテキストプロセッサを追加する当初のユースケースは、次のようなも"
"のでした:"

msgid "Making an expensive computation that depends on the request."
msgstr "リクエストに依存する高コストな計算。"

msgid "Needing the result in every template."
msgstr "すべてのテンプレートで結果が必要な場合。"

msgid "Using the result multiple times in each template."
msgstr "各テンプレートで結果を複数回使用する場合。"

msgid ""
"Unless all of these conditions are met, passing a function to the template "
"is more in line with the design of Jinja2."
msgstr ""
"これらの条件がすべて満たされない限り、テンプレートに関数を渡す方が Jinja2 の"
"設計に合っています。"

msgid ""
"The default configuration is purposefully kept to a minimum. If a template "
"is rendered with a request (e.g. when using :py:func:`~django.shortcuts."
"render`), the ``Jinja2`` backend adds the globals ``request``, "
"``csrf_input``, and ``csrf_token`` to the context. Apart from that, this "
"backend doesn't create a Django-flavored environment. It doesn't know about "
"Django filters and tags. In order to use Django-specific APIs, you must "
"configure them into the environment."
msgstr ""
"デフォルトの設定は意図的に最小限に抑えられています。テンプレートがリクエスト"
"と共にレンダリングされる場合 (例えば :py:func:`~django.shortcuts.render` を使"
"用する場合)、 ``Jinja2`` バックエンドは ``request`` 、 ``csrf_input`` および "
"``csrf_token`` というグローバルをコンテキストに追加します。それ以外は、この"
"バックエンドは Django フレーバーの環境を作りません。Django のフィルタやタグに"
"ついては知りません。Django 固有の API を使うには、環境に設定する必要がありま"
"す。"

msgid "For example, you can create ``myproject/jinja2.py`` with this content::"
msgstr ""
"たとえば、下記のような内容の ``myproject/jinja2.py`` を作成することができ、:"

msgid ""
"and set the ``'environment'`` option to ``'myproject.jinja2.environment'``."
msgstr ""
"これで ``'environment'`` オプションを ``'myproject.jinja2.environment'`` に設"
"定できます。"

msgid "Then you could use the following constructs in Jinja2 templates:"
msgstr "そして、Jinja2 テンプレートで以下の構文を使用できるようになります:"

msgid ""
"The concepts of tags and filters exist both in the Django template language "
"and in Jinja2 but they're used differently. Since Jinja2 supports passing "
"arguments to callables in templates, many features that require a template "
"tag or filter in Django templates can be achieved by calling a function in "
"Jinja2 templates, as shown in the example above. Jinja2's global namespace "
"removes the need for template context processors. The Django template "
"language doesn't have an equivalent of Jinja2 tests."
msgstr ""
"タグとフィルタの概念は Django テンプレート言語にも Jinja2 にもありますが、使"
"い方が異なります。Jinja2 はテンプレートの呼び出し可能オブジェクトに引数を渡す"
"ことをサポートしているので、 Django テンプレートでテンプレートタグやフィルタ"
"を必要とする多くの機能は、上の例のように Jinja2 テンプレートで関数を呼び出す"
"ことで実現できます。Jinja2 のグローバル名前空間はテンプレートコンテキストプロ"
"セッサの必要性をなくします。Django テンプレート言語には Jinja2 のテストに等価"
"なものはありません。"

msgid "Advanced testing topics"
msgstr "テストに関する高度なトピック"

msgid "The request factory"
msgstr "RequestFactory（リクエスト ファクトリ）"

msgid ""
"The :class:`~django.test.RequestFactory` shares the same API as the test "
"client. However, instead of behaving like a browser, the RequestFactory "
"provides a way to generate a request instance that can be used as the first "
"argument to any view. This means you can test a view function the same way "
"as you would test any other function -- as a black box, with exactly known "
"inputs, testing for specific outputs."
msgstr ""
":class:`~django.test.RequestFactory` はテストクライアントと同じ API を共有し"
"ています。しかし、ブラウザのように動作するのではなく、 RequestFactory は任意"
"のビューの最初の引数として使用できるリクエストインスタンスを生成する方法を提"
"供します。つまり、ビュー関数を他の関数をテストするのと同じ方法で テストできま"
"す。入力が完全にわかっているブラックボックスとして、特定の出力をテストできま"
"す。"

msgid ""
"The API for the :class:`~django.test.RequestFactory` is a slightly "
"restricted subset of the test client API:"
msgstr ""
":class:`~django.test.RequestFactory` の API は、テストクライアント API の少し"
"制限されたサブセットです:"

msgid ""
"It only has access to the HTTP methods :meth:`~Client.get()`, :meth:`~Client."
"post()`, :meth:`~Client.put()`, :meth:`~Client.delete()`, :meth:`~Client."
"head()`, :meth:`~Client.options()`, and :meth:`~Client.trace()`."
msgstr ""
"RequestFactoryは、HTTPメソッドの :meth:`~Client.get()`, :meth:`~Client."
"post()`, :meth:`~Client.put()`, :meth:`~Client.delete()`, :meth:`~Client."
"head()`, :meth:`~Client.options()`, :meth:`~Client.trace()` にだけアクセスで"
"きます。"

msgid ""
"These methods accept all the same arguments *except* for ``follow``. Since "
"this is just a factory for producing requests, it's up to you to handle the "
"response."
msgstr ""
"これらのメソッドは ``follow`` *以外* はすべて同じ引数を受け取ります。これはリ"
"クエストを生成するための単なるファクトリ（工場）なので、 レスポンスの処理はあ"
"なた次第です。"

msgid ""
"It does not support middleware. Session and authentication attributes must "
"be supplied by the test itself if required for the view to function properly."
msgstr ""
"ミドルウェアはサポートしていません。セッション属性と認証属性は、ビューが正し"
"く機能するために必要であれば、テスト自身が持たなければなりません。"

msgid "The ``headers`` parameter was added."
msgstr "``headers`` パラメータが追加されました。"

msgid "The following is a unit test using the request factory::"
msgstr "以下はリクエスト・ファクトリを使ったユニットテストです:"

msgid "AsyncRequestFactory"
msgstr "AsyncRequestFactory"

msgid ""
"``RequestFactory`` creates WSGI-like requests. If you want to create ASGI-"
"like requests, including having a correct ASGI ``scope``, you can instead "
"use ``django.test.AsyncRequestFactory``."
msgstr ""
"``RequestFactory`` は WSGI ライクなリクエストを作成します。正しい ASGI "
"``scope`` を持つなど、ASGI ライクなリクエストを作成したい場合は、代わりに "
"``django.test.AsyncRequestFactory`` が使用できます。"

msgid ""
"This class is directly API-compatible with ``RequestFactory``, with the only "
"difference being that it returns ``ASGIRequest`` instances rather than "
"``WSGIRequest`` instances. All of its methods are still synchronous "
"callables."
msgstr ""
"このクラスは ``RequestFactory`` と直接 API 互換ですが、唯一の違いは "
"``WSGIRequest`` インスタンスではなく ``ASGIRequest`` インスタンスを返すことで"
"す。そのメソッドはすべて同期呼び出し可能オブジェクトのままです。"

msgid ""
"Arbitrary keyword arguments in ``defaults`` are added directly into the ASGI "
"scope."
msgstr ""
"``defaults`` 内の任意のキーワード引数は直接ASGIスコープに追加されます。"

msgid "Testing class-based views"
msgstr "クラスベースのビューをテストする"

msgid ""
"In order to test class-based views outside of the request/response cycle you "
"must ensure that they are configured correctly, by calling :meth:`~django."
"views.generic.base.View.setup` after instantiation."
msgstr ""
"リクエスト/レスポンスサイクルの外でクラスベースのビューをテストするには、イン"
"スタンス化後に :meth:`~django.views.generic.base.View.setup` を呼び出して、正"
"しく設定されていることを確認する必要があります。"

msgid "For example, assuming the following class-based view:"
msgstr "たとえば、以下のようなクラスベースのビューを想定します:"

msgid ""
"You may directly test the ``get_context_data()`` method by first "
"instantiating the view, then passing a ``request`` to ``setup()``, before "
"proceeding with your test's code:"
msgstr ""
"``get_context_data()`` メソッドを直接テストするには、まずビューをインスタンス"
"化して ``setup()`` に ``request`` を渡します:"

msgid "``tests.py``"
msgstr "``tests.py``"

msgid "Tests and multiple host names"
msgstr "テストとマルチホスト名"

msgid ""
"The :setting:`ALLOWED_HOSTS` setting is validated when running tests. This "
"allows the test client to differentiate between internal and external URLs."
msgstr ""
":setting:`ALLOWED_HOSTS` 設定はテストを実行する際に検証されます。これによりテ"
"ストクライアントが内部 URL と外部 URL を区別できるようになります。"

msgid ""
"Projects that support multitenancy or otherwise alter business logic based "
"on the request's host and use custom host names in tests must include those "
"hosts in :setting:`ALLOWED_HOSTS`."
msgstr ""
"マルチテナントをサポートするプロジェクトや、リクエストのホストに基づいてビジ"
"ネスロジックを変更するプロジェクトで、カスタムホスト名をテストで使用する場合"
"は、それらのホストを :setting:`ALLOWED_HOSTS` に含める必要があります。"

msgid ""
"The first option to do so is to add the hosts to your settings file. For "
"example, the test suite for docs.djangoproject.com includes the following::"
msgstr ""
"そのための最初の選択肢は、hosts を設定ファイルに追加することです。例えば、"
"docs.djangoproject.com のテストスイートには以下が含まれています:"

msgid ""
"and the settings file includes a list of the domains supported by the "
"project::"
msgstr ""
"そして設定ファイルには、プロジェクトがサポートするドメインのリストが含まれて"
"います:"

msgid ""
"Another option is to add the required hosts to :setting:`ALLOWED_HOSTS` "
"using :meth:`~django.test.override_settings()` or :attr:`~django.test."
"SimpleTestCase.modify_settings()`. This option may be preferable in "
"standalone apps that can't package their own settings file or for projects "
"where the list of domains is not static (e.g., subdomains for multitenancy). "
"For example, you could write a test for the domain ``http://otherserver/`` "
"as follows::"
msgstr ""
"2つめの選択肢は、 :meth:`~django.test.override_settings()` や :attr:`~django."
"test.SimpleTestCase.modify_settings()` を使って、 :setting:`ALLOWED_HOSTS` に"
"必要なホストを追加する方法です。この方法は、独自の設定ファイルをパッケージ化"
"できないスタンドアロンアプリや、ドメインのリストが静的でないプロジェクト (例"
"えば、マルチテナンシー用のサブドメイン) には適しているかもしれません。たとえ"
"ば、ドメイン ``http://otherserver/`` に対して次のようなテストを書くことができ"
"ます:"

msgid ""
"Disabling :setting:`ALLOWED_HOSTS` checking (``ALLOWED_HOSTS = ['*']``) when "
"running tests prevents the test client from raising a helpful error message "
"if you follow a redirect to an external URL."
msgstr ""
"テストの実行時に :setting:`ALLOWED_HOSTS` チェック (``ALLOWED_HOSTS = "
"['*']``) を無効にすると、外部 URL へのリダイレクトを辿ったときにテストクライ"
"アントが役立つエラーメッセージを表示しないようになります。"

msgid "Tests and multiple databases"
msgstr "テストと複数データベース"

msgid "Testing primary/replica configurations"
msgstr "プライマリ/レプリカ構成のテスト"

msgid ""
"If you're testing a multiple database configuration with primary/replica "
"(referred to as master/slave by some databases) replication, this strategy "
"of creating test databases poses a problem. When the test databases are "
"created, there won't be any replication, and as a result, data created on "
"the primary won't be seen on the replica."
msgstr ""
"プライマリ/レプリカ（データベースによってはマスタ/スレーブとも呼ばれる）レプ"
"リケーションを使用した複数データベース構成をテストする場合、テスト用データ"
"ベースを作成するこの方法には問題があります。テスト用データベースを作成する"
"と、レプリケーションが行われなくなり、その結果、プライマリで作成されたデータ"
"がレプリカで見られなくなります。"

msgid ""
"To compensate for this, Django allows you to define that a database is a "
"*test mirror*. Consider the following (simplified) example database "
"configuration::"
msgstr ""
"これを補うために、 Django ではデータベースを *テストミラー* と定義できます。"
"以下の (単純化した) データベース設定例を見てください:"

msgid ""
"In this setup, we have two database servers: ``dbprimary``, described by the "
"database alias ``default``, and ``dbreplica`` described by the alias "
"``replica``. As you might expect, ``dbreplica`` has been configured by the "
"database administrator as a read replica of ``dbprimary``, so in normal "
"activity, any write to ``default`` will appear on ``replica``."
msgstr ""
"この設定では、2つのデータベースサーバーがあります。 ``dbprimary`` はデータ"
"ベースのエイリアス ``default`` で、 ``dbreplica`` はエイリアス ``replica`` で"
"表します。期待の通り、 ``dbreplica`` はデータベース管理者によって "
"``dbprimary`` の読み込み用レプリカとして設定されているので、通常の操作では "
"``default`` への書き込みは ``replica`` に反映されます。"

msgid ""
"If Django created two independent test databases, this would break any tests "
"that expected replication to occur. However, the ``replica`` database has "
"been configured as a test mirror (using the :setting:`MIRROR <TEST_MIRROR>` "
"test setting), indicating that under testing, ``replica`` should be treated "
"as a mirror of ``default``."
msgstr ""
"Django で2つの独立したテスト用データベースを作成した場合、レプリケーションを"
"期待したテストが壊れてしまいます。しかし、 ``replica`` データベースはテスト用"
"ミラーとして設定されており (テスト設定 :setting:`MIRROR <TEST_MIRROR>` を使っ"
"ています)、テストでは ``replica`` は ``default`` のミラーとして扱われるはずで"
"す。"

msgid ""
"When the test environment is configured, a test version of ``replica`` will "
"*not* be created. Instead the connection to ``replica`` will be redirected "
"to point at ``default``. As a result, writes to ``default`` will appear on "
"``replica`` -- but because they are actually the same database, not because "
"there is data replication between the two databases. As this depends on "
"transactions, the tests must use :class:`~django.test.TransactionTestCase` "
"instead of :class:`~django.test.TestCase`."
msgstr ""
"テスト環境が設定されると、テストバージョンの ``replica`` は作成されません。代"
"わりに ``replica`` への接続は ``default`` を指すようにリダイレクトされます。"
"その結果、``default`` への書き込みは ``replica`` に表示されますが、これは実際"
"には同じデータベースであることが原因であり、2つのデータベース間でデータの複製"
"が行われていることが原因ではありません。これはトランザクションに依存している"
"ので、テストでは :class:`~django.test.TestCase` ではなく :class:`~django."
"test.TransactionTestCase` を使う必要があります。"

msgid "Controlling creation order for test databases"
msgstr "テストデータベースの作成順をコントロールする"

msgid ""
"By default, Django will assume all databases depend on the ``default`` "
"database and therefore always create the ``default`` database first. "
"However, no guarantees are made on the creation order of any other databases "
"in your test setup."
msgstr ""
"デフォルトでは、 Django は全てのデータベースが ``default`` データベースに依存"
"しているとみなすので、常に ``default`` データベースを最初に作成します。しか"
"し、テストセットアップの他のデータベースの作成順は保証されません。"

msgid ""
"If your database configuration requires a specific creation order, you can "
"specify the dependencies that exist using the :setting:`DEPENDENCIES "
"<TEST_DEPENDENCIES>` test setting. Consider the following (simplified) "
"example database configuration::"
msgstr ""
"データベース構成が特定の作成順序を必要とする場合、:setting:`DEPENDENCIES "
"<TEST_DEPENDENCIES>` テスト設定を使用して存在する依存関係を指定できます。次の"
"（単純化した）データベース構成の例を考えてみましょう:"

msgid ""
"Under this configuration, the ``diamonds`` database will be created first, "
"as it is the only database alias without dependencies. The ``default`` and "
"``clubs`` alias will be created next (although the order of creation of this "
"pair is not guaranteed), then ``hearts``, and finally ``spades``."
msgstr ""
"この設定では、依存関係のない唯一のエイリアスである ``diamonds`` データベース"
"が最初に作成されます。次に ``default`` と ``clubs`` のエイリアスが作成され"
"（このペアの作成順序は保証されていません）、次に ``hearts`` が作成され、最後"
"に ``spades`` が作成されます。"

msgid ""
"If there are any circular dependencies in the :setting:`DEPENDENCIES "
"<TEST_DEPENDENCIES>` definition, an :exc:`~django.core.exceptions."
"ImproperlyConfigured` exception will be raised."
msgstr ""
":setting:`DEPENDENCIES <TEST_DEPENDENCIES>` の定義に循環依存がある場合、 :"
"exc:`~django.core.exceptions.ImproperlyConfigured` 例外が発生します。"

msgid "Advanced features of ``TransactionTestCase``"
msgstr "``TransactionTestCase`` の高度な機能"

msgid ""
"This attribute is a private API. It may be changed or removed without a "
"deprecation period in the future, for instance to accommodate changes in "
"application loading."
msgstr ""
"この属性はプライベートAPIです。例えば、アプリケーションの読み込みの変更に対応"
"するために、将来、非推奨期間なしに変更または削除される可能性があります。"

msgid ""
"It's used to optimize Django's own test suite, which contains hundreds of "
"models but no relations between models in different applications."
msgstr ""
"これは Django 自身のテストスイートを最適化するために使われます。このテストス"
"イート には何百ものモデルが含まれますが、異なるアプリケーションのモデル間のリ"
"レーションはありません。"

msgid ""
"By default, ``available_apps`` is set to ``None``. After each test, Django "
"calls :djadmin:`flush` to reset the database state. This empties all tables "
"and emits the :data:`~django.db.models.signals.post_migrate` signal, which "
"recreates one content type and four permissions for each model. This "
"operation gets expensive proportionally to the number of models."
msgstr ""
"デフォルトでは、``available_apps`` は ``None`` に設定されています。各テスト"
"後、Django は :djadmin:`flush` を呼び出して、データベースの状態をリセットしま"
"す。これにより、すべてのテーブルが空になります。そして、:data:`~django.db."
"models.signals.post_migrate` シグナルが送信されることにより、各モデルごとに、"
"1つのコンテンツタイプと4つのパーミッションが再生成されます。この操作にかかる"
"コストは、モデル数に比例して増大します。"

msgid ""
"Setting ``available_apps`` to a list of applications instructs Django to "
"behave as if only the models from these applications were available. The "
"behavior of ``TransactionTestCase`` changes as follows:"
msgstr ""
"``available_apps`` にアプリケーションのリストを指定すると、 Django はこれらの"
"アプリケーションのモデルだけが利用可能であるかのように動作します。 "
"``TransactionTestCase`` の動作は以下のように変わります:"

msgid ""
":data:`~django.db.models.signals.post_migrate` is fired before each test to "
"create the content types and permissions for each model in available apps, "
"in case they're missing."
msgstr ""
":data:`~django.db.models.signals.post_migrate` は、利用可能なアプリケーション"
"の各モデルに対して、存在しない場合にコンテンツタイプやアクセス権を作成するた"
"めに、各テストの前に起動します。"

msgid ""
"After each test, Django empties only tables corresponding to models in "
"available apps. However, at the database level, truncation may cascade to "
"related models in unavailable apps. Furthermore :data:`~django.db.models."
"signals.post_migrate` isn't fired; it will be fired by the next "
"``TransactionTestCase``, after the correct set of applications is selected."
msgstr ""
"各テストの後、 Django は利用可能なアプリのモデルに対応するテーブルだけを空に"
"します。しかし、データベースレベルでは、切り捨て（truncation）が利用できない"
"アプリのリレーション先モデルにカスケードするかもしれません。さらに、 :data:"
"`~django.db.models.signals.post_migrate` は起動されません。正しいアプリケー"
"ションのセットが選択された後、次の ``TransactionTestCase`` で起動されます。"

msgid ""
"Since the database isn't fully flushed, if a test creates instances of "
"models not included in ``available_apps``, they will leak and they may cause "
"unrelated tests to fail. Be careful with tests that use sessions; the "
"default session engine stores them in the database."
msgstr ""
"データベースは完全には flush されないので、テストが ``available_apps`` に含ま"
"れていないモデルのインスタンスを作成すると、そのインスタンスが漏れて無関係な"
"テストが失敗する可能性があります。セッションを使用するテストには注意してくだ"
"さい。デフォルトのセッションエンジンはセッションをデータベースに保存します。"

msgid ""
"Since :data:`~django.db.models.signals.post_migrate` isn't emitted after "
"flushing the database, its state after a ``TransactionTestCase`` isn't the "
"same as after a ``TestCase``: it's missing the rows created by listeners to :"
"data:`~django.db.models.signals.post_migrate`. Considering the :ref:`order "
"in which tests are executed <order-of-tests>`, this isn't an issue, provided "
"either all ``TransactionTestCase`` in a given test suite declare "
"``available_apps``, or none of them."
msgstr ""
"データベースをフラッシュした後には :data:`~django.db.models.signals."
"post_migrate` が発行されないため、``TransactionTestCase`` の後の状態は "
"``TestCase`` の後の状態と同じではありません。つまり、:data:`~django.db."
"models.signals.post_migrate` のリスナーによって作成された行が欠落しています。"
"テストの実行順序に関する :ref:`注意事項 <order-of-tests>` を踏まえると、与え"
"られたテストスイート内のすべての ``TransactionTestCase`` が "
"``available_apps`` を宣言しているか、または一つも宣言していない場合、これは問"
"題ではありません。"

msgid "``available_apps`` is mandatory in Django's own test suite."
msgstr "``available_apps`` は Django 自身のテストスイートでは必須です。"

msgid ""
"Setting ``reset_sequences = True`` on a ``TransactionTestCase`` will make "
"sure sequences are always reset before the test run::"
msgstr ""
"``TransactionTestCase`` で ``reset_sequences = True`` を設定すると、テスト実"
"行前にシーケンスが常にリセットされます:"

msgid ""
"Unless you are explicitly testing primary keys sequence numbers, it is "
"recommended that you do not hard code primary key values in tests."
msgstr ""
"主キーのシーケンス番号を明示的にテストするのでなければ、 主キーの値をハード"
"コーディングしないことを推奨します。"

msgid ""
"Using ``reset_sequences = True`` will slow down the test, since the primary "
"key reset is a relatively expensive database operation."
msgstr ""
"主キーのリセットは比較的高コストなデータベース操作なので、 ``reset_sequences "
"= True`` を使用するとテストが遅くなります。"

msgid "Enforce running test classes sequentially"
msgstr "テストクラスを強制的に逐次実行する"

msgid ""
"If you have test classes that cannot be run in parallel (e.g. because they "
"share a common resource), you can use ``django.test.testcases."
"SerializeMixin`` to run them sequentially. This mixin uses a filesystem "
"``lockfile``."
msgstr ""
"並列に実行できないテストクラスがある場合 (共通のリソースを共有している場合な"
"ど)、 ``django.test.testcases.SerializeMixin`` を使って逐次実行できます。この"
"ミックスインはファイルシステムの ``lockfile`` を使用します。"

msgid ""
"For example, you can use ``__file__`` to determine that all test classes in "
"the same file that inherit from ``SerializeMixin`` will run sequentially::"
msgstr ""
"たとえば、 ``__file__`` を使用すると、同じファイルにある ``SerializeMixin`` "
"を継承したすべてのテストクラスが順番に実行されるようにすることができます:"

msgid "Using the Django test runner to test reusable applications"
msgstr "Django テストランナーを使って再利用可能なアプリケーションをテストする"

msgid ""
"If you are writing a :doc:`reusable application </intro/reusable-apps>` you "
"may want to use the Django test runner to run your own test suite and thus "
"benefit from the Django testing infrastructure."
msgstr ""
":doc:`再利用可能なアプリケーション </intro/reusable-apps>` を書いているのな"
"ら、 Django テストランナーを使って独自のテストスイートを実行し、Django のテス"
"ト基盤の恩恵を受けたいと思うかもしれません。"

msgid ""
"A common practice is a *tests* directory next to the application code, with "
"the following structure:"
msgstr ""
"一般的な慣習は、アプリケーションコードの隣に *tests* ディレクトリを置き、以下"
"のような構成にすることです:"

msgid "Let's take a look inside a couple of those files:"
msgstr "いくつかのファイルの中身を見てみましょう:"

msgid "``runtests.py``"
msgstr "``runtests.py``"

msgid ""
"This is the script that you invoke to run the test suite. It sets up the "
"Django environment, creates the test database and runs the tests."
msgstr ""
"これはテストスイートを実行するために呼び出すスクリプトです。Django 環境をセッ"
"トアップし、テストデータベースを作成し、テストを実行します。"

msgid ""
"For the sake of clarity, this example contains only the bare minimum "
"necessary to use the Django test runner. You may want to add command-line "
"options for controlling verbosity, passing in specific test labels to run, "
"etc."
msgstr ""
"わかりやすくするために、この例では Django テストランナーを使うために必要な最"
"低限のものだけを含んでいます。冗長性を制御したり、実行する特定のテストラベル"
"を渡したりするためのコマンドラインオプションを追加しても構いません。"

msgid "``tests/test_settings.py``"
msgstr "``tests/test_settings.py``"

msgid ""
"This file contains the :doc:`Django settings </topics/settings>` required to "
"run your app's tests."
msgstr ""
"このファイルには、アプリのテストを実行するために必要な :doc:`Django の設定 </"
"topics/settings>` が含まれています。"

msgid ""
"Again, this is a minimal example; your tests may require additional settings "
"to run."
msgstr ""
"繰り返しますが、これは最小限の例です。テストを実行するには、さらに別の設定が"
"必要になるかもしれません。"

msgid ""
"Since the *tests* package is included in :setting:`INSTALLED_APPS` when "
"running your tests, you can define test-only models in its ``models.py`` "
"file."
msgstr ""
"*tests* パッケージはテストを実行する際に :setting:`INSTALLED_APPS` に含まれる"
"ので、その ``models.py`` ファイルにテスト専用のモデルを定義することもできま"
"す。"

msgid "Using different testing frameworks"
msgstr "ほかのテストフレームワークを使う"

msgid ""
"Clearly, :mod:`unittest` is not the only Python testing framework. While "
"Django doesn't provide explicit support for alternative frameworks, it does "
"provide a way to invoke tests constructed for an alternative framework as if "
"they were normal Django tests."
msgstr ""
"明らかに、:mod:`unittest` は唯一のPythonテストフレームワークではありません。"
"Djangoは代替フレームワークに対する明示的なサポートを提供していませんが、代替"
"フレームワーク向けに構築されたテストを通常のDjangoテストのように呼び出す方法"
"に対応しています。"

msgid ""
"When you run ``./manage.py test``, Django looks at the :setting:"
"`TEST_RUNNER` setting to determine what to do. By default, :setting:"
"`TEST_RUNNER` points to ``'django.test.runner.DiscoverRunner'``. This class "
"defines the default Django testing behavior. This behavior involves:"
msgstr ""
"``./manage.py test`` を実行するとき、Django は :setting:`TEST_RUNNER` 設定を"
"見て、何をするかを決定します。デフォルトでは、 :setting:`TEST_RUNNER` は "
"``'django.test.runner.DiscoverRunner'`` を指します。このクラスは Django のデ"
"フォルトのテスト動作を定義します。この動作には下記が含まれます:"

msgid "Performing global pre-test setup."
msgstr "テスト前のグローバルなセットアップの実行。"

msgid ""
"Looking for tests in any file below the current directory whose name matches "
"the pattern ``test*.py``."
msgstr ""
"現在のディレクトリ以下のファイルの中から、名前が ``test*.py`` と一致するテス"
"トを探す。"

msgid "Creating the test databases."
msgstr "テストデータベースの作成。"

msgid ""
"Running ``migrate`` to install models and initial data into the test "
"databases."
msgstr ""
"テストデータベースにモデルと初期データをインストールするために ``migrate`` を"
"実行する。"

msgid "Running the :doc:`system checks </topics/checks>`."
msgstr ":doc:`システムチェック </topics/checks>` の実行。 "

msgid "Running the tests that were found."
msgstr "見つかったテストを実行する。"

msgid "Destroying the test databases."
msgstr "テストデータベースの破棄。"

msgid "Performing global post-test teardown."
msgstr "テスト後のグローバルな後処理の実行。"

msgid ""
"If you define your own test runner class and point :setting:`TEST_RUNNER` at "
"that class, Django will execute your test runner whenever you run ``./manage."
"py test``. In this way, it is possible to use any test framework that can be "
"executed from Python code, or to modify the Django test execution process to "
"satisfy whatever testing requirements you may have."
msgstr ""
"独自のテストランナークラスを定義し、 :setting:`TEST_RUNNER` をそのクラスに向"
"けると、 Django は常に ``./manage.py test`` を実行するときに、あなたのテスト"
"ランナを実行します。この方法なら、 Python コードから実行できるテストフレーム"
"ワークを使ったり、 Django のテスト実行プロセスを変更して、どんなテスト要件で"
"も満たすことができます。"

msgid "Defining a test runner"
msgstr "テストランナーを定義する"

msgid ""
"A test runner is a class defining a ``run_tests()`` method. Django ships "
"with a ``DiscoverRunner`` class that defines the default Django testing "
"behavior. This class defines the ``run_tests()`` entry point, plus a "
"selection of other methods that are used by ``run_tests()`` to set up, "
"execute and tear down the test suite."
msgstr ""
"テストランナーは ``run_tests()`` メソッドを定義したクラスです。Django には、"
"デフォルトの Django のテスト動作を定義する ``DiscoverRunner`` クラスが同梱さ"
"れています。このクラスは ``run_tests()`` のエントリーポイントを定義し、さら"
"に ``run_tests()`` がテストスイートのセットアップ、実行、終了に使用する他のメ"
"ソッドも定義します。"

msgid ""
"``DiscoverRunner`` will search for tests in any file matching ``pattern``."
msgstr ""
"``DiscoverRunner`` は ``pattern`` にマッチするファイル内のテストを検索しま"
"す。"

msgid ""
"``top_level`` can be used to specify the directory containing your top-level "
"Python modules. Usually Django can figure this out automatically, so it's "
"not necessary to specify this option. If specified, it should generally be "
"the directory containing your ``manage.py`` file."
msgstr ""
"``top_level`` を使うと、トップレベルの Python モジュールを含むディレクトリを"
"指定できます。通常、 Django はこれを自動的に判別するので、このオプションを指"
"定する必要はありません。もし指定するなら、通常は ``manage.py`` ファイルがある"
"ディレクトリを指定します。"

msgid ""
"``verbosity`` determines the amount of notification and debug information "
"that will be printed to the console; ``0`` is no output, ``1`` is normal "
"output, and ``2`` is verbose output."
msgstr ""
"``verbosity`` はコンソールに出力される通知とデバッグ情報の量を決定します。 "
"``0`` は出力なし、 ``1`` は通常の出力、 ``2`` は冗長 (verbose) な出力です。"

msgid ""
"If ``interactive`` is ``True``, the test suite has permission to ask the "
"user for instructions when the test suite is executed. An example of this "
"behavior would be asking for permission to delete an existing test database. "
"If ``interactive`` is ``False``, the test suite must be able to run without "
"any manual intervention."
msgstr ""
"``interactive`` が ``True`` の場合、テストスイートが実行されるときにユーザー"
"に指示を求める権限があります。この動作の例は、既存のテストデータベースを削除"
"する許可を求めるようなものです。もし ``interactive`` が ``False`` なら、テス"
"トスイートは手動で操作しなくても実行できる必要があります。"

msgid ""
"If ``failfast`` is ``True``, the test suite will stop running after the "
"first test failure is detected."
msgstr ""
"``failfast`` が ``True`` の場合、テストスイートは最初のテストの失敗を検出した"
"後に実行を停止します。"

msgid ""
"If ``keepdb`` is ``True``, the test suite will use the existing database, or "
"create one if necessary. If ``False``, a new database will be created, "
"prompting the user to remove the existing one, if present."
msgstr ""
"``keepdb`` が ``True`` の場合、テストスイートは既存のデータベースを使用しま"
"す。 ``False`` の場合は、新しいデータベースを作成し、既存のデータベースを削除"
"するようユーザに促します。"

msgid ""
"If ``reverse`` is ``True``, test cases will be executed in the opposite "
"order. This could be useful to debug tests that aren't properly isolated and "
"have side effects. :ref:`Grouping by test class <order-of-tests>` is "
"preserved when using this option. This option can be used in conjunction "
"with ``--shuffle`` to reverse the order for a particular random seed."
msgstr ""
"``reverse`` が ``True`` の場合、テストケースは逆の順番で実行されます。これは"
"適切に分離されておらず、副作用があるテストをデバッグするのに便利です。 :ref:`"
"テストクラス <order-of-tests>` によるグループ化は、このオプションを使用しても"
"保持されます。このオプションは ``--shuffle`` と組み合わせて、特定のランダム"
"シードの順序を逆にするために使用できます。"

msgid ""
"``debug_mode`` specifies what the :setting:`DEBUG` setting should be set to "
"prior to running tests."
msgstr ""
"``debug_mode`` は、テストを実行する前に :setting:`DEBUG` 設定を何に設定するべ"
"きかを指定します。"

msgid ""
"``parallel`` specifies the number of processes.  If ``parallel`` is greater "
"than ``1``, the test suite will run in ``parallel`` processes. If there are "
"fewer test case classes than configured processes, Django will reduce the "
"number of processes accordingly. Each process gets its own database. This "
"option requires the third-party ``tblib`` package to display tracebacks "
"correctly."
msgstr ""
"``parallel`` はプロセス数を指定します。 ``parallel`` が ``1`` より大きい場"
"合、テストスイートは ``parallel`` プロセスで実行されます。指定されたプロセス"
"数よりもテストケースクラスの数が少ない場合、 Django はそれに応じてプロセス数"
"を減らします。各プロセスは独自のデータベースを取得します。このオプションで"
"は、トレースバックを正しく表示するためにサードパーティの ``tblib`` パッケージ"
"が必要です。"

msgid ""
"``tags`` can be used to specify a set of :ref:`tags for filtering tests "
"<topics-tagging-tests>`. May be combined with ``exclude_tags``."
msgstr ""
"``tags`` は :ref:`テストをフィルタリングするタグ <topics-tagging-tests>` に使"
"用できます。 ``exclude_tags`` と併用できます。"

msgid ""
"``exclude_tags`` can be used to specify a set of :ref:`tags for excluding "
"tests <topics-tagging-tests>`. May be combined with ``tags``."
msgstr ""
"``exclude_tags`` は、テストを除外するための :ref:`タグのセット <topics-"
"tagging-tests>` の指定に使用できます。 ``tags`` と併用できます。"

msgid ""
"If ``debug_sql`` is ``True``, failing test cases will output SQL queries "
"logged to the :ref:`django.db.backends logger <django-db-logger>` as well as "
"the traceback. If ``verbosity`` is ``2``, then queries in all tests are "
"output."
msgstr ""
"``debug_sql`` が ``True`` の場合、失敗したテストケースはトレースバックと同様"
"に :ref:`django.db.backends のロガー <django-db-logger>` に記録された SQL ク"
"エリを出力します。もし ``verbosity`` が ``2`` なら、すべてのテストのクエリが"
"出力されます。"

msgid ""
"``test_name_patterns`` can be used to specify a set of patterns for "
"filtering test methods and classes by their names."
msgstr ""
"``test_name_patterns`` を使うと、テストメソッドやクラスを名前でフィルタするた"
"めのパターンセットを指定できます。"

msgid ""
"If ``pdb`` is ``True``, a debugger (``pdb`` or ``ipdb``) will be spawned at "
"each test error or failure."
msgstr ""
"``pdb`` が ``True`` の場合、デバッガ (``pdb`` または ``ipdb``) がテストのエ"
"ラーや失敗のたびに起動されます。"

msgid ""
"If ``buffer`` is ``True``, outputs from passing tests will be discarded."
msgstr "``buffer`` が ``True`` の場合、合格したテストの出力は破棄されます。"

msgid ""
"If ``enable_faulthandler`` is ``True``, :py:mod:`faulthandler` will be "
"enabled."
msgstr ""
"``enable_faulthandler`` が ``True`` の場合、 :py:mod:`faulthandler` が有効に"
"なります。"

msgid ""
"If ``timing`` is ``True``, test timings, including database setup and total "
"run time, will be shown."
msgstr ""
"``timing`` が ``True`` の場合、データベースのセットアップと総実行時間を含むテ"
"スト時間が表示されます。"

msgid ""
"If ``shuffle`` is an integer, test cases will be shuffled in a random order "
"prior to execution, using the integer as a random seed. If ``shuffle`` is "
"``None``, the seed will be generated randomly. In both cases, the seed will "
"be logged and set to ``self.shuffle_seed`` prior to running tests. This "
"option can be used to help detect tests that aren't properly isolated. :ref:"
"`Grouping by test class <order-of-tests>` is preserved when using this "
"option."
msgstr ""
"``shuffle`` が整数の場合、その整数はランダムシードとして使用され、テストケー"
"スが実行前にランダムな順序でシャッフルされます。 ``shuffle`` が ``None`` の場"
"合、シードはランダムに生成されます。どちらの場合も、シードはテスト実行前に記"
"録され、 ``self.shuffle_seed`` に設定されます。このオプションは、適切に分離さ"
"れていないテストを検出するのに役立つことがあります。このオプションを使用する"
"場合、 :ref:`テストクラスによるグルーピング <order-of-tests>` が保持されま"
"す。"

msgid ""
"``logger`` can be used to pass a Python :py:ref:`Logger object <logger>`. If "
"provided, the logger will be used to log messages instead of printing to the "
"console. The logger object will respect its logging level rather than the "
"``verbosity``."
msgstr ""
"``logger`` は Python :py:ref:`Logger オブジェクト <logger>` を渡すために使用"
"します。指定された場合、ロガーはコンソールに出力する代わりにログメッセージを"
"記録します。ロガーオブジェクトは ``verbosity`` よりもロギングレベルを優先しま"
"す。"

msgid ""
"``durations`` will show a list of the N slowest test cases. Setting this "
"option to ``0`` will result in the duration for all tests being shown. "
"Requires Python 3.12+."
msgstr ""
"``durations`` を指定すると、最も遅い N 個のテストケースのリストが表示されま"
"す。このオプションに ``0`` を指定すると、すべてのテストの所要時間が表示されま"
"す。Python 3.12+ が必要です。"

msgid ""
"Django may, from time to time, extend the capabilities of the test runner by "
"adding new arguments. The ``**kwargs`` declaration allows for this "
"expansion. If you subclass ``DiscoverRunner`` or write your own test runner, "
"ensure it accepts ``**kwargs``."
msgstr ""
"Django では、新しい引数を追加することで、テストランナーの機能を拡張するこ と"
"があります。この拡張を可能にするのが ``**kwargs`` 宣言です。もし "
"``DiscoverRunner`` をサブクラス化したり、独自のテストランナーを書いたりする場"
"合は、 ``**kwargs`` を受け付けるようにしてください。"

msgid ""
"Your test runner may also define additional command-line options. Create or "
"override an ``add_arguments(cls, parser)`` class method and add custom "
"arguments by calling ``parser.add_argument()`` inside the method, so that "
"the :djadmin:`test` command will be able to use those arguments."
msgstr ""
"テストランナーでは、追加のコマンドラインオプションを定義することもできます。 "
"``add_arguments(cls, parser)`` クラスメソッドを作成またはオーバーライドし、そ"
"のメソッド内で ``parser.add_argument()`` を呼び出すときにカスタム引数を追加す"
"ることで、 :djadmin:`test` コマンドがそれらの引数を使用できるようになります。"

msgid "The ``durations`` argument was added."
msgstr "``durations`` 引数が追加されました。"

msgid "Attributes"
msgstr "属性"

msgid ""
"The class used to build the test suite. By default it is set to ``unittest."
"TestSuite``. This can be overridden if you wish to implement different logic "
"for collecting tests."
msgstr ""
"テストスイートのビルドに使用するクラス。デフォルトでは ``unittest."
"TestSuite`` に設定されています。テストを収集するために別のロジックを実装した"
"い場合は、これをオーバーライドできます。"

msgid ""
"This is the class of the low-level test runner which is used to execute the "
"individual tests and format the results. By default it is set to ``unittest."
"TextTestRunner``. Despite the unfortunate similarity in naming conventions, "
"this is not the same type of class as ``DiscoverRunner``, which covers a "
"broader set of responsibilities. You can override this attribute to modify "
"the way tests are run and reported."
msgstr ""
"これは低レベルテストランナーのクラスで、個々のテストを実行し、結果をフォー"
"マットするために使用されます。デフォルトでは ``unittest.TextTestRunner`` に設"
"定されています。似たような名前になっていますが、残念ながらこれは "
"``DiscoverRunner`` と同じ種類のクラスではありません。この属性をオーバーライド"
"することで、テストの実行方法やレポート方法を変更できます。"

msgid ""
"This is the class that loads tests, whether from TestCases or modules or "
"otherwise and bundles them into test suites for the runner to execute. By "
"default it is set to ``unittest.defaultTestLoader``. You can override this "
"attribute if your tests are going to be loaded in unusual ways."
msgstr ""
"これは、TestCases やモジュールなどからテストを読み込んで、ランナーが実行する"
"テストスイートにバンドルするクラスです。デフォルトでは ``unittest."
"defaultTestLoader`` に設定されています。通常とは異なる方法でテストを読み込む"
"場合は、この属性をオーバーライドします。"

msgid "Methods"
msgstr "メソッド"

msgid "Run the test suite."
msgstr "テストスイートを実行します。"

msgid ""
"``test_labels`` allows you to specify which tests to run and supports "
"several formats (see :meth:`DiscoverRunner.build_suite` for a list of "
"supported formats)."
msgstr ""
"``test_labels`` は実行するテストを指定するもので、いくつかのフォーマットをサ"
"ポートしています (サポートされているフォーマットのリストについては :meth:"
"`DiscoverRunner.build_suite` を参照してください)。"

msgid "This method should return the number of tests that failed."
msgstr "このメソッドは、失敗したテストの数を返す必要があります。"

msgid ""
"Override this class method to add custom arguments accepted by the :djadmin:"
"`test` management command. See :py:meth:`argparse.ArgumentParser."
"add_argument()` for details about adding arguments to a parser."
msgstr ""
"このクラスメソッドをオーバーライドして :djadmin:`test` 管理コマンドが受け付け"
"るカスタム引数を追加できます。パーサへの引数の追加についての詳細は :py:meth:"
"`argparse.ArgumentParser.add_argument()` を参照してください。"

msgid ""
"Sets up the test environment by calling :func:`~django.test.utils."
"setup_test_environment` and setting :setting:`DEBUG` to ``self.debug_mode`` "
"(defaults to ``False``)."
msgstr ""
":func:`~django.test.utils.setup_test_environment` を呼び出して、 :setting:"
"`DEBUG` を ``self.debug_mode`` (デフォルトは ``False``) に設定することで、テ"
"スト環境をセットアップできます。"

msgid "Constructs a test suite that matches the test labels provided."
msgstr ""
"指定されたテストラベルにマッチするテストスイートを構築（コンストラクト）しま"
"す。"

msgid ""
"``test_labels`` is a list of strings describing the tests to be run. A test "
"label can take one of four forms:"
msgstr ""
"``test_labels`` は実行するテストを説明する文字列のリストです。テストラベルに"
"は下記の 4 つのうち、いずれかの形式が指定できます:"

msgid ""
"``path.to.test_module.TestCase.test_method`` -- Run a single test method in "
"a test case class."
msgstr ""
"``path.to.test_module.TestCase.test_method`` -- テストケースクラスのテストメ"
"ソッドを実行します。"

msgid ""
"``path.to.test_module.TestCase`` -- Run all the test methods in a test case."
msgstr ""
"``path.to.test_module.TestCase`` -- テストケースのすべてのテストメソッドを実"
"行します。"

msgid ""
"``path.to.module`` -- Search for and run all tests in the named Python "
"package or module."
msgstr ""
"``path.to.module`` -- 指定した Python パッケージまたはモジュール内のすべての"
"テストを検索して実行します。"

msgid ""
"``path/to/directory`` -- Search for and run all tests below the named "
"directory."
msgstr ""
"``path/to/directory`` -- 指定したディレクトリ以下のすべてのテストを検索し、実"
"行します。"

msgid ""
"If ``test_labels`` has a value of ``None``, the test runner will search for "
"tests in all files below the current directory whose names match its "
"``pattern`` (see above)."
msgstr ""
"``test_labels`` の値が ``None`` の場合、テストランナーはカレントディレクトリ"
"以下のすべてのファイルの中から、 ``pattern`` (上記参照) にマッチする名前のテ"
"ストを探します。"

msgid "Returns a ``TestSuite`` instance ready to be run."
msgstr "実行可能な ``TestSuite`` インスタンスを返します。"

msgid ""
"Creates the test databases by calling :func:`~django.test.utils."
"setup_databases`."
msgstr ""
":func:`~django.test.utils.setup_databases` を呼び出して、テスト用データベース"
"を作成します。"

msgid ""
"Runs the :doc:`system checks </topics/checks>` on the test ``databases``."
msgstr ""
":doc:`システムチェック </topics/checks>` をテスト用の ``databases`` に対して"
"実行します。"

msgid "Runs the test suite."
msgstr "テストスイートを実行します。"

msgid "Returns the result produced by the running the test suite."
msgstr "テストスイートの実行結果を返します。"

msgid ""
"Returns the keyword arguments to instantiate the ``DiscoverRunner."
"test_runner`` with."
msgstr ""
"``DiscoverRunner.test_runner`` をインスタンス化するためのキーワード引数を返し"
"ます。"

msgid ""
"Destroys the test databases, restoring pre-test conditions by calling :func:"
"`~django.test.utils.teardown_databases`."
msgstr ""
":func:`~django.test.utils.teardown_databases` を呼び出すことで、テストデータ"
"ベースを破棄し、テスト前の状態に戻します。"

msgid "Restores the pre-test environment."
msgstr "テスト前の環境を復元します。"

msgid ""
"Computes and returns a return code based on a test suite, and the result "
"from that test suite."
msgstr "テストスイートを基にリターンコードを計算し、その結果を返します。"

msgid ""
"If a ``logger`` is set, logs the message at the given integer `logging "
"level`_ (e.g. ``logging.DEBUG``, ``logging.INFO``, or ``logging.WARNING``). "
"Otherwise, the message is printed to the console, respecting the current "
"``verbosity``. For example, no message will be printed if the ``verbosity`` "
"is 0, ``INFO`` and above will be printed if the ``verbosity`` is at least 1, "
"and ``DEBUG`` will be printed if it is at least 2. The ``level`` defaults to "
"``logging.INFO``."
msgstr ""
"もし ``logger`` が設定されている場合、与えられた整数の `logging level`_ (例え"
"ば ``logging.DEBUG``, ``logging.INFO`` または ``logging.WARNING``) でメッセー"
"ジをログに記録します。そうでない場合は、現在の ``verbosity`` に従ってコンソー"
"ルにメッセージが出力されます。例えば、 ``verbosity`` が 0 の場合はメッセージ"
"は表示されず、 ``verbosity`` が 1 以上の場合は ``INFO`` 以上のメッセージが表"
"示され、2 以上の場合は ``DEBUG`` のメッセージが表示されます。 ``level`` のデ"
"フォルトは ``logging.INFO`` です。"

msgid "Testing utilities"
msgstr "テスト用ユーティリティ"

msgid "``django.test.utils``"
msgstr "``django.test.utils``"

msgid ""
"To assist in the creation of your own test runner, Django provides a number "
"of utility methods in the ``django.test.utils`` module."
msgstr ""
"独自のテストランナーの作成を支援するために、Django は ``django.test.utils`` "
"モジュールで多くのユーティリティメソッドを提供しています。"

msgid ""
"Performs global pre-test setup, such as installing instrumentation for the "
"template rendering system and setting up the dummy email outbox."
msgstr ""
"グローバルな前処理テストセットアップを実行します。これには、テンプレートレン"
"ダリングシステム用の計測ツールのインストールや、ダミーのメールアウトボックス"
"のセットアップが含まれます。"

msgid ""
"If ``debug`` isn't ``None``, the :setting:`DEBUG` setting is updated to its "
"value."
msgstr ""
"``debug`` が ``None`` 以外の場合、 :setting:`DEBUG` 設定はその値に更新されま"
"す。"

msgid ""
"Performs global post-test teardown, such as removing instrumentation from "
"the template system and restoring normal email services."
msgstr ""
"グローバルな後処理テストのテアダウン（解体）を実行します。これには、テンプ"
"レートシステムから計測ツールを削除し、通常のメールサービスを復元することが含"
"まれます。"

msgid "Creates the test databases."
msgstr "テスト用データベースを作成します。"

msgid ""
"Returns a data structure that provides enough detail to undo the changes "
"that have been made. This data will be provided to the :func:"
"`teardown_databases` function at the conclusion of testing."
msgstr ""
"行われた変更を元に戻すのに十分な詳細情報を提供するデータ構造を返します。この"
"データはテスト終了時に :func:`teardown_databases` 関数に渡されます。"

msgid ""
"The ``aliases`` argument determines which :setting:`DATABASES` aliases test "
"databases should be set up for. If it's not provided, it defaults to all of :"
"setting:`DATABASES` aliases."
msgstr ""
"引数 ``aliases`` はどの :setting:`DATABASES` エイリアスにテスト用データベース"
"を設定するかを決定します。省略された場合、デフォルトは :setting:`DATABASES` "
"の全てのエイリアスです。"

msgid ""
"The ``serialized_aliases`` argument determines what subset of ``aliases`` "
"test databases should have their state serialized to allow usage of the :ref:"
"`serialized_rollback <test-case-serialized-rollback>` feature. If it's not "
"provided, it defaults to ``aliases``."
msgstr ""
"``serialized_aliases`` 引数は、 ``aliases`` テストデータベースのどのサブセッ"
"トがその状態をシリアライズすべきかを特定し、 :ref:`serialized_rollback <test-"
"case-serialized-rollback>` 機能が利用できるようにします。指定しなかった場合、"
"デフォルトは ``aliases`` になります。"

msgid "Destroys the test databases, restoring pre-test conditions."
msgstr "テスト データベースを破棄し、テスト前の状態に戻します。"

msgid ""
"``old_config`` is a data structure defining the changes in the database "
"configuration that need to be reversed. It's the return value of the :meth:"
"`setup_databases` method."
msgstr ""
"``old_config`` は元に戻すべきデータベース設定の変更を定義したデータ構造です。"
"これは :meth:`setup_databases` メソッドの戻り値です。"

msgid "``django.db.connection.creation``"
msgstr "``django.db.connection.creation``"

msgid ""
"The creation module of the database backend also provides some utilities "
"that can be useful during testing."
msgstr ""
"データベースバックエンドの作成モジュールは、テスト中に役立つユーティリティも"
"提供しています。"

msgid "Creates a new test database and runs ``migrate`` against it."
msgstr ""
"新しいテストデータベースを作成し、それに対して ``migrate`` を実行します。"

msgid "``verbosity`` has the same behavior as in ``run_tests()``."
msgstr "``verbosity`` は ``run_tests()`` と同じ動作です。"

msgid ""
"``autoclobber`` describes the behavior that will occur if a database with "
"the same name as the test database is discovered:"
msgstr ""
"``autoclobber`` はテストデータベースと同じ名前のデータベースを見つけた場合の"
"動作を表します:"

msgid ""
"If ``autoclobber`` is ``False``, the user will be asked to approve "
"destroying the existing database. ``sys.exit`` is called if the user does "
"not approve."
msgstr ""
"``autoclobber`` が ``False`` の場合、ユーザは既存のデータベースを破棄すること"
"を承認するよう求められます。ユーザーが承認しない場合は ``sys.exit`` が呼び出"
"されます。"

msgid ""
"If ``autoclobber`` is ``True``, the database will be destroyed without "
"consulting the user."
msgstr ""
"``autoclobber`` が ``True`` の場合、ユーザーに通知することなくデータベースを"
"破棄します。"

msgid ""
"``serialize`` determines if Django serializes the database into an in-memory "
"JSON string before running tests (used to restore the database state between "
"tests if you don't have transactions). You can set this to ``False`` to "
"speed up creation time if you don't have any test classes with :ref:"
"`serialized_rollback=True <test-case-serialized-rollback>`."
msgstr ""
"``serialize`` は、テストを実行する前に、Django がデータベースをメモリ内の "
"JSON 文字列にシリアライズするかどうかを決定します (トランザクションがない場"
"合、テスト間でデータベースの状態を復元するために使います)。これを ``False`` "
"に設定すると、 :ref:`serialized_rollback=True <test-case-serialized-"
"rollback>` を持つテストクラスがない場合に、作成時間を短縮できます。"

msgid ""
"``keepdb`` determines if the test run should use an existing database, or "
"create a new one. If ``True``, the existing database will be used, or "
"created if not present. If ``False``, a new database will be created, "
"prompting the user to remove the existing one, if present."
msgstr ""
"``keepdb`` はテスト実行時に既存のデータベースを使用するか、新しいデータベース"
"を作成するかを決定します。もし ``True`` なら、既存のデータベースが使用され、"
"存在しない場合は作成されます。もし ``False`` ならば、新しいデータベースが作成"
"され、既存のデータベースを削除するようにユーザに促します。"

msgid "Returns the name of the test database that it created."
msgstr "作成したテスト用データベースの名前を返します。"

msgid ""
"``create_test_db()`` has the side effect of modifying the value of :setting:"
"`NAME` in :setting:`DATABASES` to match the name of the test database."
msgstr ""
"``create_test_db()`` は :setting:`DATABASES` の :setting:`NAME` の値をテスト"
"データベースの名前と一致するように変更するという副作用があります。"

msgid ""
"Destroys the database whose name is the value of :setting:`NAME` in :setting:"
"`DATABASES`, and sets :setting:`NAME` to the value of ``old_database_name``."
msgstr ""
":setting:`DATABASES` の :setting:`NAME` の値を名前とするデータベースを破棄"
"し、 :setting:`NAME` に ``old_database_name`` の値をセットします。"

msgid ""
"The ``verbosity`` argument has the same behavior as for :class:`~django.test."
"runner.DiscoverRunner`."
msgstr ""
"``verbosity`` 引数は :class:`~django.test.runner.DiscoverRunner` と同じ動作で"
"す。"

msgid ""
"If the ``keepdb`` argument is ``True``, then the connection to the database "
"will be closed, but the database will not be destroyed."
msgstr ""
"``keepdb`` 引数が ``True`` の場合、データベースへの接続は閉じられますが、デー"
"タベースは破棄されません。"

msgid "Integration with ``coverage.py``"
msgstr "``coverage.py`` との統合"

msgid ""
"Code coverage describes how much source code has been tested. It shows which "
"parts of your code are being exercised by tests and which are not. It's an "
"important part of testing applications, so it's strongly recommended to "
"check the coverage of your tests."
msgstr ""
"コードカバレッジは、ソースコードがどれだけテストされたかを表します。コードカ"
"バレッジは、コードのどの部分がテストで実施され、 どの部分が実施されていないの"
"かを表します。アプリケーションをテストする上で重要な要素なので、テストのカバ"
"レッジをチェックすることを強く推奨します。"

msgid ""
"Django can be easily integrated with `coverage.py`_, a tool for measuring "
"code coverage of Python programs. First, install :pypi:`coverage`. Next, run "
"the following from your project folder containing ``manage.py``:"
msgstr ""
"Django は Python プログラムのコードカバレッジを測定するツール `coverage.py`_ "
"と簡単に統合できます。まず、 :pypi:`coverage` をインストールします。次に、 "
"``manage.py`` を含むプロジェクトフォルダから以下を実行してください:"

msgid ""
"This runs your tests and collects coverage data of the executed files in "
"your project. You can see a report of this data by typing following command:"
msgstr ""
"これはテストを実行し、プロジェクト内で実行されたファイルのカバレッジデータを"
"収集します。次のコマンドを入力すると、このデータのレポートを見ることができま"
"す:"

msgid ""
"Note that some Django code was executed while running tests, but it is not "
"listed here because of the ``source`` flag passed to the previous command."
msgstr ""
"テストの実行中に、いくつかの Django コードが実行されましたが、前のコマンドに "
"``source`` フラグが渡されたため、ここには記載されていないことに注意してくださ"
"い。"

msgid ""
"For more options like annotated HTML listings detailing missed lines, see "
"the `coverage.py`_ docs."
msgstr ""
"テストに失敗した行の詳細を注釈を付けてHTMLに表示するなどのオプションについて"
"は、 `coverage.py`_ のドキュメントを参照してください。"

msgid "Testing in Django"
msgstr "Django におけるテスト"

msgid ""
"Automated testing is an extremely useful bug-killing tool for the modern web "
"developer. You can use a collection of tests -- a **test suite** -- to "
"solve, or avoid, a number of problems:"
msgstr ""
"自動化テストは、モダンなウェブ開発者にとってバグを殺すために非常に役に立つ"
"ツールです。テストのコレクション、**test suite** を使うことで、次のような数々"
"の問題を解決したり避けることができます。"

msgid ""
"When you're writing new code, you can use tests to validate your code works "
"as expected."
msgstr ""
"新しいコードを書いている時、テストを使えば、自分が書いたコードが期待通りに動"
"作するかどうか確かめることができる。"

msgid ""
"When you're refactoring or modifying old code, you can use tests to ensure "
"your changes haven't affected your application's behavior unexpectedly."
msgstr ""
"古いコードのリファクタリングや修正をしている時、テストを使うことで、自分の"
"行った変更が思ってもないような仕方でアプリケーションの動作を変更してしまわな"
"いことを保証できる。"

msgid ""
"Testing a web application is a complex task, because a web application is "
"made of several layers of logic -- from HTTP-level request handling, to form "
"validation and processing, to template rendering. With Django's test-"
"execution framework and assorted utilities, you can simulate requests, "
"insert test data, inspect your application's output and generally verify "
"your code is doing what it should be doing."
msgstr ""
"ウェブアプリケーションのテストは複雑なタスクです。なぜなら、ウェブアプリケー"
"ションには複数のロジックのレイヤーが存在するからです。HTTP レベルのリクエスト"
"のハンドリングから、フォームの検証と処理、テンプレートのレンダリングなどで"
"す。しかし、Django のテスト実行フレームワークと各種ユーティリティを使えば、リ"
"クエストをシミュレートしたり、テストデータを挿入したり、アプリケーションの出"
"力を検査したり、さらに一般に、書いたコードが期待通りの動作をするかどうかを検"
"証できます。"

msgid ""
"The preferred way to write tests in Django is using the :mod:`unittest` "
"module built-in to the Python standard library. This is covered in detail in "
"the :doc:`overview` document."
msgstr ""
"Django でテストを書くおすすめの方法は、Python のスタンダードライブラリに含ま"
"れている :mod:`unittest` モジュールを使うことです。詳細については、:doc:"
"`overview` ドキュメントで説明しています。"

msgid ""
"You can also use any *other* Python test framework; Django provides an API "
"and tools for that kind of integration. They are described in the :ref:"
"`other-testing-frameworks` section of :doc:`advanced`."
msgstr ""
"*その他* どんな Python テストフレームワークでも利用できます。Django は、この"
"種のインテグレーションのためのAPI や各種ツールを提供しているからです。これら"
"については、 :doc:`advanced` の :ref:`other-testing-frameworks` セクションで"
"説明しています。"

msgid "Writing and running tests"
msgstr "テストを書いて実行する"

msgid ""
"The :doc:`testing tutorial </intro/tutorial05>`, the :doc:`testing tools "
"reference </topics/testing/tools>`, and the :doc:`advanced testing topics </"
"topics/testing/advanced>`."
msgstr ""
":doc:`テストチュートリアル </intro/tutorial05>`、 :doc:`テストツールリファレ"
"ンス </topics/testing/tools>`、 :doc:`テストに関する応用的なトピック </"
"topics/testing/advanced>` も参照"

msgid ""
"This document is split into two primary sections. First, we explain how to "
"write tests with Django. Then, we explain how to run them."
msgstr ""
"ドキュメントは2つの大きなセクションに分けられます。前半のパートでは、Django "
"でのテストの書き方を説明します。後半では、テストの実行の仕方について説明しま"
"す。"

msgid ""
"Django's unit tests use a Python standard library module: :mod:`unittest`. "
"This module defines tests using a class-based approach."
msgstr ""
"Django のユニットテストには、Python スタンダードライブラリのモジュール、:mod:"
"`unittest` を使用します。このモジュールは、テストをクラスベースのアプローチで"
"定義します。"

msgid ""
"Here is an example which subclasses from :class:`django.test.TestCase`, "
"which is a subclass of :class:`unittest.TestCase` that runs each test inside "
"a transaction to provide isolation::"
msgstr ""
"次の例では、 :class:`unittest.TestCase` のサブクラスである :class:`django."
"test.TestCase` から、テスト用の新しいサブクラスを作っています。各テストをトラ"
"ンザクションの内側で実行することで、独立性を実現しています。"

msgid ""
"When you :ref:`run your tests <running-tests>`, the default behavior of the "
"test utility is to find all the test case classes (that is, subclasses of :"
"class:`unittest.TestCase`) in any file whose name begins with ``test``, "
"automatically build a test suite out of those test case classes, and run "
"that suite."
msgstr ""
":ref:`テストを実行する <running-tests>` と、テストユーティリティのデフォルト"
"の動作として、ファイル名が ``test`` で始まるファイル内のすべてのテストケース"
"クラス (つまり :class:`unittest.TestCase` のサブクラス) を見つけ、それらのテ"
"ストケースクラスから自動的にテストスイートを構築し、そのテストスイートを実行"
"します。"

msgid "For more details about :mod:`unittest`, see the Python documentation."
msgstr ""
":mod:`unittest` の詳細については、Python のドキュメントを読んでください。"

msgid "Where should the tests live?"
msgstr "どこにテストを書くべき？"

msgid ""
"The default :djadmin:`startapp` template creates a ``tests.py`` file in the "
"new application. This might be fine if you only have a few tests, but as "
"your test suite grows you'll likely want to restructure it into a tests "
"package so you can split your tests into different submodules such as "
"``test_models.py``, ``test_views.py``, ``test_forms.py``, etc. Feel free to "
"pick whatever organizational scheme you like."
msgstr ""
"デフォルトの :djadmin:`startapp` テンプレートは、新しいアプリケーション内に "
"``tests.py`` ファイルを作成します。テストの数が少ないうちは、ここに書くのがい"
"いかもしれません。しかし、テストスイートが大きくなってきたら、テストを複数の"
"パッケージに再構成して、``test_models.py`` 、 ``test_views.py`` 、 "
"``test_forms.py`` などの異なるサブモジュールに分離すると良いでしょう。ファイ"
"ル名には、ちゃんと組織的な命名規則になっていれば、自由に好きな名前をつけて構"
"いません。"

msgid "See also :ref:`testing-reusable-applications`."
msgstr ":ref:`testing-reusable-applications` も参照してください。"

msgid ""
"If your tests rely on database access such as creating or querying models, "
"be sure to create your test classes as subclasses of :class:`django.test."
"TestCase` rather than :class:`unittest.TestCase`."
msgstr ""
"作成したテストが、データの新規作成やモデルのクエリなどのデータベースアクセス"
"を必要とするときは、:class:`unittest.TestCase` ではなく、 :class:`django."
"test.TestCase` のサブクラスを作るようにしてください。"

msgid ""
"Using :class:`unittest.TestCase` avoids the cost of running each test in a "
"transaction and flushing the database, but if your tests interact with the "
"database their behavior will vary based on the order that the test runner "
"executes them. This can lead to unit tests that pass when run in isolation "
"but fail when run in a suite."
msgstr ""
":class:`unittest.TestCase` を使えば、各テストでデータベースのトランザクション"
"とフラッシュに必要な実行コストを避けることができます。しかし、データベースと"
"相互作用するテストの場合、テストランナーがテストを実行する順番によっては、異"
"なる動作をすることがあります。そのため、孤立した環境では成功するテストユニッ"
"トでも、一連のテストスイートの中で実行した時には失敗してしまうという状況が発"
"生することがあります。"

msgid "Running tests"
msgstr "テストの実行"

msgid ""
"Once you've written tests, run them using the :djadmin:`test` command of "
"your project's ``manage.py`` utility:"
msgstr ""
"テストが書けたら、プロジェクトの ``manage.py`` ユーティリティの :djadmin:"
"`test` コマンドでテストが実行できます。"

msgid ""
"Test discovery is based on the unittest module's :py:ref:`built-in test "
"discovery <unittest-test-discovery>`.  By default, this will discover tests "
"in any file named ``test*.py`` under the current working directory."
msgstr ""
"テストの探索方法は、unittest モジュールの :py:ref:`ビルトインのテスト探索 "
"<unittest-test-discovery>` にもとづきます。デフォルトでは、カレントディレクト"
"リにある ``test*.py`` という名前の全てのファイルからテストを探し出します。"

msgid ""
"You can specify particular tests to run by supplying any number of \"test "
"labels\" to ``./manage.py test``. Each test label can be a full Python "
"dotted path to a package, module, ``TestCase`` subclass, or test method. For "
"instance:"
msgstr ""
"``/manage.py test`` に好きな数の「テストラベル」を与えることで、特定のテスト"
"を指定することもできます。各テストラベルには、パッケージ、モジュール、 "
"``TestCase`` サブクラス、テストメソッドへのドット区切りの Python パスを指定し"
"ます。たとえば、以下のように指定します。"

msgid ""
"You can also provide a path to a directory to discover tests below that "
"directory:"
msgstr ""
"ディレクトリ下に置かれたテストを探索するために、ディレクトリのパスを指定する"
"こともできます。"

msgid ""
"You can specify a custom filename pattern match using the ``-p`` (or ``--"
"pattern``) option, if your test files are named differently from the ``test*."
"py`` pattern:"
msgstr ""
"``-p`` (または ``--pattern``) オプションを使って、カスタムのファイル名のパ"
"ターンマッチを指定すれば、テストファイルの名前が ``test*.py`` というパターン"
"とは違っていても実行できます。"

msgid ""
"If you press ``Ctrl-C`` while the tests are running, the test runner will "
"wait for the currently running test to complete and then exit gracefully. "
"During a graceful exit the test runner will output details of any test "
"failures, report on how many tests were run and how many errors and failures "
"were encountered, and destroy any test databases as usual. Thus pressing "
"``Ctrl-C`` can be very useful if you forget to pass the :option:`--failfast "
"<test --failfast>` option, notice that some tests are unexpectedly failing "
"and want to get details on the failures without waiting for the full test "
"run to complete."
msgstr ""
"テストの実行中に ``Ctrl-C`` を押すと、テストランナーは現在実行中のテストが完"
"了するのを待って、gracefully にテストを終了します。graceful な終了では、テス"
"トランナーは失敗したテストの詳細を出力し、実行したテストの数と、エラーおよび"
"失敗したテストの数をレポートし、通常通りにテストデータベースを破棄します。そ"
"のため、 ``Ctrl-C`` を押すのは、たとえば、 :option:`--failfast <test --"
"failfast>` オプションを付けるのを忘れて、一部のテストが予期せず失敗して、すべ"
"てのテストが終わるのを待たずにすぐにその失敗の詳細を知りたいような場合に大変"
"役に立ちます。"

msgid ""
"If you do not want to wait for the currently running test to finish, you can "
"press ``Ctrl-C`` a second time and the test run will halt immediately, but "
"not gracefully. No details of the tests run before the interruption will be "
"reported, and any test databases created by the run will not be destroyed."
msgstr ""
"現在実行中のテストの終了も待ちたくないときは、もう一度 ``Ctrl-C`` を押すこと"
"で、テストを graceful ではなく、すぐに強制終了できます。その場合、強制終了前"
"に実行していたテストの詳細はリポートされず、実行中に作られたテストデータベー"
"スも破棄されません。"

msgid "Test with warnings enabled"
msgstr "警告を有効にしてテストする"

msgid ""
"It's a good idea to run your tests with Python warnings enabled: ``python -"
"Wa manage.py test``. The ``-Wa`` flag tells Python to display deprecation "
"warnings. Django, like many other Python libraries, uses these warnings to "
"flag when features are going away. It also might flag areas in your code "
"that aren't strictly wrong but could benefit from a better implementation."
msgstr ""
"``python -Wa manage.py test`` というように、Python の警告表示を有効にしてテス"
"トを実行するのは良い考えです。``-Wa`` フラグをセットすると、Python に "
"deprecation 警告を表示するように伝えます。Django などの Python ライブラリは、"
"機能の廃止を知らせるフラグとして、この警告を利用しています。また、この機能"
"は、厳密には間違いではないがあまり良くないコードを知らせてくれることがあるの"
"で、実装を改善できることがあります。"

msgid "The test database"
msgstr "test データベース"

msgid ""
"Tests that require a database (namely, model tests) will not use your "
"\"real\" (production) database. Separate, blank databases are created for "
"the tests."
msgstr ""
"データベースを必要とするテスト (すなわち、モデルテスト) には、\"実際の"
"\" (production) 環境のデータベースは使用しません。代わりに、テスト用の空の"
"データベースを用意します。"

msgid ""
"Regardless of whether the tests pass or fail, the test databases are "
"destroyed when all the tests have been executed."
msgstr ""
"テストが成功したかどうかにかかわらず、すべてのテストの実行が終わった時点で、"
"テストデータベースは破棄されます。"

msgid ""
"You can prevent the test databases from being destroyed by using the :option:"
"`test --keepdb` option. This will preserve the test database between runs. "
"If the database does not exist, it will first be created. Any migrations "
"will also be applied in order to keep it up to date."
msgstr ""
":option:`test --keepdb` オプションを指定すれば、テストデータベースの破棄を防"
"ぐことができます。これにより、複数回テストを実行しても、テストデータベースを"
"保存できます。データベースが存在しないときは、最初に新しく作成され、そして"
"データベースが最新の状態になるように、マイグレーションが順番に実行されます。"

msgid ""
"As described in the previous section, if a test run is forcefully "
"interrupted, the test database may not be destroyed. On the next run, you'll "
"be asked whether you want to reuse or destroy the database. Use the :option:"
"`test --noinput` option to suppress that prompt and automatically destroy "
"the database. This can be useful when running tests on a continuous "
"integration server where tests may be interrupted by a timeout, for example."
msgstr ""
"前のセクションで説明したように、テストの実行が強制的に中断された場合、テスト"
"データベースが破棄されない可能性があります。次の実行では、データベースを再利"
"用するか破棄するかを尋ねられるでしょう。:option:`test --noinput` オプションを"
"使用すると、プロンプトを抑制し、データベースを自動的に破棄できます。このオプ"
"ションは、たとえばタイムアウトでテスト中断される可能性がある継続的インテグ"
"レーションサーバー上でのテストの実行時などに役に立ちます。"

msgid ""
"The default test database names are created by prepending ``test_`` to the "
"value of each :setting:`NAME` in :setting:`DATABASES`. When using SQLite, "
"the tests will use an in-memory database by default (i.e., the database will "
"be created in memory, bypassing the filesystem entirely!). The :setting:"
"`TEST <DATABASE-TEST>` dictionary in :setting:`DATABASES` offers a number of "
"settings to configure your test database. For example, if you want to use a "
"different database name, specify :setting:`NAME <TEST_NAME>` in the :setting:"
"`TEST <DATABASE-TEST>` dictionary for any given database in :setting:"
"`DATABASES`."
msgstr ""
"テストデータベースのデフォルトの名前は、 :setting:`DATABASES` 設定内の各 :"
"setting:`NAME` の値の前に ``test_`` を付けたものになります。SQLite を使ってい"
"るときは、デフォルトでは、テストにはインメモリのデータベースを使います (つま"
"り、データベースはメモリ内に作成されるため、ファイルシステムへのアクセスを完"
"全になくすことができるのです！)。設定の :setting:`DATABASES` 内の :setting:"
"`TEST <DATABASE-TEST>` ディクショナリには、テストデータベースに対するいろいろ"
"な設定を書くことができます。例えば、別のデータベース名を指定したければ、 :"
"setting:`TEST <DATABASE-TEST>` ディクショナリの :setting:`NAME <TEST_NAME>` "
"に、 :setting:`DATABASES` の中から好きなデータベースを選んで指定できます。"

msgid ""
"On PostgreSQL, :setting:`USER` will also need read access to the built-in "
"``postgres`` database."
msgstr ""
"PostgreSQL では、 :setting:`USER` が、ビルトインの ``postgres`` データベース"
"への読み取りアクセス権も持っている必要があります。"

msgid ""
"Aside from using a separate database, the test runner will otherwise use all "
"of the same database settings you have in your settings file: :setting:"
"`ENGINE <DATABASE-ENGINE>`, :setting:`USER`, :setting:`HOST`, etc. The test "
"database is created by the user specified by :setting:`USER`, so you'll need "
"to make sure that the given user account has sufficient privileges to create "
"a new database on the system."
msgstr ""
"テストランナーの使うデータベースは、独立したデータベースだけでなく、設定ファ"
"イルで指定した通りのデータベースを使用させることもできます: :setting:`ENGINE "
"<DATABASE-ENGINE>`, :setting:`USER`, :setting:`HOST`, などです。テストデータ"
"ベースは、:setting:`USER` で指定されたユーザによって作成されるため、そのユー"
"ザアカウントがシステム上で新しくデータベースを作成できる権限を持っている必要"
"があります。"

msgid ""
"For fine-grained control over the character encoding of your test database, "
"use the :setting:`CHARSET <TEST_CHARSET>` TEST option. If you're using "
"MySQL, you can also use the :setting:`COLLATION <TEST_COLLATION>` option to "
"control the particular collation used by the test database. See the :doc:"
"`settings documentation </ref/settings>` for details of these and other "
"advanced settings."
msgstr ""
"テストデータベースの文字エンコーディングに対するきめ細かい対応をするために、:"
"setting:`CHARSET <TEST_CHARSET>` TEST オプションを使用してください。MySQL を"
"使用している場合は、:setting:`COLLATION <TEST_COLLATION>` オプションを使用し"
"てテストデータベースが使用する特別な照合順序をコントロールできます。 これらお"
"よびより進歩的な設定の詳細については、:doc:`設定のドキュメント </ref/"
"settings>` を参照してください。"

msgid ""
"If using an SQLite in-memory database with SQLite, `shared cache <https://"
"www.sqlite.org/sharedcache.html>`_ is enabled, so you can write tests with "
"ability to share the database between threads."
msgstr ""
"SQLite で SQLite インメモリデータベースを使用する場合、 `共有キャッシュ "
"<https://www.sqlite.org/sharedcache.html>`_ が有効になるため、スレッド間で"
"データベースを共有することが可能なテストを書くことができます。"

msgid "Finding data from your production database when running tests?"
msgstr "テストの実行中に本番データベースからデータを見つけるには？"

msgid ""
"If your code attempts to access the database when its modules are compiled, "
"this will occur *before* the test database is set up, with potentially "
"unexpected results. For example, if you have a database query in module-"
"level code and a real database exists, production data could pollute your "
"tests. *It is a bad idea to have such import-time database queries in your "
"code* anyway - rewrite your code so that it doesn't do this."
msgstr ""
"モジュールのコンパイル時にデータベースへのアクセスを試みると、 テスト用データ"
"ベースがセットアップされる前にアクセスが発生し、予期しない結果になる可能性が"
"あります。例えば、モジュールレベルのコードにデータベースクエリがあり、実際の"
"データベースが存在する場合、実稼働データがテストを汚染する可能性があります。"
"いかなる場合でも、 *コードにこのようなインポート時のデータベースクエリを含め"
"るのは良くないことです* 。そのようなことをしないようにコードを書き直してくだ"
"さい。"

msgid ""
"This also applies to customized implementations of :meth:`~django.apps."
"AppConfig.ready()`."
msgstr ""
":meth:`~django.apps.AppConfig.ready()` の実装をカスタマイズする場合にも同じこ"
"とが言えます。"

msgid ""
"The :ref:`advanced multi-db testing topics <topics-testing-advanced-"
"multidb>`."
msgstr ""
":ref:`応用的なマルチデータベースのテスト トピック <topics-testing-advanced-"
"multidb>` も参考にしてください。"

msgid "Order in which tests are executed"
msgstr "テストの実行順序"

msgid ""
"In order to guarantee that all ``TestCase`` code starts with a clean "
"database, the Django test runner reorders tests in the following way:"
msgstr ""
"すべての ``TestCase`` コードがクリーンなデータベースで実行されることを保証す"
"るために、Django のテストランナーは次の方法でテストの実行順序を決定します。"

msgid "All :class:`~django.test.TestCase` subclasses are run first."
msgstr ""
"すべての :class:`~django.test.TestCase` サブクラスが最初に実行されます。"

msgid ""
"Then, all other Django-based tests (test case classes based on :class:"
"`~django.test.SimpleTestCase`, including :class:`~django.test."
"TransactionTestCase`) are run with no particular ordering guaranteed nor "
"enforced among them."
msgstr ""
"そして、他のすべての Django ベースのテスト (:class:`~django.test."
"SimpleTestCase` をベースとしたテストケースクラス、 :class:`~django.test."
"TransactionTestCase` を含む) が、特定の順序を保証も強制もしない状態で実行され"
"ます。"

msgid ""
"Then any other :class:`unittest.TestCase` tests (including doctests) that "
"may alter the database without restoring it to its original state are run."
msgstr ""
"最後に、その他の :class:`unittest.TestCase` テスト (doctests を含む) が実行さ"
"れます。このテストの中には、データベースを変更し、そのまま元の状態に戻さない"
"ようなテストがあることもあります。"

msgid ""
"The new ordering of tests may reveal unexpected dependencies on test case "
"ordering. This is the case with doctests that relied on state left in the "
"database by a given :class:`~django.test.TransactionTestCase` test, they "
"must be updated to be able to run independently."
msgstr ""
"この新しいテスト順序は、テストケース順序の予期しない依存関係を明らかにするか"
"もしれません。これは、:class:`~django.test.TransactionTestCase` によってデー"
"タベース内に記述された宣言に依存する doctests のケースで、これらは独立的に実"
"行できるように修正する必要があります。"

msgid ""
"Failures detected when loading tests are ordered before all of the above for "
"quicker feedback. This includes things like test modules that couldn't be "
"found or that couldn't be loaded due to syntax errors."
msgstr ""
"テストを読み込む際に検出された失敗は、上記のすべての前に配置され、迅速に"
"フィードバックされます。これには、テストモジュールが見つからなかったり、構文"
"エラーのために読み込めなかったりしたものが含まれます。"

msgid ""
"You may randomize and/or reverse the execution order inside groups using "
"the :option:`test --shuffle` and :option:`--reverse <test --reverse>` "
"options. This can help with ensuring your tests are independent from each "
"other."
msgstr ""
":option:`test --shuffle` と :option:`--reverse <test --reverse>` オプションを"
"使用すると、グループ内の実行順序をランダムにしたり逆にしたりすることができま"
"す。これは、テストが互いに独立していることを保証するのに役立ちます。"

msgid "Rollback emulation"
msgstr "ロールバックのエミュレーション"

msgid ""
"Any initial data loaded in migrations will only be available in ``TestCase`` "
"tests and not in ``TransactionTestCase`` tests, and additionally only on "
"backends where transactions are supported (the most important exception "
"being MyISAM). This is also true for tests which rely on "
"``TransactionTestCase`` such as :class:`LiveServerTestCase` and :class:"
"`~django.contrib.staticfiles.testing.StaticLiveServerTestCase`."
msgstr ""
"マイグレーションで呼び出されるあらゆる初期データは、``TestCase`` テスト内のみ"
"で有効で、 ``TransactionTestCase`` 内では無効です。加えて、トランザクションが"
"サポートされるバックエンドのみで有効です (最も重要な例外は MyISAM です)。これ"
"は、:class:`LiveServerTestCase` や :class:`~django.contrib.staticfiles."
"testing.StaticLiveServerTestCase` といった ``TransactionTestCase`` に依存する"
"テストに関しても同様です。"

msgid ""
"Django can reload that data for you on a per-testcase basis by setting the "
"``serialized_rollback`` option to ``True`` in the body of the ``TestCase`` "
"or ``TransactionTestCase``, but note that this will slow down that test "
"suite by approximately 3x."
msgstr ""
"Djangoは、 ``TestCase`` や ``TransactionTestCase`` の本文で "
"``serialized_rollback`` オプションを ``True`` に設定することで、テストケース"
"ごとにデータを再読み込みできますが、これによりテストスイートの実行速度が約3倍"
"遅くなることに注意してください。"

msgid ""
"Third-party apps or those developing against MyISAM will need to set this; "
"in general, however, you should be developing your own projects against a "
"transactional database and be using ``TestCase`` for most tests, and thus "
"not need this setting."
msgstr ""
"サードパーティのアプリや MyISAM に対して開発する場合は、通常この設定が必要で"
"す。しかし、独自のプロジェクトをトランザクションデータベースに対して開発する"
"場合は、ほとんどのテストで ``TestCase`` を使用するはずです。したがって、この"
"設定は不要です。"

msgid ""
"The initial serialization is usually very quick, but if you wish to exclude "
"some apps from this process (and speed up test runs slightly), you may add "
"those apps to :setting:`TEST_NON_SERIALIZED_APPS`."
msgstr ""
"初期シリアライズは通常、非常に高速ですが、このプロセスからいくつかのアプリを"
"除外してテストの実行を少しでも高速にしたい場合は、それらのアプリを :setting:"
"`TEST_NON_SERIALIZED_APPS` に追加します。"

msgid ""
"To prevent serialized data from being loaded twice, setting "
"``serialized_rollback=True`` disables the :data:`~django.db.models.signals."
"post_migrate` signal when flushing the test database."
msgstr ""
"シリアライズされたデータが二度読み込まれるのを防ぐために、 "
"``serialized_rollback=True`` を設定すると、テストデータベースを flush すると"
"きに :data:`~django.db.models.signals.post_migrate` シグナルを無効にします。"

msgid "Other test conditions"
msgstr "その他のテストに関する条件"

msgid ""
"Regardless of the value of the :setting:`DEBUG` setting in your "
"configuration file, all Django tests run with :setting:`DEBUG`\\=False. This "
"is to ensure that the observed output of your code matches what will be seen "
"in a production setting."
msgstr ""
"設定ファイルで指定した :setting:`DEBUG` の値にかかわらず、Django のテストは :"
"setting:`DEBUG`\\=False を指定したものとして実行されます。これは、表示される"
"コードの出力が、実際の環境設定で見られるものと同じになるようにするためです。"

msgid ""
"Caches are not cleared after each test, and running ``manage.py test "
"fooapp`` can insert data from the tests into the cache of a live system if "
"you run your tests in production because, unlike databases, a separate "
"\"test cache\" is not used. This behavior :ticket:`may change <11505>` in "
"the future."
msgstr ""
"各テスト後にキャッシュはクリアされません。そのため、``manage.py test "
"fooapp`` を実行すると、テストで挿入されたデータが実働環境のシステムのキャッ"
"シュに残り続ける可能性があります。データベースの場合と違い、別の「テスト用の"
"キャッシュ」が使われないためです。ただし、この動作は将来 :ticket:`変更される"
"可能性があります <11505>` 。"

msgid "Understanding the test output"
msgstr "テストの出力を理解する"

msgid ""
"When you run your tests, you'll see a number of messages as the test runner "
"prepares itself. You can control the level of detail of these messages with "
"the ``verbosity`` option on the command line:"
msgstr ""
"テストを実行すると、テストランナーが用意したたくさんのメッセージが表示されま"
"す。表示するメッセージの詳細レベルは、コマンドラインで ``verbosity`` オプショ"
"ンを指定することで、自由にコントロールできます。"

msgid ""
"This tells you that the test runner is creating a test database, as "
"described in the previous section."
msgstr ""
"このメッセージは、テストランナーが前のセクションで説明したテスト用のデータ"
"ベースを作成していることを表しています。"

msgid ""
"Once the test database has been created, Django will run your tests. If "
"everything goes well, you'll see something like this:"
msgstr ""
"テスト用データベースが作成されると、Django はテストを実行します。すべてのテス"
"トが成功すれば、次のようなメッセージが表示されるはずです。"

msgid ""
"If there are test failures, however, you'll see full details about which "
"tests failed:"
msgstr ""
"しかし、もしテストが失敗した場合には、失敗したテストとその詳細が表示されま"
"す。"

msgid ""
"A full explanation of this error output is beyond the scope of this "
"document, but it's pretty intuitive. You can consult the documentation of "
"Python's :mod:`unittest` library for details."
msgstr ""
"このエラー出力の詳しい説明は、このドキュメントの範囲外ですが、極めて直感的に"
"理解できるものです。詳しく知りたければ、Python の :mod:`unittest` ライブラリ"
"のドキュメントを読んでみてください。"

msgid ""
"Note that the return code for the test-runner script is 1 for any number of "
"failed tests (whether the failure was caused by an error, a failed "
"assertion, or an unexpected success). If all the tests pass, the return code "
"is 0. This feature is useful if you're using the test-runner script in a "
"shell script and need to test for success or failure at that level."
msgstr ""
"失敗したテストの数に関わらず（失敗の原因がエラー、アサーションの失敗、予期し"
"ない成功のいずれであっても）、テストランナーのスクリプトから返ってくる終了"
"コードは 1 であることに注意してください。すべてのテストが成功すれば、0 が返り"
"ます。この特徴は、別のシェルスクリプトの中でテストランナースクリプトを実行す"
"るときに、成功したかどうかの情報が必要な時に役に立ちます。"

msgid "Speeding up the tests"
msgstr "テストのスピードアップ"

msgid "Running tests in parallel"
msgstr "テストの並列実行"

msgid ""
"As long as your tests are properly isolated, you can run them in parallel to "
"gain a speed up on multi-core hardware. See :option:`test --parallel`."
msgstr ""
"各テストが適切に独立性を保ったものであれば、マルチコアのハードウェア上でテス"
"トを並列実行することでスピートアップさせることができます。詳しくは :option:"
"`test --parallel` を読んでください。"

msgid "Password hashing"
msgstr "パスワードのハッシュ生成"

msgid ""
"The default password hasher is rather slow by design. If you're "
"authenticating many users in your tests, you may want to use a custom "
"settings file and set the :setting:`PASSWORD_HASHERS` setting to a faster "
"hashing algorithm::"
msgstr ""
"デフォルトのパスワードのハッシュ生成器は、設計上、時間のかかるものになってい"
"ます。テストの中で多数のユーザーを認証する必要がある場合、カスタムの設定ファ"
"イルを用意して、:setting:`PASSWORD_HASHERS` 設定に、より高速なハッシュ生成ア"
"ルゴリズムを設定すると良いでしょう。"

msgid ""
"Don't forget to also include in :setting:`PASSWORD_HASHERS` any hashing "
"algorithm used in fixtures, if any."
msgstr ""
":setting:`PASSWORD_HASHERS` には、必要なハッシュアルゴリズムが複数あっても、"
"追加しておくことを忘れないようにしてください。"

msgid "Preserving the test database"
msgstr "テストデータベースを保存する"

msgid ""
"The :option:`test --keepdb` option preserves the test database between test "
"runs. It skips the create and destroy actions which can greatly decrease the "
"time to run tests."
msgstr ""
":option:`test --keepdb` オプションで、テスト間でテストデータベースを保存でき"
"ます。テスト実行の際、データベース作成および破棄にかかる時間を大幅に短縮でき"
"ます。"

msgid "Avoiding disk access for media files"
msgstr "メディアファイルに対するディスクアクセスを回避する"

msgid ""
"The :class:`~django.core.files.storage.InMemoryStorage` is a convenient way "
"to prevent disk access for media files. All data is kept in memory, then it "
"gets discarded after tests run."
msgstr ""
":class:`~django.core.files.storage.InMemoryStorage` は、メディアファイルに対"
"するディスクアクセスを避けるための便利な手段です。すべてのデータはメモリ内に"
"とどまり、テスト実行の後に破棄されます。"

msgid "Testing tools"
msgstr "テストツール"

msgid ""
"Django provides a small set of tools that come in handy when writing tests."
msgstr "Django は、テストを書くのに便利なツールをいくつか提供しています。"

msgid "The test client"
msgstr "テストクライアント"

msgid ""
"The test client is a Python class that acts as a dummy web browser, allowing "
"you to test your views and interact with your Django-powered application "
"programmatically."
msgstr ""
"テストクライアントは、ダミーのウェブブラウザとして振る舞う Python のクラスで"
"す。これを使えば、ビューと Django で作ったアプリケーションとの関係をプログラ"
"ムから自動でテストできるようになります。"

msgid "Some of the things you can do with the test client are:"
msgstr "テストクライアントでは、次のようなことができます。"

msgid ""
"Simulate GET and POST requests on a URL and observe the response -- "
"everything from low-level HTTP (result headers and status codes) to page "
"content."
msgstr ""
"ある URL に対する GET および POST リクエストのシミュレートと、その結果の観"
"察。低レベルの HTTP (レスポンスのヘッダーやステータスコードなど) から、ページ"
"のコンテンツまで、あらゆるレスポンスの内容を調査できます。"

msgid ""
"See the chain of redirects (if any) and check the URL and status code at "
"each step."
msgstr ""
"一連の (好きな数の) リダイレクトを見て、その各ステップごとに URL とステータス"
"コードをチェックする。"

msgid ""
"Test that a given request is rendered by a given Django template, with a "
"template context that contains certain values."
msgstr ""
"指定したリクエストが特定の Django テンプレートによってレンダリングされたと"
"き、テンプレートのコンテキストが正しく特定の値を含んでいるかどうかをテストす"
"る。"

msgid ""
"Note that the test client is not intended to be a replacement for Selenium_ "
"or other \"in-browser\" frameworks. Django's test client has a different "
"focus. In short:"
msgstr ""
"テストクライアントは Selenium_ や他の \"ブラウザ内 (in-browser)\" フレーム"
"ワークの代替を目指すものではないことに注意してください。Django のテストクライ"
"アントの目的は別の点にあります。つまり、"

msgid ""
"Use Django's test client to establish that the correct template is being "
"rendered and that the template is passed the correct context data."
msgstr ""
"Django のテストクライアントは、正しいテンプレートがレンダリングされ、そのテン"
"プレートが正しいコンテキストデータをちゃんと渡しているのかをチェックするため"
"に使います。"

msgid ""
"Use :class:`~django.test.RequestFactory` to test view functions directly, "
"bypassing the routing and middleware layers."
msgstr ""
"ビューの機能を直接テストするには、:class:`~django.test.RequestFactory` を使用"
"して、ルーティングとミドルウェアのレイヤーをバイパスしてください。"

msgid ""
"Use in-browser frameworks like Selenium_ to test *rendered* HTML and the "
"*behavior* of web pages, namely JavaScript functionality. Django also "
"provides special support for those frameworks; see the section on :class:"
"`~django.test.LiveServerTestCase` for more details."
msgstr ""
"Selenium_ などのブラウザー内フレームワークは、HTML の *レンダリング* や、ウェ"
"ブページの *振る舞い* 、つまり JavaScript の機能性をテストするために使いま"
"す。また、Django はこれらのフレームワーク向けの特別なサポートも提供していま"
"す。詳細については、:class:`~django.test.LiveServerTestCase` のセクションを読"
"んでください。"

msgid ""
"A comprehensive test suite should use a combination of all of these test "
"types."
msgstr ""
"包括的なテストスイートを実現するには、これらすべてのタイプのテストを組み合わ"
"せて行うべきです。"

msgid "Overview and a quick example"
msgstr "概要と簡単な例"

msgid ""
"To use the test client, instantiate ``django.test.Client`` and retrieve web "
"pages:"
msgstr ""
"テストクライアントを使うには、``django.test.Client`` からインスタンスを作り、"
"次のようにウェブページを取得します。"

msgid ""
"As this example suggests, you can instantiate ``Client`` from within a "
"session of the Python interactive interpreter."
msgstr ""
"この例が示唆しているように、 ``Client`` のインスタンスは、Python のインタラク"
"ティブなインタプリタ上のセッションからでも作ることができます。"

msgid "Note a few important things about how the test client works:"
msgstr ""
"テストクライアントの動作の仕方に関して、いくつか大切な注意点があります。"

msgid ""
"The test client does *not* require the web server to be running. In fact, it "
"will run just fine with no web server running at all! That's because it "
"avoids the overhead of HTTP and deals directly with the Django framework. "
"This helps make the unit tests run quickly."
msgstr ""
"テストクライアントが動作するために、ウェブサーバーが動作している必要は *あり"
"ません* 。実際、ウェブサーバーを一切起動せずに動作するのです！ HTTP のオー"
"バーヘッドを避けて、Django フレームワークと直接やりとりすることでこれを実現し"
"ています。これにより、高速なユニットテストが可能になっています。"

msgid ""
"When retrieving pages, remember to specify the *path* of the URL, not the "
"whole domain. For example, this is correct:"
msgstr ""
"ページの取得時には、ドメイン全体ではなく、URL の *path* だけを指定することを"
"覚えておいてください。たとえば、次は正しいです。"

msgid "This is incorrect:"
msgstr "しかし、これは間違いです。"

msgid ""
"The test client is not capable of retrieving web pages that are not powered "
"by your Django project. If you need to retrieve other web pages, use a "
"Python standard library module such as :mod:`urllib`."
msgstr ""
"テストクライアントには、自分の Django プロジェクト以外のウェブページを取得す"
"る機能はありません。他のウェブページが必要な場合には、 :mod:`urllib` などの "
"Python のスタンダードライブラリモジュールを利用してください。"

msgid ""
"To resolve URLs, the test client uses whatever URLconf is pointed-to by "
"your :setting:`ROOT_URLCONF` setting."
msgstr ""
"URL を解決するとき、テストクライアントは :setting:`ROOT_URLCONF` 設定で指定さ"
"れたすべての URLconf を使用します。"

msgid ""
"Although the above example would work in the Python interactive interpreter, "
"some of the test client's functionality, notably the template-related "
"functionality, is only available *while tests are running*."
msgstr ""
"上の例では Python のインタラクティブなインタプリタ上でも動作するはずですが、"
"テストクライアントの一部の機能、特にテンプレート関係の機能は、 *テストの実行"
"中* にしか使えないことがあります。"

msgid ""
"The reason for this is that Django's test runner performs a bit of black "
"magic in order to determine which template was loaded by a given view. This "
"black magic (essentially a patching of Django's template system in memory) "
"only happens during test running."
msgstr ""
"というのも、Django のテストランナーは、与えられたビューによって読み込まれるテ"
"ンプレートを決定する時に、ちょっとした黒魔術を使っています。この黒魔術 (具体"
"的には Django のテンプレートシステムに対してメモリ上でパッチを当てています) "
"は、テストの実行中にだけ使われるのです。"

msgid ""
"By default, the test client will disable any CSRF checks performed by your "
"site."
msgstr ""
"デフォルトでは、テストクライアントはサイト上でのすべての CSRF チェックを無効"
"にしています。"

msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks. To do "
"this, pass in the ``enforce_csrf_checks`` argument when you construct your "
"client:"
msgstr ""
"何らかの理由でテストクライアントに CSRF チェックを実行して *ほしい* ときに"
"は、CSRF チェックの実行を強制するテストクライアントのインスタンスを作ることが"
"できます。これには、クライアントを作る時に次のように ``enforce_csrf_checks`` "
"引数を渡します。"

msgid "Making requests"
msgstr "リクエストの作成"

msgid "Use the ``django.test.Client`` class to make requests."
msgstr "リクエストの作成には、``django.test.Client`` クラスを使います。"

msgid ""
"A testing HTTP client. Takes several arguments that can customize behavior."
msgstr ""
"テスト用の HTTP クライアントです。いくつかの引数で動作をカスタマイズできま"
"す。"

msgid ""
"``headers`` allows you to specify default headers that will be sent with "
"every request. For example, to set a ``User-Agent`` header::"
msgstr ""
"``headers`` にはリクエストごとに送信されるデフォルトのヘッダを指定できます。"
"例えば、 ``User-Agent`` ヘッダの場合:"

msgid ""
"Arbitrary keyword arguments in ``**defaults`` set WSGI :pep:`environ "
"variables <3333#environ-variables>`. For example, to set the script name::"
msgstr ""
"``Defaults`` 内の任意のキーワード引数には WSGI :pep:`環境変数 <3333#environ-"
"variables>` を指定します。例えば、スクリプト名の場合:"

msgid ""
"Keyword arguments starting with a ``HTTP_`` prefix are set as headers, but "
"the ``headers`` parameter should be preferred for readability."
msgstr ""
"``HTTP_`` プレフィックスで始まるキーワード引数がヘッダーとして設定されます"
"が、可読性のために ``headers`` パラメーターの使用を推奨します。"

msgid ""
"The values from the ``headers`` and ``extra`` keyword arguments passed to :"
"meth:`~django.test.Client.get()`, :meth:`~django.test.Client.post()`, etc. "
"have precedence over the defaults passed to the class constructor."
msgstr ""
":meth:`~django.test.Client.get()` や :meth:`~django.test.Client.post()` など"
"に ``headers`` と ``extra`` キーワード引数で与えられた値は、クラスコンストラ"
"クタに渡されたデフォルト値に優先します。"

msgid ""
"The ``enforce_csrf_checks`` argument can be used to test CSRF protection "
"(see above)."
msgstr ""
"``enforce_csrf_checks`` 引数を使うと、CSRF プロテクションのテストが実行できま"
"す (上の説明を参照)。"

msgid ""
"The ``raise_request_exception`` argument allows controlling whether or not "
"exceptions raised during the request should also be raised in the test. "
"Defaults to ``True``."
msgstr ""
"``raise_request_exception`` 引数を指定することで、リクエスト中に発生した例外"
"をテストでも発生させるかどうかを制御できます。デフォルトは ``True`` です。"

msgid ""
"The ``json_encoder`` argument allows setting a custom JSON encoder for the "
"JSON serialization that's described in :meth:`post`."
msgstr ""
"``json_encoder`` 引数を指定すると、 :meth:`post` に記述されているJSONシリアラ"
"イズ用のカスタムJSONエンコーダを指定できます。"

msgid ""
"Once you have a ``Client`` instance, you can call any of the following "
"methods:"
msgstr ""
"``Client`` インスタンスを一度作れば、以下のメソッドを自由に使うことができま"
"す。"

msgid ""
"Makes a GET request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""
"与えられた ``path`` に対して GET リクエストを作り、``Response`` オブジェクト"
"を返します。``Response`` オブジェクトについては、下のセクションにドキュメント"
"されています。"

msgid ""
"The key-value pairs in the ``data`` dictionary are used to create a GET data "
"payload. For example:"
msgstr ""
"``data`` ディクショナリ内の key-value ペアは、GET の URL のデータ部分を構築す"
"るのに使われます。例えば、次の例では、"

msgid "...will result in the evaluation of a GET request equivalent to:"
msgstr "引数の評価の結果、次の GET リクエストの実行と等価になります。"

msgid ""
"The ``headers`` parameter can be used to specify headers to be sent in the "
"request. For example:"
msgstr ""
"``headers`` 引数は、リクエスト時に送信されるヘッダーの指定に使われます。たと"
"えば、次のコード"

msgid ""
"...will send the HTTP header ``HTTP_ACCEPT`` to the details view, which is a "
"good way to test code paths that use the :meth:`django.http.HttpRequest."
"accepts()` method."
msgstr ""
"は、HTTP ヘッダー ``HTTP_ACCEPT`` を details ビューに送信します。これは、 :"
"meth:`django.http.HttpRequest.accepts()` メソッドを使ったコードパースのテスト"
"のための良い方法です。"

msgid ""
"Arbitrary keyword arguments set WSGI :pep:`environ variables <3333#environ-"
"variables>`. For example, headers to set the script name:"
msgstr ""
"任意のキーワード引数には、WSGI :pep:`環境変数 <3333#environ-variables>` を指"
"定します。たとえば、スクリプト名を設定するヘッダの場合:"

msgid ""
"If you already have the GET arguments in URL-encoded form, you can use that "
"encoding instead of using the data argument. For example, the previous GET "
"request could also be posed as:"
msgstr ""
"GET の引数がすでに URL エンコードされた形式である場合は、data 引数の代わりに"
"エンコード済みの文字列を使うことができます。たとえば、先ほどの GET リクエスト"
"は次のようにも書けます。"

msgid ""
"If you provide a URL with both an encoded GET data and a data argument, the "
"data argument will take precedence."
msgstr ""
"エンコード済みの GET データと data 引数の両方が与えられた場合には、data 引数"
"の方が優先されます。"

msgid ""
"If you set ``follow`` to ``True`` the client will follow any redirects and a "
"``redirect_chain`` attribute will be set in the response object containing "
"tuples of the intermediate urls and status codes."
msgstr ""
"``follow`` を ``True`` を与えると、クライアントはすべてのリダイレクトを辿り、"
"途中の URL とステータスコードのタプルが、レスポンスオブジェクトの "
"``redirect_chain`` 属性に追加されてゆきます。"

msgid ""
"If you had a URL ``/redirect_me/`` that redirected to ``/next/``, that "
"redirected to ``/final/``, this is what you'd see:"
msgstr ""
"たとえば、URL ``/redirect_me/`` が ``/next/`` にリダイレクトし、それがさらに "
"``/final/`` にリダイレクトするような場合には、``redirect_chain`` は次のような"
"値になります。"

msgid ""
"If you set ``secure`` to ``True`` the client will emulate an HTTPS request."
msgstr ""
"``secure`` を ``True`` に設定すると、クライアントは HTTPS リクエストをエミュ"
"レートします。"

msgid ""
"Makes a POST request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""
"与えられた ``path`` に対して POST リクエストを作り、``Response`` オブジェクト"
"を返します。``Response`` オブジェクトについては、下のセクションにドキュメント"
"されています。"

msgid ""
"The key-value pairs in the ``data`` dictionary are used to submit POST data. "
"For example:"
msgstr ""
"``data`` ディクショナリ内の key-value ペアは、POST データを送信するのに使われ"
"ます。例えば、次の例では、"

msgid "...will result in the evaluation of a POST request to this URL:"
msgstr "引数の評価の結果、次の URL へ POST リクエストが行われます。"

msgid "...with this POST data:"
msgstr "リクエストで送られる POST データは次のものになります。"

msgid ""
"If you provide ``content_type`` as :mimetype:`application/json`, the "
"``data`` is serialized using :func:`json.dumps` if it's a dict, list, or "
"tuple. Serialization is performed with :class:`~django.core.serializers.json."
"DjangoJSONEncoder` by default, and can be overridden by providing a "
"``json_encoder`` argument to :class:`Client`. This serialization also "
"happens for :meth:`put`, :meth:`patch`, and :meth:`delete` requests."
msgstr ""
"``content_type`` に :mimetype:`application/json` を指定すると、 ``data`` が "
"dict、リスト、タプルの場合、 :func:`json.dumps` を使ってシリアライズされま"
"す。デフォルトでは :class:`~django.core.serializers.json.DjangoJSONEncoder` "
"でシリアライズを行いますが、 :class:`Client` に ``json_encoder`` 引数を指定す"
"ることでオーバーライドできます。このシリアライズは :meth:`put`, :meth:"
"`patch`, :meth:`delete` リクエストでも行われます。"

msgid ""
"If you provide any other ``content_type`` (e.g. :mimetype:`text/xml` for an "
"XML payload), the contents of ``data`` are sent as-is in the POST request, "
"using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""
"もし他の ``content_type`` (たとえば、XML データの場合は :mimetype:`text/"
"xml`) を与えると、``data`` のコンテンツは、HTTP の ``Content-Type`` ヘッダー"
"の中で ``content_type`` を使ったものとして、POST リクエストで送られます。"

msgid ""
"If you don't provide a value for ``content_type``, the values in ``data`` "
"will be transmitted with a content type of :mimetype:`multipart/form-data`. "
"In this case, the key-value pairs in ``data`` will be encoded as a multipart "
"message and used to create the POST data payload."
msgstr ""
"``content_type`` に値を渡さなかったときは、``data`` 内の値を :mimetype:"
"`multipart/form-data` のコンテンツタイプとして送信します。この場合は、 "
"``data`` 内のkey-value ペアが multipart メッセージにえんこーどされ、POST デー"
"タを生成するのに使われます。"

msgid ""
"To submit multiple values for a given key -- for example, to specify the "
"selections for a ``<select multiple>`` -- provide the values as a list or "
"tuple for the required key. For example, this value of ``data`` would submit "
"three selected values for the field named ``choices``::"
msgstr ""
"たとえば ``<select multiple>`` の複数の選択を指定する場合のように、特定のキー"
"に対して複数の値を送信したいときは、必要なキーに対する値をリストまたはタプル"
"として与えます。たとえば、 ``data`` に次の値を与えれば、3つの選択した値を "
"``choice`` という名前のフィールドに対して送信できます。"

msgid ""
"Submitting files is a special case. To POST a file, you need only provide "
"the file field name as a key, and a file handle to the file you wish to "
"upload as a value. For example, if your form has fields ``name`` and "
"``attachment``, the latter a :class:`~django.forms.FileField`:"
msgstr ""
"ファイルの送信は特別なケースです。ファイルをPOSTするには、キーとしてファイル"
"フィールド名を、値としてアップロードしたいファイルへのファイルハンドルを渡す"
"だけで十分です。例えば、フォームに ``name`` と ``attachment`` のフィールドが"
"あり、後者が :class:`~django.forms.FileField` の場合:"

msgid ""
"You may also provide any file-like object (e.g., :class:`~io.StringIO` or :"
"class:`~io.BytesIO`) as a file handle. If you're uploading to an :class:"
"`~django.db.models.ImageField`, the object needs a ``name`` attribute that "
"passes the :data:`~django.core.validators.validate_image_file_extension` "
"validator. For example:"
msgstr ""
"また、ファイルのようなオブジェクト (例えば :class:`~io.StringIO` や :class:"
"`~io.BytesIO`) をファイルハンドルとして指定することもできます。もし :class:"
"`~django.db.models.ImageField` にアップロードする場合、オブジェクトには :"
"data:`~django.core.validators.validate_image_file_extension` バリデータを渡"
"す ``name`` 属性が必要です。たとえば下記のようにします:"

msgid ""
"Note that if you wish to use the same file handle for multiple ``post()`` "
"calls then you will need to manually reset the file pointer between posts. "
"The easiest way to do this is to manually close the file after it has been "
"provided to ``post()``, as demonstrated above."
msgstr ""
"複数の ``post()`` の呼び出しに対して同じファイルハンドラを使う時には、post 間"
"でファイルポインタを手動でリセットする必要があります。これを一番簡単に扱う方"
"法は、上に示したように、ファイルが ``post()`` に与えられた後に手動でファイル"
"を close することです。"

msgid ""
"You should also ensure that the file is opened in a way that allows the data "
"to be read. If your file contains binary data such as an image, this means "
"you will need to open the file in ``rb`` (read binary) mode."
msgstr ""
"データが読み込めるように、正しい方法でファイルを開くようにする必要がありま"
"す。これはつまり、画像ファイルなどのバイナリデータが含まれている場合には、"
"``rb`` (read binary、バイナリ読み込み) モードで開かなければならないということ"
"です。"

msgid ""
"The ``headers`` and ``extra`` parameters acts the same as for :meth:`Client."
"get`."
msgstr ""
"``headers`` と ``extra`` 引数は、:meth:`Client.get` と同じように振る舞いま"
"す。"

msgid ""
"If the URL you request with a POST contains encoded parameters, these "
"parameters will be made available in the request.GET data. For example, if "
"you were to make the request:"
msgstr ""
"POST でリクエストした URL にエンコード済みパラメータが含まれている場合には、"
"これらのデータは request.GET データから利用できます。たとえば、次のようなリク"
"エストを行った場合、"

msgid ""
"... the view handling this request could interrogate request.POST to "
"retrieve the username and password, and could interrogate request.GET to "
"determine if the user was a visitor."
msgstr ""
"このリクエストをハンドリングするビューでは、request.POST からはユーザー名とパ"
"スワードを取得し、request.GET からはユーザーが visitor であるかどうかを特定で"
"きます。"

msgid ""
"Makes a HEAD request on the provided ``path`` and returns a ``Response`` "
"object. This method works just like :meth:`Client.get`, including the "
"``follow``, ``secure``, ``headers``, and ``extra`` parameters, except it "
"does not return a message body."
msgstr ""
"与えられた ``path`` に対して HEAD リクエストを作り、``Response`` オブジェクト"
"を返します。message body を返さない点を除いて、:meth:`Client.get` と同じよう"
"に動作します。``follow``、``secure``、``headers``、``extra`` の引数の動作も同"
"様です。"

msgid ""
"Makes an OPTIONS request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""
"与えられた ``path`` に対して OPTION リクエストを作り、``Response`` オブジェク"
"トを返します。RESTful インターフェイスのテスト時に有用です。"

msgid ""
"When ``data`` is provided, it is used as the request body, and a ``Content-"
"Type`` header is set to ``content_type``."
msgstr ""
"``data`` が与えられると、request body として使われます。 ``content_type`` は "
"``Content-Type`` ヘッダーに設定されます。"

msgid ""
"The ``follow``, ``secure``, ``headers``, and ``extra`` parameters act the "
"same as for :meth:`Client.get`."
msgstr ""
"``follow``、``secure``、``headers``、``extra`` 引数は、:meth:`Client.get` と"
"同様に動作します。"

msgid ""
"Makes a PUT request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""
"与えられた ``path`` に対して PUT リクエストを作り、``Response`` オブジェクト"
"を返します。RESTful インターフェイスのテスト時に有用です。"

msgid ""
"Makes a PATCH request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""
"与えられた ``path`` に対して PATCH リクエストを作り、``Response`` オブジェク"
"トを返します。RESTful インターフェイスのテスト時に有用です。"

msgid ""
"Makes a DELETE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""
"与えられた ``path`` に対して DELETE リクエストを作り、``Response`` オブジェク"
"トを返します。RESTful インターフェイスのテスト時に有用です。"

msgid ""
"Makes a TRACE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for simulating diagnostic probes."
msgstr ""
"与えられた ``path`` に対して TRACE リクエストを作り、``Response`` オブジェク"
"トを返します。診断のための調査をシミュレートするときに役に立ちます。"

msgid ""
"Unlike the other request methods, ``data`` is not provided as a keyword "
"parameter in order to comply with :rfc:`9110#section-9.3.8`, which mandates "
"that TRACE requests must not have a body."
msgstr ""
"他のリクエストメソッドとは違い、 ``data`` がキーワード引数にありません。 :"
"rfc:`9110#section-9.3.8` に従うためです。そのため、TRACE リクエストには body "
"を含むことが禁止されています。"

msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>` "
"and you deal with logging in users, you can use the test client's "
"``login()`` method to simulate the effect of a user logging into the site."
msgstr ""
"あなたのサイトが Django の :doc:`認証システム</topics/auth/index>` を使ってい"
"て、ユーザーのログインをテストしたければ、テストクライアントの ``login()`` メ"
"ソッドを使うことで、ユーザーがサイトにログインしたときの状況をシミュレートで"
"きます。"

msgid ""
"After you call this method, the test client will have all the cookies and "
"session data required to pass any login-based tests that may form part of a "
"view."
msgstr ""
"このメソッドを呼ぶ事で、テストクライアントはログインに基づいてビューを形成す"
"るテストを行う上で必要なクッキーとセッション情報を全て持ちます。"

msgid ""
"The format of the ``credentials`` argument depends on which :ref:"
"`authentication backend <authentication-backends>` you're using (which is "
"configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're "
"using the standard authentication backend provided by Django "
"(``ModelBackend``), ``credentials`` should be the user's username and "
"password, provided as keyword arguments:"
msgstr ""
"引数 ``credentials`` の形式は利用している (:setting:"
"`AUTHENTICATION_BACKENDS` の設定値に定義されています) :ref:`認証バックエンド "
"<authentication-backends>` に依存します。Django によって提供される標準の認証"
"バックエンド (``ModelBackend``) を用いている場合は、 ``credentials`` は利用者"
"のユーザー名とパスワードであり、キーワード引数として渡されます::"

msgid ""
"If you're using a different authentication backend, this method may require "
"different credentials. It requires whichever credentials are required by "
"your backend's ``authenticate()`` method."
msgstr ""
"もし標準以外の認証バックエンドを利用している場合、このメソッドは異なった認証"
"情報を必要とします。この値では利用している認証バックエンドの "
"``authenticate()`` メソッドによって要求される認証情報が必要になります。"

msgid ""
"``login()`` returns ``True`` if it the credentials were accepted and login "
"was successful."
msgstr ""
"認証情報が受け入れられてログインが成功した場合に ``login()`` は ``True`` を返"
"します。"

msgid ""
"Finally, you'll need to remember to create user accounts before you can use "
"this method. As we explained above, the test runner is executed using a test "
"database, which contains no users by default. As a result, user accounts "
"that are valid on your production site will not work under test conditions. "
"You'll need to create users as part of the test suite -- either manually "
"(using the Django model API) or with a test fixture. Remember that if you "
"want your test user to have a password, you can't set the user's password by "
"setting the password attribute directly -- you must use the :meth:`~django."
"contrib.auth.models.User.set_password()` function to store a correctly "
"hashed password. Alternatively, you can use the :meth:`~django.contrib.auth."
"models.UserManager.create_user` helper method to create a new user with a "
"correctly hashed password."
msgstr ""
"最後に、このメソッドを使う前にユーザーアカウントを作成する必要があります。上"
"で説明したように、テストランナーはデフォルトではユーザーを含まないテスト用"
"データベースを使用して実行されます。その結果、本番サイトで有効なユーザーアカ"
"ウントはテスト条件下では動作しません。テストスイートの一部として、手動で"
"（Django モデル API を使って）、あるいはテストフィクスチャを使ってユーザを作"
"成する必要があります。テストユーザーにパスワードを持たせたい場合、 password "
"属性を直接設定してユーザーのパスワードを設定することはできないことを覚えてお"
"いてください。 :meth:`~django.contrib.auth.models.User.set_password()` 関数を"
"使って、正しくハッシュ化されたパスワードを保存する必要があります。また、 :"
"meth:`~django.contrib.auth.models.UserManager.create_user` ヘルパーメソッドを"
"使って、正しくハッシュ化されたパスワードを持つ新しいユーザーを作成することも"
"できます。"

msgid "``alogin()`` method was added."
msgstr "``alogin()`` メソッドが追加されました。"

msgid "*Asynchronous version*: ``aforce_login()``"
msgstr "*非同期バージョン*: ``aforce_login()``"

msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>`, "
"you can use the ``force_login()`` method to simulate the effect of a user "
"logging into the site. Use this method instead of :meth:`login` when a test "
"requires a user be logged in and the details of how a user logged in aren't "
"important."
msgstr ""
"あなたのサイトが Django の :doc:`認証システム</topics/auth/index>` を使ってい"
"る場合、 ``force_login()`` メソッドを使うと、ユーザがサイトにログインしたとき"
"の影響をシミュレーションできます。テストがユーザのログインを必要とするが、"
"ユーザがどのようにログインしたかの詳細は重要ではない場合には :meth:`login` の"
"代わりにこのメソッドを使用してください。"

msgid ""
"Unlike ``login()``, this method skips the authentication and verification "
"steps: inactive users (:attr:`is_active=False <django.contrib.auth.models."
"User.is_active>`) are permitted to login and the user's credentials don't "
"need to be provided."
msgstr ""
"``login()`` とは異なり、このメソッドは認証と確認のステップを省略します。アク"
"ティブでないユーザ (:attr:`is_active=False <django.contrib.auth.models.User."
"is_active>`) もログインを許可され、ユーザの認証情報を提供する必要はありませ"
"ん。"

msgid ""
"The user will have its ``backend`` attribute set to the value of the "
"``backend`` argument (which should be a dotted Python path string), or to "
"``settings.AUTHENTICATION_BACKENDS[0]`` if a value isn't provided. The :func:"
"`~django.contrib.auth.authenticate` function called by :meth:`login` "
"normally annotates the user like this."
msgstr ""
"ユーザーには、 ``backend`` 引数の値（ドットで区切られたPythonパスの文字列であ"
"るべき）が ``backend`` 属性としてセットされます。値が指定されていない場合"
"は、 ``settings.AUTHENTICATION_BACKENDS[0]`` に設定されます。 :meth:`login` "
"によって呼び出される :func:`~django.contrib.auth.authenticate` 関数は、通常こ"
"のようにユーザーにアノテーションを付けます。"

msgid ""
"This method is faster than ``login()`` since the expensive password hashing "
"algorithms are bypassed. Also, you can speed up ``login()`` by :ref:`using a "
"weaker hasher while testing <speeding-up-tests-auth-hashers>`."
msgstr ""
"このメソッドは、高コストなパスワードハッシングアルゴリズムを回避するため、 "
"``login()`` よりも高速です。また、 :ref:`テストに弱いハッシャーを使う "
"<speeding-up-tests-auth-hashers>` ことで、 ``login()`` 処理を高速にすることも"
"できます。"

msgid "``aforce_login()`` method was added."
msgstr "``aforce_login()`` メソッドが追加されました。"

msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>`, "
"the ``logout()`` method can be used to simulate the effect of a user logging "
"out of your site."
msgstr ""
"あなたのサイトが Django の :doc:`認証システム</topics/auth/index>` を使ってい"
"る場合、 ``logout()`` メソッドを使うと、ユーザがサイトからログアウトしたとき"
"の効果をシミュレートできます。"

msgid ""
"After you call this method, the test client will have all the cookies and "
"session data cleared to defaults. Subsequent requests will appear to come "
"from an :class:`~django.contrib.auth.models.AnonymousUser`."
msgstr ""
"このメソッドを呼び出した後、テストクライアントはすべてのクッキーとセッション"
"データをデフォルトにクリアします。それ以降のリクエストは :class:`~django."
"contrib.auth.models.AnonymousUser` から来たように見えるでしょう。"

msgid "``alogout()`` method was added."
msgstr "``alogout()`` メソッドが追加されました。"

msgid "Testing responses"
msgstr "レスポンスのテスト"

msgid ""
"The ``get()`` and ``post()`` methods both return a ``Response`` object. This "
"``Response`` object is *not* the same as the ``HttpResponse`` object "
"returned by Django views; the test response object has some additional data "
"useful for test code to verify."
msgstr ""
"``get()`` および ``post()`` メソッドは、両方とも ``Response`` オブジェクトを"
"返します。この ``Response`` オブジェクトは、Django のビューによって返される "
"``HttpResponse`` オブジェクトとは *異なるもの* であり、テストのレスポンスに"
"は、テストコードの検証に便利な追加データがいくつかあります。"

msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr "特に、``Response`` オブジェクトは以下の属性を持ちます:"

msgid ""
"The test client that was used to make the request that resulted in the "
"response."
msgstr ""
"レスポンスの結果の元となるリクエストを作るために使われた、テストクライアント"
"です。"

msgid ""
"The body of the response, as a bytestring. This is the final page content as "
"rendered by the view, or any error message."
msgstr ""
"Bytestring としてのレスポンスの本文です。ビューないしエラーメッセージによって"
"レンダリングされる際の最終的なページコンテンツです。"

msgid ""
"The template ``Context`` instance that was used to render the template that "
"produced the response content."
msgstr ""
"テンプレートの ``Context`` インスタンスです。レスポンスの content を生成する"
"テンプレートをレンダリングする際に使われます。"

msgid ""
"If the rendered page used multiple templates, then ``context`` will be a "
"list of ``Context`` objects, in the order in which they were rendered."
msgstr ""
"描画されたページが複数のテンプレートを使っていた場合、``context`` は "
"``Context`` オブジェクトのリストとなり、その順序はレンダリングされた順となり"
"ます。"

msgid ""
"Regardless of the number of templates used during rendering, you can "
"retrieve context values using the ``[]`` operator. For example, the context "
"variable ``name`` could be retrieved using:"
msgstr ""
"レンダリングに使われるテンプレートの数にかかわらず、``[]`` オペレータを使って"
"コンテキストの値を取り出すことができます。たとえば、コンテキストの変数 "
"``name`` は以下のように取り出せます。"

msgid "Not using Django templates?"
msgstr "Django のテンプレートを使っていない？"

msgid ""
"This attribute is only populated when using the :class:`~django.template."
"backends.django.DjangoTemplates` backend. If you're using another template "
"engine, :attr:`~django.template.response.SimpleTemplateResponse."
"context_data` may be a suitable alternative on responses with that attribute."
msgstr ""
"この属性は、:class:`~django.template.backends.django.DjangoTemplates` バック"
"エンドを使用しているときのみ格納されます。他のテンプレートエンジンを使ってい"
"る場合、:attr:`~django.template.response.SimpleTemplateResponse."
"context_data` がこの属性を扱うレスポンスの適切な選択肢となるでしょう。"

msgid ""
"A tuple of three values that provides information about the unhandled "
"exception, if any, that occurred during the view."
msgstr ""
"ビュー中で発生した未処理の例外 (もし存在すれば) に関する情報を提供する3つの値"
"のタプル。"

msgid ""
"The values are (type, value, traceback), the same as returned by Python's :"
"func:`sys.exc_info`. Their meanings are:"
msgstr ""
"値は (type, value, traceback) であり、Python の :func:`sys.exc_info` が返すの"
"と同じものです。それぞれの値の意味は以下のとおりです。"

msgid "*type*: The type of the exception."
msgstr "*type*: 例外の型。"

msgid "*value*: The exception instance."
msgstr "*value*: 例外インスタンス。"

msgid ""
"*traceback*: A traceback object which encapsulates the call stack at the "
"point where the exception originally occurred."
msgstr ""
"*traceback*: 例外がもともと発生した場所におけるロールスタックをカプセル化し"
"た、トレースバックオブジェクト。"

msgid "If no exception occurred, then ``exc_info`` will be ``None``."
msgstr "例外が発生しなかった場合、``exc_info`` は ``None`` になります。"

msgid ""
"The body of the response, parsed as JSON. Extra keyword arguments are passed "
"to :func:`json.loads`. For example:"
msgstr ""
"JSON としてパースされた、レスポンスの本文です。追加のキーワード引数が :func:"
"`json.loads` に渡されます。たとえば、次のようになります。"

msgid ""
"If the ``Content-Type`` header is not ``\"application/json\"``, then a :exc:"
"`ValueError` will be raised when trying to parse the response."
msgstr ""
"``Content-Type`` ヘッダが ``\"application/json\"`` ではない場合、レスポンスを"
"パースする際に :exc:`ValueError` が投げられます。"

msgid "The request data that stimulated the response."
msgstr "レスポンスを機能させるリクエストデータです。"

msgid ""
"The ``WSGIRequest`` instance generated by the test handler that generated "
"the response."
msgstr ""
"レスポンスを生成したテストハンドラーによって生成された ``WSGIRequest`` インス"
"タンス。"

msgid ""
"The HTTP status of the response, as an integer. For a full list of defined "
"codes, see the `IANA status code registry`_."
msgstr ""
"レスポンスの HTTP ステータスで、数値です。 定義済みのコードの全リストは、"
"`IANA status code registry`_ を参照してください。"

msgid ""
"A list of ``Template`` instances used to render the final content, in the "
"order they were rendered. For each template in the list, use ``template."
"name`` to get the template's file name, if the template was loaded from a "
"file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""
"最終コンテンツをレンダリングするときに使われる ``Template`` インスタンスのリ"
"ストで、 レンダリングされる順となります。テンプレートがファイルから読み込まれ"
"る場合、テンプレートのファイル名を取得するためには、リスト内の各テンプレート"
"に対して ``template.name`` を使ってください (名前は ``'admin/index.html'`` の"
"ような文字列となります)。"

msgid ""
"This attribute is only populated when using the :class:`~django.template."
"backends.django.DjangoTemplates` backend. If you're using another template "
"engine, :attr:`~django.template.response.SimpleTemplateResponse."
"template_name` may be a suitable alternative if you only need the name of "
"the template used for rendering."
msgstr ""
"この属性は、:class:`~django.template.backends.django.DjangoTemplates` バック"
"エンドを使用しているときのみ格納されます。他のテンプレートを知使っている場"
"合、:attr:`~django.template.response.SimpleTemplateResponse.template_name` "
"が、レンダリングに使われるテンプレートの名前のみが必要な場合の適切な代替策と"
"なるでしょう。"

msgid ""
"An instance of :class:`~django.urls.ResolverMatch` for the response. You can "
"use the :attr:`~django.urls.ResolverMatch.func` attribute, for example, to "
"verify the view that served the response::"
msgstr ""
"レスポンスに対する :class:`~django.urls.ResolverMatch` のインスタンスです。た"
"とえば、次のようにレスポンスを提供するビューを検証するために :attr:`~django."
"urls.ResolverMatch.func` 属性を使えます。"

msgid ""
"If the given URL is not found, accessing this attribute will raise a :exc:"
"`~django.urls.Resolver404` exception."
msgstr ""
"指定された URL が見つからない場合、この属性にアクセスすると :exc:`~django."
"urls.Resolver404` 例外が投げられます。"

msgid ""
"As with a normal response, you can also access the headers through :attr:`."
"HttpResponse.headers`. For example, you could determine the content type of "
"a response using ``response.headers['Content-Type']``."
msgstr ""
"通常のレスポンスと同様に、:attr:`.HttpResponse.headers` 経由でヘッダにアクセ"
"スできます。たとえば、レスポンスの content type は、``response."
"headers['Content-Type']`` を使って決定できます。"

msgid "Exceptions"
msgstr "例外"

msgid ""
"If you point the test client at a view that raises an exception and ``Client."
"raise_request_exception`` is ``True``, that exception will be visible in the "
"test case. You can then use a standard ``try ... except`` block or :meth:"
"`~unittest.TestCase.assertRaises` to test for exceptions."
msgstr ""
"例外を発生させるビューをテストクライアントで指定し、``Client."
"raise_request_exception`` が ``True`` である場合、例外はテストケース内で可視"
"化されます。その後、標準の ``try ... except`` ブロックを使うか、:meth:"
"`~unittest.TestCase.assertRaises` で例外をテストできます。"

msgid ""
"The only exceptions that are not visible to the test client are :class:"
"`~django.http.Http404`, :class:`~django.core.exceptions.PermissionDenied`, :"
"exc:`SystemExit`, and :class:`~django.core.exceptions.SuspiciousOperation`. "
"Django catches these exceptions internally and converts them into the "
"appropriate HTTP response codes. In these cases, you can check ``response."
"status_code`` in your test."
msgstr ""
"テストクライアントに可視化されない唯一の例外は、:class:`~django.http."
"Http404`、:class:`~django.core.exceptions.PermissionDenied`、:exc:"
"`SystemExit`、:class:`~django.core.exceptions.SuspiciousOperation` です。"
"Django はこれらの例外を内部でキャッチし、適切な HTTP レスポンスコードに変換し"
"ます。これらの場合、テストでは ``response.status_code`` をチェックできます。"

msgid ""
"If ``Client.raise_request_exception`` is ``False``, the test client will "
"return a 500 response as would be returned to a browser. The response has "
"the attribute :attr:`~Response.exc_info` to provide information about the "
"unhandled exception."
msgstr ""
"``Client.raise_request_exception`` が ``False`` の場合、テストクライアントは"
"ブラウザに返されることになる 500 レスポンスを返します。レスポンスには :attr:"
"`~Response.exc_info` 属性があり、未処理の例外に関する情報が提供されます。"

msgid "Persistent state"
msgstr "永続的なステート"

msgid ""
"The test client is stateful. If a response returns a cookie, then that "
"cookie will be stored in the test client and sent with all subsequent "
"``get()`` and ``post()`` requests."
msgstr ""
"テストクライアントはステートフルです。レスポンスがクッキーを返す場合、その"
"クッキーはテストクライアント内に保持され、以降すべての ``get()`` および "
"``post()`` リクエストともに送信されます。"

msgid ""
"Expiration policies for these cookies are not followed. If you want a cookie "
"to expire, either delete it manually or create a new ``Client`` instance "
"(which will effectively delete all cookies)."
msgstr ""
"クッキーに対する有効期限ポリシーは使えません。クッキーを期限切れにしたい場"
"合、手動で削除するか、新たに (すべてのクッキーを削除するために) ``Client`` を"
"作成してください。"

msgid ""
"A test client has attributes that store persistent state information. You "
"can access these properties as part of a test condition."
msgstr ""
"テストクライアントは、永続的なステート情報を保持する属性を持ちます。テスト条"
"件の一環として、これらのプロパティにアクセスできます。"

msgid ""
"A Python :class:`~http.cookies.SimpleCookie` object, containing the current "
"values of all the client cookies. See the documentation of the :mod:`http."
"cookies` module for more."
msgstr ""
"Python の :class:`~http.cookies.SimpleCookie` オブジェクトで、すべてのクライ"
"アントのクッキーの現在の値を含みます。より詳しくは、:mod:`http.cookies` のド"
"キュメントを参照してください。"

msgid ""
"A dictionary-like object containing session information. See the :doc:"
"`session documentation</topics/http/sessions>` for full details."
msgstr ""
"辞書形式のようなオブジェクトで、セッション情報を含みます。:doc:`セッションの"
"ドキュメント</topics/http/sessions>` に網羅的情報があります。"

msgid ""
"To modify the session and then save it, it must be stored in a variable "
"first (because a new ``SessionStore`` is created every time this property is "
"accessed)::"
msgstr ""
"セッションを修正し保存するためには、まず変数に格納される必要があります (新し"
"い ``SessionStore`` は、この属性がアクセスされるたびに作られるためです)::"

msgid ""
"This is similar to the :attr:`session` attribute but it works in async "
"contexts."
msgstr ":attr:`session` 属性と同様ですが、非同期コンテキストで動作します。"

msgid "Setting the language"
msgstr "言語の設定"

msgid ""
"When testing applications that support internationalization and "
"localization, you might want to set the language for a test client request. "
"The method for doing so depends on whether or not the :class:`~django."
"middleware.locale.LocaleMiddleware` is enabled."
msgstr ""
"国際化とローカライズをサポートしているアプリケーションをテストする際、テスト"
"クライアントのリクエストに対して言語を設定するのがよいでしょう。その方法は、:"
"class:`~django.middleware.locale.LocaleMiddleware` が有効化されているか否かに"
"よって異なります。"

msgid ""
"If the middleware is enabled, the language can be set by creating a cookie "
"with a name of :setting:`LANGUAGE_COOKIE_NAME` and a value of the language "
"code::"
msgstr ""
"ミドルウェアが有効化されている場合、:setting:`LANGUAGE_COOKIE_NAME` の名前で"
"クッキーを作成することでセットすることができ、言語コードの値は次のようになり"
"ます。"

msgid "or by including the ``Accept-Language`` HTTP header in the request::"
msgstr "もしくは、``Accept-Language`` HTTP ヘッダをリクエスト内に含めます。"

msgid ""
"When using these methods, ensure to reset the active language at the end of "
"each test::"
msgstr ""
"これらのメソッドを使用するときは、必ず各テストの最後にアクティブな言語をリ"
"セットしてください。"

msgid "More details are in :ref:`how-django-discovers-language-preference`."
msgstr ""
"さらなる詳細は :ref:`how-django-discovers-language-preference` にあります。"

msgid ""
"If the middleware isn't enabled, the active language may be set using :func:"
"`.translation.override`::"
msgstr ""
"ミドルウェアが有効化されていない場合、アクティブな言語は :func:`.translation."
"override` を使って設定できます。"

msgid "More details are in :ref:`explicitly-setting-the-active-language`."
msgstr ""
"さらなる詳細は :ref:`explicitly-setting-the-active-language` にあります。"

msgid "The following is a unit test using the test client::"
msgstr "以下は、テストクライアントを使ったユニットテストです。"

msgid ":class:`django.test.RequestFactory`"
msgstr ":class:`django.test.RequestFactory`"

msgid "Provided test case classes"
msgstr "提供されるテストケースのクラス"

msgid ""
"Normal Python unit test classes extend a base class of :class:`unittest."
"TestCase`. Django provides a few extensions of this base class:"
msgstr ""
"標準の Python ユニットテストのクラスは、:class:`unittest.TestCase` のベースク"
"ラスを拡張しています。Django は、このベースクラスのいくつかの拡張を提供しま"
"す。"

msgid "Hierarchy of Django unit testing classes (TestCase subclasses)"
msgstr "Django ユニットテストクラスの階層 (TestCase サブクラス)"

msgid "Hierarchy of Django unit testing classes"
msgstr "Django ユニットテストクラスの階層"

msgid ""
"You can convert a normal :class:`unittest.TestCase` to any of the "
"subclasses: change the base class of your test from ``unittest.TestCase`` to "
"the subclass. All of the standard Python unit test functionality will be "
"available, and it will be augmented with some useful additions as described "
"in each section below."
msgstr ""
"通常の :class:`unittest.TestCase` は、任意のサブクラスに変換できます。つま"
"り、テストのベースクラスを ``unittest.TestCase`` からサブクラスに変更します。"
"すべての標準の Python のユニットテスト機能が利用可能なまま、以下の各セクショ"
"ンで説明するような便利な追加機能を追加できます。"

msgid "``SimpleTestCase``"
msgstr "``SimpleTestCase``"

msgid "A subclass of :class:`unittest.TestCase` that adds this functionality:"
msgstr "以下の機能を追加する、:class:`unittest.TestCase` のサブクラスです。"

msgid "Some useful assertions like:"
msgstr "便利なアサーションには以下のようなものがあります。"

msgid ""
"Checking that a callable :meth:`raises a certain exception <SimpleTestCase."
"assertRaisesMessage>`."
msgstr ""
"実行可能な関数が :meth:`特定の例外を送出する <SimpleTestCase."
"assertRaisesMessage>` ことをチェックする。"

msgid ""
"Checking that a callable :meth:`triggers a certain warning <SimpleTestCase."
"assertWarnsMessage>`."
msgstr ""
"実行可能な関数が :meth:`特定の warning をトリガーする <SimpleTestCase."
"assertWarnsMessage>` ことをチェックする。"

msgid ""
"Testing form field :meth:`rendering and error treatment <SimpleTestCase."
"assertFieldOutput>`."
msgstr ""
"フォームのフィールドの :meth:`レンダリングとエラー処理 <SimpleTestCase."
"assertFieldOutput>` をテストする。"

msgid ""
"Testing :meth:`HTML responses for the presence/lack of a given fragment "
"<SimpleTestCase.assertContains>`."
msgstr ""
":meth:`HTML レスポンスに指定されたフラグメントが表示/非表示される "
"<SimpleTestCase.assertContains>` ことをテストする。"

msgid ""
"Verifying that a template :meth:`has/hasn't been used to generate a given "
"response content <SimpleTestCase.assertTemplateUsed>`."
msgstr ""
"テンプレートが :meth:`指定されたレスポンスのコンテンツを生成するために使われ"
"た/使われなかった <SimpleTestCase.assertTemplateUsed>` ことを検証する。"

msgid ""
"Verifying that two :meth:`URLs <SimpleTestCase.assertURLEqual>` are equal."
msgstr ""
"2つの :meth:`URL <SimpleTestCase.assertURLEqual>` が等しいかどうかを検証す"
"る。"

msgid ""
"Verifying an HTTP :meth:`redirect <SimpleTestCase.assertRedirects>` is "
"performed by the app."
msgstr ""
"HTTP :meth:`リダイレクト <SimpleTestCase.assertRedirects>` がアプリによって実"
"行されたことを検証する。"

msgid ""
"Robustly testing two :meth:`HTML fragments <SimpleTestCase.assertHTMLEqual>` "
"for equality/inequality or :meth:`containment <SimpleTestCase.assertInHTML>`."
msgstr ""
"2つの :meth:`HTML フラグメント <SimpleTestCase.assertHTMLEqual>` の等価性/非"
"等価性、または :meth:`包含関係 (containment) <SimpleTestCase.assertInHTML>` "
"をロバストにテストする。"

msgid ""
"Robustly testing two :meth:`XML fragments <SimpleTestCase.assertXMLEqual>` "
"for equality/inequality."
msgstr ""
"2つの :meth:`XML フラグメント <SimpleTestCase.assertXMLEqual>` の等価性/非等"
"価性をロバストにテストする。"

msgid ""
"Robustly testing two :meth:`JSON fragments <SimpleTestCase.assertJSONEqual>` "
"for equality."
msgstr ""
"2つの :meth:`JSON フラグメント <SimpleTestCase.assertJSONEqual>` の等価性をロ"
"バストにテストする。"

msgid ""
"The ability to run tests with :ref:`modified settings <overriding-settings>`."
msgstr ":ref:`編集した設定 <overriding-settings>` でテストを実行する機能。"

msgid "Using the :attr:`~SimpleTestCase.client` :class:`~django.test.Client`."
msgstr ":attr:`~SimpleTestCase.client` :class:`~django.test.Client` を使う。"

msgid ""
"If your tests make any database queries, use subclasses :class:`~django.test."
"TransactionTestCase` or :class:`~django.test.TestCase`."
msgstr ""
"データベースクエリを作る手薄との場合、サブクラス :class:`~django.test."
"TransactionTestCase` や :class:`~django.test.TestCase` を使用してください。"

msgid ""
":class:`~SimpleTestCase` disallows database queries by default. This helps "
"to avoid executing write queries which will affect other tests since each "
"``SimpleTestCase`` test isn't run in a transaction. If you aren't concerned "
"about this problem, you can disable this behavior by setting the "
"``databases`` class attribute to ``'__all__'`` on your test class."
msgstr ""
":class:`~SimpleTestCase` はデフォルトでデータベースクエリを許可しません。各 "
"``SimpleTestCase`` テストはトランザクション内で実行されないため、これにより、"
"他のテストに影響する書き込みクエリの実行を避けられます。この問題が心配でない"
"場合は、テストクラスの ``databases`` クラス属性を ``'__all__'`` に設定するこ"
"とで、この振る舞いを無効化できます。"

msgid ""
"``SimpleTestCase`` and its subclasses (e.g. ``TestCase``, ...) rely on "
"``setUpClass()`` and ``tearDownClass()`` to perform some class-wide "
"initialization (e.g. overriding settings). If you need to override those "
"methods, don't forget to call the ``super`` implementation::"
msgstr ""
"``SimpleTestCase`` とそのサブクラス (例: ``TestCase`` など) は、クラス横断的"
"な初期化を実現するために ``setUpClass()`` と ``tearDownClass()`` に依存してい"
"ます (例: 設定のオーバーライド)。これらをオーバーライドする必要があるときは、"
"次のように ``super`` 実装を呼び出すのを忘れないでください。"

msgid ""
"Be sure to account for Python's behavior if an exception is raised during "
"``setUpClass()``. If that happens, neither the tests in the class nor "
"``tearDownClass()`` are run. In the case of :class:`django.test.TestCase`, "
"this will leak the transaction created in ``super()``  which results in "
"various symptoms including a segmentation fault on some platforms (reported "
"on macOS). If you want to intentionally raise an exception such as :exc:"
"`unittest.SkipTest` in ``setUpClass()``, be sure to do it before calling "
"``super()`` to avoid this."
msgstr ""
"``setUpClass()`` で例外が発生した場合の Python の動作を必ず考慮してください。"
"もし例外が起きた場合は、クラス内のテストも ``tearDownClass()`` も実行されませ"
"ん。:class:`django.test.TestCase` の場合、``super()``  内で作成されたトランザ"
"クションがリークし、一部のプラットフォーム (macOS で報告されています) での "
"segmentation fault を含む、さまざまな症状が起きる結果となります。"
"``setUpClass()`` 内での :exc:`unittest.SkipTest` などの例外を意図的に発生させ"
"たい場合は、この問題を避けるために、必ず ``super()`` を呼び出す前に実行するよ"
"うにしてください。"

msgid "``TransactionTestCase``"
msgstr "``TransactionTestCase``"

msgid ""
"``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase` "
"to add some database-specific features:"
msgstr ""
"``TransactionTestCase`` は :class:`~django.test.SimpleTestCase` を継承し、以"
"下のようなデータベースに特有の機能を追加しています。"

msgid ""
"Resetting the database to a known state at the beginning of each test to "
"ease testing and using the ORM."
msgstr ""
"テストと ORM の使用を用意にするために、各テストの開始時に既知の状態へデータ"
"ベースをリセットする。"

msgid "Database :attr:`~TransactionTestCase.fixtures`."
msgstr "データベースの :attr:`~TransactionTestCase.fixtures`。"

msgid ""
"Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr ""
"テストの :ref:`データベースバックエンドの機能をもとにしたスキップ <skipping-"
"tests>`。"

msgid ""
"The remaining specialized :meth:`assert* <TransactionTestCase."
"assertQuerySetEqual>` methods."
msgstr ""
"それ以外の特別な :meth:`assert* <TransactionTestCase.assertQuerySetEqual>` メ"
"ソッド。"

msgid ""
"Django's :class:`TestCase` class is a more commonly used subclass of "
"``TransactionTestCase`` that makes use of database transaction facilities to "
"speed up the process of resetting the database to a known state at the "
"beginning of each test. A consequence of this, however, is that some "
"database behaviors cannot be tested within a Django ``TestCase`` class. For "
"instance, you cannot test that a block of code is executing within a "
"transaction, as is required when using :meth:`~django.db.models.query."
"QuerySet.select_for_update()`. In those cases, you should use "
"``TransactionTestCase``."
msgstr ""
"Django の :class:`TestCase` クラスは、より一般的に使用される "
"``TransactionTestCase`` のサブクラスで、データベース トランザクション機能を活"
"用して、各テストの開始時にデータベースを既知の状態にリセットする処理を高速化"
"します。しかし、この結果として、一部のデータベースの振る舞いを Django の "
"``TestCase`` クラスでテストできなくなります。たとえば、:meth:`~django.db."
"models.query.QuerySet.select_for_update()` の使用が必要なため、コードブロック"
"をトランザクション内で実行するテストが行えません。そのような場合には、"
"``TransactionTestCase`` を使う必要があります。"

msgid ""
"``TransactionTestCase`` and ``TestCase`` are identical except for the manner "
"in which the database is reset to a known state and the ability for test "
"code to test the effects of commit and rollback:"
msgstr ""
"``TransactionTestCase`` と ``TestCase`` は、以下のように、データベースを既知"
"の状態にリセットする方法と、コミットとロールバックの効果をテストするコードの"
"機能を除いて同一です。"

msgid ""
"A ``TransactionTestCase`` resets the database after the test runs by "
"truncating all tables. A ``TransactionTestCase`` may call commit and "
"rollback and observe the effects of these calls on the database."
msgstr ""
"``TransactionTestCase`` は、テスト実行後にすべてのテーブルを truncate するこ"
"とでデータベースをリセットします。``TransactionTestCase`` はコミットとロール"
"バックを呼び出して、これらの呼び出しのデータベースへの効果を観察できます。"

msgid ""
"A ``TestCase``, on the other hand, does not truncate tables after a test. "
"Instead, it encloses the test code in a database transaction that is rolled "
"back at the end of the test. This guarantees that the rollback at the end of "
"the test restores the database to its initial state."
msgstr ""
"一方、``TestCase`` は、テスト後にテーブルを truncate しません。代わりに、テス"
"ト終了時にロールバックされるデータベーストランザクション内にテストコードを含"
"めます。これにより、テスト終了時のロールバックによりデータベースが初期状態に"
"復元されることを保証します。"

msgid ""
"``TestCase`` running on a database that does not support rollback (e.g. "
"MySQL with the MyISAM storage engine), and all instances of "
"``TransactionTestCase``, will roll back at the end of the test by deleting "
"all data from the test database."
msgstr ""
"ロールバックをサポートしないデータベース (例: MyISAM ストレージエンジンを使用"
"した MySQL) 上で実行される ``TestCase`` と、``TransactionTestCase`` のすべて"
"のインスタンスは、テスト終了時にテストデータベースからすべてのデータを削除す"
"ることによってロールバックされます。"

msgid ""
"Apps :ref:`will not see their data reloaded <test-case-serialized-"
"rollback>`; if you need this functionality (for example, third-party apps "
"should enable this) you can set ``serialized_rollback = True`` inside the "
"``TestCase`` body."
msgstr ""
"アプリは :ref:`データの再読み込みを確認しません <test-case-serialized-"
"rollback>`。そのため、この機能が必要な場合には (たとえば、サードパーティのア"
"プリはこれを有効化する必要があります)、``TestCase`` 本体内で "
"``serialized_rollback = True`` を設定できます。"

msgid "``TestCase``"
msgstr "``TestCase``"

msgid ""
"This is the most common class to use for writing tests in Django. It "
"inherits from :class:`TransactionTestCase` (and by extension :class:"
"`SimpleTestCase`). If your Django application doesn't use a database, use :"
"class:`SimpleTestCase`."
msgstr ""
"これは、Django でテストを書く際に使われる、最も一般的なクラスです。:class:"
"`TransactionTestCase` (および、拡張による :class:`SimpleTestCase`) を継承しま"
"す。あなたの Django アプリケーションがデータベースを使用しない場合は、:class:"
"`SimpleTestCase` を使ってください。"

msgid "The class:"
msgstr "クラス:"

msgid ""
"Wraps the tests within two nested :func:`~django.db.transaction.atomic` "
"blocks: one for the whole class and one for each test. Therefore, if you "
"want to test some specific database transaction behavior, use :class:"
"`TransactionTestCase`."
msgstr ""
"2 つのネストされた :func:`~django.db.transaction.atomic` ブロックでテストを"
"ラップします。1 つはテスト全体、もう 1 つは各テストのためです。したがって、特"
"定のデータベーストランザクションの振る舞いをテストしたい場合は、:class:"
"`TransactionTestCase` を使ってください。"

msgid "Checks deferrable database constraints at the end of each test."
msgstr "各テストの最後に、deferrable なデータベース制約をチェックします。"

msgid "It also provides an additional method:"
msgstr "さらに、以下のような追加メソッドを提供します。"

msgid ""
"The class-level ``atomic`` block described above allows the creation of "
"initial data at the class level, once for the whole ``TestCase``. This "
"technique allows for faster tests as compared to using ``setUp()``."
msgstr ""
"上述のクラスレベルの ``atomic`` ブロックは、全体の ``TestCase`` に対して一"
"度、クラスレベルでの初期データの作成を可能にします。 この技法により、"
"``setUp()`` を使うのに比べて高速なテストとなります。"

msgid ""
"Note that if the tests are run on a database with no transaction support "
"(for instance, MySQL with the MyISAM engine), ``setUpTestData()`` will be "
"called before each test, negating the speed benefits."
msgstr ""
"テストがトランザクションサポートのないデータベース (たとえば MyISAM エンジン"
"の MySQL) で実行される場合、各テストの前に ``setUpTestData()`` が呼ばれ、高速"
"化のメリットはなくなります。"

msgid ""
"Objects assigned to class attributes in ``setUpTestData()`` must support "
"creating deep copies with :py:func:`copy.deepcopy` in order to isolate them "
"from alterations performed by each test methods."
msgstr ""
"Objects assigned to class attributes in ``setUpTestData()`` 内でクラス属性に"
"代入されたオブジェクトは、各テストメソッドで実行される変更から隔離するため"
"に、:py:func:`copy.deepcopy` を使用したディープコピーの作成をサポートしなけれ"
"ばなりません。"

msgid ""
"Returns a context manager that captures :func:`transaction.on_commit() "
"<django.db.transaction.on_commit>` callbacks for the given database "
"connection. It returns a list that contains, on exit of the context, the "
"captured callback functions. From this list you can make assertions on the "
"callbacks or call them to invoke their side effects, emulating a commit."
msgstr ""
"指定されたデータベースコネクションに対する :func:`transaction.on_commit() "
"<django.db.transaction.on_commit>` コールバックをキャプチャしたコンテキストマ"
"ネージャを返します。コンテキストの終了時に、キャプチャされたコールバック関数"
"を含むリストを返します。このリストから、コールバック上のアサーションを作成し"
"たり、その副作用を起こすために呼び出したり、コミットをエミュレートしたりでき"
"ます。"

msgid ""
"``using`` is the alias of the database connection to capture callbacks for."
msgstr ""
"``using`` は、コールバックをキャプチャするためのデータベースコネクションのエ"
"イリアスです。"

msgid ""
"If ``execute`` is ``True``, all the callbacks will be called as the context "
"manager exits, if no exception occurred. This emulates a commit after the "
"wrapped block of code."
msgstr ""
"``execute`` が ``True`` の場合、コンテキストマネージャの終了時に、すべての"
"コールバックが呼ばれます。これは、ラップされたコードブロック後のコミットをエ"
"ミュレートします。"

msgid "``LiveServerTestCase``"
msgstr "``LiveServerTestCase``"

msgid ""
"``LiveServerTestCase`` does basically the same as :class:`~django.test."
"TransactionTestCase` with one extra feature: it launches a live Django "
"server in the background on setup, and shuts it down on teardown. This "
"allows the use of automated test clients other than the :ref:`Django dummy "
"client <test-client>` such as, for example, the Selenium_ client, to execute "
"a series of functional tests inside a browser and simulate a real user's "
"actions."
msgstr ""
"``LiveServerTestCase`` は :class:`~django.test.TransactionTestCase` とほぼ同"
"じですが、セットアップ時に実際の Django サーバーをバックグラウンドで起動し、"
"終了時に破棄するという追加機能が1つあります。これにより、たとえば Selenium_ "
"クライアントのような :ref:`Django ダミークライアント <test-client>` 以外の自"
"動化されたテストクライアントを使えるようになり、ブラウザ内での一連の機能テス"
"トを実施して、実際のユーザーの行動をシミュレートできます。"

msgid ""
"The live server listens on ``localhost`` and binds to port 0 which uses a "
"free port assigned by the operating system. The server's URL can be accessed "
"with ``self.live_server_url`` during the tests."
msgstr ""
"ライブサーバーは ``localhost`` をリッスンして、オペレーティングシステムが空き"
"ポートに割り当てるために使われるポート 0 にバインドします。サーバーの URL は"
"テスト中は ``self.live_server_url`` でアクセスできます。"

msgid ""
"To demonstrate how to use ``LiveServerTestCase``, let's write a Selenium "
"test. First of all, you need to install the :pypi:`selenium` package:"
msgstr ""
"``LiveServerTestCase`` の使用方法を紹介するために、Selenium テストを書いてみ"
"ましょう。最初に、 :pypi:`selenium` パッケージをインストールする必要がありま"
"す。"

msgid ""
"Then, add a ``LiveServerTestCase``-based test to your app's tests module "
"(for example: ``myapp/tests.py``). For this example, we'll assume you're "
"using the :mod:`~django.contrib.staticfiles` app and want to have static "
"files served during the execution of your tests similar to what we get at "
"development time with ``DEBUG=True``, i.e. without having to collect them "
"using :djadmin:`collectstatic`. We'll use the  :class:`~django.contrib."
"staticfiles.testing.StaticLiveServerTestCase` subclass which provides that "
"functionality. Replace it with ``django.test.LiveServerTestCase`` if you "
"don't need that."
msgstr ""
"その後、``LiveServerTestCase`` ベースのテストをアプリのテストモジュール (例: "
"``myapp/tests.py``) に追加します。たとえば、:mod:`~django.contrib."
"staticfiles` アプリを使っていて、開発時に ``DEBUG=True`` を使用したときと同じ"
"ように、つまり、:djadmin:`collectstatic` を使って静的ファイルを集める必要な"
"く、静的ファイルがテストの実行中に配信されてほしいとします。その機能を提供す"
"る :class:`~django.contrib.staticfiles.testing.StaticLiveServerTestCase` サブ"
"クラスを使うことになります。それが必要ない場合は、``django.test."
"LiveServerTestCase`` で置き換えてください。"

msgid "The code for this test may look as follows::"
msgstr "このテストに対するコードは、以下のようになるでしょう。"

msgid "Finally, you may run the test as follows:"
msgstr "最後に、次のようにテストを実行できます。"

msgid ""
"This example will automatically open Firefox then go to the login page, "
"enter the credentials and press the \"Log in\" button. Selenium offers other "
"drivers in case you do not have Firefox installed or wish to use another "
"browser. The example above is just a tiny fraction of what the Selenium "
"client can do; check out the `full reference`_ for more details."
msgstr ""
"この例では、Firefox が自動的に開き、ログインページに行き、クレデンシャルを入"
"力して、「Log in」ボタンをクリックします。Selenium は、Firefox をインストール"
"済みでないか、他のブラウザを使いたいときのために、他のドライバも提供します。"
"上の例は、Selenium クライアントができることのほんの一部に過ぎません。詳細につ"
"いては、`完全なリファレンス`_ を確認してください。"

msgid ""
"When using an in-memory SQLite database to run the tests, the same database "
"connection will be shared by two threads in parallel: the thread in which "
"the live server is run and the thread in which the test case is run. It's "
"important to prevent simultaneous database queries via this shared "
"connection by the two threads, as that may sometimes randomly cause the "
"tests to fail. So you need to ensure that the two threads don't access the "
"database at the same time. In particular, this means that in some cases (for "
"example, just after clicking a link or submitting a form), you might need to "
"check that a response is received by Selenium and that the next page is "
"loaded before proceeding with further test execution. Do this, for example, "
"by making Selenium wait until the ``<body>`` HTML tag is found in the "
"response (requires Selenium > 2.13)::"
msgstr ""
"インメモリ SQLite データベースを使用してテストを実行する場合、同じデータベー"
"ス接続を 2 つのスレッドで並行して共有します。ライブサーバを実行するスレッドと"
"テストケースを実行するスレッドです。この 2 つのスレッドが共有接続を介して同時"
"にデータベースをクエリしないようにすることが重要です。これは、テストがランダ"
"ムに失敗する可能性があるからです。そのため、2 つのスレッドが同時にデータベー"
"スにアクセスしないようにする必要があります。特に、場合によっては (たとえばリ"
"ンクをクリックしたりフォームを送信したりした直後に) Selenium がレスポンスを受"
"け取り、次のページが読み込まれたことを確認してからテストを実行する必要がある"
"かもしれません。たとえば、レスポンスの中に ``<body>`` という HTML タグが見つ"
"かるまで Selenium を待たせるには、下記のようにします (Selenium > 2.13 が必要"
"です):"

msgid ""
"The tricky thing here is that there's really no such thing as a \"page load,"
"\" especially in modern web apps that generate HTML dynamically after the "
"server generates the initial document. So, checking for the presence of "
"``<body>`` in the response might not necessarily be appropriate for all use "
"cases. Please refer to the `Selenium FAQ`_ and `Selenium documentation`_ for "
"more information."
msgstr ""
"ここで厄介なのは、特にサーバーが最初のドキュメントを生成した後に動的にHTMLを"
"生成する最近のウェブアプリでは、「ページの読み込み」というものが実際には存在"
"しないということです。そのため、レスポンスに ``<body>`` があるかどうかを"
"チェックすることは、必ずしもすべてのユースケースに適しているとは限りません。"
"詳しくは `Selenium FAQ`_ と `Selenium documentation`_ を参照してください。"

msgid "Test cases features"
msgstr "テストケースの機能"

msgid "Default test client"
msgstr "デフォルトのテストクライアント"

msgid ""
"Every test case in a ``django.test.*TestCase`` instance has access to an "
"instance of a Django test client. This client can be accessed as ``self."
"client``. This client is recreated for each test, so you don't have to worry "
"about state (such as cookies) carrying over from one test to another."
msgstr ""
"``django.test.*TestCase`` インスタンス内のすべてのテストケースは、Django のテ"
"ストクライアントにアクセスできます。このクライアントは、``self.client`` とし"
"てアクセスできます。このクライアントはテストごとに再作成されるため、(クッキー"
"のような) ステートがテスト間で持ち越されることを心配する必要はありません。"

msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr ""
"つまり、各テスト内で ``Client`` をインスタンス化する代わりに、次のようにしま"
"す。"

msgid "...you can refer to ``self.client``, like so::"
msgstr "次のように ``self.client`` を参照できます。"

msgid "Customizing the test client"
msgstr "テストクライアントをカスタムする"

msgid ""
"If you want to use a different ``Client`` class (for example, a subclass "
"with customized behavior), use the :attr:`~SimpleTestCase.client_class` "
"class attribute::"
msgstr ""
"異なる ``Client`` クラスを使用したい場合 (たとえば独自の動作を持つサブクラ"
"ス)、次のように :attr:`~SimpleTestCase.client_class` クラス属性を使ってくださ"
"い。"

msgid "Fixture loading"
msgstr "フィクスチャのロード"

msgid ""
"A test case class for a database-backed website isn't much use if there "
"isn't any data in the database. Tests are more readable and it's more "
"maintainable to create objects using the ORM, for example in :meth:`TestCase."
"setUpTestData`, however, you can also use :ref:`fixtures <fixtures-"
"explanation>`."
msgstr ""
"データベースを利用したウェブサイト向けのテストケースクラスは、データベースに"
"データが何もなければあまり役に立ちません。:meth:`TestCase.setUpTestData` など"
"で ORM を使用してオブジェクトを作成すると、テストがよりリーダブルになってメン"
"テナンス性が高まりますが、:ref:`フィクスチャ <fixtures-explanation>` を活用す"
"ることもできます。"

msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. For example, if your site has user accounts, you might set up a "
"fixture of fake user accounts in order to populate your database during "
"tests."
msgstr ""
"フィクスチャは、Django がどうやってデータベースにインポートするか分かっている"
"データのコレクションです。たとえば、サイトがユーザーアカウントを持つ場合、テ"
"スト内でデータベースに格納させるために、フェイクのユーザーアカウントのフィク"
"スチャをセットアップできます。"

msgid ""
"The most straightforward way of creating a fixture is to use the :djadmin:"
"`manage.py dumpdata <dumpdata>` command. This assumes you already have some "
"data in your database. See the :djadmin:`dumpdata documentation<dumpdata>` "
"for more details."
msgstr ""
"フィクスチャを作成するもっとも分かりやすい方法は、:djadmin:`manage.py "
"dumpdata <dumpdata>` コマンドを使うことです。これは、データベース内にすでに何"
"らかのデータがあるという仮定に基づいています。詳細は、:djadmin:`dumpdata のド"
"キュメント<dumpdata>` 参照してください。"

msgid ""
"Once you've created a fixture and placed it in a ``fixtures`` directory in "
"one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by "
"specifying a ``fixtures`` class attribute on your :class:`django.test."
"TestCase` subclass::"
msgstr ""
"いったんフィクスチャを作成して :setting:`INSTALLED_APPS` 内ののどれかで "
"``fixtures`` 辞書に記述したら、:class:`django.test.TestCase` サブクラスで "
"``fixtures`` クラス属性を指定することで、ユニットテスト内でこのフィクスチャを"
"使えます。"

msgid "Here's specifically what will happen:"
msgstr "具体的には、以下のことが起こります。"

msgid ""
"At the start of each test, before ``setUp()`` is run, Django will flush the "
"database, returning the database to the state it was in directly after :"
"djadmin:`migrate` was called."
msgstr ""
"各テストの開始時、``setUp()`` が実行される前に、Django はデータベースを "
"flush し、データベースを :djadmin:`migrate` が呼ばれた直後の状態に戻します。"

msgid ""
"Then, all the named fixtures are installed. In this example, Django will "
"install any JSON fixture named ``mammals``, followed by any fixture named "
"``birds``. See the :ref:`fixtures-explanation` topic for more details on "
"defining and installing fixtures."
msgstr ""
"そして、すべての名前付きフィクスチャがインストールされます。この例では、"
"Django は ``mammals`` と名付けられたすべての JSON、``birds`` と名付けられたす"
"べてのフィクスチャの順にインストールします。フィクスチャの定義とインストール"
"に関するより詳しい情報については、:ref:`fixtures-explanation` トピックを参照"
"してください。"

msgid ""
"For performance reasons, :class:`TestCase` loads fixtures once for the "
"entire test class, before :meth:`~TestCase.setUpTestData`, instead of before "
"each test, and it uses transactions to clean the database before each test. "
"In any case, you can be certain that the outcome of a test will not be "
"affected by another test or by the order of test execution."
msgstr ""
"パフォーマンス上の理由から、:class:`TestCase` がフィクスチャをロードするの"
"は、各テストの前ではなく :meth:`~TestCase.setUpTestData` の前に、テストクラス"
"全体で1回だけです。各テスト前にデータベースをクリーンアップするためにはトラン"
"ザクションを使います。いずれの場合も、テストの結果が、他のテストやテストの実"
"行順序に影響を受けないことは確実です。"

msgid ""
"By default, fixtures are only loaded into the ``default`` database. If you "
"are using multiple databases and set :attr:`TransactionTestCase.databases`, "
"fixtures will be loaded into all specified databases."
msgstr ""
"デフォルトでは、フィクスチャは ``default`` データベースにだけロードされます。"
"複数のデータベースと :attr:`TransactionTestCase.databases` を使用している場合"
"は、フィクスチャは指定されたすべてのデータベースにロードされます。"

msgid "URLconf configuration"
msgstr "URLconf の設定"

msgid ""
"If your application provides views, you may want to include tests that use "
"the test client to exercise those views. However, an end user is free to "
"deploy the views in your application at any URL of their choosing. This "
"means that your tests can't rely upon the fact that your views will be "
"available at a particular URL. Decorate your test class or test method with "
"``@override_settings(ROOT_URLCONF=...)`` for URLconf configuration."
msgstr ""
"アプリケーションがヴューを提供する場合、テストクライアントを使ってビューを実"
"行するテストを含めたくなるかもしれません。しかし、エンドユーザーは、アプリ"
"ケーション内で選択した任意の URL に自由にビューをデプロイできます。これが意味"
"するのは、テストはビューが特定の URL で利用可能であるという事実に頼ることがで"
"きないということです。URLconf の設定のためには、テストクラスまたはメソッドを "
"``@override_settings(ROOT_URLCONF=...)`` を使用してデコレーションしてくださ"
"い。"

msgid "Multi-database support"
msgstr "マルチデータベースのサポート"

msgid ""
"Django sets up a test database corresponding to every database that is "
"defined in the :setting:`DATABASES` definition in your settings and referred "
"to by at least one test through ``databases``."
msgstr ""
"Django は、設定の :setting:`DATABASES` で定義され、``databases`` を介して少な"
"くとも1つのテストで参照されるデータベースそれぞれに対応するテストデータベース"
"をセットアップします。"

msgid ""
"However, a big part of the time taken to run a Django ``TestCase`` is "
"consumed by the call to ``flush`` that ensures that you have a clean "
"database at the start of each test run. If you have multiple databases, "
"multiple flushes are required (one for each database), which can be a time "
"consuming activity -- especially if your tests don't need to test multi-"
"database activity."
msgstr ""
"しかし、 Django の ``TestCase`` の実行にかかる時間の大部分は、各テストの開始"
"時にデータベースがクリーンであることを保証する ``flush`` の呼び出しに消費され"
"ます。複数のデータベースがある場合、複数回のフラッシュが必要であり (各データ"
"ベースに 1 回ずつ)、特に複数データベースの動作をテストする必要がないテストで"
"は、これは時間のかかる作業です。"

msgid ""
"As an optimization, Django only flushes the ``default`` database at the "
"start of each test run. If your setup contains multiple databases, and you "
"have a test that requires every database to be clean, you can use the "
"``databases`` attribute on the test suite to request extra databases to be "
"flushed."
msgstr ""
"最適化として、Django は各テスト実行の開始時に ``default`` データベースだけを"
"フラッシュします。セットアップに複数のデータベースが含まれていて、全てのデー"
"タベースをクリーンにする必要があるテストがある場合、テストスイートで "
"``databases`` 属性を使って、追加のデータベースのフラッシュを要求できます。"

msgid ""
"This test case class will flush the ``default`` and ``other`` test databases "
"before running ``test_index_page_view``. You can also use ``'__all__'`` to "
"specify that all of the test databases must be flushed."
msgstr ""
"このテストケースクラスは ``test_index_page_view`` を実行する前に ``default`` "
"と ``other`` のテストデータベースをフラッシュします。また、``'__all__'`` を使"
"用すると、すべてのテストデータベースをフラッシュするように指定できます。"

msgid ""
"The ``databases`` flag also controls which databases the :attr:"
"`TransactionTestCase.fixtures` are loaded into. By default, fixtures are "
"only loaded into the ``default`` database."
msgstr ""
"``databases`` フラグは :attr:`TransactionTestCase.fixtures` がどのデータベー"
"スに読み込まれるかを制御します。デフォルトでは、フィクスチャは ``default`` "
"データベースにのみ読み込まれます。"

msgid ""
"Queries against databases not in ``databases`` will give assertion errors to "
"prevent state leaking between tests."
msgstr ""
"``databases`` にないデータベースに対するクエリは、テスト間で状態が漏れるのを"
"防ぐためにアサーションエラーを出します。"

msgid ""
"By default, only the ``default`` database will be wrapped in a transaction "
"during a ``TestCase``'s execution and attempts to query other databases will "
"result in assertion errors to prevent state leaking between tests."
msgstr ""
"デフォルトでは、``TestCase`` の実行中にトランザクションにラップされるのは "
"``default`` データベースだけで、他のデータベースにクエリを実行しようとする"
"と、テスト間の状態リークを防ぐためにアサーションエラーが発生します。"

msgid ""
"Use the ``databases`` class attribute on the test class to request "
"transaction wrapping against non-``default`` databases."
msgstr ""
"デフォルト以外のデータベースに対してトランザクションラッピングを要求するに"
"は、テストクラスの ``databases`` クラス属性を使用します。"

msgid ""
"This test will only allow queries against the ``other`` database. Just like "
"for :attr:`SimpleTestCase.databases` and :attr:`TransactionTestCase."
"databases`, the ``'__all__'`` constant can be used to specify that the test "
"should allow queries to all databases."
msgstr ""
"このテストは ``other`` データベースに対するクエリのみを許可します。 :attr:"
"`SimpleTestCase.databases` や :attr:`TransactionTestCase.databases` と同様"
"に、定数 ``'__all__'`` を使用して、すべてのデータベースに対するクエリを許可す"
"るように指定できます。"

msgid "Overriding settings"
msgstr "設定のオーバーライド"

msgid ""
"Use the functions below to temporarily alter the value of settings in tests. "
"Don't manipulate ``django.conf.settings`` directly as Django won't restore "
"the original values after such manipulations."
msgstr ""
"テストの設定値を一時的に変更するには、以下の関数を使います。 ``django.conf."
"settings`` を直接操作しないでください。Django はそのような操作の後、元の値を"
"復元しません。"

msgid ""
"For testing purposes it's often useful to change a setting temporarily and "
"revert to the original value after running the testing code. For this use "
"case Django provides a standard Python context manager (see :pep:`343`) "
"called :meth:`~django.test.SimpleTestCase.settings`, which can be used like "
"this::"
msgstr ""
"テストの目的で、設定を一時的に変更し、テストコードを実行した後に元の値に戻す"
"と便利なことがよくあります。このような使い方のために、 Django は :meth:"
"`~django.test.SimpleTestCase.settings` という Python の標準コンテキストマネー"
"ジャ (:pep:`343` を参照) を提供しています:"

msgid ""
"This example will override the :setting:`LOGIN_URL` setting for the code in "
"the ``with`` block and reset its value to the previous state afterward."
msgstr ""
"この例では、 ``with`` ブロック内のコードに対して、 :setting:`LOGIN_URL` 設定"
"をオーバーライドし、その後にその値を以前の状態にリセットします。"

msgid ""
"It can prove unwieldy to redefine settings that contain a list of values. In "
"practice, adding or removing values is often sufficient. Django provides "
"the :meth:`~django.test.SimpleTestCase.modify_settings` context manager for "
"easier settings changes::"
msgstr ""
"値のリストを含む設定の再定義は難しいことがあります。実際には、値の追加や削除"
"で十分なことも多いです。Django には設定を簡単に変更するための :meth:`~django."
"test.SimpleTestCase.modify_settings` コンテキストマネージャがあります:"

msgid ""
"For each action, you can supply either a list of values or a string. When "
"the value already exists in the list, ``append`` and ``prepend`` have no "
"effect; neither does ``remove`` when the value doesn't exist."
msgstr ""
"各アクションに対して、値のリストまたは文字列を指定できます。値がすでにリスト"
"に存在する場合、 ``append`` と ``prepend`` は何もしません。同様に、値が存在し"
"ない場合、 ``remove`` は何もしません。"

msgid ""
"In case you want to override a setting for a test method, Django provides "
"the :func:`~django.test.override_settings` decorator (see :pep:`318`). It's "
"used like this::"
msgstr ""
"テストメソッドの設定を上書きしたい場合、Django には :func:`~django.test."
"override_settings` デコレータがあります (:pep:`318` を参照)。次のように使いま"
"す:"

msgid ""
"The decorator can also be applied to :class:`~django.test.TestCase` classes::"
msgstr ""
"このデコレータは :class:`~django.test.TestCase` クラスにも適用できます:"

msgid ""
"Likewise, Django provides the :func:`~django.test.modify_settings` "
"decorator::"
msgstr ""
"同様に、Django には :func:`~django.test.modify_settings` デコレータがありま"
"す:"

msgid "The decorator can also be applied to test case classes::"
msgstr "このデコレータはテストケースクラスにも適用できます:"

msgid ""
"When given a class, these decorators modify the class directly and return "
"it; they don't create and return a modified copy of it. So if you try to "
"tweak the above examples to assign the return value to a different name than "
"``LoginTestCase`` or ``MiddlewareTestCase``, you may be surprised to find "
"that the original test case classes are still equally affected by the "
"decorator. For a given class, :func:`~django.test.modify_settings` is always "
"applied after :func:`~django.test.override_settings`."
msgstr ""
"クラスが渡されると、これらのデコレータはそのクラスを直接変更して返します。変"
"更したコピーを作成して返すわけではありません。そのため、上記の例を微調整して "
"``LoginTestCase`` や ``MiddlewareTestCase`` と異なる名前を返り値に割り当てよ"
"うとすると、元のテストケースクラスがデコレータの影響を受けていることに驚くか"
"もしれません。あるクラスに対して、 :func:`~django.test.modify_settings` は常"
"に :func:`~django.test.override_settings` の後に適用されます。"

msgid ""
"The settings file contains some settings that are only consulted during "
"initialization of Django internals. If you change them with "
"``override_settings``, the setting is changed if you access it via the "
"``django.conf.settings`` module, however, Django's internals access it "
"differently. Effectively, using :func:`~django.test.override_settings` or :"
"func:`~django.test.modify_settings` with these settings is probably not "
"going to do what you expect it to do."
msgstr ""
"設定ファイルには、Django の内部の初期化時にだけ参照されるいくつかの設定が含ま"
"れています。設定ファイルを ``override_settings`` で変更した場合、 ``django."
"conf.settings`` モジュール経由でアクセスすれば設定は変更されますが、 Django "
"の内部からは別の方法でアクセスはされます。これらの設定に :func:`~django.test."
"override_settings` や :func:`~django.test.modify_settings` を使っても、実際に"
"は期待通りの動作をすることはないでしょう。"

msgid ""
"We do not recommend altering the :setting:`DATABASES` setting. Altering the :"
"setting:`CACHES` setting is possible, but a bit tricky if you are using "
"internals that make using of caching, like :mod:`django.contrib.sessions`. "
"For example, you will have to reinitialize the session backend in a test "
"that uses cached sessions and overrides :setting:`CACHES`."
msgstr ""
":setting:`DATABASES` の設定を変更することはお勧めしません。 :setting:"
"`CACHES` の設定を変更することは可能ですが、 :mod:`django.contrib.sessions` の"
"ようなキャッシュを使用する内部機能を使用している場合は少し厄介です。例えば、"
"キャッシュされたセッションを使用し、 :setting:`CACHES` を上書きするテストで"
"は、セッションバックエンドを再初期化する必要があります。"

msgid ""
"Finally, avoid aliasing your settings as module-level constants as "
"``override_settings()`` won't work on such values since they are only "
"evaluated the first time the module is imported."
msgstr ""
"最後に、設定をモジュールレベルの定数としてエイリアスすることは避けてくださ"
"い。なぜなら、``override_settings()`` はそのような値には機能しないからです。"
"それらの値はモジュールが最初にインポートされた時にのみ評価されます。"

msgid ""
"You can also simulate the absence of a setting by deleting it after settings "
"have been overridden, like this::"
msgstr ""
"下記のように、設定が上書きされた後にその設定を削除することで、設定がない状態"
"をシミュレートすることもできます:"

msgid ""
"When overriding settings, make sure to handle the cases in which your app's "
"code uses a cache or similar feature that retains state even if the setting "
"is changed. Django provides the :data:`django.test.signals.setting_changed` "
"signal that lets you register callbacks to clean up and otherwise reset "
"state when settings are changed."
msgstr ""
"設定を上書きする場合、アプリのコードが、キャッシュや設定が変更されても状態を"
"保持するような機能を使用しているケースにも対処してください。Django には :"
"data:`django.test.signals.setting_changed` シグナルがあり、設定が変更されたと"
"きに状態をクリーンアップしたり、リセットしたりするためのコールバックを登録で"
"きます。"

msgid "Django itself uses this signal to reset various data:"
msgstr "Django 自身は、このシグナルを使って様々なデータをリセットします:"

msgid "Overridden settings"
msgstr "オーバーライドされた設定"

msgid "Data reset"
msgstr "データのリセット"

msgid "USE_TZ, TIME_ZONE"
msgstr "USE_TZ, TIME_ZONE"

msgid "Databases timezone"
msgstr "データベースのタイムゾーン"

msgid "TEMPLATES"
msgstr "TEMPLATES"

msgid "Template engines"
msgstr "テンプレートエンジン"

msgid "SERIALIZATION_MODULES"
msgstr "SERIALIZATION_MODULES"

msgid "Serializers cache"
msgstr "シリアライザーのキャッシュ"

msgid "LOCALE_PATHS, LANGUAGE_CODE"
msgstr "LOCALE_PATHS、LANGUAGE_CODE"

msgid "Default translation and loaded translations"
msgstr "デフォルトの翻訳と読み込まれた翻訳"

msgid ""
"DEFAULT_FILE_STORAGE, STATICFILES_STORAGE, STATIC_ROOT, STATIC_URL, STORAGES"
msgstr ""
"DEFAULT_FILE_STORAGE、STATICFILES_STORAGE、STATIC_ROOT、STATIC_URL、STORAGES"

msgid "Storages configuration"
msgstr "ストレージの設定"

msgid "Isolating apps"
msgstr "アプリの隔離"

msgid ""
"Registers the models defined within a wrapped context into their own "
"isolated :attr:`~django.apps.apps` registry. This functionality is useful "
"when creating model classes for tests, as the classes will be cleanly "
"deleted afterward, and there is no risk of name collisions."
msgstr ""
"ラップされたコンテキスト内で定義されたモデルを、独自の隔離された :attr:"
"`~django.apps.apps` レジストリに登録します。この機能は、クラスが後できれいに"
"削除され、名前衝突のリスクがないため、テスト用にモデルクラスを作成するときに"
"便利です。"

msgid ""
"The app labels which the isolated registry should contain must be passed as "
"individual arguments. You can use ``isolate_apps()`` as a decorator or a "
"context manager. For example::"
msgstr ""
"隔離されたレジストリが含む必要があるアプリラベルは、個別の引数として渡す必要"
"があります。``isolate_apps()`` をデコレータまたはコンテキストマネージャとして"
"使用できます。以下に例を示します。"

msgid "… or::"
msgstr "あるいは、次のようにします。"

msgid "The decorator form can also be applied to classes."
msgstr "デコレータ形式は、クラスにも適用できます。"

msgid "Two optional keyword arguments can be specified:"
msgstr "2つのオプション引数が指定できます。"

msgid ""
"``attr_name``: attribute assigned the isolated registry if used as a class "
"decorator."
msgstr ""
"``attr_name``: クラスデコレータとして使用される場合に、隔離されたレジストリに"
"割り当てられる属性。"

msgid ""
"``kwarg_name``: keyword argument passing the isolated registry if used as a "
"function decorator."
msgstr ""
"``kwarg_name``: 関数デコレータとして使用された場合に、隔離されたレジストリに"
"渡されるキーワード引数。"

msgid ""
"The temporary ``Apps`` instance used to isolate model registration can be "
"retrieved as an attribute when used as a class decorator by using the "
"``attr_name`` parameter::"
msgstr ""
"モデル登録を隔離するために使用される一時的な ``Apps`` インスタンスは、クラス"
"デコレータとして使用する際に ``attr_name`` パラメータを使用して属性として取得"
"できます。"

msgid ""
"… or alternatively as an argument on the test method when used as a method "
"decorator by using the ``kwarg_name`` parameter::"
msgstr ""
"あるいは、``kwarg_name`` パラメータを使ってメソッドデコレータとして使用する際"
"に、 テストメソッドの引数として指定することもできます。"

msgid "Emptying the test outbox"
msgstr "テスト用の送信トレイを空にする"

msgid ""
"If you use any of Django's custom ``TestCase`` classes, the test runner will "
"clear the contents of the test email outbox at the start of each test case."
msgstr ""
"Django のカスタムの ``TestCase`` クラスを使うと、テストランナーは各テストケー"
"スの開始時に、テスト用のメール送信トレイの中身を消去します。"

msgid ""
"For more detail on email services during tests, see `Email services`_ below."
msgstr ""
"テスト中のメールサービスの詳細については、以下の `Email services`_ を参照して"
"ください。"

msgid "Assertions"
msgstr "アサーション"

msgid ""
"As Python's normal :class:`unittest.TestCase` class implements assertion "
"methods such as :meth:`~unittest.TestCase.assertTrue` and :meth:`~unittest."
"TestCase.assertEqual`, Django's custom :class:`TestCase` class provides a "
"number of custom assertion methods that are useful for testing web "
"applications:"
msgstr ""
"Python の通常の :class:`unittest.TestCase` クラスが :meth:`~unittest."
"TestCase.assertTrue` や :meth:`~unittest.TestCase.assertEqual` のようなアサー"
"ションメソッドを実装しているように、 Django のカスタム :class:`TestCase` クラ"
"スは、Web アプリケーションのテストに便利なカスタムのアサーションメソッドを多"
"数提供しています。"

msgid ""
"The failure messages given by most of these assertion methods can be "
"customized with the ``msg_prefix`` argument. This string will be prefixed to "
"any failure message generated by the assertion. This allows you to provide "
"additional details that may help you to identify the location and cause of a "
"failure in your test suite."
msgstr ""
"これらのアサーションメソッドで出力される失敗メッセージは、 ``msg_prefix`` 引"
"数でカスタマイズできます。この文字列は、アサーションが生成する失敗メッセージ"
"の先頭に付加されます。これにより、テストスイートで発生した失敗の場所や原因を"
"特定しやすくなります。"

msgid ""
"Asserts that execution of ``callable`` raises ``expected_exception`` and "
"that ``expected_message`` is found in the exception's message. Any other "
"outcome is reported as a failure. It's a simpler version of :meth:`unittest."
"TestCase.assertRaisesRegex` with the difference that ``expected_message`` "
"isn't treated as a regular expression."
msgstr ""
"``callable`` の実行が ``expected_exception`` を引き起こし、かつその例外のメッ"
"セージに ``expected_message`` が含まれていることをアサートします。他の結果は"
"すべて失敗として報告されます。これは :meth:`unittest.TestCase."
"assertRaisesRegex` の簡易版で、 ``expected_message`` が正規表現として扱われな"
"い点が違います。"

msgid ""
"If only the ``expected_exception`` and ``expected_message`` parameters are "
"given, returns a context manager so that the code being tested can be "
"written inline rather than as a function::"
msgstr ""
"``expected_exception`` と ``expected_message`` パラメータのみが与えられた場"
"合、テストされるコードを関数としてではなくインラインで記述できるように、コン"
"テキストマネージャを返します。"

msgid ""
"Analogous to :meth:`SimpleTestCase.assertRaisesMessage` but for :meth:"
"`~unittest.TestCase.assertWarnsRegex` instead of :meth:`~unittest.TestCase."
"assertRaisesRegex`."
msgstr ""
"これは :meth:`SimpleTestCase.assertRaisesMessage` に似ていますが、 :meth:"
"`~unittest.TestCase.assertRaisesRegex` の代わりに :meth:`~unittest.TestCase."
"assertWarnsRegex` と同様のものです。"

msgid "Asserts that a form field behaves correctly with various inputs."
msgstr ""
"様々な入力に対してフォームフィールドが正しく動作することをアサートします。"

msgid "the class of the field to be tested."
msgstr "テストされるフィールドのクラス。"

msgid "a dictionary mapping valid inputs to their expected cleaned values."
msgstr "有効な入力をそれらの期待されるクリーンな値にマッピングする辞書。"

msgid ""
"a dictionary mapping invalid inputs to one or more raised error messages."
msgstr "無効な入力を一つ以上の発生したエラーメッセージにマッピングする辞書。"

msgid "the args passed to instantiate the field."
msgstr "フィールドをインスタンス化するために渡される引数。"

msgid "the kwargs passed to instantiate the field."
msgstr "フィールドをインスタンス化するために渡されるキーワード引数。"

msgid "the expected clean output for inputs in ``empty_values``."
msgstr "``empty_values`` における入力の期待されるクリーンな出力。"

msgid ""
"For example, the following code tests that an ``EmailField`` accepts ``a@a."
"com`` as a valid email address, but rejects ``aaa`` with a reasonable error "
"message::"
msgstr ""
"たとえば、以下のコードは ``EmailField`` が ``a@a.com`` を有効なメールアドレス"
"として受け入れるが、``aaa`` を合理的なエラーメッセージと共に拒否することをテ"
"ストします:"

msgid "Asserts that a field on a form raises the provided list of errors."
msgstr ""
"フォーム上のフィールドが提供されたエラーのリストを発生させることをアサートし"
"ます。"

msgid ""
"``form`` is a ``Form`` instance. The form must be :ref:`bound <ref-forms-api-"
"bound-unbound>` but not necessarily validated (``assertFormError()`` will "
"automatically call ``full_clean()`` on the form)."
msgstr ""
"``form`` は ``Form`` インスタンスです。フォームは :ref:`バインドされている "
"(bound である) <ref-forms-api-bound-unbound>` 必要がありますが、必ずしもバリ"
"デートされている必要はありません (``assertFormError()`` はフォームに対して自"
"動的に ``full_clean()`` を呼び出します)。"

msgid ""
"``field`` is the name of the field on the form to check. To check the "
"form's :meth:`non-field errors <django.forms.Form.non_field_errors>`, use "
"``field=None``."
msgstr ""
"``field`` はチェックするフォームのフィールド名です。フォームの :meth:`特定の"
"フィールドに関連付けられていないエラー <django.forms.Form.non_field_errors>` "
"をチェックするには、 ``field=None`` を使用します。"

msgid ""
"``errors`` is a list of all the error strings that the field is expected to "
"have. You can also pass a single error string if you only expect one error "
"which means that ``errors='error message'`` is the same as ``errors=['error "
"message']``."
msgstr ""
"``errors`` は、フィールドが持つことが期待されるすべてのエラー文字列のリストで"
"す。1つのエラーのみが期待される場合は、単一のエラー文字列を渡すこともできま"
"す。つまり、 ``errors='error message'`` は ``errors=['error message']`` と同"
"じです。"

msgid ""
"Asserts that the ``formset`` raises the provided list of errors when "
"rendered."
msgstr ""
"レンダリング時に ``formset`` が指定されたエラーリストを発生させることをアサー"
"トします。"

msgid ""
"``formset`` is a ``FormSet`` instance. The formset must be bound but not "
"necessarily validated (``assertFormSetError()`` will automatically call the "
"``full_clean()`` on the formset)."
msgstr ""
"``formset`` は ``FormSet`` のインスタンスです。フォームセットはバインドされて"
"いる (bound である) 必要がありますが、必ずしもバリデートされている必要はあり"
"ません (``assertFormSetError()`` は自動的にフォームセットの ``full_clean()`` "
"を呼び出します)。"

msgid ""
"``form_index`` is the number of the form within the ``FormSet`` (starting "
"from 0). Use ``form_index=None`` to check the formset's non-form errors, i."
"e. the errors you get when calling ``formset.non_form_errors()``. In that "
"case you must also use ``field=None``."
msgstr ""
"``form_index`` は ``FormSet`` 内のフォームの番号です (0 から始まります)。"
"フォームセットのフォーム以外のエラー、つまり ``formset.non_form_errors()`` を"
"呼び出したときに表示されるエラーをチェックするには ``form_index=None`` を使用"
"します。この場合、 ``field=None`` も指定する必要があります。"

msgid ""
"``field`` and ``errors`` have the same meaning as the parameters to "
"``assertFormError()``."
msgstr ""
"``field`` と ``errors`` は ``assertFormError()`` のパラメータと同じ意味です。"

msgid ""
"The ``assertFormsetError()`` assertion method is deprecated. Use "
"``assertFormSetError()`` instead."
msgstr ""
"アサーションメソッド ``assertFormSetError()`` は非推奨です。代わりに "
"``assertFormSetError()`` を使用してください。"

msgid ""
"Asserts that a :class:`response <django.http.HttpResponse>` produced the "
"given :attr:`~django.http.HttpResponse.status_code` and that ``text`` "
"appears in its :attr:`~django.http.HttpResponse.content`. If ``count`` is "
"provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""
":class:`response <django.http.HttpResponse>` が与えられた :attr:`~django."
"http.HttpResponse.status_code` を生成し、その :attr:`~django.http."
"HttpResponse.content` に ``text`` が現れることをアサートします。もし "
"``count`` が指定された場合、 ``text`` はレスポンス中に ``count`` 回出現しなけ"
"ればなりません。"

msgid ""
"Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the "
"response content will be based on HTML semantics instead of character-by-"
"character equality. Whitespace is ignored in most cases, attribute ordering "
"is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more "
"details."
msgstr ""
"``text`` を HTML として扱うには ``html`` を ``True`` に設定します。レスポンス"
"の内容との比較は、一文字ずつ等しくするのではなく、HTMLのセマンティクスに基づ"
"いて行われます。ほとんどの場合、空白文字は無視され、属性の順序は重要ではあり"
"ません。詳細は :meth:`~SimpleTestCase.assertHTMLEqual` を参照してください。"

msgid ""
"Asserts that a :class:`response <django.http.HttpResponse>` produced the "
"given :attr:`~django.http.HttpResponse.status_code` and that ``text`` does "
"*not* appear in its :attr:`~django.http.HttpResponse.content`."
msgstr ""
":class:`レスポンス <django.http.HttpResponse>` が指定された :attr:`~django."
"http.HttpResponse.status_code` を生成し、その :attr:`~django.http."
"HttpResponse.content` に ``text`` が含まれて *いない* ことをアサートします。"

msgid ""
"Asserts that the template with the given name was used in rendering the "
"response."
msgstr ""
"指定された名前のテンプレートがレスポンスのレンダリングに使われたことをアサー"
"トします。"

msgid ""
"``response`` must be a response instance returned by the :class:`test client "
"<django.test.Response>`."
msgstr ""
"``response`` は :class:`テストクライアント <django.test.Response>` が返すレス"
"ポンスインスタンスでなければなりません。"

msgid "``template_name`` should be a string such as ``'admin/index.html'``."
msgstr ""
"``template_name`` には ``'admin/index.html'`` のような文字列を指定します。"

msgid ""
"The ``count`` argument is an integer indicating the number of times the "
"template should be rendered. Default is ``None``, meaning that the template "
"should be rendered one or more times."
msgstr ""
"``count`` 引数はテンプレートがレンダリングされるべき回数を示す整数です。デ"
"フォルトは ``None`` で、テンプレートが1回以上レンダリングされるべきことを意味"
"します。"

msgid "You can use this as a context manager, like this::"
msgstr "このようにコンテキストマネージャとして使用できます:"

msgid ""
"Asserts that the template with the given name was *not* used in rendering "
"the response."
msgstr ""
"指定された名前のテンプレートがレスポンスのレンダリングに使われて *いない* こ"
"とをアサートします。"

msgid ""
"You can use this as a context manager in the same way as :meth:"
"`~SimpleTestCase.assertTemplateUsed`."
msgstr ""
":meth:`~SimpleTestCase.assertTemplateUsed` と同じようにコンテキストマネージャ"
"として使うことができます。"

msgid ""
"Asserts that two URLs are the same, ignoring the order of query string "
"parameters except for parameters with the same name. For example, ``/path/?"
"x=1&y=2`` is equal to ``/path/?y=2&x=1``, but ``/path/?a=1&a=2`` isn't equal "
"to ``/path/?a=2&a=1``."
msgstr ""
"同じ名前のパラメータを除いて、クエリ文字列パラメータの順序を無視して、2つの"
"URLが同じであることをアサートします。例えば、 ``/path/?x=1&y=2`` は ``/path/?"
"y=2&x=1`` と等しいですが、 ``/path/?a=1&a=2`` は ``/path/?a=2&a=1`` と等しく"
"ありません。"

msgid ""
"Asserts that the :class:`response <django.http.HttpResponse>` returned a :"
"attr:`~django.http.HttpResponse.status_code` redirect status, redirected to "
"``expected_url`` (including any ``GET`` data), and that the final page was "
"received with ``target_status_code``."
msgstr ""
":class:`レスポンス <django.http.HttpResponse>` が :attr:`~django.http."
"HttpResponse.status_code` のリダイレクトステータスを返し、 ``expected_url`` "
"にリダイレクトされ (``GET`` データも含む)、最終ページを "
"``target_status_code`` で受信したことをアサートします。"

msgid ""
"If your request used the ``follow`` argument, the ``expected_url`` and "
"``target_status_code`` will be the url and status code for the final point "
"of the redirect chain."
msgstr ""
"リクエストが ``follow`` 引数を使った場合、 ``expected_url`` と "
"``target_status_code`` はリダイレクトチェーンの最終地点の url とステータス"
"コードになります。"

msgid ""
"If ``fetch_redirect_response`` is ``False``, the final page won't be loaded. "
"Since the test client can't fetch external URLs, this is particularly useful "
"if ``expected_url`` isn't part of your Django app."
msgstr ""
"``fetch_redirect_response`` が ``False`` の場合、最終ページは読み込まれませ"
"ん。テストクライアントは外部 URL を取得できないので、 ``expected_url`` が "
"Django アプリの一部でない場合、これは特に便利です。"

msgid ""
"Scheme is handled correctly when making comparisons between two URLs. If "
"there isn't any scheme specified in the location where we are redirected to, "
"the original request's scheme is used. If present, the scheme in "
"``expected_url`` is the one used to make the comparisons to."
msgstr ""
"スキームは、2つのURL間の比較を行う際に正しく処理されます。リダイレクト先にス"
"キームが指定されていない場合、元のリクエストのスキームが使われます。もし存在"
"すれば、 ``expected_url`` のスキームが比較に使われます。"

msgid ""
"Asserts that the strings ``html1`` and ``html2`` are equal. The comparison "
"is based on HTML semantics. The comparison takes following things into "
"account:"
msgstr ""
"文字列 ``html1`` と ``html2`` が等しいことをアサートします。比較はHTMLのセマ"
"ンティクスに基づいて行われます。比較は以下のことが考慮されます:"

msgid "Whitespace before and after HTML tags is ignored."
msgstr "HTMLタグの前後の空白は無視されます。"

msgid "All types of whitespace are considered equivalent."
msgstr "すべての種類の空白は同等とみなされます。"

msgid ""
"All open tags are closed implicitly, e.g. when a surrounding tag is closed "
"or the HTML document ends."
msgstr ""
"すべての開いたタグは暗黙的に閉じられます。例えば、周囲のタグが閉じられるか"
"HTMLドキュメントが終了したときなど。"

msgid "Empty tags are equivalent to their self-closing version."
msgstr "空のタグは自己終了 (self-closing) タグと等価です。"

msgid "The ordering of attributes of an HTML element is not significant."
msgstr "HTML要素の属性の順序は重要ではありません。"

msgid ""
"Boolean attributes (like ``checked``) without an argument are equal to "
"attributes that equal in name and value (see the examples)."
msgstr ""
"引数を持たないブール属性 (例: ``checked``) は、名前と値が同じ属性と等しいで"
"す (例を参照)。"

msgid ""
"Text, character references, and entity references that refer to the same "
"character are equivalent."
msgstr ""
"同じ文字を参照するテキスト、文字参照、およびエンティティ参照は等価です。"

msgid ""
"The following examples are valid tests and don't raise any "
"``AssertionError``::"
msgstr ""
"以下の例は有効なテストであり、どれも ``AssertionError`` を引き起こしません。"

msgid ""
"``html1`` and ``html2`` must contain HTML. An ``AssertionError`` will be "
"raised if one of them cannot be parsed."
msgstr ""
"``html1`` と ``html2`` はHTMLを含んでいなければなりません。どちらかが解析でき"
"ない場合は ``AssertionError`` が発生します。"

msgid "Output in case of error can be customized with the ``msg`` argument."
msgstr "エラー時の出力は ``msg`` 引数でカスタマイズできます。"

msgid ""
"Asserts that the strings ``html1`` and ``html2`` are *not* equal. The "
"comparison is based on HTML semantics. See :meth:`~SimpleTestCase."
"assertHTMLEqual` for details."
msgstr ""
"文字列 ``html1`` と ``html2`` が等しく *ない* ことをアサートします。比較は"
"HTMLのセマンティクスに基づいて行われます。詳細は :meth:`~SimpleTestCase."
"assertHTMLEqual` を参照してください。"

msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are equal. The comparison is "
"based on XML semantics. Similarly to :meth:`~SimpleTestCase."
"assertHTMLEqual`, the comparison is made on parsed content, hence only "
"semantic differences are considered, not syntax differences. When invalid "
"XML is passed in any parameter, an ``AssertionError`` is always raised, even "
"if both strings are identical."
msgstr ""
"文字列 ``xml1`` と ``xml2`` が等しいことをアサートします。比較はXMLセマンティ"
"クスに基づいて行われます。:meth:`~SimpleTestCase.assertHTMLEqual` と同様に、"
"比較は構文解析された内容に基づいて行われるため、構文の違いは考慮されず、意味"
"の違いだけが考慮されます。無効なXMLがパラメータに渡された場合、両方の文字列が"
"同じであっても、常に ``AssertionError`` が発生します。"

msgid ""
"XML declaration, document type, processing instructions, and comments are "
"ignored. Only the root element and its children are compared."
msgstr ""
"XML宣言、ドキュメントタイプ、処理命令、コメントは無視されます。比較されるのは"
"ルート要素とその子要素だけです。"

msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are *not* equal. The "
"comparison is based on XML semantics. See :meth:`~SimpleTestCase."
"assertXMLEqual` for details."
msgstr ""
"文字列 ``xml1`` と ``xml2`` が等しく *ない* ことをアサートします。比較はXMLセ"
"マンティクスに基づいて行われます。詳細は :meth:`~SimpleTestCase."
"assertXMLEqual` を参照してください。"

msgid ""
"Asserts that the HTML fragment ``needle`` is contained in the ``haystack`` "
"once."
msgstr ""
"HTML フラグメント ``needle`` が ``haystack`` に含まれていることをアサートしま"
"す。"

msgid ""
"If the ``count`` integer argument is specified, then additionally the number "
"of ``needle`` occurrences will be strictly verified."
msgstr ""
"もし ``count`` という整数の引数が指定された場合、さらに ``needle`` の出現数が"
"厳密に検証されます。"

msgid ""
"Whitespace in most cases is ignored, and attribute ordering is not "
"significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more details."
msgstr ""
"ほとんどの場合、空白は無視され、属性の順序は重要ではありません。詳細は :meth:"
"`~SimpleTestCase.assertHTMLEqual` を参照してください。"

msgid ""
"Asserts that the JSON fragments ``raw`` and ``expected_data`` are equal. "
"Usual JSON non-significant whitespace rules apply as the heavyweight is "
"delegated to the :mod:`json` library."
msgstr ""
"JSON フラグメント ``raw`` と ``expected_data`` が等しいことをアサートします。"
"重要な部分は :mod:`json` ライブラリに委譲されているため、通常の JSON の重要で"
"ない空白のルールが適用されます。"

msgid ""
"Asserts that the JSON fragments ``raw`` and ``expected_data`` are *not* "
"equal. See :meth:`~SimpleTestCase.assertJSONEqual` for further details."
msgstr ""
"JSON フラグメント ``raw`` と ``expected_data`` が等しく *ない* ことをアサート"
"します。詳細は :meth:`~SimpleTestCase.assertJSONEqual` を参照してください。"

msgid ""
"Asserts that a queryset ``qs`` matches a particular iterable of values "
"``values``."
msgstr ""
"クエリセット ``qs`` が特定の値のイテラブル ``values`` にマッチすることをア"
"サートします。"

msgid ""
"If ``transform`` is provided, ``values`` is compared to a list produced by "
"applying ``transform`` to each member of ``qs``."
msgstr ""
"``transform`` が指定された場合、 ``values`` は ``qs`` の各メンバに "
"``transform`` を適用したリストと比較されます。"

msgid ""
"By default, the comparison is also ordering dependent. If ``qs`` doesn't "
"provide an implicit ordering, you can set the ``ordered`` parameter to "
"``False``, which turns the comparison into a ``collections.Counter`` "
"comparison. If the order is undefined (if the given ``qs`` isn't ordered and "
"the comparison is against more than one ordered value), a ``ValueError`` is "
"raised."
msgstr ""
"デフォルトでは、比較は順序に依存します。もし ``qs`` が暗黙の順序を提供しない"
"場合、 ``ordered`` パラメータを ``False`` に設定することで、比較を "
"``collections.Counter`` 比較に変更できます。順序が未定義の場合 (指定された "
"``qs`` が順序付けされておらず、複数の順序付けられた値との比較の場合)、"
"``ValueError`` が発生します。"

msgid ""
"The ``assertQuerysetEqual()`` assertion method is deprecated. Use "
"``assertQuerySetEqual()`` instead."
msgstr ""
"アサーションメソッド ``assertQuerysetEqual()`` は非推奨です。代わりに "
"``assertQuerySetEqual()`` を使用してください。"

msgid ""
"Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that "
"``num`` database queries are executed."
msgstr ""
"``func`` が ``*args`` と ``**kwargs`` で呼び出されると、 ``num`` 個のデータ"
"ベースクエリが実行されることをアサートします。"

msgid ""
"If a ``\"using\"`` key is present in ``kwargs`` it is used as the database "
"alias for which to check the number of queries::"
msgstr ""
"もし ``kwargs`` に ``\"using\"`` キーがあれば、それをクエリの数をチェックする"
"ためのデータベースのエイリアスとして使用します。"

msgid ""
"If you wish to call a function with a ``using`` parameter you can do it by "
"wrapping the call with a ``lambda`` to add an extra parameter::"
msgstr ""
"もし ``using`` パラメータを持つ関数を呼び出したい場合は、呼び出しを "
"``lambda`` でラップして追加のパラメータを指定できます。"

msgid "You can also use this as a context manager::"
msgstr "コンテキストマネージャとしても使えます。"

msgid "Tagging tests"
msgstr "テストにタグをつける"

msgid ""
"You can tag your tests so you can easily run a particular subset. For "
"example, you might label fast or slow tests::"
msgstr ""
"テストにタグをつけることで、特定のサブセットを簡単に実行できるようになりま"
"す。たとえば、速いテストや遅いテストにラベルをつけることができます。"

msgid "You can also tag a test case class::"
msgstr "テストケースクラスにタグを付けることもできます。"

msgid ""
"Subclasses inherit tags from superclasses, and methods inherit tags from "
"their class. Given::"
msgstr ""
"サブクラスは基底クラスからタグを継承し、メソッドはそのクラスからタグを継承し"
"ます。以下の例を考えてみましょう。"

msgid ""
"``SampleTestCaseChild.test`` will be labeled with ``'slow'``, ``'core'``, "
"``'bar'``, and ``'foo'``."
msgstr ""
"``SampleTestCaseChild.test`` は ``'slow'``, ``'core'``, ``'bar'``, そして "
"``'foo'`` というラベルが付けられます。"

msgid ""
"Then you can choose which tests to run. For example, to run only fast tests:"
msgstr ""
"その後、どのテストを実行するか選択できます。例えば、速いテストのみを実行する"
"には、次にようにします。"

msgid "Or to run fast tests and the core one (even though it's slow):"
msgstr ""
"または、速いテストとコアなテスト (それが遅いとしても) を実行することもできま"
"す。"

msgid ""
"You can also exclude tests by tag. To run core tests if they are not slow:"
msgstr ""
"タグによってテストを除外することもできます。遅くない場合にコアテストを実行す"
"るには、次にようにします。"

msgid ""
":option:`test --exclude-tag` has precedence over :option:`test --tag`, so if "
"a test has two tags and you select one of them and exclude the other, the "
"test won't be run."
msgstr ""
":option:`test --exclude-tag` は :option:`test --tag` よりも優先されるので、テ"
"ストに2つのタグがあり、片方を選択してもう片方を除外すると、テストは実行されま"
"せん。"

msgid "Testing asynchronous code"
msgstr "非同期コードをテストする"

msgid ""
"If you merely want to test the output of your asynchronous views, the "
"standard test client will run them inside their own asynchronous loop "
"without any extra work needed on your part."
msgstr ""
"単に非同期ビューの出力をテストしたいだけであれば、標準のテストクライアントが"
"非同期ループの中で実行するので、追加の作業は必要ありません。"

msgid ""
"However, if you want to write fully-asynchronous tests for a Django project, "
"you will need to take several things into account."
msgstr ""
"しかし、Django プロジェクトで完全な非同期テストを書きたい場合、いくつかの点を"
"考慮する必要があります。"

msgid ""
"Firstly, your tests must be ``async def`` methods on the test class (in "
"order to give them an asynchronous context). Django will automatically "
"detect any ``async def`` tests and wrap them so they run in their own event "
"loop."
msgstr ""
"まず、テストはテストクラスの ``async def`` メソッドでなければなりません (非同"
"期コンテキストを与えるため)。Django は自動的に ``async def`` テストを検出し、"
"独自のイベントループで実行されるようにラップします。"

msgid ""
"If you are testing from an asynchronous function, you must also use the "
"asynchronous test client. This is available as ``django.test.AsyncClient``, "
"or as ``self.async_client`` on any test."
msgstr ""
"非同期関数からテストする場合は、非同期テストクライアントも使用する必要があり"
"ます。これは ``django.test.AsyncClient`` として、あるいは任意のテスト上で "
"``self.async_client`` として利用できます。"

msgid ""
"``AsyncClient`` has the same methods and signatures as the synchronous "
"(normal) test client, with the following exceptions:"
msgstr ""
"``AsyncClient`` は同期 (通常の) テストクライアントと同じメソッドとシグネチャ"
"を持ちますが、 以下の例外があります。"

msgid ""
"In the initialization, arbitrary keyword arguments in ``defaults`` are added "
"directly into the ASGI scope."
msgstr ""
"初期化では、 ``defaults`` にある任意のキーワード引数が直接 ASGI スコープに追"
"加されます。"

msgid ""
"Headers passed as ``extra`` keyword arguments should not have the ``HTTP_`` "
"prefix required by the synchronous client (see :meth:`Client.get`). For "
"example, here is how to set an HTTP ``Accept`` header:"
msgstr ""
"キーワード引数 ``extra`` として渡されるヘッダには、同期クライアントが必要とす"
"る ``HTTP_`` プレフィックスを付けてはいけません (:meth:`Client.get` を参照し"
"てください)。例えば、HTTPの ``Accept`` ヘッダを設定する方法を示します。"

msgid "Support for the ``follow`` parameter was added to the ``AsyncClient``."
msgstr "``AsyncClient`` に ``follow`` パラメータが追加されました。"

msgid "Using ``AsyncClient`` any method that makes a request must be awaited::"
msgstr ""
"``AsyncClient`` を使用する場合、リクエストを行うあらゆるメソッドは await にす"
"る必要があります。"

msgid ""
"The asynchronous client can also call synchronous views; it runs through "
"Django's :doc:`asynchronous request path </topics/async>`, which supports "
"both. Any view called through the ``AsyncClient`` will get an "
"``ASGIRequest`` object for its ``request`` rather than the ``WSGIRequest`` "
"that the normal client creates."
msgstr ""
"非同期クライアントは同期ビューを呼び出すこともできます。Django の :doc:`非同"
"期のリクエスト経路 </topics/async>` を通して実行され、両方に対応しています。"
"``AsyncClient`` を通して呼び出されたビューは、通常のクライアントが作成する "
"``WSGIRequest`` ではなく、``ASGIRequest`` オブジェクトを ``request`` として取"
"得します。"

msgid ""
"If you are using test decorators, they must be async-compatible to ensure "
"they work correctly. Django's built-in decorators will behave correctly, but "
"third-party ones may appear to not execute (they will \"wrap\" the wrong "
"part of the execution flow and not your test)."
msgstr ""
"テストデコレータを使う場合、正しく動作するためには非同期対応でなければなりま"
"せん。Django のビルトインデコレータは正しく動作しますが、サードパーティ製のデ"
"コレータは実行されないように見えるかもしれません (実行フローの間違った部分を"
"「ラップ」してしまい、あなたのテストは実行されません)。"

msgid ""
"If you need to use these decorators, then you should decorate your test "
"methods with :func:`~asgiref.sync.async_to_sync` *inside* of them instead::"
msgstr ""
"これらのデコレータを使用する必要がある場合は、テストメソッドをそれらの *内部"
"で* :func:`~asgiref.sync.async_to_sync` でデコレートするべきです。"

msgid "Email services"
msgstr "メールサービス"

msgid ""
"If any of your Django views send email using :doc:`Django's email "
"functionality </topics/email>`, you probably don't want to send email each "
"time you run a test using that view. For this reason, Django's test runner "
"automatically redirects all Django-sent email to a dummy outbox. This lets "
"you test every aspect of sending email -- from the number of messages sent "
"to the contents of each message -- without actually sending the messages."
msgstr ""
"Django のビューのどれかが :doc:`Django のメール機能 </topics/email>` を使って"
"メールを送信している場合、そのビューを使ってテストを実行するたびにメールを送"
"信したくないでしょう。このため、Django のテストランナーは、Django が送信した"
"メールを自動的にダミーの送信トレイにリダイレクトします。これにより、実際に"
"メールを送信することなく、メール送信のあらゆる側面 (メッセージの送信数から各"
"メッセージの内容まで) をテストできます。"

msgid ""
"The test runner accomplishes this by transparently replacing the normal "
"email backend with a testing backend. (Don't worry -- this has no effect on "
"any other email senders outside of Django, such as your machine's mail "
"server, if you're running one.)"
msgstr ""
"テストランナーは、通常のメールバックエンドをテスト用バックエンドに透過的に置"
"き換えることでこれを実現します。(心配しないでください。これは Django 以外の"
"メール送信者、例えばあなたのマシンのメールサーバを動かしているのであれば、そ"
"れには影響しません。)"

msgid ""
"During test running, each outgoing email is saved in ``django.core.mail."
"outbox``. This is a list of all :class:`~django.core.mail.EmailMessage` "
"instances that have been sent.  The ``outbox`` attribute is a special "
"attribute that is created *only* when the ``locmem`` email backend is used. "
"It doesn't normally exist as part of the :mod:`django.core.mail` module and "
"you can't import it directly. The code below shows how to access this "
"attribute correctly."
msgstr ""
"テスト実行中、各送信メールは ``django.core.mail.outbox`` に保存されます。これ"
"は送信された全ての :class:`~django.core.mail.EmailMessage` インスタンスのリス"
"トです。``outbox`` 属性は、``locmem`` メールバックエンドを使用した場合に *の"
"み* 作成される特別な属性です。通常は :mod:`django.core.mail` モジュールの一部"
"として存在しないので、直接インポートすることはできません。以下のコードでこの"
"属性に正しくアクセスする方法を示しています。"

msgid ""
"Here's an example test that examines ``django.core.mail.outbox`` for length "
"and contents::"
msgstr "以下は ``django.core.mail.outbox`` の長さと内容を調べるテスト例です。"

msgid ""
"As noted :ref:`previously <emptying-test-outbox>`, the test outbox is "
"emptied at the start of every test in a Django ``*TestCase``. To empty the "
"outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""
":ref:`前述の <emptying-test-outbox>` ように、テストの送信トレイは Django "
"``*TestCase`` の各テストの開始時に空になります。手動で送信トレイを空にするに"
"は、``mail.outbox`` に空のリストを代入してください。"

msgid "Management Commands"
msgstr "管理コマンド"

msgid ""
"Management commands can be tested with the :func:`~django.core.management."
"call_command` function. The output can be redirected into a ``StringIO`` "
"instance::"
msgstr ""
"管理コマンドは、:func:`~django.core.management.call_command` 関数を使用してテ"
"ストできます。以下のように、出力は ``StringIO`` インスタンスにリダイレクトで"
"きます。"

msgid "Skipping tests"
msgstr "テストのスキップ"

msgid ""
"The unittest library provides the :func:`@skipIf <unittest.skipIf>` and :"
"func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip "
"tests if you know ahead of time that those tests are going to fail under "
"certain conditions."
msgstr ""
"unittest ライブラリは :func:`@skipIf <unittest.skipIf>` デコレータと :func:"
"`@skipUnless <unittest.skipUnless>` デコレータを提供しており、特定の条件下で"
"テストが失敗することがわかっている場合にテストをスキップできます。"

msgid ""
"For example, if your test requires a particular optional library in order to "
"succeed, you could decorate the test case with :func:`@skipIf <unittest."
"skipIf>`. Then, the test runner will report that the test wasn't executed "
"and why, instead of failing the test or omitting the test altogether."
msgstr ""
"例えば、テストを成功させるために特定のオプションライブラリが必要な場合に、テ"
"ストケースを :func:`@skipIf <unittest.skipIf>` でデコレートすることができま"
"す。そうすると、テストランナーはテストを失敗させたり完全に省略したりする代わ"
"りに、テストが実行されなかったこととその理由を報告します。"

msgid ""
"To supplement these test skipping behaviors, Django provides two additional "
"skip decorators. Instead of testing a generic boolean, these decorators "
"check the capabilities of the database, and skip the test if the database "
"doesn't support a specific named feature."
msgstr ""
"これらのテストスキップ動作を補うために、 Django はさらに 2 つのスキップデコ"
"レータを提供しています。一般的な真偽値をテストする代わりに、これらのデコレー"
"タはデータベースの機能をチェックし、データベースが特定の機能をサポートしてい"
"なければテストをスキップします。"

msgid ""
"The decorators use a string identifier to describe database features. This "
"string corresponds to attributes of the database connection features class. "
"See :source:`django.db.backends.base.features.BaseDatabaseFeatures class "
"<django/db/backends/base/features.py>` for a full list of database features "
"that can be used as a basis for skipping tests."
msgstr ""
"デコレータは、データベース機能を表す文字列識別子を使用します。この文字列は"
"データベース接続の features クラスの属性に対応します。 :source:`django.db."
"backends.base.features.BaseDatabaseFeatures クラス <django/db/backends/base/"
"features.py>` に、テストをスキップするベースとして使用できるデータベース機能"
"の完全なリストがあります。"

msgid ""
"Skip the decorated test or ``TestCase`` if all of the named database "
"features are supported."
msgstr ""
"指定したデータベース機能がすべてサポートされている場合は、デコレートされたテ"
"ストや ``TestCase`` をスキップします。"

msgid ""
"For example, the following test will not be executed if the database "
"supports transactions (e.g., it would *not* run under PostgreSQL, but it "
"would under MySQL with MyISAM tables)::"
msgstr ""
"例えば、データベースがトランザクションをサポートしている場合、以下のテストは"
"実行されません (例えば、PostgreSQLでは実行 *されません* が、MyISAMテーブルを"
"持つMySQLでは実行されます)。"

msgid ""
"Skip the decorated test or ``TestCase`` if any of the named database "
"features are *not* supported."
msgstr ""
"指定したデータベース機能がサポートされていない場合は、デコレートされたテスト"
"や ``TestCase`` をスキップします。"

msgid ""
"For example, the following test will only be executed if the database "
"supports transactions (e.g., it would run under PostgreSQL, but *not* under "
"MySQL with MyISAM tables)::"
msgstr ""
"例えば、以下のテストはデータベースがトランザクションをサポートしている場合だ"
"け実行されます (たとえば、PostgreSQLでは実行されますが、MyISAMテーブルを持つ"
"MySQLでは実行 *されません*)。"
