# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# Akio Ogasahara <libratechwriter@gmail.com>, 2024
# Claude Paroz <claude@2xlibre.net>, 2020
# xiu1 <d84ea@hotmail.co.jp>, 2015-2017
# Eiji WARASHINA <Eiji.Warashina@gmail.com>, 2016
# Fuuki Shigenaka <shigenakafuuki@gmail.com>, 2018
# Hiroki KIYOHARA <hirokiky@gmail.com>, 2013-2014,2016,2024
# Hiroshi Yamaki <hiroshi.yamaki@gmail.com>, 2015
# Hiroyuki Imai <hiroyuki.wx@gmail.com>, 2020
# IjIj <ijijsamurai@gmail.com>, 2020
# IjIj <ijijsamurai@gmail.com>, 2021
# Ikemoto Hideki <ikemo333@gmail.com>, 2021-2022
# kai <skybird1233@gmail.com>, 2018
# Kashun YOSHIDA, 2017
# Kashun YOSHIDA, 2021,2023
# Kashun YOSHIDA, 2018
# kazuhiro soga <kazsoga@gmail.com>, 2016
# Kenjiro Kosaka <inoshirou@gmail.com>, 2014
# Kohei Tamura <ktamura.biz.80@gmail.com>, 2018
# Kosei Kitahara <surgo.jp@gmail.com>, 2013
# Akio Ogasahara <libratechwriter@gmail.com>, 2024
# IWAI, Masaharu <iwaim.sub@gmail.com>, 2016
# Masa MATSUMURA, 2017
# Masashi SHIBATA <contact@c-bata.link>, 2015-2016
# Masashi SHIBATA <contact@c-bata.link>, 2017
# masataka arai <arai.masataka142@gmail.com>, 2016
# sutefu7, 2019
# matsuand, 2018
# Mitsuhiro Sorakubo <msorakubo@msn.com>, 2016
# mnamihdk, 2017
# Akio Ogasahara <libratechwriter@gmail.com>, 2024
# Pawllo2 <pawllothesecond@gmail.com>, 2017-2018
# Riktio Taniguchi <rikiriki1238@gmail.com>, 2015
# Satoshi Tsuyama <tsuyama@nike.eonet.ne.jp>, 2014
# TAKAHASHI Shuuji <shuuji3@gmail.com>, 2017,2019
# Suguru Yamamoto <sgryjp@gmail.com>, 2017
# TANIGUCHI Taichi, 2023
# TAKAHASHI Shuuji <shuuji3@gmail.com>, 2016,2018,2022,2024
# Takayuki Hirai, 2015
# Takuya Arita <takuya.arita@gmail.com>, 2015
# Takuya N <takninnovationresearch@gmail.com>, 2019-2020
# Tetsuo Koyama <tkoyama010@gmail.com>, 2023
# Takuya N <takninnovationresearch@gmail.com>, 2018
# tomo, 2021
# Kashun YOSHIDA, 2017
# Yuma.M, 2015
# Yusuke Miyazaki <miyazaki.dev@gmail.com>, 2015,2017
# Yuuki Ebihara <yuuki.ebihara813@gmail.com>, 2018,2020
# Pawllo2 <pawllothesecond@gmail.com>, 2017
# 吉村 潤平 <jumpyoshim@gmail.com>, 2018
# 田渕輝生 <twinoze@gmail.com>, 2018
# Shoki Hata <syouki100241@gmail.com>, 2020
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 10:19-0500\n"
"PO-Revision-Date: 2013-04-02 20:00+0000\n"
"Last-Translator: Akio Ogasahara <libratechwriter@gmail.com>, 2024\n"
"Language-Team: Japanese (http://app.transifex.com/django/django-docs/"
"language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "Writing your first contribution for Django"
msgstr ""

msgid "Introduction"
msgstr "はじめに"

msgid ""
"Interested in giving back to the community a little? Maybe you've found a "
"bug in Django that you'd like to see fixed, or maybe there's a small feature "
"you want added."
msgstr ""
"小さなものでも、コミュニティへ恩返しすることに興味がありますか？ たとえば、"
"Django に直してほしいバグを見つけたり、ちょっとした機能を追加してほしいと思っ"
"ているかもしれません。"

msgid ""
"Contributing back to Django itself is the best way to see your own concerns "
"addressed. This may seem daunting at first, but it's a well-traveled path "
"with documentation, tooling, and a community to support you. We'll walk you "
"through the entire process, so you can learn by example."
msgstr ""
"その願いを叶える一番の方法は Django 自体にコントリビュートすることです。最初"
"はすごく大変なことだと想像するかもしれませんが、あなたを助けてくれるドキュメ"
"ント、ツール、コミュニティとともに多くの人が通る道でもあります。これからコン"
"トリビュートのプロセス全体を順番に詳しく解説していくので、例を通して理解でき"
"ると思います。"

msgid "Who's this tutorial for?"
msgstr "このチュートリアルの対象者は誰ですか？"

msgid ""
"If you are looking for a reference on the details of making code "
"contributions, see the :doc:`/internals/contributing/writing-code/index` "
"documentation."
msgstr ""
"パッチを書く方法の細かい参照文献を探しているなら :doc:`/internals/"
"contributing/writing-code/index` ドキュメントを参照してください。"

msgid ""
"For this tutorial, we expect that you have at least a basic understanding of "
"how Django works. This means you should be comfortable going through the "
"existing tutorials on :doc:`writing your first Django app</intro/"
"tutorial01>`. In addition, you should have a good understanding of Python "
"itself. But if you don't, `Dive Into Python`_ is a fantastic (and free) "
"online book for beginning Python programmers."
msgstr ""
"このチュートリアルでは、少なくとも Django がどのように動作するかについて基本"
"的な理解を持っていることを期待します。つまり、 :doc:`はじめての Django アプリ"
"作成 </intro/tutorial01>` にある既存のチュートリアルを一通り読んで慣れている"
"必要があります。加えて、Python 自体をよく理解している必要があります。しかし、"
"もしそうでなければ、 `Dive Into Python`_ は Python プログラマの初心者のための"
"素晴らしい (そして無料の) オンラインブックです。"

msgid ""
"Those of you who are unfamiliar with version control systems and Trac will "
"find that this tutorial and its links include just enough information to get "
"started. However, you'll probably want to read some more about these "
"different tools if you plan on contributing to Django regularly."
msgstr ""
"バージョン管理システムや Trac をよく知らない方でも、このチュートリアルとリン"
"ク先から、コントリビュートに必要な情報は十分得られます。しかし、Django に定期"
"的に貢献したい場合は、このツールの詳細を知っておいた方がいいでしょう。"

msgid ""
"For the most part though, this tutorial tries to explain as much as "
"possible, so that it can be of use to the widest audience."
msgstr ""
"このチュートリアルでは、できるだけ多くの方が使用できるように、可能な限り詳し"
"く説明したいと思います。"

msgid "Where to get help:"
msgstr "困ったときは:"

msgid ""
"If you're having trouble going through this tutorial, please post a message "
"on the `Django Forum`_, |django-developers|, or drop by `#django-dev on irc."
"libera.chat`__ to chat with other Django users who might be able to help."
msgstr ""
"このチュートリアルで問題が発生したときは、`Django Forum`_ 、 |django-"
"developers| にメッセージを投稿するか、`irc.libera.chat の #django-dev`__ で"
"チャットすることで、他のDjangoユーザの助けを得ることができます。"

msgid "What does this tutorial cover?"
msgstr "このチュートリアルはどの範囲をカバーしていますか？"

msgid ""
"We'll be walking you through contributing to Django for the first time. By "
"the end of this tutorial, you should have a basic understanding of both the "
"tools and the processes involved. Specifically, we'll be covering the "
"following:"
msgstr ""

msgid "Installing Git."
msgstr "Git のインストール"

msgid "Downloading a copy of Django's development version."
msgstr "Django 開発版の複製をダウンロードする"

msgid "Running Django's test suite."
msgstr "Django のテストスイートの実行"

msgid "Writing a test for your changes."
msgstr ""

msgid "Writing the code for your changes."
msgstr ""

msgid "Testing your changes."
msgstr ""

msgid "Submitting a pull request."
msgstr "プルリクエストを送る"

msgid "Where to look for more information."
msgstr "より多くの情報を得る方法"

msgid ""
"Once you're done with the tutorial, you can look through the rest of :doc:"
"`Django's documentation on contributing</internals/contributing/index>`. It "
"contains lots of great information and is a must read for anyone who'd like "
"to become a regular contributor to Django. If you've got questions, it's "
"probably got the answers."
msgstr ""
"チュートリアルを終えたら、次は :doc:`Django への貢献</internals/contributing/"
"index>` を参照してください。このドキュメントには、多くの重要な情報が含まれて"
"おり、Django に定期的に貢献したい方は是非一読してください。あなたの疑問への答"
"えが見つかるはずです。"

msgid "Python 3 required!"
msgstr "3系の Python が必要です！"

msgid ""
"The current version of Django doesn't support Python 2.7. Get Python 3 at "
"`Python's download page <https://www.python.org/downloads/>`_ or with your "
"operating system's package manager."
msgstr ""
"Django の現在のバージョンは、Python 2.7 をサポートしません。`Python のダウン"
"ロードページ <https://www.python.org/downloads/>`_ や OS のパッケージ管理シス"
"テムを用いて Python 3 をインストールしてください。"

msgid "For Windows users"
msgstr "Windows を使用している方へ"

msgid ""
"See :ref:`install_python_windows` on Windows docs for additional guidance."
msgstr "Windowsのドキュメントの :ref:`install_python_windows` をみてください。"

msgid "Code of Conduct"
msgstr "ソースコードの管理"

msgid ""
"As a contributor, you can help us keep the Django community open and "
"inclusive. Please read and follow our `Code of Conduct <https://www."
"djangoproject.com/conduct/>`_."
msgstr ""
"Django へ貢献を行う上では、Django コミュニティをオープンで誰にでも開かれたも"
"のに保つよう心がけてください。 `行動規範 <https://www.djangoproject.com/"
"conduct/>`_ をよく読み、それに従ってください。"

msgid "Installing Git"
msgstr "Git のインストール"

msgid ""
"For this tutorial, you'll need Git installed to download the current "
"development version of Django and to generate a branch for the changes you "
"make."
msgstr ""

msgid ""
"To check whether or not you have Git installed, enter ``git`` into the "
"command line. If you get messages saying that this command could not be "
"found, you'll have to download and install it, see `Git's download page`__."
msgstr ""
"Git がインストールされているかどうかを確認するために、コマンドラインで "
"``git`` を入力します。もし入っていない場合は、ダウンロード及びインストールす"
"るために、 `Git's download page`__ を参照してください。"

msgid ""
"If you're not that familiar with Git, you can always find out more about its "
"commands (once it's installed) by typing ``git help`` into the command line."
msgstr ""
"もし Git について詳しく知らない場合は、(インストール後に) コマンドラインから "
"``git help`` と入力するとコマンドの使い方を確認できます。"

msgid "Getting a copy of Django's development version"
msgstr "Django 開発版の複製を取得"

msgid ""
"The first step to contributing to Django is to get a copy of the source "
"code. First, `fork Django on GitHub <https://github.com/django/django/"
"fork>`__. Then, from the command line, use the ``cd`` command to navigate to "
"the directory where you'll want your local copy of Django to live."
msgstr ""
"Django へ貢献するためのはじめの一歩は、ソースコードのコピーです。まず、 "
"`GitHub で Django をフォーク <https://github.com/django/django/fork>`__ し"
"て、コマンドラインからリポジトリのクローンを作り、 ``cd`` コマンドで Django "
"のローカルコピーのディレクトリに移動しましょう。"

msgid "Download the Django source code repository using the following command:"
msgstr "以下のコマンドで Django のソースコードリポジトリをダウンロードします:"

msgid "Low bandwidth connection?"
msgstr "低帯域の回線をご利用ですか？"

msgid ""
"You can add the ``--depth 1`` argument to ``git clone`` to skip downloading "
"all of Django's commit history, which reduces data transfer from  ~250 MB to "
"~70 MB."
msgstr ""
"``git clone`` に ``--depth 1`` という引数を追加すると、Djangoのコミット履歴の"
"ダウンロードをスキップすることができます。これによってデータの転送量が70〜"
"250MB程度減ります。"

msgid ""
"Now that you have a local copy of Django, you can install it just like you "
"would install any package using ``pip``. The most convenient way to do so is "
"by using a *virtual environment*, which is a feature built into Python that "
"allows you to keep a separate directory of installed packages for each of "
"your projects so that they don't interfere with each other."
msgstr ""
"Django のローカルコピーがあるので、 ``pip`` を使ってパッケージをインストール"
"するのと同じようにインストールすることができます。そのための最も便利な方法"
"は、Python に組み込まれている機能である *仮想環境* を使用することです。これに"
"より、相互に干渉しないようにプロジェクトごとにインストールされたパッケージの"
"別々のディレクトリを保つことができます。"

msgid ""
"It's a good idea to keep all your virtual environments in one place, for "
"example in ``.virtualenvs/`` in your home directory."
msgstr ""
"例えばホームディレクトリ下の ``.virtualenvs/`` にすべての仮想環境を置くことが"
"出来ます。"

msgid "Create a new virtual environment by running:"
msgstr "次のコマンドで、新しい仮想環境を作成します:"

msgid "The path is where the new environment will be saved on your computer."
msgstr "新しい環境があるパスはコンピュータに保存されました。"

msgid ""
"The final step in setting up your virtual environment is to activate it:"
msgstr "最後のステップとして仮想環境を有効化します："

msgid ""
"If the ``source`` command is not available, you can try using a dot instead:"
msgstr ""
"もし ``source`` コマンドが使えない場合、代わりに ``.`` を試してみてください:"

msgid ""
"You have to activate the virtual environment whenever you open a new "
"terminal window."
msgstr ""
"新しいターミナルウィンドウを開くたびに仮想環境を有効にする必要があります。"

msgid "To activate your virtual environment on Windows, run:"
msgstr "実行してWindowsでの仮想環境を有効化します："

msgid ""
"The name of the currently activated virtual environment is displayed on the "
"command line to help you keep track of which one you are using. Anything you "
"install through ``pip`` while this name is displayed will be installed in "
"that virtual environment, isolated from other environments and system-wide "
"packages."
msgstr ""
"その時点で有効な仮想環境の名前がコマンドライン上に表示されます。これによって"
"どの仮想環境を利用しているのかが分かります。仮想環境のもとで ``pip`` によるイ"
"ンストールを行うと、表示されている仮想環境内にインストールされます。他の仮想"
"環境やパッケージインストールによるシステムとは区別されます。"

msgid "Go ahead and install the previously cloned copy of Django:"
msgstr ""
"先に進んで、以前にクローンしたDjangoのコピーをインストールしてください:"

msgid ""
"The installed version of Django is now pointing at your local copy by "
"installing in editable mode. You will immediately see any changes you make "
"to it, which is of great help when writing your first contribution."
msgstr ""

msgid "Creating projects with a local copy of Django"
msgstr "ローカルに複製した Django でプロジェクトを作成する"

msgid ""
"It may be helpful to test your local changes with a Django project. First "
"you have to create a new virtual environment, :ref:`install the previously "
"cloned local copy of Django in editable mode <intro-contributing-install-"
"local-copy>`, and create a new Django project outside of your local copy of "
"Django. You will immediately see any changes you make to Django in your new "
"project, which is of great help when writing your first contribution, "
"especially if testing any changes to the UI."
msgstr ""

msgid ""
"You can follow the :doc:`tutorial</intro/tutorial01>` for help in creating a "
"Django project."
msgstr ""
"Djangoプロジェクトの作り方については、 :doc:`tutorial</intro/tutorial01>` を"
"参照してください。"

msgid "Running Django's test suite for the first time"
msgstr "最初に Django のテストスイートを実行する"

msgid ""
"When contributing to Django it's very important that your code changes don't "
"introduce bugs into other areas of Django. One way to check that Django "
"still works after you make your changes is by running Django's test suite. "
"If all the tests still pass, then you can be reasonably sure that your "
"changes work and haven't broken other parts of Django. If you've never run "
"Django's test suite before, it's a good idea to run it once beforehand to "
"get familiar with its output."
msgstr ""
"Django に貢献する際には、コードの変更が Django の他の領域にバグを持ち込まない"
"ようにすることが非常に重要です。変更を行った後もDjangoが動作するかどうかを確"
"認する方法の1つは、Djangoのテストスイートを実行することです。すべてのテストに"
"合格していれば、あなたの変更が機能し、Django の他の部分を壊していないことを合"
"理的に確認することができます。 Django のテストスイートを実行したことがない人"
"は、事前に一度実行して出力に慣れておくと良いでしょう。"

msgid ""
"Before running the test suite, enter the Django ``tests/`` directory using "
"the ``cd tests`` command, and install test dependencies by running:"
msgstr ""
"テストスイートを実行するする前に ``cd tests`` コマンドを使って Django の "
"``tests/`` ディレクトリに移動し、実行することでテストの依存関係をインストール"
"します。"

msgid ""
"If you encounter an error during the installation, your system might be "
"missing a dependency for one or more of the Python packages. Consult the "
"failing package's documentation or search the web with the error message "
"that you encounter."
msgstr ""
"もしこのインストールの間にエラーが発生した場合は、システムが Python のうちの "
"1 つ以上の依存パッケージが見つからない可能性があります。失敗したパッケージの"
"ドキュメントを調べるか、発生したエラーメッセージをウェブで検索してください。"

msgid ""
"Now we are ready to run the test suite. If you're using GNU/Linux, macOS, or "
"some other flavor of Unix, run:"
msgstr ""
"テストスイートを実効する準備が出来ました。もし GNU/Linux, macOS 等 Unix 系OS"
"を使用している場合、下記のコマンドを実行します:"

msgid ""
"Now sit back and relax. Django's entire test suite has thousands of tests, "
"and it takes at least a few minutes to run, depending on the speed of your "
"computer."
msgstr ""
"さあ、座ってリラックスしてください。Django のテストスイート全体には何千ものテ"
"ストがあり、コンピュータの速度にもよりますが、実行には少なくとも数分かかりま"
"す。"

msgid ""
"While Django's test suite is running, you'll see a stream of characters "
"representing the status of each test as it completes. ``E`` indicates that "
"an error was raised during a test, and ``F`` indicates that a test's "
"assertions failed. Both of these are considered to be test failures. "
"Meanwhile, ``x`` and ``s`` indicated expected failures and skipped tests, "
"respectively. Dots indicate passing tests."
msgstr ""
"Django のテストスイートを実行中に、各テストの完了時のステータスを表す一連の文"
"字が表示されます。 ``E`` はテストにエラーが発生したことを表し、 ``F`` はテス"
"トのアサーションが失敗したことを表しています。これらは共にテスト失敗となりま"
"す。``x`` と ``s`` はそれぞれ期待する失敗とスキップを表しています。ドットはテ"
"ストの成功を表しています。"

msgid ""
"Skipped tests are typically due to missing external libraries required to "
"run the test; see :ref:`running-unit-tests-dependencies` for a list of "
"dependencies and be sure to install any for tests related to the changes you "
"are making (we won't need any for this tutorial). Some tests are specific to "
"a particular database backend and will be skipped if not testing with that "
"backend. SQLite is the database backend for the default settings. To run the "
"tests using a different backend, see :ref:`running-unit-tests-settings`."
msgstr ""
"スキップされたテストは、テストを実行するために必要な外部ライブラリがインス"
"トールされていないことが原因です; 依存については :ref:`running-unit-tests-"
"dependencies` を参照し、あなたの変更に関連するテストにする依存ライブラリがイ"
"ンストールしてください (このチュートリアルでは必要ありません)。いくつかのテス"
"トは、特定のデータベースバックエンドに固有であり、そのバックエンドでテストさ"
"れない場合はスキップされます。 SQLite は、デフォルト設定のバックエンドです。"
"別のバックエンドを使用してテストを実行するには、 :ref:`running-unit-tests-"
"settings` を参照してください。"

msgid ""
"Once the tests complete, you should be greeted with a message informing you "
"whether the test suite passed or failed. Since you haven't yet made any "
"changes to Django's code, the entire test suite **should** pass. If you get "
"failures or errors make sure you've followed all of the previous steps "
"properly. See :ref:`running-unit-tests` for more information."
msgstr ""
"テストが終了するとテストが成功したか､失敗したかを知らせるメッセージが表示され"
"ます｡まだ Django のコードに変更を加えていなければ､テストは全て **パスするはず"
"です** ｡もし失敗するかエラーが起こる場合は､これまでの全ステップを適切に実行し"
"てください｡ :ref:`running-unit-tests` で､よりテストについて知れます｡"

msgid ""
"Note that the latest Django \"main\" branch may not always be stable. When "
"developing against \"main\", you can check `Django's continuous integration "
"builds`__ to determine if the failures are specific to your machine or if "
"they are also present in Django's official builds. If you click to view a "
"particular build, you can view the \"Configuration Matrix\" which shows "
"failures broken down by Python version and database backend."
msgstr ""
"最新の Django の main ブランチは常に安定しているとは限りません。 main バー"
"ジョンで開発を行う場合、 `Django の継続インテグレーションビルド`__ をチェック"
"してください。これで、テストの失敗があなたのマシンだけのものか､ Django 公式の"
"ビルドによるものかが分かります。各ビルドについてのリンクをクリックすれば､ "
"\"Configuration Matrix\" という、各 Python のバージョン、 DB バックエンドに対"
"応したテストの失敗を閲覧できます｡"

msgid ""
"For this tutorial and the ticket we're working on, testing against SQLite is "
"sufficient, however, it's possible (and sometimes necessary) to :ref:`run "
"the tests using a different database <running-unit-tests-settings>`. When "
"making UI changes, you will need to :ref:`run the Selenium tests <running-"
"selenium-tests>`."
msgstr ""
"このチュートリアルや、各チケットで作業する際は、SQLiteのテストで十分です。し"
"かし、可能（か必要）な場合は、 :ref:`他のデータベースでテストを実行する "
"<running-unit-tests-settings>` を参照してください。 UIを変更する場合は、 :"
"ref:`Seleniumのテストを実行する <running-selenium-tests>` 必要があります。"

msgid "Working on a feature"
msgstr "取りかかる"

msgid ""
"For this tutorial, we'll work on a \"fake ticket\" as a case study. Here are "
"the imaginary details:"
msgstr ""
"このチュートリアルでは、ケーススタディとして「架空のチケット」を使って作業を"
"進めます。以下はその架空の詳細です。"

msgid "Ticket #99999 -- Allow making toast"
msgstr "チケット #99999 -- トーストを焼くようにする"

msgid ""
"Django should provide a function ``django.shortcuts.make_toast()`` that "
"returns ``'toast'``."
msgstr ""
"Django は、``toast`` を返す関数 ``django.shortcuts.make_toast()`` を提供しな"
"ければなりません。"

msgid "We'll now implement this feature and associated tests."
msgstr "これよりこの機能と関連するテストを実装します。"

msgid "Creating a branch"
msgstr ""

msgid "Before making any changes, create a new branch for the ticket:"
msgstr "変更を加える前に、チケット用に新しいブランチを作ります。"

msgid ""
"You can choose any name that you want for the branch, \"ticket_99999\" is an "
"example. All changes made in this branch will be specific to the ticket and "
"won't affect the main copy of the code that we cloned earlier."
msgstr ""
"ブランチ名は好きな名前で構いません。\"ticket_99999\" は一例です。新しいブラン"
"チ内で行ったすべての変更は、先ほどクローンしたコードのマスターコピーには影響"
"しません。"

msgid "Writing some tests for your ticket"
msgstr "チケットにテストを書く"

msgid ""
"In most cases, for a contribution to be accepted into Django it has to "
"include tests. For bug fix contributions, this means writing a regression "
"test to ensure that  the bug is never reintroduced into Django later on. A "
"regression test should be written in such a way that it will fail while the "
"bug still exists and pass once the bug has been fixed. For contributions "
"containing new features, you'll need to include tests which ensure that the "
"new features are working correctly. They too should fail when the new "
"feature is not present, and then pass once it has been implemented."
msgstr ""

msgid ""
"A good way to do this is to write your new tests first, before making any "
"changes to the code. This style of development is called `test-driven "
"development`__ and can be applied to both entire projects and single "
"changes. After writing your tests, you then run them to make sure that they "
"do indeed fail (since you haven't fixed that bug or added that feature yet). "
"If your new tests don't fail, you'll need to fix them so that they do. After "
"all, a regression test that passes regardless of whether a bug is present is "
"not very helpful at preventing that bug from reoccurring down the road."
msgstr ""

msgid "Now for our hands-on example."
msgstr "ハンズオンでの例題に移りましょう。"

msgid "Writing a test for ticket #99999"
msgstr "チケット #99999 に対するテストの実装"

msgid ""
"In order to resolve this ticket, we'll add a ``make_toast()`` function to "
"the ``django.shortcuts`` module. First we are going to write a test that "
"tries to use the function and check that its output looks correct."
msgstr ""
"このチケットを解決するために、 ``make_toast()`` 関数に ``django.shortcuts`` "
"モジュールに追加します。まずはこの関数を使うためのテストを書いて、関数の出力"
"が正しいことを確認しましょう。"

msgid ""
"Navigate to Django's ``tests/shortcuts/`` folder and create a new file "
"``test_make_toast.py``. Add the following code::"
msgstr ""
"Djangoの ``tests/shortcuts/`` フォルダへ移動して ``test_make_toast.py`` とい"
"うファイルを新たに作ります。以下のコードを追加してください。"

msgid "This test checks that the ``make_toast()`` returns ``'toast'``."
msgstr "このテストは ``make_toast()`` が ``toast`` を返すかを確認します。"

msgid "But this testing thing looks kinda hard..."
msgstr "でもテストをするのはすこし難しそうです……"

msgid ""
"If you've never had to deal with tests before, they can look a little hard "
"to write at first glance. Fortunately, testing is a *very* big subject in "
"computer programming, so there's lots of information out there:"
msgstr ""
"テストを書いたことがない場合は、最初は難しく見えるかもしれません。ですが実"
"は、テストすることはプログラミングにおいて *とても* 重要なことです。ここでは"
"テストについて詳細に紹介します。"

msgid ""
"A good first look at writing tests for Django can be found in the "
"documentation on :doc:`/topics/testing/overview`."
msgstr ""
"Django のための良いテストの書き方は :doc:`/topics/testing/overview` のドキュ"
"メントに記載されています。"

msgid ""
"Dive Into Python (a free online book for beginning Python developers) "
"includes a great `introduction to Unit Testing`__."
msgstr ""
"Dive Into Python (Python初心者のための､オンラインの無料の本) には素晴らしい `"
"初めてのユニットテスト`__ という章があります｡"

msgid ""
"After reading those, if you want something a little meatier to sink your "
"teeth into, there's always the Python :mod:`unittest` documentation."
msgstr ""
"Dive Into Python を読んだあと、もう少し情報が欲しい場合は、Python の :mod:"
"`unittest` のドキュメントを参照してください｡"

msgid "Running your new test"
msgstr "新しいテストを走らせる"

msgid ""
"Since we haven't made any modifications to ``django.shortcuts`` yet, our "
"test should fail. Let's run all the tests in the ``shortcuts`` folder to "
"make sure that's really what happens. ``cd`` to the Django ``tests/`` "
"directory and run:"
msgstr ""
"まだ ``django.shortcuts`` に変更を加えていないため、テストは失敗します。 "
"``shortcuts`` フォルダ内の全てのテストを実行して、どうなるか見てみましょう。 "
"``cd`` でDjangoの ``tests/`` ディレクトリへと移動してから実行してください。"

msgid ""
"If the tests ran correctly, you should see one failure corresponding to the "
"test method we added, with this error:"
msgstr ""
"テストが正しく実行されれば追加したテストメソッドに対して、こちらのエラーとと"
"もに１つテストが失敗しているはずです。"

msgid ""
"If all of the tests passed, then you'll want to make sure that you added the "
"new test shown above to the appropriate folder and file name."
msgstr ""
"テストがすべて通れば､上記した新しいテストを正しいフォルダ､クラスに追加したこ"
"とを確認してください｡"

msgid "Writing the code for your ticket"
msgstr "チケットにコードを書く"

msgid "Next we'll be adding the ``make_toast()`` function."
msgstr "続いては ``make_toast()`` 関数を追加します。"

msgid ""
"Navigate to the ``django/`` folder and open the ``shortcuts.py`` file. At "
"the bottom, add::"
msgstr ""
"``django/`` フォルダに移動して ``shortcuts.py`` ファイルを開きます。最下行に"
"以下を追加します::"

msgid ""
"Now we need to make sure that the test we wrote earlier passes, so we can "
"see whether the code we added is working correctly. Again, navigate to the "
"Django ``tests/`` directory and run:"
msgstr ""
"さて、先ほど書いたテストが成功したことを確認する必要があるので、追加したコー"
"ドが正しく機能しているかどうかを確認できます。もう一度、Django の ``tests/`` "
"ディレクトリに移動して以下を実行します:"

msgid ""
"Everything should pass. If it doesn't, make sure you correctly added the "
"function to the correct file."
msgstr ""
"テストはすべて成功するはずです。失敗した場合は、正しいファイルに対して正しく"
"関数を追加しているかどうかを確認してください。"

msgid "Running Django's test suite for the second time"
msgstr "Django の テストスイートをもう一度走らせる"

msgid ""
"Once you've verified that your changes and test are working correctly, it's "
"a good idea to run the entire Django test suite to verify that your change "
"hasn't introduced any bugs into other areas of Django. While successfully "
"passing the entire test suite doesn't guarantee your code is bug free, it "
"does help identify many bugs and regressions that might otherwise go "
"unnoticed."
msgstr ""

msgid ""
"To run the entire Django test suite, ``cd`` into the Django ``tests/`` "
"directory and run:"
msgstr ""
"Django の全てのテストスイートを走らせるには ``cd`` で Django の ``tests/`` "
"ディレクトリ移動して実行してください:"

msgid "Writing Documentation"
msgstr "ドキュメントを書く"

msgid ""
"This is a new feature, so it should be documented. Open the file ``docs/"
"topics/http/shortcuts.txt`` and add the following at the end of the file:"
msgstr ""
"これは新たな機能です。したがってドキュメントを作る必要があります。ファイル "
"``docs/topics/http/shortcuts.txt`` を開いて、このファイルの最終行に以下を加え"
"ます。"

msgid ""
"Since this new feature will be in an upcoming release it is also added to "
"the release notes for the next version of Django. Open the release notes for "
"the latest version in ``docs/releases/``, which at time of writing is ``2.2."
"txt``. Add a note under the \"Minor Features\" header:"
msgstr ""
"この新機能は将来のリリースとともに、Django 次期バージョンのリリースノートにも"
"含まれます。ファイル ``docs/releases/`` の最新バージョン、このページの執筆時"
"点では ``2.2.txt`` のリリースノートを開き、\"Minor Feature\" ヘッダの下にノー"
"トを追記してください。"

msgid ""
"For more information on writing documentation, including an explanation of "
"what the ``versionadded`` bit is all about, see :doc:`/internals/"
"contributing/writing-documentation`. That page also includes an explanation "
"of how to build a copy of the documentation locally, so you can preview the "
"HTML that will be generated."
msgstr ""
"ドキュメントの書き方についてもっと知りたい場合は :doc:`/internals/"
"contributing/writing-documentation` を参照してください｡ここでは､ "
"``versionadded`` の書き方についてや､ ドキュメントのコピーをローカルでビルドし"
"てみて､ HTML をプレビューする方法などが書かれています｡"

msgid "Previewing your changes"
msgstr "変更点を確認する"

msgid ""
"Now it's time to review the changes made in the branch. To stage all the "
"changes ready for commit, run:"
msgstr ""

msgid ""
"Then display the differences between your current copy of Django (with your "
"changes) and the revision that you initially checked out earlier in the "
"tutorial with:"
msgstr ""
"上により Django のカレントコピー (修正内容を含む) と、チュートリアル冒頭にお"
"いて行っていたチェックアウトリビジョンとの違いが表示されます。"

msgid "Use the arrow keys to move up and down."
msgstr "ページを進めるには上下キーを使います。"

msgid ""
"When you're done previewing the changes, hit the ``q`` key to return to the "
"command line. If the diff looked okay, it's time to commit the changes."
msgstr ""

msgid "Committing the changes"
msgstr ""

msgid "To commit the changes:"
msgstr "変更点をコミットするには、次のコマンドを実行します。"

msgid ""
"This opens up a text editor to type the commit message. Follow the :ref:"
"`commit message guidelines <committing-guidelines>` and write a message like:"
msgstr ""
"すると、コミットメッセージを入力するためのテキストエディタが開きます。 :ref:`"
"コミットメッセージガイドライン <committing-guidelines>` に従って、次のように"
"メッセージを入力します。"

msgid "Pushing the commit and making a pull request"
msgstr "コミットのプッシュとプルリクエストの作成"

msgid ""
"After committing the changes, send it to your fork on GitHub (substitute "
"\"ticket_99999\" with the name of your branch if it's different):"
msgstr ""

msgid ""
"You can create a pull request by visiting the `Django GitHub page <https://"
"github.com/django/django/>`_. You'll see your branch under \"Your recently "
"pushed branches\". Click \"Compare & pull request\" next to it."
msgstr ""
"プルリクエストは `Django の GitHub ページ <https://github.com/django/django/"
">`_ から作成できます。\"Your recently pushed branches\" の下にあなたのブラン"
"チが表示されているはずです。その下の \"Compare & pull request\" ボタンをク"
"リックします。"

msgid ""
"Please don't do it for this tutorial, but on the next page that displays a "
"preview of the changes, you would click \"Create pull request\"."
msgstr ""

msgid "Next steps"
msgstr "次のステップ"

msgid ""
"Congratulations, you've learned how to make a pull request to Django! "
"Details of more advanced techniques you may need are in :doc:`/internals/"
"contributing/writing-code/working-with-git`."
msgstr ""
"おめでとうございます！ これで Django へのプルリクエストの作成方法を学ぶことが"
"できました。応用テクニックについて詳しくは :doc:`/internals/contributing/"
"writing-code/working-with-git` を読んでください。"

msgid ""
"Now you can put those skills to good use by helping to improve Django's "
"codebase."
msgstr ""
"これで、Django のコードベースを改良する手助けができるようになりました。"

msgid "More information for new contributors"
msgstr "新しいコントリビューターのための追加情報"

msgid ""
"Before you get too into contributing to Django, there's a little more "
"information on contributing that you should probably take a look at:"
msgstr ""

msgid ""
"You should make sure to read Django's documentation on :doc:`claiming "
"tickets and submitting pull requests </internals/contributing/writing-code/"
"submitting-patches>`. It covers Trac etiquette, how to claim tickets for "
"yourself, expected coding style (both for code and docs), and many other "
"important details."
msgstr ""

msgid ""
"First time contributors should also read Django's :doc:`documentation for "
"first time contributors</internals/contributing/new-contributors/>`. It has "
"lots of good advice for those of us who are new to helping out with Django."
msgstr ""
"Django への初めてのコントリビューターは :doc:`初めてのコントリビューターへの"
"ドキュメント </internals/contributing/new-contributors/>` を読んでください｡"
"Django に初めて協力する人たちへの良いアドバイスがあります｡"

msgid ""
"After those, if you're still hungry for more information about contributing, "
"you can always browse through the rest of :doc:`Django's documentation on "
"contributing</internals/contributing/index>`. It contains a ton of useful "
"information and should be your first source for answering any questions you "
"might have."
msgstr ""
"貢献について､より多くの情報を知りたいなら､ :doc:`貢献についての Django のド"
"キュメント </internals/contributing/index>` を参照してください｡そこにはたくさ"
"ん有用な情報がありまし､質問があれば､このドキュメントが1番役に立ちます｡"

msgid "Finding your first real ticket"
msgstr "実際にチケットを探してみましょう"

msgid ""
"Once you've looked through some of that information, you'll be ready to go "
"out and find a ticket of your own to contribute to. Pay special attention to "
"tickets with the \"easy pickings\" criterion. These tickets are often much "
"simpler in nature and are great for first time contributors. Once you're "
"familiar with contributing to Django, you can start working on more "
"difficult and complicated tickets."
msgstr ""

msgid ""
"If you just want to get started already (and nobody would blame you!), try "
"taking a look at the list of `easy tickets without a branch`__ and the `easy "
"tickets that have branches which need improvement`__. If you're familiar "
"with writing tests, you can also look at the list of `easy tickets that need "
"tests`__. Remember to follow the guidelines about claiming tickets that were "
"mentioned in the link to Django's documentation on :doc:`claiming tickets "
"and submitting branches </internals/contributing/writing-code/submitting-"
"patches>`."
msgstr ""

msgid "What's next after creating a pull request?"
msgstr "プルリクエストを作ったあとは？"

msgid ""
"After a ticket has a branch, it needs to be reviewed by a second set of "
"eyes. After submitting a pull request, update the ticket metadata by setting "
"the flags on the ticket to say \"has patch\", \"doesn't need tests\", etc, "
"so others can find it for review. Contributing doesn't necessarily always "
"mean writing code from scratch. Reviewing open pull requests is also a very "
"helpful contribution. See :doc:`/internals/contributing/triaging-tickets` "
"for details."
msgstr ""

msgid "Getting started"
msgstr "さぁ始めましょう"

msgid ""
"New to Django? Or to web development in general? Well, you came to the right "
"place: read this material to quickly get up and running."
msgstr ""
"Django や web 開発全般は初めてですか？ それなら、ここに来て正解ですね。ここに"
"あるドキュメントを読んで、行動に移してみましょう。"

msgid ""
"If you're new to Python_, you might want to start by getting an idea of what "
"the language is like. Django is 100% Python, so if you've got minimal "
"comfort with Python you'll probably get a lot more out of Django."
msgstr ""
"Python_ の初心者なら、まず Python がどんなものかを知ることから始めましょう。 "
"Django は 100% Python です。 ほんの最小限 Python を理解するだけで Django をよ"
"り深く理解できます。"

msgid ""
"If you're new to programming entirely, you might want to start with this "
"`list of Python resources for non-programmers`_"
msgstr ""
"プログラミング全般の初心者なら、 `非プログラマのための Python リソース一覧`_ "
"から始めてみるとよいでしょう。"

msgid ""
"If you already know a few other languages and want to get up to speed with "
"Python quickly, we recommend referring the official `Python documentation`_, "
"which provides comprehensive and authoritative information about the "
"language, as well as links to other resources such as a list of `books about "
"Python`_."
msgstr ""
"他の言語をすでにいくつか知っていて、Pythonを素早く使いこなしたい場合は、言語"
"に関する網羅的で権威ある情報を提供する公式の `Python documentation`_ を参照す"
"るのをお勧めします。また、 `books about Python`_ のリストなど、他のリソースへ"
"のリンクもあります。"

msgid "Quick install guide"
msgstr "クイックインストールガイド"

msgid ""
"Before you can use Django, you'll need to get it installed. We have a :doc:"
"`complete installation guide </topics/install>` that covers all the "
"possibilities; this guide will guide you to a minimal installation that'll "
"work while you walk through the introduction."
msgstr ""
"Django を使う前に、インストールする必要があります。 Django にはできることすべ"
"てを網羅した :doc:`コンプリートインストールガイド </topics/install>` がありま"
"す。ここでは、Django の導入部分での最低限のインストールについて説明します。"

msgid "Install Python"
msgstr "Python をインストールする"

msgid ""
"Being a Python web framework, Django requires Python. See :ref:`faq-python-"
"version-support` for details. Python includes a lightweight database called "
"SQLite_ so you won't need to set up a database just yet."
msgstr ""
"Django は Python の W​​eb フレームワークなので、 Django を使うには Python が必"
"要です。詳細については、 :ref:`faq-python-version-support`  を見てください。 "
"Python には SQLite_ という軽量のデータベースが含まれているので、データベース"
"を設定する必要はまだありません。"

msgid ""
"Get the latest version of Python at https://www.python.org/downloads/ or "
"with your operating system's package manager."
msgstr ""
"最新版のPythonを https://www.python.org/downloads/ もしくはOSのパッケージ管理"
"ツールで取得してください。"

msgid ""
"You can verify that Python is installed by typing ``python`` from your "
"shell; you should see something like:"
msgstr ""
"Python がインストールされてるかを確かめるには ``python`` とシェルでタイプしま"
"す。このように表示されるはずです::"

msgid "Set up a database"
msgstr "データベースを設定する"

msgid ""
"This step is only necessary if you'd like to work with a \"large\" database "
"engine like PostgreSQL, MariaDB, MySQL, or Oracle. To install such a "
"database, consult the :ref:`database installation information <database-"
"installation>`."
msgstr ""
"このステップは、PostgreSQL、MariaDB、MySQL、Oracle のような \"大きな\" データ"
"ベースエンジンを使いたい場合のみ必要です。これらのデータベースをインストール"
"するには、 :ref:`データベースのインストール方法<database-installation>` を参"
"照してください。"

msgid "Install Django"
msgstr "Django をインストールする"

msgid "You've got three options to install Django:"
msgstr "Django をインストールするには、3つの選択肢があります:"

msgid ""
":ref:`Install an official release <installing-official-release>`. This is "
"the best approach for most users."
msgstr ""
":ref:`オフィシャルリリースをインストールする <installing-official-"
"release>` 。これは多くのユーザで良い方法です。"

msgid ""
"Install a version of Django :ref:`provided by your operating system "
"distribution <installing-distribution-package>`."
msgstr ""
":ref:`オペレーティングシステムのディストリビューションで提供されている "
"<installing-distribution-package>` バージョンの Django をインストールする。"

msgid ""
":ref:`Install the latest development version <installing-development-"
"version>`. This option is for enthusiasts who want the latest-and-greatest "
"features and aren't afraid of running brand new code. You might encounter "
"new bugs in the development version, but reporting them helps the "
"development of Django. Also, releases of third-party packages are less "
"likely to be compatible with the development version than with the latest "
"stable release."
msgstr ""
":ref:`最新の開発版をインストールする <installing-development-version>` 。この"
"選択肢は、最新の素晴らしい機能を利用したくて、かつ書きたてのコードを実行する"
"ことに抵抗のない、 Django 大好きな人のためのものです。開発版では新しいバグに"
"遭遇するかもしれません。しかしそれらを報告すれば Django の開発を助けることが"
"できます。また、サードパーティ製のパッケージは（最新の安定版に比べると）開発"
"版と互換性がある可能性は低いです。"

msgid ""
"Always refer to the documentation that corresponds to the version of Django "
"you're using!"
msgstr ""
"ドキュメントを参照するときは常に、使用している Django のバージョンに対応する"
"ものを参照してください！"

msgid ""
"If you do either of the first two steps, keep an eye out for parts of the "
"documentation marked **new in development version**. That phrase flags "
"features that are only available in development versions of Django, and they "
"likely won't work with an official release."
msgstr ""
"初め 2 ステップのどちらかをした場合は、ドキュメントの **new in development "
"version** とマークされた部分に気をつけてください。このフレーズが付いている機"
"能は Django の開発版でのみ利用可能な機能であり、公式リリースではおそらく動作"
"しません。"

msgid "Verifying"
msgstr "動作確認"

msgid ""
"To verify that Django can be seen by Python, type ``python`` from your "
"shell. Then at the Python prompt, try to import Django:"
msgstr ""
"Django が Python から見れるか確認をするには、シェルで ``python`` とタイプし"
"て、 Python プロンプトから Django をインポートします:"

msgid "You may have another version of Django installed."
msgstr "別バージョンの Django がインストールされているかもしれません。"

msgid "That's it!"
msgstr "これだけです！"

msgid ""
"That's it -- you can now :doc:`move onto the tutorial </intro/tutorial01>`."
msgstr ""
"これだけです。 :doc:`チュートリアルに進みましょう </intro/tutorial01>` 。"

msgid "Django at a glance"
msgstr "Django の概要"

msgid ""
"Because Django was developed in a fast-paced newsroom environment, it was "
"designed to make common web development tasks fast and easy. Here's an "
"informal overview of how to write a database-driven web app with Django."
msgstr ""
"Django は変転の激しいニュースルーム環境で開発された経緯から、よくある Web 開"
"発タスクを迅速かつ簡単化するように設計されています。ここでは Django による "
"データベースを使った Web アプリケーション開発をざっと見てみましょう。"

msgid ""
"The goal of this document is to give you enough technical specifics to "
"understand how Django works, but this isn't intended to be a tutorial or "
"reference -- but we've got both! When you're ready to start a project, you "
"can :doc:`start with the tutorial </intro/tutorial01>` or :doc:`dive right "
"into more detailed documentation </topics/index>`."
msgstr ""
"このドキュメントの目的は、 Django の技術的な仕様について述べ、どのように動作"
"するかを理解してもらうことにあり、チュートリアルやリファレンスではあり ませ"
"ん。 (とはいえ、チュートリアルもリファレンスも別に用意していますよ！) プロ"
"ジェクトを作成する準備ができたら、 :doc:`チュートリアルを始める </intro/"
"tutorial01>` ことも、 :doc:`より詳細なドキュメントを読む </topics/index>` こ"
"ともできます。"

msgid "Design your model"
msgstr "モデルの設計"

msgid ""
"Although you can use Django without a database, it comes with an `object-"
"relational mapper`_ in which you describe your database layout in Python "
"code."
msgstr ""
"データベースなしで Django を使うこともできますが、 Django には Python コード"
"でデータベースのレイアウトを記述した `オブジェクトリレーショナルマッパー`_ "
"(object-relational mapper) が付属しています。"

msgid ""
"The :doc:`data-model syntax </topics/db/models>` offers many rich ways of "
"representing your models -- so far, it's been solving many years' worth of "
"database-schema problems. Here's a quick example:"
msgstr ""
":doc:`データモデル構文 </topics/db/models>` ではモデルを表現するさまざまな方"
"法が提供されています。これまでのところ、長年におけるデータベーススキーマの問"
"題を解決してきた実績があります。 簡単な例を示しましょう:"

msgid "``news/models.py``"
msgstr ""

msgid "Install it"
msgstr "モデルのインストール"

msgid ""
"Next, run the Django command-line utilities to create the database tables "
"automatically:"
msgstr ""
"次に、データベーステーブルを自動で作成する Django のコマンドラインユーティリ"
"ティを実行します。"

msgid ""
"The :djadmin:`makemigrations` command looks at all your available models and "
"creates migrations for whichever tables don't already exist. :djadmin:"
"`migrate` runs the migrations and creates tables in your database, as well "
"as optionally providing :doc:`much richer schema control </topics/"
"migrations>`."
msgstr ""
":djadmin:`makemigrations` コマンドは、利用できるモデルを全て見て、まだ作成さ"
"れていないテーブルを作るためのマイグレーションを生成します。:djadmin:"
"`migrate` コマンドは、マイグレーションを実行し、実際にデータベースにテーブル"
"を作成します。また、必要に応じて、:doc:`より強力にスキーマを制御する </"
"topics/migrations>` 機能も提供します。"

msgid "Enjoy the free API"
msgstr "自動生成される API で楽しむ"

msgid ""
"With that, you've got a free, and rich, :doc:`Python API </topics/db/"
"queries>` to access your data. The API is created on the fly, no code "
"generation necessary:"
msgstr ""
"これだけで、制約のない充実した :doc:`Python API </topics/db/queries>` を使っ"
"て自分のデータにアクセスできます。API はオンザフライで生成され、コードを作成"
"する必要はありません:"

msgid ""
"A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr ""
"作業場 (scaffold) ではなく完成品 (whole house) の、動的な admin インタフェー"
"ス"

msgid ""
"Once your models are defined, Django can automatically create a "
"professional, production ready :doc:`administrative interface </ref/contrib/"
"admin/index>` -- a website that lets authenticated users add, change and "
"delete objects. The only step required is to register your model in the "
"admin site:"
msgstr ""
"モデルが定義されると、Django は自動的にプロ仕様の本番仕様の :doc:`管理イン"
"ターフェース </ref/contrib/admin/index>` -- 認証されたユーザがオブジェクトを"
"追加、変更、削除できるウェブサイトを作成できます。必要なステップは、管理サイ"
"トにモデルを登録することだけです。:"

msgid "``news/admin.py``"
msgstr ""

msgid ""
"The philosophy here is that your site is edited by a staff, or a client, or "
"maybe just you -- and you don't want to have to deal with creating backend "
"interfaces only to manage content."
msgstr ""
"サイトの編集はスタッフ、顧客、もしくはあなた自身の手で行われるものであり、 コ"
"ンテンツの管理だけのためにバックエンドインタフェースを作りたくはない、という"
"思想がここにはあります。"

msgid ""
"One typical workflow in creating Django apps is to create models and get the "
"admin sites up and running as fast as possible, so your staff (or clients) "
"can start populating data. Then, develop the way data is presented to the "
"public."
msgstr ""
"Django アプリケーションを作成するときの典型的なワークフローは、 モデルを作成"
"し、 admin サイトを組み上げてできるだけ早期に立ち上げ、スタッフ (や顧客) が"
"データを投入できるようにしておいてから、データを公開するための方法を開発して"
"ゆくというものです。"

msgid "Design your URLs"
msgstr "URL を設計する"

msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality web "
"application. Django encourages beautiful URL design and doesn't put any "
"cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""
"すっきりとして洗練された URL スキームは、高品質な Web アプリケーションを実現"
"する上で重要な要素です。 Django は美しい URL の設計を助け、 ``.php`` や ``."
"asp`` のような粗雑な部分を URL に入れさせません。"

msgid ""
"To design URLs for an app, you create a Python module called a :doc:`URLconf "
"</topics/http/urls>`. A table of contents for your app, it contains a "
"mapping between URL patterns and Python callback functions. URLconfs also "
"serve to decouple URLs from Python code."
msgstr ""
"アプリケーションの URL を設計するには、 :doc:`URLconf </topics/http/urls>` と"
"呼ばれる Python モジュールを一つ作成します。 URLconf はいわばアプリケーション"
"の目次にあたり、 URL のパターンと Python のコールバック関数とを対応づけていま"
"す。 URLconf はまた、 URL と Python コードを疎結合にする働きも持っています。"

msgid ""
"Here's what a URLconf might look like for the ``Reporter``/``Article`` "
"example above:"
msgstr "``Reporter``/``Article`` の例では、 URLconf は以下のようになります:"

msgid "``news/urls.py``"
msgstr ""

msgid ""
"The code above maps URL paths to Python callback functions (\"views\"). The "
"path strings use parameter tags to \"capture\" values from the URLs. When a "
"user requests a page, Django runs through each path, in order, and stops at "
"the first one that matches the requested URL. (If none of them matches, "
"Django calls a special-case 404 view.) This is blazingly fast, because the "
"paths are compiled into regular expressions at load time."
msgstr ""
"上のコードは、 URL パスを Python のコールバック関数(\"views\")にマッピングし"
"ています。 パス文字列は、パラメータタグを使用して URL から値を取得します。 "
"ユーザがページをリクエストすると、Django は各パスを順番に実行し、要求された "
"URL に最初に一致したパスで停止します。 (それらのどれとも一致しない場合、"
"Django は特殊なケースである404ビューを呼び出します。)パスはロード時に正規表現"
"にコンパイルされるので、これらは非常に高速に動作します。"

msgid ""
"Once one of the URL patterns matches, Django calls the given view, which is "
"a Python function. Each view gets passed a request object -- which contains "
"request metadata -- and the values captured in the pattern."
msgstr ""
"URL パターンの1つが一致すると、Django は与えられたビューを呼び出します。これ"
"は Python の関数です。 各ビューは、リクエストのメタデータを含むリクエストオブ"
"ジェクトと、パターンで捉えられた値を渡します。"

msgid ""
"For example, if a user requested the URL \"/articles/2005/05/39323/\", "
"Django would call the function ``news.views.article_detail(request, "
"year=2005, month=5, pk=39323)``."
msgstr ""
"例えば、ユーザが \"/articles/2005/05/39323/\" という URL をリクエストする"
"と、 Django は ``news.views.article_detail(request, year=2005, month=5, "
"pk=39323)`` のような関数呼び出しを行います。"

msgid "Write your views"
msgstr "ビューの自作"

msgid ""
"Each view is responsible for doing one of two things: Returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :class:`~django.http.Http404`. The "
"rest is up to you."
msgstr ""
"各ビューには二つの役割があります: 一つはリクエストされたページのコンテンツを"
"含む :class:`~django.http.HttpResponse` オブジェクトを返すこと、もう一つは :"
"class:`~django.http.Http404` のような例外の送出です。それ以外の処理はユーザ次"
"第です。"

msgid ""
"Generally, a view retrieves data according to the parameters, loads a "
"template and renders the template with the retrieved data. Here's an example "
"view for ``year_archive`` from above:"
msgstr ""
"一般的に、ビューはパラメーターに従ってデータベースからデータを取り出し、テン"
"プレートをロードして、取り出したデータでテンプレートをレンダリングします。 上"
"の ``year_archive`` のビューを例に示しましょう:"

msgid "``news/views.py``"
msgstr ""

msgid ""
"This example uses Django's :doc:`template system </topics/templates>`, which "
"has several powerful features but strives to stay simple enough for non-"
"programmers to use."
msgstr ""
"この例では Django の :doc:`テンプレートシステム </topics/templates>` を使って"
"います。テンプレートシステムは、強力な機能をいくつも備えながらも、非プログラ"
"マが使いこなせる程度に簡単な仕組みです。"

msgid "Design your templates"
msgstr "テンプレートを設計する"

msgid "The code above loads the ``news/year_archive.html`` template."
msgstr ""
"上のコードでは ``news/year_archive.html`` という名前のテンプレートをロー ドし"
"ています。"

msgid ""
"Django has a template search path, which allows you to minimize redundancy "
"among templates. In your Django settings, you specify a list of directories "
"to check for templates with :setting:`DIRS <TEMPLATES-DIRS>`. If a template "
"doesn't exist in the first directory, it checks the second, and so on."
msgstr ""
"Django はテンプレートの重複を最小限にする為に、テンプレートの検索パスを持って"
"います。Djangoの設定ファイルの中で、テンプレートをチェックする :setting:"
"`DIRS <TEMPLATES-DIRS>` にディレクトリのリストを指定します。最初のディレクト"
"リにテンプレートが存在しなかった場合、2番目をチェックし、以降も同様にチェック"
"が続きます。"

msgid ""
"Let's say the ``news/year_archive.html`` template was found. Here's what "
"that might look like:"
msgstr ""
"さて、 ``news/year_archive.html`` が見つかったとしましょう。テンプレートは以"
"下のように書かれています:"

msgid "``news/templates/news/year_archive.html``"
msgstr ""

msgid ""
"Variables are surrounded by double-curly braces. ``{{ article.headline }}`` "
"means \"Output the value of the article's headline attribute.\" But dots "
"aren't used only for attribute lookup. They also can do dictionary-key "
"lookup, index lookup and function calls."
msgstr ""
"変数は二重の波括弧で囲まれています。 ``{{ article.headline }}`` は、"
"「article の headline という属性の出力」を表しています。とはいえ、ドット表記"
"は属性の検索に使われるだけではありません。辞書の検索や、インデクス指定、関数"
"呼び出しも行えます。"

msgid ""
"Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style "
"\"pipe\" (the \"|\" character). This is called a template filter, and it's a "
"way to filter the value of a variable. In this case, the date filter formats "
"a Python datetime object in the given format (as found in PHP's date "
"function)."
msgstr ""
"``{{ article.pub_date|date:\"F j, Y\" }}`` で、 Unix スタイルの「パイプ」 (文"
"字 “|”) を使っていることに注意して下さい。これはテンプレートフィルターと呼ば"
"れ、変数の値にフィルターをかけるためのものです。この例では、フィルタによって "
"Python の datetime オブジェクトを指定の形式にフォーマットしています (PHP の "
"date 関数に似ていますね) 。"

msgid ""
"You can chain together as many filters as you'd like. You can write :ref:"
"`custom template filters <howto-writing-custom-template-filters>`. You can "
"write :doc:`custom template tags </howto/custom-template-tags>`, which run "
"custom Python code behind the scenes."
msgstr ""
"フィルターはいくつでも好きなだけ繋げることが出来ます。また、独自の Python "
"コードを実行する :ref:`カスタムテンプレートフィルタ <howto-writing-custom-"
"template-filters>` や :doc:`カスタムテンプレートタグ</howto/custom-template-"
"tags>` を書くことも出来ます。"

msgid ""
"Finally, Django uses the concept of \"template inheritance\". That's what "
"the ``{% extends \"base.html\" %}`` does. It means \"First load the template "
"called 'base', which has defined a bunch of blocks, and fill the blocks with "
"the following blocks.\" In short, that lets you dramatically cut down on "
"redundancy in templates: each template has to define only what's unique to "
"that template."
msgstr ""
"最後に、 Django にはテンプレートの継承という概念があります。 継承を宣言してい"
"るのは ``{% extends \"base.html\" %}`` の部分です。このタグは「まず ‘base’ と"
"いうテンプレートをロードせよ。このテンプレートにはいくつかのブロックが定義さ"
"れているが、それらのブロックの中身を以下のブロック定義で埋めよ」という命令で"
"す。要するに、テンプレートを継承すると、各テンプレートごとに固有の定義だけを"
"記述すればよくなり、テンプレート間の冗長性が劇的に減るのです。"

msgid ""
"Here's what the \"base.html\" template, including the use of :doc:`static "
"files </howto/static-files/index>`, might look like:"
msgstr ""
"ここでよくある“base.html” テンプレートで、 :doc:`静的ファイルの配信 </howto/"
"static-files/index>` を含む例をあげます:"

msgid "``templates/base.html``"
msgstr ""

msgid ""
"Simplistically, it defines the look-and-feel of the site (with the site's "
"logo), and provides \"holes\" for child templates to fill. This means that a "
"site redesign can be done by changing a single file -- the base template."
msgstr ""
"簡単に言えば、サイトのルックアンドフィール（サイトのロゴ）を定義し、子テンプ"
"レートが埋めるための「穴」を提供します。つまり、サイトの再設計は、ベーステン"
"プレートという1つのファイルを変更するだけで行うことができます。"

msgid ""
"It also lets you create multiple versions of a site, with different base "
"templates, while reusing child templates. Django's creators have used this "
"technique to create strikingly different mobile versions of sites by only "
"creating a new base template."
msgstr ""
"また、子テンプレートを再利用しながら、異なるベーステンプレートで複数のバー"
"ジョンのサイトを作成することもできます。Django の作者はこのテクニックを使っ"
"て、新しいベーステンプレートを作成するだけで、印象的に異なるモバイルバージョ"
"ンのサイトを作成しています。"

msgid ""
"Note that you don't have to use Django's template system if you prefer "
"another system. While Django's template system is particularly well-"
"integrated with Django's model layer, nothing forces you to use it. For that "
"matter, you don't have to use Django's database API, either. You can use "
"another database abstraction layer, you can read XML files, you can read "
"files off disk, or anything you want. Each piece of Django -- models, views, "
"templates -- is decoupled from the next."
msgstr ""
"他のシステムを使いたければ、必ずしも Django のテンプレートシステムを使う必要"
"はないということに注意してください。 Django のテンプレートシステムは Django "
"のモデルレイヤと部分的にしっかり組み合わさっていますが、絶対に使わねばならな"
"いということではありません。さらに言えば、 Django のデータベース API を使う必"
"然性もありません。別のデータベース抽象化レイヤを使っても構いませんし、 XML "
"ファイルやディスク上のファイルを読み込んでも構いません。何でもやりたいことを"
"できるのです。Django の構成要素 – モデル、ビュー、テンプレー ト – は、互いに"
"切り離して利用できるのです。"

msgid "This is just the surface"
msgstr "これらはほんの一部にすぎません"

msgid ""
"This has been only a quick overview of Django's functionality. Some more "
"useful features:"
msgstr ""
"以上、 Django の機能についてざっと紹介してきました。 Django は他にもまだまだ"
"便利な機能を備えています:"

msgid ""
"A :doc:`caching framework </topics/cache>` that integrates with memcached or "
"other backends."
msgstr ""
"memcached などのバックエンドを組み込んだ  :doc:`キャッシュフレームワーク </"
"topics/cache>` 。"

msgid ""
"A :doc:`syndication framework </ref/contrib/syndication>` that lets you "
"create RSS and Atom feeds by writing a small Python class."
msgstr ""
"Pythonの小さなクラスを書くことでRSSやAtomフィードを作成できる :doc:`配信 "
"(syndication) フレームワーク </ref/contrib/syndication>` 。"

msgid ""
"More attractive automatically-generated admin features -- this overview "
"barely scratched the surface."
msgstr ""
"自動生成される admin の魅力的な機能の数々。ここで紹介したのはほんの表層の一部"
"でしかありません。"

msgid ""
"The next steps are for you to `download Django`_, read :doc:`the tutorial </"
"intro/tutorial01>` and join `the community`_. Thanks for your interest!"
msgstr ""
"次のステップは `Django`_ をダウンロードし、 :doc:`チュートリアル </intro/"
"tutorial01>` を読み、 `コミュニティに参加する`_ ことです。ご興味を持っていた"
"だきありがとうございました。"

msgid "Advanced tutorial: How to write reusable apps"
msgstr "高度なチュートリアル: 再利用可能アプリの書き方"

msgid ""
"This advanced tutorial begins where :doc:`Tutorial 8 </intro/tutorial08>` "
"left off. We'll be turning our web-poll into a standalone Python package you "
"can reuse in new projects and share with other people."
msgstr ""
"この高度なチュートリアルは、:doc:`チュートリアル その8 </intro/tutorial08>` "
"が終わったところから始まります。Web投票アプリケーションを、新しいプロジェクト"
"で再利用でき、他の人に共有できる独立した Python のパッケージへと変えていきま"
"しょう。"

msgid ""
"If you haven't recently completed Tutorials 1–7, we encourage you to review "
"these so that your example project matches the one described below."
msgstr ""
"直近のチュートリアル 1 - 7 が終わっていないなら、一目通すことをおすすめしま"
"す。例で作ったプロジェクトが以下の説明でも使われるからです。"

msgid "Reusability matters"
msgstr "再利用性の問題"

msgid ""
"It's a lot of work to design, build, test and maintain a web application. "
"Many Python and Django projects share common problems. Wouldn't it be great "
"if we could save some of this repeated work?"
msgstr ""
"Web アプリケーションの設計、開発、テスト、そしてメンテナンスには多大な労力が"
"必要です。そして多くの Python プロジェクト、 Django プロジェクトは共通の問題"
"を抱えています。この繰り返し作業を減らせたら良いと思いませんか？"

msgid ""
"Reusability is the way of life in Python. `The Python Package Index (PyPI) "
"<https://pypi.org/>`_ has a vast range of packages you can use in your own "
"Python programs. Check out `Django Packages <https://djangopackages.org>`_ "
"for existing reusable apps you could incorporate in your project. Django "
"itself is also a normal Python package. This means that you can take "
"existing Python packages or Django apps and compose them into your own web "
"project. You only need to write the parts that make your project unique."
msgstr ""
"再利用可能性はPythonの生き様とも言えるものです。`Python Package Index (PyPI) "
"<https://pypi.org/>`_ にはあなたの Pythonプログラムに使用できる非常に幅広い"
"パッケージが揃っています。あなたのプロジェクトに組み込むことのできる再利用可"
"能なアプリについては、`Django Packages <https://djangopackages.org>`_ を見て"
"みてください。Django そのものも、普通のPython パッケージのひとつです。あなた"
"は既存のPythonパッケージや Django アプリを選んで、自分の Web プロジェクトに組"
"み込むことができます。つまり、あなたは自分のプロジェクトに特有の部分にだけ取"
"り組めば良いのです。"

msgid ""
"Let's say you were starting a new project that needed a polls app like the "
"one we've been working on. How do you make this app reusable? Luckily, "
"you're well on the way already. In :doc:`Tutorial 1 </intro/tutorial01>`, we "
"saw how we could decouple polls from the project-level URLconf using an "
"``include``. In this tutorial, we'll take further steps to make the app easy "
"to use in new projects and ready to publish for others to install and use."
msgstr ""
"例えば、投票アプリケーション（ちょうど今まで作ってきたものと似たようなもの）"
"を必要とするプロジェクトを新しく開始したとしましょう。どうやって投票アプリ"
"ケーションを再利用可能にしますか？運のいいことに、その方法はすでに会得済みで"
"す。 :doc:`チュートリアル1 </intro/tutorial01>` では、 ``include`` を使ってプ"
"ロジェクトレベルの URLconf から投票アプリを分離する方法を学びました。この"
"チュートリアルでは、アプリケーションを新規のプロジェクトで使いやすいように"
"し、いつでも別の場所でインストール/利用できるようにします。"

msgid "Package? App?"
msgstr "パッケージ？アプリ？"

msgid ""
"A Python :term:`package` provides a way of grouping related Python code for "
"easy reuse. A package contains one or more files of Python code (also known "
"as \"modules\")."
msgstr ""
"Python の :term:`package` を使うと、関連する Python コードをまとめて再利用し"
"やすいようにできます。パッケージは、 Python コードのファイル ( 通称 \"モ"
"ジュール\" ) を１つ以上含みます。"

msgid ""
"A package can be imported with ``import foo.bar`` or ``from foo import "
"bar``. For a directory (like ``polls``) to form a package, it must contain a "
"special file ``__init__.py``, even if this file is empty."
msgstr ""
"パッケージは ``import foo.bar`` または ``from foo import bar`` でインポートで"
"きます。パッケージ内のディレクトリ (例えば ``polls``) は ``__init__.py`` とい"
"う特殊なファイルを、空のファイルでもいいので含む必要があります。"

msgid ""
"A Django *application* is a Python package that is specifically intended for "
"use in a Django project. An application may use common Django conventions, "
"such as having ``models``, ``tests``, ``urls``, and ``views`` submodules."
msgstr ""
"Django *アプリケーション* は単なる Python パッケージで、 Django プロジェクト"
"で使うことのみを意図したものです。アプリは一般的な Django の慣例に則っている"
"でしょう。例えば ``models`` 、 ``tests`` 、 ``urls`` 、 ``views`` のサブモ"
"ジュールがあること、などです。"

msgid ""
"Later on we use the term *packaging* to describe the process of making a "
"Python package easy for others to install. It can be a little confusing, we "
"know."
msgstr ""
"後に *パッケージング* という言葉を、他の人がインストールしやすいように "
"Python パッケージを作るプロセスを表すのに用います。少し混乱するかもしれません"
"ね。"

msgid "Your project and your reusable app"
msgstr "プロジェクトと再利用可能アプリ"

msgid "After the previous tutorials, our project should look like this:"
msgstr ""
"前のチュートリアルを終えると、プロジェクトはこのようになっているはずです::"

msgid ""
"You created ``djangotutorial/templates`` in :doc:`Tutorial 7 </intro/"
"tutorial07>`, and ``polls/templates`` in :doc:`Tutorial 3 </intro/"
"tutorial03>`. Now perhaps it is clearer why we chose to have separate "
"template directories for the project and application: everything that is "
"part of the polls application is in ``polls``. It makes the application self-"
"contained and easier to drop into a new project."
msgstr ""

msgid ""
"The ``polls`` directory could now be copied into a new Django project and "
"immediately reused. It's not quite ready to be published though. For that, "
"we need to package the app to make it easy for others to install."
msgstr ""
"今、 ``polls`` ディレクトリは新規の Django プロジェクトにコピーでき、すぐに再"
"利用できる状態です。しかし公開するための準備が完璧というわけではありません。"
"そのために、アプリをパッケージにして別の場所でインストールしやすいようにする"
"必要があります。"

msgid "Installing some prerequisites"
msgstr "事前に必要な物をインストールする"

msgid ""
"The current state of Python packaging is a bit muddled with various tools. "
"For this tutorial, we're going to use :pypi:`setuptools` to build our "
"package. It's the recommended packaging tool (merged with the ``distribute`` "
"fork). We'll also be using :pypi:`pip` to install and uninstall it. You "
"should install these two packages now. If you need help, you can refer to :"
"ref:`how to install Django with pip<installing-official-release>`. You can "
"install ``setuptools`` the same way."
msgstr ""
"Python のパッケージングの現状は、複数のツールがあることで少しややこしいです。"
"このチュートリアルでは :pypi:`setuptools` をパッケージに使用します。これはお"
"すすめのパッケージングツールです( forkされていた ``distribute`` はマージされ"
"ました)。終わった後にアンインストールするために :pypi:`pip` も使います。今は"
"この 2 つのパッケージをインストールしておいてください。分からなければ :ref:"
"`Django をpip でインストールする <installing-official-release>`. を参照してく"
"ださい。 ``setuptools`` も同じ方法でインストールできます。"

msgid "Packaging your app"
msgstr "アプリケーションをパッケージングする"

msgid ""
"Python *packaging* refers to preparing your app in a specific format that "
"can be easily installed and used. Django itself is packaged very much like "
"this. For a small app like polls, this process isn't too difficult."
msgstr ""
"Python において *パッケージング* とは、特定のフォーマットでアプリを作っておく"
"ことです。このフォーマットは簡単にインストールして使えます。 Django 自体もこ"
"のようにパッケージ化されています。投票アプリのような小さなものでは、このプロ"
"セスはそれほど難しいものではありません。"

msgid ""
"First, create a parent directory for the package, outside of your Django "
"project. Call this directory ``django-polls``."
msgstr ""
"まず、Django プロジェクトの外に、パッケージのための親ディレクトリを作成しま"
"す。以降、このディレクトリを ``django-polls`` と呼びます。"

msgid "Choosing a name for your app"
msgstr "アプリケーションの名前を決める"

msgid ""
"When choosing a name for your package, check PyPI to avoid naming conflicts "
"with existing packages. We recommend using a ``django-`` prefix for package "
"names, to identify your package as specific to Django, and a corresponding "
"``django_`` prefix for your module name. For example, the ``django-"
"ratelimit`` package contains the ``django_ratelimit`` module."
msgstr ""
"パッケージ名を決める際には、既存のパッケージとの名前の衝突を避けるために "
"PyPI をチェックしてください。パッケージ名には Django 固有のパッケージであるこ"
"とを示すために ``django-`` という接頭辞をつけ、モジュール名にはそれに対応す"
"る ``django_`` という接頭辞を付けることを推奨します。例えば、 ``django-"
"ratelimit`` パッケージは ``django_ratelimit`` モジュールを含んでいます。"

msgid ""
"Application labels (that is, the final part of the dotted path to "
"application packages) *must* be unique in :setting:`INSTALLED_APPS`. Avoid "
"using the same label as any of the Django :doc:`contrib packages </ref/"
"contrib/index>`, for example ``auth``, ``admin``, or ``messages``."
msgstr ""
"アプリケーションラベル (すなわち、アプリケーションパッケージへのパス（ドット"
"区切り）の最後の部分) は :setting:`INSTALLED_APPS` の中で *必ず* ユニークでな"
"ければなりません。 ``auth`` 、 ``admin`` 、 ``messages`` のようなDjango :doc:"
"`contrib packages </ref/contrib/index>` と同じラベルを使うことは避けてくださ"
"い。"

msgid ""
"Move the ``polls`` directory into ``django-polls`` directory, and rename it "
"to ``django_polls``."
msgstr ""
"``polls`` ディレクトリを ``django-polls`` ディレクトリに移動し、名前を "
"``django_polls`` に変更します。"

msgid ""
"Edit ``django_polls/apps.py`` so that :attr:`~.AppConfig.name` refers to the "
"new module name and add :attr:`~.AppConfig.label` to give a short name for "
"the app:"
msgstr ""
"``django_polls/apps.py`` を編集して :attr:`~.AppConfig.name` が新しいモジュー"
"ル名を指すようにし、 :attr:`~.AppConfig.label` を追加してアプリの短い名前を付"
"けます:"

msgid "``django-polls/django_polls/apps.py``"
msgstr "``django-polls/django_polls/apps.py``"

msgid "Create a file ``django-polls/README.rst`` with the following contents:"
msgstr ""
"以下の内容の ``django-polls/README.rst`` という名前のファイルを作成します:"

msgid "``django-polls/README.rst``"
msgstr "``django-polls/README.rst``"

msgid ""
"Create a ``django-polls/LICENSE`` file. Choosing a license is beyond the "
"scope of this tutorial, but suffice it to say that code released publicly "
"without a license is *useless*. Django and many Django-compatible apps are "
"distributed under the BSD license; however, you're free to pick your own "
"license. Just be aware that your licensing choice will affect who is able to "
"use your code."
msgstr ""
"``django-polls/LICENSE`` ファイルを作成します。ライセンスの選択はこのチュート"
"リアルの範疇を超えていますが、ライセンスなしで公にリリースされたコードは *役"
"立たず* であると言えば十分です。 Django と多くの Django 互換アプリケーション"
"はBSDライセンスの元に配布されます。でもどのライセンスを選択するかは自由です。"
"ライセンスの選択は、誰がコードを使え得るかに影響すると注意してください。"

msgid ""
"Next we'll create the ``pyproject.toml`` file which details how to build and "
"install the app. A full explanation of this file is beyond the scope of this "
"tutorial, but the `Python Packaging User Guide <https://packaging.python.org/"
"guides/writing-pyproject-toml/>`_ has a good explanation. Create the "
"``django-polls/pyproject.toml`` file with the following contents:"
msgstr ""

msgid "``django-polls/pyproject.toml``"
msgstr "``django-polls/pyproject.toml``"

msgid ""
"Many common files and Python modules and packages are included in the "
"package by default. To include additional files, we'll need to create a "
"``MANIFEST.in`` file. To include the templates and static files, create a "
"file ``django-polls/MANIFEST.in`` with the following contents:"
msgstr ""

msgid "``django-polls/MANIFEST.in``"
msgstr "``django-polls/MANIFEST.in``"

msgid ""
"It's optional, but recommended, to include detailed documentation with your "
"app. Create an empty directory ``django-polls/docs`` for future "
"documentation."
msgstr ""

msgid ""
"Note that the ``docs`` directory won't be included in your package unless "
"you add some files to it. Many Django apps also provide their documentation "
"online through sites like `readthedocs.org <https://readthedocs.org>`_."
msgstr ""
"``MANIFEST.in`` に対象のファイルを追加しないと ``docs`` ディレクトリがパッ"
"ケージに含まれないことに注意してください。多くの Django アプリではドキュメン"
"トを `readthedocs.org <https://readthedocs.org>`_ のようなサイトを通して提供"
"しています。"

msgid ""
"Check that the :pypi:`build` package is installed (``python -m pip install "
"build``) and try building your package by running ``python -m build`` inside "
"``django-polls``. This creates a directory called ``dist`` and builds your "
"new package into source and binary formats, ``django-polls-0.1.tar.gz`` and "
"``django_polls-0.1-py3-none-any.whl``."
msgstr ""

msgid ""
"For more information on packaging, see Python's `Tutorial on Packaging and "
"Distributing Projects <https://packaging.python.org/tutorials/packaging-"
"projects/>`_."
msgstr ""
"パッケージングに関するより豊富な情報は `プロジェクトのパッケージ化と配布に関"
"するチュートリアル <https://packaging.python.org/tutorials/packaging-"
"projects/>`_ にあります。"

msgid "Using your own package"
msgstr "自分のパッケージを使ってみる"

msgid ""
"Since we moved the ``polls`` directory out of the project, it's no longer "
"working. We'll now fix this by installing our new ``django-polls`` package."
msgstr ""
"``polls`` ディレクトリはプロジェクト外に移動したので、これはもう動きません。"
"代わりにできたての ``django-polls`` パッケージを使ってみましょう。"

msgid "Installing as a user library"
msgstr "ユーザーライブラリとしてインストールする"

msgid ""
"The following steps install ``django-polls`` as a user library. Per-user "
"installs have a lot of advantages over installing the package system-wide, "
"such as being usable on systems where you don't have administrator access as "
"well as preventing the package from affecting system services and other "
"users of the machine."
msgstr ""
"以下のステップは ``django-polls`` をユーザーライブラリとしてインストールする"
"ものです。ユーザー単位でのインストールはシステム全体でのインストールよりも多"
"くの利点があります。管理者アクセス権を持っていないシステム上で使用可能という"
"だけでなく、パッケージがシステムサービスやマシン上の他ユーザーに影響を与える"
"のを防げます。"

msgid ""
"Note that per-user installations can still affect the behavior of system "
"tools that run as that user, so using a virtual environment is a more robust "
"solution (see below)."
msgstr ""
"ユーザーごとのインストールは、そのユーザーとして実行されるシステムツールの動"
"作に影響を与える可能性があるため、仮想環境を使用する方がより堅牢なソリュー"
"ションであることに注意してください（以下を参照）。"

msgid ""
"To install the package, use pip (you already :ref:`installed it <installing-"
"reusable-apps-prerequisites>`, right?):"
msgstr ""
"パッケージをインストールするためには、pip を利用してください (すでに  :ref:`"
"インストール<installing-reusable-apps-prerequisites>` していますよね?):"

msgid "Update ``mysite/settings.py`` to point to the new module name::"
msgstr "新しいモジュール名を指すように ``mysite/settings.py`` を更新します:"

msgid "Update ``mysite/urls.py`` to point to the new module name::"
msgstr "新しいモジュール名を指すように ``mysite/urls.py`` を更新します:"

msgid "Run the development server to confirm the project continues to work."
msgstr ""
"開発サーバーを実行して、プロジェクトが引き続き動作することを確認します。"

msgid "Publishing your app"
msgstr "アプリを公開する"

msgid ""
"Now that we've packaged and tested ``django-polls``, it's ready to share "
"with the world! If this wasn't just an example, you could now:"
msgstr ""
"``django-polls`` のパッケージを作り、テストしました。世界に共有するときです！"
"これが単なる例でなければこうします::"

msgid "Email the package to a friend."
msgstr "パッケージを友人にメールで送る"

msgid "Upload the package on your website."
msgstr "自身の Web サイトにアップロードする"

msgid ""
"Post the package on a public repository, such as `the Python Package Index "
"(PyPI)`_. `packaging.python.org <https://packaging.python.org>`_ has `a good "
"tutorial <https://packaging.python.org/tutorials/packaging-projects/"
"#uploading-the-distribution-archives>`_ for doing this."
msgstr ""
"公開されているリポジトリに投稿する。例えば `the Python Package Index "
"(PyPI)`_. `packaging.python.org <https://packaging.python.org>`_ には `よくで"
"きたチュートリアル <https://packaging.python.org/tutorials/packaging-"
"projects/#uploading-the-distribution-archives>`_ があります。"

msgid "Installing Python packages with a virtual environment"
msgstr "仮想環境でのPythonパッケージのインストール"

msgid ""
"Earlier, we installed ``django-polls`` as a user library. This has some "
"disadvantages:"
msgstr ""
"先ほど、 ``django-polls`` をユーザライブラリとしてインストールしました。これ"
"にはいくつかの欠点があります:"

msgid ""
"Modifying the user libraries can affect other Python software on your system."
msgstr ""
"ユーザーライブラリの変更はシステム上の他の Python ソフトウェアに影響を与える"
"おそれがあります"

msgid ""
"You won't be able to run multiple versions of this package (or others with "
"the same name)."
msgstr ""
"このパッケージの複数バージョン (もしくは同じ名前の別のもの) を実行できません"

msgid ""
"Typically, these situations only arise once you're maintaining several "
"Django projects. When they do, the best solution is to use :doc:`venv "
"<python:tutorial/venv>`. This tool allows you to maintain multiple isolated "
"Python environments, each with its own copy of the libraries and package "
"namespace."
msgstr ""
"通常、このような状況は複数の Django プロジェクトを管理している場合にのみ発生"
"します。このような場合、最良の解決策は :doc:`venv <python:tutorial/venv>` を"
"使うことです。このツールを使うと、複数の分離されたPython環境を管理することが"
"でき、それぞれが独自のライブラリとパッケージの名前空間のコピーを持っていま"
"す。"

msgid "Writing your first Django app, part 1"
msgstr "はじめての Django アプリ作成、その 1"

msgid "Let's learn by example."
msgstr "さあ、例を交えながら学んでゆきましょう。"

msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr ""
"このチュートリアルでは、簡単な投票 (poll) アプリケーションの作成に取り組ん で"
"もらいます。"

msgid "It'll consist of two parts:"
msgstr "Poll アプリケーションは 2 つの部分からなります:"

msgid "A public site that lets people view polls and vote in them."
msgstr "ユーザが投票したり結果を表示したりできる公開用サイト"

msgid "An admin site that lets you add, change, and delete polls."
msgstr "投票項目の追加、変更、削除を行うための管理 (admin) サイト"

msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed and which version by running the following "
"command in a shell prompt (indicated by the $ prefix):"
msgstr ""
":doc:`Django は既にインストール済み </intro/install>` として説明を進めます。"
"Django がインストールされているかどうか、またどのバージョンがインストールされ"
"ているかを調べるには、以下のコマンドをシェルプロンプト（先頭の $ は入力待ちを"
"示す記号です）で実行します。"

msgid ""
"If Django is installed, you should see the version of your installation. If "
"it isn't, you'll get an error telling \"No module named django\"."
msgstr ""
"Django がインストールされていれば、インストールされている Django のバージョン"
"がわかります。もしなければ \"No module named django\" とエラーが表示されま"
"す。"

msgid ""
"This tutorial is written for Django |version|, which supports Python 3.10 "
"and later. If the Django version doesn't match, you can refer to the "
"tutorial for your version of Django by using the version switcher at the "
"bottom right corner of this page, or update Django to the newest version. If "
"you're using an older version of Python, check :ref:`faq-python-version-"
"support` to find a compatible version of Django."
msgstr ""
"このチュートリアルは Python 3.10 以降をサポートする Django |version| 用に書か"
"れています。もし Django のバージョンが一致しない場合は、このページの右下にあ"
"るバージョンスイッチャーを使って、あなたの Django のバージョンのチュートリア"
"ルを参照するか、Django を最新バージョンにアップデートしてください。古いバー"
"ジョンの Python を使っている場合は、 :ref:`faq-python-version-support` を"
"チェックして、互換性のあるバージョンの Django を見つけてください。"

msgid ""
"See :doc:`How to install Django </topics/install>` for advice on how to "
"remove older versions of Django and install a newer one."
msgstr ""
"Django の旧バージョンを削除して新しいものをインストールする場合は、 :doc:"
"`Django のインストール方法 </topics/install>` が参考になるでしょう。"

msgid ""
"If you're having trouble going through this tutorial, please head over to "
"the :doc:`Getting Help</faq/help>` section of the FAQ."
msgstr ""
"このチュートリアルの実行に問題がある場合は、FAQ の :doc:`Getting Help</faq/"
"help>` セクションに進んでください。"

msgid "Creating a project"
msgstr "プロジェクトを作成する"

msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""
"初めて Django を使うのなら、最初のセットアップを行う必要があります。通常は、 "
"Django のプロジェクト (:term:`project`) を構成するコードを自動生成します。プ"
"ロジェクトとは、データベースの設定や Django 固有のオプション、アプリケーショ"
"ン固有の設定などといった、個々の Django インスタンスの設定を集めたものです。"

msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code and create a new directory named ``djangotutorial``. (This "
"directory name doesn't matter to Django; you can rename it to anything you "
"like.)"
msgstr ""

msgid "Then, run the following command to bootstrap a new Django project:"
msgstr ""

msgid ""
"This will create a project called ``mysite`` inside the ``djangotutorial`` "
"directory. If it didn't work, see :ref:`troubleshooting-django-admin`."
msgstr ""

msgid ""
"You'll need to avoid naming projects after built-in Python or Django "
"components. In particular, this means you should avoid using names like "
"``django`` (which will conflict with Django itself) or ``test`` (which "
"conflicts with a built-in Python package)."
msgstr ""
"プロジェクトの名前を付けるとき、組み込みの Python モジュールや Django のコン"
"ポーネントの名前を使わないようにしてください。とりわけ、 ``django`` (Django "
"自体と名前が衝突します) や ``test`` (組み込みの Python パッケージ名と名前が衝"
"突します) を使わないようにしましょう。"

msgid "Let's look at what :djadmin:`startproject` created:"
msgstr ":djadmin:`startproject` が何を作成したかをみてみましょう:"

msgid "These files are:"
msgstr "ファイルはそれぞれ以下のような役割を持っています::"

msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about :file:"
"`manage.py` in :doc:`/ref/django-admin`."
msgstr ""
":file:`manage.py`: Django プロジェクトに対する様々な操作を行うためのコマンド"
"ラインユーティリティです｡詳しくは :doc:`/ref/django-admin` 内の :file:"
"`manage.py` を参照してください｡"

msgid ""
":file:`mysite/`: A directory that is the actual Python package for your "
"project. Its name is the Python package name you'll need to use to import "
"anything inside it (e.g. ``mysite.urls``)."
msgstr ""

msgid ""
":file:`mysite/__init__.py`: An empty file that tells Python that this "
"directory should be considered a Python package. If you're a Python "
"beginner, read :ref:`more about packages <tut-packages>` in the official "
"Python docs."
msgstr ""
":file:`mysite/__init__.py`: このディレクトリが Python パッケージであることを "
"Python に知らせるための空のファイルです。Python の初心者は、 Python の公式ド"
"キュメントの :ref:`more about packages <tut-packages>` を読んで下さい。"

msgid ""
":file:`mysite/settings.py`: Settings/configuration for this Django "
"project.  :doc:`/topics/settings` will tell you all about how settings work."
msgstr ""
":file:`mysite/settings.py`: Django プロジェクトの設定ファイルです。 設定の仕"
"組みは :doc:`/topics/settings` を参照してください。"

msgid ""
":file:`mysite/urls.py`: The URL declarations for this Django project; a "
"\"table of contents\" of your Django-powered site. You can read more about "
"URLs in :doc:`/topics/http/urls`."
msgstr ""
":file:`mysite/urls.py`: Django プロジェクトの URL 宣言、いうなれば Django サ"
"イトにおける「目次」に相当します。詳しくは :doc:`/topics/http/urls` を参照 し"
"てください。"

msgid ""
":file:`mysite/asgi.py`: An entry-point for ASGI-compatible web servers to "
"serve your project. See :doc:`/howto/deployment/asgi/index` for more details."
msgstr ""
":file:`mysite/asgi.py`: プロジェクトをサーブするためのASGI互換Webサーバーとの"
"エントリーポイントです。詳細については :doc:`/howto/deployment/asgi/index` を"
"参照してください。"

msgid ""
":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible web servers to "
"serve your project. See :doc:`/howto/deployment/wsgi/index` for more details."
msgstr ""
":file:`mysite/wsgi.py`: プロジェクトをサーブするためのWSGI互換Webサーバーとの"
"エントリーポイントです。詳細は :doc:`/howto/deployment/wsgi/index` を参照して"
"ください。"

msgid "The development server"
msgstr "開発用サーバー"

msgid ""
"Let's verify your Django project works. Change into the :file:"
"`djangotutorial` directory, if you haven't already, and run the following "
"commands:"
msgstr ""

msgid "You'll see the following output on the command line:"
msgstr "コマンドライン上で下記の出力が確認できるでしょう:"

msgid ""
"Ignore the warning about unapplied database migrations for now; we'll deal "
"with the database shortly."
msgstr ""
"適用されていないデータベースマイグレーションについての警告はここでは無視しま"
"す、後ほどすぐにデータベースとともにたっぷりと取り組みます。"

msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your web "
"browser. You'll see a \"Congratulations!\" page, with a rocket taking off. "
"It worked!"
msgstr ""
"さあ、これでサーバが起動したので、ブラウザで http://127.0.0.1:8000/ にアクセ"
"スしてみてください。 \"Congratulations!\" と表示された、ロケットが離陸してい"
"るページが出るはずです。やりましたね！"

msgid ""
"You've started the Django development server, a lightweight web server "
"written purely in Python. We've included this with Django so you can develop "
"things rapidly, without having to deal with configuring a production server "
"-- such as Apache -- until you're ready for production."
msgstr ""
"これで、 Django 開発サーバを起動しました。 Django 開発サーバは Python だけで"
"書かれた軽量な Web サーバです。このサーバは、開発を迅速に行い、運用に適した状"
"態になるまで Apache のような運用サーバの設定をいじらなくても良いようにするた"
"めのものです。"

msgid ""
"Now's a good time to note: **don't** use this server in anything resembling "
"a production environment. It's intended only for use while developing. "
"(We're in the business of making web frameworks, not web servers.)"
msgstr ""
"ここでちょっと注意しておきましょう。このサーバは開発中の利用だけを考えて作ら"
"れています。絶対に運用環境では **使わないでください** (筆者たちの専門は Web "
"フレームワークであって、Web サーバではありません)。"

msgid ""
"(To serve the site on a different port, see the :djadmin:`runserver` "
"reference.)"
msgstr ""

msgid "Automatic reloading of :djadmin:`runserver`"
msgstr ":djadmin:`runserver` の自動リロード"

msgid ""
"The development server automatically reloads Python code for each request as "
"needed. You don't need to restart the server for code changes to take "
"effect. However, some actions like adding files don't trigger a restart, so "
"you'll have to restart the server in these cases."
msgstr ""
"開発サーバーは必要に応じてリクエストごとにPythonコードを自動的にリロードしま"
"す。コード変更の効果を得るためにサーバーを再起動する必要はありません。しかし"
"ながら、ファイルの追加のようないくつかの行動は再起動をトリガーしません、この"
"ような場合はサーバーを再起動する必要があります。"

msgid "Creating the Polls app"
msgstr "Polls アプリケーションをつくる"

msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start "
"doing work."
msgstr ""
"さあ、これで自分用の環境、すなわちプロジェクトが立ち上がり、作業にとりかかる"
"準備ができました。"

msgid ""
"Each application you write in Django consists of a Python package that "
"follows a certain convention. Django comes with a utility that automatically "
"generates the basic directory structure of an app, so you can focus on "
"writing code rather than creating directories."
msgstr ""
"Django 内に追加する各アプリケーションは、所定の規約に従った Python パッケージ"
"で構成されます。 Django には基本的なディレクトリ構造を自動生成するユーティリ"
"ティが含まれているので、ディレクトリを作ることではなくコードを書くことに集中"
"できます。"

msgid "Projects vs. apps"
msgstr "プロジェクトとアプリケーション"

msgid ""
"What's the difference between a project and an app? An app is a web "
"application that does something -- e.g., a blog system, a database of public "
"records or a small poll app. A project is a collection of configuration and "
"apps for a particular website. A project can contain multiple apps. An app "
"can be in multiple projects."
msgstr ""
"プロジェクトとアプリの違いは何でしょうか？ アプリとは、ブログシステム、公的記"
"録のデータベース、小規模な投票アプリなど、何かを行う Web アプリケーションで"
"す。プロジェクトは、特定のウェブサイトの構成とアプリのコレクションです。プロ"
"ジェクトには複数のアプリを含めることができます。 アプリは複数のプロジェクトに"
"存在できます。"

msgid ""
"Your apps can live anywhere in your :ref:`Python path <tut-searchpath>`. In "
"this tutorial, we'll create our poll app inside the ``djangotutorial`` "
"folder."
msgstr ""

msgid ""
"To create your app, make sure you're in the same directory as :file:`manage."
"py` and type this command:"
msgstr ""
"アプリケーションを作るには、 :file:`manage.py` と同じディレクトリに入って、こ"
"のコマンドを実行します:"

msgid "That'll create a directory :file:`polls`, which is laid out like this:"
msgstr ""
"このコマンドは :file:`polls` というディレクトリを作成します。中身はこのように"
"なっています:"

msgid "This directory structure will house the poll application."
msgstr "このディレクトリ構造が、 poll アプリケーションの全体像です。"

msgid "Write your first view"
msgstr "はじめてのビュー作成"

msgid ""
"Let's write the first view. Open the file ``polls/views.py`` and put the "
"following Python code in it:"
msgstr ""
"最初のビューを書いてみましょう。 ``polls/views.py`` を開いて、以下の Python "
"コードを書いてください:"

msgid "``polls/views.py``"
msgstr "``polls/views.py``"

msgid ""
"This is the most basic view possible in Django. To access it in a browser, "
"we need to map it to a URL - and for this we need to define a URL "
"configuration, or \"URLconf\" for short. These URL configurations are "
"defined inside each Django app, and they are Python files named ``urls.py``."
msgstr ""

msgid ""
"To define a URLconf for the ``polls`` app, create a file ``polls/urls.py`` "
"with the following content:"
msgstr ""

msgid "``polls/urls.py``"
msgstr "``polls/urls.py``"

msgid "Your app directory should now look like:"
msgstr ""

msgid ""
"The next step is to configure the global URLconf in the ``mysite`` project "
"to include the URLconf defined in ``polls.urls``. To do this, add an import "
"for ``django.urls.include`` in ``mysite/urls.py`` and insert an :func:"
"`~django.urls.include` in the ``urlpatterns`` list, so you have:"
msgstr ""

msgid "``mysite/urls.py``"
msgstr "``mysite/urls.py``"

msgid ""
"The :func:`~django.urls.path` function expects at least two arguments: "
"``route`` and ``view``. The :func:`~django.urls.include` function allows "
"referencing other URLconfs. Whenever Django encounters :func:`~django.urls."
"include`, it chops off whatever part of the URL matched up to that point and "
"sends the remaining string to the included URLconf for further processing."
msgstr ""

msgid ""
"The idea behind :func:`~django.urls.include` is to make it easy to plug-and-"
"play URLs. Since polls are in their own URLconf (``polls/urls.py``), they "
"can be placed under \"/polls/\", or under \"/fun_polls/\", or under \"/"
"content/polls/\", or any other path root, and the app will still work."
msgstr ""
":func:`~django.urls.include` の背景にある考えは、 URL を簡単にプラグ & プレイ"
"可能にすることです。 polls には独自の URLconf (``polls/urls.py``) を持ってい"
"るので、 \"/polls/\" 、 \"/fun_polls/\" や、 \"/content/polls/\" といった、ど"
"んなパスルート下にも置けて、どこに置いてもきちんと動作します。"

msgid "When to use :func:`~django.urls.include()`"
msgstr ":func:`~django.urls.include()` を使うとき"

msgid ""
"You should always use ``include()`` when you include other URL patterns. The "
"only exception is ``admin.site.urls``, which is a pre-built URLconf provided "
"by Django for the default admin site."
msgstr ""

msgid ""
"You have now wired an ``index`` view into the URLconf. Verify it's working "
"with the following command:"
msgstr ""
"これで ``index`` ビューを URLconf に紐付けることができました。下記のコマンド"
"を実行して、動作を確認してください:"

msgid ""
"Go to http://localhost:8000/polls/ in your browser, and you should see the "
"text \"*Hello, world. You're at the polls index.*\", which you defined in "
"the ``index`` view."
msgstr ""
"ブラウザで http://localhost:8000/polls/ にアクセスすると、 \"*Hello, world. "
"You're at the polls index.*\" と表示されるのが確認できるでしょう。これは"
"ビューの ``index`` で定義したものです。"

msgid "Page not found?"
msgstr "ページが見つかりませんか？"

msgid ""
"If you get an error page here, check that you're going to http://"
"localhost:8000/polls/ and not http://localhost:8000/."
msgstr ""
"ここでエラーページが表示されたら、 http://localhost:8000/ ではなく、 http://"
"localhost:8000/polls/ にアクセスしていることを確認してください。"

msgid ""
"When you're comfortable with the basic request and response flow, read :doc:"
"`part 2 of this tutorial </intro/tutorial02>` to start working with the "
"database."
msgstr ""
"基本的なリクエストとレスポンスのフローに馴染んだら、データベースを使った作業"
"を始めるために :doc:`チュートリアルその2 </intro/tutorial02>` を読みましょ"
"う。"

msgid "Writing your first Django app, part 2"
msgstr "はじめての Django アプリ作成、その 2"

msgid ""
"This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. "
"We'll set up the database, create your first model, and get a quick "
"introduction to Django's automatically-generated admin site."
msgstr ""
"このチュートリアルは :doc:`チュートリアルその 1 </intro/tutorial01>` の続きで"
"す。ここでは、データベースをセットアップして、最初のモデルを作成し、そして "
"Django が自動的に生成してくれる管理サイトについて、簡単なイントロダクションを"
"します。"

msgid "Database setup"
msgstr "Database の設定"

msgid ""
"Now, open up :file:`mysite/settings.py`. It's a normal Python module with "
"module-level variables representing Django settings."
msgstr ""
"それでは、 :file:`mysite/settings.py` を開いてください。これは、 Django の設"
"定を表現するモジュールレベルの変数を持つ通常の Python モジュールです。"

msgid ""
"By default, the :setting:`DATABASES` configuration uses SQLite. If you're "
"new to databases, or you're just interested in trying Django, this is the "
"easiest choice. SQLite is included in Python, so you won't need to install "
"anything else to support your database. When starting your first real "
"project, however, you may want to use a more scalable database like "
"PostgreSQL, to avoid database-switching headaches down the road."
msgstr ""

msgid ""
"If you wish to use another database, see :ref:`details to customize and get "
"your database running <database-installation>`."
msgstr ""

msgid ""
"While you're editing :file:`mysite/settings.py`, set :setting:`TIME_ZONE` to "
"your time zone."
msgstr ""
":file:`mysite/settings.py` を編集する際、 :setting:`TIME_ZONE` に自分のタイム"
"ゾーンも設定します。"

msgid ""
"Also, note the :setting:`INSTALLED_APPS` setting at the top of the file. "
"That holds the names of all Django applications that are activated in this "
"Django instance. Apps can be used in multiple projects, and you can package "
"and distribute them for use by others in their projects."
msgstr ""
"同じく、ファイル先頭にある :setting:`INSTALLED_APPS` に注意してください。これ"
"はこのDjangoインスタンスの中で有効化されているすべてのDjangoアプリケーション"
"の名前を保持しています。アプリは複数のプロジェクトによって使用されることがで"
"きますし、また、他の開発者が彼らのプロジェクトで使用するためにパッケージして"
"配布することもできます。"

msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""
"デフォルトでは、 :setting:`INSTALLED_APPS` には以下のアプリケーションが入って"
"います。"

msgid ":mod:`django.contrib.admin` -- The admin site. You'll use it shortly."
msgstr ":mod:`django.contrib.admin`  - 管理（admin）サイト。まもなく使います"

msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ":mod:`django.contrib.auth` - 認証システム"

msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ":mod:`django.contrib.contenttypes` - コンテンツタイプフレームワーク"

msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ":mod:`django.contrib.sessions` - セッションフレームワーク"

msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ":mod:`django.contrib.messages` - メッセージフレームワーク"

msgid ""
":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ":mod:`django.contrib.staticfiles` - 静的ファイルの管理フレームワーク"

msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr "これらの機能はよく使われるのでデフォルトで付属しています。"

msgid ""
"Some of these applications make use of at least one database table, though, "
"so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""
"これらのアプリケーションは最低1つデータベースのテーブルを使うので、使い始める"
"前にデータベースにテーブルを作る必要があります。以下のコマンドを実行してくだ"
"さい:"

msgid ""
"The :djadmin:`migrate` command looks at the :setting:`INSTALLED_APPS` "
"setting and creates any necessary database tables according to the database "
"settings in your :file:`mysite/settings.py` file and the database migrations "
"shipped with the app (we'll cover those later). You'll see a message for "
"each migration it applies. If you're interested, run the command-line client "
"for your database and type ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MariaDB, "
"MySQL), ``.tables`` (SQLite), or ``SELECT TABLE_NAME FROM USER_TABLES;`` "
"(Oracle) to display the tables Django created."
msgstr ""
":djadmin:`migrate` コマンドは :setting:`INSTALLED_APPS` の設定を参照するとと"
"もに、 :file:`mysite/settings.py` ファイルのデータベース設定に従って必要なす"
"べてのデータベースのテーブルを作成します。このデータベースマイグレーションは"
"アプリと共に配布されます (これらについては後ほどカバーします)。マイグレーショ"
"ンを実施するたび、メッセージを見ることになります。もしこれに興味を引かれた"
"ら、Djangoが作成したテーブルを表示するために、コマンドラインクライアントであ"
"なたのデータベースの種類に合わせて ``\\dt`` (PostgreSQL)、``SHOW TABLES;`` "
"(MySQL)、 ``.tables`` (SQLite)、もしくは ``SELECT TABLE_NAME FROM "
"USER_TABLES;`` (Oracle) とタイプしてみましょう。"

msgid "For the minimalists"
msgstr "ミニマリストのために"

msgid ""
"Like we said above, the default applications are included for the common "
"case, but not everybody needs them. If you don't need any or all of them, "
"feel free to comment-out or delete the appropriate line(s) from :setting:"
"`INSTALLED_APPS` before running :djadmin:`migrate`. The :djadmin:`migrate` "
"command will only run migrations for apps in :setting:`INSTALLED_APPS`."
msgstr ""
"すでに述べたように、一般的な場合のためにデフォルトのアプリケーション群が含ま"
"れていますが、すべての人がそれを必要とするわけではありません。もしその中のど"
"れかかすべてが必要ない場合、 :djadmin:`migrate` を実行する前に :setting:"
"`INSTALLED_APPS` から適切な行をコメントアウトしたり削除しても構いません。:"
"djadmin:`migrate` コマンドは :setting:`INSTALLED_APPS` のアプリのためだけに実"
"行されます。"

msgid "Creating models"
msgstr "モデルの作成"

msgid ""
"Now we'll define your models -- essentially, your database layout, with "
"additional metadata."
msgstr ""
"これからモデルを定義します。モデルは本質的には、データベースのレイアウトと、"
"それに付随するメタデータです。"

msgid "Philosophy"
msgstr "設計思想"

msgid ""
"A model is the single, definitive source of information about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Django follows the :ref:`DRY Principle <dry>`. The goal is to define your "
"data model in one place and automatically derive things from it."
msgstr ""
"モデルは、手持ちのデータに対する唯一無二の決定的なソースです。モデルには自分"
"が格納したいデータにとって必要不可欠なフィー ルドと、そのデータの挙動を収めま"
"す。 Django は :ref:`DRY 則 <dry>` に従っています。 Django のモデルの目的は、"
"ただ一つの場所でデータモデルを定義し、そこから自動的にデータを取り出すことに"
"あります。"

msgid ""
"This includes the migrations - unlike in Ruby On Rails, for example, "
"migrations are entirely derived from your models file, and are essentially a "
"history that Django can roll through to update your database schema to match "
"your current models."
msgstr ""
"これはマイグレーションを含みます - たとえば、Ruby On Rails と違って、マイグ"
"レーションは完全にモデルのファイルから生成されます。マイグレーションは本質的"
"には単なる履歴です。Django はデータベーススキーマをアップデートしながら履歴を"
"進んでいき、現在のモデルに合致させることができます。"

msgid ""
"In our poll app, we'll create two models: ``Question`` and ``Choice``. A "
"``Question`` has a question and a publication date. A ``Choice`` has two "
"fields: the text of the choice and a vote tally. Each ``Choice`` is "
"associated with a ``Question``."
msgstr ""
"これから開発する簡単な poll アプリケーションでは、``Question`` と ``Choice`` "
"の2つのモデルを作成します。``Poll`` には question と publication date の情報"
"があります。 ``Choice`` には選択肢のテキストと vote という2つのフィールドがあ"
"ります。各 ``Choice`` は1つの ``Question`` に関連づけられています。"

msgid ""
"These concepts are represented by Python classes. Edit the :file:`polls/"
"models.py` file so it looks like this:"
msgstr ""
"Django では、こうした概念を簡単な Python クラスで表現できます。 :file:`polls/"
"models.py` ファイルを以下のように編集してください:"

msgid "``polls/models.py``"
msgstr "``polls/models.py``"

msgid ""
"Here, each model is represented by a class that subclasses :class:`django.db."
"models.Model`. Each model has a number of class variables, each of which "
"represents a database field in the model."
msgstr ""
"コードは単純明解ですね。各モデルは一つのクラスで表現され、いずれも :class:"
"`django.db.models.Model` のサブクラスです。各モデルには複数のクラス変数があ"
"り、個々のクラス変数はモデルのデータベースフィールドを表現しています。"

msgid ""
"Each field is represented by an instance of a :class:`~django.db.models."
"Field` class -- e.g., :class:`~django.db.models.CharField` for character "
"fields and :class:`~django.db.models.DateTimeField` for datetimes. This "
"tells Django what type of data each field holds."
msgstr ""
"各フィールドは :class:`~django.db.models.Field` クラスのインスタンスとして表"
"現されています。例えば、 :class:`~django.db.models.CharField` は文字のフィー"
"ルドで、 :class:`~django.db.models.DateTimeField` は日時フィールドです。こう"
"したクラスは、各フィールドにどのようなデータ型を記憶させるかを Django に教え"
"ます。"

msgid ""
"The name of each :class:`~django.db.models.Field` instance (e.g. "
"``question_text`` or ``pub_date``) is the field's name, in machine-friendly "
"format. You'll use this value in your Python code, and your database will "
"use it as the column name."
msgstr ""
":class:`~django.db.models.Field` インスタンスそれぞれの名前(例: "
"``question_text`` や ``pub_date``)は、機械可読なフィールド名です。このフィー"
"ルド名はPythonコードで使うとともに、データベースも列の名前として使うことにな"
"ります。"

msgid ""
"You can use an optional first positional argument to a :class:`~django.db."
"models.Field` to designate a human-readable name. That's used in a couple of "
"introspective parts of Django, and it doubles as documentation. If this "
"field isn't provided, Django will use the machine-readable name. In this "
"example, we've only defined a human-readable name for ``Question.pub_date``. "
"For all other fields in this model, the field's machine-readable name will "
"suffice as its human-readable name."
msgstr ""
":class:`~django.db.models.Field` の最初の位置引数には、オプションとして人間可"
"読なフィールド名も指定できます。このフィールド名は Django の二つの内省機能で"
"使う他、ドキュメントとしての役割も果たします。人間可読なフィールド名を指定し"
"ない場合、 Django は機械可読な名前を使います。上の例では、  ``Question."
"pub_date`` にだけ人間可読なフィールド名を指定しました。モデルの他のフィールド"
"では、フィールドの機械可読な名前は人間可読な名前としても十分なので定義してい"
"ません。"

msgid ""
"Some :class:`~django.db.models.Field` classes have required arguments. :"
"class:`~django.db.models.CharField`, for example, requires that you give it "
"a :attr:`~django.db.models.CharField.max_length`. That's used not only in "
"the database schema, but in validation, as we'll soon see."
msgstr ""
":class:`~django.db.models.Field` クラスの中には必須の引数を持つものがありま"
"す。例えば :class:`~django.db.models.CharField` には :attr:`~django.db."
"models.CharField.max_length` を指定する必要があります。この引数はデータベース"
"スキーマで使われる他、後で述べるバリデーションでも使われます。"

msgid ""
"A :class:`~django.db.models.Field` can also have various optional arguments; "
"in this case, we've set the :attr:`~django.db.models.Field.default` value of "
"``votes`` to 0."
msgstr ""
":class:`~django.db.models.Field` はいくつかオプションの引数も取れます。今回の"
"場合、 ``votes`` の :attr:`~django.db.models.Field.default` 値を 0 に設定しま"
"した。"

msgid ""
"Finally, note a relationship is defined, using :class:`~django.db.models."
"ForeignKey`. That tells Django each ``Choice`` is related to a single "
"``Question``. Django supports all the common database relationships: many-to-"
"one, many-to-many, and one-to-one."
msgstr ""
"最後に、 :class:`~django.db.models.ForeignKey` を使用してリレーションシップが"
"定義されていることに注目してください。これは、それぞれの ``Choice`` が一つの "
"``Question`` に関連付けられることを Django に伝えます。 Django は 多対一、多"
"対多、そして一対一のような一般的なデータベースリレーションシップすべてをサ"
"ポートします。"

msgid "Activating models"
msgstr "モデルを有効にする"

msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""
"前述のようなほんのわずかなコードをモデルに書くだけで、 Django はたくさんの情"
"報を知ることができます。このコードを使って、 Django は:"

msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""
"アプリケーションのデータベーススキーマを作成 (``CREATE TABLE`` 文を実行) でき"
"ます。"

msgid ""
"Create a Python database-access API for accessing ``Question`` and "
"``Choice`` objects."
msgstr ""
"``Question`` や ``Choice`` オブジェクトに Python からアクセスするためのデータ"
"ベー ス API を作成できます。"

msgid ""
"But first we need to tell our project that the ``polls`` app is installed."
msgstr ""
"でもその前に、 ``polls`` アプリケーションをインストールしたことをプロジェクト"
"に教えてやる必要があります。"

msgid ""
"Django apps are \"pluggable\": You can use an app in multiple projects, and "
"you can distribute apps, because they don't have to be tied to a given "
"Django installation."
msgstr ""
"Django アプリケーションは「プラガブル (pluggable)」です。アプリケーショ ンは"
"特定の Django インストールに結び付いていないので、アプリケーションを複数のプ"
"ロジェクトで使ったり、単体で配布したりできます。"

msgid ""
"To include the app in our project, we need to add a reference to its "
"configuration class in the :setting:`INSTALLED_APPS` setting. The "
"``PollsConfig`` class is in the :file:`polls/apps.py` file, so its dotted "
"path is ``'polls.apps.PollsConfig'``. Edit the :file:`mysite/settings.py` "
"file and add that dotted path to the :setting:`INSTALLED_APPS` setting. "
"It'll look like this:"
msgstr ""
"アプリケーションをプロジェクトに含めるには、構成クラスへの参照を :setting:"
"`INSTALLED_APPS` 設定に追加する必要があります。 ``PollsConfig`` クラスは、 :"
"file:`polls/apps.py` にあるので、ドットつなぎのパスは ``'polls.apps."
"PollsConfig'`` となります。 :file:`mysite/settings.py` を編集し、 :setting:"
"`INSTALLED_APPS` 設定にドットつなぎのパスを追加してください。そうすると下記の"
"ようになります。"

msgid "``mysite/settings.py``"
msgstr "``mysite/settings.py``"

msgid ""
"Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""
"これで Django は、 ``polls`` アプリケーションが含まれていることを認識できま"
"す。もうひとつコマンドを実行しましょう:"

msgid "You should see something similar to the following:"
msgstr "次のようなものが表示されるはずです:"

msgid ""
"By running ``makemigrations``, you're telling Django that you've made some "
"changes to your models (in this case, you've made new ones) and that you'd "
"like the changes to be stored as a *migration*."
msgstr ""
"``makemigrations`` を実行することで、Djangoにモデルに変更があったこと(この場"
"合、新しいものを作成しました)を伝え、そして変更を *マイグレーション* の形で保"
"存することができました。"

msgid ""
"Migrations are how Django stores changes to your models (and thus your "
"database schema) - they're files on disk. You can read the migration for "
"your new model if you like; it's the file ``polls/migrations/0001_initial."
"py``. Don't worry, you're not expected to read them every time Django makes "
"one, but they're designed to be human-editable in case you want to manually "
"tweak how Django changes things."
msgstr ""
"マイグレーションは Django がモデル (そしてデータベーススキーマでもあります) "
"の変更を保存する方法です。マイグレーションは、ディスク上のただのファイルで"
"す。望むならば、新しいモデルのためのマイグレーションをファイル ``polls/"
"migrations/0001_initial.py`` から読むこともできます。安心してください、"
"Django がマイグレーションのファイルを作成するたびにそれを毎回読む必要はありま"
"せん。しかし、Django が行う変更を手動で微調整したいというときのために、マイグ"
"レーションは人間可読なファイルとして設計されています。"

msgid ""
"There's a command that will run the migrations for you and manage your "
"database schema automatically - that's called :djadmin:`migrate`, and we'll "
"come to it in a moment - but first, let's see what SQL that migration would "
"run. The :djadmin:`sqlmigrate` command takes migration names and returns "
"their SQL:"
msgstr ""
"Django には、マイグレーションをあなたの代わりに実行し、自動でデータベースス"
"キーマを管理するためのコマンドがあります。これは :djadmin:`migrate` と呼ばれ"
"るコマンドで、この後すぐに見ていきます。しかし最初は、マイグレーションがどん"
"なSQLを実行するのか見てみましょう。 :djadmin:`sqlmigrate` コマンドはマイグ"
"レーションの名前を引数にとってSQLを返します:"

msgid ""
"You should see something similar to the following (we've reformatted it for "
"readability):"
msgstr ""
"次のような結果が表示されるはずです (読みやすくするために再フォーマットしまし"
"た) :"

msgid "Note the following:"
msgstr "以下に注意してください:"

msgid ""
"The exact output will vary depending on the database you are using. The "
"example above is generated for PostgreSQL."
msgstr ""
"正確な出力は、使用しているデータベースによって異なります。上記の例は、 "
"PostgreSQL の場合に生成されるものです。"

msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``question`` and "
"``choice``. (You can override this behavior.)"
msgstr ""
"テーブル名はアプリケーションの名前 (``polls``) とモデルの小文字表記 の "
"``question``  と ``choice`` を組み合わせて自動的に生成されます。 (この挙動は"
"オーバライドできます)"

msgid ""
"Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""
"主キー (primary key, ID) は自動的に追加されます (この挙動もオーバライド可能で"
"す)。"

msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name. "
"(Yes, you can override this, as well.)"
msgstr ""
"便宜上、 Django は外部キーのフィールド名に ``\"_id\"`` を追加します。もちろん"
"この挙動もオーバライド可能です。"

msgid ""
"The foreign key relationship is made explicit by a ``FOREIGN KEY`` "
"constraint. Don't worry about the ``DEFERRABLE`` parts; it's telling "
"PostgreSQL to not enforce the foreign key until the end of the transaction."
msgstr ""
"外部キーリレーションシップは ``FOREIGN KEY`` 制約で明確化されます。 "
"``DEFERRABLE`` の部分は気にしないでください。これはただ PostgreSQL に外部キー"
"をトランザクション終了まで強制しないよう伝えているだけです。"

msgid ""
"It's tailored to the database you're using, so database-specific field types "
"such as ``auto_increment`` (MySQL), ``bigint PRIMARY KEY GENERATED BY "
"DEFAULT AS IDENTITY`` (PostgreSQL), or ``integer primary key autoincrement`` "
"(SQLite) are handled for you automatically. Same goes for the quoting of "
"field names -- e.g., using double quotes or single quotes."
msgstr ""
"あなたが使用しているデータベースに合わせて、``auto_increment`` (MySQL)、 "
"``bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY`` (PostgreSQL) もしく"
"は ``integer primary key autoincrement`` (SQLite) のようなデータベースに特化"
"した型が自動的に選択され生成されます。フィールド名のクォーティング (例えば、"
"ダブルクォートにするか、シングルクォートにするか) も同様です。"

msgid ""
"The :djadmin:`sqlmigrate` command doesn't actually run the migration on your "
"database - instead, it prints it to the screen so that you can see what SQL "
"Django thinks is required. It's useful for checking what Django is going to "
"do or if you have database administrators who require SQL scripts for "
"changes."
msgstr ""
":djadmin:`sqlmigrate` コマンドは実際にはデータベースにマイグレーションを実行"
"しません。ただ、Djangoが必要としているSQLが何であるかをスクリーンに表示するだ"
"けです。これはDjangoが何をしようとしているかを確認したり、データベース管理者"
"に変更のためのSQLスクリプトを要求されているときに役に立ちます。"

msgid ""
"If you're interested, you can also run :djadmin:`python manage.py check "
"<check>`; this checks for any problems in your project without making "
"migrations or touching the database."
msgstr ""
"もし興味があれば :djadmin:`python manage.py check <check>` を実行することもで"
"きます; これはマイグレーションを作成したりデータベースにふれることなく、プロ"
"ジェクトに何か問題がないか確認します 。"

msgid ""
"Now, run :djadmin:`migrate` again to create those model tables in your "
"database:"
msgstr ""
":djadmin:`migrate` を再度実行し、 モデルのテーブルをデータベースに作成しま"
"しょう。"

msgid ""
"The :djadmin:`migrate` command takes all the migrations that haven't been "
"applied (Django tracks which ones are applied using a special table in your "
"database called ``django_migrations``) and runs them against your database - "
"essentially, synchronizing the changes you made to your models with the "
"schema in the database."
msgstr ""
":djadmin:`migrate` コマンドはすべての適用されていないマイグレーション(Django"
"はデータベース内の ``django_migrations`` と呼ばれる特別なテーブルを利用してど"
"れが適用されているかを追跡しています)を捕捉してデータベースに対してそれを実行"
"します - 重要なのは、モデルに対して行った変更はデータベースのスキーマに同期す"
"るということです。"

msgid ""
"Migrations are very powerful and let you change your models over time, as "
"you develop your project, without the need to delete your database or tables "
"and make new ones - it specializes in upgrading your database live, without "
"losing data. We'll cover them in more depth in a later part of the tutorial, "
"but for now, remember the three-step guide to making model changes:"
msgstr ""
"マイグレーションはとても強力なツールであり、プロジェクトの発展に合わせて、モ"
"デルを変更し続けていくことができます。データベースやテーブルを削除して作り直"
"す必要はありません - マイグレーションは、データを失うことなしにデータベースを"
"ライブでアップグレードするよう特化しています。これらについてはチュートリアル"
"の後の部分でもっと深くカバーしますが、今は、モデルの変更を実施するための3ス"
"テップガイドを覚えておいてください:"

msgid "Change your models (in ``models.py``)."
msgstr "モデルを変更する (``models.py`` の中の)"

msgid ""
"Run :djadmin:`python manage.py makemigrations <makemigrations>` to create "
"migrations for those changes"
msgstr ""
"これらの変更のためのマイグレーションを作成するために :djadmin:`python manage."
"py makemigrations <makemigrations>`  を実行します。"

msgid ""
"Run :djadmin:`python manage.py migrate <migrate>` to apply those changes to "
"the database."
msgstr ""
"データベースにこれらの変更を適用するために :djadmin:`python manage.py "
"migrate <migrate>`  を実行します。"

msgid ""
"The reason that there are separate commands to make and apply migrations is "
"because you'll commit migrations to your version control system and ship "
"them with your app; they not only make your development easier, they're also "
"usable by other developers and in production."
msgstr ""
"マイグレーションの作成と適用のコマンドが分割されている理由は、マイグレーショ"
"ンをバージョン管理システムにコミットし、アプリとともに配布するためです。これ"
"によって、あなたの開発が容易になるだけでなく、他の開発者や本番環境にとって使"
"いやすいものになります。"

msgid ""
"Read the :doc:`django-admin documentation </ref/django-admin>` for full "
"information on what the ``manage.py`` utility can do."
msgstr ""
"``manage.py`` ユーティリティでできることについては :doc:`django-admin のド"
"キュメント </ref/django-admin>` を読んで下さい。"

msgid "Playing with the API"
msgstr "API で遊んでみる"

msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""
"さぁ、 Python 対話シェルを起動して、 Django が提供する API で遊んでみましょ"
"う。 Python シェルを起動するには、以下のコマンドを実行します:"

msgid ""
"We're using this instead of simply typing \"python\", because :file:`manage."
"py` sets the :envvar:`DJANGO_SETTINGS_MODULE` environment variable, which "
"gives Django the Python import path to your :file:`mysite/settings.py` file."
msgstr ""
"\"python \"とタイプするのではなく、これを使っています。なぜなら、 :file:"
"`manage.py` は :envvar:`DJANGO_SETTINGS_MODULE` 環境変数を設定しているからで"
"す。"

msgid ""
"Once you're in the shell, explore the :doc:`database API </topics/db/"
"queries>`:"
msgstr ""
"シェルに入ったら :doc:`データベース API </topics/db/queries>` の世界を探検し"
"てみましょう:"

msgid ""
"Wait a minute. ``<Question: Question object (1)>`` isn't a helpful "
"representation of this object. Let's fix that by editing the ``Question`` "
"model (in the ``polls/models.py`` file) and adding a :meth:`~django.db."
"models.Model.__str__` method to both ``Question`` and ``Choice``:"
msgstr ""
"ちょっと待ってください。 ``<Question: Question object (1)>`` は、このオブジェ"
"クトの表現としてまったく役に立ちません。(``polls/models.py`` ファイル内にあ"
"る) ``Question`` モデルを編集してこれを修正しましょう。 :meth:`~django.db."
"models.Model.__str__` メソッドを ``Question`` と ``Choice`` の両方に追加しま"
"す。"

msgid ""
"It's important to add :meth:`~django.db.models.Model.__str__` methods to "
"your models, not only for your own convenience when dealing with the "
"interactive prompt, but also because objects' representations are used "
"throughout Django's automatically-generated admin."
msgstr ""
"あなた自身のインタラクティブシェルでの表示での利便性のためだけではなく、"
"Djangoの自動生成adminでオブジェクトの表現として使用されるという理由からも :"
"meth:`~django.db.models.Model.__str__` メソッドをモデルに追加することは重要で"
"す。"

msgid "Let's also add a custom method to this model:"
msgstr "モデルクラスにクラスメソッドを追加してみましょう:"

msgid ""
"Note the addition of ``import datetime`` and ``from django.utils import "
"timezone``, to reference Python's standard :mod:`datetime` module and "
"Django's time-zone-related utilities in :mod:`django.utils.timezone`, "
"respectively. If you aren't familiar with time zone handling in Python, you "
"can learn more in the :doc:`time zone support docs </topics/i18n/timezones>`."
msgstr ""
"``import datetime`` と ``from django.utils import timezone`` を追加したことに"
"注意してください。これは、 Python の 標準モジュール :mod:`datetime` と "
"Django のタイムゾーン関連ユーティリティの :mod:`django.utils.timezone` を参照"
"するためです。 Python でのタイムゾーンの取り扱いに不慣れな場合は、:doc:`タイ"
"ムゾーンサポートドキュメント </topics/i18n/timezones>` を参照してください。"

msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again:"
msgstr ""
"変更を保存して、もう一度 ``python manage.py shell`` を実行して新しい Python "
"対話シェルを始めましょう:"

msgid ""
"For more information on model relations, see :doc:`Accessing related objects "
"</ref/models/relations>`. For more on how to use double underscores to "
"perform field lookups via the API, see :ref:`Field lookups <field-lookups-"
"intro>`. For full details on the database API, see our :doc:`Database API "
"reference </topics/db/queries>`."
msgstr ""
"モデルのリレーションについては :doc:`リレーション先オブジェクトにアクセスす"
"る </ref/models/relations>` を参照してください。 API を通じた、フィールドルッ"
"クアップのためのダブルアンダースコアの使い方は :ref:`フィールドルックアップ "
"<field-lookups-intro>` を参照してください。データーベース API の詳細は :doc:`"
"データベース API リファレンス </topics/db/queries>` を参照してください。"

msgid "Introducing the Django Admin"
msgstr "Django Adminの紹介"

msgid ""
"Generating admin sites for your staff or clients to add, change, and delete "
"content is tedious work that doesn't require much creativity. For that "
"reason, Django entirely automates creation of admin interfaces for models."
msgstr ""
"あなたのスタッフや顧客のためのコンテンツ追加、変更そして削除のための管理サイ"
"トの生成は、創造性を要求されない退屈な仕事です。そのため、Djangoはモデルのた"
"めの管理インタフェース群の生成を完全に自動化します。"

msgid ""
"Django was written in a newsroom environment, with a very clear separation "
"between \"content publishers\" and the \"public\" site. Site managers use "
"the system to add news stories, events, sports scores, etc., and that "
"content is displayed on the public site. Django solves the problem of "
"creating a unified interface for site administrators to edit content."
msgstr ""
"Django はニュースルーム環境で開発されました。ニュースルーム環境では、 「コン"
"テンツの作成者 (content publisher)」と「公開 (public) 」サイトをきわめて明確"
"に区別しています。サイト管理者は新たな話題やイベント、 スポーツのスコアなどの"
"入力にシステムを使い、コンテンツは公開用サイト上で表示されます。 Django は、"
"サイト管理者向けの一元化されたコンテンツ編集インタフェースを提供しています。"

msgid ""
"The admin isn't intended to be used by site visitors. It's for site managers."
msgstr ""
"admin はサイトの訪問者でなく、サイト管理者に使われることを意図しています。"

msgid "Creating an admin user"
msgstr "管理ユーザーを作成する"

msgid ""
"First we'll need to create a user who can login to the admin site. Run the "
"following command:"
msgstr ""
"まず最初に私達はadminサイトにログインできるユーザーを作成する必要があります。"
"下記のコマンドを実行します:"

msgid "Enter your desired username and press enter."
msgstr "好きなユーザー名を入力しEnterを押してください。"

msgid "You will then be prompted for your desired email address:"
msgstr "希望するemailアドレスを入力するよう促されます:"

msgid ""
"The final step is to enter your password. You will be asked to enter your "
"password twice, the second time as a confirmation of the first."
msgstr ""
"最後のステップはパスワードの入力です。2回目のパスワードが1回目と同じことを確"
"認するため、パスワードの入力を2回求められます。"

msgid "Start the development server"
msgstr "開発サーバーの起動"

msgid ""
"The Django admin site is activated by default. Let's start the development "
"server and explore it."
msgstr ""
"Django adminサイトはデフォルトで有効化されます。開発サーバーを起動して探索を"
"始めましょう。"

msgid "If the server is not running start it like so:"
msgstr "もしサーバーが起動していなかったら、このようにして起動しましょう:"

msgid ""
"Now, open a web browser and go to \"/admin/\" on your local domain -- e.g., "
"http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""
"次はブラウザを起動して、ローカルドメインの “/admin/” 、つまり "
"http://127.0.0.1:8000/admin/ にアクセスします。以下のような admin のログイン"
"画面が表示されるはずです:"

msgid "Django admin login screen"
msgstr "Django admin のログイン画面"

msgid ""
"Since :doc:`translation </topics/i18n/translation>` is turned on by default, "
"if you set :setting:`LANGUAGE_CODE`, the login screen will be displayed in "
"the given language (if Django has appropriate translations)."
msgstr ""
"デフォルトでは :doc:`翻訳 </topics/i18n/translation>` がオンになっているの"
"で、 :setting:`LANGUAGE_CODE` を設定すると、与えられた言語でログイン画面が表"
"示されるようになります(Django に適切な翻訳があれば)。"

msgid "Enter the admin site"
msgstr "admin サイトに入る"

msgid ""
"Now, try logging in with the superuser account you created in the previous "
"step. You should see the Django admin index page:"
msgstr ""
"今回は、前のステップで作成したスーパーユーザーのアカウントでログインしてみま"
"しょう。 Django admin のインデックスページが表示されるはずです:"

msgid "Django admin index page"
msgstr "Django admin のインデックスページ"

msgid ""
"You should see a few types of editable content: groups and users. They are "
"provided by :mod:`django.contrib.auth`, the authentication framework shipped "
"by Django."
msgstr ""
"いくつかのタイプの編集可能なコンテンツがあるはずです（groups と users）。これ"
"らは Django に含まれる認証フレームワーク :mod:`django.contrib.auth` によって"
"提供されます。"

msgid "Make the poll app modifiable in the admin"
msgstr "Poll アプリを admin 上で編集できるようにする"

msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""
"ところで、 polls アプリはどこにあるんでしょう？ admin のインデックスページを"
"見ても表示されていませんね。"

msgid ""
"Only one more thing to do: we need to tell the admin that ``Question`` "
"objects have an admin interface. To do this, open the :file:`polls/admin.py` "
"file, and edit it to look like this:"
msgstr ""
"やるべきことは1つです: ``Question`` オブジェクトがadmin インタフェースを持つ"
"ということを、adminに伝える必要があります。これを行うために、ファイル  :file:"
"`polls/admin.py` を開いてこのように編集しましょう:"

msgid "``polls/admin.py``"
msgstr "``polls/admin.py``"

msgid "Explore the free admin functionality"
msgstr "admin の機能を探究してみる"

msgid ""
"Now that we've registered ``Question``, Django knows that it should be "
"displayed on the admin index page:"
msgstr ""
"私たちが ``Question`` を登録したので、 Django は admin インデックスページにこ"
"れを表示すべきだということを知っています:"

msgid "Django admin index page, now with polls displayed"
msgstr "Django adminのインデックスページ、現在はpollsが表示されています"

msgid ""
"Click \"Questions\". Now you're at the \"change list\" page for questions. "
"This page displays all the questions in the database and lets you choose one "
"to change it. There's the \"What's up?\" question we created earlier:"
msgstr ""
"\"Questions\" をクリックしましょう。questions のための \"change list\" ページ"
"が表示されます。このページにはデータベース中のすべての question が表示され、"
"あなたはその中のひとつを選んで変更することができます。ここには私たちが以前作"
"成した \"What's UP?\" question もあります:"

msgid "Polls change list page"
msgstr "投票の変更一覧ページ"

msgid "Click the \"What's up?\" question to edit it:"
msgstr "「What’s up?」をクリックして編集してみましょう:"

msgid "Editing form for question object"
msgstr "質問オブジェクトの編集フォーム"

msgid "Things to note here:"
msgstr "以下の点に注意してください:"

msgid "The form is automatically generated from the ``Question`` model."
msgstr "フォームは ``Question`` モデルから自動的に生成されます。"

msgid ""
"The different model field types (:class:`~django.db.models.DateTimeField`, :"
"class:`~django.db.models.CharField`) correspond to the appropriate HTML "
"input widget. Each type of field knows how to display itself in the Django "
"admin."
msgstr ""
"モデルのフィールドの型 (:class:`~django.db.models.DateTimeField` 、 :class:"
"`~django.db.models.CharField` など) はそれぞれ異なる HTML 入力ウィジェットと"
"対応しています。各種のフィールドは、自分自身を Django admin サイトでどう表示"
"するか知っています。"

msgid ""
"Each :class:`~django.db.models.DateTimeField` gets free JavaScript "
"shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get "
"a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""
"各 :class:`~django.db.models.DateTimeField` は JavaScript ショートカットがつ"
"いています。日付 (dates) のカラムには「今日 (today)」 へのショートカットとカ"
"レンダーポップアップボタンがあります。 時刻 (times) には「現在 (now)」への"
"ショートカットと、よく入力される時刻のリストを表示するポップアップボタンがあ"
"ります。"

msgid "The bottom part of the page gives you a couple of options:"
msgstr "ページの末尾の部分には操作ボタンがいくつか表示されています:"

msgid ""
"Save -- Saves changes and returns to the change-list page for this type of "
"object."
msgstr ""
"保存 (Save) – 変更を保存して、このモデルのチェンジリストのページに戻ります。"

msgid ""
"Save and continue editing -- Saves changes and reloads the admin page for "
"this object."
msgstr ""
"保存して編集を続ける (Save and continue editing) – 変更を保存して、このオブ"
"ジェクトの編集ページをリロードします。"

msgid ""
"Save and add another -- Saves changes and loads a new, blank form for this "
"type of object."
msgstr ""
"保存してもう一つ追加 (Save and add another) – 変更を保存して、このモデルのオ"
"ブジェクトを新規追加するための空の編集ページをロードします。"

msgid "Delete -- Displays a delete confirmation page."
msgstr "削除 (Delete) – 削除確認ページを表示します。"

msgid ""
"If the value of \"Date published\" doesn't match the time when you created "
"the question in :doc:`Tutorial 1</intro/tutorial01>`, it probably means you "
"forgot to set the correct value for the :setting:`TIME_ZONE` setting. Change "
"it, reload the page and check that the correct value appears."
msgstr ""
"もし「Date published」の値があなたが以前 :doc:`チュートリアルその1</intro/"
"tutorial01>` で作成した questionと一致しないのであれば、それはおそらくあなた"
"が :setting:`TIME_ZONE`  で正しい値を設定することを忘れていたことを意味しま"
"す。これを変更して、ページをリロードし、正しい値が表示されるか確認してくださ"
"い。"

msgid ""
"Change the \"Date published\" by clicking the \"Today\" and \"Now\" "
"shortcuts. Then click \"Save and continue editing.\" Then click \"History\" "
"in the upper right. You'll see a page listing all changes made to this "
"object via the Django admin, with the timestamp and username of the person "
"who made the change:"
msgstr ""
"「今日」や「現在」ショートカットをクリックして、「Date published」を変更して"
"みましょう。変更したら、「保存して編集を続ける」を押します。次に、右上に ある"
"「履歴 (History)」をクリックしてみましょう。ユーザが管理サイト上でオブジェク"
"トに対して行った変更履歴の全てを、変更時刻と変更を行ったユーザ名付きでリスト"
"にしたページが表示されます:"

msgid "History page for question object"
msgstr "質問オブジェクトの履歴ページ"

msgid ""
"When you're comfortable with the models API and have familiarized yourself "
"with the admin site, read :doc:`part 3 of this tutorial</intro/tutorial03>` "
"to learn about how to add more views to our polls app."
msgstr ""
"モデルの API や admin サイトに慣れてきたら、 :doc:`チュートリアルその3</"
"intro/tutorial03>` を読んで、 polls アプリにビューをさらに追加する方法を学習"
"しましょう。"

msgid "Writing your first Django app, part 3"
msgstr "はじめての Django アプリ作成、その 3"

msgid ""
"This tutorial begins where :doc:`Tutorial 2 </intro/tutorial02>` left off. "
"We're continuing the web-poll application and will focus on creating the "
"public interface -- \"views.\""
msgstr ""
"このチュートリアルは :doc:`チュートリアルその 2 </intro/tutorial02>` の続きで"
"す。ここでは、引続き Web 投票アプリケーションの開発を例にして、公開用のインタ"
"フェース、ビュー(view) の作成を焦点に解説します。"

msgid "Overview"
msgstr "オーバービュー"

msgid ""
"A view is a \"type\" of web page in your Django application that generally "
"serves a specific function and has a specific template. For example, in a "
"blog application, you might have the following views:"
msgstr ""
"ビューとは、 Django のアプリケーションにおいて特定の機能を提供するウェブペー "
"ジの「型 (type)」であり、各々のテンプレートを持っています。例えばブログアプリ"
"ケーションなら、以下のようなビューがあるでしょう:"

msgid "Blog homepage -- displays the latest few entries."
msgstr "Blog ホームページ - 最新エントリーをいくつか表示"

msgid "Entry \"detail\" page -- permalink page for a single entry."
msgstr "エントリー詳細ページ - 1エントリーへのパーマリンク (permalink) ページ"

msgid ""
"Year-based archive page -- displays all months with entries in the given "
"year."
msgstr "年ごとのアーカイブページ - 指定された年のエントリーの月を全て表示"

msgid ""
"Month-based archive page -- displays all days with entries in the given "
"month."
msgstr "月ごとのアーカイブページ - 指定された月のエントリーの日をすべて表示"

msgid "Day-based archive page -- displays all entries in the given day."
msgstr "日ごとのアーカイブページ - 指定された日の全てのエントリーを表示"

msgid "Comment action -- handles posting comments to a given entry."
msgstr "コメント投稿 - エントリーに対するコメントの投稿を受付"

msgid "In our poll application, we'll have the following four views:"
msgstr "投票アプリケーションでは、以下4つのビューを作成します:"

msgid "Question \"index\" page -- displays the latest few questions."
msgstr "質問 \"インデックス\" ページ -- 最新の質問をいくつか表示"

msgid ""
"Question \"detail\" page -- displays a question text, with no results but "
"with a form to vote."
msgstr ""
"質問 \"詳細\" ページ -- 結果を表示せず、質問テキストと投票フォームを表示"

msgid ""
"Question \"results\" page -- displays results for a particular question."
msgstr "質問 \"結果\" ページ -- 特定の質問の結果を表示"

msgid ""
"Vote action -- handles voting for a particular choice in a particular "
"question."
msgstr "投票ページ -- 特定の質問の選択を投票として受付"

msgid ""
"In Django, web pages and other content are delivered by views. Each view is "
"represented by a Python function (or method, in the case of class-based "
"views). Django will choose a view by examining the URL that's requested (to "
"be precise, the part of the URL after the domain name)."
msgstr ""
"Django では、ウェブページとコンテンツはビューによって提供されます。各ビューは"
"単純に Python 関数 (クラスベースビューの場合はメソッド) として実装されていま"
"す。 Django はビューを、リクエストされた URL (正確には、URLのドメイン以降の部"
"分) から決定します。"

msgid ""
"Now in your time on the web you may have come across such beauties as ``ME2/"
"Sites/dirmod.htm?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B``. "
"You will be pleased to know that Django allows us much more elegant *URL "
"patterns* than that."
msgstr ""
"今、あなたはウェブ上で ``ME2/Sites/dirmod.htm?"
"sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B`` のような美しいもの"
"に出くわしたことがあるかもしれません。Django はそれよりもはるかにエレガント"
"な *URL パターン* を提供してくれます。"

msgid ""
"A URL pattern is the general form of a URL - for example: ``/newsarchive/"
"<year>/<month>/``."
msgstr ""
"URLパターンは、URLを単に一般化したものです。たとえば、 ``/newsarchive/<year>/"
"<month>/`` などです。"

msgid ""
"To get from a URL to a view, Django uses what are known as 'URLconfs'. A "
"URLconf maps URL patterns to views."
msgstr ""
"URLからビューを得るために、Django は「URLconf」と呼ばれているものを使います。"
"URLconf はURLパターンをビューにマッピングします。"

msgid ""
"This tutorial provides basic instruction in the use of URLconfs, and you can "
"refer to :doc:`/topics/http/urls` for more information."
msgstr ""
"このチュートリアルでは URLconf の基本的な使い方を知ってもらいます。より詳しく"
"は :doc:`/topics/http/urls` を参照してください。"

msgid "Writing more views"
msgstr "もっとビューを書いてみる"

msgid ""
"Now let's add a few more views to ``polls/views.py``. These views are "
"slightly different, because they take an argument:"
msgstr ""
"それではもう少しviewを ``polls/views.py`` に追加していきましょう。これから追"
"加するviewでは引数をとります。"

msgid ""
"Wire these new views into the ``polls.urls`` module by adding the following :"
"func:`~django.urls.path` calls:"
msgstr ""
"次の :func:`~django.urls.path` コールを追加して、新しいviewを ``polls.urls`` "
"モジュールと結びつけます。"

msgid ""
"Take a look in your browser, at \"/polls/34/\". It'll run the ``detail()`` "
"function and display whatever ID you provide in the URL. Try \"/polls/34/"
"results/\" and \"/polls/34/vote/\" too -- these will display the placeholder "
"results and voting pages."
msgstr ""
"ブラウザで \"/polls/34/\" を見てください。 ``detail()`` 関数が実行され、URLで"
"指定したIDが表示されます。 \"/polls/34/results/\" と \"/polls/34/vote/\" も試"
"してみてください――これらはプレースホルダの結果と投票ページを表示します。"

msgid ""
"When somebody requests a page from your website -- say, \"/polls/34/\", "
"Django will load the ``mysite.urls`` Python module because it's pointed to "
"by the :setting:`ROOT_URLCONF` setting. It finds the variable named "
"``urlpatterns`` and traverses the patterns in order. After finding the match "
"at ``'polls/'``, it strips off the matching text (``\"polls/\"``) and sends "
"the remaining text -- ``\"34/\"`` -- to the 'polls.urls' URLconf for further "
"processing. There it matches ``'<int:question_id>/'``, resulting in a call "
"to the ``detail()`` view like so:"
msgstr ""
"誰かがWebサイトの 「/polls/34/」 をリクエストすると、 Django は :setting:"
"`ROOT_URLCONF` に指定されている Python モジュール ``mysite.urls`` をロードし"
"ます。そのモジュール内の ``urlpatterns`` という変数を探し、順番にパターンを検"
"査していきます。 ``polls/`` にマッチした箇所を見つけた後、一致した文字列 "
"(``\"polls/\"``) を取り除き、残りの文字列である \"34/\" を次の処理のために "
"『polls.urls』 の URLconf に渡します。これは ``'<int：question_id>/'`` に一致"
"し、結果として下記のように ``detail()`` が呼び出されます。"

msgid ""
"The ``question_id=34`` part comes from ``<int:question_id>``. Using angle "
"brackets \"captures\" part of the URL and sends it as a keyword argument to "
"the view function. The ``question_id`` part of the string defines the name "
"that will be used to identify the matched pattern, and the ``int`` part is a "
"converter that determines what patterns should match this part of the URL "
"path. The colon (``:``) separates the converter and pattern name."
msgstr ""
"``question_id=34`` の部分は ``<int:question_id>`` から来ています。 山括弧を使"
"用すると、URLの一部が「キャプチャ」され、キーワード引数としてビュー関数に送信"
"します。 文字列の ``:question_id`` 部分は、一致するパターンを識別するために使"
"用される名前を定義し、``int`` 部分は、URLパスのこの部分に一致するパターンを決"
"定するコンバータです。コロン (``:``) はコンバータとパターン名を区切ります。"

msgid "Write views that actually do something"
msgstr "実際に動作するビューを書く"

msgid ""
"Each view is responsible for doing one of two things: returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :exc:`~django.http.Http404`. The rest "
"is up to you."
msgstr ""
"各ビューには二つの役割があります: 一つはリクエストされたページのコンテンツを"
"含む :class:`~django.http.HttpResponse` オブジェクトを返すこと、もう一つは :"
"exc:`~django.http.Http404` のような例外の送出です。それ以外の処理はユーザ次第"
"です。"

msgid ""
"Your view can read records from a database, or not. It can use a template "
"system such as Django's -- or a third-party Python template system -- or "
"not. It can generate a PDF file, output XML, create a ZIP file on the fly, "
"anything you want, using whatever Python libraries you want."
msgstr ""
"ビューはデータベースからレコードを読み出しても、読み出さなくてもかまいませ"
"ん。 Django のテンプレートシステム、あるいはサードパーティの Python テンプ "
"レートシステムを使ってもよいですし、使わなくてもかまいません。 PDF ファイルを"
"生成しても、 XML を出力しても、 ZIP ファイルをその場で生成してもかまいませ"
"ん。 Python ライブラリを使ってやりたいことを何でも実現できます。"

msgid ""
"All Django wants is that :class:`~django.http.HttpResponse`. Or an exception."
msgstr ""
"Django にとって必要なのは :class:`~django.http.HttpResponse` か、あるいは例外"
"です。"

msgid ""
"Because it's convenient, let's use Django's own database API, which we "
"covered in :doc:`Tutorial 2 </intro/tutorial02>`. Here's one stab at a new "
"``index()`` view, which displays the latest 5 poll questions in the system, "
"separated by commas, according to publication date:"
msgstr ""
"簡単のため、 :doc:`チュートリアルその 2 </intro/tutorial02>` で解説した "
"Django のデータベース API を使ってみましょう。試しに次のような ``index()`` "
"ビューを作ります。これは、システム上にある最新の 5 件の質問項目をカンマで区切"
"り、日付順に表示するビューです:"

msgid ""
"There's a problem here, though: the page's design is hard-coded in the view. "
"If you want to change the way the page looks, you'll have to edit this "
"Python code. So let's use Django's template system to separate the design "
"from Python by creating a template that the view can use."
msgstr ""
"このコードには問題があります。ビューの中で、ページのデザインがハードコードさ"
"れています。ページの見栄えを変更するたびに、 Python コードを編集する必要があ"
"ります。 Django のテンプレートシステムを使って、ビューから使用できるテンプ"
"レートを作成し、Python からデザインを分離しましょう。"

msgid ""
"First, create a directory called ``templates`` in your ``polls`` directory. "
"Django will look for templates in there."
msgstr ""
"最初に、 ``polls`` ディレクトリの中に、 ``templates``  ディレクトリを作成しま"
"す。 Django はそこからテンプレートを探します。"

msgid ""
"Your project's :setting:`TEMPLATES` setting describes how Django will load "
"and render templates. The default settings file configures a "
"``DjangoTemplates`` backend whose :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` "
"option is set to ``True``. By convention ``DjangoTemplates`` looks for a "
"\"templates\" subdirectory in each of the :setting:`INSTALLED_APPS`."
msgstr ""
"プロジェクトの :setting:`TEMPLATES` には、Django がどのようにテンプレートを"
"ロードしレンダリングするかが書かれています。デフォルトの設定ファイルでは、 "
"``DjangoTemplates`` バックエンドが設定されており、その :setting:`APP_DIRS "
"<TEMPLATES-APP_DIRS>` のオプションが ``True`` になっています。規約により、 "
"``DjangoTemplates`` は :setting:`INSTALLED_APPS` のそれぞれの \"templates\" "
"サブディレクトリを検索します。"

msgid ""
"Within the ``templates`` directory you have just created, create another "
"directory called ``polls``, and within that create a file called ``index."
"html``. In other words, your template should be at ``polls/templates/polls/"
"index.html``. Because of how the ``app_directories`` template loader works "
"as described above, you can refer to this template within Django as ``polls/"
"index.html``."
msgstr ""
"先ほど作成した ``templates`` ディレクトリ内で ``polls`` というディレクトリを"
"作成し、さらにその中に ``index.html`` というファイルを作成してください。つま"
"り、テンプレートは ``polls/templates/polls/index.html`` に書く必要がありま"
"す。 ``app_directories`` テンプレートローダは前述のように動くため、Django 内"
"でこのテンプレートを単に ``polls/index.html`` のように参照できます。"

msgid "Template namespacing"
msgstr "テンプレートの名前空間"

msgid ""
"Now we *might* be able to get away with putting our templates directly in "
"``polls/templates`` (rather than creating another ``polls`` subdirectory), "
"but it would actually be a bad idea. Django will choose the first template "
"it finds whose name matches, and if you had a template with the same name in "
"a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the best way "
"to ensure this is by *namespacing* them. That is, by putting those templates "
"inside *another* directory named for the application itself."
msgstr ""
"作ったテンプレートを (``polls`` という別のサブディレクトリを作らずに) 直接 "
"``polls/templates`` の中に置いてもいいのではないか、と思うかもしれませんね。"
"しかし、それは実際には悪い考えです。Django は、名前がマッチした最初のテンプ"
"レートを使用するので、もし *異なる* アプリケーションの中に同じ名前のテンプ"
"レートがあった場合、Django はそれらを区別することができません。そのため、"
"Django に正しいテンプレートを教えてあげる必要がありますが、一番簡単な方法は、"
"それらに *名前空間を与える*  ことです。アプリケーションと同じ名前をつけた *も"
"う一つの* ディレクトリの中にテンプレートを置いたのは、そういうわけなのです。"

msgid "Put the following code in that template:"
msgstr "テンプレートには次のコードを書きます:"

msgid "``polls/templates/polls/index.html``"
msgstr "``polls/templates/polls/index.html``"

msgid ""
"To make the tutorial shorter, all template examples use incomplete HTML. In "
"your own projects you should use `complete HTML documents`__."
msgstr ""
"チュートリアルを短くするために、すべてのテンプレートの例では不完全なHTMLを使"
"用しています。独自のプロジェクトでは `完全な HTML ドキュメント`__ を使用する"
"必要があります。"

msgid ""
"Now let's update our ``index`` view in ``polls/views.py`` to use the "
"template:"
msgstr ""
"このテンプレートを使用するために ``polls/views.py`` の ``index`` ビューを更新"
"してみましょう:"

msgid ""
"That code loads the template called  ``polls/index.html`` and passes it a "
"context. The context is a dictionary mapping template variable names to "
"Python objects."
msgstr ""
"このコードは、 ``polls/index.html`` というテンプレートをロードし、そこにコン"
"テキストを渡します。コンテキストは、テンプレート変数名を Python オブジェクト"
"にマッピングする辞書です。"

msgid ""
"Load the page by pointing your browser at \"/polls/\", and you should see a "
"bulleted-list containing the \"What's up\" question from :doc:`Tutorial 2 </"
"intro/tutorial02>`. The link points to the question's detail page."
msgstr ""
"ブラウザで \"/polls/\" を開くと、箇条書きのリストが表示されるはずです（リスト"
"には、  :doc:`チュートリアルその2 </intro/tutorial02>` で作った \"What's "
"up\" という質問が入っていますね）。リンクは質問の詳細ページを指します。"

msgid "A shortcut: :func:`~django.shortcuts.render`"
msgstr "ショートカット: :func:`~django.shortcuts.render`"

msgid ""
"It's a very common idiom to load a template, fill a context and return an :"
"class:`~django.http.HttpResponse` object with the result of the rendered "
"template. Django provides a shortcut. Here's the full ``index()`` view, "
"rewritten:"
msgstr ""
"テンプレートをロードしてコンテキストに値を入れ、テンプレートをレンダリングし"
"た結果を :class:`~django.http.HttpResponse`  オブジェクトで返す、というイディ"
"オムは非常によく使われます。 Django はこのためのショートカットを提供します。"
"これを使って ``index()`` ビューを書き換えてみましょう:"

msgid ""
"Note that once we've done this in all these views, we no longer need to "
"import :mod:`~django.template.loader` and :class:`~django.http.HttpResponse` "
"(you'll want to keep ``HttpResponse`` if you still have the stub methods for "
"``detail``, ``results``, and ``vote``)."
msgstr ""
"全部の view をこのように書き換えてしまえば、 :mod:`~django.template.loader` "
"や :class:`~django.http.HttpResponse` を import する必要はなくなります "
"(``detail`` 、 ``results`` 、 ``vote`` を引き続きスタブメソッドにするなら、 "
"``HttpResponse`` はそのままにしておいたほうがいいでしょう)。"

msgid ""
"The :func:`~django.shortcuts.render` function takes the request object as "
"its first argument, a template name as its second argument and a dictionary "
"as its optional third argument. It returns an :class:`~django.http."
"HttpResponse` object of the given template rendered with the given context."
msgstr ""
":func:`~django.shortcuts.render` 関数は、第1引数として request オブジェクト"
"を、第2引数としてテンプレート名を、第3引数（任意）として辞書を受け取ります。"
"この関数はテンプレートを指定のコンテキストでレンダリングし、その :class:"
"`~django.http.HttpResponse` オブジェクトを返します。"

msgid "Raising a 404 error"
msgstr "404 エラーの送出"

msgid ""
"Now, let's tackle the question detail view -- the page that displays the "
"question text for a given poll. Here's the view:"
msgstr ""
"さて、質問詳細ビューに取り組みましょう。このページは、指定された投票の質問文"
"を表示するものです。ビューは次のようになります:"

msgid ""
"The new concept here: The view raises the :exc:`~django.http.Http404` "
"exception if a question with the requested ID doesn't exist."
msgstr ""
"新しい概念が出てきました。このビューは、リクエストした ID を持つ質問が存在し"
"ないときに :exc:`~django.http.Http404` を送出します。"

msgid ""
"We'll discuss what you could put in that ``polls/detail.html`` template a "
"bit later, but if you'd like to quickly get the above example working, a "
"file containing just:"
msgstr ""
"``polls/detail.html`` テンプレートに何を書けばよいかは後で解説しますが、さし"
"あたって上の例題を動かしたければ、単に:"

msgid "``polls/templates/polls/detail.html``"
msgstr "``polls/templates/polls/detail.html``"

msgid "will get you started for now."
msgstr "と書いておいてください。"

msgid "A shortcut: :func:`~django.shortcuts.get_object_or_404`"
msgstr "ショートカット: :func:`~django.shortcuts.get_object_or_404`"

msgid ""
"It's a very common idiom to use :meth:`~django.db.models.query.QuerySet.get` "
"and raise :exc:`~django.http.Http404` if the object doesn't exist. Django "
"provides a shortcut. Here's the ``detail()`` view, rewritten:"
msgstr ""
":meth:`~django.db.models.query.QuerySet.get` を実行し、オブジェクトが存在しな"
"い場合には :exc:`~django.http.Http404` を送出することは非常によく使われるイ"
"ディオムです。 Django はこのためのショートカットを提供しています。ショート"
"カットを使って、 ``detail()`` ビューを書き換えてみましょう:"

msgid ""
"The :func:`~django.shortcuts.get_object_or_404` function takes a Django "
"model as its first argument and an arbitrary number of keyword arguments, "
"which it passes to the :meth:`~django.db.models.query.QuerySet.get` function "
"of the model's manager. It raises :exc:`~django.http.Http404` if the object "
"doesn't exist."
msgstr ""
":func:`~django.shortcuts.get_object_or_404` 関数は、Django モデルを第一引数"
"に、任意の数のキーワード引数を取り、モデルのマネージャの :meth:`~django.db."
"models.query.QuerySet.get` 関数に渡します。オブジェクトが存在しない場合は :"
"exc:`~django.http.Http404` を発生させます。"

msgid ""
"Why do we use a helper function :func:`~django.shortcuts.get_object_or_404` "
"instead of automatically catching the :exc:`~django.core.exceptions."
"ObjectDoesNotExist` exceptions at a higher level, or having the model API "
"raise :exc:`~django.http.Http404` instead of :exc:`~django.core.exceptions."
"ObjectDoesNotExist`?"
msgstr ""
"なぜ :exc:`~django.core.exceptions.ObjectDoesNotExist` 例外を高水準で自動的に"
"キャッチせず、ヘルパー関数 :func:`~django.shortcuts.get_object_or_404` を使う"
"のでしょうか、また、なぜモデル API に :exc:`~django.core.exceptions."
"ObjectDoesNotExist` ではなく、 :exc:`~django.http.Http404` を送出させるので"
"しょうか?"

msgid ""
"Because that would couple the model layer to the view layer. One of the "
"foremost design goals of Django is to maintain loose coupling. Some "
"controlled coupling is introduced in the :mod:`django.shortcuts` module."
msgstr ""
"なぜなら、それはモデル層とビュー層とを密結合させることになるからです。Django "
"の最も重要な設計目標の一つは、疎結合を維持することです。 :mod:`django."
"shortcuts` には結合がコントロールされたいくつかのモジュールが用意されていま"
"す。"

msgid ""
"There's also a :func:`~django.shortcuts.get_list_or_404` function, which "
"works just as :func:`~django.shortcuts.get_object_or_404` -- except using :"
"meth:`~django.db.models.query.QuerySet.filter` instead of :meth:`~django.db."
"models.query.QuerySet.get`. It raises :exc:`~django.http.Http404` if the "
"list is empty."
msgstr ""
":func:`~django.shortcuts.get_list_or_404` という関数もあります。この関数は  :"
"func:`~django.shortcuts.get_object_or_404` と同じように動きますが、 :meth:"
"`~django.db.models.query.QuerySet.get` ではなく、  :meth:`~django.db.models."
"query.QuerySet.filter` を使います。リストが空の場合は :exc:`~django.http."
"Http404` を送出します。"

msgid "Use the template system"
msgstr "テンプレートシステムを使う"

msgid ""
"Back to the ``detail()`` view for our poll application. Given the context "
"variable ``question``, here's what the ``polls/detail.html`` template might "
"look like:"
msgstr ""
"投票アプリの ``detail()`` ビューに戻りましょう。コンテキスト変数を  "
"``question`` とすると、 ``polls/detail.html`` テンプレートは次のようになりま"
"す:"

msgid ""
"The template system uses dot-lookup syntax to access variable attributes. In "
"the example of ``{{ question.question_text }}``, first Django does a "
"dictionary lookup on the object ``question``. Failing that, it tries an "
"attribute lookup -- which works, in this case. If attribute lookup had "
"failed, it would've tried a list-index lookup."
msgstr ""
"テンプレートシステムは、変数の属性にアクセスするためにドット検索の構文を使用"
"します。 ``{{ question.question_text }}`` を例にすると、はじめに Django は "
"``question`` オブジェクトに辞書検索を行います。それに失敗したら、今度は属性と"
"して検索を行い、このケースの場合は成功します。もし属性の検索に失敗すると、リ"
"ストインデックスでの検索を行います。"

msgid ""
"Method-calling happens in the :ttag:`{% for %}<for>` loop: ``question."
"choice_set.all`` is interpreted as the Python code ``question.choice_set."
"all()``, which returns an iterable of ``Choice`` objects and is suitable for "
"use in the :ttag:`{% for %}<for>` tag."
msgstr ""
"メソッドの呼び出しは :ttag:`{% for %}<for>` ループの中で行われています。 "
"``question.choice_set.all`` は、 Python コードの ``question.choice_set."
"all()`` と解釈されます。その結果、``Choice`` オブジェクトからなるイテレーショ"
"ン可能オブジェクトを返し、 :ttag:`{% for %}<for>` タグで使えるようになりま"
"す。"

msgid ""
"See the :doc:`template guide </topics/templates>` for more about templates."
msgstr ""
"テンプレートの詳しい動作は  :doc:`テンプレートガイド </topics/templates>` を"
"参照してください。"

msgid "Removing hardcoded URLs in templates"
msgstr "テンプレート内のハードコードされたURLを削除"

msgid ""
"Remember, when we wrote the link to a question in the ``polls/index.html`` "
"template, the link was partially hardcoded like this:"
msgstr ""
"``polls/index.html`` テンプレートで質問へのリンクを書いたとき、リンクの一部は"
"次のようにハードコードされていました:"

msgid ""
"The problem with this hardcoded, tightly-coupled approach is that it becomes "
"challenging to change URLs on projects with a lot of templates. However, "
"since you defined the ``name`` argument in the :func:`~django.urls.path` "
"functions in the ``polls.urls`` module, you can remove a reliance on "
"specific URL paths defined in your url configurations by using the ``{% url "
"%}`` template tag:"
msgstr ""
"このハードコードされた密結合のアプローチの問題は、プロジェクトにテンプレート"
"がたくさんある場合、URLの変更が困難になってしまうことです。しかし、 ``polls."
"urls`` モジュール の :func:`~django.urls.path` 関数で ``name`` 引数を定義した"
"ので、テンプレートタグの ``{％url％}`` を使うことで URL 設定で定義されている"
"特定の URL パスへの依存をなくすことができます:"

msgid ""
"The way this works is by looking up the URL definition as specified in the "
"``polls.urls`` module. You can see exactly where the URL name of 'detail' is "
"defined below::"
msgstr ""
"これが機能するのは、 ``polls.urls`` モジュールに指定されたURLの定義を検索する"
"からです。 'detail' のURL名は以下の箇所で定義されています::"

msgid ""
"If you want to change the URL of the polls detail view to something else, "
"perhaps to something like ``polls/specifics/12/`` instead of doing it in the "
"template (or templates) you would change it in ``polls/urls.py``::"
msgstr ""
"投票の詳細ビューの URL を何か他のものに変更したい場合、たとえば  ``polls/"
"specifics/12/`` のように変更したいとき、対象となるテンプレートを変更する代わ"
"りに、 ``polls/urls.py`` を変更します::"

msgid "Namespacing URL names"
msgstr "URL 名の名前空間"

msgid ""
"The tutorial project has just one app, ``polls``. In real Django projects, "
"there might be five, ten, twenty apps or more. How does Django differentiate "
"the URL names between them? For example, the ``polls`` app has a ``detail`` "
"view, and so might an app on the same project that is for a blog. How does "
"one make it so that Django knows which app view to create for a url when "
"using the ``{% url %}`` template tag?"
msgstr ""
"このチュートリアルプロジェクトが持つアプリは ``polls`` アプリ1つだけです。実"
"際の Django プロジェクトでは、5個、10個、20個、あるいはそれ以上のアプリがある"
"かもしれません。 Django はどうやってこれらの間の URL 名を区別するのでしょう"
"か？ 例えば、 ``polls`` アプリは ``detail`` ビューを含みますが、同じプロジェ"
"クトにブログのためのアプリがあり、そのアプリも同名のビューを含むかもしれませ"
"ん。 ``{% url %}`` テンプレートタグを使ったとき、 Django はどのアプリのビュー"
"に対して url を作成すればいいでしょうか？ これを Django にどう知らせればいい"
"でしょうか。"

msgid ""
"The answer is to add namespaces to your  URLconf. In the ``polls/urls.py`` "
"file, go ahead and add an ``app_name`` to set the application namespace:"
msgstr ""
"答えは、 URLconf に名前空間を追加すること、です。どうぞ ``polls/urls.py`` "
"ファイル内で ``app_name`` を追加し、アプリケーションの名前空間を設定してくだ"
"さい。"

msgid "Now change your ``polls/index.html`` template from:"
msgstr "それでは ``polls/index.html`` テンプレートを変更します。以下の形から、"

msgid "to point at the namespaced detail view:"
msgstr "以下の形にし、名前空間つきの詳細ビューを指すようにします:"

msgid ""
"When you're comfortable with writing views, read :doc:`part 4 of this "
"tutorial </intro/tutorial04>` to learn the basics about form processing and "
"generic views."
msgstr ""
"ビューを書けるようになったら、 :doc:`チュートリアルその4  </intro/"
"tutorial04>`  に進んで、簡単なフォームの処理と汎用ビューについて学びましょ"
"う。"

msgid "Writing your first Django app, part 4"
msgstr "はじめての Django アプリ作成、その 4"

msgid ""
"This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. "
"We're continuing the web-poll application and will focus on form processing "
"and cutting down our code."
msgstr ""
"このチュートリアルは :doc:`チュートリアルその 3 </intro/tutorial03>` の続きで"
"す。ここでは、引き続きWeb投票アプリケーションの開発を例にして、簡単なフォー "
"ム処理とコードの縮小化を中心に解説します。"

msgid "Write a minimal form"
msgstr "簡単なフォームを書く"

msgid ""
"Let's update our poll detail template (\"polls/detail.html\") from the last "
"tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""
"それでは、前回のチュートリアルで作成した投票詳細テンプレート (\"polls/detail."
"html\") を更新して、HTML の ``<form>`` 要素を入れましょう。"

msgid "A quick rundown:"
msgstr "簡単に説明:"

msgid ""
"The above template displays a radio button for each question choice. The "
"``value`` of each radio button is the associated question choice's ID. The "
"``name`` of each radio button is ``\"choice\"``. That means, when somebody "
"selects one of the radio buttons and submits the form, it'll send the POST "
"data ``choice=#`` where # is the ID of the selected choice. This is the "
"basic concept of HTML forms."
msgstr ""
"上のテンプレートは、各質問の選択肢のラジオボタンが表示するものです。各ラジオ"
"ボタンの ``value`` は、関連する質問の選択肢のIDです。各ラジオボタンの "
"``name`` は ``\"choice\"`` です。つまり、投票者がラジオボタンの1つを選択し、"
"フォームを送信すると、POSTデータ ``choice=#`` （＃は選んだ選択肢のID）が送信"
"されます。これは、HTMLフォームの基本的な概念です。"

msgid ""
"We set the form's ``action`` to ``{% url 'polls:vote' question.id %}``, and "
"we set ``method=\"post\"``. Using ``method=\"post\"`` (as opposed to "
"``method=\"get\"``) is very important, because the act of submitting this "
"form will alter data server-side. Whenever you create a form that alters "
"data server-side, use ``method=\"post\"``. This tip isn't specific to "
"Django; it's good web development practice in general."
msgstr ""
"フォームの ``action`` を ``{% url 'polls:vote' question.id %}`` に設定し、 さ"
"らに ``method=\"post\"`` を設定します。(``method=\"get\"`` ではなく) "
"``method=\"post\"`` を使用することは非常に重要です。なぜなら、フォームの送信"
"はサーバ側のデータの更新につながるからです。サーバ側のデータを更新するフォー"
"ムを作成する場合は、``method=\"post\"`` を使いましょう。これは、 Django 固有"
"のものではなく、いわばウェブ開発の王道です。"

msgid ""
"``forloop.counter`` indicates how many times the :ttag:`for` tag has gone "
"through its loop"
msgstr ""
"``forloop.counter`` は、 :ttag:`for` タグのループが何度実行されたかを表す値で"
"す。"

msgid ""
"Since we're creating a POST form (which can have the effect of modifying "
"data), we need to worry about Cross Site Request Forgeries. Thankfully, you "
"don't have to worry too hard, because Django comes with a helpful system for "
"protecting against it. In short, all POST forms that are targeted at "
"internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` template "
"tag."
msgstr ""
"(データを改ざんされる恐れのある) POST フォームを作成しているので、クロスサイ"
"トリクエストフォージェリを気にする必要があります。ありがたいことに、 Django "
"がこれに対応するとても使いやすい仕組みを提供してくれているので、あまり心配す"
"る必要はありません。手短に言うと、自サイト内を URL に指定した POST フォームに"
"は全て、 :ttag:`{% csrf_token %}<csrf_token>` テンプレートタグを使うべきで"
"す。"

msgid ""
"Now, let's create a Django view that handles the submitted data and does "
"something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we "
"created a URLconf for the polls application that includes this line:"
msgstr ""
"送信されたデータを処理するための Django のビューを作成しましょう。 :doc:`"
"チュートリアルその 3 </intro/tutorial03>` で、以下のような投票アプリケーショ"
"ンの URLconf を作成したことを思い出しましょう:"

msgid ""
"We also created a dummy implementation of the ``vote()`` function. Let's "
"create a real version. Add the following to ``polls/views.py``:"
msgstr ""
"このとき、 ``vote()`` 関数のダミー実装も作成しました。今度は本物を実装しま"
"しょう。以下を ``polls/views.py`` に追加してください:"

msgid ""
"This code includes a few things we haven't covered yet in this tutorial:"
msgstr ""
"このコードには、これまでのチュートリアルで扱っていなかったことがいくつか入っ"
"ています:"

msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like "
"object that lets you access submitted data by key name. In this case, "
"``request.POST['choice']`` returns the ID of the selected choice, as a "
"string. :attr:`request.POST <django.http.HttpRequest.POST>` values are "
"always strings."
msgstr ""
":attr:`request.POST <django.http.HttpRequest.POST>` は辞書のようなオブジェク"
"トです。キーを指定すると、送信したデータにアクセスできます。この場合、 "
"``request.POST['choice']`` は、選択された選択肢の ID を文字列として返しま"
"す。 :attr:`request.POST <django.http.HttpRequest.POST>` の値は常に文字列で"
"す。"

msgid ""
"Note that Django also provides :attr:`request.GET <django.http.HttpRequest."
"GET>` for accessing GET data in the same way -- but we're explicitly using :"
"attr:`request.POST <django.http.HttpRequest.POST>` in our code, to ensure "
"that data is only altered via a POST call."
msgstr ""
"Django では、同じ方法で GET データにアクセスするために :attr:`request.GET "
"<django.http.HttpRequest.GET>` も提供しています。ただし、このコードでは、"
"POST 呼び出し以外でデータが更新されないようにするために、:attr:`request.POST "
"<django.http.HttpRequest.POST>` を明示的に使っています。"

msgid ""
"``request.POST['choice']`` will raise :exc:`KeyError` if ``choice`` wasn't "
"provided in POST data. The above code checks for :exc:`KeyError` and "
"redisplays the question form with an error message if ``choice`` isn't given."
msgstr ""
"POST データに ``choice`` がなければ、 ``request.POST['choice']`` は :exc:"
"`KeyError` を送出します。上のコードでは :exc:`KeyError` をチェックし、 "
"``choice`` がない場合にはエラーメッセージ付きの質問フォームを再表示します。"

msgid ""
"``F(\"votes\") + 1`` :ref:`instructs the database <avoiding-race-conditions-"
"using-f>` to increase the vote count by 1."
msgstr ""
"``F(\"votes\") + 1`` は、 :ref:`データベースに投票数を 1 増やすよう指示しま"
"す <avoiding-race-conditions-using-f>` 。"

msgid ""
"After incrementing the choice count, the code returns an :class:`~django."
"http.HttpResponseRedirect` rather than a normal :class:`~django.http."
"HttpResponse`. :class:`~django.http.HttpResponseRedirect` takes a single "
"argument: the URL to which the user will be redirected (see the following "
"point for how we construct the URL in this case)."
msgstr ""
"choice のカウントをインクリメントした後、このコードは、  通常の :class:"
"`~django.http.HttpResponse` ではなく :class:`~django.http."
"HttpResponseRedirect` を返します。 :class:`~django.http."
"HttpResponseRedirect` はひとつの引数（リダイレクト先のURL）をとります  (この"
"場合にURLをどう構築するかについては、以下のポイントを参照してください)。"

msgid ""
"As the Python comment above points out, you should always return an :class:"
"`~django.http.HttpResponseRedirect` after successfully dealing with POST "
"data. This tip isn't specific to Django; it's good web development practice "
"in general."
msgstr ""
"上記の Python コメントが指摘するように、POST データが成功した後は常に :class:"
"`~django.http.HttpResponseRedirect` を返す必要があります。これは Django 固有"
"のものではなく、Web開発における良いプラクティスです。"

msgid ""
"We are using the :func:`~django.urls.reverse` function in the :class:"
"`~django.http.HttpResponseRedirect` constructor in this example. This "
"function helps avoid having to hardcode a URL in the view function. It is "
"given the name of the view that we want to pass control to and the variable "
"portion of the URL pattern that points to that view. In this case, using the "
"URLconf we set up in :doc:`Tutorial 3 </intro/tutorial03>`, this :func:"
"`~django.urls.reverse` call will return a string like ::"
msgstr ""
"この例では、 :class:`~django.http.HttpResponseRedirect` コンストラクタの中"
"で :func:`~django.urls.reverse` 関数を使用しています。この関数を使うと、"
"ビュー関数中での URL のハードコードを防げます。関数には、制御を渡したいビュー"
"の名前と、そのビューに与える URL パターンの位置引数を与えます。この例では、 :"
"doc:`チュートリアルその 3</intro/tutorial03>` で設定した URLconf を使っている"
"ので、 :func:`~django.urls.reverse` を呼ぶと、次のような文字列が返ってきま"
"す。"

msgid ""
"where the ``3`` is the value of ``question.id``. This redirected URL will "
"then call the ``'results'`` view to display the final page."
msgstr ""
"この ``3`` は ``question.id`` の値です。 リダイレクト先の URL は "
"``'results'`` ビューを呼び出し、最終的なページを表示します。"

msgid ""
"As mentioned in :doc:`Tutorial 3 </intro/tutorial03>`, ``request`` is an :"
"class:`~django.http.HttpRequest` object. For more on :class:`~django.http."
"HttpRequest` objects, see the :doc:`request and response documentation </ref/"
"request-response>`."
msgstr ""
":doc:`チュートリアルその 3 </intro/tutorial03>` で触れたように、 ``request`` "
"は :class:`~django.http.HttpRequest` オブジェクトです。 :class:`~django.http."
"HttpRequest` オブジェクトの詳細は :doc:`リクエスト・レスポンスオブジェクトの"
"ドキュメント </ref/request-response>` を参照してください。"

msgid ""
"After somebody votes in a question, the ``vote()`` view redirects to the "
"results page for the question. Let's write that view:"
msgstr ""
"誰かが質問の投票すると、 ``vote()`` ビューは質問の結果ページにリダイレクトし"
"ます。このビューを書きましょう:"

msgid ""
"This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial "
"3 </intro/tutorial03>`. The only difference is the template name. We'll fix "
"this redundancy later."
msgstr ""
":doc:`チュートリアルその 3 </intro/tutorial03>` の ``detail()`` とほぼ同じで"
"す。テンプレートの名前のみ違います。この冗長さは後で修正することにします。"

msgid "Now, create a ``polls/results.html`` template:"
msgstr "それでは ``polls/results.html`` テンプレートを作成します:"

msgid "``polls/templates/polls/results.html``"
msgstr "``polls/templates/polls/results.html``"

msgid ""
"Now, go to ``/polls/1/`` in your browser and vote in the question. You "
"should see a results page that gets updated each time you vote. If you "
"submit the form without having chosen a choice, you should see the error "
"message."
msgstr ""
"ブラウザで ``/polls/1/`` を表示して投票してみましょう。票を入れるたびに、結果"
"のページが更新されていることがわかるはずです。選択肢を選ばずにフォームを送信"
"すると、エラーメッセージを表示されるはずです。"

msgid "Use generic views: Less code is better"
msgstr "汎用ビューを使う: コードが少ないのはいいことだ"

msgid ""
"The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and "
"``results()`` views are very short -- and, as mentioned above, redundant. "
"The ``index()`` view, which displays a list of polls, is similar."
msgstr ""
"``detail()`` ( :doc:`チュートリアルその 3 </intro/tutorial03>` ) と "
"``results()`` ビューはとても簡単で、先程も述べたように冗長です。投票の一覧を"
"表示する ``index()`` ビューも同様です。 "

msgid ""
"These views represent a common case of basic web development: getting data "
"from the database according to a parameter passed in the URL, loading a "
"template and returning the rendered template. Because this is so common, "
"Django provides a shortcut, called the \"generic views\" system."
msgstr ""
"これらのビューは基本的な Web開発の一般的なケースを表します。すなわち、 URL を"
"介して渡されたパラメータに従ってデータベースからデータを取り出し、テンプレー"
"トをロードして、レンダリングしたテンプレートを返します。これはきわめてよくあ"
"ることなので、 Django では、汎用ビュー（generic view）というショートカットを"
"提供しています。"

msgid ""
"Generic views abstract common patterns to the point where you don't even "
"need to write Python code to write an app. For example, the :class:`~django."
"views.generic.list.ListView` and :class:`~django.views.generic.detail."
"DetailView` generic views abstract the concepts of \"display a list of "
"objects\" and \"display a detail page for a particular type of object\" "
"respectively."
msgstr ""
"汎用ビューは一般的なパターンを抽象化し、Pythonコードを書かなくてもアプリを実"
"装できるようになっています。例えば、 :class:`~django.views.generic.list."
"ListView` と :class:`~django.views.generic.detail.DetailView` は、それぞれ"
"「オブジェクトの一覧を表示する」「特定のオブジェクトの詳細ページを表示する」"
"という概念を抽象化したものです。"

msgid ""
"Let's convert our poll app to use the generic views system, so we can delete "
"a bunch of our own code. We'll have to take a few steps to make the "
"conversion. We will:"
msgstr ""
"これまで作成してきた poll アプリを汎用ビューシステムに変換して、 コードをばっ"
"さり捨てられるようにしましょう。変換にはほんの数ステップしかか かりません。そ"
"のステップは:"

msgid "Convert the URLconf."
msgstr "URLconf を変換する。"

msgid "Delete some of the old, unneeded views."
msgstr "古い不要なビューを削除する。"

msgid "Introduce new views based on Django's generic views."
msgstr "新しいビューに Djangoの汎用ビューを設定する。"

msgid "Read on for details."
msgstr "詳しく見てゆきましょう。"

msgid "Why the code-shuffle?"
msgstr "なぜコードを入れ換えるの？"

msgid ""
"Generally, when writing a Django app, you'll evaluate whether generic views "
"are a good fit for your problem, and you'll use them from the beginning, "
"rather than refactoring your code halfway through. But this tutorial "
"intentionally has focused on writing the views \"the hard way\" until now, "
"to focus on core concepts."
msgstr ""
"一般に Django アプリケーションを書く場合は、まず自分の問題を解決するために汎"
"用ビューが適しているか考えた上で、最初から汎用ビューを使い、途中まで書き上げ"
"たコードをリファクタすることはありません。ただ、このチュートリアルでは中核と"
"なるコンセプトに焦点を合わせるために、わざと「大変な」ビューの作成に集中して"
"もらったのです。"

msgid "You should know basic math before you start using a calculator."
msgstr "電卓を使う前に、算数の基本を知っておかねばならないのと同じです。"

msgid "Amend URLconf"
msgstr "URLconf の修正"

msgid "First, open the ``polls/urls.py`` URLconf and change it like so:"
msgstr "まず、 URLconf の ``polls/urls.py`` を開き、次のように変更します:"

msgid ""
"Note that the name of the matched pattern in the path strings of the second "
"and third patterns has changed from ``<question_id>`` to ``<pk>``. This is "
"necessary because we'll use the :class:`~django.views.generic.detail."
"DetailView` generic view to replace our ``detail()`` and ``results()`` "
"views, and it expects the primary key value captured from the URL to be "
"called ``\"pk\"``."
msgstr ""
"2番目と3番目のパターンのパス文字列にマッチしたパターンの名前が、 "
"<question_id> から <pk> に変わっていることに注意してください。こうする必要が"
"あるのは、この後 :class:`~django.views.generic.detail.DetailView` という汎用"
"ビューを使って ``detail()`` と ``results()`` ビューを置き換えますが、この"
"ビューではURLから取得したプライマリーキーの値を ``\"pk\"`` として扱うためで"
"す。"

msgid "Amend views"
msgstr "views の修正"

msgid ""
"Next, we're going to remove our old ``index``, ``detail``, and ``results`` "
"views and use Django's generic views instead. To do so, open the ``polls/"
"views.py`` file and change it like so:"
msgstr ""
"次に、古い ``index`` 、 ``detail`` 、と ``results`` のビューを削除し、代わり"
"に Django の汎用ビューを使用します。これを行うには、 ``polls/views.py`` ファ"
"イルを開き、次のように変更します:"

msgid ""
"Each generic view needs to know what model it will be acting upon. This is "
"provided using either the ``model`` attribute (in this example, ``model = "
"Question`` for  ``DetailView`` and ``ResultsView``) or by defining the :meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_queryset` method (as "
"shown in ``IndexView``)."
msgstr ""
"それぞれの汎用ビューには、どのモデルに対して動作するかを認識させる必要があり"
"ます。これは(``DetailView`` と ``ResultsView`` の ``model = Question`` のよう"
"に) ``model`` 属性を指定するか、( ``IndexView`` のように) :meth:`~django."
"views.generic.list.MultipleObjectMixin.get_queryset` 関数を定義することで実現"
"できます。"

msgid ""
"By default, the :class:`~django.views.generic.detail.DetailView` generic "
"view uses a template called ``<app name>/<model name>_detail.html``. In our "
"case, it would use the template ``\"polls/question_detail.html\"``. The "
"``template_name`` attribute is used to tell Django to use a specific "
"template name instead of the autogenerated default template name. We also "
"specify the ``template_name`` for the ``results`` list view -- this ensures "
"that the results view and the detail view have a different appearance when "
"rendered, even though they're both a :class:`~django.views.generic.detail."
"DetailView` behind the scenes."
msgstr ""
"デフォルトでは、 :class:`~django.views.generic.detail.DetailView` 汎用ビュー"
"は ``<app name>/<model name>_detail.html`` という名前のテンプレートを使いま"
"す。この場合、テンプレートの名前は ``\"polls/question_detail.html\"`` です。 "
"``template_name`` 属性を指定すると、自動生成されたデフォルトのテンプレート名"
"ではなく、指定したテンプレート名を使うように Django に伝えることができます。"
"また、 ``results`` リストビューにも ``template_name`` を指定します。これに"
"よって、 結果ビューと詳細ビューをレンダリングしたとき、（裏側ではどちらも :"
"class:`~django.views.generic.detail.DetailView` ですが）それぞれ違った見た目"
"になります。"

msgid ""
"Similarly, the :class:`~django.views.generic.list.ListView` generic view "
"uses a default template called ``<app name>/<model name>_list.html``; we use "
"``template_name`` to tell :class:`~django.views.generic.list.ListView` to "
"use our existing ``\"polls/index.html\"`` template."
msgstr ""
"同様に、 :class:`~django.views.generic.list.ListView` 汎用ビューは ``<app "
"name>/<model name>_list.html`` というデフォルトのテンプレートを使うので、 "
"``template_name`` を使って :class:`~django.views.generic.list.ListView` に既"
"存の ``\"polls/index.html\"`` テンプレートを使用するように伝えます。"

msgid ""
"In previous parts of the tutorial, the templates have been provided with a "
"context that contains the ``question`` and ``latest_question_list`` context "
"variables. For ``DetailView`` the ``question`` variable is provided "
"automatically -- since we're using a Django model (``Question``), Django is "
"able to determine an appropriate name for the context variable. However, for "
"ListView, the automatically generated context variable is ``question_list``. "
"To override this we provide the ``context_object_name`` attribute, "
"specifying that we want to use ``latest_question_list`` instead. As an "
"alternative approach, you could change your templates to match the new "
"default context variables -- but it's a lot easier to tell Django to use the "
"variable you want."
msgstr ""
"このチュートリアルの前の部分では、 ``question`` や ``latest_question_list`` "
"といったコンテキスト変数が含まれるコンテキストをテンプレートに渡していまし"
"た。``DetailView`` には ``question`` という変数が自動的に渡されます。なぜな"
"ら、 Django モデル (``Question``) を使用していて、 Django はコンテキスト変数"
"にふさわしい名前を決めることができるからです。一方で、 ListView では、自動的"
"に生成されるコンテキスト変数は ``question_list`` になります。これを上書きする"
"には、 ``context_object_name`` 属性を与え、 ``latest_question_list`` を代わり"
"に使用すると指定します。この代替アプローチとして、テンプレートのほうを変え"
"て、新しいデフォルトのコンテキスト変数の名前と一致させることもできます。しか"
"し、使用したい変数名を Django に伝えるだけのほうが簡単でしょう。"

msgid "Run the server, and use your new polling app based on generic views."
msgstr ""
"サーバを実行して、新しく汎用ビューベースにした投票アプリケーションを使ってみ"
"ましょう。"

msgid ""
"For full details on generic views, see the :doc:`generic views documentation "
"</topics/class-based-views/index>`."
msgstr ""
"汎用ビューの詳細は、:doc:`汎用ビューのドキュメント </topics/class-based-"
"views/index>` を参照してください。"

msgid ""
"When you're comfortable with forms and generic views, read :doc:`part 5 of "
"this tutorial</intro/tutorial05>` to learn about testing our polls app."
msgstr ""
"フォームや汎用ビューを使いこなせるようになったら、 :doc:`チュートリアルその5 "
"</intro/tutorial05>` に進んで、投票アプリのテストについて学びましょう。 "

msgid "Writing your first Django app, part 5"
msgstr "はじめての Django アプリ作成、その 5"

msgid ""
"This tutorial begins where :doc:`Tutorial 4 </intro/tutorial04>` left off. "
"We've built a web-poll application, and we'll now create some automated "
"tests for it."
msgstr ""
"このチュートリアルは :doc:`チュートリアル 4 </intro/tutorial04>` の続きです。"
"Web 投票アプリケーションが完成したので、今度は自動テストを作ってみましょう。"

msgid "Introducing automated testing"
msgstr "自動テストの導入"

msgid "What are automated tests?"
msgstr "自動テストとは何ですか？"

msgid "Tests are routines that check the operation of your code."
msgstr "テストは、コードの動作をチェックするルーチンです。"

msgid ""
"Testing operates at different levels. Some tests might apply to a tiny "
"detail (*does a particular model method return values as expected?*) while "
"others examine the overall operation of the software (*does a sequence of "
"user inputs on the site produce the desired result?*). That's no different "
"from the kind of testing you did earlier in :doc:`Tutorial 2 </intro/"
"tutorial02>`, using the :djadmin:`shell` to examine the behavior of a "
"method, or running the application and entering data to check how it behaves."
msgstr ""
"テストは異なるレベルで実行されます。あるテストは、小さな機能に対して行われる"
"もの (*ある特定のモデルのメソッドは期待通りの値を返すか？*) かもしれません"
"し、別のテストは、ソフトウェア全体の動作に対して行われるもの (*サイト上での"
"ユーザの一連の入力に対して、期待通りの結果が表示されるか？*) かもしれません。"
"こうしたテストは、前に :doc:`チュートリアル その2 </intro/tutorial02>` で :"
"djadmin:`shell` を用いてメソッドの動作を確かめたことや、実際にアプリケーショ"
"ンを実行して値を入力して結果がどうなるのかを確かめるといったことと、何も違い"
"はありません。"

msgid ""
"What's different in *automated* tests is that the testing work is done for "
"you by the system. You create a set of tests once, and then as you make "
"changes to your app, you can check that your code still works as you "
"originally intended, without having to perform time consuming manual testing."
msgstr ""
"*自動* テストが他と異なる点は、テスト作業がシステムによって実行されることで"
"す。一度テストセットを作成すると、それからはアプリに変更を加えるたびに、あな"
"たの意図した通りにコードが動作するか確認できます。手動でテストする時間がかか"
"ることはありません。"

msgid "Why you need to create tests"
msgstr "なぜテストを作成する必要があるのか"

msgid "So why create tests, and why now?"
msgstr "どうしてテストを作るのか？また、なぜ今なのか？"

msgid ""
"You may feel that you have quite enough on your plate just learning Python/"
"Django, and having yet another thing to learn and do may seem overwhelming "
"and perhaps unnecessary. After all, our polls application is working quite "
"happily now; going through the trouble of creating automated tests is not "
"going to make it work any better. If creating the polls application is the "
"last bit of Django programming you will ever do, then true, you don't need "
"to know how to create automated tests. But, if that's not the case, now is "
"an excellent time to learn."
msgstr ""
"もしかしたら、 Python や Django を学ぶのに手一杯で、さらに別のことを学ぶのは"
"大変で不必要なことだと思われるかもしれません。だって投票アプリケーションはき"
"ちんと動いているし、わざわざ自動テストを導入したところでアプリケーションがよ"
"り良くなるわけではないのだから。もし Django プログラミングを学ぶ目的がこの投"
"票アプリケーションを作ることだけならば、確かに自動テストの導入は必要ないと思"
"います。しかし、そうではないなら、今こそ自動テストについて学ぶ絶好の機会で"
"す。"

msgid "Tests will save you time"
msgstr "テストはあなたの時間を節約します"

msgid ""
"Up to a certain point, 'checking that it seems to work' will be a "
"satisfactory test. In a more sophisticated application, you might have "
"dozens of complex interactions between components."
msgstr ""
"ある程度のところまでは、 '（動かしてみて、）正しく動いていそうであることを確"
"認する' だけでもテストとして十分でしょう。高機能なアプリケーションでは、コン"
"ポーネント間の複雑な相互作用が数多くあるかもしれません。"

msgid ""
"A change in any of those components could have unexpected consequences on "
"the application's behavior. Checking that it still 'seems to work' could "
"mean running through your code's functionality with twenty different "
"variations of your test data to make sure you haven't broken something - not "
"a good use of your time."
msgstr ""
"それらのコンポーネントのどれかを変更した場合、予想外の振る舞いをアプリケー"
"ションがする可能性があります。'正しく動いているらしい' メソッドを使う場合、プ"
"ログラムを壊していないことを確かめるためには、様々なテストデータを用いてプロ"
"グラムを走らせる必要があります。これは、良い時間の使い方ではありません。"

msgid ""
"That's especially true when automated tests could do this for you in "
"seconds. If something's gone wrong, tests will also assist in identifying "
"the code that's causing the unexpected behavior."
msgstr ""
"自動テストを導入することによってプログラムが正しく動くことの確認を一瞬で終わ"
"らせることができ、またテストはプログラムのどこで予期せぬ動作が起きたかを見極"
"めるのに役立つことでしょう。"

msgid ""
"Sometimes it may seem a chore to tear yourself away from your productive, "
"creative programming work to face the unglamorous and unexciting business of "
"writing tests, particularly when you know your code is working properly."
msgstr ""
"テストを書くという行為は、特にプログラムが適切に動くと分かっているときには、"
"生産的でも創造的でもないつまらないことのように思われるかもしれません。"

msgid ""
"However, the task of writing tests is a lot more fulfilling than spending "
"hours testing your application manually or trying to identify the cause of a "
"newly-introduced problem."
msgstr ""
"しかしテストを書くことは、何時間もかけてアプリケーションの動作を確認したり、"
"新しく発生した問題の原因を探したりすることよりもずっとやりがいのあることなの"
"です。"

msgid "Tests don't just identify problems, they prevent them"
msgstr ""
"またテストは問題点を検出するのみならず、問題が発生するのを防ぐこともできま"
"す。"

msgid ""
"It's a mistake to think of tests merely as a negative aspect of development."
msgstr "テストを単に開発の負の面と考えることは誤りです。"

msgid ""
"Without tests, the purpose or intended behavior of an application might be "
"rather opaque. Even when it's your own code, you will sometimes find "
"yourself poking around in it trying to find out what exactly it's doing."
msgstr ""
"テストなくしては、アプリケーションの目的や意図した動作というものが曖昧になっ"
"てしまうことがあります。自分自身で書いたコードであっても、時にはそのコードが"
"することを正確に理解するのに時間がかかってしまうことがあります。"

msgid ""
"Tests change that; they light up your code from the inside, and when "
"something goes wrong, they focus light on the part that has gone wrong - "
"*even if you hadn't even realized it had gone wrong*."
msgstr ""
"テストはこの状況を大きく変え、いわばコードを内側から照らし出してくれます。そ"
"して、何か間違ったことをしてしまった時には、*自分自身では間違っていると気づか"
"なかった場合でさえ*、間違いが起きた場所にスポットライトを当ててくれるのです。"

msgid "Tests make your code more attractive"
msgstr "テストは、コードをより魅力的にします"

msgid ""
"You might have created a brilliant piece of software, but you will find that "
"many other developers will refuse to look at it because it lacks tests; "
"without tests, they won't trust it. Jacob Kaplan-Moss, one of Django's "
"original developers, says \"Code without tests is broken by design.\""
msgstr ""
"たとえあなたが輝かしいソフトウェアを作ったとしても、テストがないというそれだ"
"けの理由で、多くの開発者は見ることさえしてくれないでしょう。テストのないソフ"
"トは信用されないのです。Django を開発した Jacob Kaplan-Moss は次の言葉を残し"
"ています。「テストのないコードは、デザインとして壊れている。」"

msgid ""
"That other developers want to see tests in your software before they take it "
"seriously is yet another reason for you to start writing tests."
msgstr ""
"あなたのソフトウェアを他の開発者が真剣に見てもらうというのも、テストを書くべ"
"きもう一つの理由です。"

msgid "Tests help teams work together"
msgstr "テストを書くことはチームで共同作業を行う上で役に立ちます。"

msgid ""
"The previous points are written from the point of view of a single developer "
"maintaining an application. Complex applications will be maintained by "
"teams. Tests guarantee that colleagues don't inadvertently break your code "
"(and that you don't break theirs without knowing). If you want to make a "
"living as a Django programmer, you must be good at writing tests!"
msgstr ""
"これまでの点は、1人の開発者でアプリケーションをメンテナンスしているという観点"
"から書きました。しかし、複雑なアプリケーションはチームでメンテナンスされるよ"
"うになるものです。テストは、あなたが書いたコードを他人がうっかり壊してしまう"
"ことから守ってくれます (そして、他の人が書いたコードをあなたが壊してしまうこ"
"とからも)。Django のプログラマとして生きてゆくつもりなら、良いテストを絶対に"
"書かなければなりません！"

msgid "Basic testing strategies"
msgstr "基本的なテスト方針"

msgid "There are many ways to approach writing tests."
msgstr "テストを書くためのアプローチには、さまざまなものがあります。"

msgid ""
"Some programmers follow a discipline called \"`test-driven development`_\"; "
"they actually write their tests before they write their code. This might "
"seem counterintuitive, but in fact it's similar to what most people will "
"often do anyway: they describe a problem, then create some code to solve it. "
"Test-driven development formalizes the problem in a Python test case."
msgstr ""

msgid ""
"More often, a newcomer to testing will create some code and later decide "
"that it should have some tests. Perhaps it would have been better to write "
"some tests earlier, but it's never too late to get started."
msgstr ""
"テストの初心者の多くは、先にコードを書いてから、その後でテストが必要だと考え"
"るものです。おそらく、もっと早くからいくつかテストを書いておいた方が良いです"
"が、テストを始めるのに遅すぎるということはありません。"

msgid ""
"Sometimes it's difficult to figure out where to get started with writing "
"tests. If you have written several thousand lines of Python, choosing "
"something to test might not be easy. In such a case, it's fruitful to write "
"your first test the next time you make a change, either when you add a new "
"feature or fix a bug."
msgstr ""
"どこからテストを書き始めるべきか、把握が難しい場合もあります。もしすでに数千"
"行の Python コードがあったとしたら、テストすべき場所を選ぶのは簡単ではないか"
"もしれません。そのような場合には、次に新しい機能の追加やバグの修正を行う時"
"に、最初のテストを書いてみると役に立つでしょう。"

msgid "So let's do that right away."
msgstr "それでは早速始めてみましょう。"

msgid "Writing our first test"
msgstr "初めてのテスト作成"

msgid "We identify a bug"
msgstr "バグを見つけたとき"

msgid ""
"Fortunately, there's a little bug in the ``polls`` application for us to fix "
"right away: the ``Question.was_published_recently()`` method returns "
"``True`` if the ``Question`` was published within the last day (which is "
"correct) but also if the ``Question``’s ``pub_date`` field is in the future "
"(which certainly isn't)."
msgstr ""
"運よく、 ``polls`` のアプリケーションにはすぐに修正可能な小さなバグがありまし"
"た。``Question.was_published_recently()`` のメソッドは ``Question`` が昨日以"
"降に作成された場合に ``True`` を返すのですが(適切な動作)、 ``Question`` の "
"``pub_date`` が未来の日付になっている場合にも ``True`` を返してしまいます(不"
"適切な動作)。"

msgid ""
"Confirm the bug by using the :djadmin:`shell` to check the method on a "
"question whose date lies in the future:"
msgstr ""
"未来の日付の質問のメソッドをチェックするには、 :djadmin:`shell` を使用してバ"
"グを確認してください。"

msgid "Since things in the future are not 'recent', this is clearly wrong."
msgstr "未来の日付は '最近' ではないため、この結果は明らかに間違っています。"

msgid "Create a test to expose the bug"
msgstr "バグをあぶり出すためにテストを作成する"

msgid ""
"What we've just done in the :djadmin:`shell` to test for the problem is "
"exactly what we can do in an automated test, so let's turn that into an "
"automated test."
msgstr ""
"問題をテストするために :djadmin:`shell` でたった今したことこそ、自動テストで"
"したいことです。そこで、今やったことを自動テストに変換してみましょう。"

msgid ""
"A conventional place for an application's tests is in the application's "
"``tests.py`` file; the testing system will automatically find tests in any "
"file whose name begins with ``test``."
msgstr ""
"アプリケーションのテストを書く場所は、慣習として、アプリケーションの ``tests."
"py`` ファイル内ということになっています。テストシステムが ``test`` で始まる名"
"前のファイルの中から、自動的にテストを見つけてくれます。"

msgid ""
"Put the following in the ``tests.py`` file in the ``polls`` application:"
msgstr ""
"``polls`` アプリケーションの ``tests.py`` ファイルに次のコードを書きます。"

msgid "``polls/tests.py``"
msgstr "``polls/tests.py``"

msgid ""
"Here we have created a :class:`django.test.TestCase` subclass with a method "
"that creates a ``Question`` instance with a ``pub_date`` in the future. We "
"then check the output of ``was_published_recently()`` - which *ought* to be "
"False."
msgstr ""
"ここでは、未来の日付の ``pub_date`` を持つ ``Question`` のインスタンスを生成"
"するメソッドを持つ :class:`django.test.TestCase` を継承したサブクラスを作って"
"います。それから、``was_published_recently()`` の出力をチェックしています。こ"
"れは False になるはずです。"

msgid "Running tests"
msgstr "テストの実行"

msgid "In the terminal, we can run our test:"
msgstr "ターミナルから、次のコマンドでテストが実行できます。"

msgid "and you'll see something like:"
msgstr "すると、次のような結果になるでしょう。"

msgid "Different error?"
msgstr "エラーが違う？"

msgid ""
"If instead you're getting a ``NameError`` here, you may have missed a step "
"in :ref:`Part 2 <tutorial02-import-timezone>` where we added imports of "
"``datetime`` and ``timezone`` to ``polls/models.py``. Copy the imports from "
"that section, and try running your tests again."
msgstr ""
"代わりにここで ``NameError`` を取得している場合、:ref:`Part 2<tutorial02-"
"import-timezone>` のステップを見逃している可能性があります。そのステップで"
"は、``polls/models.py`` に ``datetime`` と ``timezone`` のインポートを追加し"
"ました。そのセクションからインポートを複製し、テストを再度実行してください。"

msgid "What happened is this:"
msgstr "ここでは以下のようなことが起こりました。"

msgid "``manage.py test polls`` looked for tests in the ``polls`` application"
msgstr ""
"``manage.py test polls`` は、``polls`` アプリケーション内にあるテストを探しま"
"す"

msgid "it found a subclass of the :class:`django.test.TestCase` class"
msgstr ":class:`django.test.TestCase` クラスのサブクラスを発見します"

msgid "it created a special database for the purpose of testing"
msgstr "テストのための特別なデータベースを作成します"

msgid "it looked for test methods - ones whose names begin with ``test``"
msgstr "テスト用のメソッドとして、``test`` で始まるメソッドを探します"

msgid ""
"in ``test_was_published_recently_with_future_question`` it created a "
"``Question`` instance whose ``pub_date`` field is 30 days in the future"
msgstr ""
"``test_was_published_recently_with_future_question`` の中で、``pub_date`` "
"フィールドに今日から30日後の日付を持つ ``Question`` インスタンスが作成されま"
"す"

msgid ""
"... and using the ``assertIs()`` method, it discovered that its "
"``was_published_recently()`` returns ``True``, though we wanted it to return "
"``False``"
msgstr ""
"そして最後に、 ``assertIs()`` メソッドを使うことで、本当に返してほしいのは "
"``False`` だったにもかかわらず、 ``was_published_recently()`` が ``True`` を"
"返していることを発見します"

msgid ""
"The test informs us which test failed and even the line on which the failure "
"occurred."
msgstr ""
"テストは私たちにテストの失敗を教えてくれるだけでなく、失敗が起こったコードの"
"行数まで教えてくれています。"

msgid "Fixing the bug"
msgstr "バグを修正する"

msgid ""
"We already know what the problem is: ``Question.was_published_recently()`` "
"should return ``False`` if its ``pub_date`` is in the future. Amend the "
"method in ``models.py``, so that it will only return ``True`` if the date is "
"also in the past:"
msgstr ""
"私たちはすでに問題の原因を知っています。それは、``Question."
"was_published_recently()`` は ``pub_date`` が未来の日付だった場合には "
"``False`` を返さなければならない、ということです。``models.py`` にあるメソッ"
"ドを修正して、日付が過去だった場合にのみ ``True`` を返すようにしましょう。"

msgid "and run the test again:"
msgstr "そして、もう一度テストを実行します。"

msgid ""
"After identifying a bug, we wrote a test that exposes it and corrected the "
"bug in the code so our test passes."
msgstr ""
"バグを発見した後、私たちはそのバグをあぶり出してくれるようなテストを書いて、"
"コード内のバグを直したので、テストは無事にパスされました。"

msgid ""
"Many other things might go wrong with our application in the future, but we "
"can be sure that we won't inadvertently reintroduce this bug, because "
"running the test will warn us immediately. We can consider this little "
"portion of the application pinned down safely forever."
msgstr ""
"このアプリケーションでは将来、たくさんの他のバグが生じるかもしれませんが、こ"
"のバグがうっかり入ってしまうことは二度とありません。単にテストを実行するだけ"
"で、すぐに警告を受けられるからです。アプリケーションのこの小さな部分が、安全"
"に、そして永遠にピン留めされたと考えて差し支えありません。"

msgid "More comprehensive tests"
msgstr "より包括的なテスト"

msgid ""
"While we're here, we can further pin down the ``was_published_recently()`` "
"method; in fact, it would be positively embarrassing if in fixing one bug we "
"had introduced another."
msgstr ""
"この段階で、``was_published_recently()`` メソッドをさらにピン留めしておけま"
"す。実際、一つのバグを直したことでほかのバグを作り出すなんてしたくありません"
"よね。"

msgid ""
"Add two more test methods to the same class, to test the behavior of the "
"method more comprehensively:"
msgstr ""
"このメソッドの振る舞いをより包括的にテストするために、同じクラスにさらに2つの"
"テストを追加しましょう。"

msgid ""
"And now we have three tests that confirm that ``Question."
"was_published_recently()`` returns sensible values for past, recent, and "
"future questions."
msgstr ""
"これで、``Question.was_published_recently()`` が過去、現在、そして未来の質問"
"に対して意味のある値を返すことを確認する3つのテストが揃いました。"

msgid ""
"Again, ``polls`` is a minimal application, but however complex it grows in "
"the future and whatever other code it interacts with, we now have some "
"guarantee that the method we have written tests for will behave in expected "
"ways."
msgstr ""
"先述したように ``polls`` は簡単なアプリケーションですが、メソッドに対してテス"
"トを書いたおかげで、将来このアプリケーションがどんなに複雑になっても、あるい"
"は他のどんなコードと相互作用するようになっても、メソッドが期待どおりに動作す"
"ることを保証できるようになったのです。"

msgid "Test a view"
msgstr "ビューをテストする"

msgid ""
"The polls application is fairly undiscriminating: it will publish any "
"question, including ones whose ``pub_date`` field lies in the future. We "
"should improve this. Setting a ``pub_date`` in the future should mean that "
"the Question is published at that moment, but invisible until then."
msgstr ""
"この投票アプリケーションは、まだ質問をちゃんと見分けることができません。"
"``pub_date`` フィールドが未来の日付になっている質問を含め、どんな質問でも公開"
"してしまいます。この点を改善するべきでしょう。``pub_date`` を未来に設定すると"
"いうことは、その Question がその日付になった時に公開され、それまでは表示され"
"ないことを意味するはずです。"

msgid "A test for a view"
msgstr "ビューに対するテスト"

msgid ""
"When we fixed the bug above, we wrote the test first and then the code to "
"fix it. In fact that was an example of test-driven development, but it "
"doesn't really matter in which order we do the work."
msgstr ""
"上でバグを修正した時には、初めにテストを書いてからコードを修正しました。実"
"は、テスト駆動開発の簡単な例だったわけです。しかし、テストとコードを書く順番"
"はどちらでも構いません。"

msgid ""
"In our first test, we focused closely on the internal behavior of the code. "
"For this test, we want to check its behavior as it would be experienced by a "
"user through a web browser."
msgstr ""
"初めのテストでは、コード内部の細かい動作に焦点を当てましたが、このテストで"
"は、ユーザが Web ブラウザを通して経験する動作をチェックしましょう。"

msgid ""
"Before we try to fix anything, let's have a look at the tools at our "
"disposal."
msgstr "初めに何かを修正する前に、使用できるツールについて見ておきましょう。"

msgid "The Django test client"
msgstr "Django テストクライアント"

msgid ""
"Django provides a test :class:`~django.test.Client` to simulate a user "
"interacting with the code at the view level.  We can use it in ``tests.py`` "
"or even in the :djadmin:`shell`."
msgstr ""
"Django は、ビューレベルでのユーザとのインタラクションをシミュレートすることが"
"できる :class:`~django.test.Client` を用意しています。これを ``tests.py`` の"
"中や :djadmin:`shell` でも使うことができます。"

msgid ""
"We will start again with the :djadmin:`shell`, where we need to do a couple "
"of things that won't be necessary in ``tests.py``. The first is to set up "
"the test environment in the :djadmin:`shell`:"
msgstr ""
"もう一度 :djadmin:`shell` からはじめましょう。ここでテストクライアントを使う"
"場合には、``tests.py`` では必要がない2つの準備が必要になります。まず最初にし"
"なければならないのは、:djadmin:`shell` の上でテスト環境をセットアップすること"
"です。"

msgid ""
":meth:`~django.test.utils.setup_test_environment` installs a template "
"renderer which will allow us to examine some additional attributes on "
"responses such as ``response.context`` that otherwise wouldn't be available. "
"Note that this method *does not* set up a test database, so the following "
"will be run against the existing database and the output may differ slightly "
"depending on what questions you already created. You might get unexpected "
"results if your ``TIME_ZONE`` in ``settings.py`` isn't correct. If you don't "
"remember setting it earlier, check it before continuing."
msgstr ""
":meth:`~django.test.utils.setup_test_environment` は、テンプレートのレンダ"
"ラーをインストールします。 これによって、今までは調査できなかった、レスポンス"
"上のいくつかの属性（たとえば ``response.context`` ）を調査できるようになりま"
"す。 注意点として、このメソッドはテスト用データベースを作成しないので、これに"
"続く命令は既存のデータベースに対して実行されます。あなたの作成した question "
"によってはアウトプットが多少異なるかもしれません。また ``settings.py`` の "
"``TIME_ZONE`` が正しくない場合は、予期しない結果になるでしょう。設定が正しい"
"かどうか自信がなければ、次に進む前に TIME_ZONE を確認してください。"

msgid ""
"Next we need to import the test client class (later in ``tests.py`` we will "
"use the :class:`django.test.TestCase` class, which comes with its own "
"client, so this won't be required):"
msgstr ""
"つぎに、テストクライアントのクラスをインポートする必要があります (後に取り上"
"げる ``tests.py`` の中では、 :class:`django.test.TestCase` クラス自体がクライ"
"アントを持っているため、インポートは不要です)。"

msgid "With that ready, we can ask the client to do some work for us:"
msgstr "さて、これでクライアントに仕事を頼む準備ができました。"

msgid "Improving our view"
msgstr "ビューを改良する"

msgid ""
"The list of polls shows polls that aren't published yet (i.e. those that "
"have a ``pub_date`` in the future). Let's fix that."
msgstr ""
"現在の投票のリストは、まだ公開されていない (つまり ``pub_date`` の日付が未来"
"になっている) 投票が表示される状態になっています。これを直しましょう。"

msgid ""
"In :doc:`Tutorial 4 </intro/tutorial04>` we introduced a class-based view, "
"based on :class:`~django.views.generic.list.ListView`:"
msgstr ""
":doc:`Tutorial 4 </intro/tutorial04>` では、以下のような :class:`~django."
"views.generic.list.ListView`: をベースにしたクラスベースビューを導入しまし"
"た。"

msgid ""
"We need to amend the ``get_queryset()`` method and change it so that it also "
"checks the date by comparing it with ``timezone.now()``. First we need to "
"add an import:"
msgstr ""
"``get_queryset()`` メソッドを修正して、日付を ``timezone.now()`` と比較して"
"チェックする必要があります。まず、インポート文を追加します:"

msgid "and then we must amend the ``get_queryset`` method like so:"
msgstr "そして、次のように ``get_queryset`` メソッドを修正します。"

msgid ""
"``Question.objects.filter(pub_date__lte=timezone.now())`` returns a queryset "
"containing ``Question``\\s whose ``pub_date`` is less than or equal to - "
"that is, earlier than or equal to - ``timezone.now``."
msgstr ""
"``Question.objects.filter(pub_date__lte=timezone.now())`` は、``pub_date`` "
"が ``timezone.now`` 以前の ``Question`` を含んだクエリセットを返します。"

msgid "Testing our new view"
msgstr "新しいビューをテストする"

msgid ""
"Now you can satisfy yourself that this behaves as expected by firing up "
"``runserver``, loading the site in your browser, creating ``Questions`` with "
"dates in the past and future, and checking that only those that have been "
"published are listed. You don't want to have to do that *every single time "
"you make any change that might affect this* - so let's also create a test, "
"based on our :djadmin:`shell` session above."
msgstr ""
"それでは、これで期待通りの満足のいく動作をしてくれるかどうか確かめましょう。"
"まず、 ``runserver`` を実行して、ブラウザでサイトを読み込みます。過去と未来、"
"それぞれの日付を持つ ``Question`` を作成し、すでに公開されている質問だけがリ"
"ストに表示されるかどうかを確認します。あなたはまさか、*この通りにちゃんと動作"
"しているか、プロジェクトにわずかでも変更を加えるたびに毎回手動で* 確認したい"
"などとは思わないですよね？ それなら、今回も上の :djadmin:`shell` のセッション"
"に基づいてテストを作りましょう。"

msgid "Add the following to ``polls/tests.py``:"
msgstr "まず、``polls/tests.py`` に次の行を追加します。"

msgid ""
"and we'll create a shortcut function to create questions as well as a new "
"test class:"
msgstr ""
"そして、question を簡単に作れるようにするショートカット関数と、新しいテストク"
"ラスを作ります。"

msgid "Let's look at some of these more closely."
msgstr "これらのコードを詳しく見ていきましょう。"

msgid ""
"First is a question shortcut function, ``create_question``, to take some "
"repetition out of the process of creating questions."
msgstr ""
"まず、question のショートカット関数 ``create_question`` です。この関数によっ"
"て、 question 作成処理のコード重複をなくしています。"

msgid ""
"``test_no_questions`` doesn't create any questions, but checks the message: "
"\"No polls are available.\" and verifies the ``latest_question_list`` is "
"empty. Note that the :class:`django.test.TestCase` class provides some "
"additional assertion methods. In these examples, we use :meth:`~django.test."
"SimpleTestCase.assertContains()` and :meth:`~django.test.TransactionTestCase."
"assertQuerySetEqual()`."
msgstr ""
"``test_index_view_with_no_questions`` は question を1つも作りませんが、 \"No "
"polls are available.\" というメッセージが表示されていることをチェックし、"
"``latest_question_list`` が空になっているか確認しています。 :class:`django."
"test.TestCase` クラスが追加のアサーションメソッドを提供していることに注意して"
"ください。この例では、 :meth:`~django.test.SimpleTestCase.assertContains()` "
"と :meth:`~django.test.TransactionTestCase.assertQuerySetEqual()` を使用して"
"います。"

msgid ""
"In ``test_past_question``, we create a question and verify that it appears "
"in the list."
msgstr ""
"``test_index_view_with_a_past_question`` では、question を作成し、その "
"question がリストに現れるかどうかを検証しています。"

msgid ""
"In ``test_future_question``, we create a question with a ``pub_date`` in the "
"future. The database is reset for each test method, so the first question is "
"no longer there, and so again the index shouldn't have any questions in it."
msgstr ""
"``test_index_view_with_a_future_question`` では、``pub_date`` が未来の日付の"
"質問を作っています。データベースは各テストメソッドごとにリセットされるので、"
"この時にはデータベースには最初の質問は残っていません。そのため、index ページ"
"にはquestion は1つもありません。"

msgid ""
"And so on. In effect, we are using the tests to tell a story of admin input "
"and user experience on the site, and checking that at every state and for "
"every new change in the state of the system, the expected results are "
"published."
msgstr ""
"以下のテストメソッドも同様です。実際のところ、私たちはテストを用いて、管理者"
"の入力とサイトでのユーザの体験についてのストーリを語り、システムの各状態とそ"
"こでの新しい変化のそれぞれに対して、期待通りの結果が公開されているかどうかを"
"チェックしているのです。"

msgid "Testing the ``DetailView``"
msgstr "``DetailView`` のテスト"

msgid ""
"What we have works well; however, even though future questions don't appear "
"in the *index*, users can still reach them if they know or guess the right "
"URL. So we need to add a similar  constraint to ``DetailView``:"
msgstr ""
"とても上手くいっていますね。しかし、未来の質問は *index* に表示されないもの"
"の、正しいURL を知っていたり推測したりしたユーザは、まだページに到達できてし"
"まいます。そのため、同じような制約を ``DetailView`` にも追加する必要がありま"
"す。"

msgid ""
"We should then add some tests, to check that a ``Question`` whose "
"``pub_date`` is in the past can be displayed, and that one with a "
"``pub_date`` in the future is not:"
msgstr ""
"そして、 ``pub_date`` が過去のものである ``Question`` は表示でき、未来のもの"
"である ``pub_date`` は表示できないことを確認するために、いくつかのテストを追"
"加しなければなりません:"

msgid "Ideas for more tests"
msgstr "さらなるテストについて考える"

msgid ""
"We ought to add a similar ``get_queryset`` method to ``ResultsView`` and "
"create a new test class for that view. It'll be very similar to what we have "
"just created; in fact there will be a lot of repetition."
msgstr ""
"``ResultsView`` にも同じように ``get_queryset`` メソッドを追加して、新しいテ"
"ストクラスも作らなければならないようです。しかしこれは、今作ったばかりのもの"
"とそっくりになるでしょう。実際、テストは重複だらけになるはずです。"

msgid ""
"We could also improve our application in other ways, adding tests along the "
"way. For example, it's silly that ``Questions`` can be published on the site "
"that have no ``Choices``. So, our views could check for this, and exclude "
"such ``Questions``. Our tests would create a ``Question`` without "
"``Choices`` and then test that it's not published, as well as create a "
"similar ``Question`` *with* ``Choices``, and test that it *is* published."
msgstr ""
"テストを追加することによって、同じように他の方法でアプリを改善できるでしょ"
"う。例えば、``Choices`` を一つも持たない馬鹿げた ``Questions`` が公開可能に"
"なっています。このような ``Questions`` を排除するようビューでチェックできま"
"す。 ``Choices`` がない ``Question`` を作成し、それが公開されないことをテスト"
"し、同じようにして、``Choices`` *がある* ``Question`` を作成し、それが公開 *"
"される* ことをテストすることになるでしょう。"

msgid ""
"Perhaps logged-in admin users should be allowed to see unpublished "
"``Questions``, but not ordinary visitors. Again: whatever needs to be added "
"to the software to accomplish this should be accompanied by a test, whether "
"you write the test first and then make the code pass the test, or work out "
"the logic in your code first and then write a test to prove it."
msgstr ""
"もしかすると管理者としてログインしているユーザーは、一般の訪問者と違い、 まだ"
"公開されていない ``Questions`` を見ることができるようにした方がいいかもしれま"
"せん。また繰り返しになりますが、この問題を解決するためにソフトウェアにどんな"
"コードが追加されべきであったとしても、そのコードにはテストが伴うべきです。テ"
"ストを先に書いてからそのテストを通るコードを書くのか、あるいはコードの中で先"
"にロジックを試してからテストを書いてそれを検証するのか、いずれにしてもです。"

msgid ""
"At a certain point you are bound to look at your tests and wonder whether "
"your code is suffering from test bloat, which brings us to:"
msgstr ""
"ある時点で、書いたテストが限界に達しているように見え、テストが膨らみすぎて"
"コードが苦しくなってしまうのではないかという疑問が浮かんでくるでしょう。こう"
"なった場合にはどうすれば良いのでしょうか？"

msgid "When testing, more is better"
msgstr "テストにおいて、多いことはいいことだ"

msgid ""
"It might seem that our tests are growing out of control. At this rate there "
"will soon be more code in our tests than in our application, and the "
"repetition is unaesthetic, compared to the elegant conciseness of the rest "
"of our code."
msgstr ""
"私たちのテストは、手がつけられないほど成長してしまっているように見えるかもし"
"れません。この割合で行けば、テストコードがアプリケーションのコードよりもすぐ"
"に大きくなってしまうでしょう。そして繰り返しは、残りの私たちのコードのエレガ"
"ントな簡潔さに比べて、美しくありません。"

msgid ""
"**It doesn't matter**. Let them grow. For the most part, you can write a "
"test once and then forget about it. It will continue performing its useful "
"function as you continue to develop your program."
msgstr ""
"**構いません**。 テストコードが大きくなるのに任せましょう。たいていの場合、あ"
"なたはテストを一回書いたら、そのことを忘れて大丈夫です。プログラムを開発し続"
"ける限りずっと、そのテストは便利に機能し続けます。"

msgid ""
"Sometimes tests will need to be updated. Suppose that we amend our views so "
"that only ``Questions`` with ``Choices`` are published. In that case, many "
"of our existing tests will fail - *telling us exactly which tests need to be "
"amended to bring them up to date*, so to that extent tests help look after "
"themselves."
msgstr ""
"時には、テストのアップデートが必要になることがあります。たとえば、 "
"``Choices`` を持つ ``Questions`` だけを公開するようにビューを修正したとしま"
"す。この場合、既存のテストの多くは失敗します。この失敗によって、 *最新の状態"
"に対応するために、どのテストを修正する必要があるのか* が正確にわかります。そ"
"のため、ある程度、テストはテスト自身をチェックする助けになります。"

msgid ""
"At worst, as you continue developing, you might find that you have some "
"tests that are now redundant. Even that's not a problem; in testing "
"redundancy is a *good* thing."
msgstr ""
"最悪の場合、開発を続けていくにつれて、あるテストが今では冗長なものになってい"
"ることに気づいてしまうかもしれません。これも問題ではありません。テストにおい"
"ては、冗長であることは *良い* ことなのです。"

msgid ""
"As long as your tests are sensibly arranged, they won't become unmanageable. "
"Good rules-of-thumb include having:"
msgstr ""
"きちんと考えてテストを整理していれば、テストが手に負えなくなることはありませ"
"ん。経験上、良いルールとして次のようなものが挙げられます。"

msgid "a separate ``TestClass`` for each model or view"
msgstr "モデルやビューごとに ``TestClass`` を分割する"

msgid "a separate test method for each set of conditions you want to test"
msgstr "テストしたい条件の集まりのそれぞれに対して、異なるテストメソッドを作る"

msgid "test method names that describe their function"
msgstr "テストメソッドの名前は、その機能を説明するようなものにする"

msgid "Further testing"
msgstr "さらなるテスト"

msgid ""
"This tutorial only introduces some of the basics of testing. There's a great "
"deal more you can do, and a number of very useful tools at your disposal to "
"achieve some very clever things."
msgstr ""
"このチュートリアルでは、テストの基本の一部を紹介しました。この他にもあなたに"
"できることはまだまだたくさんありますし、いろいろと賢いことを実現するに使える"
"とても便利なツールが数多く用意されています。"

msgid ""
"For example, while our tests here have covered some of the internal logic of "
"a model and the way our views publish information, you can use an \"in-"
"browser\" framework such as Selenium_ to test the way your HTML actually "
"renders in a browser. These tools allow you to check not just the behavior "
"of your Django code, but also, for example, of your JavaScript. It's quite "
"something to see the tests launch a browser, and start interacting with your "
"site, as if a human being were driving it! Django includes :class:`~django."
"test.LiveServerTestCase` to facilitate integration with tools like Selenium."
msgstr ""
"たとえば、ここでのテストでは、モデルの内部ロジックと、ビューの情報の公開の仕"
"方をカバーしましたが、ブラウザが HTML を実際にどのようにレンダリングのするの"
"かをテストする Selenium_ のような \"in-browser\" のフレームワークを使うことも"
"できます。これらのツールは、Django が生成したコードの振る舞いだけでなく、たと"
"えば、 JavaScript の振る舞いも確認できます。テストがブラウザを起動してサイト"
"とインタラクションしているのを見るのはとても面白いですよ。まるで本物の人間が"
"ブラウザを操作しているかのように見えるんです！ Django には、Selenium のような"
"ツールとの連携を容易にしてくれる :class:`~django.test.LiveServerTestCase` が"
"用意されています。"

msgid ""
"If you have a complex application, you may want to run tests automatically "
"with every commit for the purposes of `continuous integration`_, so that "
"quality control is itself - at least partially - automated."
msgstr ""
"複雑なアプリケーションを開発する時には、継続的インテグレーション "
"(`continuous integration`_) のために、コミットの度に自動的にテストを実行する"
"といいかもしれませんね。継続的インテグレーションを行えば、品質管理それ自体"
"が、少なくとも部分的には自動化できます。"

msgid ""
"A good way to spot untested parts of your application is to check code "
"coverage. This also helps identify fragile or even dead code. If you can't "
"test a piece of code, it usually means that code should be refactored or "
"removed. Coverage will help to identify dead code. See :ref:`topics-testing-"
"code-coverage` for details."
msgstr ""
"アプリケーションのテストされていない部分を発見するには、コードカバレッジを"
"チェックするのが良いやり方です。これはまた、壊れやすいコードや使用されていな"
"いデッドコードの発見にも役に立ちます。テストできないコード片がある場合、ふつ"
"うは、そのコードはリファクタリングするか削除する必要があることを意味します。"
"カバレッジはデッドコードの識別に役に立つでしょう。詳細は :ref:`topics-"
"testing-code-coverage`  を参照してください。"

msgid ""
":doc:`Testing in Django </topics/testing/index>` has comprehensive "
"information about testing."
msgstr ""
":doc:`Django におけるテスト </topics/testing/index>` には、テストに関する包括"
"的な情報がまとめられています。"

msgid "What's next?"
msgstr "次は何をしましょうか？"

msgid ""
"For full details on testing, see :doc:`Testing in Django </topics/testing/"
"index>`."
msgstr ""
"テストの詳細は、:doc:`Djagnoにおけるテスト </topics/testing/index>` を参照し"
"てください。"

msgid ""
"When you're comfortable with testing Django views, read :doc:`part 6 of this "
"tutorial</intro/tutorial06>` to learn about static files management."
msgstr ""
"テストやビューを使いこなせるようになったら、 :doc:`チュートリアルその6 </"
"intro/tutorial06>` に進んで、静的ファイルの管理について学びましょう。 "

msgid "Writing your first Django app, part 6"
msgstr "はじめての Django アプリ作成、その 6"

msgid ""
"This tutorial begins where :doc:`Tutorial 5 </intro/tutorial05>` left off. "
"We've built a tested web-poll application, and we'll now add a stylesheet "
"and an image."
msgstr ""
"このチュートリアルは :doc:`チュートリアル 5 </intro/tutorial05>` の続きです。"
"Web 投票アプリケーションのテストが完成したので、今度はスタイルシートや画像を"
"追加しましょう。"

msgid ""
"Aside from the HTML generated by the server, web applications generally need "
"to serve additional files — such as images, JavaScript, or CSS — necessary "
"to render the complete web page. In Django, we refer to these files as "
"\"static files\"."
msgstr ""
"サーバで生成するHTML以外に、Webアプリケーションは一般的に完全なWebページをレ"
"ンダリングするために、画像、JavaScript、CSSなど必要なファイルを提供する必要が"
"あります。Djangoでは、これらのファイルを \"静的 (static) ファイル\" と呼びま"
"す。"

msgid ""
"For small projects, this isn't a big deal, because you can keep the static "
"files somewhere your web server can find it. However, in bigger projects -- "
"especially those comprised of multiple apps -- dealing with the multiple "
"sets of static files provided by each application starts to get tricky."
msgstr ""
"小さなプロジェクトではこのことは大きな問題になりません。 ウェブサーバが見つけ"
"られる場所で静的ファイルを単に管理することができるからです。しかし、もっと大"
"きなプロジェクトで、特に複数のアプリケーションからなる場合は、各アプリケー"
"ションが 持っている静的ファイルの集まりを複数扱うことになり、ややこしくなって"
"きます。"

msgid ""
"That's what ``django.contrib.staticfiles`` is for: it collects static files "
"from each of your applications (and any other places you specify) into a "
"single location that can easily be served in production."
msgstr ""
"``django.contrib.staticfiles`` はまさにそのためにあります。これは静的なファイ"
"ルを各アプリケーションから (さらに指定した別の場所からも) 一つの場所に集め、"
"運用環境で公開しやすくするものです。"

msgid "Customize your *app's* look and feel"
msgstr "*アプリ* のルック & フィールをカスタマイズする"

msgid ""
"First, create a directory called ``static`` in your ``polls`` directory. "
"Django will look for static files there, similarly to how Django finds "
"templates inside ``polls/templates/``."
msgstr ""
"最初に、 ``polls`` ディレクトリの中に、 ``static`` ディレクトリを作成します。"
"Django はそこから静的ファイルを探します。Django が ``polls/templates/`` から"
"テンプレートを探す方法と同様です。"

msgid ""
"Django's :setting:`STATICFILES_FINDERS` setting contains a list of finders "
"that know how to discover static files from various sources. One of the "
"defaults is ``AppDirectoriesFinder`` which looks for a \"static\" "
"subdirectory in each of the :setting:`INSTALLED_APPS`, like the one in "
"``polls`` we just created. The admin site uses the same directory structure "
"for its static files."
msgstr ""
"Django の :setting:`STATICFILES_FINDERS` は、さまざまなソースから静的ファイル"
"を検索する方法を知っているファインダのリストです。デフォルトのファイダの一つ"
"は ``AppDirectoriesFinder`` で、:setting:`INSTALLED_APPS` に書かれた各アプリ"
"ケーションに対して、ちょうど今作った ``polls`` のような \"static\" サブディレ"
"クトリを検索してくれます。管理サイトの静的ファイルにも、これと同じディレクト"
"リ構造が使われます。"

msgid ""
"Within the ``static`` directory you have just created, create another "
"directory called ``polls`` and within that create a file called ``style."
"css``. In other words, your stylesheet should be at ``polls/static/polls/"
"style.css``. Because of how the ``AppDirectoriesFinder`` staticfile finder "
"works, you can refer to this static file in Django as ``polls/style.css``, "
"similar to how you reference the path for templates."
msgstr ""
"先ほど作成した ``static`` ディレクトリ内に ``polls`` という名前のディレクトリ"
"を作り、その中に ``style.css`` というファイルを作成します。言い換えれば、スタ"
"イルシートは ``polls/static/polls/style.css`` にあるはずです。 "
"``AppDirectoriesFinder`` のスタティックファイルファインダがどのように動作する"
"かによって、Djangoではこのスタティックファイルを ``polls/style.css`` として参"
"照することができます。"

msgid "Static file namespacing"
msgstr "静的ファイルの名前空間"

msgid ""
"Just like templates, we *might* be able to get away with putting our static "
"files directly in ``polls/static`` (rather than creating another ``polls`` "
"subdirectory), but it would actually be a bad idea. Django will choose the "
"first static file it finds whose name matches, and if you had a static file "
"with the same name in a *different* application, Django would be unable to "
"distinguish between them. We need to be able to point Django at the right "
"one, and the best way to ensure this is by *namespacing* them. That is, by "
"putting those static files inside *another* directory named for the "
"application itself."
msgstr ""
"テンプレートと同様に、 ``polls`` という別のサブディレクトリを作らずに、直接 "
"``polls/static`` の中に静的ファイルを置いてもいいのではないか、と思うかもしれ"
"ませんね。しかし、それは実際には悪い考えです。Django は、名前がマッチした最初"
"のテンプレートを使用するので、もし *異なる* アプリケーションの中に同じ名前の"
"テンプレートがあった場合、Django はそれらを区別できません。そのため、Django "
"に正しいテンプレートを教えてあげる必要がありますが、一番簡単な方法は、それら"
"に *名前空間を与える* ことです。アプリケーションと同じ名前をつけた *もう一つ"
"の* ディレクトリの中にテンプレートを置いたのは、そういうわけなのです。"

msgid ""
"Put the following code in that stylesheet (``polls/static/polls/style.css``):"
msgstr ""
"スタイルシートに次のコードを配置します (``polls/static/polls/style.css``):"

msgid "``polls/static/polls/style.css``"
msgstr "``polls/static/polls/style.css``"

msgid ""
"Next, add the following at the top of ``polls/templates/polls/index.html``:"
msgstr "次に、``polls/templates/polls/index.html`` の上部に追加します:"

msgid ""
"The ``{% static %}`` template tag generates the absolute URL of static files."
msgstr ""
"``{% static %}`` テンプレートタグは、静的ファイルの完全 URL を生成します。"

msgid "That's all you need to do for development."
msgstr "あなたが開発する必要があるのは、これですべてです。"

msgid "Start the server (or restart it if it's already running):"
msgstr ""
"次のコマンドを実行して、サーバーを起動します (すでに起動済みの場合は再起動し"
"ます)。"

msgid ""
"Reload ``http://localhost:8000/polls/`` and you should see that the question "
"links are green (Django style!) which means that your stylesheet was "
"properly loaded."
msgstr ""
"``http://localhost:8000/polls/`` をリロードすると、質問のリンクが緑色 "
"(Django のスタイルです！) になり、スタイルシートが適切に読み込まれたことが確"
"認できるでしょう。"

msgid "Adding a background-image"
msgstr "背景画像を追加する"

msgid ""
"Next, we'll create a subdirectory for images. Create an ``images`` "
"subdirectory in the ``polls/static/polls/`` directory. Inside this "
"directory, add any image file that you'd like to use as a background. For "
"the purposes of this tutorial, we're using a file named ``background.png``, "
"which will have the full path ``polls/static/polls/images/background.png``."
msgstr ""
"次に画像用にサブディレクトリを作成します。 ``polls/static/polls/`` ディレクト"
"リの中に ``images`` サブディレクトリを 作ります。ディレクトリの中に背景と使用"
"したい画像ファイルを追加します。このチュートリアルでは  ``background.png`` と"
"いう名前ファイルを使用します。このファイルのフルパスは  ``polls/static/polls/"
"images/background.png`` となるようにします。"

msgid ""
"Then, add a reference to your image in your stylesheet (``polls/static/polls/"
"style.css``):"
msgstr ""
"さらに、スタイルシート (``polls/static/polls/style.css``) に画像への参照を追"
"加します。"

msgid ""
"Reload ``http://localhost:8000/polls/`` and you should see the background "
"loaded in the top left of the screen."
msgstr ""
"``http://localhost:8000/polls/`` をリロードすると、読み込んだ背景画像がスク"
"リーンの左上部に確認できるでしょう。"

msgid ""
"The ``{% static %}`` template tag is not available for use in static files "
"which aren't generated by Django, like your stylesheet. You should always "
"use **relative paths** to link your static files between each other, because "
"then you can change :setting:`STATIC_URL` (used by the :ttag:`static` "
"template tag to generate its URLs) without having to modify a bunch of paths "
"in your static files as well."
msgstr ""
"``{% static %}`` テンプレートタグは、スタイルシートのように Django によって生"
"成されない静的ファイルで使用することはできません。静的ファイル間で相互にリン"
"クする際には、常に **相対パス** を使用すべきです。なぜなら、 :setting:"
"`STATIC_URL` (:ttag:`static` テンプレートタグがURLを生成するために使用する) "
"を変更した場合でも、静的ファイル内の多くのパスを修正する必要がなくなるからで"
"す。"

msgid ""
"These are the **basics**. For more details on settings and other bits "
"included with the framework see :doc:`the static files howto </howto/static-"
"files/index>` and :doc:`the staticfiles reference </ref/contrib/"
"staticfiles>`. :doc:`Deploying static files </howto/static-files/"
"deployment>` discusses how to use static files on a real server."
msgstr ""
"これらは静的ファイルの **基本** です。設定方法やフレームワークの機能の詳細に"
"ついては、:doc:`静的ファイルの配信 </howto/static-files/index>` と :doc:"
"`staticfiles のリファレンス </ref/contrib/staticfiles>` を読んでください。:"
"doc:`静的ファイルのデプロイ </howto/static-files/deployment>` では、実際の"
"サーバでの静的ファイルの使い方について説明しています。"

msgid ""
"When you're comfortable with the static files, read :doc:`part 7 of this "
"tutorial </intro/tutorial07>` to learn how to customize Django's "
"automatically-generated admin site."
msgstr ""
"静的ファイルを使いこなせるようになったら、:doc:`チュートリアル その7 </intro/"
"tutorial07>` に進んで、Django が自動生成する管理サイトのカスタマイズをしてみ"
"ましょう。"

msgid "Writing your first Django app, part 7"
msgstr "はじめての Django アプリ作成、その 7"

msgid ""
"This tutorial begins where :doc:`Tutorial 6 </intro/tutorial06>` left off. "
"We're continuing the web-poll application and will focus on customizing "
"Django's automatically-generated admin site that we first explored in :doc:"
"`Tutorial 2 </intro/tutorial02>`."
msgstr ""
"このチュートリアルは :doc:`チュートリアル その6 </intro/tutorial06>` の続きで"
"す。ここでは、引き続き Web 投票アプリケーションの開発を続け、 :doc:`チュート"
"リアル その2 </intro/tutorial02>` で少し触れた、Django が 自動生成する管理サ"
"イトのカスタマイズに焦点を当てます。"

msgid "Customize the admin form"
msgstr "admin フォームのカスタマイズ"

msgid ""
"By registering the ``Question`` model with ``admin.site."
"register(Question)``, Django was able to construct a default form "
"representation. Often, you'll want to customize how the admin form looks and "
"works. You'll do this by telling Django the options you want when you "
"register the object."
msgstr ""
"``admin.site.register(Question)`` の呼び出しによって ``Question`` モデルを登"
"録したことで、Django はデフォルトの形式でオブジェクトを表示できました。 "
"admin フォームの表示方法や操作の仕方をデフォルトから変更したいこともよくあり"
"ます。それには、オブジェクトを登録する時にオプションを指定します。"

msgid ""
"Let's see how this works by reordering the fields on the edit form. Replace "
"the ``admin.site.register(Question)`` line with:"
msgstr ""
"ためしに、編集フォームでのフィールドの並び順を並べ替えてみましょう。 ``admin."
"site.register(Question)`` の行を以下のように置き換えてみてください。"

msgid ""
"You'll follow this pattern -- create a model admin class, then pass it as "
"the second argument to ``admin.site.register()`` -- any time you need to "
"change the admin options for a model."
msgstr ""
"このように、モデルの admin のオプションを変更したいときには、モデルごとに "
"admin クラスを作成して、 ``admin.site.register()`` の 2 番目の引数に渡すと い"
"うパターンに従ってください。"

msgid ""
"This particular change above makes the \"Publication date\" come before the "
"\"Question\" field:"
msgstr ""
"上の例では、「Publication date」フィールドの表示位置を「Question」フィールド"
"よりも前に変更しています:"

msgid "Fields have been reordered"
msgstr "フィールドの並び順が変更されました"

msgid ""
"This isn't impressive with only two fields, but for admin forms with dozens "
"of fields, choosing an intuitive order is an important usability detail."
msgstr ""
"二つしかフィールドがないので、あまりぱっとした変化ではありませんね。しかし "
"admin フォームで数十ものフィールドを操作するような場合には、直感的なフィー ル"
"ドの並び順というものはユーザビリティ上重要な要素です。"

msgid ""
"And speaking of forms with dozens of fields, you might want to split the "
"form up into fieldsets:"
msgstr ""
"また、数十ものフィールドがある場合、フォームを複数のフィールドセットに分割し"
"たいこともあるでしょう。"

msgid ""
"The first element of each tuple in :attr:`~django.contrib.admin.ModelAdmin."
"fieldsets` is the title of the fieldset. Here's what our form looks like now:"
msgstr ""
":attr:`~django.contrib.admin.ModelAdmin.fieldsets` の各タプルの先頭の要素は"
"フィールドセットのタイトルです。 フォームは以下のように表示されます。"

msgid "Form has fieldsets now"
msgstr "フォームにフィールドセットが追加されました"

msgid "Adding related objects"
msgstr "リレーション先オブジェクトの追加"

msgid ""
"OK, we have our Question admin page, but a ``Question`` has multiple "
"``Choice``\\s, and the admin page doesn't display choices."
msgstr ""
"OK、 Question の管理ページはできました。しかし ``Question`` は複数の "
"``Choice`` を持つのに、管理ページには表示されていませんね。"

msgid "Yet."
msgstr "現状はそうですが、表示はできます。"

msgid ""
"There are two ways to solve this problem. The first is to register "
"``Choice`` with the admin just as we did with ``Question``:"
msgstr ""
"この問題を解決するには2つの方法があります。1つ目は、 ``Question`` と同じよう"
"にadminに ``Choice`` を登録する方法です:"

msgid ""
"Now \"Choices\" is an available option in the Django admin. The \"Add "
"choice\" form looks like this:"
msgstr ""
"これで、 Django の管理サイト上で「Choice」 を選べます。「Choice の追加」"
"フォーム は以下のようになります。"

msgid "Choice admin page"
msgstr "adminページを選択"

msgid ""
"In that form, the \"Question\" field is a select box containing every "
"question in the database. Django knows that a :class:`~django.db.models."
"ForeignKey` should be represented in the admin as a ``<select>`` box. In our "
"case, only one question exists at this point."
msgstr ""
"このフォームでは「Question」フィールドは選択ボックスで、データベース上の全て"
"の質問を選択できます。Django は :class:`~django.db.models.ForeignKey` を表示"
"する時には ``<select>`` ボックスを使わねばならないということを知っているので"
"す。今の時点では、 Question はデータベース上に一つしかないはずですね。"

msgid ""
"Also note the \"Add another question\" link next to \"Question.\" Every "
"object with a ``ForeignKey`` relationship to another gets this for free. "
"When you click \"Add another question\", you'll get a popup window with the "
"\"Add question\" form. If you add a question in that window and click "
"\"Save\", Django will save the question to the database and dynamically add "
"it as the selected choice on the \"Add choice\" form you're looking at."
msgstr ""
"Question フィールドの隣に「別の質問を追加 (Add nother question)」リンクがある"
"のに注意してください。 ``ForeignKey`` の関係にあるオブジェクトなら、何もしな"
"くてもこのリンクが表示されます。「もう一つ追加」をクリックすると、「別の質問"
"を追加 (Add another  question)」というポップアップウィンドウを表示します。こ"
"のウィンドウで Question を追加して「保存」を押すと、 Django は Question を"
"データベースに保存して、もとの 「Choice の追加(Add choice)」フォームに選択済"
"みの項目として動的に追加します。"

msgid ""
"But, really, this is an inefficient way of adding ``Choice`` objects to the "
"system. It'd be better if you could add a bunch of Choices directly when you "
"create the ``Question`` object. Let's make that happen."
msgstr ""
"しかし、この方法は ``Choice`` オブジェクトをシステムに追加するには効率的では"
"ありません。 ``Question`` オブジェクトを追加する時に Choice をひと揃い追加で"
"きた方が便利ですよね。そうしてみましょう。"

msgid ""
"Remove the ``register()`` call for the ``Choice`` model. Then, edit the "
"``Question`` registration code to read:"
msgstr ""
"``Choice`` モデルに対する ``register()`` を削除して、 ``Question`` の登録する"
"部分を以下のように書き換えてください。"

msgid ""
"This tells Django: \"``Choice`` objects are edited on the ``Question`` admin "
"page. By default, provide enough fields for 3 choices.\""
msgstr ""
"この行は Django に対して、「``Choice`` オブジェクトは ``Question`` の管理ペー"
"ジから編集する。デフォルトでは、 3 つの ``Choice`` を表示するのに十分なフィー"
"ルドを用意すること」と指示しています。"

msgid "Load the \"Add question\" page to see how that looks:"
msgstr ""
"「questionを追加 (Add question)」ページを読み込んで、どのように見えるか確かめ"
"てみましょう。"

msgid "Add question page now has choices on it"
msgstr "質問追加ページで選択肢が表示されるようになりました"

msgid ""
"It works like this: There are three slots for related Choices -- as "
"specified by ``extra`` -- and each time you come back to the \"Change\" page "
"for an already-created object, you get another three extra slots."
msgstr ""
"変わった点をみてみましょう。リレーション相手である ``Choice`` を表示するため"
"に 3 つのスロットがあります (``extra`` に指定した数ですね)。また、作成済みの"
"オブジェクトを「編集する」ページに行けば、いつでも 3 つ余分のスロットが表示さ"
"れるはずです。"

msgid ""
"At the end of the three current slots you will find an \"Add another "
"Choice\" link.  If you click on it, a new slot will be added. If you want to "
"remove the added slot, you can click on the X to the top right of the added "
"slot. This image shows an added slot:"
msgstr ""
"現在の3つのスロットの最後に「別の選択肢を追加」というリンクがあります。 これ"
"をクリックすると新しいスロットが追加されます。追加されたスロットを削除したい"
"場合は、追加されたスロットの右上にある×をクリックしてください。この画像は追加"
"されたスロットを示しています:"

msgid "Additional slot added dynamically"
msgstr "動的に追加されるスロット"

msgid ""
"One small problem, though. It takes a lot of screen space to display all the "
"fields for entering related ``Choice`` objects. For that reason, Django "
"offers a tabular way of displaying inline related objects. To use it, change "
"the ``ChoiceInline`` declaration to read:"
msgstr ""
"さて、このコードにはちょっと問題があります。というのも、 ``Choice`` オブジェ"
"ク トを入力するためのフィールドを全部表示しようとすると、相当な広さのスクリー"
"ンが必要だからです。このため、 Django にはテーブルを使ってインラインでリレー"
"ション相手のオブジェクトを表示する方法があります。以下のように、 "
"``ChoiceInline`` の宣言を変更してください。"

msgid ""
"With that ``TabularInline`` (instead of ``StackedInline``), the related "
"objects are displayed in a more compact, table-based format:"
msgstr ""
"``StackedInline`` に代わって ``TabularInline`` を使うと、 リレーション相手の"
"オブジェクトはコンパクトなテーブル形式で表示されます:"

msgid "Add question page now has more compact choices"
msgstr "質問追加ページで、よりコンパクトな選択肢を追加しました"

msgid ""
"Note that there is an extra \"Delete?\" column that allows removing rows "
"added using the \"Add another Choice\" button and rows that have already "
"been saved."
msgstr ""
"追加の \"Delete?\" カラムがあることに注意してください。このカラムは、 "
"\"Added Another Choice\" ボタンで追加された行や、すでに保存された行を削除する"
"ためにあります。"

msgid "Customize the admin change list"
msgstr "管理サイトのチェンジリストページをカスタマイズする"

msgid ""
"Now that the Question admin page is looking good, let's make some tweaks to "
"the \"change list\" page -- the one that displays all the questions in the "
"system."
msgstr ""
"さあ、これで Question の管理ページはだいぶよくなってきました。今度は「チェン"
"ジリスト」ページをすこしいじりましょう。チェンジリスト (change list) は、シス"
"テム上の全ての Question を表示するページです。"

msgid "Here's what it looks like at this point:"
msgstr "現時点では以下のように表示されています。"

msgid ""
"By default, Django displays the ``str()`` of each object. But sometimes it'd "
"be more helpful if we could display individual fields. To do that, use the :"
"attr:`~django.contrib.admin.ModelAdmin.list_display` admin option, which is "
"a list of field names to display, as columns, on the change list page for "
"the object:"
msgstr ""
"デフォルトでは、Django は各オブジェクトの ``str()`` を表示します。しかし、"
"個々のフィールドを表示できた方が便利なこともあります。そのためには、 :attr:"
"`~django.contrib.admin.ModelAdmin.list_display` 管理オプションを使います。こ"
"れは、オブジェクトのチェンジリストページで表示するフィールド名のリストをカラ"
"ムとして表示するものです:"

msgid ""
"For good measure, let's also include the ``was_published_recently()`` method "
"from :doc:`Tutorial 2 </intro/tutorial02>`:"
msgstr ""
"念のため、 :doc:`チュートリアル その2 </intro/tutorial02>` の "
"``was_published_recently()`` メソッドも含めましょう。"

msgid "Now the question change list page looks like this:"
msgstr "これで、Question のチェンジリストのページは以下のようになります:"

msgid "Polls change list page, updated"
msgstr "更新された Polls の変更一覧ページ"

msgid ""
"You can click on the column headers to sort by those values -- except in the "
"case of the ``was_published_recently`` header, because sorting by the output "
"of an arbitrary method is not supported. Also note that the column header "
"for ``was_published_recently`` is, by default, the name of the method (with "
"underscores replaced with spaces), and that each line contains the string "
"representation of the output."
msgstr ""
"カラムのヘッダをクリックすると、カラムの値に応じてエントリを並べ換えできま"
"す。ただし ``was_published_recently`` ヘッダは例外であり、これはメソッドの戻"
"り値を使った並べ換えをサポートしていないからです。 "
"``was_published_recently`` のカラムヘッダは、デフォルトではメソッド名 (アン"
"ダースコアを空白に置き換えたもの) になっていることに注目してください。また、"
"各行は戻り値の文字列表現となっています。"

msgid ""
"You can improve that by using the :func:`~django.contrib.admin.display` "
"decorator on that method (extending the :file:`polls/models.py` file that "
"was created in :doc:`Tutorial 2 </intro/tutorial02>`), as follows:"
msgstr ""

msgid ""
"For more information on the properties configurable via the decorator, see :"
"attr:`~django.contrib.admin.ModelAdmin.list_display`."
msgstr ""
"デコレータで設定できるプロパティに関する詳しい情報は、:attr:`~django.contrib."
"admin.ModelAdmin.list_display` を参照してください。"

msgid ""
"Edit your :file:`polls/admin.py` file again and add an improvement to the "
"``Question`` change list page: filters using the :attr:`~django.contrib."
"admin.ModelAdmin.list_filter`. Add the following line to ``QuestionAdmin``::"
msgstr ""
":file:`polls/admin.py` ファイルをもう一度編集して、``Question`` のチェンジリ"
"ストのページに :attr:`~django.contrib.admin.ModelAdmin.list_filter` を追加し"
"て、さらに改良しましょう。それには、``QuestionAdmin`` に次に行を追加します。"

msgid ""
"That adds a \"Filter\" sidebar that lets people filter the change list by "
"the ``pub_date`` field:"
msgstr ""
"これで、「フィルタ (Filter)」サイドバーができ、チェンジリストを ``pub_date`` "
"フィールドの値に従ってフィルタできるようになります。"

msgid ""
"The type of filter displayed depends on the type of field you're filtering "
"on. Because ``pub_date`` is a :class:`~django.db.models.DateTimeField`, "
"Django knows to give appropriate filter options: \"Any date\", \"Today\", "
"\"Past 7 days\", \"This month\", \"This year\"."
msgstr ""
"フィルタの種類は、フィルタ対象のフィールドの種類に応じて変化します。"
"``pub_date`` は :class:`~django.db.models.DateTimeField` なので、Django はこ"
"のフィールドにふさわしいフィルタオプションが、「すべての期間 (\"Any date\")」"
"「今日 (\"Today\")」「今週 (\"Past 7 days\")」「今月 (\"This month\")」である"
"ことを知っているのです。"

msgid "This is shaping up well. Let's add some search capability::"
msgstr "いい感じに体裁が整ってきました。今度は検索機能を追加してみましょう。"

msgid ""
"That adds a search box at the top of the change list. When somebody enters "
"search terms, Django will search the ``question_text`` field. You can use as "
"many fields as you'd like -- although because it uses a ``LIKE`` query "
"behind the scenes, limiting the number of search fields to a reasonable "
"number will make it easier for your database to do the search."
msgstr ""
"これでチェンジリストの上部に検索ボックスが表示されます。ユーザが検索語を入力"
"すると、 Django は ``question_text`` フィールドを検索します。フィールドはいく"
"らでも使えますが、舞台裏では ``LIKE`` クエリを使うのでデータベースに過剰な負"
"荷をかけないために常識的な範囲にしましょう。"

msgid ""
"Now's also a good time to note that change lists give you free pagination. "
"The default is to display 100 items per page. :attr:`Change list pagination "
"<django.contrib.admin.ModelAdmin.list_per_page>`, :attr:`search boxes "
"<django.contrib.admin.ModelAdmin.search_fields>`, :attr:`filters <django."
"contrib.admin.ModelAdmin.list_filter>`, :attr:`date-hierarchies <django."
"contrib.admin.ModelAdmin.date_hierarchy>`, and :attr:`column-header-ordering "
"<django.contrib.admin.ModelAdmin.list_display>` all work together like you "
"think they should."
msgstr ""
"さて、ここでお知らせしたいこととして、チェンジリストには最初からページ分割機"
"能があります。デフォルトではページあたり 100 個の要素を表示します。:attr:`"
"ページ分割 <django.contrib.admin.ModelAdmin.list_per_page>`、:attr:`検索ボッ"
"クス <django.contrib.admin.ModelAdmin.search_fields>`、:attr:`フィルタ "
"<django.contrib.admin.ModelAdmin.list_filter>`、:attr:`日付による階層化 "
"<django.contrib.admin.ModelAdmin.date_hierarchy>`、:attr:`カラムヘッダを使っ"
"た並び替え <django.contrib.admin.ModelAdmin.list_display>` の機能は、すべて協"
"調して思いのままに動作します。"

msgid "Customize the admin look and feel"
msgstr "管理サイトのルック & フィールをカスタマイズする"

msgid ""
"Clearly, having \"Django administration\" at the top of each admin page is "
"ridiculous. It's just placeholder text."
msgstr ""
"管理サイトの上部には「Django 管理 (Django adminstration)」と表示されています"
"が、これはいささか滑稽ですね。これは単なるプレースホルダテキストにすぎませ"
"ん。"

msgid ""
"You can change it, though, using Django's template system. The Django admin "
"is powered by Django itself, and its interfaces use Django's own template "
"system."
msgstr ""
"ただし、Djangoのテンプレートシステムを使用して変更できます。 Django admin は"
"Django自体を利用しており、そのインターフェースはDjango独自のテンプレートシス"
"テムを使用しています。"

msgid "Customizing your *project's* templates"
msgstr "*プロジェクト* テンプレートをカスタムする。"

msgid ""
"Create a ``templates`` directory in your ``djangotutorial`` directory. "
"Templates can live anywhere on your filesystem that Django can access. "
"(Django runs as whatever user your server runs.) However, keeping your "
"templates within the project is a good convention to follow."
msgstr ""

msgid ""
"Open your settings file (:file:`mysite/settings.py`, remember) and add a :"
"setting:`DIRS <TEMPLATES-DIRS>` option in the :setting:`TEMPLATES` setting:"
msgstr ""
"設定ファイル (:file:`mysite/settings.py`) を開いて、:setting:`TEMPLATES` 設定"
"オプションの中に、次のように :setting:`DIRS <TEMPLATES-DIRS>` オプションを追"
"加します。"

msgid ""
":setting:`DIRS <TEMPLATES-DIRS>` is a list of filesystem directories to "
"check when loading Django templates; it's a search path."
msgstr ""
":setting:`DIRS <TEMPLATES-DIRS>` は、Django がテンプレートを読み込む時に"
"チェックする、ファイルシステム上のディレクトリのリストです。サーチパスのよう"
"なものです。"

msgid "Organizing templates"
msgstr "テンプレートの構成"

msgid ""
"Just like the static files, we *could* have all our templates together, in "
"one big templates directory, and it would work perfectly well. However, "
"templates that belong to a particular application should be placed in that "
"application's template directory (e.g. ``polls/templates``) rather than the "
"project's (``templates``). We'll discuss in more detail in the :doc:"
"`reusable apps tutorial </intro/reusable-apps>` *why* we do this."
msgstr ""
"static ファイルと同じように、すべてのテンプレートを1つの大きな templates ディ"
"レクトリにまとめることも *可能* ではあります。しかし、特定のアプリケーション"
"と結びつくテンプレートは、プロジェクトのテンプレートディレクトリ "
"(``templates``) ではなく、それぞれのアプリケーションのテンプレートディレクト"
"リ (``polls/templates`` など) に置くべきです。 *なぜ* そうするのかについて"
"は :doc:`再利用可能アプリのチュートリアル </intro/reusable-apps>` で詳しく説"
"明します。"

msgid ""
"Now create a directory called ``admin`` inside ``templates``, and copy the "
"template ``admin/base_site.html`` from within the default Django admin "
"template directory in the source code of Django itself (:source:`django/"
"contrib/admin/templates`) into that directory."
msgstr ""
"さて、``templates`` の中に ``admin`` という名前のディレクトリを作りましょう。"
"Django 自体のソースコード内にある、デフォルトの Django admin テンプレートディ"
"レクトリ (:source:`django/contrib/admin/templates`) を探して、 ``admin/"
"base_site.html`` というテンプレートを、新しく作ったディレクトリにコピーしま"
"す。"

msgid "Where are the Django source files?"
msgstr "Django のソースファイルの場所はどこ？"

msgid ""
"If you have difficulty finding where the Django source files are located on "
"your system, run the following command:"
msgstr ""
"Django のソースファイルがシステム中のどこにあるのか分からない場合は、以下のコ"
"マンドを実行してください。"

msgid ""
"Then, edit the file and replace ``{{ site_header|default:_('Django "
"administration') }}`` (including the curly braces) with your own site's name "
"as you see fit. You should end up with a section of code like:"
msgstr ""
"そして、ファイルを編集して ``{{ site_header|default:_('Django "
"administration') }}`` を置き換えます。(中括弧を含む)に自分のサイト名を入れて"
"ください。最終的には、次のようなコードのセクションになるはずです:"

msgid ""
"We use this approach to teach you how to override templates. In an actual "
"project, you would probably use the :attr:`django.contrib.admin.AdminSite."
"site_header` attribute to more easily make this particular customization."
msgstr ""
"このようなアプローチを今使ったのは、テンプレートをオーバーライドする方法を示"
"すためです。実際のプロジェクトで今行ったのと同じカスタマイズを行いたい場合に"
"は、 :attr:`django.contrib.admin.AdminSite.site_header` 属性を使えば、もっと"
"簡単に設定できます。"

msgid ""
"This template file contains lots of text like ``{% block branding %}`` and "
"``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template "
"language. When Django renders ``admin/base_site.html``, this template "
"language will be evaluated to produce the final HTML page, just like we saw "
"in :doc:`Tutorial 3 </intro/tutorial03>`."
msgstr ""
"このテンプレートファイルは ``{% block branding %}`` や ``{{ title }}`` のよう"
"なテキストを多く含んでいます。 ``{%`` と ``{{`` のタグは Django のテンプレー"
"ト言語の一部です。 :doc:`チュートリアル その3 </intro/tutorial03>` で見たよう"
"に、Djangoが ``admin/base_site.html`` をレンダリングする時に、このテンプレー"
"ト言語が評価され、最終的なHTMLページが生成されます。"

msgid ""
"Note that any of Django's default admin templates can be overridden. To "
"override a template, do the same thing you did with ``base_site.html`` -- "
"copy it from the default directory into your custom directory, and make "
"changes."
msgstr ""
"Django のデフォルトのadminテンプレートはすべてオーバーライドできることに注意"
"してください。テンプレートを上書きするには、``base_site.html`` で行ったのと同"
"じことをしてください -- デフォルトのディレクトリからカスタムディレクトリにコ"
"ピーして変更してください。"

msgid "Customizing your *application's* templates"
msgstr "*アプリケーション用の* テンプレートをカスタマイズする"

msgid ""
"Astute readers will ask: But if :setting:`DIRS <TEMPLATES-DIRS>` was empty "
"by default, how was Django finding the default admin templates? The answer "
"is that, since :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is set to ``True``, "
"Django automatically looks for a ``templates/`` subdirectory within each "
"application package, for use as a fallback (don't forget that ``django."
"contrib.admin`` is an application)."
msgstr ""
"するどい読者はこう質問されるでしょう:  :setting:`DIRS <TEMPLATES-DIRS>`   は"
"デフォルトで空っぽなのに、 Django はなぜデフォルトの admin テンプレートを見つ"
"けることができたのだろう? その答えは :setting:`APP_DIRS <TEMPLATES-"
"APP_DIRS>` が ``True`` に設定されているため、 Django は自動的に各アプリケー"
"ションのパッケージのサブディレクトリからフォールバックとして ``templates/`` "
"を探すからです (``django.contrib.admin`` は一つのアプリケーションだということ"
"を忘れないでください)。"

msgid ""
"Our poll application is not very complex and doesn't need custom admin "
"templates. But if it grew more sophisticated and required modification of "
"Django's standard admin templates for some of its functionality, it would be "
"more sensible to modify the *application's* templates, rather than those in "
"the *project*. That way, you could include the polls application in any new "
"project and be assured that it would find the custom templates it needed."
msgstr ""
"投票アプリケーションはそれほど複雑ではないので、カスタムの admin テンプレート"
"は必要ないでしょう。しかしアプリケーションがさらに凝ったものに成長し、何か機"
"能を実現するために標準の admin テンプレートを変更する必要が出てきた場合、 *ア"
"プリケーションの* テンプレートを編集するほうが、 *プロジェクト* のテンプレー"
"トを編集するより賢い選択になるでしょう。そうすれば、投票アプリケーションを他"
"のどの新しいプロジェクトにも追加でき、投票アプリケーションが（自分自身に必要"
"な）カスタムテンプレートを確実に見つけることができます。"

msgid ""
"See the :ref:`template loading documentation <template-loading>` for more "
"information about how Django finds its templates."
msgstr ""
"Django のテンプレートの検索方法に関する詳しい情報は、:ref:`テンプレート読み込"
"み ドキュメント <template-loading>` を参照してください。"

msgid "Customize the admin index page"
msgstr "admin index ページをカスタムする"

msgid ""
"On a similar note, you might want to customize the look and feel of the "
"Django admin index page."
msgstr ""
"近い話題として、 Django の admin index ページのルックアンドフィールをカスタマ"
"イズもできます。"

msgid ""
"By default, it displays all the apps in :setting:`INSTALLED_APPS` that have "
"been registered with the admin application, in alphabetical order. You may "
"want to make significant changes to the layout. After all, the index is "
"probably the most important page of the admin, and it should be easy to use."
msgstr ""
"デフォルトでは、 admin アプリケーションで登録された :setting:"
"`INSTALLED_APPS` のすべてのアプリケーションが、アルファベット順に表示されま"
"す。レイアウトを大きく変更したい場合もあるでしょう。なんといっても、index "
"ページは admin の中でおそらく最も重要なページなので、使いやすいほうがいいです"
"からね。"

msgid ""
"The template to customize is ``admin/index.html``. (Do the same as with "
"``admin/base_site.html`` in the previous section -- copy it from the default "
"directory to your custom template directory). Edit the file, and you'll see "
"it uses a template variable called ``app_list``. That variable contains "
"every installed Django app. Instead of using that, you can hard-code links "
"to object-specific admin pages in whatever way you think is best."
msgstr ""
"カスタマイズ対象のテンプレートは ``admin/index.html`` です。 (前セクションで "
"``admin/base_site.html`` にしたことと同じことをしてください。つまり、デフォル"
"トのディレクトリからコピーして、カスタムテンプレートのディレクトリに配置して"
"ください)。編集してみると ``app_list`` というテンプレート変数が使われているの"
"がわかるでしょう。この変数にはインストールされた全 Django アプリが含まれてい"
"ます。これを使う代わりに、各オブジェクトの admin ページヘのリンクをハードコー"
"ドし、好きなようにカスタマイズできます。"

msgid ""
"When you're comfortable with the admin, read :doc:`part 8 of this tutorial </"
"intro/tutorial08>` to learn how to use third-party packages."
msgstr ""
"管理画面に満足したら、 :doc:`このチュートリアルのパート8</intro/tutorial08>` "
"を読み、サードパーティ製パッケージの使い方を学んでください。"

msgid "Writing your first Django app, part 8"
msgstr "はじめての Django アプリ作成、その 8"

msgid ""
"This tutorial begins where :doc:`Tutorial 7 </intro/tutorial07>` left off. "
"We've built our web-poll application and will now look at third-party "
"packages. One of Django's strengths is the rich ecosystem of third-party "
"packages. They're community developed packages that can be used to quickly "
"improve the feature set of an application."
msgstr ""
"このチュートリアルは :doc:`チュートリアル その7 </intro/tutorial07>` の続きで"
"す。ここまでに、Web 投票アプリケーションを構築したので、次はサードパーティの"
"パッケージを見てみましょう。Django の強みの一つは、サードパーティ製パッケージ"
"の豊富なエコシステムです。サードパーティパッケージはコミュニティが開発した"
"パッケージで、 アプリケーションの機能セットを素早く改善するために利用すること"
"ができます。"

msgid ""
"This tutorial will show how to add :pypi:`Django Debug Toolbar <django-debug-"
"toolbar>`, a commonly used third-party package. The Django Debug Toolbar has "
"ranked in the top three most used third-party packages in the Django "
"Developers Survey in recent years."
msgstr ""

msgid "Installing Django Debug Toolbar"
msgstr "Django Debug Toolbarをインストールする"

msgid ""
"Django Debug Toolbar is a useful tool for debugging Django web applications. "
"It's a third-party package maintained by the `Jazzband <https://jazzband."
"co>`_ organization. The toolbar helps you understand how your application "
"functions and to identify problems. It does so by providing panels that "
"provide debug information about the current request and response."
msgstr ""
"Django Debug ToolbarはDjango Webアプリケーションをデバッグするのに有用なツー"
"ルです。このサードパーティ製パッケージは、 `Jazzband <https://jazzband.co>`_ "
"という組織によって保守されています。ツールバーでは現在のリクエストとレスポン"
"スに関するデバッグ情報を提供するパネルが表示されます。これらのパネルは、アプ"
"リケーションの機能を理解し、問題を特定するのに役立ちます。"

msgid ""
"To install a third-party application like the toolbar, you need to install "
"the package by running the below command within an activated virtual "
"environment. This is similar to our earlier step to :ref:`install Django "
"<installing-official-release>`."
msgstr ""
"このツールバーのようなサードパーティ製パッケージをインストールするためには、"
"有効化した仮想環境内で、以下に示すコマンドを実行して、パッケージをインストー"
"ルする必要があります。これは、以前の :ref:`Djangoのインストール <installing-"
"official-release>` のステップと似ています。"

msgid ""
"Third-party packages that integrate with Django need some post-installation "
"setup to integrate them with your project. Often you will need to add the "
"package's Django app to your :setting:`INSTALLED_APPS` setting. Some "
"packages need other changes, like additions to your URLconf (``urls.py``)."
msgstr ""
"Djangoと統合するサードパーティ製パッケージは、あなたのプロジェクトと統合する"
"ために、インストール後にいくつか設定を追加する必要があります。多くの場合、"
"パッケージに含まれるDjangoアプリケーションを :setting:`INSTALLED_APPS` 設定に"
"追加する必要があります。URFconf (``urls.py``)への追加のように、それ以外の変更"
"を必要とするパッケージもあります。"

msgid ""
"Django Debug Toolbar requires several setup steps. Follow them in `its "
"installation guide <https://django-debug-toolbar.readthedocs.io/en/latest/"
"installation.html>`_. The steps are not duplicated in this tutorial, because "
"as a third-party package, it may change separately to Django's schedule."
msgstr ""
"Django Debug Toolbar の利用には、いくつかのセットアップ手順が必要です。 `パッ"
"ケージのインストールガイド <https://django-debug-toolbar.readthedocs.io/en/"
"latest/installation.html>`_ に従ってください。サードパーティ製パッケージは"
"Djangoの予定とは独立して変更が加えられるので、インストールガイドが示す手順は"
"チュートリアルの内容とは重複しません。"

msgid ""
"Once installed, you should be able to see the DjDT \"handle\" on the right "
"side of the browser window when you browse to ``http://localhost:8000/admin/"
"``. Click it to open the debug toolbar and use the tools in each panel. See "
"the `panels documentation page`__ for more information on what the panels "
"show."
msgstr ""

msgid "Getting help from others"
msgstr "他の人の助けを得る"

msgid ""
"At some point you will run into a problem, for example the toolbar may not "
"render. When this happens and you're unable to resolve the issue yourself, "
"there are options available to you."
msgstr ""
"例えば、ツールバーがレンダリングされない、などの問題が発生することがありま"
"す。こうした問題が発生し、自分で解決できない場合、次の方法を試すことができま"
"す。"

msgid ""
"If the problem is with a specific package, check if there's a "
"troubleshooting of FAQ in the package's documentation. For example the "
"Django Debug Toolbar has a `Tips section <https://django-debug-toolbar."
"readthedocs.io/en/latest/tips.html>`_ that outlines troubleshooting options."
msgstr ""
"特定のパッケージに発生する問題であれば、そのパッケージのドキュメントにトラブ"
"ルシューティングのFAQがあるかどうか確認してください。例えば、Django Debug "
"Toolbarでは `ヒントセクション <https://django-debug-toolbar.readthedocs.io/"
"en/latest/tips.html>`_ にトラブルシューティングの方法がまとめられています。"

msgid ""
"Search for similar issues on the package's issue tracker. Django Debug "
"Toolbar’s is `on GitHub <https://github.com/jazzband/django-debug-toolbar/"
"issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc>`_."
msgstr ""
"パッケージの課題トラッカーに、類似の課題を検索してみてください。Django Debug "
"Toolbarの場合は、 `GitHub <https://github.com/jazzband/django-debug-toolbar/"
"issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc>`_ 上にあります。"

msgid "Consult the `Django Forum <https://forum.djangoproject.com/>`_."
msgstr ""
"`Djangoフォーラム <https://forum.djangoproject.com/>`_ で相談してください。"

msgid "Join the `Django Discord server <https://discord.gg/xcRH6mN4fa>`_."
msgstr ""
"`Django Discord サーバー <https://discord.gg/xcRH6mN4fa>`_ に参加してくださ"
"い。"

msgid "Join the #Django IRC channel on `Libera.chat <https://libera.chat/>`_."
msgstr ""
"`Libera.chat <https://libera.chat/>`_ の#Django IRC チャンネルに参加してくだ"
"さい。"

msgid "Installing other third-party packages"
msgstr "その他のサードパーティ製パッケージをインストールする"

msgid ""
"There are many more third-party packages, which you can find using the "
"fantastic Django resource, `Django Packages <https://djangopackages.org/>`_."
msgstr ""
"他にもたくさんのサードパーティ製パッケージを、素晴らしいDjangoリソースである "
"`Django Packages <https://djangopackages.org/>`_ で見つけることができます。"

msgid ""
"It can be difficult to know what third-party packages you should use. This "
"depends on your needs and goals. Sometimes it's fine to use a package that's "
"in its alpha state. Other times, you need to know it's production ready. "
"`Adam Johnson has a blog post <https://adamj.eu/tech/2021/11/04/the-well-"
"maintained-test/>`_ that outlines a set of characteristics that qualifies a "
"package as \"well maintained\". Django Packages shows data for some of these "
"characteristics, such as when the package was last updated."
msgstr ""
"どのようなサードパーティ製パッケージを使うべきかを判断するのは難しいかもしれ"
"ません。これは、あなたのニーズや目標によります。アルファ版のパッケージを使う"
"こともできます。また、本番環境で使えるかどうかを確認する必要がある場合もあり"
"ます。 `アダム・ジョンソン氏のブログ <https://adamj.eu/tech/2021/11/04/the-"
"well-maintained-test/>`_ に、パッケージが「よく保守されているか」を判断するた"
"めの特徴をまとめています。Django Packages では、パッケージの最終更新日など、"
"これらの特徴のいくつかのデータを表示しています。"

msgid ""
"As Adam points out in his post, when the answer to one of the questions is "
"\"no\", that's an opportunity to contribute."
msgstr ""
"アダムが彼の投稿で指摘しているように、挙げられている問いに対する答えが一つで"
"も「ノー」であれば、それはパッケージに貢献するチャンスです。"

msgid ""
"The beginner tutorial ends here. In the meantime, you might want to check "
"out some pointers on :doc:`where to go from here </intro/whatsnext>`."
msgstr ""
"これで、初めての人のためのチュートリアルはおしまいです。:doc:`次のステップへ "
"</intro/whatsnext>` では、ここから進める場所について説明しています。"

msgid ""
"If you are familiar with Python packaging and interested in learning how to "
"turn polls into a \"reusable app\", check out :doc:`Advanced tutorial: How "
"to write reusable apps</intro/reusable-apps>`."
msgstr ""
"Python のパッケージングについて知っていて、polls アプリケーションを「再利用可"
"能なアプリケーション」へと変える方法について学びたい場合は、:doc:`チュートリ"
"アル 応用編: 再利用可能なアプリケーションの書き方 </intro/reusable-apps>` を"
"読んでみてください。"

msgid "What to read next"
msgstr "次のステップへ"

msgid ""
"So you've read all the :doc:`introductory material </intro/index>` and have "
"decided you'd like to keep using Django. We've only just scratched the "
"surface with this intro (in fact, if you've read every single word, you've "
"read about 5% of the overall documentation)."
msgstr ""
"さあ、ここにきたあなたは、:doc:`入門編 </intro/index>` をあらかた読み終え"
"て、 Django を使い続ける決心をしたことだと思います。入門編では、Django のほん"
"の表面的な部分に触れただけにすぎません (実際、入門編の分量は、全体のドキュメ"
"ントの 5% にも満たないのです)。"

msgid "So what's next?"
msgstr "さて、次は何をしましょうか？"

msgid ""
"Well, we've always been big fans of learning by doing. At this point you "
"should know enough to start a project of your own and start fooling around. "
"As you need to learn new tricks, come back to the documentation."
msgstr ""
"そうですね、私たちは「なすことによって学ぶ (learning by doing)」ことがとても"
"大好きですよね。今や、読者のみなさんは自分のプロジェクトを作成して、いろいろ"
"と遊んでみるのに十分な段階にあります。もし新しい技を学ぶ必要が出てきたら、そ"
"の時は、いつでもここに戻って来てください。"

msgid ""
"We've put a lot of effort into making Django's documentation useful, clear "
"and as complete as possible. The rest of this document explains more about "
"how the documentation works so that you can get the most out of it."
msgstr ""
"私たちは、Django のドキュメントを有用で明確で、可能な限り完全なものにするため"
"の努力を多くしてきました。このドキュメントの残りの部分は、ドキュメントがどの"
"ように機能するのかをより詳しく説明しています。"

msgid ""
"(Yes, this is documentation about documentation. Rest assured we have no "
"plans to write a document about how to read the document about "
"documentation.)"
msgstr ""
"(そう、これはいわばドキュメントのドキュメントです。ただし、このドキュメントの"
"ドキュメントの読み方を説明するドキュメント、などといったものを書いたりはしま"
"せんから、安心してくださいね。)"

msgid "Finding documentation"
msgstr "ドキュメントの探し方"

msgid ""
"Django's got a *lot* of documentation -- almost 450,000 words and counting "
"-- so finding what you need can sometimes be tricky. A good place to start "
"is the :ref:`genindex`. We also recommend using the builtin search feature."
msgstr ""
"Djangoにはたくさんのドキュメント -- （ 約450,000語）があるので、必要なものを"
"見つけるのは難しい場合があります。開始するのに適した場所は、:ref:`genindex` "
"です。また、組み込みの検索機能を使用することをお勧めします。"

msgid "Or you can just browse around!"
msgstr "もちろん、片っ端から読み進むのもいいですけどね。"

msgid "How the documentation is organized"
msgstr "ドキュメントの構成"

msgid ""
"Django's main documentation is broken up into \"chunks\" designed to fill "
"different needs:"
msgstr ""
"Django のドキュメントは、用途に応じていくつかのセクションに分かれています。"

msgid ""
"The :doc:`introductory material </intro/index>` is designed for people new "
"to Django -- or to web development in general. It doesn't cover anything in "
"depth, but instead gives a high-level overview of how developing in Django "
"\"feels\"."
msgstr ""
":doc:`introductory material</intro/index>` は、Django やウェブ開発全般の初心"
"者を対象に作られています。あまり詳細な解説はありませんが、Django の開発が「ど"
"のようなものか」を高い視点から見られます。"

msgid ""
"The :doc:`topic guides </topics/index>`, on the other hand, dive deep into "
"individual parts of Django. There are complete guides to Django's :doc:"
"`model system </topics/db/index>`, :doc:`template engine </topics/"
"templates>`, :doc:`forms framework </topics/forms/index>`, and much more."
msgstr ""
"一方、:doc:`トピック別ガイド </topics/index>` では、Django の個々の構成要素に"
"ついて詳しく解説しています。このセクションでは、Django の :doc:`モデルシステ"
"ム </topics/db/index>`、:doc:`テンプレートエンジン </topics/templates>`、:"
"doc:`フォームフレームワーク </topics/forms/index>` などといったトピックを解説"
"しています。"

msgid ""
"This is probably where you'll want to spend most of your time; if you work "
"your way through these guides you should come out knowing pretty much "
"everything there is to know about Django."
msgstr ""
"おそらく、読者の皆さんは、このセクションを読み進むのに、大部分の時間を使うで"
"しょう。このガイドを全て読破すれば、Django を扱う上で必要なことのほとんどを知"
"ることができるはずです。"

msgid ""
"Web development is often broad, not deep -- problems span many domains. "
"We've written a set of :doc:`how-to guides </howto/index>` that answer "
"common \"How do I ...?\" questions. Here you'll find information about :doc:"
"`generating PDFs with Django </howto/outputting-pdf>`, :doc:`writing custom "
"template tags </howto/custom-template-tags>`, and more."
msgstr ""
"ウェブ開発に必要な知識は、いくつもの領域にまたがって広く浅く分布しているもの"
"です。このセクションには、「〜をするにはどうしたらよいか？」というような質問"
"に答えてくれる :doc:`How-to </howto/index>` が集まっています。たとえば、:doc:"
"`Django で PDF を生成する方法 </howto/outputting-pdf>` や、:doc:`テンプレート"
"タグを自作する方法 </howto/custom-template-tags>` などの How-to があります。"

msgid ""
"Answers to really common questions can also be found in the :doc:`FAQ </faq/"
"index>`."
msgstr "よくある質問は、これとは別に :doc:`FAQ </faq/index>` で扱っています。"

msgid ""
"The guides and how-to's don't cover every single class, function, and method "
"available in Django -- that would be overwhelming when you're trying to "
"learn. Instead, details about individual classes, functions, methods, and "
"modules are kept in the :doc:`reference </ref/index>`. This is where you'll "
"turn to find the details of a particular function or whatever you need."
msgstr ""
"ガイドや How-to ドキュメントでは、Django のクラスや関数、メソッドのすべてを解"
"説しているわけではありません。初めて Django を学ぼうとする人に一度に全てを教"
"えようとしても、教えたことが記憶からあふれてしまうからです。その代わりに、一"
"つひとつのクラスや関数、メソッド、モジュールの詳しい解説は、 :doc:`リファレン"
"ス </ref/index>` に書いてあります。特定の関数の仕様や、使える機能を調べたい場"
"合には、このセクションを参照してください。"

msgid ""
"If you are interested in deploying a project for public use, our docs have :"
"doc:`several guides</howto/deployment/index>` for various deployment setups "
"as well as a :doc:`deployment checklist</howto/deployment/checklist>` for "
"some things you'll need to think about."
msgstr ""
"公開用にプロジェクトをデプロイする方法について知りたければ、さまざまなデプロ"
"イ環境に対応した :doc:`いくつかのガイド</howto/deployment/index>` を用意して"
"います。デプロイ時に考えなくてはいけないことをリストアップした :doc:`デプロイ"
"時チェックリストdeployment checklist</howto/deployment/checklist>` と合わせて"
"読んでみてください。"

msgid ""
"Finally, there's some \"specialized\" documentation not usually relevant to "
"most developers. This includes the :doc:`release notes </releases/index>` "
"and :doc:`internals documentation </internals/index>` for those who want to "
"add code to Django itself, and a :doc:`few other things that don't fit "
"elsewhere </misc/index>`."
msgstr ""
"最後に、ほとんどの開発者には通常関連しないいくつかの「特殊な」ドキュメントが"
"あります。これには、Django自体にコードを追加したい人向けの :doc:`リリースノー"
"ト </releases/index>` や :doc:`内部ドキュメント </internals/index>` 、そして"
"他のどこにも当てはまらない :doc:`いくつかのその他の項目 </misc/index>` が含ま"
"れます。"

msgid "How documentation is updated"
msgstr "ドキュメントの更新の方針"

msgid ""
"Just as the Django code base is developed and improved on a daily basis, our "
"documentation is consistently improving. We improve documentation for "
"several reasons:"
msgstr ""
"Django のコードベースが毎日のように開発と改良を重ねているように、ドキュメント"
"も常に改良を重ねています。ドキュメントの改良は以下のような理由に基づいて 行わ"
"れます。"

msgid "To make content fixes, such as grammar/typo corrections."
msgstr "文法やタイプミスなどの誤りを修正する場合。"

msgid ""
"To add information and/or examples to existing sections that need to be "
"expanded."
msgstr "既存の内容に対して、新たに情報や例題を追加する場合。"

msgid ""
"To document Django features that aren't yet documented. (The list of such "
"features is shrinking but exists nonetheless.)"
msgstr ""
"まだ解説されていない Django の機能をドキュメント化する場合 (未ドキュメントの"
"機能は減りつつありますが、まだいくつか残っています)。"

msgid ""
"To add documentation for new features as new features get added, or as "
"Django APIs or behaviors change."
msgstr ""
"新たな機能が追加され、ドキュメントも追加する場合。あるいは、Django の API や"
"挙動が変更された場合。"

msgid ""
"Django's documentation is kept in the same source control system as its "
"code. It lives in the :source:`docs` directory of our Git repository. Each "
"document online is a separate text file in the repository."
msgstr ""
"Django のドキュメントはコードと同じソースコード管理システム下にあり、 Git リ"
"ポジトリの :source:`docs` ディレクトリ以下に置かれています。オンラインで表示"
"される各ドキュメントは、レポジトリ上でそれぞれ別々のテキストファイルに分かれ"
"ています。"

msgid "Where to get it"
msgstr "ドキュメントの入手"

msgid ""
"You can read Django documentation in several ways. They are, in order of "
"preference:"
msgstr ""
"Django のドキュメントを入手するにはいくつか方法があります。おすすめの順に以 "
"下に示します。"

msgid "On the web"
msgstr "Web 版"

msgid ""
"The most recent version of the Django documentation lives at https://docs."
"djangoproject.com/en/dev/. These HTML pages are generated automatically from "
"the text files in source control. That means they reflect the \"latest and "
"greatest\" in Django -- they include the very latest corrections and "
"additions, and they discuss the latest Django features, which may only be "
"available to users of the Django development version. (See :ref:`differences-"
"between-doc-versions` below.)"
msgstr ""
"Django ドキュメントの最新版は https://docs.djangoproject.com/en/dev/ にありま"
"す。ここにある HTML ページは、ソースコード管理システム上のテキストファイルか"
"ら自動生成されているものです。したがって、これらのファイルは「最新最良の」 "
"Django に対応しています。つまり、最近の修正や追加事項を反映していて、 まだ開"
"発版でしか使えないような最新の機能についても部分的に解説しているわけです。(後"
"述の :ref:`differences-between-doc-versions` を参照してください。 )"

msgid ""
"We encourage you to help improve the docs by submitting changes, corrections "
"and suggestions in the `ticket system`_. The Django developers actively "
"monitor the ticket system and use your feedback to improve the documentation "
"for everybody."
msgstr ""
"ドキュメント改良のお手伝いは大歓迎です。変更すべき点、修正すべき点、改良す べ"
"き点などを `チケットシステム`_ に提出してください。Django の開発陣はチケット"
"システムを監視して、あなたのフィードバックが皆に恩恵をもたらすようにドキュメ"
"ントを改良しています。"

msgid ""
"Note, however, that tickets should explicitly relate to the documentation, "
"rather than asking broad tech-support questions. If you need help with your "
"particular Django setup, try the |django-users| mailing list or the `#django "
"IRC channel`_ instead."
msgstr ""
"ただし、チケットは一般的なテクニカルサポートに関わる質問ではなく、ドキュメン"
"ト自体に関する内容にしてください。 Django のセットアップに関する個別の問 題は"
"ドキュメントのコメント欄にではなく、 |django-users| メーリングリストや IRC "
"の `#django チャネル`_ にお願いします。"

msgid "In plain text"
msgstr "プレーンテキスト版"

msgid ""
"For offline reading, or just for convenience, you can read the Django "
"documentation in plain text."
msgstr ""
"オフラインで読みたい人や、あるいは単に利便性のために、Django ドキュメントはプ"
"レーンテキスト形式でも読めます。"

msgid ""
"If you're using an official release of Django, the zipped package (tarball) "
"of the code includes a ``docs/`` directory, which contains all the "
"documentation for that release."
msgstr ""
"Django の公式リリース版を使っているなら、ソースコードのアーカイブパッケージ "
"(tarball) に ``docs/`` ディレクトリが入っています。このディレクトリには各リ"
"リースの全てのドキュメントが入っています。"

msgid ""
"If you're using the development version of Django (aka the main branch), the "
"``docs/`` directory contains all of the documentation. You can update your "
"Git checkout to get the latest changes."
msgstr ""
"Django の開発版 (別名 main ブランチ) を使っているなら、``docs/`` ディレクトリ"
"に全てのドキュメントが入っています。チェックアウトした Git ブランチを更新すれ"
"ば、最新版が取得できます。"

msgid ""
"One low-tech way of taking advantage of the text documentation is by using "
"the Unix ``grep`` utility to search for a phrase in all of the "
"documentation. For example, this will show you each mention of the phrase "
"\"max_length\" in any Django document:"
msgstr ""
"テキストドキュメントの便利でローテクな使い方の一つに Unix の ``grep`` ユー"
"ティリティを使った全ドキュメント検索があります。例えば、以下のようにすれば、 "
"“max_length” について触れている部分を表示できます:"

msgid "As HTML, locally"
msgstr "ローカルで HTML で読む"

msgid ""
"You can get a local copy of the HTML documentation following a few steps:"
msgstr ""
"以下の簡単なステップを踏めば、 HTML ドキュメントのローカルコピーを手に入れら"
"れます。"

msgid ""
"Django's documentation uses a system called Sphinx__ to convert from plain "
"text to HTML. You'll need to install Sphinx by either downloading and "
"installing the package from the Sphinx website, or with ``pip``:"
msgstr ""
"Django のドキュメントは、 Sphinx__ というシステムを使ってプレーンテキストか"
"ら HTML への変換を行っています。 Sphinx のウェブサイトから Sphinx をダウン"
"ロードしてインストールするか、次のコマンドで ``pip`` を使ってインストールしま"
"す。"

msgid ""
"Then, use the included ``Makefile`` to turn the documentation into HTML:"
msgstr ""
"そして、次のコマンドでDjango のドキュメントディレクトリにある ``Makefile`` を"
"使って、ドキュメントを HTML に変換するだけです。"

msgid "You'll need `GNU Make`__ installed for this."
msgstr ""
"これを実行するには、`GNU Make`__ がインストールされている必要があります。"

msgid "If you're on Windows you can alternatively use the included batch file:"
msgstr ""
"もし Windows の場合は、代わりにドキュメントディレクトリにあるバッチファイルを"
"使用できます:"

msgid "The HTML documentation will be placed in ``docs/_build/html``."
msgstr "HTML ドキュメントが ``docs/_build/html`` に生成されます。"

msgid "Differences between versions"
msgstr "バージョンごとの違い"

msgid ""
"The text documentation in the main branch of the Git repository contains the "
"\"latest and greatest\" changes and additions. These changes include "
"documentation of new features targeted for Django's next :term:`feature "
"release <Feature release>`. For that reason, it's worth pointing out our "
"policy to highlight recent changes and additions to Django."
msgstr ""
"Git リポジトリの main ブランチにあるテキストドキュメントには、「最新かつ最大"
"の」変更と追加が含まれています。これらの変更には、Django の次の :term:`機能リ"
"リース <Feature release>` を対象とした新機能のドキュメントが含まれています。"
"そのため、Django の最近の変更や追加をハイライトするというポリシーを指摘してお"
"きましょう。"

msgid "We follow this policy:"
msgstr "私たちは以下の方針に従います。"

msgid ""
"The development documentation at https://docs.djangoproject.com/en/dev/ is "
"from the main branch. These docs correspond to the latest feature release, "
"plus whatever features have been added/changed in the framework since then."
msgstr ""
"https://docs.djangoproject.com/en/dev/ にある開発ドキュメントは、main ブラン"
"チから生成されます。これらのドキュメントは、最新の機能リリースに加え、それ以"
"降フレームワークで追加/変更された機能に対応しています。"

msgid ""
"As we add features to Django's development version, we update the "
"documentation in the same Git commit transaction."
msgstr ""
"Django の開発版に機能を追加する場合、同じ Git のコミットトランザクションの中"
"で、ドキュメントの変更もコミットします。"

msgid ""
"To distinguish feature changes/additions in the docs, we use the phrase: "
"\"New in Django Development version\" for the version of Django that hasn't "
"been released yet, or \"New in version X.Y\" for released versions."
msgstr ""
"ドキュメント内で追加/変更された機能を区別するために、まだリリースされていない"
"バージョンの場合、「Django の開発バージョンで新たに追加された機能です (New "
"in Django Development version)」 というフレーズを、リリースバージョンの場合、"
"「バージョン X.Y で新たに追加された機能です (New in version X.Y)」 というフ"
"レーズを使います。"

msgid ""
"Documentation fixes and improvements may be backported to the last release "
"branch, at the discretion of the merger, however, once a version of Django "
"is :ref:`no longer supported<supported-versions-policy>`, that version of "
"the docs won't get any further updates."
msgstr ""
"ドキュメントの修正や改善は、マージする人の判断で、最新リリースブランチにバッ"
"クポートされることがあります。しかし、あるバージョンが :ref:`サポート終了"
"<supported-versions-policy>` の状態にされた場合、そのバージョンのドキュメント"
"は、それ以上いかなる更新もされません。"

msgid ""
"The `main documentation web page`_ includes links to documentation for "
"previous versions. Be sure you are using the version of the docs "
"corresponding to the version of Django you are using!"
msgstr ""
"`Web のドキュメントのメインページ`_ には、以前のバージョンのドキュメントへの"
"リンクがあります。読んでいるドキュメントのバージョンが、現在使っている "
"Django のバージョンと同一のものであるか、十分に注意してください！"
