# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# Akio Ogasahara <libratechwriter@gmail.com>, 2024
# akiyoko <ayokose@gmail.com>, 2020
# Asai Takuya <takuya.waseda.1119@gmail.com>, 2016
# BanjinS <banjin-s@qbooks.jp>, 2016
# Claude Paroz <claude@2xlibre.net>, 2020
# Eiji WARASHINA <Eiji.Warashina@gmail.com>, 2016
# eitaro, 2022
# Hiroyuki Imai <hiroyuki.wx@gmail.com>, 2020
# IjIj <ijijsamurai@gmail.com>, 2021
# Ikemoto Hideki <ikemo333@gmail.com>, 2020-2021
# JUN OKAZAKI <okazakijun54392@gmail.com>, 2017
# Kashun YOSHIDA, 2018
# BanjinS <banjin-s@qbooks.jp>, 2016
# Kosuke Yamashima <Renet.pc@gmail.com>, 2017
# Akio Ogasahara <libratechwriter@gmail.com>, 2024
# Makoto Mori <makomori@sfc.wide.ad.jp>, 2016
# Mariusz Felisiak <felisiak.mariusz@gmail.com>, 2022
# Masashi SHIBATA <contact@c-bata.link>, 2021
# Masashi SHIBATA <contact@c-bata.link>, 2016
# matsuand, 2018
# Mitsuhiro Sorakubo <msorakubo@msn.com>, 2017
# Tatsuya Matoba <mtb.toya0403@gmail.com>, 2018
# mnamihdk, 2017
# Nanami, 2024
# ohkawa <ookawa.m@gmail.com>, 2016
# Pawllo2 <pawllothesecond@gmail.com>, 2017-2019
# salexkidd <salexkidd@gmail.com>, 2015
# Shimamura Shunsuke <chun.jb.37@gmail.com>, 2021
# TAKAHASHI Shuuji <shuuji3@gmail.com>, 2016-2017,2023
# sumi masyauki, 2021
# TANIGUCHI Taichi, 2021-2023
# TAKAHASHI Shuuji <shuuji3@gmail.com>, 2017-2019,2023-2024
# Takashi Iwamoto, 2018
# Takashi Sugawara <aimaimokomoko@gmail.com>, 2017
# Takayuki Hirayama <th.windbell+transifex@gmail.com>, 2020
# Takuya N <takninnovationresearch@gmail.com>, 2019
# TANIGUCHI Taichi, 2023-2024
# Yoshihiro Furudate <aheadlink.changat@gmail.com>, 2016
# Yuki Yokoyama <peketamin@gmail.com>, 2020
# Yuuki Ebihara <yuuki.ebihara813@gmail.com>, 2016
# Pawllo2 <pawllothesecond@gmail.com>, 2017
# yz4230 <yuzupon1480@gmail.com>, 2021
# yz4230 <yuzupon1480@gmail.com>, 2021
# 森田寛樹 <moritahiroki87@gmail.com>, 2019
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-07 15:06-0500\n"
"PO-Revision-Date: 2013-04-02 20:01+0000\n"
"Last-Translator: TAKAHASHI Shuuji <shuuji3@gmail.com>, 2017-2019,2023-2024\n"
"Language-Team: Japanese (http://app.transifex.com/django/django-docs/"
"language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "Applications"
msgstr "アプリケーション"

msgid ""
"Django contains a registry of installed applications that stores "
"configuration and provides introspection. It also maintains a list of "
"available :doc:`models </topics/db/models>`."
msgstr ""
"Django には、設定の保存と調査の手段を提供するインストール済みアプリケーション"
"のレジストリがあり、利用可能な :doc:`モデル </topics/db/models>` のリストもア"
"クセスできます。"

msgid ""
"This registry is called :attr:`~django.apps.apps` and it's available in :mod:"
"`django.apps`:"
msgstr ""
"このレジストリは :attr:`~django.apps.apps` と呼ばれ、 :mod:`django.apps` で利"
"用できます:"

msgid "Projects and applications"
msgstr "プロジェクトとアプリケーション"

msgid ""
"The term **project** describes a Django web application. The project Python "
"package is defined primarily by a settings module, but it usually contains "
"other things. For example, when you run  ``django-admin startproject "
"mysite`` you'll get a ``mysite`` project directory that contains a "
"``mysite`` Python package with ``settings.py``, ``urls.py``, ``asgi.py`` and "
"``wsgi.py``. The project package is often extended to include things like "
"fixtures, CSS, and templates which aren't tied to a particular application."
msgstr ""
"**プロジェクト (project)** という単語は、Django の web アプリケーションを指し"
"ます。プロジェクトの Python パッケージは主に settings モジュールで定義されま"
"すが、通常は他のファイルも含まれます。たとえば、 ``django-admin startproject "
"mysite`` を実行すると、``mysite`` プロジェクトディレクトリが作成され、その中"
"には ``settings.py``、``urls.py``、``asgi.py``、``wsgi.py`` などのファイルが"
"含まれる ``mysite`` Python パッケージが作られます。プロジェクトパッケージは、"
"fixture や CSS、テンプレートなど特定のアプリケーションに束縛されないファイル"
"も含まれることがふつうです。"

msgid ""
"A **project's root directory** (the one that contains ``manage.py``) is "
"usually the container for all of a project's applications which aren't "
"installed separately."
msgstr ""
"**プロジェクトのルートディレクトリ** (``manage.py`` があるディレクトリ) は、"
"プロジェクトと一緒にインストールされるすべてのアプリケーションのコンテナとし"
"て機能します。"

msgid ""
"The term **application** describes a Python package that provides some set "
"of features. Applications :doc:`may be reused </intro/reusable-apps/>` in "
"various projects."
msgstr ""
"**アプリケーション (application)** という言葉は、何らかの機能を提供する "
"Python パッケージを意味します。アプリケーションはさまざまなプロジェクトで :"
"doc:`再利用する </intro/reusable-apps/>` ことができます。"

msgid ""
"Applications include some combination of models, views, templates, template "
"tags, static files, URLs, middleware, etc. They're generally wired into "
"projects with the :setting:`INSTALLED_APPS` setting and optionally with "
"other mechanisms such as URLconfs, the :setting:`MIDDLEWARE` setting, or "
"template inheritance."
msgstr ""
"アプリケーションには、モデル、ビュー、テンプレート、テンプレートタグ、静的"
"ファイル、ミドルウェアなどが含まれます。これらは一般に :setting:"
"`INSTALLED_APPS` 設定で有効になり、それ以外では URLconf、 :setting:"
"`MIDDLEWARE` 設定、テンプレート継承などの仕組みから使われます。"

msgid ""
"It is important to understand that a Django application is a set of code "
"that interacts with various parts of the framework. There's no such thing as "
"an ``Application`` object. However, there's a few places where Django needs "
"to interact with installed applications, mainly for configuration and also "
"for introspection. That's why the application registry maintains metadata in "
"an :class:`~django.apps.AppConfig` instance for each installed application."
msgstr ""
"Django のアプリケーションは、フレームワークのさまざまなパーツとやりとりをする"
"コードの集まりであると理解するのは大切です。``Application`` オブジェクトのよ"
"うなものは存在しません。しかしながら、Django がインストール済みのアプリケー"
"ションの主に設定やイントロスペクションとやりとりをする必要があることもありま"
"す。そのため、インストールアプリケーションごとのメタデータは、アプリケーショ"
"ンレジストリが :class:`~django.apps.AppConfig` インスタンス内に保存していま"
"す。"

msgid ""
"There's no restriction that a project package can't also be considered an "
"application and have models, etc. (which would require adding it to :setting:"
"`INSTALLED_APPS`)."
msgstr ""
"プロジェクトパッケージがアプリケーションとみなされず、モデルなどを持てないと"
"いった制限はありません (その場合は :setting:`INSTALLED_APPS` に設定を追加する"
"必要があります。)。"

msgid "Configuring applications"
msgstr "アプリケーションを設定する"

msgid ""
"To configure an application, create an ``apps.py`` module inside the "
"application, then define a subclass of :class:`AppConfig` there."
msgstr ""
"アプリケーションを設定するためには、アプリケーション内に ``apps.py`` モジュー"
"ルを作成し、そこに :class:`AppConfig` のサブクラスを定義してください。"

msgid ""
"When :setting:`INSTALLED_APPS` contains the dotted path to an application "
"module, by default, if Django finds exactly one :class:`AppConfig` subclass "
"in the ``apps.py`` submodule, it uses that configuration for the "
"application. This behavior may be disabled by setting :attr:`AppConfig."
"default` to ``False``."
msgstr ""
":setting:`INSTALLED_APPS` にアプリケーションモジュールへのドット区切りパスが"
"含まれている場合、デフォルトでは、 Django が ``apps.py`` サブモジュールの中"
"に :class:`AppConfig` サブクラスを一つでも見つけると、その設定をアプリケー"
"ションに使用します。この動作は :attr:`AppConfig.default` を ``False`` に設定"
"すれば無効にできます。"

msgid ""
"If the ``apps.py`` module contains more than one :class:`AppConfig` "
"subclass, Django will look for a single one where :attr:`AppConfig.default` "
"is ``True``."
msgstr ""
"``apps.py`` モジュールに複数の :class:`AppConfig` のサブクラスが含まれている"
"場合、Djangoは :attr:`AppConfig.default` が ``True`` である単一のサブクラスを"
"探します。"

msgid ""
"If no :class:`AppConfig` subclass is found, the base :class:`AppConfig` "
"class will be used."
msgstr ""
"もし :class:`AppConfig` のサブクラスが見つからなければ、 :class:`AppConfig` "
"の基底クラスが使用されます。"

msgid ""
"Alternatively, :setting:`INSTALLED_APPS` may contain the dotted path to a "
"configuration class to specify it explicitly::"
msgstr ""
"あるいは、:setting:`INSTALLED_APPS` に設定クラスへのドット区切りパスを記述し"
"て、明示的に指定することもできます："

msgid "For application authors"
msgstr "アプリケーション開発者向け"

msgid ""
"If you're creating a pluggable app called \"Rock ’n’ roll\", here's how you "
"would provide a proper name for the admin::"
msgstr ""
"例えば、あなたが\"Rock 'n' roll\"という名前のプラガブルなアプリケーションを"
"作っているとしたら、このようにアプリケーションのadminに適切な名前をつけること"
"になるでしょう::"

msgid ""
"``RockNRollConfig`` will be loaded automatically when :setting:"
"`INSTALLED_APPS` contains ``'rock_n_roll'``. If you need to prevent this, "
"set :attr:`~AppConfig.default` to ``False`` in the class definition."
msgstr ""
"``RockNRollConfig`` は :setting:`INSTALLED_APPS` が ``'rock_n_roll'`` を含む"
"ときに自動的に読み込まれます。もしこれを防止したい場合、 :attr:`~AppConfig."
"default` を ``False`` に設定してください。"

msgid ""
"You can provide several :class:`AppConfig` subclasses with different "
"behaviors. To tell Django which one to use by default, set :attr:`~AppConfig."
"default` to ``True`` in its definition. If your users want to pick a non-"
"default configuration, they must replace ``'rock_n_roll'`` with the dotted "
"path to that specific class in their :setting:`INSTALLED_APPS` setting."
msgstr ""
"異なる動作をする :class:`AppConfig` サブクラスを複数用意することができます。"
"Django にどれをデフォルトで使うかを教えるには、 :attr:`~AppConfig.default` "
"を ``True`` に設定してください。ユーザがデフォルトでない設定を選びたい場合"
"は、 :setting:`INSTALLED_APPS` の設定で ``'rock_n_roll'`` をその特定のクラス"
"へのドット区切りパスに置き換える必要があります。"

msgid ""
"The :attr:`AppConfig.name` attribute tells Django which application this "
"configuration applies to. You can define any other attribute documented in "
"the :class:`~django.apps.AppConfig` API reference."
msgstr ""
":attr:`AppConfig.name` 属性は、この設定がどのアプリケーションに適用されるか"
"を Django に伝えます。その他の属性は :class:`~django.apps.AppConfig` API リ"
"ファレンスで定義できます。"

msgid ""
":class:`AppConfig` subclasses may be defined anywhere. The ``apps.py`` "
"convention merely allows Django to load them automatically when :setting:"
"`INSTALLED_APPS` contains the path to an application module rather than the "
"path to a configuration class."
msgstr ""
":class:`AppConfig` サブクラスはどこに定義しても構いません。 ``apps.py`` の規"
"約は、 :setting:`INSTALLED_APPS` に設定クラスへのパスではなく、アプリケー "
"ションモジュールへのパスが含まれている場合に、Django がそれらを自動的に読み込"
"むようにしているだけです。"

msgid ""
"If your code imports the application registry in an application's ``__init__."
"py``, the name ``apps`` will clash with the ``apps`` submodule. The best "
"practice is to move that code to a submodule and import it. A workaround is "
"to import the registry under a different name::"
msgstr ""
"アプリケーションの ``__init__.py`` でアプリケーションレジストリをインポートす"
"る場合、``apps`` という名前は ``apps`` サブモジュールと衝突します。 ベストプ"
"ラクティスはそのコードをサブモジュールに移動してインポートすることです。回避"
"策はレジストリを別の名前でインポートすることです："

msgid "For application users"
msgstr "アプリケーションユーザー向け"

msgid ""
"If you're using \"Rock ’n’ roll\" in a project called ``anthology``, but you "
"want it to show up as \"Jazz Manouche\" instead, you can provide your own "
"configuration::"
msgstr ""
"``anthology`` という名前のプロジェクト内にて \"Rock 'n' roll\" を利用するもの"
"の、その表示は \"Jazz Manouche\" としたいとします。この場合は設定を以下のよう"
"にします。"

msgid ""
"This example shows project-specific configuration classes located in a "
"submodule called ``apps.py``. This is a convention, not a requirement. :"
"class:`AppConfig` subclasses may be defined anywhere."
msgstr ""
"この例ではプロジェクト固有の設定クラスを ``apps.py`` というサブモジュールに呼"
"び出しています。 これは慣習であり、必須ではありません。 :class:`AppConfig` サ"
"ブクラスはどこに定義しても構いません。"

msgid ""
"In this situation, :setting:`INSTALLED_APPS` must contain the dotted path to "
"the configuration class because it lives outside of an application and thus "
"cannot be automatically detected."
msgstr ""
"この状況では、外部のアプリケーションに存在するため、設定クラスへのドット区切"
"りパスが :setting:`INSTALLED_APPS` に含まれている必要があります。自動的に検出"
"することはできません。"

msgid "Application configuration"
msgstr "アプリケーションの設定"

msgid ""
"Application configuration objects store metadata for an application. Some "
"attributes can be configured in :class:`~django.apps.AppConfig` subclasses. "
"Others are set by Django and read-only."
msgstr ""
"アプリケーション設定オブジェクトはアプリケーションのメタデータを保存します。 "
"いくつかの属性は :class:`~django.apps.AppConfig` サブクラスで設定できます。他"
"の属性は Django によって設定され、読み取り専用です。"

msgid "Configurable attributes"
msgstr "設定可能な属性"

msgid "Full Python path to the application, e.g. ``'django.contrib.admin'``."
msgstr ""
"アプリケーションへの Python フルパス、たとえば ``'django.contrib.admin'`` 。"

msgid ""
"This attribute defines which application the configuration applies to. It "
"must be set in all :class:`~django.apps.AppConfig` subclasses."
msgstr ""
"この属性は設定がどのアプリケーションに適用されるかを定義します。全ての :"
"class:`~django.apps.AppConfig` サブクラスで設定する必要があります。"

msgid "It must be unique across a Django project."
msgstr "Djangoプロジェクト全体の中で固有である必要があります。"

msgid "Short name for the application, e.g. ``'admin'``"
msgstr "アプリケーション用のショートネーム 例 \"'admin'\""

msgid ""
"This attribute allows relabeling an application when two applications have "
"conflicting labels. It defaults to the last component of ``name``. It should "
"be a valid Python identifier."
msgstr ""
"この属性により、2つのアプリケーションのラベルが競合している場合に、アプリケー"
"ションのラベルを変更できます。デフォルトは ``name`` の最後のコンポーネントで"
"す。これは有効な Python 識別子でなければなりません。"

msgid "Human-readable name for the application, e.g. \"Administration\"."
msgstr "人間が読めるアプリケーション名、たとえば \"Administration\"。"

msgid "This attribute defaults to ``label.title()``."
msgstr "この属性のデフォルトは ``label.title()`` です。"

msgid ""
"Filesystem path to the application directory, e.g. ``'/usr/lib/pythonX.Y/"
"dist-packages/django/contrib/admin'``."
msgstr ""
"アプリケーションディレクトリへのファイルシステムのパス、たとえば ``'/usr/lib/"
"pythonX.Y/dist-packages/django/contrib/admin'`` 。"

msgid ""
"In most cases, Django can automatically detect and set this, but you can "
"also provide an explicit override as a class attribute on your :class:"
"`~django.apps.AppConfig` subclass. In a few situations this is required; for "
"instance if the app package is a `namespace package`_ with multiple paths."
msgstr ""
"ほとんどの場合、Django は自動的にこれを検出して設定しますが、 :class:"
"`~django.apps.AppConfig` サブクラスのクラス属性として、明示的にオーバーライド"
"を指定することもできます。例えば、アプリパッケージが複数のパスを持つ "
"`namespace package`_ である場合などです。"

msgid ""
"Set this attribute to ``False`` to prevent Django from selecting a "
"configuration class automatically. This is useful when ``apps.py`` defines "
"only one :class:`AppConfig` subclass but you don't want Django to use it by "
"default."
msgstr ""
"この属性を ``False`` に設定すると、 Django が自動的に設定クラスを選択しないよ"
"うにします。これは、``apps.py`` で :class:`AppConfig` サブクラスが一つだけ定"
"義されているが、 Django にデフォルトでそれを使わせたくない場合に便利です。"

msgid ""
"Set this attribute to ``True`` to tell Django to select a configuration "
"class automatically. This is useful when ``apps.py`` defines more than one :"
"class:`AppConfig` subclass and you want Django to use one of them by default."
msgstr ""
"この属性を ``True`` に設定すると、 Django に設定クラスを自動的に選択するよう"
"に指示します。これは、``apps.py`` が複数の :class:`AppConfig` サブクラスを定"
"義していて、 Django にそのうちの一つをデフォルトで使わせたい場合に便利です。"

msgid "By default, this attribute isn't set."
msgstr "デフォルトではこの属性は設定されていません。"

msgid ""
"The implicit primary key type to add to models within this app. You can use "
"this to keep :class:`~django.db.models.AutoField` as the primary key type "
"for third party applications."
msgstr ""
"このアプリ内のモデルに追加する暗黙の主キー型です。これを使うと、サードパー"
"ティアプリの主キー型を :class:`~django.db.models.AutoField` にしておくことが"
"できます。"

msgid "By default, this is the value of :setting:`DEFAULT_AUTO_FIELD`."
msgstr "デフォルトでは :setting:`DEFAULT_AUTO_FIELD` の値です。"

msgid "Read-only attributes"
msgstr "読み取り専用属性"

msgid ""
"Root module for the application, e.g. ``<module 'django.contrib.admin' from "
"'django/contrib/admin/__init__.py'>``."
msgstr ""
"アプリケーションのルートモジュール、たとえば ``<module 'django.contrib."
"admin' from 'django/contrib/admin/__init__.py'>`` 。"

msgid ""
"Module containing the models, e.g. ``<module 'django.contrib.admin.models' "
"from 'django/contrib/admin/models.py'>``."
msgstr ""
"モデルを含むモジュール、たとえば ``<module 'django.contrib.admin.models' "
"from 'django/contrib/admin/models.py'>`` 。"

msgid ""
"It may be ``None`` if the application doesn't contain a ``models`` module. "
"Note that the database related signals such as :data:`~django.db.models."
"signals.pre_migrate` and :data:`~django.db.models.signals.post_migrate` are "
"only emitted for applications that have a ``models`` module."
msgstr ""
"アプリケーションが ``models`` モジュールを含んでいない場合は ``None`` になり"
"ます。 :data:`~django.db.models.signals.pre_migrate` や :data:`~django.db."
"models.signals.post_migrate` といったデータベース関連のシグナルは、 "
"``models`` モジュールを持つアプリケーションに対してのみ発行されることに注意し"
"てください。"

msgid "Methods"
msgstr "メソッド"

msgid ""
"Returns an iterable of :class:`~django.db.models.Model` classes for this "
"application."
msgstr ""
"このアプリケーションの :class:`~django.db.models.Model` クラスのイテラブルを"
"返します。"

msgid "Requires the app registry to be fully populated."
msgstr "アプリのレジストリが完全に入力されている必要があります。"

msgid ""
"Returns the :class:`~django.db.models.Model` with the given ``model_name``. "
"``model_name`` is case-insensitive."
msgstr ""
"与えられた ``model_name`` を持つ :class:`~django.db.models.Model` を返しま"
"す。 ``model_name`` は大文字小文字を区別しません。"

msgid "Raises :exc:`LookupError` if no such model exists in this application."
msgstr ""
"このアプリケーションにそのようなモデルが存在しない場合、 :exc:`LookupError` "
"を発生させます。"

msgid ""
"Requires the app registry to be fully populated unless the ``require_ready`` "
"argument is set to ``False``. ``require_ready`` behaves exactly as in :meth:"
"`apps.get_model()`."
msgstr ""
"``require_ready`` 引数が ``False`` に設定されていない限り、アプリのレジストリ"
"が完全に登録されている必要があります。 ``require_ready`` は :meth:`apps."
"get_model()` と全く同じ動作をします。"

msgid ""
"Subclasses can override this method to perform initialization tasks such as "
"registering signals. It is called as soon as the registry is fully populated."
msgstr ""
"サブクラスはこのメソッドをオーバーライドして、シグナルの登録などの初期化タス"
"クを実行できます。 このメソッドは、レジストリが完全に登録されるとすぐに呼び出"
"されます。"

msgid ""
"Although you can't import models at the module-level where :class:`~django."
"apps.AppConfig` classes are defined, you can import them in ``ready()``, "
"using either an ``import`` statement or :meth:`~AppConfig.get_model`."
msgstr ""
":class:`~django.apps.AppConfig` クラスが定義されているモジュールレベルでモデ"
"ルをインポートすることはできませんが、 ``import`` ステートメントか :meth:"
"`~AppConfig.get_model` を使って ``ready()`` でインポートできます。"

msgid ""
"If you're registering :mod:`model signals <django.db.models.signals>`, you "
"can refer to the sender by its string label instead of using the model class "
"itself."
msgstr ""
":mod:`モデル シグナル <django.db.models.signals>` を登録する場合、モデルクラ"
"スそのものを使うのではなく、その文字列ラベルで送信者を参照できます。"

msgid "Example::"
msgstr "実装例::"

msgid ""
"Although you can access model classes as described above, avoid interacting "
"with the database in your :meth:`ready()` implementation. This includes "
"model methods that execute queries (:meth:`~django.db.models.Model.save()`, :"
"meth:`~django.db.models.Model.delete()`, manager methods etc.), and also raw "
"SQL queries via ``django.db.connection``. Your :meth:`ready()` method will "
"run during startup of every management command. For example, even though the "
"test database configuration is separate from the production settings, "
"``manage.py test`` would still execute some queries against your "
"**production** database!"
msgstr ""
"上記のようにモデルクラスにアクセスすることはできますが、 :meth:`ready()` の実"
"装でデータベースとやり取りすることは避けてください。これには、クエリを実行す"
"るモデルメソッド (:meth:`~django.db.models.Model.save()`, :meth:`~django.db."
"models.Model.delete()`,マネージャメソッドなど) や、 ``django.db.connection`` "
"を介した素の SQL クエリも含まれます。 :meth:`ready()` メソッドはすべての管理"
"コマンドの起動時に実行されます。たとえば、テスト用のデータベースの設定が本番"
"用の設定とは異なっていても、 ``manage.py test`` は **本番用** データベースに"
"対してクエリを実行します！"

msgid ""
"In the usual initialization process, the ``ready`` method is only called "
"once by Django. But in some corner cases, particularly in tests which are "
"fiddling with installed applications, ``ready`` might be called more than "
"once. In that case, either write idempotent methods, or put a flag on your "
"``AppConfig`` classes to prevent rerunning code which should be executed "
"exactly one time."
msgstr ""
"通常の初期化処理では、 ``ready`` メソッドは Django から一度だけ呼び出されま"
"す。しかし、特にインストールされたアプリケーションを操作するテストでは、"
"``ready`` は複数回呼び出されるかもしれません。 そのような場合は、idempotent "
"メソッドを書くか、 ``AppConfig`` クラスにフラグを付けて、一度だけ実行されるべ"
"きコードの再実行を防いでください。"

msgid "Namespace packages as apps"
msgstr "アプリとしての名前空間 (namespace) パッケージ"

msgid ""
"Python packages without an ``__init__.py`` file are known as \"namespace "
"packages\" and may be spread across multiple directories at different "
"locations on ``sys.path`` (see :pep:`420`)."
msgstr ""
"``__init__.py`` ファイルを持たない Python パッケージは \"namespace package\" "
"と呼ばれ、 ``sys.path`` 上の異なる場所にある複数のディレクトリにまたがってい"
"る可能性があります (:pep:`420` を参照してください)。"

msgid ""
"Django applications require a single base filesystem path where Django "
"(depending on configuration) will search for templates, static assets, etc. "
"Thus, namespace packages may only be Django applications if one of the "
"following is true:"
msgstr ""
"Djangoアプリケーションは(設定に応じて)、Djangoがテンプレートや静的アセットを"
"探す単一のベースファイスシステムパスを必要とします。したがって、名前空間パッ"
"ケージは以下のいずれかが真である場合にのみ、Django アプリケーションになること"
"ができます。"

msgid ""
"The namespace package actually has only a single location (i.e. is not "
"spread across more than one directory.)"
msgstr ""
"名前空間パッケージは実際には単一の場所にしか存在しません(つまり、複数のディレ"
"クトリに分散していないということです)。"

msgid ""
"The :class:`~django.apps.AppConfig` class used to configure the application "
"has a :attr:`~django.apps.AppConfig.path` class attribute, which is the "
"absolute directory path Django will use as the single base path for the "
"application."
msgstr ""
"アプリケーションの設定に使われる :class:`~django.apps.AppConfig` クラスには :"
"attr:`~django.apps.AppConfig.path` クラス属性があり、これは Django がアプリ"
"ケーションの単一のベースパスとして使う絶対ディレクトリパスです。"

msgid ""
"If neither of these conditions is met, Django will raise :exc:`~django.core."
"exceptions.ImproperlyConfigured`."
msgstr ""
"これらの条件のどちらも満たさない場合、Django は :exc:`~django.core."
"exceptions.ImproperlyConfigured` を発生させます。"

msgid "Application registry"
msgstr "アプリケーションレジストリ"

msgid ""
"The application registry provides the following public API. Methods that "
"aren't listed below are considered private and may change without notice."
msgstr ""
"アプリケーションレジストリは、以下の公開APIを提供しています。以下に記載されて"
"いないメソッドは非公開とみなされ、予告なく変更される可能性があります。"

msgid ""
"Boolean attribute that is set to ``True`` after the registry is fully "
"populated and all :meth:`AppConfig.ready` methods are called."
msgstr ""
"レジストリが完全に登録され、すべての :meth:`AppConfig.ready` メソッドが呼び出"
"された後に ``True`` に設定される真偽値属性です。"

msgid "Returns an iterable of :class:`~django.apps.AppConfig` instances."
msgstr ":class:`~django.apps.AppConfig` インスタンスのイテラブルを返します。"

msgid ""
"Returns an :class:`~django.apps.AppConfig` for the application with the "
"given ``app_label``. Raises :exc:`LookupError` if no such application exists."
msgstr ""
"与えられた ``app_label`` を持つアプリケーションの :class:`~django.apps."
"AppConfig` を返します。そのようなアプリケーションが存在しない場合は :exc:"
"`LookupError` を返します。"

msgid ""
"Checks whether an application with the given name exists in the registry. "
"``app_name`` is the full name of the app, e.g. ``'django.contrib.admin'``."
msgstr ""
"与えられた名前のアプリケーションがレジストリに存在するかどうかを調べます。 "
"``app_name`` はアプリのフルネームで、たとえば ``'django.contrib.admin'`` で"
"す。"

msgid ""
"Returns the :class:`~django.db.models.Model` with the given ``app_label`` "
"and ``model_name``. As a shortcut, this method also accepts a single "
"argument in the form ``app_label.model_name``. ``model_name`` is case-"
"insensitive."
msgstr ""
"与えられた ``app_label`` と ``model_name`` を持つ :class:`~django.db.models."
"Model` を返します。 ショートカットとして、このメソッドは ``app_label."
"model_name`` 形式の引数も受け付けます。 ``model_name`` は大文字小文字を区別し"
"ません。"

msgid ""
"Raises :exc:`LookupError` if no such application or model exists. Raises :"
"exc:`ValueError` when called with a single argument that doesn't contain "
"exactly one dot."
msgstr ""
"そのようなアプリケーションやモデルが存在しない場合 :exc:`LookupError` を発生"
"させます。 正確に1つのドットを含まない単一の引数で呼び出された場合、 :exc:"
"`ValueError` を発生させます。"

msgid ""
"Requires the app registry to be fully populated unless the ``require_ready`` "
"argument is set to ``False``."
msgstr ""
"``require_ready`` 引数が ``False`` に設定されていない限り、アプリのレジストリ"
"が完全に登録されている必要があります。"

msgid ""
"Setting ``require_ready`` to ``False`` allows looking up models :ref:`while "
"the app registry is being populated <app-loading-process>`, specifically "
"during the second phase where it imports models. Then ``get_model()`` has "
"the same effect as importing the model. The main use case is to configure "
"model classes with settings, such as :setting:`AUTH_USER_MODEL`."
msgstr ""
"``require_ready`` を ``False`` に設定することで、 :ref:`アプリのレジストリを"
"作成している間 <app-loading-process>` 、特にモデルをインポートする2番目の"
"フェーズでモデルを検索できます。この場合、``get_model()`` はモデルをインポー"
"トするのと同じ効果があります。主なユースケースは、モデルクラスを :setting:"
"`AUTH_USER_MODEL` のような設定で構成することです。"

msgid ""
"When ``require_ready`` is ``False``, ``get_model()`` returns a model class "
"that may not be fully functional (reverse accessors may be missing, for "
"example) until the app registry is fully populated. For this reason, it's "
"best to leave ``require_ready`` to the default value of ``True`` whenever "
"possible."
msgstr ""
"``require_ready`` が ``False`` の場合、``get_model()`` はアプリのレジストリが"
"完全に入力されるまで、完全に機能しない (例えば、逆アクセサが存在しない) モデ"
"ルクラスを返します。このため、常に ``require_ready`` をデフォルト値の "
"``True`` にしておくことをお勧めします。"

msgid "Initialization process"
msgstr "初期化プロセス"

msgid "How applications are loaded"
msgstr "アプリケーションはどう読み込まれるか"

msgid ""
"When Django starts, :func:`django.setup()` is responsible for populating the "
"application registry."
msgstr ""
"Django が起動すると、 :func:`django.setup()` がアプリケーションレジストリの入"
"力を行います。"

msgid "Configures Django by:"
msgstr "下記によって Django を設定します："

msgid "Loading the settings."
msgstr "設定を読み込む。"

msgid "Setting up logging."
msgstr "ロギングをセットアップする。"

msgid ""
"If ``set_prefix`` is True, setting the URL resolver script prefix to :"
"setting:`FORCE_SCRIPT_NAME` if defined, or ``/`` otherwise."
msgstr ""
"``set_prefix`` が True の場合、URLリゾルバのスクリプトのプレフィックスを、 定"
"義されていれば :setting:`FORCE_SCRIPT_NAME` に、そうでなければ ``/`` に設定す"
"る。"

msgid "Initializing the application registry."
msgstr "アプリケーション・レジストリを初期化する。"

msgid "This function is called automatically:"
msgstr "この関数は以下の場合に自動で呼び出されます："

msgid "When running an HTTP server via Django's ASGI or WSGI support."
msgstr "Django の ASGI や WSGI サポート経由で HTTP サーバを実行する場合。"

msgid "When invoking a management command."
msgstr "管理コマンドを起動するとき。"

msgid ""
"It must be called explicitly in other cases, for instance in plain Python "
"scripts."
msgstr ""
"それ以外の場合、たとえばプレーンなPythonスクリプトでは、明示的に呼び出す必要"
"があります。"

msgid ""
"Raises a ``RuntimeWarning`` when apps interact with the database before the "
"app registry has been fully populated."
msgstr ""
"アプリのレジストリが完全に登録される前にアプリがデータベースとやり取りをする"
"と ``RuntimeWarning`` を発生させます。"

msgid ""
"The application registry is initialized in three stages. At each stage, "
"Django processes all applications in the order of :setting:`INSTALLED_APPS`."
msgstr ""
"アプリケーションレジストリは 3 段階で初期化されます。それぞれの段階で、 "
"Django は全てのアプリケーションを :setting:`INSTALLED_APPS` の順番で処理しま"
"す。"

msgid "First Django imports each item in :setting:`INSTALLED_APPS`."
msgstr ""
"まず Django は :setting:`INSTALLED_APPS` の各アイテムをインポートします。"

msgid ""
"If it's an application configuration class, Django imports the root package "
"of the application, defined by its :attr:`~AppConfig.name` attribute. If "
"it's a Python package, Django looks for an application configuration in an "
"``apps.py`` submodule, or else creates a default application configuration."
msgstr ""
"アプリケーション設定クラスであれば、Django は :attr:`~AppConfig.name` 属性で"
"定義されたアプリケーションのルートパッケージをインポートします。Python パッ"
"ケージの場合、 Django は ``apps.py`` サブモジュールにあるアプリケーション設定"
"を探すか、あるいはデフォルトのアプリケーション設定を作成します。"

msgid "*At this stage, your code shouldn't import any models!*"
msgstr "\"この時点では、どのモデルもインポートしてはいけません！\""

msgid ""
"In other words, your applications' root packages and the modules that define "
"your application configuration classes shouldn't import any models, even "
"indirectly."
msgstr ""
"言い換えると、アプリケーションのルートパッケージとアプリケーションの "
"configuration クラスを定義するモジュールは、間接的であってもモデルをインポー"
"トすべきではありません。"

msgid ""
"Strictly speaking, Django allows importing models once their application "
"configuration is loaded. However, in order to avoid needless constraints on "
"the order of :setting:`INSTALLED_APPS`, it's strongly recommended not import "
"any models at this stage."
msgstr ""
"厳密に言えば、Django はアプリケーションの設定が読み込まれた時点でモデルのイン"
"ポートを許可します。しかし、 :setting:`INSTALLED_APPS` の順番に無用な制約が加"
"わらないようにするため、この段階ではモデルをインポートしないことを強く推奨し"
"ます。"

msgid ""
"Once this stage completes, APIs that operate on application configurations "
"such as :meth:`~apps.get_app_config()` become usable."
msgstr ""
"この段階が完了すると、 :meth:`~apps.get_app_config()` のようなアプリケーショ"
"ンの設定を操作するAPIが使えるようになります。"

msgid ""
"Then Django attempts to import the ``models`` submodule of each application, "
"if there is one."
msgstr ""
"それから Django は、各アプリケーションの ``models`` サブモジュールがあれば、"
"それをインポートしようとします。"

msgid ""
"You must define or import all models in your application's ``models.py`` or "
"``models/__init__.py``. Otherwise, the application registry may not be fully "
"populated at this point, which could cause the ORM to malfunction."
msgstr ""
"アプリケーションの ``models.py`` または ``models/__init__.py`` ですべてのモデ"
"ルを定義またはインポートする必要があります。そうしないと、この時点でアプリ"
"ケーションのレジストリが完全に登録されていない可能性があり、ORM が誤動作する"
"可能性があります。"

msgid ""
"Once this stage completes, APIs that operate on models such as :meth:`~apps."
"get_model()` become usable."
msgstr ""
"この段階が完了すると、 :meth:`~apps.get_model()` のようなモデルを操作するAPI"
"が使えるようになります。"

msgid ""
"Finally Django runs the :meth:`~AppConfig.ready()` method of each "
"application configuration."
msgstr ""
"最後に Django は、各アプリケーション設定の :meth:`~AppConfig.ready()` メソッ"
"ドを実行します。"

msgid "Troubleshooting"
msgstr "トラブルシューティング"

msgid ""
"Here are some common problems that you may encounter during initialization:"
msgstr "初期化中に遭遇する可能性のある一般的な問題をいくつか紹介します："

msgid ""
":class:`~django.core.exceptions.AppRegistryNotReady`: This happens when "
"importing an application configuration or a models module triggers code that "
"depends on the app registry."
msgstr ""
":class:`~django.core.exceptions.AppRegistryNotReady`: これは、アプリケーショ"
"ン設定やモデルモジュールのインポートが、アプリレジストリに依存するコードをト"
"リガした場合に発生します。"

msgid ""
"For example, :func:`~django.utils.translation.gettext()` uses the app "
"registry to look up translation catalogs in applications. To translate at "
"import time, you need :func:`~django.utils.translation.gettext_lazy()` "
"instead. (Using :func:`~django.utils.translation.gettext()` would be a bug, "
"because the translation would happen at import time, rather than at each "
"request depending on the active language.)"
msgstr ""
"たとえば、 :func:`~django.utils.translation.gettext()` はアプリケーションの翻"
"訳カタログを検索するためにアプリレジストリを使います。インポート時に翻訳する"
"には、代わりに :func:`~django.utils.translation.gettext_lazy()` が必要です。"
"(:func:`~django.utils.translation.gettext()` を使うと、アクティブな言語に応じ"
"てリクエストごとに翻訳が行われるのではなく、インポート時に翻訳が行われるので"
"バグになります)。"

msgid ""
"Executing database queries with the ORM at import time in models modules "
"will also trigger this exception. The ORM cannot function properly until all "
"models are available."
msgstr ""
"モデルモジュールのインポート時に ORM でデータベースクエリを実行すると、この例"
"外も発生します。すべてのモデルが利用可能になるまで、ORM は適切に機能しませ"
"ん。"

msgid ""
"This exception also happens if you forget to call :func:`django.setup()` in "
"a standalone Python script."
msgstr ""
"この例外は、スタンドアロンの Python スクリプトで :func:`django.setup()` を呼"
"び出すのを忘れた場合にも起こります。"

msgid ""
"``ImportError: cannot import name ...`` This happens if the import sequence "
"ends up in a loop."
msgstr ""
"``ImportError: cannot import name ...`` これはインポートのシーケンスがループ"
"してしまう場合に起こります。"

msgid ""
"To eliminate such problems, you should minimize dependencies between your "
"models modules and do as little work as possible at import time. To avoid "
"executing code at import time, you can move it into a function and cache its "
"results. The code will be executed when you first need its results. This "
"concept is known as \"lazy evaluation\"."
msgstr ""
"このような問題をなくすためには、モデルモジュール間の依存関係を最小にし、イン"
"ポート時の作業をできるだけ少なくする必要があります。インポート時にコードを実"
"行しないようにするには、そのコードを関数に移動させ、その結果をキャッシュしま"
"す。コードは、最初にその結果が必要になったときに実行されます。この概念は「遅"
"延評価」として知られています。"

msgid ""
"``django.contrib.admin`` automatically performs autodiscovery of ``admin`` "
"modules in installed applications. To prevent it, change your :setting:"
"`INSTALLED_APPS` to contain ``'django.contrib.admin.apps."
"SimpleAdminConfig'`` instead of ``'django.contrib.admin'``."
msgstr ""
"``django.contrib.admin`` はインストールされたアプリケーションの ``admin`` モ"
"ジュールの自動検出を自動的に行います。これを防ぐには、 :setting:"
"`INSTALLED_APPS` に ``'django.contrib.admin'`` の代わりに ``'django.contrib."
"admin.apps.SimpleAdminConfig'`` を含めるように変更してください。"

msgid ""
"``RuntimeWarning: Accessing the database during app initialization is "
"discouraged.`` This warning is triggered for database queries executed "
"before apps are ready, such as during module imports or in the :meth:"
"`AppConfig.ready` method. Such premature database queries are discouraged "
"because they will run during the startup of every management command, which "
"will slow down your project startup, potentially cache stale data, and can "
"even fail if migrations are pending."
msgstr ""
"``RuntimeWarning: Accessing the database during app initialization is "
"discouraged.`` この警告は、アプリが準備完了前に実行されるデータベースクエリに"
"対して発生します。例えば、モジュールのインポート中や :meth:`AppConfig.ready` "
"メソッド内などです。このような早すぎるデータベースクエリは、すべての管理コマ"
"ンドの起動時に実行されるため、プロジェクトの起動が遅くなったり、古いデータが"
"キャッシュされたり、マイグレーションが保留中の場合には失敗する可能性があるた"
"め、推奨されません。"

msgid ""
"For example, a common mistake is making a database query to populate form "
"field choices::"
msgstr ""
"たとえば、よくある間違いは、フォームフィールドの選択肢を入力するためにデータ"
"ベースクエリを作成することです："

msgid ""
"In the example above, the query from ``Country.objects.all()`` is executed "
"during module import, because the ``QuerySet`` is iterated over. To avoid "
"the warning, the form could use a :class:`~django.forms.ModelChoiceField` "
"instead::"
msgstr ""
"上の例では、 ``QuerySet`` がイテレートされるため、 ``Country.objects.all()`` "
"からのクエリがモジュールのインポート時に実行されます。警告を回避するには、代"
"わりに :class:`~django.forms.ModelChoiceField` を使用します："

msgid ""
"To make it easier to find the code that triggered this warning, you can make "
"Python :ref:`treat warnings as errors <python:warning-filter>` to reveal the "
"stack trace, for example with ``python -Werror manage.py shell``."
msgstr ""
"この警告を引き起こしたコードを見つけやすくするために、Pythonで :ref:`警告をエ"
"ラーとして扱う <python:warning-filter>` ことでスタックトレースを明らかにでき"
"ます。例えば、``python -Werror manage.py shell`` というコマンドを使用します。"

msgid "System check framework"
msgstr "システムチェックフレームワーク"

msgid ""
"The system check framework is a set of static checks for validating Django "
"projects. It detects common problems and provides hints for how to fix them. "
"The framework is extensible so you can easily add your own checks."
msgstr ""
"システムチェックフレームワークは、Django プロジェクトを検証するための静的"
"チェックのセットです。一般的な問題を検出し、それらを修正するヒントを提供しま"
"す。このフレームワークは拡張性があり、独自のチェックを簡単に追加できます。"

msgid ""
"For details on how to add your own checks and integrate them with Django's "
"system checks, see the :doc:`System check topic guide </topics/checks>`."
msgstr ""
"独自のチェックを追加し、Django のシステムチェックと統合する方法については、 :"
"doc:`システムチェックのトピックガイド </topics/checks>` を参照してください。"

msgid "API reference"
msgstr "API リファレンス"

msgid "``CheckMessage``"
msgstr "``CheckMessage``"

msgid ""
"The warnings and errors raised by system checks must be instances of "
"``CheckMessage``. An instance encapsulates a single reportable error or "
"warning. It also provides context and hints applicable to the message, and a "
"unique identifier that is used for filtering purposes."
msgstr ""
"システムチェックで発生する警告やエラーは ``CheckMessage`` のインスタンスでな"
"ければなりません。インスタンスは1つの報告可能なエラーや警告をカプセル化しま"
"す。また、メッセージに適用されるコンテキストとヒント、フィルタリングに使用さ"
"れる一意の識別子も提供します。"

msgid "Constructor arguments are:"
msgstr "コンストラクタの引数は以下の通りです："

msgid "``level``"
msgstr "``level``"

msgid ""
"The severity of the message. Use one of the predefined values: ``DEBUG``, "
"``INFO``, ``WARNING``, ``ERROR``, ``CRITICAL``. If the level is greater or "
"equal to ``ERROR``, then Django will prevent management commands from "
"executing. Messages with level lower than ``ERROR`` (i.e. warnings) are "
"reported to the console, but can be silenced."
msgstr ""
"メッセージの重大度。定義済みの値、 ``debug``、 ``info``、 ``warning``、 "
"``error``、 ``critical`` のいずれかを使用します。レベルが ``ERROR`` 以上の場"
"合、Django は管理コマンドの実行を抑止します。レベルが ``ERROR`` より低いメッ"
"セージ (つまり警告) はコンソールに報告されますが、抑制することもできます。"

msgid "``msg``"
msgstr "``msg``"

msgid ""
"A short (less than 80 characters) string describing the problem. The string "
"should *not* contain newlines."
msgstr ""
"問題を説明する短い (80 文字未満) 文字列。文字列には改行を含めてはいけません。"

msgid "``hint``"
msgstr "``hint``"

msgid ""
"A single-line string providing a hint for fixing the problem. If no hint can "
"be provided, or the hint is self-evident from the error message, the hint "
"can be omitted, or a value of ``None`` can be used."
msgstr ""
"問題を解決するためのヒントを示す1行の文字列。ヒントを提供できない場合、または"
"ヒントがエラーメッセージから明らかな場合は、ヒントを省略するか、 ``None`` を"
"使用できます。"

msgid "``obj``"
msgstr "``obj``"

msgid ""
"Optional. An object providing context for the message (for example, the "
"model where the problem was discovered). The object should be a model, "
"field, or manager or any other object that defines a ``__str__()`` method. "
"The method is used while reporting all messages and its result precedes the "
"message."
msgstr ""
"オプション。メッセージのコンテキストを提供するオブジェクト (例えば、問題が発"
"見されたモデル)。オブジェクトはモデル、フィールド、マネージャ、または "
"``__str__()`` メソッドを定義する他のオブジェクトでなければなりません。このメ"
"ソッドはすべてのメッセージを報告するときに使用され、その結果はメッセージの前"
"に置かれます。"

msgid "``id``"
msgstr "``id``"

msgid ""
"Optional string. A unique identifier for the issue. Identifiers should "
"follow the pattern ``applabel.X001``, where ``X`` is one of the letters "
"``CEWID``, indicating the message severity (``C`` for criticals, ``E`` for "
"errors and so). The number can be allocated by the application, but should "
"be unique within that application."
msgstr ""
"オプションの文字列。issueの一意な識別子。識別子は ``applabel.X001`` というパ"
"ターンに従うべきです。ここで ``X`` はメッセージの重大度を示す文字 ``CEWID`` "
"のいずれかです（クリティカルは ``C``、エラーは ``E`` など）。この番号はアプリ"
"ケーションによって割り当てることができますが、アプリケーション内で一意である"
"必要があります。"

msgid ""
"There are subclasses to make creating messages with common levels easier. "
"When using them you can omit the ``level`` argument because it is implied by "
"the class name."
msgstr ""
"共通のレベルを持つメッセージを簡単に作成するためのサブクラスがあります。これ"
"らを使用する場合、引数 ``level`` は省略できます。"

msgid "Builtin tags"
msgstr "組み込みタグ"

msgid "Django's system checks are organized using the following tags:"
msgstr "Django のシステムチェックは、以下のタグを使って整理されています："

msgid "``admin``: Checks of any admin site declarations."
msgstr "``admin``: admin サイトの宣言をチェックします。"

msgid "``async_support``: Checks asynchronous-related configuration."
msgstr "``async_support``: 非同期関連の設定をチェックします。"

msgid "``caches``: Checks cache related configuration."
msgstr "``caches``: キャッシュ関連の設定をチェックします。"

msgid "``compatibility``: Flags potential problems with version upgrades."
msgstr ""
"``compatibility``: バージョンアップに伴う潜在的な問題にフラグを立てます。"

msgid ""
"``database``: Checks database-related configuration issues. Database checks "
"are not run by default because they do more than static code analysis as "
"regular checks do. They are only run by the :djadmin:`migrate` command or if "
"you specify configured database aliases using the ``--database`` option when "
"calling the :djadmin:`check` command."
msgstr ""
"``database``: データベース関連の設定問題をチェックします。データベースチェッ"
"クは通常のチェックのように静的なコード解析以上のことを行うため、デフォルトで"
"は実行されません。 :djadmin:`migrate` コマンドを実行するか、 :djadmin:"
"`check` コマンドを呼び出す際に ``--database`` オプションを使用して設定済みの"
"データベースエイリアスを指定した場合のみ実行されます。"

msgid "``files``: Checks files related configuration."
msgstr "``files``: ファイル関連の設定をチェックします。"

msgid "``models``: Checks of model, field, and manager definitions."
msgstr ""
"``models``: モデル、フィールド、およびマネージャー定義をチェックします。"

msgid "``security``: Checks security related configuration."
msgstr "``security``: セキュリティ関連の設定をチェックします。"

msgid "``signals``: Checks on signal declarations and handler registrations."
msgstr ""
"``signals``: シグナルの宣言とハンドラーの登録に関するチェックを行います。"

msgid "``sites``: Checks :mod:`django.contrib.sites` configuration."
msgstr "``sites``: :mod:`django.contrib.sites` の設定をチェックします。"

msgid ""
"``staticfiles``: Checks :mod:`django.contrib.staticfiles` configuration."
msgstr ""
"``staticfiles``: :mod:`django.contrib.staticfiles` の設定をチェックします。"

msgid "``templates``: Checks template related configuration."
msgstr "``templates``: テンプレート関連の設定をチェックします。"

msgid "``translation``: Checks translation related configuration."
msgstr "``translation``: 翻訳関連の設定をチェックします。"

msgid "``urls``: Checks URL configuration."
msgstr "``urls``: URLの構成をチェックします。"

msgid "Some checks may be registered with multiple tags."
msgstr "いくつかのチェックは複数のタグで登録されていれる可能性があります。"

msgid "Core system checks"
msgstr "コアシステムチェック"

msgid "Asynchronous support"
msgstr "非同期サポート"

msgid "The following checks verify your setup for :doc:`/topics/async`:"
msgstr "以下のチェックは、:doc:`/topics/async` のセットアップを検証します。"

msgid ""
"**async.E001**: You should not set the :envvar:`DJANGO_ALLOW_ASYNC_UNSAFE` "
"environment variable in deployment. This disables :ref:`async safety "
"protection <async-safety>`."
msgstr ""
"**async.E001**: 本番環境では、:envvar:`DJANGO_ALLOW_ASYNC_UNSAFE` 環境変数を"
"設定しないでください。これにより、 :ref:`非同期安全性保護 <async-safety>` が"
"無効になります。"

msgid "Backwards compatibility"
msgstr "後方互換性"

msgid ""
"Compatibility checks warn of potential problems that might occur after "
"upgrading Django."
msgstr ""
"互換性チェックは、Django をアップグレードした後に起こりうる問題を警告します。"

msgid ""
"**2_0.W001**: Your URL pattern ``<pattern>`` has a ``route`` that contains "
"``(?P<``, begins with a ``^``, or ends with a ``$``. This was likely an "
"oversight when migrating from ``url()`` to :func:`~django.urls.path`."
msgstr ""
"**2_0.W001**: URL パターン ``<pattern>`` の ``route`` に ``(?P<`` が含まれて"
"いるか、 ``^`` で始まっているか、 ``$`` で終わっています。おそらく、"
"``url()`` から :func:`~django.urls.path` に移行する際の見落としです。"

msgid ""
"**4_0.E001**: As of Django 4.0, the values in the :setting:"
"`CSRF_TRUSTED_ORIGINS` setting must start with a scheme (usually ``http://`` "
"or ``https://``) but found ``<hostname>``."
msgstr ""
"**4_0.E001**: Django 4.0 では、 :setting:`CSRF_TRUSTED_ORIGINS` 設定の値は通"
"常 ``http://`` や ``https://`` のようなスキームで始まる必要がありますが、"
"``<hostname>`` が見つかりました。"

msgid "Caches"
msgstr "キャッシュ"

msgid ""
"The following checks verify that your :setting:`CACHES` setting is correctly "
"configured:"
msgstr ""
"以下のチェックでは、:setting:`CACHES` 設定が正しく構成されていることを確認し"
"ます："

msgid ""
"**caches.E001**: You must define a ``'default'`` cache in your :setting:"
"`CACHES` setting."
msgstr ""
"**caches.E001**: :setting:`CACHES` 設定で ``'default'`` キャッシュを定義する"
"必要があります。"

msgid ""
"**caches.W002**: Your ``<cache>`` configuration might expose your cache or "
"lead to corruption of your data because its :setting:`LOCATION <CACHES-"
"LOCATION>` matches/is inside/contains :setting:`MEDIA_ROOT`/:setting:"
"`STATIC_ROOT`/:setting:`STATICFILES_DIRS`."
msgstr ""
"**caches.W002**: ``<cache>`` の設定が、キャッシュを公開したりデータの破損を招"
"く可能性があります。なぜなら、その :setting:`LOCATION <CACHES-LOCATION>` が :"
"setting:`MEDIA_ROOT`/:setting:`STATIC_ROOT`/:setting:`STATICFILES_DIRS` と一"
"致するか含まれるからです。"

msgid ""
"**caches.W003**: Your ``<cache>`` cache :setting:`LOCATION <CACHES-"
"LOCATION>` is relative. Use an absolute path instead."
msgstr ""
"**caches.W003**: ``<cache>`` キャッシュの :setting:`LOCATION <CACHES-"
"LOCATION>` が相対パスです。絶対パスを使用してください。"

msgid "Database"
msgstr "データベース"

msgid "MySQL and MariaDB"
msgstr "MySQL と MariaDB"

msgid ""
"If you're using MySQL or MariaDB, the following checks will be performed:"
msgstr "MySQLまたはMariaDBを使用している場合、以下のチェックが行われます："

msgid ""
"**mysql.E001**: MySQL/MariaDB does not allow unique ``CharField``\\s to have "
"a ``max_length`` > 255. *This check was changed to* ``mysql.W003`` *in "
"Django 3.1 as the real maximum size depends on many factors.*"
msgstr ""
"**mysql.E001**: MySQL/MariaDB では、ユニークな ``CharField`` の "
"``max_length`` を 255 より大きくすることはできません。このチェックは、実際の"
"最大サイズが多くの要因に依存するため、Django 3.1 では ``mysql.W003`` に変更さ"
"れました。"

msgid ""
"**mysql.W002**: MySQL/MariaDB Strict Mode is not set for database connection "
"``<alias>``. See also :ref:`mysql-sql-mode`."
msgstr ""
"**mysql.W002**: MySQL/MariaDB Strict Mode がデータベース接続 ``<alias>`` に設"
"定されていません。 :ref:`mysql-sql-mode` も参照してください。"

msgid ""
"**mysql.W003**: MySQL/MariaDB may not allow unique ``CharField``\\s to have "
"a ``max_length`` > 255."
msgstr ""
"**mysql.W003**: MySQL/MariaDBでは、一意な ``CharField`` の ``max_length`` が"
"255を超えることが許可されていない場合があります。"

msgid "Managing files"
msgstr "ファイルの管理"

msgid "The following checks verify your setup for :doc:`/topics/files`:"
msgstr "次のチェックは、 :doc:`/topics/files` の設定を検証します。"

msgid ""
"**files.E001**: The :setting:`FILE_UPLOAD_TEMP_DIR` setting refers to the "
"nonexistent directory ``<path>``."
msgstr ""
"**files.E001**: :setting:`FILE_UPLOAD_TEMP_DIR` 設定は存在しないディレクトリ "
"``<path>`` を参照しています。"

msgid "Model fields"
msgstr "モデルフィールド"

msgid "**fields.E001**: Field names must not end with an underscore."
msgstr "**fields.E001**: フィールド名はアンダースコアで終わってはいけません。"

msgid "**fields.E002**: Field names must not contain ``\"__\"``."
msgstr ""
"**fields.E002**: フィールド名には ``\"__\"`` を含めることはできません。"

msgid ""
"**fields.E003**: ``pk`` is a reserved word that cannot be used as a field "
"name."
msgstr "**fields.E003**: ``pk`` はフィールド名として使用できない予約語です。"

msgid ""
"**fields.E004**: ``choices`` must be a mapping (e.g. a dictionary) or an "
"iterable (e.g. a list or tuple)."
msgstr ""
"**fields.E004**: ``choices`` は、マッピング (例: 辞書) またはイテラブル (例: "
"リストまたはタプル) でなければなりません。"

msgid ""
"**fields.E005**: ``choices`` must be a mapping of actual values to human "
"readable names or an iterable containing ``(actual value, human readable "
"name)`` tuples."
msgstr ""
"**fields.E005**: ``choices`` は実際の値と人間が読める名前のマッピング、また"
"は ``(実際の値, 人間が読める名前)`` タプルを含むイテラブルでなければなりませ"
"ん。"

msgid "**fields.E006**: ``db_index`` must be ``None``, ``True`` or ``False``."
msgstr ""
"**fields.E006**: ``db_index`` は ``None``、``True``、``False`` のいずれかでな"
"ければいけません。"

msgid "**fields.E007**: Primary keys must not have ``null=True``."
msgstr "**fields.E007**: 主キーは ``null=True`` を持ってはいけません。"

msgid "**fields.E008**: All ``validators`` must be callable."
msgstr ""
"**fields.E008**: すべての ``validators`` は呼び出し可能オブジェクトでなければ"
"なりません。"

msgid ""
"**fields.E009**: ``max_length`` is too small to fit the longest value in "
"``choices`` (``<count>`` characters)."
msgstr ""
"**fields.E009**: ``max_length`` が小さすぎて ``choices`` の最長の値 "
"(``<count>`` 文字) を収めることができません。"

msgid ""
"**fields.E010**: ``<field>`` default should be a callable instead of an "
"instance so that it's not shared between all field instances."
msgstr ""
"**fields.E010**: すべてのフィールドインスタンス間で共有されないように、"
"``<field>`` のデフォルトはインスタンスではなく呼び出し可能オブジェクトである"
"べきです。"

msgid ""
"**fields.E011**: ``<database>`` does not support default database values "
"with expressions (``db_default``)."
msgstr ""
"**fields.E011**: ``<database>`` は式 (``db_default``) を使ったデフォルトの"
"データベース値をサポートしていません。"

msgid "**fields.E012**: ``<expression>`` cannot be used in ``db_default``."
msgstr ""
"**fields.E012**: ``<expression>`` は ``db_default`` では使用できません。"

msgid "**fields.E100**: ``AutoField``\\s must set primary_key=True."
msgstr ""
"**fields.E100**: ``AutoField`` は primary_key=True を設定する必要があります。"

msgid ""
"**fields.E110**: ``BooleanField``\\s do not accept null values. *This check "
"appeared before support for null values was added in Django 2.1.*"
msgstr ""
"**fields.E110**: ``BooleanField`` はnull値を受け付けません。 *このチェック"
"は、Django 2.1でnull値をサポートする前に追加されました。*"

msgid ""
"**fields.E120**: ``CharField``\\s must define a ``max_length`` attribute."
msgstr ""
"**fields.E120**: ``CharField`` の場合、``max_length`` 属性を定義する必要があ"
"ります。"

msgid "**fields.E121**: ``max_length`` must be a positive integer."
msgstr "**fields.E121**: ``max_length`` は正の整数でなければなりません。"

msgid ""
"**fields.W122**: ``max_length`` is ignored when used with ``<integer field "
"type>``."
msgstr ""
"**fields.W122**: ``max_length`` は ``<integer field type>`` と一緒に使用した"
"場合、無視されます。"

msgid ""
"**fields.E130**: ``DecimalField``\\s must define a ``decimal_places`` "
"attribute."
msgstr ""
"**fields.E130**: ``DecimalField`` は ``decimal_places`` 属性を定義しなければ"
"なりません。"

msgid "**fields.E131**: ``decimal_places`` must be a non-negative integer."
msgstr "**fields.E131**: ``decimal_places`` は非負の整数でなければなりません。"

msgid ""
"**fields.E132**: ``DecimalField``\\s must define a ``max_digits`` attribute."
msgstr ""
"**fields.E132**: ``DecimalField`` は ``max_digits`` 属性を定義する必要があり"
"ます。"

msgid "**fields.E133**: ``max_digits`` must be a positive integer."
msgstr "**fields.E133**: ``max_digits`` は正の整数でなければなりません。"

msgid ""
"**fields.E134**: ``max_digits`` must be greater or equal to "
"``decimal_places``."
msgstr ""
"**fields.E134**: ``max_digits`` は ``decimal_places`` 以上でなければなりませ"
"ん。"

msgid ""
"**fields.E140**: ``FilePathField``\\s must have either ``allow_files`` or "
"``allow_folders`` set to True."
msgstr ""
"**fields.E140**: ``FilePathField`` は ``allow_files`` または "
"``allow_folders`` のどちらかを True に設定する必要があります。"

msgid ""
"**fields.E150**: ``GenericIPAddressField``\\s cannot have ``blank=True`` if "
"``null=False``, as blank values are stored as nulls."
msgstr ""
"**fields.E150**: ``GenericIPAddressField`` は ``null=False`` の場合 "
"``blank=True`` にすることはできません。空白の値は null として保存されるためで"
"す。"

msgid ""
"**fields.E160**: The options ``auto_now``, ``auto_now_add``, and ``default`` "
"are mutually exclusive. Only one of these options may be present."
msgstr ""
"**fields.E160**: ``auto_now``、``auto_now_add``、``default`` オプションは互い"
"に排他的です。これらのオプションは1つしか指定できません。"

msgid "**fields.W161**: Fixed default value provided."
msgstr "**fields.W161**: 固定のデフォルト値が提供されました。"

msgid ""
"**fields.W162**: ``<database>`` does not support a database index on "
"``<field data type>`` columns."
msgstr ""
"**fields.W162**: ``<database>`` は ``<field data type>`` カラムにデータベース"
"インデックスをサポートしていません。"

msgid ""
"**fields.W163**: ``<database>`` does not support comments on columns "
"(``db_comment``)."
msgstr ""
"**fields.W163**: ``<database>`` では、列にコメント (``db_comment``) をサポー"
"トしていません。"

msgid ""
"**fields.E170**: ``BinaryField``’s ``default`` cannot be a string. Use bytes "
"content instead."
msgstr ""
"**fields.E170**: ``BinaryField`` の ``default`` に文字列を使用することはでき"
"ません。代わりにバイトコンテンツを使用してください。"

msgid "**fields.E180**: ``<database>`` does not support ``JSONField``\\s."
msgstr ""
"**fields.E180**: ``<database>`` は ``JSONField`` をサポートしていません。"

msgid ""
"**fields.E190**: ``<database>`` does not support a database collation on "
"``<field_type>``\\s."
msgstr ""
"**fields.E190**: ``<database>`` は ``<field_type>`` のデータベース照合順序 "
"(collation) をサポートしていません。"

msgid "**fields.E220**: ``<database>`` does not support ``GeneratedField``\\s."
msgstr ""
"**fields.E220**: ``<database>`` は ``GeneratedField`` をサポートしていませ"
"ん。"

msgid ""
"**fields.E221**: ``<database>`` does not support non-persisted "
"``GeneratedField``\\s."
msgstr ""
"**fields.E221**: ``<database>`` は永続化されていない ``GeneratedField`` をサ"
"ポートしていません。"

msgid ""
"**fields.E222**: ``<database>`` does not support persisted "
"``GeneratedField``\\s."
msgstr ""
"**fields.E222**: ``<database>`` は永続 ``GeneratedField`` をサポートしていま"
"せん。"

msgid "**fields.E223**: ``GeneratedField.output_field`` has errors: ..."
msgstr ""
"**fields.E223**: ``GeneratedField.output_field`` に次のエラーがあります: ..."

msgid "**fields.W224**: ``GeneratedField.output_field`` has warnings: ..."
msgstr ""
"**fields.W224**: ``GeneratedField.output_field`` に次の警告があります: ..."

msgid ""
"**fields.E900**: ``IPAddressField`` has been removed except for support in "
"historical migrations."
msgstr ""
"**fields.E900**: ``IPAddressField`` は、履歴マイグレーションのサポートのため"
"に削除されました。"

msgid ""
"**fields.W900**: ``IPAddressField`` has been deprecated. Support for it "
"(except in historical migrations) will be removed in Django 1.9. *This check "
"appeared in Django 1.7 and 1.8*."
msgstr ""
"**fields.W900**: ``IPAddressField`` は非推奨になりました。このフィールドのサ"
"ポートは (履歴マイグレーションを除いて) Django 1.9 で削除されます。 *この"
"チェックは Django 1.7 と 1.8 で登場しました。*"

msgid ""
"**fields.W901**: ``CommaSeparatedIntegerField`` has been deprecated. Support "
"for it (except in historical migrations) will be removed in Django 2.0. "
"*This check appeared in Django 1.10 and 1.11*."
msgstr ""
"**fields.W901**: ``CommaSeparatedIntegerField`` は非推奨になりました。Django "
"2.0 では (履歴マイグレーションを除いて) サポートがなくなります。 *このチェッ"
"クは Django 1.10 と 1.11 で登場しました。*"

msgid ""
"**fields.E901**: ``CommaSeparatedIntegerField`` is removed except for "
"support in historical migrations."
msgstr ""
"**fields.E901**: ``CommaSeparatedIntegerField`` は履歴マイグレーションでのサ"
"ポートを除いて削除されました。"

msgid ""
"**fields.W902**: ``FloatRangeField`` is deprecated and will be removed in "
"Django 3.1. *This check appeared in Django 2.2 and 3.0*."
msgstr ""
"**fields.W902**: ``FloatRangeField`` は非推奨で、Django 3.1 で削除されます。 "
"*このチェックは Django 2.2 と 3.0 で登場しました。*"

msgid ""
"**fields.W903**: ``NullBooleanField`` is deprecated. Support for it (except "
"in historical migrations) will be removed in Django 4.0. *This check "
"appeared in Django 3.1 and 3.2*."
msgstr ""
"**fields.W903**: ``NullBooleanField`` は非推奨です。Django 4.0 で (履歴マイグ"
"レーションを除いて) サポートが削除されます。 *このチェックは Django 3.1 およ"
"び 3.2 で登場しました。*"

msgid ""
"**fields.E903**: ``NullBooleanField`` is removed except for support in "
"historical migrations."
msgstr ""
"**fields.E903**: ``NullBooleanField`` は、履歴マイグレーションのサポートのた"
"めに削除されました。"

msgid ""
"**fields.W904**: ``django.contrib.postgres.fields.JSONField`` is deprecated. "
"Support for it (except in historical migrations) will be removed in Django "
"4.0. *This check appeared in Django 3.1 and 3.2*."
msgstr ""
"**fields.W904**: ``django.contrib.postgres.fields.JSONField`` は非推奨です。"
"Django 4.0 では (履歴マイグレーションを除いて) サポートがなくなります。*この"
"チェックは Django 3.1 と 3.2 で登場しました。*"

msgid ""
"**fields.E904**: ``django.contrib.postgres.fields.JSONField`` is removed "
"except for support in historical migrations."
msgstr ""
"**fields.E904**: ``django.contrib.postgres.fields.JSONField`` は履歴マイグ"
"レーションでのサポートを除いて削除されました。"

msgid ""
"**fields.W905**: ``django.contrib.postgres.fields.CICharField`` is "
"deprecated. Support for it (except in historical migrations) will be removed "
"in Django 5.1."
msgstr ""
"**fields.W905**: ``django.contrib.postgres.fields.CICharField`` は非推奨で"
"す。履歴マイグレーションを除いて、Django 5.1 でサポートが削除されます。"

msgid ""
"**fields.W906**: ``django.contrib.postgres.fields.CIEmailField`` is "
"deprecated. Support for it (except in historical migrations) will be removed "
"in Django 5.1."
msgstr ""
"**fields.W906**: ``django.contrib.postgres.fields.CIEmailField`` は非推奨で"
"す。Django 5.1 では、このフィールドのサポート (履歴マイグレーション以外) が削"
"除されます。"

msgid ""
"**fields.W907**: ``django.contrib.postgres.fields.CITextField`` is "
"deprecated. Support for it (except in historical migrations) will be removed "
"in Django 5.1."
msgstr ""
"**fields.W907**: ``django.contrib.postgres.fields.CITextField`` は非推奨で"
"す。Django 5.1 では (履歴マイグレーションを除いて) サポートが削除されます。"

msgid "File fields"
msgstr "ファイルフィールド"

msgid ""
"**fields.E200**: ``unique`` is not a valid argument for a ``FileField``. "
"*This check is removed in Django 1.11*."
msgstr ""
"**fields.E200**: ``unique`` は ``FileField`` の有効な引数ではありません。 *こ"
"のチェックは Django 1.11 で削除されました* 。"

msgid ""
"**fields.E201**: ``primary_key`` is not a valid argument for a ``FileField``."
msgstr ""
"**fields.E201**: ``primary_key`` は ``FileField`` に対して有効な引数ではあり"
"ません。"

msgid ""
"**fields.E202**: ``FileField``’s ``upload_to`` argument must be a relative "
"path, not an absolute path."
msgstr ""
"**fields.E202**: ``FileField`` の ``upload_to`` 引数は絶対パスではなく、相対"
"パスでなければなりません。"

msgid ""
"**fields.E210**: Cannot use ``ImageField`` because Pillow is not installed."
msgstr ""
"**fields.E210**: Pillow がインストールされていないため、``ImageField`` を使用"
"できません。"

msgid "Related fields"
msgstr "関連フィールド"

msgid ""
"**fields.E300**: Field defines a relation with model ``<model>``, which is "
"either not installed, or is abstract."
msgstr ""
"**fields.E300**: フィールドはモデル ``<model>`` とのリレーションを定義してい"
"ますが、そのモデルはインストールされていないか、抽象です。"

msgid ""
"**fields.E301**: Field defines a relation with the model ``<app_label>."
"<model>`` which has been swapped out."
msgstr ""
"**fields.E301**: フィールドは、スワップアウトされたモデル ``<app_label>."
"<model>`` とのリレーションを定義しています。"

msgid ""
"**fields.E302**: Reverse accessor ``<related model>.<accessor name>`` for "
"``<app_label>.<model>.<field name>`` clashes with field name ``<app_label>."
"<model>.<field name>``."
msgstr ""
"**fields.E302**: ``<app_label>.<model>.<field name>`` の逆アクセサ "
"``<related model>.<accessor name>`` はフィールド名 ``<app_label>.<model>."
"<field name>`` と衝突します。"

msgid ""
"**fields.E303**: Reverse query name for ``<app_label>.<model>.<field name>`` "
"clashes with field name ``<app_label>.<model>.<field name>``."
msgstr ""
"**fields.E303**: ``<app_label>.<model>.<field name>`` の逆引きクエリ名が "
"``<app_label>.<model>.<field name>`` のフィールド名と衝突しています。"

msgid ""
"**fields.E304**: Reverse accessor ``<related model>.<accessor name>`` for "
"``<app_label>.<model>.<field name>`` clashes with reverse accessor for "
"``<app_label>.<model>.<field name>``."
msgstr ""
"**fields.E304**: 逆アクセサ ``<related model>.<accessor name>`` が "
"``<app_label>.<model>.<field name>`` の逆アクセサと衝突しています。"

msgid ""
"**fields.E305**: Reverse query name for ``<app_label>.<model>.<field name>`` "
"clashes with reverse query name for ``<app_label>.<model>.<field name>``."
msgstr ""
"**fields.E305**: ``<app_label>.<model>.<field name>`` の逆引きクエリ名が "
"``<app_label>.<model>.<field name>`` の逆引きクエリ名と衝突しました。"

msgid ""
"**fields.E306**: The name ``<name>`` is invalid ``related_name`` for field "
"``<model>.<field name>``."
msgstr ""
"**fields.E306**: 名前 ``<name>`` はフィールド ``<model>.<field name>`` の "
"``related_name`` として無効です。"

msgid ""
"**fields.E307**: The field ``<app label>.<model>.<field name>`` was declared "
"with a lazy reference to ``<app label>.<model>``, but app ``<app label>`` "
"isn't installed or doesn't provide model ``<model>``."
msgstr ""
"**fields.E307**: フィールド ``<app label>.<model>.<field name>`` は ``<app "
"label>.<model>`` への遅延参照で宣言されましたが、アプリ ``<app label>`` がイ"
"ンストールされていないか、モデル ``<model>`` を提供していません。"

msgid ""
"**fields.E308**: Reverse query name ``<related query name>`` must not end "
"with an underscore."
msgstr ""
"**fields.E308**: 逆引きクエリ名 ``<related query name>`` はアンダースコアで終"
"わってはいけません。"

msgid ""
"**fields.E309**: Reverse query name ``<related query name>`` must not "
"contain ``'__'``."
msgstr ""
"**fields.E309**: 逆向きクエリ名 ``<related query name>`` には ``'__'`` を含め"
"ることはできません。"

msgid ""
"**fields.E310**: No subset of the fields ``<field1>``, ``<field2>``, ... on "
"model ``<model>`` is unique."
msgstr ""
"**fields.E310**: モデル ``<model>`` におけるフィールド ``<field1>``, "
"``<field2>``, ... のいずれのサブセットも一意ではありません。"

msgid ""
"**fields.E311**: ``<model>.<field name>`` must be unique because it is "
"referenced by a ``ForeignKey``."
msgstr ""
"**fields.E311**: ``<model>.<field name>`` は ``ForeignKey`` によって参照され"
"ているため、一意でなければなりません。"

msgid ""
"**fields.E312**: The ``to_field`` ``<field name>`` doesn't exist on the "
"related model ``<app label>.<model>``."
msgstr ""
"**fields.E312**: リレーション先モデル ``<app label>.<model>`` に存在しない "
"``to_field`` ``<field name>`` です。"

msgid ""
"**fields.E320**: Field specifies ``on_delete=SET_NULL``, but cannot be null."
msgstr ""
"**fields.E320**: フィールドは ``on_delete=SET_NULL`` を指定していますが、"
"null にはできません。"

msgid ""
"**fields.E321**: The field specifies ``on_delete=SET_DEFAULT``, but has no "
"default value."
msgstr ""
"**fields.E321**: フィールドには ``on_delete=SET_DEFAULT`` が指定されています"
"が、デフォルト値がありません。"

msgid "**fields.E330**: ``ManyToManyField``\\s cannot be unique."
msgstr ""
"**fields.E330**: ``ManyToManyField`` をユニークにすることはできません。"

msgid ""
"**fields.E331**: Field specifies a many-to-many relation through model "
"``<model>``, which has not been installed."
msgstr ""
"**fields.E331**: フィールドは、インストールされていないモデル ``<model>`` を"
"介した多対多のリレーションを指定しています。"

msgid ""
"**fields.E332**: Many-to-many fields with intermediate tables must not be "
"symmetrical. *This check appeared before Django 3.0.*"
msgstr ""
"**fields.E332**: 中間テーブルを持つ多対多のフィールドは対称であってはいけませ"
"ん。 *このチェックは Django 3.0. 以前にもありました。*"

msgid ""
"**fields.E333**: The model is used as an intermediate model by ``<model>``, "
"but it has more than two foreign keys to ``<model>``, which is ambiguous. "
"You must specify which two foreign keys Django should use via the "
"``through_fields`` keyword argument."
msgstr ""
"**fields.E333**: このモデルは ``<model>`` の中間モデルとして使われますが、 "
"``<model>`` への外部キーが 2 つ以上あり、曖昧です。キーワード引数 "
"``through_fields`` を使って、 Django がどの外部キーを使うかを指定しなければな"
"りません。"

msgid ""
"**fields.E334**: The model is used as an intermediate model by ``<model>``, "
"but it has more than one foreign key from ``<model>``, which is ambiguous. "
"You must specify which foreign key Django should use via the "
"``through_fields`` keyword argument."
msgstr ""
"**fields.E334**: このモデルは ``<model>`` によって中間モデルとして使われます"
"が、 ``<model>`` からの外部キーが複数あり、曖昧です。キーワード引数 "
"``through_fields`` を使って、 Django がどの外部キーを使うかを指定する必要があ"
"ります。"

msgid ""
"**fields.E335**: The model is used as an intermediate model by ``<model>``, "
"but it has more than one foreign key to ``<model>``, which is ambiguous. You "
"must specify which foreign key Django should use via the ``through_fields`` "
"keyword argument."
msgstr ""
"**fields.E335**: このモデルは ``<model>`` の中間モデルとして使われています"
"が、 ``<model>`` への外部キーが複数あり、曖昧です。キーワード引数 "
"``through_fields`` を使って、 Django がどの外部キーを使うかを指定する必要があ"
"ります。"

msgid ""
"**fields.E336**: The model is used as an intermediary model by ``<model>``, "
"but it does not have foreign key to ``<model>`` or ``<model>``."
msgstr ""
"**fields.E336**: モデルは ``<model>`` の中間モデルとして使用されていますが、 "
"``<model>`` または ``<model>`` への外部キーを持っていません。"

msgid ""
"**fields.E337**: Field specifies ``through_fields`` but does not provide the "
"names of the two link fields that should be used for the relation through "
"``<model>``."
msgstr ""
"**fields.E337**: フィールドは ``through_fields`` を指定していますが、"
"``<model>`` を介したリレーションに使用する 2 つのリンクフィールドの名前を指定"
"していません。"

msgid ""
"**fields.E338**: The intermediary model ``<through model>`` has no field "
"``<field name>``."
msgstr ""
"**fields.E338**: 中間モデル ``<through model>`` に ``<field name>`` という"
"フィールドがありません。"

msgid ""
"**fields.E339**: ``<model>.<field name>`` is not a foreign key to "
"``<model>``."
msgstr ""
"**fields.E339**: ``<model>.<field name>`` は ``<model>`` の外部キーではありま"
"せん。"

msgid ""
"**fields.E340**: The field's intermediary table ``<table name>`` clashes "
"with the table name of ``<model>``/``<model>.<field name>``."
msgstr ""
"**fields.E340**: フィールドの中間テーブル ``<table name>`` が、 ``<model>``/"
"``<model>.<field name>`` のテーブル名と衝突しています。"

msgid "**fields.W340**: ``null`` has no effect on ``ManyToManyField``."
msgstr "**fields.W340**: ``null`` は ``ManyToManyField`` には影響しません。"

msgid "**fields.W341**: ``ManyToManyField`` does not support ``validators``."
msgstr ""
"**fields.W341**: ``ManyToManyField`` は ``validators`` をサポートしていませ"
"ん。"

msgid ""
"**fields.W342**: Setting ``unique=True`` on a ``ForeignKey`` has the same "
"effect as using a ``OneToOneField``."
msgstr ""
"**fields.W342**: ``ForeignKey`` に ``unique=True`` を設定すると、"
"``OneToOneField`` を使用したのと同じ効果があります。"

msgid ""
"**fields.W343**: ``limit_choices_to`` has no effect on ``ManyToManyField`` "
"with a ``through`` model. *This check appeared before Django 4.0.*"
msgstr ""
"**fields.W343**: ``limit_choices_to`` は ``through`` モデルを持つ "
"``ManyToManyField`` には影響しません。 *このチェックは Django 4.0 より前に登"
"場しました。*"

msgid ""
"**fields.W344**: The field's intermediary table ``<table name>`` clashes "
"with the table name of ``<model>``/``<model>.<field name>``."
msgstr ""
"**fields.W344**: フィールドの中間テーブル ``<table name>`` が ``<model>``/"
"``<model>.<field name>`` のテーブル名と衝突しています。"

msgid ""
"**fields.W345**: ``related_name`` has no effect on ``ManyToManyField`` with "
"a symmetrical relationship, e.g. to \"self\"."
msgstr ""
"**fields.W345**: ``related_name`` は、\"self\" のような対称なリレーションシッ"
"プを持つ ``ManyToManyField`` に対しては効果がありません。"

msgid "**fields.W346**: ``db_comment`` has no effect on ``ManyToManyField``."
msgstr ""
"**fields.W346**: ``db_comment`` は ``ManyToManyField`` に影響を与えません。"

msgid "Models"
msgstr "モデル"

msgid ""
"**models.E001**: ``<swappable>`` is not of the form ``app_label.app_name``."
msgstr ""
"**models.E001**: ``<swappable>`` が ``app_label.app_name`` の形式ではありませ"
"ん。"

msgid ""
"**models.E002**: ``<SETTING>`` references ``<model>``, which has not been "
"installed, or is abstract."
msgstr ""
"**models.E002**: ``<SETTING>`` は ``<model>`` を参照していますが、インストー"
"ルされていないか抽象的です。"

msgid ""
"**models.E003**: The model has two identical many-to-many relations through "
"the intermediate model ``<app_label>.<model>``."
msgstr ""
"**models.E003**: モデルには、中間モデル ``<app_label>.<model>`` を介した同一"
"の多対多のリレーションが 2 つあります。"

msgid ""
"**models.E004**: ``id`` can only be used as a field name if the field also "
"sets ``primary_key=True``."
msgstr ""
"**models.E004**: ``id`` はフィールドに ``primary_key=True`` を設定している場"
"合のみフィールド名として使用できます。"

msgid ""
"**models.E005**: The field ``<field name>`` from parent model ``<model>`` "
"clashes with the field ``<field name>`` from parent model ``<model>``."
msgstr ""
"**models.E005**: 親モデル ``<model>`` のフィールド ``<field name>`` は、親モ"
"デル ``<model>`` のフィールド ``<field name>`` と衝突します。"

msgid ""
"**models.E006**: The field ``<field name>`` clashes with the field ``<field "
"name>`` from model ``<model>``."
msgstr ""
"**models.E006**: フィールド ``<field name>`` はモデル ``<model>`` のフィール"
"ド ``<field name>`` と衝突しています。"

msgid ""
"**models.E007**: Field ``<field name>`` has column name ``<column name>`` "
"that is used by another field."
msgstr ""
"**models.E007**: フィールド ``<field name>`` は他のフィールドで使用されている"
"列名 ``<column name>`` を持っています。"

msgid "**models.E008**: ``index_together`` must be a list or tuple."
msgstr ""
"**models.E008**: ``index_together`` はリストまたはタプルでなければなりませ"
"ん。"

msgid ""
"**models.E009**: All ``index_together`` elements must be lists or tuples."
msgstr ""
"**models.E009**: すべての ``index_together`` 要素はリストまたはタプルでなけれ"
"ばなりません。"

msgid "**models.E010**: ``unique_together`` must be a list or tuple."
msgstr ""
"**models.E010**: ``unique_together`` はリストまたはタプルでなければなりませ"
"ん。"

msgid ""
"**models.E011**: All ``unique_together`` elements must be lists or tuples."
msgstr ""
"**models.E011**: すべての ``unique_together`` 要素はリストまたはタプルでなけ"
"ればなりません。"

msgid ""
"**models.E012**: ``constraints/indexes/index_together/unique_together`` "
"refers to the nonexistent field ``<field name>``."
msgstr ""
"**models.E012**: ``constraints/indexes/index_together/unique_together`` は存"
"在しないフィールド ``<field name>`` を参照しています。"

msgid ""
"**models.E013**: ``constraints/indexes/index_together/unique_together`` "
"refers to a ``ManyToManyField`` ``<field name>``, but ``ManyToManyField``\\s "
"are not supported for that option."
msgstr ""
"**models.E013**: ``constraints/indexes/index_together/unique_together`` は "
"``ManyToManyField`` ``<field name>`` を参照していますが、``ManyToManyField`` "
"はそのオプションでサポートされていません。"

msgid ""
"**models.E014**: ``ordering`` must be a tuple or list (even if you want to "
"order by only one field)."
msgstr ""
"**models.E014**: ``ordering`` はタプルかリストでなければなりません (1つの"
"フィールドだけで並び替えたい場合でも) 。"

msgid ""
"**models.E015**: ``ordering`` refers to the nonexistent field, related "
"field, or lookup ``<field name>``."
msgstr ""
"**models.E015**: ``ordering`` は存在しないフィールド、リレーション先フィール"
"ド、またはルックアップ ``<field name>`` を指しています。"

msgid ""
"**models.E016**: ``constraints/indexes/index_together/unique_together`` "
"refers to field ``<field_name>`` which is not local to model ``<model>``."
msgstr ""
"**models.E016**: ``constraints/indexes/index_together/unique_together`` は、"
"モデル ``<model>`` に属していないフィールド ``<field_name>`` を参照していま"
"す。"

msgid "**models.E017**: Proxy model ``<model>`` contains model fields."
msgstr ""
"**models.E017**: プロキシモデル ``<model>`` にモデルのフィールドが含まれてい"
"ます。"

msgid ""
"**models.E018**: Autogenerated column name too long for field ``<field>``. "
"Maximum length is ``<maximum length>`` for database ``<alias>``."
msgstr ""
"**models.E018**: フィールド ``<field>`` に対して自動生成される列名が長すぎま"
"す。データベース ``<alias>`` の最大長は ``<maximum length>`` です。"

msgid ""
"**models.E019**: Autogenerated column name too long for M2M field ``<M2M "
"field>``. Maximum length is ``<maximum length>`` for database ``<alias>``."
msgstr ""
"**models.E019**: M2M フィールド ``<M2M field>`` に対して自動生成されるカラム"
"名が長すぎます。データベース ``<alias>`` の最大長は ``<maximum length>`` で"
"す。"

msgid ""
"**models.E020**: The ``<model>.check()`` class method is currently "
"overridden."
msgstr ""
"**models.E020**: ``<model>.check()`` クラスメソッドは現在オーバーライドされて"
"います。"

msgid ""
"**models.E021**: ``ordering`` and ``order_with_respect_to`` cannot be used "
"together."
msgstr ""
"**models.E021**: ``ordering`` と ``order_with_respect_to`` は同時に使用できま"
"せん。"

msgid ""
"**models.E022**: ``<function>`` contains a lazy reference to ``<app label>."
"<model>``, but app ``<app label>`` isn't installed or doesn't provide model "
"``<model>``."
msgstr ""
"**models.E022**: ``<function>`` は ``<app label>.<model>`` への遅延参照を含ん"
"でいますが、アプリ ``<app label>`` がインストールされていないか、モデル "
"``<model>`` を提供していません。"

msgid ""
"**models.E023**: The model name ``<model>`` cannot start or end with an "
"underscore as it collides with the query lookup syntax."
msgstr ""
"**models.E023**: モデル名 ``<model>`` はアンダースコアで始まるか終わることは"
"できません。これはクエリルックアップの構文と衝突するためです。"

msgid ""
"**models.E024**: The model name ``<model>`` cannot contain double "
"underscores as it collides with the query lookup syntax."
msgstr ""
"**models.E024**: モデル名 ``<model>`` には2重のアンダースコアを含めることはで"
"きません。これはクエリルックアップの構文と衝突するためです。"

msgid ""
"**models.E025**: The property ``<property name>`` clashes with a related "
"field accessor."
msgstr ""
"**models.E025**: プロパティ ``<property name>`` はリレーション先フィールドの"
"アクセサと衝突します。"

msgid ""
"**models.E026**: The model cannot have more than one field with "
"``primary_key=True``."
msgstr ""
"**models.E026**: モデルは ``primary_key=True`` を持つフィールドを複数持つこと"
"はできません。"

msgid "**models.W027**: ``<database>`` does not support check constraints."
msgstr ""
"**models.W027**: ``<database>`` ではチェック制約がサポートされていません。"

msgid ""
"**models.E028**: ``db_table`` ``<db_table>`` is used by multiple models: "
"``<model list>``."
msgstr ""
"**models.E028**: ``db_table`` ``<db_table>`` は複数のモデルで使用されていま"
"す: ``<model list>`` 。"

msgid ""
"**models.E029**: index name ``<index>`` is not unique for model ``<model>``."
msgstr ""
"**models.E029**: インデックス名 ``<index>`` がモデル ``<model>`` で一意ではあ"
"りません。"

msgid ""
"**models.E030**: index name ``<index>`` is not unique among models: ``<model "
"list>``."
msgstr ""
"**models.E030**: インデックス名 ``<index>`` はモデルの中で一意ではありませ"
"ん: ``<model list>`` 。"

msgid ""
"**models.E031**: constraint name ``<constraint>`` is not unique for model "
"``<model>``."
msgstr ""
"**models.E031**: モデル ``<model>`` に対して制約名 ``<constraint>`` が一意で"
"はありません。"

msgid ""
"**models.E032**: constraint name ``<constraint>`` is not unique among "
"models: ``<model list>``."
msgstr ""
"**models.E032**: 制約名 ``<constraint>`` は、モデル間で一意ではありません: "
"``<model list>`` 。"

msgid ""
"**models.E033**: The index name ``<index>`` cannot start with an underscore "
"or a number."
msgstr ""
"**models.E033**: インデックス名 ``<index>`` はアンダースコアまたは数字で始め"
"ることはできません。"

msgid ""
"**models.E034**: The index name ``<index>`` cannot be longer than "
"``<max_length>`` characters."
msgstr ""
"**models.E034**: インデックス名 ``<index>`` は ``<max_length>`` 文字を超える"
"ことはできません。"

msgid ""
"**models.W035**: ``db_table`` ``<db_table>`` is used by multiple models: "
"``<model list>``."
msgstr ""
"**models.W035**: ``db_table`` ``<db_table>`` は複数のモデルで使用されていま"
"す: ``<model list>`` 。"

msgid ""
"**models.W036**: ``<database>`` does not support unique constraints with "
"conditions."
msgstr ""
"**models.W036**: ``<database>`` は条件付きのユニーク制約をサポートしていませ"
"ん。"

msgid ""
"**models.W037**: ``<database>`` does not support indexes with conditions."
msgstr ""
"**models.W037**: ``<database>`` では条件付きインデックスをサポートしていませ"
"ん。"

msgid ""
"**models.W038**: ``<database>`` does not support deferrable unique "
"constraints."
msgstr ""
"**models.W038**: ``<database>`` は、遅延可能 (deferrable) なユニーク制約をサ"
"ポートしていません。"

msgid ""
"**models.W039**: ``<database>`` does not support unique constraints with non-"
"key columns."
msgstr ""
"**models.W039**: ``<database>`` は、非キーカラムでのユニーク制約をサポートし"
"ていません。"

msgid ""
"**models.W040**: ``<database>`` does not support indexes with non-key "
"columns."
msgstr ""
"**models.W040**: ``<database>`` は、非キーカラムを持つインデックスをサポート"
"していません。"

msgid ""
"**models.E041**: ``constraints`` refers to the joined field ``<field name>``."
msgstr ""
"**models.E041**: ``constraints`` は、結合されたフィールド ``<field name>`` を"
"参照しています。"

msgid ""
"**models.W042**: Auto-created primary key used when not defining a primary "
"key type, by default ``django.db.models.AutoField``."
msgstr ""
"**models.W042**: 主キーの型を定義していないときは、自動作成の主キーが使用され"
"ます。デフォルトで ``django.db.models.AutoField`` です。"

msgid ""
"**models.W043**: ``<database>`` does not support indexes on expressions."
msgstr ""
"**models.W043**: ``<database>`` は式のインデックスをサポートしていません。"

msgid ""
"**models.W044**: ``<database>`` does not support unique constraints on "
"expressions."
msgstr ""
"**models.W044**: ``<database>`` は式に対するユニーク制約をサポートしていませ"
"ん。"

msgid ""
"**models.W045**: Check constraint ``<constraint>`` contains ``RawSQL()`` "
"expression and won't be validated during the model ``full_clean()``."
msgstr ""
"**models.W045**: チェック制約 ``<constraint>`` に ``RawSQL()`` 式が含まれてい"
"るため、この制約はモデルの ``full_clean()`` 実行中には検証されません。"

msgid ""
"**models.W046**: ``<database>`` does not support comments on tables "
"(``db_table_comment``)."
msgstr ""
"**models.W046**: ``<database>`` はテーブルにコメント(``db_table_comment``) を"
"サポートしていません。"

msgid ""
"**models.W047**: ``<database>`` does not support unique constraints with "
"nulls distinct."
msgstr ""
"**models.W047**: ``<database>`` はNULLを含むユニーク制約をサポートしていませ"
"ん。"

msgid "Security"
msgstr "セキュリティ"

msgid ""
"The security checks do not make your site secure. They do not audit code, do "
"intrusion detection, or do anything particularly complex. Rather, they help "
"perform an automated, low-hanging-fruit checklist, that can help you to "
"improve your site's security."
msgstr ""
"セキュリティチェックはサイトを安全にするものではありません。コードの監査や侵"
"入検知など、特に複雑な処理も行いません。その代わり、自動化された、簡単な"
"チェックリストを実行して、サイトのセキュリティを向上させるのに役立ちます。"

msgid ""
"Some of these checks may not be appropriate for your particular deployment "
"configuration. For instance, if you do your HTTP to HTTPS redirection in a "
"load balancer, it'd be irritating to be constantly warned about not having "
"enabled :setting:`SECURE_SSL_REDIRECT`. Use :setting:"
"`SILENCED_SYSTEM_CHECKS` to silence unneeded checks."
msgstr ""
"これらのチェックの中には、特定のデプロイメント構成に適切でないものもあるかも"
"しれません。たとえば、HTTPからHTTPSへのリダイレクトをロードバランサーで行って"
"いる場合、 :setting:`SECURE_SSL_REDIRECT` が有効になっていないと常に警告され"
"るのはイライラするでしょう。 :setting:`SILENCED_SYSTEM_CHECKS` を使って、不要"
"なチェックを行わないようにしましょう。"

msgid ""
"The following checks are run if you use the :option:`check --deploy` option:"
msgstr ""
":option:`check --deploy` オプションを使用すると、以下のチェックが実行されま"
"す:"

msgid ""
"**security.W001**: You do not have :class:`django.middleware.security."
"SecurityMiddleware` in your :setting:`MIDDLEWARE` so the :setting:"
"`SECURE_HSTS_SECONDS`, :setting:`SECURE_CONTENT_TYPE_NOSNIFF`, :setting:"
"`SECURE_REFERRER_POLICY`, :setting:`SECURE_CROSS_ORIGIN_OPENER_POLICY`, and :"
"setting:`SECURE_SSL_REDIRECT` settings will have no effect."
msgstr ""
"**security.W001**: :setting:`MIDDLEWARE` に :class:`django.middleware."
"security.SecurityMiddleware` がないため、:setting:`SECURE_HSTS_SECONDS`, :"
"setting:`SECURE_CONTENT_TYPE_NOSNIFF`, :setting:`SECURE_REFERRER_POLICY`, :"
"setting:`SECURE_CROSS_ORIGIN_OPENER_POLICY`, および :setting:"
"`SECURE_SSL_REDIRECT` の設定に効果がありません。"

msgid ""
"**security.W002**: You do not have :class:`django.middleware.clickjacking."
"XFrameOptionsMiddleware` in your :setting:`MIDDLEWARE`, so your pages will "
"not be served with an ``'x-frame-options'`` header. Unless there is a good "
"reason for your site to be served in a frame, you should consider enabling "
"this header to help prevent clickjacking attacks."
msgstr ""
"**security.W002**: :setting:`MIDDLEWARE` 内に :class:`django.middleware."
"clickjacking.XFrameOptionsMiddleware` がないため、ページは ``'x-frame-"
"options'`` ヘッダーが付与されずに提供されます。サイトがフレーム内で提供される"
"必要がない場合は、クリックジャッキング攻撃を防ぐため、このヘッダーを有効にす"
"ることを検討してください。"

msgid ""
"**security.W003**: You don't appear to be using Django's built-in cross-site "
"request forgery protection via the middleware (:class:`django.middleware."
"csrf.CsrfViewMiddleware` is not in your :setting:`MIDDLEWARE`). Enabling the "
"middleware is the safest approach to ensure you don't leave any holes."
msgstr ""
"**security.W003**: ミドルウェアによる Django 組み込みのクロスサイトリクエスト"
"フォージェリ (CSRF) 防御を使っていないようです (:class:`django.middleware."
"csrf.CsrfViewMiddleware` が :setting:`MIDDLEWARE` にありません)。ミドルウェア"
"を有効にすることが、セキュリティホールを作らないための最も安全な方法です。"

msgid ""
"**security.W004**: You have not set a value for the :setting:"
"`SECURE_HSTS_SECONDS` setting. If your entire site is served only over SSL, "
"you may want to consider setting a value and enabling :ref:`HTTP Strict "
"Transport Security <http-strict-transport-security>`. Be sure to read the "
"documentation first; enabling HSTS carelessly can cause serious, "
"irreversible problems."
msgstr ""
"**security.W004**: :setting:`SECURE_HSTS_SECONDS` 設定の値を設定していませ"
"ん。サイト全体がSSL経由でのみ提供されている場合は、値を設定して、 :ref:`HTTP "
"Strict Transport Security <http-strict-transport-security>` を有効にすること"
"を検討してください。注意してドキュメントをよく読んでください。HSTSを不用意に"
"有効にすると、取り返しのつかない深刻な問題を引き起こす可能性があります。"

msgid ""
"**security.W005**: You have not set the :setting:"
"`SECURE_HSTS_INCLUDE_SUBDOMAINS` setting to ``True``. Without this, your "
"site is potentially vulnerable to attack via an insecure connection to a "
"subdomain. Only set this to ``True`` if you are certain that all subdomains "
"of your domain should be served exclusively via SSL."
msgstr ""
"**security.W005**: :setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS` 設定を ``True`` "
"に設定していません。これを設定しないと、サイトはサブドメインへの安全でない接"
"続を介して攻撃を受ける可能性があります。ドメインのすべてのサブドメインがSSL経"
"由でのみ提供されることが確実な場合のみ、これを ``True`` に設定してください。"

msgid ""
"**security.W006**: Your :setting:`SECURE_CONTENT_TYPE_NOSNIFF` setting is "
"not set to ``True``, so your pages will not be served with an ``'X-Content-"
"Type-Options: nosniff'`` header. You should consider enabling this header to "
"prevent the browser from identifying content types incorrectly."
msgstr ""
"**security.W006**: :setting:`SECURE_CONTENT_TYPE_NOSNIFF` の設定が ``True`` "
"に設定されていないため、 ``'X-Content-Type-Options: nosniff'`` ヘッダーが付い"
"たページが表示されません。このヘッダを有効にすることで、ブラウザがコンテンツ"
"タイプを誤って認識することを防ぐことができます。"

msgid ""
"**security.W007**: Your ``SECURE_BROWSER_XSS_FILTER`` setting is not set to "
"``True``, so your pages will not be served with an ``'X-XSS-Protection: 1; "
"mode=block'`` header. You should consider enabling this header to activate "
"the browser's XSS filtering and help prevent XSS attacks. *This check is "
"removed in Django 3.0 as the* ``X-XSS-Protection`` *header is no longer "
"honored by modern browsers.*"
msgstr ""
"**security.W007**: ``SECURE_BROWSER_XSS_FILTER`` 設定が ``True`` に設定されて"
"いないため、ページに ``'X-XSS-Protection: 1; mode=block'`` ヘッダが付与されま"
"せん。このヘッダを有効にしてブラウザのXSSフィルタリングを起動すると、XSS攻撃"
"を防ぐのに役立ちます。 *このチェックはDjango 3.0で削除されました。* ``X-XSS-"
"Protection`` *ヘッダは現代のブラウザではもはや機能しません。*"

msgid ""
"**security.W008**: Your :setting:`SECURE_SSL_REDIRECT` setting is not set to "
"``True``. Unless your site should be available over both SSL and non-SSL "
"connections, you may want to either set this setting to ``True`` or "
"configure a load balancer or reverse-proxy server  to redirect all "
"connections to HTTPS."
msgstr ""
"**security.W008**: :setting:`SECURE_SSL_REDIRECT` の設定が ``True`` に設定さ"
"れていません。SSL接続と非SSL接続の両方で利用できるサイトでない限り、この設定"
"を ``True`` にするか、ロードバランサーまたはリバースプロキシサーバーですべて"
"の接続をHTTPSにリダイレクトするように設定してください。"

msgid ""
"**security.W009**: Your :setting:`SECRET_KEY` has less than 50 characters, "
"less than 5 unique characters, or it's prefixed with ``'django-insecure-'`` "
"indicating that it was generated automatically by Django. Please generate a "
"long and random value, otherwise many of Django's security-critical features "
"will be vulnerable to attack."
msgstr ""
"**security.W009**: あなたの :setting:`SECRET_KEY` の文字数が 50 文字未満か、"
"一意な文字が 5 文字未満か、 Django が自動的に生成したことを示す ``'django-"
"insecure-'`` が先頭に付いています。長くてランダムな値を生成してください。そう"
"しないと、 Django のセキュリティ上重要な機能の多くが攻撃に対して脆弱になりま"
"す。"

msgid ""
"**security.W010**: You have :mod:`django.contrib.sessions` in your :setting:"
"`INSTALLED_APPS` but you have not set :setting:`SESSION_COOKIE_SECURE` to "
"``True``. Using a secure-only session cookie makes it more difficult for "
"network traffic sniffers to hijack user sessions."
msgstr ""
"**security.W010**: :mod:`django.contrib.sessions` モジュールが :setting:"
"`INSTALLED_APPS` にありますが、 :setting:`SESSION_COOKIE_SECURE` を ``True`` "
"に設定していません。セキュアなセッションクッキーのみを使用することで、ネット"
"ワークトラフィックの傍受者がユーザーセッションを乗っ取ることがより困難になり"
"ます。"

msgid ""
"**security.W011**: You have :class:`django.contrib.sessions.middleware."
"SessionMiddleware` in your :setting:`MIDDLEWARE`, but you have not set :"
"setting:`SESSION_COOKIE_SECURE` to ``True``. Using a secure-only session "
"cookie makes it more difficult for network traffic sniffers to hijack user "
"sessions."
msgstr ""
"**security.W011**: :class:`django.contrib.sessions.middleware."
"SessionMiddleware` を :setting:`MIDDLEWARE` に設定していますが、 :setting:"
"`SESSION_COOKIE_SECURE` を ``True`` に設定していません。セキュアオンリーの"
"セッションクッキーを使用すると、ネットワークトラフィックの傍受者がユーザー"
"セッションを乗っ取ることが難しくなります。"

msgid ""
"**security.W012**: :setting:`SESSION_COOKIE_SECURE` is not set to ``True``. "
"Using a secure-only session cookie makes it more difficult for network "
"traffic sniffers to hijack user sessions."
msgstr ""
"**security.W012**: :setting:`SESSION_COOKIE_SECURE` が ``True`` に設定されて"
"いません。セキュアオンリーのセッションクッキーを使用すると、ネットワークトラ"
"フィックの傍受者がユーザーセッションを乗っ取ることがより困難になります。"

msgid ""
"**security.W013**: You have :mod:`django.contrib.sessions` in your :setting:"
"`INSTALLED_APPS`, but you have not set :setting:`SESSION_COOKIE_HTTPONLY` to "
"``True``. Using an ``HttpOnly`` session cookie makes it more difficult for "
"cross-site scripting attacks to hijack user sessions."
msgstr ""
"**security.W013**: :mod:`django.contrib.sessions` が :setting:"
"`INSTALLED_APPS` にありますが、 :setting:`SESSION_COOKIE_HTTPONLY` を "
"``True`` に設定していません。``HttpOnly`` セッションクッキーを使用すると、ク"
"ロスサイトスクリプティング攻撃によるユーザーセッションの乗っ取りが困難になり"
"ます。"

msgid ""
"**security.W014**: You have :class:`django.contrib.sessions.middleware."
"SessionMiddleware` in your :setting:`MIDDLEWARE`, but you have not set :"
"setting:`SESSION_COOKIE_HTTPONLY` to ``True``. Using an ``HttpOnly`` session "
"cookie makes it more difficult for cross-site scripting attacks to hijack "
"user sessions."
msgstr ""
"**security.W014**: :setting:`MIDDLEWARE` に :class:`django.contrib.sessions."
"middleware.SessionMiddleware` がありますが、:setting:"
"`SESSION_COOKIE_HTTPONLY` を ``True`` に設定していません。 ``HttpOnly`` セッ"
"ションクッキーを使用すると、クロスサイトスクリプティング攻撃によるユーザー"
"セッションの乗っ取りがより困難になります。"

msgid ""
"**security.W015**: :setting:`SESSION_COOKIE_HTTPONLY` is not set to "
"``True``. Using an ``HttpOnly`` session cookie makes it more difficult for "
"cross-site scripting attacks to hijack user sessions."
msgstr ""
"**security.W015**: :setting:`SESSION_COOKIE_HTTPONLY` が ``True`` に設定され"
"ていません。 ``HttpOnly`` セッションクッキーを使用すると、クロスサイトスクリ"
"プティング攻撃によるユーザーセッションの乗っ取りが難しくなります。"

msgid ""
"**security.W016**: :setting:`CSRF_COOKIE_SECURE` is not set to ``True``. "
"Using a secure-only CSRF cookie makes it more difficult for network traffic "
"sniffers to steal the CSRF token."
msgstr ""
"**security.W016**: :setting:`CSRF_COOKIE_SECURE` が ``True`` に設定されていま"
"せん。セキュアなCSRFクッキーのみを使用すると、ネットワークトラフィックの傍受"
"者がCSRFトークンを盗むことが難しくなります。"

msgid ""
"**security.W017**: :setting:`CSRF_COOKIE_HTTPONLY` is not set to ``True``. "
"Using an ``HttpOnly`` CSRF cookie makes it more difficult for cross-site "
"scripting attacks to steal the CSRF token. *This check is removed in Django "
"1.11 as the* :setting:`CSRF_COOKIE_HTTPONLY` *setting offers no practical "
"benefit.*"
msgstr ""
"**security.W017**: :setting:`CSRF_COOKIE_HTTPONLY` が ``True`` に設定されてい"
"ません。 ``HttpOnly`` CSRF クッキーを使うと、クロスサイトスクリプティング攻撃"
"による CSRF トークンの盗用がより困難になります。 :setting:"
"`CSRF_COOKIE_HTTPONLY` *設定は実用的な利点をもたらさないので、このチェックは "
"Django 1.11 では削除されました。*"

msgid ""
"**security.W018**: You should not have :setting:`DEBUG` set to ``True`` in "
"deployment."
msgstr ""
"**security.W018**: 本番環境で :setting:`DEBUG` を ``True`` に設定してはいけま"
"せん。"

msgid ""
"**security.W019**: You have :class:`django.middleware.clickjacking."
"XFrameOptionsMiddleware` in your :setting:`MIDDLEWARE`, but :setting:"
"`X_FRAME_OPTIONS` is not set to ``'DENY'``. Unless there is a good reason "
"for your site to serve other parts of itself in a frame, you should change "
"it to ``'DENY'``."
msgstr ""
"**security.W019**: :setting:`MIDDLEWARE` に :class:`django.middleware."
"clickjacking.XFrameOptionsMiddleware` がありますが、:setting:"
"`X_FRAME_OPTIONS` が ``'DENY'`` に設定されていません。サイトの他の部分をフ"
"レーム内に表示する、よほどの必要性がない場合は、``'DENY'`` に変更してくださ"
"い。"

msgid ""
"**security.W020**: :setting:`ALLOWED_HOSTS` must not be empty in deployment."
msgstr ""
"**security.W020**: 本番環境では、 :setting:`ALLOWED_HOSTS` は空にしてはいけま"
"せん。"

msgid ""
"**security.W021**: You have not set the :setting:`SECURE_HSTS_PRELOAD` "
"setting to ``True``. Without this, your site cannot be submitted to the "
"browser preload list."
msgstr ""
"**security.W021**: :setting:`SECURE_HSTS_PRELOAD` の設定を ``True`` にしてい"
"ません。これがないと、あなたのサイトはブラウザの事前読み込みリストに登録でき"
"ません。"

msgid ""
"**security.W022**: You have not set the :setting:`SECURE_REFERRER_POLICY` "
"setting. Without this, your site will not send a Referrer-Policy header. You "
"should consider enabling this header to protect user privacy."
msgstr ""
"**security.W022**: :setting:`SECURE_REFERRER_POLICY` 設定を設定していません。"
"これがないと、サイトは Referrer-Policy ヘッダーを送信しません。ユーザーのプラ"
"イバシーを保護するために、このヘッダーを有効にすることを検討してください。"

msgid ""
"**security.E023**: You have set the :setting:`SECURE_REFERRER_POLICY` "
"setting to an invalid value."
msgstr ""
"**security.E023**: :setting:`SECURE_REFERRER_POLICY` 設定に無効な値が設定され"
"ています。"

msgid ""
"**security.E024**: You have set the :setting:"
"`SECURE_CROSS_ORIGIN_OPENER_POLICY` setting to an invalid value."
msgstr ""
"**security.E024**: :setting:`SECURE_CROSS_ORIGIN_OPENER_POLICY` 設定に無効な"
"値が設定されています。"

msgid ""
"**security.W025**: Your :setting:`SECRET_KEY_FALLBACKS[n] "
"<SECRET_KEY_FALLBACKS>` has less than 50 characters, less than 5 unique "
"characters, or it's prefixed with ``'django-insecure-'`` indicating that it "
"was generated automatically by Django. Please generate a long and random "
"value, otherwise many of Django's security-critical features will be "
"vulnerable to attack."
msgstr ""
"**security.W025**: あなたの :setting:`SECRET_KEY_FALLBACKS[n] "
"<SECRET_KEY_FALLBACKS>` の文字数が 50 文字未満か、一意な文字が 5 文字未満"
"か、 Django が自動的に生成したことを示す ``'django-insecure-'`` が先頭に付い"
"ています。長くてランダムな値を生成してください。そうしないと、 Django のセ"
"キュリティ上重要な機能の多くが攻撃に対して脆弱になります。"

msgid ""
"The following checks verify that your security-related settings are "
"correctly configured:"
msgstr ""
"以下のチェックは、セキュリティ関連の設定が正しく構成されているかを確認します:"

msgid ""
"**security.E100**: ``DEFAULT_HASHING_ALGORITHM`` must be ``'sha1'`` or "
"``'sha256'``. *This check appeared in Django 3.1 and 3.2*."
msgstr ""
"**security.E100**: ``DEFAULT_HASHING_ALGORITHM`` は ``'sha1'`` か "
"``'sha256'`` でなければなりません。 *このチェックは Django 3.1 と 3.2 で登場"
"しました。*"

msgid ""
"**security.E101**: The CSRF failure view ``'path.to.view'`` does not take "
"the correct number of arguments."
msgstr ""
"**security.E101**: CSRF 失敗のビュー ``'path.to.view'`` が正しい数の引数を"
"取っていません。"

msgid ""
"**security.E102**: The CSRF failure view ``'path.to.view'`` could not be "
"imported."
msgstr ""
"**security.E102**: CSRF 失敗のビュー ``'path.to.view'`` をインポートできませ"
"んでした。"

msgid "Signals"
msgstr "シグナル"

msgid ""
"**signals.E001**: ``<handler>`` was connected to the ``<signal>`` signal "
"with a lazy reference to the sender ``<app label>.<model>``, but app ``<app "
"label>`` isn't installed or doesn't provide model ``<model>``."
msgstr ""
"**signals.E001**: ``<handler>`` は送信元 ``<app label>.<model>`` への遅延参照"
"で ``<signal>`` シグナルに接続されましたが、アプリ ``<app label>`` がインス"
"トールされていないか、モデル ``<model>`` を提供していません。"

msgid "Templates"
msgstr "テンプレート"

msgid ""
"The following checks verify that your :setting:`TEMPLATES` setting is "
"correctly configured:"
msgstr ""
"以下のチェックは、:setting:`TEMPLATES` 設定が正しく構成されているかどうかを確"
"認します。"

msgid ""
"**templates.E001**: You have ``'APP_DIRS': True`` in your :setting:"
"`TEMPLATES` but also specify ``'loaders'`` in ``OPTIONS``. Either remove "
"``APP_DIRS`` or remove the ``'loaders'`` option."
msgstr ""
"**templates.E001**: ``'APP_DIRS': True`` が :setting:`TEMPLATES` にあり、同時"
"に ``OPTIONS`` で ``'loaders'`` を指定しています。 ``APP_DIRS`` を削除する"
"か、``'loaders'`` オプションを削除してください。"

msgid ""
"**templates.E002**: ``string_if_invalid`` in :setting:`TEMPLATES` :setting:"
"`OPTIONS <TEMPLATES-OPTIONS>` must be a string but got: ``{value}`` (``{type}"
"``)."
msgstr ""
"**templates.E002**: :setting:`TEMPLATES` :setting:`OPTIONS <TEMPLATES-"
"OPTIONS>` 内の ``string_if_invalid`` は文字列でなければなりませんが、渡された"
"値は ``{value}`` (``{type}``) です。"

msgid ""
"**templates.E003**:``<name>`` is used for multiple template tag modules: "
"``<module list>``. *This check was changed to* ``templates.W003`` *in Django "
"4.1.2*."
msgstr ""
"**templates.E003**: ``<name>`` は複数のテンプレートタグモジュールで使用されて"
"います: ``<module list>`` 。 *このチェックはDjango 4.1.2で* ``templates."
"W003`` *に変更されました。*"

msgid ""
"**templates.W003**:``<name>`` is used for multiple template tag modules: "
"``<module list>``."
msgstr ""
"**templates.W003**: ``<name>`` は複数のテンプレートタグモジュールで使用されて"
"います: ``<module list>`` 。"

msgid "Translation"
msgstr "翻訳"

msgid "The following checks are performed on your translation configuration:"
msgstr "以下のチェックが翻訳の設定に対して実行されます:"

msgid ""
"**translation.E001**: You have provided an invalid value for the :setting:"
"`LANGUAGE_CODE` setting: ``<value>``."
msgstr ""
"**translation.E001**: :setting:`LANGUAGE_CODE` 設定に無効な値 ``<value>`` が"
"指定されています。"

msgid ""
"**translation.E002**: You have provided an invalid language code in the :"
"setting:`LANGUAGES` setting: ``<value>``."
msgstr ""
"**translation.E002**: :setting:`LANGUAGES` 設定で無効な言語コード "
"``<value>`` が指定されています。"

msgid ""
"**translation.E003**: You have provided an invalid language code in the :"
"setting:`LANGUAGES_BIDI` setting: ``<value>``."
msgstr ""
"**translation.E003**: :setting:`LANGUAGES_BIDI` 設定で無効な言語コード "
"``<value>`` が指定されています。"

msgid ""
"**translation.E004**: You have provided a value for the :setting:"
"`LANGUAGE_CODE` setting that is not in the :setting:`LANGUAGES` setting."
msgstr ""
"**translation.E004**: :setting:`LANGUAGE_CODE` 設定に、:setting:`LANGUAGES` "
"設定に含まれていない値が指定されています。"

msgid "URLs"
msgstr "URL"

msgid "The following checks are performed on your URL configuration:"
msgstr "以下のチェックがURL設定に対して実行されます:"

msgid ""
"**urls.W001**: Your URL pattern ``<pattern>`` uses :func:`~django.urls."
"include` with a ``route`` ending with a ``$``. Remove the dollar from the "
"``route`` to avoid problems including URLs."
msgstr ""
"**urls.W001**: あなたのURLパターン ``<pattern>`` は、 :func:`~django.urls."
"include` を使用して、``route`` が ``$`` で終わっています。 問題を避けるため"
"に、``route`` からドル記号を削除してください。"

msgid ""
"**urls.W002**: Your URL pattern ``<pattern>`` has a ``route`` beginning with "
"a ``/``. Remove this slash as it is unnecessary. If this pattern is targeted "
"in an :func:`~django.urls.include`, ensure the :func:`~django.urls.include` "
"pattern has a trailing ``/``."
msgstr ""
"**urls.W002**: URL パターン ``<pattern>`` は ``/`` から始まる ``route`` を"
"持っています。このスラッシュは不要なため削除してください。このパターンが :"
"func:`~django.urls.include` で対象としている場合は、:func:`~django.urls."
"include` パターンには末尾に ``/`` があることを確認してください。"

msgid ""
"**urls.W003**: Your URL pattern ``<pattern>`` has a ``name`` including a ``:"
"``. Remove the colon, to avoid ambiguous namespace references."
msgstr ""
"**urls.W003**: URL パターン ``<pattern>`` の ``name`` に ``:`` が含まれていま"
"す。あいまいな名前空間参照を避けるためにコロンを取り除いてください。"

msgid ""
"**urls.E004**: Your URL pattern ``<pattern>`` is invalid. Ensure that "
"``urlpatterns`` is a list of :func:`~django.urls.path` and/or :func:`~django."
"urls.re_path` instances."
msgstr ""
"**urls.E004**: URLパターン ``<pattern>`` は無効です。``urlpatterns`` が :"
"func:`~django.urls.path` および/または :func:`~django.urls.re_path` インスタ"
"ンスのリストであることを確認してください。"

msgid ""
"**urls.W005**: URL namespace ``<namespace>`` isn't unique. You may not be "
"able to reverse all URLs in this namespace."
msgstr ""
"**urls.W005**: URL 名前空間 ``<namespace>`` は一意ではありません。この名前空"
"間に含まれるすべてのURLを逆引きできない場合があります。"

msgid ""
"**urls.E006**: The :setting:`MEDIA_URL`/ :setting:`STATIC_URL` setting must "
"end with a slash."
msgstr ""
"**urls.E006**: :setting:`MEDIA_URL`/ :setting:`STATIC_URL` 設定はスラッシュで"
"終わる必要があります。"

msgid ""
"**urls.E007**: The custom ``handlerXXX`` view ``'path.to.view'`` does not "
"take the correct number of arguments (…)."
msgstr ""
"**urls.E007**: カスタム ``handlerXXX`` ビュー ``'path.to.view'`` は正しい数の"
"引数を取っていません (...)。"

msgid ""
"**urls.E008**: The custom ``handlerXXX`` view ``'path.to.view'`` could not "
"be imported."
msgstr ""
"**urls.E008**: カスタムの ``handlerXXX`` ビュー ``'path.to.view'`` をインポー"
"トできませんでした。"

msgid ""
"**urls.E009**: Your URL pattern ``<pattern>`` has an invalid view, pass "
"``<view>.as_view()`` instead of ``<view>``."
msgstr ""
"**urls.E009**: URL パターン ``<pattern>`` には無効なビューがあります。 "
"``<view>`` の代わりに ``<view>.as_view()`` を渡してください。"

msgid ""
"**urls.W010**: Your URL pattern ``<pattern>`` has an unmatched ``<angle "
"bracket>``."
msgstr ""
"**urls.W010**: URL パターン ``<pattern>`` に一致しない ``<angle bracket>`` が"
"あります。"

msgid "``contrib`` app checks"
msgstr "``contrib`` アプリのチェック"

msgid "``admin``"
msgstr "``admin``"

msgid "Admin checks are all performed as part of the ``admin`` tag."
msgstr "admin チェックはすべて ``admin`` タグの一部として実行されます。"

msgid ""
"The following checks are performed on any :class:`~django.contrib.admin."
"ModelAdmin` (or subclass) that is registered with the admin site:"
msgstr ""
"管理サイトに登録されている :class:`~django.contrib.admin.ModelAdmin` (または"
"サブクラス) に対して、以下のチェックが実行されます:"

msgid "**admin.E001**: The value of ``raw_id_fields`` must be a list or tuple."
msgstr ""
"**admin.E001**: ``raw_id_fields`` の値はリストまたはタプルでなければなりませ"
"ん。"

msgid ""
"**admin.E002**: The value of ``raw_id_fields[n]`` refers to ``<field "
"name>``, which is not a field of ``<model>``."
msgstr ""
"**admin.E002**: ``raw_id_fields[n]`` の値 ``<field name>`` は、``<model>`` の"
"フィールドではありません。"

msgid ""
"**admin.E003**: The value of ``raw_id_fields[n]`` must be a foreign key or a "
"many-to-many field."
msgstr ""
"**admin.E003**: ``raw_id_fields[n]`` の値は、外部キーもしくは多対多のフィール"
"ドでなければなりません。"

msgid "**admin.E004**: The value of ``fields`` must be a list or tuple."
msgstr ""
"**admin.E004**: ``fields`` の値はリストまたはタプルでなければなりません。"

msgid "**admin.E005**: Both ``fieldsets`` and ``fields`` are specified."
msgstr "**admin.E005**: ``fieldsets`` と ``fields`` の両方が指定されています。"

msgid "**admin.E006**: The value of ``fields`` contains duplicate field(s)."
msgstr "**admin.E006**: ``fields`` の値に重複するフィールドが含まれています。"

msgid "**admin.E007**: The value of ``fieldsets`` must be a list or tuple."
msgstr ""
"**admin.E007**: ``fieldsets`` の値はリストまたはタプルでなければなりません。"

msgid "**admin.E008**: The value of ``fieldsets[n]`` must be a list or tuple."
msgstr ""
"**admin.E008**: ``fieldsets[n]`` の値はリストまたはタプルでなければなりませ"
"ん。"

msgid "**admin.E009**: The value of ``fieldsets[n]`` must be of length 2."
msgstr "**admin.E009**: ``fieldsets[n]`` の値は長さ 2 でなければなりません。"

msgid "**admin.E010**: The value of ``fieldsets[n][1]`` must be a dictionary."
msgstr "**admin.E010**: ``fieldsets[n][1]`` の値は辞書でなければなりません。"

msgid ""
"**admin.E011**: The value of ``fieldsets[n][1]`` must contain the key "
"``fields``."
msgstr ""
"**admin.E011**: ``fieldsets[n][1]`` の値には、``fields`` キーを含める必要があ"
"ります。"

msgid "**admin.E012**: There are duplicate field(s) in ``fieldsets[n][1]``."
msgstr "**admin.E012**: ``fieldsets[n][1]`` に重複するフィールドがあります。"

msgid ""
"**admin.E013**: The value of ``fields[n]/filter_horizontal[n]/"
"filter_vertical[n]/fieldsets[n][m]`` cannot include the ``ManyToManyField`` "
"``<field name>``, because that field manually specifies a relationship model."
msgstr ""
"**admin.E013**: ``fields[n]/filter_horizontal[n]/filter_vertical[n]/"
"fieldsets[n][m]`` の値に ``ManyToManyField`` ``<field name>`` を含めることは"
"できません。そのフィールドはリレーション先のモデルを手動で指定しているからで"
"す。"

msgid "**admin.E014**: The value of ``exclude`` must be a list or tuple."
msgstr ""
"**admin.E014**: ``exclude`` の値はリストまたはタプルでなければなりません。"

msgid "**admin.E015**: The value of ``exclude`` contains duplicate field(s)."
msgstr "**admin.E015**: ``exclude`` の値に重複するフィールドが含まれています。"

msgid ""
"**admin.E016**: The value of ``form`` must inherit from ``BaseModelForm``."
msgstr ""
"**admin.E016**: ``form`` の値は ``BaseModelForm`` から継承する必要がありま"
"す。"

msgid ""
"**admin.E017**: The value of ``filter_vertical`` must be a list or tuple."
msgstr ""
"**admin.E017**: ``filter_vertical`` の値はリストかタプルでなければなりませ"
"ん。"

msgid ""
"**admin.E018**: The value of ``filter_horizontal`` must be a list or tuple."
msgstr ""
"**admin.E018**: ``filter_horizontal`` の値はリストまたはタプルでなければなり"
"ません。"

msgid ""
"**admin.E019**: The value of ``filter_vertical[n]/filter_horizontal[n]`` "
"refers to ``<field name>``, which is not a field of ``<model>``."
msgstr ""
"**admin.E019**: ``filter_vertical[n]/filter_horizontal[n]`` の値が  ``<field "
"name>`` を参照しています。これは ``<model>`` のフィールドではありません。"

msgid ""
"**admin.E020**: The value of ``filter_vertical[n]/filter_horizontal[n]`` "
"must be a many-to-many field."
msgstr ""
"**admin.E020**: ``filter_vertical[n]/filter_horizontal[n]`` の値は多対多"
"フィールドでなければなりません。"

msgid "**admin.E021**: The value of ``radio_fields`` must be a dictionary."
msgstr "**admin.E021**: ``radio_fields`` の値は辞書でなければなりません。"

msgid ""
"**admin.E022**: The value of ``radio_fields`` refers to ``<field name>``, "
"which is not a field of ``<model>``."
msgstr ""
"**admin.E022**: ``radio_fields`` の値は ``<field name>`` を参照していますが、"
"これは ``<model>`` のフィールドではありません。"

msgid ""
"**admin.E023**: The value of ``radio_fields`` refers to ``<field name>``, "
"which is not an instance of ``ForeignKey``, and does not have a ``choices`` "
"definition."
msgstr ""
"**admin.E023**: ``radio_fields`` の値は ``<field name>`` を参照しており、これ"
"は ``ForeignKey`` のインスタンスではなく、``choices`` 定義も持っていません。"

msgid ""
"**admin.E024**: The value of ``radio_fields[<field name>]`` must be either "
"``admin.HORIZONTAL`` or ``admin.VERTICAL``."
msgstr ""
"**admin.E024**: ``radio_fields[<field name>]`` の値は ``admin.HORIZONTAL`` ま"
"たは ``admin.VERTICAL`` でなければなりません。"

msgid ""
"**admin.E025**: The value of ``view_on_site`` must be either a callable or a "
"boolean value."
msgstr ""
"**admin.E025**: ``view_on_site`` の値は呼び出し可能オブジェクトか真偽値でなけ"
"ればなりません。"

msgid ""
"**admin.E026**: The value of ``prepopulated_fields`` must be a dictionary."
msgstr ""
"**admin.E026**: ``prepopulated_fields`` の値は辞書でなければなりません。"

msgid ""
"**admin.E027**: The value of ``prepopulated_fields`` refers to ``<field "
"name>``, which is not a field of ``<model>``."
msgstr ""
"**admin.E027**: ``prepopulated_fields`` の値は、``<model>`` のフィールドであ"
"る ``<field name>`` を参照していますが、存在しません。"

msgid ""
"**admin.E028**: The value of ``prepopulated_fields`` refers to ``<field "
"name>``, which must not be a ``DateTimeField``, a ``ForeignKey``, a "
"``OneToOneField``, or a ``ManyToManyField`` field."
msgstr ""
"**admin.E028**: ``prepopulated_fields`` の値は ``<field name>`` を参照してお"
"り、これは ``DateTimeField``、``ForeignKey``、``OneToOneField``、または "
"``ManyToManyField`` フィールドであってはいけません。"

msgid ""
"**admin.E029**: The value of ``prepopulated_fields[<field name>]`` must be a "
"list or tuple."
msgstr ""
"**admin.E029**: ``prepopulated_fields[<field name]>`` の値はリストかタプルで"
"なければなりません。"

msgid ""
"**admin.E030**: The value of ``prepopulated_fields`` refers to ``<field "
"name>``, which is not a field of ``<model>``."
msgstr ""
"**admin.E030**: ``prepopulated_fields`` の値は ``<field name>`` を参照してお"
"り、これは ``<model>`` のフィールドではありません。"

msgid "**admin.E031**: The value of ``ordering`` must be a list or tuple."
msgstr ""
"**admin.E031**: ``ordering`` の値はリストまたはタプルでなければなりません。"

msgid ""
"**admin.E032**: The value of ``ordering`` has the random ordering marker ``?"
"``, but contains other fields as well."
msgstr ""
"**admin.E032**: ``ordering`` の値はランダムな順序マーカー ``?`` を持っていま"
"すが、他のフィールドも含まれています。"

msgid ""
"**admin.E033**: The value of ``ordering`` refers to ``<field name>``, which "
"is not a field of ``<model>``."
msgstr ""
"**admin.E033**: ``ordering`` の値は ``<field name>`` を参照していますが、これ"
"は ``<model>`` のフィールドではありません。"

msgid ""
"**admin.E034**: The value of ``readonly_fields`` must be a list or tuple."
msgstr ""
"**admin.E034**: ``readonly_fields`` の値は、リストまたはタプルでなければなり"
"ません。"

msgid ""
"**admin.E035**: The value of ``readonly_fields[n]`` refers to "
"``<field_name>``, which is not a callable, an attribute of ``<ModelAdmin "
"class>``, or an attribute of ``<model>``."
msgstr ""
"**admin.E035**: ``readonly_fields[n]`` の値は ``<field_name>`` を指し、それは"
"呼び出し可能オブジェクトでも ``<ModelAdmin class>`` の属性でも ``<model>`` の"
"属性でもありません。"

msgid ""
"**admin.E036**: The value of ``autocomplete_fields`` must be a list or tuple."
msgstr ""
"**admin.E036**: ``autocomplete_fields`` の値はリストまたはタプルでなければな"
"りません。"

msgid ""
"**admin.E037**: The value of ``autocomplete_fields[n]`` refers to ``<field "
"name>``, which is not a field of ``<model>``."
msgstr ""
"**admin.E037**: ``autocomplete_fields[n]`` の値が ``<field name>`` を参照して"
"いますが、これは ``<model>`` のフィールドではありません。"

msgid ""
"**admin.E038**: The value of ``autocomplete_fields[n]`` must be a foreign "
"key or a many-to-many field."
msgstr ""
"**admin.E038**: ``autocomplete_fields[n]`` の値は、外部キーまたは多対多フィー"
"ルドでなければなりません。"

msgid ""
"**admin.E039**: An admin for model ``<model>`` has to be registered to be "
"referenced by ``<modeladmin>.autocomplete_fields``."
msgstr ""
"**admin.E039**: ``<modeladmin>.autocomplete_fields`` によって参照されるため、"
"モデル ``<model>`` の admin が登録されている必要があります。"

msgid ""
"**admin.E040**: ``<modeladmin>`` must define ``search_fields``, because it's "
"referenced by ``<other_modeladmin>.autocomplete_fields``."
msgstr ""
"**admin.E040**: ``<modeladmin>`` は、``<other_modeladmin>."
"autocomplete_fields`` で参照されているため、``search_fields`` を定義する必要"
"があります。"

msgid "``ModelAdmin``"
msgstr "``ModelAdmin``"

msgid ""
"The following checks are performed on any :class:`~django.contrib.admin."
"ModelAdmin` that is registered with the admin site:"
msgstr ""
"管理サイトに登録されている :class:`~django.contrib.admin.ModelAdmin` には、以"
"下のチェックが行われます: "

msgid "**admin.E101**: The value of ``save_as`` must be a boolean."
msgstr "**admin.E101**: ``save_as`` の値は真偽値でなければなりません。"

msgid "**admin.E102**: The value of ``save_on_top`` must be a boolean."
msgstr "**admin.E102**: ``save_on_top`` の値は真偽値でなければなりません。"

msgid "**admin.E103**: The value of ``inlines`` must be a list or tuple."
msgstr "**admin.E103**: ``inlines`` の値はリストかタプルでなければなりません。"

msgid ""
"**admin.E104**: ``<InlineModelAdmin class>`` must inherit from "
"``InlineModelAdmin``."
msgstr ""
"**admin.E104**: ``<InlineModelAdmin class>`` は ``InlineModelAdmin`` から継承"
"する必要があります。"

msgid ""
"**admin.E105**: ``<InlineModelAdmin class>`` must have a ``model`` attribute."
msgstr ""
"**admin.E105**: ``<InlineModelAdmin class>`` には ``model`` 属性が必要です。"

msgid ""
"**admin.E106**: The value of ``<InlineModelAdmin class>.model`` must be a "
"``Model``."
msgstr ""
"**admin.E106**: ``<InlineModelAdmin class>.model`` の値は ``Model`` 型でなけ"
"ればなりません。"

msgid "**admin.E107**: The value of ``list_display`` must be a list or tuple."
msgstr ""
"**admin.E107**: ``list_display`` の値は、リストまたはタプルでなければなりませ"
"ん。"

msgid ""
"**admin.E108**: The value of ``list_display[n]`` refers to ``<label>``, "
"which is not a callable, an attribute of ``<ModelAdmin class>``, or an "
"attribute or method on ``<model>``."
msgstr ""
"**admin.E108**: ``list_display[n]`` の値は ``<label>`` を参照していますが、呼"
"び出し可能オブジェクトや ``<ModelAdmin クラス>`` の属性、``<model>`` の属性や"
"メソッドではありません。"

msgid ""
"**admin.E109**: The value of ``list_display[n]`` must not be a many-to-many "
"field or a reverse foreign key."
msgstr ""
"**admin.E109**: ``list_display[n]`` の値は、多対多のフィールドや逆参照外部"
"キーであってはいけません。"

msgid ""
"**admin.E110**: The value of ``list_display_links`` must be a list, a tuple, "
"or ``None``."
msgstr ""
"**admin.E110**: ``list_display_links`` の値は、リスト、タプル、または "
"``None`` のいずれかでなければなりません。"

msgid ""
"**admin.E111**: The value of ``list_display_links[n]`` refers to "
"``<label>``, which is not defined in ``list_display``."
msgstr ""
"**admin.E111**: ``list_display_links[n]`` の値が ``<label>`` を参照しています"
"が、``list_display`` で定義されていません。"

msgid "**admin.E112**: The value of ``list_filter`` must be a list or tuple."
msgstr ""
"**admin.E112**: ``list_filter`` の値はリストまたはタプルでなければなりませ"
"ん。"

msgid ""
"**admin.E113**: The value of ``list_filter[n]`` must inherit from "
"``ListFilter``."
msgstr ""
"**admin.E113**: ``list_filter[n]`` の値は ``ListFilter`` を継承している必要が"
"あります。"

msgid ""
"**admin.E114**: The value of ``list_filter[n]`` must not inherit from "
"``FieldListFilter``."
msgstr ""
"**admin.E114**: ``list_filter[n]`` の値は ``FieldListFilter`` を継承してはい"
"けません。"

msgid ""
"**admin.E115**: The value of ``list_filter[n][1]`` must inherit from "
"``FieldListFilter``."
msgstr ""
"**admin.E115**: ``list_filter[n][1]`` の値は ``FieldListFilter`` を継承する必"
"要があります。"

msgid ""
"**admin.E116**: The value of ``list_filter[n]`` refers to ``<label>``, which "
"does not refer to a Field."
msgstr ""
"**admin.E116**: ``list_filter[n]`` の値は ``<label>`` を参照していますが、"
"Field を参照していません。"

msgid ""
"**admin.E117**: The value of ``list_select_related`` must be a boolean, "
"tuple or list."
msgstr ""
"**admin.E117**: ``list_select_related`` の値は真偽値、タプル、またはリストで"
"なければなりません。"

msgid "**admin.E118**: The value of ``list_per_page`` must be an integer."
msgstr "**admin.E118**: ``list_per_page`` の値は整数でなければなりません。"

msgid "**admin.E119**: The value of ``list_max_show_all`` must be an integer."
msgstr "**admin.E119**: ``list_max_show_all`` の値は整数でなければなりません。"

msgid "**admin.E120**: The value of ``list_editable`` must be a list or tuple."
msgstr ""
"**admin.E120**: ``list_editable`` の値はリストまたはタプルでなければなりませ"
"ん。"

msgid ""
"**admin.E121**: The value of ``list_editable[n]`` refers to ``<label>``, "
"which is not a field of ``<model>``."
msgstr ""
"**admin.E121**: ``list_editable[n]`` の値は ``<model>`` のフィールドではない "
"``<label>`` を参照しています。"

msgid ""
"**admin.E122**: The value of ``list_editable[n]`` refers to ``<label>``, "
"which is not contained in ``list_display``."
msgstr ""
"**admin.E122**: ``list_editable[n]`` の値は ``<label>`` を参照しており、"
"``list_display`` には含まれていません。"

msgid ""
"**admin.E123**: The value of ``list_editable[n]`` cannot be in both "
"``list_editable`` and ``list_display_links``."
msgstr ""
"**admin.E123**: ``list_editable[n]`` の値を ``list_editable`` と "
"``list_display_links`` の両方に入れることはできません。"

msgid ""
"**admin.E124**: The value of ``list_editable[n]`` refers to the first field "
"in ``list_display`` (``<label>``), which cannot be used unless "
"``list_display_links`` is set."
msgstr ""
"**admin.E124**: ``list_editable[n]`` の値は ``list_display`` の最初のフィール"
"ド (``<label>``) を参照していますが、``list_display_links`` が設定されていな"
"いと使用できません。"

msgid ""
"**admin.E125**: The value of ``list_editable[n]`` refers to ``<field "
"name>``, which is not editable through the admin."
msgstr ""
"**admin.E125**: ``list_editable[n]`` の値は ``<field name>`` を参照しており、"
"これは admin を通じて編集できません。"

msgid "**admin.E126**: The value of ``search_fields`` must be a list or tuple."
msgstr ""
"**admin.E126**: ``search_fields`` の値はリストまたはタプルでなければいけませ"
"ん。"

msgid ""
"**admin.E127**: The value of ``date_hierarchy`` refers to ``<field name>``, "
"which does not refer to a Field."
msgstr ""
"**admin.E127**: ``date_hierarchy`` の値は ``<field name>`` を参照しています"
"が、Field を参照していません。"

msgid ""
"**admin.E128**: The value of ``date_hierarchy`` must be a ``DateField`` or "
"``DateTimeField``."
msgstr ""
"**admin.E128**: ``date_hierarchy`` の値は ``DateField`` または "
"``DateTimeField`` でなければなりません。"

msgid ""
"**admin.E129**: ``<modeladmin>`` must define a ``has_<foo>_permission()`` "
"method for the ``<action>`` action."
msgstr ""
"**admin.E129**: ``<modeladmin>`` は ``<action>`` アクションのために "
"``has_<foo>_permission()`` メソッドを定義する必要があります。"

msgid ""
"**admin.E130**: ``__name__`` attributes of actions defined in "
"``<modeladmin>`` must be unique. Name ``<name>`` is not unique."
msgstr ""
"**admin.E130**: ``<modeladmin>`` で定義されたアクションの ``__name__`` 属性は"
"一意でなければなりません。名前 ``<name>`` は一意ではありません。"

msgid "``InlineModelAdmin``"
msgstr "``InlineModelAdmin``"

msgid ""
"The following checks are performed on any :class:`~django.contrib.admin."
"InlineModelAdmin` that is registered as an inline on a :class:`~django."
"contrib.admin.ModelAdmin`."
msgstr ""
"以下のチェックは :class:`~django.contrib.admin.ModelAdmin` のインラインとして"
"登録された :class:`~django.contrib.admin.InlineModelAdmin` に対して行われま"
"す。"

msgid ""
"**admin.E201**: Cannot exclude the field ``<field name>``, because it is the "
"foreign key to the parent model ``<app_label>.<model>``."
msgstr ""
"**admin.E201**: フィールド ``<field name>`` を除外できません。それは親モデル "
"``<app_label>.<model>`` の外部キーです。"

msgid ""
"**admin.E202**: ``<model>`` has no ``ForeignKey`` to ``<parent model>``./ "
"``<model>`` has more than one ``ForeignKey`` to ``<parent model>``. You must "
"specify a ``fk_name`` attribute."
msgstr ""
"**admin.E202**: ``<model>`` は ``<parent model>`` への ``ForeignKey`` を持っ"
"ていません。/ ``<model>`` は ``<parent model>`` へ複数の ``ForeignKey`` を"
"持っています。 ``fk_name`` 属性を指定する必要があります。"

msgid "**admin.E203**: The value of ``extra`` must be an integer."
msgstr "**admin.E203**: ``extra`` の値は整数でなければなりません。"

msgid "**admin.E204**: The value of ``max_num`` must be an integer."
msgstr "**admin.E204**: ``max_num`` の値は整数でなければなりません。"

msgid "**admin.E205**: The value of ``min_num`` must be an integer."
msgstr "**admin.E205**: ``min_num`` の値は整数でなければなりません。"

msgid ""
"**admin.E206**: The value of ``formset`` must inherit from "
"``BaseModelFormSet``."
msgstr ""
"**admin.E206**: ``formset`` の値は ``BaseModelFormSet`` を継承する必要があり"
"ます。"

msgid "``GenericInlineModelAdmin``"
msgstr "``GenericInlineModelAdmin``"

msgid ""
"The following checks are performed on any :class:`~django.contrib."
"contenttypes.admin.GenericInlineModelAdmin` that is registered as an inline "
"on a :class:`~django.contrib.admin.ModelAdmin`."
msgstr ""
"以下のチェックは :class:`~django.contrib.contenttypes.admin."
"GenericInlineModelAdmin` のインラインとして登録された :class:`~django."
"contrib.admin.ModelAdmin` に対して行われます。"

msgid ""
"**admin.E301**: ``'ct_field'`` references ``<label>``, which is not a field "
"on ``<model>``."
msgstr ""
"**admin.E301**: ``'ct_field'`` は ``<label>`` を参照していますが、これは "
"``<model>`` のフィールドではありません。"

msgid ""
"**admin.E302**: ``'ct_fk_field'`` references ``<label>``, which is not a "
"field on ``<model>``."
msgstr ""
"**admin.E302**: ``ct_fk_field'`` は ``<label>`` を参照していますが、これは "
"``<model>`` のフィールドではありません。"

msgid "**admin.E303**: ``<model>`` has no ``GenericForeignKey``."
msgstr "**admin.E303**: ``<model>`` に ``GenericForeignKey`` がありません。"

msgid ""
"**admin.E304**: ``<model>`` has no ``GenericForeignKey`` using content type "
"field ``<field name>`` and object ID field ``<field name>``."
msgstr ""
"**admin.E304**: ``<model>`` の ``GenericForeignKey`` が、コンテンツタイプの"
"フィールド ``<field name>`` とオブジェクトIDのフィールド ``<field name>`` を"
"使用していません。"

msgid "``AdminSite``"
msgstr "``AdminSite``"

msgid ""
"The following checks are performed on the default :class:`~django.contrib."
"admin.AdminSite`:"
msgstr ""
"デフォルトの :class:`~django.contrib.admin.AdminSite` には、以下のチェックが"
"実行されます。"

msgid ""
"**admin.E401**: :mod:`django.contrib.contenttypes` must be in :setting:"
"`INSTALLED_APPS` in order to use the admin application."
msgstr ""
"**admin.E401**: admin アプリケーションを使用するには、:setting:"
"`INSTALLED_APPS` に :mod:`django.contrib.contenttypes` を含める必要がありま"
"す。"

msgid ""
"**admin.E402**: :mod:`django.contrib.auth.context_processors.auth` must be "
"enabled in :class:`~django.template.backends.django.DjangoTemplates` (:"
"setting:`TEMPLATES`) if using the default auth backend in order to use the "
"admin application."
msgstr ""
"**admin.E402**: デフォルトの認証バックエンドを使用する場合、admin アプリケー"
"ションを使用するためには、 :setting:`TEMPLATES` (:class:`~django.template."
"backends.django.DjangoTemplates`) で :mod:`django.contrib.auth."
"context_processors.auth` を有効にする必要があります。"

msgid ""
"**admin.E403**: A :class:`django.template.backends.django.DjangoTemplates` "
"instance must be configured in :setting:`TEMPLATES` in order to use the "
"admin application."
msgstr ""
"**admin.E403**: admin アプリケーションを使用するには、:setting:`TEMPLATES` "
"で :class:`django.template.backends.django.DjangoTemplates` インスタンスを設"
"定する必要があります。"

msgid ""
"**admin.E404**: ``django.contrib.messages.context_processors.messages`` must "
"be enabled in :class:`~django.template.backends.django.DjangoTemplates` (:"
"setting:`TEMPLATES`) in order to use the admin application."
msgstr ""
"**admin.E404**: admin アプリケーションを使用するには、 :class:`~django."
"template.backends.django.DjangoTemplates` (:setting:`TEMPLATES`) で ``django."
"contrib.messages.context_processors.messages`` を有効にする必要があります。"

msgid ""
"**admin.E405**: :mod:`django.contrib.auth` must be in :setting:"
"`INSTALLED_APPS` in order to use the admin application."
msgstr ""
"**admin.E405**: admin アプリケーションを使用するには、:setting:"
"`INSTALLED_APPS` に :mod:`django.contrib.auth` を含める必要があります。"

msgid ""
"**admin.E406**: :mod:`django.contrib.messages` must be in :setting:"
"`INSTALLED_APPS` in order to use the admin application."
msgstr ""
"**admin.E406**: admin アプリケーションを使用するには :mod:`django.contrib."
"messages` が :setting:`INSTALLED_APPS` に入っていなければなりません。"

msgid ""
"**admin.E408**: :class:`django.contrib.auth.middleware."
"AuthenticationMiddleware` must be in :setting:`MIDDLEWARE` in order to use "
"the admin application."
msgstr ""
"**admin.E408**: admin アプリケーションを使用するには :class:`django.contrib."
"auth.middleware.AuthenticationMiddleware` を :setting:`MIDDLEWARE` に設定する"
"必要があります。"

msgid ""
"**admin.E409**: :class:`django.contrib.messages.middleware."
"MessageMiddleware` must be in :setting:`MIDDLEWARE` in order to use the "
"admin application."
msgstr ""
"**admin.E409**: admin アプリケーションを使用するには :class:`django.contrib."
"messages.middleware.MessageMiddleware` が :setting:`MIDDLEWARE` に入っていな"
"ければなりません。"

msgid ""
"**admin.E410**: :class:`django.contrib.sessions.middleware."
"SessionMiddleware` must be in :setting:`MIDDLEWARE` in order to use the "
"admin application."
msgstr ""
"**admin.E410**: admin アプリケーションを使用するには :class:`django.contrib."
"sessions.middleware.SessionMiddleware` が :setting:`MIDDLEWARE` に入っていな"
"ければなりません。"

msgid ""
"**admin.W411**: ``django.template.context_processors.request`` must be "
"enabled in :class:`~django.template.backends.django.DjangoTemplates` (:"
"setting:`TEMPLATES`) in order to use the admin navigation sidebar."
msgstr ""
"**admin.W411**: admin のナビゲーション・サイドバーを使うには、 :class:"
"`~django.template.backends.django.DjangoTemplates` (:setting:`TEMPLATES`) で "
"``django.template.context_processors.request`` を有効にする必要があります。"

msgid "``auth``"
msgstr "``auth``"

msgid "**auth.E001**: ``REQUIRED_FIELDS`` must be a list or tuple."
msgstr ""
"**auth.E001**: ``REQUIRED_FIELDS`` はリストまたはタプルでなければなりません。"

msgid ""
"**auth.E002**: The field named as the ``USERNAME_FIELD`` for a custom user "
"model must not be included in ``REQUIRED_FIELDS``."
msgstr ""
"**auth.E002**: カスタムユーザーモデルの ``USERNAME_FIELD`` として指定された"
"フィールドは、``REQUIRED_FIELDS`` に含めることはできません。"

msgid ""
"**auth.E003**: ``<field>`` must be unique because it is named as the "
"``USERNAME_FIELD``."
msgstr ""
"**auth.E003**: ``<field>`` は ``USERNAME_FIELD`` という名前であるため、一意で"
"なければなりません。"

msgid ""
"**auth.W004**: ``<field>`` is named as the ``USERNAME_FIELD``, but it is not "
"unique."
msgstr ""
"**auth.W004**: ``<field>`` は ``USERNAME_FIELD`` として命名されていますが、一"
"意ではありません。"

msgid ""
"**auth.E005**: The permission codenamed ``<codename>`` clashes with a "
"builtin permission for model ``<model>``."
msgstr ""
"**auth.E005**: コードネーム ``<codename>`` のパーミッションは、モデル "
"``<model>`` の組み込みパーミッションと衝突します。"

msgid ""
"**auth.E006**: The permission codenamed ``<codename>`` is duplicated for "
"model ``<model>``."
msgstr ""
"**auth.E006**: モデル ``<model>`` に対して、パーミッションコード名 "
"``<codename>`` が重複しています。"

msgid ""
"**auth.E007**: The :attr:`verbose_name <django.db.models.Options."
"verbose_name>` of model ``<model>`` must be at most 244 characters for its "
"builtin permission names to be at most 255 characters."
msgstr ""
"**auth.E007**: モデル ``<model>`` の :attr:`verbose_name <django.db.models."
"Options.verbose_name>` は、組み込みのパーミッション名が最大 255 文字になるよ"
"うに、最大 244 文字でなければなりません。"

msgid ""
"**auth.E008**: The permission named ``<name>`` of model ``<model>`` is "
"longer than 255 characters."
msgstr ""
"**auth.E008**: モデル ``<model>`` の ``<name>`` というパーミッションが 255 文"
"字より長いです。"

msgid ""
"**auth.C009**: ``<User model>.is_anonymous`` must be an attribute or "
"property rather than a method. Ignoring this is a security issue as "
"anonymous users will be treated as authenticated!"
msgstr ""
"**auth.C009**: ``<User model>.is_anonymous`` はメソッドではなく、属性またはプ"
"ロパティでなければなりません。これを無視すると匿名ユーザーが認証済みとして扱"
"われるため、セキュリティ上の問題となります！"

msgid ""
"**auth.C010**: ``<User model>.is_authenticated`` must be an attribute or "
"property rather than a method. Ignoring this is a security issue as "
"anonymous users will be treated as authenticated!"
msgstr ""
"**auth.C010**: ``<User model>.is_authenticated`` はメソッドではなく属性または"
"プロパティでなければなりません。これを無視すると匿名ユーザーが認証済みとして"
"扱われるため、セキュリティ上の問題となります！"

msgid ""
"**auth.E011**: The name of model ``<model>`` must be at most 93 characters "
"for its builtin permission names to be at most 100 characters."
msgstr ""
"**auth.E011**: モデル ``<model>`` の名前は、組み込みのパーミッション名が100文"
"字以下になるように、最大93文字にする必要があります。"

msgid ""
"**auth.E012**: The permission codenamed ``<codename>`` of model ``<model>`` "
"is longer than 100 characters."
msgstr ""
"**auth.E012**: モデル ``<model>`` のコードネーム ``<codename>`` というパー"
"ミッションが 100 文字より長いです。"

msgid "``contenttypes``"
msgstr "``contenttypes``"

msgid ""
"The following checks are performed when a model contains a :class:`~django."
"contrib.contenttypes.fields.GenericForeignKey` or :class:`~django.contrib."
"contenttypes.fields.GenericRelation`:"
msgstr ""
"モデルに :class:`~django.contrib.contenttypes.fields.GenericForeignKey` また"
"は :class:`~django.contrib.contenttypes.fields.GenericRelation` が含まれる場"
"合、以下のチェックが行われます:"

msgid ""
"**contenttypes.E001**: The ``GenericForeignKey`` object ID references the "
"nonexistent field ``<field>``."
msgstr ""
"**contenttypes.E001**: ``GenericForeignKey`` オブジェクトの ID が存在しない"
"フィールド ``<field>`` を参照しています。"

msgid ""
"**contenttypes.E002**: The ``GenericForeignKey`` content type references the "
"nonexistent field ``<field>``."
msgstr ""
"**contenttypes.E002**: ``GenericForeignKey`` が存在しないフィールド "
"``<field>`` を参照しています。"

msgid "**contenttypes.E003**: ``<field>`` is not a ``ForeignKey``."
msgstr "**contenttypes.E003**: ``<field>`` は ``ForeignKey`` ではありません。"

msgid ""
"**contenttypes.E004**: ``<field>`` is not a ``ForeignKey`` to ``contenttypes."
"ContentType``."
msgstr ""
"**contenttypes.E004**: ``<field>`` が ``ForeignKey`` を ``contenttypes."
"ContentType`` に持っていません。"

msgid "**contenttypes.E005**: Model names must be at most 100 characters."
msgstr "**contenttypes.E005**: モデルの名前は最大100文字でなければなりません。"

msgid "``postgres``"
msgstr "``postgres``"

msgid ""
"The following checks are performed on :mod:`django.contrib.postgres` model "
"fields:"
msgstr ""
":mod:`django.contrib.postgres` モデルフィールドに対しては、以下のチェックが実"
"行されます。"

msgid "**postgres.E001**: Base field for array has errors: ..."
msgstr "**postgres.E001**: 配列のベース・フィールドに次のエラーがあります: ..."

msgid "**postgres.E002**: Base field for array cannot be a related field."
msgstr ""
"**postgres.E002**: 配列のベース・フィールドをリレーション先フィールドにするこ"
"とはできません。"

msgid ""
"**postgres.E003**: ``<field>`` default should be a callable instead of an "
"instance so that it's not shared between all field instances. *This check "
"was changed to* ``fields.E010`` *in Django 3.1*."
msgstr ""
"**postgres.E003**: ``<field>`` のデフォルト値はインスタンスではなく、呼び出し"
"可能オブジェクトにすべきです。これによりすべてのフィールドインスタンスで共有"
"されることがなくなります。このチェックは Django 3.1 で ``fields.E010`` に変更"
"されました。"

msgid "**postgres.W004**: Base field for array has warnings: ..."
msgstr "**postgres.W004**: 配列のベース・フィールドに次の警告があります: ..."

msgid "``sites``"
msgstr "``sites``"

msgid ""
"The following checks are performed on any model using a :class:`~django."
"contrib.sites.managers.CurrentSiteManager`:"
msgstr ""
"以下のチェックは :class:`~django.contrib.sites.managers.CurrentSiteManager` "
"を使用しているモデルに対して行われます:"

msgid ""
"**sites.E001**: ``CurrentSiteManager`` could not find a field named ``<field "
"name>``."
msgstr ""
"**sites.E001**: ``CurrentSiteManager`` は ``<field name>`` というフィールドを"
"見つけられませんでした。"

msgid ""
"**sites.E002**: ``CurrentSiteManager`` cannot use ``<field>`` as it is not a "
"foreign key or a many-to-many field."
msgstr ""
"**sites.E002**: ``CurrentSiteManager`` は、外部キーや多対多のフィールドではな"
"いため、``<field>`` を使用できません。"

msgid ""
"The following checks verify that :mod:`django.contrib.sites` is correctly "
"configured:"
msgstr ""
"以下のチェックは、:mod:`django.contrib.sites` が正しく設定されているかを確認"
"します: "

msgid "**sites.E101**: The :setting:`SITE_ID` setting must be an integer."
msgstr "**sites.E101**: :setting:`SITE_ID` 設定は整数でなければなりません。"

msgid "``staticfiles``"
msgstr "``staticfiles``"

msgid ""
"The following checks verify that :mod:`django.contrib.staticfiles` is "
"correctly configured:"
msgstr ""
"以下のチェックは、:mod:`django.contrib.staticfiles` が正しく設定されているこ"
"とを確認します。"

msgid ""
"**staticfiles.E001**: The :setting:`STATICFILES_DIRS` setting is not a tuple "
"or list."
msgstr ""
"**staticfiles.E001**: :setting:`STATICFILES_DIRS` 設定がタプルまたはリストで"
"はありません。"

msgid ""
"**staticfiles.E002**: The :setting:`STATICFILES_DIRS` setting should not "
"contain the :setting:`STATIC_ROOT` setting."
msgstr ""
"**staticfiles.E002**: :setting:`STATICFILES_DIRS` 設定に :setting:"
"`STATIC_ROOT` 設定を含めるべきではありません。"

msgid ""
"**staticfiles.E003**: The prefix ``<prefix>`` in the :setting:"
"`STATICFILES_DIRS` setting must not end with a slash."
msgstr ""
"**staticfiles.E003**: :setting:`STATICFILES_DIRS` 設定内のプレフィックス "
"``<prefix>`` はスラッシュで終わってはいけません。"

msgid ""
"**staticfiles.W004**: The directory ``<directory>`` in the :setting:"
"`STATICFILES_DIRS` does not exist."
msgstr ""
"**staticfiles.W004**: ``<directory>`` というディレクトリは、:setting:"
"`STATICFILES_DIRS` 内に存在しません。"

msgid ""
"**staticfiles.E005**: The :setting:`STORAGES` setting must define a "
"``staticfiles`` storage."
msgstr ""
"**staticfiles.E005**: :setting:`STORAGES` 設定は ``staticfiles`` ストレージを"
"定義する必要があります。"

msgid "Base views"
msgstr "ベース・ビュー"

msgid ""
"The following three classes provide much of the functionality needed to "
"create Django views. You may think of them as *parent* views, which can be "
"used by themselves or inherited from. They may not provide all the "
"capabilities required for projects, in which case there are Mixins and "
"Generic class-based views."
msgstr ""
"以下の3つのクラスは、Django のビューの作成に必要な多くの機能を提供します。こ"
"れらは Django ビューの *親の* ビューとみなすことができ、それ自体で使うことも"
"継承して使うこともできます。プロジェクトに必要な全ての機能を提供するわけでは"
"ありませんが、その場合はミックスインとクラスベースのジェネリックビューが使え"
"ます。"

msgid ""
"Many of Django's built-in class-based views inherit from other class-based "
"views or various mixins. Because this inheritance chain is very important, "
"the ancestor classes are  documented under the section title of **Ancestors "
"(MRO)**. MRO is an acronym for Method Resolution Order."
msgstr ""
"多くの Django に組み込みのクラスベースビューは、ほかのクラスベースビューや多"
"種のミックスインを継承しています。この継承の連結は非常に重要なため、原型のク"
"ラスは **継承元 (MRO)** セクションにドキュメントがあります。MRO は メソッド解"
"決順序 (Method Resolution Order) の略です。"

msgid "``View``"
msgstr "``View``"

msgid ""
"The base view class. All other class-based views inherit from this base "
"class. It isn't strictly a generic view and thus can also be imported from "
"``django.views``."
msgstr ""
"基本ビュークラス。他の全てのクラスベースのビューはこの基底クラスを継承しま"
"す。厳密にはジェネリックビューではないので、 ``django.views`` からインポート"
"することもできます。"

msgid "**Method Flowchart**"
msgstr "**メソッドのフローチャート**"

msgid ":meth:`setup()`"
msgstr ":meth:`setup()`"

msgid ":meth:`dispatch()`"
msgstr ":meth:`dispatch()`"

msgid ":meth:`http_method_not_allowed()`"
msgstr ":meth:`http_method_not_allowed()`"

msgid ":meth:`options()`"
msgstr ":meth:`options()`"

msgid "**Example views.py**::"
msgstr "**Example views.py**::"

msgid "**Example urls.py**::"
msgstr "**Example urls.py**::"

msgid "**Attributes**"
msgstr "**属性**"

msgid "The list of HTTP method names that this view will accept."
msgstr "このビューが受け入れる HTTP メソッドの名称のリストです。"

msgid "Default::"
msgstr "デフォルト値::"

msgid "**Methods**"
msgstr "**メソッド**"

msgid "Returns a callable view that takes a request and returns a response::"
msgstr ""
"リクエストを受け取ってレスポンスを返す、呼び出し可能なビューを返します:"

msgid ""
"The returned view has ``view_class`` and ``view_initkwargs`` attributes."
msgstr ""
"返されたビューは、``view_class`` と ``view_initkwargs`` 属性を持っています。"

msgid ""
"When the view is called during the request/response cycle, the :meth:`setup` "
"method assigns the :class:`~django.http.HttpRequest` to the view's "
"``request`` attribute, and any positional and/or keyword arguments :ref:"
"`captured from the URL pattern <how-django-processes-a-request>` to the "
"``args`` and ``kwargs`` attributes, respectively. Then :meth:`dispatch` is "
"called."
msgstr ""
"リクエスト/レスポンスサイクル中にビューが呼び出されると、:meth:`setup` メソッ"
"ドは :class:`~django.http.HttpRequest` をビューの ``request`` 属性に割り当"
"て、:ref:`URLパターンからキャプチャされた位置引数および/またはキーワード引数 "
"<how-django-processes-a-request>` をそれぞれ ``args`` および ``kwargs`` 属性"
"に割り当てます。その後、:meth:`dispatch` が呼び出されます。"

msgid ""
"If a ``View`` subclass defines asynchronous (``async def``) method handlers, "
"``as_view()`` will mark the returned callable as a coroutine function. An "
"``ImproperlyConfigured`` exception will be raised if both asynchronous "
"(``async def``) and synchronous (``def``) handlers are defined on a single "
"view-class."
msgstr ""
"ビューのサブクラスが非同期 (``async def``) メソッドハンドラを定義している場"
"合、 ``as_view()`` は返された呼び出し可能オブジェクトをコルーチン関数として"
"マークします。非同期ハンドラ (``async def``) と同期ハンドラ (``def``) の両方"
"が1つのビュークラスで定義されている場合、 ``ImproperlyConfigured`` 例外が発生"
"します。"

msgid "Performs key view initialization prior to :meth:`dispatch`."
msgstr ""
":meth:`dispatch` の前に、ビューの初期化のための重要な処理を実行します。"

msgid "If overriding this method, you must call ``super()``."
msgstr ""
"このメソッドをオーバーライドする場合は、 ``super()`` を呼び出さなければなりま"
"せん。"

msgid ""
"The ``view`` part of the view -- the method that accepts a ``request`` "
"argument plus arguments, and returns an HTTP response."
msgstr ""
"ビューの ``view`` 部分 -- ``request`` 引数と引数を受け取り、HTTPレスポンスを"
"返すメソッドです。"

msgid ""
"The default implementation will inspect the HTTP method and attempt to "
"delegate to a method that matches the HTTP method; a ``GET`` will be "
"delegated to ``get()``, a ``POST`` to ``post()``, and so on."
msgstr ""
"デフォルトの処理は、HTTP メソッドを調べて、その HTTP メソッドと一致するメソッ"
"ドに処理を委ねるよう試みます。例えば、``GET`` は ``get()`` に、``POST`` は "
"``post()`` に委ねられます。"

msgid ""
"By default, a ``HEAD`` request will be delegated to ``get()``. If you need "
"to handle ``HEAD`` requests in a different way than ``GET``, you can "
"override the ``head()`` method. See :ref:`supporting-other-http-methods` for "
"an example."
msgstr ""
"デフォルトでは、``HEAD`` リクエストは ``get()`` に委ねられます。``HEAD`` リク"
"エストを ``GET`` とは違う方法で操作する必要がある場合は、``head()`` メソッド"
"をオーバーライドできます。例えば :ref:`supporting-other-http-methods` を参照"
"してください。"

msgid ""
"If the view was called with an HTTP method it doesn't support, this method "
"is called instead."
msgstr ""
"ビューがサポートしていない HTTP メソッドで呼び出された場合は、 代わりにこのメ"
"ソッドが呼び出されます。"

msgid ""
"The default implementation returns ``HttpResponseNotAllowed`` with a list of "
"allowed methods in plain text."
msgstr ""
"プレーンテキストで、有効なメソッドのリストともに、``HttpResponseNotAllowed`` "
"を返すデフォルトの処理です。"

msgid ""
"Handles responding to requests for the OPTIONS HTTP verb. Returns a response "
"with the ``Allow`` header containing a list of the view's allowed HTTP "
"method names."
msgstr ""
"OPTIONS HTTP 動詞のためのリクエストへのレスポンスを操作します。ビューの有効"
"な HTTP メソッド名のリストを含む ``Allow`` ヘッダーとともにレスポンスを返しま"
"す。"

msgid ""
"If the other HTTP methods handlers on the class are asynchronous (``async "
"def``) then the response will be wrapped in a coroutine function for use "
"with ``await``."
msgstr ""
"クラスの他のHTTPメソッドハンドラが非同期 (``async def``) である場合、レスポン"
"スは ``await`` で使用するコルーチン関数にラップされます。"

msgid "``TemplateView``"
msgstr "``TemplateView``"

msgid ""
"Renders a given template, with the context containing parameters captured in "
"the URL."
msgstr ""
"URL 内でキャプチャされたパラメータを含むコンテキストとともに、与えられたテン"
"プレートをレンダリングします。"

msgid "**Ancestors (MRO)**"
msgstr "**継承元 (MRO)**"

msgid "This view inherits methods and attributes from the following views:"
msgstr "このメソッドは、以下のビューからメソッドと属性を継承しています:"

msgid ":class:`django.views.generic.base.TemplateResponseMixin`"
msgstr ":class:`django.views.generic.base.TemplateResponseMixin`"

msgid ":class:`django.views.generic.base.ContextMixin`"
msgstr ":class:`django.views.generic.base.ContextMixin`"

msgid ":class:`django.views.generic.base.View`"
msgstr ":class:`django.views.generic.base.View`"

msgid ":meth:`~django.views.generic.base.View.setup()`"
msgstr ":meth:`~django.views.generic.base.View.setup()`"

msgid ":meth:`~django.views.generic.base.View.dispatch()`"
msgstr ":meth:`~django.views.generic.base.View.dispatch()`"

msgid ":meth:`~django.views.generic.base.View.http_method_not_allowed()`"
msgstr ":meth:`~django.views.generic.base.View.http_method_not_allowed()`"

msgid ":meth:`~django.views.generic.base.ContextMixin.get_context_data()`"
msgstr ":meth:`~django.views.generic.base.ContextMixin.get_context_data()`"

msgid "**Context**"
msgstr "**コンテキスト**"

msgid ""
"Populated (through :class:`~django.views.generic.base.ContextMixin`) with "
"the keyword arguments captured from the URL pattern that served the view."
msgstr ""
"(:class:`~django.views.generic.base.ContextMixin` を通じて) ビューに対応した "
"URL パターンからキャプチャされたキーワード引数とともに入力されます。"

msgid ""
"You can also add context using the :attr:`~django.views.generic.base."
"ContextMixin.extra_context` keyword argument for :meth:`~django.views."
"generic.base.View.as_view`."
msgstr ""
":meth:`~django.views.generic.base.View.as_view` に :attr:`~django.views."
"generic.base.ContextMixin.extra_context` キーワード引数を使用して、コンテキス"
"トを追加することもできます。"

msgid "``RedirectView``"
msgstr "``RedirectView``"

msgid "Redirects to a given URL."
msgstr "与えられた URL にリダイレクトします。"

msgid ""
"The given URL may contain dictionary-style string formatting, which will be "
"interpolated against the parameters captured in the URL. Because keyword "
"interpolation is *always* done (even if no arguments are passed in), any "
"``\"%\"`` characters in the URL must be written as ``\"%%\"`` so that Python "
"will convert them to a single percent sign on output."
msgstr ""
"与えられた URL は、辞書形式の文字列フォーマットを含むかもしれず、URL 内でキャ"
"プチャされたパラメータに対して追加されます。キーワード追加は (たとえ引数が渡"
"されなくとも) *常に* 行われるため、Python がアウトプット上でパーセント文字に"
"変換できるように、URL 内のすべての ``\"%\"`` 文字は ``\"%%\"`` と書かれなけれ"
"ばなりません。"

msgid ""
"If the given URL is ``None``, Django will return an ``HttpResponseGone`` "
"(410)."
msgstr ""
"与えられた URL が ``None`` の場合、Djangoは ``HttpResponseGone`` (410) を返し"
"ます。"

msgid "This view inherits methods and attributes from the following view:"
msgstr "このビューは、以下のビューからメソッドと属性を継承します:"

msgid ":meth:`get_redirect_url()`"
msgstr ":meth:`get_redirect_url()`"

msgid ""
"The URL to redirect to, as a string. Or ``None`` to raise a 410 (Gone) HTTP "
"error."
msgstr ""
"リダイレクト先の URL です。もしくは、410 (Gone) HTTP エラーを投げる ``None`` "
"です。"

msgid ""
"The name of the URL pattern to redirect to. Reversing will be done using the "
"same args and kwargs as are passed in for this view."
msgstr ""
"リダイレクト先の URL パターンの名前です。このビューのために渡されてきたものと"
"同じ args と kwargs を使って逆引きされます。"

msgid ""
"Whether the redirect should be permanent. The only difference here is the "
"HTTP status code returned. If ``True``, then the redirect will use status "
"code 301. If ``False``, then the redirect will use status code 302. By "
"default, ``permanent`` is ``False``."
msgstr ""
"リダイレクトがパーマネントかどうかを指定します。ここでの違いは、返される "
"HTTP ステータスコードだけです。``True`` の場合、リダイレクトはステータスコー"
"ド 301 を使います。``False`` の場合は、ステータスコード 302 を使います。デ"
"フォルトでは、``permanent`` は ``False`` です。"

msgid ""
"Whether to pass along the GET query string to the new location. If ``True``, "
"then the query string is appended to the URL. If ``False``, then the query "
"string is discarded. By default, ``query_string`` is ``False``."
msgstr ""
"GET クエリ文字列を新しい場所に渡すかどうかを指定します。``True`` の場合、クエ"
"リ文字列は URL に追加されます。``False`` の場合、クエリ文字列は破棄されま"
"す。 デフォルトでは、``query_string`` は ``False`` です。"

msgid "Constructs the target URL for redirection."
msgstr "リダイレクトのために、対象の URL を組み立てます。"

msgid ""
"The ``args`` and ``kwargs`` arguments are positional and/or keyword "
"arguments :ref:`captured from the URL pattern <how-django-processes-a-"
"request>`, respectively."
msgstr ""
"``args`` と ``kwargs`` 引数は、それぞれ :ref:`URL パターン <how-django-"
"processes-a-request>` から取得した、位置引数および/またはキーワード引数です。"

msgid ""
"The default implementation uses :attr:`url` as a starting string and "
"performs expansion of ``%`` named parameters in that string using the named "
"groups captured in the URL."
msgstr ""
"デフォルトの処理は、:attr:`url` を最初の文字列として使い、URLでキャプチャされ"
"た名前付きグループを使用したその文字列内の名前付き ``%`` パラメータの展開を実"
"行します。"

msgid ""
"If :attr:`url` is not set, ``get_redirect_url()`` tries to reverse the :attr:"
"`pattern_name` using what was captured in the URL (both named and unnamed "
"groups are used)."
msgstr ""
":attr:`url` がセットされていない場合、``get_redirect_url()`` が URLでキャプ"
"チャされたものを使って :attr:`pattern_name` を逆引きしようとします (名前あ"
"り・名前なしグループの両方が使われます)。"

msgid ""
"If requested by :attr:`query_string`, it will also append the query string "
"to the generated URL. Subclasses may implement any behavior they wish, as "
"long as the method returns a redirect-ready URL string."
msgstr ""
":attr:`query_string` によってリクエストされた場合、生成された URL にクエリ文"
"字列を追加します。サブクラスは、メソッドがリダイレクト準備ができた URL 文字列"
"を返す限り、これらが望むとおりの処理をします。"

msgid "Class-based generic views - flattened index"
msgstr "クラスベースのジェネリックビュー: フラットインデックス"

msgid ""
"This index provides an alternate organization of the reference documentation "
"for class-based views. For each view, the effective attributes and methods "
"from the class tree are represented under that view. For the reference "
"documentation organized by the class which defines the behavior, see :doc:"
"`Class-based views</ref/class-based-views/index>`."
msgstr ""
"この索引は、クラスベースビューのリファレンス文書を、異なる観点から編成したも"
"のです。ビューごとに、クラスツリーの有効な属性とメソッドが表されます。動作を"
"定義するクラスの観点から編集されたリファレンス文書は、:doc:`クラスベース"
"ビュー</ref/class-based-views/index>` を参照してください。"

msgid ""
"`Classy Class-Based Views <https://ccbv.co.uk/>`_ provides a nice interface "
"to navigate the class hierarchy of the built-in class-based views."
msgstr ""
"`Classy Class-Based Views <https://ccbv.co.uk/>`_ では、ビルトインのクラス"
"ベースビューのクラスのヒエラルキーがわかりやすく紹介されています。"

msgid "Simple generic views"
msgstr "シンプルなジェネリックビュー"

msgid "**Attributes** (with optional accessor):"
msgstr "*属性* (とオプションのアクセサ):"

msgid ":attr:`~django.views.generic.base.View.http_method_names`"
msgstr ":attr:`~django.views.generic.base.View.http_method_names`"

msgid ":meth:`~django.views.generic.base.View.as_view`"
msgstr ":meth:`~django.views.generic.base.View.as_view`"

msgid ":meth:`~django.views.generic.base.View.dispatch`"
msgstr ":meth:`~django.views.generic.base.View.dispatch`"

msgid "``head()``"
msgstr "``head()``"

msgid ":meth:`~django.views.generic.base.View.http_method_not_allowed`"
msgstr ":meth:`~django.views.generic.base.View.http_method_not_allowed`"

msgid ":meth:`~django.views.generic.base.View.setup`"
msgstr ":meth:`~django.views.generic.base.View.setup`"

msgid ":attr:`~django.views.generic.base.TemplateResponseMixin.content_type`"
msgstr ":attr:`~django.views.generic.base.TemplateResponseMixin.content_type`"

msgid ":attr:`~django.views.generic.base.ContextMixin.extra_context`"
msgstr ":attr:`~django.views.generic.base.ContextMixin.extra_context`"

msgid ""
":attr:`~django.views.generic.base.TemplateResponseMixin.response_class` [:"
"meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`]"
msgstr ""
":attr:`~django.views.generic.base.TemplateResponseMixin.response_class` [:"
"meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`]"

msgid ""
":attr:`~django.views.generic.base.TemplateResponseMixin.template_engine`"
msgstr ""
":attr:`~django.views.generic.base.TemplateResponseMixin.template_engine`"

msgid ""
":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` [:"
"meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names`]"
msgstr ""
":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` [:"
"meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names`]"

msgid "``get()``"
msgstr "``get()``"

msgid ":meth:`~django.views.generic.base.ContextMixin.get_context_data`"
msgstr ":meth:`~django.views.generic.base.ContextMixin.get_context_data`"

msgid ""
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`"
msgstr ""
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`"

msgid ":attr:`~django.views.generic.base.RedirectView.pattern_name`"
msgstr ":attr:`~django.views.generic.base.RedirectView.pattern_name`"

msgid ":attr:`~django.views.generic.base.RedirectView.permanent`"
msgstr ":attr:`~django.views.generic.base.RedirectView.permanent`"

msgid ":attr:`~django.views.generic.base.RedirectView.query_string`"
msgstr ":attr:`~django.views.generic.base.RedirectView.query_string`"

msgid ""
":attr:`~django.views.generic.base.RedirectView.url` [:meth:`~django.views."
"generic.base.RedirectView.get_redirect_url`]"
msgstr ""
":attr:`~django.views.generic.base.RedirectView.url` [:meth:`~django.views."
"generic.base.RedirectView.get_redirect_url`]"

msgid "``delete()``"
msgstr "``delete()``"

msgid "``options()``"
msgstr "``options()``"

msgid "``post()``"
msgstr "``post()``"

msgid "``put()``"
msgstr "``put()``"

msgid "Detail Views"
msgstr "詳細ビュー"

msgid "``DetailView``"
msgstr "``DetailView``"

msgid ""
":attr:`~django.views.generic.detail.SingleObjectMixin.context_object_name` [:"
"meth:`~django.views.generic.detail.SingleObjectMixin."
"get_context_object_name`]"
msgstr ""
":attr:`~django.views.generic.detail.SingleObjectMixin.context_object_name` [:"
"meth:`~django.views.generic.detail.SingleObjectMixin."
"get_context_object_name`]"

msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.model`"
msgstr ":attr:`~django.views.generic.detail.SingleObjectMixin.model`"

msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.pk_url_kwarg`"
msgstr ":attr:`~django.views.generic.detail.SingleObjectMixin.pk_url_kwarg`"

msgid ""
":attr:`~django.views.generic.detail.SingleObjectMixin.query_pk_and_slug`"
msgstr ""
":attr:`~django.views.generic.detail.SingleObjectMixin.query_pk_and_slug`"

msgid ""
":attr:`~django.views.generic.detail.SingleObjectMixin.queryset` [:meth:"
"`~django.views.generic.detail.SingleObjectMixin.get_queryset`]"
msgstr ""
":attr:`~django.views.generic.detail.SingleObjectMixin.queryset` [:meth:"
"`~django.views.generic.detail.SingleObjectMixin.get_queryset`]"

msgid ""
":attr:`~django.views.generic.detail.SingleObjectMixin.slug_field` [:meth:"
"`~django.views.generic.detail.SingleObjectMixin.get_slug_field`]"
msgstr ""
":attr:`~django.views.generic.detail.SingleObjectMixin.slug_field` [:meth:"
"`~django.views.generic.detail.SingleObjectMixin.get_slug_field`]"

msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.slug_url_kwarg`"
msgstr ":attr:`~django.views.generic.detail.SingleObjectMixin.slug_url_kwarg`"

msgid ""
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin."
"template_name_field`"
msgstr ""
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin."
"template_name_field`"

msgid ""
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin."
"template_name_suffix`"
msgstr ""
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin."
"template_name_suffix`"

msgid ":meth:`~django.views.generic.detail.BaseDetailView.get`"
msgstr ":meth:`~django.views.generic.detail.BaseDetailView.get`"

msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data`"
msgstr ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data`"

msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_object`"
msgstr ":meth:`~django.views.generic.detail.SingleObjectMixin.get_object`"

msgid "List Views"
msgstr "リストビュー"

msgid "``ListView``"
msgstr "``ListView``"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_allow_empty`]"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_allow_empty`]"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.context_object_name` [:"
"meth:`~django.views.generic.list.MultipleObjectMixin."
"get_context_object_name`]"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectMixin.context_object_name` [:"
"meth:`~django.views.generic.list.MultipleObjectMixin."
"get_context_object_name`]"

msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.model`"
msgstr ":attr:`~django.views.generic.list.MultipleObjectMixin.model`"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.ordering` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_ordering`]"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectMixin.ordering` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_ordering`]"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.paginate_by` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_paginate_by`]"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectMixin.paginate_by` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_paginate_by`]"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.paginate_orphans` [:"
"meth:`~django.views.generic.list.MultipleObjectMixin.get_paginate_orphans`]"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectMixin.paginate_orphans` [:"
"meth:`~django.views.generic.list.MultipleObjectMixin.get_paginate_orphans`]"

msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.paginator_class`"
msgstr ":attr:`~django.views.generic.list.MultipleObjectMixin.paginator_class`"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.queryset` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_queryset`]"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectMixin.queryset` [:meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_queryset`]"

msgid ""
":attr:`~django.views.generic.list.MultipleObjectTemplateResponseMixin."
"template_name_suffix`"
msgstr ""
":attr:`~django.views.generic.list.MultipleObjectTemplateResponseMixin."
"template_name_suffix`"

msgid ":meth:`~django.views.generic.list.BaseListView.get`"
msgstr ":meth:`~django.views.generic.list.BaseListView.get`"

msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_data`"
msgstr ""
":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_data`"

msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_paginator`"
msgstr ":meth:`~django.views.generic.list.MultipleObjectMixin.get_paginator`"

msgid ""
":meth:`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`"
msgstr ""
":meth:`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`"

msgid "Editing views"
msgstr "編集ビュー"

msgid "``FormView``"
msgstr "``FormView``"

msgid ""
":attr:`~django.views.generic.edit.FormMixin.form_class` [:meth:`~django."
"views.generic.edit.FormMixin.get_form_class`]"
msgstr ""
":attr:`~django.views.generic.edit.FormMixin.form_class` [:meth:`~django."
"views.generic.edit.FormMixin.get_form_class`]"

msgid ""
":attr:`~django.views.generic.edit.FormMixin.initial` [:meth:`~django.views."
"generic.edit.FormMixin.get_initial`]"
msgstr ""
":attr:`~django.views.generic.edit.FormMixin.initial` [:meth:`~django.views."
"generic.edit.FormMixin.get_initial`]"

msgid ""
":attr:`~django.views.generic.edit.FormMixin.prefix` [:meth:`~django.views."
"generic.edit.FormMixin.get_prefix`]"
msgstr ""
":attr:`~django.views.generic.edit.FormMixin.prefix` [:meth:`~django.views."
"generic.edit.FormMixin.get_prefix`]"

msgid ""
":attr:`~django.views.generic.edit.FormMixin.success_url` [:meth:`~django."
"views.generic.edit.FormMixin.get_success_url`]"
msgstr ""
":attr:`~django.views.generic.edit.FormMixin.success_url` [:meth:`~django."
"views.generic.edit.FormMixin.get_success_url`]"

msgid ":meth:`~django.views.generic.edit.FormMixin.form_invalid`"
msgstr ":meth:`~django.views.generic.edit.FormMixin.form_invalid`"

msgid ":meth:`~django.views.generic.edit.FormMixin.form_valid`"
msgstr ":meth:`~django.views.generic.edit.FormMixin.form_valid`"

msgid ":meth:`~django.views.generic.edit.ProcessFormView.get`"
msgstr ":meth:`~django.views.generic.edit.ProcessFormView.get`"

msgid ":meth:`~django.views.generic.edit.FormMixin.get_context_data`"
msgstr ":meth:`~django.views.generic.edit.FormMixin.get_context_data`"

msgid ":meth:`~django.views.generic.edit.FormMixin.get_form`"
msgstr ":meth:`~django.views.generic.edit.FormMixin.get_form`"

msgid ":meth:`~django.views.generic.edit.FormMixin.get_form_kwargs`"
msgstr ":meth:`~django.views.generic.edit.FormMixin.get_form_kwargs`"

msgid ":meth:`~django.views.generic.edit.ProcessFormView.post`"
msgstr ":meth:`~django.views.generic.edit.ProcessFormView.post`"

msgid ":meth:`~django.views.generic.edit.ProcessFormView.put`"
msgstr ":meth:`~django.views.generic.edit.ProcessFormView.put`"

msgid "``CreateView``"
msgstr "``CreateView``"

msgid ":attr:`~django.views.generic.edit.ModelFormMixin.fields`"
msgstr ":attr:`~django.views.generic.edit.ModelFormMixin.fields`"

msgid ""
":attr:`~django.views.generic.edit.FormMixin.form_class` [:meth:`~django."
"views.generic.edit.ModelFormMixin.get_form_class`]"
msgstr ""
":attr:`~django.views.generic.edit.FormMixin.form_class` [:meth:`~django."
"views.generic.edit.ModelFormMixin.get_form_class`]"

msgid ""
":attr:`~django.views.generic.edit.FormMixin.success_url` [:meth:`~django."
"views.generic.edit.ModelFormMixin.get_success_url`]"
msgstr ""
":attr:`~django.views.generic.edit.FormMixin.success_url` [:meth:`~django."
"views.generic.edit.ModelFormMixin.get_success_url`]"

msgid ":meth:`~django.views.generic.edit.ModelFormMixin.form_valid`"
msgstr ":meth:`~django.views.generic.edit.ModelFormMixin.form_valid`"

msgid ":meth:`~django.views.generic.edit.ModelFormMixin.get_form_kwargs`"
msgstr ":meth:`~django.views.generic.edit.ModelFormMixin.get_form_kwargs`"

msgid "``UpdateView``"
msgstr "``UpdateView``"

msgid "``DeleteView``"
msgstr "``DeleteView``"

msgid ""
":attr:`~django.views.generic.edit.DeletionMixin.success_url` [:meth:`~django."
"views.generic.edit.DeletionMixin.get_success_url`]"
msgstr ""
":attr:`~django.views.generic.edit.DeletionMixin.success_url` [:meth:`~django."
"views.generic.edit.DeletionMixin.get_success_url`]"

msgid "Date-based views"
msgstr "日付ベースのビュー"

msgid "``ArchiveIndexView``"
msgstr "``ArchiveIndexView``"

msgid ""
":attr:`~django.views.generic.dates.DateMixin.allow_future` [:meth:`~django."
"views.generic.dates.DateMixin.get_allow_future`]"
msgstr ""
":attr:`~django.views.generic.dates.DateMixin.allow_future` [:meth:`~django."
"views.generic.dates.DateMixin.get_allow_future`]"

msgid ""
":attr:`~django.views.generic.dates.DateMixin.date_field` [:meth:`~django."
"views.generic.dates.DateMixin.get_date_field`]"
msgstr ""
":attr:`~django.views.generic.dates.DateMixin.date_field` [:meth:`~django."
"views.generic.dates.DateMixin.get_date_field`]"

msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_date_list`"
msgstr ":meth:`~django.views.generic.dates.BaseDateListView.get_date_list`"

msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_dated_items`"
msgstr ":meth:`~django.views.generic.dates.BaseDateListView.get_dated_items`"

msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_dated_queryset`"
msgstr ""
":meth:`~django.views.generic.dates.BaseDateListView.get_dated_queryset`"

msgid "``YearArchiveView``"
msgstr "``YearArchiveView``"

msgid ""
":attr:`~django.views.generic.dates.YearArchiveView.make_object_list` [:meth:"
"`~django.views.generic.dates.YearArchiveView.get_make_object_list`]"
msgstr ""
":attr:`~django.views.generic.dates.YearArchiveView.make_object_list` [:meth:"
"`~django.views.generic.dates.YearArchiveView.get_make_object_list`]"

msgid ""
":attr:`~django.views.generic.dates.YearMixin.year` [:meth:`~django.views."
"generic.dates.YearMixin.get_year`]"
msgstr ""
":attr:`~django.views.generic.dates.YearMixin.year` [:meth:`~django.views."
"generic.dates.YearMixin.get_year`]"

msgid ""
":attr:`~django.views.generic.dates.YearMixin.year_format` [:meth:`~django."
"views.generic.dates.YearMixin.get_year_format`]"
msgstr ""
":attr:`~django.views.generic.dates.YearMixin.year_format` [:meth:`~django."
"views.generic.dates.YearMixin.get_year_format`]"

msgid "``MonthArchiveView``"
msgstr "``MonthArchiveView``"

msgid ""
":attr:`~django.views.generic.dates.MonthMixin.month` [:meth:`~django.views."
"generic.dates.MonthMixin.get_month`]"
msgstr ""
":attr:`~django.views.generic.dates.MonthMixin.month` [:meth:`~django.views."
"generic.dates.MonthMixin.get_month`]"

msgid ""
":attr:`~django.views.generic.dates.MonthMixin.month_format` [:meth:`~django."
"views.generic.dates.MonthMixin.get_month_format`]"
msgstr ""
":attr:`~django.views.generic.dates.MonthMixin.month_format` [:meth:`~django."
"views.generic.dates.MonthMixin.get_month_format`]"

msgid ":meth:`~django.views.generic.dates.MonthMixin.get_next_month`"
msgstr ":meth:`~django.views.generic.dates.MonthMixin.get_next_month`"

msgid ":meth:`~django.views.generic.dates.MonthMixin.get_previous_month`"
msgstr ":meth:`~django.views.generic.dates.MonthMixin.get_previous_month`"

msgid "``WeekArchiveView``"
msgstr "``WeekArchiveView``"

msgid ""
":attr:`~django.views.generic.dates.WeekMixin.week` [:meth:`~django.views."
"generic.dates.WeekMixin.get_week`]"
msgstr ""
":attr:`~django.views.generic.dates.WeekMixin.week` [:meth:`~django.views."
"generic.dates.WeekMixin.get_week`]"

msgid ""
":attr:`~django.views.generic.dates.WeekMixin.week_format` [:meth:`~django."
"views.generic.dates.WeekMixin.get_week_format`]"
msgstr ""
":attr:`~django.views.generic.dates.WeekMixin.week_format` [:meth:`~django."
"views.generic.dates.WeekMixin.get_week_format`]"

msgid "``DayArchiveView``"
msgstr "``DayArchiveView``"

msgid ""
":attr:`~django.views.generic.dates.DayMixin.day` [:meth:`~django.views."
"generic.dates.DayMixin.get_day`]"
msgstr ""
":attr:`~django.views.generic.dates.DayMixin.day` [:meth:`~django.views."
"generic.dates.DayMixin.get_day`]"

msgid ""
":attr:`~django.views.generic.dates.DayMixin.day_format` [:meth:`~django."
"views.generic.dates.DayMixin.get_day_format`]"
msgstr ""
":attr:`~django.views.generic.dates.DayMixin.day_format` [:meth:`~django."
"views.generic.dates.DayMixin.get_day_format`]"

msgid ":meth:`~django.views.generic.dates.DayMixin.get_next_day`"
msgstr ":meth:`~django.views.generic.dates.DayMixin.get_next_day`"

msgid ":meth:`~django.views.generic.dates.DayMixin.get_previous_day`"
msgstr ":meth:`~django.views.generic.dates.DayMixin.get_previous_day`"

msgid "``TodayArchiveView``"
msgstr "``TodayArchiveView``"

msgid "``DateDetailView``"
msgstr "``DateDetailView``"

msgid "Generic date views"
msgstr "ジェネリック日付ビュー"

msgid ""
"Date-based generic views, provided in :mod:`django.views.generic.dates`, are "
"views for displaying drilldown pages for date-based data."
msgstr ""
"日付ベースのジェネリックビュー (:mod:`django.views.generic.dates` 内で提供さ"
"れています) は、日付ベースのデータのために、ドリルダウンページを描画するため"
"のビューです。"

msgid ""
"Some of the examples on this page assume that an ``Article`` model has been "
"defined as follows in ``myapp/models.py``::"
msgstr ""
"このページの例のいくつかは、``myapp/models.py`` 内で下記の通り ``Article`` モ"
"デルが定義されていると仮定します::"

msgid ""
"A top-level index page showing the \"latest\" objects, by date. Objects with "
"a date in the *future* are not included unless you set ``allow_future`` to "
"``True``."
msgstr ""
"\"最新の\"オブジェクトを、日付によって表示するトップレベルのインデックスペー"
"ジです。``allow_future`` を ``True`` にセットしない限り、*未来* の日付のオブ"
"ジェクトは含まれません。"

msgid ":class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`"
msgstr ":class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`"

msgid ":class:`django.views.generic.dates.BaseArchiveIndexView`"
msgstr ":class:`django.views.generic.dates.BaseArchiveIndexView`"

msgid ":class:`django.views.generic.dates.BaseDateListView`"
msgstr ":class:`django.views.generic.dates.BaseDateListView`"

msgid ":class:`django.views.generic.list.MultipleObjectMixin`"
msgstr ":class:`django.views.generic.list.MultipleObjectMixin`"

msgid ":class:`django.views.generic.dates.DateMixin`"
msgstr ":class:`django.views.generic.dates.DateMixin`"

msgid ""
"In addition to the context provided by :class:`django.views.generic.list."
"MultipleObjectMixin` (via :class:`django.views.generic.dates."
"BaseDateListView`), the template's context will be:"
msgstr ""
"(:class:`django.views.generic.dates.BaseDateListView` を通じた) :class:"
"`django.views.generic.list.MultipleObjectMixin` によって提供されたコンテキス"
"トに加えて、テンプレートのコンテキストは以下のようになります:"

msgid ""
"``date_list``: A :meth:`QuerySet <django.db.models.query.QuerySet.dates>` "
"object containing all years that have objects available according to "
"``queryset``, represented as :class:`datetime.datetime` objects, in "
"descending order."
msgstr ""
"``date_list``: ``queryset`` に従ってオブジェクトを利用可能にするすべての年を"
"含む :meth:`QuerySet <django.db.models.query.QuerySet.dates>` オブジェクトで"
"す。:class:`datetime.datetime` オブジェクトとして表され、降順で表示されます。"

msgid "**Notes**"
msgstr "**ノート**"

msgid "Uses a default ``context_object_name`` of ``latest``."
msgstr "デフォルトの ``最新`` の ``context_object_name`` を使います。"

msgid "Uses a default ``template_name_suffix`` of ``_archive``."
msgstr "デフォルトの ``_archive`` の ``template_name_suffix`` を使います。"

msgid ""
"Defaults to providing ``date_list`` by year, but this can be altered to "
"month or day using the attribute ``date_list_period``. This also applies to "
"all subclass views."
msgstr ""
"年によって ``date_list`` を提供する動作がデフォルトですが、"
"``date_list_period`` 属性を用いた月や日に変更できます。これは、すべてのサブク"
"ラスのビューに適用されます。"

msgid "**Example myapp/urls.py**::"
msgstr "**例 myapp/urls.py**::"

msgid "**Example myapp/article_archive.html**:"
msgstr "**例 myapp/article_archive.html**:"

msgid "This will output all articles."
msgstr "これは、すべての記事 (article) を出力します。"

msgid ""
"A yearly archive page showing all available months in a given year. Objects "
"with a date in the *future* are not displayed unless you set "
"``allow_future`` to ``True``."
msgstr ""
"与えられた年の中で有効な月を表示する、年次のアーカイブページです。"
"``allow_future`` を ``True`` にセットしない限り、*未来* の日付を伴うオブジェ"
"クトは表示されません。"

msgid ":class:`django.views.generic.dates.BaseYearArchiveView`"
msgstr ":class:`django.views.generic.dates.BaseYearArchiveView`"

msgid ":class:`django.views.generic.dates.YearMixin`"
msgstr ":class:`django.views.generic.dates.YearMixin`"

msgid ""
"A boolean specifying whether to retrieve the full list of objects for this "
"year and pass those to the template. If ``True``, the list of objects will "
"be made available to the context. If ``False``, the ``None`` queryset will "
"be used as the object list. By default, this is ``False``."
msgstr ""
"この年のオブジェクトの全リストを取得し、テンプレートに渡すかどうかを指定する"
"真偽値。もし ``True`` なら、オブジェクトのリストがコンテキストで利用可能にな"
"ります。 ``False`` の場合、オブジェクトリストとして ``None`` クエリセットが使"
"用されます。デフォルトでは ``False`` です。"

msgid ""
"Determine if an object list will be returned as part of the context. "
"Returns :attr:`~YearArchiveView.make_object_list` by default."
msgstr ""
"オブジェクトリストをコンテキストの一部として返すかどうかを決定します。デフォ"
"ルトでは :attr:`~YearArchiveView.make_object_list` を返します。"

msgid ""
"``date_list``: A :meth:`QuerySet <django.db.models.query.QuerySet.dates>` "
"object containing all months that have objects available according to "
"``queryset``, represented as :class:`datetime.datetime` objects, in "
"ascending order."
msgstr ""
"``date_list``: :meth:`QuerySet <django.db.models.query.QuerySet.dates>` オブ"
"ジェクトで、 :class:`datetime.datetime` オブジェクトとして昇順に表現された、 "
"``queryset`` に従って利用可能なオブジェクトを持つ全ての月を含みます。"

msgid "``year``: A :class:`~datetime.date` object representing the given year."
msgstr "``year``: 与えられた年を表す :class:`~datetime.date` オブジェクト。"

msgid ""
"``next_year``: A :class:`~datetime.date` object representing the first day "
"of the next year, according to :attr:`~BaseDateListView.allow_empty` and :"
"attr:`~DateMixin.allow_future`."
msgstr ""
"``next_year``: :attr:`~BaseDateListView.allow_empty` と :attr:`~DateMixin."
"allow_future` に従って、次の年の最初の日を表す :class:`~datetime.date` オブ"
"ジェクト。"

msgid ""
"``previous_year``: A :class:`~datetime.date` object representing the first "
"day of the previous year, according to :attr:`~BaseDateListView.allow_empty` "
"and :attr:`~DateMixin.allow_future`."
msgstr ""
"``previous_year``: :class:`~datetime.date` オブジェクト。 :attr:"
"`~BaseDateListView.allow_empty` と :attr:`~DateMixin.allow_future` に従いま"
"す。"

msgid "Uses a default ``template_name_suffix`` of ``_archive_year``."
msgstr "デフォルトの ``template_name_suffix`` は ``_archive_year`` です。"

msgid "**Example myapp/views.py**::"
msgstr "**例 myapp/views.py**:"

msgid "**Example myapp/article_archive_year.html**:"
msgstr "**例 myapp/article_archive_year.html**:"

msgid ""
"A monthly archive page showing all objects in a given month. Objects with a "
"date in the *future* are not displayed unless you set ``allow_future`` to "
"``True``."
msgstr ""
"与えられた月の中で有効な全オブジェクトを表示する、月次のアーカイブページで"
"す。``allow_future`` を ``True`` にセットしない限り、*未来* の日付を伴うオブ"
"ジェクトは表示されません。"

msgid ":class:`django.views.generic.dates.BaseMonthArchiveView`"
msgstr ":class:`django.views.generic.dates.BaseMonthArchiveView`"

msgid ":class:`django.views.generic.dates.MonthMixin`"
msgstr ":class:`django.views.generic.dates.MonthMixin`"

msgid ""
"In addition to the context provided by :class:`~django.views.generic.list."
"MultipleObjectMixin` (via :class:`~django.views.generic.dates."
"BaseDateListView`), the template's context will be:"
msgstr ""
":class:`~django.views.generic.list.MultipleObjectMixin` (:class:`~django."
"views.generic.dates.BaseDateListView` 経由) によって提供されるコンテキストに"
"加えて、テンプレートのコンテキストも提供されます："

msgid ""
"``date_list``: A :meth:`QuerySet <django.db.models.query.QuerySet.dates>` "
"object containing all days that have objects available in the given month, "
"according to ``queryset``, represented as :class:`datetime.datetime` "
"objects, in ascending order."
msgstr ""
"``date_list``: :meth:`QuerySet <django.db.models.query.QuerySet.dates>` オブ"
"ジェクトで、 ``queryset`` に従って、与えられた月にオブジェクトが利用可能な全"
"ての日を、 :class:`datetime.datetime` オブジェクトとして昇順で表します。"

msgid ""
"``month``: A :class:`~datetime.date` object representing the given month."
msgstr "``month``: 与えられた月を表す :class:`~datetime.date` オブジェクト。"

msgid ""
"``next_month``: A :class:`~datetime.date` object representing the first day "
"of the next month, according to :attr:`~BaseDateListView.allow_empty` and :"
"attr:`~DateMixin.allow_future`."
msgstr ""
"``next_month``: :attr:`~BaseDateListView.allow_empty` と :attr:`~DateMixin."
"allow_future` に従って、次の月の最初の日を表す :class:`~datetime.date` オブ"
"ジェクト。"

msgid ""
"``previous_month``: A :class:`~datetime.date` object representing the first "
"day of the previous month, according to :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"``previous_month``: :attr:`~BaseDateListView.allow_empty` と :attr:"
"`~DateMixin.allow_future` に従って、前月の最初の日を表す :class:`~datetime."
"date` オブジェクト。"

msgid "Uses a default ``template_name_suffix`` of ``_archive_month``."
msgstr "デフォルトの ``template_name_suffix`` は ``_archive_month`` です。"

msgid "**Example myapp/article_archive_month.html**:"
msgstr "**例 myapp/article_archive_month.html**:"

msgid ""
"A weekly archive page showing all objects in a given week. Objects with a "
"date in the *future* are not displayed unless you set ``allow_future`` to "
"``True``."
msgstr ""
"与えられた週の中で有効な全オブジェクトを表示する、週次のアーカイブページで"
"す。``allow_future`` を ``True`` にセットしない限り、*未来* の日付を伴うオブ"
"ジェクトは表示されません。"

msgid ":class:`django.views.generic.dates.BaseWeekArchiveView`"
msgstr ":class:`django.views.generic.dates.BaseWeekArchiveView`"

msgid ":class:`django.views.generic.dates.WeekMixin`"
msgstr ":class:`django.views.generic.dates.WeekMixin`"

msgid ""
"``week``: A :class:`~datetime.date` object representing the first day of the "
"given week."
msgstr ""
"``week``: 指定した週の最初の日を表す :class:`~datetime.date` オブジェクト。"

msgid ""
"``next_week``: A :class:`~datetime.date` object representing the first day "
"of the next week, according to :attr:`~BaseDateListView.allow_empty` and :"
"attr:`~DateMixin.allow_future`."
msgstr ""
"``next_week``: :attr:`~BaseDateListView.allow_empty` と :attr:`~DateMixin."
"allow_future` に従って、次の週の最初の日を表す :class:`~datetime.date` オブ"
"ジェクト。"

msgid ""
"``previous_week``: A :class:`~datetime.date` object representing the first "
"day of the previous week, according to :attr:`~BaseDateListView.allow_empty` "
"and :attr:`~DateMixin.allow_future`."
msgstr ""
"``previous_week``: :attr:`~BaseDateListView.allow_empty` と :attr:"
"`~DateMixin.allow_future` に従って、前の週の最初の日を表す :class:`~datetime."
"date` オブジェクト。 "

msgid "Uses a default ``template_name_suffix`` of ``_archive_week``."
msgstr "デフォルトの ``template_name_suffix`` は ``_archive_week`` です。"

msgid ""
"The ``week_format`` attribute is a :func:`~time.strptime` format string used "
"to parse the week number. The following values are supported:"
msgstr ""
"``week_format`` 属性は :func:`~time.strptime` フォーマット文字列で、週番号を"
"パースするために使用されます。以下の値がサポートされています："

msgid ""
"``'%U'``: Based on the United States week system where the week begins on "
"Sunday. This is the default value."
msgstr ""
"``'%U'``: 日曜日が週の始まりとなるアメリカ合衆国の週システムに基づきます。こ"
"れはデフォルト値です。"

msgid ""
"``'%W'``: Similar to ``'%U'``, except it assumes that the week begins on "
"Monday. This is not the same as the ISO 8601 week number."
msgstr ""
"``'%W'``: ``'%U'`` と似ていますが、週が月曜日から始まると仮定している点が異な"
"ります。これはISO 8601の週番号とは異なります。"

msgid "``'%V'``: ISO 8601 week number where the week begins on Monday."
msgstr "``'%V'``: 週が月曜日から始まるISO 8601の週番号。"

msgid "**Example myapp/article_archive_week.html**:"
msgstr "**例 myapp/article_archive_week.html**:"

msgid ""
"In this example, you are outputting the week number. Keep in mind that week "
"numbers computed by the :tfilter:`date` template filter with the ``'W'`` "
"format character are not always the same as those computed by :func:`~time."
"strftime` and :func:`~time.strptime` with the ``'%W'`` format string. For "
"year 2015, for example, week numbers output by :tfilter:`date` are higher by "
"one compared to those output by :func:`~time.strftime`. There isn't an "
"equivalent for the ``'%U'`` :func:`~time.strftime` format string in :tfilter:"
"`date`. Therefore, you should avoid using :tfilter:`date` to generate URLs "
"for ``WeekArchiveView``."
msgstr ""
"この例では週番号を出力しています。 テンプレートフィルタの :tfilter:`date` が "
"``'W'`` フォーマット文字列で計算した週番号は、 :func:`~time.strftime` や :"
"func:`~time.strptime` が ``'%W'`` フォーマット文字列で計算した週番号と必ずし"
"も同じではないことに注意してください。例えば2015年の場合、 :tfilter:`date` が"
"出力する週番号は :func:`~time.strftime` が出力する週番号よりも1つ大きくなりま"
"す。:tfilter:`date` には ``'%U'`` :func:`~time.strftime` の書式文字列と等価な"
"ものはありません。そのため、 :tfilter:`date` を使って ``WeekArchiveView`` の "
"URL を生成することは避けるべきです。"

msgid ""
"A day archive page showing all objects in a given day. Days in the future "
"throw a 404 error, regardless of whether any objects exist for future days, "
"unless you set ``allow_future`` to ``True``."
msgstr ""
"与えられた日の中で有効な全オブジェクトを表示する、日次のアーカイブページで"
"す。``allow_future`` を ``True`` にセットしない限り、未来の日付に対するオブ"
"ジェクトがするかどうかにかかわらず、未来の日付は 404 エラーを返します。"

msgid ":class:`django.views.generic.dates.BaseDayArchiveView`"
msgstr ":class:`django.views.generic.dates.BaseDayArchiveView`"

msgid ":class:`django.views.generic.dates.DayMixin`"
msgstr ":class:`django.views.generic.dates.DayMixin`"

msgid "``day``: A :class:`~datetime.date` object representing the given day."
msgstr "``day``: 指定した日を表す :class:`~datetime.date` オブジェクト。"

msgid ""
"``next_day``: A :class:`~datetime.date` object representing the next day, "
"according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin."
"allow_future`."
msgstr ""
"``next_day``: :attr:`~BaseDateListView.allow_empty` と :attr:`~DateMixin."
"allow_future` に従って、次の日を表す :class:`~datetime.date` オブジェクト。"

msgid ""
"``previous_day``: A :class:`~datetime.date` object representing the previous "
"day, according to :attr:`~BaseDateListView.allow_empty` and :attr:"
"`~DateMixin.allow_future`."
msgstr ""
"``previous_day``: :attr:`~BaseDateListView.allow_empty` と :attr:`~DateMixin."
"allow_future` に従って、前日を表す :class:`~datetime.date` オブジェクト。"

msgid "Uses a default ``template_name_suffix`` of ``_archive_day``."
msgstr "デフォルトの ``template_name_suffix`` は ``_archive_day`` です。"

msgid "**Example myapp/article_archive_day.html**:"
msgstr "**例 myapp/article_archive_day.html**:"

msgid ""
"A day archive page showing all objects for *today*. This is exactly the same "
"as :class:`django.views.generic.dates.DayArchiveView`, except today's date "
"is used instead of the ``year``/``month``/``day`` arguments."
msgstr ""
"*今日* の全てのオブジェクトを表示する、日時のアーカイブページです。``年`` / "
"``月`` / ``日`` 引数の代わりに今日の日付が使われること以外は、:class:`django."
"views.generic.dates.DayArchiveView` とまったく同じです。"

msgid ":class:`django.views.generic.dates.BaseTodayArchiveView`"
msgstr ":class:`django.views.generic.dates.BaseTodayArchiveView`"

msgid "Uses a default ``template_name_suffix`` of ``_archive_today``."
msgstr "デフォルトの ``template_name_suffix`` は ``_archive_today`` です。"

msgid "Where is the example template for ``TodayArchiveView``?"
msgstr "``TodayArchiveView`` のテンプレート例はどこにありますか？"

msgid ""
"This view uses by default the same template as the :class:`~DayArchiveView`, "
"which is in the previous example. If you need a different template, set the "
"``template_name`` attribute to be the name of the new template."
msgstr ""
"このビューは、:class:`~DayArchiveView` と同じテンプレートをデフォルトで使用し"
"ます。違うテンプレートが必要な場合は、``template_name`` 属性に新しいテンプ"
"レートの名前をセットしてください。"

msgid ""
"A page representing an individual object. If the object has a date value in "
"the future, the view will throw a 404 error by default, unless you set "
"``allow_future`` to ``True``."
msgstr ""
"個別のオブジェクトを表示するページです。オブジェクトが未来の日付値を持ってい"
"る場合、``allow_future`` を ``True`` にセットしない限り、デフォルトでビュー"
"は 404 エラーを返します。"

msgid ":class:`django.views.generic.detail.SingleObjectTemplateResponseMixin`"
msgstr ":class:`django.views.generic.detail.SingleObjectTemplateResponseMixin`"

msgid ":class:`django.views.generic.dates.BaseDateDetailView`"
msgstr ":class:`django.views.generic.dates.BaseDateDetailView`"

msgid ":class:`django.views.generic.detail.BaseDetailView`"
msgstr ":class:`django.views.generic.detail.BaseDetailView`"

msgid ":class:`django.views.generic.detail.SingleObjectMixin`"
msgstr ":class:`django.views.generic.detail.SingleObjectMixin`"

msgid ""
"Includes the single object associated with the ``model`` specified in the "
"``DateDetailView``."
msgstr ""
"``DateDetailView`` で指定された ``model`` に関連付けられたオブジェクトを1つだ"
"け含みます。"

msgid "Uses a default ``template_name_suffix`` of ``_detail``."
msgstr "デフォルトの ``template_name_suffix`` は ``_detail`` です。"

msgid "**Example myapp/article_detail.html**:"
msgstr "**例 myapp/article_detail.html**:"

msgid ""
"All of the generic views listed above have matching ``Base`` views that only "
"differ in that they do not include the :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin` (for the archive views) or :class:"
"`~django.views.generic.detail.SingleObjectTemplateResponseMixin` (for the :"
"class:`DateDetailView`):"
msgstr ""
"上に挙げたすべてのジェネリックビューは、 :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin` (アーカイブビューの場合) や :class:"
"`~django.views.generic.detail.SingleObjectTemplateResponseMixin` (:class:"
"`DateDetailView` の場合) を含まないというだけで、同じ ``Base`` ビューを持って"
"います："

msgid "Generic display views"
msgstr "ジェネリック表示ビュー (Generic display view)"

msgid ""
"The two following generic class-based views are designed to display data. On "
"many projects they are typically the most commonly used views."
msgstr ""
"以下の2つのクラスベースのジェネリックビューは、データを表示 (display) するた"
"めに設計されています。多くのプロジェクトで、これらは最もよく使われるビューで"
"す。"

msgid ""
"While this view is executing, ``self.object`` will contain the object that "
"the view is operating upon."
msgstr ""
"このビューが動作している間、``self.object`` はビューが操作しているオブジェク"
"トを含みます。"

msgid ""
":meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()`"
msgstr ""
":meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()`"

msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_slug_field()`"
msgstr ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_slug_field()`"

msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_queryset()`"
msgstr ":meth:`~django.views.generic.detail.SingleObjectMixin.get_queryset()`"

msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_object()`"
msgstr ":meth:`~django.views.generic.detail.SingleObjectMixin.get_object()`"

msgid ""
":meth:`~django.views.generic.detail.SingleObjectMixin."
"get_context_object_name()`"
msgstr ""
":meth:`~django.views.generic.detail.SingleObjectMixin."
"get_context_object_name()`"

msgid ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data()`"
msgstr ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data()`"

msgid ""
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`"
msgstr ""
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`"

msgid ""
"A base view for displaying a single object. It is not intended to be used "
"directly, but rather as a parent class of the :class:`django.views.generic."
"detail.DetailView` or other views representing details of a single object."
msgstr ""
"単一のオブジェクトを表示するための基本ビューです。直接使用するのではなく、 :"
"class:`django.views.generic.detail.DetailView` や他のオブジェクトの詳細を表示"
"するビューの親クラスとして使用することを想定しています。"

msgid "Adds ``object`` to the context."
msgstr "``object`` をコンテキストに追加します。"

msgid "A page representing a list of objects."
msgstr "オブジェクトのリストを表示するページです。"

msgid ""
"While this view is executing, ``self.object_list`` will contain the list of "
"objects (usually, but not necessarily a queryset) that the view is operating "
"upon."
msgstr ""
"このビューが動作している間、``self.object_list`` はビューが操作しているオブ"
"ジェクト (通常はクエリセットですが、そうとは限りません) のリストを含みます。"

msgid ":class:`django.views.generic.list.BaseListView`"
msgstr ":class:`django.views.generic.list.BaseListView`"

msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset()`"
msgstr ":meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset()`"

msgid ""
":meth:`~django.views.generic.list.MultipleObjectMixin."
"get_context_object_name()`"
msgstr ""
":meth:`~django.views.generic.list.MultipleObjectMixin."
"get_context_object_name()`"

msgid ""
":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_data()`"
msgstr ""
":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_data()`"

msgid "**Example myapp/article_list.html**:"
msgstr "**例 myapp/article_list.html**:"

msgid ""
"If you're using pagination, you can adapt the :ref:`example template from "
"the pagination docs <paginating-a-list-view>`."
msgstr ""
"ページ分割を使用している場合は、 :ref:`ページ分割のドキュメントのテンプレート"
"例 <paginating-a-list-view>` を適用できます。"

msgid ""
"A base view for displaying a list of objects. It is not intended to be used "
"directly, but rather as a parent class of the :class:`django.views.generic."
"list.ListView` or other views representing lists of objects."
msgstr ""
"オブジェクトのリストを描画するための基本ビューです。直接使用されるのではな"
"く、 :class:`django.views.generic.list.ListView` の親クラスやオブジェクトのリ"
"ストを表す他のビューとして使用されることを想定しています。"

msgid ""
"Adds ``object_list`` to the context. If :attr:`~django.views.generic.list."
"MultipleObjectMixin.allow_empty` is True then display an empty list. If :"
"attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` is False "
"then raise a 404 error."
msgstr ""
"``object_list`` をコンテキストに追加します。:attr:`~django.views.generic."
"list.MultipleObjectMixin.allow_empty` が True の場合、空のリストを描画しま"
"す。:attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` が "
"False の場合、 404 エラーを投げます。"

msgid "Generic editing views"
msgstr "ジェネリック編集ビュー (Generic editing view)"

msgid ""
"The following views are described on this page and provide a foundation for "
"editing content:"
msgstr ""
"以下のビューは、このページで説明され、内容を編集するための基礎を提供します:"

msgid ":class:`django.views.generic.edit.FormView`"
msgstr ":class:`django.views.generic.edit.FormView`"

msgid ":class:`django.views.generic.edit.CreateView`"
msgstr ":class:`django.views.generic.edit.CreateView`"

msgid ":class:`django.views.generic.edit.UpdateView`"
msgstr ":class:`django.views.generic.edit.UpdateView`"

msgid ":class:`django.views.generic.edit.DeleteView`"
msgstr ":class:`django.views.generic.edit.DeleteView`"

msgid ""
"The :doc:`messages framework </ref/contrib/messages>` contains :class:"
"`~django.contrib.messages.views.SuccessMessageMixin`, which facilitates "
"presenting messages about successful form submissions."
msgstr ""
":doc:`メッセージフレームワーク </ref/contrib/messages>` には :class:`~django."
"contrib.messages.views.SuccessMessageMixin` が含まれており、フォーム送信の成"
"功に関するメッセージを表示できます。"

msgid ""
"Some of the examples on this page assume that an ``Author`` model has been "
"defined as follows in ``myapp/models.py``::"
msgstr ""
"このページの例のいくつかは、``Author`` モデルが下記の通り ``myapp/models."
"py`` 内で定義されているものと見なしています。"

msgid ""
"A view that displays a form. On error, redisplays the form with validation "
"errors; on success, redirects to a new URL."
msgstr ""
"フォームを描画するビューです。エラー時には、バリデーションエラーとともに"
"フォームを再描画します。成功時には、新しい URL にリダイレクトします。"

msgid ":class:`django.views.generic.edit.BaseFormView`"
msgstr ":class:`django.views.generic.edit.BaseFormView`"

msgid ":class:`django.views.generic.edit.FormMixin`"
msgstr ":class:`django.views.generic.edit.FormMixin`"

msgid ":class:`django.views.generic.edit.ProcessFormView`"
msgstr ":class:`django.views.generic.edit.ProcessFormView`"

msgid "**Example myapp/forms.py**::"
msgstr "**例 myapp/forms.py**::"

msgid "**Example myapp/contact.html**:"
msgstr "**例 myapp/contact.html**:"

msgid ""
"A base view for displaying a form. It is not intended to be used directly, "
"but rather as a parent class of the :class:`django.views.generic.edit."
"FormView` or other views displaying a form."
msgstr ""
"フォームを表示するための基本ビューです。直接使用するのではなく、 :class:"
"`django.views.generic.edit.FormView` やフォームを表示する他のビューの親クラス"
"として使用することを想定しています。"

msgid ""
"A view that displays a form for creating an object, redisplaying the form "
"with validation errors (if there are any) and saving the object."
msgstr ""
"オブジェクトの作成、(もしある場合は) バリデーションエラーとフォームの再描画、"
"そしてオブジェクトの保存のフォームを表示するビューです。"

msgid ":class:`django.views.generic.edit.BaseCreateView`"
msgstr ":class:`django.views.generic.edit.BaseCreateView`"

msgid ":class:`django.views.generic.edit.ModelFormMixin`"
msgstr ":class:`django.views.generic.edit.ModelFormMixin`"

msgid ""
"The ``CreateView`` page displayed to a ``GET`` request uses a "
"``template_name_suffix`` of ``'_form'``. For example, changing this "
"attribute to ``'_create_form'`` for a view creating objects for the example "
"``Author`` model would cause the default ``template_name`` to be ``'myapp/"
"author_create_form.html'``."
msgstr ""
"``GET`` リクエストに描画された ``CreateView`` のページは、``'_form'`` の "
"``template_name_suffix`` を使います。 例えば、この属性をオブジェクト (例えば "
"``Author`` モデル) を作成するビューのために ``'_create_form'`` に変更する"
"と、 デフォルトの ``template_name`` は ``'myapp/author_create_form.html'`` と"
"なります。"

msgid ""
"When using ``CreateView`` you have access to ``self.object``, which is the "
"object being created. If the object hasn't been created yet, the value will "
"be ``None``."
msgstr ""
"``CreateView`` を使うとき、``self.object`` にアクセスできます。これは作成され"
"ているオブジェクトです。オブジェクトがまだ作成されていない場合、値は "
"``None`` になります。"

msgid "**Example myapp/author_form.html**:"
msgstr "**例 myapp/author_form.html**:"

msgid ""
"A base view for creating a new object instance. It is not intended to be "
"used directly, but rather as a parent class of the :class:`django.views."
"generic.edit.CreateView`."
msgstr ""
"新しいオブジェクトのインスタンスを作成するためのベースビューです。直接使用す"
"るのではなく、 :class:`django.views.generic.edit.CreateView` の親クラスとして"
"使用することを想定しています。"

msgid "Sets the current object instance (``self.object``) to ``None``."
msgstr ""
"現在のオブジェクトインスタンス (``self.object``) に ``None`` をセットします。"

msgid ""
"A view that displays a form for editing an existing object, redisplaying the "
"form with validation errors (if there are any) and saving changes to the "
"object. This uses a form automatically generated from the object's model "
"class (unless a form class is manually specified)."
msgstr ""
"現存するオブジェクトの編集、(もしある場合は) バリデーションエラーとフォームの"
"再描画、そしてオブジェクトの保存のフォームを表示するビューです。(フォームのク"
"ラスが手動で指定されていない限り) オブジェクトのモデルのクラスから自動的に生"
"成されたフォームを使います。"

msgid ":class:`django.views.generic.edit.BaseUpdateView`"
msgstr ":class:`django.views.generic.edit.BaseUpdateView`"

msgid ""
"The ``UpdateView`` page displayed to a ``GET`` request uses a "
"``template_name_suffix`` of ``'_form'``. For example, changing this "
"attribute to ``'_update_form'`` for a view updating objects for the example "
"``Author`` model would cause the default ``template_name`` to be ``'myapp/"
"author_update_form.html'``."
msgstr ""
"``GET`` リクエストに描画された ``UpdateView`` のページは、``'_form'`` の "
"``template_name_suffix`` を使います。 例えば、この属性をオブジェクト (例えば "
"``Author`` モデル) を作成するビューのために ``'_update_form'`` に変更する"
"と、 デフォルトの ``template_name`` は ``'myapp/author_update_form.html'`` と"
"なります。"

msgid ""
"When using ``UpdateView`` you have access to ``self.object``, which is the "
"object being updated."
msgstr ""
"``UpdateView`` を使うとき、``self.object`` にアクセスできます。これは更新され"
"ているオブジェクトです。"

msgid "**Example myapp/author_update_form.html**:"
msgstr "**例 myapp/author_update_form.html**:"

msgid ""
"A base view for updating an existing object instance. It is not intended to "
"be used directly, but rather as a parent class of the :class:`django.views."
"generic.edit.UpdateView`."
msgstr ""
"既存のオブジェクトインスタンスを更新するためのベースビューです。直接使用する"
"のではなく、 :class:`django.views.generic.edit.UpdateView` の親クラスとして使"
"用することを想定しています。"

msgid "Sets the current object instance (``self.object``)."
msgstr "現在のオブジェクトインスタンス (``self.object``) をセットします。"

msgid ""
"A view that displays a confirmation page and deletes an existing object. The "
"given object will only be deleted if the request method is ``POST``. If this "
"view is fetched via ``GET``, it will display a confirmation page that should "
"contain a form that POSTs to the same URL."
msgstr ""
"確認ページを表示して、現存するオブジェクトを削除するビューです。与えられたオ"
"ブジェクトは、リクエストメソッドが ``POST`` の場合、単に削除されます。もしこ"
"のビューが ``GET`` を通じて取得された場合は、同じ URL に POST するフォームを"
"含む確認画面を表示します。"

msgid ":class:`django.views.generic.edit.BaseDeleteView`"
msgstr ":class:`django.views.generic.edit.BaseDeleteView`"

msgid ":class:`django.views.generic.edit.DeletionMixin`"
msgstr ":class:`django.views.generic.edit.DeletionMixin`"

msgid ""
"Inherited from :class:`~django.views.generic.edit.BaseDeleteView`. The form "
"class that will be used to confirm the request. By default :class:`django."
"forms.Form`, resulting in an empty form that is always valid."
msgstr ""
":class:`~django.views.generic.edit.BaseDeleteView` から継承されています。リク"
"エストの確認に使用するフォームクラスです。デフォルトでは :class:`django."
"forms.Form` で、常に有効な空のフォームになります。"

msgid ""
"By providing your own ``Form`` subclass, you can add additional "
"requirements, such as a confirmation checkbox, for example."
msgstr ""
"独自の ``Form`` サブクラスを提供することで、例えば確認のチェックボックスのよ"
"うな要件を追加できます。"

msgid ""
"The ``DeleteView`` page displayed to a ``GET`` request uses a "
"``template_name_suffix`` of ``'_confirm_delete'``. For example, changing "
"this attribute to ``'_check_delete'`` for a view deleting objects for the "
"example ``Author`` model would cause the default ``template_name`` to be "
"``'myapp/author_check_delete.html'``."
msgstr ""
"``GET`` リクエストに描画された ``DeleteView`` のページは、"
"``'_confirm_delete'`` の ``template_name_suffix`` を使います。 例えば、この属"
"性をオブジェクト (例えば ``Author`` モデル) を作成するビューのために "
"``'_check_delete'`` に変更すると、 デフォルトの ``template_name`` は "
"``'myapp/author_check_delete.html'`` となります。"

msgid "**Example myapp/author_confirm_delete.html**:"
msgstr "**例 myapp/author_confirm_delete.html**:"

msgid ""
"A base view for deleting an object instance. It is not intended to be used "
"directly, but rather as a parent class of the :class:`django.views.generic."
"edit.DeleteView`."
msgstr ""
"オブジェクトインスタンスを削除するためのベースビューです。直接使用するのでは"
"なく、 :class:`django.views.generic.edit.DeleteView` の親クラスとして使用する"
"ことを想定しています。"

msgid "Built-in class-based views API"
msgstr "ビルトインのクラスベースビュー API"

msgid ""
"Class-based views API reference. For introductory material, see the :doc:`/"
"topics/class-based-views/index` topic guide."
msgstr ""
"クラスベースビュー API のリファレンスです。入門的な内容については :doc:`/"
"topics/class-based-views/index` トピックガイド を参照してください。"

msgid "Specification"
msgstr "仕様"

msgid ""
"Each request served by a class-based view has an independent state; "
"therefore, it is safe to store state variables on the instance (i.e., ``self."
"foo = 3`` is a thread-safe operation)."
msgstr ""
"クラスベースビューによって提供される各リクエストは、独立した状態を持っていま"
"す。そのため、状態変数をインスタンスに格納するのは安全です (例: ``self.foo = "
"3`` はスレッドセーフな操作です) 。"

msgid ""
"A class-based view is deployed into a URL pattern using the :meth:`~django."
"views.generic.base.View.as_view()` classmethod::"
msgstr ""
"クラスベースビューは :meth:`~django.views.generic.base.View.as_view()` クラス"
"メソッドを使って URL パターンに記述されます。 "

msgid "Thread safety with view arguments"
msgstr "ビューの引数によるスレッドの安全性"

msgid ""
"Arguments passed to a view are shared between every instance of a view. This "
"means that you shouldn't use a list, dictionary, or any other mutable object "
"as an argument to a view. If you do and the shared object is modified, the "
"actions of one user visiting your view could have an effect on subsequent "
"users visiting the same view."
msgstr ""
"ビューから渡される引数は、ビューのすべてのインスタンスに共有されます。なので"
"リストや辞書、または他のミュータブルなオブジェクトを使用しないでください。共"
"有オブジェクトが変更された場合、ビューにアクセスしたあるユーザーのアクション"
"が、同じビューにアクセスする後続のユーザーに影響を与える可能性があります。"

msgid ""
"Arguments passed into :meth:`~django.views.generic.base.View.as_view()` will "
"be assigned onto the instance that is used to service a request. Using the "
"previous example, this means that every request on ``MyView`` is able to use "
"``self.size``. Arguments must correspond to attributes that already exist on "
"the class (return ``True`` on a ``hasattr`` check)."
msgstr ""
":meth:`~django.views.generic.base.View.as_view()` に渡された引数は、リクエス"
"トを処理するために使用されるインスタンスに割り当てられます。 前の例を使用する"
"と、``MyView`` のすべてのリクエストが ``self.size`` を使用できることを意味し"
"ます。 引数はクラスにすでに存在する属性に対応していなければなりません "
"(``hasattr`` チェックで ``True`` を返します)。"

msgid "Base vs Generic views"
msgstr "ベースビュー vs ジェネリックビュー"

msgid ""
"Base class-based views can be thought of as *parent* views, which can be "
"used by themselves or inherited from. They may not provide all the "
"capabilities required for projects, in which case there are Mixins which "
"extend what base views can do."
msgstr ""
"ベースクラスベースのビューは *親の* ビューとして考えることができ、それ自体で"
"使用することも継承することもできます。プロジェクトに必要なすべての機能を提供"
"していないかもしれませんが、その場合はベースビューが行えることを拡張するミッ"
"クスインがあります。"

msgid ""
"Django's generic views are built off of those base views, and were developed "
"as a shortcut for common usage patterns such as displaying the details of an "
"object. They take certain common idioms and patterns found in view "
"development and abstract them so that you can quickly write common views of "
"data without having to repeat yourself."
msgstr ""
"Django のジェネリックビューは、ベースビューから構築され、オブジェクトの詳細を"
"表示するなどの一般的な使用パターンのショートカットとして開発されました。"
"ビューの開発で見つかった一定の共通したイディオムやパターンを取り、それらを抽"
"象化して、自分で繰り返し行わなくてもデータの一般的なビューを素早く作成できま"
"す。"

msgid ""
"Most generic views require the ``queryset`` key, which is a ``QuerySet`` "
"instance; see :doc:`/topics/db/queries` for more information about "
"``QuerySet`` objects."
msgstr ""
"ほとんどのジェネリックビューでは、``QuerySet`` インスタンスである "
"``queryset`` キーが必要です。 ``QuerySet`` オブジェクトの詳細については、 :"
"doc:`/topics/db/queries` を参照してください。"

msgid "Class-based views mixins"
msgstr "クラスベースビューのミックスイン (mixin)"

msgid ""
"Class-based views API reference. For introductory material, see :doc:`/"
"topics/class-based-views/mixins`."
msgstr ""
"クラスベースビュー API のリファレンスです。入門的な内容については :doc:`/"
"topics/class-based-views/mixins` を参照してください。"

msgid "Date-based mixins"
msgstr "日付ベースのミックスイン (mixin)"

msgid ""
"All the date formatting attributes in these mixins use :func:`~time."
"strftime` format characters. Do not try to use the format characters from "
"the :ttag:`now` template tag as they are not compatible."
msgstr ""
"これらのミックスインに含まれるすべての日付フォーマット属性は :func:`~time."
"strftime` フォーマット文字列を使用します。 :ttag:`now` テンプレートタグの"
"フォーマット文字列は互換性がないので使用しないでください。"

msgid "``YearMixin``"
msgstr "``YearMixin``"

msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"year component of a date."
msgstr ""
"日付の「年」コンポーネントのパース情報を取得したり提供したりするために使用で"
"きるミックスイン。"

msgid "**Methods and Attributes**"
msgstr "**メソッドと属性**"

msgid ""
"The :func:`~time.strftime` format to use when parsing the year. By default, "
"this is ``'%Y'``."
msgstr ""
":func:`~time.strftime` のフォーマットで年をパースします。デフォルトでは "
"``'%Y'`` です。"

msgid ""
"**Optional** The value for the year, as a string. By default, set to "
"``None``, which means the year will be determined using other means."
msgstr ""
"**オプション** 年の値を文字列で指定します。デフォルトでは ``None`` に設定され"
"ています。これは他の方法で年を決定することを意味します。"

msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the year. "
"Returns :attr:`~YearMixin.year_format` by default."
msgstr ""
"年をパースする際に使用する :func:`~time.strftime` フォーマットを返します。デ"
"フォルトでは :attr:`~YearMixin.year_format` を返します。"

msgid ""
"Returns the year for which this view will display data, as a string. Tries "
"the following sources, in order:"
msgstr ""
"このビューがデータを表示する年を文字列で返します。以下のソースを順に試みま"
"す："

msgid "The value of the :attr:`YearMixin.year` attribute."
msgstr ":attr:`YearMixin.year` 属性の値。"

msgid "The value of the ``year`` argument captured in the URL pattern."
msgstr "URL パターンに含まれる ``year`` 引数の値。"

msgid "The value of the ``year`` ``GET`` query argument."
msgstr "``GET`` クエリ引数 ``year`` の値。"

msgid "Raises a 404 if no valid year specification can be found."
msgstr "有効な年指定が見つからない場合は 404 を返します。"

msgid ""
"Returns a date object containing the first day of the year after the date "
"provided. This function can also return ``None`` or raise an :class:`~django."
"http.Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"指定した日付の翌年の最初の日を含む日付オブジェクトを返します。この関数は :"
"attr:`~BaseDateListView.allow_empty` と :attr:`~DateMixin.allow_future` の値"
"によって ``None`` を返したり、 :class:`~django.http.Http404` 例外を発生させた"
"りします。"

msgid ""
"Returns a date object containing the first day of the year before the date "
"provided. This function can also return ``None`` or raise an :class:`~django."
"http.Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"指定した日付の前の年の最初の日を含む日付オブジェクトを返します。この関数は :"
"attr:`~BaseDateListView.allow_empty` と :attr:`~DateMixin.allow_future` の値"
"によって ``None`` を返したり、 :class:`~django.http.Http404` 例外を発生させた"
"りします。"

msgid "``MonthMixin``"
msgstr "``MonthMixin``"

msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"month component of a date."
msgstr ""
"日付の「月」コンポーネントのパース情報を取得したり提供したりするために使用で"
"きるミックスイン。"

msgid ""
"The :func:`~time.strftime` format to use when parsing the month. By default, "
"this is ``'%b'``."
msgstr ""
":func:`~time.strftime` フォーマットは月をパースするときに使われます。デフォル"
"トでは ``'%b'`` です。"

msgid ""
"**Optional** The value for the month, as a string. By default, set to "
"``None``, which means the month will be determined using other means."
msgstr ""
"**オプション** 月を表す文字列。デフォルトでは ``None`` に設定されています。こ"
"れは月が他の方法で決定されることを意味します。"

msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the month. "
"Returns :attr:`~MonthMixin.month_format` by default."
msgstr ""
"月をパースする際に使用する :func:`~time.strftime` フォーマットを返します。デ"
"フォルトでは :attr:`~MonthMixin.month_format` を返します。"

msgid ""
"Returns the month for which this view will display data, as a string. Tries "
"the following sources, in order:"
msgstr ""
"このビューがデータを表示する月を文字列で返します。以下のソースを順に試みま"
"す："

msgid "The value of the :attr:`MonthMixin.month` attribute."
msgstr ":attr:`MonthMixin.month` 属性の値です。"

msgid "The value of the ``month`` argument captured in the URL pattern."
msgstr "URL パターンからキャプチャされた ``month`` 引数の値。"

msgid "The value of the ``month`` ``GET`` query argument."
msgstr "``GET`` クエリ引数 ``month`` の値。"

msgid "Raises a 404 if no valid month specification can be found."
msgstr "有効な月の指定が見つからない場合は 404 を返します。"

msgid ""
"Returns a date object containing the first day of the month after the date "
"provided. This function can also return ``None`` or raise an :class:`~django."
"http.Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"指定した日付の翌月初日を含む日付オブジェクトを返します。この関数は :attr:"
"`~BaseDateListView.allow_empty` と :attr:`~DateMixin.allow_future` の値によっ"
"て ``None`` を返したり、 :class:`~django.http.Http404` 例外が発生したりしま"
"す。"

msgid ""
"Returns a date object containing the first day of the month before the date "
"provided. This function can also return ``None`` or raise an :class:`~django."
"http.Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"指定した日付の前の月の最初の日を含む日付オブジェクトを返します。この関数は :"
"attr:`~BaseDateListView.allow_empty` と :attr:`~DateMixin.allow_future` の値"
"によって ``None`` を返したり、 :class:`~django.http.Http404` 例外を発生させた"
"りします。"

msgid "``DayMixin``"
msgstr "``DayMixin``"

msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"day component of a date."
msgstr ""
"日付の「日」コンポーネントのパース情報を取得したり提供したりするために使用で"
"きるミックスインです。"

msgid ""
"The :func:`~time.strftime` format to use when parsing the day. By default, "
"this is ``'%d'``."
msgstr ""
"日をパースする際に使用する :func:`~time.strftime` フォーマットです。デフォル"
"トでは ``'%d'`` です。"

msgid ""
"**Optional** The value for the day, as a string. By default, set to "
"``None``, which means the day will be determined using other means."
msgstr ""
"**オプション** 文字列で日の値を指定します。デフォルトでは ``None`` に設定され"
"ています。これは別の方法で日を決定することを意味します。"

msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the day. "
"Returns :attr:`~DayMixin.day_format` by default."
msgstr ""
"日をパースする際に使用する :func:`~time.strftime` フォーマットを返します。デ"
"フォルトでは :attr:`~DayMixin.day_format` を返します。"

msgid ""
"Returns the day for which this view will display data, as a string. Tries "
"the following sources, in order:"
msgstr ""
"このビューがデータを表示する日を文字列で返します。以下のソースを順に試みま"
"す："

msgid "The value of the :attr:`DayMixin.day` attribute."
msgstr ":attr:`DayMixin.day` 属性の値。"

msgid "The value of the ``day`` argument captured in the URL pattern."
msgstr "URL パターンからキャプチャされた ``day`` 引数の値。"

msgid "The value of the ``day`` ``GET`` query argument."
msgstr "``GET`` クエリ引数 ``day`` の値。"

msgid "Raises a 404 if no valid day specification can be found."
msgstr "有効な日の指定が見つからない場合は 404 を返します。"

msgid ""
"Returns a date object containing the next valid day after the date provided. "
"This function can also return ``None`` or raise an :class:`~django.http."
"Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"指定された日の有効な翌日を含む日付オブジェクトを返します。この関数は :attr:"
"`~BaseDateListView.allow_empty` と :attr:`~DateMixin.allow_future` の値によっ"
"て ``None`` を返したり、 :class:`~django.http.Http404` 例外を発生させたりしま"
"す。"

msgid ""
"Returns a date object containing the previous valid day. This function can "
"also return ``None`` or raise an :class:`~django.http.Http404` exception, "
"depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:"
"`~DateMixin.allow_future`."
msgstr ""
"有効な前日を含む日付オブジェクトを返します。この関数は :attr:"
"`~BaseDateListView.allow_empty` と :attr:`~DateMixin.allow_future` の値によっ"
"て ``None`` を返したり、 :class:`~django.http.Http404` 例外を発生させたりしま"
"す。"

msgid "``WeekMixin``"
msgstr "``WeekMixin``"

msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"week component of a date."
msgstr ""
"日付の「週」コンポーネントのパース情報を取得したり提供したりするために使用で"
"きるミックスイン。"

msgid ""
"The :func:`~time.strftime` format to use when parsing the week. By default, "
"this is ``'%U'``, which means the week starts on Sunday. Set it to ``'%W'`` "
"or ``'%V'`` (ISO 8601 week) if your week starts on Monday."
msgstr ""
"週をパースする際に使用する :func:`~time.strftime` フォーマットです。デフォル"
"トでは ``'%U'`` です。週が月曜日から始めたい場合は ``'%W'`` または ``'%V'`` "
"(ISO 8601 week) に設定します。"

msgid ""
"**Optional** The value for the week, as a string. By default, set to "
"``None``, which means the week will be determined using other means."
msgstr ""
"**オプション** 週の値を文字列で指定します。デフォルトでは ``None`` に設定され"
"ています。これは他の方法で週を決定することを意味します。"

msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the week. "
"Returns :attr:`~WeekMixin.week_format` by default."
msgstr ""
"週のパース時に使用する :func:`~time.strftime` フォーマットを返します。デフォ"
"ルトでは :attr:`~WeekMixin.week_format` を返します。"

msgid ""
"Returns the week for which this view will display data, as a string. Tries "
"the following sources, in order:"
msgstr ""
"このビューがデータを表示する週を文字列で返します。以下のソースを順に試みま"
"す："

msgid "The value of the :attr:`WeekMixin.week` attribute."
msgstr ":attr:`WeekMixin.week` 属性の値。"

msgid "The value of the ``week`` argument captured in the URL pattern"
msgstr "URL パターンからキャプチャされた ``week`` 引数の値"

msgid "The value of the ``week`` ``GET`` query argument."
msgstr "``week`` ``GET`` クエリ引数の値。"

msgid "Raises a 404 if no valid week specification can be found."
msgstr "有効な週の指定が見つからない場合、404を発生させます。"

msgid ""
"Returns a date object containing the first day of the week after the date "
"provided. This function can also return ``None`` or raise an :class:`~django."
"http.Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"指定した日付の、次の週の初日のdateオブジェクトを返します。またこの関数は、 :"
"attr:`~BaseDateListView.allow_empty` と :attr:`~DateMixin.allow_future` の値"
"によっては、 ``None`` を返すか、 :class:`~django.http.Http404` 例外を発生させ"
"ることがあります。"

msgid ""
"Returns a date object containing the first day of the week before the date "
"provided. This function can also return ``None`` or raise an :class:`~django."
"http.Http404` exception, depending on the values of :attr:`~BaseDateListView."
"allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""
"指定した日付の、前の週の初日のdateオブジェクトを返します。またこの関数は、 :"
"attr:`~BaseDateListView.allow_empty` と :attr:`~DateMixin.allow_future` の値"
"によっては、 ``None`` を返すか、 :class:`~django.http.Http404` 例外を発生させ"
"ることがあります。"

msgid "``DateMixin``"
msgstr "``DateMixin``"

msgid "A mixin class providing common behavior for all date-based views."
msgstr "すべてのデータベースのビューに共通の動作を提供する mixin クラス。"

msgid ""
"The name of the ``DateField`` or ``DateTimeField`` in the ``QuerySet``’s "
"model that the date-based archive should use to determine the list of "
"objects to display on the page."
msgstr ""
"``QuerySet`` のモデル内の ``DateField`` または ``DateTimeField`` の名前です。"
"日付ベースのアーカイブがページに表示するオブジェクトのリストを決定する際に使"
"用します。"

msgid ""
"When :doc:`time zone support </topics/i18n/timezones>` is enabled and "
"``date_field`` is a ``DateTimeField``, dates are assumed to be in the "
"current time zone. Otherwise, the queryset could include objects from the "
"previous or the next day in the end user's time zone."
msgstr ""
":doc:`タイムゾーンサポート </topics/i18n/timezones>` が有効で ``date_field`` "
"が ``DateTimeField`` である場合、日付はカレントタイムゾーンにあると仮定されま"
"す。そうでない場合、クエリセットにはエンドユーザのタイムゾーンにおける前日ま"
"たは翌日のオブジェクトが含まれる可能性があります。"

msgid ""
"In this situation, if you have implemented per-user time zone selection, the "
"same URL may show a different set of objects, depending on the end user's "
"time zone. To avoid this, you should use a ``DateField`` as the "
"``date_field`` attribute."
msgstr ""
"このような場合、ユーザーごとのタイムゾーン選択を実装していると、同じURLでもエ"
"ンドユーザーのタイムゾーンによって異なるオブジェクトが表示される可能性があり"
"ます。これを避けるためには、 ``date_field`` 属性として ``DateField`` を使用す"
"る必要があります。"

msgid ""
"A boolean specifying whether to include \"future\" objects on this page, "
"where \"future\" means objects in which the field specified in "
"``date_field`` is greater than the current date/time. By default, this is "
"``False``."
msgstr ""
"このページに \"未来\" のオブジェクトを含めるかどうかを指定する真偽値で"
"す。\"未来\" とは ``date_field`` で指定されたフィールドが現在の日時よりも大き"
"いオブジェクトを意味します。デフォルトでは ``False`` です。"

msgid ""
"Returns the name of the field that contains the date data that this view "
"will operate on. Returns :attr:`~DateMixin.date_field` by default."
msgstr ""
"このビューが操作する日付データを含むフィールドの名前を返します。デフォルトで"
"は :attr:`~DateMixin.date_field` を返します。"

msgid ""
"Determine whether to include \"future\" objects on this page, where "
"\"future\" means objects in which the field specified in ``date_field`` is "
"greater than the current date/time. Returns :attr:`~DateMixin.allow_future` "
"by default."
msgstr ""
"このページに \"未来\" のオブジェクトを含めるかどうかを判定します。ここで \"未"
"来\" とは ``date_field`` で指定されたフィールドが現在の日時よりも大きいオブ"
"ジェクトを意味します。デフォルトでは :attr:`~DateMixin.allow_future` を返しま"
"す。"

msgid "``BaseDateListView``"
msgstr "``BaseDateListView``"

msgid ""
"A base class that provides common behavior for all date-based views. There "
"won't normally be a reason to instantiate :class:`~django.views.generic."
"dates.BaseDateListView`; instantiate one of the subclasses instead."
msgstr ""
"すべての日付ベースのビューに共通の動作を提供する基本クラスです。通常は :"
"class:`~django.views.generic.dates.BaseDateListView` をインスタンス化する理由"
"はないでしょう。代わりにサブクラスをインスタンス化してください。"

msgid ""
"While this view (and its subclasses) are executing, ``self.object_list`` "
"will contain the list of objects that the view is operating upon, and ``self."
"date_list`` will contain the list of dates for which data is available."
msgstr ""
"このビュー（とそのサブクラス）が実行されている間、``self.object_list`` には"
"ビューが操作しているオブジェクトのリストが格納され、``self.date_list`` には"
"データが利用可能な日付のリストが格納されます。"

msgid "**Mixins**"
msgstr "**ミックスイン**"

msgid ":class:`~django.views.generic.dates.DateMixin`"
msgstr ":class:`~django.views.generic.dates.DateMixin`"

msgid ":class:`~django.views.generic.list.MultipleObjectMixin`"
msgstr ":class:`~django.views.generic.list.MultipleObjectMixin`"

msgid ""
"A boolean specifying whether to display the page if no objects are "
"available. If this is ``True`` and no objects are available, the view will "
"display an empty page instead of raising a 404."
msgstr ""
"オブジェクトがない場合にページを表示するかどうかを指定する真偽値。これが "
"``True`` でオブジェクトがない場合、ビューは 404 を返す代わりに空のページを表"
"示します。"

msgid ""
"This is identical to :attr:`django.views.generic.list.MultipleObjectMixin."
"allow_empty`, except for the default value, which is ``False``."
msgstr ""
"これは :attr:`django.views.generic.list.MultipleObjectMixin.allow_empty` と同"
"様ですが、デフォルト値は ``False`` です。"

msgid ""
"**Optional** A string defining the aggregation period for ``date_list``. It "
"must be one of ``'year'`` (default), ``'month'``, or ``'day'``."
msgstr ""
"**オプション** ``date_list`` の集計期間を定義する文字列。 ``'year'`` (デフォ"
"ルト)、``'month'``、``'day'`` のいずれかを指定します。"

msgid ""
"Returns a 3-tuple containing (``date_list``, ``object_list``, "
"``extra_context``)."
msgstr ""
"(``date_list``, ``object_list``, ``extra_context``) を含む 3-タプルを返しま"
"す。"

msgid ""
"``date_list`` is the list of dates for which data is available. "
"``object_list`` is the list of objects. ``extra_context`` is a dictionary of "
"context data that will be added to any context data provided by the :class:"
"`~django.views.generic.list.MultipleObjectMixin`."
msgstr ""
"``date_list`` はデータが利用可能な日付のリストです。 ``object_list`` はオブ"
"ジェクトのリストです。 ``extra_context`` はコンテキストデータの辞書で、 :"
"class:`~django.views.generic.list.MultipleObjectMixin` によって提供されるコン"
"テキストデータに追加されます。"

msgid ""
"Returns a queryset, filtered using the query arguments defined by "
"``lookup``. Enforces any restrictions on the queryset, such as "
"``allow_empty`` and ``allow_future``."
msgstr ""
"``lookup`` で定義したクエリ引数でフィルタしたクエリセットを返します。 "
"``allow_empty`` や ``allow_future`` などのクエリセットの制限を強制します。"

msgid ""
"Returns the aggregation period for ``date_list``. Returns :attr:"
"`~BaseDateListView.date_list_period` by default."
msgstr ""
"``date_list`` の集計期間を返します。 デフォルトでは :attr:`~BaseDateListView."
"date_list_period` を返します。"

msgid ""
"Returns the list of dates of type ``date_type`` for which ``queryset`` "
"contains entries. For example, ``get_date_list(qs, 'year')`` will return the "
"list of years for which ``qs`` has entries. If ``date_type`` isn't provided, "
"the result of :meth:`~BaseDateListView.get_date_list_period` is used. "
"``date_type`` and ``ordering`` are passed to :meth:`QuerySet.dates()<django."
"db.models.query.QuerySet.dates>`."
msgstr ""
"``queryset`` がエントリを含む ``date_type`` 型の日付のリストを返します。 たと"
"えば、 ``get_date_list(qs, 'year')`` は ``qs`` がエントリを持つ年のリストを返"
"します。もし ``date_type`` が指定されなかった場合、 :meth:`~BaseDateListView."
"get_date_list_period` の結果が使用されます。``date_type`` と ``ordering`` "
"は :meth:`QuerySet.dates()<django.db.models.query.QuerySet.dates>` に渡されま"
"す。"

msgid "Editing mixins"
msgstr "ミックスイン (mixin) を編集する"

msgid "The following mixins are used to construct Django's editing views:"
msgstr ""
"以下のミックスイン (mixin) は、Djangoの編集ビューを構築するのに使用されます。"

msgid ""
"Examples of how these are combined into editing views can be found at the "
"documentation on :doc:`/ref/class-based-views/generic-editing`."
msgstr ""
"これらの編集ビューへの結合され方の例は、 :doc:`/ref/class-based-views/"
"generic-editing` を参照してください。"

msgid "``FormMixin``"
msgstr "``FormMixin``"

msgid ""
"A mixin class that provides facilities for creating and displaying forms."
msgstr "フォームを作成したり表示したりする機能を提供するmixinクラス。"

msgid "A dictionary containing initial data for the form."
msgstr "フォームの初期化データのディクショナリ。"

msgid "The form class to instantiate."
msgstr "インスタンス化するフォームクラス。"

msgid "The URL to redirect to when the form is successfully processed."
msgstr "フォームが正常に処理されたときにリダイレクトするURL。"

msgid "The :attr:`~django.forms.Form.prefix` for the generated form."
msgstr "生成されるフォームの :attr:`~django.forms.Form.prefix` 。"

msgid ""
"Retrieve initial data for the form. By default, returns a copy of :attr:"
"`~django.views.generic.edit.FormMixin.initial`."
msgstr ""
"フォームの初期データを取得します。デフォルトでは、 :attr:`~django.views."
"generic.edit.FormMixin.initial` のコピーを返します。"

msgid ""
"Retrieve the form class to instantiate. By default :attr:`~django.views."
"generic.edit.FormMixin.form_class`."
msgstr ""
"インスタンス化するフォームクラスを取得します。デフォルトでは :attr:`~django."
"views.generic.edit.FormMixin.form_class` です。"

msgid ""
"Instantiate an instance of ``form_class`` using :meth:`~django.views.generic."
"edit.FormMixin.get_form_kwargs`. If ``form_class`` isn't provided :meth:"
"`get_form_class` will be used."
msgstr ""
":meth:`~django.views.generic.edit.FormMixin.get_form_kwargs` を使用して "
"``form_class`` のインスタンスを生成します。 ``form_class`` が指定されていない"
"場合は :meth:`get_form_class` が使用されます。"

msgid "Build the keyword arguments required to instantiate the form."
msgstr "フォームのインスタンス化に必要なキーワード引数を構築します。"

msgid ""
"The ``initial`` argument is set to :meth:`.get_initial`. If the request is a "
"``POST`` or ``PUT``, the request data (``request.POST`` and ``request."
"FILES``) will also be provided."
msgstr ""
"引数 ``initial`` には :meth:`.get_initial` を指定します。 リクエストが "
"``POST`` または ``PUT`` の場合、リクエストデータ (``request.POST`` と "
"``request.FILES``) も提供されます。"

msgid ""
"Determine the :attr:`~django.forms.Form.prefix` for the generated form. "
"Returns :attr:`~django.views.generic.edit.FormMixin.prefix` by default."
msgstr ""
"生成されるフォームの :attr:`~django.forms.Form.prefix` を特定します。 デフォ"
"ルトでは :attr:`~django.views.generic.edit.FormMixin.prefix` を返します。"

msgid ""
"Determine the URL to redirect to when the form is successfully validated. "
"Returns :attr:`~django.views.generic.edit.FormMixin.success_url` by default."
msgstr ""
"フォームのバリデーションに成功したときにリダイレクトする URL を特定します。 "
"デフォルトでは :attr:`~django.views.generic.edit.FormMixin.success_url` を返"
"します。"

msgid ""
"Redirects to :meth:`~django.views.generic.edit.FormMixin.get_success_url`."
msgstr ""
":meth:`~django.views.generic.edit.FormMixin.get_success_url` にリダイレクトし"
"ます。"

msgid "Renders a response, providing the invalid form as context."
msgstr ""
"無効なフォームをコンテキストとして提供し、レスポンスをレンダリングします。"

msgid ""
"Calls :meth:`get_form` and adds the result to the context data with the name "
"'form'."
msgstr ""
":meth:`get_form` を呼び出して、その結果を \"form\" という名前でコンテキスト"
"データに追加します。"

msgid "``ModelFormMixin``"
msgstr "``ModelFormMixin``"

msgid ""
"A form mixin that works on ``ModelForms``, rather than a standalone form."
msgstr ""
"単独のフォームではなく ``ModelForms`` で動作するフォームミックスインです。"

msgid ""
"Since this is a subclass of :class:`~django.views.generic.detail."
"SingleObjectMixin`, instances of this mixin have access to the :attr:"
"`~django.views.generic.detail.SingleObjectMixin.model` and :attr:`~django."
"views.generic.detail.SingleObjectMixin.queryset` attributes, describing the "
"type of object that the ``ModelForm`` is manipulating."
msgstr ""
"これは :class:`~django.views.generic.detail.SingleObjectMixin` のサブクラスな"
"ので、このミックスインのインスタンスは ``ModelForm`` が操作するオブジェクトの"
"タイプを記述して :attr:`~django.views.generic.detail.SingleObjectMixin."
"model` と :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` 属"
"性にアクセスできます。"

msgid ""
"If you specify both the :attr:`~django.views.generic.edit.ModelFormMixin."
"fields` and :attr:`~django.views.generic.edit.FormMixin.form_class` "
"attributes, an :exc:`~django.core.exceptions.ImproperlyConfigured` exception "
"will be raised."
msgstr ""
":attr:`~django.views.generic.edit.ModelFormMixin.fields` 属性と :attr:"
"`~django.views.generic.edit.FormMixin.form_class` 属性の両方を指定した場"
"合、 :exc:`~django.core.exceptions.ImproperlyConfigured` 例外が発生します。"

msgid ""
"A model class. Can be explicitly provided, otherwise will be determined by "
"examining ``self.object`` or :attr:`~django.views.generic.detail."
"SingleObjectMixin.queryset`."
msgstr ""
"モデルクラス。明示的に指定することもできますが、そうでない場合は ``self."
"object`` または :attr:`~django.views.generic.detail.SingleObjectMixin."
"queryset` を調べて決定されます。"

msgid ""
"A list of names of fields. This is interpreted the same way as the ``Meta."
"fields`` attribute of :class:`~django.forms.ModelForm`."
msgstr ""
"フィールド名のリストです。これは :class:`~django.forms.ModelForm` の ``Meta."
"fields`` 属性と同じように解釈されます。"

msgid ""
"This is a required attribute if you are generating the form class "
"automatically (e.g. using ``model``). Omitting this attribute will result in "
"an :exc:`~django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""
"フォームクラスを自動生成する場合、この属性は必須です (``model`` を使用するな"
"ど)。この属性を省略すると :exc:`~django.core.exceptions."
"ImproperlyConfigured` 例外が発生します。"

msgid ""
"``success_url`` may contain dictionary string formatting, which will be "
"interpolated against the object's field attributes. For example, you could "
"use ``success_url=\"/polls/{slug}/\"`` to redirect to a URL composed out of "
"the ``slug`` field on a model."
msgstr ""
"``success_url`` は辞書文字列のフォーマットを含むことができ、オブジェクトの"
"フィールド属性に対して補間されます。例えば、 ``success_url=\"/polls/{slug}/"
"\"`` を使用すると、モデルの ``slug`` フィールドから構成される URL にリダイレ"
"クトできます。"

msgid ""
"Retrieve the form class to instantiate. If :attr:`~django.views.generic.edit."
"FormMixin.form_class` is provided, that class will be used. Otherwise, a "
"``ModelForm`` will be instantiated using the model associated with the :attr:"
"`~django.views.generic.detail.SingleObjectMixin.queryset`, or with the :attr:"
"`~django.views.generic.detail.SingleObjectMixin.model`, depending on which "
"attribute is provided."
msgstr ""
"インスタンス化するフォームクラスを取得します。:attr:`~django.views.generic."
"edit.FormMixin.form_class` が指定されていれば、そのクラスが使用されます。そう"
"でない場合は、 :attr:`~django.views.generic.detail.SingleObjectMixin."
"queryset` に関連付けられたモデルか、 :attr:`~django.views.generic.detail."
"SingleObjectMixin.model` に関連付けられたモデルを使って ``ModelForm`` がイン"
"スタンス化されます。"

msgid ""
"Add the current instance (``self.object``) to the standard :meth:`~django."
"views.generic.edit.FormMixin.get_form_kwargs`."
msgstr ""
"現在のインスタンス (``self.object``) を標準の :meth:`~django.views.generic."
"edit.FormMixin.get_form_kwargs` に追加します。"

msgid ""
"Determine the URL to redirect to when the form is successfully validated. "
"Returns :attr:`django.views.generic.edit.ModelFormMixin.success_url` if it "
"is provided; otherwise, attempts to use the ``get_absolute_url()`` of the "
"object."
msgstr ""
"フォームのバリデーションに成功したときにリダイレクトする URL を特定します。指"
"定されていれば :attr:`django.views.generic.edit.ModelFormMixin.success_url` "
"を返し、指定されていなければオブジェクトの ``get_absolute_url()`` を使おうと"
"します。"

msgid ""
"Saves the form instance, sets the current object for the view, and redirects "
"to :meth:`~django.views.generic.edit.FormMixin.get_success_url`."
msgstr ""
"フォームインスタンスを保存し、ビューのカレントオブジェクトを設定し、 :meth:"
"`~django.views.generic.edit.FormMixin.get_success_url` にリダイレクトします。"

msgid "``ProcessFormView``"
msgstr "``ProcessFormView``"

msgid "A mixin that provides basic HTTP GET and POST workflow."
msgstr "基本的な HTTP GET および POST ワークフローを提供するミックスインです。"

msgid ""
"This is named 'ProcessFormView' and inherits directly from :class:`django."
"views.generic.base.View`, but breaks if used independently, so it is more of "
"a mixin."
msgstr ""
"これは \"ProcessFormView\" という名前で、 :class:`django.views.generic.base."
"View` を直接継承していますが、単独で使用すると壊れてしまうので、ミックスイン"
"として扱う方が自然です。"

msgid "**Extends**"
msgstr "**親クラス**"

msgid ""
"Renders a response using a context created with :meth:`~django.views.generic."
"edit.FormMixin.get_context_data`."
msgstr ""
":meth:`~django.views.generic.edit.FormMixin.get_context_data` で作成したコン"
"テキストを使ってレスポンスをレンダリングします。"

msgid ""
"Constructs a form, checks the form for validity, and handles it accordingly."
msgstr ""
"フォームを構築し、フォームのバリデーションを行い、それに応じて処理します。"

msgid ""
"The ``PUT`` action is also handled and passes all parameters through to :"
"meth:`post`."
msgstr ""
"``PUT`` アクションも処理され、すべてのパラメータを :meth:`post` に渡します。"

msgid "``DeletionMixin``"
msgstr "``DeletionMixin``"

msgid "Enables handling of the ``DELETE`` HTTP action."
msgstr "HTTP アクション ``DELETE`` の処理を有効にします。"

msgid ""
"The url to redirect to when the nominated object has been successfully "
"deleted."
msgstr "指定したオブジェクトが正常に削除されたときにリダイレクトする URL。"

msgid ""
"``success_url`` may contain dictionary string formatting, which will be "
"interpolated against the object's field attributes. For example, you could "
"use ``success_url=\"/parent/{parent_id}/\"`` to redirect to a URL composed "
"out of the ``parent_id`` field on a model."
msgstr ""
"``success_url`` は辞書文字列のフォーマットを含むことができ、オブジェクトの"
"フィールド属性に対して補間されます。例えば、 ``success_url=\"/parent/"
"{parent_id}/\"`` を使用すると、モデルの ``parent_id`` フィールドから構成され"
"る URL にリダイレクトできます。"

msgid ""
"Retrieves the target object and calls its ``delete()`` method, then "
"redirects to the success URL."
msgstr ""
"対象のオブジェクトを取得し、その ``delete()`` メソッドを呼び出して、success "
"URL にリダイレクトします。"

msgid ""
"Returns the url to redirect to when the nominated object has been "
"successfully deleted. Returns :attr:`~django.views.generic.edit."
"DeletionMixin.success_url` by default."
msgstr ""
"指定したオブジェクトが正常に削除された場合にリダイレクトする URL を返します。"
"デフォルトでは :attr:`~django.views.generic.edit.DeletionMixin.success_url` "
"を返します。"

msgid "Multiple object mixins"
msgstr "複数オブジェクトミックスイン (Multiple object mixin)"

msgid "``MultipleObjectMixin``"
msgstr "``MultipleObjectMixin``"

msgid "A mixin that can be used to display a list of objects."
msgstr "オブジェクトのリストを表示するために使用する Mixin です。"

msgid ""
"If ``paginate_by`` is specified, Django will paginate the results returned "
"by this. You can specify the page number in the URL in one of two ways:"
msgstr ""
"``paginate_by`` が指定された場合、Django は結果をページネートします。URL 内の"
"ページ数は以下のいずれかの方法で指定します:"

msgid ""
"Use the ``page`` parameter in the URLconf. For example, this is what your "
"URLconf might look like::"
msgstr ""
"URLconf 内で ``page`` パラメータを使用します。例えば、URLconf は以下のように"
"なります::"

msgid ""
"Pass the page number via the ``page`` query-string parameter. For example, a "
"URL would look like this:"
msgstr ""
"ページ番号は ``page`` クエリ文字列パラメータで渡します。例えば、URLは以下のよ"
"うになります："

msgid ""
"These values and lists are 1-based, not 0-based, so the first page would be "
"represented as page ``1``."
msgstr ""
"これらの値は (0 ベースではなく) 1 ベースなので、最初のページはページ ``1`` で"
"表示されます。"

msgid ""
"For more on pagination, read the :doc:`pagination documentation </topics/"
"pagination>`."
msgstr ""
"ページ分割の詳細については、:doc:`ページ分割のドキュメント </topics/"
"pagination>` を参照してください。"

msgid ""
"As a special case, you are also permitted to use ``last`` as a value for "
"``page``:"
msgstr ""
"特別なケースとして、 ``last`` を ``page`` の値として使用することもできます："

msgid ""
"This allows you to access the final page of results without first having to "
"determine how many pages there are."
msgstr ""
"これによって、自分で何ページ存在するかを調べることなく、最後のページにアクセ"
"スできます。"

msgid ""
"Note that ``page`` *must* be either a valid page number or the value "
"``last``; any other value for ``page`` will result in a 404 error."
msgstr ""
"注意すべきなのは、``page`` は有効なページ数ないし値 ``last`` の *どちらかでな"
"ければならない* ことです。``page`` に対する他の値はすべて 404 エラーとなりま"
"す。"

msgid ""
"A boolean specifying whether to display the page if no objects are "
"available. If this is ``False`` and no objects are available, the view will "
"raise a 404 instead of displaying an empty page. By default, this is "
"``True``."
msgstr ""
"有効なオブジェクトが 1 つもない場合にページを表示するかどうかを指定する真偽値"
"です。``False`` に指定してオブジェクトが存在しない場合、空のページの代わりに "
"404 を投げます。デフォルトは ``True`` です。"

msgid ""
"The model that this view will display data for. Specifying ``model = Foo`` "
"is effectively the same as specifying ``queryset = Foo.objects.all()``, "
"where ``objects`` stands for ``Foo``’s :ref:`default manager <default-"
"managers>`."
msgstr ""
"このビューがデータを表示する対象のモデルです。``model = Foo`` と指定すること"
"は、``queryset = Foo.objects.all()`` の効率的な書き方で、 ``objects`` は "
"``Foo`` の :ref:`デフォルトマネージャ <default-managers>` を表します。"

msgid ""
"A ``QuerySet`` that represents the objects. If provided, the value of "
"``queryset`` supersedes the value provided for :attr:`model`."
msgstr ""
"オブジェクトを表す ``QuerySet`` です。指定すると、``queryset`` の値は :attr:"
"`model` の結果を上書きします。"

msgid ""
"``queryset`` is a class attribute with a *mutable* value so care must be "
"taken when using it directly. Before using it, either call its :meth:"
"`~django.db.models.query.QuerySet.all` method or retrieve it with :meth:"
"`get_queryset` which takes care of the cloning behind the scenes."
msgstr ""
"``queryset`` は *ミュータブル（編集可能）な* 値を伴うクラスの属性なので、直接"
"使用する際には注意が必要です。この属性を使用する際は、 :meth:`~django.db."
"models.query.QuerySet.all` メソッドを呼び出すか、内部で複製処理を行う :meth:"
"`get_queryset` でこれを取得するようにしてください。"

msgid ""
"A string or list of strings specifying the ordering to apply to the "
"``queryset``. Valid values are the same as those for :meth:`~django.db."
"models.query.QuerySet.order_by`."
msgstr ""
"``queryset`` に適用される並び順を指定するための文字列ないし文字列のリストで"
"す。:meth:`~django.db.models.query.QuerySet.order_by` に対するものと同じ値が"
"有効です。"

msgid ""
"An integer specifying how many objects should be displayed per page. If this "
"is given, the view will paginate objects with ``paginate_by`` objects per "
"page. The view will expect either a ``page`` query string parameter (via "
"``request.GET``) or a ``page`` variable specified in the URLconf."
msgstr ""
"何個のオブジェクトが各ページに表示されるべきかを指定する数値です。この値が指"
"定されると、各ページにおいて ``paginate_by`` 数のオブジェクトをページネートし"
"ます。ビューには (``request.GET`` を通じた) ``page`` クエリ文字列パラメータ、"
"もしくは URLconf で ``page`` 変数が指定されることを必要とします。"

msgid ""
"An integer specifying the number of \"overflow\" objects the last page can "
"contain. This extends the :attr:`paginate_by` limit on the last page by up "
"to ``paginate_orphans``, in order to keep the last page from having a very "
"small number of objects."
msgstr ""
"最後のページが含むことができる \"はみ出た\" オブジェクトの数を指定する数値で"
"す。最後のページで、:attr:`paginate_by` の制限を最大で ``paginate_orphans`` "
"の値まで拡張し、最後のページでほんの少しのオブジェクトしか表示されないことを"
"防ぎます。"

msgid ""
"A string specifying the name to use for the page parameter. The view will "
"expect this parameter to be available either as a query string parameter "
"(via ``request.GET``) or as a kwarg variable specified in the URLconf. "
"Defaults to ``page``."
msgstr ""
"ページのパラメータに使用する名前を指定する文字列です。ビューは (``request."
"GET`` を通じた) クエリ文字列パラメータ、もしくはURLconf 内で指定した kwarg が"
"有効になっていることを必要とします。デフォルトは ``page`` です。"

msgid ""
"The paginator class to be used for pagination. By default, :class:`django."
"core.paginator.Paginator` is used. If the custom paginator class doesn't "
"have the same constructor interface as :class:`django.core.paginator."
"Paginator`, you will also need to provide an implementation for :meth:"
"`get_paginator`."
msgstr ""
"ページ分割に使用する paginator クラス。デフォルトでは :class:`django.core."
"paginator.Paginator` が使用されます。カスタムの paginator クラスが :class:"
"`django.core.paginator.Paginator` と同じコンストラクタのインターフェースを"
"持っていない場合は、 :meth:`get_paginator` の実装も用意する必要があります。"

msgid "Designates the name of the variable to use in the context."
msgstr "コンテキストで使用する変数名を指定します。"

msgid ""
"Get the list of items for this view. This must be an iterable and may be a "
"queryset (in which queryset-specific behavior will be enabled)."
msgstr ""
"このビューのための項目のリストを取得します。これは必ずイテラブルにするべきで"
"あり、クエリセットにされることが多いです(クエリセット特有の動作を有効にするた"
"め)。"

msgid ""
"Returns a string (or iterable of strings) that defines the ordering that "
"will be applied to the ``queryset``."
msgstr ""
"``queryset`` に適用される順序を定義する、文字列(または文字列のイテラブル)を返"
"します。"

msgid "Returns :attr:`ordering` by default."
msgstr "デフォルトでは :attr:`ordering` を返します。"

msgid ""
"Returns a 4-tuple containing (``paginator``, ``page``, ``object_list``, "
"``is_paginated``)."
msgstr ""
"(``paginator``, ``page``, ``object_list``, ``is_paginated``) を含む 4-タプル"
"を返します。"

msgid ""
"Constructed by paginating ``queryset`` into pages of size ``page_size``. If "
"the request contains a ``page`` argument, either as a captured URL argument "
"or as a GET argument, ``object_list`` will correspond to the objects from "
"that page."
msgstr ""
"``queryset`` をページ分割して ``page_size`` サイズのページを作成します。リク"
"エストに ``page`` 引数（キャプチャ URL 引数または GET 引数）が含まれている場"
"合、 ``object_list`` はそのページのオブジェクトに対応します。"

msgid ""
"Returns the number of items to paginate by, or ``None`` for no pagination. "
"By default this returns the value of :attr:`paginate_by`."
msgstr ""
"ページ分割を行うアイテムの数を返します。ページ分割を行わない場合は ``None`` "
"を返します。デフォルトの戻り値は :attr:`paginate_by` です。"

msgid ""
"Returns an instance of the paginator to use for this view. By default, "
"instantiates an instance of :attr:`paginator_class`."
msgstr ""
"このビューで使用する paginator のインスタンスを返します。デフォルトでは :"
"attr:`paginator_class` のインスタンスを作成します。"

msgid ""
"An integer specifying the number of \"overflow\" objects the last page can "
"contain. By default this returns the value of :attr:`paginate_orphans`."
msgstr ""
"最後のページが含むことができる \"overflow\" オブジェクトの数を表す整数です。"
"デフォルトでは :attr:`paginate_orphans` の値を返します。"

msgid ""
"Return a boolean specifying whether to display the page if no objects are "
"available. If this method returns ``False`` and no objects are available, "
"the view will raise a 404 instead of displaying an empty page. By default, "
"this is ``True``."
msgstr ""
"オブジェクトがない場合にページを表示するかどうかを表す真偽値を返します。この"
"メソッドが ``False`` を返し、利用可能なオブジェクトがない場合、ビューは空の"
"ページを表示する代わりに 404 を送出します。デフォルトでは ``True`` です。"

msgid ""
"Return the context variable name that will be used to contain the list of "
"data that this view is manipulating. If ``object_list`` is a queryset of "
"Django objects and :attr:`context_object_name` is not set, the context name "
"will be the ``model_name`` of the model that the queryset is composed from, "
"with postfix ``'_list'`` appended. For example, the model ``Article`` would "
"have a context object named ``article_list``."
msgstr ""
"このビューが操作しているデータのリストを格納するために使用される、コンテキス"
"トの変数名を返します。もし ``object_list`` がDjangoオブジェクトのクエリセット"
"であり、 :attr:`context_object_name` が設定されていない場合、コンテキスト名は"
"クエリセットを構成するモデルの ``model_name`` となり、接尾語として "
"``'_list'`` が付記されます。たとえば、 ``Article`` モデルなら "
"``article_list`` という名前のコンテキストオブジェクトを保持します。"

msgid "Returns context data for displaying the list of objects."
msgstr "オブジェクトのリストを表示するためのコンテキストデータを返します。"

msgid ""
"``object_list``: The list of objects that this view is displaying. If "
"``context_object_name`` is specified, that variable will also be set in the "
"context, with the same value as ``object_list``."
msgstr ""
"``object_list``: このビューが表示しているオブジェクトのリスト。もし "
"``context_object_name`` が指定された場合、その変数も ``object_list`` と同じ値"
"でコンテキストに設定されます。"

msgid ""
"``is_paginated``: A boolean representing whether the results are paginated. "
"Specifically, this is set to ``False`` if no page size has been specified, "
"or if the available objects do not span multiple pages."
msgstr ""
"``is_paginated``: 結果がページ分割されているかどうかを表す真偽値。具体的に"
"は、ページサイズが指定されていない場合や、利用可能なオブジェクトが複数ページ"
"にまたがっていない場合に ``False`` に設定されます。"

msgid ""
"``paginator``: An instance of :class:`django.core.paginator.Paginator`. If "
"the page is not paginated, this context variable will be ``None``."
msgstr ""
"``paginator``: :class:`django.core.paginator.Paginator` のインスタンスです。"
"ページがページ分割されていない場合、このコンテキスト変数は ``None`` になりま"
"す。"

msgid ""
"``page_obj``: An instance of :class:`django.core.paginator.Page`. If the "
"page is not paginated, this context variable will be ``None``."
msgstr ""
"``page_obj``: :class:`django.core.paginator.Page` のインスタンスです。ページ"
"がページ分割されていない場合、このコンテキスト変数は ``None`` になります。"

msgid "``MultipleObjectTemplateResponseMixin``"
msgstr "``MultipleObjectTemplateResponseMixin``"

msgid ""
"A mixin class that performs template-based response rendering for views that "
"operate upon a list of object instances. Requires that the view it is mixed "
"with provides ``self.object_list``, the list of object instances that the "
"view is operating on. ``self.object_list`` may be, but is not required to "
"be, a :class:`~django.db.models.query.QuerySet`."
msgstr ""
"オブジェクトインスタンスのリストを操作するビューに対してテンプレートベースの"
"レスポンスレンダリングを行うミックスインクラスです。ミックスするビューが "
"``self.object_list`` を提供する必要があります。 ``self.object_list`` は、"
"ビューが操作するオブジェクトインスタンスのリストです。 ``self.object_list`` "
"は :class:`~django.db.models.query.QuerySet` でも大丈夫で、必須ではありませ"
"ん。"

msgid ":class:`~django.views.generic.base.TemplateResponseMixin`"
msgstr ":class:`~django.views.generic.base.TemplateResponseMixin`"

msgid ""
"The suffix to append to the auto-generated candidate template name. Default "
"suffix is ``_list``."
msgstr ""
"自動生成される候補テンプレート名に付加する接尾辞。デフォルトの接尾辞は "
"``_list`` です。"

msgid "Returns a list of candidate template names. Returns the following list:"
msgstr "テンプレート名の候補のリストを返します。以下のリストを返します："

msgid "the value of ``template_name`` on the view (if provided)"
msgstr "ビューの ``template_name`` の値 (もしあれば)"

msgid "``<app_label>/<model_name><template_name_suffix>.html``"
msgstr "``<app_label>/<model_name><template_name_suffix>.html``"

msgid "Simple mixins"
msgstr "シンプルなミックスイン (mixin)"

msgid "``ContextMixin``"
msgstr "``ContextMixin``"

msgid ""
"A dictionary to include in the context. This is a convenient way of "
"specifying some context in :meth:`~django.views.generic.base.View.as_view`. "
"Example usage::"
msgstr ""
"コンテキストに含める辞書。これは、:meth:`~django.views.generic.base.View."
"as_view` の中でコンテキストを指定する便利な方法です。使用例を次に示します。"

msgid ""
"Returns a dictionary representing the template context. The keyword "
"arguments provided will make up the returned context. Example usage::"
msgstr ""
"テンプレートコンテキストを表す辞書を返します。与えられたキーワード引数は、返"
"されるコンテキストを構成します。使用例を次に示します。"

msgid ""
"The template context of all class-based generic views include a ``view`` "
"variable that points to the ``View`` instance."
msgstr ""
"すべてのクラスベースのジェネリックビューのテンプレートコンテキストには、"
"``View`` インスタンスを指す ``view`` 変数が含まれています。"

msgid "Use ``alters_data`` where appropriate"
msgstr "適切な場合には ``alters_data`` を使用する"

msgid ""
"Note that having the view instance in the template context may expose "
"potentially hazardous methods to template authors.  To prevent methods like "
"this from being called in the template, set ``alters_data=True`` on those "
"methods.  For more information, read the documentation on :ref:`rendering a "
"template context <alters-data-description>`."
msgstr ""
"ビュー インスタンスをテンプレートコンテキスト内に持つことは、潜在的に危険なメ"
"ソッドを、テンプレートの作者に公開してしまう可能性があることに注意してくださ"
"い。このようなメソッドがテンプレート内で呼ばれるのを防ぐには、そのメソッドに "
"``alters_data=True`` を設定してください。より詳しい情報については、:ref:`テン"
"プレートコンテキストのレンダリング<alters-data-description>` に関するドキュメ"
"ントを読んでください。"

msgid "``TemplateResponseMixin``"
msgstr "``TemplateResponseMixin``"

msgid ""
"Provides a mechanism to construct a :class:`~django.template.response."
"TemplateResponse`, given suitable context. The template to use is "
"configurable and can be further customized by subclasses."
msgstr ""
"適切なコンテキストを指定して :class:`~django.template.response."
"TemplateResponse` を構築するメカニズムを提供します。使用するテンプレートは設"
"定可能で、サブクラス化によりさらにカスタマイズできます。"

msgid ""
"The full name of a template to use as defined by a string. Not defining a "
"``template_name`` will raise a :class:`django.core.exceptions."
"ImproperlyConfigured` exception."
msgstr ""
"文字列で指定された使用するテンプレートの完全な名前。``template_name`` を定義"
"しないと、:class:`django.core.exceptions.ImproperlyConfigured` 例外が発生しま"
"す。"

msgid ""
"The :setting:`NAME <TEMPLATES-NAME>` of a template engine to use for loading "
"the template. ``template_engine`` is passed as the ``using`` keyword "
"argument to ``response_class``. Default is ``None``, which tells Django to "
"search for the template in all configured engines."
msgstr ""
"テンプレートを読み込む際に使用するテンプレートエンジンの :setting:`NAME "
"<TEMPLATES-NAME>` です。 ``template_engine`` は ``response_class`` の "
"``using`` キーワード引数として渡されます。デフォルトは ``None`` で、 Django "
"は設定された全てのエンジンでテンプレートを検索します。"

msgid ""
"The response class to be returned by ``render_to_response`` method. Default "
"is :class:`TemplateResponse <django.template.response.TemplateResponse>`. "
"The template and context of ``TemplateResponse`` instances can be altered "
"later (e.g. in :ref:`template response middleware <template-response-"
"middleware>`)."
msgstr ""
"``render_to_response`` メソッドが返す response クラス。 デフォルトは :class:"
"`TemplateResponse <django.template.response.TemplateResponse>` です。 "
"``TemplateResponse`` インスタンスのテンプレートとコンテキストは後で変更できま"
"す (たとえば :ref:`template response ミドルウェア <template-response-"
"middleware>` で変更できます)。"

msgid ""
"If you need custom template loading or custom context object instantiation, "
"create a ``TemplateResponse`` subclass and assign it to ``response_class``."
msgstr ""
"カスタムテンプレートの読み込みやカスタムコンテキストオブジェクトのインスタン"
"ス化が必要な場合は、 ``TemplateResponse`` サブクラスを作成して "
"``response_class`` に代入してください。"

msgid ""
"The content type to use for the response. ``content_type`` is passed as a "
"keyword argument to ``response_class``. Default is ``None`` -- meaning that "
"Django uses ``'text/html'``."
msgstr ""
"レスポンスに使用するコンテンツタイプ。 ``content_type`` は "
"``response_class`` のキーワード引数として渡されます。デフォルトは ``None`` "
"で、その場合 Django は ``'text/html'`` を使用します。"

msgid "Returns a ``self.response_class`` instance."
msgstr "``self.response_class`` インスタンスを返します。"

msgid ""
"If any keyword arguments are provided, they will be passed to the "
"constructor of the response class."
msgstr ""
"キーワード引数を指定すると、response クラスのコンストラクタに渡されます。"

msgid ""
"Calls :meth:`get_template_names()` to obtain the list of template names that "
"will be searched looking for an existent template."
msgstr ""
":meth:`get_template_names()` を呼び出すと、存在するテンプレートを探すために検"
"索されるテンプレート名のリストを取得できます。"

msgid ""
"Returns a list of template names to search for when rendering the template. "
"The first template that is found will be used."
msgstr ""
"テンプレートをレンダリングする際に検索するテンプレート名のリストを返します。"
"最初に見つかったテンプレートが使用されます。"

msgid ""
"The default implementation will return a list containing :attr:"
"`template_name` (if it is specified)."
msgstr ""
"デフォルトの実装では、:attr:`template_name` を含むリストを返します（指定され"
"た場合）。"

msgid "Single object mixins"
msgstr "単一オブジェクト ミックスイン (Single object mixin)"

msgid "``SingleObjectMixin``"
msgstr "``SingleObjectMixin``"

msgid ""
"Provides a mechanism for looking up an object associated with the current "
"HTTP request."
msgstr ""
"現在の HTTP レスポンスに紐付いたオブジェクトをルックアップするための枠組みを"
"提供します。"

msgid ""
"The name of the field on the model that contains the slug. By default, "
"``slug_field`` is ``'slug'``."
msgstr ""
"スラグを含むモデル上のフィールドの名前です。デフォルトでは、``slug_field`` "
"は ``'slug'`` です。"

msgid ""
"The name of the URLConf keyword argument that contains the slug. By default, "
"``slug_url_kwarg`` is ``'slug'``."
msgstr ""
"スラグを含む URLConf キーワード引数の名前です。デフォルトでは、"
"``slug_url_kwarg`` は ``'slug'`` です。"

msgid ""
"The name of the URLConf keyword argument that contains the primary key. By "
"default, ``pk_url_kwarg`` is ``'pk'``."
msgstr ""
"プライマリキーを含む URLConf キーワード引数の名前です。デフォルトでは、"
"``pk_url_kwarg`` は ``'pk'`` です。"

msgid ""
"If ``True``, causes :meth:`get_object()` to perform its lookup using both "
"the primary key and the slug. Defaults to ``False``."
msgstr ""
"``True`` の場合、:meth:`get_object()` がルックアップの際にプライマリキーとス"
"ラグの両方を使うようになります。デフォルトは ``False`` です。"

msgid ""
"This attribute can help mitigate `insecure direct object reference`_ "
"attacks. When applications allow access to individual objects by a "
"sequential primary key, an attacker could brute-force guess all URLs; "
"thereby obtaining a list of all objects in the application. If users with "
"access to individual objects should be prevented from obtaining this list, "
"setting ``query_pk_and_slug`` to ``True`` will help prevent the guessing of "
"URLs as each URL will require two correct, non-sequential arguments. Using a "
"unique slug may serve the same purpose, but this scheme allows you to have "
"non-unique slugs."
msgstr ""
"この属性は `insecure direct object reference`_ 攻撃を軽減するのに役立ちます。"
"アプリケーションがシーケンシャルな主キーによる個々のオブジェクトへのアクセス"
"を許可している場合、攻撃者はすべての URL をブルートフォースで推測できます。"
"個々のオブジェクトへのアクセス権を持つユーザーがこのリストを取得するのを防ぎ"
"たい場合、``query_pk_and_slug`` を ``True`` に設定することで、URLの推測を防ぐ"
"のに役立ちます。これは各URLが2つの正しい、連続しない引数を必要とするためで"
"す。一意なスラグを使用することでも同じ目的を達成できますが、このスキームでは"
"一意ではないスラグを使用できます。"

msgid ""
"Returns the single object that this view will display. If ``queryset`` is "
"provided, that queryset will be used as the source of objects; otherwise, :"
"meth:`get_queryset` will be used. ``get_object()`` looks for a :attr:"
"`pk_url_kwarg` argument in the arguments to the view; if this argument is "
"found, this method performs a primary-key based lookup using that value. If "
"this argument is not found, it looks for a :attr:`slug_url_kwarg` argument, "
"and performs a slug lookup using the :attr:`slug_field`."
msgstr ""
"ビューが表示する単一のオブジェクトを返します。 ``queryset`` が指定されている"
"場合、そのクエリセットがオブジェクトのソースとして使用されます。 それ以外の場"
"合は、 :meth:`get_queryset` が使用されます。``get_object()`` は、ビューへの引"
"数の中から :attr:`pk_url_kwarg` 引数を探します。 この引数が見つかった場合、こ"
"のメソッドはその値を使用してプライマリキーベースのルックアップを実行します。 "
"この引数が見つからなかった場合は、:attr:`slug_url_kwarg` 引数を探し、:attr:"
"`slug_field` を使用してスラグのルックアップを実行します。"

msgid ""
"When :attr:`query_pk_and_slug` is ``True``, ``get_object()`` will perform "
"its lookup using both the primary key and the slug."
msgstr ""
":attr:`query_pk_and_slug` が ``True`` のときは、``get_object()`` はプライマリ"
"キーとスラグの両方を使ってルックアップを実施します。"

msgid ""
"Returns the queryset that will be used to retrieve the object that this view "
"will display. By default, :meth:`get_queryset` returns the value of the :"
"attr:`queryset` attribute if it is set, otherwise it constructs a :class:"
"`~django.db.models.query.QuerySet` by calling the ``all()`` method on the :"
"attr:`model` attribute's default manager."
msgstr ""
"ビューが表示するオブジェクトを取得するために使われる、クエリセットを返しま"
"す。デフォルトでは、:meth:`get_queryset` が :attr:`queryset` 属性がセットされ"
"ていればこの値を返しますが、セットされていない場合は :attr:`model` のデフォル"
"トのマネージャーの ``all()`` を呼んで :class:`~django.db.models.query."
"QuerySet` を組み立てます。"

msgid ""
"Return the context variable name that will be used to contain the data that "
"this view is manipulating. If :attr:`context_object_name` is not set, the "
"context name will be constructed from the ``model_name`` of the model that "
"the queryset is composed from. For example, the model ``Article`` would have "
"context object named ``'article'``."
msgstr ""
"ビューが操作するデータを格納するために使われる、コンテキストの変数名を返しま"
"す。:attr:`context_object_name` がセットされていない場合、コンテキスト名はク"
"エリセットを構成するモデルの ``model_name`` から組み立てられます。たとえば、"
"モデル ``Article`` のコンテキストオブジェクトは ``'article'`` と名付けられま"
"す。"

msgid "Returns context data for displaying the object."
msgstr "オブジェクトを表示するためのコンテキストデータを返します。"

msgid ""
"The base implementation of this method requires that the ``self.object`` "
"attribute be set by the view (even if ``None``). Be sure to do this if you "
"are using this mixin without one of the built-in views that does so."
msgstr ""
"このメソッドの基本的な実装では、``self.object`` 属性が (たとえ ``None`` でも)"
"ビューによってセットされることが必須です。 この mixin をビルトインのビュー以"
"外で使うときには、この実装を忘れないでください。"

msgid "It returns a dictionary with these contents:"
msgstr "下記の内容のディクショナリを返します。"

msgid "``object``: The object that this view is displaying (``self.object``)."
msgstr "``object``: ビューが表示しているオブジェクトです (``self.object``)。"

msgid ""
"``context_object_name``: ``self.object`` will also be stored under the name "
"returned by :meth:`get_context_object_name`, which defaults to the "
"lowercased version of the model name."
msgstr ""
"``context_object_name``: ``self.object`` は、:meth:`get_context_object_name` "
"によって返された名前の下でも保持されます。デフォルトではモデル名の小文字の文"
"字列となります。"

msgid "Context variables override values from template context processors"
msgstr ""
"コンテキスト変数は、テンプレートコンテキストプロセッサの値を上書きします"

msgid ""
"Any variables from :meth:`get_context_data` take precedence over context "
"variables from :ref:`context processors <subclassing-context-"
"requestcontext>`. For example, if your view sets the :attr:`model` attribute "
"to :class:`~django.contrib.auth.models.User`, the default context object "
"name of ``user`` would override the ``user`` variable from the :func:`django."
"contrib.auth.context_processors.auth` context processor. Use :meth:"
"`get_context_object_name` to avoid a clash."
msgstr ""
":meth:`get_context_data` からのあらゆる変数は、 :ref:`コンテキストプロセッサ "
"<subclassing-context-requestcontext>` からの変数より優先されます。例えば、"
"ビューが :attr:`model` 属性を :class:`~django.contrib.auth.models.User` に"
"セットする場合、 ``user`` のデフォルトのオブジェクト名は :func:`django."
"contrib.auth.context_processors.auth` からの ``user`` 変数をオーバーライドし"
"ます。衝突を避けるには :meth:`get_context_object_name` を使ってください。"

msgid ""
"Returns the name of a slug field to be used to look up by slug. By default "
"this returns the value of :attr:`slug_field`."
msgstr ""
"スラグで検索する際に使用するスラグフィールドの名前を返します。デフォルトで"
"は :attr:`slug_field` の値を返します。"

msgid "``SingleObjectTemplateResponseMixin``"
msgstr "``SingleObjectTemplateResponseMixin``"

msgid ""
"A mixin class that performs template-based response rendering for views that "
"operate upon a single object instance. Requires that the view it is mixed "
"with provides ``self.object``, the object instance that the view is "
"operating on. ``self.object`` will usually be, but is not required to be, an "
"instance of a Django model. It may be ``None`` if the view is in the process "
"of constructing a new instance."
msgstr ""
"単一のオブジェクトインスタンスを操作するビューをレンダリングする、テンプレー"
"トベースのレスポンスを実行する mixin クラスです。 混合されたビューは、操作す"
"るオブジェクトインスタンスである ``self.object`` が必要です。 ``self."
"object`` は、通常 (必須ではありませんが) Django モデルのインスタンスです。 "
"ビューが新しいインスタンスを構築中の場合は、``None`` になることがあります。"

msgid ""
"The field on the current object instance that can be used to determine the "
"name of a candidate template. If either ``template_name_field`` itself or "
"the value of the ``template_name_field`` on the current object instance is "
"``None``, the object will not be used for a candidate template name."
msgstr ""
"現在のオブジェクトインスタンス上のフィールドで、テンプレートの名前の候補を決"
"定するために使用できます。 ``template_name_field`` 自体、または現在のオブジェ"
"クトインスタンスの ``template_name_field`` の値のいずれかが ``None`` の場合、"
"オブジェクトはテンプレート名候補として使用されません。"

msgid ""
"The suffix to append to the auto-generated candidate template name. Default "
"suffix is ``_detail``."
msgstr ""
"自動生成されたテンプレート名候補に追加する接尾辞です。 デフォルトの接尾辞は "
"``_detail`` です。"

msgid ""
"the contents of the ``template_name_field`` field on the object instance "
"that the view is operating upon (if available)"
msgstr ""
"(有効な場合) ビューが操作するオブジェクトインスタンス上の "
"``template_name_field`` の内容"

msgid "Clickjacking Protection"
msgstr "クリックジャッキング対策"

msgid ""
"The clickjacking middleware and decorators provide easy-to-use protection "
"against `clickjacking`_.  This type of attack occurs when a malicious site "
"tricks a user into clicking on a concealed element of another site which "
"they have loaded in a hidden frame or iframe."
msgstr ""
"クリックジャッキングミドルウェアとデコレータは、 `clickjacking`_ 攻撃に対する"
"防御を簡単に使える形で提供します。このタイプの攻撃は、悪意のあるサイトがユー"
"ザをだまし、隠された frame や iframe にロードした別サイトの要素をクリックさせ"
"ることで起こります。"

msgid "An example of clickjacking"
msgstr "クリックジャッキングの例"

msgid ""
"Suppose an online store has a page where a logged in user can click \"Buy "
"Now\" to purchase an item. A user has chosen to stay logged into the store "
"all the time for convenience. An attacker site might create an \"I Like "
"Ponies\" button on one of their own pages, and load the store's page in a "
"transparent iframe such that the \"Buy Now\" button is invisibly overlaid on "
"the \"I Like Ponies\" button. If the user visits the attacker's site, "
"clicking \"I Like Ponies\" will cause an inadvertent click on the \"Buy "
"Now\" button and an unknowing purchase of the item."
msgstr ""
"あるオンラインストアのサイトに、ログインユーザが「今すぐ購入」ボタンを押すこ"
"とで商品を買えるようなページがあるとしましょう。あるユーザが利便性のためログ"
"インし続けることを選択していたとします。そして攻撃者が彼ら自身のサイトのペー"
"ジに 「私はポニーが好きです」ボタンを作り、さらに透明な iframe に先ほどのスト"
"アのページをロードして『「今すぐ購入」ボタンが彼らの「私はポニーが好きです」"
"ボタンを真上に来るように』重ねたとします。もしそのユーザが攻撃者のサイトを訪"
"ねて「私はポニーが好きです」ボタンをクリックしてしまうと、無意識に「今すぐ購"
"入」 ボタンをクリックすることとなり、身に覚えの無い品物を購入することになって"
"しまいます。"

msgid "Preventing clickjacking"
msgstr "クリックジャッキングを防止する"

msgid ""
"Modern browsers honor the `X-Frame-Options`_ HTTP header that indicates "
"whether or not a resource is allowed to load within a frame or iframe. If "
"the response contains the header with a value of ``SAMEORIGIN`` then the "
"browser will only load the resource in a frame if the request originated "
"from the same site. If the header is set to ``DENY`` then the browser will "
"block the resource from loading in a frame no matter which site made the "
"request."
msgstr ""
"モダンブラウザでは、frame や iframe の中にあるリソースをロードして良いかどう"
"かを示す `X-Frame-Options`_ HTTP ヘッダの指定を尊重します。もしサーバからのレ"
"スポンスに ``SAMEORIGIN`` という値を指定した X-Frame-Options ヘッダが含まれて"
"いた場合、ブラウザは frame 中のリソースが同一サイトに由来する場合に限り、その"
"リソースをロードします。もしヘッダが ``DENY`` に設定されていた場合、どのサイ"
"トがリクエスト元であろうとブラウザは frame 中のリソースのロードを問答無用でブ"
"ロックします。"

msgid ""
"Django provides a few ways to include this header in responses from your "
"site:"
msgstr "Django はこのヘッダをレスポンスに含めるための方法をいくつか提供します:"

msgid "A middleware that sets the header in all responses."
msgstr "すべてのレスポンスにこのヘッダを設定するミドルウェア"

msgid ""
"A set of view decorators that can be used to override the middleware or to "
"only set the header for certain views."
msgstr ""
"そのミドルウェアの動作をオーバーライドする、または単純に特定のビューにだけこ"
"のヘッダを設定するデコレータのセット"

msgid ""
"The ``X-Frame-Options`` HTTP header will only be set by the middleware or "
"view decorators if it is not already present in the response."
msgstr ""
"``X-Frame-Options`` HTTP ヘッダは、まだそれがレスポンス中に存在しない場合に、"
"ミドルウェアまたはビューのデコレータでのみ設定されます。"

msgid "How to use it"
msgstr "使用方法"

msgid "Setting ``X-Frame-Options`` for all responses"
msgstr "X-Frame-Options をすべてのレスポンスに設定する"

msgid ""
"To set the same ``X-Frame-Options`` value for all responses in your site, "
"put ``'django.middleware.clickjacking.XFrameOptionsMiddleware'`` to :setting:"
"`MIDDLEWARE`::"
msgstr ""
"サイト内のすべてのレスポンスに対して同じ ``X-Frame-Options`` 値を設定するに"
"は、``'django.middleware.clickjacking.XFrameOptionsMiddleware'`` を :setting:"
"`MIDDLEWARE` に追加します:"

msgid ""
"This middleware is enabled in the settings file generated by :djadmin:"
"`startproject`."
msgstr ""
"このミドルウェアは、:djadmin:`startproject` が生成する設定ファイルでは最初か"
"ら有効化されています。"

msgid ""
"By default, the middleware will set the ``X-Frame-Options`` header to "
"``DENY`` for every outgoing ``HttpResponse``. If you want any other value "
"for this header instead, set the :setting:`X_FRAME_OPTIONS` setting::"
msgstr ""
"デフォルトでは、このミドルウェアはすべての ``HttpResponse`` の ``X-Frame-"
"Options`` ヘッダを ``DENY`` に設定します。もし他の値にしたい場合は :setting:"
"`X_FRAME_OPTIONS` を次のように設定します:"

msgid ""
"When using the middleware there may be some views where you do **not** want "
"the ``X-Frame-Options`` header set. For those cases, you can use a view "
"decorator that tells the middleware not to set the header::"
msgstr ""
"このミドルウェアを使うにあたって、いくつかのビューでは ``X-Frame-Options`` "
"ヘッダを **設定したくない** かもしれません。そのような場合にはヘッダを設定し"
"ないよう、ビューデコレータでミドルウェアに指示できます:"

msgid ""
"If you want to submit a form or access a session cookie within a frame or "
"iframe, you may need to modify the :setting:`CSRF_COOKIE_SAMESITE` or :"
"setting:`SESSION_COOKIE_SAMESITE` settings."
msgstr ""
"フレームやiframe内でフォームを送信したり、セッションクッキーにアクセスしたい"
"場合は、 :setting:`CSRF_COOKIE_SAMESITE` や :setting:"
"`SESSION_COOKIE_SAMESITE` の設定を変更する必要があるかもしれません。"

msgid ""
"Support for wrapping asynchronous view functions was added to the "
"``@xframe_options_exempt`` decorator."
msgstr ""
"``@xframe_options_exempt`` デコレーターに、非同期ビュー関数をラップする機能が"
"追加されました。"

msgid "Setting ``X-Frame-Options`` per view"
msgstr "Setting ``X-Frame-Options`` をビューごとに設定する"

msgid ""
"To set the ``X-Frame-Options`` header on a per view basis, Django provides "
"these decorators::"
msgstr ""
"``X-Frame-Options`` ヘッダをビューごとに設定するために、Django は次のようなデ"
"コレータを提供しています::"

msgid ""
"Note that you can use the decorators in conjunction with the middleware. Use "
"of a decorator overrides the middleware."
msgstr ""
"なお、これらのデコレータはミドルウェアとともに使うことができます。 デコレータ"
"の指定は、ミドルウェアの指定よりも優先されます。"

msgid ""
"Support for wrapping asynchronous view functions was added to the "
"``@xframe_options_deny`` and ``@xframe_options_sameorigin`` decorators."
msgstr ""
"``@xframe_options_deny`` と ``@xframe_options_sameorigin`` デコレーターに、非"
"同期ビュー関数をラップする機能が追加されました。"

msgid "Limitations"
msgstr "制限事項"

msgid ""
"The ``X-Frame-Options`` header will only protect against clickjacking in a "
"modern browser. Older browsers will quietly ignore the header and need "
"`other clickjacking prevention techniques`_."
msgstr ""
"``X-Frame-Options`` ヘッダによるクリックジャッキング対策は、モダンブラウザに"
"対してのみ有効です。古いブラウザの場合はこのヘッダを無視してしまうため、他の"
"クリックジャッキング対策 `other clickjacking prevention techniques`_ が必要で"
"す。"

msgid "Browsers that support ``X-Frame-Options``"
msgstr "X-Frame-Options をサポートするブラウザ"

msgid "Internet Explorer 8+"
msgstr "Internet Explorer 8+"

msgid "Edge"
msgstr "Edge"

msgid "Firefox 3.6.9+"
msgstr "Firefox 3.6.9+"

msgid "Opera 10.5+"
msgstr "Opera 10.5+"

msgid "Safari 4+"
msgstr "Safari 4+"

msgid "Chrome 4.1+"
msgstr "Chrome 4.1+"

msgid "See also"
msgstr "参考情報"

msgid "A `complete list`_ of browsers supporting ``X-Frame-Options``."
msgstr ""
"``X-Frame-Options`` をサポートするブラウザの完全なリスト: `complete list`_。"

msgid "Admin actions"
msgstr "管理アクション"

msgid ""
"The basic workflow of Django's admin is, in a nutshell, \"select an object, "
"then change it.\" This works well for a majority of use cases. However, if "
"you need to make the same change to many objects at once, this workflow can "
"be quite tedious."
msgstr ""
"Djangoの管理者の基本的な仕事は、一言で言えば、「オブジェクトを選択し、それを"
"変更する」ことに尽きます。これは大多数のユースケースに当てはまります。しか"
"し、一度に多くのオブジェクトに同じ変更を適用する必要がある場合、この仕事は退"
"屈です。"

msgid ""
"In these cases, Django's admin lets you write and register \"actions\" -- "
"functions that get called with a list of objects selected on the change list "
"page."
msgstr ""
"このような場合、 Django の管理画面では、\"アクション\" を書いて登録できます。"
"チェンジリストページで選択されたオブジェクトのリストで呼び出される関数です。"

msgid ""
"If you look at any change list in the admin, you'll see this feature in "
"action; Django ships with a \"delete selected objects\" action available to "
"all models. For example, here's the user module from Django's built-in :mod:"
"`django.contrib.auth` app:"
msgstr ""
"Django には、すべてのモデルで利用可能な \"delete selected objects\" アクショ"
"ンが同梱されています。たとえば、これは Django 組み込みの :mod:`django."
"contrib.auth` アプリの user モジュールです:"

msgid ""
"The \"delete selected objects\" action uses :meth:`QuerySet.delete() <django."
"db.models.query.QuerySet.delete>` for efficiency reasons, which has an "
"important caveat: your model's ``delete()`` method will not be called."
msgstr ""
"\"選択したオブジェクトの削除\" アクションは効率の観点から :meth:`QuerySet."
"delete() <django.db.models.query.QuerySet.delete>` を使用します。使用したモデ"
"ルの ``delete()`` メソッドが呼ばれないことは重要な注意点です。"

msgid ""
"If you wish to override this behavior, you can override :meth:`.ModelAdmin."
"delete_queryset` or write a custom action which does deletion in your "
"preferred manner -- for example, by calling ``Model.delete()`` for each of "
"the selected items."
msgstr ""
"この動作をオーバーライドしたい場合は、 :meth:`.ModelAdmin.delete_queryset` を"
"オーバーライドするか、選択された各アイテムに対して ``Model.delete()`` を呼び"
"出すなど、お好みの方法で削除を行うカスタムアクションを書くことができます。"

msgid ""
"For more background on bulk deletion, see the documentation on :ref:`object "
"deletion <topics-db-queries-delete>`."
msgstr ""
"一括削除に関するより詳しい背景については、 :ref:`オブジェクトの削除 <topics-"
"db-queries-delete>` のドキュメントを参照してください。"

msgid "Read on to find out how to add your own actions to this list."
msgstr ""
"このリストに自分のアクションを追加する方法については、以下で説明しています。"

msgid "Writing actions"
msgstr "アクションを書く"

msgid "The easiest way to explain actions is by example, so let's dive in."
msgstr ""
"アクションを説明する最も簡単な方法は例を挙げることです。早速詳しく見ていきま"
"しょう。"

msgid ""
"A common use case for admin actions is the bulk updating of a model. Imagine "
"a news application with an ``Article`` model::"
msgstr ""
"管理アクションの一般的なユースケースはモデルの一括更新です。 ``Article`` モデ"
"ルを持つニュースアプリケーションを想像してみてください:"

msgid ""
"A common task we might perform with a model like this is to update an "
"article's status from \"draft\" to \"published\". We could easily do this in "
"the admin one article at a time, but if we wanted to bulk-publish a group of "
"articles, it'd be tedious. So, let's write an action that lets us change an "
"article's status to \"published.\""
msgstr ""
"このようなモデルで行う一般的なタスクは記事のステータスを \"draft \"から "
"\"published \"に更新することです。管理画面で一度に1つの記事を更新するのは簡単"
"ですが、記事のグループを一括で公開するのは面倒です。そこで、記事のステータス"
"を \"published \" に変更するアクションを書いてみましょう。"

msgid "Writing action functions"
msgstr "アクション関数を書く"

msgid ""
"First, we'll need to write a function that gets called when the action is "
"triggered from the admin. Action functions are regular functions that take "
"three arguments:"
msgstr ""
"最初に、管理画面からアクションがトリガーされたときに呼び出される関数を書く必"
"要があります。アクション関数は3つの引数を取る通常の関数です:"

msgid "The current :class:`ModelAdmin`"
msgstr "現在の :class:`ModelAdmin`"

msgid "An :class:`~django.http.HttpRequest` representing the current request,"
msgstr "現在のリクエストを表す :class:`~django.http.HttpRequest`"

msgid ""
"A :class:`~django.db.models.query.QuerySet` containing the set of objects "
"selected by the user."
msgstr ""
"ユーザーが選択したオブジェクトのセットを含む :class:`~django.db.models.query."
"QuerySet` 。"

msgid ""
"Our publish-these-articles function won't need the :class:`ModelAdmin` or "
"the request object, but we will use the queryset::"
msgstr ""
"publish-these-articles 関数は :class:`ModelAdmin` やリクエストオブジェクトを"
"必要としませんが、クエリセットを使用します:"

msgid ""
"For the best performance, we're using the queryset's :ref:`update method "
"<topics-db-queries-update>`. Other types of actions might need to deal with "
"each object individually; in these cases we'd iterate over the queryset::"
msgstr ""
"最高のパフォーマンスを得るために、クエリセットの :ref:`update メソッド "
"<topics-db-queries-update>` を使用しています。他のタイプのアクションでは、各"
"オブジェクトを個別に処理する必要があるかもしれません。このような場合は、クエ"
"リセットをイテレートします:"

msgid ""
"That's actually all there is to writing an action! However, we'll take one "
"more optional-but-useful step and give the action a \"nice\" title in the "
"admin. By default, this action would appear in the action list as \"Make "
"published\" -- the function name, with underscores replaced by spaces. "
"That's fine, but we can provide a better, more human-friendly name by using "
"the :func:`~django.contrib.admin.action` decorator on the ``make_published`` "
"function::"
msgstr ""
"アクションの書き方はこれだけです！しかし、もう1つオプションの、しかし便利なス"
"テップを踏んで、管理画面でアクションに \"素敵な \"タイトルをつけましょう。デ"
"フォルトでは、このアクションは \"Make published \"としてアクションリストに表"
"示されます。しかし、 ``make_published`` 関数に :func:`~django.contrib.admin."
"action` デコレータを使用することで、より良い、人にやさしい名前をつけることが"
"できます:"

msgid ""
"This might look familiar; the admin's :attr:`~django.contrib.admin."
"ModelAdmin.list_display` option uses a similar technique with the :func:"
"`~django.contrib.admin.display` decorator to provide human-readable "
"descriptions for callback functions registered there, too."
msgstr ""
"これには見覚えがあるかもしれません。admin の :attr:`~django.contrib.admin."
"ModelAdmin.list_display` オプションも、登録されたコールバック関数に対して人間"
"が読みやすい説明を提供するために、 :func:`~django.contrib.admin.display` デコ"
"レータを使用して同じテクニックを使っています。"

msgid "Adding actions to the :class:`ModelAdmin`"
msgstr ":class:`ModelAdmin` にアクションを追加する"

msgid ""
"Next, we'll need to inform our :class:`ModelAdmin` of the action. This works "
"just like any other configuration option. So, the complete ``admin.py`` with "
"the action and its registration would look like::"
msgstr ""
"次に :class:`ModelAdmin` にアクションを通知する必要があります。これは他の設定"
"オプションと同じように動作します。アクションとその登録を含む ``admin.py`` は"
"次のようになります:"

msgid ""
"That code will give us an admin change list that looks something like this:"
msgstr "このコードによって、次のような admin チェンジリストができます:"

msgid ""
"That's really all there is to it! If you're itching to write your own "
"actions, you now know enough to get started. The rest of this document "
"covers more advanced techniques."
msgstr ""
"本当にそれだけです！もしあなたが自分のアクションを書きたくてうずうずしている"
"のであれば、これで始めるのに十分な知識が得られました。このドキュメントの残り"
"の部分では、より高度なテクニックを扱います。"

msgid "Handling errors in actions"
msgstr "アクション内でエラーをハンドリングする"

msgid ""
"If there are foreseeable error conditions that may occur while running your "
"action, you should gracefully inform the user of the problem. This means "
"handling exceptions and using :meth:`django.contrib.admin.ModelAdmin."
"message_user` to display a user friendly description of the problem in the "
"response."
msgstr ""
"アクションの実行中に予見可能なエラー状態が発生した場合、ユーザに問題を潔く知"
"らせるべきです。これは、例外のハンドリングと、 :meth:`django.contrib.admin."
"ModelAdmin.message_user` を使用して、レスポンスに問題のユーザーフレンドリーな"
"説明を表示することを意味します。"

msgid "Advanced action techniques"
msgstr "高度なアクションのテクニック"

msgid ""
"There's a couple of extra options and possibilities you can exploit for more "
"advanced options."
msgstr ""
"より高度なオプションのために、いくつかの追加の選択肢や出来ることがあります。"

msgid "Actions as :class:`ModelAdmin` methods"
msgstr ":class:`ModelAdmin` メソッドとしてのアクション"

msgid ""
"The example above shows the ``make_published`` action defined as a function. "
"That's perfectly fine, but it's not perfect from a code design point of "
"view: since the action is tightly coupled to the ``Article`` object, it "
"makes sense to hook the action to the ``ArticleAdmin`` object itself."
msgstr ""
"上記の例は、関数として定義された ``make_published`` アクションを示していま"
"す。これは全く問題ありませんが、コード設計の観点からは完璧とは言えません。ア"
"クションが ``Article`` オブジェクトに密接に結びついているため、アクションを "
"``ArticleAdmin`` オブジェクト自体にフックするほうが理にかなっています。"

msgid "You can do it like this::"
msgstr "次のようにします:"

msgid ""
"Notice first that we've moved ``make_published`` into a method and renamed "
"the ``modeladmin`` parameter to ``self``, and second that we've now put the "
"string ``'make_published'`` in ``actions`` instead of a direct function "
"reference. This tells the :class:`ModelAdmin` to look up the action as a "
"method."
msgstr ""
"まず ``make_published`` をメソッドに移動し、 ``modeladmin`` パラメータの名前"
"を ``self`` に変更していることに注意してください。次に、関数を直接参照する代"
"わりに ``actions`` に ``'make_published'`` という文字列を指定していることに注"
"意してください。これは :class:`ModelAdmin` にアクションをメソッドとして検索す"
"るように指示します。"

msgid ""
"Defining actions as methods gives the action more idiomatic access to the :"
"class:`ModelAdmin` itself, allowing the action to call any of the methods "
"provided by the admin."
msgstr ""
"アクションをメソッドとして定義することで、アクションはより自然な形で :class:"
"`ModelAdmin` 自体にアクセスすることができるようになり、admin が提供する任意の"
"メソッドをアクションが呼び出せるようになります。"

msgid ""
"For example, we can use ``self`` to flash a message to the user informing "
"them that the action was successful::"
msgstr ""
"例えば、``self`` を使って、アクションが成功したことを知らせるメッセージをフ"
"ラッシュすることができます:"

msgid ""
"This make the action match what the admin itself does after successfully "
"performing an action:"
msgstr ""
"これにより、アクションの実行に成功した後の表示が admin 自身による表示とマッチ"
"するようになります:"

msgid "Actions that provide intermediate pages"
msgstr "中間ページを提供するアクション"

msgid ""
"By default, after an action is performed the user is redirected back to the "
"original change list page. However, some actions, especially more complex "
"ones, will need to return intermediate pages. For example, the built-in "
"delete action asks for confirmation before deleting the selected objects."
msgstr ""
"デフォルトでは、アクションが実行された後、ユーザーは元のチェンジリストページ"
"にリダイレクトされます。しかし、いくつかのアクション、特により複雑なアクショ"
"ンは中間ページを返す必要があります。例えば、組み込みの削除アクションは、選択"
"したオブジェクトを削除する前に確認を求めます。"

msgid ""
"To provide an intermediary page, return an :class:`~django.http."
"HttpResponse` (or subclass) from your action. For example, you might write "
"an export function that uses Django's :doc:`serialization functions </topics/"
"serialization>` to dump some selected objects as JSON::"
msgstr ""
"中間ページを提供するには、アクションから :class:`~django.http.HttpResponse` "
"(またはそのサブクラス) を返します。たとえば、選択したオブジェクトを JSON とし"
"てダンプするエクスポート関数を書くには、Django の :doc:`シリアライズ関数 </"
"topics/serialization>` を使います:"

msgid ""
"Generally, something like the above isn't considered a great idea. Most of "
"the time, the best practice will be to return an :class:`~django.http."
"HttpResponseRedirect` and redirect the user to a view you've written, "
"passing the list of selected objects in the GET query string. This allows "
"you to provide complex interaction logic on the intermediary pages. For "
"example, if you wanted to provide a more complete export function, you'd "
"want to let the user choose a format, and possibly a list of fields to "
"include in the export. The best thing to do would be to write a small action "
"that redirects to your custom export view::"
msgstr ""
"通常、上記のようなことはあまり良いアイデアとはみなされません。たいていの場"
"合、 :class:`~django.http.HttpResponseRedirect` を返し、選択したオブジェクト"
"のリストを GET クエリ文字列で渡して、あなたが書いたビューにユーザをリダイレク"
"トするのがベストプラクティスでしょう。これにより、中間ページで複雑なインタラ"
"クションロジックを提供できます。たとえば、より完全なエクスポート機能を提供し"
"たい場合、ユーザーにフォーマットや、場合によってはエクスポートに含めるフィー"
"ルドのリストを選択させたいでしょう。最良の方法は、カスタムエクスポートビュー"
"にリダイレクトする小さなアクションを書くことです:"

msgid ""
"As you can see, the action is rather short; all the complex logic would "
"belong in your export view. This would need to deal with objects of any "
"type, hence the business with the ``ContentType``."
msgstr ""
"見ての通り、アクションはとても短いです。複雑なロジックはすべてエクスポート"
"ビューにあります。これは任意のタイプのオブジェクトを扱う必要があるため、"
"``ContentType`` に関する処理が必要になります。"

msgid "Writing this view is left as an exercise to the reader."
msgstr "このビューの作成は、読者にとっての演習課題として残されています。"

msgid "Making actions available site-wide"
msgstr "アクションをサイト全体で利用可能にする"

msgid ""
"Some actions are best if they're made available to *any* object in the admin "
"site -- the export action defined above would be a good candidate. You can "
"make an action globally available using :meth:`AdminSite.add_action()`. For "
"example::"
msgstr ""
"アクションによっては、管理サイトの *すべての* オブジェクトで利用できるように"
"するのが最適なものもあります。上記で定義したエクスポートアクションはその良い"
"候補でしょう。アクションをグローバルに利用可能にするには :meth:`AdminSite."
"add_action()` を使います。たとえば:"

msgid ""
"This makes the ``export_selected_objects`` action globally available as an "
"action named \"export_selected_objects\". You can explicitly give the action "
"a name -- good if you later want to programmatically :ref:`remove the action "
"<disabling-admin-actions>` -- by passing a second argument to :meth:"
"`AdminSite.add_action()`::"
msgstr ""
"これにより、``export_selected_objects`` アクションは "
"\"export_selected_objects\" という名前のアクションとしてグローバルに利用可能"
"になります。後でプログラム的に :ref:`アクションを削除する <disabling-admin-"
"actions>` 場合に備えてアクションに明示的に名前を付けたい場合は、 :meth:"
"`AdminSite.add_action()` へ第二引数を渡します:"

msgid "Disabling actions"
msgstr "アクションを無効にする"

msgid ""
"Sometimes you need to disable certain actions -- especially those :ref:"
"`registered site-wide <adminsite-actions>` -- for particular objects. "
"There's a few ways you can disable actions:"
msgstr ""
"特定のオブジェクトに対して、 :ref:`サイト全体に登録された <adminsite-"
"actions>` 特定のアクションを無効にしたいことがあるでしょう。アクションを無効"
"にする方法はいくつかあります:"

msgid "Disabling a site-wide action"
msgstr "サイト全体のアクションを無効にする"

msgid ""
"If you need to disable a :ref:`site-wide action <adminsite-actions>` you can "
"call :meth:`AdminSite.disable_action()`."
msgstr ""
":ref:`サイト全体のアクション <adminsite-actions>` を無効にするには、 :meth:"
"`AdminSite.disable_action()` を呼び出します。"

msgid ""
"For example, you can use this method to remove the built-in \"delete "
"selected objects\" action::"
msgstr ""
"例えば、このメソッドを使って、組み込みの \"delete selected objects\" アクショ"
"ンを削除できます:"

msgid ""
"Once you've done the above, that action will no longer be available site-"
"wide."
msgstr "上記の操作を行うと、そのアクションはサイト全体で無効になります。"

msgid ""
"If, however, you need to reenable a globally-disabled action for one "
"particular model, list it explicitly in your ``ModelAdmin.actions`` list::"
msgstr ""
"しかし、ある特定のモデルに対してグローバルに無効化されたアクションを再度有効"
"にする必要がある場合は、``ModelAdmin.actions`` リストに明示的にリストアップし"
"てください:"

msgid "Disabling all actions for a particular :class:`ModelAdmin`"
msgstr "特定の :class:`ModelAdmin` ですべてのアクションを無効にする"

msgid ""
"If you want *no* bulk actions available for a given :class:`ModelAdmin`, "
"set :attr:`ModelAdmin.actions` to ``None``::"
msgstr ""
"指定した :class:`ModelAdmin` で *すべての* 一括アクションを無効にするには、 :"
"attr:`ModelAdmin.actions` を ``None`` に設定します:"

msgid ""
"This tells the :class:`ModelAdmin` to not display or allow any actions, "
"including any :ref:`site-wide actions <adminsite-actions>`."
msgstr ""
"これは :class:`ModelAdmin` に対して、 :ref:`サイト全体のアクション "
"<adminsite-actions>` を含む全てのアクションを表示しない、または許可しないよう"
"にします。"

msgid "Conditionally enabling or disabling actions"
msgstr "条件付きでアクションを有効/無効にする"

msgid ""
"Finally, you can conditionally enable or disable actions on a per-request "
"(and hence per-user basis) by overriding :meth:`ModelAdmin.get_actions`."
msgstr ""
"最後に、 :meth:`ModelAdmin.get_actions` をオーバーライドすることで、リクエス"
"ト単位で (つまりユーザ単位で) 条件付きでアクションを有効/無効にすることができ"
"ます。"

msgid ""
"This returns a dictionary of actions allowed. The keys are action names, and "
"the values are ``(function, name, short_description)`` tuples."
msgstr ""
"これは許可されているアクションの辞書を返します。キーはアクション名で、値は "
"``(function, name, short_description)`` タプルです。"

msgid ""
"For example, if you only want users whose names begin with 'J' to be able to "
"delete objects in bulk::"
msgstr ""
"たとえば、名前が ``J`` で始まるユーザーだけがオブジェクトを一括削除できるよう"
"にしたい場合、次のようにします。"

msgid "Setting permissions for actions"
msgstr "アクションに権限を設定する"

msgid ""
"Actions may limit their availability to users with specific permissions by "
"wrapping the action function with the :func:`~django.contrib.admin.action` "
"decorator and passing the ``permissions`` argument::"
msgstr ""
"特定の権限を持つユーザーに利用を制限するには、アクション関数を :func:"
"`~django.contrib.admin.action` デコレータでラップし、次のように "
"``permissions`` 引数を渡します。"

msgid ""
"The ``make_published()`` action will only be available to users that pass "
"the :meth:`.ModelAdmin.has_change_permission` check."
msgstr ""
"``make_published()`` アクションは :meth:`.ModelAdmin.has_change_permission` "
"チェックに合格したユーザのみが利用できます。"

msgid ""
"If ``permissions`` has more than one permission, the action will be "
"available as long as the user passes at least one of the checks."
msgstr ""
"もし ``permissions`` が複数のパーミッションを持っている場合、ユーザが少なくと"
"も1つのチェックに合格していれば、そのアクションを利用できます。"

msgid ""
"Available values for ``permissions`` and the corresponding method checks are:"
msgstr ""
"``permissions`` で使用可能な値と対応するメソッドチェックは以下の通りです。"

msgid "``'add'``: :meth:`.ModelAdmin.has_add_permission`"
msgstr "``'add'``: :meth:`.ModelAdmin.has_add_permission`"

msgid "``'change'``: :meth:`.ModelAdmin.has_change_permission`"
msgstr "``'change'``: :meth:`.ModelAdmin.has_change_permission`"

msgid "``'delete'``: :meth:`.ModelAdmin.has_delete_permission`"
msgstr "``'delete'``: :meth:`.ModelAdmin.has_delete_permission`"

msgid "``'view'``: :meth:`.ModelAdmin.has_view_permission`"
msgstr "``'view'``: :meth:`.ModelAdmin.has_view_permission`"

msgid ""
"You can specify any other value as long as you implement a corresponding "
"``has_<value>_permission(self, request)`` method on the ``ModelAdmin``."
msgstr ""
"対応する ``has_<value>_permission(self, request)`` メソッドを ``ModelAdmin`` "
"に実装すれば、他の値も指定できます。"

msgid "For example::"
msgstr "例:"

msgid "The ``action`` decorator"
msgstr "``action`` デコレータ"

msgid ""
"This decorator can be used for setting specific attributes on custom action "
"functions that can be used with :attr:`~django.contrib.admin.ModelAdmin."
"actions`::"
msgstr ""
"このデコレータは、:attr:`~django.contrib.admin.ModelAdmin.actions` で使用でき"
"るカスタムアクション関数に特定の属性を設定するために使用できます。"

msgid ""
"This is equivalent to setting some attributes (with the original, longer "
"names) on the function directly::"
msgstr ""
"これは、いくつかの属性を（元の長い名前で）関数に直接設定することと等価です。"

msgid ""
"Use of this decorator is not compulsory to make an action function, but it "
"can be useful to use it without arguments as a marker in your source to "
"identify the purpose of the function::"
msgstr ""
"このデコレータの使用は、アクション関数を作成する上で必須ではありませんが、 関"
"数の目的を特定するための目印として、引数なしで使用すると便利です。"

msgid "In this case it will add no attributes to the function."
msgstr "この場合、関数に属性は追加されません。"

msgid ""
"Action descriptions are %-formatted and may contain ``'%(verbose_name)s'`` "
"and ``'%(verbose_name_plural)s'`` placeholders, which are replaced, "
"respectively, by the model's :attr:`~django.db.models.Options.verbose_name` "
"and :attr:`~django.db.models.Options.verbose_name_plural`."
msgstr ""
"アクションの説明は %-フォーマットで、 ``'%(verbose_name)s'`` と "
"``'%(verbose_name_plural)s'`` のプレースホルダを含むことができ、それぞれモデ"
"ルの :attr:`~django.db.models.Options.verbose_name` と :attr:`~django.db."
"models.Options.verbose_name_plural` に置き換えられます。"

msgid "The Django admin documentation generator"
msgstr "Django admin ドキュメントジェネレータ"

msgid ""
"Django's :mod:`~django.contrib.admindocs` app pulls documentation from the "
"docstrings of models, views, template tags, and template filters for any app "
"in :setting:`INSTALLED_APPS` and makes that documentation available from "
"the :mod:`Django admin <django.contrib.admin>`."
msgstr ""
"Django の :mod:`~django.contrib.admindocs` アプリは、 :setting:"
"`INSTALLED_APPS` にある任意のアプリのモデル、ビュー、テンプレートタグ、 テン"
"プレートフィルタの docstring からドキュメントを取り出し、 :mod:`Django admin "
"<django.contrib.admin>` から利用できるようにします。"

msgid "Overview"
msgstr "概要"

msgid ""
"To activate the :mod:`~django.contrib.admindocs`, you will need to do the "
"following:"
msgstr ""
":mod:`~django.contrib.admindocs` を有効にするには、以下のようにします。"

msgid "Add :mod:`django.contrib.admindocs` to your :setting:`INSTALLED_APPS`."
msgstr ""
":setting:`INSTALLED_APPS` に :mod:`django.contrib.admindocs` を追加します。"

msgid ""
"Add ``path('admin/doc/', include('django.contrib.admindocs.urls'))`` to your "
"``urlpatterns``. Make sure it's included *before* the ``'admin/'`` entry, so "
"that requests to ``/admin/doc/`` don't get handled by the latter entry."
msgstr ""
"``urlpatterns`` に ``path('admin/doc/', include('django.contrib.admindocs."
"urls'))`` を追加します。これは ``'admin/'`` の前にインクルードして、 ``/"
"admin/doc/`` へのリクエストが ``'admin/'`` のエントリで処理されないようにしま"
"す。"

msgid "Install the :pypi:`docutils` 0.19+ package."
msgstr ":pypi:`docutils` 0.19+ パッケージをインストールします。"

msgid ""
"**Optional:** Using the admindocs bookmarklets requires ``django.contrib."
"admindocs.middleware.XViewMiddleware`` to be installed."
msgstr ""
"**オプション:** admindocs ブックマークレットを使うには ``django.contrib."
"admindocs.middleware.XViewMiddleware`` がインストールされている必要がありま"
"す。"

msgid ""
"Once those steps are complete, you can start browsing the documentation by "
"going to your admin interface and clicking the \"Documentation\" link in the "
"upper right of the page."
msgstr ""
"これらの手順が完了したら、管理インターフェイスに移動し、ページの右上にある "
"\"ドキュメント\" リンクをクリックすれば、ドキュメントを読むことができます。"

msgid "Documentation helpers"
msgstr "ドキュメンテーション・ヘルパー"

msgid ""
"The following special markup can be used in your docstrings to easily create "
"hyperlinks to other components:"
msgstr ""
"以下の特別なマークアップをdocstringで使用することで、他のコンポーネントへのハ"
"イパーリンクを簡単に作成できます:"

msgid "Django Component"
msgstr "Django コンポーネント"

msgid "reStructuredText roles"
msgstr "reStructuredText のロール"

msgid "``:model:`app_label.ModelName```"
msgstr "``:model:`app_label.ModelName```"

msgid "Views"
msgstr "ビュー"

msgid "``:view:`app_label.view_name```"
msgstr "``:view:`app_label.view_name```"

msgid "Template tags"
msgstr "テンプレートタグ"

msgid "``:tag:`tagname```"
msgstr "``:tag:`tagname```"

msgid "Template filters"
msgstr "テンプレートフィルタ"

msgid "``:filter:`filtername```"
msgstr "``:filter:`filtername```"

msgid "``:template:`path/to/template.html```"
msgstr "``:template:`path/to/template.html```"

msgid "Model reference"
msgstr "モデルのリファレンス"

msgid ""
"The **models** section of the ``admindocs`` page describes each model in the "
"system along with all the fields, properties, and methods available on it. "
"Relationships to other models appear as hyperlinks. Descriptions are pulled "
"from ``help_text`` attributes on fields or from docstrings on model methods."
msgstr ""
"``admindocs`` ページの **モデル** セクションでは、システムの各モデルについ"
"て、そのモデルで利用可能なすべてのフィールド、プロパティ、メソッドとともに説"
"明しています。他のモデルとのリレーションシップはハイパーリンクとして表示され"
"ます。説明はフィールドの ``help_text`` 属性、またはモデルのメソッドの "
"docstrings から取得されます。"

msgid "A model with useful documentation might look like this::"
msgstr "役に立つドキュメントを持ったモデルは次のようなものです:"

msgid "View reference"
msgstr "ビューのリファレンス"

msgid ""
"Each URL in your site has a separate entry in the ``admindocs`` page, and "
"clicking on a given URL will show you the corresponding view. Helpful things "
"you can document in your view function docstrings include:"
msgstr ""
"サイト内の各URLは ``admindocs`` ページに個別のエントリーがあり、指定したURLを"
"クリックすると対応するビューが表示されます。ビュー関数のdocstringに書いておく"
"と便利な内容は以下のようなものです:"

msgid "A short description of what the view does."
msgstr "ビューが何をするのかについての短い説明。"

msgid ""
"The **context**, or a list of variables available in the view's template."
msgstr "**context** 、あるいはビューのテンプレートで使用可能な変数のリスト。"

msgid "The name of the template or templates that are used for that view."
msgstr "そのビューで使用されるテンプレート名。"

msgid "Template tags and filters reference"
msgstr "テンプレートタグとフィルタのリファレンス"

msgid ""
"The **tags** and **filters** ``admindocs`` sections describe all the tags "
"and filters that come with Django (in fact, the :ref:`built-in tag reference "
"<ref-templates-builtins-tags>` and :ref:`built-in filter reference <ref-"
"templates-builtins-filters>` documentation come directly from those pages). "
"Any tags or filters that you create or are added by a third-party app will "
"show up in these sections as well."
msgstr ""
"**タグ** と **フィルタ** の ``admindocs`` セクションには、Django に付属するす"
"べてのタグとフィルタが記述されています (実際、 :ref:`組み込みタグのリファレン"
"ス <ref-templates-builtins-tags>` と :ref:`組み込みフィルタのリファレンス "
"<ref-templates-builtins-filters>` のドキュメントはこれらのページから直接来て"
"います)。あなたが作成したタグやフィルタ、あるいはサードパーティのアプリケー"
"ションが追加したタグやフィルタも、これらのセクションに表示されます。"

msgid "Template reference"
msgstr "テンプレートのリファレンス"

msgid ""
"While ``admindocs`` does not include a place to document templates by "
"themselves, if you use the ``:template:`path/to/template.html``` syntax in a "
"docstring the resulting page will verify the path of that template with "
"Django's :ref:`template loaders <template-loaders>`. This can be a handy way "
"to check if the specified template exists and to show where on the "
"filesystem that template is stored."
msgstr ""
"``admindocs`` にはテンプレートそのものをドキュメント化する場所はありません"
"が、 docstring の中で ``:template:`path/to/template.html``` 構文を使うと、結"
"果のページは Django の :ref:`テンプレート ローダ <template-loaders>` を使って"
"テンプレートのパスを確認します。これは、指定されたテンプレートが存在するかど"
"うかを確認し、そのテンプレートがファイルシステム上のどこに保存されているかを"
"表示する便利な方法です。"

msgid "Included Bookmarklets"
msgstr "付属のブックマークレット"

msgid "One bookmarklet is available from the ``admindocs`` page:"
msgstr "1 つのブックマークレットが ``admindocs`` ページから利用できます:"

msgid "Documentation for this page"
msgstr "このページのドキュメント"

msgid ""
"Jumps you from any page to the documentation for the view that generates "
"that page."
msgstr "各ページから、ページを生成したビューのドキュメントにジャンプします。"

msgid ""
"Using this bookmarklet requires that ``XViewMiddleware`` is installed and "
"that you are logged into the :mod:`Django admin <django.contrib.admin>` as "
"a :class:`~django.contrib.auth.models.User` with :attr:`~django.contrib.auth."
"models.User.is_staff` set to ``True``."
msgstr ""
"このブックマークレットを使用するには、 ``XViewMiddleware`` がインストールさ"
"れ、 :class:`~django.contrib.auth.models.User` として :mod:`Django admin "
"<django.contrib.admin>` にログインし、 :attr:`~django.contrib.auth.models."
"User.is_staff` を ``True`` に設定している必要があります。"

msgid "``ModelAdmin`` List Filters"
msgstr "``ModelAdmin`` リストフィルタ"

msgid ""
"``ModelAdmin`` classes can define list filters that appear in the right "
"sidebar of the change list page of the admin, as illustrated in the "
"following screenshot:"
msgstr ""
"``ModelAdmin`` クラスは、以下のスクリーンショットのように、admin アプリケー"
"ションの変更一覧ページの右サイドバーに表示されるリストフィルタを定義できます:"

msgid ""
"To activate per-field filtering, set :attr:`ModelAdmin.list_filter` to a "
"list or tuple of elements, where each element is one of the following types:"
msgstr ""
"フィールドごとのフィルタリングを有効にするには、:attr:`ModelAdmin."
"list_filter` を要素のリストまたはタプルに設定し、各要素が以下のいずれかのタイ"
"プでなければなりません:"

msgid "A field name."
msgstr "フィールド名。"

msgid "A subclass of ``django.contrib.admin.SimpleListFilter``."
msgstr "``django.contrib.admin.SimpleListFilter`` のサブクラス。"

msgid ""
"A 2-tuple containing a field name and a subclass of ``django.contrib.admin."
"FieldListFilter``."
msgstr ""
"フィールド名と ``django.contrib.admin.FieldListFilter`` のサブクラスを含む 2"
"値タプル。"

msgid ""
"See the examples below for discussion of each of these options for defining "
"``list_filter``."
msgstr ""
"``list_filter`` を定義するための各オプションについては、以下の例を参照してく"
"ださい。"

msgid "Using a field name"
msgstr "フィールド名を使用する"

msgid ""
"The simplest option is to specify the required field names from your model."
msgstr ""
"最も簡単なオプションは、モデルから必須のフィールド名を指定することです。"

msgid ""
"Each specified field should be either a ``BooleanField``, ``CharField``, "
"``DateField``, ``DateTimeField``, ``IntegerField``, ``ForeignKey`` or "
"``ManyToManyField``, for example::"
msgstr ""
"指定するフィールドは ``BooleanField``, ``CharField``, ``DateField``, "
"``DateTimeField``, ``IntegerField``, ``ForeignKey`` または "
"``ManyToManyField`` のいずれかでなければなりません: "

msgid ""
"Field names in ``list_filter`` can also span relations using the ``__`` "
"lookup, for example::"
msgstr ""
"``list_filter`` 内のフィールド名は ``__`` ルックアップを使って関係先を参照で"
"きます。たとえば、次のように参照できます。"

msgid "Using a ``SimpleListFilter``"
msgstr "``SimpleListFilter`` を使用する"

msgid ""
"For custom filtering, you can define your own list filter by subclassing "
"``django.contrib.admin.SimpleListFilter``. You need to provide the ``title`` "
"and ``parameter_name`` attributes, and override the ``lookups`` and "
"``queryset`` methods, e.g.::"
msgstr ""
"フィルタリングをカスタマイズするには、 ``django.contrib.admin."
"SimpleListFilter`` をサブクラス化して独自のリストフィルタを定義します。 "
"``title`` と ``parameter_name`` 属性を指定し、 ``lookups`` と ``queryset`` メ"
"ソッドをオーバーライドする必要があります: "

msgid ""
"As a convenience, the ``HttpRequest`` object is passed to the ``lookups`` "
"and ``queryset`` methods, for example::"
msgstr ""
"利便性のため、``HttpRequest`` オブジェクトが ``lookups`` と ``queryset`` メ"
"ソッドに渡されます。たとえば、次のようにします。"

msgid ""
"Also as a convenience, the ``ModelAdmin`` object is passed to the "
"``lookups`` method, for example if you want to base the lookups on the "
"available data::"
msgstr ""
"たとえば利用可能なデータに基づくルックアップを行いたい場合などに便利なよう"
"に、``ModelAdmin`` オブジェクトは ``lookups`` メソッドに渡されます。"

msgid "Using a field name and an explicit ``FieldListFilter``"
msgstr "フィールド名と明示的な ``FieldListFilter`` を使用する"

msgid ""
"Finally, if you wish to specify an explicit filter type to use with a field "
"you may provide a ``list_filter`` item as a 2-tuple, where the first element "
"is a field name and the second element is a class inheriting from ``django."
"contrib.admin.FieldListFilter``, for example::"
msgstr ""
"最後に、フィールドに使用する明示的なフィルタタイプを指定したい場合は、2値タプ"
"ルとして ``list_filter`` 項目を指定できます。最初の要素はフィールド名で、2番"
"目の要素は ``django.contrib.admin.FieldListFilter`` を継承したクラスです。例:"

msgid ""
"Here the ``is_staff`` field will use the ``BooleanFieldListFilter``. "
"Specifying only the field name, fields will automatically use the "
"appropriate filter for most cases, but this format allows you to control the "
"filter used."
msgstr ""
"ここでは ``is_staff`` フィールドは ``BooleanFieldListFilter`` を使用します。"
"ほとんどの場合、フィールド名を指定するだけでフィールドは自動的に適切なフィル"
"タを使用しますが、この形式では使用するフィルタを制御できます。"

msgid ""
"The following examples show available filter classes that you need to opt-in "
"to use."
msgstr ""
"以下の例は、使用するためにオプトインする必要がある利用可能なフィルタクラスを"
"示します。"

msgid ""
"You can limit the choices of a related model to the objects involved in that "
"relation using ``RelatedOnlyFieldListFilter``::"
msgstr ""
"リレーション先モデルの選択肢を、そのリレーションに含まれるオブジェクトに限定"
"できます。これには ``RelatedOnlyFieldListFilter`` を使用します:"

msgid ""
"Assuming ``author`` is a ``ForeignKey`` to a ``User`` model, this will limit "
"the ``list_filter`` choices to the users who have written a book, instead of "
"listing all users."
msgstr ""
"``author`` が ``User`` モデルの ``ForeignKey`` であるとすると、これは "
"``list_filter`` の選択肢を、すべてのユーザーではなく、本を書いたユーザーに制"
"限します。"

msgid ""
"You can filter empty values using ``EmptyFieldListFilter``, which can filter "
"on both empty strings and nulls, depending on what the field allows to "
"store::"
msgstr ""
"空の値は ``EmptyFieldListFilter`` を使ってフィルタリングできます。これは、"
"フィールドが何を保存できるかに応じて、空の文字列と NULL の両方をフィルタリン"
"グできます:"

msgid ""
"By defining a filter using the ``__in`` lookup, it is possible to filter for "
"any of a group of values. You need to override the ``expected_parameters`` "
"method, and the specify the ``lookup_kwargs`` attribute with the appropriate "
"field name. By default, multiple values in the query string will be "
"separated with commas, but this can be customized via the ``list_separator`` "
"attribute. The following example shows such a filter using the vertical-pipe "
"character as the separator::"
msgstr ""
"``__in`` ルックアップを使用してフィルタを定義することで、任意の値のいずれかで"
"フィルタリングできます。``expected_parameters`` メソッドをオーバーライドし、"
"適切なフィールド名を持つ ``lookup_kwargs`` 属性を指定する必要があります。クエ"
"リ文字列内の複数の値はデフォルトでカンマで区切られますが、これは "
"``list_separator`` 属性を介してカスタマイズできます。以下の例は、縦棒文字を区"
"切り文字として使用するフィルタを示しています:"

msgid ""
"The :class:`~django.contrib.contenttypes.fields.GenericForeignKey` field is "
"not supported."
msgstr ""
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` フィールドはサ"
"ポートされていません。"

msgid ""
"List filters typically appear only if the filter has more than one choice. A "
"filter's ``has_output()`` method controls whether or not it appears."
msgstr ""
"リストフィルタは通常、フィルタに複数の選択肢がある場合にのみ表示されます。"
"フィルタの ``has_output()`` メソッドは、フィルタが表示されるかどうかを制御し"
"ます。"

msgid ""
"It is possible to specify a custom template for rendering a list filter::"
msgstr "リストフィルタのレンダリングにはカスタムテンプレートを指定できます:"

msgid ""
"See the default template provided by Django (``admin/filter.html``) for a "
"concrete example."
msgstr ""
"具体的な例については、Django により提供されるデフォルトのテンプレート "
"(``admin/filter.html``) を参照してください。"

msgid "Facets"
msgstr "ファセット (Facet)"

msgid ""
"By default, counts for each filter, known as facets, can be shown by "
"toggling on via the admin UI. These counts will update according to the "
"currently applied filters. See :attr:`ModelAdmin.show_facets` for more "
"details."
msgstr ""
"デフォルトでは、ファセット (facet) と呼ばれる各フィルタのカウントは、admin UI"
"からトグルで表示できます。これらのカウントは現在適用されているフィルタに応じ"
"て更新されます。詳細は :attr:`ModelAdmin.show_facets` を参照してください。"

msgid "The Django admin site"
msgstr "Django の admin サイト"

msgid ""
"One of the most powerful parts of Django is the automatic admin interface. "
"It reads metadata from your models to provide a quick, model-centric "
"interface where trusted users can manage content on your site. The admin's "
"recommended use is limited to an organization's internal management tool. "
"It's not intended for building your entire front end around."
msgstr ""
"Django のパワフルな特徴の1つは、自動的に生成される admin インタフェースです。"
"あなたのモデルクラスからメタデータを読み取り、モデル中心のインタフェースを提"
"供します。このインタフェースのおかげで、ユーザはあなたのサイトのコンテンツを"
"操作できます。admin サイトのオススメの使い方は、組織内で利用する管理ツールに"
"利用を制限することです。admin サイトは、あなたのサイトのフロントエンドやその"
"周辺を含んだ全体を作成することを意図していません。"

msgid ""
"The admin has many hooks for customization, but beware of trying to use "
"those hooks exclusively. If you need to provide a more process-centric "
"interface that abstracts away the implementation details of database tables "
"and fields, then it's probably time to write your own views."
msgstr ""
"admin サイトは、カスタマイゼーションのためのたくさんのフックを持っています。"
"しかしそれらのフックを使う際には気をつけてください。もしあなたが、データベー"
"スのテーブルとフィールドを使用しないような、よりプロセス中心のインタフェース"
"を提供する必要があるなら、おそらく自分でビューを書いたほうが良いでしょう。"

msgid ""
"In this document we discuss how to activate, use, and customize Django's "
"admin interface."
msgstr ""
"このドキュメントでは、Django の admin インタフェースを有効にして使用したりカ"
"スタマイズする方法について説明します。"

msgid ""
"The admin is enabled in the default project template used by :djadmin:"
"`startproject`."
msgstr ""
"admin サイトは :djadmin:`startproject` で使用されるデフォルトのプロジェクトテ"
"ンプレートで有効になります。"

msgid ""
"If you're not using the default project template, here are the requirements:"
msgstr ""
"デフォルトのプロジェクトテンプレートを使用していない場合、要件は以下の通りで"
"す:"

msgid ""
"Add ``'django.contrib.admin'`` and its dependencies - :mod:`django.contrib."
"auth`, :mod:`django.contrib.contenttypes`, :mod:`django.contrib.messages`, "
"and :mod:`django.contrib.sessions` - to your :setting:`INSTALLED_APPS` "
"setting."
msgstr ""
"``'django.contrib.admin'`` とその依存関係である :mod:`django.contrib.auth`, :"
"mod:`django.contrib.contenttypes`, :mod:`django.contrib.messages`, および :"
"mod:`django.contrib.sessions` を、 :setting:`INSTALLED_APPS` 設定に追加してく"
"ださい。"

msgid ""
"Configure a :class:`~django.template.backends.django.DjangoTemplates` "
"backend in your :setting:`TEMPLATES` setting with ``django.template."
"context_processors.request``, ``django.contrib.auth.context_processors."
"auth``, and ``django.contrib.messages.context_processors.messages`` in the "
"``'context_processors'`` option of :setting:`OPTIONS <TEMPLATES-OPTIONS>`."
msgstr ""
":class:`~django.template.backends.django.DjangoTemplates` バックエンドを、:"
"setting:`TEMPLATES` 設定で構成し、``django.template.context_processors."
"request``, ``django.contrib.auth.context_processors.auth``, および ``django."
"contrib.messages.context_processors.messages`` を :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>` の ``'context_processors'`` オプションに含めてください。"

msgid ""
"If you've customized the :setting:`MIDDLEWARE` setting, :class:`django."
"contrib.auth.middleware.AuthenticationMiddleware` and :class:`django.contrib."
"messages.middleware.MessageMiddleware` must be included."
msgstr ""
":setting:`MIDDLEWARE` 設定をカスタマイズしている場合、 :class:`django."
"contrib.auth.middleware.AuthenticationMiddleware` と :class:`django.contrib."
"messages.middleware.MessageMiddleware` を含める必要があります。"

msgid ""
":ref:`Hook the admin's URLs into your URLconf <hooking-adminsite-to-"
"urlconf>`."
msgstr ""
":ref:`管理サイトのURLをあなたのURLconfにフックする <hooking-adminsite-to-"
"urlconf>` 。"

msgid ""
"After you've taken these steps, you'll be able to use the admin site by "
"visiting the URL you hooked it into (``/admin/``, by default)."
msgstr ""
"これらのステップを踏んだ後、フックしたURL (デフォルトでは ``/admin/``) を訪れ"
"ることで、管理サイトを使用できるようになります。"

msgid ""
"If you need to create a user to login with, use the :djadmin:"
"`createsuperuser` command. By default, logging in to the admin requires that "
"the user has the :attr:`~.User.is_staff` attribute set to ``True``."
msgstr ""
"ログイン用のユーザーを作成する必要がある場合は、:djadmin:`createsuperuser` コ"
"マンドを使用してください。デフォルトでは、管理サイトにログインするにはユー"
"ザーの :attr:`~.User.is_staff` 属性が ``True`` に設定されている必要がありま"
"す。"

msgid ""
"Finally, determine which of your application's models should be editable in "
"the admin interface. For each of those models, register them with the admin "
"as described in :class:`ModelAdmin`."
msgstr ""
"最後に、アプリケーションのモデルのうちどれが管理インターフェースで編集可能で"
"あるべきかを決定します。それらのモデルごとに、:class:`ModelAdmin` に記述され"
"ているように、管理サイトに登録します。"

msgid "Other topics"
msgstr "他のトピック"

msgid ""
"For information about serving the static files (images, JavaScript, and CSS) "
"associated with the admin in production, see :ref:`serving-files`."
msgstr ""
"本番環境での admin と関連する静的ファイル (画像、JavaScript、CSS) の配信につ"
"いて知りたい場合は、:ref:`serving-files` を参照してください。"

msgid "Having problems?  Try :doc:`/faq/admin`."
msgstr "問題が解決しない場合は、:doc:`/faq/admin` を参照してみてください。"

msgid "``ModelAdmin`` objects"
msgstr "``ModelAdmin`` のオブジェクト"

msgid ""
"The ``ModelAdmin`` class is the representation of a model in the admin "
"interface. Usually, these are stored in a file named ``admin.py`` in your "
"application. Let's take a look at an example of the ``ModelAdmin``::"
msgstr ""
"``ModelAdmin`` クラスは、admin インターフェース内でモデルを表現する方法です。"
"通常、アプリケーション内の ``admin.py`` に記述されます。``ModelAdmin`` の例を"
"見てみましょう:"

msgid "Do you need a ``ModelAdmin`` object at all?"
msgstr "いつでも ``ModelAdmin`` オブジェクトが必要なのか?"

msgid ""
"In the preceding example, the ``ModelAdmin`` class doesn't define any custom "
"values (yet). As a result, the default admin interface will be provided. If "
"you are happy with the default admin interface, you don't need to define a "
"``ModelAdmin`` object at all -- you can register the model class without "
"providing a ``ModelAdmin`` description. The preceding example could be "
"simplified to::"
msgstr ""
"上記の例では、ModelAdminクラスはカスタム値を（まだ）定義していません。その結"
"果、デフォルトの管理インターフェースが提供されます。デフォルトのadminインター"
"フェースに満足している場合は、ModelAdminオブジェクトを定義する必要はまったく"
"ありません。ModelAdminの記述をせずにモデルクラスを登録できます。上記の例は、"
"次のように簡略化できます。"

msgid "The ``register`` decorator"
msgstr "``register`` デコレータ"

msgid "There is also a decorator for registering your ``ModelAdmin`` classes::"
msgstr "``ModelAdmin`` を登録するために、デレコータも用意されています::"

msgid ""
"It's given one or more model classes to register with the ``ModelAdmin``. If "
"you're using a custom :class:`AdminSite`, pass it using the ``site`` keyword "
"argument::"
msgstr ""
"1 つ以上のモデルが与えられ、 ``ModelAdmin`` に登録されます。カスタムの :"
"class:`AdminSite` を使用している場合、``site`` キーワード引数を使って渡してく"
"ださい::"

msgid ""
"You can't use this decorator if you have to reference your model admin class "
"in its ``__init__()`` method, e.g. ``super(PersonAdmin, self)."
"__init__(*args, **kwargs)``. You can use ``super().__init__(*args, "
"**kwargs)``."
msgstr ""
"このデコレータは、model admin クラスをその ``__init__()`` メソッド内で参照す"
"る必要がある場合（例： ``super(PersonAdmin, self).__init__(*args, "
"**kwargs)`` ）には使用できません。代わりに ``super().__init__(*args, "
"**kwargs)`` のようにします。"

msgid "Discovery of admin files"
msgstr "admin ファイルを見つける"

msgid ""
"When you put ``'django.contrib.admin'`` in your :setting:`INSTALLED_APPS` "
"setting, Django automatically looks for an ``admin`` module in each "
"application and imports it."
msgstr ""
":setting:`INSTALLED_APPS` 設定内に ``'django.contrib.admin'`` を記述すると、"
"Django は自動的に各アプリケーション内で ``admin`` モジュールを探してインポー"
"トします。"

msgid ""
"This is the default :class:`~django.apps.AppConfig` class for the admin. It "
"calls :func:`~django.contrib.admin.autodiscover()` when Django starts."
msgstr ""
"これは、admin に対するデフォルトの :class:`~django.apps.AppConfig` クラスで"
"す。Django が開始すると :func:`~django.contrib.admin.autodiscover()` を呼び出"
"します。"

msgid ""
"This class works like :class:`~django.contrib.admin.apps.AdminConfig`, "
"except it doesn't call :func:`~django.contrib.admin.autodiscover()`."
msgstr ""
"このクラスは :class:`~django.contrib.admin.apps.AdminConfig` と同じように動作"
"しますが、:func:`~django.contrib.admin.autodiscover()` を呼び出しません。"

msgid ""
"A dotted import path to the default admin site's class or to a callable that "
"returns a site instance. Defaults to ``'django.contrib.admin.sites."
"AdminSite'``. See :ref:`overriding-default-admin-site` for usage."
msgstr ""
"これはデフォルトの admin サイトのクラスやサイトインスタンスを返す呼び出し可能"
"オブジェクトへのドット区切りのインポートパスです。デフォルトは ``'django."
"contrib.admin.sites.AdminSite'`` です。使い方は :ref:`overriding-default-"
"admin-site` を参照してください。"

msgid ""
"This function attempts to import an ``admin`` module in each installed "
"application. Such modules are expected to register models with the admin."
msgstr ""
"この関数は、インストールされた各アプリケーション内で ``admin`` モジュールをイ"
"ンポートするよう試みます。これらのモジュールは admin にモデルが登録されている"
"ものと想定されます。"

msgid ""
"Typically you won't need to call this function directly as :class:`~django."
"contrib.admin.apps.AdminConfig` calls it when Django starts."
msgstr ""
"通常、この機能を手動で呼び出す必要はありません。Django が開始するとき :class:"
"`~django.contrib.admin.apps.AdminConfig` が呼び出してくれます。"

msgid ""
"If you are using a custom ``AdminSite``, it is common to import all of the "
"``ModelAdmin`` subclasses into your code and register them to the custom "
"``AdminSite``. In that case, in order to disable auto-discovery, you should "
"put ``'django.contrib.admin.apps.SimpleAdminConfig'`` instead of ``'django."
"contrib.admin'`` in your :setting:`INSTALLED_APPS` setting."
msgstr ""
"カスタム ``AdminSite`` を使用している場合、通常はすべての ``ModelAdmin`` サブ"
"クラスをコードにインポートし、それらをカスタム ``AdminSite`` に登録します。そ"
"の場合、自動検出を無効にするには、:setting:`INSTALLED_APPS` 設定で ``'django."
"contrib.admin'`` の代わりに ``'django.contrib.admin.apps."
"SimpleAdminConfig'`` を指定する必要があります。"

msgid "``ModelAdmin`` options"
msgstr "``ModelAdmin`` のオプション"

msgid ""
"The ``ModelAdmin`` is very flexible. It has several options for dealing with "
"customizing the interface. All options are defined on the ``ModelAdmin`` "
"subclass::"
msgstr ""
"``ModelAdmin`` は非常に柔軟にできています。インターフェイスをカスタマイズする"
"ために、様々なオプションが用意されています。すべてのプションは "
"``ModelAdmin`` サブクラスで定義します::"

msgid ""
"A list of actions to make available on the change list page. See :doc:`/ref/"
"contrib/admin/actions` for details."
msgstr ""
"チェンジリストページで有効化するアクションのリストです。詳細は :doc:`/ref/"
"contrib/admin/actions` を参照してください。"

msgid ""
"Controls where on the page the actions bar appears. By default, the admin "
"changelist displays actions at the top of the page (``actions_on_top = True; "
"actions_on_bottom = False``)."
msgstr ""
"ページ上のどこにアクションバーが表示されかをコントロールします。デフォルトで"
"は、admin チェンジリストはページのトップにアクションを表示します "
"(``actions_on_top = True; actions_on_bottom = False``)。"

msgid ""
"Controls whether a selection counter is displayed next to the action "
"dropdown. By default, the admin changelist will display it "
"(``actions_selection_counter = True``)."
msgstr ""
"アクションのドロップダウンの隣に選択用カウンターを表示するかどうかをコント"
"ロールします。デフォルトでは、admin チェンジリストは表示するようになっていま"
"す (``actions_selection_counter = True``)。"

msgid ""
"Set ``date_hierarchy`` to the name of a ``DateField`` or ``DateTimeField`` "
"in your model, and the change list page will include a date-based drilldown "
"navigation by that field."
msgstr ""
"``date_hierarchy`` をモデル内の ``DateField`` か ``DateTimeField`` の名前に"
"セットすると、チェンジリストのページがそのフィールドによる日付ベースのドリル"
"ダウンナビゲーションを含むようになります。"

msgid ""
"You can also specify a field on a related model using the ``__`` lookup, for "
"example::"
msgstr ""
"``__`` ルックアップを使用して、関連するモデルのフィールドを指定することもでき"
"ます。たとえば::"

msgid ""
"This will intelligently populate itself based on available data, e.g. if all "
"the dates are in one month, it'll show the day-level drill-down only."
msgstr ""
"この機能は、有効なデータに基づいて、適切に変化させます。たとえば、すべての日"
"付が 1 月に収まっている場合、日のドリルダウンのみを表示します。"

msgid ""
"``date_hierarchy`` uses :meth:`QuerySet.datetimes() <django.db.models.query."
"QuerySet.datetimes>` internally. Please refer to its documentation for some "
"caveats when time zone support is enabled (:setting:`USE_TZ = True "
"<USE_TZ>`)."
msgstr ""
"``date_hierarchy`` は内部的に :meth:`QuerySet.datetimes() <django.db.models."
"query.QuerySet.datetimes>` を使用します。タイムゾーンサポートが有効 (:"
"setting:`USE_TZ = True <USE_TZ>`) な際に注意すべき点について、ドキュメントを"
"参照してください。"

msgid ""
"This attribute overrides the default display value for record's fields that "
"are empty (``None``, empty string, etc.). The default value is ``-`` (a "
"dash). For example::"
msgstr ""
"この属性は、空(``None``、空の文字列、等)のレコードのフィールドに対するデフォ"
"ルトの表示値をオーバーライドします。デフォルト値は ``-`` (ダッシュ)です。たと"
"えば::"

msgid ""
"You can also override ``empty_value_display`` for all admin pages with :attr:"
"`AdminSite.empty_value_display`, or for specific fields like this::"
msgstr ""
":attr:`AdminSite.empty_value_display` ですべての admin ページもしくは特定の"
"フィールドに対して ``empty_value_display`` をオーバーライドすることもできま"
"す::"

msgid ""
"This attribute, if given, should be a list of field names to exclude from "
"the form."
msgstr ""
"この属性を使用する場合、フォームから除外するフィールドの名称をリストで指定し"
"ます。"

msgid "For example, let's consider the following model::"
msgstr "たとえば、以下のモデルを考えてみましょう::"

msgid ""
"If you want a form for the ``Author`` model that includes only the ``name`` "
"and ``title`` fields, you would specify ``fields`` or ``exclude`` like this::"
msgstr ""
"``Author`` モデルに対するフォームが ``name`` と ``title`` の 2 つのフィールド"
"のみを含むようにしたい場合、以下のように ``fields`` か ``exclude`` を指定する"
"ことになります::"

msgid ""
"Since the Author model only has three fields, ``name``, ``title``, and "
"``birth_date``, the forms resulting from the above declarations will contain "
"exactly the same fields."
msgstr ""
"Author モデルが 3 つのフィールド (``name``、``title``、``birth_date``) しか"
"持っていないので、上記の宣言によって生成されるフォームはまったく同じフィール"
"ドを持つことになります。"

msgid ""
"Use the ``fields`` option to make simple layout changes in the forms on the "
"\"add\" and \"change\" pages such as showing only a subset of available "
"fields, modifying their order, or grouping them into rows. For example, you "
"could define a simpler version of the admin form for the :class:`django."
"contrib.flatpages.models.FlatPage` model as follows::"
msgstr ""
"\"add\" と \"change\" 上のフォームでシンプルなレイアウト変更 (有効なフィール"
"ドのみ表示、順序の変更、行のグルーピングなど) を行うには、``fields`` オプショ"
"ンを使用してください。たとえば、以下のように、:class:`django.contrib."
"flatpages.models.FlatPage` モデルに対して admin フォームのよりシンプルなバー"
"ジョンを定義できます。"

msgid ""
"In the above example, only the fields ``url``, ``title`` and ``content`` "
"will be displayed, sequentially, in the form. ``fields`` can contain values "
"defined in :attr:`ModelAdmin.readonly_fields` to be displayed as read-only."
msgstr ""
"上記の例では、指定したフィールド (``url``、``title``、``content``) だけが (結"
"果として) フォーム上で表示されます。``fields`` は :attr:`ModelAdmin."
"readonly_fields` で定義される値を持つことができ、読み取り専用で表示されます。"

msgid ""
"For more complex layout needs, see the :attr:`~ModelAdmin.fieldsets` option."
msgstr ""
"より複雑なレイアウトを作るには、:attr:`~ModelAdmin.fieldsets` オプションを参"
"照してください。"

msgid ""
"The ``fields`` option accepts the same types of values as :attr:`~ModelAdmin."
"list_display`, except that callables aren't accepted. Names of model and "
"model admin methods will only be used if they're listed in :attr:"
"`~ModelAdmin.readonly_fields`."
msgstr ""
"``fields`` オプションは、 :attr:`~ModelAdmin.list_display` と同じタイプの値を"
"受け付けますが、呼び出し可能オブジェクトを受け付けないところが異なります。 :"
"attr:`~ModelAdmin.readonly_fields` にリスト化されている場合、モデルの名前とモ"
"デルの admin メソッドのみが使用されます。"

msgid ""
"To display multiple fields on the same line, wrap those fields in their own "
"tuple. In this example, the ``url`` and ``title`` fields will display on the "
"same line and the ``content`` field will be displayed below them on its own "
"line::"
msgstr ""
"1 つの行に複数のフィールドを表示するには、タプルで囲んでください。この例で"
"は、``url`` と ``title`` フィールドが同じ行に表示され、``content`` フィールド"
"は次の行に表示されます::"

msgid "Possible confusion with the ``ModelAdmin.fieldsets`` option"
msgstr "``ModelAdmin.fieldsets`` オプションとの混同の可能性"

msgid ""
"This ``fields`` option should not be confused with the ``fields`` dictionary "
"key that is within the :attr:`~ModelAdmin.fieldsets` option, as described in "
"the next section."
msgstr ""
"この ``fields`` オプションと、次のセクションで説明する :attr:`~ModelAdmin."
"fieldsets` における ``fields`` ディクショナリキーは別物です。"

msgid ""
"If neither ``fields`` nor :attr:`~ModelAdmin.fieldsets` options are present, "
"Django will default to displaying each field that isn't an ``AutoField`` and "
"has ``editable=True``, in a single fieldset, in the same order as the fields "
"are defined in the model."
msgstr ""
"``fields`` と :attr:`~ModelAdmin.fieldsets` オプションのどちらも存在しない場"
"合、Django はデフォルトで ``AutoField`` と ``editable=True`` 以外の各フィール"
"ドを、単一のフィールドセットで、モデル内でフィールドが定義されたとおりの順番"
"で表示します。"

msgid ""
"Set ``fieldsets`` to control the layout of admin \"add\" and \"change\" "
"pages."
msgstr ""
"admin の \"add\" と \"change\" ページのレイアウトをコントロールするには、"
"``fieldsets`` をセットしてください。"

msgid ""
"``fieldsets`` is a list of 2-tuples, in which each 2-tuple represents a "
"``<fieldset>`` on the admin form page. (A ``<fieldset>`` is a \"section\" of "
"the form.)"
msgstr ""
"``fieldsets`` は、2 値タプルのリストで、各 2 値タプルは admin フォームページ"
"の ``<fieldset>`` を表します。 (``<fieldset>`` はフォームの \"section\" で"
"す。)"

msgid ""
"The 2-tuples are in the format ``(name, field_options)``, where ``name`` is "
"a string representing the title of the fieldset and ``field_options`` is a "
"dictionary of information about the fieldset, including a list of fields to "
"be displayed in it."
msgstr ""
"2 値タプルのフォーマットは ``(name, field_options)`` で、``name`` はフィール"
"ドセットのタイトル文字列を表し、``field_options`` フィールドセットに関する情"
"報のディクショナリで、表示するフィールドのリストを含みます。"

msgid ""
"A full example, taken from the :class:`django.contrib.flatpages.models."
"FlatPage` model::"
msgstr ""
":class:`django.contrib.flatpages.models.FlatPage` モデルを用いた例は以下のよ"
"うになります。"

msgid "This results in an admin page that looks like:"
msgstr "これにより、admin ページは以下のような見た目となります:"

msgid ""
"If neither ``fieldsets`` nor :attr:`~ModelAdmin.fields` options are present, "
"Django will default to displaying each field that isn't an ``AutoField`` and "
"has ``editable=True``, in a single fieldset, in the same order as the fields "
"are defined in the model."
msgstr ""
"``fieldsets`` と :attr:`~ModelAdmin.fields` オプションのどちらも存在しない場"
"合、Django はデフォルトで ``AutoField`` と ``editable=True`` 以外の各フィール"
"ドを、単一のフィールドセットで、モデル内でフィールドが定義されたとおりの順番"
"で表示します。"

msgid "The ``field_options`` dictionary can have the following keys:"
msgstr "``field_options`` ディクショナリは以下のキーを持つことができます:"

msgid "``fields``"
msgstr "``fields``"

msgid ""
"A list or tuple of field names to display in this fieldset. This key is "
"required."
msgstr ""
"フィールドセット内に表示するフィールド名のリストまたはタプルです。このキーは"
"必須です。"

msgid ""
"As with the :attr:`~ModelAdmin.fields` option, to display multiple fields on "
"the same line, wrap those fields in their own tuple. In this example, the "
"``first_name`` and ``last_name`` fields will display on the same line::"
msgstr ""
":attr:`~ModelAdmin.fields` オプションと同様に、複数のフィールドを 1 行に表示"
"するにはタプルでこれらのフィールドを囲んでください。この例では、"
"``first_name`` と ``last_name`` フィールドが 1 つの行に表示されます。"

msgid ""
"``fields`` can contain values defined in :attr:`~ModelAdmin.readonly_fields` "
"to be displayed as read-only."
msgstr ""
"``fields`` は :attr:`ModelAdmin.readonly_fields` で定義される値を持つことがで"
"き、読み取り専用で表示されます。"

msgid ""
"If you add the name of a callable to ``fields``, the same rule applies as "
"with the :attr:`~ModelAdmin.fields` option: the callable must be listed in :"
"attr:`~ModelAdmin.readonly_fields`."
msgstr ""
"``fields`` に呼び出し可能オブジェクトの名前を追加した場合、:attr:"
"`~ModelAdmin.fields` オプションと同じルールが適用されます: 呼び出し可能オブ"
"ジェクトは :attr:`~ModelAdmin.readonly_fields` 内でリスト化される必要がありま"
"す。"

msgid "``classes``"
msgstr "``classes``"

msgid "A list or tuple containing extra CSS classes to apply to the fieldset."
msgstr "フィールドセットに適用する追加的な CSS を含むリストないしタプルです。"

msgid ""
"Two useful classes defined by the default admin site stylesheet are "
"``collapse`` and ``wide``. Fieldsets with the ``collapse`` style will be "
"initially collapsed in the admin and replaced with a small \"click to "
"expand\" link. Fieldsets with the ``wide`` style will be given extra "
"horizontal space."
msgstr ""
"``collapse`` と ``wide`` の 2 つの便利なクラスがデフォルトの admin サイトのス"
"タイルシートで定義されています。 ``collapse`` スタイルのフィールドセットは初"
"期状態では admin 内で折りたたまれており、\"click to expand\" リンクで置き換え"
"られています。 ``wide`` スタイルのフィールドセットは水平方向の追加的な余白が"
"与えられます。"

msgid "``description``"
msgstr "``description``"

msgid ""
"A string of optional extra text to be displayed at the top of each fieldset, "
"under the heading of the fieldset. This string is not rendered for :class:"
"`~django.contrib.admin.TabularInline` due to its layout."
msgstr ""
"各フィールドセットの上部、フィールドセットの見出しの下に表示されるオプション"
"の追加テキストの文字列です。この文字列は :class:`~django.contrib.admin."
"TabularInline` のレイアウト上、レンダリングされません。"

msgid ""
"Note that this value is *not* HTML-escaped when it's displayed in the admin "
"interface. This lets you include HTML if you so desire. Alternatively you "
"can use plain text and :func:`django.utils.html.escape` to escape any HTML "
"special characters."
msgstr ""
"この値は、管理インターフェイスに表示されるときにはHTMLエスケープされないこと"
"に注意してください。これにより、HTML を含めることができます。あるいは、プレー"
"ンテキストと :func:`django.utils.html.escape` を使って HTML の特殊文字をエス"
"ケープすることもできます。"

msgid ""
"By default, a :class:`~django.db.models.ManyToManyField` is displayed in the "
"admin site with a ``<select multiple>``. However, multiple-select boxes can "
"be difficult to use when selecting many items. Adding a :class:`~django.db."
"models.ManyToManyField` to this list will instead use a nifty unobtrusive "
"JavaScript \"filter\" interface that allows searching within the options. "
"The unselected and selected options appear in two boxes side by side. See :"
"attr:`~ModelAdmin.filter_vertical` to use a vertical interface."
msgstr ""
"デフォルトでは、:class:`~django.db.models.ManyToManyField` は ``<select "
"multiple>`` で admin サイトで表示されます。複数選択のボックスは、たくさんのア"
"イテムを選択するには不向きです。:class:`~django.db.models.ManyToManyField` を"
"このリストに加えると、代わりにかっこよくて控えめな JavaScript の \"filter\" "
"インターフェースを使用します。非選択および選択済みのオプションは 2 つのボック"
"スに並べて表示されます。垂直方向のインターフェースを使用するには :attr:"
"`~ModelAdmin.filter_vertical` を参照してください。"

msgid ""
"Same as :attr:`~ModelAdmin.filter_horizontal`, but uses a vertical display "
"of the filter interface with the box of unselected options appearing above "
"the box of selected options."
msgstr ""
":attr:`~ModelAdmin.filter_horizontal` と同じですが、フィルタインターフェイス"
"を垂直方向に表示し、非選択のオプションは選択済みのオプションの上部に表示され"
"ます。"

msgid ""
"By default a ``ModelForm`` is dynamically created for your model. It is used "
"to create the form presented on both the add/change pages. You can easily "
"provide your own ``ModelForm`` to override any default form behavior on the "
"add/change pages. Alternatively, you can customize the default form rather "
"than specifying an entirely new one by using the :meth:`ModelAdmin.get_form` "
"method."
msgstr ""
"デフォルトではモデルに対して ``ModelForm`` が動的に生成されます。追加と変更の"
"両方のページで使用されるフォームです。独自の ``ModelForm`` を定義すれば、追加"
"と変更のページでフォームの挙動を簡単にオーバーライドできます。あるいは、まっ"
"たく新しいモデルフォームを作る代わりに、:meth:`ModelAdmin.get_form` メソッド"
"を使ってデフォルトのフォームをカスタムすることもできます。"

msgid "For an example see the section :ref:`admin-custom-validation`."
msgstr "例については :ref:`admin-custom-validation` を参照してください。"

msgid "Omit the ``Meta.model`` attribute"
msgstr "``Meta.model`` 属性を省略する"

msgid ""
"If you define the ``Meta.model`` attribute on a :class:`~django.forms."
"ModelForm`, you must also define the ``Meta.fields`` attribute (or the "
"``Meta.exclude`` attribute). However, since the admin has its own way of "
"defining fields, the ``Meta.fields`` attribute will be ignored."
msgstr ""
":class:`~django.forms.ModelForm` で ``Meta.model`` 属性を定義した場合、"
"``Meta.fields`` 属性 (もしくは ``Meta.exclude`` 属性) も定義する必要がありま"
"す。しかし、admin 自身がフィールドを定義する方法を持っているため、``Meta."
"fields`` 属性は無視されます。"

msgid ""
"If the ``ModelForm`` is only going to be used for the admin, the easiest "
"solution is to omit the ``Meta.model`` attribute, since ``ModelAdmin`` will "
"provide the correct model to use. Alternatively, you can set ``fields = []`` "
"in the ``Meta`` class to satisfy the validation on the ``ModelForm``."
msgstr ""
"``ModelForm`` を admin のみで使用する場合は、``ModelAdmin`` が使用する正しい"
"モデルを提供するため、``Meta.model`` 属性を省略するのが手っ取り早い解決法で"
"す。あるいは、``Meta`` クラス内で ``fields = []`` をセットして ``ModelForm`` "
"のバリデーションの条件を満たすこともできます。"

msgid "``ModelAdmin.exclude`` takes precedence"
msgstr "``ModelAdmin.exclude`` が優先されます"

msgid ""
"If your ``ModelForm`` and ``ModelAdmin`` both define an ``exclude`` option "
"then ``ModelAdmin`` takes precedence::"
msgstr ""
"``ModelForm`` と ``ModelAdmin`` の両方で ``exclude`` オプションが定義されてい"
"る場合、``ModelAdmin`` は優先順位に従います。"

msgid ""
"In the above example, the \"age\" field will be excluded but the \"name\" "
"field will be included in the generated form."
msgstr ""
"この例では、生成されるフォームで \"age\" フィールドは除外されますが \"name\" "
"フィールドは含まれます。"

msgid ""
"This provides a quick-and-dirty way to override some of the :class:`~django."
"forms.Field` options for use in the admin. ``formfield_overrides`` is a "
"dictionary mapping a field class to a dict of arguments to pass to the field "
"at construction time."
msgstr ""
"admin 内で使用するための :class:`~django.forms.Field` のうちある程度の部分を"
"オーバーライドする簡単 (だけど汚い) 方法を提供します。"
"``formfield_overrides`` はディクショナリで、フィールドクラスの構成時にフィー"
"ルドに渡す引数のディクショナリをマッピングします。"

msgid ""
"Since that's a bit abstract, let's look at a concrete example. The most "
"common use of ``formfield_overrides`` is to add a custom widget for a "
"certain type of field. So, imagine we've written a ``RichTextEditorWidget`` "
"that we'd like to use for large text fields instead of the default "
"``<textarea>``. Here's how we'd do that::"
msgstr ""
"これでは抽象的すぎるので、具体的な例を見てみましょう。"
"``formfield_overrides`` のもっとも一般的な使い道は、特定のタイプのフィールド"
"に対してカスタムしたウィジェットを追加することです。大きなテキストフィールド"
"を使用するために、デフォルトの ``<textarea>`` の代わりに "
"``RichTextEditorWidget`` を使いたいとしましょう。この場合、以下のように記述し"
"ます。"

msgid ""
"Note that the key in the dictionary is the actual field class, *not* a "
"string. The value is another dictionary; these arguments will be passed to "
"the form field's ``__init__()`` method. See :doc:`/ref/forms/api` for "
"details."
msgstr ""
"ディクショナリ内のキーは文字列 *ではなく* 実際のフィールドクラスである点に注"
"意してください。値は別のディクショナリです; これらの引数はフォームフィールド"
"の ``__init__()`` メソッドに渡されます。詳細は :doc:`/ref/forms/api` を参照し"
"てください。"

msgid ""
"If you want to use a custom widget with a relation field (i.e. :class:"
"`~django.db.models.ForeignKey` or :class:`~django.db.models."
"ManyToManyField`), make sure you haven't included that field's name in "
"``raw_id_fields``, ``radio_fields``, or ``autocomplete_fields``."
msgstr ""
"リレーションフィールド (例えば :class:`~django.db.models.ForeignKey` や :"
"class:`~django.db.models.ManyToManyField`) でカスタムウィジェットを使用したい"
"ときは、,  ``raw_id_fields``、``radio_fields``、``autocomplete_fields`` にそ"
"のフィールドの名前を含まないようにしてください。"

msgid ""
"``formfield_overrides`` won't let you change the widget on relation fields "
"that have ``raw_id_fields``, ``radio_fields``, or ``autocomplete_fields`` "
"set. That's because ``raw_id_fields``, ``radio_fields``, and "
"``autocomplete_fields`` imply custom widgets of their own."
msgstr ""
"``formfield_overrides`` は、``raw_id_fields``、``radio_fields``、"
"``autocomplete_fields`` のどれかがセットされたリレーションフィールドのウィ"
"ジェットは変更しません。これは、``raw_id_fields``、``radio_fields``、"
"``autocomplete_fields`` の 3 つがこれら自身のカスタムウィジェットを暗示するか"
"らです。"

msgid ""
"See :class:`InlineModelAdmin` objects below as well as :meth:`ModelAdmin."
"get_formsets_with_inlines`."
msgstr ""
"後述の :class:`InlineModelAdmin` オブジェクトと :meth:`ModelAdmin."
"get_formsets_with_inlines` を参照してください。"

msgid ""
"Set ``list_display`` to control which fields are displayed on the change "
"list page of the admin."
msgstr ""
"admin のチェンジリストページでどのフィールドを表示するかコントロールするため"
"に、``list_display`` をセットします。"

msgid ""
"If you don't set ``list_display``, the admin site will display a single "
"column that displays the ``__str__()`` representation of each object."
msgstr ""
"``list_display`` をセットしない場合、admin サイトは各オブジェクトの "
"``__str__()`` 表現を表示する単一の列を表示します。"

msgid ""
"There are four types of values that can be used in ``list_display``. All but "
"the simplest may use the  :func:`~django.contrib.admin.display` decorator, "
"which is used to customize how the field is presented:"
msgstr ""
"``list_display`` で使用できる値は 4 種類あります。最も単純なもの以外は、"
"フィールドの表示方法をカスタマイズするために :func:`~django.contrib.admin."
"display` デコレータを使用できます。"

msgid "The name of a model field. For example::"
msgstr "モデルフィールドの名前。次に例を示します。"

msgid "A callable that accepts one argument, the model instance. For example::"
msgstr ""
"1 つの引数 (モデルのインスタンス) を受け入れる呼び出し可能オブジェクトです。"
"次に例を示します。"

msgid ""
"A string representing a ``ModelAdmin`` method that accepts one argument, the "
"model instance. For example::"
msgstr ""
"1 つの引数 (モデルのインスタンス) を受け入れる ``ModelAdmin`` メソッドを表す"
"文字列です。次に例を示します。"

msgid ""
"A string representing a model attribute or method (without any required "
"arguments). For example::"
msgstr ""
"モデルの属性や (必須の引数を持たない) メソッドを表す文字列です。次に例を示し"
"ます。"

msgid "A few special cases to note about ``list_display``:"
msgstr "``list_display`` に関する特殊な状況の注意点があります。"

msgid ""
"If the field is a ``ForeignKey``, Django will display the ``__str__()`` of "
"the related object."
msgstr ""
"フィールドが ``ForeignKey`` の場合、 Django はリレーション先オブジェクトの "
"``__str__()`` を表示します。"

msgid ""
"``ManyToManyField`` fields aren't supported, because that would entail "
"executing a separate SQL statement for each row in the table. If you want to "
"do this nonetheless, give your model a custom method, and add that method's "
"name to ``list_display``. (See below for more on custom methods in "
"``list_display``.)"
msgstr ""
"``ManyToManyField`` フィールドは、テーブル内で各行に対して個別の SQL ステート"
"メントを実行する可能性があるため、サポートされていません。それでも使いたい場"
"合は、モデルにカスタムメソッドを作成し、そのメソッドの名前を "
"``list_display`` に追加してください。 (``list_display`` 内でのカスタムメソッ"
"ドについてより詳しくは下記を参照してください。)"

msgid ""
"If the field is a ``BooleanField``, Django will display a pretty \"yes\", "
"\"no\", or \"unknown\" icon instead of ``True``, ``False``, or ``None``."
msgstr ""
"フィールドが ``BooleanField`` の場合、Django は ``True``, ``False``, "
"``None`` の代わりに、かわいい \"yes\", \"no\", \"unknown\" アイコンを表示しま"
"す。"

msgid ""
"If the string given is a method of the model, ``ModelAdmin`` or a callable, "
"Django will HTML-escape the output by default. To escape user input and "
"allow your own unescaped tags, use :func:`~django.utils.html.format_html`."
msgstr ""
"与えられた文字列がモデル、``ModelAdmin``、呼び出し可能オブジェクトのどれかの"
"場合、Django はデフォルトで HTML エスケープして出力します。ユーザーの入力をエ"
"スケープしたり非エスケープのタグを使う場合、:func:`~django.utils.html."
"format_html` を使用してください。"

msgid "Here's a full example model::"
msgstr "以下は、モデルの例です。"

msgid ""
"As some examples have already demonstrated, when using a callable, a model "
"method, or a ``ModelAdmin`` method, you can customize the column's title by "
"wrapping the callable with the :func:`~django.contrib.admin.display` "
"decorator and passing the ``description`` argument."
msgstr ""
"これまでの例で見てきたように、呼び出し可能オブジェクト、モデルメソッド、また"
"は ``ModelAdmin`` メソッドを使用する場合、 :func:`~django.contrib.admin."
"display` デコレータで呼び出し可能オブジェクトをラップし、 ``description`` 引"
"数を渡すことで、カラムのタイトルをカスタマイズできます。"

msgid ""
"If the value of a field is ``None``, an empty string, or an iterable without "
"elements, Django will display ``-`` (a dash). You can override this with :"
"attr:`AdminSite.empty_value_display`::"
msgstr ""
"フィールドの値が ``None``、空の文字列、エレメントを持たない iterable のいずれ"
"かの場合、Django は ``-`` (ダッシュ) を表示します。この挙動は :attr:"
"`AdminSite.empty_value_display` でオーバーライドできます。"

msgid "You can also use :attr:`ModelAdmin.empty_value_display`::"
msgstr ":attr:`ModelAdmin.empty_value_display` も使用できます。"

msgid "Or on a field level::"
msgstr "もしくは、フィールドレベルで以下のようにできます。"

msgid ""
"If the string given is a method of the model, ``ModelAdmin`` or a callable "
"that returns ``True``, ``False``, or ``None``, Django will display a pretty "
"\"yes\", \"no\", or \"unknown\" icon if you wrap the method with the :func:"
"`~django.contrib.admin.display` decorator passing the ``boolean`` argument "
"with the value set to ``True``::"
msgstr ""
"与えられた文字列がモデル ``ModelAdmin`` のメソッドか、 ``True``, ``False``, "
"``None`` を返す呼び出し可能オブジェクトの場合、 Django はそのメソッドを :"
"func:`~django.contrib.admin.display` デコレータでラップし、 ``boolean`` 引数"
"を ``True`` で渡すと、かわいい \"yes\", \"no\", \"unknown\" アイコンを表示し"
"ます。"

msgid ""
"The ``__str__()`` method is just as valid in ``list_display`` as any other "
"model method, so it's perfectly OK to do this::"
msgstr ""
"``__str__()`` メソッドは、他のモデルメソッドとまったく同様に "
"``list_display`` 内でも有効です。つまり、以下のような書き方は完璧に OK です。"

msgid ""
"Usually, elements of ``list_display`` that aren't actual database fields "
"can't be used in sorting (because Django does all the sorting at the "
"database level)."
msgstr ""
"通常、実際のデータベースフィールドではない ``list_display`` の要素は、ソート"
"に使用できません (Django のソートはすべてデータベースレベルで実行されるためで"
"す)。"

msgid ""
"However, if an element of ``list_display`` represents a certain database "
"field, you can indicate this fact by using the :func:`~django.contrib.admin."
"display` decorator on the method, passing the ``ordering`` argument::"
msgstr ""
"しかし、``list_display`` の要素が特定のデータベースフィールドを表す場合、メ"
"ソッドに :func:`~django.contrib.admin.display` デコレータを使用し、 "
"``ordering`` 引数を渡すことで、その事実を伝えることができます。"

msgid ""
"The above will tell Django to order by the ``first_name`` field when trying "
"to sort by ``colored_first_name`` in the admin."
msgstr ""
"上記のコードは、admin 内で ``colored_first_name`` で ソートしようとするとき、"
"``first_name`` フィールドで並べ替えるよう Django に伝えます。"

msgid ""
"To indicate descending order with the ``ordering`` argument you can use a "
"hyphen prefix on the field name. Using the above example, this would look "
"like::"
msgstr ""
"引数 ``ordering`` で降順を示すには、フィールド名の前にハイフンをつけます。上"
"記の例を使うと、次のようになります。"

msgid ""
"The ``ordering`` argument supports query lookups to sort by values on "
"related models. This example includes an \"author first name\" column in the "
"list display and allows sorting it by first name::"
msgstr ""
"引数 ``Lordering`` はリレーション先モデルの値でソートするクエリのルックアップ"
"をサポートします。この例では、\"author first name\" カラムをリストに表示し、"
"first name でソートできるようにしています。"

msgid ""
":doc:`Query expressions </ref/models/expressions>` may be used with the "
"``ordering`` argument::"
msgstr ""
":doc:`クエリ式 </ref/models/expressions>` は ``ordering`` 引数と一緒に使うこ"
"とができます。"

msgid "Elements of ``list_display`` can also be properties ::"
msgstr "``list_display`` の要素はプロパティにすることもできます。"

msgid ""
"Note that ``@property`` must be above ``@display``. If you're using the old "
"way -- setting the display-related attributes directly rather than using "
"the :func:`~django.contrib.admin.display` decorator --  be aware that the "
"``property()`` function and **not** the ``@property`` decorator must be "
"used::"
msgstr ""
"ただし、``@property`` は ``@display`` より上でなければなりません。:func:"
"`~django.contrib.admin.display` デコレータを使用するのではなく、直接表示関連"
"の属性を設定する古い方法を使用している場合は、``@property`` デコレータではな"
"く、``property()`` 関数を使用しなければならないことに注意してください。"

msgid "Support for ``boolean`` attribute on properties was added."
msgstr "プロパティの ``boolean`` 属性をサポートしました。"

msgid ""
"The field names in ``list_display`` will also appear as CSS classes in the "
"HTML output, in the form of ``column-<field_name>`` on each ``<th>`` "
"element. This can be used to set column widths in a CSS file for example."
msgstr ""
"``list_display`` のフィールド名はHTMLの出力でも ``<th>`` 要素に ``column-"
"<field_name>`` という形でCSSクラスとして表示されます。これは例えばCSSファイル"
"でカラムの幅を設定するのに使うことができます。"

msgid ""
"Django will try to interpret every element of ``list_display`` in this order:"
msgstr "Django は、``list_display`` の各要素を以下の順番で解釈しようとします。"

msgid "A field of the model."
msgstr "モデルのフィールド。"

msgid "A callable."
msgstr "呼び出し可能オブジェクト。"

msgid "A string representing a ``ModelAdmin`` attribute."
msgstr "``ModelAdmin`` 属性を表す文字列。"

msgid "A string representing a model attribute."
msgstr "モデル属性を表す文字列。"

msgid ""
"For example if you have ``first_name`` as a model field and as a "
"``ModelAdmin`` attribute, the model field will be used."
msgstr ""
"たとえば、``first_name`` がモデルフィールドと ``ModelAdmin`` 属性の両方で存在"
"する場合、モデルフィールドの方が使用されます。"

msgid ""
"Use ``list_display_links`` to control if and which fields in :attr:"
"`list_display` should be linked to the \"change\" page for an object."
msgstr ""
":attr:`list_display` 内のフィールドにおいて \"変更\" ページへのリンクをコント"
"ロールするには、``list_display_links`` を使用してください。"

msgid ""
"By default, the change list page will link the first column -- the first "
"field specified in ``list_display`` -- to the change page for each item. But "
"``list_display_links`` lets you change this:"
msgstr ""
"デフォルトでは、チェンジリストページは最初のカラム (``list_display`` で最初に"
"指定したフィールド) に各アイテムの変更ページへのリンクが貼られています。しか"
"し、``list_display_links`` を使って変更できます。"

msgid "Set it to ``None`` to get no links at all."
msgstr "リンクを貼らない場合は ``None`` をセットしてください。"

msgid ""
"Set it to a list or tuple of fields (in the same format as ``list_display``) "
"whose columns you want converted to links."
msgstr ""
"(``list_display`` と同様のフォーマットで) リンクに変換したいカラムのフィール"
"ドのリストないしタプルをセットしてください。"

msgid ""
"You can specify one or many fields. As long as the fields appear in "
"``list_display``, Django doesn't care how many (or how few) fields are "
"linked. The only requirement is that if you want to use "
"``list_display_links`` in this fashion, you must define ``list_display``."
msgstr ""
"1 つないし複数のフィールドを指定できます。``list_display`` にある限り、"
"Django はいくつのフィールドがリンクになろうと気にしません。唯一の要件は、"
"``list_display_links`` をこの方式で使いたいときは ``list_display`` を指定する"
"ことです。"

msgid ""
"In this example, the ``first_name`` and ``last_name`` fields will be linked "
"on the change list page::"
msgstr ""
"以下の例では、``first_name`` と ``last_name`` フィールドがチェンジリストペー"
"ジでリンクされます。"

msgid "In this example, the change list page grid will have no links::"
msgstr "以下の例では、チェンジリストページのグリッドにはリンクがなくなります。"

msgid ""
"Set ``list_editable`` to a list of field names on the model which will allow "
"editing on the change list page. That is, fields listed in ``list_editable`` "
"will be displayed as form widgets on the change list page, allowing users to "
"edit and save multiple rows at once."
msgstr ""
"チェンジリストページ上での編集を有効にしたいモデルのフィールド名のリストを "
"``list_editable`` にセットしてください。``list_editable`` に指定されたフィー"
"ルドは、チェンジリストページ上でフォームウィジェットとして表示され、ユーザー"
"は複数の行を一度に編集して保存できます。"

msgid ""
"``list_editable`` interacts with a couple of other options in particular "
"ways; you should note the following rules:"
msgstr ""
"``list_editable`` は、他のオプションと特定部分で相互関係にあります。以下の"
"ルールに注意してください。"

msgid ""
"Any field in ``list_editable`` must also be in ``list_display``. You can't "
"edit a field that's not displayed!"
msgstr ""
"``list_editable`` 内のすべてのフィールドは ``list_display`` に含まれている必"
"要があります。表示されていないフィールドは編集できないのです！"

msgid ""
"The same field can't be listed in both ``list_editable`` and "
"``list_display_links`` -- a field can't be both a form and a link."
msgstr ""
"``list_editable`` と ``list_display_links`` に同じフィールドを同時に指定する"
"ことはできません -- 1 つのフィールドがフォームとリンクの両方になることはでき"
"ないからです。"

msgid "You'll get a validation error if either of these rules are broken."
msgstr "これらのルールを破った場合、バリデーションエラーとなります。"

msgid ""
"Set ``list_filter`` to activate filters in the right sidebar of the change "
"list page of the admin."
msgstr ""
"admin のチェンジリストページの右サイドバーのフィルタを有効化するには、"
"``list_filter`` をセットしてください。"

msgid ""
"At it's simplest ``list_filter`` takes a list or tuple of field names to "
"activate filtering upon, but several more advanced options as available. "
"See :ref:`modeladmin-list-filters` for the details."
msgstr ""
"最もシンプルな ``list_filter`` はフィルタリングを有効にするフィールド名のリス"
"トまたはタプルを受け取りますが、より高度なオプションもいくつか用意されていま"
"す。詳細は :ref:`modeladmin-list-filters` を参照してください。"

msgid ""
"Set ``list_max_show_all`` to control how many items can appear on a \"Show "
"all\" admin change list page. The admin will display a \"Show all\" link on "
"the change list only if the total result count is less than or equal to this "
"setting. By default, this is set to ``200``."
msgstr ""
"\"Show all\" の admin チェンジリストページで表示するアイテム数をコントロール"
"するには、``list_max_show_all`` をセットしてください。チェンジリストページの "
"\"Show all\" リンクは、この設定値以下の場合のみ表示されます。デフォルトでは "
"``200`` にセットされています。"

msgid ""
"Set ``list_per_page`` to control how many items appear on each paginated "
"admin change list page. By default, this is set to ``100``."
msgstr ""
"ページ分割された admin のチェンジリストページに表示するアイテム数をコントロー"
"ルするには、``list_per_page`` をセットしてください。デフォルトでは ``100`` に"
"セットされています。"

msgid ""
"Set ``list_select_related`` to tell Django to use :meth:`~django.db.models."
"query.QuerySet.select_related` in retrieving the list of objects on the "
"admin change list page. This can save you a bunch of database queries."
msgstr ""
"admin のチェンジリストページでオブジェクトのリストを検索するときに :meth:"
"`~django.db.models.query.QuerySet.select_related` を使用するよう Django に伝"
"えるには、``list_select_related`` をセットしてください。これにより多くのデー"
"タベースクエリを削減できます。"

msgid ""
"The value should be either a boolean, a list or a tuple. Default is "
"``False``."
msgstr ""
"値は真偽値、リスト、タプルのどれかでなければなりません。デフォルトは "
"``False`` です。"

msgid ""
"When value is ``True``, ``select_related()`` will always be called. When "
"value is set to ``False``, Django will look at ``list_display`` and call "
"``select_related()`` if any ``ForeignKey`` is present."
msgstr ""
"値が ``True`` のとき、常に ``select_related()`` が呼ばれます。``False`` のと"
"きは、``ForeignKey`` が存在する場合 Django は ``list_display`` を参照して "
"``select_related()`` を呼び出します。"

msgid ""
"If you need more fine-grained control, use a tuple (or list) as value for "
"``list_select_related``. Empty tuple will prevent Django from calling "
"``select_related`` at all. Any other tuple will be passed directly to "
"``select_related`` as parameters. For example::"
msgstr ""
"よりきめ細やかにコントロールする場合は、``list_select_related`` の値にタプル "
"(ないしリスト) を使用してください。空のタプルは、Django が "
"``select_related`` を一切呼び出さないようにします。他のタプルは、パラメータと"
"して直接 ``select_related`` に渡されます。次に例を示します。"

msgid "will call ``select_related('author', 'category')``."
msgstr "これは ``select_related('author', 'category')`` を呼び出します。"

msgid ""
"If you need to specify a dynamic value based on the request, you can "
"implement a :meth:`~ModelAdmin.get_list_select_related` method."
msgstr ""
"リクエストに基づいた動的な値を指定する場合は、:meth:`~ModelAdmin."
"get_list_select_related` メソッドを実装できます。"

msgid ""
"``ModelAdmin`` ignores this attribute when :meth:`~django.db.models.query."
"QuerySet.select_related` was already called on the changelist's ``QuerySet``."
msgstr ""
"``ModelAdmin`` は :meth:`~django.db.models.query.QuerySet.select_related` が"
"チェンジリストの ``QuerySet`` で既に呼び出されていた場合、この属性を無視しま"
"す。"

msgid ""
"Set ``ordering`` to specify how lists of objects should be ordered in the "
"Django admin views. This should be a list or tuple in the same format as a "
"model's :attr:`~django.db.models.Options.ordering` parameter."
msgstr ""
"Django の admin ビューでオブジェクトのリストをどのようにソートするかを指定す"
"るには、 ``ordering`` をセットしてください。モデルの :attr:`~django.db."
"models.Options.ordering` パラメータと同じフォーマットでリストかタプルを与えて"
"ください。"

msgid ""
"If this isn't provided, the Django admin will use the model's default "
"ordering."
msgstr ""
"指定がない場合、Django admin はモデルのデフォルトの並び順を使用します。"

msgid ""
"If you need to specify a dynamic order (for example depending on user or "
"language) you can implement a :meth:`~ModelAdmin.get_ordering` method."
msgstr ""
"動的なソートを指定する場合 (例えばユーザーや言語に応じて変更する場合など)、:"
"meth:`~ModelAdmin.get_ordering` メソッドを実装できます。"

msgid "Performance considerations with ordering and sorting"
msgstr "並べ替えやソートに伴うパフォーマンス上の注意"

msgid ""
"To ensure a deterministic ordering of results, the changelist adds ``pk`` to "
"the ordering if it can't find a single or unique together set of fields that "
"provide total ordering."
msgstr ""
"全体のソートのための単一もしくは unique together フィールド指定をチェンジリス"
"トが見つけられない場合、チェンジリストは ``pk`` をチェンジリストに追加しま"
"す。これは結果の決定論的なソートを保証するためです。"

msgid ""
"For example, if the default ordering is by a non-unique ``name`` field, then "
"the changelist is sorted by ``name`` and ``pk``. This could perform poorly "
"if you have a lot of rows and don't have an index on ``name`` and ``pk``."
msgstr ""
"たとえば、デフォルトのソートが一意でない ``name`` フィールドによって実行され"
"る場合、チェンジリストは ``name`` と ``pk`` でソートされます。テーブルのレ"
"コード数が多く、 ``name`` と ``pk`` のインデックスがない場合は、パフォーマン"
"スの低下を招きます。"

msgid ""
"The paginator class to be used for pagination. By default, :class:`django."
"core.paginator.Paginator` is used. If the custom paginator class doesn't "
"have the same constructor interface as :class:`django.core.paginator."
"Paginator`, you will also need to provide an implementation for :meth:"
"`ModelAdmin.get_paginator`."
msgstr ""
"ページ分割に使われる paginator クラスです。デフォルトでは :class:`django."
"core.paginator.Paginator` が使われます。カスタムの paginator クラスが :class:"
"`django.core.paginator.Paginator` と同じコンストラクタインターフェースを持た"
"ない場合、:meth:`ModelAdmin.get_paginator` に対する実装も行う必要があります。"

msgid ""
"Set ``prepopulated_fields`` to a dictionary mapping field names to the "
"fields it should prepopulate from::"
msgstr ""
"``prepopulated_fields`` を、フィールド名と事前入力するフィールドをマッピング"
"した辞書に設定します。"

msgid ""
"When set, the given fields will use a bit of JavaScript to populate from the "
"fields assigned. The main use for this functionality is to automatically "
"generate the value for ``SlugField`` fields from one or more other fields. "
"The generated value is produced by concatenating the values of the source "
"fields, and then by transforming that result into a valid slug (e.g. "
"substituting dashes for spaces and lowercasing ASCII letters)."
msgstr ""
"設定された場合、指定されたフィールドは割り当てられたフィールドから入力するた"
"めに JavaScript を使用します。この機能の主な用途は、1つ以上の他のフィールドか"
"ら ``SlugField`` フィールドの値を自動的に生成することです。生成される値はソー"
"スフィールドの値を連結し、その結果を有効なスラグに変換することで生成されます "
"(たとえば、ダッシュをスペースに置き換えたり、ASCII 文字を小文字にしたりしま"
"す)。"

msgid ""
"Prepopulated fields aren't modified by JavaScript after a value has been "
"saved. It's usually undesired that slugs change (which would cause an "
"object's URL to change if the slug is used in it)."
msgstr ""
"事前入力されたフィールドは値が保存された後に JavaScript によって変更されるこ"
"とはありません。通常、スラグが変更されることは望ましくありません (スラグがオ"
"ブジェクトで使用されている場合、オブジェクトの URL が変更されることになりま"
"す)。"

msgid ""
"``prepopulated_fields`` doesn't accept ``DateTimeField``, ``ForeignKey``, "
"``OneToOneField``, and ``ManyToManyField`` fields."
msgstr ""
"``prepopulated_fields`` は ``DateTimeField``、``ForeignKey``、"
"``OneToOneField``、``ManyToManyField`` フィールドを受け入れません。"

msgid ""
"By default, applied filters are preserved on the list view after creating, "
"editing, or deleting an object. You can have filters cleared by setting this "
"attribute to ``False``."
msgstr ""
"デフォルトでは、オブジェクトを作成、編集、削除しても、適用されたフィルタはリ"
"ストビューに保存されます。この属性を ``False`` に設定することで、フィルタをク"
"リアできます。"

msgid ""
"Controls whether facet counts are displayed for filters in the admin "
"changelist. Defaults to :attr:`.ShowFacets.ALLOW`."
msgstr ""
"管理画面のチェンジリストのフィルタにファセット数を表示するかどうかを制御しま"
"す。デフォルトは :attr:`.ShowFacets.ALLOW` です。"

msgid ""
"When displayed, facet counts update in line with currently applied filters."
msgstr ""
"表示されている場合、ファセット数は現在適用されているフィルタに合わせて更新さ"
"れます。"

msgid "Enum of allowed values for :attr:`.ModelAdmin.show_facets`."
msgstr ":attr:`.ModelAdmin.show_facets` に指定できる値の Enum。"

msgid "Always show facet counts."
msgstr "常にファセット数を表示します。"

msgid ""
"Show facet counts when the ``_facets`` query string parameter is provided."
msgstr ""
"クエリ文字列パラメータ ``_facets`` が指定された場合に、ファセット数を表示しま"
"す。"

msgid "Never show facet counts."
msgstr "ファセット数を表示しません。"

msgid ""
"Set ``show_facets`` to the desired :class:`.ShowFacets` value. For example, "
"to always show facet counts without needing to provide the query parameter::"
msgstr ""
"``show_facets`` に必要な :class:`.ShowFacets` の値を指定します。例えば、クエ"
"リパラメータを指定することなく常にファセット数を表示したい場合:"

msgid "Performance considerations with facets"
msgstr "ファセットを使う場合のパフォーマンス上の注意"

msgid ""
"Enabling facet filters will increase the number of queries on the admin "
"changelist page in line with the number of filters. These queries may cause "
"performance problems, especially for large datasets. In these cases it may "
"be appropriate to set ``show_facets`` to :attr:`.ShowFacets.NEVER` to "
"disable faceting entirely."
msgstr ""
"ファセットフィルタを有効にすると、管理画面のチェンジリストページのクエリ数が"
"フィルタの数だけ増えます。これらのクエリは、特に大きなデータセットの場合、パ"
"フォーマンスの問題を引き起こすかもしれません。このような場合は、 "
"``show_facets`` を :attr:`.ShowFacets.NEVER` に設定して、ファセットを完全に無"
"効にするのが適切でしょう。"

msgid ""
"By default, Django's admin uses a select-box interface (<select>) for fields "
"that are ``ForeignKey`` or have ``choices`` set. If a field is present in "
"``radio_fields``, Django will use a radio-button interface instead. Assuming "
"``group`` is a ``ForeignKey`` on the ``Person`` model::"
msgstr ""
"デフォルトでは、``ForeignKey`` や ``choices`` がセットされたフィールドに対し"
"て、Django の admin はセレクトボックスのインターフェース (<select>) を使用し"
"ます。フィールドが ``radio_fields`` に指定された場合、Django は代わりに ラジ"
"オボタンのインターフェースを使用します。``group`` が ``Person`` モデルの "
"``ForeignKey`` だと仮定すると、次のようになります。"

msgid ""
"You have the choice of using ``HORIZONTAL`` or ``VERTICAL`` from the "
"``django.contrib.admin`` module."
msgstr ""
"``django.contrib.admin`` モジュールから ``HORIZONTAL`` か ``VERTICAL`` のどち"
"らを使用するか選択してください。"

msgid ""
"Don't include a field in ``radio_fields`` unless it's a ``ForeignKey`` or "
"has ``choices`` set."
msgstr ""
"``ForeignKey`` ないし ``choices`` がセットされたフィールド以外は、"
"``radio_fields`` に含めないでください。"

msgid ""
"``autocomplete_fields`` is a list of ``ForeignKey`` and/or "
"``ManyToManyField`` fields you would like to change to `Select2 <https://"
"select2.org/>`_ autocomplete inputs."
msgstr ""
"``autocomplete_fields`` は、`Select2 <https://select2.org/>`_ オートコンプ"
"リート入力に変更したい ``ForeignKey`` ないし ``ManyToManyField`` フィールドの"
"リストです。"

msgid ""
"By default, the admin uses a select-box interface (``<select>``) for those "
"fields. Sometimes you don't want to incur the overhead of selecting all the "
"related instances to display in the dropdown."
msgstr ""
"デフォルトでは、これらのフィールドに対して admin はセレクトボックスのインター"
"フェース (``<select>``) を使用します。ドロップダウン内に表示する関係インスタ"
"ンスをすべて選択するオーバーヘッドから逃れたいこともあるでしょう。"

msgid ""
"The Select2 input looks similar to the default input but comes with a search "
"feature that loads the options asynchronously. This is faster and more user-"
"friendly if the related model has many instances."
msgstr ""
"Select2 入力はデフォルトの入力と似た見た目ですが、非同期的にオプションを読み"
"込む検索機能を持っています。こちらの方が高速で、特に関係モデルに多くのインス"
"タンスがある場合にはユーザーフレンドリーです。"

msgid ""
"You must define :attr:`~ModelAdmin.search_fields` on the related object's "
"``ModelAdmin`` because the autocomplete search uses it."
msgstr ""
"オートコンプリート検索はリレーション先オブジェクトの ``ModelAdmin`` を使用す"
"るため、``ModelAdmin`` に :attr:`~ModelAdmin.search_fields` を定義する必要が"
"あります。"

msgid ""
"To avoid unauthorized data disclosure, users must have the ``view`` or "
"``change`` permission to the related object in order to use autocomplete."
msgstr ""
"認可されていないデータが漏洩されるのを防ぐため、オートコンプリートを使うに"
"は、ユーザーは必ずリレーション先オブジェクトに対する ``view`` か ``change`` "
"権限を持っていなければなりません。"

msgid ""
"Ordering and pagination of the results are controlled by the related "
"``ModelAdmin``'s :meth:`~ModelAdmin.get_ordering` and :meth:`~ModelAdmin."
"get_paginator` methods."
msgstr ""
"結果のソートおよびページ分割は、関係する ``ModelAdmin`` の :meth:"
"`~ModelAdmin.get_ordering` と :meth:`~ModelAdmin.get_paginator` メソッドでコ"
"ントロールします。"

msgid ""
"In the following example, ``ChoiceAdmin`` has an autocomplete field for the "
"``ForeignKey`` to the ``Question``. The results are filtered by the "
"``question_text`` field and ordered by the ``date_created`` field::"
msgstr ""
"以下の例では、``ChoiceAdmin`` フィールドは ``Question`` への ``ForeignKey`` "
"に対するオートコンプリートフィールドを持ちます。結果は ``question_text`` "
"フィールドによりフィルタされ、また ``date_created`` フィールドにより並べ替え"
"られます:"

msgid "Performance considerations for large datasets"
msgstr "巨大なデータセットに対するパフォーマンス上の注意"

msgid ""
"Ordering using :attr:`ModelAdmin.ordering` may cause performance problems as "
"sorting on a large queryset will be slow."
msgstr ""
":attr:`ModelAdmin.ordering` を使った並べ替えは、巨大なクエリセットは遅くなる"
"ため、パフォーマンスの問題の原因となります。"

msgid ""
"Also, if your search fields include fields that aren't indexed by the "
"database, you might encounter poor performance on extremely large tables."
msgstr ""
"また、検索フィールドがデータベースによるインデックス化がされていないフィール"
"ドを含む場合、巨大なテーブルでは貧弱なパフォーマンスしか発揮できなくなってし"
"まいます。"

msgid ""
"For those cases, it's a good idea to write your own :func:`ModelAdmin."
"get_search_results` implementation using a full-text indexed search."
msgstr ""
"このような場合は、フルテキストのインデックスサーチを使用した独自の :func:"
"`ModelAdmin.get_search_results` 実装を記述するのがよいでしょう。"

msgid ""
"You may also want to change the ``Paginator`` on very large tables as the "
"default paginator always performs a ``count()`` query. For example, you "
"could override the default implementation of the ``Paginator.count`` "
"property."
msgstr ""
"また、デフォルトの paginator は常に  ``count()`` を発行するため、巨大なテーブ"
"ルでは ``Paginator`` を変更するのがお勧めです。例えば、``Paginator.count`` プ"
"ロパティのデフォルトの実装をオーバーライドできます。"

msgid ""
"By default, Django's admin uses a select-box interface (<select>) for fields "
"that are ``ForeignKey``. Sometimes you don't want to incur the overhead of "
"having to select all the related instances to display in the drop-down."
msgstr ""
"デフォルトでは、``ForeignKey`` のフィールドに対して Django の admin はセレク"
"トボックスのインターフェース (``<select>``) を使用します。ドロップダウン内に"
"表示する関係インスタンスをすべて選択するオーバーヘッドから逃れたいこともある"
"でしょう。"

msgid ""
"``raw_id_fields`` is a list of fields you would like to change into an "
"``Input`` widget for either a ``ForeignKey`` or ``ManyToManyField``::"
msgstr ""
"``raw_id_fields`` は、``ForeignKey`` や ``ManyToManyField`` に対する "
"``Input`` ウィジェットを適用したいフィールドのリストです::"

msgid ""
"The ``raw_id_fields`` ``Input`` widget should contain a primary key if the "
"field is a ``ForeignKey`` or a comma separated list of values if the field "
"is a ``ManyToManyField``.  The ``raw_id_fields`` widget shows a magnifying "
"glass button next to the field which allows users to search for and select a "
"value:"
msgstr ""
"``raw_id_fields`` ``Input`` ウィジェットには、``ForeignKey`` の場合はプライマ"
"リキーを、``ManyToManyField`` の場合はカンマで区切った値のリストを入力しま"
"す。``raw_id_fields`` ウィジェットには、ユーザーが値を検索および選択できるよ"
"う、隣にルーペボタンがあります:"

msgid ""
"By default the admin shows all fields as editable. Any fields in this option "
"(which should be a ``list`` or ``tuple``) will display its data as-is and "
"non-editable; they are also excluded from the :class:`~django.forms."
"ModelForm` used for creating and editing. Note that when specifying :attr:"
"`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` the read-only fields "
"must be present to be shown (they are ignored otherwise)."
msgstr ""
"デフォルトでは、すべてのフィールドが編集可能となっています。このオプションに"
"含まれるフィールド (``list`` か ``tuple`` で指定します) は、データをそのまま"
"表示するだけで編集できなくなります。また、追加と編集に使われる :class:"
"`~django.forms.ModelForm` からも除外されます。 :attr:`ModelAdmin.fields` か :"
"attr:`ModelAdmin.fieldsets` を指定した場合、read-only のフィールドは表示のた"
"めに存在している必要があります (存在しなければ無視されます)。"

msgid ""
"If ``readonly_fields`` is used without defining explicit ordering through :"
"attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` they will be added "
"last after all editable fields."
msgstr ""
":attr:`ModelAdmin.fields` や :attr:`ModelAdmin.fieldsets` で明示的に並び順を"
"定義しないで ``readonly_fields`` を使った場合、これらのフィールドはすべての編"
"集可能なフィールドの後に表示されます。"

msgid ""
"A read-only field can not only display data from a model's field, it can "
"also display the output of a model's method or a method of the "
"``ModelAdmin`` class itself. This is very similar to the way :attr:"
"`ModelAdmin.list_display` behaves. This provides a way to use the admin "
"interface to provide feedback on the status of the objects being edited, for "
"example::"
msgstr ""
"read-only のフィールドはモデルのフィールドからデータを表示するだけではなく、"
"モデルや ``ModelAdmin`` クラス自身のメソッドの出力を表示させることもできま"
"す。これは :attr:`ModelAdmin.list_display` の挙動に似ています。これにより、編"
"集中のオブジェクトのステータスのフィードバックを admin インターフェースに与え"
"ることができるようになります。たとえば:"

msgid ""
"Set ``save_as`` to enable a \"save as new\" feature on admin change forms."
msgstr ""
"admin のチェンジーフォームで \"新規に保存\" 機能を有効化するには ``save_as`` "
"をセットしてください。"

msgid ""
"Normally, objects have three save options: \"Save\", \"Save and continue "
"editing\", and \"Save and add another\". If ``save_as`` is ``True``, \"Save "
"and add another\" will be replaced by a \"Save as new\" button that creates "
"a new object (with a new ID) rather than updating the existing object."
msgstr ""
"通常、オブジェクトには 3 つの保存オプションがあります: \"保存\"、\"保存して編"
"集を続ける\"、\"保存して 1 つ追加\" です。``save_as`` が ``True`` の場"
"合、\"保存して 1 つ追加\" が \"新規に保存\" ボタンに変更され、既存のオブジェ"
"クトを変更するのではなく (新しい ID) で新規のオブジェクトが作成されるようにな"
"ります。"

msgid "By default, ``save_as`` is set to ``False``."
msgstr "デフォルトでは ``save_as`` は ``False`` にセットされています。"

msgid ""
"When :attr:`save_as=True <save_as>`, the default redirect after saving the "
"new object is to the change view for that object. If you set "
"``save_as_continue=False``, the redirect will be to the changelist view."
msgstr ""
":attr:`save_as=True <save_as>` のとき、新規オブジェクトを保存した後のデフォル"
"トのリダイレクト先はそのオブジェクトの変更ビューです。"
"``save_as_continue=False`` にセットすると、リダイレクト先がチェンジリスト"
"ビューになります。"

msgid "By default, ``save_as_continue`` is set to ``True``."
msgstr "デフォルトでは ``save_as_continue`` は ``True`` にセットされています。"

msgid ""
"Set ``save_on_top`` to add save buttons across the top of your admin change "
"forms."
msgstr ""
"admin のチェンジフォームの上部に保存ボタンを追加するには ``save_on_top`` を"
"セットしてください。"

msgid ""
"Normally, the save buttons appear only at the bottom of the forms. If you "
"set ``save_on_top``, the buttons will appear both on the top and the bottom."
msgstr ""
"通常、保存ボタンはフォームの下部のみに表示されます。``save_on_top`` をセット"
"すると、ボタンは上部と下部の両方に表示されるようになります。"

msgid "By default, ``save_on_top`` is set to ``False``."
msgstr "デフォルトでは ``save_on_top`` は ``False`` にセットされています。"

msgid ""
"Set ``search_fields`` to enable a search box on the admin change list page. "
"This should be set to a list of field names that will be searched whenever "
"somebody submits a search query in that text box."
msgstr ""
"admin のチェンジリストページで検索ボックスを有効化するには ``search_fields`` "
"をセットしてください。セットするのはフィールド名のリストで、ここで指定した"
"フィールドはテキストボックス内での検索クエリの対象となります。"

msgid ""
"These fields should be some kind of text field, such as ``CharField`` or "
"``TextField``. You can also perform a related lookup on a ``ForeignKey`` or "
"``ManyToManyField`` with the lookup API \"follow\" notation::"
msgstr ""
"指定するフィールドの種類は、``CharField`` や ``TextField`` といったテキスト"
"フィールドである必要があります。ルックアップ API の \"follow\" 記法を使えば "
"``ForeignKey`` や ``ManyToManyField`` をルックアップすることもできます。"

msgid ""
"For example, if you have a blog entry with an author, the following "
"definition would enable searching blog entries by the email address of the "
"author::"
msgstr ""
"たとえば、著者の情報を持つブログエントリーの場合、以下の定義により、著者の"
"メールアドレスによるブログエントリーの検索が可能となります。"

msgid ""
"When somebody does a search in the admin search box, Django splits the "
"search query into words and returns all objects that contain each of the "
"words, case-insensitive (using the :lookup:`icontains` lookup), where each "
"word must be in at least one of ``search_fields``. For example, if "
"``search_fields`` is set to ``['first_name', 'last_name']`` and a user "
"searches for ``john lennon``, Django will do the equivalent of this SQL "
"``WHERE`` clause:"
msgstr ""
"検索ボックスで検索が行われるとき、Django は検索クエリを単語に分割し、(:"
"lookup:`icontains` ルックアップを使って) 大文字と小文字を区別しない各単語を含"
"むオブジェクトを返します。各単語は最低 1 つの ``search_fields`` に含まれてい"
"る必要があります。例えば、``search_fields`` が ``['first_name', "
"'last_name']`` にセットされ、ユーザーが ``john lennon`` と検索した場合、"
"Django は SQL の ``WHERE`` 節と同等の検索を実行します。"

msgid ""
"The search query can contain quoted phrases with spaces. For example, if a "
"user searches for ``\"john winston\"`` or ``'john winston'``, Django will do "
"the equivalent of this SQL ``WHERE`` clause:"
msgstr ""
"検索クエリには空白を含む引用句を含めることができます。たとえば、ユーザが "
"``\"john winston\"`` や ``'john winston'`` を検索した場合、 Django はこの "
"SQL の ``WHERE`` 句と等価な処理を行います。"

msgid ""
"If you don't want to use ``icontains`` as the lookup, you can use any lookup "
"by appending it the field. For example, you could use :lookup:`exact` by "
"setting ``search_fields`` to ``['first_name__exact']``."
msgstr ""
"もし ``icontains`` ルックアップを使用したくない場合は、フィールドに追加するこ"
"とで任意のルックアップを使用できます。例えば、``search_fields`` を "
"``['first_name__exact']`` に設定することで、:lookup:`exact` を使用できます。"

msgid ""
"Some (older) shortcuts for specifying a field lookup are also available. You "
"can prefix a field in ``search_fields`` with the following characters and "
"it's equivalent to adding ``__<lookup>`` to the field:"
msgstr ""
"いくつかの (古い) ショートカットを使って、フィールドルックアップを指定するこ"
"ともできます。以下の文字で ``search_fields`` 内のフィールドにプレフィックスを"
"追加できます。これはフィールドに ``__<lookup>`` を追加するのと同等です。"

msgid "Prefix"
msgstr "プレフィックス"

msgid "Lookup"
msgstr "ルックアップ"

msgid "^"
msgstr "^"

msgid ":lookup:`istartswith`"
msgstr ":lookup:`istartswith`"

msgid "="
msgstr "="

msgid ":lookup:`iexact`"
msgstr ":lookup:`iexact`"

msgid "@"
msgstr "@"

msgid ":lookup:`search`"
msgstr ":lookup:`search`"

msgid "None"
msgstr "None"

msgid ":lookup:`icontains`"
msgstr ":lookup:`icontains`"

msgid ""
"If you need to customize search you can use :meth:`ModelAdmin."
"get_search_results` to provide additional or alternate search behavior."
msgstr ""
"検索方法をカスタムする必要がある場合は、:meth:`ModelAdmin."
"get_search_results` を使って追加的もしくは代替の検索方法を提供できます。"

msgid ""
"Set ``search_help_text`` to specify a descriptive text for the search box "
"which will be displayed below it."
msgstr ""
"``search_help_text`` には検索ボックスの下に表示される説明文を指定します。"

msgid ""
"Set ``show_full_result_count`` to control whether the full count of objects "
"should be displayed on a filtered admin page (e.g. ``99 results (103 "
"total)``). If this option is set to ``False``, a text like ``99 results "
"(Show all)`` is displayed instead."
msgstr ""
"フィルタリングされた admin ページにオブジェクトのカウント (例: ``99 results "
"(103 total)``) を表示するかどうかをコントロールするには、"
"``show_full_result_count`` をセットしてください。``False`` にセットすると、代"
"わりに ``99 results (Show all)`` のような文字列が表示されるようになります。"

msgid ""
"The default of ``show_full_result_count=True`` generates a query to perform "
"a full count on the table which can be expensive if the table contains a "
"large number of rows."
msgstr ""
"デフォルトの ``show_full_result_count=True`` は、テーブル内の全アイテムをカウ"
"ントするクエリを発行するため、多くの行を含むテーブルではパフォーマンス低下の"
"原因となります。"

msgid ""
"By default, the change list page allows sorting by all model fields (and "
"callables that use the ``ordering`` argument to the :func:`~django.contrib."
"admin.display` decorator or have the ``admin_order_field`` attribute) "
"specified in :attr:`list_display`."
msgstr ""
"デフォルトでは、チェンジリストページでは :attr:`list_display` で指定された全"
"てのモデルフィールド (および :func:`~django.contrib.admin.display` デコレータ"
"の ``ordering`` 引数を使用する呼び出し可能オブジェクト、または "
"``admin_order_field`` 属性を持つ呼び出し可能オブジェクト) によるソートが可能"
"です。"

msgid ""
"If you want to disable sorting for some columns, set ``sortable_by`` to a "
"collection (e.g. ``list``, ``tuple``, or ``set``) of the subset of :attr:"
"`list_display` that you want to be sortable. An empty collection disables "
"sorting for all columns."
msgstr ""
"特定のカラムでのソートを無効化したい場合、 ``sortable_by`` に :attr:"
"`list_display` サブセットのコレクション (例: ``list`` 、 ``tuple`` 、 "
"``set``) をセットしてください。空のコレクションを指定すると、すべてのカラムで"
"ソート不可となります。"

msgid ""
"If you need to specify this list dynamically, implement a :meth:`~ModelAdmin."
"get_sortable_by` method instead."
msgstr ""
"リストを動的に指定する必要があるときは、代わりに :meth:`~ModelAdmin."
"get_sortable_by` メソッドを実装してください。"

msgid ""
"Set ``view_on_site`` to control whether or not to display the \"View on "
"site\" link. This link should bring you to a URL where you can display the "
"saved object."
msgstr ""
"\"サイトで見る\" リンクを表示するか否かをコントロールするには、"
"``view_on_site`` をセットしてください。このリンクは保存されたオブジェクトを表"
"示できる URL に誘導します。"

msgid ""
"This value can be either a boolean flag or a callable. If ``True`` (the "
"default), the object's :meth:`~django.db.models.Model.get_absolute_url` "
"method will be used to generate the url."
msgstr ""
"値は、真偽値か呼び出し可能オブジェクトで指定します。``True`` (デフォルトで"
"す) の場合、オブジェクトの :meth:`~django.db.models.Model.get_absolute_url` "
"メソッドが使われ、URLが生成されます。"

msgid ""
"If your model has a :meth:`~django.db.models.Model.get_absolute_url` method "
"but you don't want the \"View on site\" button to appear, you only need to "
"set ``view_on_site`` to ``False``::"
msgstr ""
"モデルが :meth:`~django.db.models.Model.get_absolute_url` メソッドを持ってい"
"ても \"サイトで見る\" ボタンを表示したくない場合は、``view_on_site`` に "
"``False`` をセットしてください::"

msgid ""
"In case it is a callable, it accepts the model instance as a parameter. For "
"example::"
msgstr ""
"呼び出し可能オブジェクトの場合、引数にモデルのインスタンスを受け入れます。例"
"えば::"

msgid "Custom template options"
msgstr "カスタムテンプレートのオプション"

msgid ""
"The :ref:`admin-overriding-templates` section describes how to override or "
"extend the default admin templates.  Use the following options to override "
"the default templates used by the :class:`ModelAdmin` views:"
msgstr ""
":ref:`admin-overriding-templates` セクションでは、デフォルトの admin テンプ"
"レートをオーバーライドないし拡張する方法を説明しています。:class:"
"`ModelAdmin` ビューで使用されるデフォルトのテンプレートをオーバーライドするに"
"は、以下のオプションを使用してください:"

msgid "Path to a custom template, used by :meth:`add_view`."
msgstr "カスタムンテンプレートの絶対パスで、:meth:`add_view` で使われます。"

msgid "Path to a custom template, used by :meth:`change_view`."
msgstr "カスタムンテンプレートの絶対パスで、:meth:`change_view` で使われます。"

msgid "Path to a custom template, used by :meth:`changelist_view`."
msgstr ""
"カスタムンテンプレートの絶対パスで、:meth:`changelist_view` で使われます。"

msgid ""
"Path to a custom template, used by :meth:`delete_view` for displaying a "
"confirmation page when deleting one or more objects."
msgstr ""
"カスタムンテンプレートの絶対パスで、1 つ以上のオブジェクトを削除するときに確"
"認ページを表示するために、:meth:`delete_view` で使われます。"

msgid ""
"Path to a custom template, used by the ``delete_selected`` action method for "
"displaying a confirmation page when deleting one or more objects. See the :"
"doc:`actions documentation</ref/contrib/admin/actions>`."
msgstr ""
"カスタムンテンプレートの絶対パスで、1 つ以上のオブジェクトを削除するときに確"
"認ページを表示するために、``delete_selected`` アクションメソッドで使われま"
"す。:doc:`アクションのドキュメント  </ref/contrib/admin/actions>` を参照して"
"ください。"

msgid "Path to a custom template, used by :meth:`history_view`."
msgstr ""
"カスタムンテンプレートの絶対パスで、:meth:`history_view` で使われます。"

msgid ""
"Path to a custom template, used by :meth:`response_add`, :meth:"
"`response_change`, and :meth:`response_delete`."
msgstr ""
"カスタムンテンプレートの絶対パスで、:meth:`response_add`、:meth:"
"`response_change`、:meth:`response_delete` の 3 つで使われます。"

msgid "``ModelAdmin`` methods"
msgstr "``ModelAdmin`` のメソッド"

msgid ""
"When overriding :meth:`ModelAdmin.save_model` and :meth:`ModelAdmin."
"delete_model`, your code must save/delete the object. They aren't meant for "
"veto purposes, rather they allow you to perform extra operations."
msgstr ""
":meth:`ModelAdmin.save_model` や :meth:`ModelAdmin.delete_model` をオーバーラ"
"イドするときは、オブジェクトの保存や削除の処理を記述する必要があります。これ"
"は、制限を設けるためではなく、追加的な操作を可能にするための仕様です。"

msgid ""
"The ``save_model`` method is given the ``HttpRequest``, a model instance, a "
"``ModelForm`` instance, and a boolean value based on whether it is adding or "
"changing the object. Overriding this method allows doing pre- or post-save "
"operations. Call ``super().save_model()`` to save the object using :meth:`."
"Model.save`."
msgstr ""
"``save_model`` メソッドには、``HttpRequest``、モデルのインスタンス、"
"``ModelForm`` のインスタンス、追加か変更かを表す真偽値が渡されます。このメ"
"ソッドをオーバーライドすると、保存の前後に操作を追加できます。``super()."
"save_model()`` を呼び出して、:meth:`.Model.save` を使ってオブジェクトを保存し"
"てください。"

msgid "For example to attach ``request.user`` to the object prior to saving::"
msgstr "例えば、保存前にオブジェクトに ``request.user`` を追加するには::"

msgid ""
"The ``delete_model`` method is given the ``HttpRequest`` and a model "
"instance. Overriding this method allows doing pre- or post-delete "
"operations. Call ``super().delete_model()`` to delete the object using :meth:"
"`.Model.delete`."
msgstr ""
"``delete_model`` には、``HttpRequest`` とモデルのインスタンスが渡されます。こ"
"のメソッドをオーバーライドすると、削除の前後に操作を追加できます。``super()."
"delete_model()`` を呼び出して、:meth:`.Model.delete` を使ってオブジェクトを削"
"除してください。"

msgid ""
"The ``delete_queryset()`` method is given the ``HttpRequest`` and a "
"``QuerySet`` of objects to be deleted. Override this method to customize the "
"deletion process for the \"delete selected objects\" :doc:`action <actions>`."
msgstr ""
"``delete_queryset()`` には、``HttpRequest`` と削除するオブジェクトの "
"``QuerySet`` が渡されます。このメソッドをオーバーライドすると、\"選択したオブ"
"ジェクトの削除\" :doc:`アクション <actions>` に対する削除のプロセスをカスタム"
"できます。"

msgid ""
"The ``save_formset`` method is given the ``HttpRequest``, the parent "
"``ModelForm`` instance and a boolean value based on whether it is adding or "
"changing the parent object."
msgstr ""
"``save_formset`` メソッドには、``HttpRequest``、親 ``ModelForm`` のインスタン"
"ス、親オブジェクトの追加か変更かを表す真偽値が与えられます。"

msgid ""
"For example, to attach ``request.user`` to each changed formset model "
"instance::"
msgstr ""
"たとえば、変更のあったフォームセットのモデルのインスタンスそれぞれに "
"``request.user`` を追加するには、次のようにします。"

msgid "See also :ref:`saving-objects-in-the-formset`."
msgstr "関連項目: :ref:`saving-objects-in-the-formset`"

msgid ""
"The ``get_ordering`` method takes a ``request`` as parameter and is expected "
"to return a ``list`` or ``tuple`` for ordering similar to the :attr:"
"`ordering` attribute. For example::"
msgstr ""
"``get_ordering`` メソッドは引数に ``request`` を取り、:attr:`ordering` のとき"
"と同じような ``list`` か ``tuple`` を返すことが期待されます。次に例を示しま"
"す。"

msgid ""
"The ``get_search_results`` method modifies the list of objects displayed "
"into those that match the provided search term. It accepts the request, a "
"queryset that applies the current filters, and the user-provided search "
"term. It returns a tuple containing a queryset modified to implement the "
"search, and a boolean indicating if the results may contain duplicates."
msgstr ""
"``get_search_results`` メソッドは、検索語と一致するオブジェクトを表示するため"
"の、オブジェクトのリストを修正します。リクエスト、現在のフィルタを適用するク"
"エリセット、 ユーザーが入力した検索語を受け取ります。 検索を実行するために修"
"正されたクエリセットと、結果に重複があるかどうかを表す真偽値を含むタプルを返"
"します。"

msgid ""
"The default implementation searches the fields named in :attr:`ModelAdmin."
"search_fields`."
msgstr ""
"デフォルトの実装では、:attr:`ModelAdmin.search_fields` に含まれるフィールドを"
"検索します。"

msgid ""
"This method may be overridden with your own custom search method. For "
"example, you might wish to search by an integer field, or use an external "
"tool such as `Solr`_ or `Haystack`_. You must establish if the queryset "
"changes implemented by your search method may introduce duplicates into the "
"results, and return ``True`` in the second element of the return value."
msgstr ""
"このメソッドは、独自の検索方法でオーバーライドできます。例えば、数値のフィー"
"ルドで検索したり、`Solr`_ や `Haystack`_ といった外部のツールを使うことができ"
"ます。独自の検索方法によって実装されたクエリセットの変更が結果に重複を生じさ"
"せるかを確認し、返値の 2 番目の要素に ``True`` を返す必要があります。"

msgid "For example, to search by ``name`` and ``age``, you could use::"
msgstr "たとえば、``name`` と ``age`` で検索するには、以下のように使います。"

msgid ""
"This implementation is more efficient than ``search_fields = ('name', "
"'=age')`` which results in a string comparison for the numeric field, for "
"example ``... OR UPPER(\"polls_choice\".\"votes\"::text) = UPPER('4')`` on "
"PostgreSQL."
msgstr ""
"この実装は、数値フィールドに対して文字列比較を行う ``search_fields = "
"('name', '=age')`` に比べて、はるかに効率的です... たとえば PostgreSQL では "
"``... OR UPPER(\"polls_choice\".\"votes\"::text) = UPPER('4')`` となります。"

msgid ""
"The ``save_related`` method is given the ``HttpRequest``, the parent "
"``ModelForm`` instance, the list of inline formsets and a boolean value "
"based on whether the parent is being added or changed. Here you can do any "
"pre- or post-save operations for objects related to the parent. Note that at "
"this point the parent object and its form have already been saved."
msgstr ""
"``save_related`` メソッドには、``HttpRequest``、親 ``ModelForm`` のインスタン"
"ス、インラインフォームセットのリスト、親の追加か変更かを表す真偽値が与えられ"
"ます。このメソッドで、保存の前後に親に対するリレーション先オブジェクトに対す"
"る操作を追加できます。この時点では親オブジェクトとそのフォームはすでに保存さ"
"れていることに注意してください。"

msgid ""
"The ``get_autocomplete_fields()`` method is given the ``HttpRequest`` and is "
"expected to return a ``list`` or ``tuple`` of field names that will be "
"displayed with an autocomplete widget as described above in the :attr:"
"`ModelAdmin.autocomplete_fields` section."
msgstr ""
"``get_autocomplete_fields()`` メソッドには、``HttpRequest`` が渡され、上述"
"の :attr:`ModelAdmin.autocomplete_fields` セクションで説明した通りオートコン"
"プリートウィジェットで表示するフィールドの名前の ``list`` か ``tuple`` を返す"
"ことが期待されます。"

msgid ""
"The ``get_readonly_fields`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``list`` or ``tuple`` of field names that will be displayed as read-only, "
"as described above in the :attr:`ModelAdmin.readonly_fields` section."
msgstr ""
"``get_readonly_fields`` メソッドには、``HttpRequest`` と編集対象の ``obj`` "
"(ないし新規追加用の ``None``) が渡され、上述の :attr:`ModelAdmin."
"readonly_fields` セクションで説明した通り、読み取り専用で表示するフィールドの"
"名前の ``list`` か ``tuple`` を返すことが期待されます。"

msgid ""
"The ``get_prepopulated_fields`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``dictionary``, as described above in the :attr:`ModelAdmin."
"prepopulated_fields` section."
msgstr ""
"``get_prepopulated_fields`` メソッドには、``HttpRequest`` と編集対象の "
"``obj`` (ないし新規追加用の ``None``) が渡され、上述の :attr:`ModelAdmin."
"prepopulated_fields` セクションで説明した通り ``dictionary`` を返すことが期待"
"されます。"

msgid ""
"The ``get_list_display`` method is given the ``HttpRequest`` and is expected "
"to return a ``list`` or ``tuple`` of field names that will be displayed on "
"the changelist view as described above in the :attr:`ModelAdmin."
"list_display` section."
msgstr ""
"``get_list_display`` メソッドには、``HttpRequest`` が渡され、上述の :attr:"
"`ModelAdmin.list_display` セクションで説明した通りチェンジリストビューで表示"
"するフィールドの名前の ``list`` か ``tuple`` を返すことが期待されます。"

msgid ""
"The ``get_list_display_links`` method is given the ``HttpRequest`` and the "
"``list`` or ``tuple`` returned by :meth:`ModelAdmin.get_list_display`. It is "
"expected to return either ``None`` or a ``list`` or ``tuple`` of field names "
"on the changelist that will be linked to the change view, as described in "
"the :attr:`ModelAdmin.list_display_links` section."
msgstr ""
"``get_list_display_links`` メソッドには、``HttpRequest`` と :meth:"
"`ModelAdmin.get_list_display` によって返された ``list`` ないし ``tuple`` が渡"
"されます。上述の :attr:`ModelAdmin.list_display_links` セクションで説明した通"
"り、チェンジリストで変更ビューにリンクを貼りたいフィールドの名前の ``list`` "
"か ``tuple``、もしくは ``None`` を返すことが期待されます。"

msgid ""
"The ``get_exclude`` method is given the ``HttpRequest`` and the ``obj`` "
"being edited (or ``None`` on an add form) and is expected to return a list "
"of fields, as described in :attr:`ModelAdmin.exclude`."
msgstr ""
"``get_exclude`` メソッドには、``HttpRequest`` と編集対象の ``obj`` (ないし新"
"規追加用の ``None``) が渡され、上述の :attr:`ModelAdmin.exclude` セクションで"
"説明した通りフィールドのリストを返すことが期待されます。"

msgid ""
"The ``get_fields`` method is given the ``HttpRequest`` and the ``obj`` being "
"edited (or ``None`` on an add form) and is expected to return a list of "
"fields, as described above in the :attr:`ModelAdmin.fields` section."
msgstr ""
"``get_fields`` メソッドには、``HttpRequest`` と編集対象の ``obj`` (ないし新規"
"追加用の ``None``) が渡され、上述の :attr:`ModelAdmin.fields` セクションで説"
"明した通りフィールドのリストを返すことが期待されます。"

msgid ""
"The ``get_fieldsets`` method is given the ``HttpRequest`` and the ``obj`` "
"being edited (or ``None`` on an add form) and is expected to return a list "
"of 2-tuples, in which each 2-tuple represents a ``<fieldset>`` on the admin "
"form page, as described above in the :attr:`ModelAdmin.fieldsets` section."
msgstr ""
"``get_fieldsets`` メソッドには、``HttpRequest`` と編集対象の ``obj`` (ないし"
"新規追加用の ``None``) が渡され、2 値タプルのリストを返すことが期待されます。"
"各 2 値タプルは、上述の :attr:`ModelAdmin.fieldsets` セクションで説明した通"
"り admin のフォームページ上の ``<fieldset>`` を表します。"

msgid ""
"The ``get_list_filter`` method is given the ``HttpRequest`` and is expected "
"to return the same kind of sequence type as for the :attr:`~ModelAdmin."
"list_filter` attribute."
msgstr ""
"``get_list_filter`` メソッドには、``HttpRequest`` が渡され、:attr:"
"`~ModelAdmin.list_filter` 属性のときと同じ種類のシーケンス型を返すことが期待"
"されます。"

msgid ""
"The ``get_list_select_related`` method is given the ``HttpRequest`` and "
"should return a boolean or list as :attr:`ModelAdmin.list_select_related` "
"does."
msgstr ""
"``get_list_select_related`` メソッドには、``HttpRequest`` が渡され、真偽値も"
"しくは :attr:`ModelAdmin.list_select_related` と同様のリストを返す必要があり"
"ます。"

msgid ""
"The ``get_search_fields`` method is given the ``HttpRequest`` and is "
"expected to return the same kind of sequence type as for the :attr:"
"`~ModelAdmin.search_fields` attribute."
msgstr ""
"``get_search_fields`` メソッドには、``HttpRequest`` が渡され、:attr:"
"`~ModelAdmin.search_fields` 属性のときと同じ種類のシーケンス型を返すことが期"
"待されます。"

msgid ""
"The ``get_sortable_by()`` method is passed the ``HttpRequest`` and is "
"expected to return a collection (e.g. ``list``, ``tuple``, or ``set``) of "
"field names that will be sortable in the change list page."
msgstr ""
"``get_list_display`` メソッドは ``HttpRequest`` を受け取り、チェンジリスト"
"ページでソート可能なフィールドの名のコレクション (例: ``list``、``tuple``、"
"``set``) を返すことが期待されます。"

msgid ""
"Its default implementation returns :attr:`sortable_by` if it's set, "
"otherwise it defers to :meth:`get_list_display`."
msgstr ""
"デフォルトの実装では、セットされている場合は :attr:`sortable_by` を返します。"
"セットされていなければ :meth:`get_list_display` を参照します。"

msgid "For example, to prevent one or more columns from being sortable::"
msgstr "たとえば、1 つ以上のカラムを並び替え不可にするには::"

msgid ""
"The ``get_inline_instances`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``list`` or ``tuple`` of :class:`~django.contrib.admin.InlineModelAdmin` "
"objects, as described below in the :class:`~django.contrib.admin."
"InlineModelAdmin` section. For example, the following would return inlines "
"without the default filtering based on add, change, delete, and view "
"permissions::"
msgstr ""
"``get_inline_instances`` メソッドは、編集中の ``HttpRequest`` と ``obj`` (追"
"加フォームの場合は ``None``) を受け取り、以下の :class:`~django.contrib."
"admin.InlineModelAdmin` セクションで説明されているように、:class:`~django."
"contrib.admin.InlineModelAdmin` オブジェクトの ``list`` または ``tuple`` を返"
"すことが期待されます。例えば、以下は追加、変更、削除、閲覧の権限に基づくデ"
"フォルトのフィルタリングなしでインラインを返す方法です:"

msgid ""
"If you override this method, make sure that the returned inlines are "
"instances of the classes defined in :attr:`inlines` or you might encounter a "
"\"Bad Request\" error when adding related objects."
msgstr ""
"このメソッドをオーバーライドする場合、返値となるインラインは :attr:`inlines` "
"で定義したクラスのインスタンスにしてください。間違えると、リレーション先オブ"
"ジェクトを追加する際に \"Bad Request\" が発生する可能性があります。"

msgid ""
"The ``get_inlines`` method is given the ``HttpRequest`` and the ``obj`` "
"being edited (or ``None`` on an add form) and is expected to return an "
"iterable of inlines. You can override this method to dynamically add inlines "
"based on the request or model instance instead of specifying them in :attr:"
"`ModelAdmin.inlines`."
msgstr ""
"``get_inlines`` メソッドは、編集対象の ``HttpRequest`` と ``obj`` (追加フォー"
"ムの場合は ``None``) を受け取り、インラインのイテラブルを返すことが期待されま"
"す。 :attr:`ModelAdmin.inlines` で指定する代わりに、このメソッドをオーバーラ"
"イドすることで、リクエストやモデルインスタンスに基づいて動的にインラインを追"
"加できます。"

msgid ""
"The ``get_urls`` method on a ``ModelAdmin`` returns the URLs to be used for "
"that ModelAdmin in the same way as a URLconf.  Therefore you can extend them "
"as documented in :doc:`/topics/http/urls`, using the ``AdminSite."
"admin_view()`` wrapper on your views::"
msgstr ""
"``ModelAdmin`` の ``get_urls`` メソッドは URLconf と同じようにその "
"ModelAdmin で使用する URL を返します。 そのため、 :doc:`/topics/http/urls` で"
"説明されているように、ビューの ``AdminSite.admin_view()`` ラッパーを使って拡"
"張できます:"

msgid ""
"If you want to use the admin layout, extend from ``admin/base_site.html``:"
msgstr ""
"admin のレイアウトを使用したい場合、``admin/base_site.html`` を extend してく"
"ださい:"

msgid ""
"Notice how the ``self.my_view`` function is wrapped in ``self.admin_site."
"admin_view``. This is important, since it ensures two things:"
msgstr ""
"``self.my_view`` 関数が ``self.admin_site.admin_view`` でラップされていること"
"に注意してください。これは重要であり、次の2つのことを保証します:"

msgid ""
"Permission checks are run, ensuring only active staff users can access the "
"view."
msgstr ""
"パーミッションチェックが実行され、アクティブなスタッフユーザーだけがビューに"
"アクセスできるようにします。"

msgid ""
"The :func:`django.views.decorators.cache.never_cache` decorator is applied "
"to prevent caching, ensuring the returned information is up-to-date."
msgstr ""
":func:`django.views.decorators.cache.never_cache` デコレータはキャッシュを防"
"ぐために適用され、返される情報が最新であることを保証します。"

msgid ""
"Notice that the custom patterns are included *before* the regular admin "
"URLs: the admin URL patterns are very permissive and will match nearly "
"anything, so you'll usually want to prepend your custom URLs to the built-in "
"ones."
msgstr ""
"カスタムパターンが通常の管理URLよりも *前に* 含まれていることに注意してくださ"
"い。管理URLのパターンは非常に許容範囲が広く、ほぼ何でも一致するため、通常はカ"
"スタムURLを組み込みのURLに前置したいと思うでしょう。"

msgid ""
"In this example, ``my_view`` will be accessed at ``/admin/myapp/mymodel/"
"my_view/`` (assuming the admin URLs are included at ``/admin/``.)"
msgstr ""
"この例では、 ``my_view`` は ``/admin/myapp/mymodel/my_view/`` にアクセスされ"
"ます (管理画面の URL が ``/admin/`` に含まれていると仮定します)。"

msgid ""
"If the page is cacheable, but you still want the permission check to be "
"performed, you can pass a ``cacheable=True`` argument to ``AdminSite."
"admin_view()``::"
msgstr ""
"ページがキャッシュ可能で、それでもパーミッションチェックを行いたい場合は、 "
"``AdminSite.admin_view()`` に ``cacheable=True`` 引数を渡します:"

msgid ""
"``ModelAdmin`` views have ``model_admin`` attributes. Other ``AdminSite`` "
"views have ``admin_site`` attributes."
msgstr ""
"``ModelAdmin`` ビューは ``model_admin`` 属性を持ちます。その他の "
"``AdminSite`` ビューは ``admin_site`` 属性を持ちます。"

msgid ""
"Returns a :class:`~django.forms.ModelForm` class for use in the admin add "
"and change views, see :meth:`add_view` and :meth:`change_view`."
msgstr ""
"admin の追加と変更のビューで使うための :class:`~django.forms.ModelForm` クラ"
"スを返します。:meth:`add_view` と :meth:`change_view` を参照してください。"

msgid ""
"The base implementation uses :func:`~django.forms.models.modelform_factory` "
"to subclass :attr:`~form`, modified by attributes such as :attr:`~fields` "
"and :attr:`~exclude`. So, for example, if you wanted to offer additional "
"fields to superusers, you could swap in a different base form like so::"
msgstr ""
"基本の実装は :func:`~django.forms.models.modelform_factory` を使用して :attr:"
"`~form` をサブクラス化し、:attr:`~fields` や :attr:`~exclude` といった属性に"
"よって修正されます。なので、例えばスーパーユーザーに対して追加的なフィールド"
"を与えたい場合は、以下のように基本のフォームを変更できます:"

msgid ""
"You may also return a custom :class:`~django.forms.ModelForm` class directly."
msgstr ":class:`~django.forms.ModelForm` クラスを直接返すこともできます。"

msgid ""
"Yields (``FormSet``, :class:`InlineModelAdmin`) pairs for use in admin add "
"and change views."
msgstr ""
"admin の追加や変更のビューで使用するための (``FormSet``, :class:"
"`InlineModelAdmin`) ペアを生成します。"

msgid ""
"For example if you wanted to display a particular inline only in the change "
"view, you could override ``get_formsets_with_inlines`` as follows::"
msgstr ""
"たとえば、変更ビューのみで特定のインラインを表示したい場合、以下のように "
"``get_formsets_with_inlines`` をオーバーライドできます。"

msgid ""
"The ``formfield_for_foreignkey`` method on a ``ModelAdmin`` allows you to "
"override the default formfield for a foreign keys field. For example, to "
"return a subset of objects for this foreign key field based on the user::"
msgstr ""
"``ModelAdmin`` の ``formfield_for_foreignkey`` を使うと、ForignKey フィールド"
"に対するデフォルトのフォームフィールドをオーバーライドできます。たとえば、"
"ユーザーに基づいてこの ForeignKey フィールドに対するオブジェクトのサブセット"
"を返すには::"

msgid ""
"This uses the ``HttpRequest`` instance to filter the ``Car`` foreign key "
"field to only display the cars owned by the ``User`` instance."
msgstr ""
"これは、``HttpRequest`` インスタンスを使って ``Car`` ForeignKey フィールドを"
"フィルタし、特定の ``User`` インスタンスが所有する car のみを表示します。"

msgid ""
"For more complex filters, you can use ``ModelForm.__init__()`` method to "
"filter based on an ``instance`` of your model (see :ref:`fields-which-handle-"
"relationships`). For example::"
msgstr ""
"より複雑なフィルタを行うには、``ModelForm.__init__()`` メソッドを使用すること"
"で、モデルの ``instance`` に基づいたフィルタを行うことができます (:ref:"
"`fields-which-handle-relationships` を参照してください)。たとえば:"

msgid ""
"Like the ``formfield_for_foreignkey`` method, the "
"``formfield_for_manytomany`` method can be overridden to change the default "
"formfield for a many to many field. For example, if an owner can own "
"multiple cars and cars can belong to multiple owners -- a many to many "
"relationship -- you could filter the ``Car`` foreign key field to only "
"display the cars owned by the ``User``::"
msgstr ""
"``formfield_for_foreignkey`` メソッドと同じように、"
"``formfield_for_manytomany`` メソッドをオーバーライドすると ManyToMany に対す"
"るデフォルトのフォームフィールドを変更できます。たとえば、あるオーナーは複数"
"の car を所有でき、また car は複数のオーナーに所有されるとすると（多対多の関"
"係です） ``Car`` のフィールドをフィルタして特定の ``User`` が所有する car だ"
"けを表示できます:"

msgid ""
"Like the ``formfield_for_foreignkey`` and ``formfield_for_manytomany`` "
"methods, the ``formfield_for_choice_field`` method can be overridden to "
"change the default formfield for a field that has declared choices. For "
"example, if the choices available to a superuser should be different than "
"those available to regular staff, you could proceed as follows::"
msgstr ""
"``formfield_for_foreignkey`` や ``formfield_for_manytomany`` メソッドと同じよ"
"うに、``formfield_for_choice_field`` メソッドをオーバーライドすると選択肢とし"
"て宣言されたフィールドに対するデフォルトのフォームフィールドを変更できます。 "
"たとえば、スーパーユーザーと通常のスタッフで表示する選択肢を違うものにしたい"
"場合、以下のように記述できます::"

msgid "``choices`` limitations"
msgstr "``choices`` の制限"

msgid ""
"Any ``choices`` attribute set on the formfield will be limited to the form "
"field only. If the corresponding field on the model has choices set, the "
"choices provided to the form must be a valid subset of those choices, "
"otherwise the form submission will fail with a :exc:`~django.core.exceptions."
"ValidationError` when the model itself is validated before saving."
msgstr ""
"フォームフィールドにセットされたすべての ``choices`` 属性はそのフォームの"
"フィールドのみに制限されます。モデル上の一致するフィールドに選択肢がセットさ"
"れている場合、フォームに提供される選択肢はこの選択肢の有効なサブセットでなく"
"てはなりません。そうでない場合、フォームの送信は、モデル自身の保存前のバリ"
"デーションで :exc:`~django.core.exceptions.ValidationError` とともに失敗しま"
"す。"

msgid ""
"Returns the ``Changelist`` class to be used for listing. By default, "
"``django.contrib.admin.views.main.ChangeList`` is used. By inheriting this "
"class you can change the behavior of the listing."
msgstr ""
"リスト作成に使われる ``Changelist`` を返します。デフォルトでは、``django."
"contrib.admin.views.main.ChangeList`` が使われます。このクラスを継承すること"
"で、リスト作成の動作を変更できます。"

msgid ""
"Returns a :class:`~django.forms.ModelForm` class for use in the ``Formset`` "
"on the changelist page. To use a custom form, for example::"
msgstr ""
"チェンジリストページの ``Formset`` で使うための :class:`~django.forms."
"ModelForm` クラスを返します。カスタムフォームを使うには、たとえば、次のように"
"します。"

msgid ""
"If you define the ``Meta.model`` attribute on a :class:`~django.forms."
"ModelForm`, you must also define the ``Meta.fields`` attribute (or the "
"``Meta.exclude`` attribute). However, ``ModelAdmin`` ignores this value, "
"overriding it with the :attr:`ModelAdmin.list_editable` attribute. The "
"easiest solution is to omit the ``Meta.model`` attribute, since "
"``ModelAdmin`` will provide the correct model to use."
msgstr ""
":class:`~django.forms.ModelForm` で ``Meta.model`` 属性を定義した場合、"
"``Meta.fields`` 属性 (ないし ``Meta.exclude`` 属性) も定義する必要がありま"
"す。しかし ``ModelAdmin`` はこの値を無視して、:attr:`ModelAdmin."
"list_editable` 属性をオーバーライドします。最も簡単な解決方法は、``Meta."
"model`` 属性を除外することです。これは ``ModelAdmin`` が使用する正しいモデル"
"を提供するからです。"

msgid ""
"Returns a :ref:`ModelFormSet <model-formsets>` class for use on the "
"changelist page if :attr:`~ModelAdmin.list_editable` is used. To use a "
"custom formset, for example::"
msgstr ""
":attr:`~ModelAdmin.list_editable` を使っている場合、チェンジリストページで使"
"用するための :ref:`ModelFormSet <model-formsets>` クラスを返します。カスタム"
"のフォームセットを使うには、たとえば、次のようにします。"

msgid ""
"The objects in the changelist page can be filtered with lookups from the "
"URL's query string. This is how :attr:`list_filter` works, for example. The "
"lookups are similar to what's used in :meth:`.QuerySet.filter` (e.g. "
"``user__email=user@example.com``). Since the lookups in the query string can "
"be manipulated by the user, they must be sanitized to prevent unauthorized "
"data exposure."
msgstr ""
"チェンジリストページのオブジェクトは URL のクエリ文字列からルックアップして"
"フィルタすることができます。たとえば、:attr:`list_filter` はその仕組みで動作"
"します。ルックアップは :meth:`.QuerySet.filter` (例 "
"``user__email=user@example.com``) で使われているものと似ています。クエリ文字"
"列のルックアップはユーザによって操作される可能性があるため、無許可のデータ漏"
"洩を防ぐためにサニタイズする必要があります。"

msgid ""
"The ``lookup_allowed()`` method is given a lookup path from the query string "
"(e.g. ``'user__email'``), the corresponding value (e.g. ``'user@example."
"com'``), and the request, and returns a boolean indicating whether filtering "
"the changelist's ``QuerySet`` using the parameters is permitted. If "
"``lookup_allowed()`` returns ``False``, ``DisallowedModelAdminLookup`` "
"(subclass of :exc:`~django.core.exceptions.SuspiciousOperation`) is raised."
msgstr ""
"``lookup_allowed()`` メソッドには、クエリ文字列 (``'user__email'`` など)、対"
"応する値 (``'user@example.com'`` など)、リクエストからのルックアップパスが渡"
"され、パラメータを使用したチェンジリストの ``QuerySet`` のフィルタリングが許"
"可されているかどうかを示す真偽値を返します。 ``lookup_allowed()`` が "
"``False`` を返した場合、 ``DisallowedModelAdminLookup`` (:exc:`~django.core."
"exceptions.SuspiciousOperation` のサブクラス) が発生します。"

msgid ""
"By default, ``lookup_allowed()`` allows access to a model's local fields, "
"field paths used in :attr:`~ModelAdmin.list_filter` (but not paths from :"
"meth:`~ModelAdmin.get_list_filter`), and lookups required for :attr:`~django."
"db.models.ForeignKey.limit_choices_to` to function correctly in :attr:"
"`~django.contrib.admin.ModelAdmin.raw_id_fields`."
msgstr ""
"デフォルトでは、 ``lookup_allowed()`` はモデルのローカルフィールド、 :attr:"
"`~ModelAdmin.list_filter` で使用されるフィールドパス (ただし、 :meth:"
"`~ModelAdmin.get_list_filter` からのパスは使用できません)、 :attr:`~django."
"db.models.ForeignKey.limit_choices_to` が :attr:`~django.contrib.admin."
"ModelAdmin.raw_id_fields` で正しく機能するために必要なルックアップへのアクセ"
"スを許可します。"

msgid ""
"Override this method to customize the lookups permitted for your :class:"
"`~django.contrib.admin.ModelAdmin` subclass."
msgstr ""
":class:`~django.contrib.admin.ModelAdmin` サブクラスで許可されるルックアップ"
"をカスタマイズするには、このメソッドをオーバーライドします。"

msgid "The ``request`` argument was added."
msgstr "``request`` 引数が追加されました。"

msgid ""
"Should return ``True`` if viewing ``obj`` is permitted, ``False`` otherwise. "
"If obj is ``None``, should return ``True`` or ``False`` to indicate whether "
"viewing of objects of this type is permitted in general (e.g., ``False`` "
"will be interpreted as meaning that the current user is not permitted to "
"view any object of this type)."
msgstr ""
"``obj`` の閲覧が許可されている場合は ``True`` を、そうでなければ ``False`` を"
"返します。obj が ``None`` の場合、この種類のオブジェクトの閲覧が一般的に許可"
"されているかどうかを表すよう、``True`` か ``False`` を指定します (たとえば、"
"``False`` は現在のユーザーがこの種類のすべてのオブジェクトを閲覧できないこと"
"を意味します)。"

msgid ""
"The default implementation returns ``True`` if the user has either the "
"\"change\" or \"view\" permission."
msgstr ""
"デフォルトの実装では、ユーザーが \"change\" か \"view\" 権限を持っていれば "
"``True`` を返します。"

msgid ""
"Should return ``True`` if adding an object is permitted, ``False`` otherwise."
msgstr ""
"オブジェクトの追加が許可されていれば ``True`` を、そうでなければ ``False`` を"
"返します。"

msgid ""
"Should return ``True`` if editing ``obj`` is permitted, ``False`` otherwise. "
"If ``obj`` is ``None``, should return ``True`` or ``False`` to indicate "
"whether editing of objects of this type is permitted in general (e.g., "
"``False`` will be interpreted as meaning that the current user is not "
"permitted to edit any object of this type)."
msgstr ""
"``obj`` の編集が許可されている場合は ``True`` を、そうでなければ ``False`` を"
"返します。``obj`` が ``None`` の場合、この種類のオブジェクトの編集が一般的に"
"許可されているかどうかを表すよう、``True`` か ``False`` を指定します (たとえ"
"ば、``False`` は現在のユーザーがこの種類のすべてのオブジェクトを編集できない"
"ことを意味します)。"

msgid ""
"Should return ``True`` if deleting ``obj`` is permitted, ``False`` "
"otherwise. If ``obj`` is ``None``, should return ``True`` or ``False`` to "
"indicate whether deleting objects of this type is permitted in general (e."
"g., ``False`` will be interpreted as meaning that the current user is not "
"permitted to delete any object of this type)."
msgstr ""
"``obj`` の削除が許可されている場合は ``True`` を、そうでなければ ``False`` を"
"返します。``obj`` が ``None`` の場合、この種類のオブジェクトの削除が一般的に"
"許可されているかどうかを表すよう、``True`` か ``False`` を指定します (たとえ"
"ば、``False`` は現在のユーザーがこの種類のすべてのオブジェクトを削除できない"
"ことを意味します)。"

msgid ""
"Should return ``True`` if displaying the module on the admin index page and "
"accessing the module's index page is permitted, ``False`` otherwise. Uses :"
"meth:`User.has_module_perms() <django.contrib.auth.models.User."
"has_module_perms>` by default. Overriding it does not restrict access to the "
"view, add, change, or delete views, :meth:`~ModelAdmin."
"has_view_permission`, :meth:`~ModelAdmin.has_add_permission`, :meth:"
"`~ModelAdmin.has_change_permission`, and :meth:`~ModelAdmin."
"has_delete_permission` should be used for that."
msgstr ""
"admin のインデックスページでモジュールを表示し、そのモジュールへのアクセスを"
"許可する場合は ``True`` を、そうでなければ ``False`` を返します。デフォルトで"
"は :meth:`User.has_module_perms() <django.contrib.auth.models.User."
"has_module_perms>` を使用します。 オーバーライドしても閲覧、追加、変更、削除"
"のアクセス権は制限しません。アクセス権の制限には :meth:`~ModelAdmin."
"has_view_permission`、:meth:`~ModelAdmin.has_add_permission`、:meth:"
"`~ModelAdmin.has_change_permission`、:meth:`~ModelAdmin."
"has_delete_permission` を使用してください。"

msgid ""
"The ``get_queryset`` method on a ``ModelAdmin`` returns a :class:`~django.db."
"models.query.QuerySet` of all model instances that can be edited by the "
"admin site. One use case for overriding this method is to show objects owned "
"by the logged-in user::"
msgstr ""
"``ModelAdmin`` の ``get_queryset`` メソッドは admin サイトで編集可能なモデル"
"インスタンスのすべての :class:`~django.db.models.query.QuerySet` を返します。"
"このメソッドをオーバーライドする場面の 1 つは、ログイン中のユーザーが所有する"
"オブジェクトを表示することです::"

msgid ""
"Sends a message to the user using the :mod:`django.contrib.messages` "
"backend.  See the :ref:`custom ModelAdmin example <custom-admin-action>`."
msgstr ""
":mod:`django.contrib.messages` バックエンドを使ってユーザーにメッセージを送り"
"ます。:ref:`カスタムの ModelAdmin の例 <custom-admin-action>` を参照してくだ"
"さい。"

msgid ""
"Keyword arguments allow you to change the message level, add extra CSS tags, "
"or fail silently if the ``contrib.messages`` framework is not installed. "
"These keyword arguments match those for :func:`django.contrib.messages."
"add_message`, see that function's documentation for more details. One "
"difference is that the level may be passed as a string label in addition to "
"integer/constant."
msgstr ""
"キーワード引数を使うと、メッセージレベルを変更したり、余分な CSS タグを追加し"
"たり、 ``contrib.message`` フレームワークがインストールされていない場合にサイ"
"レントエラーにしたりすることができます。これらのキーワード引数は :func:"
"`django.contrib.messages.add_message` の引数と同じです。詳しくはその関数のド"
"キュメントを参照してください。違いの一つは、レベルを整数/定数の他に文字列ラベ"
"ルとして渡せる点です。"

msgid ""
"Returns an instance of the paginator to use for this view. By default, "
"instantiates an instance of :attr:`paginator`."
msgstr ""
"このビューで使用する paginator のインスタンスを返します。デフォルトでは :"
"attr:`paginator` のインスタンスを返します。"

msgid ""
"Determines the :class:`~django.http.HttpResponse` for the :meth:`add_view` "
"stage."
msgstr ""
":meth:`add_view` ステージに対する :class:`~django.http.HttpResponse` を決定し"
"ます。"

msgid ""
"``response_add`` is called after the admin form is submitted and just after "
"the object and all the related instances have been created and saved. You "
"can override it to change the default behavior after the object has been "
"created."
msgstr ""
"``response_add`` は、admin フォームが送信され、オブジェクトとすべての関係イン"
"スタンスが作成および保存された直後に呼び出されます。オーバーライドすること"
"で、オブジェクトが作成された後のデフォルトの動作を変更できます。"

msgid ""
"Determines the :class:`~django.http.HttpResponse` for the :meth:"
"`change_view` stage."
msgstr ""
":meth:`change_view` ステージに対する :class:`~django.http.HttpResponse` を決"
"定します。"

msgid ""
"``response_change`` is called after the admin form is submitted and just "
"after the object and all the related instances have been saved. You can "
"override it to change the default behavior after the object has been changed."
msgstr ""
"``response_change`` は、admin フォームが送信され、オブジェクトとすべての関係"
"インスタンスが保存された直後に呼び出されます。オーバーライドすることで、オブ"
"ジェクトが変更された後のデフォルトの動作を変更できます。"

msgid ""
"Determines the :class:`~django.http.HttpResponse` for the :meth:"
"`delete_view` stage."
msgstr ""
":meth:`delete_view` ステージに対する :class:`~django.http.HttpResponse` を決"
"定します。"

msgid ""
"``response_delete`` is called after the object has been deleted. You can "
"override it to change the default behavior after the object has been deleted."
msgstr ""
"``response_delete`` は、オブジェクトが削除された後に呼び出されます。オーバー"
"ライドすることで、オブジェクトが削除された後のデフォルトの動作を変更できま"
"す。"

msgid "``obj_display`` is a string with the name of the deleted object."
msgstr "``obj_display`` は削除されたオブジェクトの名前を表す文字列です。"

msgid ""
"``obj_id`` is the serialized identifier used to retrieve the object to be "
"deleted."
msgstr ""
"``obj_id`` は削除するオブジェクトを取得するために使用するシリアライズされた識"
"別子です。"

msgid ""
"A hook for customizing the keyword arguments passed to the constructor of a "
"formset. For example, to pass ``request`` to formset forms::"
msgstr ""
"フォームセットのコンストラクタに渡されるキーワード引数をカスタマイズするため"
"のフックです。たとえばフォームセットのフォームに ``request`` を渡すには:"

msgid "You can also use it to set ``initial`` for formset forms."
msgstr ""
"また、フォームセットのフォームに ``initial`` を指定するためにも使用できます。"

msgid ""
"A hook for the initial data on admin change forms. By default, fields are "
"given initial values from ``GET`` parameters. For instance, ``?"
"name=initial_value`` will set the ``name`` field's initial value to be "
"``initial_value``."
msgstr ""
"admin の変更フォームの初期データに対するフックです。デフォルトでは、フィール"
"ドには ``GET`` パラメータで初期値が与えられます。たとえば、 ``?"
"name=initial_value`` は ``name`` フィールドの初期値を ``initial_value`` に"
"セットします。"

msgid ""
"This method should return a dictionary in the form ``{'fieldname': "
"'fieldval'}``::"
msgstr ""
"このメソッドは、``{'fieldname': 'fieldval'}`` という形式のディクショナリを返"
"します::"

msgid ""
"A hook for customizing the deletion process of the :meth:`delete_view` and "
"the \"delete selected\" :doc:`action <actions>`."
msgstr ""
":meth:`delete_view` と \"delete selected\" :doc:`アクション <actions>` の削除"
"処理をカスタマイズするフックです。"

msgid ""
"The ``objs`` argument is a homogeneous iterable of objects (a ``QuerySet`` "
"or a list of model instances) to be deleted, and ``request`` is the :class:"
"`~django.http.HttpRequest`."
msgstr ""
"引数 ``objs`` は削除するオブジェクト (``QuerySet`` またはモデルインスタンスの"
"リスト) の同型イテラブルで、 ``request`` は :class:`~django.http."
"HttpRequest` です。"

msgid ""
"This method must return a 4-tuple of ``(deleted_objects, model_count, "
"perms_needed, protected)``."
msgstr ""
"このメソッドは ``(deleted_objects, model_count, perms_needed, protected)`` の"
"4タプルを返さなければなりません。"

msgid ""
"``deleted_objects`` is a list of strings representing all the objects that "
"will be deleted. If there are any related objects to be deleted, the list is "
"nested and includes those related objects. The list is formatted in the "
"template using the :tfilter:`unordered_list` filter."
msgstr ""
"``deleted_objects`` は削除されるすべてのオブジェクトを表す文字列のリストで"
"す。削除されるオブジェクトにリレーション先オブジェクトがある場合、リストはネ"
"ストされ、それらのリレーション先オブジェクトも含まれます。リストはテンプレー"
"ト内で :tfilter:`unordered_list` フィルタを使ってフォーマットされます。"

msgid ""
"``model_count`` is a dictionary mapping each model's :attr:`~django.db."
"models.Options.verbose_name_plural` to the number of objects that will be "
"deleted."
msgstr ""
"``model_count`` は各モデルの :attr:`~django.db.models.Options."
"verbose_name_plural` と削除されるオブジェクトの数をマッピングした辞書です。"

msgid ""
"``perms_needed`` is a set of :attr:`~django.db.models.Options."
"verbose_name`\\s of the models that the user doesn't have permission to "
"delete."
msgstr ""
"``perms_need`` は :attr:`~django.db.models.Options.verbose_name` のセットで、"
"ユーザが削除する権限を持っていないモデルです。"

msgid ""
"``protected`` is a list of strings representing of all the protected related "
"objects that can't be deleted. The list is displayed in the template."
msgstr ""
"``protected`` は削除できない保護されたリレーション先オブジェクトを表す文字列"
"のリストです。このリストはテンプレートに表示されます。"

msgid "Other methods"
msgstr "その他のメソッド"

msgid "Django view for the model instance addition page. See note below."
msgstr ""
"モデルインスタンスの追加ページに対する Django のビューです。以下のノートを参"
"照してください。"

msgid "Django view for the model instance editing page. See note below."
msgstr ""
"モデルインスタンスの編集ページに対する Django のビューです。以下のノートを参"
"照してください。"

msgid ""
"Django view for the model instances change list/actions page. See note below."
msgstr ""
"モデルインスタンスの変更リスト（チェンジリスト）およびアクションページに対す"
"る Django のビューです。以下のノートを参照してください。"

msgid ""
"Django view for the model instance(s) deletion confirmation page. See note "
"below."
msgstr ""
"モデルインスタンスの削除の確認ページに対する Django のビューです。以下のノー"
"トを参照してください。"

msgid ""
"Django view for the page that shows the modification history for a given "
"model instance."
msgstr ""
"与えられたモデルのインスタンスに対する修正履歴を表示するページに対する "
"Django のビューです。"

msgid ""
"Unlike the hook-type ``ModelAdmin`` methods detailed in the previous "
"section, these five methods are in reality designed to be invoked as Django "
"views from the admin application URL dispatching handler to render the pages "
"that deal with model instances CRUD operations. As a result, completely "
"overriding these methods will significantly change the behavior of the admin "
"application."
msgstr ""
"前の節で詳しく説明したフック型の ``ModelAdmin`` メソッドとは異なり、これら 5 "
"つのメソッドは、実際には admin アプリケーションの URL ディスパッチハンドラか"
"ら Django ビューとして呼び出され、モデルインスタンスの CRUD 操作を扱うページ"
"をレンダリングするように設計されています。そのため、これらのメソッドを完全に"
"オーバーライドすると、 admin アプリケーションの動作が大きく変わってしまいま"
"す。"

msgid ""
"One common reason for overriding these methods is to augment the context "
"data that is provided to the template that renders the view. In the "
"following example, the change view is overridden so that the rendered "
"template is provided some extra mapping data that would not otherwise be "
"available::"
msgstr ""
"これらのメソッドをオーバーライドする一般的な理由の 1 つは、ビューをレンダリン"
"グするテンプレートに提供されるコンテキスト・データを補強することです。以下の"
"例では、change ビューがオーバーライドされ、レンダリングされるテンプレートに、"
"他の方法では利用できないマッピング・データが提供されます:"

msgid ""
"These views return :class:`~django.template.response.TemplateResponse` "
"instances which allow you to easily customize the response data before "
"rendering. For more details, see the :doc:`TemplateResponse documentation </"
"ref/template-response>`."
msgstr ""
"これらのビューは :class:`~django.template.response.TemplateResponse` インスタ"
"ンスを返し、レンダリング前のレスポンスデータを簡単にカスタマイズできます。詳"
"細は :doc:`TemplateResponse のドキュメント </ref/template-response>` を参照し"
"てください。"

msgid "``ModelAdmin`` asset definitions"
msgstr "``ModelAdmin`` アセットの定義"

msgid ""
"There are times where you would like add a bit of CSS and/or JavaScript to "
"the add/change views. This can be accomplished by using a ``Media`` inner "
"class on your ``ModelAdmin``::"
msgstr ""
"ビューを追加したり変更したりするために、CSS や JavaScript を追加したいことが"
"あるかもしれません。そういうときには ``ModelAdmin`` の ``Media`` インナークラ"
"スを使用します::"

msgid ""
"The :doc:`staticfiles app </ref/contrib/staticfiles>` prepends :setting:"
"`STATIC_URL` (or :setting:`MEDIA_URL` if :setting:`STATIC_URL` is ``None``) "
"to any asset paths. The same rules apply as :ref:`regular asset definitions "
"on forms <form-asset-paths>`."
msgstr ""
":doc:`staticfiles アプリ </ref/contrib/staticfiles>` は、すべてのアセットのパ"
"スの前に :setting:`STATIC_URL` (:setting:`STATIC_URL` が ``None`` の場合は :"
"setting:`MEDIA_URL`) を付与します。 :ref:`フォーム上の通常のアセット定義 "
"<form-asset-paths>` と同じルールが適用されます。"

msgid "jQuery"
msgstr "jQuery"

msgid "Django admin JavaScript makes use of the `jQuery`_ library."
msgstr "Django admin の JavaScript は `jQuery`_ ライブラリを使用します。"

msgid ""
"To avoid conflicts with user-supplied scripts or libraries, Django's jQuery "
"(version 3.7.1) is namespaced as ``django.jQuery``. If you want to use "
"jQuery in your own admin JavaScript without including a second copy, you can "
"use the ``django.jQuery`` object on changelist and add/edit views. Also, "
"your own admin forms or widgets depending on ``django.jQuery`` must specify "
"``js=['admin/js/jquery.init.js', …]`` when :ref:`declaring form media assets "
"<assets-as-a-static-definition>`."
msgstr ""
"ユーザが提供するスクリプトやライブラリとの衝突を避けるため、 Django の "
"jQuery (version 3.7.1) は ``django.jQuery`` という名前空間になっています。自"
"分の admin JavaScript で jQuery を使いたい場合、別のコピーを入れなくても、 "
"``django.jQuery`` オブジェクトをチェンジリストやadd/edit ビューで使用できま"
"す。また、 ``django.jQuery`` に依存する独自の管理フォームやウィジェットは、 :"
"ref:`フォーム メディア アセットの宣言 <assets-as-a-static-definition>` の際"
"に ``js=['admin/js/jquery.init.js', …]`` を指定しなければなりません。"

msgid "jQuery was upgraded from 3.6.0 to 3.6.4."
msgstr "jQuery が 3.6.0 から 3.6.4 にアップグレードされました。"

msgid "jQuery was upgraded from 3.6.4 to 3.7.1."
msgstr "jQueryが 3.6.4 から 3.7.1 にアップグレードされました。"

msgid ""
"The :class:`ModelAdmin` class requires jQuery by default, so there is no "
"need to add jQuery to your ``ModelAdmin``’s list of media resources unless "
"you have a specific need. For example, if you require the jQuery library to "
"be in the global namespace (for example when using third-party jQuery "
"plugins) or if you need a newer version of jQuery, you will have to include "
"your own copy."
msgstr ""
":class:`ModelAdmin` クラスはデフォルトで jQuery を要件とするので、特別なニー"
"ズがない限り jQuery をメディアリソースの ``ModelAdmin`` のリストに追加する必"
"要はありません。たとえば、jQuery ライブラリがグローバルな名前空間を持つ必要が"
"ある場合 (たとえば、サードパーティの jQuery プラグインを使用する場合など)、も"
"しくは jQuery の新しいバージョンを使いたい場合には、自分自身でコピーを用意す"
"る必要があります。"

msgid ""
"Django provides both uncompressed and 'minified' versions of jQuery, as "
"``jquery.js`` and ``jquery.min.js`` respectively."
msgstr ""
"Django には、非圧縮と 'minified' のバージョンのjQuery があり、それぞれ "
"``jquery.js`` と ``jquery.min.js`` となっています。"

msgid ""
":class:`ModelAdmin` and :class:`InlineModelAdmin` have a ``media`` property "
"that returns a list of ``Media`` objects which store paths to the JavaScript "
"files for the forms and/or formsets. If :setting:`DEBUG` is ``True`` it will "
"return the uncompressed versions of the various JavaScript files, including "
"``jquery.js``; if not, it will return the 'minified' versions."
msgstr ""
":class:`ModelAdmin` と :class:`InlineModelAdmin` には、フォームやフォームセッ"
"トのJavaScriptファイルへのパスを格納する ``Media`` オブジェクトのリストを返"
"す ``media`` プロパティがあります。 :setting:`DEBUG` が ``True`` の場合、 "
"``jquery.js`` を含む様々な JavaScript ファイルの圧縮されていないバージョンを"
"返します。そうでない場合は、 \"minify\" されたバージョンを返します。"

msgid "Adding custom validation to the admin"
msgstr "カスタムのバリデーションを admin に追加する"

msgid ""
"You can also add custom validation of data in the admin. The automatic admin "
"interface reuses :mod:`django.forms`, and the ``ModelAdmin`` class gives you "
"the ability to define your own form::"
msgstr ""
"また、管理画面でデータのカスタムバリデーションを追加することもできます。自動"
"管理インターフェイスは :mod:`django.forms` を再利用し、 ``ModelAdmin`` クラス"
"は独自のフォームを定義する機能を提供します:"

msgid ""
"``MyArticleAdminForm`` can be defined anywhere as long as you import where "
"needed. Now within your form you can add your own custom validation for any "
"field::"
msgstr ""
"``MyArticleAdminForm`` は必要な場所をインポートすればどこでも定義できます。こ"
"れでフォームの中で任意のフィールドに対して独自のカスタムバリデーションを追加"
"できます:"

msgid ""
"It is important you use a ``ModelForm`` here otherwise things can break. See "
"the :doc:`forms </ref/forms/index>` documentation on :doc:`custom validation "
"</ref/forms/validation>` and, more specifically, the :ref:`model form "
"validation notes <overriding-modelform-clean-method>` for more information."
msgstr ""
"ここで ``ModelForm`` を使用することは重要です。そうしないと問題が発生する可能"
"性があります。 :doc:`カスタムバリデーション </ref/forms/validation>` に関す"
"る :doc:`フォーム </ref/forms/index>` のドキュメント、そしてより具体的には :"
"ref:`モデルフォームのバリデーションに関する注意事項 <overriding-modelform-"
"clean-method>` を参照してください。"

msgid "``InlineModelAdmin`` objects"
msgstr "``InlineModelAdmin`` オブジェクト"

msgid ""
"The admin interface has the ability to edit models on the same page as a "
"parent model. These are called inlines. Suppose you have these two models::"
msgstr ""
"admin インターフェースには、親モデルと同じページでモデルを編集する機能があり"
"ます。この機能をインラインと呼びます。以下の 2 つのモデルがあるとしましょう::"

msgid ""
"You can edit the books authored by an author on the author page. You add "
"inlines to a model by specifying them in a ``ModelAdmin.inlines``::"
msgstr ""
"author のページで、author が書いた book を編集できます。``ModelAdmin."
"inlines`` 内でモデルに対するインラインを追加します::"

msgid "Django provides two subclasses of ``InlineModelAdmin`` and they are:"
msgstr ""
"Django には、以下の通り ``InlineModelAdmin`` のサブクラスが 2 つあります:"

msgid ":class:`~django.contrib.admin.TabularInline`"
msgstr ":class:`~django.contrib.admin.TabularInline`"

msgid ":class:`~django.contrib.admin.StackedInline`"
msgstr ":class:`~django.contrib.admin.StackedInline`"

msgid ""
"The difference between these two is merely the template used to render them."
msgstr ""
"この 2 つの違いは、単にレンダリングするために使われるテンプレートの違いです。"

msgid "``InlineModelAdmin`` options"
msgstr "``InlineModelAdmin`` のオプション"

msgid ""
"``InlineModelAdmin`` shares many of the same features as ``ModelAdmin``, and "
"adds some of its own (the shared features are actually defined in the "
"``BaseModelAdmin`` superclass). The shared features are:"
msgstr ""
"``InlineModelAdmin`` は ``ModelAdmin`` と多くの機能を共有しており、さらにいく"
"つかの独自の機能を有しています (共有の機能は実際には ``BaseModelAdmin`` 基底"
"クラスで定義されています)。共有の機能は下記です:"

msgid ":attr:`~InlineModelAdmin.form`"
msgstr ":attr:`~InlineModelAdmin.form`"

msgid ":attr:`~ModelAdmin.fieldsets`"
msgstr ":attr:`~ModelAdmin.fieldsets`"

msgid ":attr:`~ModelAdmin.fields`"
msgstr ":attr:`~ModelAdmin.fields`"

msgid ":attr:`~ModelAdmin.formfield_overrides`"
msgstr ":attr:`~ModelAdmin.formfield_overrides`"

msgid ":attr:`~ModelAdmin.exclude`"
msgstr ":attr:`~ModelAdmin.exclude`"

msgid ":attr:`~ModelAdmin.filter_horizontal`"
msgstr ":attr:`~ModelAdmin.filter_horizontal`"

msgid ":attr:`~ModelAdmin.filter_vertical`"
msgstr ":attr:`~ModelAdmin.filter_vertical`"

msgid ":attr:`~ModelAdmin.ordering`"
msgstr ":attr:`~ModelAdmin.ordering`"

msgid ":attr:`~ModelAdmin.prepopulated_fields`"
msgstr ":attr:`~ModelAdmin.prepopulated_fields`"

msgid ":meth:`~ModelAdmin.get_fieldsets`"
msgstr ":meth:`~ModelAdmin.get_fieldsets`"

msgid ":meth:`~ModelAdmin.get_queryset`"
msgstr ":meth:`~ModelAdmin.get_queryset`"

msgid ":attr:`~ModelAdmin.radio_fields`"
msgstr ":attr:`~ModelAdmin.radio_fields`"

msgid ":attr:`~ModelAdmin.readonly_fields`"
msgstr ":attr:`~ModelAdmin.readonly_fields`"

msgid ":attr:`~InlineModelAdmin.raw_id_fields`"
msgstr ":attr:`~InlineModelAdmin.raw_id_fields`"

msgid ":meth:`~ModelAdmin.formfield_for_choice_field`"
msgstr ":meth:`~ModelAdmin.formfield_for_choice_field`"

msgid ":meth:`~ModelAdmin.formfield_for_foreignkey`"
msgstr ":meth:`~ModelAdmin.formfield_for_foreignkey`"

msgid ":meth:`~ModelAdmin.formfield_for_manytomany`"
msgstr ":meth:`~ModelAdmin.formfield_for_manytomany`"

msgid ":meth:`~ModelAdmin.has_module_permission`"
msgstr ":meth:`~ModelAdmin.has_module_permission`"

msgid "The ``InlineModelAdmin`` class adds or customizes:"
msgstr "``InlineModelAdmin`` クラスは、以下を追加またはカスタマイズしています:"

msgid "The model which the inline is using. This is required."
msgstr "インラインが使用するモデルです。これは必須です。"

msgid ""
"The name of the foreign key on the model. In most cases this will be dealt "
"with automatically, but ``fk_name`` must be specified explicitly if there "
"are more than one foreign key to the same parent model."
msgstr ""
"モデルの外部キーの名前です。多くの場合、これは自動的に処理されますが、同じ親"
"モデルに対して複数の外部キーがある場合には ``fk_name`` を明示的に指定する必要"
"があります。"

msgid ""
"This defaults to :class:`~django.forms.models.BaseInlineFormSet`. Using your "
"own formset can give you many possibilities of customization. Inlines are "
"built around :ref:`model formsets <model-formsets>`."
msgstr ""
"これはデフォルトでは :class:`~django.forms.models.BaseInlineFormSet` です。自"
"分自身のフォームセットを使用すると、カスタマイズの幅が広がります。インライン"
"は :ref:`モデル フォームセット <model-formsets>` で構築されます。"

msgid ""
"The value for ``form`` defaults to ``ModelForm``. This is what is passed "
"through to :func:`~django.forms.models.inlineformset_factory` when creating "
"the formset for this inline."
msgstr ""
"``form`` に対する値で、デフォルトは ``ModelForm`` です。これは、このインライ"
"ンに対してフォームセットが生成される際に :func:`~django.forms.models."
"inlineformset_factory` に渡されるものです。"

msgid ""
"When writing custom validation for ``InlineModelAdmin`` forms, be cautious "
"of writing validation that relies on features of the parent model. If the "
"parent model fails to validate, it may be left in an inconsistent state as "
"described in the warning in :ref:`validation-on-modelform`."
msgstr ""
"``InlineModelAdmin`` フォーム用のカスタムバリデーションを書く際には、親モデル"
"の機能に依存したバリデーションを書くことに注意してください。親モデルがバリ"
"デーションに失敗した場合、 :ref:`validation-on-modelform` の警告に記述されて"
"いるように、一貫性のない状態で放置される可能性があります。"

msgid ""
"A list or tuple containing extra CSS classes to apply to the fieldset that "
"is rendered for the inlines. Defaults to ``None``. As with classes "
"configured in :attr:`~ModelAdmin.fieldsets`, inlines with a ``collapse`` "
"class will be initially collapsed and their header will have a small "
"\"show\" link."
msgstr ""
"インラインに対してレンダリングするフォームセットに適用する、追加的な CSS クラ"
"スのリストないしタプルです。デフォルトは ``None`` です。:attr:`~ModelAdmin."
"fieldsets` で設定したクラスと同様に、``collapse`` クラスを伴うインラインは最"
"初は折りたたまれており小さな \"show\" リンクを持ちます。"

msgid ""
"This controls the number of extra forms the formset will display in addition "
"to the initial forms. Defaults to 3. See the :doc:`formsets documentation </"
"topics/forms/formsets>` for more information."
msgstr ""
"フォームセットが初期のフォームに加えて表示する追加的なフォームの数をコント"
"ロールします。デフォルトは 3 です。詳しくは :doc:`フォームセットのドキュメン"
"ト </topics/forms/formsets>` を参照してください。"

msgid ""
"For users with JavaScript-enabled browsers, an \"Add another\" link is "
"provided to enable any number of additional inlines to be added in addition "
"to those provided as a result of the ``extra`` argument."
msgstr ""
"JavaScript が有効なブラウザを使っているユーザーに対しては、\"1 つ追加\" のリ"
"ンクが提供され、``extra`` 引数の結果提供されるインラインに加えていくつでもイ"
"ンラインを追加できます。"

msgid ""
"The dynamic link will not appear if the number of currently displayed forms "
"exceeds ``max_num``, or if the user does not have JavaScript enabled."
msgstr ""
"現在表示されているフォームの数が ``max_num`` を超えている場合、またはユーザー"
"が JavaScript を有効にしていない場合、ダイナミックリンクは表示されません。"

msgid ""
":meth:`InlineModelAdmin.get_extra` also allows you to customize the number "
"of extra forms."
msgstr ""
":meth:`InlineModelAdmin.get_extra` でも追加フォームの数をカスタマイズできま"
"す。"

msgid ""
"This controls the maximum number of forms to show in the inline. This "
"doesn't directly correlate to the number of objects, but can if the value is "
"small enough. See :ref:`model-formsets-max-num` for more information."
msgstr ""
"インラインに表示するフォームの最大数をコントロールします。オブジェクトの数と"
"直接関係はありませんが、値が小さい場合には関係する可能性があります。詳しく"
"は :ref:`model-formsets-max-num` を参照してください。"

msgid ""
":meth:`InlineModelAdmin.get_max_num` also allows you to customize the "
"maximum number of extra forms."
msgstr ""
":meth:`InlineModelAdmin.get_max_num` でも追加フォームの最大数をカスタマイズで"
"きます。"

msgid ""
"This controls the minimum number of forms to show in the inline. See :func:"
"`~django.forms.models.modelformset_factory` for more information."
msgstr ""
"インラインに表示するフォームの最小数をコントロールします。詳しくは :func:"
"`~django.forms.models.modelformset_factory` を参照してください。"

msgid ""
":meth:`InlineModelAdmin.get_min_num` also allows you to customize the "
"minimum number of displayed forms."
msgstr ""
":meth:`InlineModelAdmin.get_min_num` でも追加フォームの最小数をカスタマイズで"
"きます。"

msgid "The template used to render the inline on the page."
msgstr "ページ上でインラインをレンダリングするのに使われるテンプレートです。"

msgid ""
"An override to the :attr:`~django.db.models.Options.verbose_name` from the "
"model's inner ``Meta`` class."
msgstr ""
"モデル内部の ``Meta`` クラスの :attr:`~django.db.models.Options."
"verbose_name` のオーバーライドです。"

msgid ""
"An override to the :attr:`~django.db.models.Options.verbose_name_plural` "
"from the model's inner ``Meta`` class. If this isn't given and the :attr:`."
"InlineModelAdmin.verbose_name` is defined, Django will use :attr:`."
"InlineModelAdmin.verbose_name` + ``'s'``."
msgstr ""
"モデル内部の ``Meta`` クラスの :attr:`~django.db.models.Options."
"verbose_name_plural` をオーバーライドします。これが与えられず、 :attr:`."
"InlineModelAdmin.verbose_name` が定義されている場合、 Django は :attr:`."
"InlineModelAdmin.verbose_name` + ``'s'`` を使用します。"

msgid ""
"Specifies whether or not inline objects can be deleted in the inline. "
"Defaults to ``True``."
msgstr ""
"インライン内でインラインオブジェクトを削除可能にするかどうかを指定します。デ"
"フォルトは ``True`` です。"

msgid ""
"Specifies whether or not inline objects that can be changed in the admin "
"have a link to the change form. Defaults to ``False``."
msgstr ""
"admin 内で変更可能なインラインオブジェクトをが変更フォームへのリンクを持つか"
"どうかを指定します。デフォルトは ``False`` です。"

msgid ""
"Returns a :class:`~django.forms.models.BaseInlineFormSet` class for use in "
"admin add/change views. ``obj`` is the parent object being edited or "
"``None`` when adding a new parent. See the example for :class:`ModelAdmin."
"get_formsets_with_inlines`."
msgstr ""
"admin の追加/変更ビューで使用する :class:`~django.forms.models."
"BaseInlineFormSet` クラスを返します。 ``obj`` は編集対象の親オブジェクト、ま"
"たは新しい親オブジェクトを追加する場合は ``None`` です。 :class:`ModelAdmin."
"get_formsets_with_inlines` の例を参照してください。"

msgid ""
"Returns the number of extra inline forms to use. By default, returns the :"
"attr:`InlineModelAdmin.extra` attribute."
msgstr ""
"使用する追加インラインフォームの数を返します。デフォルトでは、:attr:"
"`InlineModelAdmin.extra` 属性を返します。"

msgid ""
"Override this method to programmatically determine the number of extra "
"inline forms. For example, this may be based on the model instance (passed "
"as the keyword argument ``obj``)::"
msgstr ""
"プログラムに従って追加インラインフォームの数を決めたい場合、このメソッドを"
"オーバーライドしてください。たとえば、モデルインスタンス (キーワード引数の "
"``obj`` で渡されています) に基づいて数を決められます::"

msgid ""
"Returns the maximum number of extra inline forms to use. By default, returns "
"the :attr:`InlineModelAdmin.max_num` attribute."
msgstr ""
"使用する追加インラインフォームの最大数を返します。デフォルトでは、:attr:"
"`InlineModelAdmin.max_num` 属性を返します。"

msgid ""
"Override this method to programmatically determine the maximum number of "
"inline forms. For example, this may be based on the model instance (passed "
"as the keyword argument ``obj``)::"
msgstr ""
"プログラムに従ってインラインフォームの最大数を決めたい場合、このメソッドを"
"オーバーライドしてください。たとえば、モデルインスタンス (キーワード引数の "
"``obj`` で渡されています) に基づいて最大数を決められます::"

msgid ""
"Returns the minimum number of inline forms to use. By default, returns the :"
"attr:`InlineModelAdmin.min_num` attribute."
msgstr ""
"使用する追加インラインフォームの最小数を返します。デフォルトでは、:attr:"
"`InlineModelAdmin.min_num` 属性を返します。"

msgid ""
"Override this method to programmatically determine the minimum number of "
"inline forms. For example, this may be based on the model instance (passed "
"as the keyword argument ``obj``)."
msgstr ""
"プログラムに従ってインラインフォームの最小数を決めたい場合、このメソッドを"
"オーバーライドしてください。たとえば、モデルインスタンス (キーワード引数の "
"``obj`` で渡されています) に基づいて最小数を決められます::"

msgid ""
"Should return ``True`` if adding an inline object is permitted, ``False`` "
"otherwise. ``obj`` is the parent object being edited or ``None`` when adding "
"a new parent."
msgstr ""
"インラインオブジェクトの追加が許可されている場合 ``True`` を、そうでなければ "
"``False`` を返します。``obj`` は編集される親オブジェクトか、新規追加の場合に"
"は ``None`` となります。"

msgid ""
"Should return ``True`` if editing an inline object is permitted, ``False`` "
"otherwise. ``obj`` is the parent object being edited."
msgstr ""
"インラインオブジェクトの編集が許可されている場合 ``True`` を、そうでなければ "
"``False`` を返します。``obj`` は編集される親オブジェクトです。"

msgid ""
"Should return ``True`` if deleting an inline object is permitted, ``False`` "
"otherwise. ``obj`` is the parent object being edited."
msgstr ""
"インラインオブジェクトの削除が許可されている場合 ``True`` を、そうでなければ "
"``False`` を返します。``obj`` は編集される親オブジェクトです。"

msgid ""
"The ``obj`` argument passed to ``InlineModelAdmin`` methods is the parent "
"object being edited or ``None`` when adding a new parent."
msgstr ""
"``InlineModelAdmin`` メソッドに渡される ``obj`` 引数は編集対象の親オブジェク"
"ト、または新しい親オブジェクトを追加する場合は ``None`` です。"

msgid ""
"Working with a model with two or more foreign keys to the same parent model"
msgstr "同じ親モデルへの複数の外部キーを持つモデルを扱う"

msgid ""
"It is sometimes possible to have more than one foreign key to the same "
"model. Take this model for instance::"
msgstr ""
"同じモデルに対する複数の外部キーを持つこともあり得ます。例として以下のモデル"
"を見てみましょう::"

msgid ""
"If you wanted to display an inline on the ``Person`` admin add/change pages "
"you need to explicitly define the foreign key since it is unable to do so "
"automatically::"
msgstr ""
"``Person`` の admin の追加や変更ページでインラインを表示したい場合は、自動的"
"に判別することができないため、外部キーを明示的に定義する必要があります::"

msgid "Working with many-to-many models"
msgstr "多対多のモデルを扱う"

msgid ""
"By default, admin widgets for many-to-many relations will be displayed on "
"whichever model contains the actual reference to the :class:`~django.db."
"models.ManyToManyField`. Depending on your ``ModelAdmin`` definition, each "
"many-to-many field in your model will be represented by a standard HTML "
"``<select multiple>``, a horizontal or vertical filter, or a "
"``raw_id_fields`` widget. However, it is also possible to replace these "
"widgets with inlines."
msgstr ""
"デフォルトでは、多対多のリレーションに対する管理ウィジェットは、実際に :"
"class:`~django.db.models.ManyToManyField` への参照を含むモデルに表示されま"
"す。 ``ModelAdmin`` の定義に応じて、モデル内の各多対多フィールドは標準のHTML "
"``<select multiple>``, 水平または垂直フィルタ、または ``raw_id_fields`` ウィ"
"ジェットによって表されます。しかし、これらのウィジェットをインラインで置き換"
"えることもできます。"

msgid "Suppose we have the following models::"
msgstr "次のようなモデルがあるとします:"

msgid ""
"If you want to display many-to-many relations using an inline, you can do so "
"by defining an ``InlineModelAdmin`` object for the relationship::"
msgstr ""
"インラインを使用して多対多のリレーションを表示したい場合、リレーションシップ"
"に ``InlineModelAdmin`` オブジェクトを定義することで表示できます:"

msgid "There are two features worth noting in this example."
msgstr "この例で注目すべき点は2つです。"

msgid ""
"Firstly - the ``MembershipInline`` class references ``Group.members."
"through``. The ``through`` attribute is a reference to the model that "
"manages the many-to-many relation. This model is automatically created by "
"Django when you define a many-to-many field."
msgstr ""
"まず、 ``MembershipInline`` クラスは ``Group.members.through`` を参照していま"
"す。 ``through`` 属性は多対多のリレーションを管理するモデルへの参照です。この"
"モデルは、多対多のフィールドを定義したときに Django が自動的に作成します。"

msgid ""
"Secondly, the ``GroupAdmin`` must manually exclude the ``members`` field. "
"Django displays an admin widget for a many-to-many field on the model that "
"defines the relation (in this case, ``Group``). If you want to use an inline "
"model to represent the many-to-many relationship, you must tell Django's "
"admin to *not* display this widget - otherwise you will end up with two "
"widgets on your admin page for managing the relation."
msgstr ""
"次に、 ``GroupAdmin`` は手動で ``members`` フィールドを除外する必要がありま"
"す。Django は多対多のフィールドの管理ウィジェットを、リレーションを定義するモ"
"デル (この場合は ``Group``) 上に表示します。インラインモデルを使って多対多の"
"リレーションを表現したい場合は、 Django の admin に、このウィジェットを *表示"
"しない* ように指示しなければなりません。"

msgid ""
"Note that when using this technique the :data:`~django.db.models.signals."
"m2m_changed` signals aren't triggered. This is because as far as the admin "
"is concerned, ``through`` is just a model with two foreign key fields rather "
"than a many-to-many relation."
msgstr ""
"このテクニックを使う場合、 :data:`~django.db.models.signals.m2m_changed` シグ"
"ナルはトリガーされないことに注意してください。これは、admin にとっては "
"``through`` は多対多のリレーションではなく、2つの外部キーフィールドを持つモデ"
"ルに過ぎないからです。"

msgid ""
"In all other respects, the ``InlineModelAdmin`` is exactly the same as any "
"other. You can customize the appearance using any of the normal "
"``ModelAdmin`` properties."
msgstr ""
"その他の点では ``InlineModelAdmin`` は他のものと全く同じです。通常の "
"``ModelAdmin`` プロパティを使用して外観をカスタマイズできます。"

msgid "Working with many-to-many intermediary models"
msgstr "多対多の中間モデルとともに使う"

msgid ""
"When you specify an intermediary model using the ``through`` argument to a :"
"class:`~django.db.models.ManyToManyField`, the admin will not display a "
"widget by default. This is because each instance of that intermediary model "
"requires more information than could be displayed in a single widget, and "
"the layout required for multiple widgets will vary depending on the "
"intermediate model."
msgstr ""
":class:`~django.db.models.ManyToManyField` の ``through`` 引数で中間モデルを"
"指定した場合、管理画面はデフォルトではウィジェットを表示しません。これは、そ"
"の中間モデルの各インスタンスは、単一のウィジェットで表示できる以上の情報を必"
"要とし、複数のウィジェットに必要なレイアウトは中間モデルによって異なるからで"
"す。"

msgid ""
"However, we still want to be able to edit that information inline. "
"Fortunately, we can do this with inline admin models. Suppose we have the "
"following models::"
msgstr ""
"しかし、インラインで情報を編集できるようにしたいと思うでしょう。幸いなこと"
"に、インライン admin モデルでこれを実現できます。次のようなモデルがあるとしま"
"す:"

msgid ""
"The first step in displaying this intermediate model in the admin is to "
"define an inline class for the ``Membership`` model::"
msgstr ""
"この中間モデルを管理画面に表示するための最初のステップは ``Membership`` モデ"
"ルのインラインクラスを定義することです:"

msgid ""
"This example uses the default ``InlineModelAdmin`` values for the "
"``Membership`` model, and limits the extra add forms to one. This could be "
"customized using any of the options available to ``InlineModelAdmin`` "
"classes."
msgstr ""
"この例では ``Membership`` モデルにデフォルトの ``InlineModelAdmin`` の値を使"
"用し、追加の追加フォームを 1 つに制限しています。これは ``InlineModelAdmin`` "
"クラスで利用可能なオプションを使ってカスタマイズできます。"

msgid "Now create admin views for the ``Person`` and ``Group`` models::"
msgstr "次に ``Person`` と ``Group`` モデルの管理ビューを作成します:"

msgid ""
"Finally, register your ``Person`` and ``Group`` models with the admin site::"
msgstr "最後に、 ``Person`` と ``Group`` のモデルを管理サイトに登録します:"

msgid ""
"Now your admin site is set up to edit ``Membership`` objects inline from "
"either the ``Person`` or the ``Group`` detail pages."
msgstr ""
"これであなたの管理サイトは ``Person`` または ``Group`` の詳細ページから "
"``Membership`` オブジェクトをインラインで編集できるように設定されました。"

msgid "Using generic relations as an inline"
msgstr "ジェネリックリレーションをインラインとして使う"

msgid ""
"It is possible to use an inline with generically related objects. Let's say "
"you have the following models::"
msgstr ""
"ジェネリックリレーションを定義されたオブジェクトでインラインを使用することも"
"できます。以下のようなモデルがあるとします:"

msgid ""
"If you want to allow editing and creating an ``Image`` instance on the "
"``Product``, add/change views you can use :class:`~django.contrib."
"contenttypes.admin.GenericTabularInline` or :class:`~django.contrib."
"contenttypes.admin.GenericStackedInline` (both subclasses of :class:`~django."
"contrib.contenttypes.admin.GenericInlineModelAdmin`) provided by :mod:"
"`~django.contrib.contenttypes.admin`. They implement tabular and stacked "
"visual layouts for the forms representing the inline objects, respectively, "
"just like their non-generic counterparts. They behave just like any other "
"inline. In your ``admin.py`` for this example app::"
msgstr ""
"``Product`` の追加/変更ビューで ``Image`` インスタンスの編集や作成を可能にし"
"たい場合、 :mod:`~django.contrib.contenttypes.admin` によって提供される :"
"class:`~django.contrib.contenttypes.admin.GenericTabularInline` や :class:"
"`~django.contrib.contenttypes.admin.GenericStackedInline` （どちらも :class:"
"`~django.contrib.contenttypes.admin.GenericInlineModelAdmin` のサブクラス）を"
"使用できます。これらはそれぞれ、インラインオブジェクトを表すフォームのための "
"tabular 形式と stack 形式のビジュアルレイアウトを実装しており、ジェネリックで"
"ないものと同様です。これらは他のインラインと全く同じように動作します。この例"
"のアプリのための ``admin.py`` では次のようにします:"

msgid ""
"See the :doc:`contenttypes documentation </ref/contrib/contenttypes>` for "
"more specific information."
msgstr ""
"詳しくは :doc:`contenttypes のドキュメント </ref/contrib/contenttypes>` を参"
"照してください。"

msgid "Overriding admin templates"
msgstr "admin テンプレートをオーバーライドする"

msgid ""
"You can override many of the templates which the admin module uses to "
"generate the various pages of an admin site. You can even override a few of "
"these templates for a specific app, or a specific model."
msgstr ""
"admin モジュールが admin サイトの様々なページを生成するために使用するテンプ"
"レートの多くはオーバーライドできます。特定のアプリや特定のモデルのためにこれ"
"らのテンプレートの一部をオーバーライドすることもできます。"

msgid "Set up your projects admin template directories"
msgstr "プロジェクトの admin テンプレートディレクトリを設定する"

msgid ""
"The admin template files are located in the :source:`django/contrib/admin/"
"templates/admin` directory."
msgstr ""
"admin テンプレートファイルは :source:`django/contrib/admin/templates/admin` "
"ディレクトリにあります。"

msgid ""
"In order to override one or more of them, first create an ``admin`` "
"directory in your project's ``templates`` directory. This can be any of the "
"directories you specified in the :setting:`DIRS <TEMPLATES-DIRS>` option of "
"the ``DjangoTemplates`` backend in the :setting:`TEMPLATES` setting. If you "
"have customized the ``'loaders'`` option, be sure ``'django.template.loaders."
"filesystem.Loader'`` appears before ``'django.template.loaders."
"app_directories.Loader'`` so that your custom templates will be found by the "
"template loading system before those that are included with :mod:`django."
"contrib.admin`."
msgstr ""
"そのうちの一つ以上を上書きするには、まずプロジェクトの ``templates`` ディレク"
"トリに ``admin`` ディレクトリを作成してください。これは ``DjangoTemplates`` "
"バックエンドの :setting:`DIRS <TEMPLATES-DIRS>` オプションの :setting:"
"`TEMPLATES` 設定で指定したディレクトリのどれでもかまいません。 ``'loaders'`` "
"オプションをカスタマイズしている場合は、 ``'django.template.loaders."
"app_directories.Loader'`` の前に ``'django.template.loaders.filesystem."
"Loader'`` が表示されていることを確認してください。そうすれば、 :mod:`django."
"contrib.admin` でインクルードされているテンプレートよりも先に、カスタムテンプ"
"レートがテンプレート読み込みシステムによって検出されます。"

msgid ""
"Within this ``admin`` directory, create sub-directories named after your "
"app. Within these app subdirectories create sub-directories named after your "
"models. Note, that the admin app will lowercase the model name when looking "
"for the directory, so make sure you name the directory in all lowercase if "
"you are going to run your app on a case-sensitive filesystem."
msgstr ""
"この ``admin`` ディレクトリの中に、アプリに対応した名前のサブディレクトリを作"
"成します。これらのアプリのサブディレクトリの中に、モデルに対応した名前のサブ"
"ディレクトリを作成します。 大文字と小文字を区別するファイルシステム上でアプリ"
"を実行する場合は、ディレクトリ名をすべて小文字にしてください、adminアプリは"
"ディレクトリを探すときにモデル名を小文字にします。"

msgid ""
"To override an admin template for a specific app, copy and edit the template "
"from the :source:`django/contrib/admin/templates/admin` directory, and save "
"it to one of the directories you just created."
msgstr ""
"特定のアプリの管理テンプレートを上書きするには、 :source:`django/contrib/"
"admin/templates/admin` ディレクトリからテンプレートをコピーして編集し、先ほど"
"作成したディレクトリのいずれかに保存します。"

msgid ""
"For example, if we wanted to add a tool to the change list view for all the "
"models in an app named ``my_app``, we would copy ``contrib/admin/templates/"
"admin/change_list.html`` to the ``templates/admin/my_app/`` directory of our "
"project, and make any necessary changes."
msgstr ""
"たとえば、``my_app`` という名前のアプリのすべてのモデルのチェンジリストビュー"
"にツールを追加したい場合、``contrib/admin/templates/admin/change_list.html`` "
"をプロジェクトの ``templates/admin/my_app/`` ディレクトリにコピーし、必要な変"
"更を加えます。"

msgid ""
"If we wanted to add a tool to the change list view for only a specific model "
"named 'Page', we would copy that same file to the ``templates/admin/my_app/"
"page`` directory of our project."
msgstr ""
"もし、 \"Page\" という特定のモデルだけのチェンジリストビューにツールを追加し"
"たい場合、同じファイルをプロジェクトの ``templates/admin/my_app/page`` ディレ"
"クトリにコピーします。"

msgid "Overriding vs. replacing an admin template"
msgstr "admin テンプレートをオーバーライドするか、それとも置き換えるか"

msgid ""
"Because of the modular design of the admin templates, it is usually neither "
"necessary nor advisable to replace an entire template. It is almost always "
"better to override only the section of the template which you need to change."
msgstr ""
"管理画面のテンプレートはモジュール化されているため、通常はテンプレート全体を"
"置き換える必要はありません。ほとんどの場合、変更する必要があるテンプレートの"
"セクションだけをオーバーライドする方がよいでしょう。"

msgid ""
"To continue the example above, we want to add a new link next to the "
"``History`` tool for the ``Page`` model. After looking at ``change_form."
"html`` we determine that we only need to override the ``object-tools-items`` "
"block. Therefore here is our new ``change_form.html`` :"
msgstr ""
"上記の例の続きとして、``Page`` モデルの ``History`` ツールの隣に新しいリンク"
"を追加したいとします。 ``change_form.html`` を見ると、 ``object-tools-"
"items`` ブロックをオーバーライドするだけでよいことがわかります。そこで、以下"
"に新しい ``change_form.html`` の例を示します:"

msgid ""
"And that's it! If we placed this file in the ``templates/admin/my_app`` "
"directory, our link would appear on the change form for all models within "
"my_app."
msgstr ""
"これで完了です！このファイルを ``templates/admin/my_app`` ディレクトリに置く"
"と、my_app 内のすべてのモデルの変更フォームにリンクが表示されます。"

msgid "Templates which may be overridden per app or model"
msgstr "アプリやモデルごとにオーバーライド可能なテンプレート"

msgid ""
"Not every template in ``contrib/admin/templates/admin`` may be overridden "
"per app or per model. The following can:"
msgstr ""
"``contrib/admin/templates/admin`` にある全てのテンプレートがアプリやモデルご"
"とにオーバーライドできるわけではありません。以下のものは可能です:"

msgid "``actions.html``"
msgstr "``actions.html``"

msgid "``app_index.html``"
msgstr "``app_index.html``"

msgid "``change_form.html``"
msgstr "``change_form.html``"

msgid "``change_form_object_tools.html``"
msgstr "``change_form_object_tools.html``"

msgid "``change_list.html``"
msgstr "``change_list.html``"

msgid "``change_list_object_tools.html``"
msgstr "``change_list_object_tools.html``"

msgid "``change_list_results.html``"
msgstr "``change_list_results.html``"

msgid "``date_hierarchy.html``"
msgstr "``date_hierarchy.html``"

msgid "``delete_confirmation.html``"
msgstr "``delete_confirmation.html``"

msgid "``object_history.html``"
msgstr "``object_history.html``"

msgid "``pagination.html``"
msgstr "``pagination.html``"

msgid "``popup_response.html``"
msgstr "``popup_response.html``"

msgid "``prepopulated_fields_js.html``"
msgstr "``prepopulated_fields_js.html``"

msgid "``search_form.html``"
msgstr "``search_form.html``"

msgid "``submit_line.html``"
msgstr "``submit_line.html``"

msgid ""
"For those templates that cannot be overridden in this way, you may still "
"override them for your entire project by placing the new version in your "
"``templates/admin`` directory. This is particularly useful to create custom "
"404 and 500 pages."
msgstr ""
"この方法でオーバーライドできないテンプレートについては、 ``templates/admin`` "
"ディレクトリに新しいバージョンを置くことで、プロジェクト全体でオーバーライド"
"できます。これは特に独自の404ページや500ページを作成するのに便利です。"

msgid ""
"Some of the admin templates, such as ``change_list_results.html`` are used "
"to render custom inclusion tags. These may be overridden, but in such cases "
"you are probably better off creating your own version of the tag in question "
"and giving it a different name. That way you can use it selectively."
msgstr ""
"``change_list_results.html`` のようないくつかの管理用テンプレートはカスタムイ"
"ンクルージョンタグのレンダリングに使用されます。これらはオーバーライドできま"
"すが、そのような場合、おそらく問題のタグの独自のバージョンを作成し、別の名前"
"を付けた方が良いでしょう。そうすれば、選択的に使用できます。"

msgid "Root and login templates"
msgstr "ルートテンプレートとログインテンプレート"

msgid ""
"If you wish to change the index, login or logout templates, you are better "
"off creating your own ``AdminSite`` instance (see below), and changing the :"
"attr:`AdminSite.index_template` , :attr:`AdminSite.login_template` or :attr:"
"`AdminSite.logout_template` properties."
msgstr ""
"インデックス、ログイン、ログアウトのテンプレートを変更したい場合は、独自の "
"``AdminSite`` インスタンス（下記参照）を作成し、 :attr:`AdminSite."
"index_template` 、 :attr:`AdminSite.login_template` 、 :attr:`AdminSite."
"logout_template` プロパティを変更した方が良いでしょう。"

msgid "Theming support"
msgstr "テーマのサポート"

msgid ""
"The admin uses CSS variables to define colors and fonts. This allows "
"changing themes without having to override many individual CSS rules. For "
"example, if you preferred purple instead of blue you could add a ``admin/"
"base.html`` template override to your project:"
msgstr ""
"管理画面では、CSS 変数を使用して色とフォントを定義します。これにより、多くの"
"個別の CSS ルールを上書きすることなくテーマを変更できます。たとえば、青の代わ"
"りに紫を使うには、以下のような ``admin/base.html`` テンプレートをプロジェクト"
"に追加します。"

msgid ""
"The list of CSS variables are defined at :source:`django/contrib/admin/"
"static/admin/css/base.css`."
msgstr ""
"CSS 変数のリストは :source:`django/contrib/admin/static/admin/css/base.css` "
"で定義されています。"

msgid ""
"Dark mode variables, respecting the `prefers-color-scheme`_ media query, are "
"defined at :source:`django/contrib/admin/static/admin/css/dark_mode.css`. "
"This is linked to the document in ``{% block dark-mode-vars %}``."
msgstr ""
"`prefers-color-scheme`_ メディアクエリを尊重したダークモード変数は :source:"
"`django/contrib/admin/static/admin/css/dark_mode.css` で定義されています。こ"
"れは ``{% block dark-mode-vars %}`` のドキュメントにリンクされています。"

msgid "``AdminSite`` objects"
msgstr "``AdminSite`` オブジェクト"

msgid ""
"A Django administrative site is represented by an instance of ``django."
"contrib.admin.sites.AdminSite``; by default, an instance of this class is "
"created as ``django.contrib.admin.site`` and you can register your models "
"and ``ModelAdmin`` instances with it."
msgstr ""
"Django の admin サイトは ``django.contrib.admin.sites.AdminSite`` のインスタ"
"ンスで表現されます。デフォルトでは、このクラスのインスタンスは ``django."
"contrib.admin.site`` として作成され、モデルや ``ModelAdmin`` インスタンスを登"
"録できます。"

msgid ""
"If you want to customize the default admin site, you can :ref:`override it "
"<overriding-default-admin-site>`."
msgstr ""
"デフォルトのadminサイトをカスタマイズしたい場合は、 :ref:`オーバーライド "
"<overriding-default-admin-site>` することができます。"

msgid ""
"When constructing an instance of an ``AdminSite``, you can provide a unique "
"instance name using the ``name`` argument to the constructor. This instance "
"name is used to identify the instance, especially when :ref:`reversing admin "
"URLs <admin-reverse-urls>`. If no instance name is provided, a default "
"instance name of ``admin`` will be used. See :ref:`customizing-adminsite` "
"for an example of customizing the :class:`AdminSite` class."
msgstr ""
"管理サイト ``AdminSite`` のインスタンスを作成する際には、コンストラクタの "
"``name`` 引数に一意なインスタンス名を指定できます。このインスタンス名はインス"
"タンスを識別するために使用され、特に :ref:`管理用URL <admin-reverse-urls>` を"
"逆引きするときに使用されます。インスタンス名を指定しなかった場合、デフォルト"
"のインスタンス名 ``admin`` が使用されます。 :class:`AdminSite` クラスをカスタ"
"マイズする例については :ref:`customizing-adminsite` を参照してください。"

msgid "A :class:`~weakref.WeakSet` contains all admin site instances."
msgstr ""
":class:`~weakref.WeakSet` は全ての管理サイトのインスタンスを含んでいます。"

msgid "``AdminSite`` attributes"
msgstr "``AdminSite`` の属性"

msgid ""
"Templates can override or extend base admin templates as described in :ref:"
"`admin-overriding-templates`."
msgstr ""
"テンプレートは :ref:`admin-overriding-templates` で説明されているように、基本"
"管理テンプレートを上書きしたり拡張したりすることができます。"

msgid ""
"The text to put at the top of each admin page, as a ``<div>`` (a string). By "
"default, this is \"Django administration\"."
msgstr ""
"各管理ページの上部に表示するテキストを ``<div>`` (文字列) で指定します。デ"
"フォルトでは \"Django administration\" です。"

msgid "In older versions, ``site_header`` was using an ``<h1>`` tag."
msgstr ""
"古いバージョンでは ``site_header`` は ``<h1>`` タグを使用していました。"

msgid ""
"The text to put at the end of each admin page's ``<title>`` (a string). By "
"default, this is \"Django site admin\"."
msgstr ""
"各管理ページの ``<title>`` の末尾に付けるテキスト (文字列)。デフォルトでは "
"\"Django site admin\" です。"

msgid ""
"The URL for the \"View site\" link at the top of each admin page. By "
"default, ``site_url`` is ``/``. Set it to ``None`` to remove the link."
msgstr ""
"各管理ページの上部にある \"サイトを見る \"リンクのURL。デフォルトでは "
"``site_url`` は ``/`` です。リンクを削除するには ``None`` を指定してくださ"
"い。"

msgid ""
"For sites running on a subpath, the :meth:`each_context` method checks if "
"the current request has ``request.META['SCRIPT_NAME']`` set and uses that "
"value if ``site_url`` isn't set to something other than ``/``."
msgstr ""
"サブパス上で動作しているサイトでは、 :meth:`each_context` メソッドは現在のリ"
"クエストに ``request.META['SCRIPT_NAME']`` が設定されているかどうかをチェック"
"し、 ``site_url`` に ``/`` 以外の値が設定されていなければ、その値を使用しま"
"す。"

msgid ""
"The text to put at the top of the admin index page (a string). By default, "
"this is \"Site administration\"."
msgstr ""
"管理インデックスページのトップに表示するテキスト（文字列）。デフォルトでは "
"\"Site administration \"です。"

msgid ""
"Path to a custom template that will be used by the admin site main index "
"view."
msgstr ""
"admin サイトのメインインデックスビューで使用されるカスタムテンプレートへのパ"
"ス。"

msgid ""
"Path to a custom template that will be used by the admin site app index view."
msgstr ""
"admin サイトのアプリ インデックスビューで使用されるカスタムテンプレートへのパ"
"ス。"

msgid ""
"The string to use for displaying empty values in the admin site's change "
"list. Defaults to a dash. The value can also be overridden on a per "
"``ModelAdmin`` basis and on a custom field within a ``ModelAdmin`` by "
"setting an ``empty_value_display`` attribute on the field. See :attr:"
"`ModelAdmin.empty_value_display` for examples."
msgstr ""
"admin サイトのチェンジリストで空の値を表示する際に使用する文字列。デフォルト"
"はダッシュです。この値はフィールドに ``empty_value_display`` 属性を指定するこ"
"とで、 ``ModelAdmin`` ごとや ``ModelAdmin`` 内のカスタムフィールドごとにオー"
"バーライドできます。例については :attr:`ModelAdmin.empty_value_display` を参"
"照してください。"

msgid ""
"A boolean value that determines whether to show the navigation sidebar on "
"larger screens. By default, it is set to ``True``."
msgstr ""
"大きな画面でナビゲーションサイドバーを表示するかどうかを決定する真偽値。デ"
"フォルトでは ``True`` に設定されています。"

msgid ""
"A boolean value that determines whether to add a final catch-all view to the "
"admin that redirects unauthenticated users to the login page. By default, it "
"is set to ``True``."
msgstr ""
"認証されていないユーザーをログインページにリダイレクトさせる最終キャッチオー"
"ルビューを管理画面に追加するかどうかを決定する真偽値。デフォルトでは "
"``True`` に設定されています。"

msgid ""
"Setting this to ``False`` is not recommended as the view protects against a "
"potential model enumeration privacy issue."
msgstr ""
"このビューはモデル列挙のプライバシーに関する潜在的な問題から保護するため、こ"
"れを ``False`` に設定することは推奨されません。"

msgid ""
"Path to a custom template that will be used by the admin site login view."
msgstr "admin サイトのログインビューで使用されるカスタムテンプレートへのパス。"

msgid ""
"Subclass of :class:`~django.contrib.auth.forms.AuthenticationForm` that will "
"be used by the admin site login view."
msgstr ""
"admin サイトのログインビューで使用される :class:`~django.contrib.auth.forms."
"AuthenticationForm` のサブクラス。"

msgid ""
"Path to a custom template that will be used by the admin site logout view."
msgstr ""
"admin サイトのログアウトビューで使用されるカスタムテンプレートへのパス。"

msgid ""
"Path to a custom template that will be used by the admin site password "
"change view."
msgstr ""
"admin サイトのパスワード変更ビューで使用されるカスタムテンプレートへのパス。"

msgid ""
"Path to a custom template that will be used by the admin site password "
"change done view."
msgstr ""
"adminサイトのパスワード変更完了ビューで使用されるカスタムテンプレートへのパ"
"ス。"

msgid "``AdminSite`` methods"
msgstr "``AdminSite`` のメソッド"

msgid ""
"Returns a dictionary of variables to put in the template context for every "
"page in the admin site."
msgstr ""
"admin サイトの各ページのテンプレートコンテキストに置く変数の辞書を返します。"

msgid "Includes the following variables and values by default:"
msgstr "デフォルトで以下の変数と値が含まれています："

msgid "``site_header``: :attr:`AdminSite.site_header`"
msgstr "``site_header``: :attr:`AdminSite.site_header`"

msgid "``site_title``: :attr:`AdminSite.site_title`"
msgstr "``site_title``: :attr:`AdminSite.site_title`"

msgid "``site_url``: :attr:`AdminSite.site_url`"
msgstr "``site_url``: :attr:`AdminSite.site_url`"

msgid "``has_permission``: :meth:`AdminSite.has_permission`"
msgstr "``has_permission``: :meth:`AdminSite.has_permission`"

msgid ""
"``available_apps``: a list of applications from the :doc:`application "
"registry </ref/applications/>` available for the current user. Each entry in "
"the list is a dict representing an application with the following keys:"
msgstr ""
"``available_apps``: :doc:`アプリケーションレジストリ </ref/applications/>` か"
"ら現在のユーザーが利用できるアプリケーションのリストです。リストの各エントリ"
"は以下のキーを持つアプリケーションを表す dict です:"

msgid "``app_label``: the application label"
msgstr "``app_label``: アプリケーションのラベル"

msgid "``app_url``: the URL of the application index in the admin"
msgstr "``app_url``: admin のアプリケーションインデックスの URL"

msgid ""
"``has_module_perms``: a boolean indicating if displaying and accessing of "
"the module's index page is permitted for the current user"
msgstr ""
"``has_module_perms``: 現在のユーザーに対して、モジュールのインデックスページ"
"の表示とアクセスが許可されているかどうかを示す真偽値。"

msgid "``models``: a list of the models available in the application"
msgstr "``models``: アプリケーションで利用可能なモデルのリスト。"

msgid "Each model is a dict with the following keys:"
msgstr "各 model は以下のキーを持つ dict です:"

msgid "``model``: the model class"
msgstr "``model``: モデルクラス"

msgid "``object_name``: class name of the model"
msgstr "``object_name``: モデルのクラス名"

msgid "``name``: plural name of the model"
msgstr "``name``: 複数形のモデル名"

msgid ""
"``perms``: a ``dict`` tracking ``add``, ``change``, ``delete``, and ``view`` "
"permissions"
msgstr ""
"``perms``: ``add``, ``change``, ``delete``, ``view`` のパーミッションをトラッ"
"キングする ``dict``。"

msgid "``admin_url``: admin changelist URL for the model"
msgstr "``admin_url``: モデルの管理用チェンジリストのURL"

msgid "``add_url``: admin URL to add a new model instance"
msgstr "``add_url``: 新しいモデルインスタンスを追加するための管理用URL"

msgid "``is_popup``: whether the current page is displayed in a popup window"
msgstr "``is_popup``: 現在のページがポップアップウィンドウで表示されるかどうか"

msgid "``is_nav_sidebar_enabled``: :attr:`AdminSite.enable_nav_sidebar`"
msgstr "``is_nav_sidebar_enabled``: :attr:`AdminSite.enable_nav_sidebar`"

msgid "``log_entries``: :meth:`.AdminSite.get_log_entries`"
msgstr "``log_entries``: :meth:`.AdminSite.get_log_entries`"

msgid ""
"Returns a list of applications from the :doc:`application registry </ref/"
"applications/>` available for the current user. You can optionally pass an "
"``app_label`` argument to get details for a single app. Each entry in the "
"list is a dictionary representing an application with the following keys:"
msgstr ""
":doc:`アプリケーションレジストリ </ref/applications/>` から、現在のユーザーが"
"利用できるアプリケーションのリストを返します。オプションで ``app_label`` 引数"
"を渡すことで、単一のアプリケーションの詳細を取得できます。リストの各エントリ"
"は以下のキーを持つアプリケーションを表す辞書です:"

msgid "``name``: name of the application"
msgstr "``name``: アプリケーションの名前"

msgid "Each model is a dictionary with the following keys:"
msgstr "各 model は以下のキーを持つ辞書です:"

msgid ""
"Lists of applications and models are sorted alphabetically by their names. "
"You can override this method to change the default order on the admin index "
"page."
msgstr ""
"アプリケーションとモデルのリストはそれらの名前によってアルファベット順にソー"
"トされます。このメソッドをオーバーライドして、管理インデックスページのデフォ"
"ルトの並び順を変更できます。"

msgid ""
"Returns ``True`` if the user for the given ``HttpRequest`` has permission to "
"view at least one page in the admin site. Defaults to requiring both :attr:"
"`User.is_active <django.contrib.auth.models.User.is_active>` and :attr:`User."
"is_staff <django.contrib.auth.models.User.is_staff>` to be ``True``."
msgstr ""
"指定された ``HttpRequest`` のユーザが admin サイトの少なくとも1つのページを閲"
"覧する権限を持っている場合に ``True`` を返します。デフォルトは :attr:`User."
"is_active <django.contrib.auth.models.User.is_active>` と :attr:`User."
"is_staff <django.contrib.auth.models.User.is_staff>` の両方が ``True`` である"
"必要があります。"

msgid ""
"Registers the given model class (or iterable of classes) with the given "
"``admin_class``. ``admin_class`` defaults to :class:`~django.contrib.admin."
"ModelAdmin` (the default admin options). If keyword arguments are given -- e."
"g. ``list_display`` -- they'll be applied as options to the admin class."
msgstr ""
"指定された model クラス (またはクラスのイテラブル) を指定された "
"``admin_class`` とともに登録します。``admin_class`` はデフォルトで :class:"
"`~django.contrib.admin.ModelAdmin` (デフォルトの管理オプション) になります。"
"キーワード引数 (たとえば ``list_display``) が与えられた場合、それらは admin "
"クラスのオプションとして適用されます。"

msgid ""
"Raises :class:`~django.core.exceptions.ImproperlyConfigured` if a model is "
"abstract. and ``django.contrib.admin.exceptions.AlreadyRegistered`` if a "
"model is already registered."
msgstr ""
"モデルが抽象クラスの場合は :class:`~django.core.exceptions."
"ImproperlyConfigured` を、モデルが既に登録されている場合は ``django.contrib."
"admin.exceptions.AlreadyRegistered`` を発生させます。"

msgid "Unregisters the given model class (or iterable of classes)."
msgstr "指定されたモデルクラス（またはクラスのイテラブル）の登録を解除します。"

msgid ""
"Raises ``django.contrib.admin.exceptions.NotRegistered`` if a model isn't "
"already registered."
msgstr ""
"モデルが登録されていない場合、 ``django.contrib.admin.exceptions."
"NotRegistered`` を発生させます。"

msgid ""
"Returns an admin class for the given model class. Raises ``django.contrib."
"admin.exceptions.NotRegistered`` if a model isn't registered."
msgstr ""
"与えられた model クラスの admin クラスを返します。モデルが登録されていない場"
"合は ``django.contrib.admin.exceptions.NotRegistered`` を発生させます。"

msgid ""
"Returns a queryset for the related :class:`~django.contrib.admin.models."
"LogEntry` instances, shown on the site index page. This method can be "
"overridden to filter the log entries by other criteria."
msgstr ""
"サイトインデックスページに表示される、関連する :class:`~django.contrib.admin."
"models.LogEntry` インスタンスのクエリセットを返します。このメソッドは、他の条"
"件でログエントリをフィルタするためにオーバーライドできます。"

msgid "Hooking ``AdminSite`` instances into your URLconf"
msgstr "URLconf に ``AdminSite`` インスタンスをフックします。"

msgid ""
"The last step in setting up the Django admin is to hook your ``AdminSite`` "
"instance into your URLconf. Do this by pointing a given URL at the "
"``AdminSite.urls`` method. It is not necessary to use :func:`~django.urls."
"include()`."
msgstr ""
"Django admin のセットアップの最後のステップは、 ``AdminSite`` インスタンスを "
"URLconf にフックすることです。指定した URL を ``AdminSite.urls`` メソッドで指"
"定します。 :func:`~django.urls.include()` を使う必要はありません。"

msgid ""
"In this example, we register the default ``AdminSite`` instance ``django."
"contrib.admin.site`` at the URL ``/admin/`` ::"
msgstr ""
"このインスタンスでは、デフォルトの ``AdminSite`` インスタンス ``django."
"contrib.admin.site`` を URL ``/admin/`` に登録します:"

msgid "Customizing the :class:`AdminSite` class"
msgstr ":class:`AdminSite` クラスのカスタマイズ"

msgid ""
"If you'd like to set up your own admin site with custom behavior, you're "
"free to subclass ``AdminSite`` and override or add anything you like. Then, "
"create an instance of your ``AdminSite`` subclass (the same way you'd "
"instantiate any other Python class) and register your models and "
"``ModelAdmin`` subclasses with it instead of with the default site. Finally, "
"update :file:`myproject/urls.py` to reference your :class:`AdminSite` "
"subclass."
msgstr ""
"カスタムの動作で独自の admin サイトを設定したい場合は、自由に ``AdminSite`` "
"をサブクラス化し、好きなものをオーバーライドしたり追加したりすることができま"
"す。そして、 ``AdminSite`` サブクラスのインスタンスを作成し (他の Python クラ"
"スと同じようにインスタンスを作成します)、モデルや ``ModelAdmin`` サブクラスを"
"デフォルトのサイトではなく、サブクラスに登録します。最後に、 :file:"
"`myproject/urls.py` を更新して、 :class:`AdminSite` サブクラスを参照するよう"
"にします。"

msgid "``myapp/admin.py``"
msgstr "``myapp/admin.py``"

msgid "``myproject/urls.py``"
msgstr "``myproject/urls.py``"

msgid ""
"Note that you may not want autodiscovery of ``admin`` modules when using "
"your own ``AdminSite`` instance since you will likely be importing all the "
"per-app ``admin`` modules in your ``myproject.admin`` module. This means you "
"need to put ``'django.contrib.admin.apps.SimpleAdminConfig'`` instead of "
"``'django.contrib.admin'`` in your :setting:`INSTALLED_APPS` setting."
msgstr ""
"自分の ``AdminSite`` インスタンスを使う場合、アプリごとの ``admin`` モジュー"
"ルを全て ``myproject.admin`` モジュールにインポートする可能性が高いので、 "
"``admin`` モジュールを自動検出させたくないかも知れないことに注意してくださ"
"い。つまり、 :setting:`INSTALLED_APPS` 設定に ``'django.contrib.admin'`` の代"
"わりに ``'django.contrib.admin.apps.SimpleAdminConfig'`` を記述する必要があり"
"ます。"

msgid "Overriding the default admin site"
msgstr "デフォルトの admin サイトをオーバーライドする"

msgid ""
"You can override the default ``django.contrib.admin.site`` by setting the :"
"attr:`~.SimpleAdminConfig.default_site` attribute of a custom ``AppConfig`` "
"to the dotted import path of either a ``AdminSite`` subclass or a callable "
"that returns a site instance."
msgstr ""
"デフォルトの ``django.contrib.admin.site`` をオーバーライドするには、カスタ"
"ム ``AppConfig`` の :attr:`~.SimpleAdminConfig.default_site` 属性に "
"``AdminSite`` サブクラスまたはサイトのインスタンスを返す呼び出し可能オブジェ"
"クトのドット区切りインポートパスを指定します。"

msgid "``myproject/admin.py``"
msgstr "``myproject/admin.py``"

msgid "``myproject/apps.py``"
msgstr "``myproject/apps.py``"

msgid "``myproject/settings.py``"
msgstr "``myproject/settings.py``"

msgid "Multiple admin sites in the same URLconf"
msgstr "同じ URLconf に複数の admin サイトを置く"

msgid ""
"You can create multiple instances of the admin site on the same Django-"
"powered website. Create multiple instances of ``AdminSite`` and place each "
"one at a different URL."
msgstr ""
"同じ Django を使った Web サイトに、複数の admin サイトのインスタンスを作成で"
"きます。 ``AdminSite`` のインスタンスを複数作成し、それぞれを異なる URL に配"
"置します。"

msgid ""
"In this example, the URLs ``/basic-admin/`` and ``/advanced-admin/`` feature "
"separate versions of the admin site -- using the ``AdminSite`` instances "
"``myproject.admin.basic_site`` and ``myproject.admin.advanced_site``, "
"respectively::"
msgstr ""
"このインスタンスでは、 ``/basic-admin/`` と ``/advanced-admin/`` はそれぞれ "
"``AdminSite`` インスタンス ``myproject.admin.basic_site`` と ``myproject."
"admin.advanced_site`` を使用した別々のバージョンの admin サイトです:"

msgid ""
"``AdminSite`` instances take a single argument to their constructor, their "
"name, which can be anything you like. This argument becomes the prefix to "
"the URL names for the purposes of :ref:`reversing them<admin-reverse-urls>`. "
"This is only necessary if you are using more than one ``AdminSite``."
msgstr ""
"``AdminSite`` インスタンスはコンストラクタに一つの引数、名前を渡します。この"
"引数は :ref:`逆引き <admin-reverse-urls>` のためにURL名のプレフィックスとなり"
"ます。これは複数の ``AdminSite`` を使用する場合にのみ必要です。"

msgid "Adding views to admin sites"
msgstr "admin サイトにビューを追加する"

msgid ""
"Just like :class:`ModelAdmin`, :class:`AdminSite` provides a :meth:`~django."
"contrib.admin.ModelAdmin.get_urls()` method that can be overridden to define "
"additional views for the site. To add a new view to your admin site, extend "
"the base :meth:`~django.contrib.admin.ModelAdmin.get_urls()` method to "
"include a pattern for your new view."
msgstr ""
":class:`ModelAdmin` と同様に、 :class:`AdminSite` は :meth:`~django.contrib."
"admin.ModelAdmin.get_urls()` メソッドを提供し、このメソッドをオーバーライドす"
"ることでサイトに追加のビューを定義できます。admin サイトに新しいビューを追加"
"するには、ベースとなる :meth:`~django.contrib.admin.ModelAdmin.get_urls()` メ"
"ソッドを拡張して、新しいビューのパターンを追加します。"

msgid ""
"Any view you render that uses the admin templates, or extends the base admin "
"template, should set ``request.current_app`` before rendering the template. "
"It should be set to either ``self.name`` if your view is on an ``AdminSite`` "
"or ``self.admin_site.name`` if your view is on a ``ModelAdmin``."
msgstr ""
"admin テンプレートを使用する、またはベースとなる admin テンプレートを拡張する"
"ビューは、テンプレートをレンダリングする前に ``request.current_app`` を設定す"
"る必要があります。ビューが ``AdminSite`` にある場合は ``self.name`` を、"
"ビューが ``ModelAdmin`` にある場合は ``self.admin_site.name`` を設定します。"

msgid "Adding a password reset feature"
msgstr "パスワードリセット機能を追加する"

msgid ""
"You can add a password reset feature to the admin site by adding a few lines "
"to your URLconf. Specifically, add these four patterns::"
msgstr ""
"URLconfに数行を追加することで、admin サイトにパスワードリセット機能を追加でき"
"ます。具体的には、以下の4つのパターンを追加します:"

msgid ""
"(This assumes you've added the admin at ``admin/`` and requires that you put "
"the URLs starting with ``^admin/`` before the line that includes the admin "
"app itself)."
msgstr ""
"（上記は ``admin/`` に admin を追加していることを前提としており、admin アプリ"
"自体を含む行の前に ``^admin/`` で始まるURLを配置することが必要です）"

msgid ""
"The presence of the ``admin_password_reset`` named URL will cause a "
"\"forgotten your password?\" link to appear on the default admin log-in page "
"under the password box."
msgstr ""
"``admin_password_reset`` という名前のURLがあると、デフォルトの admin ログイン"
"ページのパスワードボックスの下に \"forgot your password? \"というリンクが表示"
"されます。"

msgid "``LogEntry`` objects"
msgstr "``LogEntry`` オブジェクト"

msgid ""
"The ``LogEntry`` class tracks additions, changes, and deletions of objects "
"done through the admin interface."
msgstr ""
"``LogEntry`` クラスは管理画面を通して行われたオブジェクトの追加、変更、削除を"
"記録します。"

msgid "``LogEntry`` attributes"
msgstr "``LogEntry`` の属性"

msgid "The date and time of the action."
msgstr "アクションの日時。"

msgid ""
"The user (an :setting:`AUTH_USER_MODEL` instance) who performed the action."
msgstr ""
"アクションを実行したユーザー（ :setting:`AUTH_USER_MODEL` インスタンス）。"

msgid ""
"The :class:`~django.contrib.contenttypes.models.ContentType` of the modified "
"object."
msgstr ""
"変更されたオブジェクトの :class:`~django.contrib.contenttypes.models."
"ContentType` 。"

msgid "The textual representation of the modified object's primary key."
msgstr "変更されたオブジェクトの主キーのテキスト表現。"

msgid "The object`s ``repr()`` after the modification."
msgstr "変更後のオブジェクトの ``repr()`` 。"

msgid "The type of action logged: ``ADDITION``, ``CHANGE``, ``DELETION``."
msgstr ""
"ログに記録されたアクションの種類: ``ADDITION``, ``CHANGE``, ``DELETION`` 。"

msgid "For example, to get a list of all additions done through the admin::"
msgstr ""
"たとえば、admin を通して行われたすべての追加操作のリストを取得する場合:"

msgid ""
"The detailed description of the modification. In the case of an edit, for "
"example, the message contains a list of the edited fields. The Django admin "
"site formats this content as a JSON structure, so that :meth:"
"`get_change_message` can recompose a message translated in the current user "
"language. Custom code might set this as a plain string though. You are "
"advised to use the :meth:`get_change_message` method to retrieve this value "
"instead of accessing it directly."
msgstr ""
"変更の詳細。たとえば編集の場合、メッセージには編集されたフィールドのリストが"
"含まれます。Django の admin サイトでは、この内容を JSON 構造として整形し、:"
"meth:`get_change_message` が現在のユーザ言語で翻訳されたメッセージを再構成で"
"きるようにしています。カスタムコードではこれをプレーンな文字列として設定する"
"かもしれません。この値を取得するには、直接アクセスするのではなく :meth:"
"`get_change_message` メソッドを使用することをお勧めします。"

msgid "``LogEntry`` methods"
msgstr "``LogEntry`` メソッド"

msgid "A shortcut that returns the referenced object."
msgstr "参照されているオブジェクトを返すショートカット。"

msgid ""
"Formats and translates :attr:`change_message` into the current user "
"language. Messages created before Django 1.10 will always be displayed in "
"the language in which they were logged."
msgstr ""
":attr:`change_message` を現在のユーザ言語に変換します。Django 1.10 より前に作"
"成されたメッセージは、常にログに記録された言語で表示されます。"

msgid "Reversing admin URLs"
msgstr "admin の URL を逆引きする"

msgid ""
"When an :class:`AdminSite` is deployed, the views provided by that site are "
"accessible using Django's :ref:`URL reversing system <naming-url-patterns>`."
msgstr ""
":class:`AdminSite` がデプロイされると、そのサイトが提供するビューは Django "
"の :ref:`URL 逆引きシステム <naming-url-patterns>` を使ってアクセスできるよう"
"になります。"

msgid "The :class:`AdminSite` provides the following named URL patterns:"
msgstr ":class:`AdminSite` は以下のURLパターンを提供します:"

msgid "Page"
msgstr "ページ"

msgid "URL name"
msgstr "URL 名"

msgid "Parameters"
msgstr "パラメータ"

msgid "Index"
msgstr "インデックス"

msgid "``index``"
msgstr "``index``"

msgid "Login"
msgstr "ログイン"

msgid "``login``"
msgstr "``login``"

msgid "Logout"
msgstr "ログアウト"

msgid "``logout``"
msgstr "``logout``"

msgid "Password change"
msgstr "パスワードの変更"

msgid "``password_change``"
msgstr "``password_change``"

msgid "Password change done"
msgstr "パスワード変更完了"

msgid "``password_change_done``"
msgstr "``password_change_done``"

msgid "i18n JavaScript"
msgstr "国際化 JavaScript"

msgid "``jsi18n``"
msgstr "``jsi18n``"

msgid "Application index page"
msgstr "アプリケーションのインデックスページ"

msgid "``app_list``"
msgstr "``app_list``"

msgid "``app_label``"
msgstr "``app_label``"

msgid "Redirect to object's page"
msgstr "オブジェクトのページへのリダイレクト"

msgid "``view_on_site``"
msgstr "``view_on_site``"

msgid "``content_type_id``, ``object_id``"
msgstr "``content_type_id``, ``object_id``"

msgid ""
"Each :class:`ModelAdmin` instance provides an additional set of named URLs:"
msgstr ""
"それぞれの :class:`ModelAdmin` インスタンスは追加の名前付き URL のセットを提"
"供します:"

msgid "Changelist"
msgstr "チェンジリスト"

msgid "``{{ app_label }}_{{ model_name }}_changelist``"
msgstr "``{{ app_label }}_{{ model_name }}_changelist``"

msgid "Add"
msgstr "追加"

msgid "``{{ app_label }}_{{ model_name }}_add``"
msgstr "``{{ app_label }}_{{ model_name }}_add``"

msgid "History"
msgstr "履歴"

msgid "``{{ app_label }}_{{ model_name }}_history``"
msgstr "``{{ app_label }}_{{ model_name }}_history``"

msgid "``object_id``"
msgstr "``object_id``"

msgid "Delete"
msgstr "削除"

msgid "``{{ app_label }}_{{ model_name }}_delete``"
msgstr "``{{ app_label }}_{{ model_name }}_delete``"

msgid "Change"
msgstr "変更"

msgid "``{{ app_label }}_{{ model_name }}_change``"
msgstr "``{{ app_label }}_{{ model_name }}_change``"

msgid "The ``UserAdmin`` provides a named URL:"
msgstr "``UserAdmin`` は以下の名前付きURLを提供します:"

msgid "``auth_user_password_change``"
msgstr "``auth_user_password_change``"

msgid "``user_id``"
msgstr "``user_id``"

msgid ""
"These named URLs are registered with the application namespace ``admin``, "
"and with an instance namespace corresponding to the name of the Site "
"instance."
msgstr ""
"これらの名前付きURLはアプリケーション名前空間 ``admin`` とサイトインスタンス"
"名に対応するインスタンス名前空間に登録されます。"

msgid ""
"So - if you wanted to get a reference to the Change view for a particular "
"``Choice`` object (from the polls application) in the default admin, you "
"would call:"
msgstr ""
"つまり、デフォルトの admin 画面で特定の ``Choice`` オブジェクト(投票アプリ"
"ケーションから)の変更ビューへの参照を取得したい場合、次のように呼び出します:"

msgid ""
"This will find the first registered instance of the admin application "
"(whatever the instance name), and resolve to the view for changing ``poll."
"Choice`` instances in that instance."
msgstr ""
"これは、最初に登録された管理アプリケーションのインスタンスを（インスタンス名"
"が何であっても）見つけ、そのインスタンスで ``poll.Choice`` インスタンスを変更"
"するためのビューを解決します。"

msgid ""
"If you want to find a URL in a specific admin instance, provide the name of "
"that instance as a ``current_app`` hint to the reverse call. For example, if "
"you specifically wanted the admin view from the admin instance named "
"``custom``, you would need to call:"
msgstr ""
"特定の管理インスタンスのURLを見つけたい場合は、そのインスタンス名を "
"``current_app`` ヒントとして逆引きのコールに与えます。たとえば、特に "
"``custom`` という名前の管理インスタンスから管理ビューを取得したい場合は、以下"
"のように呼び出す必要があります。"

msgid ""
"For more details, see the documentation on :ref:`reversing namespaced URLs "
"<topics-http-reversing-url-namespaces>`."
msgstr ""
"詳細は :ref:`名前空間のURLの逆引き <topics-http-reversing-url-namespaces>` の"
"ドキュメントを参照してください。"

msgid ""
"To allow easier reversing of the admin urls in templates, Django provides an "
"``admin_urlname`` filter which takes an action as argument:"
msgstr ""
"Django は、テンプレート内で admin の URL を簡単に逆引きできるように、アクショ"
"ン を引数に取る ``admin_urlname`` フィルタを提供しています:"

msgid ""
"The action in the examples above match the last part of the URL names for :"
"class:`ModelAdmin` instances described above. The ``opts`` variable can be "
"any object which has an ``app_label`` and ``model_name`` attributes and is "
"usually supplied by the admin views for the current model."
msgstr ""
"上記の例のアクションは上記の :class:`ModelAdmin` インスタンスの URL 名の最後"
"の部分と一致します。変数 ``opts`` には ``app_label`` と ``model_name`` 属性を"
"持つ任意のオブジェクトを指定することができ、通常は現在のモデルの管理ビューか"
"ら提供されます。"

msgid "The ``display`` decorator"
msgstr "``display`` デコレータ"

msgid ""
"This decorator can be used for setting specific attributes on custom display "
"functions that can be used with :attr:`~django.contrib.admin.ModelAdmin."
"list_display` or :attr:`~django.contrib.admin.ModelAdmin.readonly_fields`::"
msgstr ""
"このデコレータは :attr:`~django.contrib.admin.ModelAdmin.list_display` や :"
"attr:`~django.contrib.admin.ModelAdmin.readonly_fields` で使用できるカスタム"
"表示関数に特定の属性を指定するために使用できます:"

msgid ""
"Also note that the ``empty_value`` decorator parameter maps to the "
"``empty_value_display`` attribute assigned directly to the function. It "
"cannot be used in conjunction with ``boolean`` -- they are mutually "
"exclusive."
msgstr ""
"また、``empty_value`` デコレータパラメータは、関数に直接割り当てられた "
"``empty_value_display`` 属性にマッピングされることに注意してください。真偽値 "
"``boolean`` と併用することはできません。"

msgid ""
"Use of this decorator is not compulsory to make a display function, but it "
"can be useful to use it without arguments as a marker in your source to "
"identify the purpose of the function::"
msgstr ""
"このデコレータの使用は、表示関数を作成する上で必須ではありませんが、 関数の目"
"的を特定するための目印として、引数なしで使用すると便利です:"

msgid "The ``staff_member_required`` decorator"
msgstr "``staff_member_required`` デコレータ"

msgid ""
"This decorator is used on the admin views that require authorization. A view "
"decorated with this function will have the following behavior:"
msgstr ""
"このデコレータは、認可が必要な admin ビューで使用されます。この関数でデコレー"
"ションされたビューは、以下の動作をするようになります。"

msgid ""
"If the user is logged in, is a staff member (``User.is_staff=True``), and is "
"active (``User.is_active=True``), execute the view normally."
msgstr ""
"ユーザーがログインしており、スタッフであり(``User.is_staff=True``)、アクティ"
"ブであれば(``User.is_active=True``)、ビューを正常に実行します。"

msgid ""
"Otherwise, the request will be redirected to the URL specified by the "
"``login_url`` parameter, with the originally requested path in a query "
"string variable specified by ``redirect_field_name``. For example: ``/admin/"
"login/?next=/admin/polls/question/3/``."
msgstr ""
"そうでない場合、リクエストは ``login_url`` パラメータで指定された URL にリダ"
"イレクトされ、 ``redirect_field_name`` で指定されたクエリ文字列変数に元々リク"
"エストされていたパスが格納されます。例: ``/admin/login/?next=/admin/polls/"
"question/3/`` 。"

msgid "Example usage::"
msgstr "使用例:"

msgid "JavaScript customizations in the admin"
msgstr "admin アプリケーションの JavaScript カスタマイズ"

msgid "Inline form events"
msgstr "インラインフォームイベント"

msgid ""
"You may want to execute some JavaScript when an inline form is added or "
"removed in the admin change form. The ``formset:added`` and ``formset:"
"removed`` events allow this. ``event.detail.formsetName`` is the formset the "
"row belongs to. For the ``formset:added`` event, ``event.target`` is the "
"newly added row."
msgstr ""
"インラインフォームが admin アプリケーション変更フォームに追加または削除された"
"際に JavaScript を実行したい場合、``formset:added`` と ``formset:removed`` イ"
"ベントを使用できます。``event.detail.formsetName`` は行が属するフォームセット"
"を示します。 ``formset:added`` イベントでは、``event.target`` は新しく追加さ"
"れた行です。"

msgid ""
"In your custom ``change_form.html`` template, extend the "
"``admin_change_form_document_ready`` block and add the event listener code:"
msgstr ""
"カスタムの ``change_form.html`` テンプレートで "
"``admin_change_form_document_ready`` ブロックを拡張し、イベントリスナーのコー"
"ドを追加します:"

msgid "``app/static/app/formset_handlers.js``"
msgstr "``app/static/app/formset_handlers.js``"

msgid "Two points to keep in mind:"
msgstr "注意点が2つあります:"

msgid ""
"The JavaScript code must go in a template block if you are inheriting "
"``admin/change_form.html`` or it won't be rendered in the final HTML."
msgstr ""
"もし ``admin/change_form.html`` を継承しているなら、JavaScript コードはテンプ"
"レートブロック内に配置する必要があります。そうしないと、最終的な HTML にレン"
"ダリングされません。"

msgid ""
"``{{ block.super }}`` is added because Django's "
"``admin_change_form_document_ready`` block contains JavaScript code to "
"handle various operations in the change form and we need that to be rendered "
"too."
msgstr ""
"Django の ``admin_change_form_document_ready`` ブロックには、変更フォーム内で"
"のさまざまな操作を処理するための JavaScript コードが含まれており、 "
"``{{ block.super }}`` は、それらもレンダリングする必要があるために追加されて"
"います。"

msgid "Supporting versions of Django older than 4.1"
msgstr "バージョン4.1より前のDjangoをサポートする"

msgid ""
"If your event listener still has to support older versions of Django you "
"have to use jQuery to register your event listener. jQuery handles "
"JavaScript events but the reverse isn't true."
msgstr ""
"もしイベントリスナーが古いバージョンのDjangoをサポートする必要がある場合は、"
"jQueryを使用してイベントリスナーを登録する必要があります。jQueryはJavaScript"
"イベントを処理しますが、その逆は成り立ちません。"

msgid ""
"You could check for the presence of ``event.detail.formsetName`` and fall "
"back to the old listener signature as follows:"
msgstr ""
"``event.detail.formsetName`` の存在をチェックし、次のように古いリスナーのシグ"
"ネチャにフォールバックできます:"

msgid "``django.contrib.auth``"
msgstr "``django.contrib.auth``"

msgid ""
"This document provides API reference material for the components of Django's "
"authentication system. For more details on the usage of these components or "
"how to customize authentication and authorization see the :doc:"
"`authentication topic guide </topics/auth/index>`."
msgstr ""
"このドキュメントでは、Django の 認証システムのコンポーネントの API リファレン"
"ス資料を提供しています。 これらのコンポーネントの使い方や、認証と認可をカスタ"
"マイズする方法の詳細は、:doc:`認証トピックガイド </topics/auth/index>` を参照"
"してください。"

msgid "``User`` model"
msgstr "``User`` モデル"

msgid "Fields"
msgstr "フィールド"

msgid ""
":class:`~django.contrib.auth.models.User` objects have the following fields:"
msgstr ""
":class:`~django.contrib.auth.models.User` オブジェクトには、以下のフィールド"
"があります:"

msgid ""
"Required. 150 characters or fewer. Usernames may contain alphanumeric, "
"``_``, ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""
"必須です。150 文字以下です。英数字のほか、``_``、``@``、``+``、``.``、``-`` "
"が使えます。"

msgid ""
"The ``max_length`` should be sufficient for many use cases. If you need a "
"longer length, please use a :ref:`custom user model <specifying-custom-user-"
"model>`. If you use MySQL with the ``utf8mb4`` encoding (recommended for "
"proper Unicode support), specify at most ``max_length=191`` because MySQL "
"can only create unique indexes with 191 characters in that case by default."
msgstr ""
"``max_length`` は多くの状況で十分のはずです。もしより長い文字数が必要な場合"
"は、:ref:`独自のユーザモデル <specifying-custom-user-model>` を参照してくださ"
"い。``utf8mb4`` エンコーディングで MySQL を使っている場合は (適切な Unicode "
"をサポートするために推奨されています)、最大でも ``max_length=191`` としてくだ"
"さい。なぜなら、MySQL は、デフォルトでは 191 文字まででしかユニークインデック"
"スを作成できないからです。"

msgid ""
"Optional (:attr:`blank=True <django.db.models.Field.blank>`). 150 characters "
"or fewer."
msgstr ""
"オプション (:attr:`blank=True <django.db.models.Field.blank>`)。150 文字以"
"下。"

msgid ""
"Optional (:attr:`blank=True <django.db.models.Field.blank>`). Email address."
msgstr ""
"オプション (:attr:`blank=True <django.db.models.Field.blank>`)。メールアドレ"
"ス。"

msgid ""
"Required. A hash of, and metadata about, the password. (Django doesn't store "
"the raw password.) Raw passwords can be arbitrarily long and can contain any "
"character. See the :doc:`password documentation </topics/auth/passwords>`."
msgstr ""
"必須です。パスワードのハッシュであり、パスワードについてのメタデータでもあり"
"ます。(Django は生のパスワードを保管しません。) 生のパスワードは、任意の長さ"
"で、あらゆる文字を使用できます。詳しくは :doc:`パスワードのドキュメント </"
"topics/auth/passwords>` を参照してください。"

msgid "Many-to-many relationship to :class:`~django.contrib.auth.models.Group`"
msgstr ""
":class:`~django.contrib.auth.models.Group` への多対多のリレーションシップで"
"す。"

msgid ""
"Many-to-many relationship to :class:`~django.contrib.auth.models.Permission`"
msgstr ""
":class:`~django.contrib.auth.models.Permission` への多対多のリレーションシッ"
"プです。"

msgid "Boolean. Allows this user to access the admin site."
msgstr "真偽値。このユーザに管理サイトへのアクセスを許可します。"

msgid ""
"Boolean. Marks this user account as active. We recommend that you set this "
"flag to ``False`` instead of deleting accounts. That way, if your "
"applications have any foreign keys to users, the foreign keys won't break."
msgstr ""
"ブール値。このユーザーアカウントをアクティブとしてマークします。アカウントを"
"削除する代わりに、このフラグを ``False`` に設定することを推奨します。そうすれ"
"ば、アプリケーションにユーザーへの外部キーがある場合でも、外部キーが壊れるこ"
"とはありません。"

msgid ""
"This doesn't necessarily control whether or not the user can log in. "
"Authentication backends aren't required to check for the ``is_active`` flag "
"but the default backend (:class:`~django.contrib.auth.backends."
"ModelBackend`) and the :class:`~django.contrib.auth.backends."
"RemoteUserBackend` do. You can use :class:`~django.contrib.auth.backends."
"AllowAllUsersModelBackend` or :class:`~django.contrib.auth.backends."
"AllowAllUsersRemoteUserBackend` if you want to allow inactive users to "
"login. In this case, you'll also want to customize the :class:`~django."
"contrib.auth.forms.AuthenticationForm` used by the :class:`~django.contrib."
"auth.views.LoginView` as it rejects inactive users. Be aware that the "
"permission-checking methods such as :meth:`~django.contrib.auth.models.User."
"has_perm` and the authentication in the Django admin all return ``False`` "
"for inactive users."
msgstr ""
"この属性は、必ずしもユーザがログインできるかどうかをコントロールするわけでは"
"ありません。認証バックエンドは必ずしも ``is_active`` フラグをチェックしません"
"が、デフォルトのバックエンド (:class:`~django.contrib.auth.backends."
"ModelBackend`) と :class:`~django.contrib.auth.backends.RemoteUserBackend` は"
"チェックを行います。非アクティブのユーザがログインできるようにしたい場合は、:"
"class:`~django.contrib.auth.backends.AllowAllUsersModelBackend` や :class:"
"`~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend` を使うことがで"
"きます。この場合、非アクティブのユーザを拒否してしまうので、:class:`~django."
"contrib.auth.views.LoginView` によって使われる :class:`~django.contrib.auth."
"forms.AuthenticationForm` もカスタマイズした方が良いでしょう。:meth:`~django."
"contrib.auth.models.User.has_perm` のようなパーミッションチェックのメソッド"
"や Django admin 内の認証はすべて非アクティブユーザに対して ``False`` を返すこ"
"とに注意してください。"

msgid ""
"Boolean. Treats this user as having all permissions without assigning any "
"permission to it in particular."
msgstr ""
"真偽値。このユーザには特にパーミッションを割り当てずに、すべてのパーミッショ"
"ンを持つものとして扱います。"

msgid "A datetime of the user's last login."
msgstr "ユーザーが最後にログインした日時です。"

msgid "The date/time when the account was created."
msgstr "アカウントが作成された日時。"

msgid "Attributes"
msgstr "属性"

msgid ""
"Read-only attribute which is always ``True`` (as opposed to ``AnonymousUser."
"is_authenticated`` which is always ``False``). This is a way to tell if the "
"user has been authenticated. This does not imply any permissions and doesn't "
"check if the user is active or has a valid session. Even though normally you "
"will check this attribute on ``request.user`` to find out whether it has "
"been populated by the :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` (representing the currently logged-in user), you "
"should know this attribute is ``True`` for any :class:`~models.User` "
"instance."
msgstr ""
"(``AnonymousUser.is_authenticated`` が常に ``False`` なのとは対照的に) 常に "
"``True`` の読み取り専用属性です。ユーザが認証済みかどうかを知らせる方法です。"
"これはパーミッションという意味ではなく、ユーザーがアクティブかどうか、また有"
"効なセッションがあるかどうかをチェックするわけでもありません。 通常、"
"``request.user`` のこの属性をチェックして :class:`~django.contrib.auth."
"middleware.AuthenticationMiddleware` (現在ログイン中のユーザを表します) に"
"よって格納されているかどうかを調べます。:class:`~models.User` のインスタンス"
"の場合、この属性は ``True`` となります。"

msgid ""
"Read-only attribute which is always ``False``. This is a way of "
"differentiating :class:`~models.User` and :class:`~models.AnonymousUser` "
"objects. Generally, you should prefer using :attr:`~django.contrib.auth."
"models.User.is_authenticated` to this attribute."
msgstr ""
"常に ``False`` の読み取り専用属性です。:class:`~models.User` オブジェクトと :"
"class:`~models.AnonymousUser` オブジェクトを区別する方法です。一般的に、:"
"attr:`~django.contrib.auth.models.User.is_authenticated` を使う方が好ましいと"
"言えます。"

msgid ""
"Returns the username for the user. Since the ``User`` model can be swapped "
"out, you should use this method instead of referencing the username "
"attribute directly."
msgstr ""
"ユーザのユーザ名を返します。``User`` モデルはスワップアウトされることがあるの"
"で、ユーザ名を直接参照する代わりにこのメソッドを使う必要があります。"

msgid ""
"Returns the :attr:`~django.contrib.auth.models.User.first_name` plus the :"
"attr:`~django.contrib.auth.models.User.last_name`, with a space in between."
msgstr ""
":attr:`~django.contrib.auth.models.User.first_name` と :attr:`~django."
"contrib.auth.models.User.last_name` をスペースでつないだ文字列を返します。"

msgid "Returns the :attr:`~django.contrib.auth.models.User.first_name`."
msgstr ":attr:`~django.contrib.auth.models.User.first_name` を返します。"

msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models.User` "
"object."
msgstr ""
"指定された生の文字列に、ユーザのパスワードをセットし、パスワードのハッシュ処"
"理を行います。:class:`~django.contrib.auth.models.User` は保存しません。"

msgid ""
"When the ``raw_password`` is ``None``, the password will be set to an "
"unusable password, as if :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` were used."
msgstr ""
"``raw_password`` が ``None`` のとき、:meth:`~django.contrib.auth.models.User."
"set_unusable_password()` が使われるのと同じように、パスワードは使用に適さない"
"パスワードになります。"

msgid "*Asynchronous version*: ``acheck_password()``"
msgstr "*非同期バージョン*: ``acheck_password()``"

msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr ""
"与えられた生の文字列が、ユーザに対して正しいパスワードであれば ``True`` を返"
"します。 (比較する際にはパスワードハッシュを処理します。)"

msgid "``acheck_password()`` method was added."
msgstr "``acheck_password()`` メソッドが追加されました。"

msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. :meth:`~django.contrib.auth.models.User."
"check_password()` for this user will never return ``True``. Doesn't save "
"the :class:`~django.contrib.auth.models.User` object."
msgstr ""
"ユーザにパスワードが設定されていないものとしてマークします。これは、パスワー"
"ドに空の文字列を付けることと同じではありません。ユーザに対する :meth:"
"`~django.contrib.auth.models.User.check_password()` は ``True`` を返しませ"
"ん。:class:`~django.contrib.auth.models.User` オブジェクトを保存しません。"

msgid ""
"You may need this if authentication for your application takes place against "
"an existing external source such as an LDAP directory."
msgstr ""
"アプリケーションの認証が LDAP ディレクトリなどの既存の外部ソースに対して行わ"
"れている場合は、これが必要になることがあります。"

msgid "Password reset restriction"
msgstr "パスワードリセットの制限"

msgid ""
"Users having an unusable password will not able to request a password reset "
"email via :class:`~django.contrib.auth.views.PasswordResetView`."
msgstr ""
"使用できないパスワードを持つユーザーは、 :class:`~django.contrib.auth.views."
"PasswordResetView` を通じてパスワードリセットのメールをリクエストすることがで"
"きません。"

msgid ""
"Returns ``False`` if :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` has been called for this user."
msgstr ""
"ユーザに対して :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` が呼ばれている場合、``False`` を返します。"

msgid "Returns a set of permission strings that the user has directly."
msgstr "ユーザーが直接持っているパーミッション文字列のセットを返します。"

msgid ""
"If ``obj`` is passed in, only returns the user permissions for this specific "
"object."
msgstr ""
"もし ``obj`` が渡された場合、この特定のオブジェクトのユーザパーミッションのみ"
"を返します。"

msgid ""
"Returns a set of permission strings that the user has, through their groups."
msgstr "ユーザがグループを通して持つパーミッションの文字列のセットを返します。"

msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr ""
"``obj`` が渡されたとき、指定されたオブジェクトに対するグループパーミッション"
"のみを返します。"

msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr ""
"ユーザがグループおよびユーザパーミッションを通して持つパーミッションの文字列"
"のセットを返します。"

msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr ""
"``obj`` が渡された場合、指定されたオブジェクトに対するパーミッションのみを返"
"します。"

msgid ""
"Returns ``True`` if the user has the specified permission, where perm is in "
"the format ``\"<app label>.<permission codename>\"``. (see documentation on :"
"ref:`permissions <topic-authorization>`). If the user is inactive, this "
"method will always return ``False``. For an active superuser, this method "
"will always return ``True``."
msgstr ""
"perm が ``\"<app label>.<permission codename>\"`` という形式で、ユーザーが特"
"定の権限を持っている場合、``True`` を返します (詳しくは :ref:`パーミッション "
"<topic-authorization>` のドキュメントを参照)。もしユーザーが非アクティブの場"
"合、このメソッドは常に ``False`` を返します。アクティブなスーパーユーザーの場"
"合、このメソッドは常に ``True`` を返します。"

msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""
"``obj`` が渡された場合、このメソッドは指定されたオブジェクトに対してパーミッ"
"ションのチェックを行い、モデルに対しては行いません。"

msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If the "
"user is inactive, this method will always return ``False``. For an active "
"superuser, this method will always return ``True``."
msgstr ""
"指定された権限を持つかどうかを判定し、持つ場合は ``True`` を返します。各 "
"perm は ``\"<app label>.<permission codename>\"`` の形式です。ユーザーが非ア"
"クティブの場合、このメソッドは常に ``False`` を返します。アクティブなスーパー"
"ユーザーの場合、このメソッドは常に ``True`` を返します。"

msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr ""
"``obj`` が渡された場合、このメソッドは指定されたオブジェクトに対してパーミッ"
"ションのチェックを行い、モデルに対しては行いません。"

msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If the user is inactive, this method will always return "
"``False``. For an active superuser, this method will always return ``True``."
msgstr ""
"与えられたパッケージ (Djangoアプリのラベル) 内でユーザーが何らかの権限を持っ"
"ている場合、``True`` を返します。ユーザーが非アクティブな場合、このメソッドは"
"常に ``False`` を返します。アクティブなスーパーユーザーの場合、このメソッドは"
"常に ``True`` を返します。"

msgid ""
"Sends an email to the user. If ``from_email`` is ``None``, Django uses the :"
"setting:`DEFAULT_FROM_EMAIL`. Any ``**kwargs`` are passed to the underlying :"
"meth:`~django.core.mail.send_mail()` call."
msgstr ""
"ユーザに E メールを送信します。 ``from_email`` が ``None`` の場合、Django "
"は :setting:`DEFAULT_FROM_EMAIL` を使用します。全ての ``**kwargs`` は元とな"
"る :meth:`~django.core.mail.send_mail()` 呼び出しに渡されます。"

msgid "Manager methods"
msgstr "マネージャメソッド"

msgid ""
"The :class:`~django.contrib.auth.models.User` model has a custom manager "
"that has the following helper methods (in addition to the methods provided "
"by :class:`~django.contrib.auth.models.BaseUserManager`):"
msgstr ""
":class:`~django.contrib.auth.models.User` モデルは、(:class:`~django.contrib."
"auth.models.BaseUserManager` で提供されるメソッドに加えて) 以下のヘルパーメ"
"ソッドを有する独自のマネージャを持っています:"

msgid "Creates, saves and returns a :class:`~django.contrib.auth.models.User`."
msgstr ":class:`~django.contrib.auth.models.User` を作成、保存して返します。"

msgid ""
"The :attr:`~django.contrib.auth.models.User.username` and :attr:`~django."
"contrib.auth.models.User.password` are set as given. The domain portion of :"
"attr:`~django.contrib.auth.models.User.email` is automatically converted to "
"lowercase, and the returned :class:`~django.contrib.auth.models.User` object "
"will have :attr:`~django.contrib.auth.models.User.is_active` set to ``True``."
msgstr ""
":attr:`~django.contrib.auth.models.User.username` と :attr:`~django.contrib."
"auth.models.User.password` は指定された通りに設定されます。 :attr:`~django."
"contrib.auth.models.User.email` のドメイン部分は自動的に小文字に変換され、返"
"される :class:`~django.contrib.auth.models.User` オブジェクトには :attr:"
"`~django.contrib.auth.models.User.is_active` が ``True`` に設定されます。"

msgid ""
"If no password is provided, :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` will be called."
msgstr ""
"パスワードが指定されなかった場合、 :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` が呼び出されます。"

msgid ""
"The ``extra_fields`` keyword arguments are passed through to the :class:"
"`~django.contrib.auth.models.User`’s ``__init__`` method to allow setting "
"arbitrary fields on a :ref:`custom user model <auth-custom-user>`."
msgstr ""
"``extra_fields`` キーワード引数は、:class:`~django.contrib.auth.models.User` "
"クラスの ``__init__`` メソッドに渡され、:ref:`カスタムユーザーモデル <auth-"
"custom-user>` に任意のフィールドを設定することを可能にします。"

msgid ""
"See :ref:`Creating users <topics-auth-creating-users>` for example usage."
msgstr ""
"使用例については :ref:`ユーザーの作成 <topics-auth-creating-users>` を参照し"
"てください。"

msgid ""
"Same as :meth:`create_user`, but sets :attr:`~models.User.is_staff` and :"
"attr:`~models.User.is_superuser` to ``True``."
msgstr ""
":meth:`create_user` と同じですが、:attr:`~models.User.is_staff` と :attr:"
"`~models.User.is_superuser` を ``True`` にセットします。"

msgid ""
"Returns users that have the given permission ``perm`` either in the ``\"<app "
"label>.<permission codename>\"`` format or as a :class:`~django.contrib.auth."
"models.Permission` instance. Returns an empty queryset if no users who have "
"the ``perm`` found."
msgstr ""
"与えられたパーミッション ``perm`` を持つユーザを ``\"<app label>.<permission "
"codename>\"`` 形式、または :class:`~django.contrib.auth.models.Permission` イ"
"ンスタンスで返します。もし ``perm`` を持つユーザが見つからなかった場合、空の"
"クエリセットを返します。"

msgid ""
"If ``is_active`` is ``True`` (default), returns only active users, or if "
"``False``, returns only inactive users. Use ``None`` to return all users "
"irrespective of active state."
msgstr ""
"``is_active`` が ``True`` (デフォルト) の場合、アクティブなユーザーのみを返"
"し、``False`` の場合、非アクティブなユーザーのみを返します。アクティブ状態に"
"関わらずすべてのユーザーを返すには ``None`` を使用してください。"

msgid ""
"If ``include_superusers`` is ``True`` (default), the result will include "
"superusers."
msgstr ""
"``include_superusers`` が ``True`` (デフォルト) の場合、結果にはスーパーユー"
"ザーが含まれます。"

msgid ""
"If ``backend`` is passed in and it's defined in :setting:"
"`AUTHENTICATION_BACKENDS`, then this method will use it. Otherwise, it will "
"use the ``backend`` in :setting:`AUTHENTICATION_BACKENDS`, if there is only "
"one, or raise an exception."
msgstr ""
"もし ``backend`` が渡され、それが :setting:`AUTHENTICATION_BACKENDS` で定義さ"
"れている場合、このメソッドはそれを使用します。そうでない場合、1つだけならば :"
"setting:`AUTHENTICATION_BACKENDS` 内の ``backend`` を使用し、複数ある場合は例"
"外を発生させます。"

msgid "``AnonymousUser`` object"
msgstr "``AnonymousUser`` オブジェクト"

msgid ""
":class:`django.contrib.auth.models.AnonymousUser` is a class that implements "
"the :class:`django.contrib.auth.models.User` interface, with these "
"differences:"
msgstr ""
":class:`django.contrib.auth.models.AnonymousUser` は、:class:`django.contrib."
"auth.models.User` インターフェースを実装するクラスで、以下の点が異なります。"

msgid ":ref:`id <automatic-primary-key-fields>` is always ``None``."
msgstr ":ref:`id <automatic-primary-key-fields>` が常に ``None`` です。"

msgid ""
":attr:`~django.contrib.auth.models.User.username` is always the empty string."
msgstr ""
":attr:`~django.contrib.auth.models.User.username` が常に空の文字列です。"

msgid ""
":meth:`~django.contrib.auth.models.User.get_username()` always returns the "
"empty string."
msgstr ""
":meth:`~django.contrib.auth.models.User.get_username()` が常に空の文字列を返"
"します。"

msgid ""
":attr:`~django.contrib.auth.models.User.is_anonymous` is ``True`` instead of "
"``False``."
msgstr ""
":attr:`~django.contrib.auth.models.User.is_anonymous` が ``False`` ではなく "
"``True`` です。"

msgid ""
":attr:`~django.contrib.auth.models.User.is_authenticated` is ``False`` "
"instead of ``True``."
msgstr ""
":attr:`~django.contrib.auth.models.User.is_authenticated` が ``False`` ではな"
"く ``True`` です。"

msgid ""
":attr:`~django.contrib.auth.models.User.is_staff` and :attr:`~django.contrib."
"auth.models.User.is_superuser` are always ``False``."
msgstr ""
":attr:`~django.contrib.auth.models.User.is_staff` と :attr:`~django.contrib."
"auth.models.User.is_superuser` が常に ``False`` です。"

msgid ":attr:`~django.contrib.auth.models.User.is_active` is always ``False``."
msgstr ""
":attr:`~django.contrib.auth.models.User.is_active` が常に ``False`` です。"

msgid ""
":attr:`~django.contrib.auth.models.User.groups` and :attr:`~django.contrib."
"auth.models.User.user_permissions` are always empty."
msgstr ""
":attr:`~django.contrib.auth.models.User.groups` と :attr:`~django.contrib."
"auth.models.User.user_permissions` が常に空です。"

msgid ""
":meth:`~django.contrib.auth.models.User.set_password()`, :meth:`~django."
"contrib.auth.models.User.check_password()`, :meth:`~django.db.models.Model."
"save` and :meth:`~django.db.models.Model.delete()` raise :exc:"
"`NotImplementedError`."
msgstr ""
":meth:`~django.contrib.auth.models.User.set_password()`、:meth:`~django."
"contrib.auth.models.User.check_password()`、:meth:`~django.db.models.Model."
"save`、:meth:`~django.db.models.Model.delete()` が :exc:"
"`NotImplementedError` を投げます。"

msgid ""
"In practice, you probably won't need to use :class:`~django.contrib.auth."
"models.AnonymousUser` objects on your own, but they're used by web requests, "
"as explained in the next section."
msgstr ""
"実際には :class:`~django.contrib.auth.models.AnonymousUser` オブジェクトを使"
"う必要はないでしょうが、次のセクションで説明するように、Web リクエストで使用"
"されます。"

msgid "``Permission`` model"
msgstr "``Permission`` モデル"

msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the following "
"fields:"
msgstr ""
":class:`~django.contrib.auth.models.Permission` オブジェクトには以下のフィー"
"ルドがあります:"

msgid "Required. 255 characters or fewer. Example: ``'Can vote'``."
msgstr "必須です。255 文字以下です。例: ``'Can vote'``。"

msgid ""
"Required. A reference to the ``django_content_type`` database table, which "
"contains a record for each installed model."
msgstr ""
"必須です。``django_content_type`` データベーステーブルへの参照で、インストー"
"ルされた各モデルのレコードを含みます。"

msgid "Required. 100 characters or fewer. Example: ``'can_vote'``."
msgstr "必須です。100 文字以下です。例: ``'can_vote'``。"

msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the standard "
"data-access methods like any other :doc:`Django model </ref/models/"
"instances>`."
msgstr ""
"他のあらゆる :doc:`Django モデル </ref/models/instances>` と同じように、 :"
"class:`~django.contrib.auth.models.Permission` オブジェクトも標準的なデータア"
"クセスのメソッドが使えます。"

msgid "``Group`` model"
msgstr "``Group`` モデル"

msgid ""
":class:`~django.contrib.auth.models.Group` objects have the following fields:"
msgstr ""
":class:`~django.contrib.auth.models.Group` オブジェクトには以下のフィールドが"
"あります:"

msgid ""
"Required. 150 characters or fewer. Any characters are permitted. Example: "
"``'Awesome Users'``."
msgstr "必須。150文字以下。任意の文字が使用可能。例: ``'Awesome Users'``。"

msgid "Many-to-many field to :class:`~django.contrib.auth.models.Permission`::"
msgstr ""
":class:`~django.contrib.auth.models.Permission` への多対多のフィールドです::"

msgid "Validators"
msgstr "バリデータ (Validator)"

msgid ""
"A field validator allowing only ASCII letters and numbers, in addition to "
"``@``, ``.``, ``+``, ``-``, and ``_``."
msgstr ""
"ASCII 文字と数字、さらに ``@``、``.``、``+``、``-``、``_`` のみを許可する"
"フィールドバリデータ。"

msgid ""
"A field validator allowing Unicode characters, in addition to ``@``, ``.``, "
"``+``, ``-``, and ``_``. The default validator for ``User.username``."
msgstr ""
"Unicode 文字を許可するフィールドバリデータで、``@``、``.``、``+``、``-``、"
"``_`` に加えて指定された文字も許可します。``User.username`` のデフォルトのバ"
"リデータです。"

msgid "Login and logout signals"
msgstr "ログインとログアウトのシグナル"

msgid ""
"The auth framework uses the following :doc:`signals </topics/signals>` that "
"can be used for notification when a user logs in or out."
msgstr ""
"認証フレームワークは、ユーザーがログインやログアウトをしたときの通知に使うこ"
"とができる、以下の :doc:`シグナル </topics/signals>` を使用します。"

msgid "Sent when a user logs in successfully."
msgstr "ユーザがログインに成功したときに送信されます。"

msgid "Arguments sent with this signal:"
msgstr "このシグナルとともに送信される引数は以下の通りです:"

msgid "``sender``"
msgstr "``sender``"

msgid "The class of the user that just logged in."
msgstr "たった今ログインしたユーザのクラスです。"

msgid "``request``"
msgstr "``request``"

msgid "The current :class:`~django.http.HttpRequest` instance."
msgstr "現在の :class:`~django.http.HttpRequest` インスタンスです。"

msgid "``user``"
msgstr "``user``"

msgid "The user instance that just logged in."
msgstr "たった今ログインしたユーザのインスタンスです。"

msgid "Sent when the logout method is called."
msgstr "logout メソッドが呼ばれたときに送信されます。"

msgid ""
"As above: the class of the user that just logged out or ``None`` if the user "
"was not authenticated."
msgstr ""
"上記の通り: たった今ログアウトしたユーザのクラス、もしくはユーザが認証されな"
"かった場合は ``None`` となります。"

msgid ""
"The user instance that just logged out or ``None`` if the user was not "
"authenticated."
msgstr ""
"たった今ログアウトしたユーザのインスタンスか、ユーザが認証されなかった場合は "
"``None`` です。"

msgid "Sent when the user failed to login successfully"
msgstr "ユーザがログインに失敗したときに送信されます。"

msgid "The name of the module used for authentication."
msgstr "認証のために使われるモジュールの名前です。"

msgid "``credentials``"
msgstr "``credentials``"

msgid ""
"A dictionary of keyword arguments containing the user credentials that were "
"passed to :func:`~django.contrib.auth.authenticate()` or your own custom "
"authentication backend. Credentials matching a set of 'sensitive' patterns, "
"(including password) will not be sent in the clear as part of the signal."
msgstr ""
":func:`~django.contrib.auth.authenticate()` か独自の認証バックエンドに渡され"
"たユーザ資格情報を含む、キーワード引数のディクショナリです。'sensitive' パ"
"ターンのセットに一致する (パスワードを含んだ) 資格情報は、シグナルの一部とし"
"て明確には送信されません。"

msgid ""
"The :class:`~django.http.HttpRequest` object, if one was provided to :func:"
"`~django.contrib.auth.authenticate`."
msgstr ""
":func:`~django.contrib.auth.authenticate` に提供されている場合、 :class:"
"`~django.http.HttpRequest` オブジェクト。"

msgid "Authentication backends"
msgstr "認証のバックエンド"

msgid ""
"This section details the authentication backends that come with Django. For "
"information on how to use them and how to write your own authentication "
"backends, see the :ref:`Other authentication sources section <authentication-"
"backends>` of the :doc:`User authentication guide </topics/auth/index>`."
msgstr ""
"このセクションでは、Django に付属する認証バックエンドについて詳しく説明しま"
"す。 使用方法と独自の認証バックエンドの作成方法については、:doc:`ユーザ認証ガ"
"イド </topics/auth/index>` の :ref:`他の認証ソースのセクション "
"<authentication-backends>` を参照してください。\n"
"\n"
"セクションを参照してください。"

msgid "Available authentication backends"
msgstr "利用可能な認証バックエンド"

msgid ""
"The following backends are available in :mod:`django.contrib.auth.backends`:"
msgstr ""
"以下のバックエンドが :mod:`django.contrib.auth.backends` 内で利用可能です:"

msgid ""
"A base class that provides default implementations for all required methods. "
"By default, it will reject any user and provide no permissions."
msgstr ""
"すべての必須メソッドのデフォルト実装を提供する基底クラス。デフォルトでは、"
"ユーザーを拒否し、パーミッションを提供しません。"

msgid "Returns an empty set."
msgstr "空の集合を返します。"

msgid ""
"Uses :meth:`get_user_permissions` and :meth:`get_group_permissions` to get "
"the set of permission strings the ``user_obj`` has."
msgstr ""
"``user_obj`` が持つ権限文字列のセットを取得するには、 :meth:"
"`get_user_permissions` および :meth:`get_group_permissions` を使用します。"

msgid ""
"Uses :meth:`get_all_permissions` to check if ``user_obj`` has the permission "
"string ``perm``."
msgstr ""
"``user_obj`` が権限文字列 ``perm`` を持っているかどうかを確認するには、 :"
"meth:`get_all_permissions` メソッドを使用します。"

msgid ""
"This is the default authentication backend used by Django.  It authenticates "
"using credentials consisting of a user identifier and password.  For "
"Django's default user model, the user identifier is the username, for custom "
"user models it is the field specified by USERNAME_FIELD (see :doc:"
"`Customizing Users and authentication </topics/auth/customizing>`)."
msgstr ""
"これは Django が使うデフォルトの認証バックエンドです。ユーザ識別子とパスワー"
"ドからなる認証情報を使って認証します。Django のデフォルトのユーザモデルでは、"
"ユーザ識別子はユーザ名で、カスタムユーザモデルでは USERNAME_FIELD で指定され"
"たフィールドです (:doc:`ユーザと認証のカスタマイズ </topics/auth/"
"customizing>` を参照してください)。"

msgid ""
"It also handles the default permissions model as defined for :class:`~django."
"contrib.auth.models.User` and :class:`~django.contrib.auth.models."
"PermissionsMixin`."
msgstr ""
"また、 :class:`~django.contrib.auth.models.User` と :class:`~django.contrib."
"auth.models.PermissionsMixin` で定義されているデフォルトのパーミッションモデ"
"ルも扱います。"

msgid ""
":meth:`has_perm`, :meth:`get_all_permissions`, :meth:`get_user_permissions`, "
"and :meth:`get_group_permissions` allow an object to be passed as a "
"parameter for object-specific permissions, but this backend does not "
"implement them other than returning an empty set of permissions if ``obj is "
"not None``."
msgstr ""
":meth:`has_perm`、 :meth:`get_all_permissions`、 :meth:"
"`get_user_permissions`、 および :meth:`get_group_permissions` メソッドは、特"
"定のオブジェクトの権限を扱うためにオブジェクトをパラメータとして受け取ること"
"ができますが、このバックエンドは、``obj is not None`` の場合に、権限の空セッ"
"トを返す以外は実装されていません。"

msgid ""
":meth:`with_perm` also allows an object to be passed as a parameter, but "
"unlike others methods it returns an empty queryset if ``obj is not None``."
msgstr ""
":meth:`with_perm` もオブジェクトを引数として渡すことができますが、他のメソッ"
"ドと異なり、``obj is not None`` の場合は空のクエリセットを返します。"

msgid ""
"Tries to authenticate ``username`` with ``password`` by calling :meth:`User."
"check_password <django.contrib.auth.models.User.check_password>`. If no "
"``username`` is provided, it tries to fetch a username from ``kwargs`` using "
"the key :attr:`CustomUser.USERNAME_FIELD <django.contrib.auth.models."
"CustomUser.USERNAME_FIELD>`. Returns an authenticated user or ``None``."
msgstr ""
"``username`` と ``password`` を用いて、 :meth:`User.check_password <django."
"contrib.auth.models.User.check_password>` を呼び出すことで認証を試みます。も"
"し ``username`` が指定されていない場合、 :attr:`CustomUser.USERNAME_FIELD "
"<django.contrib.auth.models.CustomUser.USERNAME_FIELD>` キーを使用して "
"``kwargs`` からユーザー名を取得しようとします。認証されたユーザーを返すか、"
"``None`` を返します。"

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` and may be ``None`` if "
"it wasn't provided to :func:`~django.contrib.auth.authenticate` (which "
"passes it on to the backend)."
msgstr ""
"``request`` は :class:`~django.http.HttpRequest` で、  :func:`~django."
"contrib.auth.authenticate` が提供されていない場合 ``None``  となる可能性があ"
"ります。(バックエンドでこれを通過するため)."

msgid ""
"Returns the set of permission strings the ``user_obj`` has from their own "
"user permissions. Returns an empty set if :attr:`~django.contrib.auth.models."
"AbstractBaseUser.is_anonymous` or :attr:`~django.contrib.auth.models."
"CustomUser.is_active` is ``False``."
msgstr ""
"``user_obj`` が持つユーザー権限から許可文字列のセットを返します。 :attr:"
"`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` または :attr:"
"`~django.contrib.auth.models.CustomUser.is_active` が ``False`` の場合は空の"
"セットが返されます。"

msgid ""
"Returns the set of permission strings the ``user_obj`` has from the "
"permissions of the groups they belong. Returns an empty set if :attr:"
"`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` or :attr:"
"`~django.contrib.auth.models.CustomUser.is_active`  is ``False``."
msgstr ""
"ユーザーが所属するグループの権限から ``user_obj`` が持つ権限文字列のセットを"
"返します。もし :attr:`~django.contrib.auth.models.AbstractBaseUser."
"is_anonymous` や :attr:`~django.contrib.auth.models.CustomUser.is_active` が "
"``False`` の場合は空のセットを返します。"

msgid ""
"Returns the set of permission strings the ``user_obj`` has, including both "
"user permissions and group permissions. Returns an empty set if :attr:"
"`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` or :attr:"
"`~django.contrib.auth.models.CustomUser.is_active` is ``False``."
msgstr ""
"``user_obj`` が持つユーザーパーミッションとグループパーミッションを含むパー"
"ミッション文字列のセットを返します。もし :attr:`~django.contrib.auth.models."
"AbstractBaseUser.is_anonymous` または :attr:`~django.contrib.auth.models."
"CustomUser.is_active` が ``False`` の場合は空のセットを返します。"

msgid ""
"Uses :meth:`get_all_permissions` to check if ``user_obj`` has the permission "
"string ``perm``. Returns ``False`` if the user is not :attr:`~django.contrib."
"auth.models.CustomUser.is_active`."
msgstr ""
"``user_obj`` が権限文字列 ``perm`` を持っているかをチェックするには、:meth:"
"`get_all_permissions` を使用します。 ``user_obj`` が :attr:`~django.contrib."
"auth.models.CustomUser.is_active` でない場合は、 ``False`` を返します。"

msgid ""
"Returns whether the ``user_obj`` has any permissions on the app "
"``app_label``."
msgstr ""
"``user_obj`` がアプリ ``app_label`` に対して権限を持っているかどうかを返しま"
"す。"

msgid ""
"Returns whether the user is allowed to authenticate. To match the behavior "
"of :class:`~django.contrib.auth.forms.AuthenticationForm` which :meth:"
"`prohibits inactive users from logging in <django.contrib.auth.forms."
"AuthenticationForm.confirm_login_allowed>`, this method returns ``False`` "
"for users with :attr:`is_active=False <django.contrib.auth.models.User."
"is_active>`. Custom user models that don't have an :attr:`~django.contrib."
"auth.models.CustomUser.is_active` field are allowed."
msgstr ""
"ユーザーが認証を許可されているかどうかを返します。:meth:`非アクティブなユー"
"ザーのログインを禁止する <django.contrib.auth.forms.AuthenticationForm."
"confirm_login_allowed>` :class:`~django.contrib.auth.forms."
"AuthenticationForm` の動作に合わせるため、このメソッドは :attr:"
"`is_active=False <django.contrib.auth.models.User.is_active>` を持つユーザー"
"に対して ``False`` を返します。 :attr:`~django.contrib.auth.models."
"CustomUser.is_active` フィールドを持たないカスタムユーザーモデルは許可されま"
"す。"

msgid ""
"Returns all active users who have the permission ``perm`` either in the form "
"of ``\"<app label>.<permission codename>\"`` or a :class:`~django.contrib."
"auth.models.Permission` instance. Returns an empty queryset if no users who "
"have the ``perm`` found."
msgstr ""
"パーミッション ``perm`` を持つ全てのアクティブユーザを ``\"<app label>."
"<permission codename>\"`` 形式、または :class:`~django.contrib.auth.models."
"Permission` インスタンスで返します。もし ``perm`` を持つユーザが見つからな"
"かった場合、空のクエリセットを返します。"

msgid ""
"Same as :class:`ModelBackend` except that it doesn't reject inactive users "
"because :meth:`~ModelBackend.user_can_authenticate` always returns ``True``."
msgstr ""
":class:`ModelBackend` と同様ですが、:meth:`~ModelBackend."
"user_can_authenticate` は常に ``True`` を返すため、非アクティブなユーザーを拒"
"否しません。"

msgid ""
"When using this backend, you'll likely want to customize the :class:`~django."
"contrib.auth.forms.AuthenticationForm` used by the :class:`~django.contrib."
"auth.views.LoginView` by overriding the :meth:`~django.contrib.auth.forms."
"AuthenticationForm.confirm_login_allowed` method as it rejects inactive "
"users."
msgstr ""
"このバックエンドを使用する際は、おそらく、 :class:`~django.contrib.auth."
"views.LoginView` で使用される :class:`~django.contrib.auth.forms."
"AuthenticationForm` クラスをカスタマイズしたいと思うでしょう。非アクティブな"
"ユーザーを拒否する :meth:`~django.contrib.auth.forms.AuthenticationForm."
"confirm_login_allowed` メソッドをオーバーライドすることが推奨されます。"

msgid ""
"Use this backend to take advantage of external-to-Django-handled "
"authentication.  It authenticates using usernames passed in :attr:`request."
"META['REMOTE_USER'] <django.http.HttpRequest.META>`.  See the :doc:"
"`Authenticating against REMOTE_USER </howto/auth-remote-user>` documentation."
msgstr ""
"このバックエンドを使用して、Django 以外で処理される外部認証を利用します。これ"
"は、 :attr:`request.META['REMOTE_USER'] <django.http.HttpRequest.META>` に渡"
"されたユーザ名を使用して認証を行います。詳細は、 :doc:`REMOTE_USER を使った認"
"証方法 </howto/auth-remote-user>` のドキュメントを参照してください。"

msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from this class and override these attributes or methods:"
msgstr ""
"もしより細かな制御が必要な場合は、このクラスを継承した独自の認証バックエンド"
"を作成し、これらの属性やメソッドをオーバーライドできます。"

msgid ""
"``True`` or ``False``. Determines whether or not a user object is created if "
"not already in the database  Defaults to ``True``."
msgstr ""
"``True`` または ``False`` 。データベースにユーザーオブジェクトが存在しない場"
"合に、作成するかどうかを決定します。 デフォルトは ``True`` です。"

msgid ""
"The username passed as ``remote_user`` is considered trusted. This method "
"returns the user object with the given username, creating a new user object "
"if :attr:`~RemoteUserBackend.create_unknown_user` is ``True``."
msgstr ""
"渡された ``remote_user`` というユーザー名は信頼されたものとして扱われます。こ"
"のメソッドは、指定されたユーザー名のユーザーオブジェクトを返し、:attr:"
"`~RemoteUserBackend.create_unknown_user` が ``True`` の場合は新しいユーザーオ"
"ブジェクトを作成します。"

msgid ""
"Returns ``None`` if :attr:`~RemoteUserBackend.create_unknown_user` is "
"``False`` and a ``User`` object with the given username is not found in the "
"database."
msgstr ""
":attr:`~RemoteUserBackend.create_unknown_user` が ``False`` であり、指定され"
"たユーザー名の ``User`` オブジェクトがデータベースに見つからない場合、"
"``None`` を返します。"

msgid ""
"Performs any cleaning on the ``username`` (e.g. stripping LDAP DN "
"information) prior to using it to get or create a user object. Returns the "
"cleaned username."
msgstr ""
"ユーザー名の使用前に (LDAP DN 情報を取り除くなど) ``username`` に対して任意の"
"クリーニングを実行します。クリーニングされたユーザー名を返します。"

msgid ""
"Configures the user on each authentication attempt. This method is called "
"immediately after fetching or creating the user being authenticated, and can "
"be used to perform custom setup actions, such as setting the user's groups "
"based on attributes in an LDAP directory. Returns the user object."
msgstr ""
"認証を試みるたびにユーザを設定します。このメソッドは、認証対象のユーザを取得"
"または作成した直後にコールされ、 LDAP ディレクトリの属性に基づいてユーザのグ"
"ループを設定するなどのカスタム設定アクションを実行するために使用できます。"
"ユーザオブジェクトを返します。"

msgid ""
"The setup can be performed either once when the user is created (``created`` "
"is ``True``) or on existing users (``created`` is ``False``) as a way of "
"synchronizing attributes between the remote and the local systems."
msgstr ""
"この設定は、リモートとローカルのシステム間で属性を同期させる方法として、ユー"
"ザーの作成時に一度だけ実行することもできますし (``created`` は ``True``)、既"
"存のユーザーに対して実行することもできます (``created`` は ``False``)。"

msgid ""
"Returns whether the user is allowed to authenticate. This method returns "
"``False`` for users with :attr:`is_active=False <django.contrib.auth.models."
"User.is_active>`. Custom user models that don't have an :attr:`~django."
"contrib.auth.models.CustomUser.is_active` field are allowed."
msgstr ""
"ユーザが認証を許可されているかどうかを返します。このメソッドは :attr:"
"`is_active=False <django.contrib.auth.models.User.is_active>` を持つユーザに"
"対して ``False`` を返します。 :attr:`~django.contrib.auth.models.CustomUser."
"is_active` フィールドを持たないカスタムユーザモデルは許可されます。"

msgid ""
"Same as :class:`RemoteUserBackend` except that it doesn't reject inactive "
"users because :attr:`~RemoteUserBackend.user_can_authenticate` always "
"returns ``True``."
msgstr ""
":class:`RemoteUserBackend` と同じですが、 :attr:`~RemoteUserBackend."
"user_can_authenticate` は常に ``True`` を返すため、非アクティブなユーザを拒否"
"しない点が異なります。"

msgid "Utility functions"
msgstr "ユーティリティ関数"

msgid "*Asynchronous version*: ``aget_user()``"
msgstr "*非同期バージョン:* ``aget_user()``"

msgid ""
"Returns the user model instance associated with the given ``request``’s "
"session."
msgstr ""
"与えられた ``request`` のセッションに関連付けられたユーザモデルのインスタンス"
"を返します。"

msgid ""
"It checks if the authentication backend stored in the session is present in :"
"setting:`AUTHENTICATION_BACKENDS`. If so, it uses the backend's "
"``get_user()`` method to retrieve the user model instance and then verifies "
"the session by calling the user model's :meth:`~django.contrib.auth.models."
"AbstractBaseUser.get_session_auth_hash` method. If the verification fails "
"and :setting:`SECRET_KEY_FALLBACKS` are provided, it verifies the session "
"against each fallback key using :meth:`~django.contrib.auth.models."
"AbstractBaseUser.\\ get_session_auth_fallback_hash`."
msgstr ""
"セッションに保存されている認証バックエンドが :setting:"
"`AUTHENTICATION_BACKENDS` に存在するかどうかをチェックします。もし存在すれ"
"ば、バックエンドの ``get_user()`` メソッドを使ってユーザーモデルのインスタン"
"スを取得し、ユーザーモデルの :meth:`~django.contrib.auth.models."
"AbstractBaseUser.get_session_auth_hash` メソッドを呼び出してセッションを検証"
"します。検証に失敗し、 :setting:`SECRET_KEY_FALLBACKS` が指定された場合、 :"
"meth:`~django.contrib.auth.models.AbstractBaseUser.\\ "
"get_session_auth_fallback_hash` メソッドを使用して各フォールバックキーに対し"
"てセッションを検証します。"

msgid ""
"Returns an instance of :class:`~django.contrib.auth.models.AnonymousUser` if "
"the authentication backend stored in the session is no longer in :setting:"
"`AUTHENTICATION_BACKENDS`, if a user isn't returned by the backend's "
"``get_user()`` method, or if the session auth hash doesn't validate."
msgstr ""
"セッションに保存されている認証バックエンドが :setting:"
"`AUTHENTICATION_BACKENDS` にない場合、バックエンドの ``get_user()`` メソッド"
"でユーザが返されない場合、またはセッションの認証ハッシュが検証されない場"
"合、 :class:`~django.contrib.auth.models.AnonymousUser` のインスタンスを返し"
"ます。"

msgid "Fallback verification with :setting:`SECRET_KEY_FALLBACKS` was added."
msgstr ""
":setting:`SECRET_KEY_FALLBACKS` を使用したフォールバックの検証が追加されまし"
"た。"

msgid "``aget_user()`` function was added."
msgstr "``aget_user()`` 関数が追加されました。"

msgid "The contenttypes framework"
msgstr "contenttypes フレームワーク"

msgid ""
"Django includes a :mod:`~django.contrib.contenttypes` application that can "
"track all of the models installed in your Django-powered project, providing "
"a high-level, generic interface for working with your models."
msgstr ""
"Django には :mod:`~django.contrib.contenttypes` アプリケーションが含まれてお"
"り、 Django を使ったプロジェクトにインストールされているすべてのモデルを追跡"
"し、モデルを扱うための高レベルで汎用的なインターフェースを提供します。"

msgid ""
"At the heart of the contenttypes application is the :class:`~django.contrib."
"contenttypes.models.ContentType` model, which lives at ``django.contrib."
"contenttypes.models.ContentType``. Instances of :class:`~django.contrib."
"contenttypes.models.ContentType` represent and store information about the "
"models installed in your project, and new instances of :class:`~django."
"contrib.contenttypes.models.ContentType` are automatically created whenever "
"new models are installed."
msgstr ""
"contenttypes アプリケーションの中心にあるのは、 ``django.contrib."
"contenttypes.models.ContentType`` にある :class:`~django.contrib."
"contenttypes.models.ContentType` モデルです。 :class:`~django.contrib."
"contenttypes.models.ContentType` のインスタンスは、プロジェクトにインストール"
"されたモデルに関する情報を表し、格納します。新しい :class:`~django.contrib."
"contenttypes.models.ContentType` のインスタンスは、新しいモデルがインストール"
"されるたびに自動的に作成されます。"

msgid ""
"Instances of :class:`~django.contrib.contenttypes.models.ContentType` have "
"methods for returning the model classes they represent and for querying "
"objects from those models. :class:`~django.contrib.contenttypes.models."
"ContentType` also has a :ref:`custom manager <custom-managers>` that adds "
"methods for working with :class:`~django.contrib.contenttypes.models."
"ContentType` and for obtaining instances of :class:`~django.contrib."
"contenttypes.models.ContentType` for a particular model."
msgstr ""
":class:`~django.contrib.contenttypes.models.ContentType` のインスタンスは :"
"class:`~django.contrib.contenttypes.models.ContentType` が表すモデルクラスを"
"返すメソッドと、それらのモデルからオブジェクトを問い合わせるメソッドを持って"
"います。また、 :class:`~django.contrib.contenttypes.models.ContentType` を操"
"作するためのメソッドや、特定のモデルの :class:`~django.contrib.contenttypes."
"models.ContentType` のインスタンスを取得するためのメソッドを追加する :ref:`カ"
"スタムマネージャ <custom-managers>` もあります。"

msgid ""
"Relations between your models and :class:`~django.contrib.contenttypes."
"models.ContentType` can also be used to enable \"generic\" relationships "
"between an instance of one of your models and instances of any model you "
"have installed."
msgstr ""
"あなたのモデルと :class:`~django.contrib.contenttypes.models.ContentType` の"
"間のリレーションシップを利用することで、あなたのモデルのインスタンスとインス"
"トールされている任意のモデルのインスタンスとの間で「汎用的（ジェネリック）」"
"なリレーションシップを有効にすることもできます。"

msgid "Installing the contenttypes framework"
msgstr "contenttypes フレームワークをインストールする"

msgid ""
"The contenttypes framework is included in the default :setting:"
"`INSTALLED_APPS` list created by ``django-admin startproject``, but if "
"you've removed it or if you manually set up your :setting:`INSTALLED_APPS` "
"list, you can enable it by adding ``'django.contrib.contenttypes'`` to your :"
"setting:`INSTALLED_APPS` setting."
msgstr ""
"contenttypes フレームワークは、``django-admin startproject`` によって作成され"
"るデフォルトの :setting:`INSTALLED_APPS` リストに含まれていますが、もし削除し"
"たり、手動で :setting:`INSTALLED_APPS` リストを設定した場合は、 ``'django."
"contrib.contenttypes'`` を :setting:`INSTALLED_APPS` 設定に追加することで有効"
"にできます。"

msgid ""
"It's generally a good idea to have the contenttypes framework installed; "
"several of Django's other bundled applications require it:"
msgstr ""
"通常は、contenttypes フレームワークをインストールしておくのがよいでしょう。"
"Django の他のバンドルアプリケーションのいくつかはそれを必要とします:"

msgid ""
"The admin application uses it to log the history of each object added or "
"changed through the admin interface."
msgstr ""
"admin アプリケーションは、管理インターフェイスを通じて追加・変更された各オブ"
"ジェクトの履歴を記録するためにこれを使用します。"

msgid ""
"Django's :mod:`authentication framework <django.contrib.auth>` uses it to "
"tie user permissions to specific models."
msgstr ""
"Django の :mod:`認証フレームワーク <django.contrib.auth>` は、ユーザーの権限"
"を特定のモデルに紐づけるのに使用されます。"

msgid "The ``ContentType`` model"
msgstr "``ContentType`` モデル"

msgid ""
"Each instance of :class:`~django.contrib.contenttypes.models.ContentType` "
"has two fields which, taken together, uniquely describe an installed model:"
msgstr ""
":class:`~django.contrib.contenttypes.models.ContentType` の各インスタンスは、"
"2 つのフィールドを持ち、それらを合わせると、インストールされたモデルを一意に"
"特定します:"

msgid ""
"The name of the application the model is part of. This is taken from the :"
"attr:`app_label` attribute of the model, and includes only the *last* part "
"of the application's Python import path; ``django.contrib.contenttypes``, "
"for example, becomes an :attr:`app_label` of ``contenttypes``."
msgstr ""
"モデルが属するアプリケーションの名前です。これはモデルの :attr:`app_label` 属"
"性から取得され、アプリケーションの Python インポートパスの *最後* の部分のみ"
"が含まれます。例えば、 ``django.contrib.contenttypes`` の :attr:`app_label` "
"は ``contenttypes`` になります。"

msgid "The name of the model class."
msgstr "モデルクラスの名前。"

msgid "Additionally, the following property is available:"
msgstr "さらに、次のプロパティが利用可能です:"

msgid ""
"The human-readable name of the content type. This is taken from the :attr:"
"`verbose_name <django.db.models.Field.verbose_name>` attribute of the model."
msgstr ""
"コンテンツタイプの人間が読める名前です。これはモデルの :attr:`verbose_name "
"<django.db.models.Field.verbose_name>` 属性から取得されます。"

msgid ""
"Let's look at an example to see how this works. If you already have the :mod:"
"`~django.contrib.contenttypes` application installed, and then add :mod:`the "
"sites application <django.contrib.sites>` to your :setting:`INSTALLED_APPS` "
"setting and run ``manage.py migrate`` to install it, the model :class:"
"`django.contrib.sites.models.Site` will be installed into your database. "
"Along with it a new instance of :class:`~django.contrib.contenttypes.models."
"ContentType` will be created with the following values:"
msgstr ""
"どのように動作するか、例を見てみましょう。すでに :mod:`~django.contrib."
"contenttypes` アプリケーションがインストールされていて、 :mod:`sites アプリ"
"ケーション <django.contrib.sites>` を :setting:`INSTALLED_APPS` 設定に追加"
"し、 ``manage.py migrate`` を実行してインストールすると、 :class:`django."
"contrib.sites.models.Site` というモデルがデータベースにインストールされます。"
"それと一緒に :class:`~django.contrib.contenttypes.models.ContentType` の新し"
"いインスタンスが以下の値で作成されます:"

msgid ""
":attr:`~django.contrib.contenttypes.models.ContentType.app_label` will be "
"set to ``'sites'`` (the last part of the Python path ``django.contrib."
"sites``)."
msgstr ""
":attr:`~django.contrib.contenttypes.models.ContentType.app_label` は "
"``'sites'`` (Python のパス ``django.contrib.sites`` の最後の部分) に設定され"
"ます。"

msgid ""
":attr:`~django.contrib.contenttypes.models.ContentType.model` will be set to "
"``'site'``."
msgstr ""
":attr:`~django.contrib.contenttypes.models.ContentType.model` は ``'site'`` "
"に設定されます。"

msgid "Methods on ``ContentType`` instances"
msgstr "``ContentType`` インスタンスのメソッド"

msgid ""
"Each :class:`~django.contrib.contenttypes.models.ContentType` instance has "
"methods that allow you to get from a :class:`~django.contrib.contenttypes."
"models.ContentType` instance to the model it represents, or to retrieve "
"objects from that model:"
msgstr ""
"各 :class:`~django.contrib.contenttypes.models.ContentType` インスタンスに"
"は、そのインスタンスが表すモデルに移動したり、 :class:`~django.contrib."
"contenttypes.models.ContentType` からオブジェクトを取得したりするためのメソッ"
"ドがあります。"

msgid ""
"Takes a set of valid :ref:`lookup arguments <field-lookups-intro>` for the "
"model the :class:`~django.contrib.contenttypes.models.ContentType` "
"represents, and does :meth:`a get() lookup <django.db.models.query.QuerySet."
"get>` on that model, returning the corresponding object."
msgstr ""
":class:`~django.contrib.contenttypes.models.ContentType` が表すモデルの有効"
"な :ref:`lookup 引数 <field-lookups-intro>` のセットを受け取り、そのモデル上"
"で :meth:`get() ルックアップ <django.db.models.query.QuerySet.get>` を実行"
"し、対応するオブジェクトを返します。"

msgid ""
"Returns the model class represented by this :class:`~django.contrib."
"contenttypes.models.ContentType` instance."
msgstr ""
"この :class:`~django.contrib.contenttypes.models.ContentType` インスタンスが"
"表すモデルクラスを返します。"

msgid ""
"For example, we could look up the :class:`~django.contrib.contenttypes."
"models.ContentType` for the :class:`~django.contrib.auth.models.User` model:"
msgstr ""
"たとえば、:class:`~django.contrib.auth.models.User` モデルの :class:`~django."
"contrib.contenttypes.models.ContentType` を調べることができます。"

msgid ""
"And then use it to query for a particular :class:`~django.contrib.auth."
"models.User`, or to get access to the ``User`` model class:"
msgstr ""
"そして、特定の :class:`~django.contrib.auth.models.User` に対するクエリ、また"
"は ``User`` モデルクラスへのアクセスを取得するために使用します:"

msgid ""
"Together, :meth:`~django.contrib.contenttypes.models.ContentType."
"get_object_for_this_type` and :meth:`~django.contrib.contenttypes.models."
"ContentType.model_class` enable two extremely important use cases:"
msgstr ""
":meth:`~django.contrib.contenttypes.models.ContentType."
"get_object_for_this_type` と :meth:`~django.contrib.contenttypes.models."
"ContentType.model_class` を併用することで、2つの非常に重要なユースケースが可"
"能になります:"

msgid ""
"Using these methods, you can write high-level generic code that performs "
"queries on any installed model -- instead of importing and using a single "
"specific model class, you can pass an ``app_label`` and ``model`` into a :"
"class:`~django.contrib.contenttypes.models.ContentType` lookup at runtime, "
"and then work with the model class or retrieve objects from it."
msgstr ""
"これらのメソッドを使うことで、インストールされた任意のモデルに対してクエリを"
"実行する高レベルの汎用コードを書くことができます。特定のモデルクラスをイン"
"ポートして使うのではなく、実行時に ``app_label`` と ``model`` を :class:"
"`~django.contrib.contenttypes.models.ContentType` ルックアップに渡すことで、"
"モデルクラスを操作したり、そこからオブジェクトを取得したりすることができま"
"す。"

msgid ""
"You can relate another model to :class:`~django.contrib.contenttypes.models."
"ContentType` as a way of tying instances of it to particular model classes, "
"and use these methods to get access to those model classes."
msgstr ""
":class:`~django.contrib.contenttypes.models.ContentType` は、別のモデルと関連"
"付けることができ、これによってそのインスタンスを特定のモデルクラスに紐付ける"
"ことができます。これらのメソッドを使用することで、これらのモデルクラスにアク"
"セスできます。"

msgid ""
"Several of Django's bundled applications make use of the latter technique. "
"For example, :class:`the permissions system <django.contrib.auth.models."
"Permission>` in Django's authentication framework uses a :class:`~django."
"contrib.auth.models.Permission` model with a foreign key to :class:`~django."
"contrib.contenttypes.models.ContentType`; this lets :class:`~django.contrib."
"auth.models.Permission` represent concepts like \"can add blog entry\" or "
"\"can delete news story\"."
msgstr ""
"Django のバンドルされているアプリケーションのいくつかは、後者のテクニックを利"
"用しています。例えば、Django の認証フレームワークの :class:`パーミッションシ"
"ステム <django.contrib.auth.models.Permission>` は、 :class:`~django.contrib."
"auth.models.Permission` モデルを :class:`~django.contrib.contenttypes.models."
"ContentType` の外部キーとして使っています。これにより、 :class:`~django."
"contrib.auth.models.Permission` は「ブログのエントリを追加できる」とか"
"「ニュース記事を削除できる」といった概念を表現できます。"

msgid "The ``ContentTypeManager``"
msgstr "``ContentTypeManager``"

msgid ""
":class:`~django.contrib.contenttypes.models.ContentType` also has a custom "
"manager, :class:`~django.contrib.contenttypes.models.ContentTypeManager`, "
"which adds the following methods:"
msgstr ""
":class:`~django.contrib.contenttypes.models.ContentType` にはカスタムマネー"
"ジャー :class:`~django.contrib.contenttypes.models.ContentTypeManager` もあ"
"り、以下のメソッドが追加されています:"

msgid ""
"Clears an internal cache used by :class:`~django.contrib.contenttypes.models."
"ContentType` to keep track of models for which it has created :class:"
"`~django.contrib.contenttypes.models.ContentType` instances. You probably "
"won't ever need to call this method yourself; Django will call it "
"automatically when it's needed."
msgstr ""
":class:`~django.contrib.contenttypes.models.ContentType` が使用する内部キャッ"
"シュをクリアし、 :class:`~django.contrib.contenttypes.models.ContentType` イ"
"ンスタンスを作成したモデルの追跡を行います。おそらく、このメソッドを自分で呼"
"び出す必要はほとんどありません。必要なタイミングでDjangoが自動的に呼び出しま"
"す。"

msgid ""
"Lookup a :class:`~django.contrib.contenttypes.models.ContentType` by ID. "
"Since this method uses the same shared cache as :meth:`~django.contrib."
"contenttypes.models.ContentTypeManager.get_for_model`, it's preferred to use "
"this method over the usual ``ContentType.objects.get(pk=id)``"
msgstr ""
":class:`~django.contrib.contenttypes.models.ContentType` を ID でルックアップ"
"します。このメソッドは :meth:`~django.contrib.contenttypes.models."
"ContentTypeManager.get_for_model` と同じ共有キャッシュを使用するので、通常の "
"``ContentType.objects.get(pk=id)`` よりもこのメソッドを使用することをお勧めし"
"ます。"

msgid ""
"Takes either a model class or an instance of a model, and returns the :class:"
"`~django.contrib.contenttypes.models.ContentType` instance representing that "
"model. ``for_concrete_model=False`` allows fetching the :class:`~django."
"contrib.contenttypes.models.ContentType` of a proxy model."
msgstr ""
"モデルクラスかモデルのインスタンスを受け取り、そのモデルを表す :class:"
"`~django.contrib.contenttypes.models.ContentType` インスタンスを返します。 "
"``for_concrete_model=False`` はプロキシモデルの :class:`~django.contrib."
"contenttypes.models.ContentType` を取得することを許可します。"

msgid ""
"Takes a variadic number of model classes, and returns a dictionary mapping "
"the model classes to the :class:`~django.contrib.contenttypes.models."
"ContentType` instances representing them. ``for_concrete_models=False`` "
"allows fetching the :class:`~django.contrib.contenttypes.models.ContentType` "
"of proxy models."
msgstr ""
"モデルクラスを任意の個数受け取り、モデルクラスを :class:`~django.contrib."
"contenttypes.models.ContentType` インスタンスにマッピングした辞書を返しま"
"す。 ``for_concrete_models=False`` により、プロキシモデルの :class:`~django."
"contrib.contenttypes.models.ContentType` を取得できます。"

msgid ""
"Returns the :class:`~django.contrib.contenttypes.models.ContentType` "
"instance uniquely identified by the given application label and model name. "
"The primary purpose of this method is to allow :class:`~django.contrib."
"contenttypes.models.ContentType` objects to be referenced via a :ref:"
"`natural key<topics-serialization-natural-keys>` during deserialization."
msgstr ""
"与えられたアプリケーションラベルとモデル名で一意に識別される :class:`~django."
"contrib.contenttypes.models.ContentType` インスタンスを返します。このメソッド"
"の主な目的は、 :class:`~django.contrib.contenttypes.models.ContentType` オブ"
"ジェクトをデシリアライズ時に :ref:`ナチュラルキー <topics-serialization-"
"natural-keys>` から参照できるようにすることです。"

msgid ""
"The :meth:`~ContentTypeManager.get_for_model()` method is especially useful "
"when you know you need to work with a :class:`ContentType <django.contrib."
"contenttypes.models.ContentType>` but don't want to go to the trouble of "
"obtaining the model's metadata to perform a manual lookup:"
msgstr ""
":meth:`~ContentTypeManager.get_for_model()` メソッドは、 :class:`ContentType "
"<django.contrib.contenttypes.models.ContentType>` を扱う必要があることがわ"
"かっているが、わざわざモデルのメタデータを取得して手動でルックアップを行うの"
"は面倒だという場合に特に便利です:"

msgid "Generic relations"
msgstr "ジェネリックリレーション（汎用リレーション）"

msgid ""
"Adding a foreign key from one of your own models to :class:`~django.contrib."
"contenttypes.models.ContentType` allows your model to effectively tie itself "
"to another model class, as in the example of the :class:`~django.contrib."
"auth.models.Permission` model above. But it's possible to go one step "
"further and use :class:`~django.contrib.contenttypes.models.ContentType` to "
"enable truly generic (sometimes called \"polymorphic\") relationships "
"between models."
msgstr ""
":class:`~django.contrib.contenttypes.models.ContentType` に自分のモデルの外部"
"キーを追加することで、上記の :class:`~django.contrib.auth.models.Permission` "
"モデルの例のように、モデル自身を他のモデルクラスに効果的に結びつけることがで"
"きます。しかし、もう一歩進んで :class:`~django.contrib.contenttypes.models."
"ContentType` を使うことで、モデル間の本当に汎用的な (時に \"多相的 (ポリモー"
"フィック)\" と呼ばれる) リレーションシップを実現できます。"

msgid "For example, it could be used for a tagging system like so::"
msgstr "たとえば、次のようにしてタグ付けシステムに使用できます:"

msgid ""
"A normal :class:`~django.db.models.ForeignKey` can only \"point to\" one "
"other model, which means that if the ``TaggedItem`` model used a :class:"
"`~django.db.models.ForeignKey` it would have to choose one and only one "
"model to store tags for. The contenttypes application provides a special "
"field type (``GenericForeignKey``) which works around this and allows the "
"relationship to be with any model:"
msgstr ""
"通常の :class:`~django.db.models.ForeignKey` は、ほかのモデルを単一指定するこ"
"としかできません。つまり、 ``TaggedItem`` モデルが :class:`~django.db.models."
"ForeignKey` を使用する場合、タグを格納する単一のモデルを選択する必要がありま"
"す。contenttypes アプリケーションは特別なフィールド型(``GenericForeignKey``) "
"を提供し、これにより、リレーションシップを任意のモデルと設定できます。"

msgid ""
"There are three parts to setting up a :class:`~django.contrib.contenttypes."
"fields.GenericForeignKey`:"
msgstr ""
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` の設定には3つ"
"の部分があります: "

msgid ""
"Give your model a :class:`~django.db.models.ForeignKey` to :class:`~django."
"contrib.contenttypes.models.ContentType`. The usual name for this field is "
"\"content_type\"."
msgstr ""
"モデルに :class:`~django.contrib.contenttypes.models.ContentType` への :"
"class:`~django.db.models.ForeignKey` を持たせます。通常、このフィールドの名前"
"は \"content_type\" となります。"

msgid ""
"Give your model a field that can store primary key values from the models "
"you'll be relating to. For most models, this means a :class:`~django.db."
"models.PositiveIntegerField`. The usual name for this field is \"object_id\"."
msgstr ""
"モデルに、リレーション先モデルの主キー値を格納できるフィールドを与えます。ほ"
"とんどのモデルの場合、これは :class:`~django.db.models.PositiveIntegerField` "
"を意味します。このフィールドの通常の名前は \"object_id\" です。"

msgid ""
"Give your model a :class:`~django.contrib.contenttypes.fields."
"GenericForeignKey`, and pass it the names of the two fields described above. "
"If these fields are named \"content_type\" and \"object_id\", you can omit "
"this -- those are the default field names :class:`~django.contrib."
"contenttypes.fields.GenericForeignKey` will look for."
msgstr ""
"モデルに :class:`~django.contrib.contenttypes.fields.GenericForeignKey` を与"
"え、上記の2つのフィールド名を渡します。これらのフィールドの名前が "
"\"content_type\" と \"object_id\" である場合、省略できます。これらは :class:"
"`~django.contrib.contenttypes.fields.GenericForeignKey` が探すデフォルトの"
"フィールド名です。"

msgid ""
"Unlike for the :class:`~django.db.models.ForeignKey`, a database index is "
"*not* automatically created on the :class:`~django.contrib.contenttypes."
"fields.GenericForeignKey`, so it's recommended that you use :attr:`Meta."
"indexes <django.db.models.Options.indexes>` to add your own multiple column "
"index. This behavior :ticket:`may change <23435>` in the future."
msgstr ""
":class:`~django.db.models.ForeignKey` とは異なり、データベースインデックス"
"は :class:`~django.contrib.contenttypes.fields.GenericForeignKey` には自動的"
"に作成 *されません* ので、 :attr:`Meta.indexes <django.db.models.Options."
"indexes>` を使って独自の複数カラムインデックスを追加することをお勧めします。"
"この動作は将来 :ticket:`変更されるかも知れません <23435>` 。"

msgid ""
"If ``False``, the field will be able to reference proxy models. Default is "
"``True``. This mirrors the ``for_concrete_model`` argument to :meth:`~django."
"contrib.contenttypes.models.ContentTypeManager.get_for_model`."
msgstr ""
"``False`` の場合、フィールドはプロキシモデルを参照できます。デフォルトは "
"``True`` です。これは :meth:`~django.contrib.contenttypes.models."
"ContentTypeManager.get_for_model` への引数 ``for_concrete_model`` を反映した"
"ものです。"

msgid "Primary key type compatibility"
msgstr "プライマリキーの型の互換性"

msgid ""
"The \"object_id\" field doesn't have to be the same type as the primary key "
"fields on the related models, but their primary key values must be coercible "
"to the same type as the \"object_id\" field by its :meth:`~django.db.models."
"Field.get_db_prep_value` method."
msgstr ""
"\"object_id\" フィールドは、リレーション先モデルの主キーフィールドと同じ型で"
"ある必要はありませんが、その主キーの値は、\"object_id\" フィールドの :meth:"
"`~django.db.models.Field.get_db_prep_value` メソッドによって同じ型に変換可能"
"でなければなりません。"

msgid ""
"For example, if you want to allow generic relations to models with either :"
"class:`~django.db.models.IntegerField` or :class:`~django.db.models."
"CharField` primary key fields, you can use :class:`~django.db.models."
"CharField` for the \"object_id\" field on your model since integers can be "
"coerced to strings by :meth:`~django.db.models.Field.get_db_prep_value`."
msgstr ""
"たとえば、 :class:`~django.db.models.IntegerField` または :class:`~django.db."
"models.CharField` のどちらかの主キーフィールドを持つモデルに対してジェネリッ"
"クリレーションを許可したい場合、モデルの \"object_id\" フィールドには :class:"
"`~django.db.models.CharField` を使用できます。整数は :meth:`~django.db."
"models.Field.get_db_prep_value` によって文字列に変換できるためです。"

msgid ""
"For maximum flexibility you can use a :class:`~django.db.models.TextField` "
"which doesn't have a maximum length defined, however this may incur "
"significant performance penalties depending on your database backend."
msgstr ""
"最大の柔軟性を得るには、定義された最大長がない :class:`~django.db.models."
"TextField` を使用できますが、データベースのバックエンドによっては、それにより"
"重大なパフォーマンスペナルティが発生する可能性があります。"

msgid ""
"There is no one-size-fits-all solution for which field type is best. You "
"should evaluate the models you expect to be pointing to and determine which "
"solution will be most effective for your use case."
msgstr ""
"どのフィールドタイプが最適かについて、汎用的な解決策はありません。参照するモ"
"デルを評価し、ユースケースに最も効果的な解決策を決定してください。"

msgid "Serializing references to ``ContentType`` objects"
msgstr "``ContentType`` オブジェクトへの参照をシリアライズする"

msgid ""
"If you're serializing data (for example, when generating :class:`~django."
"test.TransactionTestCase.fixtures`) from a model that implements generic "
"relations, you should probably be using a natural key to uniquely identify "
"related :class:`~django.contrib.contenttypes.models.ContentType` objects. "
"See :ref:`natural keys<topics-serialization-natural-keys>` and :option:"
"`dumpdata --natural-foreign` for more information."
msgstr ""
"ジェネリックリレーションを実装したモデルからデータをシリアライズする場合 (例"
"えば :class:`~django.test.TransactionTestCase.fixtures` を生成する場合)、関連"
"する :class:`~django.contrib.contenttypes.models.ContentType` オブジェクトを"
"一意に識別するためにナチュラルキーを使用する必要があるでしょう。詳しくは :"
"ref:`ナチュラルキー <topics-serialization-natural-keys>` と :option:"
"`dumpdata --natural-foreign` を参照してください。"

msgid ""
"This will enable an API similar to the one used for a normal :class:`~django."
"db.models.ForeignKey`; each ``TaggedItem`` will have a ``content_object`` "
"field that returns the object it's related to, and you can also assign to "
"that field or use it when creating a ``TaggedItem``:"
msgstr ""
"これにより、通常の :class:`~django.db.models.ForeignKey` と同じような API が"
"利用できるようになります。各 ``TaggedItem`` は、関連するオブジェクトを返す "
"``content_object`` フィールドを持ち、そのフィールドに代入したり、 "
"``TaggedItem`` を作成する際に使用したりすることができます:"

msgid ""
"If the related object is deleted, the ``content_type`` and ``object_id`` "
"fields remain set to their original values and the ``GenericForeignKey`` "
"returns ``None``:"
msgstr ""
"リレーション先オブジェクトが削除された場合、 ``content_type`` フィールドと "
"``object_id`` フィールドは元の値のままとなり、 ``GenericForeignKey`` は "
"``None`` を返します:"

msgid ""
"Due to the way :class:`~django.contrib.contenttypes.fields."
"GenericForeignKey` is implemented, you cannot use such fields directly with "
"filters (``filter()`` and ``exclude()``, for example) via the database API. "
"Because a :class:`~django.contrib.contenttypes.fields.GenericForeignKey` "
"isn't a normal field object, these examples will *not* work:"
msgstr ""
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` が実装されてい"
"るため、このようなフィールドをデータベース API 経由のフィルタ (``filter()`` "
"や ``exclude()`` など) で直接使用することはできません。 :class:`~django."
"contrib.contenttypes.fields.GenericForeignKey` は通常のフィールドオブジェクト"
"ではないので、これらの例は動作 *しません* :"

msgid ""
"Likewise, :class:`~django.contrib.contenttypes.fields.GenericForeignKey`\\s "
"does not appear in :class:`~django.forms.ModelForm`\\s."
msgstr ""
"同様に、 :class:`~django.contrib.contenttypes.fields.GenericForeignKey` は :"
"class:`~django.forms.ModelForm` 内には表示されません。"

msgid "Reverse generic relations"
msgstr "逆ジェネリックリレーション (Reverse generic relation)"

msgid ""
"The relation on the related object back to this object doesn't exist by "
"default. Setting ``related_query_name`` creates a relation from the related "
"object back to this one. This allows querying and filtering from the related "
"object."
msgstr ""
"リレーション先オブジェクトに対する逆のリレーションはデフォルトでは存在しませ"
"ん。 ``related_query_name`` を設定すると、リレーション先オブジェクトからこの"
"オブジェクトへのリレーションが作成されます。これにより、リレーション先オブ"
"ジェクトからのクエリやフィルタリングが可能になります。"

msgid ""
"If you know which models you'll be using most often, you can also add a "
"\"reverse\" generic relationship to enable an additional API. For example::"
msgstr ""
"どのモデルをよく使うかわかっている場合は、\"逆\" ジェネリックリレーションシッ"
"プを追加して、追加のAPIを有効にすることもできます。たとえば:"

msgid ""
"``Bookmark`` instances will each have a ``tags`` attribute, which can be "
"used to retrieve their associated ``TaggedItems``:"
msgstr ""
"各 \"Bookmark\" インスタンスには、 ``tags`` という属性があります。これを使用"
"して、リレーション先の ``TaggedItems`` を取得できます。"

msgid ""
"You can also use ``add()``, ``create()``, or ``set()`` to create "
"relationships:"
msgstr ""
"また、 ``add()``, ``create()``, ``set()`` を使ってリレーションシップを作成す"
"ることもできます:"

msgid "The ``remove()`` call will bulk delete the specified model objects:"
msgstr ""
"``remove()`` メソッドは指定されたモデルオブジェクトを一括で削除します。"

msgid ""
"The ``clear()`` method can be used to bulk delete all related objects for an "
"instance:"
msgstr ""
"``clear()`` メソッドは、インスタンスのリレーション先のすべてのオブジェクトを"
"一括削除するために使用できます。"

msgid ""
"Defining :class:`~django.contrib.contenttypes.fields.GenericRelation` with "
"``related_query_name`` set allows querying from the related object::"
msgstr ""
"``related_query_name`` を設定して :class:`~django.contrib.contenttypes."
"fields.GenericRelation` を定義すると、リレーション先オブジェクトからクエリを"
"行うことができます。"

msgid ""
"This enables filtering, ordering, and other query operations on ``Bookmark`` "
"from ``TaggedItem``:"
msgstr ""
"これにより、``TaggedItem`` から ``Bookmark`` に対するフィルタリング、ソート、"
"その他のクエリ操作が可能になります:"

msgid ""
"If you don't add the ``related_query_name``, you can do the same types of "
"lookups manually:"
msgstr ""
"``related_query_name`` を追加しない場合、同様のルックアップを手動で行うことが"
"できます:"

msgid ""
"Just as :class:`~django.contrib.contenttypes.fields.GenericForeignKey` "
"accepts the names of the content-type and object-ID fields as arguments, so "
"too does :class:`~django.contrib.contenttypes.fields.GenericRelation`; if "
"the model which has the generic foreign key is using non-default names for "
"those fields, you must pass the names of the fields when setting up a :class:"
"`.GenericRelation` to it. For example, if the ``TaggedItem`` model referred "
"to above used fields named ``content_type_fk`` and ``object_primary_key`` to "
"create its generic foreign key, then a :class:`.GenericRelation` back to it "
"would need to be defined like so::"
msgstr ""
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` が content-"
"type と object-ID フィールドの名前を引数として受け取るのと同様に、 :class:"
"`~django.contrib.contenttypes.fields.GenericRelation` も引数として受け取りま"
"す。ジェネリック外部キーを持つモデルがこれらのフィールドにデフォルト以外の名"
"前を使用している場合、 :class:`.GenericRelation` を設定する際にフィールド名を"
"渡す必要があります。例えば、上記の ``TaggedItem`` モデルが "
"``content_type_fk`` と ``object_primary_key`` というフィールドを使用してジェ"
"ネリック外部キーを作成した場合、 :class:`.GenericRelation` を以下のように定義"
"する必要があります: "

msgid ""
"Note also, that if you delete an object that has a :class:`~django.contrib."
"contenttypes.fields.GenericRelation`, any objects which have a :class:"
"`~django.contrib.contenttypes.fields.GenericForeignKey` pointing at it will "
"be deleted as well. In the example above, this means that if a ``Bookmark`` "
"object were deleted, any ``TaggedItem`` objects pointing at it would be "
"deleted at the same time."
msgstr ""
"また、 :class:`~django.contrib.contenttypes.fields.GenericRelation` を持つオ"
"ブジェクトを削除した場合、 :class:`~django.contrib.contenttypes.fields."
"GenericForeignKey` を持つオブジェクトも削除されることに注意してください。上の"
"例では、 ``Bookmark`` オブジェクトが削除された場合、それを指す "
"``TaggedItem`` オブジェクトも同時に削除されることを意味します。"

msgid ""
"Unlike :class:`~django.db.models.ForeignKey`, :class:`~django.contrib."
"contenttypes.fields.GenericForeignKey` does not accept an :attr:`~django.db."
"models.ForeignKey.on_delete` argument to customize this behavior; if "
"desired, you can avoid the cascade-deletion by not using :class:`~django."
"contrib.contenttypes.fields.GenericRelation`, and alternate behavior can be "
"provided via the :data:`~django.db.models.signals.pre_delete` signal."
msgstr ""
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` は、:class:"
"`~django.db.models.ForeignKey` とは異なり、 :attr:`~django.db.models."
"ForeignKey.on_delete` 引数を受け入れず、この動作をカスタマイズすることはでき"
"ません。必要なら、 :class:`~django.contrib.contenttypes.fields."
"GenericRelation` を使用せずに、カスケード削除を回避でき、 代替の動作は :data:"
"`~django.db.models.signals.pre_delete` シグナルを介して提供できます。"

msgid "Generic relations and aggregation"
msgstr "ジェネリックリレーション (generic relation) と集計 (aggregation)"

msgid ""
":doc:`Django's database aggregation API </topics/db/aggregation>` works with "
"a :class:`~django.contrib.contenttypes.fields.GenericRelation`. For example, "
"you can find out how many tags all the bookmarks have:"
msgstr ""
":doc:`Django のデータベース集計 API </topics/db/aggregation>` は :class:"
"`~django.contrib.contenttypes.fields.GenericRelation` で動作します。例えば、"
"すべてのブックマークのタグの数を調べることができます:"

msgid "Generic relation in forms"
msgstr "フォームにおけるジェネリックリレーション"

msgid "The :mod:`django.contrib.contenttypes.forms` module provides:"
msgstr ""
":mod:`django.contrib.contenttypes.forms` モジュールは、下記を提供します:"

msgid ":class:`BaseGenericInlineFormSet`"
msgstr ":class:`BaseGenericInlineFormSet`"

msgid ""
"A formset factory, :func:`generic_inlineformset_factory`, for use with :"
"class:`~django.contrib.contenttypes.fields.GenericForeignKey`."
msgstr ""
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` を使用するため"
"のフォームセットファクトリ、 :func:`generic_inlineformset_factory` 。"

msgid ""
"Returns a ``GenericInlineFormSet`` using :func:`~django.forms.models."
"modelformset_factory`."
msgstr ""
":func:`~django.forms.models.modelformset_factory` を使用して "
"``GenericInlineFormSet`` を返します。"

msgid ""
"You must provide ``ct_field`` and ``fk_field`` if they are different from "
"the defaults, ``content_type`` and ``object_id`` respectively. Other "
"parameters are similar to those documented in :func:`~django.forms.models."
"modelformset_factory` and :func:`~django.forms.models.inlineformset_factory`."
msgstr ""
"デフォルトの ``content_type`` と ``object_id`` と異なる場合は、それぞれ "
"``ct_field`` と ``fk_field`` を指定する必要があります。その他のパラメータは :"
"func:`~django.forms.models.modelformset_factory` と :func:`~django.forms."
"models.inlineformset_factory` で説明されているものと同様です。"

msgid ""
"The ``for_concrete_model`` argument corresponds to the :class:`~django."
"contrib.contenttypes.fields.GenericForeignKey.for_concrete_model` argument "
"on ``GenericForeignKey``."
msgstr ""
"``for_concrete_model`` 引数は ``GenericForeignKey`` の :class:`~django."
"contrib.contenttypes.fields.GenericForeignKey.for_concrete_model` 引数に対応"
"します。"

msgid "Generic relations in admin"
msgstr "admin におけるジェネリックリレーション"

msgid ""
"The :mod:`django.contrib.contenttypes.admin` module provides :class:`~django."
"contrib.contenttypes.admin.GenericTabularInline` and :class:`~django.contrib."
"contenttypes.admin.GenericStackedInline` (subclasses of :class:`~django."
"contrib.contenttypes.admin.GenericInlineModelAdmin`)"
msgstr ""
":mod:`django.contrib.contenttypes.admin` モジュールは、 :class:`~django."
"contrib.contenttypes.admin.GenericTabularInline` と :class:`~django.contrib."
"contenttypes.admin.GenericStackedInline` (:class:`~django.contrib."
"contenttypes.admin.GenericInlineModelAdmin` のサブクラス) を提供します。"

msgid ""
"These classes and functions enable the use of generic relations in forms and "
"the admin. See the :doc:`model formset </topics/forms/modelforms>` and :ref:"
"`admin <using-generic-relations-as-an-inline>` documentation for more "
"information."
msgstr ""
"これらのクラスと関数は、フォームや admin アプリケーションでジェネリックリレー"
"ションを利用できるようにします。詳細に、:doc:`モデルフォームセット </topics/"
"forms/modelforms>` および :ref:`admin アプリケーション <using-generic-"
"relations-as-an-inline>` のドキュメントを参照してください。"

msgid ""
"The :class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin` "
"class inherits all properties from an :class:`~django.contrib.admin."
"InlineModelAdmin` class. However, it adds a couple of its own for working "
"with the generic relation:"
msgstr ""
":class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin` クラス"
"は :class:`~django.contrib.admin.InlineModelAdmin` クラスの全てのプロパティを"
"継承します。しかし、ジェネリックリレーションを扱うための独自のプロパティをい"
"くつか追加しています:"

msgid ""
"The name of the :class:`~django.contrib.contenttypes.models.ContentType` "
"foreign key field on the model. Defaults to ``content_type``."
msgstr ""
"モデルの外部キーフィールド :class:`~django.contrib.contenttypes.models."
"ContentType` の名前。デフォルトは ``content_type`` です。"

msgid ""
"The name of the integer field that represents the ID of the related object. "
"Defaults to ``object_id``."
msgstr ""
"リレーション先オブジェクトの ID を表す整数フィールドの名前。デフォルトは "
"``object_id`` です。"

msgid ""
"Subclasses of :class:`GenericInlineModelAdmin` with stacked and tabular "
"layouts, respectively."
msgstr ""
":class:`GenericInlineModelAdmin` のサブクラスで、それぞれスタックレイアウトと"
"表形式のレイアウトを持っています。"

msgid "``GenericPrefetch()``"
msgstr "``GenericPrefetch()``"

msgid ""
"This lookup is similar to ``Prefetch()`` and it should only be used on "
"``GenericForeignKey``. The ``querysets`` argument accepts a list of "
"querysets, each for a different ``ContentType``. This is useful for "
"``GenericForeignKey`` with non-homogeneous set of results."
msgstr ""
"このルックアップは ``Prefetch()`` に類似しており、``GenericForeignKey`` 専用"
"に使用されるべきです。``querysets`` 引数は異なる ``ContentType`` 向けのクエリ"
"セットのリストを受け入れます。これは、結果が均質でない ``GenericForeignKey`` "
"に便利です。"

msgid "The flatpages app"
msgstr "フラットページ (flatpages) アプリ"

msgid ""
"Django comes with an optional \"flatpages\" application. It lets you store "
"\"flat\" HTML content in a database and handles the management for you via "
"Django's admin interface and a Python API."
msgstr ""
"Django にはオプションで \"flatpages\" アプリケーションが付属しています。これ"
"を使えば、\"フラットな\" HTML コンテンツをデータベースに保存することができ、 "
"Django のadmin インタフェースや Python API を使って管理できます。"

msgid ""
"A flatpage is an object with a URL, title and content. Use it for one-off, "
"special-case pages, such as \"About\" or \"Privacy Policy\" pages, that you "
"want to store in a database but for which you don't want to develop a custom "
"Django application."
msgstr ""
"フラットページは、URL、タイトル、コンテンツを持つオブジェクトです。これは、 "
"\"About\" や \"Privacy Policy\" などのワンオフの特別なページに使用します。"
"データベースに保存する必要はあるが、カスタムのDjangoアプリを開発する必要がな"
"い場合に利用します。"

msgid ""
"A flatpage can use a custom template or a default, systemwide flatpage "
"template. It can be associated with one, or multiple, sites."
msgstr ""
"フラットページはカスタムテンプレートまたはデフォルトのシステム全体のフラット"
"ページテンプレートを使用できます。1 つまたは複数のサイトに関連付けることがで"
"きます。"

msgid ""
"The content field may optionally be left blank if you prefer to put your "
"content in a custom template."
msgstr ""
"コンテンツフィールドは空のままにしておくこともできます。カスタムテンプレート"
"にコンテンツを入れる場合に便利です。"

msgid "Installation"
msgstr "インストール"

msgid "To install the flatpages app, follow these steps:"
msgstr "flatpages アプリをインストールするには、以下の手順に従ってください:"

msgid ""
"Install the :mod:`sites framework <django.contrib.sites>` by adding "
"``'django.contrib.sites'`` to your :setting:`INSTALLED_APPS` setting, if "
"it's not already in there."
msgstr ""
"もし設定にまだ含まれていない場合は、 ``'django.contrib.sites'`` をあなたの :"
"setting:`INSTALLED_APPS` 設定に追加することで :mod:`sites フレームワーク "
"<django.contrib.sites>` をインストールしてください。"

msgid ""
"Also make sure you've correctly set :setting:`SITE_ID` to the ID of the site "
"the settings file represents. This will usually be ``1`` (i.e. ``SITE_ID = "
"1``, but if you're using the sites framework to manage multiple sites, it "
"could be the ID of a different site."
msgstr ""
"また、 :setting:`SITE_ID` に設定ファイルが表すサイトのIDが正しく設定されてい"
"ることを確認してください。これは通常 ``1`` になります (つまり ``SITE_ID = "
"1`` ですが、複数のサイトを管理するためにsitesフレームワークを使用している場合"
"は、別のサイトのIDになる可能性があります) 。"

msgid ""
"Add ``'django.contrib.flatpages'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""
":setting:`INSTALLED_APPS` 設定に ``'django.contrib.flatpages'`` を追加してく"
"ださい。"

msgid "Then either:"
msgstr "そして、下記のいずれかを行います:"

msgid "Add an entry in your URLconf. For example::"
msgstr "URLconf にエントリを追加します。例えば、次のようにします:"

msgid "or:"
msgstr "または:"

msgid ""
"Add ``'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'`` to "
"your :setting:`MIDDLEWARE` setting."
msgstr ""
"``django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'`` を :"
"setting:`MIDDLEWARE` 設定に追加します。"

msgid "Run the command :djadmin:`manage.py migrate <migrate>`."
msgstr "コマンド :djadmin:`manage.py migrate <migrate>` を実行します。"

msgid "How it works"
msgstr "しくみ"

msgid ""
"``manage.py migrate`` creates two tables in your database: "
"``django_flatpage`` and ``django_flatpage_sites``. ``django_flatpage`` is a "
"lookup table that maps a URL to a title and bunch of text content. "
"``django_flatpage_sites`` associates a flatpage with a site."
msgstr ""
"``manage.py migrate`` は、データベースに2つのテーブル、``django_flatpage`` "
"と ``django_flatpage_sites`` を作成します。``django_flatpage`` は、URL をタイ"
"トルとテキストコンテンツのまとまりにマッピングするルックアップテーブルです。"
"``django_flatpage_sites`` はフラットページをサイトに関連付けます。"

msgid "Using the URLconf"
msgstr "URLconf を使う"

msgid ""
"There are several ways to include the flat pages in your URLconf. You can "
"dedicate a particular path to flat pages::"
msgstr ""
"フラットページをURLconfに含める方法はいくつかあります。以下のように、特定のパ"
"スをフラットページに割り当てることができます:"

msgid ""
"You can also set it up as a \"catchall\" pattern. In this case, it is "
"important to place the pattern at the end of the other urlpatterns::"
msgstr ""
"「キャッチオール」パターンとして設定することもできます。この場合、そのパター"
"ンを他の urlpatterns の最後に配置することが重要です。"

msgid ""
"If you set :setting:`APPEND_SLASH` to ``False``, you must remove the slash "
"in the catchall pattern or flatpages without a trailing slash will not be "
"matched."
msgstr ""
"もし :setting:`APPEND_SLASH` を ``False`` に設定する場合、スラッシュを除去し"
"ないと、末尾にスラッシュのないキャッチオールパターンや flatpages にはマッチし"
"ません。"

msgid ""
"Another common setup is to use flat pages for a limited set of known pages "
"and to hard code the urls, so you can reference them with the :ttag:`url` "
"template tag::"
msgstr ""
"もう1つの一般的な設定方法は、フラットページを特定のページ数の限られたセットに"
"使用し、URL をハードコーディングする方法です。これにより、:ttag:`url` テンプ"
"レートタグを使用してそれらを参照できます:"

msgid "Using the middleware"
msgstr "ミドルウェア を使う"

msgid ""
"The :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` "
"can do all of the work."
msgstr ""
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` は全"
"ての作業を行うことができます。"

msgid ""
"Each time any Django application raises a 404 error, this middleware checks "
"the flatpages database for the requested URL as a last resort. Specifically, "
"it checks for a flatpage with the given URL with a site ID that corresponds "
"to the :setting:`SITE_ID` setting."
msgstr ""
"Django アプリケーションが 404 エラーを出すたびに、このミドルウェアは最後の手"
"段 して、リクエストされた URL があるか flatpages データベースをチェックしま"
"す。具体的には、 :setting:`SITE_ID` 設定に対応するサイト ID を持つ、指定され"
"た URL のフラットページをチェックします。"

msgid "If it finds a match, it follows this algorithm:"
msgstr "もしマッチが見つかった場合、次のアルゴリズムに従います:"

msgid ""
"If the flatpage has a custom template, it loads that template. Otherwise, it "
"loads the template :file:`flatpages/default.html`."
msgstr ""
"もし flatpage にカスタムテンプレートがあれば、そのテンプレートを読み込みま"
"す。そうでなければ、 :file:`flatpages/default.html` テンプレートを読み込みま"
"す。"

msgid ""
"It passes that template a single context variable, ``flatpage``, which is "
"the flatpage object. It uses :class:`~django.template.RequestContext` in "
"rendering the template."
msgstr ""
"このテンプレートにはコンテキスト変数 ``flatpage`` が渡されます。テンプレート"
"のレンダリングには :class:`~django.template.RequestContext` を使用します。"

msgid ""
"The middleware will only add a trailing slash and redirect (by looking at "
"the :setting:`APPEND_SLASH` setting) if the resulting URL refers to a valid "
"flatpage. Redirects are permanent (301 status code)."
msgstr ""
"ミドルウェアは結果のURLが有効なフラットページを参照している場合にのみ、末尾の"
"スラッシュを追加してリダイレクトします (:setting:`APPEND_SLASH` 設定を参照し"
"ます) 。リダイレクトは永続的です(301ステータスコード)。"

msgid ""
"If it doesn't find a match, the request continues to be processed as usual."
msgstr "マッチするものが見つからない場合は、リクエストは通常通り処理されます。"

msgid ""
"The middleware only gets activated for 404s -- not for 500s or responses of "
"any other status code."
msgstr ""
"ミドルウェアは、404 エラーにのみアクティブ化され、500 エラーや他のステータス"
"コードのレスポンスには適用されません。"

msgid "Flatpages will not apply view middleware"
msgstr "フラットページはビュー・ミドルウェアを適用しません"

msgid ""
"Because the ``FlatpageFallbackMiddleware`` is applied only after URL "
"resolution has failed and produced a 404, the response it returns will not "
"apply any :ref:`view middleware <view-middleware>` methods. Only requests "
"which are successfully routed to a view via normal URL resolution apply view "
"middleware."
msgstr ""
"``FlatpageFallbackMiddleware`` は、URL 解決が失敗し 404 エラーが発生した後に"
"のみ適用されるため、返されるレスポンスには :ref:`ビューミドルウェア <view-"
"middleware>`  のメソッドは適用されません。通常の URL 解決を経てビューに正常に"
"ルーティングされたリクエストのみが、ビューミドルウェアを適用します。"

msgid ""
"Note that the order of :setting:`MIDDLEWARE` matters. Generally, you can "
"put :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` "
"at the end of the list. This means it will run first when processing the "
"response, and ensures that any other response-processing middleware see the "
"real flatpage response rather than the 404."
msgstr ""
":setting:`MIDDLEWARE` の順番は重要であることに注意してください。一般的には :"
"class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` をリ"
"ストの最後に記述します。これは、レスポンスを処理するときに最初に実行されるこ"
"とを意味し、 他のレスポンス処理ミドルウェアが 404 ではなく本当のフラットペー"
"ジのレスポンスを見ることを保証します。"

msgid ""
"For more on middleware, read the :doc:`middleware docs </topics/http/"
"middleware>`."
msgstr ""
"ミドルウェアについての詳細は :doc:`ミドルウェアのドキュメント </topics/http/"
"middleware>` を参照してください。"

msgid "Ensure that your 404 template works"
msgstr "404 テンプレートが正常に機能することを確認してください。"

msgid ""
"Note that the :class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` only steps in once another view has successfully "
"produced a 404 response. If another view or middleware class attempts to "
"produce a 404 but ends up raising an exception instead, the response will "
"become an HTTP 500 (\"Internal Server Error\") and the :class:`~django."
"contrib.flatpages.middleware.FlatpageFallbackMiddleware` will not attempt to "
"serve a flat page."
msgstr ""
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` は、"
"別のビューが正常に 404 レスポンスを生成した後にのみ起動します。もし別のビュー"
"やミドルウェアクラスが 404 を生成しようとして例外を発生させた場合、そのレスポ"
"ンスは HTTP 500 (\"Internal Server Error\") となり、 :class:`~django.contrib."
"flatpages.middleware.FlatpageFallbackMiddleware` はフラットページの提供を試み"
"ません。"

msgid "How to add, change and delete flatpages"
msgstr "フラットページの追加、変更、削除方法"

msgid ""
"Permissions to add or edit flatpages should be restricted to trusted users. "
"Flatpages are defined by raw HTML and are **not sanitized** by Django. As a "
"consequence, a malicious flatpage can lead to various security "
"vulnerabilities, including permission escalation."
msgstr ""
"フラットページの追加や編集の権限は、信頼できるユーザに制限されるべきです。フ"
"ラットページは生の HTML で定義され、 Django では **サニタイズ** されていませ"
"ん。その結果、悪意のあるフラットページは、パーミッションの昇格を含む様々なセ"
"キュリティ上の脆弱性を引き起こす可能性があります。"

msgid "Via the admin interface"
msgstr "admin インターフェイス経由"

msgid ""
"If you've activated the automatic Django admin interface, you should see a "
"\"Flatpages\" section on the admin index page. Edit flatpages as you edit "
"any other object in the system."
msgstr ""
"Django の自動管理インターフェイスを有効にしていれば、管理インデックスページ"
"に \"Flatpages\" セクションがあるはずです。システムの他のオブジェクトを編集す"
"るのと同じように、 flatpages を編集してください。"

msgid ""
"The ``FlatPage`` model has an ``enable_comments`` field that isn't used by "
"``contrib.flatpages``, but that could be useful for your project or third-"
"party apps. It doesn't appear in the admin interface, but you can add it by "
"registering a custom ``ModelAdmin`` for ``FlatPage``::"
msgstr ""
"フラットページ ``FlatPage`` モデルには ``enable_comments`` フィールドがありま"
"す。これは ``contrib.flatpages`` では使用されませんが、あなたのプロジェクトや"
"サードパーティアプリでは役に立つかもしれません。admin アプリケーションには表"
"示されませんが、カスタム ``ModelAdmin`` を ``FlatPage`` に登録することで追加"
"できます: "

msgid "Via the Python API"
msgstr "Python API 経由"

msgid ""
"Flatpages are represented by a standard :doc:`Django model </topics/db/"
"models>`, which lives in :source:`django/contrib/flatpages/models.py`. You "
"can access flatpage objects via the :doc:`Django database API </topics/db/"
"queries>`."
msgstr ""
"フラットページは標準の :doc:`Django モデル </topics/db/models>` で表現さ"
"れ、 :source:`django/contrib/flatpages/models.py` にあります。 :doc:`Django "
"データベース API </topics/db/queries>` を使ってフラットページオブジェクトにア"
"クセスできます。"

msgid "Check for duplicate flatpage URLs."
msgstr "重複するフラットページの URL をチェックする"

msgid ""
"If you add or modify flatpages via your own code, you will likely want to "
"check for duplicate flatpage URLs within the same site. The flatpage form "
"used in the admin performs this validation check, and can be imported from "
"``django.contrib.flatpages.forms.FlatpageForm`` and used in your own views."
msgstr ""
"自分自身のコードを使って flatpages を追加または変更する場合、同じサイト内で重"
"複する flatpage の URL をチェックしたいと思うでしょう。admin アプリケーション"
"で使用されている flatpage フォームはこの検証チェックを行い、``django.contrib."
"flatpages.forms.FlatpageForm`` からインポートして、独自のビューで使用できま"
"す。"

msgid "Flatpage templates"
msgstr "フラットページのテンプレート"

msgid ""
"By default, flatpages are rendered via the template :file:`flatpages/default."
"html`, but you can override that for a particular flatpage: in the admin, a "
"collapsed fieldset titled \"Advanced options\" (clicking will expand it) "
"contains a field for specifying a template name. If you're creating a flat "
"page via the Python API you can set the template name as the field "
"``template_name`` on the ``FlatPage`` object."
msgstr ""
"デフォルトでは、フラットページはテンプレート :file:`flatpages/default.html` "
"を使ってレンダリングされますが、特定のフラットページに対してそれを上書きでき"
"ます。admin アプリケーションでは、\"Advanced options\" (クリックすると展開さ"
"れます) というタイトルの折りたたんだフィールドセットにテンプレート名を指定す"
"るフィールドがあります。Python API を使ってフラットページを作成する場合は、 "
"``FlatPage`` オブジェクトの ``template_name`` フィールドにテンプレート名を設"
"定できます。"

msgid ""
"Creating the :file:`flatpages/default.html` template is your responsibility; "
"in your template directory, create a :file:`flatpages` directory containing "
"a file :file:`default.html`."
msgstr ""
":file:`flatpages/default.html` テンプレートを作成するのはあなたの責任です。テ"
"ンプレートディレクトリ内に、:file:`flatpages` ディレクトリを作成し、その中"
"に :file:`default.html` ファイルを作成してください。"

msgid ""
"Flatpage templates are passed a single context variable, ``flatpage``, which "
"is the flatpage object."
msgstr ""
"フラットページのテンプレートには、フラットページオブジェクトである "
"``flatpage`` という1つのコンテキスト変数が渡されます。"

msgid "Here's a sample :file:`flatpages/default.html` template:"
msgstr "以下は、サンプルの :file:`flatpages/default.html` テンプレートです:"

msgid ""
"Since you're already entering raw HTML into the admin page for a flatpage, "
"both ``flatpage.title`` and ``flatpage.content`` are marked as **not** "
"requiring :ref:`automatic HTML escaping <automatic-html-escaping>` in the "
"template."
msgstr ""
"フラットページの admin アプリケーションにはすでに生のHTMLを入力しているので、"
"``flatpage.title`` と ``flatpage.content`` の両方は、テンプレート内で :ref:`"
"自動HTMLエスケープ <automatic-html-escaping>` を **必要としない** とマークさ"
"れています。"

msgid ""
"Getting a list of :class:`~django.contrib.flatpages.models.FlatPage` objects "
"in your templates"
msgstr ""
"テンプレート内の :class:`~django.contrib.flatpages.models.FlatPage` オブジェ"
"クトの一覧を取得する"

msgid ""
"The flatpages app provides a template tag that allows you to iterate over "
"all of the available flatpages on the :ref:`current site <hooking-into-"
"current-site-from-views>`."
msgstr ""
"flatpages アプリには、 :ref:`現在のサイト <hooking-into-current-site-from-"
"views>` で利用可能なすべてのフラットページをイテレートするためのテンプレート"
"タグが提供されています。"

msgid ""
"Like all custom template tags, you'll need to :ref:`load its custom tag "
"library <loading-custom-template-libraries>` before you can use it. After "
"loading the library, you can retrieve all current flatpages via the :ttag:"
"`get_flatpages` tag:"
msgstr ""
"すべてのカスタムテンプレートタグと同様に、使用する前にカスタムタグライブラリ"
"を :ref:`読み込む必要があります <loading-custom-template-libraries>` 。ライブ"
"ラリを読み込んだ後、:ttag:`get_flatpages` タグを通じてすべての現在のフラット"
"ページを取得できます。"

msgid "Displaying ``registration_required`` flatpages"
msgstr "``registration_required`` フラットページを表示する"

msgid ""
"By default, the :ttag:`get_flatpages` template tag will only show flatpages "
"that are marked ``registration_required = False``. If you want to display "
"registration-protected flatpages, you need to specify an authenticated user "
"using a ``for`` clause."
msgstr ""
"デフォルトでは、 :ttag:`get_flatpages` テンプレートタグは "
"``registration_required = False`` とマークされたフラットページのみを表示しま"
"す。登録保護されたフラットページを表示したい場合は、``for`` 節を使用して認証"
"済みユーザーを指定する必要があります。"

msgid "For example:"
msgstr "例:"

msgid ""
"If you provide an anonymous user, :ttag:`get_flatpages` will behave the same "
"as if you hadn't provided a user -- i.e., it will only show you public "
"flatpages."
msgstr ""
"匿名ユーザーを提供すると、:ttag:`get_flatpages` はユーザーを提供していない場"
"合と同じように動作します。つまり、公開されているフラットページのみを表示しま"
"す。"

msgid "Limiting flatpages by base URL"
msgstr "ベースURLでフラットページを制限する"

msgid ""
"An optional argument, ``starts_with``, can be applied to limit the returned "
"pages to those beginning with a particular base URL. This argument may be "
"passed as a string, or as a variable to be resolved from the context."
msgstr ""
"オプションの引数 ``starts_with`` を指定すると、返されるページを特定のベース"
"URLで始まるものに限定できます。この引数は文字列として渡されるか、コンテキスト"
"から解決される変数として渡されます。"

msgid "Integrating with :mod:`django.contrib.sitemaps`"
msgstr ":mod:`django.contrib.sitemaps` と統合する"

msgid ""
"The :class:`sitemaps.FlatPageSitemap <django.contrib.flatpages.sitemaps."
"FlatPageSitemap>` class looks at all publicly visible :mod:`~django.contrib."
"flatpages` defined for the current :setting:`SITE_ID` (see the :mod:`sites "
"documentation <django.contrib.sites>`) and creates an entry in the sitemap. "
"These entries include only the :attr:`~django.contrib.sitemaps.Sitemap."
"location` attribute -- not :attr:`~django.contrib.sitemaps.Sitemap."
"lastmod`, :attr:`~django.contrib.sitemaps.Sitemap.changefreq` or :attr:"
"`~django.contrib.sitemaps.Sitemap.priority`."
msgstr ""
":class:`sitemaps.FlatPageSitemap <django.contrib.flatpages.sitemaps."
"FlatPageSitemap>` クラスは、現在の :setting:`SITE_ID` (詳細は :mod:`sites ド"
"キュメント <django.contrib.sites>` を参照) に定義されたすべての公開されてい"
"る :mod:`~django.contrib.flatpages` を見て、サイトマップにエントリを作成しま"
"す。これらのエントリには、 :attr:`~django.contrib.sitemaps.Sitemap.location` "
"属性のみが含まれます。 :attr:`~django.contrib.sitemaps.Sitemap.lastmod` や :"
"attr:`~django.contrib.sitemaps.Sitemap.changefreq`, :attr:`~django.contrib."
"sitemaps.Sitemap.priority` は含まれません。"

msgid "Example"
msgstr "カスタマイズ例"

msgid "Here's an example of a URLconf using :class:`FlatPageSitemap`::"
msgstr "以下は :class:`FlatPageSitemap` を使用したURLconfの例です:"

msgid "GeoDjango's admin site"
msgstr "GeoDjango の admin サイト"

msgid "``GISModelAdmin``"
msgstr "``GISModelAdmin``"

msgid ""
"The widget class to be used for :class:`~django.contrib.gis.db.models."
"GeometryField`. Defaults to :class:`~django.contrib.gis.forms.widgets."
"OSMWidget`."
msgstr ""
":class:`~django.contrib.gis.db.models.GeometryField` で使用するウィジェットク"
"ラス。デフォルトは :class:`~django.contrib.gis.forms.widgets.OSMWidget` で"
"す。"

msgid ""
"The keyword arguments that would be passed to the :attr:`gis_widget`. "
"Defaults to an empty dictionary."
msgstr ""
":attr:`gis_widget` に渡されるキーワード引数。デフォルトは空の辞書です。"

msgid "GeoDjango Management Commands"
msgstr "GeoDjangoの管理コマンド"

msgid "``inspectdb``"
msgstr "``inspectdb``"

msgid ""
"When :mod:`django.contrib.gis` is in your :setting:`INSTALLED_APPS`, the :"
"djadmin:`inspectdb` management command is overridden with one from "
"GeoDjango. The overridden command is spatially-aware, and places geometry "
"fields in the auto-generated model definition, where appropriate."
msgstr ""
":mod:`django.contrib.gis` が :setting:`INSTALLED_APPS` に入っている場合、 :"
"djadmin:`inspectdb` 管理コマンドは GeoDjango のコマンドでオーバーライドされま"
"す。オーバーライドされたコマンドは空間を認識し、自動生成されるモデル定義に適"
"切なジオメトリフィールドを配置します。"

msgid "``ogrinspect``"
msgstr "``ogrinspect``"

msgid ""
"The ``ogrinspect`` management command will inspect the given OGR-compatible :"
"class:`~django.contrib.gis.gdal.DataSource` (e.g., a shapefile) and will "
"output a GeoDjango model with the given model name.  There's a detailed "
"example of using ``ogrinspect`` :ref:`in the tutorial <ogrinspect-intro>`."
msgstr ""
"``ogrinspect`` 管理コマンドは指定されたOGR互換の :class:`~django.contrib.gis."
"gdal.DataSource` (たとえば、シェイプファイル) を検査し、指定されたモデル名で"
"GeoDjangoモデルを出力します。 ``ogrinspect`` の使用例については、 :ref:`"
"チュートリアルで <ogrinspect-intro>` 詳しく説明されています。"

msgid ""
"Use a comma separated list of OGR field names to add the ``blank=True`` "
"keyword option to the field definition.  Set with ``true`` to apply to all "
"applicable fields."
msgstr ""
"フィールド定義に ``blank=True`` キーワードオプションを追加するには、OGR "
"フィールド名のカンマ区切りリストを使用します。該当するすべてのフィールドに適"
"用するには ``true`` を設定します。"

msgid ""
"Use a comma separated list of OGR float fields to generate :class:`~django."
"db.models.DecimalField` instead of the default :class:`~django.db.models."
"FloatField`. Set to ``true`` to apply to all OGR float fields."
msgstr ""
"デフォルトの :class:`~django.db.models.FloatField` の代わりに :class:"
"`~django.db.models.DecimalField` を生成するには OGR float フィールドをカンマ"
"区切りで指定します。すべての OGR float フィールドに適用するには ``true`` を設"
"定します。"

msgid ""
"Specifies the model attribute name to use for the geometry field. Defaults "
"to ``'geom'``."
msgstr ""
"ジオメトリフィールドに使用するモデル属性名を指定します。デフォルトは "
"``'geom'`` です。"

msgid ""
"The key for specifying which layer in the OGR :class:`~django.contrib.gis."
"gdal.DataSource` source to use. Defaults to 0 (the first layer). May be an "
"integer or a string identifier for the :class:`~django.contrib.gis.gdal."
"Layer`. When inspecting databases, ``layer`` is generally the table name you "
"want to inspect."
msgstr ""
"OGR :class:`~django.contrib.gis.gdal.DataSource` 内のどのレイヤーを使用するか"
"を指定するキー。デフォルトは 0 (最初のレイヤー) です。 :class:`~django."
"contrib.gis.gdal.Layer` の整数または文字列識別子として使用できます。データ"
"ベースを調査する場合、 ``layer`` は通常、調査したいテーブル名です。"

msgid ""
"Automatically generate a mapping dictionary for use with :class:`~django."
"contrib.gis.utils.LayerMapping`."
msgstr ""
":class:`~django.contrib.gis.utils.LayerMapping` で使用するマッピング辞書を自"
"動生成します。"

msgid ""
"When generating the geometry field, treat it as a geometry collection. For "
"example, if this setting is enabled then a :class:`~django.contrib.gis.db."
"models.MultiPolygonField` will be placed in the generated model rather than :"
"class:`~django.contrib.gis.db.models.PolygonField`."
msgstr ""
"ジオメトリフィールドを生成する際に、ジオメトリコレクションとして扱います。例"
"えば、この設定が有効な場合、生成されるモデルには :class:`~django.contrib.gis."
"db.models.MultiPolygonField` ではなく :class:`~django.contrib.gis.db.models."
"PolygonField` が配置されます。"

msgid ""
"Generates a ``__str__()`` method on the model that returns the given field "
"name."
msgstr ""
"与えられたフィールド名を返す ``__str__()`` メソッドをモデルに生成します。"

msgid ""
"Suppresses the ``from django.contrib.gis.db import models`` import statement."
msgstr ""
"``from django.contrib.gis.db import models`` のインポート文を抑制します。"

msgid ""
"Use a comma separated list of OGR field names to add the ``null=True`` "
"keyword option to the field definition.  Set with ``true`` to apply to all "
"applicable fields."
msgstr ""
"フィールド定義に ``null=True`` キーワードオプションを追加するには、OGR フィー"
"ルド名のカンマ区切りリストを使用します。 ``true`` と設定すると、該当するすべ"
"てのフィールドに適用されます。"

msgid ""
"The SRID to use for the geometry field.  If not set, ``ogrinspect`` attempts "
"to automatically determine of the SRID of the data source."
msgstr ""
"ジオメトリフィールドに使用する SRID。  設定されていない場合、 ``ogrinspect`` "
"はデータソースの SRID を自動的に判別しようとします。"

msgid "GeoDjango Database API"
msgstr "GeoDjango データベース API"

msgid "Spatial Backends"
msgstr "空間バックエンド (Spatial Backend)"

msgid "GeoDjango currently provides the following spatial database backends:"
msgstr "GeoDjango は現在、次の空間データベースバックエンドを提供しています:"

msgid "``django.contrib.gis.db.backends.postgis``"
msgstr "``django.contrib.gis.db.backends.postgis``"

msgid "``django.contrib.gis.db.backends.mysql``"
msgstr "``django.contrib.gis.db.backends.mysql``"

msgid "``django.contrib.gis.db.backends.oracle``"
msgstr "``django.contrib.gis.db.backends.oracle``"

msgid "``django.contrib.gis.db.backends.spatialite``"
msgstr "``django.contrib.gis.db.backends.spatialite``"

msgid "MySQL Spatial Limitations"
msgstr "MySQL の空間データに関する制限"

msgid ""
"Django supports spatial functions operating on real geometries available in "
"modern MySQL versions. However, the spatial functions are not as rich as "
"other backends like PostGIS."
msgstr ""
"Django は、最近の MySQL バージョンで利用可能な、実際のジオメトリを操作する空"
"間関数をサポートしています。しかし、空間関数は PostGIS のような他のバックエン"
"ドほど豊富ではありません。"

msgid "Raster Support"
msgstr "ラスターのサポート"

msgid ""
"``RasterField`` is currently only implemented for the PostGIS backend. "
"Spatial lookups are available for raster fields, but spatial database "
"functions and aggregates aren't implemented for raster fields."
msgstr ""
"``RasterField`` は現在、PostGIS バックエンドのみに実装されています。ラスター"
"フィールドに対する空間ルックアップは可能ですが、空間データベース関数や集計は"
"実装されていません。"

msgid "Creating and Saving Models with Geometry Fields"
msgstr "モデルを作成し、ジオメトリフィールドを保存する"

msgid ""
"Here is an example of how to create a geometry object (assuming the "
"``Zipcode`` model):"
msgstr ""
"以下にジオメトリオブジェクトの作成例を示します (``Zipcode`` モデルを想定): "

msgid ""
":class:`~django.contrib.gis.geos.GEOSGeometry` objects may also be used to "
"save geometric models:"
msgstr ""
":class:`~django.contrib.gis.geos.GEOSGeometry` オブジェクトもジオメトリモデル"
"を保存するために使用できます:"

msgid ""
"Moreover, if the ``GEOSGeometry`` is in a different coordinate system (has a "
"different SRID value) than that of the field, then it will be implicitly "
"transformed into the SRID of the model's field, using the spatial database's "
"transform procedure:"
msgstr ""
"さらに、``GEOSGeometry`` がフィールドの座標系と異なる座標系 (異なる SRID 値を"
"持つ) 場合は、空間データベースの変換プロシージャを使用して、モデルのフィール"
"ドの SRID に暗黙的に変換されます:"

msgid ""
"Thus, geometry parameters may be passed in using the ``GEOSGeometry`` "
"object, WKT (Well Known Text [#fnwkt]_), HEXEWKB (PostGIS specific -- a WKB "
"geometry in hexadecimal [#fnewkb]_), and GeoJSON (see :rfc:`7946`). "
"Essentially, if the input is not a ``GEOSGeometry`` object, the geometry "
"field will attempt to create a ``GEOSGeometry`` instance from the input."
msgstr ""
"そのため、ジオメトリパラメータは ``GEOSGeometry`` オブジェクト、WKT (Well "
"Known Text [#fnwkt]_) 、HEXEWKB (PostGIS 固有のジオメトリで、16 進数の WKB ジ"
"オメトリ [#fnewkb]_) 、GeoJSON (:rfc:`7946` 参照) を使用して渡すことができま"
"す。基本的に、入力が ``GEOSGeometry`` オブジェクトでない場合、ジオメトリ"
"フィールドは入力から ``GEOSGeometry`` インスタンスを作成しようとします。"

msgid ""
"For more information creating :class:`~django.contrib.gis.geos.GEOSGeometry` "
"objects, refer to the :ref:`GEOS tutorial <geos-tutorial>`."
msgstr ""
":class:`~django.contrib.gis.geos.GEOSGeometry` オブジェクトを作成する詳細につ"
"いては、:ref:`GEOS チュートリアル <geos-tutorial>` を参照してください。"

msgid "Creating and Saving Models with Raster Fields"
msgstr "ラスターフィールドを持つモデルの作成と保存"

msgid ""
"When creating raster models, the raster field will implicitly convert the "
"input into a :class:`~django.contrib.gis.gdal.GDALRaster` using lazy-"
"evaluation. The raster field will therefore accept any input that is "
"accepted by the :class:`~django.contrib.gis.gdal.GDALRaster` constructor."
msgstr ""
"ラスターモデルを作成するとき、ラスターフィールドは、遅延評価を使用して、入力"
"を :class:`~django.contrib.gis.gdal.GDALRaster` に暗黙的に変換します。そのた"
"め、ラスタフィールドは :class:`~django.contrib.gis.gdal.GDALRaster` コンスト"
"ラクタが受け付けるすべての入力を受け入れます。"

msgid ""
"Here is an example of how to create a raster object from a raster file "
"``volcano.tif`` (assuming the ``Elevation`` model):"
msgstr ""
"以下は、ラスターファイル ``volcano.tif`` からラスターオブジェクトを作成する方"
"法の例です (``Elevation`` モデルを想定) : "

msgid ""
":class:`~django.contrib.gis.gdal.GDALRaster` objects may also be used to "
"save raster models:"
msgstr ""
":class:`~django.contrib.gis.gdal.GDALRaster` オブジェクトもラスターモデルの保"
"存に使用できます:"

msgid "Note that this equivalent to:"
msgstr "これは次と等価です:"

msgid "Spatial Lookups"
msgstr "空間のルックアップ (Spatial Lookup)"

msgid ""
"GeoDjango's lookup types may be used with any manager method like "
"``filter()``, ``exclude()``, etc.  However, the lookup types unique to "
"GeoDjango are only available on spatial fields."
msgstr ""
"GeoDjango のルックアップ型は ``filter()`` や ``exclude()`` などの manager メ"
"ソッドで使うことができます。しかし、 GeoDjango 固有のルックアップ型は空間"
"フィールドでのみ利用可能です。"

msgid ""
"Filters on 'normal' fields (e.g. :class:`~django.db.models.CharField`) may "
"be chained with those on geographic fields. Geographic lookups accept "
"geometry and raster input on both sides and input types can be mixed freely."
msgstr ""
"「通常の」フィールド (例えば :class:`~django.db.models.CharField`) のフィルタ"
"は、地理情報フィールドのフィルタと連結すできます。ジオメトリルックアップはジ"
"オメトリとラスタの両方の入力を受け付けます。"

msgid ""
"The general structure of geographic lookups is described below. A complete "
"reference can be found in the :ref:`spatial lookup reference<spatial-"
"lookups>`."
msgstr ""
"地理情報ルックアップの一般的な構造を以下に記載します。完全なリファレンス"
"は、 :ref:`空間ルックアップのリファレンス <spatial-lookups>` にあります。"

msgid "Geometry Lookups"
msgstr "ジオメトリ・ルックアップ"

msgid ""
"Geographic queries with geometries take the following general form (assuming "
"the ``Zipcode`` model used in the :doc:`model-api`):"
msgstr ""
"地理情報クエリにおいて、ジオメトリを用いる一般的な形式は以下の通りです (:doc:"
"`model-api` で使用されている ``Zipcode`` モデルを想定):"

msgid ""
"In this case, ``poly`` is the geographic field, :lookup:`contains <gis-"
"contains>` is the spatial lookup type, ``pnt`` is the parameter (which may "
"be a :class:`~django.contrib.gis.geos.GEOSGeometry` object or a string of "
"GeoJSON , WKT, or HEXEWKB), and ``rst`` is a :class:`~django.contrib.gis."
"gdal.GDALRaster` object."
msgstr ""
"この場合、 ``poly`` は地理情報フィールド、 :lookup:`contains <gis-contains>` "
"は空間ルックアップタイプ、 ``pnt`` はパラメータ (:class:`~django.contrib.gis."
"geos.GEOSGeometry` オブジェクト、または GeoJSON、WKT、HEXEWKB の文字列)、そし"
"て ``rst`` は :class:`~django.contrib.gis.gdal.GDALRaster` オブジェクトです。"

msgid "Raster Lookups"
msgstr "ラスター・ルックアップ"

msgid ""
"The raster lookup syntax is similar to the syntax for geometries. The only "
"difference is that a band index can be specified as additional input. If no "
"band index is specified, the first band is used by default (index ``0``). In "
"that case the syntax is identical to the syntax for geometry lookups."
msgstr ""
"ラスタールックアップの構文はジオメトリの構文に似ています。唯一の違いは、バン"
"ドインデックスを追加入力として指定できることです。バンドインデックスが指定さ"
"れていない場合は、デフォルトで最初のバンドが使用されます (インデックス"
"\"``0``\") 。その場合、構文はジオメトリルックアップの構文と同一です。"

msgid ""
"To specify the band index, an additional parameter can be specified on both "
"sides of the lookup. On the left hand side, the double underscore syntax is "
"used to pass a band index. On the right hand side, a tuple of the raster and "
"band index can be specified."
msgstr ""
"バンドインデックスを指定するには、ルックアップに追加のパラメータを両側で指定"
"できます。左側では、バンドインデックスを渡すためにダブルアンダースコア構文が"
"使用されます。右側では、ラスターとバンドのインデックスのタプルを指定できま"
"す。"

msgid ""
"This results in the following general form for lookups involving rasters "
"(assuming the ``Elevation`` model used in the :doc:`model-api`):"
msgstr ""
"これにより、ラスターを使用するルックアップの一般的な形式が得られます (:doc:"
"`model-api` で使用されている ``Elevation`` モデルを想定):"

msgid ""
"On the left hand side of the example, ``rast`` is the geographic raster "
"field and :lookup:`contains <gis-contains>` is the spatial lookup type. On "
"the right hand side, ``geom`` is a geometry input and ``rst`` is a :class:"
"`~django.contrib.gis.gdal.GDALRaster` object. The band index defaults to "
"``0`` in the first two queries and is set to ``1`` on the others."
msgstr ""
"例の左辺では、 ``rast`` が地理情報ラスタフィールドで、 :lookup:`contains "
"<gis-contains>` が空間ルックアップタイプです。右辺の ``geom`` はジオメトリ入"
"力で、 ``rst`` は :class:`~django.contrib.gis.gdal.GDALRaster` オブジェクトで"
"す。バンドインデックスは最初の2つのクエリではデフォルトで ``0`` に設定され、"
"他のクエリでは ``1`` に設定されます。"

msgid ""
"While all spatial lookups can be used with raster objects on both sides, not "
"all underlying operators natively accept raster input. For cases where the "
"operator expects geometry input, the raster is automatically converted to a "
"geometry. It's important to keep this in mind when interpreting the lookup "
"results."
msgstr ""
"すべての空間ルックアップはラスターオブジェクトの両側で使用できますが、すべて"
"の基本演算子がラスター入力をネイティブに受け付けるわけではありません。演算子"
"がジオメトリ入力を想定している場合、ラスタは自動的にジオメトリに変換されま"
"す。ルックアップ結果を解釈する際には、この点に留意することが重要です。"

msgid ""
"The type of raster support is listed for all lookups in the :ref:"
"`compatibility table <spatial-lookup-compatibility>`. Lookups involving "
"rasters are currently only available for the PostGIS backend."
msgstr ""
"ラスターをサポートするタイプは :ref:`互換表 <spatial-lookup-compatibility>` "
"のすべてのルックアップにリストされています。ラスタを含むルックアップは現在の"
"ところ PostGIS バックエンドでのみ利用可能です。"

msgid "Distance Queries"
msgstr "距離クエリ"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"Distance calculations with spatial data is tricky because, unfortunately, "
"the Earth is not flat.  Some distance queries with fields in a geographic "
"coordinate system may have to be expressed differently because of "
"limitations in PostGIS.  Please see the :ref:`selecting-an-srid` section in "
"the :doc:`model-api` documentation for more details."
msgstr ""
"残念ながら、地球は平らではないため、空間データでの距離計算は厄介です。"
"PostGIS の制限により、地理座標系のフィールドを使用した距離のクエリは、別の方"
"法で表現しなければならない場合があります。詳細は :doc:`model-api`  ドキュメン"
"トの :ref:`selecting-an-srid` セクションを参照してください。"

msgid "Distance Lookups"
msgstr "距離ルックアップ"

msgid ""
"*Availability*: PostGIS, MariaDB, MySQL, Oracle, SpatiaLite, PGRaster "
"(Native)"
msgstr ""
"*利用可能なDB*: PostGIS、MariaDB、MySQL、Oracle、SpatiaLite、PGRaster (ネイ"
"ティブ)"

msgid "The following distance lookups are available:"
msgstr "以下の距離ルックアップが利用できます:"

msgid ":lookup:`distance_lt`"
msgstr ":lookup:`distance_lt`"

msgid ":lookup:`distance_lte`"
msgstr ":lookup:`distance_lte`"

msgid ":lookup:`distance_gt`"
msgstr ":lookup:`distance_gt`"

msgid ":lookup:`distance_gte`"
msgstr ":lookup:`distance_gte`"

msgid ":lookup:`dwithin` (except MariaDB and MySQL)"
msgstr ":lookup:`dwithin` (MariaDB and MySQL を除く)"

msgid ""
"For *measuring*, rather than querying on distances, use the :class:`~django."
"contrib.gis.db.models.functions.Distance` function."
msgstr ""
"距離をクエリするのではなく、 *計測* する場合は :class:`~django.contrib.gis."
"db.models.functions.Distance` 関数を使います。"

msgid "Distance lookups take a tuple parameter comprising:"
msgstr ""
"距離ルックアップは、次のように構成されるタプルパラメータを受け取ります:"

msgid "A geometry or raster to base calculations from; and"
msgstr "計算のベースとなるジオメトリまたはラスター。"

msgid ""
"A number or :class:`~django.contrib.gis.measure.Distance` object containing "
"the distance."
msgstr ""
"距離を含む数字または :class:`~django.contrib.gis.measure.Distance` オブジェク"
"ト。"

msgid ""
"If a :class:`~django.contrib.gis.measure.Distance` object is used, it may be "
"expressed in any units (the SQL generated will use units converted to those "
"of the field); otherwise, numeric parameters are assumed to be in the units "
"of the field."
msgstr ""
":class:`~django.contrib.gis.measure.Distance` オブジェクトが使用されている場"
"合、任意の単位で表現される可能性があります(SQL 生成時には、フィールドの単位に"
"変換された単位が使用される)。それ以外の場合、数値パラメータはフィールドの単位"
"であると想定されます。"

msgid ""
"In PostGIS, ``ST_Distance_Sphere`` does *not* limit the geometry types "
"geographic distance queries are performed with. [#fndistsphere15]_  However, "
"these queries may take a long time, as great-circle distances must be "
"calculated on the fly for *every* row in the query.  This is because the "
"spatial index on traditional geometry fields cannot be used."
msgstr ""
"PostGIS では、``ST_Distance_Sphere`` は、地理距離クエリを実行するジオメトリタ"
"イプを制限しません。 [#fndistsphere15]_ ただし、これらのクエリには、 *全て* "
"の行のたびに大圏距離を動的に計算する必要があるため、長い時間がかかる可能性が"
"あります。これは従来のジオメトリフィールドに空間インデックスが使用できないた"
"めです。"

msgid ""
"For much better performance on WGS84 distance queries, consider using :ref:"
"`geography columns <geography-type>` in your database instead because they "
"are able to use their spatial index in distance queries. You can tell "
"GeoDjango to use a geography column by setting ``geography=True`` in your "
"field definition."
msgstr ""
"WGS84 の距離クエリでより良いパフォーマンスを得るには、代わりにデータベース"
"で :ref:`ジオグラフィカラム <geography-type>` を使うことを検討してください。"
"フィールド定義で ``geography=True`` と設定することで、 GeoDjango にジオグラ"
"フィカラムを使うように指示できます。"

msgid ""
"For example, let's say we have a ``SouthTexasCity`` model (from the :source:"
"`GeoDjango distance tests <tests/gis_tests/distapp/models.py>` ) on a "
"*projected* coordinate system valid for cities in southern Texas::"
msgstr ""
"例えば、``SouthTexasCity`` というモデル (:source:`GeoDjango 距離テスト "
"<tests/gis_tests/distapp/models.py>` から) が、テキサス州南部の都市に有効な *"
"投影* 座標系にあるとします:"

msgid "Then distance queries may be performed as follows:"
msgstr "距離クエリは次のように実行できます:"

msgid ""
"Raster queries work the same way by replacing the geometry field ``point`` "
"with a raster field, or the ``pnt`` object with a raster object, or both. To "
"specify the band index of a raster input on the right hand side, a 3-tuple "
"can be passed to the lookup as follows:"
msgstr ""
"ラスタークエリは、ジオメトリフィールド \"point\" をラスターフィールドに置き換"
"えるか、\"pnt\" オブジェクトをラスターオブジェクトに置き換えるか、またはその"
"両方で同じように機能します。右辺のラスター入力のバンドインデックスを指定する"
"には、3値のタプルをルックアップに渡すことができます:"

msgid ""
"Where the band with index 2 (the third band) of the raster ``rst`` would be "
"used for the lookup."
msgstr ""
"ラスター ``rst`` のバンドのうち、インデックス2 (3番目のバンド) がルックアップ"
"に使用されます。"

msgid "Compatibility Tables"
msgstr "互換表"

msgid ""
"The following table provides a summary of what spatial lookups are available "
"for each spatial database backend. The PostGIS Raster (PGRaster) lookups are "
"divided into the three categories described in the :ref:`raster lookup "
"details <spatial-lookup-raster>`: native support ``N``, bilateral native "
"support ``B``, and geometry conversion support ``C``."
msgstr ""
"以下の表は、各空間データベースバックエンドで利用可能な空間ルックアップの概要"
"です。PostGIS Raster (PGRaster) のルックアップは :ref:`ラスタールックアップの"
"詳細 <spatial-lookup-raster>` に記載されている3つのカテゴリに分類されます: ネ"
"イティブサポート ``N``、双方向ネイティブサポート ``B``、ジオメトリ変換サポー"
"ト ``C``。"

msgid "Lookup Type"
msgstr "ルックアップタイプ"

msgid "PostGIS"
msgstr "PostGIS"

msgid "Oracle"
msgstr "Oracle"

msgid "MariaDB"
msgstr "MariaDB"

msgid "MySQL [#]_"
msgstr "MySQL [#]_"

msgid "SpatiaLite"
msgstr "SpatiaLite"

msgid "PGRaster"
msgstr "PGRaster"

msgid ":lookup:`bbcontains`"
msgstr ":lookup:`bbcontains`"

msgid "X"
msgstr "X"

msgid "N"
msgstr "N"

msgid ":lookup:`bboverlaps`"
msgstr ":lookup:`bboverlaps`"

msgid ":lookup:`contained`"
msgstr ":lookup:`contained`"

msgid ":lookup:`contains <gis-contains>`"
msgstr ":lookup:`contains <gis-contains>`"

msgid "B"
msgstr "B"

msgid ":lookup:`contains_properly`"
msgstr ":lookup:`contains_properly`"

msgid ":lookup:`coveredby`"
msgstr ":lookup:`coveredby`"

msgid ":lookup:`covers`"
msgstr ":lookup:`covers`"

msgid ":lookup:`crosses`"
msgstr ":lookup:`crosses`"

msgid "C"
msgstr "C"

msgid ":lookup:`disjoint`"
msgstr ":lookup:`disjoint`"

msgid ":lookup:`dwithin`"
msgstr ":lookup:`dwithin`"

msgid ":lookup:`equals`"
msgstr ":lookup:`equals`"

msgid ":lookup:`exact <same_as>`"
msgstr ":lookup:`exact <same_as>`"

msgid ":lookup:`intersects`"
msgstr ":lookup:`intersects`"

msgid ":lookup:`isempty`"
msgstr ":lookup:`isempty`"

msgid ":lookup:`isvalid`"
msgstr ":lookup:`isvalid`"

msgid ":lookup:`overlaps`"
msgstr ":lookup:`overlaps`"

msgid ":lookup:`relate`"
msgstr ":lookup:`relate`"

msgid ":lookup:`same_as`"
msgstr ":lookup:`same_as`"

msgid ":lookup:`touches`"
msgstr ":lookup:`touches`"

msgid ":lookup:`within`"
msgstr ":lookup:`within`"

msgid ":lookup:`left`"
msgstr ":lookup:`left`"

msgid ":lookup:`right`"
msgstr ":lookup:`right`"

msgid ":lookup:`overlaps_left`"
msgstr ":lookup:`overlaps_left`"

msgid ":lookup:`overlaps_right`"
msgstr ":lookup:`overlaps_right`"

msgid ":lookup:`overlaps_above`"
msgstr ":lookup:`overlaps_above`"

msgid ":lookup:`overlaps_below`"
msgstr ":lookup:`overlaps_below`"

msgid ":lookup:`strictly_above`"
msgstr ":lookup:`strictly_above`"

msgid ":lookup:`strictly_below`"
msgstr ":lookup:`strictly_below`"

msgid "Database functions"
msgstr "データベース関数"

msgid ""
"The following table provides a summary of what geography-specific database "
"functions are available on each spatial backend."
msgstr ""
"次の表は、各空間バックエンドで使用できるジオグラフィ固有のデータベース関数の"
"概要です。"

msgid "Function"
msgstr "関数"

msgid "MySQL"
msgstr "MySQL"

msgid ":class:`Area`"
msgstr ":class:`Area`"

msgid ":class:`AsGeoJSON`"
msgstr ":class:`AsGeoJSON`"

msgid ":class:`AsGML`"
msgstr ":class:`AsGML`"

msgid ":class:`AsKML`"
msgstr ":class:`AsKML`"

msgid ":class:`AsSVG`"
msgstr ":class:`AsSVG`"

msgid ":class:`AsWKB`"
msgstr ":class:`AsWKB`"

msgid ":class:`AsWKT`"
msgstr ":class:`AsWKT`"

msgid ":class:`Azimuth`"
msgstr ":class:`Azimuth`"

msgid "X (LWGEOM/RTTOPO)"
msgstr "X (LWGEOM/RTTOPO)"

msgid ":class:`BoundingCircle`"
msgstr ":class:`BoundingCircle`"

msgid ":class:`Centroid`"
msgstr ":class:`Centroid`"

msgid ":class:`ClosestPoint`"
msgstr ":class:`ClosestPoint`"

msgid ":class:`Difference`"
msgstr ":class:`Difference`"

msgid ":class:`Distance`"
msgstr ":class:`Distance`"

msgid ":class:`Envelope`"
msgstr ":class:`Envelope`"

msgid ":class:`ForcePolygonCW`"
msgstr ":class:`ForcePolygonCW`"

msgid ":class:`FromWKB`"
msgstr ":class:`FromWKB`"

msgid ":class:`FromWKT`"
msgstr ":class:`FromWKT`"

msgid ":class:`GeoHash`"
msgstr ":class:`GeoHash`"

msgid ":class:`Intersection`"
msgstr ":class:`Intersection`"

msgid ":class:`IsEmpty`"
msgstr ":class:`IsEmpty`"

msgid ":class:`IsValid`"
msgstr ":class:`IsValid`"

msgid ":class:`Length`"
msgstr ":class:`Length`"

msgid ":class:`LineLocatePoint`"
msgstr ":class:`LineLocatePoint`"

msgid ":class:`MakeValid`"
msgstr ":class:`MakeValid`"

msgid ":class:`MemSize`"
msgstr ":class:`MemSize`"

msgid ":class:`NumGeometries`"
msgstr ":class:`NumGeometries`"

msgid ":class:`NumPoints`"
msgstr ":class:`NumPoints`"

msgid ":class:`Perimeter`"
msgstr ":class:`Perimeter`"

msgid ":class:`PointOnSurface`"
msgstr ":class:`PointOnSurface`"

msgid ":class:`Reverse`"
msgstr ":class:`Reverse`"

msgid ":class:`Scale`"
msgstr ":class:`Scale`"

msgid ":class:`SnapToGrid`"
msgstr ":class:`SnapToGrid`"

msgid ":class:`SymDifference`"
msgstr ":class:`SymDifference`"

msgid ":class:`Transform`"
msgstr ":class:`Transform`"

msgid ":class:`Translate`"
msgstr ":class:`Translate`"

msgid ":class:`Union`"
msgstr ":class:`Union`"

msgid "Aggregate Functions"
msgstr "集計関数"

msgid ""
"The following table provides a summary of what GIS-specific aggregate "
"functions are available on each spatial backend. Please note that MySQL does "
"not support any of these aggregates, and is thus excluded from the table."
msgstr ""
"次の表は、各空間バックエンドで使用できる GIS 固有の集計関数の概要です。MySQL "
"はこれらの集計関数をサポートしていないため、表から除外されていることに注意し"
"てください。"

msgid "Aggregate"
msgstr "集計関数"

msgid ":class:`Collect`"
msgstr ":class:`Collect`"

msgid ":class:`Extent`"
msgstr ":class:`Extent`"

msgid ":class:`Extent3D`"
msgstr ":class:`Extent3D`"

msgid ":class:`MakeLine`"
msgstr ":class:`MakeLine`"

msgid "Footnotes"
msgstr "脚注"

msgid ""
"*See* Open Geospatial Consortium, Inc., `OpenGIS Simple Feature "
"Specification For SQL <https://portal.ogc.org/files/?artifact_id=829>`_, "
"Document 99-049 (May 5, 1999), at  Ch. 3.2.5, p. 3-11 (SQL Textual "
"Representation of Geometry)."
msgstr ""
"*参照* Open Geospatial Consortium, Inc. の `OpenGIS Simple Feature "
"Specification For SQL <https://portal.ogc.org/files/?artifact_id=829>`_ 、ド"
"キュメント 99-049 (May 5, 1999), at Ch. 3.2.5, p. 3-11 (SQL Textual "
"Representation of Geometry) 。"

msgid ""
"*See* `PostGIS EWKB, EWKT and Canonical Forms <https://postgis.net/docs/"
"using_postgis_dbmanagement.html#EWKB_EWKT>`_, PostGIS documentation at Ch. "
"4.1.2."
msgstr ""
"*参照* `PostGIS EWKB, EWKT and Canonical Forms <https://postgis.net/docs/"
"using_postgis_dbmanagement.html#EWKB_EWKT>`_, PostGIS documentation at Ch. "
"4.1.2."

msgid ""
"*See* `PostGIS documentation <https://postgis.net/docs/ST_DistanceSphere."
"html>`_ on ``ST_DistanceSphere``."
msgstr ""
"*参照* `PostGIS documentation <https://postgis.net/docs/ST_DistanceSphere."
"html>`_ の ``ST_DistanceSphere`` を参照してください。"

msgid "Refer :ref:`mysql-spatial-limitations` section for more details."
msgstr "詳細は :ref:`mysql-spatial-limitations` セクションを参照してください。"

msgid "Deploying GeoDjango"
msgstr "GeoDjango のデプロイ"

msgid ""
"Basically, the deployment of a GeoDjango application is not different from "
"the deployment of a normal Django application. Please consult Django's :doc:"
"`deployment documentation </howto/deployment/index>`."
msgstr ""
"基本的に、GeoDjango アプリケーションのデプロイは通常の Django アプリケーショ"
"ンのデプロイと変わりません。Django の :doc:`デプロイのドキュメント </howto/"
"deployment/index>` を参照してください。"

msgid ""
"GeoDjango uses the GDAL geospatial library which is not thread safe at this "
"time.  Thus, it is *highly* recommended to not use threading when deploying "
"-- in other words, use an appropriate configuration of Apache."
msgstr ""
"GeoDjango は GDAL 地理空間ライブラリを使いますが、現時点ではスレッドセーフで"
"はあ りません。したがって、デプロイ時にはスレッドを使わないことを *強く* 推奨"
"します。つまり、Apache の適切な設定を使うことです。"

msgid ""
"For example, when configuring your application with ``mod_wsgi``, set the "
"``WSGIDaemonProcess`` attribute ``threads`` to ``1``, unless Apache may "
"crash when running your GeoDjango application.  Increase the number of "
"``processes`` instead."
msgstr ""
"たとえば、アプリケーションを ``mod_wsgi`` で構成する場合、"
"``WSGIDaemonProcess`` 属性の ``threads`` を ``1`` に設定してください。設定し"
"ないと、GeoDjangoアプリケーションを実行しているときにApacheがクラッシュする可"
"能性があります。その代わりに、``processes`` の数を増やしてください。"

msgid "Geographic Feeds"
msgstr "地理情報フィード"

msgid ""
"GeoDjango has its own :class:`Feed` subclass that may embed location "
"information in RSS/Atom feeds formatted according to either the `Simple "
"GeoRSS`__ or `W3C Geo`_ standards.  Because GeoDjango's syndication API is a "
"superset of Django's, please consult :doc:`Django's syndication "
"documentation </ref/contrib/syndication>` for details on general usage."
msgstr ""
"GeoDjango には独自の :class:`Feed` サブクラスがあり、`Simple GeoRSS`__ また"
"は `W3C Geo`_ 標準に従ってフォーマットされた RSS/Atom フィードに位置情報を埋"
"め込むことができます。GeoDjango の syndication API は Django のスーパーセット"
"なので、 :doc:`Django の配信 (syndication) フレームワークのドキュメント </"
"ref/contrib/syndication>` を参照してください。"

msgid "API Reference"
msgstr "API リファレンス"

msgid "``Feed`` Subclass"
msgstr "``Feed`` サブクラス"

msgid ""
"In addition to methods provided by the :class:`django.contrib.syndication."
"views.Feed` base class, GeoDjango's ``Feed`` class provides the following "
"overrides. Note that these overrides may be done in multiple ways::"
msgstr ""
":class:`django.contrib.syndication.views.Feed` 基底クラスに提供されているメ"
"ソッドに加えて、GeoDjango の ``Feed`` クラスは以下のオーバーライドを提供しま"
"す。これらのオーバーライドは複数の方法で行うことができますので、その点に注意"
"してください:"

msgid ""
"Takes the object returned by ``get_object()`` and returns the *feed's* "
"geometry. Typically this is a ``GEOSGeometry`` instance, or can be a tuple "
"to represent a point or a box. For example::"
msgstr ""
"``get_object()`` で返されたオブジェクトを受け取り、 *feed* のジオメトリを返し"
"ます。通常、これは ``GEOSGeometry`` インスタンスであり、ポイントまたはボック"
"スを表すタプルであることもあります。例えば:"

msgid ""
"Set this to return the geometry for each *item* in the feed. This can be a "
"``GEOSGeometry`` instance, or a tuple that represents a point coordinate or "
"bounding box. For example::"
msgstr ""
"これをセットすると、フィードの各 *アイテム* のジオメトリを返します。これは "
"``GEOSGeometry`` のインスタンス、 あるいは点座標やバウンディングボックスを表"
"すタプルとなります。たとえば次のようになります:"

msgid "``SyndicationFeed`` Subclasses"
msgstr "``SyndicationFeed`` サブクラス"

msgid ""
"The following :class:`django.utils.feedgenerator.SyndicationFeed` subclasses "
"are available:"
msgstr ""
"以下の :class:`django.utils.feedgenerator.SyndicationFeed` のサブクラスが利用"
"可能です: "

msgid ""
"`W3C Geo`_ formatted feeds only support :class:`~django.contrib.gis.db."
"models.PointField` geometries."
msgstr ""
"`W3C Geo`_ フォーマットのフィードでは、:class:`~django.contrib.gis.db.models."
"PointField` ジオメトリのみがサポートされています。"

msgid "GeoDjango Forms API"
msgstr "GeoDjango フォーム API"

msgid ""
"GeoDjango provides some specialized form fields and widgets in order to "
"visually display and edit geolocalized data on a map. By default, they use "
"`OpenLayers`_-powered maps, with a base WMS layer provided by `NASA`_."
msgstr ""
"GeoDjango はジオローカライズされたデータを地図上に視覚的に表示・編集するため"
"に、いくつかの特殊なフォームフィールドとウィジェットを提供します。デフォルト"
"では、 `NASA`_ が提供する WMS レイヤーをベースとした `OpenLayers`_ を利用した"
"地図を使います。"

msgid "Field arguments"
msgstr "フィールドの引数"

msgid ""
"In addition to the regular :ref:`form field arguments <core-field-"
"arguments>`, GeoDjango form fields take the following optional arguments."
msgstr ""
"通常の :ref:`フォームフィールドの引数 <core-field-arguments>` に加えて、 "
"GeoDjango のフォームフィールドは以下のオプションの引数を取ります。"

msgid "``srid``"
msgstr "``srid``"

msgid ""
"This is the SRID code that the field value should be transformed to. For "
"example, if the map widget SRID is different from the SRID more generally "
"used by your application or database, the field will automatically convert "
"input values into that SRID."
msgstr ""
"これはフィールドの値を変換するSRIDコードです。例えば、マップウィジェットの"
"SRIDがアプリケーションやデータベースで一般的に使われるSRIDと異なる場合、"
"フィールドは入力値を自動的にそのSRIDに変換します。"

msgid "``geom_type``"
msgstr "``geom_type``"

msgid ""
"You generally shouldn't have to set or change that attribute which should be "
"set up depending on the field class. It matches the OpenGIS standard "
"geometry name."
msgstr ""
"通常、その属性を設定または変更する必要はありません。この属性はフィールドクラ"
"スに応じて設定されるべきです。これはOpenGIS標準のジオメトリ名に一致します。"

msgid "Form field classes"
msgstr "フォームフィールド クラス"

msgid "``GeometryField``"
msgstr "``GeometryField``"

msgid "``PointField``"
msgstr "``PointField``"

msgid "``LineStringField``"
msgstr "``LineStringField``"

msgid "``PolygonField``"
msgstr "``PolygonField``"

msgid "``MultiPointField``"
msgstr "``MultiPointField``"

msgid "``MultiLineStringField``"
msgstr "``MultiLineStringField``"

msgid "``MultiPolygonField``"
msgstr "``MultiPolygonField``"

msgid "``GeometryCollectionField``"
msgstr "``GeometryCollectionField``"

msgid "Form widgets"
msgstr "フォームウィジェット"

msgid ""
"GeoDjango form widgets allow you to display and edit geographic data on a "
"visual map. Note that none of the currently available widgets supports 3D "
"geometries, hence geometry fields will fallback using a ``Textarea`` widget "
"for such data."
msgstr ""
"GeoDjango のフォームウィジェットを使うと、ビジュアルマップ上に地理情報を表示"
"したり編集したりできます。現在利用可能なウィジェットはどれも 3D ジオメトリを"
"サポートしていないので、 ジオメトリフィールドは ``Textarea`` ウィジェットを"
"使ってフォールバックします。"

msgid "Widget attributes"
msgstr "ウィジェットの属性"

msgid ""
"GeoDjango widgets are template-based, so their attributes are mostly "
"different from other Django widget attributes."
msgstr ""
"GeoDjango ウィジェットはテンプレートベースなので、その属性のほとんどは他の "
"Django ウィジェットの属性と異なります。"

msgid "The OpenGIS geometry type, generally set by the form field."
msgstr ""
"OpenGIS ジオメトリタイプ。通常、フォームフィールドによって設定されます。"

msgid "Height and width of the widget map (default is 400x600)."
msgstr "ウィジェットマップの高さと幅 (デフォルトは400x600)。"

msgid ""
"``map_height`` and ``map_width`` attributes are deprecated, use CSS to size "
"map widgets instead."
msgstr ""
"``map_height`` 属性と ``map_width`` 属性は非推奨となりました。代わりに、マッ"
"プウィジェットのサイズ指定にはCSSを使用してください。"

msgid "SRID code used by the map (default is 4326)."
msgstr "地図で使用されるSRIDコード (デフォルトは4326)。"

msgid ""
"Boolean value specifying if a textarea input showing the serialized "
"representation of the current geometry is visible, mainly for debugging "
"purposes (default is ``False``)."
msgstr ""
"主にデバッグのために、現在のジオメトリのシリアライズされた表現を示すテキスト"
"エリア入力を表示するかどうかを指定するブール値 (デフォルトは ``False``)."

msgid ""
"Indicates if the widget supports edition of 3D data (default is ``False``)."
msgstr ""
"ウィジェットが3Dデータの編集をサポートしているかどうかを示します (デフォルト"
"は ``False`` です) 。"

msgid "The template used to render the map widget."
msgstr "地図ウィジェットのレンダリングに使用されるテンプレート。"

msgid ""
"You can pass widget attributes in the same manner that for any other Django "
"widget. For example::"
msgstr ""
"ウィジェットの属性は、他のDjangoウィジェットと同じように渡すことができます。"
"例えば、次のようにします:"

msgid "Widget classes"
msgstr "Widget クラス"

msgid "``BaseGeometryWidget``"
msgstr "``BaseGeometryWidget``"

msgid ""
"This is an abstract base widget containing the logic needed by subclasses. "
"You cannot directly use this widget for a geometry field. Note that the "
"rendering of GeoDjango widgets is based on a template, identified by the :"
"attr:`template_name` class attribute."
msgstr ""
"これは、サブクラスが必要とするロジックを含む抽象ベースウィジェットです。この"
"ウィジェットを直接ジオメトリフィールドに使うことはできません。GeoDjango ウィ"
"ジェットのレンダリングは :attr:`template_name` クラス属性で識別されるテンプ"
"レートに基づいていることに注意してください。"

msgid "``OpenLayersWidget``"
msgstr "``OpenLayersWidget``"

msgid ""
"This is the default widget used by all GeoDjango form fields. "
"``template_name`` is ``gis/openlayers.html``."
msgstr ""
"これはすべての GeoDjango フォームフィールドで使用されるデフォルトウィジェット"
"です。``template_name`` は ``gis/openlayers.html`` です。"

msgid ""
"``OpenLayersWidget`` and :class:`OSMWidget` use the ``ol.js`` file hosted on "
"the ``cdn.jsdelivr.net`` content-delivery network. You can subclass these "
"widgets in order to specify your own version of the ``ol.js`` file in the "
"``js`` property of the inner ``Media`` class (see :ref:`assets-as-a-static-"
"definition`)."
msgstr ""
"``OpenLayersWidget`` と :class:`OSMWidget` は ``cdn.jsdelivr.net`` のコンテン"
"ツ配信ネットワークでホストされている ``ol.js`` ファイルを使用します。これらの"
"ウィジェットをサブクラス化することで、内部の ``Media`` クラスの ``js`` プロパ"
"ティに ``ol.js`` ファイルの独自のバージョンを指定できます (:ref:`assets-as-a-"
"static-definition` を参照) 。"

msgid "``OSMWidget``"
msgstr "``OSMWidget``"

msgid ""
"This widget uses an OpenStreetMap base layer to display geographic objects "
"on. Attributes are:"
msgstr ""
"このウィジェットは地理情報オブジェクトを表示するためにOpenStreetMapベースレイ"
"ヤーを使用します。属性は以下の通りです:"

msgid "``gis/openlayers-osm.html``"
msgstr "``gis/openlayers-osm.html``"

msgid ""
"The default center latitude and longitude are ``47`` and ``5``, "
"respectively, which is a location in eastern France."
msgstr ""
"デフォルトの中心緯度と経度はそれぞれ ``47`` と ``5`` で、フランス東部の位置で"
"す。"

msgid "The default map zoom is ``12``."
msgstr "デフォルトの地図の縮尺は ``12`` です。"

msgid ""
"The :class:`OpenLayersWidget` note about JavaScript file hosting above also "
"applies here. See also this `FAQ answer`_ about ``https`` access to map "
"tiles."
msgstr ""
":class:`OpenLayersWidget` の JavaScript ファイルのホスティングに関する注意は"
"ここにも適用されます。マップタイルへの ``https`` アクセスに関する `FAQ "
"answer`_ も参照してください。"

msgid "Geographic Database Functions"
msgstr "地理情報データベース関数"

msgid ""
"The functions documented on this page allow users to access geographic "
"database functions to be used in annotations, aggregations, or filters in "
"Django."
msgstr ""
"このページで説明する関数を使えば、Django のアノテーションや集約、フィルタで使"
"う地理情報データベース関数にアクセスできます。"

msgid "Example:"
msgstr "例:"

msgid ""
"Not all backends support all functions, so refer to the documentation of "
"each function to see if your database backend supports the function you want "
"to use. If you call a geographic function on a backend that doesn't support "
"it, you'll get a ``NotImplementedError`` exception."
msgstr ""
"すべてのバックエンドがすべての関数をサポートしているわけではないので、それぞ"
"れの関数のドキュメントを参照して、使用したい関数をサポートしているかどうかを"
"確認してください。サポートしていないバックエンドで地理情報関数を呼び出すと、 "
"``NotImplementedError`` 例外が発生します。"

msgid "Function's summary:"
msgstr "関数の概要:"

msgid "Measurement"
msgstr "測定"

msgid "Relationships"
msgstr "リレーション"

msgid "Operations"
msgstr "操作"

msgid "Editors"
msgstr "編集"

msgid "Input format"
msgstr "入力フォーマット"

msgid "Output format"
msgstr "出力フォーマット"

msgid "Miscellaneous"
msgstr "その他"

msgid ":class:`GeometryDistance`"
msgstr ":class:`GeometryDistance`"

msgid ":class:`Envelope` :class:`LineLocatePoint` :class:`PointOnSurface`"
msgstr ":class:`Envelope` :class:`LineLocatePoint` :class:`PointOnSurface`"

msgid ":class:`SnapToGrid` :class:`Transform` :class:`Translate`"
msgstr ":class:`SnapToGrid` :class:`Transform` :class:`Translate`"

msgid ":class:`FromWKB` :class:`FromWKT`"
msgstr ":class:`FromWKB` :class:`FromWKT`"

msgid ":class:`AsWKB` :class:`AsWKT` :class:`GeoHash`"
msgstr ":class:`AsWKB` :class:`AsWKT` :class:`GeoHash`"

msgid "``Area``"
msgstr "``Area``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"polygon-property-functions.html#function_st-area>`_, Oracle, `PostGIS "
"<https://postgis.net/docs/ST_Area.html>`__, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB、`MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"polygon-property-functions.html#function_st-area>`_、Oracle、`PostGIS "
"<https://postgis.net/docs/ST_Area.html>`__、SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns the area of the "
"field as an :class:`~django.contrib.gis.measure.Area` measure."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、そのフィールドの面積を :class:"
"`~django.contrib.gis.measure.Area` 測定値として返します。"

msgid ""
"MySQL and SpatiaLite without LWGEOM/RTTOPO don't support area calculations "
"on geographic SRSes."
msgstr ""
"LWGEOM/RTTOPOを使用しないMySQLとSpatiaLiteは、地理SRSの面積計算をサポートして"
"いません。"

msgid "``AsGeoJSON``"
msgstr "``AsGeoJSON``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"geojson-functions.html#function_st-asgeojson>`__, Oracle, `PostGIS <https://"
"postgis.net/docs/ST_AsGeoJSON.html>`__, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"geojson-functions.html#function_st-asgeojson>`__, Oracle, `PostGIS <https://"
"postgis.net/docs/ST_AsGeoJSON.html>`__, SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns a `GeoJSON "
"<https://geojson.org/>`_ representation of the geometry. Note that the "
"result is not a complete GeoJSON structure but only the ``geometry`` key "
"content of a GeoJSON structure. See also :doc:`/ref/contrib/gis/serializers`."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、地理情報の `GeoJSON <https://"
"geojson.org/>`_ 表現を返す。結果は完全な GeoJSON 構造体ではなく、GeoJSON 構造"
"体のキーコンテンツ ``geometry`` だけであることに注意してください。 :doc:`/"
"ref/contrib/gis/serializers` も参照。"

msgid "Keyword Argument"
msgstr "キーワード引数"

msgid "Description"
msgstr "説明"

msgid "``bbox``"
msgstr "``bbox``"

msgid ""
"Set this to ``True`` if you want the bounding box to be included in the "
"returned GeoJSON. Ignored on Oracle."
msgstr ""
"返される GeoJSON にバウンディングボックスを含めたい場合は、これを ``True`` に"
"設定します。Oracle では無視される。"

msgid "``crs``"
msgstr "``crs``"

msgid ""
"Set this to ``True`` if you want the coordinate reference system to be "
"included in the returned GeoJSON. Ignored on MySQL and Oracle."
msgstr ""
"返される GeoJSON に座標参照系を含めたい場合は、これを ``True`` に設定してくだ"
"さい。MySQLとOracleでは無視されます。"

msgid "``precision``"
msgstr "``precision``"

msgid ""
"It may be used to specify the number of significant digits for the "
"coordinates in the GeoJSON representation -- the default value is 8. Ignored "
"on Oracle."
msgstr ""
"GeoJSON 表現での座標の有効数字の桁数を指定します。デフォルト値は8です。Oracle"
"では無視されます。"

msgid "``AsGML``"
msgstr "``AsGML``"

msgid ""
"*Availability*: Oracle, `PostGIS <https://postgis.net/docs/ST_AsGML."
"html>`__, SpatiaLite"
msgstr ""
"*利用可能なDB*: Oracle, `PostGIS <https://postgis.net/docs/ST_AsGML."
"html>`__, SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns a `Geographic "
"Markup Language (GML)`__ representation of the geometry."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、そのジオメトリの `Geographic "
"Markup Language (GML)`__ 表現を返します。"

msgid ""
"Specifies the number of significant digits for the coordinates in the GML "
"representation -- the default value is 8. Ignored on Oracle."
msgstr ""
"GML 表現における座標の有効桁数を指定します (デフォルト値は 8)。Oracle では無"
"視されます。"

msgid "``version``"
msgstr "``version``"

msgid "Specifies the GML version to use: 2 (default) or 3."
msgstr "使用するGMLバージョンを指定します: 2 (デフォルト) または 3。"

msgid "``AsKML``"
msgstr "``AsKML``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_AsKML.html>`__, "
"SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_AsKML.html>`__、"
"SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns a `Keyhole "
"Markup Language (KML)`__ representation of the geometry."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、地理情報の `Keyhole Markup "
"Language (KML)`__ 表現を返す。"

msgid ""
"This keyword may be used to specify the number of significant digits for the "
"coordinates in the KML representation -- the default value is 8."
msgstr ""
"このキーワードは、KML表現で座標の有効桁数を指定するために使用できます。デフォ"
"ルト値は8です。"

msgid "``AsSVG``"
msgstr "``AsSVG``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_AsSVG.html>`__, "
"SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_AsSVG.html>`__, "
"SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns a `Scalable "
"Vector Graphics (SVG)`__ representation of the geometry."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、そのジオメトリの `Scalable "
"Vector Graphics (SVG)`__ 表現を返します。"

msgid "``relative``"
msgstr "``relative``"

msgid ""
"If set to ``True``, the path data will be implemented in terms of relative "
"moves. Defaults to ``False``, meaning that absolute moves are used instead."
msgstr ""
"``True`` に設定すると、経路データは相対移動として実装されます。デフォルトは "
"``False`` で、代わりに絶対移動が使用されます。"

msgid ""
"This keyword may be used to specify the number of significant digits for the "
"coordinates in the SVG representation -- the default value is 8."
msgstr ""
"このキーワードは、SVG 表現内の座標の有効桁数を指定するために使用できます。デ"
"フォルト値は 8 です。"

msgid "``AsWKB``"
msgstr "``AsWKB``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"format-conversion-functions.html#function_st-asbinary>`__, Oracle, `PostGIS "
"<https://postgis.net/docs/ST_AsBinary.html>`__, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"format-conversion-functions.html#function_st-asbinary>`__, Oracle, `PostGIS "
"<https://postgis.net/docs/ST_AsBinary.html>`__, SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns a `Well-known "
"binary (WKB)`_ representation of the geometry."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、そのジオメトリの `Well-known "
"binary (WKB)`_ 表現を返します。"

msgid "``AsWKT``"
msgstr "``AsWKT``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"format-conversion-functions.html#function_st-astext>`__, Oracle, `PostGIS "
"<https://postgis.net/docs/ST_AsText.html>`__, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"format-conversion-functions.html#function_st-astext>`__, Oracle, `PostGIS "
"<https://postgis.net/docs/ST_AsText.html>`__, SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns a `Well-known "
"text (WKT)`_ representation of the geometry."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、ジオメトリの `Well-known text "
"(WKT)`_ 表現を返します。"

msgid "``Azimuth``"
msgstr "``Azimuth``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Azimuth.html>`__, "
"SpatiaLite (LWGEOM/RTTOPO)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Azimuth.html>`__, "
"SpatiaLite (LWGEOM/RTTOPO)"

msgid ""
"Returns the azimuth in radians of the segment defined by the given point "
"geometries, or ``None`` if the two points are coincident. The azimuth is "
"angle referenced from north and is positive clockwise: north = ``0``; east = "
"``π/2``; south = ``π``; west = ``3π/2``."
msgstr ""
"与えられた点のジオメトリで定義されるセグメントの方位をラジアンで返します。2つ"
"の点が重なっている場合は ``None`` を返します。方位は北を基準とした角度で、時"
"計回りが正です: 北 = ``0``; 東 = ``π/2``; 南 = ``π``; 西 = ``3π/2`` 。"

msgid "``BoundingCircle``"
msgstr "``BoundingCircle``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_MinimumBoundingCircle."
"html>`__, `Oracle <https://docs.oracle.com/en/database/oracle/oracle-"
"database/21/spatl/ SDO_GEOM-reference.html#GUID-82A61626-BB64-4793-B53D-"
"A0DBEC91831A>`_"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_MinimumBoundingCircle."
"html>`__, `Oracle <https://docs.oracle.com/en/database/oracle/oracle-"
"database/21/spatl/ SDO_GEOM-reference.html#GUID-82A61626-BB64-4793-B53D-"
"A0DBEC91831A>`_"

msgid ""
"Accepts a single geographic field or expression and returns the smallest "
"circle polygon that can fully contain the geometry."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、そのジオメトリを完全に含むことが"
"できる最小の円ポリゴンを返します。"

msgid "The ``num_seg`` parameter is used only on PostGIS."
msgstr "``num_seg`` パラメータは PostGIS 上でのみ使用されます。"

msgid "``Centroid``"
msgstr "``Centroid``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"polygon-property-functions.html#function_st-centroid>`__, `PostGIS <https://"
"postgis.net/docs/ST_Centroid.html>`__, Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"polygon-property-functions.html#function_st-centroid>`__, `PostGIS <https://"
"postgis.net/docs/ST_Centroid.html>`__, Oracle, SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns the ``centroid`` "
"value of the geometry."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、ジオメトリの ``centroid`` 値を返"
"す。"

msgid "``ClosestPoint``"
msgstr "``ClosestPoint``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_ClosestPoint.html>`__, "
"SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_ClosestPoint.html>`__, "
"SpatiaLite"

msgid ""
"Accepts two geographic fields or expressions and returns the 2-dimensional "
"point on geometry A that is closest to geometry B."
msgstr ""
"2つの地理情報フィールドまたは式を受け取り、地理情報 A 上で地理情報 B に最も近"
"い 2次元ポイントを返します。"

msgid "``Difference``"
msgstr "``Difference``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"operator-functions.html#function_st-difference>`__, `PostGIS <https://"
"postgis.net/docs/ST_Difference.html>`__, Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"operator-functions.html#function_st-difference>`__, `PostGIS <https://"
"postgis.net/docs/ST_Difference.html>`__, Oracle, SpatiaLite"

msgid ""
"Accepts two geographic fields or expressions and returns the geometric "
"difference, that is the part of geometry A that does not intersect with "
"geometry B."
msgstr ""
"2つの地理情報フィールドまたは式を受け取り、幾何学的な差、つまり地理情報Aのう"
"ち地理情報Bと重ならない部分を返す。"

msgid "``Distance``"
msgstr "``Distance``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"relation-functions-object-shapes.html#function_st-distance>`__, `PostGIS "
"<https://postgis.net/docs/ST_Distance.html>`__, Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"relation-functions-object-shapes.html#function_st-distance>`__, `PostGIS "
"<https://postgis.net/docs/ST_Distance.html>`__, Oracle, SpatiaLite"

msgid ""
"Accepts two geographic fields or expressions and returns the distance "
"between them, as a :class:`~django.contrib.gis.measure.Distance` object. On "
"MySQL, a raw float value is returned when the coordinates are geodetic."
msgstr ""
"2つの地理情報フィールドまたは式を受け取り、それらの間の距離を :class:"
"`~django.contrib.gis.measure.Distance` オブジェクトとして返します。MySQL で"
"は、座標が測地系の場合、生の float 値が返されます。"

msgid ""
"On backends that support distance calculation on geodetic coordinates, the "
"proper backend function is automatically chosen depending on the SRID value "
"of the geometries (e.g. `ST_DistanceSphere <https://postgis.net/docs/"
"ST_DistanceSphere.html>`__ on PostGIS)."
msgstr ""
"測地座標での距離計算をサポートするバックエンドでは、ジオメトリの SRID 値に応"
"じて適切なバックエンド関数が自動的に選択されます (例: PostGIS の "
"`ST_DistanceSphere <https://postgis.net/docs/ST_DistanceSphere.html>`__)。"

msgid ""
"When distances are calculated with geodetic (angular) coordinates, as is the "
"case with the default WGS84 (4326) SRID, you can set the ``spheroid`` "
"keyword argument to decide if the calculation should be based on a simple "
"sphere (less accurate, less resource-intensive) or on a spheroid (more "
"accurate, more resource-intensive)."
msgstr ""
"デフォルトのWGS84 (4326) SRIDのように測地 (角度) 座標で距離を計算する場合、 "
"``spheroid`` キーワード引数を設定することで、単純な球体 (精度が低く、リソース"
"をあまり必要としない) か球体 (精度が高く、リソースを多く必要とする) のどちら"
"に基づいて計算するかを決めることができます。"

msgid ""
"In the following example, the distance from the city of Hobart to every "
"other :class:`~django.contrib.gis.db.models.PointField` in the "
"``AustraliaCity`` queryset is calculated:"
msgstr ""
"以下の例では、Hobart 市から ``AustraliaCity`` クエリセット内の他の :class:"
"`~django.contrib.gis.db.models.PointField` までの距離を計算しています:"

msgid ""
"Because the ``distance`` attribute is a :class:`~django.contrib.gis.measure."
"Distance` object, you can easily express the value in the units of your "
"choice. For example, ``city.distance.mi`` is the distance value in miles and "
"``city.distance.km`` is the distance value in kilometers. See :doc:`measure` "
"for usage details and the list of :ref:`supported_units`."
msgstr ""
"``distance`` 属性は :class:`~django.contrib.gis.measure.Distance` オブジェク"
"トなので、簡単に任意の単位で値を表現できます。例えば、 ``city.distance.mi`` "
"はマイル単位の距離値であり、 ``city.distance.km`` はキロメートル単位の距離値"
"です。使用方法の詳細や :ref:`supported_units` のリストについては、 :doc:"
"`measure` を参照してください。"

msgid "``Envelope``"
msgstr "``Envelope``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"general-property-functions.html#function_st-envelope>`__, `Oracle <https://"
"docs.oracle.com/en/database/oracle/oracle-database/21/spatl/ spatial-"
"operators-reference.html#GUID-ACED800F-3435-44AA-9606-D40934A23ED0>`__, "
"`PostGIS <https://postgis.net/docs/ST_Envelope.html>`__, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"general-property-functions.html#function_st-envelope>`__, `Oracle <https://"
"docs.oracle.com/en/database/oracle/oracle-database/21/spatl/ spatial-"
"operators-reference.html#GUID-ACED800F-3435-44AA-9606-D40934A23ED0>`__, "
"`PostGIS <https://postgis.net/docs/ST_Envelope.html>`__, SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns the geometry "
"representing the bounding box of the geometry."
msgstr ""
"1つの地理情報フィールドまたは式を受け取り、ジオメトリのバウンディングボックス"
"を表すジオメトリを返します。"

msgid "``ForcePolygonCW``"
msgstr "``ForcePolygonCW``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_ForcePolygonCW."
"html>`__, SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_ForcePolygonCW."
"html>`__, SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns a modified "
"version of the polygon/multipolygon in which all exterior rings are oriented "
"clockwise and all interior rings are oriented counterclockwise. Non-"
"polygonal geometries are returned unchanged."
msgstr ""
"1つの地理情報フィールドまたは式を受け取り、すべての外側のリングが時計回り、す"
"べての内側のリングが反時計回りであるポリゴン/マルチポリゴンの修正版を返しま"
"す。多角形以外のジオメトリは変更されずに返されます。"

msgid "``FromWKB``"
msgstr "``FromWKB``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-wkb-"
"functions.html#function_st-geomfromwkb>`__, Oracle, `PostGIS <https://"
"postgis.net/docs/ST_GeomFromWKB.html>`__, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-wkb-"
"functions.html#function_st-geomfromwkb>`__, Oracle, `PostGIS <https://"
"postgis.net/docs/ST_GeomFromWKB.html>`__, SpatiaLite"

msgid "Creates geometry from `Well-known binary (WKB)`_ representation."
msgstr "`Well-known binary (WKB)`_ 表現からジオメトリを作成します。"

msgid "``FromWKT``"
msgstr "``FromWKT``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-wkt-"
"functions.html#function_st-geomfromtext>`__, Oracle, `PostGIS <https://"
"postgis.net/docs/ST_GeomFromText.html>`__, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-wkt-"
"functions.html#function_st-geomfromtext>`__, Oracle, `PostGIS <https://"
"postgis.net/docs/ST_GeomFromText.html>`__, SpatiaLite"

msgid "Creates geometry from `Well-known text (WKT)`_ representation."
msgstr "`Well-known text (WKT)`_ 表現からジオメトリを作成します。"

msgid "``GeoHash``"
msgstr "``GeoHash``"

msgid ""
"*Availability*: `MySQL <https://dev.mysql.com/doc/refman/en/spatial-geohash-"
"functions.html#function_st-geohash>`__, `PostGIS <https://postgis.net/docs/"
"ST_GeoHash.html>`__, SpatiaLite (LWGEOM/RTTOPO)"
msgstr ""
"*利用可能なDB*: `MySQL <https://dev.mysql.com/doc/refman/en/spatial-geohash-"
"functions.html#function_st-geohash>`__, `PostGIS <https://postgis.net/docs/"
"ST_GeoHash.html>`__, SpatiaLite (LWGEOM/RTTOPO)"

msgid ""
"Accepts a single geographic field or expression and returns a `GeoHash`__ "
"representation of the geometry."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、ジオメトリの `GeoHash`__ 表現を返"
"します。"

msgid ""
"The ``precision`` keyword argument controls the number of characters in the "
"result."
msgstr "キーワード引数 ``precision`` は結果の文字数をコントロールします。"

msgid "``GeometryDistance``"
msgstr "``GeometryDistance``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/geometry_distance_knn."
"html>`__"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/geometry_distance_knn."
"html>`__"

msgid ""
"Accepts two geographic fields or expressions and returns the distance "
"between them. When used in an :meth:`~django.db.models.query.QuerySet."
"order_by` clause, it provides index-assisted nearest-neighbor result sets."
msgstr ""
"2つの地理情報フィールドまたは式を受け取り、それらの間の距離を返します。 :"
"meth:`~django.db.models.query.QuerySet.order_by` 節で使用すると、インデックス"
"アシストされた最近傍の結果セットを提供します。"

msgid "``Intersection``"
msgstr "``Intersection``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"operator-functions.html#function_st-intersection>`__, `PostGIS <https://"
"postgis.net/docs/ST_Intersection.html>`__, Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"operator-functions.html#function_st-intersection>`__, `PostGIS <https://"
"postgis.net/docs/ST_Intersection.html>`__, Oracle, SpatiaLite"

msgid ""
"Accepts two geographic fields or expressions and returns the geometric "
"intersection between them."
msgstr ""
"2 つの地理情報フィールドや式を受け取り、それらの間の幾何学的な交点を返しま"
"す。"

msgid "``IsEmpty``"
msgstr "``IsEmpty``"

msgid "*Availability*: `PostGIS <https://postgis.net/docs/ST_IsEmpty.html>`__"
msgstr "*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_IsEmpty.html>`__"

msgid ""
"Accepts a geographic field or expression and tests if the value is an empty "
"geometry. Returns ``True`` if its value is empty and ``False`` otherwise."
msgstr ""
"地理情報フィールドまたは式を受け取り、その値が空のジオメトリであるかどうかを"
"テストします。値が空の場合は ``True`` を返し、そうでない場合は ``False`` を返"
"します。"

msgid "``IsValid``"
msgstr "``IsValid``"

msgid ""
"*Availability*: `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"convenience-functions.html#function_st-isvalid>`__, `PostGIS <https://"
"postgis.net/docs/ST_IsValid.html>`__, Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"convenience-functions.html#function_st-isvalid>`__, `PostGIS <https://"
"postgis.net/docs/ST_IsValid.html>`__, Oracle, SpatiaLite"

msgid ""
"Accepts a geographic field or expression and tests if the value is well "
"formed. Returns ``True`` if its value is a valid geometry and ``False`` "
"otherwise."
msgstr ""
"地理情報フィールドまたは式を受け取り、その値が整形されているかどうかをテスト"
"します。値が有効なジオメトリであれば ``True`` を返し、そうでなければ "
"``False`` を返します。"

msgid "``Length``"
msgstr "``Length``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"linestring-property-functions.html#function_st-length>`__, Oracle, `PostGIS "
"<https://postgis.net/docs/ST_Length.html>`__, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"linestring-property-functions.html#function_st-length>`__, Oracle, `PostGIS "
"<https://postgis.net/docs/ST_Length.html>`__, SpatiaLite"

msgid ""
"Accepts a single geographic linestring or multilinestring field or "
"expression and returns its length as a :class:`~django.contrib.gis.measure."
"Distance` measure."
msgstr ""
"単一の地理的な linestring または multilinestring フィールドまたは式を受け取"
"り、その長さを :class:`~django.contrib.gis.measure.Distance` メジャーとして返"
"します。"

msgid ""
"On PostGIS and SpatiaLite, when the coordinates are geodetic (angular), you "
"can specify if the calculation should be based on a simple sphere (less "
"accurate, less resource-intensive) or on a spheroid (more accurate, more "
"resource-intensive) with the ``spheroid`` keyword argument."
msgstr ""
"PostGISとSpatiaLiteでは、座標が測地系 (角度) である場合、単純な球 (精度が低"
"く、リソースの消費量が少ない) か、球体 (精度が高く、リソースの消費量が多い) "
"かを ``spheroid`` キーワード引数で指定できます。"

msgid "MySQL doesn't support length calculations on geographic SRSes."
msgstr "MySQLは地理空間SRSにおける長さの計算をサポートしていません。"

msgid "``LineLocatePoint``"
msgstr "``LineLocatePoint``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_LineLocatePoint."
"html>`__, SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_LineLocatePoint."
"html>`__, SpatiaLite"

msgid ""
"Returns a float between 0 and 1 representing the location of the closest "
"point on ``linestring`` to the given ``point``, as a fraction of the 2D line "
"length."
msgstr ""
"与えられた ``point`` に最も近い ``linestring`` 上の点の位置を 0 から 1 まで"
"の float で表し、2D 線の長さに対する割合で返す。"

msgid "``MakeValid``"
msgstr "``MakeValid``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_MakeValid.html>`__, "
"SpatiaLite (LWGEOM/RTTOPO)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_MakeValid.html>`__, "
"SpatiaLite (LWGEOM/RTTOPO)"

msgid ""
"Accepts a geographic field or expression and attempts to convert the value "
"into a valid geometry without losing any of the input vertices. Geometries "
"that are already valid are returned without changes. Simple polygons might "
"become a multipolygon and the result might be of lower dimension than the "
"input."
msgstr ""
"地理情報フィールドまたは式を受け取り、入力頂点を失うことなくその値を有効なジ"
"オメトリに変換しようとします。すでに有効なジオメトリは変更されずに返されま"
"す。単純なポリゴンはマルチポリゴンになる可能性があり、結果は入力よりも低次元"
"になる可能性があります。"

msgid "``MemSize``"
msgstr "``MemSize``"

msgid "*Availability*: `PostGIS <https://postgis.net/docs/ST_MemSize.html>`__"
msgstr "*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_MemSize.html>`__"

msgid ""
"Accepts a single geographic field or expression and returns the memory size "
"(number of bytes) that the geometry field takes."
msgstr ""
"1つの地理情報フィールドまたは式を受け取り、その地理情報フィールドが必要とする"
"メモリサイズ (バイト数) を返します。"

msgid "``NumGeometries``"
msgstr "``NumGeometries``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"geometrycollection-property-functions.html#function_st-numgeometries>`__, "
"`PostGIS <https://postgis.net/docs/ST_NumGeometries.html>`__, Oracle, "
"SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"geometrycollection-property-functions.html#function_st-numgeometries>`__, "
"`PostGIS <https://postgis.net/docs/ST_NumGeometries.html>`__, Oracle, "
"SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns the number of "
"geometries if the geometry field is a collection (e.g., a "
"``GEOMETRYCOLLECTION`` or ``MULTI*`` field). Returns 1 for single geometries."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、地理情報フィールドがコレクション "
"(たとえば ``GEOMETRYCOLLECTION`` または ``MULTI*`` フィールド) の場合は、ジオ"
"メトリ数を返します。単一のジオメトリの場合は 1 を返します。"

msgid "On MySQL, returns ``None`` for single geometries."
msgstr "MySQL では、単一のジオメトリに対して ``None`` を返します。"

msgid "``NumPoints``"
msgstr "``NumPoints``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"linestring-property-functions.html#function_st-numpoints>`__, `PostGIS "
"<https://postgis.net/docs/ST_NPoints.html>`__, Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/gis-"
"linestring-property-functions.html#function_st-numpoints>`__, `PostGIS "
"<https://postgis.net/docs/ST_NPoints.html>`__, Oracle, SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns the number of "
"points in a geometry."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、ジオメトリ内のポイント数を返しま"
"す。"

msgid "On MySQL, returns ``None`` for any non-``LINESTRING`` geometry."
msgstr ""
"MySQL では、``LINESTRING`` でないジオメトリに対しては ``None`` を返します。"

msgid "``Perimeter``"
msgstr "``Perimeter``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Perimeter.html>`__, "
"Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Perimeter.html>`__, "
"Oracle, SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns the perimeter of "
"the geometry field as a :class:`~django.contrib.gis.measure.Distance` object."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、ジオメトリフィールドの周長を :"
"class:`~django.contrib.gis.measure.Distance` オブジェクトとして返します。"

msgid "``PointOnSurface``"
msgstr "``PointOnSurface``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_PointOnSurface."
"html>`__, MariaDB, Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_PointOnSurface."
"html>`__, MariaDB, Oracle, SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns a ``Point`` "
"geometry guaranteed to lie on the surface of the field; otherwise returns "
"``None``."
msgstr ""
"単一の地理情報フィールドまたは式を受け入れ、そのフィールドの表面上にあること"
"が保証された ``Point`` ジオメトリを返します。そのような値がない場合は "
"``None`` を返します。"

msgid "``Reverse``"
msgstr "``Reverse``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Reverse.html>`__, "
"Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Reverse.html>`__, "
"Oracle, SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns a geometry with "
"reversed coordinates."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、座標を反転したジオメトリを返しま"
"す。"

msgid "``Scale``"
msgstr "``Scale``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Scale.html>`__, "
"SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Scale.html>`__, "
"SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns a geometry with "
"scaled coordinates by multiplying them with the ``x``, ``y``, and optionally "
"``z`` parameters."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、それらを ``x``、``y``、任意で "
"``z`` パラメータで乗算してスケーリングした座標を持つジオメトリを返します。"

msgid "``SnapToGrid``"
msgstr "``SnapToGrid``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_SnapToGrid.html>`__, "
"SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_SnapToGrid.html>`__, "
"SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns a geometry with "
"all points snapped to the given grid.  How the geometry is snapped to the "
"grid depends on how many numeric (either float, integer, or long) arguments "
"are given."
msgstr ""
"1 つの地理情報フィールドまたは式を受け取り、すべての点が指定されたグリッドに"
"スナップされたジオメトリを返します。ジオメトリがグリッドにスナップされる方法"
"は、与えられた数値 (float、integer、long のいずれか) の数によって異なります。"

msgid "Number of Arguments"
msgstr "引数の数"

msgid "1"
msgstr "1"

msgid "A single size to snap both the X and Y grids to."
msgstr "XグリッドとYグリッドの両方をスナップする単一のサイズ。"

msgid "2"
msgstr "2"

msgid "X and Y sizes to snap the grid to."
msgstr "グリッドをスナップさせるXとYのサイズ。"

msgid "4"
msgstr "4"

msgid "X, Y sizes and the corresponding X, Y origins."
msgstr "X、Yのサイズと、対応するX、Yの原点。"

msgid "``SymDifference``"
msgstr "``SymDifference``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"operator-functions.html#function_st-symdifference>`__, `PostGIS <https://"
"postgis.net/docs/ST_SymDifference.html>`__, Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"operator-functions.html#function_st-symdifference>`__, `PostGIS <https://"
"postgis.net/docs/ST_SymDifference.html>`__, Oracle, SpatiaLite"

msgid ""
"Accepts two geographic fields or expressions and returns the geometric "
"symmetric difference (union without the intersection) between the given "
"parameters."
msgstr ""
"2つの地理情報フィールドまたは式を受け取り、与えられたパラメータ間の幾何学的対"
"称差 (交差を除いた和) を返します。"

msgid "``Transform``"
msgstr "``Transform``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Transform.html>`__, "
"Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Transform.html>`__, "
"Oracle, SpatiaLite"

msgid ""
"Accepts a geographic field or expression and a SRID integer code, and "
"returns the transformed geometry to the spatial reference system specified "
"by the ``srid`` parameter."
msgstr ""
"地理情報フィールドまたは式と SRID 整数コードを受け取り、``srid`` パラメータで"
"指定された空間参照系に変換されたジオメトリを返します。"

msgid ""
"What spatial reference system an integer SRID corresponds to may depend on "
"the spatial database used.  In other words, the SRID numbers used for Oracle "
"are not necessarily the same as those used by PostGIS."
msgstr ""
"整数のSRIDがどの空間参照系に対応するかは、使用する空間データベースによって異"
"なります。つまり、Oracleで使用されるSRID番号は、必ずしもPostGISで使用される"
"SRID番号と同じではありません。"

msgid "``Translate``"
msgstr "``Translate``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Translate.html>`__, "
"SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Translate.html>`__, "
"SpatiaLite"

msgid ""
"Accepts a single geographic field or expression and returns a geometry with "
"its coordinates offset by the ``x``, ``y``, and optionally ``z`` numeric "
"parameters."
msgstr ""
"単一の地理情報フィールドまたは式を受け取り、その座標を ``x``, ``y``, オプショ"
"ンで ``z`` の数値パラメータでオフセットしたジオメトリを返します。"

msgid "``Union``"
msgstr "``Union``"

msgid ""
"*Availability*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"operator-functions.html#function_st-union>`__, `PostGIS <https://postgis.net/"
"docs/ST_Union.html>`__, Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: MariaDB, `MySQL <https://dev.mysql.com/doc/refman/en/spatial-"
"operator-functions.html#function_st-union>`__, `PostGIS <https://postgis.net/"
"docs/ST_Union.html>`__, Oracle, SpatiaLite"

msgid ""
"Accepts two geographic fields or expressions and returns the union of both "
"geometries."
msgstr ""
"2 つの地理情報フィールドまたは式を受け取り、それらの両方のジオメトリの和集合"
"を返します。"

msgid "GDAL API"
msgstr "GDAL API"

msgid ""
"`GDAL`__ stands for **Geospatial Data Abstraction Library**, and is a "
"veritable \"Swiss army knife\" of GIS data functionality.  A subset of GDAL "
"is the `OGR`__ Simple Features Library, which specializes in reading and "
"writing vector geographic data in a variety of standard formats."
msgstr ""
"`GDAL`__ は **Geospatial Data Abstraction Library** の略であり、GIS データ機"
"能の真の「スイス・アーミーナイフ」とも言える存在です。GDAL のサブセットには、"
"標準フォーマットでのベクトル地理データの読み書きに特化した `OGR`__ Simple "
"Features ライブラリがあります。"

msgid ""
"GeoDjango provides a high-level Python interface for some of the "
"capabilities of OGR, including the reading and coordinate transformation of "
"vector spatial data and minimal support for GDAL's features with respect to "
"raster (image) data."
msgstr ""
"GeoDjango は、ベクトル空間データの読み込みと座標変換、ラスタ (画像) データに"
"関する GDAL の機能の最小限のサポートを含む、OGR の機能の一部に対する高レベル"
"の Python インタフェースを提供します。"

msgid ""
"Although the module is named ``gdal``, GeoDjango only supports some of the "
"capabilities of OGR and GDAL's raster features at this time."
msgstr ""
"モジュールの名前は ``gdal`` ですが、GeoDjangoは現時点ではOGRの一部機能とGDAL"
"のラスタ機能のみをサポートしています。"

msgid "Sample Data"
msgstr "サンプルデータ"

msgid ""
"The GDAL/OGR tools described here are designed to help you read in your "
"geospatial data, in order for most of them to be useful you have to have "
"some data to work with.  If you're starting out and don't yet have any data "
"of your own to use, GeoDjango tests contain a number of data sets that you "
"can use for testing. You can download them here:"
msgstr ""
"ここで説明する GDAL/OGR ツールは、地理空間データの読み込みを支援するように設"
"計されています。もしあなたが使い始めたばかりで、まだ自分で使えるデータを持っ"
"ていないのなら、GeoDjango のテストにはテストに使えるデータセットがたくさん含"
"まれています。以下からダウンロードできます:"

msgid "Vector Data Source Objects"
msgstr "ベクトルデータソースオブジェクト"

msgid "``DataSource``"
msgstr "``DataSource``"

msgid ""
":class:`DataSource` is a wrapper for the OGR data source object that "
"supports reading data from a variety of OGR-supported geospatial file "
"formats and data sources using a consistent interface.  Each data source is "
"represented by a :class:`DataSource` object which contains one or more "
"layers of data.  Each layer, represented by a :class:`Layer` object, "
"contains some number of geographic features (:class:`Feature`), information "
"about the type of features contained in that layer (e.g. points, polygons, "
"etc.), as well as the names and types of any additional fields (:class:"
"`Field`) of data that may be associated with each feature in that layer."
msgstr ""
":class:`DataSource` は OGR データソースオブジェクトのラッパーであり、OGR がサ"
"ポートする様々な地理空間ファイルフォーマットやデータソースから一貫したイン"
"ターフェースを使用してデータを読み込むことをサポートします。各データソース"
"は :class:`DataSource` オブジェクトで表現され、1つ以上のデータのレイヤーを含"
"みます。各レイヤーは :class:`Layer` オブジェクトで表現され、いくつかの地理情"
"報フィーチャ (:class:`Feature`) 、そのレイヤーに含まれるフィーチャ (feture) "
"の種類 (ポイント、ポリゴンなど) に関する情報、およびそのレイヤー内の各フィー"
"チャに関連付けられた追加フィールド (:class:`Field`) の名前とデータ型を含みま"
"す。"

msgid ""
"The constructor for ``DataSource`` only requires one parameter: the path of "
"the file you want to read. However, OGR also supports a variety of more "
"complex data sources, including databases, that may be accessed by passing a "
"special name string instead of a path. For more information, see the `OGR "
"Vector Formats`__ documentation. The :attr:`name` property of a "
"``DataSource`` instance gives the OGR name of the underlying data source "
"that it is using."
msgstr ""
"データソース ``DataSource`` のコンストラクタに必要なパラメータは1つだけです。"
"しかし、OGRはデータベースを含むより複雑なデータソースもサポートしており、パス"
"の代わりに特別な名前文字列を渡すことでアクセスできます。詳細は `OGR Vector "
"Formats`__ のドキュメントを参照してください。 ``DataSource`` インスタンスの :"
"attr:`name` プロパティは、使用するデータソースのOGR名を指定します。"

msgid ""
"The optional ``encoding`` parameter allows you to specify a non-standard "
"encoding of the strings in the source. This is typically useful when you "
"obtain ``DjangoUnicodeDecodeError`` exceptions while reading field values."
msgstr ""
"オプションの ``encoding`` パラメータで、ソース中の文字列の非標準エンコードを"
"指定できます。これは、フィールドの値を読み込む際に "
"``DjangoUnicodeDecodeError`` 例外が発生する場合に便利です。"

msgid ""
"Once you've created your ``DataSource``, you can find out how many layers of "
"data it contains by accessing the :attr:`layer_count` property, or "
"(equivalently) by using the ``len()`` function. For information on accessing "
"the layers of data themselves, see the next section:"
msgstr ""
"データソース ``DataSource`` を作成したら、 :attr:`layer_count` プロパティにア"
"クセスするか、``len()`` 関数を使用することで、データのレイヤー数を知ることが"
"できます。データのレイヤー自体へのアクセスについては、次のセクションを参照し"
"てください:"

msgid "Returns the number of layers in the data source."
msgstr "データソース内のレイヤーの数を返します。"

msgid "Returns the name of the data source."
msgstr "データソースの名前を返します。"

msgid "``Layer``"
msgstr "``Layer``"

msgid ""
"``Layer`` is a wrapper for a layer of data in a ``DataSource`` object. You "
"never create a ``Layer`` object directly. Instead, you retrieve them from a :"
"class:`DataSource` object, which is essentially a standard Python container "
"of ``Layer`` objects. For example, you can access a specific layer by its "
"index (e.g. ``ds[0]`` to access the first layer), or you can iterate over "
"all the layers in the container in a ``for`` loop. The ``Layer`` itself acts "
"as a container for geometric features."
msgstr ""
"``Layer`` は ``DataSource`` オブジェクト内のデータ層をラップするためのもので"
"す。``Layer`` オブジェクトを直接作成することはありません。代わりに、それら"
"を :class:`DataSource` オブジェクトから取得します。これは、本質的には "
"``Layer`` オブジェクトの標準的なPythonコンテナです。例えば、インデックスに"
"よって特定のレイヤーにアクセスできます (例: 最初のレイヤーにアクセスするには "
"``ds[0]``) 、または ``for`` ループでコンテナ内のすべてのレイヤーをイテレート"
"できます。``Layer`` 自体が幾何学的な特徴のためのコンテナとして機能します。"

msgid ""
"Typically, all the features in a given layer have the same geometry type. "
"The :attr:`geom_type` property of a layer is an :class:`OGRGeomType` that "
"identifies the feature type. We can use it to print out some basic "
"information about each layer in a :class:`DataSource`:"
msgstr ""
"通常、特定のレイヤー内のすべてのフィーチャは同じジオメトリタイプを持ちます。"
"レイヤーの :attr:`geom_type` プロパティはフィーチャのタイプを識別する :class:"
"`OGRGeomType` であり、:class:`DataSource` 内の各レイヤーに関する基本情報を出"
"力するために使用できます。"

msgid ""
"The example output is from the cities data source, loaded above, which "
"evidently contains one layer, called ``\"cities\"``, which contains three "
"point features. For simplicity, the examples below assume that you've stored "
"that layer in the variable ``layer``:"
msgstr ""
"上記で読み込まれた都市データソースからの例の出力は、明らかに1つのレイヤーであ"
"る ``\"cities\"`` を含み、その中に3つのポイント・フィーチャが含まれています。"
"以下の例は簡略化のため、そのレイヤーを変数 ``layer`` に保存していると仮定して"
"います:"

msgid "Returns the name of this layer in the data source."
msgstr "データソース内のこのレイヤーの名前を返します。"

msgid "Returns the number of features in the layer. Same as ``len(layer)``:"
msgstr "レイヤー内の要素数を返す。 ``len(layer)`` と同じです:"

msgid ""
"Returns the geometry type of the layer, as an :class:`OGRGeomType` object:"
msgstr ""
"レイヤーのジオメトリタイプを :class:`OGRGeomType` オブジェクトとして返します:"

msgid ""
"Returns the number of fields in the layer, i.e the number of fields of data "
"associated with each feature in the layer:"
msgstr ""
"レイヤーのフィールド数、つまりレイヤー内の各フィーチャに関連付けられたデータ"
"フィールドの数を返します:"

msgid "Returns a list of the names of each of the fields in this layer:"
msgstr "このレイヤーの各フィールド名のリストを返します:"

msgid ""
"Returns a list of the data types of each of the fields in this layer. These "
"are subclasses of ``Field``, discussed below:"
msgstr ""
"このレイヤーの各フィールドのデータ型のリストを返します。これらは、以下で説明"
"される ``Field`` のサブクラスです:"

msgid ""
"Returns a list of the maximum field widths for each of the fields in this "
"layer:"
msgstr "このレイヤーの各フィールドの最大フィールド幅のリストを返します:"

msgid ""
"Returns a list of the numeric precisions for each of the fields in this "
"layer. This is meaningless (and set to zero) for non-numeric fields:"
msgstr ""
"このレイヤーの各フィールドの数値精度のリストを返します。これは、数値フィール"
"ド以外では意味がありません (ゼロに設定されます):"

msgid ""
"Returns the spatial extent of this layer, as an :class:`Envelope` object:"
msgstr ""
"このレイヤーの空間範囲を :class:`Envelope` オブジェクトとして返します。"

msgid ""
"Property that returns the :class:`SpatialReference` associated with this "
"layer:"
msgstr ""
"このレイヤーに関連付けられた :class:`SpatialReference` を返すプロパティ:"

msgid ""
"If the :class:`Layer` has no spatial reference information associated with "
"it, ``None`` is returned."
msgstr ""
":class:`Layer` に空間参照情報が関連付けられていない場合、 ``None`` が返されま"
"す。"

msgid ""
"Property that may be used to retrieve or set a spatial filter for this "
"layer. A spatial filter can only be set with an :class:`OGRGeometry` "
"instance, a 4-tuple extent, or ``None``. When set with something other than "
"``None``, only features that intersect the filter will be returned when "
"iterating over the layer:"
msgstr ""
"このレイヤーの空間フィルタを取得または設定するために使用できるプロパティ。空"
"間フィルタは :class:`OGRGeometry` インスタンス、4タプル、または ``None`` での"
"み設定できます。``None`` 以外で設定された場合、レイヤーをイテレートするときに"
"はフィルタと交差するフィーチャのみが返されます。"

msgid ""
"A method that returns a list of the values of a given field for each feature "
"in the layer:"
msgstr ""
"レイヤーの各フィーチャについて、指定されたフィールドの値のリストを返すメソッ"
"ド: "

msgid ""
"A method that returns a list containing the geometry of each feature in the "
"layer. If the optional argument ``geos`` is set to ``True`` then the "
"geometries are converted to :class:`~django.contrib.gis.geos.GEOSGeometry` "
"objects. Otherwise, they are returned as :class:`OGRGeometry` objects:"
msgstr ""
"レイヤ内の各フィーチャのジオメトリを含むリストを返すメソッドです。オプション"
"の引数 ``geos`` が ``True`` に設定されている場合、ジオメトリは :class:"
"`~django.contrib.gis.geos.GEOSGeometry` オブジェクトに変換されます。そうでな"
"い場合は、 :class:`OGRGeometry` オブジェクトとして返されます: "

msgid ""
"Returns a boolean indicating whether this layer supports the given "
"capability (a string).  Examples of valid capability strings include: "
"``'RandomRead'``, ``'SequentialWrite'``, ``'RandomWrite'``, "
"``'FastSpatialFilter'``, ``'FastFeatureCount'``, ``'FastGetExtent'``, "
"``'CreateField'``, ``'Transactions'``, ``'DeleteFeature'``, and "
"``'FastSetNextByIndex'``."
msgstr ""
"指定された機能 (文字列) をサポートしているかどうかを示す真偽値を返します。 有"
"効な機能文字列の例には、 ``'RandomRead'``, ``'SequentialWrite'``, "
"``'RandomWrite'``, ``'FastSpatialFilter'``, ``'FastFeatureCount'``, "
"``'FastGetExtent'``, ``'CreateField'``, ``'Transactions'``, "
"``'DeleteFeature'``, ``'FastSetNextByIndex'`` などがあります。"

msgid "``Feature``"
msgstr "``Feature``"

msgid ""
"``Feature`` wraps an OGR feature. You never create a ``Feature`` object "
"directly. Instead, you retrieve them from a :class:`Layer` object. Each "
"feature consists of a geometry and a set of fields containing additional "
"properties. The geometry of a field is accessible via its ``geom`` property, "
"which returns an :class:`OGRGeometry` object. A ``Feature`` behaves like a "
"standard Python container for its fields, which it returns as :class:`Field` "
"objects: you can access a field directly by its index or name, or you can "
"iterate over a feature's fields, e.g. in a ``for`` loop."
msgstr ""
"``Feature`` は OGR の feture をラップします。``Feature`` オブジェクトを直接作"
"成することはありません。代わりに、 :class:`Layer` オブジェクトからそれらを取"
"得します。各フィーチャにはジオメトリと追加のプロパティを含むフィールドのセッ"
"トがあります。フィールドのジオメトリは、その ``geom`` プロパティを介してアク"
"セスできます。これは :class:`OGRGeometry` オブジェクトを返します。"
"``Feature`` はフィールドの標準的な Python コンテナのように動作し、そのフィー"
"ルドを :class:`Field` オブジェクトとして返します。フィールドはインデックスま"
"たは名前を指定して直接アクセスすることもでき、あるいは ``for`` ループ内で"
"フィーチャのフィールドをイテレートすることもできます。"

msgid "Returns the geometry for this feature, as an ``OGRGeometry`` object:"
msgstr ""
"このフィーチャのジオメトリを ``OGRGeometry`` オブジェクトとして返します:"

msgid ""
"A method that returns the value of the given field (specified by name) for "
"this feature, **not** a ``Field`` wrapper object:"
msgstr ""
"このフィーチャーのフィールド (名前で指定) の値を返すメソッドで、 ``Field`` "
"ラッパーオブジェクト **ではありません** :"

msgid ""
"Returns the type of geometry for this feature, as an :class:`OGRGeomType` "
"object. This will be the same for all features in a given layer and is "
"equivalent to the :attr:`Layer.geom_type` property of the :class:`Layer` "
"object the feature came from."
msgstr ""
"このフィーチャのジオメトリの種類を、 :class:`OGRGeomType` オブジェクトとして"
"返します。これは同じレイヤー内のすべてのフィーチャに対して同じであり、フィー"
"チャの元となる :class:`Layer` オブジェクトの :attr:`Layer.geom_type` プロパ"
"ティと同等です。"

msgid ""
"Returns the number of fields of data associated with the feature. This will "
"be the same for all features in a given layer and is equivalent to the :attr:"
"`Layer.num_fields` property of the :class:`Layer` object the feature came "
"from."
msgstr ""
"フィーチャに関連付けられたデータフィールドの数を返します。これは、特定のレイ"
"ヤー内のすべてのフィーチャに対して同じであり、フィーチャが属する :class:"
"`Layer` オブジェクトの :attr:`Layer.num_fields` プロパティと同等です。"

msgid ""
"Returns a list of the names of the fields of data associated with the "
"feature. This will be the same for all features in a given layer and is "
"equivalent to the :attr:`Layer.fields` property of the :class:`Layer` object "
"the feature came from."
msgstr ""
"フィーチャに関連付けられたデータのフィールド名のリストを返します。これは与え"
"られたレイヤーの全てのフィーチャで同じであり、フィーチャの元となった :class:"
"`Layer` オブジェクトの :attr:`Layer.fields` プロパティと等価です。"

msgid "Returns the feature identifier within the layer:"
msgstr "レイヤー内のフィーチャ識別子を返します:"

msgid ""
"Returns the name of the :class:`Layer` that the feature came from. This will "
"be the same for all features in a given layer:"
msgstr ""
"そのフィーチャーの :class:`Layer` の名前を返します。これは指定されたレイヤー"
"の全てのフィーチャに対して同じです:"

msgid ""
"A method that returns the index of the given field name. This will be the "
"same for all features in a given layer:"
msgstr ""
"与えられたフィールド名のインデックスを返すメソッド。これは、指定されたレイ"
"ヤーのすべてのフィーチャで同じになります:"

msgid "``Field``"
msgstr "``Field``"

msgid "Returns the name of this field:"
msgstr "このフィールドの名前を返します: "

msgid ""
"Returns the OGR type of this field, as an integer. The ``FIELD_CLASSES`` "
"dictionary maps these values onto subclasses of ``Field``:"
msgstr ""
"このフィールドの OGR 型を整数で返します。 ``FIELD_CLASSES`` 辞書は、これらの"
"値を ``Field`` のサブクラスにマッピングします:"

msgid "Returns a string with the name of the data type of this field:"
msgstr "このフィールドのデータ型の名前を文字列で返します:"

msgid ""
"Returns the value of this field. The ``Field`` class itself returns the "
"value as a string, but each subclass returns the value in the most "
"appropriate form:"
msgstr ""
"このフィールドの値を返します。``Field`` クラス自体は値を文字列として返します"
"が、各サブクラスは最適な形式で値を返します:"

msgid "Returns the width of this field:"
msgstr "このフィールドの幅を返します:"

msgid ""
"Returns the numeric precision of this field. This is meaningless (and set to "
"zero) for non-numeric fields:"
msgstr ""
"このフィールドの数値精度を返します。非数値フィールドでは意味がありません (ゼ"
"ロに設定されます) 。"

msgid "Returns the value of the field as a double (float):"
msgstr "フィールドの値を double (float) で返します:"

msgid "Returns the value of the field as an integer:"
msgstr "フィールドの値を整数で返します:"

msgid "Returns the value of the field as a string:"
msgstr "フィールドの値を文字列で返します:"

msgid "Returns the value of the field as a tuple of date and time components:"
msgstr "フィールドの値を、日付と時刻のタプルで返します: "

msgid "``Driver``"
msgstr "``Driver``"

msgid ""
"The ``Driver`` class is used internally to wrap an OGR :class:`DataSource` "
"driver."
msgstr ""
"``Driver`` クラスは、OGR :class:`DataSource` ドライバをラップするために内部で"
"使用されます。"

msgid "Returns the number of OGR vector drivers currently registered."
msgstr "現在登録されているOGRベクタードライバーの数を返します。"

msgid "OGR Geometries"
msgstr "OGR ジオメトリ"

msgid "``OGRGeometry``"
msgstr "``OGRGeometry``"

msgid ""
":class:`OGRGeometry` objects share similar functionality with :class:"
"`~django.contrib.gis.geos.GEOSGeometry` objects and are thin wrappers around "
"OGR's internal geometry representation. Thus, they allow for more efficient "
"access to data when using :class:`DataSource`. Unlike its GEOS counterpart, :"
"class:`OGRGeometry` supports spatial reference systems and coordinate "
"transformation:"
msgstr ""
":class:`OGRGeometry` オブジェクトは :class:`~django.contrib.gis.geos."
"GEOSGeometry` オブジェクトと同様の機能を持ち、OGR の内部ジオメトリ表現の薄い"
"ラッパーです。そのため、 :class:`DataSource` を使用する場合、より効率的にデー"
"タにアクセスできます。GEOSとは異なり、:class:`OGRGeometry` は空間参照系 "
"(spatial reference system) と座標変換をサポートしています。"

msgid ""
"This object is a wrapper for the `OGR Geometry`__ class. These objects are "
"instantiated directly from the given ``geom_input`` parameter, which may be "
"a string containing WKT, HEX, GeoJSON, a ``buffer`` containing WKB data, or "
"an :class:`OGRGeomType` object. These objects are also returned from the :"
"class:`Feature.geom` attribute, when reading vector data from :class:`Layer` "
"(which is in turn a part of a :class:`DataSource`)."
msgstr ""
"このオブジェクトは `OGR Geometry`__ クラスのラッパーです。このオブジェクト"
"は、与えられた ``geom_input`` パラメータから直接インスタンス化されます。この"
"パラメータには、WKT、HEX、GeoJSON、WKB データを含む ``buffer``、または :"
"class:`OGRGeomType` オブジェクトを含む文字列を指定できます。これらのオブジェ"
"クトは :class:`Layer` (:class:`DataSource` の一部) からベクトルデータを読み込"
"む際に、 :class:`Feature.geom` 属性からも返されます。"

msgid "Constructs an :class:`OGRGeometry` from the given GML string."
msgstr "与えられたGML文字列から :class:`OGRGeometry` を構築する。"

msgid "Constructs a :class:`Polygon` from the given bounding-box (a 4-tuple)."
msgstr ""
"与えられたバウンディングボックス (4要素タプル) から :class:`Polygon` を構築し"
"ます。"

msgid ""
"Returns the number of points in a :class:`LineString`, the number of rings "
"in a :class:`Polygon`, or the number of geometries in a :class:"
"`GeometryCollection`. Not applicable to other geometry types."
msgstr ""
":class:`LineString` の点の数、:class:`Polygon` のリングの数、または :class:"
"`GeometryCollection` のジオメトリの数を返します。他のジオメトリタイプには適用"
"されません。"

msgid ""
"Iterates over the points in a :class:`LineString`, the rings in a :class:"
"`Polygon`, or the geometries in a :class:`GeometryCollection`. Not "
"applicable to other geometry types."
msgstr ""
":class:`LineString` の点、:class:`Polygon` のリング、または :class:"
"`GeometryCollection` のジオメトリをイテレートします。他のジオメトリタイプには"
"適用されません。"

msgid ""
"Returns the point at the specified index for a :class:`LineString`, the "
"interior ring at the specified index for a :class:`Polygon`, or the geometry "
"at the specified index in a :class:`GeometryCollection`. Not applicable to "
"other geometry types."
msgstr ""
":class:`LineString` オブジェクトにおける指定されたインデックスのポイント、:"
"class:`Polygon` オブジェクトにおける指定されたインデックスの内部リング、また"
"は :class:`GeometryCollection` における指定されたインデックスのジオメトリを返"
"します。他のジオメトリタイプには適用されません。"

msgid ""
"Returns the number of coordinated dimensions of the geometry, i.e. 0 for "
"points, 1 for lines, and so forth:"
msgstr ""
"ジオメトリの座標次元数を返します。例えば、点なら0、線なら1、その他も同様で"
"す。"

msgid ""
"Returns or sets the coordinate dimension of this geometry. For example, the "
"value would be 2 for two-dimensional geometries."
msgstr ""
"このジオメトリの座標次元を返すか設定します。たとえば、2次元ジオメトリの場合"
"は 2 となります。"

msgid "Returns the number of elements in this geometry:"
msgstr "このジオメトリの要素数を返します:"

msgid "Returns the number of points used to describe this geometry:"
msgstr "このジオメトリを記述するのに使用されたポイントの数を返します:"

msgid "Alias for :attr:`point_count`."
msgstr ":attr:`point_count` のエイリアス。"

msgid "Returns the type of this geometry, as an :class:`OGRGeomType` object."
msgstr ""
"このジオメトリのタイプを :class:`OGRGeomType` オブジェクトとして返します。"

msgid "Returns the name of the type of this geometry:"
msgstr "このジオメトリの型名を返します:"

msgid ""
"Returns the area of this geometry, or 0 for geometries that do not contain "
"an area:"
msgstr ""
"このジオメトリの面積を返すか、面積を含まないジオメトリの場合は0を返します。"

msgid "Returns the envelope of this geometry, as an :class:`Envelope` object."
msgstr ""
"このジオメトリの外接矩形を :class:`Envelope` オブジェクトとして返します。"

msgid ""
"Returns the envelope of this geometry as a 4-tuple, instead of as an :class:"
"`Envelope` object:"
msgstr ""
"このジオメトリの外接矩形を :class:`Envelope` オブジェクトではなく、4値タプル"
"として返します。"

msgid ""
"This property controls the spatial reference for this geometry, or ``None`` "
"if no spatial reference system has been assigned to it. If assigned, "
"accessing this property returns a :class:`SpatialReference` object.  It may "
"be set with another :class:`SpatialReference` object, or any input that :"
"class:`SpatialReference` accepts. Example:"
msgstr ""
"このプロパティはこのジオメトリの空間参照系を制御します。空間参照系が割り当て"
"られていない場合は ``None`` となります。割り当てられている場合、このプロパ"
"ティにアクセスすると :class:`SpatialReference` オブジェクトが返されます。この"
"プロパティは別の :class:`SpatialReference` オブジェクト、または :class:"
"`SpatialReference` が受け付ける任意の入力で設定できます。以下に例を示します。"

msgid ""
"Returns or sets the spatial reference identifier corresponding to :class:"
"`SpatialReference` of this geometry.  Returns ``None`` if there is no "
"spatial reference information associated with this geometry, or if an SRID "
"cannot be determined."
msgstr ""
"このジオメトリの :class:`SpatialReference` に対応する空間参照系識別子を返すか"
"設定します。このジオメトリに関連付けられている空間参照系情報がない場合、また"
"は SRID を決定できない場合は ``None`` を返します。"

msgid ""
"Returns a :class:`~django.contrib.gis.geos.GEOSGeometry` object "
"corresponding to this geometry."
msgstr ""
"このジオメトリに対応する :class:`~django.contrib.gis.geos.GEOSGeometry` オブ"
"ジェクトを返します。"

msgid "Returns a string representation of this geometry in GML format:"
msgstr "このジオメトリの GML 形式の文字列表現を返します:"

msgid "Returns a string representation of this geometry in HEX WKB format:"
msgstr "このジオメトリのHEX WKB形式での文字列表現を返します:"

msgid "Returns a string representation of this geometry in JSON format:"
msgstr "このジオメトリの文字列表現を JSON 形式で返します:"

msgid "Returns a string representation of this geometry in KML format."
msgstr "このジオメトリを KML 形式の文字列で返します。"

msgid ""
"Returns the size of the WKB buffer needed to hold a WKB representation of "
"this geometry:"
msgstr ""
"このジオメトリの WKB 表現を保持するために必要な WKB バッファのサイズを返しま"
"す:"

msgid "Returns a ``buffer`` containing a WKB representation of this geometry."
msgstr "このジオメトリのWKB表現を含む ``buffer`` を返します。"

msgid "Returns a string representation of this geometry in WKT format."
msgstr "このジオメトリの文字列表現を WKT 形式で返します。"

msgid "Returns the EWKT representation of this geometry."
msgstr "このジオメトリの EWKT 表現を返します。"

msgid "Returns a new :class:`OGRGeometry` clone of this geometry object."
msgstr ""
"このジオメトリオブジェクトの新しい :class:`OGRGeometry` クローンを返します。"

msgid ""
"If there are any rings within this geometry that have not been closed, this "
"routine will do so by adding the starting point to the end:"
msgstr ""
"このジオメトリ内に閉じていないリングがある場合、このルーチンは始点を終点に追"
"加することで閉じます: "

msgid ""
"Transforms this geometry to a different spatial reference system. May take "
"a :class:`CoordTransform` object, a :class:`SpatialReference` object, or any "
"other input accepted by :class:`SpatialReference` (including spatial "
"reference WKT and PROJ strings, or an integer SRID)."
msgstr ""
"このジオメトリを異なる空間参照系に変換します。:class:`CoordTransform` オブ"
"ジェクト、:class:`SpatialReference` オブジェクト、または :class:"
"`SpatialReference` が受け付けるその他の入力 (空間参照系の WKT や PROJ 文字"
"列、整数の SRID など) を受け付けます。"

msgid ""
"By default nothing is returned and the geometry is transformed in-place. "
"However, if the ``clone`` keyword is set to ``True`` then a transformed "
"clone of this geometry is returned instead."
msgstr ""
"デフォルトでは何も返されず、ジオメトリはインプレースで変換されます。しかし、 "
"``clone`` キーワードが ``True`` に設定されている場合は、このジオメトリの変換"
"されたクローンが返されます。"

msgid ""
"Returns ``True`` if this geometry intersects the other, otherwise returns "
"``False``."
msgstr ""
"このジオメトリがもう一方のジオメトリと交差している場合は ``True`` を返し、そ"
"うでない場合は ``False`` を返します。"

msgid ""
"Returns ``True`` if this geometry is equivalent to the other, otherwise "
"returns ``False``."
msgstr ""
"このジオメトリがもう一方のジオメトリと等価であれば ``True`` を返し、そうでな"
"ければ ``False`` を返します。"

msgid ""
"Returns ``True`` if this geometry is spatially disjoint to (i.e. does not "
"intersect) the other, otherwise returns ``False``."
msgstr ""
"このジオメトリがもう一方のジオメトリと空間的に不連続であれば (つまり交差して"
"いなければ) ``True`` を返し、そうでなければ ``False`` を返します。"

msgid ""
"Returns ``True`` if this geometry touches the other, otherwise returns "
"``False``."
msgstr ""
"このジオメトリがもう一方のジオメトリに接している場合は ``True`` を返し、接し"
"ていない場合は ``False`` を返します。"

msgid ""
"Returns ``True`` if this geometry crosses the other, otherwise returns "
"``False``."
msgstr ""
"このジオメトリがもう一方のジオメトリと交差している場合は ``True`` を返し、交"
"差していない場合は ``False`` を返します。"

msgid ""
"Returns ``True`` if this geometry is contained within the other, otherwise "
"returns ``False``."
msgstr ""
"このジオメトリがもう一方のジオメトリに含まれる場合は ``True`` を返し、そうで"
"ない場合は ``False`` を返します。"

msgid ""
"Returns ``True`` if this geometry contains the other, otherwise returns "
"``False``."
msgstr ""
"このジオメトリがもう一方のジオメトリを含んでいる場合は ``True`` を返し、そう"
"でない場合は ``False`` を返します。"

msgid ""
"Returns ``True`` if this geometry overlaps the other, otherwise returns "
"``False``."
msgstr ""
"このジオメトリがもう一方のジオメトリと重なっている場合は ``True`` を返し、重"
"なっていない場合は ``False`` を返します。"

msgid "The boundary of this geometry, as a new :class:`OGRGeometry` object."
msgstr ""
"このジオメトリの境界を、新しい :class:`OGRGeometry` オブジェクトとして返しま"
"す。"

msgid ""
"The smallest convex polygon that contains this geometry, as a new :class:"
"`OGRGeometry` object."
msgstr ""
"このジオメトリを含む最小の凸ポリゴンを、新しい :class:`OGRGeometry` オブジェ"
"クトとして返します。"

msgid ""
"Returns the region consisting of the difference of this geometry and the "
"other, as a new :class:`OGRGeometry` object."
msgstr ""
"このジオメトリともう一方のジオメトリの差分からなる領域を、新しい :class:"
"`OGRGeometry` オブジェクトとして返します。"

msgid ""
"Returns the region consisting of the intersection of this geometry and the "
"other, as a new :class:`OGRGeometry` object."
msgstr ""
"このジオメトリともう一方のジオメトリの交点からなる領域を、新しい :class:"
"`OGRGeometry` オブジェクトとして返します。"

msgid ""
"Returns the region consisting of the symmetric difference of this geometry "
"and the other, as a new :class:`OGRGeometry` object."
msgstr ""
"このジオメトリともう一方のジオメトリの対称差からなる領域を、新しい :class:"
"`OGRGeometry` オブジェクトとして返します。"

msgid ""
"Returns the region consisting of the union of this geometry and the other, "
"as a new :class:`OGRGeometry` object."
msgstr ""
"このジオメトリともう一方のジオメトリの和からなる領域を、新しい :class:"
"`OGRGeometry` オブジェクトとして返します。"

msgid ""
"Returns the coordinates of a point geometry as a tuple, the coordinates of a "
"line geometry as a tuple of tuples, and so forth:"
msgstr ""
"点ジオメトリの座標をタプルとして、線ジオメトリの座標をタプルのタプルとして返"
"す:"

msgid "An alias for :attr:`tuple`."
msgstr ":attr:`tuple` のエイリアス。"

msgid "Returns the X coordinate of this point:"
msgstr "この点のX座標を返します:"

msgid "Returns the Y coordinate of this point:"
msgstr "この点のY座標を返します:"

msgid ""
"Returns the Z coordinate of this point, or ``None`` if the point does not "
"have a Z coordinate:"
msgstr ""
"この点の Z 座標を返し、点が Z 座標を持たない場合は ``None`` を返します:"

msgid "Returns a list of X coordinates in this line:"
msgstr "この行のX座標のリストを返します:"

msgid "Returns a list of Y coordinates in this line:"
msgstr "この行のY座標のリストを返します: "

msgid ""
"Returns a list of Z coordinates in this line, or ``None`` if the line does "
"not have Z coordinates:"
msgstr ""
"このラインの Z 座標のリストを返すか、Z 座標を持たない場合は ``None`` を返しま"
"す:"

msgid ""
"Returns the shell or exterior ring of this polygon, as a ``LinearRing`` "
"geometry."
msgstr ""
"このポリゴンのシェルまたは外側のリングを ``LinearRing`` ジオメトリとして返し"
"ます。"

msgid "An alias for :attr:`shell`."
msgstr ":attr:`shell` のエイリアス。"

msgid "Returns a :class:`Point` representing the centroid of this polygon."
msgstr "このポリゴンの重心を表す :class:`Point` を返します。"

msgid ""
"Adds a geometry to this geometry collection. Not applicable to other "
"geometry types."
msgstr ""
"ジオメトリをこのジオメトリ コレクションに追加します。他のジオメトリタイプには"
"適用できません。"

msgid "``OGRGeomType``"
msgstr "``OGRGeomType``"

msgid ""
"This class allows for the representation of an OGR geometry type in any of "
"several ways:"
msgstr "このクラスは、OGR ジオメトリタイプをいくつかの方法で表現できます: "

msgid "Returns a short-hand string form of the OGR Geometry type:"
msgstr "OGR Geometry の型の省略文字列形式を返します:"

msgid "Returns the number corresponding to the OGR geometry type:"
msgstr "OGR ジオメトリタイプに対応する数値を返します:"

msgid ""
"Returns the Django field type (a subclass of GeometryField) to use for "
"storing this OGR type, or ``None`` if there is no appropriate Django type:"
msgstr ""
"この OGR 型を格納するために使用する Django フィールド型 (GeometryField のサブ"
"クラス) を返し、適切な Django 型がない場合は ``None`` を返します:"

msgid ""
"Represents an OGR Envelope structure that contains the minimum and maximum "
"X, Y coordinates for a rectangle bounding box. The naming of the variables "
"is compatible with the OGR Envelope C structure."
msgstr ""
"矩形のバウンディングボックスの最小、最大 X、Y 座標を含む OGR Envelope 構造体"
"を表す。変数の名前は OGR Envelope C 構造体と互換性があります。"

msgid "The value of the minimum X coordinate."
msgstr "X座標の最小値。"

msgid "The value of the maximum X coordinate."
msgstr "X座標の最大値。"

msgid "The value of the minimum Y coordinate."
msgstr "Y座標の最小値。"

msgid "The value of the maximum Y coordinate."
msgstr "Y座標の最大値。"

msgid "The upper-right coordinate, as a tuple."
msgstr "右上座標を表すタプル。"

msgid "The lower-left coordinate, as a tuple."
msgstr "左下座標を表すタプル。"

msgid "A tuple representing the envelope."
msgstr "エンベロープを表すタプル。"

msgid "A string representing this envelope as a polygon in WKT format."
msgstr "WKT 形式でこのエンベロープを表すポリゴンを示す文字列。"

msgid "Coordinate System Objects"
msgstr "座標系オブジェクト"

msgid "``SpatialReference``"
msgstr "``SpatialReference``"

msgid ""
"Spatial reference objects are initialized on the given ``srs_input``, which "
"may be one of the following:"
msgstr ""
"空間参照系 (spatial reference) オブジェクトは与えられた ``srs_input`` に基づ"
"いて初期化されます。この ``srs_input`` には以下のいずれかが指定されることがあ"
"ります。"

msgid "OGC Well Known Text (WKT) (a string)"
msgstr "OGC Well Known Text (WKT) (文字列)"

msgid "EPSG code (integer or string)"
msgstr "EPSG コード (整数または文字列)"

msgid "PROJ string"
msgstr "PROJ 文字列"

msgid ""
"A shorthand string for well-known standards (``'WGS84'``, ``'WGS72'``, "
"``'NAD27'``, ``'NAD83'``)"
msgstr ""
"よく知られている標準の略記文字列 (``'WGS84'``, ``'WGS72'``, ``'NAD27'``, "
"``'NAD83'``)"

msgid ""
"Returns the value of the given string attribute node, ``None`` if the node "
"doesn't exist. Can also take a tuple as a parameter, (target, child), where "
"child is the index of the attribute in the WKT. For example:"
msgstr ""
"与えられた文字列属性ノードの値を返します。ノードが存在しない場合は ``None`` "
"を返します。(target, child) のようなタプルもパラメータとして受け取ることがで"
"きます。ここで、child は WKT 内の属性のインデックスです。例えば:"

msgid ""
"The attribute value for the given target node (e.g. ``'PROJCS'``). The index "
"keyword specifies an index of the child node to return."
msgstr ""
"指定されたターゲットノードの属性値 (例: ``'PROJCS'``)。``index`` キーワードは"
"返す子ノードのインデックスを指定します。"

msgid "Returns the authority name for the given string target node."
msgstr "指定された文字列の対象ノードに対するオーソリティ名を返します。"

msgid "Returns the authority code for the given string target node."
msgstr "与えられた文字列の対象ノードのオーソリティコードを返します。"

msgid "Returns a clone of this spatial reference object."
msgstr "この空間参照系 (SpatialReference) オブジェクトのクローンを返します。"

msgid ""
"This method inspects the WKT of this ``SpatialReference`` and will add EPSG "
"authority nodes where an EPSG identifier is applicable."
msgstr ""
"このメソッドは ``SpatialReference`` の WKT を検査し、EPSG 識別子が該当する場"
"合は EPSG オーソリティノードを追加します。"

msgid "Morphs this SpatialReference from ESRI's format to EPSG"
msgstr "この SpatialReference を ESRI のフォーマットから EPSG に変換します。"

msgid "Morphs this SpatialReference to ESRI's format."
msgstr "この SpatialReference を ESRI のフォーマットに変換します。"

msgid ""
"Checks to see if the given spatial reference is valid, if not an exception "
"will be raised."
msgstr ""
"与えられた空間参照系が有効かどうかをチェックし、有効でない場合は例外が発生し"
"ます。"

msgid "Import spatial reference from EPSG code."
msgstr "EPSGコードから空間参照系をインポートします。"

msgid "Import spatial reference from PROJ string."
msgstr "PROJ文字列から空間参照系をインポートします。"

msgid "Import spatial reference from WKT."
msgstr "WKT から空間参照系をインポートします。"

msgid "Import spatial reference from XML."
msgstr "XML から空間参照系をインポートします。"

msgid "Returns the name of this Spatial Reference."
msgstr "この空間参照系の名前を返します。"

msgid "Returns the SRID of top-level authority, or ``None`` if undefined."
msgstr ""
"トップレベルのオーソリティの SRID を返すか、未定義の場合は ``None`` を返しま"
"す。"

msgid "Returns the name of the linear units."
msgstr "線形単位の名前を返します。"

msgid "Returns the value of the linear units."
msgstr "線形単位の値を返します。"

msgid "Returns the name of the angular units.\""
msgstr "角度の単位の名前を返します。"

msgid "Returns the value of the angular units."
msgstr "角度の単位の値を返します。"

msgid ""
"Returns a 2-tuple of the units value and the units name and will "
"automatically determines whether to return the linear or angular units."
msgstr ""
"線形単位を返すか角度単位を返すかを自動的に決定し、単位値と単位名の2タプルを返"
"します。"

msgid ""
"Returns a tuple of the ellipsoid parameters for this spatial reference: "
"(semimajor axis, semiminor axis, and inverse flattening)."
msgstr ""
"この空間参照系の楕円体パラメータのタプル (半長軸、半短軸、逆扁平率) を返しま"
"す。"

msgid ""
"Returns the semi major axis of the ellipsoid for this spatial reference."
msgstr "この空間参照系に対する楕円体の長軸を返します。"

msgid ""
"Returns the semi minor axis of the ellipsoid for this spatial reference."
msgstr "この空間参照系における楕円体の短半径を返します。"

msgid ""
"Returns the inverse flattening of the ellipsoid for this spatial reference."
msgstr "この空間参照系の楕円体の逆扁平率を返します。"

msgid ""
"Returns ``True`` if this spatial reference is geographic (root node is "
"``GEOGCS``)."
msgstr ""
"この空間参照系が地理座標系 (親ノードが ``GEOGCS``) である場合に ``True`` を返"
"します。"

msgid ""
"Returns ``True`` if this spatial reference is local (root node is "
"``LOCAL_CS``)."
msgstr ""
"この空間参照系がローカルである場合 (ルートノードが ``LOCAL_CS`` である場合) "
"には ``True`` を返します。"

msgid ""
"Returns ``True`` if this spatial reference is a projected coordinate system "
"(root node is ``PROJCS``)."
msgstr ""
"この空間参照系が投影座標系である場合 (ルートノードが ``PROJCS`` である場合) "
"に ``True`` を返します。"

msgid "Returns the WKT representation of this spatial reference."
msgstr "この空間参照系の WKT 表現を返します。"

msgid "Returns the 'pretty' representation of the WKT."
msgstr "WKT のきれい (\"pretty\") な表現を返します。"

msgid "Returns the PROJ representation for this spatial reference."
msgstr "この空間参照系の PROJ 表現を返します。"

msgid "Alias for :attr:`SpatialReference.proj`."
msgstr ":attr:`SpatialReference.proj` のエイリアス。"

msgid "Returns the XML representation of this spatial reference."
msgstr "この空間参照系の XML 表現を返します。"

msgid "``CoordTransform``"
msgstr "``CoordTransform``"

msgid ""
"Represents a coordinate system transform. It is initialized with two :class:"
"`SpatialReference`, representing the source and target coordinate systems, "
"respectively. These objects should be used when performing the same "
"coordinate transformation repeatedly on different geometries:"
msgstr ""
"座標系の変換を表します。ソースとターゲットの座標系をそれぞれ表す2つの :class:"
"`SpatialReference` で初期化されます。これらのオブジェクトは、異なるジオメトリ"
"に繰り返し同じ座標変換を行う場合に使用するべきです。"

msgid "Raster Data Objects"
msgstr "ラスターデータオブジェクト"

msgid "``GDALRaster``"
msgstr "``GDALRaster``"

msgid ""
":class:`GDALRaster` is a wrapper for the GDAL raster source object that "
"supports reading data from a variety of GDAL-supported geospatial file "
"formats and data sources using a consistent interface.  Each data source is "
"represented by a :class:`GDALRaster` object which contains one or more "
"layers of data named bands.  Each band, represented by a :class:`GDALBand` "
"object, contains georeferenced image data. For example, an RGB image is "
"represented as three bands: one for red, one for green, and one for blue."
msgstr ""
":class:`GDALRaster` は、GDALがサポートする様々な地理空間ファイル形式やデータ"
"ソースからデータを読み込むための一貫したインターフェースを使用するGDALラス"
"ターソースオブジェクトのラッパーです。各データソースは、1つ以上のデータ層であ"
"る「bands（バンド）」という名前のデータを含む :class:`GDALRaster` オブジェク"
"トによって表されます。各バンドは、ジオリファレンスされた画像データを含む :"
"class:`GDALBand` オブジェクトによって表されます。例えば、RGB画像は、赤、緑、"
"青の各色に対応する3つのバンドで表されます。"

msgid ""
"For raster data there is no difference between a raster instance and its "
"data source. Unlike for the Geometry objects, :class:`GDALRaster` objects "
"are always a data source. Temporary rasters can be instantiated in memory "
"using the corresponding driver, but they will be of the same class as file-"
"based raster sources."
msgstr ""
"ラスターデータにおいては、ラスターインスタンスとそのデータソースとの間に差異"
"はありません。ジオメトリオブジェクトと異なり、:class:`GDALRaster` オブジェク"
"トは常にデータソースです。一時的なラスターは、対応するドライバーを使用してメ"
"モリ内にインスタンス化できますが、ファイルベースのラスターソースと同じクラス"
"になります。"

msgid ""
"The constructor for ``GDALRaster`` accepts two parameters. The first "
"parameter defines the raster source, and the second parameter defines if a "
"raster should be opened in write mode. For newly-created rasters, the second "
"parameter is ignored and the new raster is always created in write mode."
msgstr ""
"``GDALRaster`` のコンストラクターは 2 つのパラメーターを受け取ります。最初の"
"パラメーターはラスターのソースを定義し、2 番目のパラメーターはラスターを書き"
"込みモードで開くかどうかを定義します。新しく作成されたラスターに対しては、2 "
"番目のパラメーターは無視され、常に書き込みモードで新しいラスターが作成されま"
"す。"

msgid ""
"The first parameter can take three forms: a string or :class:`~pathlib.Path` "
"representing a file path (filesystem or GDAL virtual filesystem), a "
"dictionary with values defining a new raster, or a bytes object representing "
"a raster file."
msgstr ""
"最初のパラメータは、３つの形式を取ることができます。ファイルパスを表す文字列"
"あるいは :class:`~pathlib.Path` オブジェクト (ファイルシステムまたはGDAL仮想"
"ファイルシステム) 、新しいラスタを定義する値が入った辞書、ラスタファイルを表"
"すバイトオブジェクトです。"

msgid ""
"If the input is a file path, the raster is opened from there. If the input "
"is raw data in a dictionary, the parameters ``width``, ``height``, and "
"``srid`` are required. If the input is a bytes object, it will be opened "
"using a GDAL virtual filesystem."
msgstr ""
"入力がファイルパスの場合は、そのパスからラスタがオープンされます。入力が辞書"
"の生データの場合、パラメータ ``width``、``height``、``srid`` が必要です。入力"
"がバイトオブジェクトの場合、GDALの仮想ファイルシステムを使用してオープンされ"
"ます。"

msgid ""
"For a detailed description of how to create rasters using dictionary input, "
"see :ref:`gdal-raster-ds-input`. For a detailed description of how to create "
"rasters in the virtual filesystem, see :ref:`gdal-raster-vsimem`."
msgstr ""
"辞書入力を使用してラスタを作成する方法の詳細については、 :ref:`gdal-raster-"
"ds-input` を参照してください。仮想ファイルシステム内でラスタを作成する方法の"
"詳細については、 :ref:`gdal-raster-vsimem` を参照してください。"

msgid ""
"The following example shows how rasters can be created from different input "
"sources (using the sample data from the GeoDjango tests; see also the :ref:"
"`gdal_sample_data` section)."
msgstr ""
"以下の例では、異なる入力ソースからどのようにラスタを作成できるかを示します "
"(GeoDjango のテストのサンプルデータを使います。 :ref:`gdal_sample_data` セク"
"ションも参照してください) 。"

msgid "Support for :class:`pathlib.Path` ``ds_input`` was added."
msgstr ":class:`pathlib.Path` ``ds_input`` のサポートが追加されました。"

msgid ""
"The name of the source which is equivalent to the input file path or the "
"name provided upon instantiation."
msgstr ""
"入力ファイルのパスまたはインスタンス化の際に指定された名前に相当するソースの"
"名前。"

msgid ""
"The name of the GDAL driver used to handle the input file. For "
"``GDALRaster``\\s created from a file, the driver type is detected "
"automatically. The creation of rasters from scratch is an in-memory raster "
"by default (``'MEM'``), but can be altered as needed. For instance, use "
"``GTiff`` for a ``GeoTiff`` file. For a list of file types, see also the "
"`GDAL Raster Formats`__ list."
msgstr ""
"入力ファイルを処理するために使用されるGDALドライバの名前です。ファイルから作"
"成された ``GDALRaster`` では、ドライバタイプが自動的に検出されます。ゼロから"
"ラスターを作成する場合、デフォルトではメモリ内のラスター (``'MEM'``) ですが、"
"必要に応じて変更できます。例えば、 ``GeoTiff`` ファイルには ``GTiff`` を使用"
"します。ファイルタイプの一覧については、 `GDAL Raster Formats`__ リストも参照"
"してください。"

msgid "An in-memory raster is created through the following example:"
msgstr "インメモリのラスタは次の例のように作成できます:"

msgid "A file based GeoTiff raster is created through the following example:"
msgstr "ファイルベースの GeoTiff ラスターは、次の例のように作成できます: "

msgid "The width of the source in pixels (X-axis)."
msgstr "ピクセル単位のソースの幅(X軸)。"

msgid "The height of the source in pixels (Y-axis)."
msgstr "ピクセル単位のソースの高さ(Y軸)。"

msgid ""
"The spatial reference system of the raster, as a :class:`SpatialReference` "
"instance. The SRS can be changed by setting it to an other :class:"
"`SpatialReference` or providing any input that is accepted by the :class:"
"`SpatialReference` constructor."
msgstr ""
"ラスターの空間参照系を :class:`SpatialReference` インスタンスとして返します。"
"SRSは他の :class:`SpatialReference` に設定したり、 :class:`SpatialReference` "
"コンストラクタが受け付ける任意の入力を与えることで変更できます。"

msgid ""
"The Spatial Reference System Identifier (SRID) of the raster. This property "
"is a shortcut to getting or setting the SRID through the :attr:`srs` "
"attribute."
msgstr ""
"ラスタの空間参照システム識別子(SRID)。このプロパティは :attr:`srs` 属性を通し"
"てSRIDを取得または設定するためのショートカットです。"

msgid ""
"The affine transformation matrix used to georeference the source, as a tuple "
"of six coefficients which map pixel/line coordinates into georeferenced "
"space using the following relationship::"
msgstr ""
"以下のリレーションシップを使用して、ピクセル/ライン座標をジオリファレンス空間"
"にマッピングする6つの係数のタプルとして表現されるアフィン変換行列:"

msgid ""
"The same values can be retrieved by accessing the :attr:`origin` (indices 0 "
"and 3), :attr:`scale` (indices 1 and 5) and :attr:`skew` (indices 2 and 4) "
"properties."
msgstr ""
"同じ値は、:attr:`origin` (インデックス 0 と 3)、:attr:`scale` (インデックス "
"1 と 5)、および :attr:`skew` (インデックス 2 と 4) プロパティにアクセスするこ"
"とでも取得できます。"

msgid "The default is ``[0.0, 1.0, 0.0, 0.0, 0.0, -1.0]``."
msgstr "デフォルト値は ``[0.0, 1.0, 0.0, 0.0, 0.0, -1.0]`` です。"

msgid ""
"Coordinates of the top left origin of the raster in the spatial reference "
"system of the source, as a point object with ``x`` and ``y`` members."
msgstr ""
"ソースの空間参照システム内で、ラスターの左上原点の座標を、``x`` と ``y`` のメ"
"ンバを持つ点オブジェクトとして表します。"

msgid ""
"Pixel width and height used for georeferencing the raster, as a point object "
"with ``x`` and ``y``  members. See :attr:`geotransform` for more information."
msgstr ""
"ラスタのジオリファレンスに使用されるピクセルの幅と高さ。 ``x`` と ``y`` のメ"
"ンバーを持つポイントオブジェクトとして表されます。詳細については、:attr:"
"`geotransform` を参照してください。"

msgid ""
"Skew coefficients used to georeference the raster, as a point object with "
"``x`` and ``y``  members. In case of north up images, these coefficients are "
"both ``0``."
msgstr ""
"ラスターを ``x`` と ``y`` のメンバを持つ点オブジェクトとしてジオリファレンス"
"するために使用されるスキュー係数。ノースアップ画像の場合、これらの係数は両方"
"とも ``0`` です。"

msgid ""
"Extent (boundary values) of the raster source, as a 4-tuple ``(xmin, ymin, "
"xmax, ymax)`` in the spatial reference system of the source."
msgstr ""
"ラスターソースの範囲 (境界値)。ソースの空間参照システムにおける4タプル "
"``(xmin, ymin, xmax, ymax)`` で表されます。"

msgid "List of all bands of the source, as :class:`GDALBand` instances."
msgstr ""
"ソースの全てのバンドを、:class:`GDALBand` のインスタンスとしてリストアップし"
"ます。"

msgid "Returns a warped version of this raster."
msgstr "このラスターの変形されたバージョンを返します。"

msgid ""
"The warping parameters can be specified through the ``ds_input`` argument. "
"The use of ``ds_input`` is analogous to the corresponding argument of the "
"class constructor. It is a dictionary with the characteristics of the target "
"raster. Allowed dictionary key values are width, height, SRID, origin, "
"scale, skew, datatype, driver, and name (filename)."
msgstr ""
"変化系パラメータは ``ds_input`` 引数で指定することができる。 ``ds_input`` の"
"使用方法はクラスコンストラクタの対応する引数と同様です。 ``ds_input`` はター"
"ゲットとなるラスターの特性を辞書に格納したものです。指定できる辞書のキーは "
"width, height, SRID, origin, scale, skew, datatype, driver, name (filename) "
"です。"

msgid ""
"By default, the warp functions keeps most parameters equal to the values of "
"the original source raster, so only parameters that should be changed need "
"to be specified. Note that this includes the driver, so for file-based "
"rasters the warp function will create a new raster on disk."
msgstr ""
"デフォルトでは、warp 関数はほとんどのパラメータを元のソースラスタの値と等しく"
"保ちます。したがって、変更する必要のあるパラメータのみを指定すればよいです。"
"ただし、これにはドライバも含まれるので、ファイルベースのラスタの場合、warp 関"
"数は新しいラスタをディスク上に作成します。"

msgid ""
"The only parameter that is set differently from the source raster is the "
"name. The default value of the raster name is the name of the source raster "
"appended with ``'_copy' + source_driver_name``. For file-based rasters it is "
"recommended to provide the file path of the target raster."
msgstr ""
"ソースラスタと異なるパラメータは名前のみです。ラスタ名のデフォルト値は、ソー"
"スラスタの名前に ``'_copy' + source_driver_name`` を追加したものです。ファイ"
"ルベースのラスタの場合は、ターゲットとなるラスタのファイルパスを指定すること"
"を推奨します。"

msgid ""
"The resampling algorithm used for warping can be specified with the "
"``resampling`` argument. The default is ``NearestNeighbor``, and the other "
"allowed values are ``Bilinear``, ``Cubic``, ``CubicSpline``, ``Lanczos``, "
"``Average``, and ``Mode``."
msgstr ""
"変形に使用するリサンプリングアルゴリズムは ``resampling`` 引数で指定します。"
"デフォルトは ``NearestNeighbor`` で、他に指定できる値は ``Bilinear``、"
"``Cubic``、``CubicSpline``、``Lanczos``、``Average``、``Mode`` です。"

msgid ""
"The ``max_error`` argument can be used to specify the maximum error measured "
"in input pixels that is allowed in approximating the transformation. The "
"default is 0.0 for exact calculations."
msgstr ""
"``max_error`` 引数は、変換の近似において許容される入力ピクセルでの最大誤差を"
"指定するために使用できます。デフォルト値は正確な計算のために 0.0 です。"

msgid ""
"For users familiar with ``GDAL``, this function has a similar functionality "
"to the ``gdalwarp`` command-line utility."
msgstr ""
"``GDAL`` に詳しいユーザーにとって、この関数は ``gdalwarp`` コマンドラインユー"
"ティリティと同様の機能を持っています。"

msgid ""
"For example, the warp function can be used for aggregating a raster to the "
"double of its original pixel scale:"
msgstr ""
"たとえば、``warp`` 関数は、ラスターを元のピクセルスケールの2倍に集約するため"
"に使用できます:"

msgid ""
"Transforms this raster to a different spatial reference system (``srs``), "
"which may be a :class:`SpatialReference` object, or any other input accepted "
"by :class:`SpatialReference` (including spatial reference WKT and PROJ "
"strings, or an integer SRID)."
msgstr ""
"このラスタを異なる空間参照システム (``srs``) に変換します。これは :class:"
"`SpatialReference` オブジェクトであり、または :class:`SpatialReference` で受"
"け入れられる他の入力 (空間参照 WKT や PROJ 文字列、整数の SRID を含む) でも構"
"いません。"

msgid ""
"It calculates the bounds and scale of the current raster in the new spatial "
"reference system and warps the raster using the :attr:`~GDALRaster.warp` "
"function."
msgstr ""
"新しい空間参照系で現在のラスタの境界とスケールを計算し、 :attr:`~GDALRaster."
"warp` 関数を使用してラスタを変形します。"

msgid ""
"By default, the driver of the source raster is used and the name of the "
"raster is the original name appended with ``'_copy' + source_driver_name``. "
"A different driver or name can be specified with the ``driver`` and ``name`` "
"arguments."
msgstr ""
"デフォルトでは、コピー元のラスタのドライバが使用され、ラスタ名はコピー元の名"
"前に ``'_copy' + source_driver_name`` を追加したものになります。異なるドライ"
"バや名前を指定するには、``driver`` および ``name`` 引数を使用します。"

msgid ""
"The default resampling algorithm is ``NearestNeighbour`` but can be changed "
"using the ``resampling`` argument. The default maximum allowed error for "
"resampling is 0.0 and can be changed using the ``max_error`` argument. "
"Consult the :attr:`~GDALRaster.warp` documentation for detail on those "
"arguments."
msgstr ""
"デフォルトのリサンプリングアルゴリズムは ``NearestNeighbour`` ですが、 "
"``resampling`` 引数を使用して変更できます。デフォルトのリサンプリングに許容さ"
"れる最大誤差は0.0であり、 ``max_error`` 引数を使用して変更できます。これらの"
"引数の詳細については、 :attr:`~GDALRaster.warp` のドキュメントを参照してくだ"
"さい。"

msgid ""
"Returns a string with a summary of the raster. This is equivalent to the "
"`gdalinfo`__ command line utility."
msgstr ""
"ラスターの概要を含む文字列を返します。これは `gdalinfo`__ コマンドラインユー"
"ティリティに相当します。"

msgid ""
"The metadata of this raster, represented as a nested dictionary. The first-"
"level key is the metadata domain. The second-level contains the metadata "
"item names and values from each domain."
msgstr ""
"このラスタのメタデータ。ネストした辞書として表現されます。第1レベルのキーはメ"
"タデータ・ドメインです。第2レベルには、各ドメインのメタデータ項目名と値が含ま"
"れます。"

msgid ""
"To set or update a metadata item, pass the corresponding metadata item to "
"the method using the nested structure described above. Only keys that are in "
"the specified dictionary are updated; the rest of the metadata remains "
"unchanged."
msgstr ""
"メタデータ項目を設定または更新するには、上記の入れ子構造を使用して、対応する"
"メタデータ項目をメソッドに渡します。指定された辞書にあるキーのみが更新され、"
"メタデータの残りの部分は変更されません。"

msgid "To remove a metadata item, use ``None`` as the metadata value."
msgstr ""
"メタデータ項目を削除するには、メタデータの値として ``None`` を使用します。"

msgid ""
"A ``bytes`` representation of this raster. Returns ``None`` for rasters that "
"are not stored in GDAL's virtual filesystem."
msgstr ""
"このラスタの ``bytes`` 表現。GDAL の仮想ファイルシステムに保存されていないラ"
"スタの場合は ``None`` を返します。"

msgid ""
"A boolean indicating if this raster is stored in GDAL's virtual filesystem."
msgstr ""
"このラスターがGDALの仮想ファイルシステムに保存されているかどうかを示す真偽"
"値。"

msgid "``GDALBand``"
msgstr "``GDALBand``"

msgid ""
"``GDALBand`` instances are not created explicitly, but rather obtained from "
"a :class:`GDALRaster` object, through its :attr:`~GDALRaster.bands` "
"attribute. The GDALBands contain the actual pixel values of the raster."
msgstr ""
"``GDALBand`` のインスタンスは明示的に作成されるのではなく、代わりに :class:"
"`GDALRaster` オブジェクトから、その :attr:`~GDALRaster.bands` 属性を介して取"
"得されます。 GDALBand にはラスターの実際のピクセル値が含まれています。"

msgid "The name or description of the band, if any."
msgstr "バンドの名前または説明 (あれば) 。"

msgid "The width of the band in pixels (X-axis)."
msgstr "ピクセル単位でのバンドの幅 (X軸)。"

msgid "The height of the band in pixels (Y-axis)."
msgstr "ピクセル単位のバンドの高さ (Y軸)。"

msgid ""
"The total number of pixels in this band. Is equal to ``width * height``."
msgstr ""
"このバンドに含まれるピクセルの総数。これは ``width * height`` に等しいです。"

msgid ""
"Compute statistics on the pixel values of this band. The return value is a "
"tuple with the following structure: ``(minimum, maximum, mean, standard "
"deviation)``."
msgstr ""
"このバンドのピクセル値の統計量を計算します。戻り値は ``(minimum, maximum, "
"mean, standard deviation)`` という構造を持つタプルです。"

msgid ""
"If the ``approximate`` argument is set to ``True``, the statistics may be "
"computed based on overviews or a subset of image tiles."
msgstr ""
"もし ``approximate`` 引数が ``True`` に設定されている場合、統計はオーバー"
"ビューまたは画像タイルのサブセットに基づいて計算されます。"

msgid ""
"If the ``refresh`` argument is set to ``True``, the statistics will be "
"computed from the data directly, and the cache will be updated with the "
"result."
msgstr ""
"``refresh`` 引数を ``True`` に設定すると、統計情報はデータから直接計算され、"
"その結果でキャッシュが更新されます。"

msgid ""
"If a persistent cache value is found, that value is returned. For raster "
"formats using Persistent Auxiliary Metadata (PAM) services, the statistics "
"might be cached in an auxiliary file. In some cases this metadata might be "
"out of sync with the pixel values or cause values from a previous call to be "
"returned which don't reflect the value of the ``approximate`` argument. In "
"such cases, use the ``refresh`` argument to get updated values and store "
"them in the cache."
msgstr ""
"永続的なキャッシュ値が見つかった場合、その値が返されます。永続的補助メタデー"
"タ (PAM) サービスを使用するラスターフォーマットの場合、統計情報は補助ファイル"
"にキャッシュされる可能性があります。場合によっては、このメタデータがピクセル"
"値と同期していなかったり、 ``approximate`` 引数の値を反映しない以前の呼び出し"
"の値が返されたりすることがあります。そのような場合は、 ``refresh`` 引数を使用"
"して更新された値を取得し、キャッシュに保存します。"

msgid ""
"For empty bands (where all pixel values are \"no data\"), all statistics are "
"returned as ``None``."
msgstr ""
"空のバンド (すべてのピクセル値が \"no data \"である) の場合、すべての統計は "
"``None`` として返されます。"

msgid ""
"The statistics can also be retrieved directly by accessing the :attr:`min`, :"
"attr:`max`, :attr:`mean`, and :attr:`std` properties."
msgstr ""
"統計情報は、:attr:`min`、:attr:`max`、:attr:`mean`、および :attr:`std` プロパ"
"ティにアクセスすることで直接取得することもできます。"

msgid "The minimum pixel value of the band (excluding the \"no data\" value)."
msgstr "バンドの最小ピクセル値 (\"no data\" 値を除く) 。"

msgid "The maximum pixel value of the band (excluding the \"no data\" value)."
msgstr "バンドの最大ピクセル値 (\"no data\" 値を除く) 。"

msgid ""
"The mean of all pixel values of the band (excluding the \"no data\" value)."
msgstr "バンドのすべてのピクセル値の平均 (\"no data\"値を除く) 。"

msgid ""
"The standard deviation of all pixel values of the band (excluding the \"no "
"data\" value)."
msgstr "バンドのすべてのピクセル値の標準偏差 (\"no data\" の値を除く)。"

msgid ""
"The \"no data\" value for a band is generally a special marker value used to "
"mark pixels that are not valid data. Such pixels should generally not be "
"displayed, nor contribute to analysis operations."
msgstr ""
"バンドの \"no data\" 値は通常、有効なデータではないピクセルを示す特別なマー"
"カー値です。これらのピクセルは一般的に表示されるべきではなく、分析操作にも寄"
"与すべきではありません。"

msgid "To delete an existing \"no data\" value, set this property to ``None``."
msgstr ""
"既存の \"no data\" 値を削除するには、このプロパティを ``None`` に設定します。"

msgid ""
"The data type contained in the band, as an integer constant between 0 "
"(Unknown) and 14. If ``as_string`` is ``True``, the data type is returned as "
"a string. Check out the \"GDAL Pixel Type\" column in the :ref:`datatype "
"value table <gdal-raster-datatype>` for possible values."
msgstr ""
"バンドに含まれるデータ型。0 (Unknown) から 14 までの整数定数。 ``as_string`` "
"が ``True`` の場合、データ型は文字列として返されます。指定可能な値について"
"は、 :ref:`datatype の値テーブル <gdal-raster-datatype>` の \"GDAL ピクセルタ"
"イプ\" カラムを参照してください。"

msgid ""
"The color interpretation for the band, as an integer between 0and 16. If "
"``as_string`` is ``True``, the data type is returned as a string with the "
"following possible values: ``GCI_Undefined``, ``GCI_GrayIndex``, "
"``GCI_PaletteIndex``, ``GCI_RedBand``, ``GCI_GreenBand``, ``GCI_BlueBand``, "
"``GCI_AlphaBand``, ``GCI_HueBand``, ``GCI_SaturationBand``, "
"``GCI_LightnessBand``, ``GCI_CyanBand``, ``GCI_MagentaBand``, "
"``GCI_YellowBand``, ``GCI_BlackBand``, ``GCI_YCbCr_YBand``, "
"``GCI_YCbCr_CbBand``, and ``GCI_YCbCr_CrBand``. ``GCI_YCbCr_CrBand`` also "
"represents ``GCI_Max`` because both correspond to the integer 16, but only "
"``GCI_YCbCr_CrBand`` is returned as a string."
msgstr ""
"0 から 16 までの整数値。 ``as_string`` が ``True`` の場合、データ型は文字列と"
"して返されます: ``GCI_Undefined``, ``GCI_GrayIndex``, ``GCI_PaletteIndex``, "
"``GCI_RedBand``, ``GCI_GreenBand``, ``GCI_BlueBand``, ``GCI_AlphaBand``, "
"``GCI_HueBand``, ``GCI_SaturationBand``, ``GCI_LightnessBand``, "
"``GCI_CyanBand``, ``GCI_MagentaBand``, ``GCI_YellowBand``, "
"``GCI_BlackBand``, ``GCI_YCbCr_YBand``, ``GCI_YCbCr_CbBand``, "
"``GCI_YCbCr_CrBand`` 。 ``GCI_YCbCr_CrBand`` は ``GCI_Max`` も表します。どち"
"らも 16 の整数に対応しますが、文字列として返されるのは ``GCI_YCbCr_CrBand`` "
"だけです。"

msgid ""
"The accessor to the pixel values of the ``GDALBand``. Returns the complete "
"data array if no parameters are provided. A subset of the pixel array can be "
"requested by specifying an offset and block size as tuples."
msgstr ""
"``GDALBand`` のピクセル値へのアクセサ。パラメータを指定しない場合は完全なデー"
"タ配列を返す。オフセットとブロックサイズをタプルで指定することで、ピクセル配"
"列のサブセットをリクエストできます。"

msgid ""
"If NumPy is available, the data is returned as NumPy array. For performance "
"reasons, it is highly recommended to use NumPy."
msgstr ""
"NumPyが利用可能な場合、データはNumPy配列として返されます。パフォーマンス上の"
"理由から、NumPyの利用を強くお勧めします。"

msgid ""
"Data is written to the ``GDALBand`` if the ``data`` parameter is provided. "
"The input can be of one of the following types - packed string, buffer, "
"list, array, and NumPy array. The number of items in the input should "
"normally correspond to the total number of pixels in the band, or to the "
"number of pixels for a specific block of pixel values if the ``offset`` and "
"``size`` parameters are provided."
msgstr ""
"``data`` パラメータが指定された場合、データは ``GDALBand`` に書き込まれます。"
"入力には、パックされた文字列、バッファ、リスト、配列、NumPyの配列のいずれかを"
"指定できます。入力に含まれるアイテムの数は、通常、バンド内の全ピクセル数に対"
"応するか、 ``offset`` と ``size`` パラメータが指定されている場合は、ピクセル"
"値の特定のブロックのピクセル数に対応します。"

msgid ""
"If the number of items in the input is different from the target pixel "
"block, the ``shape`` parameter must be specified. The shape is a tuple that "
"specifies the width and height of the input data in pixels. The data is then "
"replicated to update the pixel values of the selected block. This is useful "
"to fill an entire band with a single value, for instance."
msgstr ""
"入力のアイテム数がターゲットピクセルブロックと異なる場合は、 ``shape`` パラ"
"メータを指定する必要があります。shapeは入力データの幅と高さをピクセル単位で指"
"定するタプルです。その後、選択されたブロックのピクセル値を更新するためにデー"
"タが複製されます。これは、たとえば1つの値でバンド全体を塗りつぶすのに便利で"
"す。"

msgid ""
"The metadata of this band. The functionality is identical to :attr:"
"`GDALRaster.metadata`."
msgstr ""
"このバンドのメタデータ。機能は :attr:`GDALRaster.metadata` と同じです。"

msgid "Creating rasters from data"
msgstr "データからラスターを作成する"

msgid ""
"This section describes how to create rasters from scratch using the "
"``ds_input`` parameter."
msgstr ""
"このセクションでは、``ds_input`` パラメータを使用してゼロからラスタを作成する"
"方法について説明します。"

msgid ""
"A new raster is created when a ``dict`` is passed to the :class:`GDALRaster` "
"constructor. The dictionary contains defining parameters of the new raster, "
"such as the origin, size, or spatial reference system. The dictionary can "
"also contain pixel data and information about the format of the new raster. "
"The resulting raster can therefore be file-based or memory-based, depending "
"on the driver specified."
msgstr ""
":class:`GDALRaster` コンストラクタに ``dict`` を渡すことで新しいラスタが作成"
"されます。この辞書には、新しいラスタの定義パラメータ (原点、サイズ、空間参照"
"システムなど) が含まれています。さらに、辞書にはピクセルデータや新しいラスタ"
"のフォーマットに関する情報も含めることができます。したがって、作成されるラス"
"タは指定したドライバに応じてファイルベースまたはメモリベースとなります。"

msgid ""
"There's no standard for describing raster data in a dictionary or JSON "
"flavor. The definition of the dictionary input to the :class:`GDALRaster` "
"class is therefore specific to Django. It's inspired by the `geojson`__ "
"format, but the ``geojson`` standard is currently limited to vector formats."
msgstr ""
"ラスターデータを辞書や JSON で記述する標準はありません。そのため、 :class:"
"`GDALRaster` クラスへの辞書入力の定義は Django 固有のものです。これは "
"`geojson`__ フォーマットに触発されたものですが、 ``geojson`` 標準は今のところ"
"ベクタフォーマットに限定されています。"

msgid ""
"Examples of using the different keys when creating rasters can be found in "
"the documentation of the corresponding attributes and methods of the :class:"
"`GDALRaster` and :class:`GDALBand` classes."
msgstr ""
":class:`GDALRaster` と :class:`GDALBand` クラスの対応する属性とメソッドのド"
"キュメントに、ラスタを作成する際に異なるキーを使用する例があります。"

msgid "The ``ds_input`` dictionary"
msgstr "``ds_input`` 辞書"

msgid ""
"Only a few keys are required in the ``ds_input`` dictionary to create a "
"raster: ``width``, ``height``, and ``srid``. All other parameters have "
"default values (see the table below). The list of keys that can be passed in "
"the ``ds_input`` dictionary is closely related but not identical to the :"
"class:`GDALRaster` properties. Many of the parameters are mapped directly to "
"those properties; the others are described below."
msgstr ""
"``ds_input`` 辞書内でラスターを作成するために必要なキーはわずかで、 "
"``width``、``height``、および ``srid`` です。その他のパラメータにはデフォルト"
"値が設定されています(以下の表を参照)。 ``ds_input`` 辞書に渡せるキーのリスト"
"は、:class:`GDALRaster` プロパティに密接に関連していますが、完全には一致して"
"いません。多くのパラメータはこれらのプロパティに直接マッピングされており、そ"
"の他のパラメータについては以下で説明します。"

msgid ""
"The following table describes all keys that can be set in the ``ds_input`` "
"dictionary."
msgstr ""
"以下の表は、``ds_input`` 辞書に設定できるすべてのキーを説明しています。"

msgid "Key"
msgstr "キー"

msgid "Default"
msgstr "デフォルト値"

msgid "Usage"
msgstr "使い方"

msgid "required"
msgstr "必須"

msgid "Mapped to the :attr:`~GDALRaster.srid` attribute"
msgstr ":attr:`~GDALRaster.srid` 属性にマッピングされます。"

msgid "``width``"
msgstr "``width``"

msgid "Mapped to the :attr:`~GDALRaster.width` attribute"
msgstr ":attr:`~GDALRaster.width` 属性にマッピングされます。"

msgid "``height``"
msgstr "``height``"

msgid "Mapped to the :attr:`~GDALRaster.height` attribute"
msgstr ":attr:`~GDALRaster.height` 属性にマッピングされます。"

msgid "``driver``"
msgstr "``driver``"

msgid "``MEM``"
msgstr "``MEM``"

msgid "Mapped to the :attr:`~GDALRaster.driver` attribute"
msgstr ":attr:`~GDALRaster.driver` 属性にマッピングされます。"

msgid "``name``"
msgstr "``name``"

msgid "``''``"
msgstr "``''``"

msgid "See below"
msgstr "下記参照"

msgid "``origin``"
msgstr "``origin``"

msgid "``0``"
msgstr "``0``"

msgid "Mapped to the :attr:`~GDALRaster.origin` attribute"
msgstr ":attr:`~GDALRaster.origin` 属性にマッピングされます。"

msgid "``scale``"
msgstr "``scale``"

msgid "Mapped to the :attr:`~GDALRaster.scale` attribute"
msgstr ":attr:`~GDALRaster.scale` 属性にマッピングされます。"

msgid "``skew``"
msgstr "``skew``"

msgid "``bands``"
msgstr "``bands``"

msgid "``[]``"
msgstr "``[]``"

msgid "``nr_of_bands``"
msgstr "``nr_of_bands``"

msgid "``datatype``"
msgstr "``datatype``"

msgid "``6``"
msgstr "``6``"

msgid "``papsz_options``"
msgstr "``papsz_options``"

msgid "``{}``"
msgstr "``{}``"

msgid ""
"String representing the name of the raster. When creating a file-based "
"raster, this parameter must be the file path for the new raster. If the name "
"starts with ``/vsimem/``, the raster is created in GDAL's virtual filesystem."
msgstr ""
"ラスタの名前を表す文字列。ファイルベースのラスタを作成する場合、このパラメー"
"タは新しいラスタのファイルパスでなければなりません。名前が ``/vsimem/`` で始"
"まる場合、ラスタはGDALの仮想ファイルシステムに作成されます。"

msgid ""
"Integer representing the data type for all the bands. Defaults to ``6`` "
"(Float32). All bands of a new raster are required to have the same datatype. "
"The value mapping is:"
msgstr ""
"全バンドのデータ型を表す整数です。デフォルトは ``6`` (Float32) です。新しいラ"
"スターの全てのバンドは同じデータ型である必要があります。値のマッピングは以下"
"の通りです:"

msgid "Value"
msgstr "値"

msgid "GDAL Pixel Type"
msgstr "GDAL ピクセルタイプ"

msgid "GDT_Byte"
msgstr "GDT_Byte"

msgid "8 bit unsigned integer"
msgstr "8 ビット符号なし整数"

msgid "GDT_UInt16"
msgstr "GDT_UInt16"

msgid "16 bit unsigned integer"
msgstr "16 ビット符号なし整数"

msgid "3"
msgstr "3"

msgid "GDT_Int16"
msgstr "GDT_Int16"

msgid "16 bit signed integer"
msgstr "16ビット符号付き整数"

msgid "GDT_UInt32"
msgstr "GDT_UInt32"

msgid "32 bit unsigned integer"
msgstr "32ビット符号なし整数"

msgid "5"
msgstr "5"

msgid "GDT_Int32"
msgstr "GDT_Int32"

msgid "32 bit signed integer"
msgstr "32ビット符号付き整数"

msgid "6"
msgstr "6"

msgid "GDT_Float32"
msgstr "GDT_Float32"

msgid "32 bit floating point"
msgstr "32ビット浮動小数点"

msgid "7"
msgstr "7"

msgid "GDT_Float64"
msgstr "GDT_Float64"

msgid "64 bit floating point"
msgstr "64ビット浮動小数点"

msgid "12"
msgstr "12"

msgid "GDT_UInt64"
msgstr "GDT_UInt64"

msgid "64 bit unsigned integer (GDAL 3.5+)"
msgstr "64ビット符号なし整数 (GDAL 3.5+)"

msgid "13"
msgstr "13"

msgid "GDT_Int64"
msgstr "GDT_Int64"

msgid "64 bit signed integer (GDAL 3.5+)"
msgstr "64ビット符号付き整数 (GDAL 3.5+)"

msgid "14"
msgstr "14"

msgid "GDT_Int8"
msgstr "GDT_Int8"

msgid "8 bit signed integer (GDAL 3.7+)"
msgstr "8ビット符号付き整数 (GDAL 3.7+)"

msgid ""
"Integer representing the number of bands of the raster. A raster can be "
"created without passing band data upon creation. If the number of bands "
"isn't specified, it's automatically calculated from the length of the "
"``bands`` input. The number of bands can't be changed after creation."
msgstr ""
"ラスターのバンド数を表す整数。作成時にバンドデータを渡さずにラスタを作成する"
"こともできます。バンド数が指定されていない場合は、入力 ``bands`` の長さから自"
"動的に計算されます。作成後にバンド数を変更することはできません。"

msgid ""
"A list of ``band_input`` dictionaries with band input data. The resulting "
"band indices are the same as in the list provided. The definition of the "
"band input dictionary is given below. If band data isn't provided, the "
"raster bands values are instantiated as an array of zeros and the \"no "
"data\" value is set to ``None``."
msgstr ""
"バンド入力データを持つ ``band_input`` 辞書のリスト。結果のバンドインデックス"
"は、提供されたリストと同じです。バンド入力辞書の定義は以下に示します。バンド"
"データが提供されない場合、ラスターバンドの値はゼロの配列としてインスタンス化"
"され、\"no data\" の値は ``None`` に設定されます。"

msgid ""
"A dictionary with raster creation options. The key-value pairs of the input "
"dictionary are passed to the driver on creation of the raster."
msgstr ""
"ラスターを作成するためのオプションを持つ辞書。入力辞書のキーと値のペアは、ラ"
"スターの作成時にドライバーに渡されます。"

msgid ""
"The available options are driver-specific and are described in the "
"documentation of each driver."
msgstr "利用可能なオプションは、ドライバごとのドキュメントに記載されています。"

msgid ""
"The values in the dictionary are not case-sensitive and are automatically "
"converted to the correct string format upon creation."
msgstr ""
"辞書内の値は大文字と小文字を区別しないため、作成時に適切な文字列形式に自動変"
"換されます。"

msgid ""
"The following example uses some of the options available for the `GTiff "
"driver`__. The result is a compressed raster with an internal tiling scheme. "
"The internal tiles have a block size of 23 by 23:"
msgstr ""
"以下の例では、`GTiff driver`__ で利用可能なオプションのいくつかを使用していま"
"す。結果は、内部タイルスキームを持つ圧縮されたラスターです。内部タイルのブ"
"ロックサイズは23×23です:"

msgid "The ``band_input`` dictionary"
msgstr "``band_input`` 辞書"

msgid ""
"The ``bands`` key in the ``ds_input`` dictionary is a list of ``band_input`` "
"dictionaries. Each ``band_input`` dictionary can contain pixel values and "
"the \"no data\" value to be set on the bands of the new raster. The data "
"array can have the full size of the new raster or be smaller. For arrays "
"that are smaller than the full raster, the ``size``, ``shape``, and "
"``offset`` keys  control the pixel values. The corresponding keys are passed "
"to the :meth:`~GDALBand.data` method. Their functionality is the same as "
"setting the band data with that method. The following table describes the "
"keys that can be used."
msgstr ""
"``ds_input`` 辞書内の ``bands`` キーは ``band_input`` 辞書のリストです。各 "
"``band_input`` 辞書には、新しいラスタのバンドに設定されるピクセル値と \"no "
"data\" 値が含まれている可能性があります。データ配列は新しいラスタの全サイズを"
"持つことも、より小さくなることもあります。新しいラスタより小さい配列の場合、"
"``size``、``shape``、および ``offset`` キーがピクセル値を制御します。これらの"
"対応するキーは、:meth:`~GDALBand.data` メソッドに渡されます。これらの機能は、"
"そのメソッドでバンドデータを設定するのと同じです。以下の表は使用可能なキーを"
"説明しています。"

msgid "``nodata_value``"
msgstr "``nodata_value``"

msgid "``None``"
msgstr "``None``"

msgid "Mapped to the :attr:`~GDALBand.nodata_value` attribute"
msgstr ":attr:`~GDALBand.nodata_value` 属性にマッピングされます。"

msgid "``data``"
msgstr "``data``"

msgid "Same as ``nodata_value`` or ``0``"
msgstr "``nodata_value`` と同様または ``0``"

msgid "Passed to the :meth:`~GDALBand.data` method"
msgstr ":meth:`~GDALBand.data` メソッドに渡されます"

msgid "``size``"
msgstr "``size``"

msgid "``(with, height)`` of raster"
msgstr "ラスターの ``(width, height)``"

msgid "``shape``"
msgstr "``shape``"

msgid "Same as size"
msgstr "size と同じ"

msgid "``offset``"
msgstr "``offset``"

msgid "``(0, 0)``"
msgstr "``(0, 0)``"

msgid "Using GDAL's Virtual Filesystem"
msgstr "GDALの仮想ファイルシステムを使う"

msgid ""
"GDAL can access files stored in the filesystem, but also supports virtual "
"filesystems to abstract accessing other kind of files, such as compressed, "
"encrypted, or remote files."
msgstr ""
"GDALはファイルシステムに保存されたファイルにアクセスするだけでなく、圧縮、暗"
"号化、またはリモートファイルなど他の種類のファイルにアクセスを抽象化するため"
"の仮想ファイルシステムもサポートしています。"

msgid "Using memory-based Virtual Filesystem"
msgstr "メモリベースの仮想ファイルシステムを使用する"

msgid ""
"GDAL has an internal memory-based filesystem, which allows treating blocks "
"of memory as files. It can be used to read and write :class:`GDALRaster` "
"objects to and from binary file buffers."
msgstr ""
"GDALには、メモリをファイルとして扱う内部メモリベースのファイルシステムがあり"
"ます。これを使用して、 :class:`GDALRaster` オブジェクトをバイナリファイルバッ"
"ファーに読み込んだり書き込んだりすることができます。"

msgid ""
"This is useful in web contexts where rasters might be obtained as a buffer "
"from a remote storage or returned from a view without being written to disk."
msgstr ""
"これは、ラスターがリモートストレージからバッファとして取得されたり、ディスク"
"に書き込まれることなくビューから返されたりするようなWebコンテキストで便利で"
"す。"

msgid ""
":class:`GDALRaster` objects are created in the virtual filesystem when a "
"``bytes`` object is provided as input, or when the file path starts with ``/"
"vsimem/``."
msgstr ""
"``bytes`` オブジェクトが入力として提供されるか、ファイルパスが ``/vsimem/`` "
"で始まる場合、仮想ファイルシステム内に :class:`GDALRaster` オブジェクトが作成"
"されます。"

msgid ""
"Input provided as ``bytes`` has to be a full binary representation of a "
"file. For instance:"
msgstr ""
"入力は、ファイルの ``bytes`` としての完全なバイナリ表現である必要があります。"
"例えば、:"

msgid ""
"To create a new virtual file-based raster from scratch, use the ``ds_input`` "
"dictionary representation and provide a ``name`` argument that starts with "
"``/vsimem/`` (for detail of the dictionary representation, see :ref:`gdal-"
"raster-ds-input`). For virtual file-based rasters, the :attr:`~GDALRaster."
"vsi_buffer` attribute returns the ``bytes`` representation of the raster."
msgstr ""
"新しい仮想ファイルベースのラスタをゼロから作成するには、 ``ds_input`` 辞書表"
"現を使用し、 ``/vsimem/`` で始まる ``name`` 引数を指定します (辞書表現の詳細"
"については、 :ref:`gdal-raster-ds-input` を参照してください) 。仮想ファイル"
"ベースのラスタの場合、 :attr:`~GDALRaster.vsi_buffer` 属性はラスタの "
"``bytes`` 表現を返します。"

msgid ""
"Here's how to create a raster and return it as a file in an :class:`~django."
"http.HttpResponse`:"
msgstr ""
"ここでは、ラスタを作成して :class:`~django.http.HttpResponse` にファイルとし"
"て返す方法を紹介します:"

msgid "Using other Virtual Filesystems"
msgstr "他の仮想ファイルシステムの使用"

msgid ""
"Depending on the local build of GDAL other virtual filesystems may be "
"supported. You can use them by prepending the provided path with the "
"appropriate ``/vsi*/`` prefix. See the `GDAL Virtual Filesystems "
"documentation`_ for more details."
msgstr ""
"GDAL のローカルビルドによっては、他の仮想ファイルシステムもサポートされている"
"かもしれません。提供されたパスの先頭に適切な ``/vsi*/`` 接頭辞を付けることで"
"使用できます。詳細は `GDAL Virtual Filesystems documentation`_ を参照してくだ"
"さい。"

msgid "Compressed rasters"
msgstr "圧縮されたラスタ"

msgid ""
"Instead decompressing the file and instantiating the resulting raster, GDAL "
"can directly access compressed files using the ``/vsizip/``, ``/vsigzip/``, "
"or ``/vsitar/`` virtual filesystems:"
msgstr ""
"ファイルを解凍して結果のラスタをインスタンス化する代わりに、GDAL は ``/"
"vsizip/``, ``/vsigzip/``, ``/vsitar/`` 仮想ファイルシステムを使用して圧縮ファ"
"イルに直接アクセスできます:"

msgid "Network rasters"
msgstr "ネットワーク ラスタ"

msgid ""
"GDAL can support online resources and storage providers transparently. As "
"long as it's built with such capabilities."
msgstr ""
"GDALは、それらの機能がビルトインされている限り、オンラインリソースとストレー"
"ジプロバイダを透過的にサポートできます。"

msgid ""
"To access a public raster file with no authentication, you can use ``/"
"vsicurl/``:"
msgstr ""
"認証なしで公開されたラスターファイルにアクセスするには、``/vsicurl/`` を使用"
"できます。"

msgid ""
"For commercial storage providers (e.g. ``/vsis3/``) the system should be "
"previously configured for authentication and possibly other settings (see "
"the `GDAL Virtual Filesystems documentation`_ for available options)."
msgstr ""
"商用のストレージプロバイダ (``/vsis3/`` など) の場合、認証やその他の設定を事"
"前に行っておく必要があります (利用可能なオプションについては `GDAL Virtual "
"Filesystems documentation`_ を参照してください) 。"

msgid "Settings"
msgstr "設定"

msgid "``GDAL_LIBRARY_PATH``"
msgstr "``GDAL_LIBRARY_PATH``"

msgid ""
"A string specifying the location of the GDAL library.  Typically, this "
"setting is only used if the GDAL library is in a non-standard location (e."
"g., ``/home/john/lib/libgdal.so``)."
msgstr ""
"GDALライブラリの場所を指定する文字列。通常、この設定はGDALライブラリが標準以"
"外の場所にある場合にのみ使用されます (例えば ``/home/john/lib/libgdal.so`` な"
"ど) 。"

msgid "Exceptions"
msgstr "例外"

msgid "The base GDAL exception, indicating a GDAL-related error."
msgstr "GDAL に関連するエラーを示す基本的な GDAL 例外。"

msgid ""
"An exception raised when an error occurs when constructing or using a "
"spatial reference system object."
msgstr ""
"空間参照システムオブジェクトの構築時または使用時にエラーが発生した場合に発生"
"する例外。"

msgid "Geolocation with GeoIP2"
msgstr "GeoIP2によるジオロケーション"

msgid ""
"The :class:`GeoIP2` object is a wrapper for the `MaxMind geoip2 Python "
"library`__. [#]_"
msgstr ""
":class:`GeoIP2` オブジェクトは `MaxMind geoip2 Python library`__. [#]_ のラッ"
"パーです。"

msgid ""
"In order to perform IP-based geolocation, the :class:`GeoIP2` object "
"requires the :pypi:`geoip2` Python package and the GeoIP ``Country`` and/or "
"``City`` datasets in binary format (the CSV files will not work!), "
"downloaded from e.g. `MaxMind`__ or `DB-IP`__ websites. Grab the ``GeoLite2-"
"Country.mmdb.gz`` and ``GeoLite2-City.mmdb.gz`` files and unzip them in a "
"directory corresponding to the :setting:`GEOIP_PATH` setting."
msgstr ""
"IP ベースのジオロケーションを実行するために、 :class:`GeoIP2` オブジェクトに"
"は、バイナリ形式の GeoIP ``Country`` および ``City`` データセットと、:pypi:"
"`geoip2` Python パッケージが必要です (CSV ファイルは使えません！)。これらは、"
"例えば `MaxMind`__ や `DB-IP`__ のウェブサイトからダウンロードできます。 "
"``GeoLite2-Country.mmdb.gz`` および ``GeoLite2-City.mmdb.gz`` ファイルを取得"
"し、これらを :setting:`GEOIP_PATH` 設定に対応するディレクトリに解凍してくださ"
"い。"

msgid ""
"Additionally, it is recommended to install the `libmaxminddb C library`__, "
"so that ``geoip2`` can leverage the C library's faster speed."
msgstr ""
"また、``geoip2`` が C ライブラリの高速な処理速度を活用できるようにするため"
"に、 `libmaxminddb C library`__ をインストールすることをおすすめします。"

msgid "Support for ``.mmdb`` files downloaded from DB-IP was added."
msgstr ""
"DB-IPからダウンロードした ``.mmdb`` ファイルのサポートが追加されました。"

msgid "Here is an example of its usage:"
msgstr "以下はその使用例です: "

msgid ""
"The ``GeoIP`` object does not require any parameters to use the default "
"settings. However, at the very least the :setting:`GEOIP_PATH` setting "
"should be set with the path of the location of your GeoIP datasets. The "
"following initialization keywords may be used to customize any of the "
"defaults."
msgstr ""
"``GeoIP`` オブジェクトにはデフォルトの設定を使用するため任意のパラメータは必"
"要ありません。ただし、最低限、:setting:`GEOIP_PATH` 設定を設定して、GeoIP "
"データセットの場所のパスを指定する必要があります。次の初期化キーワードを使用"
"して、デフォルトの設定をカスタマイズできます。"

msgid "Keyword Arguments"
msgstr "キーワード引数"

msgid "``path``"
msgstr "``path``"

msgid ""
"Base directory to where GeoIP data is located or the full path to where the "
"city or country data files (``.mmdb``) are located. Assumes that both the "
"city and country datasets are located in this directory; overrides the :"
"setting:`GEOIP_PATH` setting."
msgstr ""
"GeoIP データが配置されているベースディレクトリまたは都市や国のデータファイル "
"(``.mmdb``) が配置されているフルパスを指定します。都市と国のデータセットがこ"
"のディレクトリに配置されていることを前提としており、 :setting:`GEOIP_PATH` 設"
"定を上書きします。"

msgid "``cache``"
msgstr "``cache``"

msgid ""
"The cache settings when opening up the GeoIP datasets. May be an integer in "
"(0, 1, 2, 4, 8) corresponding to the ``MODE_AUTO``, ``MODE_MMAP_EXT``, "
"``MODE_MMAP``, and ``GEOIP_INDEX_CACHE`` ``MODE_MEMORY`` C API settings, "
"respectively. Defaults to 0 (``MODE_AUTO``)."
msgstr ""
"GeoIP データセットをオープンする際のキャッシュ設定。それぞれ ``MODE_AUTO``, "
"``MODE_MMAP_EXT``, ``MODE_MMAP``, ``GEOIP_INDEX_CACHE`` ``MODE_MEMORY`` C "
"API の設定に対応する (0, 1, 2, 4, 8) 整数を指定します。デフォルトは 0 "
"(``MODE_AUTO``) です。"

msgid "``country``"
msgstr "``country``"

msgid ""
"The name of the GeoIP country data file. Defaults to ``GeoLite2-Country."
"mmdb``. Setting this keyword overrides the :setting:`GEOIP_COUNTRY` setting."
msgstr ""
"GeoIP 国データファイルの名前。デフォルトは ``GeoLite2-Country.mmdb`` です。こ"
"のキーワードを設定すると :setting:`GEOIP_COUNTRY` の設定が上書きされます。"

msgid "``city``"
msgstr "``city``"

msgid ""
"The name of the GeoIP city data file. Defaults to ``GeoLite2-City.mmdb``. "
"Setting this keyword overrides the :setting:`GEOIP_CITY` setting."
msgstr ""
"GeoIP 都市データファイルの名前。デフォルトは ``GeoLite2-City.mmdb`` です。こ"
"のキーワードを設定すると :setting:`GEOIP_CITY` の設定が上書きされます。"

msgid "Instantiating"
msgstr "インスタンス化"

msgid ""
"This classmethod instantiates the GeoIP object from the given database path "
"and given cache setting."
msgstr ""
"このクラスメソッドは、指定されたデータベース・パスと指定されたキャッシュ設定"
"から GeoIP オブジェクトをインスタンス化します。"

msgid "Querying"
msgstr "クエリ"

msgid ""
"All the following querying routines may take either a string IP address or a "
"fully qualified domain name (FQDN). For example, both ``'205.186.163.125'`` "
"and ``'djangoproject.com'`` would be valid query parameters."
msgstr ""
"以下のクエリルーチンはすべて、IPアドレスか完全修飾ドメイン名 (FQDN) のどちら"
"かを取ることができます。例えば、 ``'205.186.163.125'`` と ``'djangoproject."
"com'`` の両方が有効なクエリパラメータとなります。"

msgid ""
"Returns a dictionary of city information for the given query. Some of the "
"values in the dictionary may be undefined (``None``)."
msgstr ""
"与えられたクエリの都市情報の辞書を返します。辞書内の値のうち、一部は未定義 "
"(``None``) の場合があります。"

msgid ""
"Returns a dictionary with the country code and country for the given query."
msgstr "指定されたクエリの国コードと国を含む辞書を返します。"

msgid "Returns the country code corresponding to the query."
msgstr "クエリに対応する国コードを返します。"

msgid "Returns the country name corresponding to the query."
msgstr "クエリに対応する国名を返します。"

msgid "Coordinate Retrieval"
msgstr "座標の取得"

msgid "Returns a coordinate tuple of (longitude, latitude)."
msgstr "(経度, 緯度) の座標タプルを返します。"

msgid "Returns a coordinate tuple of (latitude, longitude),"
msgstr "(緯度, 経度) の座標タプルを返します。"

msgid ""
"Returns a :class:`~django.contrib.gis.geos.Point` object corresponding to "
"the query."
msgstr ""
"クエリに対応する :class:`~django.contrib.gis.geos.Point` オブジェクトを返しま"
"す。"

msgid "``GEOIP_PATH``"
msgstr "``GEOIP_PATH``"

msgid ""
"A string or :class:`pathlib.Path` specifying the directory where the GeoIP "
"data files are located. This setting is *required* unless manually specified "
"with ``path`` keyword when initializing the :class:`GeoIP2` object."
msgstr ""
"文字列または :class:`pathlib.Path` で、GeoIP データファイルがあるディレクトリ"
"を指定します。この設定は、 :class:`GeoIP2` オブジェクトを初期化する際に "
"``path`` キーワードで手動で指定しない限り *必須* です。"

msgid "``GEOIP_COUNTRY``"
msgstr "``GEOIP_COUNTRY``"

msgid ""
"The basename to use for the GeoIP country data file. Defaults to ``'GeoLite2-"
"Country.mmdb'``."
msgstr ""
"GeoIP 国データファイルに使用するベース名。デフォルトは ``'GeoLite2-Country."
"mmdb'`` です。"

msgid "``GEOIP_CITY``"
msgstr "``GEOIP_CITY``"

msgid ""
"The basename to use for the GeoIP city data file. Defaults to ``'GeoLite2-"
"City.mmdb'``."
msgstr ""
"GeoIP 都市データファイルに使用するベースネーム。デフォルトは ``'GeoLite2-"
"City.mmdb'``."

msgid ""
"The exception raised when an error occurs in a call to the underlying "
"``geoip2`` library."
msgstr ""
"ベースとなる ``geoip2`` ライブラリの呼び出しでエラーが発生した場合に発生する"
"例外。"

msgid "GeoIP(R) is a registered trademark of MaxMind, Inc."
msgstr "GeoIP(R) はMaxMind, Inc.の登録商標です。"

msgid "GIS QuerySet API Reference"
msgstr "GIS QuerySet API リファレンス"

msgid ""
"The spatial lookups in this section are available for :class:`GeometryField` "
"and :class:`RasterField`."
msgstr ""
"このセクションの空間ルックアップは :class:`GeometryField` と :class:"
"`RasterField` 用です。"

msgid ""
"For an introduction, see the :ref:`spatial lookups introduction <spatial-"
"lookups-intro>`.  For an overview of what lookups are compatible with a "
"particular spatial backend, refer to the :ref:`spatial lookup compatibility "
"table <spatial-lookup-compatibility>`."
msgstr ""
"導入については、 :ref:`空間ルックアップの概要 <spatial-lookups-intro>` を参照"
"してください。特定の空間バックエンドと互換性のあるルックアップの概要について"
"は、 :ref:`空間ルックアップの互換表 <spatial-lookup-compatibility>` を参照し"
"てください。"

msgid "Lookups with rasters"
msgstr "ラスターのルックアップ"

msgid ""
"All examples in the reference below are given for geometry fields and "
"inputs, but the lookups can be used the same way with rasters on both sides. "
"Whenever a lookup doesn't support raster input, the input is automatically "
"converted to a geometry where necessary using the `ST_Polygon <https://"
"postgis.net/docs/RT_ST_Polygon.html>`_ function. See also the :ref:"
"`introduction to raster lookups <spatial-lookup-raster>`."
msgstr ""
"以下のリファレンスにあるすべての例は地理情報フィールドおよび入力に対して提供"
"されていますが、ルックアップはラスタの両側で同じように使用できます。ルック"
"アップがラスター入力をサポートしていない場合、入力は `ST_Polygon <https://"
"postgis.net/docs/RT_ST_Polygon.html>`_ 関数を使用して必要に応じて自動的にジオ"
"メトリに変換されます。 :ref:`ラスタルックアップの概要 <spatial-lookup-"
"raster>` も参照してください。"

msgid ""
"The database operators used by the lookups can be divided into three "
"categories:"
msgstr ""
"ルックアップで使用されるデータベース演算子は、以下の 3 つのカテゴリに分類でき"
"ます:"

msgid ""
"Native raster support ``N``: the operator accepts rasters natively on both "
"sides of the lookup, and raster input can be mixed with geometry inputs."
msgstr ""
"ネイティブラスターサポート (``N``): この演算子は、参照先としてラスターをネイ"
"ティブに受け入れ、ラスター入力をジオメトリ入力と混在させることができます。"

msgid ""
"Bilateral raster support ``B``: the operator supports rasters only if both "
"sides of the lookup receive raster inputs. Raster data is automatically "
"converted to geometries for mixed lookups."
msgstr ""
"双方向ラスターサポート ``B``: このオペレータは、ルックアップの両側がラスター"
"入力を受け取る場合のみ、ラスターをサポートします。異なるルックアップの場合"
"は、ラスターデータは自動的にジオメトリに変換されます。"

msgid ""
"Geometry conversion support ``C``. The lookup does not have native raster "
"support, all raster data is automatically converted to geometries."
msgstr ""
"ジオメトリ変換サポート ``C`` 。ルックアップはネイティブのラスターをサポートし"
"ていないため、すべてのラスターデータは自動的にジオメトリに変換されます。"

msgid ""
"The examples below show the SQL equivalent for the lookups in the different "
"types of raster support. The same pattern applies to all spatial lookups."
msgstr ""
"以下の例は、さまざまなタイプのラスターサポートにおけるルックアップに相当する "
"SQL を示しています。同じパターンがすべての空間ルックアップに適用されます。"

msgid "Case"
msgstr "ケース"

msgid "SQL Equivalent"
msgstr "等価なSQL"

msgid "N, B"
msgstr "N, B"

msgid "``rast__contains=rst``"
msgstr "``rast__contains=rst``"

msgid "``ST_Contains(rast, rst)``"
msgstr "``ST_Contains(rast, rst)``"

msgid "``rast__1__contains=(rst, 2)``"
msgstr "``rast__1__contains=(rst, 2)``"

msgid "``ST_Contains(rast, 1, rst, 2)``"
msgstr "``ST_Contains(rast, 1, rst, 2)``"

msgid "B, C"
msgstr "B, C"

msgid "``rast__contains=geom``"
msgstr "``rast__contains=geom``"

msgid "``ST_Contains(ST_Polygon(rast), geom)``"
msgstr "``ST_Contains(ST_Polygon(rast), geom)``"

msgid "``rast__1__contains=geom``"
msgstr "``rast__1__contains=geom``"

msgid "``ST_Contains(ST_Polygon(rast, 1), geom)``"
msgstr "``ST_Contains(ST_Polygon(rast, 1), geom)``"

msgid "``poly__contains=rst``"
msgstr "``poly__contains=rst``"

msgid "``ST_Contains(poly, ST_Polygon(rst))``"
msgstr "``ST_Contains(poly, ST_Polygon(rst))``"

msgid "``poly__contains=(rst, 1)``"
msgstr "``poly__contains=(rst, 1)``"

msgid "``ST_Contains(poly, ST_Polygon(rst, 1))``"
msgstr "``ST_Contains(poly, ST_Polygon(rst, 1))``"

msgid "``rast__crosses=rst``"
msgstr "``rast__crosses=rst``"

msgid "``ST_Crosses(ST_Polygon(rast), ST_Polygon(rst))``"
msgstr "``ST_Crosses(ST_Polygon(rast), ST_Polygon(rst))``"

msgid "``rast__1__crosses=(rst, 2)``"
msgstr "``rast__1__crosses=(rst, 2)``"

msgid "``ST_Crosses(ST_Polygon(rast, 1), ST_Polygon(rst, 2))``"
msgstr "``ST_Crosses(ST_Polygon(rast, 1), ST_Polygon(rst, 2))``"

msgid "``rast__crosses=geom``"
msgstr "``rast__crosses=geom``"

msgid "``ST_Crosses(ST_Polygon(rast), geom)``"
msgstr "``ST_Crosses(ST_Polygon(rast), geom)``"

msgid "``poly__crosses=rst``"
msgstr "``poly__crosses=rst``"

msgid "``ST_Crosses(poly, ST_Polygon(rst))``"
msgstr "``ST_Crosses(poly, ST_Polygon(rst))``"

msgid ""
"Spatial lookups with rasters are only supported for PostGIS backends "
"(denominated as PGRaster in this section)."
msgstr ""
"ラスターを使った空間ルックアップは、PostGISバックエンド (この節ではPGRasterと"
"表記) のみでサポートされています。"

msgid "``bbcontains``"
msgstr "``bbcontains``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Contain."
"html>`__, MariaDB, MySQL, SpatiaLite, PGRaster (Native)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Geometry_Contain."
"html>`__, MariaDB, MySQL, SpatiaLite, PGRaster (Native)"

msgid ""
"Tests if the geometry or raster field's bounding box completely contains the "
"lookup geometry's bounding box."
msgstr ""
"ジオメトリまたはラスタフィールドのバウンディングボックスが、ルックアップジオ"
"メトリのバウンディングボックスを完全に含むかどうかをテストします。"

msgid "Backend"
msgstr "バックエンド"

msgid "``poly ~ geom``"
msgstr "``poly ~ geom``"

msgid "``MBRContains(poly, geom)``"
msgstr "``MBRContains(poly, geom)``"

msgid "``MbrContains(poly, geom)``"
msgstr "``MbrContains(poly, geom)``"

msgid "``bboverlaps``"
msgstr "``bboverlaps``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/geometry_overlaps."
"html>`__, MariaDB, MySQL, SpatiaLite, PGRaster (Native)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/geometry_overlaps."
"html>`__, MariaDB, MySQL, SpatiaLite, PGRaster (Native)"

msgid ""
"Tests if the geometry field's bounding box overlaps the lookup geometry's "
"bounding box."
msgstr ""
"ジオメトリフィールドのバウンディングボックスが、ルックアップジオメトリのバウ"
"ンディングボックスと重なるかどうかをテストします。"

msgid "``poly && geom``"
msgstr "``poly && geom``"

msgid "``MBROverlaps(poly, geom)``"
msgstr "``MBROverlaps(poly, geom)``"

msgid "``MbrOverlaps(poly, geom)``"
msgstr "``MbrOverlaps(poly, geom)``"

msgid "``contained``"
msgstr "``contained``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Contained."
"html>`__, MariaDB, MySQL, SpatiaLite, PGRaster (Native)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Geometry_Contained."
"html>`__, MariaDB, MySQL, SpatiaLite, PGRaster (Native)"

msgid ""
"Tests if the geometry field's bounding box is completely contained by the "
"lookup geometry's bounding box."
msgstr ""
"ジオメトリフィールドのバウンディングボックスがルックアップジオメトリのバウン"
"ディングボックスに完全に含まれるかどうかをテストします。"

msgid "``poly @ geom``"
msgstr "``poly @ geom``"

msgid "``MBRWithin(poly, geom)``"
msgstr "``MBRWithin(poly, geom)``"

msgid "``MbrWithin(poly, geom)``"
msgstr "``MbrWithin(poly, geom)``"

msgid "``contains``"
msgstr "``contains``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Contains.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Contains.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"

msgid "Tests if the geometry field spatially contains the lookup geometry."
msgstr ""
"ジオメトリフィールドにルックアップ ジオメトリが含まれているかどうかを調べま"
"す。"

msgid "``ST_Contains(poly, geom)``"
msgstr "``ST_Contains(poly, geom)``"

msgid "``SDO_CONTAINS(poly, geom)``"
msgstr "``SDO_CONTAINS(poly, geom)``"

msgid "``Contains(poly, geom)``"
msgstr "``Contains(poly, geom)``"

msgid "``contains_properly``"
msgstr "``contains_properly``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_ContainsProperly."
"html>`__, PGRaster (Bilateral)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_ContainsProperly."
"html>`__, PGRaster (Bilateral)"

msgid ""
"Returns true if the lookup geometry intersects the interior of the geometry "
"field, but not the boundary (or exterior)."
msgstr ""
"ルックアップ ジオメトリがジオメトリ フィールドの内部と交差し、境界 (または外"
"部) と交差しない場合に true を返します。"

msgid "``ST_ContainsProperly(poly, geom)``"
msgstr "``ST_ContainsProperly(poly, geom)``"

msgid "``coveredby``"
msgstr "``coveredby``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_CoveredBy.html>`__, "
"Oracle, PGRaster (Bilateral), SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_CoveredBy.html>`__, "
"Oracle, PGRaster (Bilateral), SpatiaLite"

msgid ""
"Tests if no point in the geometry field is outside the lookup geometry. "
"[#fncovers]_"
msgstr ""
"ジオメトリフィールドのどのポイントもルックアップジオメトリの外側にないかどう"
"かをテストします。 [#fncovers]_"

msgid "``ST_CoveredBy(poly, geom)``"
msgstr "``ST_CoveredBy(poly, geom)``"

msgid "``SDO_COVEREDBY(poly, geom)``"
msgstr "``SDO_COVEREDBY(poly, geom)``"

msgid "``CoveredBy(poly, geom)``"
msgstr "``CoveredBy(poly, geom)``"

msgid "``covers``"
msgstr "``covers``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Covers.html>`__, "
"Oracle, PGRaster (Bilateral), SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Covers.html>`__, "
"Oracle, PGRaster (Bilateral), SpatiaLite"

msgid ""
"Tests if no point in the lookup geometry is outside the geometry field. "
"[#fncovers]_"
msgstr ""
"ルックアップされたジオメトリ内のどのポイントも、ジオメトリフィールドの外にな"
"いかどうかテストします。 [#fncovers]_"

msgid "``ST_Covers(poly, geom)``"
msgstr "``ST_Covers(poly, geom)``"

msgid "``SDO_COVERS(poly, geom)``"
msgstr "``SDO_COVERS(poly, geom)``"

msgid "``Covers(poly, geom)``"
msgstr "``Covers(poly, geom)``"

msgid "``crosses``"
msgstr "``crosses``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Crosses.html>`__, "
"MariaDB, MySQL, SpatiaLite, PGRaster (Conversion)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Crosses.html>`__, "
"MariaDB, MySQL, SpatiaLite, PGRaster (Conversion)"

msgid "Tests if the geometry field spatially crosses the lookup geometry."
msgstr ""
"ジオメトリフィールドがルックアップジオメトリと空間的に交差しているかをテスト"
"します。"

msgid "``ST_Crosses(poly, geom)``"
msgstr "``ST_Crosses(poly, geom)``"

msgid "``Crosses(poly, geom)``"
msgstr "``Crosses(poly, geom)``"

msgid "``disjoint``"
msgstr "``disjoint``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Disjoint.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Disjoint.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"

msgid ""
"Tests if the geometry field is spatially disjoint from the lookup geometry."
msgstr ""
"ジオメトリフィールドがルックアップジオメトリから空間的に分離しているかどうか"
"をテストします。"

msgid "``ST_Disjoint(poly, geom)``"
msgstr "``ST_Disjoint(poly, geom)``"

msgid "``SDO_GEOM.RELATE(poly, 'DISJOINT', geom, 0.05)``"
msgstr "``SDO_GEOM.RELATE(poly, 'DISJOINT', geom, 0.05)``"

msgid "``Disjoint(poly, geom)``"
msgstr "``Disjoint(poly, geom)``"

msgid "``equals``"
msgstr "``equals``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Equals.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Conversion)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Equals.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Conversion)"

msgid "Tests if the geometry field is spatially equal to the lookup geometry."
msgstr ""
"ジオメトリフィールドがルックアップジオメトリと空間的に等しいかどうかをテスト"
"します。"

msgid "``ST_Equals(poly, geom)``"
msgstr "``ST_Equals(poly, geom)``"

msgid "``SDO_EQUAL(poly, geom)``"
msgstr "``SDO_EQUAL(poly, geom)``"

msgid "``Equals(poly, geom)``"
msgstr "``Equals(poly, geom)``"

msgid "``exact``, ``same_as``"
msgstr "``exact``, ``same_as``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Same."
"html>`__, Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Geometry_Same."
"html>`__, Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"

msgid ""
"Tests if the geometry field is \"equal\" to the lookup geometry. On Oracle, "
"MySQL, and SpatiaLite, it tests spatial equality, while on PostGIS it tests "
"equality of bounding boxes."
msgstr ""
"ジオメトリフィールドがルックアップジオメトリと \"等しい\" かどうかをテストし"
"ます。Oracle、MySQL、SpatiaLite では空間的な等しさをテストし、PostGIS ではバ"
"ウンディングボックスの等しさをテストします。"

msgid "``poly ~= geom``"
msgstr "``poly ~= geom``"

msgid "``intersects``"
msgstr "``intersects``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Intersects.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Intersects.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"

msgid "Tests if the geometry field spatially intersects the lookup geometry."
msgstr ""
"ジオメトリフィールドがルックアップジオメトリと空間的に交差しているかどうかを"
"テストします。"

msgid "``ST_Intersects(poly, geom)``"
msgstr "``ST_Intersects(poly, geom)``"

msgid "``SDO_OVERLAPBDYINTERSECT(poly, geom)``"
msgstr "``SDO_OVERLAPBDYINTERSECT(poly, geom)``"

msgid "``Intersects(poly, geom)``"
msgstr "``Intersects(poly, geom)``"

msgid "``isempty``"
msgstr "``isempty``"

msgid "Tests if the geometry is empty."
msgstr "ジオメトリが空かどうかをテストします。"

msgid "``isvalid``"
msgstr "``isvalid``"

msgid ""
"*Availability*: MySQL, `PostGIS <https://postgis.net/docs/ST_IsValid."
"html>`__, Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: MySQL, `PostGIS <https://postgis.net/docs/ST_IsValid."
"html>`__, Oracle, SpatiaLite"

msgid "Tests if the geometry is valid."
msgstr "ジオメトリが有効かどうかをテストします。"

msgid "MySQL, PostGIS, SpatiaLite"
msgstr "MySQL, PostGIS, SpatiaLite"

msgid "``ST_IsValid(poly)``"
msgstr "``ST_IsValid(poly)``"

msgid "``SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT(poly, 0.05) = 'TRUE'``"
msgstr "``SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT(poly, 0.05) = 'TRUE'``"

msgid "``overlaps``"
msgstr "``overlaps``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Overlaps.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Overlaps.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"

msgid "Tests if the geometry field spatially overlaps the lookup geometry."
msgstr ""
"ジオメトリフィールドがルックアップ ジオメトリと空間的に重なっているかどうかを"
"テストします。"

msgid "``ST_Overlaps(poly, geom)``"
msgstr "``ST_Overlaps(poly, geom)``"

msgid "``SDO_OVERLAPS(poly, geom)``"
msgstr "``SDO_OVERLAPS(poly, geom)``"

msgid "``Overlaps(poly, geom)``"
msgstr "``Overlaps(poly, geom)``"

msgid "``relate``"
msgstr "``relate``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Relate.html>`__, "
"MariaDB, Oracle, SpatiaLite, PGRaster (Conversion)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Relate.html>`__, "
"MariaDB, Oracle, SpatiaLite, PGRaster (Conversion)"

msgid ""
"Tests if the geometry field is spatially related to the lookup geometry by "
"the values given in the given pattern.  This lookup requires a tuple "
"parameter, ``(geom, pattern)``; the form of ``pattern`` will depend on the "
"spatial backend:"
msgstr ""
"ジオメトリフィールドが指定されたパターンの値によって空間的に関連しているかを"
"テストします。このルックアップには ``(geom, pattern)`` というタプルパラメータ"
"が必要であり、``pattern`` の形式は空間バックエンドによって異なります。"

msgid "MariaDB, PostGIS, and SpatiaLite"
msgstr "MariaDB, PostGIS, SpatiaLite"

msgid ""
"On these spatial backends the intersection pattern is a string comprising "
"nine characters, which  define intersections between  the interior, "
"boundary, and exterior of the geometry field and the lookup geometry. The "
"intersection pattern matrix may only use the following characters: ``1``, "
"``2``, ``T``, ``F``, or ``*``.  This lookup type allows users to \"fine "
"tune\" a specific geometric relationship consistent with the DE-9IM model. "
"[#fnde9im]_"
msgstr ""
"これらの空間バックエンドでは、交差パターンは9文字からなる文字列で、ジオメトリ"
"フィールドとルックアップジオメトリの内部、境界、外部の交差を定義します。交差"
"パターン行列では、次の文字のみを使用できます: ``1``、``2``、``T``、``F``、ま"
"たは ``*``。このルックアップタイプを使用すると、ユーザーはDE-9IMモデルに一致"
"する特定のジオメトリのリレーションシップを「微調整」できます。 [#fnde9im]_"

msgid "Geometry example::"
msgstr "ジオメトリの例:"

msgid "PostGIS and MariaDB SQL equivalent:"
msgstr "PostGIS と MariaDB では下記の SQL と同等です:"

msgid "SpatiaLite SQL equivalent:"
msgstr "SpatiaLite では下記の SQL と同等です:"

msgid "Raster example::"
msgstr "ラスターの例:"

msgid "PostGIS SQL equivalent:"
msgstr "PostGIS では下記の SQL と同等です:"

msgid ""
"Here the relation pattern is comprised of at least one of the nine relation "
"strings: ``TOUCH``, ``OVERLAPBDYDISJOINT``, ``OVERLAPBDYINTERSECT``, "
"``EQUAL``, ``INSIDE``, ``COVEREDBY``, ``CONTAINS``, ``COVERS``, ``ON``, and "
"``ANYINTERACT``.   Multiple strings may be combined with the logical Boolean "
"operator OR, for example, ``'inside+touch'``. [#fnsdorelate]_  The relation "
"strings are case-insensitive."
msgstr ""
"ここで、リレーションパターンは9つのリレーション文字列のうち少なくとも1つで構"
"成されます: ``TOUCH``, ``OVERLAPBDYDISJOINT``, ``OVERLAPBDYINTERSECT``, "
"``EQUAL``, ``INSIDE``, ``COVEREDBY``, ``CONTAINS``, ``COVERS``, ``ON``, "
"``ANYINTERACT`` 。複数の文字列を論理論理演算子 OR で結合することもできます。 "
"[#fnsdorelate]_ リレーション文字列は大文字小文字を区別しません。"

msgid "Oracle SQL equivalent:"
msgstr "Oracle では下記の SQL と同等です:"

msgid "``touches``"
msgstr "``touches``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Touches.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Touches.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite"

msgid "Tests if the geometry field spatially touches the lookup geometry."
msgstr ""
"ジオメトリ フィールドがルックアップ ジオメトリに空間的に接しているかどうかを"
"テストします。"

msgid "``ST_Touches(poly, geom)``"
msgstr "``ST_Touches(poly, geom)``"

msgid "``SDO_TOUCH(poly, geom)``"
msgstr "``SDO_TOUCH(poly, geom)``"

msgid "``Touches(poly, geom)``"
msgstr "``Touches(poly, geom)``"

msgid "``within``"
msgstr "``within``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Within.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Within.html>`__, "
"Oracle, MariaDB, MySQL, SpatiaLite, PGRaster (Bilateral)"

msgid "Tests if the geometry field is spatially within the lookup geometry."
msgstr ""
"ジオメトリフィールドが空間的にルックアップジオメトリ内にあるかどうかをテスト"
"します。"

msgid "``ST_Within(poly, geom)``"
msgstr "``ST_Within(poly, geom)``"

msgid "``SDO_INSIDE(poly, geom)``"
msgstr "``SDO_INSIDE(poly, geom)``"

msgid "``Within(poly, geom)``"
msgstr "``Within(poly, geom)``"

msgid "``left``"
msgstr "``left``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Left."
"html>`__, PGRaster (Conversion)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Geometry_Left."
"html>`__, PGRaster (Conversion)"

msgid ""
"Tests if the geometry field's bounding box is strictly to the left of the "
"lookup geometry's bounding box."
msgstr ""
"ジオメトリフィールドのバウンディングボックスが、ルックアップ ジオメトリのバウ"
"ンディングボックスよりも厳密に左側にあるかどうかをテストします。"

msgid "PostGIS equivalent:"
msgstr "PostGIS では下記の SQL と同等です:"

msgid "``right``"
msgstr "``right``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Right."
"html>`__, PGRaster (Conversion)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Geometry_Right."
"html>`__, PGRaster (Conversion)"

msgid ""
"Tests if the geometry field's bounding box is strictly to the right of the "
"lookup geometry's bounding box."
msgstr ""
"ジオメトリフィールドのバウンディングボックスが、ルックアップ ジオメトリのバウ"
"ンディングボックスの厳密に右側にあるかどうかをテストします。"

msgid "``overlaps_left``"
msgstr "``overlaps_left``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Overleft."
"html>`__, PGRaster (Bilateral)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Geometry_Overleft."
"html>`__, PGRaster (Bilateral)"

msgid ""
"Tests if the geometry field's bounding box overlaps or is to the left of the "
"lookup geometry's bounding box."
msgstr ""
"ジオメトリフィールドのバウンディングボックスが、ルックアップ ジオメトリのバウ"
"ンディングボックスと重なるか、または左にあるかどうかをテストします。"

msgid "``overlaps_right``"
msgstr "``overlaps_right``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Overright."
"html>`__, PGRaster (Bilateral)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Geometry_Overright."
"html>`__, PGRaster (Bilateral)"

msgid ""
"Tests if the geometry field's bounding box overlaps or is to the right of "
"the lookup geometry's bounding box."
msgstr ""
"ジオメトリフィールドのバウンディングボックスが、ルックアップ ジオメトリのバウ"
"ンディングボックスと重なっているか、または右側にあるかどうかをテストします。"

msgid "``overlaps_above``"
msgstr "``overlaps_above``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Overabove."
"html>`__, PGRaster (Conversion)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Geometry_Overabove."
"html>`__, PGRaster (Conversion)"

msgid ""
"Tests if the geometry field's bounding box overlaps or is above the lookup "
"geometry's bounding box."
msgstr ""
"ジオメトリフィールドのバウンディングボックスがルックアップジオメトリのバウン"
"ディングボックスと重なっているか、または上にあるかどうかをテストします。"

msgid "``overlaps_below``"
msgstr "``overlaps_below``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Overbelow."
"html>`__, PGRaster (Conversion)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Geometry_Overbelow."
"html>`__, PGRaster (Conversion)"

msgid ""
"Tests if the geometry field's bounding box overlaps or is below the lookup "
"geometry's bounding box."
msgstr ""
"ジオメトリフィールドのバウンディングボックスがルックアップジオメトリのバウン"
"ディングボックスと重なっているか、または下にあるかどうかをテストします。"

msgid "``strictly_above``"
msgstr "``strictly_above``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Above."
"html>`__, PGRaster (Conversion)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Geometry_Above."
"html>`__, PGRaster (Conversion)"

msgid ""
"Tests if the geometry field's bounding box is strictly above the lookup "
"geometry's bounding box."
msgstr ""
"ジオメトリフィールドのバウンディングボックスが、ルックアップジオメトリのバウ"
"ンディングボックスの厳密に上にあるかどうかをテストします。"

msgid "``strictly_below``"
msgstr "``strictly_below``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Geometry_Below."
"html>`__, PGRaster (Conversion)"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Geometry_Below."
"html>`__, PGRaster (Conversion)"

msgid ""
"Tests if the geometry field's bounding box is strictly below the lookup "
"geometry's bounding box."
msgstr ""
"ジオメトリフィールドのバウンディングボックスが、ルックアップジオメトリのバウ"
"ンディングボックスの厳密に下にあるかどうかをテストします。"

msgid ""
"*Availability*: PostGIS, Oracle, MariaDB, MySQL, SpatiaLite, PGRaster "
"(Native)"
msgstr ""
"*利用可能なDB*: PostGIS, Oracle, MariaDB, MySQL, SpatiaLite, PGRaster "
"(Native)"

msgid ""
"For an overview on performing distance queries, please refer to the :ref:"
"`distance queries introduction <distance-queries>`."
msgstr ""
"距離クエリの概要については :ref:`距離クエリの概要 <distance-queries>` を参照"
"してください。"

msgid "Distance lookups take the following form:"
msgstr "距離ルックアップは次の形式を取ります:"

msgid ""
"The value passed into a distance lookup is a tuple; the first two values are "
"mandatory, and are the geometry to calculate distances to, and a distance "
"value (either a number in units of the field, a :class:`~django.contrib.gis."
"measure.Distance` object, or a :doc:`query expression </ref/models/"
"expressions>`). To pass a band index to the lookup, use a 3-tuple where the "
"second entry is the band index."
msgstr ""
"距離ルックアップに渡される値はタプルであり、最初の2つの値は必須で、それぞれ、"
"距離の計算対象のジオメトリと距離値 (フィールドの単位での数値、 :class:"
"`~django.contrib.gis.measure.Distance` オブジェクト、または :doc:`クエリ式 </"
"ref/models/expressions>`) です。ルックアップにバンドインデックスを渡すには、2"
"番目のエントリがバンドインデックスである3値タプルを使用します。"

msgid ""
"On every distance lookup except :lookup:`dwithin`, an optional element, "
"``'spheroid'``, may be included to use the more accurate spheroid distance "
"calculation functions on fields with a geodetic coordinate system."
msgstr ""
":lookup:`dwithin` を除くすべての距離ルックアップには、オプションの要素として "
"``'spheroid'`` を含めることができます。これにより、測地座標系を持つフィールド"
"においてより精度の高い回転楕円体距離計算関数を使用できます。"

msgid ""
"On PostgreSQL, the ``'spheroid'`` option uses `ST_DistanceSpheroid <https://"
"postgis.net/docs/ST_Distance_Spheroid.html>`__ instead of `ST_DistanceSphere "
"<https://postgis.net/docs/ST_DistanceSphere.html>`__. The simpler "
"`ST_Distance <https://postgis.net/docs/ST_Distance.html>`__ function is used "
"with projected coordinate systems. Rasters are converted to geometries for "
"spheroid based lookups."
msgstr ""
"PostgreSQLでは、 ``'spheroid'`` オプションは `ST_DistanceSphere <https://"
"postgis.net/docs/ST_DistanceSphere.html>`__ の代わりに `ST_DistanceSpheroid "
"<https://postgis.net/docs/ST_Distance_Spheroid.html>`__ を使用します。投影座"
"標系では、より単純な `ST_Distance <https://postgis.net/docs/ST_Distance."
"html>`__ 関数を使用します。ラスタは回転楕円体ベースのルックアップ用にジオメト"
"リに変換されます。"

msgid "``distance_gt``"
msgstr "``distance_gt``"

msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry is greater than the given distance value."
msgstr ""
"指定された距離値よりも、ルックアップジオメトリからジオメトリフィールドへの距"
"離が大きいモデルを返します。"

msgid "``ST_Distance/ST_Distance_Sphere(poly, geom) > 5``"
msgstr "``ST_Distance/ST_Distance_Sphere(poly, geom) > 5``"

msgid "``ST_Distance(poly, geom) > 5``"
msgstr "``ST_Distance(poly, geom) > 5``"

msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) > 5``"
msgstr "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) > 5``"

msgid "``Distance(poly, geom) > 5``"
msgstr "``Distance(poly, geom) > 5``"

msgid "``distance_gte``"
msgstr "``distance_gte``"

msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry is greater than or equal to the given distance value."
msgstr ""
"ルックアップしたジオメトリからジオメトリフィールドまでの距離が、指定した距離"
"の値以上であるモデルを返します。"

msgid "``ST_Distance/ST_Distance_Sphere(poly, geom) >= 5``"
msgstr "``ST_Distance/ST_Distance_Sphere(poly, geom) >= 5``"

msgid "``ST_Distance(poly, geom) >= 5``"
msgstr "``ST_Distance(poly, geom) >= 5``"

msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) >= 5``"
msgstr "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) >= 5``"

msgid "``Distance(poly, geom) >= 5``"
msgstr "``Distance(poly, geom) >= 5``"

msgid "``distance_lt``"
msgstr "``distance_lt``"

msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry is less than the given distance value."
msgstr ""
"ルックアップしたジオメトリからジオメトリフィールドまでの距離が、指定した距離"
"の値よりも小さいモデルを返します。"

msgid "``ST_Distance/ST_Distance_Sphere(poly, geom) < 5``"
msgstr "``ST_Distance/ST_Distance_Sphere(poly, geom) < 5``"

msgid "``ST_Distance(poly, geom) < 5``"
msgstr "``ST_Distance(poly, geom) < 5``"

msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) < 5``"
msgstr "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) < 5``"

msgid "``Distance(poly, geom) < 5``"
msgstr "``Distance(poly, geom) < 5``"

msgid "``distance_lte``"
msgstr "``distance_lte``"

msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry is less than or equal to the given distance value."
msgstr ""
"ルックアップされたジオメトリからジオメトリフィールドまでの距離が、指定された"
"距離の値以下であるモデルを返します。"

msgid "``ST_Distance/ST_Distance_Sphere(poly, geom) <= 5``"
msgstr "``ST_Distance/ST_Distance_Sphere(poly, geom) <= 5``"

msgid "``ST_Distance(poly, geom) <= 5``"
msgstr "``ST_Distance(poly, geom) <= 5``"

msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) <= 5``"
msgstr "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) <= 5``"

msgid "``Distance(poly, geom) <= 5``"
msgstr "``Distance(poly, geom) <= 5``"

msgid "``dwithin``"
msgstr "``dwithin``"

msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry are within the given distance from one another. Note that you can "
"only provide :class:`~django.contrib.gis.measure.Distance` objects if the "
"targeted geometries are in a projected system. For geographic geometries, "
"you should use units of the geometry field (e.g. degrees for ``WGS84``) ."
msgstr ""
"ルックアップしたジオメトリからジオメトリフィールドまでの距離が、指定した距離"
"以内のモデルを返します。 :class:`~django.contrib.gis.measure.Distance` オブ"
"ジェクトを指定できるのは、対象となるジオメトリが投影システムの場合のみである"
"ことに注意してください。地理ジオメトリの場合は、ジオメトリフィールドの単位を"
"使用する必要があります (例えば ``WGS84`` の場合は度)。"

msgid "``ST_DWithin(poly, geom, 5)``"
msgstr "``ST_DWithin(poly, geom, 5)``"

msgid "``SDO_WITHIN_DISTANCE(poly, geom, 5)``"
msgstr "``SDO_WITHIN_DISTANCE(poly, geom, 5)``"

msgid "``PtDistWithin(poly, geom, 5)``"
msgstr "``PtDistWithin(poly, geom, 5)``"

msgid ""
"Django provides some GIS-specific aggregate functions. For details on how to "
"use these aggregate functions, see :doc:`the topic guide on aggregation </"
"topics/db/aggregation>`."
msgstr ""
"Django はいくつかの GIS 固有の集計関数を提供しています。これらの集計関数の使"
"い方の詳細については、 :doc:`集計に関するトピックガイド </topics/db/"
"aggregation>` を参照してください。"

msgid "``tolerance``"
msgstr "``tolerance``"

msgid ""
"This keyword is for Oracle only.  It is for the tolerance value used by the "
"``SDOAGGRTYPE`` procedure; the  `Oracle documentation`__ has more details."
msgstr ""
"このキーワードはOracle専用です。``SDOAGGRTYPE`` プロシージャで使用される許容"
"値のためのものです。詳細は `Oracle documentation`__ を参照してください。"

msgid "``Collect``"
msgstr "``Collect``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Collect.html>`__, "
"SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Collect.html>`__, "
"SpatiaLite"

msgid ""
"Returns a ``GEOMETRYCOLLECTION`` or a ``MULTI`` geometry object from the "
"geometry column. This is analogous to a simplified version of the :class:"
"`Union` aggregate, except it can be several orders of magnitude faster than "
"performing a union because it rolls up geometries into a collection or multi "
"object, not caring about dissolving boundaries."
msgstr ""
"ジオメトリ列から ``GEOMETRYCOLLECTION`` または ``MULTI`` ジオメトリオブジェク"
"トを返します。これは :class:`Union` 集計の簡略版に似ていますが、ジオメトリを"
"コレクションまたはマルチオブジェクトにまとめ、境界の解消を気にしないため、ユ"
"ニオンを実行するよりも数桁高速です。"

msgid "Support for using the ``filter`` argument was added."
msgstr "``filter`` 引数のサポートが追加されました。"

msgid "``Extent``"
msgstr "``Extent``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Extent.html>`__, "
"Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Extent.html>`__, "
"Oracle, SpatiaLite"

msgid ""
"Returns the extent of all ``geo_field`` in the ``QuerySet`` as a 4-tuple, "
"comprising the lower left coordinate and the upper right coordinate."
msgstr ""
"``QuerySet`` 内のすべての ``geo_field`` の範囲を表す、左下の座標と右上の座標"
"からなる4値タプルを返します。"

msgid "``Extent3D``"
msgstr "``Extent3D``"

msgid "*Availability*: `PostGIS <https://postgis.net/docs/ST_3DExtent.html>`__"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_3DExtent.html>`__"

msgid ""
"Returns the 3D extent of all ``geo_field`` in the ``QuerySet`` as a 6-tuple, "
"comprising the lower left coordinate and upper right coordinate (each with "
"x, y, and z coordinates)."
msgstr ""
"``QuerySet`` 内のすべての ``geo_field`` の 3D 範囲を、左下の座標と右上の座標 "
"(それぞれ x、y、z 座標を持つ) からなる 6 要素のタプルとして返します。"

msgid "``MakeLine``"
msgstr "``MakeLine``"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_MakeLine.html>`__, "
"SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_MakeLine.html>`__, "
"SpatiaLite"

msgid ""
"Returns a ``LineString`` constructed from the point field geometries in the "
"``QuerySet``. Currently, ordering the queryset has no effect."
msgstr ""
"``QuerySet`` 内のポイントフィールドジオメトリから構築された ``LineString`` を"
"返します。現在、クエリセットの順序は意味がありません。"

msgid ""
"*Availability*: `PostGIS <https://postgis.net/docs/ST_Union.html>`__, "
"Oracle, SpatiaLite"
msgstr ""
"*利用可能なDB*: `PostGIS <https://postgis.net/docs/ST_Union.html>`__, "
"Oracle, SpatiaLite"

msgid ""
"This method returns a :class:`~django.contrib.gis.geos.GEOSGeometry` object "
"comprising the union of every geometry in the queryset. Please note that use "
"of ``Union`` is processor intensive and may take a significant amount of "
"time on large querysets."
msgstr ""
"このメソッドは、クエリセット内のすべてのジオメトリの結合を含む :class:"
"`~django.contrib.gis.geos.GEOSGeometry` オブジェクトを返します。大きなクエリ"
"セットでは、``Union`` を使用すると処理が集中し、かなりの時間がかかる可能性が"
"あることに注意してください。"

msgid ""
"If the computation time for using this method is too expensive, consider "
"using :class:`Collect` instead."
msgstr ""
"もしこの方法を使った計算に時間がかかりすぎる場合は、代わりに :class:"
"`Collect` を使用することを検討してください。"

msgid ""
"*See* `OpenGIS Simple Feature Specification For SQL <https://portal.ogc.org/"
"files/?artifact_id=829>`_, at Ch. 2.1.13.2, p. 2-13 (The Dimensionally "
"Extended Nine-Intersection Model)."
msgstr ""
"*参考* `OpenGIS Simple Feature Specification For SQL <https://portal.ogc.org/"
"files/?artifact_id=829>`_, at Ch. 2.1.13.2, p. 2-13 (The Dimensionally "
"Extended Nine-Intersection Model)."

msgid ""
"*See* `SDO_RELATE documentation <https://docs.oracle.com/en/ database/oracle/"
"oracle-database/18/spatl/spatial-operators-reference.html# GUID-97C17C18-"
"F05E-49B4-BE11-E89B972E2A02>`_, from the Oracle Spatial and Graph "
"Developer's Guide."
msgstr ""
"*参考* Oracle Spatial and Graph Developer's Guide の `SDO_RELATE "
"documentation <https://docs.oracle.com/en/ database/oracle/oracle-"
"database/18/spatl/spatial-operators-reference.html# GUID-97C17C18-F05E-49B4-"
"BE11-E89B972E2A02>`_ 。"

msgid ""
"For an explanation of this routine, read `Quirks of the \"Contains\" Spatial "
"Predicate <https://lin-ear-th-inking.blogspot.com/2007/06/subtleties-of-ogc-"
"covers-spatial.html>`_ by Martin Davis (a PostGIS developer)."
msgstr ""
"この処理の説明については、PostGIS 開発者の Martin Davis による `Quirks of "
"the \"Contains\" Spatial Predicate <https://lin-ear-th-inking.blogspot."
"com/2007/06/subtleties-of-ogc-covers-spatial.html>`_ を参照してください。"

msgid "GEOS API"
msgstr "GEOS API"

msgid "Background"
msgstr "背景"

msgid "What is GEOS?"
msgstr "GEOS とは？"

msgid ""
"`GEOS`__ stands for **Geometry Engine - Open Source**, and is a C++ library, "
"ported from the  `Java Topology Suite`__.  GEOS implements the OpenGIS "
"`Simple Features for SQL`__ spatial predicate functions and spatial "
"operators. GEOS, now an OSGeo project, was initially developed and "
"maintained by `Refractions Research`__ of Victoria, Canada."
msgstr ""
"`GEOS`__ は **Geometry Engine - Open Source** の略であり、C++ライブラリであ"
"り、 `Java Topology Suite`__ から移植されました。GEOS は OpenGIS の `Simple "
"Features for SQL`__ 空間記述関数や空間演算子を実装しています。GEOS は現在、"
"OSGeo プロジェクトとなっており、もともとはカナダ・ビクトリアの `Refractions "
"Research`__ によって開発・維持されていました。"

msgid "Features"
msgstr "特徴"

msgid ""
"GeoDjango implements a high-level Python wrapper for the GEOS library, its "
"features include:"
msgstr ""
"GeoDjango は GEOS ライブラリの高レベルな Python ラッパーを実装しており、その"
"機能には次のものがあります:"

msgid ""
"A BSD-licensed interface to the GEOS geometry routines, implemented purely "
"in Python using ``ctypes``."
msgstr ""
"``ctypes`` を使用して純粋に Python で実装された GEOS ジオメトリルーチンへの "
"BSD ライセンスのインターフェイス。"

msgid ""
"Loosely-coupled to GeoDjango.  For example, :class:`GEOSGeometry` objects "
"may be used outside of a Django project/application.  In other words, no "
"need to have :envvar:`DJANGO_SETTINGS_MODULE` set or use a database, etc."
msgstr ""
"GeoDjango とは疎結合です。たとえば、:class:`GEOSGeometry` オブジェクトは "
"Django プロジェクト/アプリケーションの外でも使用可能です。つまり、:envvar:"
"`DJANGO_SETTINGS_MODULE` を設定したり、データベースを使用する必要はありませ"
"ん。"

msgid "Mutability: :class:`GEOSGeometry` objects may be modified."
msgstr ""
"**ミュータビリティ (Mutability):** :class:`GEOSGeometry` オブジェクトは変更可"
"能です。"

msgid ""
"Cross-platform and tested; compatible with Windows, Linux, Solaris, and "
"macOS platforms."
msgstr ""
"クロスプラットフォームでテスト済みであり、Windows、Linux、Solaris、macOSプ"
"ラットフォームと互換性があります。"

msgid "Tutorial"
msgstr "チュートリアル"

msgid ""
"This section contains a brief introduction and tutorial to using :class:"
"`GEOSGeometry` objects."
msgstr ""
"このセクションには、 :class:`GEOSGeometry` オブジェクトの簡単な紹介とチュート"
"リアルが含まれています。"

msgid "Creating a Geometry"
msgstr "ジオメトリを作成する"

msgid ""
":class:`GEOSGeometry` objects may be created in a few ways.  The first is to "
"simply instantiate the object on some spatial input -- the following are "
"examples of creating the same geometry from WKT, HEX, WKB, and GeoJSON:"
msgstr ""
":class:`GEOSGeometry` オブジェクトはいくつかの方法で作成できます。最初の方法"
"は、単純に空間入力のオブジェクトをインスタンス化することです。以下は、同じジ"
"オメトリを WKT、HEX、WKB、GeoJSON から作成する例です:"

msgid ""
"Another option is to use the constructor for the specific geometry type that "
"you wish to create.  For example, a :class:`Point` object may be created by "
"passing in the X and Y coordinates into its constructor:"
msgstr ""
"もう一つの方法は、作成したい特定のジオメトリタイプのコンストラクタを使用する"
"ことです。たとえば、:class:`Point` オブジェクトは、そのコンストラクタに X 座"
"標と Y 座標を渡すことで作成できます:"

msgid "All these constructors take the keyword argument ``srid``. For example:"
msgstr ""
"これらのコンストラクタはすべて、キーワード引数 ``srid`` を受け取ります。例え"
"ば:"

msgid ""
"Finally, there is the :func:`fromfile` factory method which returns a :class:"
"`GEOSGeometry` object from a file:"
msgstr ""
"最後に、ファイルから :class:`GEOSGeometry` オブジェクトを返す :func:"
"`fromfile` ファクトリーメソッドがあります:"

msgid "My logs are filled with GEOS-related errors"
msgstr "ログが GEOS 関連のエラーで一杯です"

msgid ""
"You find many ``TypeError`` or ``AttributeError`` exceptions filling your "
"web server's log files. This generally means that you are creating GEOS "
"objects at the top level of some of your Python modules. Then, due to a race "
"condition in the garbage collector, your module is garbage collected before "
"the GEOS object. To prevent this, create :class:`GEOSGeometry` objects "
"inside the local scope of your functions/methods."
msgstr ""
"Webサーバーのログファイルに、多くの ``TypeError`` や ``AttributeError`` 例外"
"が記録されます。これは通常、Pythonモジュールのトップレベルで GEOS オブジェク"
"トを作成していることを意味します。そして、ガベージコレクタの競合状態のため"
"に、あなたのモジュールは GEOS オブジェクトよりも先にガベージコレクションされ"
"ます。これを防ぐには、関数/メソッドのローカルスコープ内に :class:"
"`GEOSGeometry` オブジェクトを作成します。"

msgid "Geometries are Pythonic"
msgstr "ジオメトリは Pythonic です"

msgid ""
":class:`GEOSGeometry` objects are 'Pythonic', in other words components may "
"be accessed, modified, and iterated over using standard Python conventions. "
"For example, you can iterate over the coordinates in a :class:`Point`:"
msgstr ""
":class:`GEOSGeometry` オブジェクトは 'Pythonic' (Pythonらしい) であり、要素に"
"は標準的な Python 形式を使ってアクセスしたり変更したり、イテレートしたりでき"
"ます。例えば、:class:`Point` の座標をイテレートできます:"

msgid ""
"With any geometry object, the :attr:`GEOSGeometry.coords` property may be "
"used to get the geometry coordinates as a Python tuple:"
msgstr ""
"ジオメトリオブジェクトの :attr:`GEOSGeometry.coords` プロパティを使用すると、"
"ジオメトリ座標を Python のタプルで取得できます:"

msgid ""
"You can get/set geometry components using standard Python indexing "
"techniques.  However, what is returned depends on the geometry type of the "
"object.  For example, indexing on a :class:`LineString` returns a coordinate "
"tuple:"
msgstr ""
"標準の Python インデックス形式を使用して、ジオメトリオブジェクトを取得または"
"設定できます。ただし、返されるものはオブジェクトのジオメトリタイプに依存しま"
"す。例えば、:class:`LineString` に対してインデックスを使用すると、座標の "
"Python タプルが返されます:"

msgid ""
"Whereas indexing on a :class:`Polygon` will return the ring (a :class:"
"`LinearRing` object) corresponding to the index:"
msgstr ""
":class:`Polygon` 上のインデックス指定は、そのインデックスに対応するリング (:"
"class:`LinearRing` オブジェクト) を返します:"

msgid ""
"In addition, coordinates/components of the geometry may added or modified, "
"just like a Python list:"
msgstr ""
"さらに、ジオメトリの座標や要素はPythonのリストのように追加や変更が可能です:"

msgid "Geometries support set-like operators:"
msgstr "ジオメトリーは set のような演算子をサポートします:"

msgid "Equality operator doesn't check spatial equality"
msgstr "等値演算子は空間的な等価性をチェックしません"

msgid ""
"The :class:`~GEOSGeometry` equality operator uses :meth:`~GEOSGeometry."
"equals_exact`, not :meth:`~GEOSGeometry.equals`, i.e. it requires the "
"compared geometries to have the same coordinates in the same positions with "
"the same SRIDs:"
msgstr ""
":class:`~GEOSGeometry` の等値演算子は、:meth:`~GEOSGeometry.equals_exact` を"
"使用します。:meth:`~GEOSGeometry.equals` ではありません。つまり、比較されるジ"
"オメトリは、同じ座標、同じ位置、同じSRID を持つ必要があります。"

msgid "Geometry Objects"
msgstr "ジオメトリ・オブジェクト"

msgid "``GEOSGeometry``"
msgstr "``GEOSGeometry``"

msgid "Geometry input value (string or :class:`memoryview`)"
msgstr "ジオメトリ入力値 (文字列または :class:`memoryview`)"

msgid "spatial reference identifier"
msgstr "空間参照識別子"

msgid ""
"This is the base class for all GEOS geometry objects.  It initializes on the "
"given ``geo_input`` argument, and then assumes the proper geometry subclass "
"(e.g., ``GEOSGeometry('POINT(1 1)')`` will create a :class:`Point` object)."
msgstr ""
"これはすべてのGEOSジオメトリオブジェクトの基底クラスです。``geo_input`` 引数"
"で初期化され、適切なジオメトリサブクラスを想定します (たとえば、 "
"``GEOSGeometry('POINT(1 1)')`` は :class:`Point` オブジェクトを作成します)。"

msgid ""
"The ``srid`` parameter, if given, is set as the SRID of the created geometry "
"if ``geo_input`` doesn't have an SRID. If different SRIDs are provided "
"through the ``geo_input`` and ``srid`` parameters, ``ValueError`` is raised:"
msgstr ""
"パラメータ ``srid`` が与えられた場合、 ``geo_input`` が SRID を持っていない場"
"合は、作成されたジオメトリの SRID が設定されます。パラメータ ``geo_input`` "
"と ``srid`` で異なる SRID が指定された場合、 ``ValueError`` が発生します:"

msgid ""
"The following input formats, along with their corresponding Python types, "
"are accepted:"
msgstr "以下の入力形式とそれに対応するPythonの型を受け付けます:"

msgid "Format"
msgstr "フォーマット"

msgid "Input Type"
msgstr "入力の型"

msgid "WKT / EWKT"
msgstr "WKT / EWKT"

msgid "``str``"
msgstr "``str``"

msgid "HEX / HEXEWKB"
msgstr "HEX / HEXEWKB"

msgid "WKB / EWKB"
msgstr "WKB / EWKB"

msgid "``memoryview``"
msgstr "``memoryview``"

msgid ":rfc:`GeoJSON <7946>`"
msgstr ":rfc:`GeoJSON <7946>`"

msgid ""
"For the GeoJSON format, the SRID is set based on the ``crs`` member. If "
"``crs`` isn't provided, the SRID defaults to 4326."
msgstr ""
"GeoJSON形式では、SRIDは ``crs`` メンバーに基づいて設定されます。もし ``crs`` "
"が指定されていない場合、SRIDはデフォルトで4326になります。"

msgid "Constructs a :class:`GEOSGeometry` from the given GML string."
msgstr "与えられたGML文字列から :class:`GEOSGeometry` を構築します。"

msgid "Properties"
msgstr "プロパティ"

msgid "Returns the coordinates of the geometry as a tuple."
msgstr "ジオメトリの座標をタプルで返します。"

msgid "Returns the dimension of the geometry:"
msgstr "ジオメトリの次元を返します:"

msgid "``0`` for :class:`Point`\\s and :class:`MultiPoint`\\s"
msgstr ":class:`Point` および :class:`MultiPoint` に対しては ``0``"

msgid "``1`` for :class:`LineString`\\s and :class:`MultiLineString`\\s"
msgstr ":class:`LineString` および :class:`MultiLineString` に対しては ``1``"

msgid "``2`` for :class:`Polygon`\\s and :class:`MultiPolygon`\\s"
msgstr ":class:`Polygon` および :class:`MultiPolygon` に対しては ``2`` です。"

msgid "``-1`` for empty :class:`GeometryCollection`\\s"
msgstr ":class:`GeometryCollection` が空の場合は ``-1`` を返します。"

msgid ""
"the maximum dimension of its elements for non-empty :class:"
"`GeometryCollection`\\s"
msgstr "空ではない :class:`GeometryCollection` の要素の最大次元"

msgid "Returns whether or not the set of points in the geometry is empty."
msgstr "ジオメトリ内の点の集合が空であるかどうかを返します。"

msgid "Returns a string corresponding to the type of geometry.  For example:"
msgstr "ジオメトリの種類に対応する文字列を返します。例:"

msgid ""
"Returns the GEOS geometry type identification number.  The following table "
"shows the value for each geometry type:"
msgstr ""
"GEOS ジオメトリタイプ識別番号を返します。  次の表に、各ジオメトリタイプの値を"
"示します: "

msgid "Geometry"
msgstr "ジオメトリ"

msgid "ID"
msgstr "ID"

msgid ":class:`Point`"
msgstr ":class:`Point`"

msgid "0"
msgstr "0"

msgid ":class:`LineString`"
msgstr ":class:`LineString`"

msgid ":class:`LinearRing`"
msgstr ":class:`LinearRing`"

msgid ":class:`Polygon`"
msgstr ":class:`Polygon`"

msgid ":class:`MultiPoint`"
msgstr ":class:`MultiPoint`"

msgid ":class:`MultiLineString`"
msgstr ":class:`MultiLineString`"

msgid ":class:`MultiPolygon`"
msgstr ":class:`MultiPolygon`"

msgid ":class:`GeometryCollection`"
msgstr ":class:`GeometryCollection`"

msgid "Returns the number of coordinates in the geometry."
msgstr "ジオメトリ内の座標の数を返します。"

msgid ""
"Returns the number of geometries in this geometry.  In other words, will "
"return 1 on anything but geometry collections."
msgstr ""
"このジオメトリに含まれるジオメトリの数を返します。つまり、ジオメトリ・コレク"
"ション以外では 1 を返します。"

msgid "Returns a boolean indicating whether the geometry is three-dimensional."
msgstr "ジオメトリが3次元であるかどうかを示す真偽値を返します。"

msgid "Returns a boolean indicating whether the geometry is a ``LinearRing``."
msgstr "ジオメトリが ``LinearRing`` であるかどうかを示す真偽値を返します。"

msgid ""
"Returns a boolean indicating whether the geometry is 'simple'. A geometry is "
"simple if and only if it does not intersect itself (except at boundary "
"points).  For example, a :class:`LineString` object is not simple if it "
"intersects itself. Thus, :class:`LinearRing` and :class:`Polygon` objects "
"are always simple because they cannot intersect themselves, by definition."
msgstr ""
"与えられたジオメトリが \"simple\" であるかどうかを示す真偽値を返します。ジオ"
"メトリが \"simple\" であるのは、自分自身と交差しない場合に限ります (境界点で"
"の交差を除く) 。例えば、:class:`LineString` オブジェクトは、自分自身と交差す"
"ると \"simple\" ではありません。したがって、定義上自身と交差しないため、:"
"class:`LinearRing` や :class:`Polygon` オブジェクトは常に \"simple\" です。"

msgid "Returns a boolean indicating whether the geometry is valid."
msgstr "ジオメトリが有効かどうかを示すブール値を返します。"

msgid "Returns a string describing the reason why a geometry is invalid."
msgstr "ジオメトリが無効である理由を表す文字列を返します。"

msgid ""
"Property that may be used to retrieve or set the SRID associated with the "
"geometry.  For example:"
msgstr ""
"ジオメトリに関連付けられた SRID を取得または設定するために使用できるプロパ"
"ティ。例えば:"

msgid "Output Properties"
msgstr "出力プロパティ"

msgid ""
"The properties in this section export the :class:`GEOSGeometry` object into "
"a different.  This output may be in the form of a string, buffer, or even "
"another object."
msgstr ""
"このセクションのプロパティは、:class:`GEOSGeometry` オブジェクトを異なる()形"
"式にエクスポートします。この出力は文字列、バッファ、または別のオブジェクトの"
"形式で表されます。"

msgid ""
"Returns the \"extended\" Well-Known Text of the geometry.  This "
"representation is specific to PostGIS and is a superset of the OGC WKT "
"standard. [#fnogc]_ Essentially the SRID is prepended to the WKT "
"representation, for example ``SRID=4326;POINT(5 23)``."
msgstr ""
"ジオメトリの \"拡張\" Well-Known Text を返します。この表現は PostGIS に固有で"
"あり、OGC WKT 標準のスーパーセットです。 [#fnogc]_ SRID は本質的に WKT 表現の"
"前に付加されます。例えば ``SRID=4326;POINT(5 23)`` のようになります。"

msgid ""
"The output from this property does not include the 3dm, 3dz, and 4d "
"information that PostGIS supports in its EWKT representations."
msgstr ""
"このプロパティからの出力には、PostGISがそのEWKT表現でサポートする3dm、3dz、お"
"よび4d情報は含まれません。"

msgid ""
"Returns the WKB of this Geometry in hexadecimal form.  Please note that the "
"SRID value is not included in this representation because it is not a part "
"of the OGC specification (use the :attr:`GEOSGeometry.hexewkb` property "
"instead)."
msgstr ""
"このジオメトリの WKB を 16 進数で返します。  SRID値はOGC仕様の一部ではないた"
"め、この表現には含まれないことに注意してください (代わりに :attr:"
"`GEOSGeometry.hexewkb` プロパティを使用してください) 。"

msgid ""
"Returns the EWKB of this Geometry in hexadecimal form.  This is an extension "
"of the WKB specification that includes the SRID value that are a part of "
"this geometry."
msgstr ""
"このジオメトリのEWKBを16進形式で返します。これは、このジオメトリの一部である"
"SRID値を含むWKB仕様の拡張です。"

msgid ""
"Returns the GeoJSON representation of the geometry. Note that the result is "
"not a complete GeoJSON structure but only the ``geometry`` key content of a "
"GeoJSON structure. See also :doc:`/ref/contrib/gis/serializers`."
msgstr ""
"ジオメトリの GeoJSON 表現を返します。結果は完全な GeoJSON 構造ではなく、"
"GeoJSON 構造の ``geometry`` キーの内容のみです。 :doc:`/ref/contrib/gis/"
"serializers` も参照してください。"

msgid "Alias for :attr:`GEOSGeometry.json`."
msgstr ":attr:`GEOSGeometry.json` のエイリアス。"

msgid ""
"Returns a `KML`__ (Keyhole Markup Language) representation of the geometry.  "
"This should only be used for geometries with an SRID of 4326 (WGS84), but "
"this restriction is not enforced."
msgstr ""
"ジオメトリの `KML`__ (Keyhole Markup Language) 表現を返します。 これは、SRID "
"が 4326 (WGS84) のジオメトリにのみ使用すべきですが、この制限は強制されませ"
"ん。"

msgid ""
"Returns an :class:`~django.contrib.gis.gdal.OGRGeometry` object "
"corresponding to the GEOS geometry."
msgstr ""
"GEOS ジオメトリに対応する :class:`~django.contrib.gis.gdal.OGRGeometry` オブ"
"ジェクトを返します。"

msgid ""
"Returns the WKB (Well-Known Binary) representation of this Geometry as a "
"Python buffer.  SRID value is not included, use the :attr:`GEOSGeometry."
"ewkb` property instead."
msgstr ""
"このジオメトリのWKB (Well-Known Binary) 表現を Python バッファとして返しま"
"す。SRID 値は含まれません。代わりに、:attr:`~GEOSGeometry.ewkb` プロパティを"
"使用してください。"

msgid ""
"Return the EWKB representation of this Geometry as a Python buffer. This is "
"an extension of the WKB specification that includes any SRID value that are "
"a part of this geometry."
msgstr ""
"このジオメトリの EWKB 表現を Python バッファとして返します。これは、このジオ"
"メトリの一部であるすべての SRID 値を含む WKB 仕様の拡張です。"

msgid "Returns the Well-Known Text of the geometry (an OGC standard)."
msgstr "ジオメトリの Well-Known Text (OGC標準) を返します。"

msgid "Spatial Predicate Methods"
msgstr "空間述語メソッド (Spatial Predicate Method)"

msgid ""
"All of the following spatial predicate methods take another :class:"
"`GEOSGeometry` instance (``other``) as a parameter, and return a boolean."
msgstr ""
"以下の空間述語 (predicate) メソッドは、別の :class:`GEOSGeometry` インスタン"
"ス (``other``) をパラメータとして受け取り、真偽値を返します。"

msgid ""
"Returns ``True`` if :meth:`other.within(this) <GEOSGeometry.within>` returns "
"``True``."
msgstr ""
":meth:`other.within(this) <GEOSGeometry.within>` が ``True`` を返した場合に "
"``True`` を返します。"

msgid "Returns ``True`` if this geometry covers the specified geometry."
msgstr ""
"このジオメトリが指定したジオメトリをカバーしている場合は ``True`` を返しま"
"す。"

msgid "The ``covers`` predicate has the following equivalent definitions:"
msgstr "``covers`` predicate は以下の定義と等価です: "

msgid "Every point of the other geometry is a point of this geometry."
msgstr "もう一方のジオメトリのすべての点は、このジオメトリの点である。"

msgid ""
"The `DE-9IM`_ Intersection Matrix for the two geometries is ``T*****FF*``, "
"``*T****FF*``, ``***T**FF*``, or ``****T*FF*``."
msgstr ""
"2つのジオメトリの `DE-9IM`_ 交差行列は ``T*****FF*``, ``*T****FF*``, "
"``***T**FF*``, または ``****T*FF*`` である。"

msgid "If either geometry is empty, returns ``False``."
msgstr "どちらかのジオメトリが空の場合、``False`` を返します。"

msgid ""
"This predicate is similar to :meth:`GEOSGeometry.contains`, but is more "
"inclusive (i.e. returns ``True`` for more cases). In particular, unlike :"
"meth:`~GEOSGeometry.contains` it does not distinguish between points in the "
"boundary and in the interior of geometries. For most situations, "
"``covers()`` should be preferred to :meth:`~GEOSGeometry.contains`. As an "
"added benefit, ``covers()`` is more amenable to optimization and hence "
"should outperform :meth:`~GEOSGeometry.contains`."
msgstr ""
"この predicate は :meth:`GEOSGeometry.contains` に似ていますが、より包括的で"
"す (つまり、より多くの場合に ``True`` を返します) 。特に、 :meth:"
"`~GEOSGeometry.contains` とは異なり、ジオメトリの境界と内部の点を区別しませ"
"ん。ほとんどの場合、 :meth:`~GEOSGeometry.contains` よりも ``covers()`` を優"
"先すべきです。さらに、 ``covers()`` は最適化しやすいので、 :meth:"
"`~GEOSGeometry.contains` よりも優れています。"

msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two Geometries is "
"``T*T******`` (for a point and a curve,a point and an area or a line and an "
"area) ``0********`` (for two curves)."
msgstr ""
"2つのジオメトリの DE-9IM 交差行列が ``T*T*******`` (点と曲線、点と面積、線と"
"面積の場合) ``0********`` (2つの曲線の場合) である場合に ``True`` を返しま"
"す。"

msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two geometries is "
"``FF*FF****``."
msgstr ""
"2つのジオメトリのDE-9IM交差行列が ``FF*FF****`` である場合に ``True`` を返し"
"ます。"

msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two geometries is "
"``T*F**FFF*``."
msgstr ""
"2つのジオメトリの DE-9IM 交差行列が ``T*F**FFF*`` である場合に ``True`` を返"
"します。"

msgid ""
"Returns true if the two geometries are exactly equal, up to a specified "
"tolerance.  The ``tolerance`` value should be a floating point number "
"representing the error tolerance in the comparison, e.g., ``poly1."
"equals_exact(poly2, 0.001)`` will compare equality to within one thousandth "
"of a unit."
msgstr ""
"2つのジオメトリが指定した許容誤差まで正確に等しい場合に true を返します。"
"``tolerance`` 値は、比較における誤差の許容値を表す浮動小数点数である必要があ"
"ります。たとえば、 ``poly1.equals_exact(poly2, 0.001)`` は、1000分の1単位以内"
"で等しいかどうかを比較します。"

msgid ""
"Returns ``True`` if the two geometries are point-wise equivalent by checking "
"that the structure, ordering, and values of all vertices are identical in "
"all dimensions. ``NaN`` values are considered to be equal to other ``NaN`` "
"values. Requires GEOS 3.12."
msgstr ""
"すべての次元において、すべての頂点の構造、順序、および値が同じであることを"
"チェックすることにより、2つのジオメトリが点的に等価である場合に ``True`` を返"
"します。 ``NaN`` 値は他の ``NaN`` 値と等しいとみなされます。GEOS 3.12が必要で"
"す。"

msgid "Returns ``True`` if :meth:`GEOSGeometry.disjoint` is ``False``."
msgstr ""
":meth:`GEOSGeometry.disjoint` が ``False`` の場合に ``True`` を返します。"

msgid ""
"Returns true if the DE-9IM intersection matrix for the two geometries is "
"``T*T***T**`` (for two points or two surfaces) ``1*T***T**`` (for two "
"curves)."
msgstr ""
"2つのジオメトリの DE-9IM 交差行列が ``T*T***T**`` (2つの点または2つの曲面の場"
"合) ``1*T***T**`` (2つの曲線の場合) である場合に true を返します．"

msgid ""
"Returns ``True`` if the elements in the DE-9IM intersection matrix for this "
"geometry and the other matches the given ``pattern`` -- a string of nine "
"characters from the alphabet: {``T``, ``F``, ``*``, ``0``}."
msgstr ""
"このジオメトリと他のジオメトリの DE-9IM 交差行列の要素が、与えられた "
"``pattern`` -- アルファベットから 9 文字の文字列と一致する場合に ``True`` を"
"返します: {``T``, ``F``, ``*``, ``0``} の9文字の文字列。"

msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two geometries is "
"``FT*******``, ``F**T*****`` or ``F***T****``."
msgstr ""
"2つのジオメトリのDE-9IM交差行列が ``FT*******``, ``F**T*****`` または "
"``F***T****`` である場合に ``True`` を返します。"

msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two geometries is "
"``T*F**F***``."
msgstr ""
"2つのジオメトリの DE-9IM 交差行列が ``T*F**F***`` である場合に ``True`` を返"
"します。"

msgid "Topological Methods"
msgstr "トポロジー的 (Topological) メソッド"

msgid ""
"Returns a :class:`GEOSGeometry` that represents all points whose distance "
"from this geometry is less than or equal to the given ``width``. The "
"optional ``quadsegs`` keyword sets the number of segments used to "
"approximate a quarter circle (defaults is 8)."
msgstr ""
"このジオメトリからの距離が与えられた ``width`` 以下のすべての点を表す :class:"
"`GEOSGeometry` を返す。オプションの ``quadsegs`` キーワードは、1/4円の近似に"
"使用するセグメントの数を設定します (デフォルトは8) 。"

msgid "Same as :meth:`buffer`, but allows customizing the style of the buffer."
msgstr ""
":meth:`buffer` と同じですが、バッファのスタイルをカスタマイズできます。"

msgid ""
"``end_cap_style`` can be round (``1``), flat (``2``), or square (``3``)."
msgstr ""
"``end_cap_style`` には、round (``1``) 、flat (``2``) 、square (``3``) を指定"
"できます。"

msgid "``join_style`` can be round (``1``), mitre (``2``), or bevel (``3``)."
msgstr ""
"``join_style`` には round (``1``) 、mitre (``2``) 、bevel (``3``) のいずれか"
"を指定します。"

msgid "Mitre ratio limit (``mitre_limit``) only affects mitered join style."
msgstr ""
"Mitre レシオ制限 (``mitre_limit``) は、mitre 形式の結合スタイルにのみ影響しま"
"す。"

msgid ""
"Returns a :class:`GEOSGeometry` representing the points making up this "
"geometry that do not make up other."
msgstr ""
"このジオメトリを構成する点のうち、他の点を構成しない点を表す :class:"
"`GEOSGeometry` を返す。"

msgid ""
"Given a distance (float), returns the point (or closest point) within the "
"geometry (:class:`LineString` or :class:`MultiLineString`) at that distance. "
"The normalized version takes the distance as a float between 0 (origin) and "
"1 (endpoint)."
msgstr ""
"与えられた距離 (float) に対する、その距離上の点 (またはもっとも近い点) を返し"
"ます。この距離は、 :class:`LineString` または :class:`MultiLineString` のジオ"
"メトリであり、正規化されたバージョンでは、0 (始点) から 1 (終点) の値を取る "
"float 型として距離の値を取ります。"

msgid "Reverse of :meth:`GEOSGeometry.project`."
msgstr ":meth:`GEOSGeometry.project` の逆。"

msgid ""
"Returns a :class:`GEOSGeometry` representing the points shared by this "
"geometry and other."
msgstr ""
"このジオメトリと他のジオメトリが共有する点を表す :class:`GEOSGeometry` を返"
"す。"

msgid ""
"Returns the distance (float) from the origin of the geometry (:class:"
"`LineString` or :class:`MultiLineString`) to the point projected on the "
"geometry (that is to a point of the line the closest to the given point). "
"The normalized version returns the distance as a float between 0 (origin) "
"and 1 (endpoint)."
msgstr ""
"ジオメトリ (:class:`LineString` または :class:`MultiLineString`) の原点から、"
"ジオメトリに投影された点 (つまり、指定された点に最も近い線の点) までの距離 "
"(float) を返します。正規化されたバージョンは、0 (原点) と 1 (終点) の間の浮動"
"小数点数として距離を返します。"

msgid "Reverse of :meth:`GEOSGeometry.interpolate`."
msgstr ":meth:`GEOSGeometry.interpolate` の逆。"

msgid ""
"Returns the DE-9IM intersection matrix (a string) representing the "
"topological relationship between this geometry and the other."
msgstr ""
"このジオメトリと他のジオメトリのトポロジカルな関係を表す DE-9IM 交差行列 (文"
"字列) を返します。"

msgid ""
"Returns a new :class:`GEOSGeometry`, simplified to the specified tolerance "
"using the Douglas-Peucker algorithm. A higher tolerance value implies fewer "
"points in the output. If no tolerance is provided, it defaults to 0."
msgstr ""
"新しい :class:`GEOSGeometry` を返します。これは Douglas-Peucker アルゴリズム"
"を用いて、指定した許容誤差まで単純化されます。許容誤差の値が大きいほど、出力"
"される点は少なくなります。公差が指定されない場合、デフォルトは0です。"

msgid ""
"By default, this function does not preserve topology. For example, :class:"
"`Polygon` objects can be split, be collapsed into lines, or disappear. :"
"class:`Polygon` holes can be created or disappear, and lines may cross. By "
"specifying ``preserve_topology=True``, the result will have the same "
"dimension and number of components as the input; this is significantly "
"slower, however."
msgstr ""
"デフォルトでは、この関数はトポロジーを保持しません。例えば、 :class:"
"`Polygon` オブジェクトは分割されたり、線に折りたたまれたり、消えたりすること"
"があります。 :class:`Polygon` の穴ができたり消えたり、線が交差したりすること"
"があります。 ``preserve_topology=True`` を指定することで、結果は入力と同じ次"
"元と要素数になります。"

msgid ""
"Returns a :class:`GEOSGeometry` combining the points in this geometry not in "
"other, and the points in other not in this geometry."
msgstr ""
"このジオメトリに含まれる点のうち他のジオメトリに含まれない点と、他のジオメト"
"リに含まれる点のうちこのジオメトリに含まれない点を結合した :class:"
"`GEOSGeometry` を返す。"

msgid ""
"Returns a :class:`GEOSGeometry` representing all the points in this geometry "
"and the other."
msgstr ""
"このジオメトリともう一方のジオメトリのすべての点を表す :class:`GEOSGeometry` "
"を返す。"

msgid "Topological Properties"
msgstr "トポロジー的プロパティ"

msgid "Returns the boundary as a newly allocated Geometry object."
msgstr "新しく割り当てられた Geometry オブジェクトとして境界を返します。"

msgid ""
"Returns a :class:`Point` object representing the geometric center of the "
"geometry.  The point is not guaranteed to be on the interior of the geometry."
msgstr ""
"ジオメトリの幾何学的中心を表す :class:`Point` オブジェクトを返します。この点"
"はジオメトリの内側にあることは保証されません。"

msgid ""
"Returns the smallest :class:`Polygon` that contains all the points in the "
"geometry."
msgstr "ジオメトリ内のすべての点を含む最小の :class:`Polygon` を返す。"

msgid ""
"Returns a :class:`Polygon` that represents the bounding envelope of this "
"geometry. Note that it can also return a :class:`Point` if the input "
"geometry is a point."
msgstr ""
"このジオメトリの外接を表す :class:`Polygon` を返します。入力ジオメトリが点の"
"場合は :class:`Point` を返すこともあります。"

msgid ""
"Computes and returns a :class:`Point` guaranteed to be on the interior of "
"this geometry."
msgstr ""
"このジオメトリ内部に存在することが保証された :class:`Point` を計算し、返しま"
"す。"

msgid "Computes the union of all the elements of this geometry."
msgstr "このジオメトリのすべての要素の和集合を計算します。"

msgid "The result obeys the following contract:"
msgstr "結果は次の規約に従います:"

msgid ""
"Unioning a set of :class:`LineString`\\s has the effect of fully noding and "
"dissolving the linework."
msgstr ""
":class:`LineString` の集合を結合することは、ラインワークを完全にノード化し、"
"分解する効果がある。"

msgid ""
"Unioning a set of :class:`Polygon`\\s will always return a :class:`Polygon` "
"or :class:`MultiPolygon` geometry (unlike :meth:`GEOSGeometry.union`, which "
"may return geometries of lower dimension if a topology collapse occurs)."
msgstr ""
":class:`Polygon` のセットを結合すると常に :class:`Polygon` または :class:"
"`MultiPolygon` ジオメトリが返されます (:meth:`GEOSGeometry.union` は、トポロ"
"ジーの崩壊が発生した場合、次元が低いジオメトリが返される可能性がある点が異な"
"ります)。"

msgid "Other Properties & Methods"
msgstr "その他のプロパティとメソッド"

msgid "This property returns the area of the Geometry."
msgstr "このプロパティは、ジオメトリの面積を返します。"

msgid ""
"This property returns the extent of this geometry as a 4-tuple, consisting "
"of ``(xmin, ymin, xmax, ymax)``."
msgstr ""
"このプロパティは、このジオメトリの範囲を ``(xmin, ymin, xmax, ymax)`` からな"
"る4タプルで返します。"

msgid ""
"This method returns a :class:`GEOSGeometry` that is a clone of the original."
msgstr ""
"このメソッドは、元のジオメトリのクローンである :class:`GEOSGeometry` を返しま"
"す。"

msgid ""
"Returns the distance between the closest points on this geometry and the "
"given ``geom`` (another :class:`GEOSGeometry` object)."
msgstr ""
"このジオメトリと与えられた ``geom`` (別の :class:`GEOSGeometry` オブジェク"
"ト) との間の最も近い点の距離を返します。"

msgid ""
"GEOS distance calculations are  linear -- in other words, GEOS does not "
"perform a spherical calculation even if the SRID specifies a geographic "
"coordinate system."
msgstr ""
"GEOSの距離計算は線形です。言い換えると、GEOSはSRIDが地理座標系を指定していて"
"も球面計算を行いません。"

msgid ""
"Returns the length of this geometry (e.g., 0 for a :class:`Point`, the "
"length of a :class:`LineString`, or the circumference of a :class:`Polygon`)."
msgstr ""
"このジオメトリの長さを返します (例: :class:`Point` の場合は 0、:class:"
"`LineString` の長さ、または :class:`Polygon` の円周)。"

msgid ""
"Returns a GEOS ``PreparedGeometry`` for the contents of this geometry. "
"``PreparedGeometry`` objects are optimized for the contains, intersects, "
"covers, crosses, disjoint, overlaps, touches and within operations. Refer to "
"the :ref:`prepared-geometries` documentation for more information."
msgstr ""
"このジオメトリの内容の GEOS ``PreparedGeometry`` を返します。 "
"``PreparedGeometry`` オブジェクトは、contains、intersects、covers、crosss、"
"disjoint、overlaps、touches、および within の操作に最適化されています。詳細"
"は :ref:`prepared-geometries` のドキュメントを参照してください。"

msgid ""
"Returns a :class:`~django.contrib.gis.gdal.SpatialReference` object "
"corresponding to the SRID of the geometry or ``None``."
msgstr ""
"ジオメトリの SRID に対応する :class:`~django.contrib.gis.gdal."
"SpatialReference` オブジェクト、または ``None`` を返します。"

msgid ""
"Transforms the geometry according to the given coordinate transformation "
"parameter (``ct``), which may be an integer SRID, spatial reference WKT "
"string, a PROJ string, a :class:`~django.contrib.gis.gdal.SpatialReference` "
"object, or a :class:`~django.contrib.gis.gdal.CoordTransform` object. By "
"default, the geometry is transformed in-place and nothing is returned. "
"However if the ``clone`` keyword is set, then the geometry is not modified "
"and a transformed clone of the geometry is returned instead."
msgstr ""
"与えられた座標変換パラメータ (``ct``) に従ってジオメトリを変換します。座標変"
"換パラメータは、整数の SRID、空間参照の WKT 文字列、PROJ 文字列、 :class:"
"`~django.contrib.gis.gdal.SpatialReference` オブジェクト、 :class:`~django."
"contrib.gis.gdal.CoordTransform` オブジェクトのいずれかです。デフォルトでは、"
"ジオメトリはその場で変換され、何も返されません。しかし、 ``clone`` キーワード"
"が設定されている場合、ジオメトリは変更されず、変換されたジオメトリのクローン"
"が返されます。"

msgid ""
"Raises :class:`~django.contrib.gis.geos.GEOSException` if GDAL is not "
"available or if the geometry's SRID is ``None`` or less than 0. It doesn't "
"impose any constraints on the geometry's SRID if called with a :class:"
"`~django.contrib.gis.gdal.CoordTransform` object."
msgstr ""
"GDALが利用できないか、ジオメトリのSRIDが ``None`` または0未満の場合に :class:"
"`~django.contrib.gis.geos.GEOSException` を発生させます。 :class:`~django."
"contrib.gis.gdal.CoordTransform` オブジェクトを使用して呼び出される場合、ジオ"
"メトリのSRIDには制約を与えません。"

msgid ""
"Returns a valid :class:`GEOSGeometry` equivalent, trying not to lose any of "
"the input vertices. If the geometry is already valid, it is returned "
"untouched. This is similar to the :class:`~django.contrib.gis.db.models."
"functions.MakeValid` database function. Requires GEOS 3.8."
msgstr ""
"入力された頂点を失わず、有効な :class:`GEOSGeometry` に変換して返します。既に"
"有効なジオメトリの場合、そのまま返されます。これは :class:`~django.contrib."
"gis.db.models.functions.MakeValid` データベース関数に類似しています。GEOS 3.8"
"が必要です。"

msgid ""
"Converts this geometry to canonical form. If the ``clone`` keyword is set, "
"then the geometry is not modified and a normalized clone of the geometry is "
"returned instead:"
msgstr ""
"このジオメトリを正規形に変換します。 ``clone`` キーワードがセットされている場"
"合、ジオメトリは変更されず、代わりにジオメトリの正規化されたクローンが返され"
"ます:"

msgid "``Point``"
msgstr "``Point``"

msgid ""
"``Point`` objects are instantiated using arguments that represent the "
"component coordinates of the point or with a single sequence coordinates. "
"For example, the following are equivalent:"
msgstr ""
"``Point`` オブジェクトは、ポイントの座標を表す引数を使用してインスタンス化さ"
"れたり、1 つのシーケンス座標でインスタンス化されたりします。例えば、以下は同"
"等です:"

msgid ""
"Empty ``Point`` objects may be instantiated by passing no arguments or an "
"empty sequence. The following are equivalent:"
msgstr ""
"空の ``Point`` オブジェクトを引数なしまたは空のシーケンスを渡すことでインスタ"
"ンス化できます。以下は同等です: "

msgid "``LineString``"
msgstr "``LineString``"

msgid ""
"``LineString`` objects are instantiated using arguments that are either a "
"sequence of coordinates or :class:`Point` objects. For example, the "
"following are equivalent:"
msgstr ""
"``LineString`` オブジェクトは、座標のシーケンスまたは :class:`Point` オブジェ"
"クトを引数としてインスタンス化されます。例えば、以下は同等です:"

msgid ""
"In addition, ``LineString`` objects may also be created by passing in a "
"single sequence of coordinate or :class:`Point` objects:"
msgstr ""
"さらに、``LineString`` オブジェクトは、座標または :class:`Point` オブジェクト"
"のシーケンスを渡すことによっても作成できます:"

msgid ""
"Empty ``LineString`` objects may be instantiated by passing no arguments or "
"an empty sequence. The following are equivalent:"
msgstr ""
"空の ``LineString`` オブジェクトは、引数を渡さないか空のシーケンスを渡すこと"
"でインスタンス化できます。以下は同等です:"

msgid "Returns whether or not this ``LineString`` is closed."
msgstr "この ``LineString`` が閉じているかどうかを返します。"

msgid "``LinearRing``"
msgstr "``LinearRing``"

msgid ""
"``LinearRing`` objects are constructed in the exact same way as :class:"
"`LineString` objects, however the coordinates must be *closed*, in other "
"words, the first coordinates must be the same as the last coordinates. For "
"example:"
msgstr ""
"``LinearRing`` オブジェクトは、:class:`LineString` オブジェクトとまったく同じ"
"方法で構築されますが、座標は *閉じている* 必要があります。つまり、最初の座標"
"と最後の座標が同じである必要があります。例: "

msgid ""
"Notice that ``(0, 0)`` is the first and last coordinate -- if they were not "
"equal, an error would be raised."
msgstr ""
"``(0, 0)`` は最初で最後の座標です。もし等しくなければ、エラーが発生します。"

msgid "Returns whether this ``LinearRing`` is counterclockwise."
msgstr "この ``LinearRing`` が反時計回りかどうかを返します。"

msgid "``Polygon``"
msgstr "``Polygon``"

msgid ""
"``Polygon`` objects may be instantiated by passing in parameters that "
"represent the rings of the polygon.  The parameters must either be :class:"
"`LinearRing` instances, or a sequence that may be used to construct a :class:"
"`LinearRing`:"
msgstr ""
"``Polygon`` オブジェクトは、多角形のリングを表すパラメータを渡すことでインス"
"タンス化できます。パラメータは、 :class:`LinearRing` インスタンスであるか、 :"
"class:`LinearRing` を構築するために使用できるシーケンスである必要があります。"

msgid ""
"Returns a polygon object from the given bounding-box, a 4-tuple comprising "
"``(xmin, ymin, xmax, ymax)``."
msgstr ""
"与えられたバウンディングボックスからポリゴンオブジェクトを返します。ポリゴン"
"オブジェクトは ``(xmin, ymin, xmax, ymax)`` からなる4タプルで構成されます。"

msgid "Returns the number of interior rings in this geometry."
msgstr "このジオメトリの内部リングの数を返します。"

msgid "Comparing Polygons"
msgstr "ポリゴン（多角形）の比較"

msgid ""
"Note that it is possible to compare ``Polygon`` objects directly with ``<`` "
"or ``>``, but as the comparison is made through Polygon's :class:"
"`LineString`, it does not mean much (but is consistent and quick). You can "
"always force the comparison with the :attr:`~GEOSGeometry.area` property:"
msgstr ""
"ポリゴンのオブジェクトを直接 ``<`` や ``>`` と比較することも可能ですが、比較"
"はポリゴンの :class:`LineString` を通して行われるため、あまり意味がないことに"
"注意してください (しかし、一貫性があり、素早く比較できます) 。 :attr:"
"`~GEOSGeometry.area` プロパティで常に強制的に比較することもできます: "

msgid "Geometry Collections"
msgstr "ジオメトリのコレクション"

msgid "``MultiPoint``"
msgstr "``MultiPoint``"

msgid ""
"``MultiPoint`` objects may be instantiated by passing in :class:`Point` "
"objects as arguments, or a single sequence of :class:`Point` objects:"
msgstr ""
"``MultiPoint`` オブジェクトは :class:`Point` オブジェクトを引数として渡すか、"
"1つの :class:`Point` オブジェクトのシーケンスを渡すことでインスタンス化できま"
"す。"

msgid "``MultiLineString``"
msgstr "``MultiLineString``"

msgid ""
"``MultiLineString`` objects may be instantiated by passing in :class:"
"`LineString` objects as arguments, or a single sequence of :class:"
"`LineString` objects:"
msgstr ""
"``MultiLineString`` オブジェクトは、 :class:`LineString` オブジェクトを引数と"
"して渡すか、1つの :class:`LineString` オブジェクトのシーケンスを渡すことでイ"
"ンスタンス化が可能です。"

msgid ""
"Returns a :class:`LineString` representing the line merge of all the "
"components in this ``MultiLineString``."
msgstr ""
"この ``MultiLineString`` のすべてのコンポーネントを結合した線を表す :class:"
"`LineString` を返します。"

msgid "Returns ``True`` if and only if all elements are closed."
msgstr "すべての要素が閉じられている場合にのみ ``True`` を返します。"

msgid "``MultiPolygon``"
msgstr "``MultiPolygon``"

msgid ""
"``MultiPolygon`` objects may be instantiated by passing :class:`Polygon` "
"objects as arguments, or a single sequence of :class:`Polygon` objects:"
msgstr ""
"``MultiPolygon`` オブジェクトは、 :class:`Polygon` オブジェクトを引数として渡"
"すか、1つの :class:`Polygon` オブジェクトのシーケンスを渡すことでインスタンス"
"化できます。"

msgid "``GeometryCollection``"
msgstr "``GeometryCollection``"

msgid ""
"``GeometryCollection`` objects may be instantiated by passing in other :"
"class:`GEOSGeometry` as arguments, or a single sequence of :class:"
"`GEOSGeometry` objects:"
msgstr ""
"``GeometryCollection`` オブジェクトは、他の :class:`GEOSGeometry` オブジェク"
"トを引数として渡すか、または単一の :class:`GEOSGeometry` オブジェクトのシーケ"
"ンスを引数として渡すことでインスタンス化できます:"

msgid "Prepared Geometries"
msgstr "準備された (Prepared) ジオメトリ"

msgid ""
"In order to obtain a prepared geometry, access the :attr:`GEOSGeometry."
"prepared` property.  Once you have a ``PreparedGeometry`` instance its "
"spatial predicate methods, listed below, may be used with other "
"``GEOSGeometry`` objects.  An operation with a prepared geometry can be "
"orders of magnitude faster -- the more complex the geometry that is "
"prepared, the larger the speedup in the operation.  For more information, "
"please consult the `GEOS wiki page on prepared geometries <https://trac."
"osgeo.org/geos/wiki/PreparedGeometry>`_."
msgstr ""
"事前に準備された prepared ジオメトリを取得するには、 :attr:`GEOSGeometry."
"prepared` プロパティにアクセスします。 ``PreparedGeometry`` インスタンスを取"
"得したら、以下にリストされているその空間述語 (predicate) メソッドを他の "
"``GEOSGeometry`` オブジェクトで使用できます。prepared ジオメトリを使った操作"
"は、桁違いに高速になることがあります。prepared ジオメトリがより複雑な場合、操"
"作は大いに高速化されます。詳細については、 `GEOS wiki page on prepared "
"geometries <https://trac.osgeo.org/geos/wiki/PreparedGeometry>`_. を参照して"
"ください。"

msgid "``PreparedGeometry``"
msgstr "``PreparedGeometry``"

msgid ""
"All methods on ``PreparedGeometry`` take an ``other`` argument, which must "
"be a :class:`GEOSGeometry` instance."
msgstr ""
"``PreparedGeometry`` のすべてのメソッドは ``other`` 引数を取ります。この引数"
"は :class:`GEOSGeometry` インスタンスでなければなりません。"

msgid "Geometry Factories"
msgstr "ジオメトリ ファクトリ"

msgid "input file that contains spatial data"
msgstr "空間データを含む入力ファイル"

msgid "Return type"
msgstr "戻り値の型"

msgid "a :class:`GEOSGeometry` corresponding to the spatial data in the file"
msgstr "ファイル内の空間データに対応する :class:`GEOSGeometry`"

msgid "string that contains spatial data"
msgstr "空間データを含む文字列"

msgid "a :class:`GEOSGeometry` corresponding to the spatial data in the string"
msgstr "文字列内の空間データに対応する :class:`GEOSGeometry`"

msgid ""
"``fromstr(string, srid)`` is equivalent to :class:`GEOSGeometry(string, "
"srid) <GEOSGeometry>`."
msgstr ""
"``fromstr(string, srid)`` は、 :class:`GEOSGeometry(string, srid) "
"<GEOSGeometry>` と同等です。"

msgid "I/O Objects"
msgstr "I/O オブジェクト"

msgid "Reader Objects"
msgstr "Reader オブジェクト"

msgid ""
"The reader I/O classes return a :class:`GEOSGeometry` instance from the WKB "
"and/or WKT input given to their ``read(geom)`` method."
msgstr ""
"Reader I/Oクラスは、 ``read(geom)`` メソッドに渡されたWKBおよび/またはWKT入力"
"から :class:`GEOSGeometry` インスタンスを返します。"

msgid "Writer Objects"
msgstr "Writer オブジェクト"

msgid ""
"All writer objects have a ``write(geom)`` method that returns either the WKB "
"or WKT of the given geometry.  In addition, :class:`WKBWriter` objects also "
"have properties that may be used to change the byte order, and or include "
"the SRID value (in other words, EWKB)."
msgstr ""
"すべての Writer オブジェクトは ``write(geom)`` メソッドを持っており、与えられ"
"たジオメトリの WKB または WKT を返します。さらに、:class:`WKBWriter` オブジェ"
"クトは、バイトオーダーを変更したり、SRID 値 (言い換えれば、EWKB) を含めるため"
"に使用できるプロパティも持っています。"

msgid ""
"``WKBWriter`` provides the most control over its output.  By default it "
"returns OGC-compliant WKB when its ``write`` method is called.  However, it "
"has properties that allow for the creation of EWKB, a superset of the WKB "
"standard that includes additional information. See the :attr:`WKBWriter."
"outdim` documentation for more details about the ``dim`` argument."
msgstr ""
"``WKBWriter`` はその出力を最もコントロールできます。デフォルトでは、 "
"``write`` メソッドが呼ばれると OGC 準拠の WKB を返します。ただし、追加情報を"
"含むWKB標準のスーパーセットであるEWKBを作成できるプロパティも持っています。引"
"数 ``dim`` の詳細については :attr:`WKBWriter.outdim` のドキュメントを参照して"
"ください。"

msgid ""
"Returns the WKB of the given geometry as a Python ``buffer`` object. Example:"
msgstr ""
"与えられたジオメトリの WKB を Python の ``buffer`` オブジェクトとして返しま"
"す。例:"

msgid "Returns WKB of the geometry in hexadecimal.  Example:"
msgstr "ジオメトリのWKBを16進数で返します。例:"

msgid ""
"This property may be set to change the byte-order of the geometry "
"representation."
msgstr ""
"このプロパティを設定すると、ジオメトリ表現のバイトオーダーを変更できます。"

msgid "Byteorder Value"
msgstr "バイトオーダーの値"

msgid "Big Endian (e.g., compatible with RISC systems)"
msgstr "ビッグエンディアン (例: RISC システムと互換性あり)"

msgid "Little Endian (e.g., compatible with x86 systems)"
msgstr "リトルエンディアン (例: x86 システムと互換性あり)"

msgid ""
"This property may be set to change the output dimension of the geometry "
"representation.  In other words, if you have a 3D geometry then set to 3 so "
"that the Z value is included in the WKB."
msgstr ""
"このプロパティは、ジオメトリ表現の出力次元を変更するために設定できます。つま"
"り、3D ジオメトリの場合は 3 に設定し、Z 値が WKB に含まれるようにします。"

msgid "Outdim Value"
msgstr "Outdim 値"

msgid "The default, output 2D WKB."
msgstr "デフォルトで、2次元のWKBを出力します。"

msgid "Output 3D WKB."
msgstr "3D の WKB を出力します。"

msgid ""
"Set this property with a boolean to indicate whether the SRID of the "
"geometry should be included with the WKB representation.  Example:"
msgstr ""
"このプロパティに真偽値を設定して、ジオメトリのSRIDがWKB表現に含まれるかどうか"
"を示します。例: "

msgid ""
"This class allows outputting the WKT representation of a geometry. See the :"
"attr:`WKBWriter.outdim`, :attr:`trim`, and :attr:`precision` attributes for "
"details about the constructor arguments."
msgstr ""
"このクラスを使用すると、ジオメトリの WKT 表現を出力できます。コンストラクタの"
"引数の詳細については :attr:`WKBWriter.outdim`, :attr:`trim`, :attr:"
"`precision` 属性を参照してください。"

msgid "Returns the WKT of the given geometry. Example:"
msgstr "与えられたジオメトリのWKTを返します。例:"

msgid "See :attr:`WKBWriter.outdim`."
msgstr ":attr:`WKBWriter.outdim` を参照。"

msgid ""
"This property is used to enable or disable trimming of unnecessary decimals."
msgstr ""
"このプロパティは、不要な小数のトリミングを有効または無効にするために使用され"
"ます。"

msgid ""
"This property controls the rounding precision of coordinates; if set to "
"``None`` rounding is disabled."
msgstr ""
"このプロパティは座標の丸め精度をコントロールします。もし ``None`` に設定する"
"と丸めは無効になります。"

msgid "``GEOS_LIBRARY_PATH``"
msgstr "``GEOS_LIBRARY_PATH``"

msgid ""
"A string specifying the location of the GEOS C library.  Typically, this "
"setting is only used if the GEOS C library is in a non-standard location (e."
"g., ``/home/bob/lib/libgeos_c.so``)."
msgstr ""
"GEOS Cライブラリの場所を指定する文字列。通常、この設定は GEOS C ライブラリが"
"標準以外の場所にある場合にのみ使用されます (``/home/bob/lib/libgeos_c.so`` な"
"ど)。"

msgid ""
"The setting must be the *full* path to the **C** shared library; in other "
"words you want to use ``libgeos_c.so``, not ``libgeos.so``."
msgstr ""
"設定は **C** 共有ライブラリの *フル* パスである必要があります。つまり、 "
"``libgeos.so`` ではなく ``libgeos_c.so`` を使用することが望まれます。"

msgid "The base GEOS exception, indicates a GEOS-related error."
msgstr "ベースとなるGEOS例外。GEOS関連のエラーを示します。"

msgid "GeoDjango"
msgstr "GeoDjango"

msgid ""
"GeoDjango intends to be a world-class geographic web framework. Its goal is "
"to make it as easy as possible to build GIS web applications and harness the "
"power of spatially enabled data."
msgstr ""
"GeoDjango は世界トップクラスの地理ウェブフレームワークを目指します。"
"GeoDjango の目標は、GIS ウェブアプリケーションをできるだけ簡単に構築し、 空間"
"的に有効なデータの力を活用できるようにすることです。"

msgid "Installing Geospatial libraries"
msgstr "地理空間ライブラリのインストール"

msgid ""
"GeoDjango uses and/or provides interfaces for the following open source "
"geospatial libraries:"
msgstr ""
"GeoDjangoは、以下のオープンソースの地理空間ライブラリを使用し、またはそのイン"
"ターフェースを提供します:"

msgid "Program"
msgstr "プログラム"

msgid "Required"
msgstr "必須"

msgid "Supported Versions"
msgstr "サポートされるバージョン"

msgid ":doc:`GEOS <../geos>`"
msgstr ":doc:`GEOS <../geos>`"

msgid "Geometry Engine Open Source"
msgstr "Geometry Engine Open Source"

msgid "Yes"
msgstr "Yes"

msgid "3.12, 3.11, 3.10, 3.9, 3.8"
msgstr "3.12, 3.11, 3.10, 3.9, 3.8"

msgid "`PROJ`_"
msgstr "`PROJ`_"

msgid "Cartographic Projections library"
msgstr "Cartographic Projections library"

msgid "Yes (PostgreSQL and SQLite only)"
msgstr "Yes (PostgreSQL and SQLite のみ)"

msgid "9.x, 8.x, 7.x, 6.x, 5.x"
msgstr "9.x, 8.x, 7.x, 6.x, 5.x"

msgid ":doc:`GDAL <../gdal>`"
msgstr ":doc:`GDAL <../gdal>`"

msgid "Geospatial Data Abstraction Library"
msgstr "Geospatial Data Abstraction Library"

msgid "3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.4"
msgstr "3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.4"

msgid ":doc:`GeoIP <../geoip2>`"
msgstr ":doc:`GeoIP <../geoip2>`"

msgid "IP-based geolocation library"
msgstr "IPベースのジオロケーション ライブラリ"

msgid "No"
msgstr "No"

msgid "`PostGIS`__"
msgstr "`PostGIS`__"

msgid "Spatial extensions for PostgreSQL"
msgstr "PostgreSQL の空間拡張機能"

msgid "Yes (PostgreSQL only)"
msgstr "Yes (PostgreSQL のみ)"

msgid "3.4, 3.3, 3.2, 3.1, 3.0, 2.5"
msgstr "3.4, 3.3, 3.2, 3.1, 3.0, 2.5"

msgid "`SpatiaLite`__"
msgstr "`SpatiaLite`__"

msgid "Spatial extensions for SQLite"
msgstr "SQLite の空間拡張機能"

msgid "Yes (SQLite only)"
msgstr "Yes (SQLite のみ)"

msgid "5.1, 5.0, 4.3"
msgstr "5.1, 5.0, 4.3"

msgid ""
"Note that older or more recent versions of these libraries *may* also work "
"totally fine with GeoDjango. Your mileage may vary."
msgstr ""
"これらのライブラリの古いバージョンや新しいバージョンは GeoDjango でも全く問題"
"なく動くかもしれません。あなたの感覚によって異なるかもしれません。"

msgid ""
"The GeoDjango interfaces to GEOS, GDAL, and GeoIP may be used independently "
"of Django.  In other words, no database or settings file required -- import "
"them as normal from :mod:`django.contrib.gis`."
msgstr ""
"GEOS、GDAL、GeoIP への GeoDjango インタフェースは、Django とは無関係に使うこ"
"とができます。つまり、データベースや設定ファイルは必要ありません。 :mod:"
"`django.contrib.gis` から通常通りインポートしてください。"

msgid ""
"On Debian/Ubuntu, you are advised to install the following packages which "
"will install, directly or by dependency, the required geospatial libraries:"
msgstr ""
"Debian/Ubuntuでは、必要な地理空間ライブラリを直接または依存関係によってインス"
"トールする以下のパッケージをインストールすることをお勧めします:"

msgid ""
"Please also consult platform-specific instructions if you are on :ref:"
"`macos` or :ref:`windows`."
msgstr ""
"また、 :ref:`macos` や :ref:`windows` を使用している場合は、プラットフォーム"
"別の説明も参照してください。"

msgid "Building from source"
msgstr "ソースコードからビルドする"

msgid ""
"When installing from source on UNIX and GNU/Linux systems, please follow the "
"installation instructions carefully, and install the libraries in the given "
"order.  If using MySQL or Oracle as the spatial database, only GEOS is "
"required."
msgstr ""
"UNIX や GNU/Linux システムでソースからインストールする場合は、インストール手"
"順に注意して、指示された順番でライブラリをインストールしてください。MySQL や "
"Oracle を空間データベースとして使用する場合、GEOS のみが必要です。"

msgid ""
"On Linux platforms, it may be necessary to run the ``ldconfig`` command "
"after installing each library. For example:"
msgstr ""
"Linuxプラットフォームでは、各ライブラリをインストールした後に ``ldconfig`` コ"
"マンドを実行する必要があるかもしれません。例えば:"

msgid ""
"macOS users must install `Xcode`_ in order to compile software from source."
msgstr ""
"macOSユーザーは、ソフトウェアをソースからコンパイルするために `Xcode`_ をイン"
"ストールする必要があります。"

msgid "GEOS"
msgstr "GEOS"

msgid ""
"GEOS is a C++ library for performing geometric operations, and is the "
"default internal geometry representation used by GeoDjango (it's behind the "
"\"lazy\" geometries).  Specifically, the C API library is called (e.g., "
"``libgeos_c.so``) directly from Python using ctypes."
msgstr ""
"GEOS はジオメトリ操作を行うための C++ ライブラリで、GeoDjango が使うデフォル"
"トの内部ジオメトリ表現です (\"lazy\" ジオメトリの背後にあります) 。具体的に"
"は、 C API ライブラリは ctypes を使って Python から直接呼び出されます "
"(``libgeos_c.so`` など)。"

msgid ""
"First, download GEOS from the GEOS website and untar the source archive:"
msgstr ""
"まず、GEOSのウェブサイトからGEOSをダウンロードし、ソースアーカイブを解凍しま"
"す:"

msgid ""
"Then step into the GEOS directory, create a ``build`` folder, and step into "
"it:"
msgstr ""
"次に、GEOSディレクトリに移動し、 ``build`` フォルダを作成して、その中に移動し"
"てください:"

msgid "Then build and install the package:"
msgstr "次に、パッケージをビルドしてインストールします:"

msgid "Can't find GEOS library"
msgstr "GEOSライブラリが見つかりません"

msgid "When GeoDjango can't find GEOS, this error is raised:"
msgstr "GeoDjango が GEOS を見つけられない場合、次のエラーが発生します:"

msgid ""
"The most common solution is to properly configure your :ref:`libsettings` "
"*or* set :ref:`geoslibrarypath` in your settings."
msgstr ""
"最も一般的な解決策は、:ref:`libsettings` を適切に設定するか、 *または* 設定"
"で :ref:`geoslibrarypath` を設定することです。"

msgid ""
"If using a binary package of GEOS (e.g., on Ubuntu), you may need to :ref:"
"`binutils`."
msgstr ""
"GEOSのバイナリパッケージを使用する場合 (たとえばUbuntu上で) 、 :ref:"
"`binutils` が必要になる可能性があります。"

msgid ""
"If your GEOS library is in a non-standard location, or you don't want to "
"modify the system's library path then the :setting:`GEOS_LIBRARY_PATH` "
"setting may be added to your Django settings file with the full path to the "
"GEOS C library.  For example:"
msgstr ""
"もしGEOSライブラリが標準以外の場所にあるか、システムのライブラリパスを変更し"
"たくない場合は、Djangoの設定ファイルに :setting:`GEOS_LIBRARY_PATH` を追加で"
"きます。これにはGEOS Cライブラリへのフルパスを指定します。例えば、以下のよう"
"に設定できます:"

msgid ""
"See also :ref:`My logs are filled with GEOS-related errors <geos-exceptions-"
"in-logfile>`."
msgstr ""
"次も参照してください :ref:`ログがGEOS関連のエラーでいっぱいです <geos-"
"exceptions-in-logfile>` 。"

msgid "PROJ"
msgstr "PROJ"

msgid ""
"`PROJ`_ is a library for converting geospatial data to different coordinate "
"reference systems."
msgstr ""
"`PROJ`_ は、地理空間データを異なる座標参照系に変換するためのライブラリです。"

msgid "First, download the PROJ source code:"
msgstr "まず、PROJのソースコードをダウンロードします:"

msgid ""
"... and datum shifting files (download ``proj-datumgrid-X.Y.tar.gz`` for "
"PROJ < 7.x) [#]_:"
msgstr ""
"... と座標変換 (datum shifting) ファイル (PROJ < 7.x の場合は ``proj-"
"datumgrid-X.Y.tar.gz`` をダウンロード) [#]_: "

msgid ""
"Next, untar the source code archive, and extract the datum shifting files in "
"the ``data`` subdirectory (use ``nad`` subdirectory for PROJ < 6.x). This "
"must be done *prior* to configuration:"
msgstr ""
"次に、ソースコードのアーカイブを解凍し、 ``data`` サブディレクトリに座標変換"
"ファイルを展開します (PROJ < 6.xの場合は ``nad`` サブディレクトリを使用してく"
"ださい)。これは設定の *前* に行う必要があります:"

msgid ""
"For PROJ 9.x and greater, releases only support builds using ``CMake`` (see "
"`PROJ RFC-7`_)."
msgstr ""
"PROJ 9.x以降のリリースでは、``CMake`` を使用したビルドのみがサポートされます "
"(`PROJ RFC-7`_ 参照) 。"

msgid ""
"To build with ``CMake`` ensure your system meets the `build requirements`_. "
"Then create a ``build`` folder in the PROJ directory, and step into it:"
msgstr ""
"``CMake`` を使用してビルドするには、システムが `build requirements`_ を満たし"
"ていることを確認してください。その後、PROJディレクトリ内に ``build`` フォルダ"
"を作成し、そのフォルダに移動します。"

msgid "Finally, configure, make and install PROJ:"
msgstr "最後に、PROJの設定、作成、およびインストールを行います:"

msgid "GDAL"
msgstr "GDAL"

msgid ""
"`GDAL`__ is an excellent open source geospatial library that has support for "
"reading most vector and raster spatial data formats.  Currently, GeoDjango "
"only supports :doc:`GDAL's vector data <../gdal>` capabilities [#]_. :ref:"
"`geosbuild` and :ref:`proj4` should be installed prior to building GDAL."
msgstr ""
"`GDAL`__ は優れたオープンソースの地理空間ライブラリで、ほとんどのベクタやラス"
"タの空間データフォーマットの読み込みをサポートしています。現在のところ、"
"GeoDjango は :doc:`GDAL のベクトルデータ <../gdal>` の機能のみをサポートして"
"います [#]_ 。 :ref:`geosbuild` と :ref:`proj4` は GDAL をビルドする前にイン"
"ストールする必要があります。"

msgid "First download the latest GDAL release version and untar the archive:"
msgstr ""
"まず、最新のGDALリリースバージョンをダウンロードし、アーカイブを解凍します:"

msgid ""
"For GDAL 3.6.x and greater, releases only support builds using ``CMake``. To "
"build with ``CMake`` create a ``build`` folder in the GDAL directory, and "
"step into it:"
msgstr ""
"GDAL 3.6.x 以降では、リリースは ``CMake`` を使用したビルドのみをサポートして"
"います。 ``CMake`` を使ってビルドするには、GDAL ディレクトリに ``build`` フォ"
"ルダを作成し、その中に移動してください:"

msgid "Finally, configure, make and install GDAL:"
msgstr "最後に、GDAL の設定、ビルド、インストールを行います:"

msgid ""
"If you have any problems, please see the troubleshooting section below for "
"suggestions and solutions."
msgstr ""
"問題が発生した場合は、以下のトラブルシューティングのセクションを参照してくだ"
"さい。"

msgid "Can't find GDAL library"
msgstr "GDAL ライブラリが見つかりません"

msgid ""
"When GeoDjango can't find the GDAL library, configure your :ref:"
"`libsettings` *or* set :ref:`gdallibrarypath` in your settings."
msgstr ""
"GeoDjango が GDAL ライブラリを見つけられない場合は、 :ref:`libsettings` を設"
"定するか、*もしくは* 設定で :ref:`gdallibrarypath` を設定してください。"

msgid ""
"If your GDAL library is in a non-standard location, or you don't want to "
"modify the system's library path then the :setting:`GDAL_LIBRARY_PATH` "
"setting may be added to your Django settings file with the full path to the "
"GDAL library.  For example:"
msgstr ""
"GDAL ライブラリが標準以外の場所にあったり、システムのライブラリパスを変更 し"
"たくない場合は、Django の設定ファイルに :setting:`GDAL_LIBRARY_PATH` 設定を追"
"加して、GDAL ライブラリへのフルパスを記述してください。例えば:"

msgid ""
"The datum shifting files are needed for converting data to and from certain "
"projections. For example, the PROJ string for the `Google projection (900913 "
"or 3857) <https://spatialreference.org/ref/epsg/3857/>`_ requires the "
"``null`` grid file only included in the extra datum shifting files. It is "
"easier to install the shifting files now, then to have debug a problem "
"caused by their absence later."
msgstr ""
"特定の投影法へデータの変換を行う、または特定の投影法から変換を行うためには、"
"データムシフトファイルが必要です。たとえば、`Google projection (900913 また"
"は 3857) <https://spatialreference.org/ref/epsg/3857/>`_ の PROJ 文字列は、追"
"加のデータムシフトファイルにのみ含まれる ``null`` グリッドファイルを必要とし"
"ます。シフトファイルを今インストールする方が、後でそれが無いことによって起き"
"る問題をデバッグするより簡単です。"

msgid ""
"Specifically, GeoDjango provides support for the `OGR <https://gdal.org/user/"
"vector_data_model.html>`_ library, a component of GDAL."
msgstr ""
"具体的には、GeoDjango は GDAL のコンポーネントである `OGR <https://gdal.org/"
"user/vector_data_model.html>`_ ライブラリをサポートしています。"

msgid "GeoDjango Installation"
msgstr "GeoDjango のインストール"

msgid "In general, GeoDjango installation requires:"
msgstr "通常、GeoDjango のインストールには次のものが必要です:"

msgid ":ref:`Python and Django <django>`"
msgstr ":ref:`Python と Django <django>`"

msgid ":ref:`spatial_database`"
msgstr ":ref:`spatial_database`"

msgid ":doc:`geolibs`"
msgstr ":doc:`geolibs`"

msgid ""
"Details for each of the requirements and installation instructions are "
"provided in the sections below. In addition, platform-specific instructions "
"are available for:"
msgstr ""
"各要件の詳細とインストール手順については、以下のセクションを参照してくださ"
"い。また、プラットフォーム別の手順もあります: "

msgid ":ref:`macos`"
msgstr ":ref:`macos`"

msgid ":ref:`windows`"
msgstr ":ref:`windows`"

msgid "Use the Source"
msgstr "ソースを使う"

msgid ""
"Because GeoDjango takes advantage of the latest in the open source "
"geospatial software technology, recent versions of the libraries are "
"necessary. If binary packages aren't available for your platform, "
"installation from source may be required. When compiling the libraries from "
"source, please follow the directions closely, especially if you're a "
"beginner."
msgstr ""
"GeoDjango はオープンソースの地理空間ソフトウェア技術を最新のものを活用してい"
"るため、最新バージョンのライブラリが必要です。プラットフォームにバイナリパッ"
"ケージが提供されていない場合は、ソースからのインストールが必要になるかもしれ"
"ません。ソースからライブラリをコンパイルする際には、特に初心者の場合は指示に"
"注意してください。"

msgid "Requirements"
msgstr "必要条件"

msgid "Python and Django"
msgstr "Python と Django"

msgid ""
"Because GeoDjango is included with Django, please refer to Django's :ref:"
"`installation instructions <installing-official-release>` for details on how "
"to install."
msgstr ""
"GeoDjango は Django に同梱されていますので、インストール方法の詳細は Django "
"の :ref:`インストール手順 <installing-official-release>` を参照してください。"

msgid "Spatial database"
msgstr "空間データベース (Spatial database)"

msgid ""
"PostgreSQL (with PostGIS), MySQL, Oracle, and SQLite (with SpatiaLite) are "
"the spatial databases currently supported."
msgstr ""
"現在サポートされている空間データベースは、PostgreSQL (with PostGIS)、MySQL、"
"Oracle、SQLite (with SpatiaLite) です。"

msgid ""
"PostGIS is recommended, because it is the most mature and feature-rich open "
"source spatial database."
msgstr ""
"PostGISは、最も成熟した機能豊富なオープンソースの空間データベースであるため、"
"推奨されています。"

msgid ""
"The geospatial libraries required for a GeoDjango installation depends on "
"the spatial database used.  The following lists the library requirements, "
"supported versions, and any notes for each of the supported database "
"backends:"
msgstr ""
"GeoDjango のインストールに必要な地理空間ライブラリは、使用する空間データベー"
"スによって異なります。以下は、サポートされているデータベースバックエンドごと"
"に、必要なライブラリ、サポートされているバージョン、および注意事項 の一覧で"
"す: "

msgid "Library Requirements"
msgstr "ライブラリの要件"

msgid "Notes"
msgstr "備考"

msgid "PostgreSQL"
msgstr "PostgreSQL"

msgid "GEOS, GDAL, PROJ, PostGIS"
msgstr "GEOS, GDAL, PROJ, PostGIS"

msgid "12+"
msgstr "12+"

msgid "Requires PostGIS."
msgstr "PostGIS が必要です。"

msgid "GEOS, GDAL"
msgstr "GEOS, GDAL"

msgid "8.0.11+"
msgstr "8.0.11+"

msgid ":ref:`Limited functionality <mysql-spatial-limitations>`."
msgstr ":ref:`機能制限があります <mysql-spatial-limitations>` 。"

msgid "19+"
msgstr "19+"

msgid "XE not supported."
msgstr "XE not supported."

msgid "SQLite"
msgstr "SQLite"

msgid "GEOS, GDAL, PROJ, SpatiaLite"
msgstr "GEOS, GDAL, PROJ, SpatiaLite"

msgid "3.27.0+"
msgstr "3.27.0+"

msgid "Requires SpatiaLite 4.3+"
msgstr "Requires SpatiaLite 4.3+"

msgid ""
"See also `this comparison matrix`__ on the OSGeo Wiki for PostgreSQL/PostGIS/"
"GEOS/GDAL possible combinations."
msgstr ""
"PostgreSQL/PostGIS/GEOS/GDAL の可能な組み合わせについては、OSGeo Wikiの "
"`this comparison matrix`__ も参照してください。"

msgid "Geospatial libraries"
msgstr "地理空間ライブラリ (Geospatial library)"

msgid "Database installation"
msgstr "データベースのインストール"

msgid ":setting:`DATABASES` configuration"
msgstr ":setting:`DATABASES` の設定"

msgid ""
"Set the :setting:`ENGINE <DATABASE-ENGINE>` setting to one of the :ref:"
"`spatial backends <spatial-backends>`."
msgstr ""
":setting:`ENGINE <DATABASE-ENGINE>` 設定を、:ref:`空間 (spatial) バックエン"
"ド <spatial-backends>` の1つに設定してください。"

msgid "Add ``django.contrib.gis`` to :setting:`INSTALLED_APPS`"
msgstr "``django.contrib.gis`` を :setting:`INSTALLED_APPS` に追加します。"

msgid ""
"Like other Django contrib applications, you will *only* need to add :mod:"
"`django.contrib.gis` to :setting:`INSTALLED_APPS` in your settings. This is "
"so that the ``gis`` templates can be located -- if not done, then features "
"such as the geographic admin or KML sitemaps will not function properly."
msgstr ""
"他の Django contrib アプリケーションと同様に、設定の :setting:"
"`INSTALLED_APPS` に :mod:`django.contrib.gis` を追加するだけです。これは "
"``gis`` テンプレートを配置するためです。そうしないと、地理管理や KML サイト"
"マップのような機能が正しく動作しません。"

msgid ""
"If you can't find the solution to your problem here then participate in the "
"community!  You can:"
msgstr ""
"問題の解決策がここに見つからない場合は、コミュニティに参加してみてください！"
"以下のようなことができます:"

msgid "Ask your question on the `GeoDjango`__ forum."
msgstr "`GeoDjango`__ フォーラムで質問してください。"

msgid ""
"File a ticket on the `Django trac`__ if you think there's a bug.  Make sure "
"to provide a complete description of the problem, versions used, and specify "
"the component as \"GIS\"."
msgstr ""
"バグがあると思ったら `Django trac`__ にチケットを提出してください。  問題の完"
"全な説明、使用したバージョン、コンポーネントを \"GIS\" と指定してください。"

msgid "Library environment settings"
msgstr "ライブラリの環境設定"

msgid ""
"By far, the most common problem when installing GeoDjango is that the "
"external shared libraries (e.g., for GEOS and GDAL) cannot be located. [#]_ "
"Typically, the cause of this problem is that the operating system isn't "
"aware of the directory where the libraries built from source were installed."
msgstr ""
"GeoDjango をインストールする際に最もよくある問題は、外部の共有ライブラリ (例"
"えば GEOS や GDAL) が見つからないというものです [#]_ 。通常、この問題の原因"
"は、オペレーティングシステムがソースからビルドされたライブラリがインストール"
"されたディレクトリを認識していないことです。"

msgid ""
"In general, the library path may be set on a per-user basis by setting an "
"environment variable, or by configuring the library path for the entire "
"system."
msgstr ""
"通常、ライブラリのパスは、個々のユーザーごとに環境変数を設定するか、システム"
"全体のライブラリ パスを構成することで設定できます。"

msgid "``LD_LIBRARY_PATH`` environment variable"
msgstr "``LD_LIBRARY_PATH`` 環境変数"

msgid ""
"A user may set this environment variable to customize the library paths they "
"want to use.  The typical library directory for software built from source "
"is ``/usr/local/lib``.  Thus, ``/usr/local/lib`` needs to be included in the "
"``LD_LIBRARY_PATH`` variable.  For example, the user could place the "
"following in their bash profile:"
msgstr ""
"ユーザーは、使用するライブラリパスをカスタマイズするためにこの環境変数を設定"
"できます。ソースからビルドされたソフトウェアの典型的なライブラリディレクトリ"
"は ``/usr/local/lib`` です。したがって、 ``LD_LIBRARY_PATH`` 変数に ``/usr/"
"local/lib`` を含める必要があります。たとえば、ユーザーは次のような設定を "
"bash プロファイルに記述できます:"

msgid "Setting system library path"
msgstr "システムライブラリのパスを設定する"

msgid ""
"On GNU/Linux systems, there is typically a file in ``/etc/ld.so.conf``, "
"which may include additional paths from files in another directory, such as "
"``/etc/ld.so.conf.d``. As the root user, add the custom library path (like "
"``/usr/local/lib``) on a new line in ``ld.so.conf``.  This is *one* example "
"of how to do so:"
msgstr ""
"通常、GNU/Linuxシステムでは、 ``/etc/ld.so.conf`` にファイルがあり、別のディ"
"レクトリにあるファイルから追加のパスを含むことがあります。そのディレクトリと"
"は、例えば ``/etc/ld.so.conf.d`` です。root ユーザーとして、 ``ld.so.conf`` "
"の新しい行にカスタムライブラリパス (例: ``/usr/local/lib`` など) を追加してく"
"ださい。これはその *一つ* の例です:"

msgid ""
"For OpenSolaris users, the system library path may be modified using the "
"``crle`` utility.  Run ``crle`` with no options to see the current "
"configuration and use ``crle -l`` to set with the new library path.  Be "
"*very* careful when modifying the system library path:"
msgstr ""
"OpenSolaris ユーザーは、``crle`` ユーティリティを使ってシステムライブラリのパ"
"スを変更できます。オプションなしで ``crle`` を実行すると現在の設定が表示さ"
"れ、 ``crle -l`` を使用すると新しいライブラリパスが設定されます。システムライ"
"ブラリパスを変更する際には、 *非常に* 注意してください: "

msgid "Install ``binutils``"
msgstr "``binutils`` をインストールする"

msgid ""
"GeoDjango uses the ``find_library`` function (from the ``ctypes.util`` "
"Python module) to discover libraries.  The ``find_library`` routine uses a "
"program called ``objdump`` (part of the ``binutils`` package) to verify a "
"shared library on GNU/Linux systems.  Thus, if ``binutils`` is not installed "
"on your Linux system then Python's ctypes may not be able to find your "
"library even if your library path is set correctly and geospatial libraries "
"were built perfectly."
msgstr ""
"GeoDjango は ``find_library`` 関数 (``ctypes.util`` Python モジュールのもの) "
"を使ってライブラリを検出します。 ``find_library`` ルーチンは ``objdump`` とい"
"うプログラム (``binutils`` パッケージの一部) を使って、GNU/Linux システム上の"
"共有ライブラリを確認します。そのため、もし ``binutils`` が Linux システムにイ"
"ンストールされていない場合、ライブラリパスが正しく設定され、地理空間ライブラ"
"リが完璧にビルドされていたとしても、Python の ctypes はライブラリを見つけるこ"
"とができないかもしれません。"

msgid ""
"The ``binutils`` package may be installed on Debian and Ubuntu systems using "
"the following command:"
msgstr ""
"``binutils`` パッケージは、Debian および Ubuntu システムでは以下のコマンドを"
"使用してインストールできます:"

msgid "Similarly, on Red Hat and CentOS systems:"
msgstr "Red Hat および CentOS システムでも同様です:"

msgid "Platform-specific instructions"
msgstr "プラットフォーム固有の手順"

msgid "macOS"
msgstr "macOS"

msgid ""
"Because of the variety of packaging systems available for macOS, users have "
"several different options for installing GeoDjango. These options are:"
msgstr ""
"macOS では様々なパッケージングシステムが利用できるため、ユーザは GeoDjango を"
"インストールするのにいくつかの異なる選択肢があります。これらのオプションは以"
"下の通りです:"

msgid ":ref:`postgresapp` (easiest and recommended)"
msgstr ":ref:`postgresapp` (最も簡単、推奨)"

msgid ":ref:`homebrew`"
msgstr ":ref:`homebrew`"

msgid ":ref:`fink`"
msgstr ":ref:`fink`"

msgid ":ref:`macports`"
msgstr ":ref:`macports`"

msgid ":ref:`build_from_source`"
msgstr ":ref:`build_from_source`"

msgid ""
"This section also includes instructions for installing an upgraded version "
"of :ref:`macos_python` from packages provided by the Python Software "
"Foundation, however, this is not required."
msgstr ""
"このセクションには、Python Software Foundation が提供するパッケージから :ref:"
"`macos_python` のアップグレード版をインストールする手順も含まれていますが、こ"
"れは必須ではありません。"

msgid "Python"
msgstr "Python"

msgid ""
"Although macOS comes with Python installed, users can use `framework "
"installers`__ provided by the Python Software Foundation.  An advantage to "
"using the installer is that macOS's Python will remain \"pristine\" for "
"internal operating system use."
msgstr ""
"macOSにはPythonがインストールされていますが、Python Software Foundation が提"
"供する `framework installers`__ を使用することもできます。インストーラーを使"
"用する利点は、macOSのPythonがOS内部で使用するために \"原始的\" なままであるこ"
"とです。"

msgid ""
"You will need to modify the ``PATH`` environment variable in your ``."
"profile`` file so that the new version of Python is used when ``python`` is "
"entered at the command-line:"
msgstr ""
"コマンドラインで ``python`` を入力したときに新しいバージョンの Python が使わ"
"れるように、``.profile`` ファイルの ``PATH`` 環境変数を変更する必要がありま"
"す: "

msgid "Postgres.app"
msgstr "Postgres.app"

msgid ""
"`Postgres.app <https://postgresapp.com/>`_ is a standalone PostgreSQL server "
"that includes the PostGIS extension. You will also need to install ``gdal`` "
"and ``libgeoip`` with :ref:`homebrew`."
msgstr ""
"`Postgres.app <https://postgresapp.com/>`_ は PostGIS 拡張を含むスタンドアロ"
"ンの PostgreSQL サーバです。また、``gdal`` と ``libgeoip`` を :ref:"
"`homebrew` と共にインストールする必要があります。"

msgid ""
"After installing Postgres.app, add the following to your ``.bash_profile`` "
"so you can run the package's programs from the command-line. Replace ``X.Y`` "
"with the version of PostgreSQL in the Postgres.app you installed:"
msgstr ""
"Postgres.appをインストールした後、コマンドラインからパッケージのプログラムを"
"実行できるように、 ``.bash_profile`` に以下を追加してください。 ``X.Y`` をイ"
"ンストールした Postgres.app の PostgreSQL のバージョンに置き換えてください:"

msgid ""
"You can check if the path is set up correctly by typing ``which psql`` at a "
"terminal prompt."
msgstr ""
"ターミナルプロンプトで ``which psql`` と入力して、パスが正しく設定されている"
"かを確認できます。"

msgid "Homebrew"
msgstr "Homebrew"

msgid ""
"`Homebrew`__ provides \"recipes\" for building binaries and packages from "
"source. It provides recipes for the GeoDjango prerequisites on Macintosh "
"computers running macOS. Because Homebrew still builds the software from "
"source, `Xcode`_ is required."
msgstr ""
"`Homebrew`__ は、ソースコードからバイナリおよびパッケージを構築するための「レ"
"シピ」を提供します。これは、macOS を実行している Macintosh コンピュータ上で "
"GeoDjango の前提条件のためのレシピを提供しています。Homebrew はソフトウェアを"
"ソースコードから構築するため、 `Xcode`_ が必要となります。"

msgid "Summary:"
msgstr "概要:"

msgid "Fink"
msgstr "Fink"

msgid ""
"`Kurt Schwehr`__ has been gracious enough to create GeoDjango packages for "
"users of the `Fink`__ package system. `Different packages are available`__ "
"(starting with ``django-gis``), depending on which version of Python you "
"want to use."
msgstr ""
"`Kurt Schwehr`__ は `Fink`__ パッケージシステムのユーザーのために GeoDjango "
"パッケージを作成してくれました。使用したい Python のバージョンに応じて、"
"`Different packages are available`__ です（``django-gis`` から始まります）。"

msgid "MacPorts"
msgstr "MacPorts"

msgid ""
"`MacPorts`__ may be used to install GeoDjango prerequisites on computers "
"running macOS.  Because MacPorts still builds the software from source, "
"`Xcode`_ is required."
msgstr ""
"`MacPorts`__ を使うと、macOS を実行しているコンピュータに GeoDjango の依存関"
"係をインストールできます。MacPorts はソフトウェアをソースからビルドするの"
"で、 `Xcode`_ が必要です。"

msgid ""
"You will also have to modify the ``PATH`` in your ``.profile`` so that the "
"MacPorts programs are accessible from the command-line:"
msgstr ""
"また、MacPorts のプログラムにコマンドラインからアクセスできるように、 ``."
"profile`` の ``PATH`` を変更する必要があります:"

msgid ""
"In addition, add the ``DYLD_FALLBACK_LIBRARY_PATH`` setting so that the "
"libraries can be found by Python:"
msgstr ""
"さらに、Python がライブラリを見つけられるように、 "
"``DYLD_FALLBACK_LIBRARY_PATH`` 設定を追加してください:"

msgid "Windows"
msgstr "Windows"

msgid ""
"Proceed through the following sections sequentially in order to install "
"GeoDjango on Windows. In this tutorial we will install 64 bit versions of "
"each application."
msgstr ""
"GeoDjango を Windows にインストールするには、以下のセクションを順番に進めてく"
"ださい。このチュートリアルでは、各アプリケーションの 64 ビット版をインストー"
"ルします。"

msgid ""
"Install a 64 bit version of Python. See :doc:`Install Python </howto/"
"windows>` for further information."
msgstr ""
"64ビット版のPythonをインストールします。詳しくは :doc:`Python のインストール "
"</howto/windows>` を参照してください。"

msgid ""
"Download the latest `PostgreSQL 15.x installer`__ from the `EnterpriseDB`__ "
"website.  After downloading, run the installer, follow the on-screen "
"directions, and keep the default options unless you know the consequences of "
"changing them."
msgstr ""
"`EnterpriseDB`__ のウェブサイトから最新の `PostgreSQL 15.x installer`__ をダ"
"ウンロードしてください。ダウンロード後、インストーラーを実行し、画面の指示に"
"従い、デフォルトのオプションを変更するリスクを理解していない限り、変更せずに"
"進んでください。"

msgid ""
"The PostgreSQL installer creates a new ``postgres`` database superuser You "
"will be prompted once to set the password -- make sure to remember it!"
msgstr ""
"PostgreSQL のインストーラーは新しい ``postgres`` データベース管理者ユーザーを"
"作成します。パスワードを設定する際に一度だけ入力を求められます。それを忘れな"
"いようにしてください！"

msgid ""
"When the installer completes, it will ask to \"Launch Stack Builder at exit?"
"\" -- keep this checked, as it is necessary to install :ref:`postgisasb`."
msgstr ""
"インストーラーが完了すると、 \"Launch Stack Builder at exit?\" （スタックビル"
"ダーを終了時に起動しますか？）という質問が表示されます。これは、:ref:"
"`postgisasb` をインストールするために必要ですので、チェックを入れたままにして"
"ください。"

msgid ""
"If installed successfully, the PostgreSQL server will run in the background "
"each time the system as started as a Windows service. A :menuselection:"
"`PostgreSQL 15` start menu group will created and contains shortcuts for the "
"Application Stack Builder (ASB) as well as the 'SQL Shell', which will "
"launch a ``psql`` command window."
msgstr ""
"インストールが成功すると、PostgreSQL サーバーは Windows サービスとしてシステ"
"ムが起動するたびにバックグラウンドで実行されます。 :menuselection:"
"`PostgreSQL 15` スタートメニューグループが作成され、アプリケーションスタック"
"ビルダー (ASB) および \"SQL Shell\" のショートカットが含まれます。 \"SQL "
"Shell\" を起動すると ``psql`` コマンドウィンドウが開きます。"

msgid ""
"From within the Stack Builder (to run outside of the installer, :"
"menuselection:`Start --> PostgreSQL 15 --> Application Stack Builder`), "
"select :menuselection:`PostgreSQL 15 (x64) on port 5432` from the drop down "
"menu and click next. Expand the :menuselection:`Categories --> Spatial "
"Extensions` menu tree and select :menuselection:`PostGIS X.Y for PostgreSQL "
"15`."
msgstr ""
"Stack Builder (インストーラの外で実行するには :menuselection:`Start --> "
"PostgreSQL 15 --> Application Stack Builder` ) から、ドロップダウンメニューか"
"ら :menuselection:`PostgreSQL 15 (x64) on port 5432` を選択して next をクリッ"
"クします。 :menuselection:`Categories --> Spatial Extensions` メニューツリー"
"を展開し、 :menuselection:`PostGIS X.Y for PostgreSQL 15` を選択します。"

msgid ""
"After clicking next, you will be prompted to confirm the selected package "
"and \"Download directory\". Click next again, this will download PostGIS and "
"you will be asked to click next to begin the PostGIS installer. Select the "
"default options during install. The install process includes four Yes/No "
"dialog boxes, the default option for all four is \"No\"."
msgstr ""
"next をクリックすると、選択したパッケージと \"Download directory\" を確認する"
"プロンプトが表示されます。もう一度 next をクリックすると、PostGIS がダウン"
"ロードされ、next をクリックして PostGIS のインストーラを開始するよう求められ"
"ます。インストール中はデフォルトのオプションを選択してください。インストール"
"プロセスでは、4つの Yes/No ダイアログボックスが表示されます。"

msgid "OSGeo4W"
msgstr "OSGeo4W"

msgid ""
"The `OSGeo4W installer`_ helps to install the PROJ, GDAL, and GEOS libraries "
"required by GeoDjango. First, download the `OSGeo4W installer`_, and run it. "
"Select :menuselection:`Express Web-GIS Install` and click next.  In the "
"'Select Packages' list, ensure that GDAL is selected. If any other packages "
"are enabled by default, they are not required by GeoDjango and may be "
"unchecked safely. After clicking next and accepting the license agreements, "
"the packages will be automatically downloaded and installed, after which you "
"may exit the installer."
msgstr ""
"`OSGeo4W installer`_ は GeoDjango で必要な PROJ、GDAL、GEOS ライブラリのイン"
"ストールに役立ちます。まず、 `OSGeo4W installer`_ をダウンロードし、実行しま"
"す。 :menuselection:`Express Web-GIS Install` を選択し、next をクリックしま"
"す。 \"Select Packages\" リストで、GDAL が選択されていることを確認してくださ"
"い。他のパッケージがデフォルトで有効になっている場合、それらは GeoDjango には"
"必要ないので、チェックを外しても大丈夫です。次へをクリックし、ライセンス契約"
"に同意すると、パッケージが自動的にダウンロードされ、インストールされます。"

msgid "Modify Windows environment"
msgstr "Windows 環境変数の変更"

msgid ""
"In order to use GeoDjango, you will need to add your OSGeo4W directories to "
"your Windows system ``Path``, as well as create ``GDAL_DATA`` and "
"``PROJ_LIB`` environment variables.  The following set of commands, "
"executable with ``cmd.exe``, will set this up. Restart your device once this "
"is complete for new environment variables to be recognized:"
msgstr ""
"GeoDjangoを使用するには、Windowsシステムの ``Path`` に OSGeo4W ディレクトリを"
"追加し、 ``GDAL_DATA`` と ``PROJ_LIB`` の環境変数を作成する必要があります。以"
"下のコマンドセットは、 ``cmd.exe`` で実行可能で、これを設定します。新しい環境"
"変数を認識させるために、この作業が完了したらデバイスを再起動してください。"

msgid ""
"Administrator privileges are required to execute these commands. To do this, "
"run command prompt as administrator and enter the commands above. You need "
"to log out and log back in again for the settings to take effect."
msgstr ""
"これらのコマンドを実行するには、管理者権限が必要です。これを行うには、管理者"
"としてコマンドプロンプトを実行し、上記のコマンドを入力します。設定を有効にす"
"るには、一旦ログアウトし、再度ログインする必要があります。"

msgid ""
"If you customized the OSGeo4W installation directories, then you will need "
"to modify the ``OSGEO4W_ROOT`` variables accordingly."
msgstr ""
"OSGeo4W のインストールディレクトリをカスタマイズした場合、それに応じて "
"``OSGEO4W_ROOT`` 変数を変更する必要があります。"

msgid "Install Django and set up database"
msgstr "Djangoのインストールとデータベースのセットアップ"

msgid ""
":ref:`Install Django <installing-official-release>` on your system. It is "
"recommended that you create a :doc:`virtual environment <python:tutorial/"
"venv>` for each project you create."
msgstr ""
"システムにDjangoを :ref:`インストール <installing-official-release>` します。"
"作成する各プロジェクトに対して :doc:`仮想環境 <python:tutorial/venv>` を作成"
"することを推奨します。"

msgid "psycopg"
msgstr "psycopg"

msgid ""
"The ``psycopg`` Python module provides the interface between Python and the "
"PostgreSQL database. ``psycopg`` can be installed via pip within your Python "
"virtual environment:"
msgstr ""
"Pythonモジュール ``psycopg`` は Python と PostgreSQL  データベースのインター"
"フェースを提供します。 ``psycopg`` は Python 仮想環境内で pip を使用してイン"
"ストールできます:"

msgid ""
"GeoDjango uses the :func:`~ctypes.util.find_library` routine from ``ctypes."
"util`` to locate shared libraries."
msgstr ""
"GeoDjango では、共有ライブラリを探すために ``ctypes.util`` の :func:`~ctypes."
"util.find_library` ルーチンが使用されています。"

msgid "Installing PostGIS"
msgstr "PostGIS のインストール"

msgid ""
"`PostGIS`_ adds geographic object support to PostgreSQL, turning it into a "
"spatial database. :ref:`geosbuild`, :ref:`proj4` and :ref:`gdalbuild` should "
"be installed prior to building PostGIS. You might also need additional "
"libraries, see `PostGIS requirements`_."
msgstr ""
"`PostGIS`_ は、PostgreSQL に地理オブジェクトのサポートを追加し、それを空間"
"データベースに変えます。PostGIS をビルドする前に、 :ref:`geosbuild`、:ref:"
"`proj4`、:ref:`gdalbuild` をインストールする必要があります。追加のライブラリ"
"が必要な場合もあるので、 `PostGIS requirements`_ を参照してください。"

msgid ""
"The `psycopg`_ or `psycopg2`_ module is required for use as the database "
"adapter when using GeoDjango with PostGIS."
msgstr ""
"GeoDjango を PostGIS で使う場合、データベースアダプタとして `psycopg`_ また"
"は `psycopg2`_ モジュールが必要です。"

msgid ""
"On Debian/Ubuntu, you are advised to install the following packages: "
"``postgresql-x``, ``postgresql-x-postgis-3``, ``postgresql-server-dev-x``, "
"and ``python3-psycopg3`` (x matching the PostgreSQL version you want to "
"install). Alternately, you can `build from source`_. Consult the platform-"
"specific instructions if you are on :ref:`macos` or :ref:`windows`."
msgstr ""
"Debian/Ubuntuでは、次のパッケージをインストールすることが推奨されます: "
"``postgresql-x``, ``postgresql-x-postgis-3``, ``postgresql-server-dev-x``, "
"``python3-psycopg3`` (xはインストールしたいPostgreSQLのバージョンに対応しま"
"す)。別の方法として、 `build from source`_ ことも可能です。 :ref:`macos` や :"
"ref:`windows` の場合は、プラットフォーム固有の手順を参照してください。"

msgid "Support for ``psycopg`` 3.1.8+ was added."
msgstr "``psycopg`` 3.1.8以降のサポートが追加されました。"

msgid "Post-installation"
msgstr "インストール後"

msgid "Creating a spatial database"
msgstr "空間データベースを作成する"

msgid ""
"PostGIS 2 includes an extension for PostgreSQL that's used to enable spatial "
"functionality:"
msgstr ""
"PostGIS 2 には、PostgreSQL 用の拡張機能が含まれており、空間機能を有効にするた"
"めに使用されています。"

msgid ""
"The database user must be a superuser in order to run ``CREATE EXTENSION "
"postgis;``. The command is run during the :djadmin:`migrate` process. An "
"alternative is to use a migration operation in your project::"
msgstr ""
"データベースユーザーは、``CREATE EXTENSION postgis;`` を実行するためにはスー"
"パーユーザーである必要があります。このコマンドは、 :djadmin:`migrate` プロセ"
"ス中に実行されます。プロジェクトでの代替方法として、マイグレーションオペレー"
"ションを使用する方法があります:"

msgid ""
"If you plan to use PostGIS raster functionality on PostGIS 3+, you should "
"also activate the ``postgis_raster`` extension. You can install the "
"extension using the :class:`~django.contrib.postgres.operations."
"CreateExtension` migration operation, or directly by running ``CREATE "
"EXTENSION postgis_raster;``."
msgstr ""
"PostGIS 3+ で PostGIS のラスタ機能を使用する予定がある場合は、 "
"``postgis_raster`` 拡張も有効化する必要があります。この拡張機能は :class:"
"`~django.contrib.postgres.operations.CreateExtension` マイグレーションオペ"
"レーションを使用してインストールするか、直接 ``CREATE EXTENSION "
"postgis_raster;`` を実行してインストールすることもできます。"

msgid ""
"GeoDjango does not currently leverage any `PostGIS topology "
"functionality`__. If you plan to use those features at some point, you can "
"also install the ``postgis_topology`` extension by issuing ``CREATE "
"EXTENSION postgis_topology;``."
msgstr ""
"GeoDjango は今のところ `PostGIS topology functionality`__ を利用していませ"
"ん。これらの機能をいつか使いたければ、 ``CREATE EXTENSION postgis_topology;"
"`` を実行して ``postgis_topology`` 拡張機能をインストールすることもできます。"

msgid "Managing the database"
msgstr "データベースの管理"

msgid ""
"To administer the database, you can either use the pgAdmin III program (:"
"menuselection:`Start --> PostgreSQL X --> pgAdmin III`) or the SQL Shell (:"
"menuselection:`Start --> PostgreSQL X --> SQL Shell`). For example, to "
"create a ``geodjango`` spatial database and user, the following may be "
"executed from the SQL Shell as the ``postgres`` user:"
msgstr ""
"データベースの管理には、pgAdmin III プログラム (:menuselection:`Start --> "
"PostgreSQL X --> pgAdmin III`) または SQL Shell (:menuselection:`Start --> "
"PostgreSQL X --> SQL Shell`) を使用できます。例えば、 ``geodjango`` 空間デー"
"タベースとユーザを作成するには、``postgres`` ユーザとして SQL Shell から次の"
"コマンドを実行します:"

msgid "Installing SpatiaLite"
msgstr "SpatiaLite のインストール"

msgid ""
"`SpatiaLite`__ adds spatial support to SQLite, turning it into a full-"
"featured spatial database."
msgstr ""
"`SpatiaLite`__ はSQLiteに空間データのサポートを追加し、それを完全な機能を持つ"
"空間データベースに変えます。"

msgid ""
"First, check if you can install SpatiaLite from system packages or binaries."
msgstr ""
"まず、システムパッケージやバイナリから SpatiaLiteを インストールできるかどう"
"かを確認してください。"

msgid ""
"For example, on Debian-based distributions that package SpatiaLite 4.3+, try "
"to install the ``libsqlite3-mod-spatialite`` package. For older releases "
"install ``spatialite-bin``."
msgstr ""
"例えば、SpatiaLite 4.3 以上をパッケージ化している Debian ベースのディストリ"
"ビューションでは、 ``libsqlite3-mod-spatialite`` パッケージをインストールして"
"みてください。古いリリースの場合は ``spatialite-bin`` をインストールしてくだ"
"さい。"

msgid "For macOS, follow the :ref:`instructions below<spatialite_macos>`."
msgstr "macOS の場合は、次の :ref:`手順<spatialite_macos>` に従ってください。"

msgid "For Windows, you may find binaries on the `Gaia-SINS`__ home page."
msgstr "Windowsの場合は、 `Gaia-SINS`__ ホームページにバイナリがあります。"

msgid ""
"In any case, you should always be able to :ref:`install from source "
"<spatialite_source>`."
msgstr ""
"いずれの場合も、常に :ref:`ソースコードからのインストール "
"<spatialite_source>` が可能です。"

msgid "Installing from source"
msgstr "ソースコードからのインストール"

msgid ""
":doc:`GEOS and PROJ</ref/contrib/gis/install/geolibs>` should be installed "
"prior to building SpatiaLite."
msgstr ""
":doc:`GEOSとPROJ</ref/contrib/gis/install/geolibs>` は、 SpatiaLite をビルド"
"する前にインストールする必要があります。"

msgid ""
"Check first if SQLite is compiled with the `R*Tree module`__. Run the "
"sqlite3 command line interface and enter the following query:"
msgstr ""
"まず最初に、SQLite が `R*Tree module`__ でコンパイルされているかどうかを確認"
"してください。sqlite3 コマンドラインインターフェースを起動し、以下のクエリを"
"入力してください: "

msgid ""
"If you obtain an error, you will have to recompile SQLite from source. "
"Otherwise, skip this section."
msgstr ""
"エラーが発生した場合は、SQLite をソースから再コンパイルする必要があります。そ"
"れ以外の場合は、このセクションをスキップしてください。"

msgid ""
"To install from sources, download the latest amalgamation source archive "
"from the `SQLite download page`__, and extract:"
msgstr ""
"ソースからインストールするには、`SQLite download page`__ から最新の "
"amalgamation ソースアーカイブをダウンロードし、展開してください:"

msgid ""
"Next, run the ``configure`` script -- however the ``CFLAGS`` environment "
"variable needs to be customized so that SQLite knows to build the R*Tree "
"module:"
msgstr ""
"次に、 ``configure`` スクリプトを実行します。ただし、SQLite が R*Tree モ"
"ジュールをビルドすることを認識できるように、``CFLAGS`` 環境変数をカスタマイズ"
"する必要があります:"

msgid "SpatiaLite library (``libspatialite``)"
msgstr "SpatiaLite ライブラリ (``libspatialite``)"

msgid ""
"Get the latest SpatiaLite library source bundle from the `download page`__:"
msgstr ""
"`download page`__ から最新の SpatiaLite ライブラリのソースバンドルを入手して"
"ください。"

msgid ""
"For macOS users building from source, the SpatiaLite library *and* tools "
"need to have their ``target`` configured:"
msgstr ""
"macOS ユーザーがソースからビルドする場合、SpatiaLite ライブラリとツールは "
"``target`` を設定する必要があります: "

msgid "macOS-specific instructions"
msgstr "macOS 固有の手順"

msgid ""
"To install the SpatiaLite library and tools, macOS users can use `Homebrew`_."
msgstr ""
"SpatiaLite ライブラリとツールをインストールする場合、macOS ユーザーは "
"`Homebrew`_ を使用できます。"

msgid ""
"`Homebrew`_ handles all the SpatiaLite related packages on your behalf, "
"including SQLite, SpatiaLite, PROJ, and GEOS. Install them like this:"
msgstr ""
"`Homebrew`_ は、SQLite、SpatiaLite、PROJ、GEOSを含む全ての SpatiaLite 関連"
"パッケージをあなたに代わって処理します。以下のようにインストールしてください:"

msgid ""
"Finally, for GeoDjango to be able to find the SpatiaLite library, set the "
"``SPATIALITE_LIBRARY_PATH`` setting to its path. This will be within your "
"brew install path, which you can check with:"
msgstr ""
"最後に、GeoDjango が SpatiaLite ライブラリを見つけられるように、そのパスを "
"``SPATIALITE_LIBRARY_PATH`` に設定してください。これは brew のインストールパ"
"スの中にあるはずです。下記で確認できます:"

msgid ""
"Using this brew install path, the full path can be constructed like this::"
msgstr "このbrewインストールパスを使うと、フルパスは次のようになります:"

msgid "``LayerMapping`` data import utility"
msgstr "``LayerMapping`` データインポートユーティリティ"

msgid ""
"The :class:`LayerMapping` class provides a way to map the contents of vector "
"spatial data files (e.g. shapefiles) into GeoDjango models."
msgstr ""
":class:`LayerMapping` クラスは、ベクトル空間データファイル (例: shapefile) の"
"内容を GeoDjango モデルにマッピングする方法を提供します。"

msgid ""
"This utility grew out of the author's personal needs to eliminate the code "
"repetition that went into pulling geometries and fields out of a vector "
"layer, converting to another coordinate system (e.g. WGS84), and then "
"inserting into a GeoDjango model."
msgstr ""
"このユーティリティは、ベクターレイヤーからジオメトリとフィールドを取り出し、"
"別の座標系 (WGS84など) に変換し、GeoDjango モデルに挿入するまでのコードの繰り"
"返しをなくしたいという作者の個人的なニーズから生まれました。"

msgid "Use of :class:`LayerMapping` requires GDAL."
msgstr ":class:`LayerMapping` の使用には GDAL が必要です。"

msgid ""
"GIS data sources, like shapefiles, may be very large.  If you find that :"
"class:`LayerMapping` is using too much memory, set :setting:`DEBUG` to "
"``False`` in your settings.  When :setting:`DEBUG` is set to ``True``, "
"Django :ref:`automatically logs <faq-see-raw-sql-queries>` *every* SQL query "
"-- and when SQL statements contain geometries, this may consume more memory "
"than is typical."
msgstr ""
"GISデータソース、例えば shapefile は非常に大きい場合があります。もし :class:"
"`LayerMapping` がメモリを多く消費していると感じた場合は、設定で :setting:"
"`DEBUG` を ``False`` に設定してください。 :setting:`DEBUG` を ``True`` に設定"
"していると、Djangoは :ref:`自動的にログを出力 <faq-see-raw-sql-queries>` しま"
"す。 *すべての* SQLクエリが記録されるため、SQLステートメントにジオメトリが含"
"まれると通常よりも多くのメモリを消費する可能性があります。"

msgid ""
"You need a GDAL-supported data source, like a shapefile (here we're using a "
"simple polygon shapefile, ``test_poly.shp``, with three features):"
msgstr ""
"シェープファイルのような、GDALがサポートするデータソースが必要です (ここで"
"は、3つのフィーチャを持つ単純なポリゴンシェープファイル、 ``test_poly.shp`` "
"を使用しています):"

msgid ""
"Now we define our corresponding Django model (make sure to use :djadmin:"
"`migrate`)::"
msgstr ""
"ここで、対応する Django モデルを定義します (必ず :djadmin:`migrate` を使って"
"ください):"

msgid ""
"Use :class:`LayerMapping` to extract all the features and place them in the "
"database:"
msgstr ""
":class:`LayerMapping` を使用して、すべてのフィーチャを抽出し、データベースに"
"配置します。"

msgid ""
"Here, :class:`LayerMapping` transformed the three geometries from the "
"shapefile in their original spatial reference system (WGS84) to the spatial "
"reference system of the GeoDjango model (NAD83).  If no spatial reference "
"system is defined for the layer, use the ``source_srs`` keyword with a :"
"class:`~django.contrib.gis.gdal.SpatialReference` object to specify one."
msgstr ""
"ここでは、:class:`LayerMapping` が、shapefile から取得した3つのジオメトリを、"
"元の空間参照系 (WGS84) から GeoDjango モデルの空間参照系 (NAD83) に変換しまし"
"た。もしレイヤーに空間参照系が定義されていない場合は、``source_srs`` キーワー"
"ドを使用し、:class:`~django.contrib.gis.gdal.SpatialReference` オブジェクトで"
"指定してください。"

msgid "``LayerMapping`` API"
msgstr "``LayerMapping`` API"

msgid ""
"The following are the arguments and keywords that may be used during "
"instantiation of ``LayerMapping`` objects."
msgstr ""
"以下は ``LayerMapping`` オブジェクトのインスタンス生成時に使用できる引数と"
"キーワードです。"

msgid "Argument"
msgstr "引数"

msgid "``model``"
msgstr "``model``"

msgid "The geographic model, *not* an instance."
msgstr "地理情報モデルで、インスタンスではありません。"

msgid "``data_source``"
msgstr "``data_source``"

msgid ""
"The path to the OGR-supported data source file (e.g., a shapefile).  Also "
"accepts :class:`django.contrib.gis.gdal.DataSource` instances."
msgstr ""
"OGR がサポートするデータソースファイル (シェープファイルなど) へのパス。 :"
"class:`django.contrib.gis.gdal.DataSource` インスタンスも受け付けます。"

msgid "``mapping``"
msgstr "``mapping``"

msgid ""
"A dictionary: keys are strings corresponding to the model field, and values "
"correspond to string field names for the OGR feature, or if the model field "
"is a geographic then it should correspond to the OGR geometry type, e.g., "
"``'POINT'``, ``'LINESTRING'``, ``'POLYGON'``."
msgstr ""
"辞書: キーはモデルフィールドに対応する文字列で、値はOGRフィーチャ用の文字列"
"フィールド名に対応します。もしくは、モデルフィールドがジオグラフィックの場合"
"は、OGRジオメトリの種類に対応する必要があります。例: ``'POINT'``、"
"``'LINESTRING'``、``'POLYGON'`` 。"

msgid "``layer``"
msgstr "``layer``"

msgid "The index of the layer to use from the Data Source (defaults to 0)"
msgstr "データソースから使用するレイヤーのインデックス (デフォルトは 0)"

msgid "``source_srs``"
msgstr "``source_srs``"

msgid ""
"Use this to specify the source SRS manually (for example, some shapefiles "
"don't come with a ``'.prj'`` file).  An integer SRID, WKT or PROJ strings, "
"and :class:`django.contrib.gis.gdal.SpatialReference` objects are accepted."
msgstr ""
"ソース SRS を手動で指定する場合に使用します (例えば、シェープファイルの中に"
"は ``'.prj'`` ファイルが付属していないものがあります)。整数の SRID、WKT また"
"は PROJ 文字列、:class:`django.contrib.gis.gdal.SpatialReference` オブジェク"
"トが使用できます。"

msgid "``encoding``"
msgstr "``encoding``"

msgid ""
"Specifies the character set encoding of the strings in the OGR data source.  "
"For example, ``'latin-1'``, ``'utf-8'``, and ``'cp437'`` are all valid "
"encoding parameters."
msgstr ""
"OGR データソースの文字列の文字セットエンコーディングを指定します。例えば、"
"``'latin-1'``、``'utf-8'``、``'cp437'`` はすべて有効なエンコーディングパラ"
"メータです。"

msgid "``transaction_mode``"
msgstr "``transaction_mode``"

msgid "May be ``'commit_on_success'`` (default) or ``'autocommit'``."
msgstr ""
"``commit_on_success'`` (デフォルト) または ``'autocommit'`` を指定します。"

msgid "``transform``"
msgstr "``transform``"

msgid ""
"Setting this to False will disable coordinate transformations.  In other "
"words, geometries will be inserted into the database unmodified from their "
"original state in the data source."
msgstr ""
"これを False に設定すると、座標変換が無効になります。つまり、ジオメトリはデー"
"タソース内の元の状態から変更されずにデータベースに挿入されます。"

msgid "``unique``"
msgstr "``unique``"

msgid ""
"Setting this to the name, or a tuple of names, from the given  model will "
"create models unique only to the given name(s). Geometries from each feature "
"will be added into the collection associated with the unique model.  Forces "
"the transaction mode to be ``'autocommit'``."
msgstr ""
"指定されたモデルの名前、または名前のタプルを設定すると、指定された名前 (複数"
"可) のみに固有なモデルが作成されます。各フィーチャーのジオメトリは、一意のモ"
"デルに関連付けられたコレクションに追加されます。トランザクションモードを "
"``'autocommit'`` に強制します。"

msgid "``using``"
msgstr "``using``"

msgid ""
"Sets the database to use when importing spatial data. Default is "
"``'default'``."
msgstr ""
"空間データをインポートする際に使用するデータベースを設定します。デフォルトは "
"``'default'`` です。"

msgid "``save()`` Keyword Arguments"
msgstr "``save()`` のキーワード引数"

msgid ""
"The ``save()`` method also accepts keywords.  These keywords are used for "
"controlling output logging, error handling, and for importing specific "
"feature ranges."
msgstr ""
"``save()`` メソッドはキーワードも受け付けます。これらのキーワードは、出力のロ"
"ギングやエラー処理を制御したり、特定の機能範囲をインポートしたりするために使"
"用します。"

msgid "Save Keyword Arguments"
msgstr "Save のキーワード引数"

msgid "``fid_range``"
msgstr "``fid_range``"

msgid ""
"May be set with a slice or tuple of (begin, end) feature ID's to map from "
"the data source.  In other words, this keyword enables the user to "
"selectively import a subset range of features in the geographic data source."
msgstr ""
"データソースからマップするフィーチャ ID のスライスまたはタプル (開始、終了) "
"を設定できます。言い換えると、このキーワードを使用すると、地理データソース内"
"のフィーチャのサブセット範囲を選択的にインポートできます。"

msgid "``progress``"
msgstr "``progress``"

msgid ""
"When this keyword is set, status information will be printed giving the "
"number of features processed and successfully saved.  By default, progress "
"information will be printed every 1000 features processed, however, this "
"default may be overridden by setting this keyword with an integer for the "
"desired interval."
msgstr ""
"このキーワードを設定すると、処理され、正常に保存されたフィーチャの数を示すス"
"テータス情報が出力されます。デフォルトでは、処理された 1000 フィーチャごとに"
"進捗情報が表示されますが、このキーワードに希望の間隔の整数を設定することで、"
"このデフォルトを上書きできます。"

msgid "``silent``"
msgstr "``silent``"

msgid ""
"By default, non-fatal error notifications are printed to ``sys.stdout``, but "
"this keyword may be set to disable these notifications."
msgstr ""
"デフォルトでは、致命的でないエラー通知は ``sys.stdout`` に出力されますが、こ"
"のキーワードを設定すると、これらの通知を無効できます。"

msgid "``step``"
msgstr "``step``"

msgid ""
"If set with an integer, transactions will occur at every step interval. For "
"example, if ``step=1000``, a commit would occur after the 1,000th feature, "
"the 2,000th feature etc."
msgstr ""
"整数で設定すると、トランザクションは各ステップの間隔で発生します。たとえば、"
"``step=1000`` の場合、1,000個目のフィーチャー、2,000個目のフィーチャーなどで"
"コミットが行われます。"

msgid "``stream``"
msgstr "``stream``"

msgid ""
"Status information will be written to this file handle.  Defaults to using "
"``sys.stdout``, but any object with a ``write`` method is supported."
msgstr ""
"ステータス情報はこのファイルハンドルに書き込まれます。デフォルトでは ``sys."
"stdout`` が使用されますが、``write`` メソッドを持つ任意のオブジェクトがサポー"
"トされています。"

msgid "``strict``"
msgstr "``strict``"

msgid ""
"Execution of the model mapping will cease upon the first error encountered.  "
"The default value (``False``) behavior is to attempt to continue."
msgstr ""
"モデルマッピングの実行は、最初にエラーが発生した時点で停止します。デフォルト"
"値 (``False``) の動作は、続行を試みます。"

msgid "``verbose``"
msgstr "``verbose``"

msgid ""
"If set, information will be printed subsequent to each model save executed "
"on the database."
msgstr ""
"設定された場合、データベース上で実行される各モデル保存の後に情報が出力されま"
"す。"

msgid "Running out of memory"
msgstr "メモリ不足"

msgid ""
"As noted in the warning at the top of this section, Django stores all SQL "
"queries when ``DEBUG=True``.  Set ``DEBUG=False`` in your settings, and this "
"should stop excessive memory use when running ``LayerMapping`` scripts."
msgstr ""
"このセクションの一番上の警告にあるように、 Django は ``DEBUG=True`` の場合、"
"全ての SQL クエリを保存します。設定で ``DEBUG=False`` にすれば、 "
"``LayerMapping`` スクリプトを実行するときにメモリを過剰に消費しなくなるはずで"
"す。"

msgid "MySQL: ``max_allowed_packet`` error"
msgstr "MySQL: ``max_allowed_packet`` エラー"

msgid ""
"If you encounter the following error when using ``LayerMapping`` and MySQL:"
msgstr "``LayerMapping`` とMySQLを使用する際に以下のエラーが発生した場合:"

msgid ""
"Then the solution is to increase the value of the ``max_allowed_packet`` "
"setting in your MySQL configuration.  For example, the default value may be "
"something low like one megabyte -- the setting may be modified in MySQL's "
"configuration file (``my.cnf``) in the ``[mysqld]`` section:"
msgstr ""
"解決策は、MySQLの設定である ``max_allowed_packet`` の値を増やすことです。たと"
"えば、デフォルト値は1MBのように低い場合があります。この設定は MySQL の設定"
"ファイル (``my.cnf``) の ``[mysqld]`` セクションで変更できます。"

msgid "Measurement Objects"
msgstr "測定オブジェクト"

msgid ""
"The :mod:`django.contrib.gis.measure` module contains objects that allow for "
"convenient representation of distance and area units of measure. [#]_ "
"Specifically, it implements two objects, :class:`Distance` and :class:`Area` "
"-- both of which may be accessed via the :class:`D` and :class:`A` "
"convenience aliases, respectively."
msgstr ""
":mod:`django.contrib.gis.measure` モジュールには、距離や面積の単位を便利に表"
"現するためのオブジェクトが含まれています。 [#]_ 具体的には、:class:"
"`Distance` と :class:`Area` の 2 つのオブジェクトを実装しており、それぞれ :"
"class:`D` と :class:`A` の便利なエイリアスを介してアクセスできます。"

msgid ""
":class:`Distance` objects may be instantiated using a keyword argument "
"indicating the context of the units.  In the example below, two different "
"distance objects are instantiated in units of kilometers (``km``) and miles "
"(``mi``):"
msgstr ""
":class:`Distance` オブジェクトは、単位のコンテキストを示すキーワード引数を用"
"いてインスタンス化できます。以下の例では、異なる距離のオブジェクトを、キロ"
"メートル (``km``) とマイル (``mi``) の単位でインスタンス化しています。"

msgid ""
"For conversions, access the preferred unit attribute to get a converted "
"distance quantity:"
msgstr ""
"変換には、変換された距離の量を取得するために好ましい単位属性にアクセスします:"

msgid ""
"Moreover, arithmetic operations may be performed between the distance "
"objects:"
msgstr "また、距離オブジェクト間で算術演算を行うこともできます:"

msgid ""
"Two :class:`Distance` objects multiplied together will yield an :class:"
"`Area` object, which uses squared units of measure:"
msgstr ""
":class:`Distance` オブジェクト同士を掛け合わせると、その結果は、二乗の単位で"
"表される :class:`Area` オブジェクトとなります。"

msgid ""
"To determine what the attribute abbreviation of a unit is, the "
"``unit_attname`` class method may be used:"
msgstr ""
"ユニットの属性略称を決定するには、``unit_attname`` クラスメソッドを使用しま"
"す:"

msgid "Supported units"
msgstr "サポートされる単位"

msgid "Unit Attribute"
msgstr "単位 (unit) 属性"

msgid "Full name or alias(es)"
msgstr "フルネームまたはエイリアス"

msgid "``km``"
msgstr "``km``"

msgid "Kilometre, Kilometer"
msgstr "Kilometre, Kilometer"

msgid "``mi``"
msgstr "``mi``"

msgid "Mile"
msgstr "Mile"

msgid "``m``"
msgstr "``m``"

msgid "Meter, Metre"
msgstr "Meter, Metre"

msgid "``yd``"
msgstr "``yd``"

msgid "Yard"
msgstr "Yard"

msgid "``ft``"
msgstr "``ft``"

msgid "Foot, Foot (International)"
msgstr "Foot, Foot (International)"

msgid "``survey_ft``"
msgstr "``survey_ft``"

msgid "U.S. Foot, US survey foot"
msgstr "U.S. Foot, US survey foot"

msgid "``inch``"
msgstr "``inch``"

msgid "Inches"
msgstr "Inches"

msgid "``cm``"
msgstr "``cm``"

msgid "Centimeter"
msgstr "Centimeter"

msgid "``mm``"
msgstr "``mm``"

msgid "Millimetre, Millimeter"
msgstr "Millimetre, Millimeter"

msgid "``um``"
msgstr "``um``"

msgid "Micrometer, Micrometre"
msgstr "Micrometer, Micrometre"

msgid "``british_ft``"
msgstr "``british_ft``"

msgid "British foot (Sears 1922)"
msgstr "British foot (Sears 1922)"

msgid "``british_yd``"
msgstr "``british_yd``"

msgid "British yard (Sears 1922)"
msgstr "British yard (Sears 1922)"

msgid "``british_chain_sears``"
msgstr "``british_chain_sears``"

msgid "British chain (Sears 1922)"
msgstr "British chain (Sears 1922)"

msgid "``indian_yd``"
msgstr "``indian_yd``"

msgid "Indian yard, Yard (Indian)"
msgstr "Indian yard, Yard (Indian)"

msgid "``sears_yd``"
msgstr "``sears_yd``"

msgid "Yard (Sears)"
msgstr "Yard (Sears)"

msgid "``clarke_ft``"
msgstr "``clarke_ft``"

msgid "Clarke's Foot"
msgstr "Clarke's Foot"

msgid "``chain``"
msgstr "``chain``"

msgid "Chain"
msgstr "Chain"

msgid "``chain_benoit``"
msgstr "``chain_benoit``"

msgid "Chain (Benoit)"
msgstr "Chain (Benoit)"

msgid "``chain_sears``"
msgstr "``chain_sears``"

msgid "Chain (Sears)"
msgstr "Chain (Sears)"

msgid "``british_chain_benoit``"
msgstr "``british_chain_benoit``"

msgid "British chain (Benoit 1895 B)"
msgstr "British chain (Benoit 1895 B)"

msgid "``british_chain_sears_truncated``"
msgstr "``british_chain_sears_truncated``"

msgid "British chain (Sears 1922 truncated)"
msgstr "British chain (Sears 1922 truncated)"

msgid "``gold_coast_ft``"
msgstr "``gold_coast_ft``"

msgid "Gold Coast foot"
msgstr "Gold Coast foot"

msgid "``link``"
msgstr "``link``"

msgid "Link"
msgstr "Link"

msgid "``link_benoit``"
msgstr "``link_benoit``"

msgid "Link (Benoit)"
msgstr "Link (Benoit)"

msgid "``link_sears``"
msgstr "``link_sears``"

msgid "Link (Sears)"
msgstr "Link (Sears)"

msgid "``clarke_link``"
msgstr "``clarke_link``"

msgid "Clarke's link"
msgstr "Clarke's link"

msgid "``fathom``"
msgstr "``fathom``"

msgid "Fathom"
msgstr "Fathom"

msgid "``rod``"
msgstr "``rod``"

msgid "Rod"
msgstr "Rod"

msgid "``furlong``"
msgstr "``furlong``"

msgid "Furlong, Furrow Long"
msgstr "Furlong, Furrow Long"

msgid "``nm``"
msgstr "``nm``"

msgid "Nautical Mile"
msgstr "Nautical Mile"

msgid "``nm_uk``"
msgstr "``nm_uk``"

msgid "Nautical Mile (UK)"
msgstr "Nautical Mile (UK)"

msgid "``german_m``"
msgstr "``german_m``"

msgid "German legal metre"
msgstr "German legal metre"

msgid ""
":class:`Area` attributes are the same as :class:`Distance` attributes, "
"except they are prefixed with ``sq_`` (area units are square in nature). For "
"example, ``Area(sq_m=2)`` creates an :class:`Area` object representing two "
"square meters."
msgstr ""
":class:`Area` の属性は、 :class:`Distance` の属性と同じですが、プレフィックス"
"が ``sq_`` になっています (面積の単位は平方です) 。例えば、 ``Area(sq_m=2)`` "
"は、2平方メートルを表す :class:`Area` オブジェクトを作成します。"

msgid "Measurement API"
msgstr "測定API"

msgid ""
"To initialize a distance object, pass in a keyword corresponding to the "
"desired :ref:`unit attribute name <supported_units>` set with desired value. "
"For example, the following creates a distance object representing 5 miles:"
msgstr ""
"距離オブジェクトを初期化するには、:ref:`単位属性名 <supported_units>` に対応"
"するキーワードを渡します。例えば、以下は5マイルを表す距離オブジェクトを作成し"
"ます。"

msgid ""
"Returns the distance value in units corresponding to the given unit "
"attribute. For example:"
msgstr "与えられた単位属性に対応する単位で距離値を返します。例えば:"

msgid ""
"Returns the distance unit attribute name for the given full unit name. For "
"example:"
msgstr "与えられた完全な単位名に対する距離単位の属性名を返します。例えば:"

msgid "Alias for :class:`Distance` class."
msgstr ":class:`Distance` クラスのエイリアス。"

msgid ""
"To initialize an area object, pass in a keyword corresponding to the "
"desired :ref:`unit attribute name <supported_units>` set with desired value. "
"For example, the following creates an area object representing 5 square "
"miles:"
msgstr ""
"面積オブジェクトを初期化するには、:ref:`単位属性名 <supported_units>` に対応"
"するキーワードを渡します。例えば、以下は5平方マイルを表す面積オブジェクトを作"
"成します:"

msgid ""
"Returns the area value in units corresponding to the given unit attribute. "
"For example:"
msgstr "与えられた単位属性に対応する単位で面積値を返します。例えば: "

msgid ""
"Returns the area unit attribute name for the given full unit name. For "
"example:"
msgstr "指定された完全な単位名に対する面積単位属性名を返します。例:"

msgid "Alias for :class:`Area` class."
msgstr ":class:`Area` クラスのエイリアス。"

msgid ""
"`Robert Coup <https://koordinates.com/>`_ is the initial author of the "
"measure objects, and was inspired by Brian Beck's work in `geopy <https://"
"github.com/geopy/geopy/>`_ and Geoff Biggs' PhD work on dimensioned units "
"for robotics."
msgstr ""
"`Robert Coup <https://koordinates.com/>`_ は、測定オブジェクトの初期の作者で"
"あり、 `geopy <https://github.com/geopy/geopy/>`_ の Brian Beck 氏の業績や、"
"ロボット工学の寸法単位に関する Geoff Biggs 氏の博士号取得研究に触発されまし"
"た。"

msgid "GeoDjango Model API"
msgstr "GeoDjango モデル API"

msgid ""
"This document explores the details of the GeoDjango Model API.  Throughout "
"this section, we'll be using the following geographic model of a `ZIP "
"code`__ and of a `Digital Elevation Model`__ as our examples::"
msgstr ""
"このドキュメントでは GeoDjango Model API の詳細を説明します。この節では、次"
"の `ZIP code`__ と `Digital Elevation Model`__ の地理情報モデルを例として使い"
"ます:"

msgid "Spatial Field Types"
msgstr "空間フィールドのタイプ"

msgid ""
"Spatial fields consist of a series of geometry field types and one raster "
"field type. Each of the geometry field types correspond to the OpenGIS "
"Simple Features specification [#fnogc]_. There is no such standard for "
"raster data."
msgstr ""
"空間フィールドは一連のジオメトリフィールド型と1つのラスターフィールド型で構成"
"されます。各ジオメトリフィールド型は OpenGIS Simple Features 仕様  [#fnogc]_ "
"に対応しています。ラスターデータに対するこのような標準は存在しません。"

msgid "The base class for geometry fields."
msgstr "ジオメトリフィールドの基本クラス。"

msgid "Stores a :class:`~django.contrib.gis.geos.Point`."
msgstr ":class:`~django.contrib.gis.geos.Point` を格納します。"

msgid "Stores a :class:`~django.contrib.gis.geos.LineString`."
msgstr ":class:`~django.contrib.gis.geos.LineString` を格納します。"

msgid "Stores a :class:`~django.contrib.gis.geos.Polygon`."
msgstr ":class:`~django.contrib.gis.geos.Polygon` を格納します。"

msgid "Stores a :class:`~django.contrib.gis.geos.MultiPoint`."
msgstr ":class:`~django.contrib.gis.geos.MultiPoint` を格納します。"

msgid "Stores a :class:`~django.contrib.gis.geos.MultiLineString`."
msgstr ":class:`~django.contrib.gis.geos.MultiLineString` を格納します。"

msgid "Stores a :class:`~django.contrib.gis.geos.MultiPolygon`."
msgstr ":class:`~django.contrib.gis.geos.MultiPolygon` を格納します。"

msgid "Stores a :class:`~django.contrib.gis.geos.GeometryCollection`."
msgstr ":class:`~django.contrib.gis.geos.GeometryCollection` を格納します。"

msgid "``RasterField``"
msgstr "``RasterField``"

msgid "Stores a :class:`~django.contrib.gis.gdal.GDALRaster`."
msgstr ":class:`~django.contrib.gis.gdal.GDALRaster` を格納します。"

msgid "``RasterField`` is currently only implemented for the PostGIS backend."
msgstr "``RasterField`` は現在、PostGIS バックエンドのみで実装されています。"

msgid "Spatial Field Options"
msgstr "空間フィールドのオプション"

msgid ""
"In addition to the regular :ref:`common-model-field-options` available for "
"Django model fields, spatial fields have the following additional options. "
"All are optional."
msgstr ""
"Django のモデルフィールドで利用できる通常の :ref:`common-model-field-"
"options` に加えて、空間フィールドには以下の追加オプションがあります。すべてオ"
"プションです。"

msgid ""
"Sets the SRID [#fnogcsrid]_ (Spatial Reference System Identity) of the "
"geometry field to the given value. Defaults to 4326 (also known as "
"`WGS84`__, units are in degrees of longitude and latitude)."
msgstr ""
"ジオメトリフィールドの SRID [#fnogcsrid]_ (Spatial Reference System "
"Identity) を指定した値に設定します。デフォルトは 4326 (別名 `WGS84`__ 、単位"
"は緯度経度)。"

msgid "Selecting an SRID"
msgstr "SRID の選択"

msgid ""
"Choosing an appropriate SRID for your model is an important decision that "
"the developer should consider carefully.  The SRID is an integer specifier "
"that corresponds to the projection system that will be used to interpret the "
"data in the spatial database. [#fnsrid]_  Projection systems give the "
"context to the coordinates that specify a location.  Although the details of "
"`geodesy`__ are beyond the scope of this documentation, the general problem "
"is that the earth is spherical and representations of the earth (e.g., paper "
"maps, web maps) are not."
msgstr ""
"モデルに適切な SRID を選択することは、開発者が慎重に検討すべき重要な決定事項"
"です。SRIDは、空間データベースのデータを解釈するために使用される投影システム"
"に対応する整数指定子です。 [#fnsrid]_ 投影システムは、場所を特定する座標にコ"
"ンテキストを与えます。測地学 `geodesy`__ の詳細はこのドキュメントの範囲外です"
"が、一般的な問題は、地球は球形であり、地球の表現 (紙の地図やウェブマップな"
"ど) は球形ではないということです。"

msgid ""
"Most people are familiar with using latitude and longitude to reference a "
"location on the earth's surface.  However, latitude and longitude are "
"angles, not distances. In other words, while the shortest path between two "
"points on a flat surface is a straight line, the shortest path between two "
"points on a curved surface (such as the earth) is an *arc* of a `great "
"circle`__. [#fnthematic]_  Thus, additional computation is required to "
"obtain distances in planar units (e.g., kilometers and miles).  Using a "
"geographic coordinate system may introduce complications for the developer "
"later on. For example, SpatiaLite does not have the capability to perform "
"distance calculations between geometries using geographic coordinate "
"systems, e.g. constructing a query to  find all points within 5 miles of a "
"county boundary stored as WGS84. [#fndist]_"
msgstr ""
"ほとんどの人は、緯度と経度を使って地表上の位置を参照することに慣れています。"
"しかし、緯度と経度は距離ではなく角度です。言い換えれば、平面上の2点間の最短経"
"路は直線ですが、(地球のような) 曲面上の2点間の最短経路は、`great circle`__ "
"の *弧* です [#fnthematic]_ 。したがって、平面単位 (キロメートルやマイルな"
"ど) で距離を求めるには、追加の計算が必要になります。地理座標系を使うことは、"
"開発者に後で複雑な問題をもたらすかもしれません。例えば、SpatiaLiteでは、地理"
"座標系を使用してジオメトリ間の距離計算を実行する機能がないため、WGS84で格納さ"
"れた郡の境界から5マイル以内のすべてのポイントを検索するクエリを作成することは"
"できません [#fndist]_ 。"

msgid ""
"Portions of the earth's surface may projected onto a two-dimensional, or "
"Cartesian, plane.  Projected coordinate systems are especially convenient "
"for region-specific applications, e.g., if you know that your database will "
"only cover geometries in `North Kansas`__, then you may consider using "
"projection system specific to that region.  Moreover, projected coordinate "
"systems are defined in Cartesian units (such as meters or feet), easing "
"distance calculations."
msgstr ""
"地球の地表の一部は、二次元またはデカルト平面に投影できます。投影座標系は地域"
"固有のアプリケーションに特に便利であり、たとえば、データベースで `North "
"Kansas`__ エリアのジオメトリだけを扱うことを知っている場合は、その地域固有の"
"投影系を使用することを検討できます。さらに、投影座標系はデカルト単位 (メート"
"ルやフィートなど) で定義されており、距離の計算が容易になります。"

msgid ""
"If you wish to perform arbitrary distance queries using non-point geometries "
"in WGS84 in PostGIS and you want decent performance, enable the :attr:"
"`GeometryField.geography` keyword so that :ref:`geography database type "
"<geography-type>` is used instead."
msgstr ""
"PostGISでWGS84の点以外のジオメトリを使用して任意の距離クエリを実行したい場合"
"で、適切なパフォーマンスが必要な場合は、 :attr:`GeometryField.geography` キー"
"ワードを有効にして、代わりに :ref:`ジオグラフィデータベース型 <geography-"
"type>` が使用されるようにします。"

msgid "Additional Resources:"
msgstr "追加のリソース:"

msgid ""
"`spatialreference.org`__: A Django-powered database of spatial reference "
"systems."
msgstr ""
"`spatialreference.org`__: Djangoを使用した空間参照システムのデータベース。"

msgid ""
"`The State Plane Coordinate System`__: A website covering the various "
"projection systems used in the United States.  Much of the U.S. spatial data "
"encountered will be in one of these coordinate systems rather than in a "
"geographic coordinate system such as WGS84."
msgstr ""
"`The State Plane Coordinate System`__: 米国で使用されている様々な投影系をカ"
"バーするウェブサイトです。WGS84のような地理座標系ではなく、米国で遭遇する空間"
"データの多くはこれらの座標系のいずれかになります。"

msgid "``spatial_index``"
msgstr "``spatial_index``"

msgid ""
"Defaults to ``True``.  Creates a spatial index for the given geometry field."
msgstr ""
"デフォルトは ``True`` です。指定されたジオメトリフィールドに空間インデックス"
"を作成します。"

msgid ""
"This is different from the ``db_index`` field option because spatial indexes "
"are created in a different manner than regular database indexes.  "
"Specifically, spatial indexes are typically created using a variant of the R-"
"Tree, while regular database indexes typically use B-Trees."
msgstr ""
"空間インデックスは通常のデータベースインデックスとは異なる方法で作成されるた"
"め、これは ``db_index`` フィールドオプションとは異なります。具体的には、空間"
"インデックスは通常 R-Tree を使用して作成されますが、通常のデータベースイン"
"デックスは B-Tree を使用します。"

msgid "Geometry Field Options"
msgstr "ジオメトリフィールドのオプション"

msgid ""
"There are additional options available for Geometry fields. All the "
"following options are optional."
msgstr ""
"ジオメトリフィールドには追加オプションがあります。以下のすべてのオプションは"
"任意です。"

msgid "``dim``"
msgstr "``dim``"

msgid ""
"This option may be used for customizing the coordinate dimension of the "
"geometry field.  By default, it is set to 2, for representing two-"
"dimensional geometries.  For spatial backends that support it, it may be set "
"to 3 for three-dimensional support."
msgstr ""
"このオプションは、ジオメトリフィールドの座標次元をカスタマイズするために使用"
"できます。デフォルトでは、2次元ジオメトリを表すために2に設定されています。そ"
"れをサポートする空間バックエンドでは、3次元をサポートするために3に設定できま"
"す。"

msgid ""
"At this time 3D support is limited to the PostGIS and SpatiaLite backends."
msgstr ""
"現時点では、3Dサポートは PostGIS と SpatiaLite バックエンドに限られています。"

msgid "``geography``"
msgstr "``geography``"

msgid ""
"If set to ``True``, this option will create a database column of type "
"geography, rather than geometry.  Please refer to the :ref:`geography type "
"<geography-type>` section below for more details."
msgstr ""
"このオプションを ``True`` に設定すると、ジオメトリ型ではなくジオグラフィ型の"
"データベースカラムが作成されます。詳細は以下の :ref:`ジオグラフィ型 "
"<geography-type>` セクションを参照してください。"

msgid ""
"Geography support is limited to PostGIS and will force the SRID to be 4326."
msgstr ""
"ジオグラフィのサポートは PostGIS に限定され、SRID が 4326 に強制されます。"

msgid "Geography Type"
msgstr "ジオグラフィ (Geography) 型"

msgid ""
"The geography type provides native support for spatial features represented "
"with geographic coordinates (e.g., WGS84 longitude/latitude). "
"[#fngeography]_ Unlike the plane used by a geometry type, the geography type "
"uses a spherical representation of its data.  Distance and measurement "
"operations performed on a geography column automatically employ great circle "
"arc calculations and return linear units.  In other words, when "
"``ST_Distance`` is called on two geographies, a value in meters is returned "
"(as opposed to degrees if called on a geometry column in WGS84)."
msgstr ""
"ジオグラフィ (geography) 型は、地理座標 (例えばWGS84経度/緯度)で表現された空"
"間特徴をネイティブにサポートします [#fngeography]_ 。ジオメトリ型が使用する平"
"面とは異なり、ジオグラフィ型はデータを球体で表現します。ジオグラフィのカラム"
"に対して行われる距離や計測の操作は、自動的に大円弧の計算を行い、線形単位を返"
"します。言い換えると、2つのジオグラフィに対して ``ST_Distance`` を呼び出す"
"と、メートル単位の値が返されます (WGS84のジオメトリ列に対して呼び出した場合は"
"度単位になります) 。"

msgid ""
"Because geography calculations involve more mathematics, only a subset of "
"the PostGIS spatial lookups are available for the geography type. "
"Practically, this means that in addition to the :ref:`distance lookups "
"<distance-lookups>` only the following additional :ref:`spatial lookups "
"<spatial-lookups>` are available for geography columns:"
msgstr ""
"地理計算にはより多くの数学が関わるため、地理型に対して使用できる PostGIS 空間"
"ルックアップのサブセットが限られています。具体的には、:ref:`距離ルックアップ "
"<distance-lookups>` に加えて、ジオグラフィカラム用に利用可能な追加の :ref:`空"
"間ルックアップ <spatial-lookups>` は以下のみです。"

msgid ""
"If you need to use a spatial lookup or aggregate that doesn't support the "
"geography type as input, you can use the :class:`~django.db.models.functions."
"Cast` database function to convert the geography column to a geometry type "
"in the query::"
msgstr ""
"入力としてジオグラフィ型をサポートしていない空間ルックアップや集計を使用する"
"必要がある場合、 :class:`~django.db.models.functions.Cast` データベース関数を"
"使用して、クエリの中でジオグラフィカラムをジオメトリ型に変換できます:"

msgid ""
"For more information, the PostGIS documentation contains a helpful section "
"on determining `when to use geography data type over geometry data type "
"<https://postgis.net/docs/using_postgis_dbmanagement."
"html#PostGIS_GeographyVSGeometry>`_."
msgstr ""
"詳細については、PostGISのドキュメントに `ジオメトリ型ではなくジオグラフィ型を"
"使うべき場合 <https://postgis.net/docs/using_postgis_dbmanagement."
"html#PostGIS_GeographyVSGeometry>`_. を決定するのに役立つセクションがありま"
"す。"

msgid ""
"OpenGIS Consortium, Inc., `Simple Feature Specification For SQL <https://www."
"ogc.org/standard/sfs/>`_."
msgstr ""
"OpenGIS Consortium, Inc., `Simple Feature Specification For SQL <https://www."
"ogc.org/standard/sfs/>`_."

msgid ""
"*See id.* at Ch. 2.3.8, p. 39 (Geometry Values and Spatial Reference "
"Systems)."
msgstr ""
"*See id.* at Ch. 2.3.8, p. 39 (Geometry Values and Spatial Reference "
"Systems)."

msgid ""
"Typically, SRID integer corresponds to an EPSG (`European Petroleum Survey "
"Group <https://epsg.org/>`_) identifier.  However, it may also be associated "
"with custom projections defined in spatial database's spatial reference "
"systems table."
msgstr ""
"通常、SRID 整数は EPSG (`European Petroleum Survey Group <https://epsg.org/"
">`_) 識別子に対応します。しかし、空間データベースの空間参照系テーブルで定義さ"
"れたカスタム投影に関連付けられている場合もあります。"

msgid ""
"Terry A. Slocum, Robert B. McMaster, Fritz C. Kessler, & Hugh H. Howard, "
"*Thematic Cartography and Geographic Visualization* (Prentice Hall, 2nd "
"edition), at Ch. 7.1.3."
msgstr ""
"Terry A. Slocum, Robert B. McMaster, Fritz C. Kessler, & Hugh H. Howard, "
"*Thematic Cartography and Geographic Visualization* (Prentice Hall, 2nd "
"edition), at Ch. 7.1.3."

msgid "This limitation does not apply to PostGIS."
msgstr "この制限は PostGIS には適用されません。"

msgid ""
"Please refer to the `PostGIS Geography Type <https://postgis.net/docs/"
"using_postgis_dbmanagement.html#PostGIS_Geography>`_ documentation for more "
"details."
msgstr ""
"詳細は `PostGIS Geography Type <https://postgis.net/docs/"
"using_postgis_dbmanagement.html#PostGIS_Geography>`_ のドキュメントを参照して"
"ください。"

msgid "OGR Inspection"
msgstr "OGR のインスペクション"

msgid "``GeoJSON`` Serializer"
msgstr "``GeoJSON`` シリアライザ"

msgid ""
"GeoDjango provides a specific serializer for the `GeoJSON`__ format. See :"
"doc:`/topics/serialization` for more information on serialization."
msgstr ""
"GeoDjango は `GeoJSON`__ フォーマット専用のシリアライザを提供します。シリアラ"
"イズの詳細については :doc:`/topics/serialization` を参照してください。"

msgid ""
"The ``geojson`` serializer is not meant for round-tripping data, as it has "
"no deserializer equivalent. For example, you cannot use :djadmin:`loaddata` "
"to reload the output produced by this serializer. If you plan to reload the "
"outputted data, use the plain :ref:`json serializer <serialization-formats-"
"json>` instead."
msgstr ""
"``geojson`` シリアライザーはデシリアライザーに相当するものがないため、データ"
"をラウンドトリップするためのものではありません。例えば、 :djadmin:`loaddata` "
"を使用して、このシリアライザーの出力を再読み込みすることはできません。出力さ"
"れたデータをリロードする場合は、代わりにプレーンな :ref:`json シリアライザ "
"<serialization-formats-json>` を使用してください。"

msgid ""
"In addition to the options of the ``json`` serializer, the ``geojson`` "
"serializer accepts the following additional option when it is called by "
"``serializers.serialize()``:"
msgstr ""
"``json`` シリアライザのオプションに加えて、 ``geojson`` シリアライザは "
"``serializers.serialize()`` によって呼び出されたときに、以下の追加オプション"
"を受け付けます:"

msgid ""
"``geometry_field``: A string containing the name of a geometry field to use "
"for the ``geometry`` key of the GeoJSON feature. This is only needed when "
"you have a model with more than one geometry field and you don't want to use "
"the first defined geometry field (by default, the first geometry field is "
"picked)."
msgstr ""
"``geometry_field``: GeoJSON フィーチャの ``geometry`` キーに使用するジオメト"
"リフィールド名を含む文字列。これは、複数のジオメトリフィールドを持つモデル"
"で、最初に定義されたジオメトリフィールドを使用したくない場合にのみ必要となり"
"ます (デフォルトでは、最初に定義されたジオメトリフィールドが選択されます)。"

msgid ""
"``id_field``: A string containing the name of a field to use for the ``id`` "
"key of the GeoJSON feature. By default, the primary key of objects is used."
msgstr ""
"``id_field``: GeoJSONフィーチャの ``id`` キーに使用するフィールド名を含む文字"
"列。デフォルトではオブジェクトの主キーが使用されます。"

msgid ""
"``srid``: The SRID to use for the ``geometry`` content. Defaults to 4326 "
"(WGS 84)."
msgstr ""
"``srid``: ``geometry`` の内容に使用する SRID。デフォルトは 4326 (WGS 84) で"
"す。"

msgid ""
"The :ref:`fields <subset-of-fields>` option can be used to limit fields that "
"will be present in the ``properties`` key, as it works with all other "
"serializers."
msgstr ""
":ref:`fields <subset-of-fields>` オプションは、他のすべてのシリアライザと同様"
"に機能し、``properties`` キーに存在するフィールドを制限するために使用できま"
"す。"

msgid "Would output::"
msgstr "出力は以下の通りです:"

msgid ""
"When the ``fields`` parameter is not specified, the ``geojson`` serializer "
"adds a ``pk`` key to the ``properties`` dictionary with the primary key of "
"the object as the value."
msgstr ""
"``fields`` パラメータが指定されていない場合、``geojson`` シリアライザはオブ"
"ジェクトの主キーを値として持つ ``pk`` キーを ``properties`` 辞書に追加しま"
"す。"

msgid ""
"The ``id`` key for serialized features was added. Also, the ``id_field`` "
"option was added to the ``geojson`` serializer."
msgstr ""
"シリアライズ機能に ``id`` キーが追加されました。また、 ``geojson`` シリアライ"
"ザに ``id_field`` オプションが追加されました。"

msgid "Geographic Sitemaps"
msgstr "地理情報サイトマップ"

msgid ""
"KML is an XML language focused on geographic visualization [#]_. "
"``KMLSitemap`` and its compressed counterpart ``KMZSitemap`` allow you to "
"present geolocated data in a machine-readable format."
msgstr ""
"KML は地理的な視覚化に特化した XML 言語です [#]_ 。 ``KMLSitemap`` とその圧縮"
"版である ``KMZSitemap`` を使えば、地理位置データを機械可読形式で表示できま"
"す。"

msgid "Reference"
msgstr "リファレンス"

msgid "``KMLSitemap``"
msgstr "``KMLSitemap``"

msgid "``KMZSitemap``"
msgstr "``KMZSitemap``"

msgid "https://www.ogc.org/standard/kml/"
msgstr "https://www.ogc.org/standard/kml/"

msgid "Testing GeoDjango apps"
msgstr "GeoDjango アプリのテスト"

msgid ""
"Included in this documentation are some additional notes and settings for :"
"ref:`testing-postgis` users."
msgstr ""
"このドキュメントには、:ref:`testing-postgis` ユーザのための追加の注意事項と設"
"定が含まれています。"

msgid ""
"The settings below have sensible defaults, and shouldn't require manual "
"setting."
msgstr ""
"以下の設定には合理的なデフォルト値が設定されており、手動で設定する必要はあり"
"ません。"

msgid "``POSTGIS_VERSION``"
msgstr "``POSTGIS_VERSION``"

msgid ""
"When GeoDjango's spatial backend initializes on PostGIS, it has to perform "
"an SQL query to determine the version in order to figure out what features "
"are available. Advanced users wishing to prevent this additional query may "
"set the version manually using a 3-tuple of integers specifying the major, "
"minor, and micro version numbers for PostGIS. For example, to configure for "
"PostGIS X.Y.Z you would use::"
msgstr ""
"GeoDjango の空間バックエンドが PostGIS 上で初期化されるとき、どの機能が利用可"
"能かを調べるために、SQL クエリを実行してバージョンを調べる必要があります。こ"
"の追加クエリを防ぎたい上級ユーザは、PostGIS のメジャー、マイナー、マイクロの"
"バージョン番号を指定する整数の 3タプルを使って、バージョンを手動で設定できま"
"す。例えば、PostGIS X.Y.Z を設定するには次のようにします: "

msgid "Obtaining sufficient privileges"
msgstr "適切な権限の取得"

msgid ""
"Depending on your configuration, this section describes several methods to "
"configure a database user with sufficient privileges to run tests for "
"GeoDjango applications on PostgreSQL. If your :ref:`spatial database "
"template <spatialdb_template>` was created like in the instructions, then "
"your testing database user only needs to have the ability to create "
"databases. In other configurations, you may be required to use a database "
"superuser."
msgstr ""
"設定によりますが、このセクションで、PostgreSQL 上の GeoDjango アプリケーショ"
"ンのテストを実行するために必要な権限を持ったデータベースユーザを構成するため"
"の複数の方法が説明されています。もし、指示通りに :ref:`空間データベーステンプ"
"レート <spatialdb_template>` が作成されている場合、テスト用のデータベースユー"
"ザはデータベースを作成する機能のみを持っていれば十分です。他の設定では、デー"
"タベーススーパーユーザを使用する必要があるかもしれません。"

msgid "Create database user"
msgstr "データベースユーザーを作成する"

msgid ""
"To make a database user with the ability to create databases, use the "
"following command:"
msgstr ""
"データベースを作成する権限を持つデータベースユーザーを作成するには、次のコマ"
"ンドを使用します:"

msgid ""
"The ``-R -S`` flags indicate that we do not want the user to have the "
"ability to create additional users (roles) or to be a superuser, "
"respectively."
msgstr ""
"``-R -S`` フラグは、ユーザーに追加のユーザー (ロール) を作成させたり、スー"
"パーユーザーになる権限を持たせたくないことを示しています。"

msgid ""
"Alternatively, you may alter an existing user's role from the SQL shell "
"(assuming this is done from an existing superuser account):"
msgstr ""
"代わりに、既存のユーザーのロールをSQLシェルから変更することもできます (既存の"
"スーパーユーザーアカウントから実行されているとして):"

msgid "Create database superuser"
msgstr "データベースのスーパーユーザーを作成する"

msgid "This may be done at the time the user is created, for example:"
msgstr "これは、たとえばユーザー作成時に行うことができます:"

msgid ""
"Or you may alter the user's role from the SQL shell (assuming this is done "
"from an existing superuser account):"
msgstr ""
"あるいは、SQLシェルからユーザのロールを変更することもできます (既存のスーパー"
"ユーザアカウントから行われると仮定して):"

msgid ""
"On Windows platforms you can use the pgAdmin III utility to add superuser "
"privileges to your database user."
msgstr ""
"Windows プラットフォームでは、pgAdmin III ユーティリティを使用して、データ"
"ベースユーザーにスーパーユーザー権限を追加できます。"

msgid ""
"By default, the PostGIS installer on Windows includes a template spatial "
"database entitled ``template_postgis``."
msgstr ""
"デフォルトでは、Windows 上の PostGIS インストーラには ``template_postgis`` と"
"いうタイトルのテンプレート空間データベースが含まれています。"

msgid "GeoDjango tests"
msgstr "GeoDjangoのテスト"

msgid ""
"To have the GeoDjango tests executed when :ref:`running the Django test "
"suite <running-unit-tests>` with ``runtests.py`` all of the databases in the "
"settings file must be using one of the :ref:`spatial database backends "
"<spatial-backends>`."
msgstr ""
"``runtests.py`` を使用して :ref:`Djangoテストスイートを実行する<running-unit-"
"tests>` 際に GeoDjango テストを実行するには、設定ファイル内のすべてのデータ"
"ベースが :ref:`空間データベースバックエンド<spatial-backends>` のいずれかを使"
"用している必要があります。"

msgid ""
"The following is an example bare-bones settings file with spatial backends "
"that can be used to run the entire Django test suite, including those in :"
"mod:`django.contrib.gis`::"
msgstr ""
"次の内容は、Django テストスイート全体を実行するために使用できる、空っぽの設定"
"ファイルの例です。この設定ファイルには、 :mod:`django.contrib.gis` に含まれる"
"テストも含まれています:"

msgid ""
"Assuming the settings above were in a ``postgis.py`` file in the same "
"directory as ``runtests.py``, then all Django and GeoDjango tests would be "
"performed when executing the command:"
msgstr ""
"上記の設定が ``runtests.py`` と同じディレクトリにある ``postgis.py`` ファイル"
"にあるとすると、コマンドを実行するときに、すべての Django と GeoDjango のテス"
"トが実行されます:"

msgid "To run only the GeoDjango test suite, specify ``gis_tests``:"
msgstr ""
"GeoDjango のテストスイートだけを実行するには、``gis_tests`` を指定します:"

msgid "GeoDjango Tutorial"
msgstr "GeoDjango チュートリアル"

msgid ""
"GeoDjango is an included contrib module for Django that turns it into a "
"world-class geographic web framework. GeoDjango strives to make it as simple "
"as possible to create geographic web applications, like location-based "
"services. Its features include:"
msgstr ""
"GeoDjangoは、Django用の標準のcontribモジュールであり、それを世界クラスの地理"
"情報Webフレームワークに変えます。GeoDjangoは、位置情報サービスなどの地理情報"
"Webアプリケーションを作成するのを可能な限り簡単にすることを目指しています。そ"
"の特徴は次のとおりです:"

msgid "Django model fields for `OGC`_ geometries and raster data."
msgstr "`OGC`_ ジオメトリとラスターデータ用のDjangoモデルフィールド。"

msgid "Extensions to Django's ORM for querying and manipulating spatial data."
msgstr "空間データのクエリと操作のための Django の ORM の拡張機能。"

msgid ""
"Loosely-coupled, high-level Python interfaces for GIS geometry and raster "
"operations and data manipulation in different formats."
msgstr ""
"GISジオメトリとラスタの操作、およびさまざまな形式のデータ操作のための、疎結合"
"の高レベルPythonインターフェース。"

msgid "Editing geometry fields from the admin."
msgstr "admin アプリケーションからジオメトリフィールドを編集する"

msgid ""
"This tutorial assumes familiarity with Django; thus, if you're brand new to "
"Django, please read through the :doc:`regular tutorial </intro/tutorial01>` "
"to familiarize yourself with Django first."
msgstr ""
"このチュートリアルは Django に慣れていることを前提にしています。従って、 "
"Django が初めての方は、まず :doc:`通常のチュートリアル </intro/tutorial01>` "
"を読んで Django に慣れてください。"

msgid ""
"GeoDjango has additional requirements beyond what Django requires -- please "
"consult the :doc:`installation documentation <install/index>` for more "
"details."
msgstr ""
"GeoDjangoには、Django の要件以上の追加要件があります。詳細は :doc:`インストー"
"ルのドキュメント <install/index>` を参照してください。"

msgid ""
"This tutorial will guide you through the creation of a geographic web "
"application for viewing the `world borders`_. [#]_ Some of the code used in "
"this tutorial is taken from and/or inspired by the `GeoDjango basic apps`_ "
"project. [#]_"
msgstr ""
"このチュートリアルでは、地理情報を表示するためのウェブアプリケーションの作成"
"方法を説明します。このチュートリアルでは、`world borders`_ [#]_ を表示しま"
"す。このチュートリアルで使用されるコードの一部は、`GeoDjango basic apps`_ プ"
"ロジェクトから取得されたか、その影響を受けています。 [#]_"

msgid ""
"Proceed through the tutorial sections sequentially for step-by-step "
"instructions."
msgstr "チュートリアルの各セクションを順を追って進んでください。"

msgid "Setting Up"
msgstr "セットアップ"

msgid "Create a Spatial Database"
msgstr "空間データベースを作成する"

msgid ""
"Typically no special setup is required, so you can create a database as you "
"would for any other project. We provide some tips for selected databases:"
msgstr ""
"通常、特別な設定は必要ないので、他のプロジェクトと同じようにデータベースを作"
"成できます。選択したデータベースについて、いくつかのヒントを提供します:"

msgid ":doc:`install/postgis`"
msgstr ":doc:`install/postgis`"

msgid ":doc:`install/spatialite`"
msgstr ":doc:`install/spatialite`"

msgid "Create a New Project"
msgstr "新しいプロジェクトを作成する"

msgid ""
"Use the standard ``django-admin`` script to create a project called "
"``geodjango``:"
msgstr ""
"標準の ``django-admin`` スクリプトを使って、 ``geodjango`` というプロジェクト"
"を作成します:"

msgid ""
"This will initialize a new project. Now, create a ``world`` Django "
"application within the ``geodjango`` project:"
msgstr ""
"これで新しいプロジェクトが初期化されます。ここで、 ``geodjango`` プロジェクト"
"の中に ``world`` Django アプリケーションを作成します:"

msgid "Configure ``settings.py``"
msgstr "``settings.py`` の設定"

msgid ""
"The ``geodjango`` project settings are stored in the ``geodjango/settings."
"py`` file. Edit the database connection settings to match your setup::"
msgstr ""
"``geodjango`` プロジェクトの設定は ``geodjango/settings.py`` ファイルに保存さ"
"れています。データベース接続設定を編集して、自分の環境に合わせてください:"

msgid ""
"In addition, modify the :setting:`INSTALLED_APPS` setting to include :mod:"
"`django.contrib.admin`, :mod:`django.contrib.gis`, and ``world`` (your newly "
"created application)::"
msgstr ""
"さらに、 :setting:`INSTALLED_APPS` 設定を変更して、 :mod:`django.contrib."
"admin`, :mod:`django.contrib.gis`, ``world`` (新しく作成したアプリケーショ"
"ン) を含めるようにします:"

msgid "Geographic Data"
msgstr "地理データ"

msgid "World Borders"
msgstr "世界の国境"

msgid ""
"The world borders data is available in this `zip file`__.  Create a ``data`` "
"directory in the ``world`` application, download the world borders data, and "
"unzip. On GNU/Linux platforms, use the following commands:"
msgstr ""
"世界の国境データはこの `zip file`__ にあります。アプリケーション ``world`` "
"に ``data`` ディレクトリを作成し、国境データをダウンロードして解凍してくださ"
"い。GNU/Linuxプラットフォームでは、以下のコマンドを使用します:"

msgid ""
"The world borders ZIP file contains a set of data files collectively known "
"as an `ESRI Shapefile`__, one of the most popular geospatial data formats.  "
"When unzipped, the world borders dataset includes files with the following "
"extensions:"
msgstr ""
"このZIPファイルには、最も一般的な地理空間データ形式の1つである `ESRI "
"Shapefile`__ として知られているデータファイルが含まれています。解凍すると、"
"world borders データセットには以下の拡張子のファイルが含まれます:"

msgid "``.shp``: Holds the vector data for the world borders geometries."
msgstr "``.shp``: 世界の国境のジオメトリのベクトルデータを保持します。"

msgid "``.shx``: Spatial index file for geometries stored in the ``.shp``."
msgstr ""
"``.shx``: ``.shp`` に保存されているジオメトリのための空間インデックスファイ"
"ル。"

msgid ""
"``.dbf``: Database file for holding non-geometric attribute data (e.g., "
"integer and character fields)."
msgstr ""
"``.dbf``: 整数や文字列フィールドなどの非ジオメトリ属性データを保持するデータ"
"ベースファイル。"

msgid ""
"``.prj``: Contains the spatial reference information for the geographic data "
"stored in the shapefile."
msgstr ""
"``.prj``: シェープファイルに格納されている地理データの空間参照情報が含まれて"
"います。"

msgid "Use ``ogrinfo`` to examine spatial data"
msgstr "``ogrinfo`` を使って空間データを調べる"

msgid ""
"The GDAL ``ogrinfo`` utility allows examining the metadata of shapefiles or "
"other vector data sources:"
msgstr ""
"GDAL の ``ogrinfo`` ユーティリティを使うと、シェープファイルやその他のベクト"
"ルデータソースのメタデータを調べることができます:"

msgid ""
"``ogrinfo`` tells us that the shapefile has one layer, and that this layer "
"contains polygon data.  To find out more, we'll specify the layer name and "
"use the ``-so`` option to get only the important summary information:"
msgstr ""
"``ogrinfo`` によると、シェープファイルには1つのレイヤーがあり、そのレイヤーに"
"はポリゴンデータが含まれています。詳細を知るために、レイヤー名を指定して ``-"
"so`` オプションを使用して重要なサマリ情報のみを取得します:"

msgid ""
"This detailed summary information tells us the number of features in the "
"layer (246), the geographic bounds of the data, the spatial reference system "
"(\"SRS WKT\"), as well as type information for each attribute field. For "
"example, ``FIPS: String (2.0)`` indicates that the ``FIPS`` character field "
"has a maximum length of 2.  Similarly, ``LON: Real (8.3)`` is a floating-"
"point field that holds a maximum of 8 digits up to three decimal places."
msgstr ""
"この詳細なサマリー情報には、レイヤー内のフィーチャ数 (246)、データの地理的範"
"囲、空間参照システム (\"SRS WKT\")、および各属性フィールドの型情報が記載され"
"ています。たとえば、``FIPS: String (2.0)`` は、 ``FIPS`` 文字列フィールドの最"
"大長が2であることを示しています。同様に、 ``LON: Real (8.3)`` は、最大8桁まで"
"の浮動小数点フィールドで、小数点以下3桁までの数字を保持します。"

msgid "Geographic Models"
msgstr "地理情報モデル"

msgid "Defining a Geographic Model"
msgstr "地理情報モデルを定義する"

msgid ""
"Now that you've examined your dataset using ``ogrinfo``, create a GeoDjango "
"model to represent this data::"
msgstr ""
"さて、 ``ogrinfo`` を使ってデータセットを調べたので、このデータを表す "
"GeoDjango モデルを作成しましょう:"

msgid ""
"Note that the ``models`` module is imported from ``django.contrib.gis.db``."
msgstr ""
"``models`` モジュールが ``django.contrib.gis.db`` からインポートされているこ"
"とに注意してください。"

msgid ""
"The default spatial reference system for geometry fields is WGS84 (meaning "
"the `SRID`__ is 4326) -- in other words, the field coordinates are in "
"longitude, latitude pairs in units of degrees.  To use a different "
"coordinate system, set the SRID of the geometry field with the ``srid`` "
"argument. Use an integer representing the coordinate system's EPSG code."
msgstr ""
"ジオメトリフィールドのデフォルトの空間参照系は WGS84 です (`SRID`__ は 4326 "
"を意味します) 。つまり、フィールドの座標は度単位の経度、緯度のペアです。別の"
"座標系を使用するには、``srid`` 引数を使用してジオメトリフィールドの SRID を設"
"定します。座標系の EPSG コードを表す整数を使用します。"

msgid "Run ``migrate``"
msgstr "``migrate`` を実行する"

msgid ""
"After defining your model, you need to sync it with the database. First, "
"create a database migration:"
msgstr ""
"モデルを定義した後、データベースと同期する必要があります。まず、データベース"
"マイグレーションを作成してください:"

msgid ""
"Let's look at the SQL that will generate the table for the ``WorldBorder`` "
"model:"
msgstr "``WorldBorder`` モデルのテーブルを生成するSQLを見てみましょう:"

msgid "This command should produce the following output:"
msgstr "このコマンドを実行すると、次の出力が生成されるはずです:"

msgid ""
"If this looks correct, run :djadmin:`migrate` to create this table in the "
"database:"
msgstr ""
"これが正しければ、 :djadmin:`migrate` を実行して、このテーブルをデータベース"
"に作成してください。"

msgid "Importing Spatial Data"
msgstr "空間データをインポートする"

msgid ""
"This section will show you how to import the world borders shapefile into "
"the database via GeoDjango models using the :doc:`layermapping`."
msgstr ""
"このセクションでは、 :doc:`layermapping` を使用して、GeoDjangoモデルを介して"
"世界の国境のシェープファイルをデータベースにインポートする方法を紹介します。"

msgid ""
"There are many different ways to import data into a spatial database -- "
"besides the tools included within GeoDjango, you may also use the following:"
msgstr ""
"空間データベースにデータをインポートする方法は色々あります。GeoDjango に含ま"
"れるツール以外にも、以下のような方法があります:"

msgid ""
"`ogr2ogr`_: A command-line utility included with GDAL that can import many "
"vector data formats into PostGIS, MySQL, and Oracle databases."
msgstr ""
"`ogr2ogr`_ は、GDAL に含まれるコマンドラインユーティリティであり、多くのベク"
"トルデータ形式を PostGIS、MySQL、および Oracle データベースにインポートできま"
"す。"

msgid ""
"`shp2pgsql`_: This utility included with PostGIS imports ESRI shapefiles "
"into PostGIS."
msgstr ""
"`shp2pgsql`_: このユーティリティはPostGISに含まれ、ESRI shapefileをPostGISに"
"インポートします。"

msgid "GDAL Interface"
msgstr "GDAL インターフェース"

msgid ""
"Earlier, you used ``ogrinfo`` to examine the contents of the world borders "
"shapefile.  GeoDjango also includes a Pythonic interface to GDAL's powerful "
"OGR library that can work with all the vector data sources that OGR supports."
msgstr ""
"先ほど、 ``ogrinfo`` を使って世界の国境のシェープファイルの中身を調べました"
"ね。GeoDjango には、GDAL の強力な OGR ライブラリへの Pythonic インタフェース"
"も含まれており、 OGR がサポートしている全てのベクトルデータソースを扱うことが"
"できます。"

msgid "First, invoke the Django shell:"
msgstr "まず、Django シェルを起動します:"

msgid ""
"If you downloaded the :ref:`worldborders` data earlier in the tutorial, then "
"you can determine its path using Python's :class:`pathlib.Path`:"
msgstr ""
"チュートリアルの最初の方で :ref:`worldborders` データをダウンロードしている場"
"合は、Pythonの :class:`pathlib.Path` を使用してそのパスを指定できます:"

msgid ""
"Now, open the world borders shapefile using GeoDjango's :class:`~django."
"contrib.gis.gdal.DataSource` interface:"
msgstr ""
"ここで、GeoDjango の :class:`~django.contrib.gis.gdal.DataSource` インタ"
"フェースを使って、 world borders shapefile を開いてください:"

msgid ""
"Data source objects can have different layers of geospatial features; "
"however, shapefiles are only allowed to have one layer:"
msgstr ""
"データソースオブジェクトは異なるレイヤーの地理空間フィーチャを持つことができ"
"ます。しかし、シェープファイルは 1 つのレイヤーしか持つことができません:"

msgid ""
"You can see the layer's geometry type and how many features it contains:"
msgstr ""
"レイヤーのジオメトリタイプと、含まれているフィーチャの数を確認できます:"

msgid ""
"Unfortunately, the shapefile data format does not allow for greater "
"specificity with regards to geometry types.  This shapefile, like many "
"others, actually includes ``MultiPolygon`` geometries, not Polygons. It's "
"important to use a more general field type in models: a GeoDjango "
"``MultiPolygonField`` will accept a ``Polygon`` geometry, but a "
"``PolygonField`` will not accept a ``MultiPolygon`` type geometry.  This is "
"why the ``WorldBorder`` model defined above uses a ``MultiPolygonField``."
msgstr ""
"残念ながら、シェープファイルのデータ形式では、ジオメトリのタイプをより細かく"
"指定することはできません。このシェープファイルは、他の多くのファイル同様、ポ"
"リゴンではなく、 ``MultiPolygon`` ジオメトリを含んでいます。GeoDjango の "
"``MultiPolygonField`` は ``Polygon`` 型のジオメトリを受け付けますが、 "
"``PolygonField`` は ``MultiPolygon`` 型のジオメトリを受け付けません。これが、"
"上で定義した ``WorldBorder`` モデルが ``MultiPolygonField`` を使用している理"
"由です。"

msgid ""
"The :class:`~django.contrib.gis.gdal.Layer` may also have a spatial "
"reference system associated with it.  If it does, the ``srs`` attribute will "
"return a :class:`~django.contrib.gis.gdal.SpatialReference` object:"
msgstr ""
":class:`~django.contrib.gis.gdal.Layer` には関連付けられた空間参照システムも"
"存在する場合があります。もしそうであれば、``srs`` 属性は :class:`~django."
"contrib.gis.gdal.SpatialReference` オブジェクトを返します。"

msgid ""
"This shapefile is in the popular WGS84 spatial reference system -- in other "
"words, the data uses longitude, latitude pairs in units of degrees."
msgstr ""
"このシェープファイルは一般的なWGS84空間参照システム、つまりデータは度の単位で"
"経度緯度の組を使用しています。"

msgid ""
"In addition, shapefiles also support attribute fields that may contain "
"additional data.  Here are the fields on the World Borders layer:"
msgstr ""
"さらに、シェープファイルは追加データを含む属性フィールドもサポートしていま"
"す。以下はWorld Bordersレイヤーのフィールドです:"

msgid ""
"The following code will let you examine the OGR types (e.g. integer or "
"string) associated with each of the fields:"
msgstr ""
"以下のコードで、各フィールドに関連するOGRタイプ (整数や文字列など) を調べるこ"
"とができます:"

msgid ""
"You can iterate over each feature in the layer and extract information from "
"both the feature's geometry (accessed via the ``geom`` attribute) as well as "
"the feature's attribute fields (whose **values** are accessed via ``get()`` "
"method):"
msgstr ""
"レイヤー内の各フィーチャをイテレートし、フィーチャのジオメトリ (``geom`` 属性"
"でアクセス) とフィーチャの属性フィールド (``get()`` メソッドで **値** にアク"
"セス) の両方から情報を抽出できます:"

msgid ":class:`~django.contrib.gis.gdal.Layer` objects may be sliced:"
msgstr ""
":class:`~django.contrib.gis.gdal.Layer` オブジェクトはスライス可能です。"

msgid "And individual features may be retrieved by their feature ID:"
msgstr "また、個々のフィーチャは、フィーチャ ID で検索できます:"

msgid "Boundary geometries may be exported as WKT and GeoJSON:"
msgstr "国境ジオメトリは、WKT および GeoJSON としてエクスポートできます:"

msgid "``LayerMapping``"
msgstr "``LayerMapping``"

msgid ""
"To import the data, use a ``LayerMapping`` in a Python script. Create a file "
"called ``load.py`` inside the ``world`` application, with the following "
"code::"
msgstr ""
"データをインポートするには、Pythonスクリプト内で ``LayerMapping`` を使用しま"
"す。次のコードを含む ``world`` アプリケーション内に ``load.py`` というファイ"
"ルを作成してください:"

msgid "A few notes about what's going on:"
msgstr "何が起こっているかについての、ちょっとしたノート:"

msgid ""
"Each key in the ``world_mapping`` dictionary corresponds to a field in the "
"``WorldBorder`` model.  The value is the name of the shapefile field that "
"data will be loaded from."
msgstr ""
"``world_mapping`` 辞書の各キーは ``WorldBorder`` モデル内のフィールドに対応し"
"ます。値はデータが読み込まれる shapefile フィールドの名前です。"

msgid ""
"The key ``mpoly`` for the geometry field is ``MULTIPOLYGON``, the geometry "
"type GeoDjango will import the field as.  Even simple polygons in the "
"shapefile will automatically be converted into collections prior to "
"insertion into the database."
msgstr ""
"ジオメトリフィールドのキー ``mpoly`` は ``MULTIPOLYGON`` で、 GeoDjango がこ"
"のフィールドをインポートするジオメトリタイプです。シェープファイル内の単純な"
"ポリゴンも、データベースに挿入する前に自動的にコレクションに変換されます。"

msgid ""
"The path to the shapefile is not absolute -- in other words, if you move the "
"``world`` application (with ``data`` subdirectory) to a different location, "
"the script will still work."
msgstr ""
"シェープファイルへのパスは絶対パスではないことに注意してください。つまり、 "
"``world`` アプリケーション ( ``data`` サブディレクトリを含む) を別の場所に移"
"動しても、スクリプトは動作します。"

msgid ""
"The ``transform`` keyword is set to ``False`` because the data in the "
"shapefile does not need to be converted -- it's already in WGS84 (SRID=4326)."
msgstr ""
"``transform`` キーワードは ``False`` に設定されています。なぜなら、shapefile "
"のデータは変換する必要がないためです。これはすでに WGS84 (SRID=4326) であるか"
"らです。"

msgid ""
"Afterward, invoke the Django shell from the ``geodjango`` project directory:"
msgstr ""
"その後、``geodjango`` プロジェクトディレクトリから Django シェルを呼び出して"
"ください。"

msgid ""
"Next, import the ``load`` module, call the ``run`` routine, and watch "
"``LayerMapping`` do the work:"
msgstr ""
"次に、``load`` モジュールをインポートし、 ``run`` ルーチンを呼び出して、 "
"``LayerMapping`` が作業を行う様子を見てください:"

msgid "Try ``ogrinspect``"
msgstr "``ogrinspect`` を試す"

msgid ""
"Now that you've seen how to define geographic models and import data with "
"the :doc:`layermapping`, it's possible to further automate this process with "
"use of the :djadmin:`ogrinspect` management command.  The :djadmin:"
"`ogrinspect` command  introspects a GDAL-supported vector data source (e.g., "
"a shapefile) and generates a model definition and ``LayerMapping`` "
"dictionary automatically."
msgstr ""
":doc:`layermapping` で地理情報モデルを定義し、データをインポートする方法を説"
"明しましたが、 :djadmin:`ogrinspect` 管理コマンドを使用することで、このプロセ"
"スをさらに自動化できます。 :djadmin:`ogrinspect` コマンドは GDAL がサポートす"
"るベクトルデータソース (例えばシェープファイル) をイントロスペクトし、モデル"
"定義と ``LayerMapping`` 辞書を自動的に生成します。"

msgid "The general usage of the command goes as follows:"
msgstr "コマンドの一般的な使用法は以下の通りです: "

msgid ""
"``data_source`` is the path to the GDAL-supported data source and "
"``model_name`` is the name to use for the model.  Command-line options may "
"be used to further define how the model is generated."
msgstr ""
"``data_source`` は GDAL がサポートするデータソースへのパスであり、 "
"``model_name`` はモデルに使用する名前である。コマンドラインオプションを使用す"
"ると、モデルの生成方法をさらに定義できます。"

msgid ""
"For example, the following command nearly reproduces the ``WorldBorder`` "
"model and mapping dictionary created above, automatically:"
msgstr ""
"たとえば、以下のコマンドを実行すると、ほぼ先ほど作成した ``WorldBorder`` モデ"
"ルとマッピング辞書を自動的に再現します。"

msgid "A few notes about the command-line options given above:"
msgstr "上記のコマンドラインオプションに関していくつかの注意点があります:"

msgid "The ``--srid=4326`` option sets the SRID for the geographic field."
msgstr "``--srid=4326`` オプションは、地理フィールドのSRIDを設定します。"

msgid ""
"The ``--mapping`` option tells ``ogrinspect`` to also generate a mapping "
"dictionary for use with :class:`~django.contrib.gis.utils.LayerMapping`."
msgstr ""
"``--mapping`` オプションは、``ogrinspect`` に、 :class:`~django.contrib.gis."
"utils.LayerMapping` と一緒に使用するマッピング辞書を生成するよう指示します。"

msgid ""
"The ``--multi`` option is specified so that the geographic field is a :class:"
"`~django.contrib.gis.db.models.MultiPolygonField` instead of just a :class:"
"`~django.contrib.gis.db.models.PolygonField`."
msgstr ""
"オプション ``--multi`` を指定すると、地理フィールドが単なる :class:`~django."
"contrib.gis.db.models.PolygonField` ではなく :class:`~django.contrib.gis.db."
"models.MultiPolygonField` になります。"

msgid ""
"The command produces the following output, which may be copied directly into "
"the ``models.py`` of a GeoDjango application::"
msgstr ""
"このコマンドは次のような出力をします。GeoDjango アプリケーションの ``models."
"py`` に直接コピーできます:"

msgid "Spatial Queries"
msgstr "空間クエリ"

msgid ""
"GeoDjango adds spatial lookups to the Django ORM.  For example, you can find "
"the country in the ``WorldBorder`` table that contains a particular point.  "
"First, fire up the management shell:"
msgstr ""
"GeoDjango は Django の ORM に空間ルックアップを追加します。たとえば、特定の地"
"点を含む ``WorldBorder`` テーブルの国を見つけることができます。まず、管理シェ"
"ルを起動してください:"

msgid "Now, define a point of interest [#]_:"
msgstr "ここで、注目するポイント [#]_ を定義します:"

msgid ""
"The ``pnt_wkt`` string represents the point at -95.3385 degrees longitude, "
"29.7245 degrees latitude.  The geometry is in a format known as Well Known "
"Text (WKT), a standard issued by the Open Geospatial Consortium (OGC). [#]_  "
"Import the ``WorldBorder`` model, and perform a ``contains`` lookup using "
"the ``pnt_wkt`` as the parameter:"
msgstr ""
"``pnt_wkt`` 文字列は、経度 -95.3385 度、緯度 29.7245 度にある点を表します。こ"
"の幾何情報は Well Known Text (WKT) として知られる形式で表されており、これは "
"Open Geospatial Consortium (OGC) によって発行された標準です。 [#]_ "
"``WorldBorder`` モデルをインポートし、``pnt_wkt`` をパラメータとして使用して "
"``contains`` ルックアップを実行します:"

msgid ""
"Here, you retrieved a ``QuerySet`` with only one model: the border of the "
"United States (exactly what you would expect)."
msgstr ""
"ここでは、米国の国境という1つのモデルのみを持つ ``QuerySet`` を取得しました "
"(まさに期待通りです)。"

msgid ""
"Similarly, you may also use a :doc:`GEOS geometry object <geos>`. Here, you "
"can combine the ``intersects`` spatial lookup with the ``get`` method to "
"retrieve only the ``WorldBorder`` instance for San Marino instead of a "
"queryset:"
msgstr ""
"同様に、 :doc:`GEOS ジオメトリオブジェクト <geos>` を使用することもできます。"
"ここでは、 ``intersects`` 空間ルックアップと ``get`` メソッドを組み合わせて、"
"クエリセットの代わりにサンマリノの ``WorldBorder`` インスタンスのみを取得でき"
"ます:"

msgid ""
"The ``contains`` and ``intersects`` lookups are just a subset of the "
"available queries -- the :doc:`db-api` documentation has more."
msgstr ""
"``contains`` と ``intersects`` のルックアップは利用可能なクエリの一部です。 :"
"doc:`db-api` のドキュメントにはさらに多くの内容があります。"

msgid "Automatic Spatial Transformations"
msgstr "座標系の自動変換"

msgid ""
"When doing spatial queries, GeoDjango automatically transforms geometries if "
"they're in a different coordinate system.  In the following example, "
"coordinates will be expressed in `EPSG SRID 32140`__, a coordinate system "
"specific to south Texas **only** and in units of **meters**, not degrees:"
msgstr ""
"空間クエリを実行する際、GeoDjango は、異なる座標系のジオメトリを自動的に変換"
"します。次の例では、座標は `EPSG SRID 32140`__ 、テキサス州南部に固有の座標系"
"であり、単位は **度** ではなく **メートル** で表されます。"

msgid ""
"Note that ``pnt`` may also be constructed with EWKT, an \"extended\" form of "
"WKT that includes the SRID:"
msgstr ""
"``pnt`` は、SRIDを含むWKTの拡張形式であるEWKTで構築することもできることに注意"
"してください。"

msgid ""
"GeoDjango's ORM will automatically wrap geometry values in transformation "
"SQL, allowing the developer to work at a higher level of abstraction:"
msgstr ""
"GeoDjango の ORM は、ジオメトリの値を自動的に変換 SQL でラップし、開発者がよ"
"り高い抽象度で作業できるようにします:"

msgid "Raw queries"
msgstr "素のクエリ"

msgid ""
"When using :doc:`raw queries </topics/db/sql>`, you must wrap your geometry "
"fields so that the field value can be recognized by GEOS:"
msgstr ""
":doc:`素のクエリ </topics/db/sql>` を使用する際は、ジオメトリフィールドをラッ"
"プして、そのフィールド値が GEOS に認識されるようにする必要があります。"

msgid ""
"You should only use raw queries when you know exactly what you're doing."
msgstr ""
"素のクエリを使うのは、自分が何をしているのかよく分かっている場合に限定される"
"べきです。"

msgid "Lazy Geometries"
msgstr "ジオメトリの遅延評価"

msgid ""
"GeoDjango loads geometries in a standardized textual representation.  When "
"the geometry field is first accessed, GeoDjango creates a :class:`~django."
"contrib.gis.geos.GEOSGeometry` object, exposing powerful functionality, such "
"as serialization properties for popular geospatial formats:"
msgstr ""
"GeoDjango はジオメトリを標準化されたテキスト表現で読み込みます。ジオメトリ"
"フィールドに最初にアクセスすると、 GeoDjango は :class:`~django.contrib.gis."
"geos.GEOSGeometry` オブジェクトを生成し、よく使われる地理空間フォーマット用の"
"シリアライズプロパティなどの強力な機能を公開します: "

msgid ""
"This includes access to all of the advanced geometric operations provided by "
"the GEOS library:"
msgstr ""
"これには、GEOSライブラリが提供するすべての高度な幾何演算へのアクセスが含まれ"
"ます:"

msgid "Geographic annotations"
msgstr "地理情報のアノテーション"

msgid ""
"GeoDjango also offers a set of geographic annotations to compute distances "
"and several other operations (intersection, difference, etc.). See the :doc:"
"`functions` documentation."
msgstr ""
"GeoDjangoでは、距離などの地理情報アノテーションを計算するための一連の操作 (交"
"差、差分など) を提供しています。詳細は、 :doc:`functions` ドキュメントを参照"
"してください。"

msgid "Putting your data on the map"
msgstr "データを地図上に配置する"

msgid "Geographic Admin"
msgstr "地理情報の Admin"

msgid ""
":doc:`Django's admin application </ref/contrib/admin/index>` supports "
"editing geometry fields."
msgstr ""
":doc:`Django の admin アプリケーション </ref/contrib/admin/index>` はジオメト"
"リフィールドの編集をサポートしています。"

msgid "Basics"
msgstr "基本"

msgid ""
"The Django admin allows users to create and modify geometries on a "
"JavaScript slippy map (powered by `OpenLayers`_)."
msgstr ""
"Django のadmin アプリケーションでは、ユーザが JavaScript のスリッピーマップ "
"(`OpenLayers`_ を利用) 上でジオメトリを作成したり変更したりできます。"

msgid ""
"Let's dive right in. Create a file called ``admin.py`` inside the ``world`` "
"application with the following code::"
msgstr ""
"さあ、始めましょう。次のコードを含む ``world`` アプリケーション内に ``admin."
"py`` という名前のファイルを作成します:"

msgid ""
"Next, edit your ``urls.py`` in the ``geodjango`` application folder as "
"follows::"
msgstr ""
"次に、 ``geodjango`` アプリケーションフォルダにある ``urls.py`` を以下のよう"
"に編集してください:"

msgid "Create an admin user:"
msgstr "admin ユーザーを作成します:"

msgid "Next, start up the Django development server:"
msgstr "次に、Django 開発サーバを起動します: "

msgid ""
"Finally, browse to ``http://localhost:8000/admin/``, and log in with the "
"user you just created. Browse to any of the ``WorldBorder`` entries -- the "
"borders may be edited by clicking on a polygon and dragging the vertices to "
"the desired position."
msgstr ""
"最後に ``http://localhost:8000/admin/`` にアクセスし、先ほど作成したユーザー"
"でログインします。 ``WorldBorder`` のエントリーをブラウズし、ポリゴンをクリッ"
"クして頂点を好きな位置までドラッグすることで、境界線を編集できます。"

msgid ""
"With the :class:`~django.contrib.gis.admin.GISModelAdmin`, GeoDjango uses an "
"`OpenStreetMap`_ layer in the admin. This provides more context (including "
"street and thoroughfare details) than available with the :class:`~django."
"contrib.admin.ModelAdmin` (which uses the `Vector Map Level 0`_ WMS dataset "
"hosted at `OSGeo`_)."
msgstr ""
":class:`~django.contrib.gis.admin.GISModelAdmin` を使用すると、GeoDjango は "
"admin アプリケーションで `OpenStreetMap`_ レイヤーを使用します。これによ"
"り、 :class:`~django.contrib.admin.ModelAdmin` が使用する `Vector Map Level "
"0`_ WMSデータセット (`OSGeo`_ でホストされている) よりも、より多くのコンテキ"
"スト (通りや通路の詳細を含む) が提供されます。"

msgid ""
"The PROJ datum shifting files must be installed (see the :ref:`PROJ "
"installation instructions <proj4>` for more details)."
msgstr ""
"PROJの座標変換ファイルがインストールされている必要があります (詳しくは :ref:"
"`PROJ installation instructions <proj4>` を参照してください) 。"

msgid ""
"If you meet this requirement, then use the ``GISModelAdmin`` option class in "
"your ``admin.py`` file::"
msgstr ""
"この要件を満たしている場合は、 ``admin.py`` ファイルで ``GISModelAdmin`` オプ"
"ションクラスを使用してください:"

msgid ""
"Special thanks to Bjørn Sandvik of `mastermaps.net <https://mastermaps.net/"
">`_ for providing and maintaining this dataset."
msgstr ""
"このデータセットの提供およびメンテナンスをしてくれた `mastermaps.net "
"<https://mastermaps.net/>`_ の Bjørn Sandvik 氏に特別な感謝を申し上げます。"

msgid ""
"GeoDjango basic apps was written by Dane Springmeyer, Josh Livni, and "
"Christopher Schmidt."
msgstr ""
"GeoDjango の基本アプリは、Dane Springmeyer、Josh Livni、およびChristopher "
"Schmidt によって記述されました。"

msgid ""
"This point is the `University of Houston Law Center <https://www.law.uh.edu/"
">`_."
msgstr ""
"このポイントは `ヒューストン大学法科大学院 <https://www.law.uh.edu/>`_ です。"

msgid ""
"Open Geospatial Consortium, Inc., `OpenGIS Simple Feature Specification For "
"SQL <https://www.ogc.org/standards/sfs>`_."
msgstr ""
"Open Geospatial Consortium, Inc, `OpenGIS Simple Feature Specification For "
"SQL <https://www.ogc.org/standards/sfs>`_."

msgid "GeoDjango Utilities"
msgstr "GeoDjango ユーティリティ"

msgid ""
"The :mod:`django.contrib.gis.utils` module contains various utilities that "
"are useful in creating geospatial web applications."
msgstr ""
":mod:`django.contrib.gis.utils` モジュールには、地理空間ウェブアプリケーショ"
"ンを作成する際に役立つ様々なユーティリティが含まれています。"

msgid "``django.contrib.humanize``"
msgstr "``django.contrib.humanize``"

msgid ""
"A set of Django template filters useful for adding a \"human touch\" to data."
msgstr ""
"humanize は、データに「人間くささ（human touch）」を与えるための Django テン"
"プレートフィルタセットです。"

msgid ""
"To activate these filters, add ``'django.contrib.humanize'`` to your :"
"setting:`INSTALLED_APPS` setting. Once you've done that, use ``{% load "
"humanize %}`` in a template, and you'll have access to the following filters."
msgstr ""
"これらのフィルタを有効にするには、 :setting:`INSTALLED_APPS`  設定に "
"``'django.contrib.humanize'`` を加えます。インストール後、テンプレート上で "
"``{% load humanize %}`` を呼び出せば、以下のフィルタを利用できるようになりま"
"す:"

msgid "``apnumber``"
msgstr "``apnumber``"

msgid ""
"For numbers 1-9, returns the number spelled out. Otherwise, returns the "
"number. This follows Associated Press style."
msgstr ""
"1-9 の数字に対して、数をアルファベットで表します。それ以外の数はそのまま数字"
"で返します。これは AP スタイルブックの書式に従っています。"

msgid "Examples:"
msgstr "例:"

msgid "``1`` becomes ``one``."
msgstr "``1`` は ``one`` になります。"

msgid "``2`` becomes ``two``."
msgstr "``2`` は ``two`` になります。"

msgid "``10`` becomes ``10``."
msgstr "``10`` は ``10`` になります。"

msgid ""
"You can pass in either an integer or a string representation of an integer."
msgstr "渡す値は整数でも、整数を文字列で表したものでもかまいません。"

msgid "``intcomma``"
msgstr "``intcomma``"

msgid ""
"Converts an integer or float (or a string representation of either) to a "
"string containing commas every three digits."
msgstr ""
"整数または浮動小数点数 (またはどちらかの文字列表現) を受け取り、3桁ごとにカン"
"マが入った文字列に変換します。"

msgid "``4500`` becomes ``4,500``."
msgstr "``4500`` は ``4,500`` になります。"

msgid "``4500.2`` becomes ``4,500.2``."
msgstr "``4500.2`` は ``4,500.2`` になります。"

msgid "``45000`` becomes ``45,000``."
msgstr "``45000`` は ``45,000`` になります。"

msgid "``450000`` becomes ``450,000``."
msgstr "``450000`` は ``450,000`` になります。"

msgid "``4500000`` becomes ``4,500,000``."
msgstr "``4500000`` は ``4,500,000`` になります。"

msgid ""
":doc:`/topics/i18n/formatting` will be respected if enabled, e.g. with the "
"``'de'`` language:"
msgstr ""
"可能であれば :doc:`/topics/i18n/formatting` が優先されます。たとえば "
"``'de'``  (ドイツ語) では次のようになります。"

msgid "``45000`` becomes ``'45.000'``."
msgstr "``45000`` は ``'45.000'`` になります。"

msgid "``450000`` becomes ``'450.000'``."
msgstr "``450000`` は ``'450.000'`` になります。"

msgid "``intword``"
msgstr "``intword``"

msgid ""
"Converts a large integer (or a string representation of an integer) to a "
"friendly text representation. Translates ``1.0`` as a singular phrase and "
"all other numeric values as plural, this may be incorrect for some "
"languages. Works best for numbers over 1 million."
msgstr ""
"大きな整数 (または整数の文字列表現) をわかりやすいテキスト表現に変換します。"
"``1.0`` を単数のフレーズとして翻訳し、その他のすべての数値を複数形として扱い"
"ます。これは一部の言語にとって正しくない場合があります。100 万を超える数値に"
"最適です。"

msgid "``1000000`` becomes ``1.0 million``."
msgstr "``1000000`` は ``1.0 million`` になります。"

msgid "``1200000`` becomes ``1.2 million``."
msgstr "``1200000`` は ``1.2 million`` になります。"

msgid "``1200000000`` becomes ``1.2 billion``."
msgstr "``1200000000`` は  ``1.2 billion`` になります。"

msgid "``-1200000000`` becomes ``-1.2 billion``."
msgstr "``-1200000000`` は ``-1.2 billion`` になります。"

msgid "Values up to 10^100 (Googol) are supported."
msgstr "値は 10^100 (Googol) までサポートされます。"

msgid "``1000000`` becomes ``'1,0 Million'``."
msgstr "``1000000`` は ``'1,0 Million'`` になります。"

msgid "``1200000`` becomes ``'1,2 Millionen'``."
msgstr "``1200000`` は ``'1,2 Millionen'`` となります。"

msgid "``1200000000`` becomes ``'1,2 Milliarden'``."
msgstr "``1200000000`` は ``'1,2 Milliarden'`` になります。"

msgid "``-1200000000`` becomes ``'-1,2 Milliarden'``."
msgstr "``-1200000000`` は ``'-1,2 Milliarden'`` になります。"

msgid "``naturalday``"
msgstr "``naturalday``"

msgid ""
"For dates that are the current day or within one day, return \"today\", "
"\"tomorrow\" or \"yesterday\", as appropriate. Otherwise, format the date "
"using the passed in format string."
msgstr ""
"日付が今日、明日、昨日のいずれかに該当する場合、それぞれ「今日"
"（“today”）」、 「明日（“tomorrow”）」、「昨日（“yesterday”）」を返します。そ"
"れ以外の日付の 場合は、引数に渡したフォーマット文字列を使って日付をフォーマッ"
"トします。"

msgid ""
"**Argument:** Date formatting string as described in the :tfilter:`date` tag."
msgstr "**引数:**  :tfilter:`date` タグと同じ記法による日付フォーマット文字列"

msgid "Examples (when 'today' is 17 Feb 2007):"
msgstr "表示例 ( 今日の日付を ``2007年 2月 17日`` とします ) :"

msgid "``16 Feb 2007`` becomes ``yesterday``."
msgstr "``2007年 2月 16日`` は ``yesterday`` になります。"

msgid "``17 Feb 2007`` becomes ``today``."
msgstr "``2007年 2月 17日`` は ``today`` になります。"

msgid "``18 Feb 2007`` becomes ``tomorrow``."
msgstr "``2007年 2月 18日`` は ``tomorrow`` になります。"

msgid ""
"Any other day is formatted according to given argument or the :setting:"
"`DATE_FORMAT` setting if no argument is given."
msgstr ""
"今日、昨日、明日以外の日付は与えられた引数に従ってフォーマットされます。引数"
"がない場合は :setting:`DATE_FORMAT` 設定に従います。"

msgid "``naturaltime``"
msgstr "``naturaltime``"

msgid ""
"For datetime values, returns a string representing how many seconds, minutes "
"or hours ago it was -- falling back to the :tfilter:`timesince` format if "
"the value is more than a day old. In case the datetime value is in the "
"future the return value will automatically use an appropriate phrase."
msgstr ""
"datetime 値に対して、何時間（分、秒）前であったかを表わす文字列を返します。1"
"日以上前である場合は :tfilter:`timesince` フォーマットにフォールバックしま"
"す。 datetime 値が未来である場合も、自動的に適切なフレーズが返り値に使用され"
"ます。"

msgid "Examples (when 'now' is 17 Feb 2007 16:30:00):"
msgstr "表示例 ( 現在の日時を ``17 Feb 2007 16:30:00`` とします ) :"

msgid "``17 Feb 2007 16:30:00`` becomes ``now``."
msgstr "``17 Feb 2007 16:30:00`` は ``now`` になります。"

msgid "``17 Feb 2007 16:29:31`` becomes ``29 seconds ago``."
msgstr "``17 Feb 2007 16:29:31`` は ``29 seconds ago`` になります。"

msgid "``17 Feb 2007 16:29:00`` becomes ``a minute ago``."
msgstr "``17 Feb 2007 16:29:00`` は ``a minute ago`` になります。"

msgid "``17 Feb 2007 16:25:35`` becomes ``4 minutes ago``."
msgstr "``17 Feb 2007 16:25:35`` は ``4 minutes ago`` になります。"

msgid "``17 Feb 2007 15:30:29`` becomes ``59 minutes ago``."
msgstr "``17 Feb 2007 15:30:29`` は ``59 minutes ago`` になります。"

msgid "``17 Feb 2007 15:30:01`` becomes ``59 minutes ago``."
msgstr "``17 Feb 2007 15:30:01`` は ``59 minutes ago`` になります。"

msgid "``17 Feb 2007 15:30:00`` becomes ``an hour ago``."
msgstr "``17 Feb 2007 15:30:00`` は ``an hour ago`` になります。"

msgid "``17 Feb 2007 13:31:29`` becomes ``2 hours ago``."
msgstr "``17 Feb 2007 13:31:29`` は ``2 hours ago`` になります。"

msgid "``16 Feb 2007 13:31:29`` becomes ``1 day, 2 hours ago``."
msgstr "``16 Feb 2007 13:31:29`` は ``1 day, 2 hours ago`` になります。"

msgid "``16 Feb 2007 13:30:01`` becomes ``1 day, 2 hours ago``."
msgstr "``16 Feb 2007 13:30:01`` は ``1 day, 2 hours ago`` になります。"

msgid "``16 Feb 2007 13:30:00`` becomes ``1 day, 3 hours ago``."
msgstr "``16 Feb 2007 13:30:00`` は ``1 day, 3 hours ago`` になります。"

msgid "``17 Feb 2007 16:30:30`` becomes ``30 seconds from now``."
msgstr "``17 Feb 2007 16:30:30`` は ``30 seconds from now`` になります。"

msgid "``17 Feb 2007 16:30:29`` becomes ``29 seconds from now``."
msgstr "``17 Feb 2007 16:30:29`` は ``29 seconds from now`` になります。"

msgid "``17 Feb 2007 16:31:00`` becomes ``a minute from now``."
msgstr "``17 Feb 2007 16:31:00`` becomes ``a minute from now`` になります。"

msgid "``17 Feb 2007 16:34:35`` becomes ``4 minutes from now``."
msgstr "``17 Feb 2007 16:34:35`` は ``4 minutes from now`` になります。"

msgid "``17 Feb 2007 17:30:29`` becomes ``an hour from now``."
msgstr "``17 Feb 2007 17:30:29`` は ``an hour from now`` になります。"

msgid "``17 Feb 2007 18:31:29`` becomes ``2 hours from now``."
msgstr "``17 Feb 2007 18:31:29`` は ``2 hours from now`` になります。"

msgid "``18 Feb 2007 16:31:29`` becomes ``1 day from now``."
msgstr "``18 Feb 2007 16:31:29`` は ``1 day from now`` になります。"

msgid "``26 Feb 2007 18:31:29`` becomes ``1 week, 2 days from now``."
msgstr "``26 Feb 2007 18:31:29`` は ``1 week, 2 days from now`` になります。"

msgid "``ordinal``"
msgstr "``ordinal``"

msgid "Converts an integer to its ordinal as a string."
msgstr "整数を序数形式の文字列に変換します。"

msgid "``1`` becomes ``1st``."
msgstr "``1`` は ``1st`` になります。"

msgid "``2`` becomes ``2nd``."
msgstr "``2`` は ``2nd`` になります。"

msgid "``3`` becomes ``3rd``."
msgstr "``3`` は ``3rd`` になります。"

msgid "``contrib`` packages"
msgstr "``contrib`` パッケージ"

msgid ""
"Django aims to follow Python's :ref:`\"batteries included\" philosophy <tut-"
"batteries-included>`. It ships with a variety of extra, optional tools that "
"solve common web development problems."
msgstr ""
"Django は Python の :ref:`\"batteries included\" 哲学 <tut-batteries-"
"included>` に従うことを目指しています。Django には、Web 開発の一般的な問題を"
"解決する、様々な追加ツールやオプションツールが同梱されています。"

msgid ""
"This code lives in :source:`django/contrib` in the Django distribution. This "
"document gives a rundown of the packages in ``contrib``, along with any "
"dependencies those packages have."
msgstr ""
"このコードはDjangoディストリビューションの中の :source:`django/contrib` にあ"
"ります。このドキュメントは ``contrib`` 内のパッケージとそれらのパッケージが持"
"つ依存関係の概要を示しています。"

msgid "Including ``contrib`` packages in ``INSTALLED_APPS``"
msgstr "``INSTALLED_APPS`` に ``contrib`` パッケージを含める"

msgid ""
"For most of these add-ons -- specifically, the add-ons that include either "
"models or template tags -- you'll need to add the package name (e.g., "
"``'django.contrib.redirects'``) to your :setting:`INSTALLED_APPS` setting "
"and rerun ``manage.py migrate``."
msgstr ""
"ほとんどのこれらのアドオン（具体的には、モデルまたはテンプレートタグを含むア"
"ドオン）を使用するには、パッケージ名 (例: ``'django.contrib.redirects'``) を"
"あなたの :setting:`INSTALLED_APPS` 設定に追加して、``manage.py migrate`` を再"
"実行する必要があります。"

msgid ""
"The automatic Django administrative interface. For more information, see :"
"doc:`Tutorial 2 </intro/tutorial02>` and the :doc:`admin documentation </ref/"
"contrib/admin/index>`."
msgstr ""
"Djangoの自動管理インターフェースです。詳細は、 :doc:`チュートリアル その2 </"
"intro/tutorial02>` および :doc:`admin ドキュメント </ref/contrib/admin/"
"index>` を参照してください。"

msgid "Requires the auth_ and contenttypes_ contrib packages to be installed."
msgstr "auth_ および contenttypes_ の拡張パッケージのインストールが必要です。"

msgid "Django's authentication framework."
msgstr "Djangoの認証フレームワーク"

msgid "See :doc:`/topics/auth/index`."
msgstr ":doc:`/topics/auth/index` を参照してください。"

msgid ""
"A light framework for hooking into \"types\" of content, where each "
"installed Django model is a separate content type."
msgstr ""
"コンテンツの \"タイプ\" にフックするための軽いフレームワークで、インストール"
"された Django モデルはそれぞれ別のコンテンツタイプです。"

msgid "See the :doc:`contenttypes documentation </ref/contrib/contenttypes>`."
msgstr ""
":doc:`contenttypes のドキュメント </ref/contrib/contenttypes>` を参照してくだ"
"さい。"

msgid "``flatpages``"
msgstr "``flatpages``"

msgid "A framework for managing \"flat\" HTML content in a database."
msgstr ""
"データベース内で「フラットな」HTMLコンテンツを管理するためのフレームワークで"
"す。"

msgid "See the :doc:`flatpages documentation </ref/contrib/flatpages>`."
msgstr ""
":doc:`flatpages のドキュメント </ref/contrib/flatpages>` を参照してください。"

msgid "Requires the sites_ contrib package to be installed as well."
msgstr "sites_ contribパッケージのインストールも必要です。"

msgid "``gis``"
msgstr "``gis``"

msgid ""
"A world-class geospatial framework built on top of Django, that enables "
"storage, manipulation and display of spatial data."
msgstr ""
"Djangoをベースに構築された世界クラスの空間データフレームワークであり、空間"
"データの保存、操作、表示を可能にします。"

msgid "See the :doc:`/ref/contrib/gis/index` documentation for more."
msgstr "詳細は :doc:`/ref/contrib/gis/index` を参照してください。"

msgid "``humanize``"
msgstr "``humanize``"

msgid "See the :doc:`humanize documentation </ref/contrib/humanize>`."
msgstr ""
":doc:`humanize のドキュメント </ref/contrib/humanize>` を参照してください。"

msgid "``messages``"
msgstr "``messages``"

msgid ""
"A framework for storing and retrieving temporary cookie- or session-based "
"messages"
msgstr ""
"一時的な cookie やセッションベースのメッセージを保存および取得するためのフ"
"レームワーク"

msgid "See the :doc:`messages documentation </ref/contrib/messages>`."
msgstr ""
":doc:`messages のドキュメント </ref/contrib/messages>` を参照してください。"

msgid "A collection of PostgreSQL specific features."
msgstr "PostgreSQL 固有の機能のコレクション。"

msgid ""
"See the :doc:`contrib.postgres documentation </ref/contrib/postgres/index>`."
msgstr ""
":doc:`contrib.postgres のドキュメント </ref/contrib/postgres/index>` を参照し"
"てください。"

msgid "``redirects``"
msgstr "``redirects``"

msgid "A framework for managing redirects."
msgstr "リダイレクトを管理するためのフレームワークです。"

msgid "See the :doc:`redirects documentation </ref/contrib/redirects>`."
msgstr ""
":doc:`redirects のドキュメント </ref/contrib/redirects>` を参照してください。"

msgid "``sessions``"
msgstr "``sessions``"

msgid "A framework for storing data in anonymous sessions."
msgstr "匿名セッションでデータを保存するためのフレームワーク。"

msgid "See the :doc:`sessions documentation </topics/http/sessions>`."
msgstr ""
":doc:`sessions のドキュメント </topics/http/sessions>` を参照してください。"

msgid ""
"A light framework that lets you operate multiple websites off of the same "
"database and Django installation. It gives you hooks for associating objects "
"to one or more sites."
msgstr ""
"同じデータベースと Django インストールを利用して複数のウェブサイトを運用でき"
"る軽量なフレームワークです。オブジェクトを1つまたは複数のサイトに関連付けるた"
"めのフックを提供します。"

msgid "See the :doc:`sites documentation </ref/contrib/sites>`."
msgstr ":doc:`sites のドキュメント </ref/contrib/sites>` を参照してください。"

msgid "``sitemaps``"
msgstr "``sitemaps``"

msgid "A framework for generating Google sitemap XML files."
msgstr "GoogleのサイトマップXMLファイルを生成するためのフレームワーク。"

msgid "See the :doc:`sitemaps documentation </ref/contrib/sitemaps>`."
msgstr ""
":doc:`sitemaps のドキュメント </ref/contrib/sitemaps>` を参照してください。"

msgid "``syndication``"
msgstr "``syndication``"

msgid ""
"A framework for generating syndication feeds, in RSS and Atom, quite easily."
msgstr ""
"RSS および Atom 形式の配信フィードを簡単に生成するためのフレームワークです。"

msgid "See the :doc:`syndication documentation </ref/contrib/syndication>`."
msgstr ""
":doc:`syndication のドキュメント </ref/contrib/syndication>` を参照してくださ"
"い。"

msgid "Other add-ons"
msgstr "その他のアドオン"

msgid ""
"If you have an idea for functionality to include in ``contrib``, let us "
"know! Code it up, and post it to the |django-users| mailing list."
msgstr ""
"``contrib`` に追加すべき機能のアイデアがあれば、お知らせください！機能をコー"
"ディングして、 |django-users| メーリングリストに投稿してください。"

msgid "The messages framework"
msgstr "メッセージフレームワーク"

msgid ""
"Quite commonly in web applications, you need to display a one-time "
"notification message (also known as \"flash message\") to the user after "
"processing a form or some other types of user input."
msgstr ""
"Web アプリケーションでは非常に一般的に、フォームやその他のユーザーインプット"
"のプロセスの後、ユーザーに向けて一過性の通知メッセージ (\"フラッシュメッセー"
"ジ\" とも言われます) を表示する必要があります。"

msgid ""
"For this, Django provides full support for cookie- and session-based "
"messaging, for both anonymous and authenticated users. The messages "
"framework allows you to temporarily store messages in one request and "
"retrieve them for display in a subsequent request (usually the next one). "
"Every message is tagged with a specific ``level`` that determines its "
"priority (e.g., ``info``, ``warning``, or ``error``)."
msgstr ""
"Django は、anonymous および認証済みユーザーの両方に対して、Cookie とセッショ"
"ンをベースにしたメッセージングを完全にサポートしています。このメッセージフ"
"レームワークは、一時的に一つのリクエスト内にメッセージを保管し、その後のリク"
"エスト (通常、直後のリクエスト) 内で表示するために、これらを検索することを可"
"能にします。全てのメッセージは、優先順位 (たとえば ``info``、``warning``、"
"``error``) を決定づける特定の ``level`` でタグづけされます。"

msgid "Enabling messages"
msgstr "メッセージを有効にする"

msgid ""
"Messages are implemented through a :doc:`middleware </ref/middleware>` class "
"and corresponding :doc:`context processor </ref/templates/api>`."
msgstr ""
"メッセージは、 :doc:`ミドルウェア </ref/middleware>` クラスと、それに対応す"
"る :doc:`コンテキストプロセッサー </ref/templates/api>` を通して実行されま"
"す。"

msgid ""
"The default ``settings.py`` created by ``django-admin startproject`` already "
"contains all the settings required to enable message functionality:"
msgstr ""
"``django-admin startproject`` によって生成されたデフォルトの ``settings.py`` "
"は、メッセージ機能を有効にするために必要な設定を全て含んでいます:"

msgid "``'django.contrib.messages'`` is in :setting:`INSTALLED_APPS`."
msgstr ""
"``'django.contrib.messages'`` は、:setting:`INSTALLED_APPS` の中にあります。"

msgid ""
":setting:`MIDDLEWARE` contains ``'django.contrib.sessions.middleware."
"SessionMiddleware'`` and ``'django.contrib.messages.middleware."
"MessageMiddleware'``."
msgstr ""
":setting:`MIDDLEWARE` は ``'django.contrib.sessions.middleware."
"SessionMiddleware'`` と ``'django.contrib.messages.middleware."
"MessageMiddleware'`` を含みます。"

msgid ""
"The default :ref:`storage backend <message-storage-backends>` relies on :doc:"
"`sessions </topics/http/sessions>`. That's why ``SessionMiddleware`` must be "
"enabled and appear before ``MessageMiddleware`` in :setting:`MIDDLEWARE`."
msgstr ""
"デフォルトの :ref:`ストレージバックエンド <message-storage-backends>` は :"
"doc:`sessions </topics/http/sessions>` に依存します。そのため "
"``SessionMiddleware`` を有効にして、 :setting:`MIDDLEWARE` 内で "
"``MessageMiddleware`` より前に記述する必要があります。"

msgid ""
"The ``'context_processors'`` option of the ``DjangoTemplates`` backend "
"defined in your :setting:`TEMPLATES` setting contains ``'django.contrib."
"messages.context_processors.messages'``."
msgstr ""
":setting:`TEMPLATES` 設定で定義した ``DjangoTemplates`` バックエンドの "
"``'context_processors'`` オプションは、``'django.contrib.messages."
"context_processors.messages'`` を含みます。"

msgid ""
"If you don't want to use messages, you can remove ``'django.contrib."
"messages'`` from your :setting:`INSTALLED_APPS`, the ``MessageMiddleware`` "
"line from :setting:`MIDDLEWARE`, and the ``messages`` context processor "
"from :setting:`TEMPLATES`."
msgstr ""
"メッセージを使いたくない場合は、:setting:`INSTALLED_APPS` から ``'django."
"contrib.messages'`` を、:setting:`MIDDLEWARE` から ``MessageMiddleware`` 行"
"を、そして :setting:`TEMPLATES` から ``messages`` コンテキストプロセッサーを"
"削除できます。"

msgid "Configuring the message engine"
msgstr "メッセージエンジンを設定する"

msgid "Storage backends"
msgstr "ストレージバックエンド"

msgid ""
"The messages framework can use different backends to store temporary "
"messages."
msgstr ""
"メッセージフレームワークは、一時的なメッセージを保管するために、異なるバック"
"エンドを使うことができます。"

msgid ""
"Django provides three built-in storage classes in :mod:`django.contrib."
"messages`:"
msgstr ""
"Django は、:mod:`django.contrib.messages` の中で、以下の3つのビルトインのスト"
"レージクラスを提供しています:"

msgid ""
"This class stores all messages inside of the request's session. Therefore it "
"requires Django's ``contrib.sessions`` application."
msgstr ""
"このクラスは、すべてのメッセージをリクエストのセッション内部に保管します。ゆ"
"えに、Django の ``contrib.sessions`` アプリケーションが必要となります。"

msgid ""
"This class stores the message data in a cookie (signed with a secret hash to "
"prevent manipulation) to persist notifications across requests. Old messages "
"are dropped if the cookie data size would exceed 2048 bytes."
msgstr ""
"このクラスは、複数のリクエストにわたって通知を保持するために、Cookie (改ざん"
"を防ぐため秘密のハッシュで署名されます) にメッセージデータを保管します。古い"
"メッセージは Cookie データのサイズが 2048 バイトを超えると破棄されます。"

msgid ""
"This class first uses ``CookieStorage``, and falls back to using "
"``SessionStorage`` for the messages that could not fit in a single cookie. "
"It also requires Django's ``contrib.sessions`` application."
msgstr ""
"このクラスは、まず ``CookieStorage`` を使い、単一の Cookie に合わないメッセー"
"ジに対して ``SessionStorage`` を使います。Django の ``contrib.sessions`` アプ"
"リケーションも必要となります。"

msgid ""
"This behavior avoids writing to the session whenever possible. It should "
"provide the best performance in the general case."
msgstr ""
"この動作は、可能な限りセッションへの書き込みを避けます。一般的なケースでは最"
"高のパフォーマンスを提供するはずです。"

msgid ""
":class:`~django.contrib.messages.storage.fallback.FallbackStorage` is the "
"default storage class. If it isn't suitable to your needs, you can select "
"another storage class by setting :setting:`MESSAGE_STORAGE` to its full "
"import path, for example::"
msgstr ""
":class:`~django.contrib.messages.storage.fallback.FallbackStorage` はデフォル"
"トのストレージクラスです。もしあなたのニーズに合わないときは、:setting:"
"`MESSAGE_STORAGE` を完全な import パスに設定することで他のストレージクラスを"
"選べます。次に例を示します。"

msgid ""
"To write your own storage class, subclass the ``BaseStorage`` class in "
"``django.contrib.messages.storage.base`` and implement the ``_get`` and "
"``_store`` methods."
msgstr ""
"独自のストレージクラスに書き込むためには、 ``django.contrib.messages.storage."
"base`` 内の ``BaseStorage`` クラスをサブクラス化して、 ``_get`` と "
"``_store`` メソッドを実装してください。"

msgid "Message levels"
msgstr "メッセージレベル"

msgid ""
"The messages framework is based on a configurable level architecture similar "
"to that of the Python logging module. Message levels allow you to group "
"messages by type so they can be filtered or displayed differently in views "
"and templates."
msgstr ""
"メッセージフレームワークは、Python ロギングモジュールに似た、設定可能なレベル"
"アーキテクチャに基づきます。メッセージレベルは、タイプによるグループメッセー"
"ジを可能にします。これにより、ビューやテンプレートの中で異なるフィルタおよび"
"表示ができるようになります。"

msgid ""
"The built-in levels, which can be imported from ``django.contrib.messages`` "
"directly, are:"
msgstr ""
"``django.contrib.messages`` から直接インポートできるビルトインのレベルは以下"
"の通りです:"

msgid "Constant"
msgstr "定数"

msgid "Purpose"
msgstr "目的"

msgid "``DEBUG``"
msgstr "``DEBUG``"

msgid ""
"Development-related messages that will be ignored (or removed) in a "
"production deployment"
msgstr ""
"プロダクション環境では無視 (ないし削除) される、開発に関連したメッセージ"

msgid "``INFO``"
msgstr "``INFO``"

msgid "Informational messages for the user"
msgstr "ユーザーに何か情報を伝えるメッセージ"

msgid "``SUCCESS``"
msgstr "``SUCCESS``"

msgid ""
"An action was successful, e.g. \"Your profile was updated successfully\""
msgstr ""
"あるアクションが成功した、例えば \"あなたのプロフィールは無事に更新されました"
"\""

msgid "``WARNING``"
msgstr "``WARNING``"

msgid "A failure did not occur but may be imminent"
msgstr "問題は起きなかったが、問題になり得る"

msgid "``ERROR``"
msgstr "``ERROR``"

msgid "An action was **not** successful or some other failure occurred"
msgstr "あるアクションが成功 **しなかった** か、他の問題が発生した"

msgid ""
"The :setting:`MESSAGE_LEVEL` setting can be used to change the minimum "
"recorded level (or it can be `changed per request`_). Attempts to add "
"messages of a level less than this will be ignored."
msgstr ""
":setting:`MESSAGE_LEVEL` 設定は、最小限の記録されたレベルを変更するため (もし"
"くは `リクエストごとに変更`_ するため)に使うことができます。これ以下のレベル"
"のメッセージを追加しようとしても無視されます。"

msgid "Message tags"
msgstr "メッセージタグ"

msgid ""
"Message tags are a string representation of the message level plus any extra "
"tags that were added directly in the view (see `Adding extra message tags`_ "
"below for more details). Tags are stored in a string and are separated by "
"spaces. Typically, message tags are used as CSS classes to customize message "
"style based on message type. By default, each level has a single tag that's "
"a lowercase version of its own constant:"
msgstr ""
"メッセージタグは、メッセージレベルの表現文字列に加えて、ビューの中で直接付与"
"される追加のタグです (詳しくは、以下の `追加のメッセージタグを付与する`_ を参"
"照してください )。タグは文字列で保管され、スペースによって区切られます。典型"
"的には、メッセージタグは、メッセージタイプに基いてメッセージのスタイルをカス"
"タマイズするために、CSS のクラスとして利用されます。デフォルトでは、それぞれ"
"のレベルは、レベル定数を小文字にした、単一のタグを持っています。"

msgid "Level Constant"
msgstr "レベル定数"

msgid "Tag"
msgstr "タグ"

msgid "``debug``"
msgstr "``debug``"

msgid "``info``"
msgstr "``info``"

msgid "``success``"
msgstr "``success``"

msgid "``warning``"
msgstr "``warning``"

msgid "``error``"
msgstr "``error``"

msgid ""
"To change the default tags for a message level (either built-in or custom), "
"set the :setting:`MESSAGE_TAGS` setting to a dictionary containing the "
"levels you wish to change. As this extends the default tags, you only need "
"to provide tags for the levels you wish to override::"
msgstr ""
"メッセージレベル (ビルトインないしカスタムのいずれか) のデフォルトのタグを変"
"更するためには、 :setting:`MESSAGE_TAGS` 設定を、あなたが変更したいと思うレベ"
"ルを含むディクショナリにセットしてください。これでデフォルトのタグを拡張する"
"ので、あなたがすべきことはオーバーライドしようとするレベルに対してタグを提供"
"することだけです::"

msgid "Using messages in views and templates"
msgstr "ビューとテンプレートでメッセージを使う"

msgid "Adding a message"
msgstr "メッセージを付与する"

msgid "To add a message, call::"
msgstr "メッセージを付与するには、以下を呼び出してください::"

msgid ""
"Some shortcut methods provide a standard way to add messages with commonly "
"used tags (which are usually represented as HTML classes for the message)::"
msgstr ""
"いくつかのショートカットメソッドは、一般的に使われるタグ (通常、メッセージの"
"HTMLクラスとして表されます) とともにメッセージを付与する標準的な方法を提供し"
"ます::"

msgid "Displaying messages"
msgstr "メッセージを表示する"

msgid "**In your template**, use something like:"
msgstr "**テンプレート** では、次のようなものを使ってください:"

msgid ""
"If you're using the context processor, your template should be rendered with "
"a ``RequestContext``. Otherwise, ensure ``messages`` is available to the "
"template context."
msgstr ""
"コンテキストプロセッサーを使っている場合、テンプレートは ``RequestContext`` "
"でレンダリングされる必要があります。もしくは、 ``messages`` をテンプレートコ"
"ンテキストに対して有効にしてください。"

msgid ""
"Even if you know there is only one message, you should still iterate over "
"the ``messages`` sequence, because otherwise the message storage will not be "
"cleared for the next request."
msgstr ""
"メッセージが一つしかないとわかっている場合でも、 ``messages`` 配列をイテレー"
"トする必要があります。そうしないとメッセージストレージは次のリクエストのため"
"にクリアされないからです。"

msgid ""
"The context processor also provides a ``DEFAULT_MESSAGE_LEVELS`` variable "
"which is a mapping of the message level names to their numeric value:"
msgstr ""
"コンテキストプロセッサーは、メッセージレベルの名前と数値を対応付ける "
"``DEFAULT_MESSAGE_LEVELS`` 変数も提供します:"

msgid ""
"**Outside of templates**, you can use :func:`~django.contrib.messages."
"get_messages`::"
msgstr ""
"**テンプレート以外では**、 :func:`~django.contrib.messages.get_messages` を使"
"うことができます::"

msgid ""
"For instance, you can fetch all the messages to return them in a :ref:"
"`JSONResponseMixin <jsonresponsemixin-example>` instead of a :class:`~django."
"views.generic.base.TemplateResponseMixin`."
msgstr ""
"たとえば、すべてのメッセージを取得して、:class:`~django.views.generic.base."
"TemplateResponseMixin` の代わりに :ref:`JSONResponseMixin <jsonresponsemixin-"
"example>` で返すことができます。"

msgid ""
":func:`~django.contrib.messages.get_messages` will return an instance of the "
"configured storage backend."
msgstr ""
":func:`~django.contrib.messages.get_messages` は設定されたストレージバックエ"
"ンドのインスタンスを返します。"

msgid "The ``Message`` class"
msgstr "``Message`` クラス"

msgid ""
"When you loop over the list of messages in a template, what you get are "
"instances of the ``Message`` class. They have only a few attributes:"
msgstr ""
"テンプレート内のメッセージのリストをループさせると、 ``Message`` クラスのイン"
"スタンスが得られます。これらのインスタンスにはいくつかの属性しかありません:"

msgid "``message``: The actual text of the message."
msgstr "``message``: メッセージの実際のテキストです。"

msgid ""
"``level``: An integer describing the type of the message (see the `message "
"levels`_ section above)."
msgstr ""
"``level``: メッセージのタイプを説明する数値です (詳細は上述の `message "
"levels`_ セクション)。"

msgid ""
"``tags``: A string combining all the message's tags (``extra_tags`` and "
"``level_tag``) separated by spaces."
msgstr ""
"``tags``: スペースによって区切られた、全てのメッセージのタグを結合する文字列 "
"(``extra_tags`` と ``level_tag``) です。"

msgid ""
"``extra_tags``: A string containing custom tags for this message, separated "
"by spaces. It's empty by default."
msgstr ""
"``extra_tags``: スペースによって区切られた、メッセージのカスタムタグを含む文"
"字列です。空がデフォルトです。"

msgid ""
"``level_tag``: The string representation of the level. By default, it's the "
"lowercase version of the name of the associated constant, but this can be "
"changed if you need by using the :setting:`MESSAGE_TAGS` setting."
msgstr ""
"``level_tag``: レベルを表す文字列です。デフォルトでは定数名の小文字バージョン"
"ですが、:setting:`MESSAGE_TAGS` 設定によって変更できます。"

msgid "Creating custom message levels"
msgstr "独自のメッセージレベルを作成する"

msgid ""
"Messages levels are nothing more than integers, so you can define your own "
"level constants and use them to create more customized user feedback, e.g.::"
msgstr ""
"メッセージレベルは実際には単なる整数なので、独自のレベル定数を定義して、より"
"カスタマイズされたユーザーフィードバックを作成できます。次に例を示します。"

msgid ""
"When creating custom message levels you should be careful to avoid "
"overloading existing levels. The values for the built-in levels are:"
msgstr ""
"独自のメッセージレベルを作成するときには、既存のレベルを上書きしないように気"
"をつけてください。ビルトインのレベルで使われている値は以下の通りです:"

msgid "10"
msgstr "10"

msgid "20"
msgstr "20"

msgid "25"
msgstr "25"

msgid "30"
msgstr "30"

msgid "40"
msgstr "40"

msgid ""
"If you need to identify the custom levels in your HTML or CSS, you need to "
"provide a mapping via the :setting:`MESSAGE_TAGS` setting."
msgstr ""
"HTML や CSS の中で独自のレベルを指定する必要がある場合は、:setting:"
"`MESSAGE_TAGS` 設定を通してマップを提供する必要があります。"

msgid ""
"If you are creating a reusable application, it is recommended to use only "
"the built-in `message levels`_ and not rely on any custom levels."
msgstr ""
"再利用可能なアプリケーションを作成している場合には、ビルトインの `message "
"levels`_ だけを使い、独自のレベルに依存しないことが推奨されます。"

msgid "Changing the minimum recorded level per-request"
msgstr "リクエストごとの最小記録レベルを変更する"

msgid ""
"The minimum recorded level can be set per request via the ``set_level`` "
"method::"
msgstr ""
"最小記録レベルは、``set_level`` メソッドを使用してリクエストごとに設定できま"
"す。"

msgid ""
"Similarly, the current effective level can be retrieved with ``get_level``::"
msgstr "同様に、現在の有効レベルは ``get_level`` を使って取得できます。"

msgid ""
"For more information on how the minimum recorded level functions, see "
"`Message levels`_ above."
msgstr ""
"最小記録レベルが機能する仕組みについての詳細は、上記の `Message levels`_ を参"
"照してください。"

msgid "Adding extra message tags"
msgstr "追加のメッセージタグを追加する"

msgid ""
"For more direct control over message tags, you can optionally provide a "
"string containing extra tags to any of the add methods::"
msgstr ""
"メッセージタグをより直接的に制御したい場合は、追加メソッドのいずれかに、追加"
"のタグを含む文字列を任意で指定できます:"

msgid ""
"Extra tags are added before the default tag for that level and are space "
"separated."
msgstr ""
"追加タグは、そのレベルのデフォルトタグの前に追加され、スペースで区切られま"
"す。"

msgid "Failing silently when the message framework is disabled"
msgstr "メッセージフレームワークが無効になっているときのエラーを隠す"

msgid ""
"If you're writing a reusable app (or other piece of code) and want to "
"include messaging functionality, but don't want to require your users to "
"enable it if they don't want to, you may pass an additional keyword argument "
"``fail_silently=True`` to any of the ``add_message`` family of methods. For "
"example::"
msgstr ""
"再利用可能なアプリ (または他のコード) を書いており、メッセージング機能を含め"
"たいが、利用者に無理に有効化させたくない場合は、任意の ``add_message`` ファミ"
"リーのメソッドに ``fail_silently=True`` という追加のキーワード引数を渡すこと"
"ができます。たとえば:"

msgid ""
"Setting ``fail_silently=True`` only hides the ``MessageFailure`` that would "
"otherwise occur when the messages framework disabled and one attempts to use "
"one of the ``add_message`` family of methods. It does not hide failures that "
"may occur for other reasons."
msgstr ""
"``fail_silently=True`` を設定すると、メッセージフレームワークが無効になってお"
"り、``add_message`` メソッドのいずれかを使用しようとした際に発生するはずの "
"``MessageFailure`` を隠します。それ以外の理由で発生する失敗は隠されません。"

msgid "Adding messages in class-based views"
msgstr "クラスベースのビューにメッセージを追加する"

msgid ""
"Adds a success message attribute to :class:`~django.views.generic.edit."
"FormView` based classes"
msgstr ""
":class:`~django.views.generic.edit.FormView` をベースにしたクラスに、成功メッ"
"セージ属性を追加します。"

msgid ""
"``cleaned_data`` is the cleaned data from the form which is used for string "
"formatting"
msgstr ""
"``cleaned_data`` はフォームからのクリーンなデータであり、文字列フォーマットに"
"使用されます。"

msgid ""
"The cleaned data from the ``form`` is available for string interpolation "
"using the ``%(field_name)s`` syntax. For ModelForms, if you need access to "
"fields from the saved ``object`` override the :meth:`~django.contrib."
"messages.views.SuccessMessageMixin.get_success_message` method."
msgstr ""
"``form`` からのクリーン済みデータは、 ``%(field_name)s`` 構文を使用して文字列"
"補完に利用できます。ModelForms の場合、保存された ``object`` からフィールドに"
"アクセスが必要な場合は、 :meth:`~django.contrib.messages.views."
"SuccessMessageMixin.get_success_message` メソッドをオーバーライドしてくださ"
"い。"

msgid "**Example views.py for ModelForms**::"
msgstr "**ModelForms 用の views.py の例**:"

msgid "Expiration of messages"
msgstr "メッセージの有効期限"

msgid ""
"The messages are marked to be cleared when the storage instance is iterated "
"(and cleared when the response is processed)."
msgstr ""
"メッセージは、ストレージインスタンスがイテレートされる際にクリアされるように"
"マークされています (そして、応答が処理される際にもクリアされます)。"

msgid ""
"To avoid the messages being cleared, you can set the messages storage to "
"``False`` after iterating::"
msgstr ""
"メッセージがクリアされるのを避けるために、イテレートの後にメッセージストレー"
"ジを ``False`` に設定できます:"

msgid "Behavior of parallel requests"
msgstr "並列リクエストの動作"

msgid ""
"Due to the way cookies (and hence sessions) work, **the behavior of any "
"backends that make use of cookies or sessions is undefined when the same "
"client makes multiple requests that set or get messages in parallel**. For "
"example, if a client initiates a request that creates a message in one "
"window (or tab) and then another that fetches any uniterated messages in "
"another window, before the first window redirects, the message may appear in "
"the second window instead of the first window where it may be expected."
msgstr ""
"クッキー (そしてセッション) の仕組みから、同じクライアントが複数の要求を並行"
"して行い、メッセージを設定または取得する場合、クッキーやセッションを使用する"
"バックエンドの動作は定義されていません。たとえば、クライアントが1つのウィンド"
"ウ (またはタブ) でメッセージを作成する要求を開始し、別のウィンドウで未読メッ"
"セージを取得する要求を開始するとき、最初のウィンドウがリダイレクトされる前"
"に、そのメッセージが最初ではなく、代わりに2番目のウィンドウに表示されることが"
"あります。"

msgid ""
"In short, when multiple simultaneous requests from the same client are "
"involved, messages are not guaranteed to be delivered to the same window "
"that created them nor, in some cases, at all. Note that this is typically "
"not a problem in most applications and will become a non-issue in HTML5, "
"where each window/tab will have its own browsing context."
msgstr ""
"要するに、同じクライアントからの複数の同時リクエストが関わると、メッセージが"
"それらを作成した同じウィンドウに必ず届くわけではなく、場合によっては全く届か"
"ないことがあります。ほとんどのアプリケーションでは通常問題とならず、HTML5では"
"各ウィンドウ/タブが独自の閲覧コンテキストを持つため、これは問題にならなくなり"
"ます。"

msgid ""
"A few :ref:`settings<settings-messages>` give you control over message "
"behavior:"
msgstr ""
"いくつかの :ref:`設定 <settings-messages>` を使用して、メッセージの動作を制御"
"できます。"

msgid ":setting:`MESSAGE_LEVEL`"
msgstr ":setting:`MESSAGE_LEVEL`"

msgid ":setting:`MESSAGE_STORAGE`"
msgstr ":setting:`MESSAGE_STORAGE`"

msgid ":setting:`MESSAGE_TAGS`"
msgstr ":setting:`MESSAGE_TAGS`"

msgid ""
"For backends that use cookies, the settings for the cookie are taken from "
"the session cookie settings:"
msgstr ""
"Cookiesを使用するバックエンドでは、Cookieの設定はセッションCookieの設定から取"
"得されます。"

msgid ":setting:`SESSION_COOKIE_DOMAIN`"
msgstr ":setting:`SESSION_COOKIE_DOMAIN`"

msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ":setting:`SESSION_COOKIE_SECURE`"

msgid ":setting:`SESSION_COOKIE_HTTPONLY`"
msgstr ":setting:`SESSION_COOKIE_HTTPONLY`"

msgid "Testing"
msgstr "テスト"

msgid ""
"This module offers a tailored test assertion method, for testing messages "
"attached to an :class:`~.HttpResponse`."
msgstr ""
"このモジュールは、:class:`~.HttpResponse` に添付されたメッセージをテストする"
"ためのカスタマイズされたテストアサーションメソッドを提供しています。"

msgid ""
"To benefit from this assertion, add ``MessagesTestMixin`` to the class "
"hierarchy::"
msgstr ""
"このアサーションを利用するには、クラス階層に ``MessagesTestMixin`` を追加して"
"ください。"

msgid "Then, inherit from the ``MsgTestCase`` in your tests."
msgstr "次に、テストで ``MsgTestCase`` を継承してください。"

msgid ""
"Asserts that :mod:`~django.contrib.messages` added to the :class:`response "
"<django.http.HttpResponse>` matches ``expected_messages``."
msgstr ""
":class:`response <django.http.HttpResponse>` に追加された :mod:`~django."
"contrib.messages` が ``expected_messages`` と一致することをアサートします。"

msgid ""
"``expected_messages`` is a list of :class:`~django.contrib.messages.Message` "
"objects."
msgstr ""
"``expected_messages`` は :class:`~django.contrib.messages.Message` オブジェク"
"トのリストです。"

msgid ""
"By default, the comparison is ordering dependent. You can disable this by "
"setting the ``ordered`` argument to ``False``."
msgstr ""
"デフォルトでは、比較は順序に依存します。これを無効にするには、 ``ordered`` 引"
"数を ``False`` に設定します。"

msgid "PostgreSQL specific aggregation functions"
msgstr "PostgreSQL 固有の集計関数"

msgid ""
"These functions are available from the ``django.contrib.postgres."
"aggregates`` module. They are described in more detail in the `PostgreSQL "
"docs <https://www.postgresql.org/docs/current/functions-aggregate.html>`_."
msgstr ""
"これらの機能は、 ``django.contrib.postgres.aggregates`` モジュールから利用可"
"能です。これらについての詳細は、 `PostgreSQLドキュメント <https://www."
"postgresql.org/docs/current/functions-aggregate.html>`_ に記載されています。"

msgid ""
"All functions come without default aliases, so you must explicitly provide "
"one. For example:"
msgstr ""
"すべての関数はデフォルトのエイリアスを持たないので、明示的にエイリアスを指定"
"する必要があります。例えば:"

msgid "Common aggregate options"
msgstr "一般的な集計オプション"

msgid ""
"All aggregates have the :ref:`filter <aggregate-filter>` keyword argument "
"and most also have the :ref:`default <aggregate-default>` keyword argument."
msgstr ""
"すべての集計関数は、 :ref:`filter <aggregate-filter>` キーワード引数を持ち、"
"ほとんどの集計関数は :ref:`default <aggregate-default>` キーワード引数も持っ"
"ています。"

msgid "General-purpose aggregation functions"
msgstr "汎用的な集計関数"

msgid "``ArrayAgg``"
msgstr "``ArrayAgg``"

msgid ""
"Returns a list of values, including nulls, concatenated into an array, or "
"``default`` if there are no values."
msgstr ""
"null を含む値のリストを配列に連結して返すか、値がない場合は ``default`` を返"
"す。"

msgid ""
"An optional boolean argument that determines if array values will be "
"distinct. Defaults to ``False``."
msgstr ""
"オプションの真偽値引数で、配列の値を区別するかどうかを指定する。デフォルトは "
"``False`` です。"

msgid ""
"An optional string of a field name (with an optional ``\"-\"`` prefix which "
"indicates descending order) or an expression (or a tuple or list of strings "
"and/or expressions) that specifies the ordering of the elements in the "
"result list."
msgstr ""
"結果リスト内の要素の並び順を指定する、省略可能なフィールド名の文字列 (降順を"
"示すオプションの ``\"\"-\"\"`` 接頭辞を含む) または式 (もしくは文字列および/"
"または式のタプルもしくはリスト)。"

msgid "Examples::"
msgstr "例::"

msgid ""
"In older versions, if there are no rows and ``default`` is not provided, "
"``ArrayAgg`` returned an empty list instead of ``None``. If you need it, "
"explicitly set ``default`` to ``Value([])``."
msgstr ""
"以前のバージョンでは、行がなく、``default`` が指定されていない場合、"
"``ArrayAgg`` は ``None`` ではなく空のリストを返していました。必要な場合は、明"
"示的に ``default`` を ``Value([])`` に設定してください。"

msgid "``BitAnd``"
msgstr "``BitAnd``"

msgid ""
"Returns an ``int`` of the bitwise ``AND`` of all non-null input values, or "
"``default`` if all values are null."
msgstr ""
"すべての非 null 入力値のビットごとの ``AND`` を返し、すべての値が null の場合"
"は ``default`` を返します。"

msgid "``BitOr``"
msgstr "``BitOr``"

msgid ""
"Returns an ``int`` of the bitwise ``OR`` of all non-null input values, or "
"``default`` if all values are null."
msgstr ""
"すべての非 null 入力値のビットごとの ``OR`` の ``int`` を返します。すべての値"
"が null の場合は ``default`` を返します。"

msgid "``BitXor``"
msgstr "``BitXor``"

msgid ""
"Returns an ``int`` of the bitwise ``XOR`` of all non-null input values, or "
"``default`` if all values are null. It requires PostgreSQL 14+."
msgstr ""
"すべての非 null 入力値のビットごとの ``XOR`` の ``int`` を返します。すべての"
"値が null の場合は ``default`` が返されます。PostgreSQL 14+ が必要です。"

msgid "``BoolAnd``"
msgstr "``BoolAnd``"

msgid ""
"Returns ``True``, if all input values are true, ``default`` if all values "
"are null or if there are no values, otherwise ``False``."
msgstr ""
"すべての入力値が true の場合は ``True`` を、すべての値が null または値が存在"
"しない場合は ``default`` を、それ以外の場合は ``False`` を返します。"

msgid "Usage example::"
msgstr "使用例:"

msgid "``BoolOr``"
msgstr "``BoolOr``"

msgid ""
"Returns ``True`` if at least one input value is true, ``default`` if all "
"values are null or if there are no values, otherwise ``False``."
msgstr ""
"少なくとも1つの入力値が true の場合は ``True`` を、すべての値が null または値"
"がない場合は ``default`` を、そうでない場合は ``False`` を返します。"

msgid "``JSONBAgg``"
msgstr "``JSONBAgg``"

msgid ""
"Returns the input values as a ``JSON`` array, or ``default`` if there are no "
"values. You can query the result using :lookup:`key and index lookups "
"<jsonfield.key>`."
msgstr ""
"入力値を ``JSON`` 配列として返します。値がない場合は ``default`` を返します。"
"結果は :lookup:`キーとインデックスのルックアップ <jsonfield.key>` を使ってク"
"エリできます。"

msgid "Examples are the same as for :attr:`ArrayAgg.ordering`."
msgstr "例は、 :attr:`ArrayAgg.ordering` と同じです。"

msgid ""
"In older versions, if there are no rows and ``default`` is not provided, "
"``JSONBAgg`` returned an empty list instead of ``None``. If you need it, "
"explicitly set ``default`` to ``Value([])``."
msgstr ""
"以前のバージョンでは、行がなく、かつ ``default`` が提供されていないとき、 "
"``JSONBAgg`` は ``None`` の代わりに空のリストが返されていました。必要な場合"
"は、明示的に ``default`` を ``Value([])`` に設定してください。"

msgid "``StringAgg``"
msgstr "``StringAgg``"

msgid ""
"Returns the input values concatenated into a string, separated by the "
"``delimiter`` string, or ``default`` if there are no values."
msgstr ""
"入力値を文字列に連結し、``delimiter`` 文字列で区切って返します。値がない場合"
"は ``default`` を返します。"

msgid "Required argument. Needs to be a string."
msgstr "必須引数。文字列である必要があります。"

msgid ""
"An optional boolean argument that determines if concatenated values will be "
"distinct. Defaults to ``False``."
msgstr ""
"連結された値が重複するかどうかを決定するオプションの真偽値引数。デフォルトは "
"``False`` です。"

msgid ""
"An optional string of a field name (with an optional ``\"-\"`` prefix which "
"indicates descending order) or an expression (or a tuple or list of strings "
"and/or expressions) that specifies the ordering of the elements in the "
"result string."
msgstr ""
"フィールド名 (降順を示すオプションの接頭辞 ``\"-\"`` を持つ) 、または結果文字"
"列の要素の順序を指定する式 (または文字列や式のタプルやリスト) のオプションの"
"文字列。"

msgid ""
"In older versions, if there are no rows and ``default`` is not provided, "
"``StringAgg`` returned an empty string instead of ``None``. If you need it, "
"explicitly set ``default`` to ``Value(\"\")``."
msgstr ""
"以前のバージョンでは、行が存在せず ``default`` が指定されていない場合、"
"``StringAgg`` は ``None`` の代わりに空の文字列を返していました。必要な場合"
"は、明示的に ``default`` を ``Value(\"\")`` に設定してください。"

msgid "Aggregate functions for statistics"
msgstr "統計のための集計関数"

msgid "``y`` and ``x``"
msgstr "``y`` および ``x``"

msgid ""
"The arguments ``y`` and ``x`` for all these functions can be the name of a "
"field or an expression returning a numeric data. Both are required."
msgstr ""
"これらの関数の引数 ``y`` と ``x`` には、フィールド名または数値データを返す式"
"を指定できます。どちらも必須です。"

msgid "``Corr``"
msgstr "``Corr``"

msgid ""
"Returns the correlation coefficient as a ``float``, or ``default`` if there "
"aren't any matching rows."
msgstr ""
"相関係数を ``float`` で返すか、マッチする行がない場合は ``default`` で返す。"

msgid "``CovarPop``"
msgstr "``CovarPop``"

msgid ""
"Returns the population covariance as a ``float``, or ``default`` if there "
"aren't any matching rows."
msgstr ""
"母集団の共分散を ``float`` で返すか、マッチする行がない場合は ``default`` で"
"返す。"

msgid ""
"Optional. By default ``CovarPop`` returns the general population covariance. "
"However, if ``sample=True``, the return value will be the sample population "
"covariance."
msgstr ""
"オプション。デフォルトでは ``CovarPop`` は一般母集団の共分散を返す。ただし、 "
"``sample=True`` の場合、戻り値はサンプル母集団の共分散になる。"

msgid "``RegrAvgX``"
msgstr "``RegrAvgX``"

msgid ""
"Returns the average of the independent variable (``sum(x)/N``) as a "
"``float``, or ``default`` if there aren't any matching rows."
msgstr ""
"独立変数の平均値 (``sum(x)/N``) を ``float`` で返すか、マッチする行がない場合"
"は ``default`` で返す。"

msgid "``RegrAvgY``"
msgstr "``RegrAvgY``"

msgid ""
"Returns the average of the dependent variable (``sum(y)/N``) as a ``float``, "
"or ``default`` if there aren't any matching rows."
msgstr ""
"従属変数の平均値 (``sum(y)/N``) を ``float`` で返すか、マッチする行がない場合"
"は ``default`` で返す。"

msgid "``RegrCount``"
msgstr "``RegrCount``"

msgid ""
"Returns an ``int`` of the number of input rows in which both expressions are "
"not null."
msgstr "両方の式が NULL ではない入力行の数を ``int`` で返す。"

msgid "The ``default`` argument is not supported."
msgstr "``default`` 引数はサポートされていません。"

msgid "``RegrIntercept``"
msgstr "``RegrIntercept``"

msgid ""
"Returns the y-intercept of the least-squares-fit linear equation determined "
"by the ``(x, y)`` pairs as a ``float``, or ``default`` if there aren't any "
"matching rows."
msgstr ""
"``(x, y)`` のペアによって決定される最小二乗法にフィットした一次方程式の y 切"
"片を ``float`` で返します。マッチする行がない場合は ``default`` を返します。"

msgid "``RegrR2``"
msgstr "``RegrR2``"

msgid ""
"Returns the square of the correlation coefficient as a ``float``, or "
"``default`` if there aren't any matching rows."
msgstr ""
"相関係数の二乗を ``float`` で返すか、マッチする行がない場合は ``default`` で"
"返します。"

msgid "``RegrSlope``"
msgstr "``RegrSlope``"

msgid ""
"Returns the slope of the least-squares-fit linear equation determined by the "
"``(x, y)`` pairs as a ``float``, or ``default`` if there aren't any matching "
"rows."
msgstr ""
"``(x, y)`` のペアによって決定される最小二乗法の一次方程式の傾きを ``float`` "
"で返すか、マッチする行がない場合は ``default`` で返す。"

msgid "``RegrSXX``"
msgstr "``RegrSXX``"

msgid ""
"Returns ``sum(x^2) - sum(x)^2/N`` (\"sum of squares\" of the independent "
"variable) as a ``float``, or ``default`` if there aren't any matching rows."
msgstr ""
"``sum(x^2) - sum(x)^2/N`` (\"独立変数の二乗和\") を ``float`` で返すか、マッ"
"チする行がない場合は ``default`` で返す。"

msgid "``RegrSXY``"
msgstr "``RegrSXY``"

msgid ""
"Returns ``sum(x*y) - sum(x) * sum(y)/N`` (\"sum of products\" of independent "
"times dependent variable) as a ``float``, or ``default`` if there aren't any "
"matching rows."
msgstr ""
"``sum(x*y)-sum(x)*sum(y)/N`` (独立変数と従属変数の \"積和\") を ``float`` で"
"返すか、マッチする行がない場合は ``default`` で返す。"

msgid "``RegrSYY``"
msgstr "``RegrSYY``"

msgid ""
"Returns ``sum(y^2) - sum(y)^2/N`` (\"sum of squares\" of the dependent "
"variable) as a ``float``, or ``default`` if there aren't any matching rows."
msgstr ""
"``sum(y^2) - sum(y)^2/N`` (従属変数の二乗和) を ``float`` で返すか、マッチす"
"る行がない場合は ``default`` で返す。"

msgid "Usage examples"
msgstr "使用例"

msgid "We will use this example table:"
msgstr "この例では以下のテーブルを使用します:"

msgid ""
"Here's some examples of some of the general-purpose aggregation functions:"
msgstr "汎用的な集計関数の例をいくつか紹介します:"

msgid ""
"The next example shows the usage of statistical aggregate functions. The "
"underlying math will be not described (you can read about this, for example, "
"at `wikipedia <https://en.wikipedia.org/wiki/Regression_analysis>`_):"
msgstr ""
"次の例では、統計的集計関数の使い方を示します。基礎となる数学については説明し"
"ません (たとえば、 `wikipedia <https://ja.wikipedia.org/wiki/"
"%E5%9B%9E%E5%B8%B0%E5%88%86%E6%9E%90>`_ で読むことができます):"

msgid "PostgreSQL specific database constraints"
msgstr "PostgreSQL 固有のデータベース制約"

msgid ""
"PostgreSQL supports additional data integrity constraints available from the "
"``django.contrib.postgres.constraints`` module. They are added in the model :"
"attr:`Meta.constraints <django.db.models.Options.constraints>` option."
msgstr ""
"PostgreSQL は ``django.contrib.postgres.constraints`` モジュールから利用でき"
"る追加のデータ整合性制約をサポートしています。これらはモデル :attr:`Meta."
"constraints <django.db.models.Options.constraints>` オプションで追加されま"
"す。"

msgid "``ExclusionConstraint``"
msgstr "``ExclusionConstraint``"

msgid ""
"Creates an exclusion constraint in the database. Internally, PostgreSQL "
"implements exclusion constraints using indexes. The default index type is "
"`GiST <https://www.postgresql.org/docs/current/gist.html>`_. To use them, "
"you need to activate the `btree_gist extension <https://www.postgresql.org/"
"docs/current/btree-gist.html>`_ on PostgreSQL. You can install it using the :"
"class:`~django.contrib.postgres.operations.BtreeGistExtension` migration "
"operation."
msgstr ""
"データベースに排他制約を作成します。内部的には、PostgreSQLはインデックスを使"
"用して排他制約を実装しています。デフォルトのインデックス型は `GiST <https://"
"www.postgresql.org/docs/current/gist.html>`_ です。インデックスを使用するに"
"は、PostgreSQLで `btree_gist extension <https://www.postgresql.org/docs/"
"current/btree-gist.html>`_ を有効にする必要があります。 :class:`~django."
"contrib.postgres.operations.BtreeGistExtension` マイグレーションオペレーショ"
"ンを使ってインストールできます。"

msgid ""
"If you attempt to insert a new row that conflicts with an existing row, an :"
"exc:`~django.db.IntegrityError` is raised. Similarly, when update conflicts "
"with an existing row."
msgstr ""
"既存の行と競合する新しい行を挿入しようとすると、:exc:`~django.db."
"IntegrityError` が発生します。更新が既存の行と競合する場合も同様です。"

msgid ""
"Exclusion constraints are checked during the :ref:`model validation "
"<validating-objects>`."
msgstr ""
"排他制約は :ref:`モデル バリデーション <validating-objects>` の間にチェックさ"
"れます。"

msgid "See :attr:`.BaseConstraint.name`."
msgstr ":attr:`.BaseConstraint.name` を参照。"

msgid "``expressions``"
msgstr "``expressions``"

msgid ""
"An iterable of 2-tuples. The first element is an expression or string. The "
"second element is an SQL operator represented as a string. To avoid typos, "
"you may use :class:`~django.contrib.postgres.fields.RangeOperators` which "
"maps the operators with strings. For example::"
msgstr ""
"2値タプルのイテラブル。最初の要素は式または文字列。2番目の要素は文字列で表現"
"された SQL 演算子です。タイプミスを避けるために、演算子を文字列でマップする :"
"class:`~django.contrib.postgres.fields.RangeOperators` を使用できます。たとえ"
"ば:"

msgid "Restrictions on operators."
msgstr "演算子の制約"

msgid "Only commutative operators can be used in exclusion constraints."
msgstr "排他制約には可換演算子のみ使用できます。"

msgid ""
"The :class:`OpClass() <django.contrib.postgres.indexes.OpClass>` expression "
"can be used to specify a custom `operator class`_ for the constraint "
"expressions. For example::"
msgstr ""
":class:`OpClass() <django.contrib.postgres.indexes.OpClass>` 式は、制約式のカ"
"スタム `operator class`_ を指定するために使用できます。たとえば:"

msgid "creates an exclusion constraint on ``circle`` using ``circle_ops``."
msgstr "これは ``circle_ops`` を使用して ``circle`` 上に排他制約を作成します。"

msgid "``index_type``"
msgstr "``index_type``"

msgid ""
"The index type of the constraint. Accepted values are ``GIST`` or "
"``SPGIST``. Matching is case insensitive. If not provided, the default index "
"type is ``GIST``."
msgstr ""
"制約のインデックスタイプです。受け入れられる値は ``GIST`` または ``SPGIST`` "
"です。大文字小文字を区別しません。指定されていない場合、デフォルトのインデッ"
"クスタイプは ``GIST`` です。"

msgid "``condition``"
msgstr "``condition``"

msgid ""
"A :class:`~django.db.models.Q` object that specifies the condition to "
"restrict a constraint to a subset of rows. For example, "
"``condition=Q(cancelled=False)``."
msgstr ""
"行の一部に制約をかける条件を指定する :class:`~django.db.models.Q` オブジェク"
"ト。たとえば、 ``condition=Q(cancelled=False)`` 。"

msgid ""
"These conditions have the same database restrictions as :attr:`django.db."
"models.Index.condition`."
msgstr ""
"これらの条件は、 :attr:`django.db.models.Index.condition` と同じデータベース"
"の制約事項を持ちます。"

msgid "``deferrable``"
msgstr "``deferrable``"

msgid ""
"Set this parameter to create a deferrable exclusion constraint. Accepted "
"values are ``Deferrable.DEFERRED`` or ``Deferrable.IMMEDIATE``. For example::"
msgstr ""
"遅延可能な排他制約を作成するには、このパラメータを設定します。使用可能な値は "
"``Deferrable.DEFERRED`` または ``Deferrable.IMMEDIATE`` です。例:"

msgid ""
"By default constraints are not deferred. A deferred constraint will not be "
"enforced until the end of the transaction. An immediate constraint will be "
"enforced immediately after every command."
msgstr ""
"デフォルトでは、制約は遅延 (DEFERRED) されません。遅延された制約は、トランザ"
"クションが終了するまで実行されません。即時 (IMMEDIATE) 制約は、すべてのコマン"
"ドの直後に実行されます。"

msgid ""
"Deferred exclusion constraints may lead to a `performance penalty <https://"
"www.postgresql.org/docs/current/sql-createtable.html#id-1.9.3.85.9.4>`_."
msgstr ""
"排他制約の遅延は、パフォーマンスの悪化 `performance penalty <https://www."
"postgresql.org/docs/current/sql-createtable.html#id-1.9.3.85.9.4>`_ につなが"
"るかも知れません。"

msgid "``include``"
msgstr "``include``"

msgid ""
"A list or tuple of the names of the fields to be included in the covering "
"exclusion constraint as non-key columns. This allows index-only scans to be "
"used for queries that select only included fields (:attr:"
"`~ExclusionConstraint.include`) and filter only by indexed fields (:attr:"
"`~ExclusionConstraint.expressions`)."
msgstr ""
"非キー列としてカバリング排他制約に含めるフィールド名のリストまたはタプル。こ"
"れにより、含まれるフィールドのみを選択し (:attr:`~ExclusionConstraint."
"include`)、インデックス化されたフィールドのみでフィルタリングする (:attr:"
"`~ExclusionConstraint.expressions`) クエリにインデックスのみのスキャンを使用"
"できます。"

msgid ""
"``include`` is supported for GiST indexes. PostgreSQL 14+ also supports "
"``include`` for SP-GiST indexes."
msgstr ""
"``include`` は GiST インデックスでサポートされています。PostgreSQL 14+ では、"
"SP-GiST インデックスでも ``include`` がサポートされています。"

msgid "``violation_error_code``"
msgstr "``violation_error_code``"

msgid ""
"The error code used when ``ValidationError`` is raised during :ref:`model "
"validation <validating-objects>`. Defaults to ``None``."
msgstr ""
":ref:`モデルのバリデーション <validating-objects>` 中に ``ValidationError`` "
"が発生した場合に使用されるエラーコードです。デフォルトは ``None`` です。"

msgid "``violation_error_message``"
msgstr "``violation_error_message``"

msgid ""
"The error message used when ``ValidationError`` is raised during :ref:`model "
"validation <validating-objects>`. Defaults to :attr:`.BaseConstraint."
"violation_error_message`."
msgstr ""
":ref:`モデルのバリデーション <validating-objects>` 中に ``ValidationError`` "
"が発生した場合に使用されるエラーメッセージです。デフォルトは :attr:`."
"BaseConstraint.violation_error_message` です。"

msgid "Examples"
msgstr "例"

msgid ""
"The following example restricts overlapping reservations in the same room, "
"not taking canceled reservations into account::"
msgstr ""
"次の例では、キャンセルされた予約を考慮せずに、同じ部屋での重複する予約を制限"
"しています。"

msgid ""
"In case your model defines a range using two fields, instead of the native "
"PostgreSQL range types, you should write an expression that uses the "
"equivalent function (e.g. ``TsTzRange()``), and use the delimiters for the "
"field. Most often, the delimiters will be ``'[)'``, meaning that the lower "
"bound is inclusive and the upper bound is exclusive. You may use the :class:"
"`~django.contrib.postgres.fields.RangeBoundary` that provides an expression "
"mapping for the `range boundaries <https://www.postgresql.org/docs/ current/"
"rangetypes.html#RANGETYPES-INCLUSIVITY>`_. For example::"
msgstr ""
"モデルが2つのフィールドを使用して範囲を定義する場合、PostgreSQLのネイティブな"
"範囲型ではなく、同等の関数 (例えば ``TsTzRange()``) を使用する式を記述し、"
"フィールドの区切り文字を使用する必要があります。ほとんどの場合、区切り文字は "
"``'[)'`` となり、下限は包括的で上限は排他的であることを意味します。 `範囲境"
"界 <https://www.postgresql.org/docs/ current/rangetypes.html#RANGETYPES-"
"INCLUSIVITY>`_ の式マッピングを提供する  :class:`~django.contrib.postgres."
"fields.RangeBoundary` を使用できます。たとえば:"

msgid "PostgreSQL specific query expressions"
msgstr "PostgreSQL 固有のクエリ式"

msgid ""
"These expressions are available from the ``django.contrib.postgres."
"expressions`` module."
msgstr ""
"これらの式は ``django.contrib.postgres.expressions`` モジュールから利用できま"
"す。"

msgid "``ArraySubquery()`` expressions"
msgstr "``ArraySubquery()`` 式"

msgid ""
"``ArraySubquery`` is a :class:`~django.db.models.Subquery` that uses the "
"PostgreSQL ``ARRAY`` constructor to build a list of values from the "
"queryset, which must use :meth:`.QuerySet.values` to return only a single "
"column."
msgstr ""
"``ArraySubquery`` は、PostgreSQL の ``ARRAY`` コンストラクタを使用してクエリ"
"セットから値のリストを構築する :class:`~django.db.models.Subquery` です。クエ"
"リセットは :meth:`.QuerySet.values` を使用して、1つの列のみを返す必要がありま"
"す。"

msgid ""
"This class differs from :class:`~django.contrib.postgres.aggregates."
"ArrayAgg` in the way that it does not act as an aggregate function and does "
"not require an SQL ``GROUP BY`` clause to build the list of values."
msgstr ""
"このクラスは、:class:`~django.contrib.postgres.aggregates.ArrayAgg` と異な"
"り、集計関数として機能せず、値のリストを構築する際にSQLの ``GROUP BY`` 句を必"
"要としません。"

msgid ""
"For example, if you want to annotate all related books to an author as JSON "
"objects:"
msgstr ""
"例えば、特定の著者に関連する全ての書籍を JSON オブジェクトとしてアノテーショ"
"ンしたい場合は、次のようにします:"

msgid "PostgreSQL specific model fields"
msgstr "PostgreSQL 固有のモデルフィールド"

msgid ""
"All of these fields are available from the ``django.contrib.postgres."
"fields`` module."
msgstr ""
"これらのフィールドは全て ``django.contrib.postgres.fields`` モジュールから利"
"用できます。"

msgid "Indexing these fields"
msgstr "これらのフィールドにインデックスを付ける"

msgid ""
":class:`~django.db.models.Index` and :attr:`.Field.db_index` both create a B-"
"tree index, which isn't particularly helpful when querying complex data "
"types. Indexes such as :class:`~django.contrib.postgres.indexes.GinIndex` "
"and :class:`~django.contrib.postgres.indexes.GistIndex` are better suited, "
"though the index choice is dependent on the queries that you're using. "
"Generally, GiST may be a good choice for the :ref:`range fields <range-"
"fields>` and :class:`HStoreField`, and GIN may be helpful for :class:"
"`ArrayField`."
msgstr ""
":class:`~django.db.models.Index` と :attr:`.Field.db_index` は両方とも B-"
"tree インデックスを作成しますが、複雑なデータ型をクエリする際にはあまり役立ち"
"ません。 :class:`~django.contrib.postgres.indexes.GinIndex` や :class:"
"`~django.contrib.postgres.indexes.GistIndex` などのインデックスの方が適してい"
"ます。ただし、適切なインデックスの選択は使用しているクエリに依存します。一般"
"的には、GiST は :ref:`範囲フィールド <range-fields>` や :class:`HStoreField` "
"には適しており、GIN は :class:`ArrayField` に役立つかもしれません。"

msgid "``ArrayField``"
msgstr "``ArrayField``"

msgid ""
"A field for storing lists of data. Most field types can be used, and you "
"pass another field instance as the :attr:`base_field <ArrayField."
"base_field>`. You may also specify a :attr:`size <ArrayField.size>`. "
"``ArrayField`` can be nested to store multi-dimensional arrays."
msgstr ""
"データのリストを格納するためのフィールドです。ほとんどのフィールドタイプを使"
"用でき、 :attr:`base_field <ArrayField.base_field>` として別のフィールドイン"
"スタンスを渡します。 :attr:`size <ArrayField.size>` を指定することもできま"
"す。``ArrayField`` は、多次元配列を格納するためにネストすることもできます。"

msgid ""
"If you give the field a :attr:`~django.db.models.Field.default`, ensure it's "
"a callable such as ``list`` (for an empty default) or a callable that "
"returns a list (such as a function). Incorrectly using ``default=[]`` "
"creates a mutable default that is shared between all instances of "
"``ArrayField``."
msgstr ""
"フィールドに :attr:`~django.db.models.Field.default` を与える場合は、それが "
"``list`` (空のデフォルトの場合) やリストを返す呼び出し可能オブジェクト (関数"
"など) のような呼び出し可能オブジェクトであることを確認してください。 "
"``default=[]`` を誤って使用すると、すべての ``ArrayField`` インスタンスで共有"
"される変更可能なデフォルトが作成されます。"

msgid "This is a required argument."
msgstr "これは必須の引数です。"

msgid ""
"Specifies the underlying data type and behavior for the array. It should be "
"an instance of a subclass of :class:`~django.db.models.Field`. For example, "
"it could be an :class:`~django.db.models.IntegerField` or a :class:`~django."
"db.models.CharField`. Most field types are permitted, with the exception of "
"those handling relational data (:class:`~django.db.models.ForeignKey`, :"
"class:`~django.db.models.OneToOneField` and :class:`~django.db.models."
"ManyToManyField`) and file fields ( :class:`~django.db.models.FileField` "
"and :class:`~django.db.models.ImageField`)."
msgstr ""
"配列のベースとなるデータ型や動作を指定します。これは、 :class:`~django.db."
"models.Field` のサブクラスのインスタンスである必要があります。例えば :class:"
"`~django.db.models.IntegerField` や :class:`~django.db.models.CharField` など"
"が考えられます。ほとんどのフィールドタイプが許容されますが、リレーショナル"
"データを処理するもの (:class:`~django.db.models.ForeignKey`, :class:`~django."
"db.models.OneToOneField`, :class:`~django.db.models.ManyToManyField`) やファ"
"イルフィールド (:class:`~django.db.models.FileField`, :class:`~django.db."
"models.ImageField`) は除外されます。"

msgid ""
"It is possible to nest array fields - you can specify an instance of "
"``ArrayField`` as the ``base_field``. For example::"
msgstr ""
"配列フィールドは入れ子にできます。 ``base_field`` として ``ArrayField`` のイ"
"ンスタンスを指定できます。たとえば:"

msgid ""
"Transformation of values between the database and the model, validation of "
"data and configuration, and serialization are all delegated to the "
"underlying base field."
msgstr ""
"データベースとモデル間の値の変換、データと設定の検証、シリアライズはすべて、"
"基盤となるベースフィールドに委譲されます。"

msgid "This is an optional argument."
msgstr "これはオプションの引数です。"

msgid ""
"If passed, the array will have a maximum size as specified. This will be "
"passed to the database, although PostgreSQL at present does not enforce the "
"restriction."
msgstr ""
"指定された場合、配列は指定された最大サイズを持ちます。これはデータベースに渡"
"されますが、現在のところ PostgreSQL はこの制限を強制しません。"

msgid ""
"When nesting ``ArrayField``, whether you use the ``size`` parameter or not, "
"PostgreSQL requires that the arrays are rectangular::"
msgstr ""
"``ArrayField`` を入れ子にする際、 ``size`` パラメータを使用するかどうかに関わ"
"らず、PostgreSQL では配列は長方形である必要があります。"

msgid ""
"If irregular shapes are required, then the underlying field should be made "
"nullable and the values padded with ``None``."
msgstr ""
"不規則な形状が必要な場合は、基になるフィールドをnullable にし、値を ``None`` "
"でパディングする必要があります。"

msgid "Querying ``ArrayField``"
msgstr "``ArrayField`` へのクエリ"

msgid ""
"There are a number of custom lookups and transforms for :class:`ArrayField`. "
"We will use the following example model::"
msgstr ""
":class:`ArrayField` には、カスタムルックアップやトランスフォームがいくつかあ"
"ります。以下のモデル例を使用します。"

msgid ""
"The :lookup:`contains` lookup is overridden on :class:`ArrayField`. The "
"returned objects will be those where the values passed are a subset of the "
"data. It uses the SQL operator ``@>``. For example:"
msgstr ""
":class:`ArrayField` 上で :lookup:`contains` ルックアップはオーバーライドされ"
"ます。返されるオブジェクトは、渡された値がデータの部分集合であるものです。こ"
"れは SQL 演算子 ``@>`` を使用します。たとえば、:"

msgid "``contained_by``"
msgstr "``contained_by``"

msgid ""
"This is the inverse of the :lookup:`contains <arrayfield.contains>` lookup - "
"the objects returned will be those where the data is a subset of the values "
"passed. It uses the SQL operator ``<@``. For example:"
msgstr ""
"これは :lookup:`contains <arrayfield.contains>` ルックアップの逆です。返され"
"るオブジェクトは、データが渡された値の部分集合であるものです。これにはSQL演算"
"子 ``<@`` が使用されます。たとえば:"

msgid "``overlap``"
msgstr "``overlap``"

msgid ""
"Returns objects where the data shares any results with the values passed. "
"Uses the SQL operator ``&&``. For example:"
msgstr ""
"データが渡された値といずれか一致するオブジェクトを返します。SQL 演算子 "
"``(&&)`` を使用します。例:"

msgid ""
"Support for ``QuerySet.values()`` and ``values_list()`` as a right-hand side "
"was added."
msgstr ""
"右辺としての ``QuerySet.values()`` と ``values_list()`` をサポートしました。"

msgid "``len``"
msgstr "``len``"

msgid ""
"Returns the length of the array. The lookups available afterward are those "
"available for :class:`~django.db.models.IntegerField`. For example:"
msgstr ""
"配列の長さを返します。この後に利用可能なルックアップは :class:`~django.db."
"models.IntegerField` で利用可能なものです。たとえば:"

msgid "Index transforms"
msgstr "インデックスのトランスフォーム"

msgid ""
"Index transforms index into the array. Any non-negative integer can be used. "
"There are no errors if it exceeds the :attr:`size <ArrayField.size>` of the "
"array. The lookups available after the transform are those from the :attr:"
"`base_field <ArrayField.base_field>`. For example:"
msgstr ""
"インデックスは配列内のインデックスに変換されます。非負の整数ならどれでも使用"
"できます。配列の :attr:`size <ArrayField.size>` 属性を超えていてもエラーは発"
"生しません。変換後に利用可能なルックアップは、 :attr:`base_field <ArrayField."
"base_field>` 属性から得られるものです。たとえば:"

msgid ""
"PostgreSQL uses 1-based indexing for array fields when writing raw SQL. "
"However these indexes and those used in :lookup:`slices <arrayfield.slice>` "
"use 0-based indexing to be consistent with Python."
msgstr ""
"PostgreSQL は素のSQLを記述する際、配列フィールドに1から始まるインデックスを使"
"用します。しかし、これらのインデックスと :lookup:`slices <arrayfield.slice>` "
"で使用されるインデックスは、Pythonとの一貫性を保つために0から始まるインデック"
"スを使用します。"

msgid "Slice transforms"
msgstr "スライス トランスフォーム"

msgid ""
"Slice transforms take a slice of the array. Any two non-negative integers "
"can be used, separated by a single underscore. The lookups available after "
"the transform do not change. For example:"
msgstr ""
"スライス トランスフォームは、配列の一部を切り取ります。 2つの非負整数をアン"
"ダースコアで区切って使用できます。トランスフォーム後に利用可能なルックアップ"
"は変わりません。 例を挙げると、"

msgid ""
"PostgreSQL uses 1-based indexing for array fields when writing raw SQL. "
"However these slices and those used in :lookup:`indexes <arrayfield.index>` "
"use 0-based indexing to be consistent with Python."
msgstr ""
"PostgreSQLは素のSQLを記述する際、配列フィールドに対して1から始まるインデック"
"スを使用します。しかし、これらのスライスや :lookup:`indexes <arrayfield."
"index>` で使用されるスライスは、Pythonとの一貫性を保つために0から始まるイン"
"デックスを使用します。"

msgid "Multidimensional arrays with indexes and slices"
msgstr "インデックスとスライスを使用した多次元配列"

msgid ""
"PostgreSQL has some rather esoteric behavior when using indexes and slices "
"on multidimensional arrays. It will always work to use indexes to reach down "
"to the final underlying data, but most other slices behave strangely at the "
"database level and cannot be supported in a logical, consistent fashion by "
"Django."
msgstr ""
"PostgreSQL は、多次元配列でインデックスやスライスを使うときに、かなり難解な動"
"作をします。最終的な基礎データまで到達するためにインデックスを使うのは常にう"
"まくいきますが、他のほとんどのスライスはデータベースレベルで奇妙な動作をする"
"ので、 Django が論理的で一貫性のある方法でサポートすることはできません。"

msgid "``CIText`` fields"
msgstr "``CIText`` フィールド"

msgid ""
"A mixin to create case-insensitive text fields backed by the citext_ type. "
"Read about `the performance considerations`_ prior to using it."
msgstr ""
"citext_ 型をバックエンドとする大文字小文字を区別しないテキストフィールドを作"
"成するためのミックスインです。使用する前に `the performance considerations`_ "
"を参照してください。"

msgid ""
"To use ``citext``, use the :class:`.CITextExtension` operation to :ref:`set "
"up the citext extension <create-postgresql-extensions>` in PostgreSQL before "
"the first ``CreateModel`` migration operation."
msgstr ""
"``citext`` を使用するには、最初の ``CreateModel`` マイグレーションオペレー"
"ションの前に、PostgreSQL で :ref:`citext 拡張機能をセットアップ <create-"
"postgresql-extensions>` するために :class:`.CITextExtension` オペレーションを"
"使用してください。"

msgid ""
"If you're using an :class:`~django.contrib.postgres.fields.ArrayField` of "
"``CIText`` fields, you must add ``'django.contrib.postgres'`` in your :"
"setting:`INSTALLED_APPS`, otherwise field values will appear as strings like "
"``'{thoughts,django}'``."
msgstr ""
"``CIText`` フィールドの :class:`~django.contrib.postgres.fields.ArrayField` "
"を使用している場合、 :setting:`INSTALLED_APPS` に ``'django.contrib."
"postgres'`` を追加する必要があります。そうしないと、フィールドの値が "
"``'{thoughts,django}'`` のような文字列として表示されます。"

msgid "Several fields that use the mixin are provided:"
msgstr "ミックスインを使用するいくつかのフィールドが提供されています:"

msgid ""
"``CICharField`` is deprecated in favor of ``CharField(db_collation=\"…\")`` "
"with a case-insensitive non-deterministic collation."
msgstr ""
"``CICharField`` は、大文字小文字を区別しない非決定論的な照合順序を持つ "
"``CharField(db_collation=\"…\")`` に置き換えられ、非推奨となりました。"

msgid ""
"``CIEmailField`` is deprecated in favor of ``EmailField(db_collation=\"…"
"\")`` with a case-insensitive non-deterministic collation."
msgstr ""
"``CIEmailField`` は、大文字小文字を区別しない非決定的な照合順序を用いる "
"``EmailField(db_collation=\"…\")`` に置き換えられ、非推奨となりました。"

msgid ""
"``CITextField`` is deprecated in favor of ``TextField(db_collation=\"…\")`` "
"with a case-insensitive non-deterministic collation."
msgstr ""
"``CITextField`` は大文字小文字を区別しない非決定的な照合順序を持つ "
"``TextField(db_collation=\"…\")`` に置き換えられ、非推奨となりました。"

msgid ""
"These fields subclass :class:`~django.db.models.CharField`, :class:`~django."
"db.models.EmailField`, and :class:`~django.db.models.TextField`, "
"respectively."
msgstr ""
"これらのフィールドはそれぞれ :class:`~django.db.models.CharField`、 :class:"
"`~django.db.models.EmailField`、 :class:`~django.db.models.TextField` のサブ"
"クラスです。"

msgid ""
"``max_length`` won't be enforced in the database since ``citext`` behaves "
"similar to PostgreSQL's ``text`` type."
msgstr ""
"``citext`` はPostgreSQLの ``text`` 型と同じような動作をするので、"
"``max_length`` はデータベースで強制されることはありません。"

msgid "Case-insensitive collations"
msgstr "大文字小文字を区別しない照合順序 (collation)"

msgid ""
"It's preferable to use non-deterministic collations instead of the "
"``citext`` extension. You can create them using the :class:`~django.contrib."
"postgres.operations.CreateCollation` migration operation. For more details, "
"see :ref:`manage-postgresql-collations` and the PostgreSQL documentation "
"about `non-deterministic collations`_."
msgstr ""
"``citext`` 拡張機能の代わりに非決定的照合順序を使用するのが望ましいです。これ"
"を作成するには :class:`~django.contrib.postgres.operations.CreateCollation` "
"マイグレーションオペレーションを使用します。詳しくは :ref:`manage-postgresql-"
"collations` や PostgreSQL のドキュメント `non-deterministic collations`_ を参"
"照してください。"

msgid "``HStoreField``"
msgstr "``HStoreField``"

msgid ""
"A field for storing key-value pairs. The Python data type used is a "
"``dict``. Keys must be strings, and values may be either strings or nulls "
"(``None`` in Python)."
msgstr ""
"キーと値のペアを格納するためのフィールド。Python のデータ型は ``dict`` です。"
"キーは文字列でなければならず、値は文字列または NULL (Python では ``None``) で"
"なければなりません。"

msgid "To use this field, you'll need to:"
msgstr "このフィールドを使用するには、次のようにします:"

msgid "Add ``'django.contrib.postgres'`` in your :setting:`INSTALLED_APPS`."
msgstr ""
":setting:`INSTALLED_APPS` に ``'django.contrib.postgres'`` を追加します。"

msgid ""
":ref:`Set up the hstore extension <create-postgresql-extensions>` in "
"PostgreSQL."
msgstr ""
":ref:`PostgreSQL の hstore 拡張 <create-postgresql-extensions>` を設定しま"
"す。"

msgid ""
"You'll see an error like ``can't adapt type 'dict'`` if you skip the first "
"step, or ``type \"hstore\" does not exist`` if you skip the second."
msgstr ""
"最初のステップをスキップすると ``can't adapt type 'dict'`` というエラーが表示"
"され、2番目のステップをスキップすると ``type \"hstore\" does not exist`` とい"
"うエラーが表示されます。"

msgid ""
"On occasions it may be useful to require or restrict the keys which are "
"valid for a given field. This can be done using the :class:`~django.contrib."
"postgres.validators.KeysValidator`."
msgstr ""
"与えられたフィールドに対して有効なキーを要求したり、制限したりすることが有用"
"な場合があります。これは :class:`~django.contrib.postgres.validators."
"KeysValidator` を使って行うことができます。"

msgid "Querying ``HStoreField``"
msgstr "``HStoreField`` へのクエリ"

msgid ""
"In addition to the ability to query by key, there are a number of custom "
"lookups available for ``HStoreField``."
msgstr ""
"``HStoreField`` では、キーによるクエリに加えて、多くのカスタムルックアップが"
"利用可能です。"

msgid "We will use the following example model::"
msgstr "次のようなモデル例を使用します:"

msgid "Key lookups"
msgstr "キーのルックアップ"

msgid "To query based on a given key, you can use that key as the lookup name:"
msgstr ""
"指定されたキーに基づいてクエリを実行するには、そのキーをルックアップ名として"
"使用します:"

msgid "You can chain other lookups after key lookups:"
msgstr "キーのルックアップの後に他のルックアップを連結することもできます:"

msgid "or use ``F()`` expressions to annotate a key value. For example:"
msgstr ""
"``F()`` 式を使ってキー値にアノテーションを付けることもできます。たとえば:"

msgid ""
"If the key you wish to query by clashes with the name of another lookup, you "
"need to use the :lookup:`hstorefield.contains` lookup instead."
msgstr ""
"クエリしたいキーが他のルックアップの名前と衝突する場合は、代わりに :lookup:"
"`hstorefield.contains` ルックアップを使用する必要があります。"

msgid ""
"Key transforms can also be chained with: :lookup:`contains`, :lookup:"
"`icontains`, :lookup:`endswith`, :lookup:`iendswith`, :lookup:`iexact`, :"
"lookup:`regex`, :lookup:`iregex`, :lookup:`startswith`, and :lookup:"
"`istartswith` lookups."
msgstr ""
"キーのトランスフォームは、 :lookup:`contains`、:lookup:`icontains`、:lookup:"
"`endswith`、 :lookup:`iendswith`、:lookup:`iexact`、:lookup:`regex`、:lookup:"
"`iregex`、:lookup:`startswith`、および :lookup:`istartswith`  ルックアップと"
"も連結できます。"

msgid ""
"Since any string could be a key in a hstore value, any lookup other than "
"those listed below will be interpreted as a key lookup. No errors are "
"raised. Be extra careful for typing mistakes, and always check your queries "
"work as you intend."
msgstr ""
"どのような文字列でも hstore 値のキーになり得るので、以下に列挙されている以外"
"のルックアップはキーのルックアップとして解釈されます。エラーは発生しません。"
"タイプミスには特に注意し、クエリが意図したとおりに動作するか常にチェックして"
"ください。"

msgid ""
"The :lookup:`contains` lookup is overridden on :class:`~django.contrib."
"postgres.fields.HStoreField`. The returned objects are those where the given "
"``dict`` of key-value pairs are all contained in the field. It uses the SQL "
"operator ``@>``. For example:"
msgstr ""
":lookup:`contains` ルックアップは、:class:`~django.contrib.postgres.fields."
"HStoreField` 上でオーバーライドされています。返されるオブジェクトは、指定され"
"たキーと値の ``dict`` がフィールド内にすべて含まれるものです。SQL 演算子 "
"``@>`` を使用します。たとえば:"

msgid ""
"This is the inverse of the :lookup:`contains <hstorefield.contains>` lookup "
"- the objects returned will be those where the key-value pairs on the object "
"are a subset of those in the value passed. It uses the SQL operator ``<@``. "
"For example:"
msgstr ""
"これは、 :lookup:`contains <hstorefield.contains>` ルックアップの逆です。返さ"
"れるオブジェクトは、オブジェクト上のキーと値のペアが渡された値のサブセットで"
"あるものです。これは、SQL演算子 ``<@`` を使用します。たとえば:"

msgid "``has_key``"
msgstr "``has_key``"

msgid ""
"Returns objects where the given key is in the data. Uses the SQL operator ``?"
"``. For example:"
msgstr ""
"与えられたキーがデータ内にあるオブジェクトを返します。SQL演算子は ``?`` を使"
"用します。例:"

msgid "``has_any_keys``"
msgstr "``has_any_keys``"

msgid ""
"Returns objects where any of the given keys are in the data. Uses the SQL "
"operator ``?|``. For example:"
msgstr ""
"与えられたキーのいずれかがデータ内にあるオブジェクトを返します。SQL演算子 "
"``?|`` を使用します。例:"

msgid "``has_keys``"
msgstr "``has_keys``"

msgid ""
"Returns objects where all of the given keys are in the data. Uses the SQL "
"operator ``?&``. For example:"
msgstr ""
"与えられたキーが全てデータ中に含まれるオブジェクトを返します。SQL演算子 ``?"
"&`` を使用します。例:"

msgid "``keys``"
msgstr "``keys``"

msgid ""
"Returns objects where the array of keys is the given value. Note that the "
"order is not guaranteed to be reliable, so this transform is mainly useful "
"for using in conjunction with lookups on :class:`~django.contrib.postgres."
"fields.ArrayField`. Uses the SQL function ``akeys()``. For example:"
msgstr ""
"与えられた値がキーの配列であるオブジェクトを返します。順序が信頼できるわけで"
"はないことに注意してください。したがって、このトランスフォームは主に :class:"
"`~django.contrib.postgres.fields.ArrayField` でのルックアップと組み合わせて使"
"用するために便利です。SQL 関数 ``akeys()`` を使用します。例: "

msgid "``values``"
msgstr "``values``"

msgid ""
"Returns objects where the array of values is the given value. Note that the "
"order is not guaranteed to be reliable, so this transform is mainly useful "
"for using in conjunction with lookups on :class:`~django.contrib.postgres."
"fields.ArrayField`. Uses the SQL function ``avals()``. For example:"
msgstr ""
"値の配列が与えられた値であるオブジェクトを返します。このトランスフォームは主"
"に :class:`~django.contrib.postgres.fields.ArrayField` のルックアップと組み合"
"わせて使用すると便利です。SQL 関数 ``avals()`` を使用します。たとえば:"

msgid "Range Fields"
msgstr "範囲フィールド"

msgid ""
"There are five range field types, corresponding to the built-in range types "
"in PostgreSQL. These fields are used to store a range of values; for example "
"the start and end timestamps of an event, or the range of ages an activity "
"is suitable for."
msgstr ""
"PostgreSQLの組み込み範囲型に対応する5つの範囲フィールド型があります。これらの"
"フィールドは値の範囲を格納するために使用されます。例えば、イベントの開始と終"
"了のタイムスタンプや、アクティビティに適した年齢の範囲などです。"

msgid ""
"All of the range fields translate to :ref:`psycopg Range objects <psycopg:"
"adapt-range>` in Python, but also accept tuples as input if no bounds "
"information is necessary. The default is lower bound included, upper bound "
"excluded, that is ``[)`` (see the PostgreSQL documentation for details about "
"`different bounds`_). The default bounds can be changed for non-discrete "
"range fields (:class:`.DateTimeRangeField` and :class:`.DecimalRangeField`) "
"by using the ``default_bounds`` argument."
msgstr ""
"すべての範囲フィールドはPythonでは :ref:`psycopg Range オブジェクト <psycopg:"
"adapt-range>` に変換されますが、境界情報が不要な場合はタプルを入力として受け"
"付けます。デフォルトは下界を含み、上界を含まない ``[)`` です (`different "
"bounds`_ の詳細についてはPostgreSQLのドキュメントを参照してください) 。離散範"
"囲でないフィールド (:class:`.DateTimeRangeField` と :class:`."
"DecimalRangeField`) のデフォルトの境界は ``default_bounds`` 引数で変更できま"
"す。"

msgid "``IntegerRangeField``"
msgstr "``IntegerRangeField``"

msgid ""
"Stores a range of integers. Based on an :class:`~django.db.models."
"IntegerField`. Represented by an ``int4range`` in the database and a "
"``django.db.backends.postgresql.psycopg_any.NumericRange`` in Python."
msgstr ""
"整数の範囲を格納します。 :class:`~django.db.models.IntegerField` に基づいてい"
"ます。データベースでは ``int4range`` で表現され、 Python では ``django.db."
"backends.postgresql.psycopg_any.NumericRange`` で表現されます。"

msgid ""
"Regardless of the bounds specified when saving the data, PostgreSQL always "
"returns a range in a canonical form that includes the lower bound and "
"excludes the upper bound, that is ``[)``."
msgstr ""
"データ保存時に指定された境界に関係なく、PostgreSQLは常に下界を含み上界を除い"
"た正規形、つまり ``[)`` で範囲を返します。"

msgid "``BigIntegerRangeField``"
msgstr "``BigIntegerRangeField``"

msgid ""
"Stores a range of large integers. Based on a :class:`~django.db.models."
"BigIntegerField`. Represented by an ``int8range`` in the database and a "
"``django.db.backends.postgresql.psycopg_any.NumericRange`` in Python."
msgstr ""
"大きな整数の範囲を格納します。 :class:`~django.db.models.BigIntegerField` に"
"基づいています。データベースでは ``int8range`` で表現され、 Python では "
"``django.db.backends.postgresql.psycopg_any.NumericRange`` で表現されます。"

msgid "``DecimalRangeField``"
msgstr "``DecimalRangeField``"

msgid ""
"Stores a range of floating point values. Based on a :class:`~django.db."
"models.DecimalField`. Represented by a ``numrange`` in the database and a "
"``django.db.backends.postgresql.psycopg_any.NumericRange`` in Python."
msgstr ""
"浮動小数点値の範囲を格納します。 :class:`~django.db.models.DecimalField` に基"
"づいています。データベースでは ``numrange`` で表現され、Python では ``django."
"db.backends.postgresql.psycopg_any.NumericRange`` で表現されます。"

msgid ""
"Optional. The value of ``bounds`` for list and tuple inputs. The default is "
"lower bound included, upper bound excluded, that is ``[)`` (see the "
"PostgreSQL documentation for details about `different bounds`_). "
"``default_bounds`` is not used for ``django.db.backends.postgresql."
"psycopg_any.NumericRange`` inputs."
msgstr ""
"オプション。リストとタプルの入力に対する ``bounds`` の値。デフォルトは下限を"
"含み、上限を除く ``[)`` です (`different bounds`_ の詳細については "
"PostgreSQL のドキュメント を参照してください)。 ``default_bounds`` は "
"``django.db.backends.postgresql.psycopg_any.NumericRange`` 入力には使用されま"
"せん。"

msgid "``DateTimeRangeField``"
msgstr "``DateTimeRangeField``"

msgid ""
"Stores a range of timestamps. Based on a :class:`~django.db.models."
"DateTimeField`. Represented by a ``tstzrange`` in the database and a "
"``django.db.backends.postgresql.psycopg_any.DateTimeTZRange`` in Python."
msgstr ""
"タイムスタンプの範囲を格納します。 :class:`~django.db.models.DateTimeField` "
"に基づいています。データベースでは ``tstzrange`` で表現され、Python では "
"``django.db.backends.postgresql.psycopg_any.DateTimeTZRange`` で表現されま"
"す。"

msgid ""
"Optional. The value of ``bounds`` for list and tuple inputs. The default is "
"lower bound included, upper bound excluded, that is ``[)`` (see the "
"PostgreSQL documentation for details about `different bounds`_). "
"``default_bounds`` is not used for ``django.db.backends.postgresql."
"psycopg_any.DateTimeTZRange`` inputs."
msgstr ""
"オプション。リストとタプルの入力に対する ``bounds`` の値。デフォルトは下限を"
"含み、上限を除く ``[)`` です (`different bounds`_ の詳細については "
"PostgreSQL のドキュメント を参照してください)。 ``default_bounds`` は "
"``django.db.backends.postgresql.psycopg_any.DateTimeTZRange`` 入力には使用さ"
"れません。"

msgid "``DateRangeField``"
msgstr "``DateRangeField``"

msgid ""
"Stores a range of dates. Based on a :class:`~django.db.models.DateField`. "
"Represented by a ``daterange`` in the database and a ``django.db.backends."
"postgresql.psycopg_any.DateRange`` in Python."
msgstr ""
"日付の範囲を格納します。 :class:`~django.db.models.DateField` に基づいていま"
"す。データベースでは ``daterange`` で表現され、Python では ``django.db."
"backends.postgresql.psycopg_any.DateRange`` で表現されます。"

msgid "Querying Range Fields"
msgstr "範囲フィールドへのクエリ"

msgid ""
"There are a number of custom lookups and transforms for range fields. They "
"are available on all the above fields, but we will use the following example "
"model::"
msgstr ""
"範囲フィールド用のカスタムルックアップとトランスフォームが多数あります。これ"
"らは上記のすべてのフィールドで利用できますが、次の例のモデルを使います:"

msgid "We will also use the following example objects:"
msgstr "また、以下のオブジェクト例も使用します: "

msgid "and ``NumericRange``:"
msgstr "そして ``NumericRange`` も:"

msgid "Containment functions"
msgstr "包含関数"

msgid ""
"As with other PostgreSQL fields, there are three standard containment "
"operators: ``contains``, ``contained_by`` and ``overlap``, using the SQL "
"operators ``@>``, ``<@``, and ``&&`` respectively."
msgstr ""
"他の PostgreSQL フィールドと同様に、3つの標準の包含演算子があります。 "
"``contains``, ``contained_by``, ``overlap`` で、それぞれ SQL 演算子 ``@>``, "
"``<@``, ``&&`` が使われます。"

msgid ""
"The ``contained_by`` lookup is also available on the non-range field types: :"
"class:`~django.db.models.SmallAutoField`, :class:`~django.db.models."
"AutoField`, :class:`~django.db.models.BigAutoField`, :class:`~django.db."
"models.SmallIntegerField`, :class:`~django.db.models.IntegerField`, :class:"
"`~django.db.models.BigIntegerField`, :class:`~django.db.models."
"DecimalField`, :class:`~django.db.models.FloatField`, :class:`~django.db."
"models.DateField`, and :class:`~django.db.models.DateTimeField`. For example:"
msgstr ""
"また、``contained_by`` ルックアップは範囲以外のフィールド型でも利用できま"
"す: :class:`~django.db.models.SmallAutoField`, :class:`~django.db.models."
"AutoField`, :class:`~django.db.models.BigAutoField`, :class:`~django.db."
"models.SmallIntegerField`, :class:`~django.db.models.IntegerField`, :class:"
"`~django.db.models.BigIntegerField`, :class:`~django.db.models."
"DecimalField`, :class:`~django.db.models.FloatField`, :class:`~django.db."
"models.DateField`, and :class:`~django.db.models.DateTimeField` 。たとえば:"

msgid "Comparison functions"
msgstr "比較関数"

msgid ""
"Range fields support the standard lookups: :lookup:`lt`, :lookup:`gt`, :"
"lookup:`lte` and :lookup:`gte`. These are not particularly helpful - they "
"compare the lower bounds first and then the upper bounds only if necessary. "
"This is also the strategy used to order by a range field. It is better to "
"use the specific range comparison operators."
msgstr ""
"範囲フィールドは標準のルックアップをサポートしています: :lookup:`lt`, :"
"lookup:`gt`, :lookup:`lte`, および :lookup:`gte`。これらはあまり有用ではあり"
"ません。必要な場合のみ上限値を比較するように、まず下限値を比較します。これは"
"範囲フィールドでのソートにも使用される戦略です。特定の範囲比較演算子を使用す"
"る方が良いです。"

msgid "``fully_lt``"
msgstr "``fully_lt``"

msgid ""
"The returned ranges are strictly less than the passed range. In other words, "
"all the points in the returned range are less than all those in the passed "
"range."
msgstr ""
"返される範囲は、渡された範囲よりも厳密に小さいです。つまり、返される範囲内の"
"すべての点は、渡された範囲内のすべての点よりも小さいです。"

msgid "``fully_gt``"
msgstr "``fully_gt``"

msgid ""
"The returned ranges are strictly greater than the passed range. In other "
"words, the all the points in the returned range are greater than all those "
"in the passed range."
msgstr ""
"返される範囲は、渡された範囲よりも厳密に大きいです。つまり、返される範囲のす"
"べての点は、渡された範囲のすべての点よりも大きくなります。"

msgid "``not_lt``"
msgstr "``not_lt``"

msgid ""
"The returned ranges do not contain any points less than the passed range, "
"that is the lower bound of the returned range is at least the lower bound of "
"the passed range."
msgstr ""
"返される範囲には、渡された範囲より小さいポイントは含まれません。つまり、返さ"
"れる範囲の下限は少なくとも渡された範囲の下限となります。"

msgid "``not_gt``"
msgstr "``not_gt``"

msgid ""
"The returned ranges do not contain any points greater than the passed range, "
"that is the upper bound of the returned range is at most the upper bound of "
"the passed range."
msgstr ""
"返される範囲には、渡された範囲よりも大きい値が含まれませんい。つまり、返され"
"る範囲の上限は、渡された範囲の上限以下になります。"

msgid "``adjacent_to``"
msgstr "``adjacent_to``"

msgid "The returned ranges share a bound with the passed range."
msgstr "返される範囲は、渡された範囲と境界を共有します。"

msgid "Querying using the bounds"
msgstr "境界を使ったクエリ"

msgid "Range fields support several extra lookups."
msgstr "範囲フィールドはいくつかの追加ルックアップをサポートしています。"

msgid "``startswith``"
msgstr "``startswith``"

msgid ""
"Returned objects have the given lower bound. Can be chained to valid lookups "
"for the base field."
msgstr ""
"返されるオブジェクトは与えられた下界を持つ。ベースフィールドの有効なルック"
"アップに連結できます。"

msgid "``endswith``"
msgstr "``endswith``"

msgid ""
"Returned objects have the given upper bound. Can be chained to valid lookups "
"for the base field."
msgstr ""
"返されるオブジェクトは与えられた上限を持つ。ベースフィールドの有効なルック"
"アップに連結できます。"

msgid ""
"Returned objects are empty ranges. Can be chained to valid lookups for a :"
"class:`~django.db.models.BooleanField`."
msgstr ""
"返されるオブジェクトは空の範囲です。 :class:`~django.db.models.BooleanField` "
"の有効なルックアップに連結できます。"

msgid "``lower_inc``"
msgstr "``lower_inc``"

msgid ""
"Returns objects that have inclusive or exclusive lower bounds, depending on "
"the boolean value passed. Can be chained to valid lookups for a :class:"
"`~django.db.models.BooleanField`."
msgstr ""
"与えられた真偽値に基づき、包含もしくは非包含な下限値を持つオブジェクトを返し"
"ます。 :class:`~django.db.models.BooleanField` の有効なルックアップに連結でき"
"ます。"

msgid "``lower_inf``"
msgstr "``lower_inf``"

msgid ""
"Returns objects that have unbounded (infinite) or bounded lower bound, "
"depending on the boolean value passed. Can be chained to valid lookups for "
"a :class:`~django.db.models.BooleanField`."
msgstr ""
"渡された真偽値に応じて、無限大または有界下限境界を持つオブジェクトを返しま"
"す。 :class:`~django.db.models.BooleanField` に対して有効なルックアップに連結"
"できます。"

msgid "``upper_inc``"
msgstr "``upper_inc``"

msgid ""
"Returns objects that have inclusive or exclusive upper bounds, depending on "
"the boolean value passed. Can be chained to valid lookups for a :class:"
"`~django.db.models.BooleanField`."
msgstr ""
"渡されたブール値に応じて、上限値を包含または非包含として持つオブジェクトを返"
"します。これは、 :class:`~django.db.models.BooleanField` に対して有効なルック"
"アップに連結できます。"

msgid "``upper_inf``"
msgstr "``upper_inf``"

msgid ""
"Returns objects that have unbounded (infinite) or bounded upper bound, "
"depending on the boolean value passed. Can be chained to valid lookups for "
"a :class:`~django.db.models.BooleanField`."
msgstr ""
"渡された真偽値に応じて、上限が無制限 (無限) または有界のオブジェクトを返しま"
"す。 :class:`~django.db.models.BooleanField` の有効なルックアップに連結できま"
"す。"

msgid "Defining your own range types"
msgstr "独自の範囲型を定義する"

msgid ""
"PostgreSQL allows the definition of custom range types. Django's model and "
"form field implementations use base classes below, and ``psycopg`` provides "
"a :func:`~psycopg:psycopg.types.range.register_range` to allow use of custom "
"range types."
msgstr ""
"PostgreSQLでは、独自の範囲型の定義が可能です。Djangoのモデルとフォームフィー"
"ルドの実装は、以下の基本クラスを使用しており、 ``psycopg`` は独自の範囲型の使"
"用を可能にする :func:`~psycopg:psycopg.types.range.register_range` を提供して"
"います。"

msgid "Base class for model range fields."
msgstr "モデル範囲フィールドの基底クラス。"

msgid "The model field class to use."
msgstr "使用するモデルフィールドクラス。"

msgid "The range type to use."
msgstr "使用する範囲のタイプ。"

msgid ""
"The form field class to use. Should be a subclass of :class:`django.contrib."
"postgres.forms.BaseRangeField`."
msgstr ""
"使用するフォームフィールドクラス。これは :class:`django.contrib.postgres."
"forms.BaseRangeField` のサブクラスである必要があります。"

msgid "Base class for form range fields."
msgstr "フォームの範囲フィールドの基底クラス。"

msgid "The form field to use."
msgstr "使用するフォームフィールド。"

msgid "Range operators"
msgstr "範囲演算子"

msgid ""
"PostgreSQL provides a set of SQL operators that can be used together with "
"the range data types (see `the PostgreSQL documentation for the full details "
"of range operators <https://www.postgresql.org/docs/current/ functions-range."
"html#RANGE-OPERATORS-TABLE>`_). This class is meant as a convenient method "
"to avoid typos. The operator names overlap with the names of corresponding "
"lookups."
msgstr ""
"PostgreSQL は範囲データ型と共に使用できる SQL 演算子のセットを提供しています "
"(範囲演算子の完全な詳細については `the PostgreSQL documentation for the full "
"details of range operators <https://www.postgresql.org/docs/current/ "
"functions-range.html#RANGE-OPERATORS-TABLE>`_ を参照してください) 。このクラ"
"スはタイプミスを避けるための便利な方法です。演算子名は対応するルックアップの"
"名前と重複します。"

msgid "RangeBoundary() expressions"
msgstr "RangeBoundary() 式"

msgid ""
"If ``True`` (default), the lower bound is inclusive ``'['``, otherwise it's "
"exclusive ``'('``."
msgstr ""
"``True`` (デフォルト) の場合、下限値は包含される ``'['`` であり、そうでない場"
"合は非包含 ``'('`` です。"

msgid ""
"If ``False`` (default), the upper bound is exclusive ``')'``, otherwise it's "
"inclusive ``']'``."
msgstr ""
"``False`` (デフォルト) なら、上限は非包含 ``')'`` となります。それ以外の場合"
"は包含 ``']'`` となります。"

msgid ""
"A ``RangeBoundary()`` expression represents the range boundaries. It can be "
"used with a custom range functions that expected boundaries, for example to "
"define :class:`~django.contrib.postgres.constraints.ExclusionConstraint`. "
"See `the PostgreSQL documentation for the full details <https://www."
"postgresql.org/ docs/current/rangetypes.html#RANGETYPES-INCLUSIVITY>`_."
msgstr ""
"``RangeBoundary()`` 式は範囲の境界を表します。これは、範囲の境界を期待するカ"
"スタム範囲関数と一緒に使用できます。たとえば、 :class:`~django.contrib."
"postgres.constraints.ExclusionConstraint` を定義する際に使用されます。詳細は "
"`PostgreSQLのドキュメント <https://www.postgresql.org/ docs/current/"
"rangetypes.html#RANGETYPES-INCLUSIVITY>`_ を参照してください。"

msgid "PostgreSQL specific form fields and widgets"
msgstr "PostgreSQL 固有のフォームフィールドとウィジェット"

msgid ""
"All of these fields and widgets are available from the ``django.contrib."
"postgres.forms`` module."
msgstr ""
"これらのフィールドやウィジェットはすべて ``django.contrib.postgres.forms`` モ"
"ジュールから利用できます。"

msgid "``SimpleArrayField``"
msgstr "``SimpleArrayField``"

msgid ""
"A field which maps to an array. It is represented by an HTML ``<input>``."
msgstr "配列にマップされるフィールド。HTMLの ``<input>`` で表されます。"

msgid ""
"It specifies the underlying form field for the array. This is not used to "
"render any HTML, but it is used to process the submitted data and validate "
"it. For example:"
msgstr ""
"配列のもととなるフォームフィールドを指定します。これは HTML のレンダリングに"
"は使われませんが、送信されたデータを処理し、それを検証するために使われます。"
"たとえば:"

msgid ""
"This is an optional argument which defaults to a comma: ``,``. This value is "
"used to split the submitted data. It allows you to chain "
"``SimpleArrayField`` for multidimensional data:"
msgstr ""
"これはオプションの引数で、デフォルトはコンマ ``,`` です。この値は送信された"
"データを分割するために使用されます。多次元データに対して "
"``SimpleArrayField`` を連結できます:"

msgid ""
"The field does not support escaping of the delimiter, so be careful in cases "
"where the delimiter is a valid character in the underlying field. The "
"delimiter does not need to be only one character."
msgstr ""
"フィールドは区切り文字のエスケープをサポートしていないので、区切り文字が元の"
"フィールド内で有効な文字である場合には注意してください。区切り文字は1文字であ"
"る必要はありません。"

msgid ""
"This is an optional argument which validates that the array does not exceed "
"the stated length."
msgstr ""
"これはオプションの引数で、配列が指定された長さを超えていないことを検証しま"
"す。"

msgid ""
"This is an optional argument which validates that the array reaches at least "
"the stated length."
msgstr ""
"これはオプションの引数で、配列が少なくとも指定された長さに達していることを検"
"証します。"

msgid "User friendly forms"
msgstr "ユーザーフレンドリーなフォーム"

msgid ""
"``SimpleArrayField`` is not particularly user friendly in most cases, "
"however it is a useful way to format data from a client-side widget for "
"submission to the server."
msgstr ""
"``SimpleArrayField`` は、ほとんどの場合、特に使いやすいものではありませんが、"
"クライアントサイドのウィジェットからサーバーに送信するデータをフォーマットす"
"る便利な方法です。"

msgid "``SplitArrayField``"
msgstr "``SplitArrayField``"

msgid ""
"This field handles arrays by reproducing the underlying field a fixed number "
"of times."
msgstr ""
"このフィールドは、ベースとなるフィールドを固定回数複製することで配列を処理し"
"ます。"

msgid ""
"This is a required argument. It specifies the form field to be repeated."
msgstr "これは必須の引数です。繰り返すフォームフィールドを指定します。"

msgid "This is the fixed number of times the underlying field will be used."
msgstr "これは、ベースとなるフィールドが使用される固定の回数です。"

msgid ""
"By default, this is set to ``False``. When ``False``, each value from the "
"repeated fields is stored. When set to ``True``, any trailing values which "
"are blank will be stripped from the result. If the underlying field has "
"``required=True``, but ``remove_trailing_nulls`` is ``True``, then null "
"values are only allowed at the end, and will be stripped."
msgstr ""
"デフォルトでは ``False`` に設定されています。 ``False`` に設定すると、繰り返"
"されたフィールドのそれぞれの値が保存されます。 ``True`` に設定すると、末尾の"
"値が空白の場合、その値は結果から取り除かれます。基となるフィールドが "
"``required=True`` で、かつ ``remove_trailing_nulls`` が ``True`` の場合、末尾"
"にのみ null 値が許され、その値は取り除かれます。"

msgid "Some examples::"
msgstr "例:"

msgid ""
"A field which accepts JSON encoded data for an :class:`~django.contrib."
"postgres.fields.HStoreField`. It casts all values (except nulls) to strings. "
"It is represented by an HTML ``<textarea>``."
msgstr ""
":class:`~django.contrib.postgres.fields.HStoreField` 向けにJSONエンコードされ"
"たデータを受け付けるフィールドです。全ての値 (nullを除く) を文字列にキャスト"
"します。HTMLの ``<textarea>`` で表現されます。"

msgid ""
"``HStoreField`` is not particularly user friendly in most cases, however it "
"is a useful way to format data from a client-side widget for submission to "
"the server."
msgstr ""
"``HStoreField`` は、ほとんどの場合、特に使いやすいものではありませんが、クラ"
"イアントサイドのウィジェットからサーバーに送信するデータをフォーマットする便"
"利な方法です。"

msgid ""
"This group of fields all share similar functionality for accepting range "
"data. They are based on :class:`~django.forms.MultiValueField`. They treat "
"one omitted value as an unbounded range. They also validate that the lower "
"bound is not greater than the upper bound. All of these fields use :class:"
"`~django.contrib.postgres.forms.RangeWidget`."
msgstr ""
"このグループのフィールドは、範囲データを受け取るための同様の機能を共有してい"
"ます。これらは :class:`~django.forms.MultiValueField` に基づいています。これ"
"らのフィールドは、1つの省略された値を境界のない範囲として扱います。また、下限"
"値が上限値より大きくないことを検証します。これらのフィールドは全て :class:"
"`~django.contrib.postgres.forms.RangeWidget` を使用しています。"

msgid ""
"Based on :class:`~django.forms.IntegerField` and translates its input into "
"``django.db.backends.postgresql.psycopg_any.NumericRange``. Default for :"
"class:`~django.contrib.postgres.fields.IntegerRangeField` and :class:"
"`~django.contrib.postgres.fields.BigIntegerRangeField`."
msgstr ""
":class:`~django.forms.IntegerField` に基づいて、入力を ``django.db.backends."
"postgresql.psycopg_any.NumericRange`` に変換します。 :class:`~django.contrib."
"postgres.fields.IntegerRangeField` と :class:`~django.contrib.postgres."
"fields.BigIntegerRangeField` のデフォルトです。"

msgid ""
"Based on :class:`~django.forms.DecimalField` and translates its input into "
"``django.db.backends.postgresql.psycopg_any.NumericRange``. Default for :"
"class:`~django.contrib.postgres.fields.DecimalRangeField`."
msgstr ""
":class:`~django.forms.DecimalField` に基づいて、その入力を ``django.db."
"backends.postgresql.psycopg_any.NumericRange`` に変換します。 :class:"
"`~django.contrib.postgres.fields.DecimalRangeField` のデフォルトです。"

msgid ""
"Based on :class:`~django.forms.DateTimeField` and translates its input into "
"``django.db.backends.postgresql.psycopg_any.DateTimeTZRange``. Default for :"
"class:`~django.contrib.postgres.fields.DateTimeRangeField`."
msgstr ""
":class:`~django.forms.DateTimeField` クラスに基づいて、その入力を ``django."
"db.backends.postgresql.psycopg_any.DateTimeTZRange`` に変換します。これは :"
"class:`~django.contrib.postgres.fields.DateTimeRangeField` のデフォルトです。"

msgid ""
"Based on :class:`~django.forms.DateField` and translates its input into "
"``django.db.backends.postgresql.psycopg_any.DateRange``. Default for :class:"
"`~django.contrib.postgres.fields.DateRangeField`."
msgstr ""
":class:`~django.forms.DateField` に基づいて、その入力を ``django.db.backends."
"postgresql.psycopg_any.DateRange`` に変換します。 これは :class:`~django."
"contrib.postgres.fields.DateRangeField` のデフォルトです。"

msgid "Widgets"
msgstr "ウィジェット"

msgid "``RangeWidget``"
msgstr "``RangeWidget``"

msgid ""
"Widget used by all of the range fields. Based on :class:`~django.forms."
"MultiWidget`."
msgstr ""
"すべての範囲フィールドで使用されるウィジェット。 :class:`~django.forms."
"MultiWidget` を基にしています。"

msgid ":class:`~RangeWidget` has one required argument:"
msgstr ":class:`~RangeWidget` は1つの必須引数を持ちます: "

msgid "A :class:`~RangeWidget` comprises a 2-tuple of ``base_widget``."
msgstr ":class:`~RangeWidget` は、``base_widget`` の 2値タプルを構成します。"

msgid ""
"Takes a single \"compressed\" value of a field, for example a :class:"
"`~django.contrib.postgres.fields.DateRangeField`, and returns a tuple "
"representing a lower and upper bound."
msgstr ""
"例えば :class:`~django.contrib.postgres.fields.DateRangeField` のようなフィー"
"ルドの \"圧縮された\" 値を一つ受け取り、下界と上界を表すタプルを返します。"

msgid "PostgreSQL specific database functions"
msgstr "PostgreSQL 固有のデータベース関数"

msgid ""
"All of these functions are available from the ``django.contrib.postgres."
"functions`` module."
msgstr ""
"これらの関数はすべて ``django.contrib.postgres.functions`` モジュールから利用"
"できます。"

msgid "``RandomUUID``"
msgstr "``RandomUUID``"

msgid "Returns a version 4 UUID."
msgstr "バージョン 4 の UUID を返します。"

msgid ""
"On PostgreSQL < 13, the `pgcrypto extension`_ must be installed. You can use "
"the :class:`~django.contrib.postgres.operations.CryptoExtension` migration "
"operation to install it."
msgstr ""
"PostgreSQL < 13 では、 `pgcrypto extension`_ をインストールする必要がありま"
"す。 :class:`~django.contrib.postgres.operations.CryptoExtension` マイグレー"
"ションオペレーションを使ってインストールできます。"

msgid "Usage example:"
msgstr "使用例:"

msgid "``TransactionNow``"
msgstr "``TransactionNow``"

msgid ""
"Returns the date and time on the database server that the current "
"transaction started. If you are not in a transaction it will return the date "
"and time of the current statement. This is a complement to :class:`django.db."
"models.functions.Now`, which returns the date and time of the current "
"statement."
msgstr ""
"現在のトランザクションが開始されたデータベースサーバー上の日時を返します。ト"
"ランザクション中でない場合は、現在のステートメントの日時を返します。これは :"
"class:`django.db.models.functions.Now` を補完するもので、現在のステートメント"
"の日時を返します。"

msgid ""
"Note that only the outermost call to :func:`~django.db.transaction.atomic()` "
"sets up a transaction and thus sets the time that ``TransactionNow()`` will "
"return; nested calls create savepoints which do not affect the transaction "
"time."
msgstr ""
":func:`~django.db.transaction.atomic()` への最も外側の呼び出しのみがトランザ"
"クションを設定され、 ``TransactionNow()`` が返す時間を設定することに注意して"
"ください。ネストされた呼び出しはセーブポイントを作成しますが、トランザクショ"
"ンの時間には影響しません。"

msgid "``django.contrib.postgres``"
msgstr "``django.contrib.postgres``"

msgid ""
"PostgreSQL has a number of features which are not shared by the other "
"databases Django supports. This optional module contains model fields and "
"form fields for a number of PostgreSQL specific data types."
msgstr ""
"PostgreSQL は、Django がサポートする他のデータベースにはない多くの機能を持っ"
"ています。このオプショナルモジュールには、PostgreSQL 固有のデータ型のためのモ"
"デルフィールドとフォームフィールドが含まれています。"

msgid ""
"Django is, and will continue to be, a database-agnostic web framework. We "
"would encourage those writing reusable applications for the Django community "
"to write database-agnostic code where practical. However, we recognize that "
"real world projects written using Django need not be database-agnostic. In "
"fact, once a project reaches a given size changing the underlying data store "
"is already a significant challenge and is likely to require changing the "
"code base in some ways to handle differences between the data stores."
msgstr ""
"Django は、データベースに依存しないウェブフレームワークであり続けます。"
"Django コミュニティ向けに再利用可能なアプリケーションを書く際には、実用的な範"
"囲でデータベースに依存しないコードを書くことをお勧めします。ただし、Django を"
"使って書かれた実際のプロジェクトがデータベースに依存しない必要はありません。"
"実際、プロジェクトが一定規模に達すると、基盤となるデータストアを変更すること"
"はすでに大きな課題であり、データストア間の違いを処理するためにコードベースを"
"いくつか変更する必要がある可能性が高くなります。"

msgid ""
"Django provides support for a number of data types which will only work with "
"PostgreSQL. There is no fundamental reason why (for example) a ``contrib."
"mysql`` module does not exist, except that PostgreSQL has the richest "
"feature set of the supported databases so its users have the most to gain."
msgstr ""
"Djangoは、いくつかのデータ型をサポートしており、これらはPostgreSQLのみで動作"
"します。たとえば、 ``contrib.mysql`` モジュールが存在しない理由は、PostgreSQL"
"がサポートされているデータベースの中で最も機能が豊富であるため、そのユーザー"
"が最も利益を得るからであり、それ以外に根本的な理由はありません。"

msgid "PostgreSQL specific model indexes"
msgstr "PostgreSQL 固有のモデルインデックス"

msgid ""
"The following are PostgreSQL specific :doc:`indexes </ref/models/indexes>` "
"available from the ``django.contrib.postgres.indexes`` module."
msgstr ""
"以下はPostgreSQL固有の ``django.contrib.postgres.indexes`` モジュールから利用"
"可能な :doc:`インデックス </ref/models/indexes>` です。"

msgid "``BloomIndex``"
msgstr "``BloomIndex``"

msgid "Creates a bloom_ index."
msgstr "bloom_ インデックスを作成します。"

msgid ""
"To use this index access you need to activate the bloom_ extension on "
"PostgreSQL. You can install it using the :class:`~django.contrib.postgres."
"operations.BloomExtension` migration operation."
msgstr ""
"このインデックスアクセスを使用するには、PostgreSQLで bloom_ 拡張機能を有効に"
"する必要があります。これは、 :class:`~django.contrib.postgres.operations."
"BloomExtension` マイグレーションオペレーションを使用してインストールできま"
"す。"

msgid ""
"Provide an integer number of bits from 1 to 4096 to the ``length`` parameter "
"to specify the length of each index entry. PostgreSQL's default is 80."
msgstr ""
"``length`` パラメータには、1 から 4096 の整数のビット数を指定して、各インデッ"
"クスエントリの長さを指定してください。PostgreSQL のデフォルト値は 80 です。"

msgid ""
"The ``columns`` argument takes a tuple or list of up to 32 values that are "
"integer number of bits from 1 to 4095."
msgstr ""
"``columns`` 引数は、1から4095までの整数ビットで、最大32個の値を持つタプルまた"
"はリストを取ります。"

msgid "``BrinIndex``"
msgstr "``BrinIndex``"

msgid ""
"Creates a `BRIN index <https://www.postgresql.org/docs/current/brin-intro."
"html>`_."
msgstr ""
"`BRIN インデックス <https://www.postgresql.org/docs/current/brin-intro."
"html>`_ を作成します。"

msgid ""
"Set the ``autosummarize`` parameter to ``True`` to enable `automatic "
"summarization`_ to be performed by autovacuum."
msgstr ""
"``autosummarize`` パラメータを ``True`` に設定すると、autovacuum による "
"`automatic summarization`_ を有効にできます。"

msgid "The ``pages_per_range`` argument takes a positive integer."
msgstr "``pages_per_range`` 引数は正の整数を取ります。"

msgid "``BTreeIndex``"
msgstr "``BTreeIndex``"

msgid "Creates a B-Tree index."
msgstr "B-Tree インデックスを作成します。"

msgid ""
"Provide an integer value from 10 to 100 to the fillfactor_ parameter to tune "
"how packed the index pages will be. PostgreSQL's default is 90."
msgstr ""
"fillfactor_ パラメータには、インデックスページがどれだけ詰め込まれるかを調整"
"するために、10 から 100 の整数値を指定してください。PostgreSQL のデフォルト値"
"は 90 です。"

msgid "``GinIndex``"
msgstr "``GinIndex``"

msgid ""
"Creates a `gin index <https://www.postgresql.org/docs/current/gin.html>`_."
msgstr ""
"`gin インデックス <https://www.postgresql.org/docs/current/gin.html>`_ を作成"
"します。"

msgid ""
"To use this index on data types not in the `built-in operator classes "
"<https://www.postgresql.org/docs/current/gin-builtin-opclasses.html>`_, you "
"need to activate the `btree_gin extension <https://www.postgresql.org/docs/"
"current/btree-gin.html>`_ on PostgreSQL. You can install it using the :class:"
"`~django.contrib.postgres.operations.BtreeGinExtension` migration operation."
msgstr ""
"`組み込みの演算子クラス <https://www.postgresql.org/docs/current/gin-builtin-"
"opclasses.html>`_ 以外のデータ型でこのインデックスを使用するには、 "
"PostgreSQL で `btree_gin 拡張 <https://www.postgresql.org/docs/current/btree-"
"gin.html>`_ を有効にする必要があります。これをインストールするには :class:"
"`~django.contrib.postgres.operations.BtreeGinExtension` というマイグレーショ"
"ンオペレーションを使用します。"

msgid ""
"Set the ``fastupdate`` parameter to ``False`` to disable the `GIN Fast "
"Update Technique`_ that's enabled by default in PostgreSQL."
msgstr ""
"``fastupdate`` パラメータを ``False`` に設定すると、PostgreSQL でデフォルトで"
"有効になっている `GIN Fast Update Technique`_ を無効にできます。"

msgid ""
"Provide an integer number of kilobytes to the gin_pending_list_limit_ "
"parameter to tune the maximum size of the GIN pending list which is used "
"when ``fastupdate`` is enabled."
msgstr ""
"``fastupdate`` が有効な場合に使用される GIN 保留リストの最大サイズを調整する"
"には、 gin_pending_list_limit_ パラメータに整数キロバイト数を指定します。"

msgid "``GistIndex``"
msgstr "``GistIndex``"

msgid ""
"Creates a `GiST index <https://www.postgresql.org/docs/current/gist.html>`_. "
"These indexes are automatically created on spatial fields with :attr:"
"`spatial_index=True <django.contrib.gis.db.models.BaseSpatialField."
"spatial_index>`. They're also useful on other types, such as :class:`~django."
"contrib.postgres.fields.HStoreField` or the :ref:`range fields <range-"
"fields>`."
msgstr ""
"`GiSTインデックス <https://www.postgresql.org/docs/current/gist.html>`_ を作"
"成します。これらのインデックスは、 :attr:`spatial_index=True <django.contrib."
"gis.db.models.BaseSpatialField.spatial_index>` で指定された空間フィールドに自"
"動的に作成されます。これらは、 :class:`~django.contrib.postgres.fields."
"HStoreField` や :ref:`範囲フィールド <range-fields>` など他のタイプでも有用で"
"す。"

msgid ""
"To use this index on data types not in the built-in `gist operator classes "
"<https://www.postgresql.org/docs/current/gist-builtin-opclasses.html>`_, you "
"need to activate the `btree_gist extension <https://www.postgresql.org/docs/"
"current/btree-gist.html>`_ on PostgreSQL. You can install it using the :"
"class:`~django.contrib.postgres.operations.BtreeGistExtension` migration "
"operation."
msgstr ""
"組み込みの `gist 演算子クラス <https://www.postgresql.org/docs/current/gist-"
"builtin-opclasses.html>`_ 以外のデータ型でこのインデックスを使用するには、 "
"PostgreSQL で `btree_gist 拡張 <https://www.postgresql.org/docs/current/"
"btree-gist.html>`_ を有効にする必要があります。これをインストールするには :"
"class:`~django.contrib.postgres.operations.BtreeGistExtension` というマイグ"
"レーションオペレーションを使用します。"

msgid ""
"Set the ``buffering`` parameter to ``True`` or ``False`` to manually enable "
"or disable `buffering build`_ of the index."
msgstr ""
"インデックスの `buffering build`_ を手動で有効または無効にするには、 "
"``buffering`` パラメータを ``True`` または ``False`` に設定してください。"

msgid "``HashIndex``"
msgstr "``HashIndex``"

msgid "Creates a hash index."
msgstr "ハッシュインデックスを作成します。"

msgid "``SpGistIndex``"
msgstr "``SpGistIndex``"

msgid ""
"Creates an `SP-GiST index <https://www.postgresql.org/docs/current/spgist."
"html>`_."
msgstr ""
"`SP-GiST インデックス <https://www.postgresql.org/docs/current/spgist."
"html>`_ を作成します。"

msgid "``OpClass()`` expressions"
msgstr "``OpClass()`` 式"

msgid ""
"An ``OpClass()`` expression represents the ``expression`` with a custom "
"`operator class`_ that can be used to define functional indexes, functional "
"unique constraints, or exclusion constraints. To use it, you need to add "
"``'django.contrib.postgres'`` in your :setting:`INSTALLED_APPS`. Set the "
"``name`` parameter to the name of the `operator class`_."
msgstr ""
"``OpClass()`` 式は、機能インデックス、機能ユニーク制約、または除外制約を定義"
"するために使用できるカスタム `operator class`_ と一緒に表す ``expression`` を"
"表します。これを使用するには、 :setting:`INSTALLED_APPS` に ``'django."
"contrib.postgres'`` を追加する必要があります。``name`` パラメータを "
"`operator class`_ の名前に設定します。"

msgid ""
"creates an index on ``Lower('username')`` using ``varchar_pattern_ops``. ::"
msgstr ""
"``varchar_pattern_ops`` を使用して ``Lower('username')`` にインデックスを作成"
"します:"

msgid ""
"creates a unique constraint on ``Upper('description')`` using "
"``text_pattern_ops``. ::"
msgstr ""
"``Upper('description')`` を使って ``text_pattern_ops`` を使用してユニーク制約"
"を作成します:"

msgid "PostgreSQL specific lookups"
msgstr "PostgreSQL 固有のルックアップ"

msgid "Trigram similarity"
msgstr "trigram（トリグラム）類似度"

msgid "``trigram_similar``"
msgstr "``trigram_similar``"

msgid ""
"The ``trigram_similar`` lookup allows you to perform trigram lookups, "
"measuring the number of trigrams (three consecutive characters) shared, "
"using a dedicated PostgreSQL extension. A trigram lookup is given an "
"expression and returns results that have a similarity measurement greater "
"than the current similarity threshold."
msgstr ""
"``trigram_similar`` ルックアップを使用すると、専用の PostgreSQL 拡張機能を使"
"用して trigram（トリグラム）検索を実行し、共有される trigram (3 つの連続する"
"文字) の数を測定できます。trigram 検索は式をもとにして結果を返し、現在の類似"
"度のしきい値よりも類似度測定値が高い結果を返します。"

msgid ""
"To use it, add ``'django.contrib.postgres'`` in your :setting:"
"`INSTALLED_APPS` and activate the `pg_trgm extension`_ on PostgreSQL. You "
"can install the extension using the :class:`~django.contrib.postgres."
"operations.TrigramExtension` migration operation."
msgstr ""
"これを使うには、 :setting:`INSTALLED_APPS` に ``'django.contrib.postgres'`` "
"を追加し、 PostgreSQL 上で `pg_trgm extension`_ を有効にしてください。 :"
"class:`~django.contrib.postgres.operations.TrigramExtension` というマイグレー"
"ションオペレーションを使って拡張機能をインストールできます。"

msgid ""
"The ``trigram_similar`` lookup can be used on :class:`~django.db.models."
"CharField` and :class:`~django.db.models.TextField`:"
msgstr ""
"``trigram_similar`` ルックアップは、:class:`~django.db.models.CharField` と :"
"class:`~django.db.models.TextField` 上で使用できます。"

msgid "``trigram_word_similar``"
msgstr "``trigram_word_similar``"

msgid ""
"The ``trigram_word_similar`` lookup allows you to perform trigram word "
"similarity lookups using a dedicated PostgreSQL extension. It can be "
"approximately understood as measuring the greatest number of trigrams shared "
"between the parameter and any substring of the field. A trigram word lookup "
"is given an expression and returns results that have a word similarity "
"measurement greater than the current similarity threshold."
msgstr ""
"``trigram_word_similar`` ルックアップを使用すると、専用の PostgreSQL 拡張を使"
"用して trigram 単語類似性ルックアップを実行できます。これは、パラメータと"
"フィールドの任意の部分文字列の間で共有される trigram の最大数を測定するという"
"程度に理解できます。trigram 単語ルックアップは式を受け取り、現在の類似度閾値"
"よりも大きい単語類似性測定値を持つ結果を返します。"

msgid ""
"The ``trigram_word_similar`` lookup can be used on :class:`~django.db.models."
"CharField` and :class:`~django.db.models.TextField`:"
msgstr ""
"``trigram_word_similar`` ルックアップは、 :class:`~django.db.models."
"CharField` と :class:`~django.db.models.TextField` で使用できます: "

msgid "``trigram_strict_word_similar``"
msgstr "``trigram_strict_word_similar``"

msgid ""
"Similar to :lookup:`trigram_word_similar`, except that it forces extent "
"boundaries to match word boundaries."
msgstr ""
":lookup:`trigram_word_similar` と似ていますが、範囲の境界を単語の境界に一致さ"
"せることを強制します。"

msgid ""
"The ``trigram_strict_word_similar`` lookup can be used on :class:`~django.db."
"models.CharField` and :class:`~django.db.models.TextField`."
msgstr ""
"``trigram_strict_word_similar`` ルックアップは、 :class:`~django.db.models."
"CharField` と :class:`~django.db.models.TextField` で使用できます。"

msgid "``Unaccent``"
msgstr "``Unaccent``"

msgid ""
"The ``unaccent`` lookup allows you to perform accent-insensitive lookups "
"using a dedicated PostgreSQL extension."
msgstr ""
"``unaccent`` ルックアップを使用すると、専用の PostgreSQL 拡張機能を使って、ア"
"クセントを無視した検索を行うことができます。"

msgid ""
"This lookup is implemented using :class:`~django.db.models.Transform`, so it "
"can be chained with other lookup functions. To use it, you need to add "
"``'django.contrib.postgres'`` in your :setting:`INSTALLED_APPS` and activate "
"the `unaccent extension on PostgreSQL`_. The :class:`~django.contrib."
"postgres.operations.UnaccentExtension` migration operation is available if "
"you want to perform this activation using migrations)."
msgstr ""
"このルックアップは :class:`~django.db.models.Transform` を使用して実装されて"
"いるため、他のルックアップ関数と連結させることができます。これを使用するに"
"は、 :setting:`INSTALLED_APPS` に ``'django.contrib.postgres'`` を追加し、 "
"`unaccent extension on PostgreSQL`_ を有効にする必要があります。この有効化を"
"マイグレーションを使用して行いたい場合は、 :class:`~django.contrib.postgres."
"operations.UnaccentExtension` マイグレーションオペレーションが利用可能です。"

msgid ""
"The ``unaccent`` lookup can be used on :class:`~django.db.models.CharField` "
"and :class:`~django.db.models.TextField`:"
msgstr ""
"``unaccent`` ルックアップは、:class:`~django.db.models.CharField` と :class:"
"`~django.db.models.TextField` で使用できます。"

msgid ""
"``unaccent`` lookups should perform fine in most use cases. However, queries "
"using this filter will generally perform full table scans, which can be slow "
"on large tables. In those cases, using dedicated full text indexing tools "
"might be appropriate."
msgstr ""
"ほとんどのケースでは、``unaccent`` のルックアップは適切に動作します。ただし、"
"このフィルタを使用したクエリは通常、全体のテーブルをスキャンするため、大きな"
"テーブルでは遅くなる可能性があります。そのような場合には、専用の全文検索ツー"
"ルを使用することが適切かもしれません。"

msgid "Database migration operations"
msgstr "データベースのマイグレーション・オペレーション"

msgid ""
"All of these :doc:`operations </ref/migration-operations>` are available "
"from the ``django.contrib.postgres.operations`` module."
msgstr ""
"これらの :doc:`マイグレーションオペレーション </ref/migration-operations>` は"
"全て ``django.contrib.postgres.operations`` モジュールから利用できます。"

msgid "Creating extension using migrations"
msgstr "マイグレーションを使って拡張機能を作成する"

msgid ""
"You can create a PostgreSQL extension in your database using a migration "
"file. This example creates an hstore extension, but the same principles "
"apply for other extensions."
msgstr ""
"マイグレーションファイルを使用して、データベースにPostgreSQL拡張を作成できま"
"す。この例ではhstore拡張を作成しますが、他の拡張にも同じ原則が適用されます。"

msgid ""
"Set up the hstore extension in PostgreSQL before the first ``CreateModel`` "
"or ``AddField`` operation that involves :class:`~django.contrib.postgres."
"fields.HStoreField` by adding a migration with the :class:`~django.contrib."
"postgres.operations.HStoreExtension` operation. For example::"
msgstr ""
":class:`~django.contrib.postgres.fields.HStoreField` を使用する最初の "
"``CreateModel`` または ``AddField`` オペレーションの前に、PostgreSQL で "
"hstore 拡張機能を設定するために、 :class:`~django.contrib.postgres."
"operations.HStoreExtension` オペレーションを含むマイグレーションを追加してく"
"ださい。たとえば:"

msgid "The operation skips adding the extension if it already exists."
msgstr ""
"オペレーションは、拡張機能がすでに存在する場合は追加しないようにスキップしま"
"す。"

msgid ""
"For most extensions, this requires a database user with superuser "
"privileges. If the Django database user doesn't have the appropriate "
"privileges, you'll have to create the extension outside of Django migrations "
"with a user that has them. In that case, connect to your Django database and "
"run the query ``CREATE EXTENSION IF NOT EXISTS hstore;``."
msgstr ""
"ほとんどの拡張機能には、スーパーユーザー権限を持つデータベースユーザーが必要"
"です。Djangoのデータベースユーザーに適切な権限がない場合は、それらの権限を持"
"つユーザーでDjangoのマイグレーション外で拡張機能を作成する必要があります。そ"
"の場合、Djangoデータベースに接続してクエリ ``CREATE EXTENSION IF NOT EXISTS "
"hstore;`` を実行してください。"

msgid "``CreateExtension``"
msgstr "``CreateExtension``"

msgid ""
"An ``Operation`` subclass which installs a PostgreSQL extension. For common "
"extensions, use one of the more specific subclasses below."
msgstr ""
"PostgreSQL拡張モジュールをインストールする ``Operation`` サブクラスです。一般"
"的な拡張モジュールについては、以下のサブクラスのいずれかを使用してください。"

msgid "This is a required argument. The name of the extension to be installed."
msgstr "これは必須の引数です。インストールする拡張機能の名前です。"

msgid "``BloomExtension``"
msgstr "``BloomExtension``"

msgid "Installs the ``bloom`` extension."
msgstr "``bloom`` 拡張機能をインストールします。"

msgid "``BtreeGinExtension``"
msgstr "``BtreeGinExtension``"

msgid "Installs the ``btree_gin`` extension."
msgstr "``btree_gin`` 拡張機能をインストールします。"

msgid "``BtreeGistExtension``"
msgstr "``BtreeGistExtension``"

msgid "Installs the ``btree_gist`` extension."
msgstr "``btree_gist`` 拡張機能をインストールします。"

msgid "``CITextExtension``"
msgstr "``CITextExtension``"

msgid "Installs the ``citext`` extension."
msgstr "``citext`` 拡張機能をインストールします。"

msgid "``CryptoExtension``"
msgstr "``CryptoExtension``"

msgid "Installs the ``pgcrypto`` extension."
msgstr "``pgcrypto`` 拡張機能をインストールします。"

msgid "``HStoreExtension``"
msgstr "``HStoreExtension``"

msgid ""
"Installs the ``hstore`` extension and also sets up the connection to "
"interpret hstore data for possible use in subsequent migrations."
msgstr ""
"``hstore`` 拡張機能をインストールし、後続のマイグレーションで hstore データを"
"解釈するための接続を設定します。"

msgid "``TrigramExtension``"
msgstr "``TrigramExtension``"

msgid "Installs the ``pg_trgm`` extension."
msgstr "``pg_trgm`` 拡張機能をインストールします。"

msgid "``UnaccentExtension``"
msgstr "``UnaccentExtension``"

msgid "Installs the ``unaccent`` extension."
msgstr "``unaccent`` 拡張機能をインストールします。"

msgid "Managing collations using migrations"
msgstr "マイグレーションを使って照合順序 (collation) を管理する"

msgid ""
"If you need to filter or order a column using a particular collation that "
"your operating system provides but PostgreSQL does not, you can manage "
"collations in your database using a migration file. These collations can "
"then be used with the ``db_collation`` parameter on :class:`~django.db."
"models.CharField`, :class:`~django.db.models.TextField`, and their "
"subclasses."
msgstr ""
"OSでは提供されているが PostgreSQL では提供されていない特定の照合順序を使用し"
"てカラムをフィルタリングしたり並べ替えたりする必要がある場合、マイグレーショ"
"ンファイルを使ってデータベース内の照合順序を管理できます。これらの照合順序"
"は、 :class:`~django.db.models.CharField`, :class:`~django.db.models."
"TextField` やそのサブクラスの ``db_collation`` パラメータで使用できます。"

msgid "For example, to create a collation for German phone book ordering::"
msgstr ""
"例えば、ドイツ語の電話帳順に並べ替えるための照合順序を作成するには、次のよう"
"にします:"

msgid ""
"Creates a collation with the given ``name``, ``locale`` and ``provider``."
msgstr ""
"与えられた ``name``、``locale``、および ``provider`` で照合順序を作成します。"

msgid ""
"Set the ``deterministic`` parameter to ``False`` to create a non-"
"deterministic collation, such as for case-insensitive filtering."
msgstr ""
"大文字小文字を区別しないフィルタリングなど、非決定的な照合順序を作成するに"
"は、 ``deterministic`` パラメータを ``False`` に設定します。"

msgid "Removes the collations named ``name``."
msgstr "``name`` という照合順序を削除します。"

msgid ""
"When reversed this is creating a collation with the provided ``locale``, "
"``provider``, and ``deterministic`` arguments. Therefore, ``locale`` is "
"required to make this operation reversible."
msgstr ""
"逆順にすると、指定された ``locale``、``provider``、そして ``deterministic`` "
"引数を使用して照合順序を作成します。したがって、この操作を逆にするには "
"``locale`` が必要です。"

msgid "Concurrent index operations"
msgstr "インデックスの並列操作"

msgid ""
"PostgreSQL supports the ``CONCURRENTLY`` option to ``CREATE INDEX`` and "
"``DROP INDEX`` statements to add and remove indexes without locking out "
"writes. This option is useful for adding or removing an index in a live "
"production database."
msgstr ""
"PostgreSQLでは、``CREATE INDEX`` と ``DROP INDEX`` 文の ``CONCURRENTLY`` オプ"
"ションをサポートしており、書き込みをロックせずにインデックスを追加したり削除"
"したりすることができます。このオプションは、稼働中のデータベースでインデック"
"スを追加したり削除したりする場合に便利です。"

msgid ""
"Like :class:`~django.db.migrations.operations.AddIndex`, but creates an "
"index with the ``CONCURRENTLY`` option. This has a few caveats to be aware "
"of when using this option, see `the PostgreSQL documentation of building "
"indexes concurrently <https://www.postgresql.org/docs/current/ sql-"
"createindex.html#SQL-CREATEINDEX-CONCURRENTLY>`_."
msgstr ""
":class:`~django.db.migrations.operations.AddIndex` と似ていますが、"
"``CONCURRENTLY`` オプションを使用してインデックスを作成します。このオプション"
"を使用する際に注意すべきいくつかの注意事項があります。このオプションの使用に"
"関する詳細は、PostgreSQL の `indexes concurrently をビルドするためのドキュメ"
"ント <https://www.postgresql.org/docs/current/ sql-createindex.html#SQL-"
"CREATEINDEX-CONCURRENTLY>`_ を参照してください。"

msgid ""
"Like :class:`~django.db.migrations.operations.RemoveIndex`, but removes the "
"index with the ``CONCURRENTLY`` option. This has a few caveats to be aware "
"of when using this option, see `the PostgreSQL documentation <https://www."
"postgresql.org/docs/current/sql-dropindex.html>`_."
msgstr ""
":class:`~django.db.migrations.operations.RemoveIndex` と似ていますが、"
"``CONCURRENTLY`` オプションを使用してインデックスを削除します。このオプション"
"を使用する際に留意すべきいくつかの注意点があります。詳細は、`PostgreSQLのド"
"キュメント <https://www.postgresql.org/docs/current/sql-dropindex.html>`__ を"
"参照してください。"

msgid ""
"The ``CONCURRENTLY`` option is not supported inside a transaction (see :ref:"
"`non-atomic migration <non-atomic-migrations>`)."
msgstr ""
"``CONCURRENTLY`` オプションはトランザクション内でサポートされていません (詳細"
"は :ref:`non-atomic migration <non-atomic-migrations>` を参照してください)。"

msgid "Adding constraints without enforcing validation"
msgstr "検証を強制しない制約を追加する"

msgid ""
"PostgreSQL supports the ``NOT VALID`` option with the ``ADD CONSTRAINT`` "
"statement to add check constraints without enforcing validation on existing "
"rows. This option is useful if you want to skip the potentially lengthy scan "
"of the table to verify that all existing rows satisfy the constraint."
msgstr ""
"PostgreSQL は ``NOT VALID`` オプションを ``ADD CONSTRAINT`` 文でサポートして"
"おり、既存の行の検証を行わずに検査制約を追加できます。このオプションは、既存"
"のすべての行が制約を満たすかどうかを確認するためにテーブルをスキャンする手間"
"を省きたい場合に便利です。"

msgid ""
"To validate check constraints created with the ``NOT VALID`` option at a "
"later point of time, use the :class:`~django.contrib.postgres.operations."
"ValidateConstraint` operation."
msgstr ""
"``NOT VALID`` オプションで作成されたチェック制約を後から検証するには、 :"
"class:`~django.contrib.postgres.operations.ValidateConstraint` 操作を使用して"
"ください。"

msgid ""
"See `the PostgreSQL documentation <https://www.postgresql.org/docs/current/ "
"sql-altertable.html#SQL-ALTERTABLE-NOTES>`__ for more details."
msgstr ""
"詳細については、`PostgreSQL のドキュメント <https://www.postgresql.org/docs/"
"current/ sql-altertable.html#SQL-ALTERTABLE-NOTES>`__ を参照してください。"

msgid ""
"Like :class:`~django.db.migrations.operations.AddConstraint`, but avoids "
"validating the constraint on existing rows."
msgstr ""
":class:`~django.db.migrations.operations.AddConstraint` に似ていますが、既存"
"の行に対して制約を検証しないものです。"

msgid ""
"Scans through the table and validates the given check constraint on existing "
"rows."
msgstr "テーブルをスキャンし、既存の行にある指定のチェック制約を検証します。"

msgid ""
"``AddConstraintNotValid`` and ``ValidateConstraint`` operations should be "
"performed in two separate migrations. Performing both operations in the same "
"atomic migration has the same effect as :class:`~django.db.migrations."
"operations.AddConstraint`, whereas performing them in a single non-atomic "
"migration, may leave your database in an inconsistent state if the "
"``ValidateConstraint`` operation fails."
msgstr ""
"``AddConstraintNotValid`` と ``ValidateConstraint`` のオペレーションは、2 つ"
"の別々のマイグレーションで実行する必要があります。同じアトミック マイグレー"
"ション内で両方の操作を実行すると :class:`~django.db.migrations.operations."
"AddConstraint` クラスと同じ効果があります。一方、非アトミック マイグレーショ"
"ン内で操作を行うと、``ValidateConstraint`` 操作が失敗した場合にデータベースが"
"不整合の状態になる可能性があります。"

msgid "Full text search"
msgstr "全文検索"

msgid ""
"The database functions in the ``django.contrib.postgres.search`` module ease "
"the use of PostgreSQL's `full text search engine <https://www.postgresql.org/"
"docs/current/textsearch.html>`_."
msgstr ""
"``django.contrib.postgres.search`` モジュールのデータベース関数は PostgreSQL "
"の `全文検索エンジン <https://www.postgresql.org/docs/current/textsearch."
"html>`_ を利用しやすくしています。"

msgid ""
"For the examples in this document, we'll use the models defined in :doc:`/"
"topics/db/queries`."
msgstr ""
"このドキュメントの例では、 :doc:`/topics/db/queries` で定義されたモデルを使用"
"します。"

msgid ""
"For a high-level overview of searching, see the :doc:`topic documentation </"
"topics/db/search>`."
msgstr ""
"検索の概要については、 :doc:`トピックのドキュメント</topics/db/search>` を参"
"照してください。"

msgid "The ``search`` lookup"
msgstr "``search`` ルックアップ"

msgid ""
"A common way to use full text search is to search a single term against a "
"single column in the database. For example:"
msgstr ""
"全文検索の一般的な使用方法は、データベースの1つのカラムに対して1つの用語を検"
"索することです。たとえば:"

msgid ""
"This creates a ``to_tsvector`` in the database from the ``body_text`` field "
"and a ``plainto_tsquery`` from the search term ``'Cheese'``, both using the "
"default database search configuration. The results are obtained by matching "
"the query and the vector."
msgstr ""
"これにより、データベース内の ``body_text`` フィールドから ``to_tsvector`` が"
"作成され、検索語 ``'Cheese'`` から ``plainto_tsquery`` が作成されます。両方と"
"もデフォルトのデータベース検索設定を使用しています。結果は、クエリとベクトル"
"を一致させることで取得されます。"

msgid ""
"To use the ``search`` lookup, ``'django.contrib.postgres'`` must be in your :"
"setting:`INSTALLED_APPS`."
msgstr ""
"``search`` ルックアップを使用するには、:setting:`INSTALLED_APPS` に "
"``'django.contrib.postgres'`` を含める必要があります。"

msgid "``SearchVector``"
msgstr "``SearchVector``"

msgid ""
"Searching against a single field is great but rather limiting. The ``Entry`` "
"instances we're searching belong to a ``Blog``, which has a ``tagline`` "
"field. To query against both fields, use a ``SearchVector``:"
msgstr ""
"単一のフィールドに対する検索は素晴らしいですが、制約があります。検索対象とな"
"る ``Entry`` インスタンスは ``Blog`` に属しており、 ``tagline`` フィールドを"
"持っています。両方のフィールドに対してクエリを行うには、 ``SearchVector`` を"
"使用します:"

msgid ""
"The arguments to ``SearchVector`` can be any :class:`~django.db.models."
"Expression` or the name of a field. Multiple arguments will be concatenated "
"together using a space so that the search document includes them all."
msgstr ""
"``SearchVector`` への引数は、任意の :class:`~django.db.models.Expression` ま"
"たはフィールドの名前を指定できます。複数の引数は、スペースを使用して連結さ"
"れ、検索ドキュメントにすべて含まれます。"

msgid ""
"``SearchVector`` objects can be combined together, allowing you to reuse "
"them. For example:"
msgstr "``SearchVector`` オブジェクトは組み合わせて再利用できます。たとえば:"

msgid ""
"See :ref:`postgresql-fts-search-configuration` and :ref:`postgresql-fts-"
"weighting-queries` for an explanation of the ``config`` and ``weight`` "
"parameters."
msgstr ""
"``config`` パラメータおよび ``weight`` パラメータの説明については、:ref:"
"`postgresql-fts-search-configuration` と :ref:`postgresql-fts-weighting-"
"queries` を参照してください。"

msgid "``SearchQuery``"
msgstr "``SearchQuery``"

msgid ""
"``SearchQuery`` translates the terms the user provides into a search query "
"object that the database compares to a search vector. By default, all the "
"words the user provides are passed through the stemming algorithms, and then "
"it looks for matches for all of the resulting terms."
msgstr ""
"``SearchQuery`` は、ユーザーが提供した用語を検索クエリオブジェクトに変換し、"
"データベースが検索ベクトルと比較する機能を提供します。デフォルトでは、ユー"
"ザーが提供したすべての単語がステミングアルゴリズムを通過され、その結果の用語"
"すべてに一致するものを検索します。"

msgid ""
"If ``search_type`` is ``'plain'``, which is the default, the terms are "
"treated as separate keywords. If ``search_type`` is ``'phrase'``, the terms "
"are treated as a single phrase. If ``search_type`` is ``'raw'``, then you "
"can provide a formatted search query with terms and operators. If "
"``search_type`` is ``'websearch'``, then you can provide a formatted search "
"query, similar to the one used by web search engines. ``'websearch'`` "
"requires PostgreSQL ≥ 11. Read PostgreSQL's `Full Text Search docs`_ to "
"learn about differences and syntax. Examples:"
msgstr ""
"もし ``search_type`` が ``'plain'`` (デフォルト) の場合、用語は別々のキーワー"
"ドとして扱われます。もし ``search_type`` が ``'phrase'`` の場合、用語は1つの"
"フレーズとして扱われます。もし ``search_type`` が ``'raw'`` の場合、用語と演"
"算子を含む書式付きの検索クエリを指定できます。もし ``search_type`` が "
"``'websearch'`` の場合、Web検索エンジンで使用されるものに類似した書式で検索ク"
"エリを指定できます。 ``'websearch'`` には PostgreSQL ≥ 11 が必要です。違いや"
"構文については PostgreSQL の `Full Text Search docs`_ を参照してください。例:"

msgid ""
"``SearchQuery`` terms can be combined logically to provide more flexibility:"
msgstr ""
"``SearchQuery`` の用語は論理的に組み合わせることで、柔軟性を高めることができ"
"ます:"

msgid ""
"See :ref:`postgresql-fts-search-configuration` for an explanation of the "
"``config`` parameter."
msgstr ""
"``config`` パラメータの説明については、:ref:`postgresql-fts-search-"
"configuration` を参照してください。"

msgid "``SearchRank``"
msgstr "``SearchRank``"

msgid ""
"So far, we've returned the results for which any match between the vector "
"and the query are possible. It's likely you may wish to order the results by "
"some sort of relevancy. PostgreSQL provides a ranking function which takes "
"into account how often the query terms appear in the document, how close "
"together the terms are in the document, and how important the part of the "
"document is where they occur. The better the match, the higher the value of "
"the rank. To order by relevancy:"
msgstr ""
"これまでに、ベクトルとクエリの間で一致する結果を返してきました。おそらく結果"
"をある種の関連性によって並べ替えたいと思うかもしれません。PostgreSQLにはラン"
"キング関数が用意されており、クエリ用語がドキュメント内にどれだけ多く現れる"
"か、用語がドキュメント内でどれだけ近くにあるか、そしてそれらが発生するドキュ"
"メント内の部分がどれだけ重要かを考慮します。一致度が高いほど、ランクの値が高"
"くなります。関連度で並び替えるには:"

msgid ""
"See :ref:`postgresql-fts-weighting-queries` for an explanation of the "
"``weights`` parameter."
msgstr ""
"``weights`` パラメータの説明については、:ref:`postgresql-fts-weighting-"
"queries` を参照してください。"

msgid ""
"Set the ``cover_density`` parameter to ``True`` to enable the cover density "
"ranking, which means that the proximity of matching query terms is taken "
"into account."
msgstr ""
"``cover_density`` パラメーターを ``True`` に設定して、カバー密度ランキングを"
"有効にします。これにより、クエリ用語の一致する近接度が考慮されます。"

msgid ""
"Provide an integer to the ``normalization`` parameter to control rank "
"normalization. This integer is a bit mask, so you can combine multiple "
"behaviors:"
msgstr ""
"``normalization`` パラメータに整数を指定すると、順位の正規化を制御できます。"
"この整数はビットマスクであり、複数の動作を組み合わせることができます。"

msgid ""
"The PostgreSQL documentation has more details about `different rank "
"normalization options`_."
msgstr ""
"PostgreSQLのドキュメントに、 `different rank normalization options`_ について"
"の詳細があります。"

msgid "``SearchHeadline``"
msgstr "``SearchHeadline``"

msgid ""
"Accepts a single text field or an expression, a query, a config, and a set "
"of options. Returns highlighted search results."
msgstr ""
"単一のテキストフィールドまたは式、クエリ、設定、およびオプションのセットを受"
"け入れ、ハイライトされた検索結果を返します。"

msgid ""
"Set the ``start_sel`` and ``stop_sel`` parameters to the string values to be "
"used to wrap highlighted query terms in the document. PostgreSQL's defaults "
"are ``<b>`` and ``</b>``."
msgstr ""
"``start_sel`` パラメータと ``stop_sel`` パラメータには、ハイライトされたクエ"
"リ語をドキュメントで囲むために使用する文字列値を設定します。PostgreSQLのデ"
"フォルトは ``<b>`` と ``</b>`` です。"

msgid ""
"Provide integer values to the ``max_words`` and ``min_words`` parameters to "
"determine the longest and shortest headlines. PostgreSQL's defaults are 35 "
"and 15."
msgstr ""
"パラメータ ``max_words`` と ``min_words`` に整数値を指定して、最長と最短の見"
"出しを決定します。PostgreSQLのデフォルトは35と15です。"

msgid ""
"Provide an integer value to the ``short_word`` parameter to discard words of "
"this length or less in each headline. PostgreSQL's default is 3."
msgstr ""
"``short_word`` パラメータに整数値を指定すると、各見出しでこの長さ以下の単語を"
"破棄します。PostgreSQLのデフォルトは3です。"

msgid ""
"Set the ``highlight_all`` parameter to ``True`` to use the whole document in "
"place of a fragment and ignore ``max_words``, ``min_words``, and "
"``short_word`` parameters. That's disabled by default in PostgreSQL."
msgstr ""
"``highlight_all`` パラメータを ``True`` に設定すると、フラグメントの代わりに"
"ドキュメント全体を使用し、 ``max_words``、``min_words``、``short_word`` パラ"
"メータを無視します。PostgreSQLではデフォルトで無効になっています。"

msgid ""
"Provide a non-zero integer value to the ``max_fragments`` to set the maximum "
"number of fragments to display. That's disabled by default in PostgreSQL."
msgstr ""
"表示するフラグメントの最大数を設定するには、 ``max_fragments`` に0以外の整数"
"値を指定してください。PostgreSQLではデフォルトで無効になっています。"

msgid ""
"Set the ``fragment_delimiter`` string parameter to configure the delimiter "
"between fragments. PostgreSQL's default is ``\" ... \"``."
msgstr ""
"``fragment_delimiter`` 文字列パラメータを設定すると、フラグメント間の区切り文"
"字を構成できます。PostgreSQL のデフォルトは ``\" ... \"`` です。"

msgid ""
"The PostgreSQL documentation has more details on `highlighting search "
"results`_."
msgstr ""
"PostgreSQL のドキュメントには、`highlighting search results`_ に関する詳細が"
"記載されています。"

msgid "Changing the search configuration"
msgstr "検索設定を変更する"

msgid ""
"You can specify the ``config`` attribute to a :class:`SearchVector` and :"
"class:`SearchQuery` to use a different search configuration. This allows "
"using different language parsers and dictionaries as defined by the database:"
msgstr ""
":class:`SearchVector` および :class:`SearchQuery` に ``config`` 属性を指定し"
"て、異なる検索設定を使用できます。これにより、データベースで定義された異なる"
"言語の解析機能や辞書を使用できます。"

msgid "The value of ``config`` could also be stored in another column:"
msgstr "``config`` の値は別の列にも保存できます。"

msgid "Weighting queries"
msgstr "クエリを重み付けする"

msgid ""
"Every field may not have the same relevance in a query, so you can set "
"weights of various vectors before you combine them:"
msgstr ""
"すべてのフィールドがクエリにおいて同じ重要度を持つとは限りません。そのため、"
"それらを組み合わせる前に、複数のベクトルの重みを設定できます。"

msgid ""
"The weight should be one of the following letters: D, C, B, A. By default, "
"these weights refer to the numbers ``0.1``, ``0.2``, ``0.4``, and ``1.0``, "
"respectively. If you wish to weight them differently, pass a list of four "
"floats to :class:`SearchRank` as ``weights`` in the same order above:"
msgstr ""
"重みは次のいずれかの文字である必要があります: D, C, B, A。デフォルトでは、こ"
"れらの重みはそれぞれ ``0.1``, ``0.2``, ``0.4``, ``1.0`` に対応しています。異"
"なる重みを使用する場合は、同じ順序で四つの浮動小数点数のリストを、上記の通り"
"に :class:`SearchRank` に ``weights`` として渡してください。"

msgid "Performance"
msgstr "パフォーマンス"

msgid ""
"Special database configuration isn't necessary to use any of these "
"functions, however, if you're searching more than a few hundred records, "
"you're likely to run into performance problems. Full text search is a more "
"intensive process than comparing the size of an integer, for example."
msgstr ""
"これらの関数を使用するために特別なデータベース設定をする必要はありませんが、"
"数百以上のレコードを検索する場合、パフォーマンスの問題に直面する可能性が高く"
"なります。全文検索は、例えば整数のサイズを比較するよりも負荷の高い処理です。"

msgid ""
"In the event that all the fields you're querying on are contained within one "
"particular model, you can create a functional :class:`GIN <django.contrib."
"postgres.indexes.GinIndex>` or :class:`GiST <django.contrib.postgres.indexes."
"GistIndex>` index which matches the search vector you wish to use. For "
"example::"
msgstr ""
"クエリ対象の全てのフィールドが特定のモデルに含まれている場合、使いたい検索ベ"
"クトルにマッチする関数 :class:`GIN <django.contrib.postgres.indexes."
"GinIndex>` または :class:`GiST <django.contrib.postgres.indexes.GistIndex>` "
"インデックスを作成できます。たとえば:"

msgid ""
"The PostgreSQL documentation has details on `creating indexes for full text "
"search <https://www.postgresql.org/docs/current/textsearch-tables."
"html#TEXTSEARCH-TABLES-INDEX>`_."
msgstr ""
"PostgreSQL のドキュメントには、`フルテキスト検索用のインデックス作成の詳細 "
"<https://www.postgresql.org/docs/current/textsearch-tables.html#TEXTSEARCH-"
"TABLES-INDEX>`_ が記載されています。"

msgid "``SearchVectorField``"
msgstr "``SearchVectorField``"

msgid ""
"If this approach becomes too slow, you can add a ``SearchVectorField`` to "
"your model. You'll need to keep it populated with triggers, for example, as "
"described in the `PostgreSQL documentation`_. You can then query the field "
"as if it were an annotated ``SearchVector``:"
msgstr ""
"この方法が遅すぎる場合は、モデルに ``SearchVectorField`` を追加できます。この"
"フィールドには、例えば `PostgreSQL documentation`_ で説明されているように、ト"
"リガーを入力しておく必要があります。そうすれば、あたかもアノテーションされた "
"``SearchVector`` のようにフィールドに問い合わせることができます:"

msgid ""
"Another approach to searching is trigram similarity. A trigram is a group of "
"three consecutive characters. In addition to the :lookup:`trigram_similar`, :"
"lookup:`trigram_word_similar`, and :lookup:`trigram_strict_word_similar` "
"lookups, you can use a couple of other expressions."
msgstr ""
"検索の別の手法として trigram 類似度があります。trigram は3つの連続する文字の"
"グループです。 :lookup:`trigram_similar`、:lookup:`trigram_word_similar`、:"
"lookup:`trigram_strict_word_similar` の他にもいくつかの式を使用できます。"

msgid ""
"To use them, you need to activate the `pg_trgm extension <https://www."
"postgresql.org/docs/current/pgtrgm.html>`_ on PostgreSQL. You can install it "
"using the :class:`~django.contrib.postgres.operations.TrigramExtension` "
"migration operation."
msgstr ""
"これらを使用するには、PostgreSQL上で `pg_trgm 拡張機能 <https://www."
"postgresql.org/docs/current/pgtrgm.html>`_ を有効にする必要があります。これ"
"は、 :class:`~django.contrib.postgres.operations.TrigramExtension` マイグレー"
"ション・オペレーションを使用してインストールできます。"

msgid "``TrigramSimilarity``"
msgstr "``TrigramSimilarity``"

msgid ""
"Accepts a field name or expression, and a string or expression. Returns the "
"trigram similarity between the two arguments."
msgstr ""
"フィールド名や式、文字列や式を受け取ります。2つの引数の間の trigram 類似度を"
"返します。"

msgid "``TrigramWordSimilarity``"
msgstr "``TrigramWordSimilarity``"

msgid ""
"Accepts a string or expression, and a field name or expression. Returns the "
"trigram word similarity between the two arguments."
msgstr ""
"文字列または式、およびフィールド名または式を受け入れます。2つの引数間の "
"trigram 単語類似度を返します。"

msgid "``TrigramStrictWordSimilarity``"
msgstr "``TrigramStrictWordSimilarity``"

msgid ""
"Accepts a string or expression, and a field name or expression. Returns the "
"trigram strict word similarity between the two arguments. Similar to :class:"
"`TrigramWordSimilarity() <TrigramWordSimilarity>`, except that it forces "
"extent boundaries to match word boundaries."
msgstr ""
"文字列または式とフィールド名または式を受け取り、2つの引数間の trigram 厳密単"
"語類似度を返します。 :class:`TrigramWordSimilarity() "
"<TrigramWordSimilarity>` と似ていますが、この関数は範囲境界を単語境界と一致さ"
"せるように強制します。"

msgid "``TrigramDistance``"
msgstr "``TrigramDistance``"

msgid ""
"Accepts a field name or expression, and a string or expression. Returns the "
"trigram distance between the two arguments."
msgstr ""
"フィールド名または式と、文字列または式を受け入れます。2つの引数の間の "
"trigram 距離を返します。"

msgid "``TrigramWordDistance``"
msgstr "``TrigramWordDistance``"

msgid ""
"Accepts a string or expression, and a field name or expression. Returns the "
"trigram word distance between the two arguments."
msgstr ""
"文字列または式と、フィールド名または式を受け取ります。2つの引数間の trigram "
"単語距離を返します。"

msgid "``TrigramStrictWordDistance``"
msgstr "``TrigramStrictWordDistance``"

msgid ""
"Accepts a string or expression, and a field name or expression. Returns the "
"trigram strict word distance between the two arguments."
msgstr ""
"文字列または式、フィールド名または式を受け入れ、これらの引数間の trigram "
"strict 単語距離を返します。"

msgid ""
"These validators are available from the ``django.contrib.postgres."
"validators`` module."
msgstr ""
"これらのバリデータは ``django.contrib.postgres.validators`` モジュールから利"
"用可能です。"

msgid "``KeysValidator``"
msgstr "``KeysValidator``"

msgid ""
"Validates that the given keys are contained in the value. If ``strict`` is "
"``True``, then it also checks that there are no other keys present."
msgstr ""
"与えられたキーが値に含まれていることを検証します。もし ``strict`` が "
"``True`` の場合、他にキーが存在しないことも確認します。"

msgid ""
"The ``messages`` passed should be a dict containing the keys "
"``missing_keys`` and/or ``extra_keys``."
msgstr ""
"渡される ``messages`` は、``missing_keys`` および/または ``extra_keys`` を含"
"む辞書である必要があります。"

msgid ""
"Note that this checks only for the existence of a given key, not that the "
"value of a key is non-empty."
msgstr ""
"与えられたキーの存在のみを確認し、キーの値が空でないことを確認しない点に留意"
"してください。"

msgid "Range validators"
msgstr "範囲バリデータ"

msgid "``RangeMaxValueValidator``"
msgstr "``RangeMaxValueValidator``"

msgid ""
"Validates that the upper bound of the range is not greater than "
"``limit_value``."
msgstr "範囲の上限が ``limit_value`` を超えていないことを検証します。"

msgid "``RangeMinValueValidator``"
msgstr "``RangeMinValueValidator``"

msgid ""
"Validates that the lower bound of the range is not less than the "
"``limit_value``."
msgstr "範囲の下限が ``limit_value`` より小さくないことを検証します。"

msgid "The redirects app"
msgstr "redirects （リダイレクト）アプリ"

msgid ""
"Django comes with an optional redirects application. It lets you store "
"redirects in a database and handles the redirecting for you. It uses the "
"HTTP response status code ``301 Moved Permanently`` by default."
msgstr ""
"Django にはオプションで redirects (リダイレクト) アプリケーションが付属してい"
"ます。リダイレクトをデータベースに保存し、リダイレクトを処理します。デフォル"
"トでは HTTP 応答ステータスコード ``301 Moved Permanently`` を使います。"

msgid "To install the redirects app, follow these steps:"
msgstr "redirects アプリをインストールするには、以下の手順に従ってください:"

msgid ""
"Ensure that the ``django.contrib.sites`` framework :ref:`is installed "
"<enabling-the-sites-framework>`."
msgstr ""
"``django.contrib.sites`` フレームワークが :ref:`インストールされていること "
"<enabling-the-sites-framework>` を確認してください。"

msgid ""
"Add ``'django.contrib.redirects'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""
"``'django.contrib.redirects'`` を :setting:`INSTALLED_APPS` 設定に追加しま"
"す。"

msgid ""
"Add ``'django.contrib.redirects.middleware.RedirectFallbackMiddleware'`` to "
"your :setting:`MIDDLEWARE` setting."
msgstr ""
":setting:`MIDDLEWARE` 設定に ``'django.contrib.redirects.middleware."
"RedirectFallbackMiddleware'`` を追加します。"

msgid ""
"``manage.py migrate`` creates a ``django_redirect`` table in your database. "
"This is a lookup table with ``site_id``, ``old_path`` and ``new_path`` "
"fields."
msgstr ""
"``manage.py migrate`` はデータベースに ``django_redirect`` テーブルを作成しま"
"す。これは、 ``site_id``、 ``old_path``、および ``new_path`` フィールドを持つ"
"ルックアップテーブルです。"

msgid ""
"The :class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` "
"does all of the work. Each time any Django application raises a 404 error, "
"this middleware checks the redirects database for the requested URL as a "
"last resort. Specifically, it checks for a redirect with the given "
"``old_path`` with a site ID that corresponds to the :setting:`SITE_ID` "
"setting."
msgstr ""
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` が全"
"ての作業を担当しています。Djangoアプリケーションが404エラーを発生させるたび"
"に、このミドルウェアは要求されたURLが最終手段としてリダイレクトデータベースを"
"チェックします。具体的には、与えられた ``old_path`` とサイトIDが :setting:"
"`SITE_ID` 設定に対応するリダイレクトを確認します。"

msgid ""
"If it finds a match, and ``new_path`` is not empty, it redirects to "
"``new_path`` using a 301 (\"Moved Permanently\") redirect. You can subclass :"
"class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` and "
"set :attr:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware."
"response_redirect_class` to :class:`django.http.HttpResponseRedirect` to use "
"a ``302 Moved Temporarily`` redirect instead."
msgstr ""
"一致するものが見つかり、かつ ``new_path`` が空でない場合、301 (\"Moved "
"Permanently\") リダイレクトで ``new_path`` にリダイレクトします。 :class:"
"`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` をサブクラ"
"ス化し、 :attr:`~django.contrib.redirects.middleware."
"RedirectFallbackMiddleware.response_redirect_class` を :class:`django.http."
"HttpResponseRedirect` に設定して、 ``302 Moved Temporarily`` リダイレクトを代"
"わりに使用できます。 "

msgid ""
"If it finds a match, and ``new_path`` is empty, it sends a 410 (\"Gone\") "
"HTTP header and empty (content-less) response."
msgstr ""
"一致するものが見つかり、 ``new_path`` が空であれば、410 (\"Gone\") HTTPヘッ"
"ダーと空の (content-less) レスポンスを送信します。"

msgid ""
"Note that the order of :setting:`MIDDLEWARE` matters. Generally, you can "
"put :class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` "
"at the end of the list, because it's a last resort."
msgstr ""
":setting:`MIDDLEWARE` の順番は重要であることに注意してください。一般的に、 :"
"class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` をリ"
"ストの最後に置くべきです。それは最終手段として機能します。"

msgid "How to add, change and delete redirects"
msgstr "リダイレクトの追加、変更、削除方法"

msgid ""
"If you've activated the automatic Django admin interface, you should see a "
"\"Redirects\" section on the admin index page. Edit redirects as you edit "
"any other object in the system."
msgstr ""
"Django の自動管理インターフェイスを有効にしていれば、管理インデックスページ"
"に \"Redirects\" セクションがあるはずです。システムの他のオブジェクトを編集す"
"るように、リダイレクトを編集してください。"

msgid ""
"Redirects are represented by a standard :doc:`Django model </topics/db/"
"models>`, which lives in :source:`django/contrib/redirects/models.py`. You "
"can access redirect objects via the :doc:`Django database API </topics/db/"
"queries>`. For example:"
msgstr ""
"リダイレクトは標準の :doc:`Django モデル </topics/db/models>` で表現され、 :"
"source:`django/contrib/redirects/models.py` にあります。 リダイレクトオブジェ"
"クトには、:doc:`DjangoデータベースAPI </topics/db/queries>` を経由してアクセ"
"スできます。たとえば:"

msgid "Middleware"
msgstr "ミドルウェア"

msgid ""
"You can change the :class:`~django.http.HttpResponse` classes used by the "
"middleware by creating a subclass of :class:`~django.contrib.redirects."
"middleware.RedirectFallbackMiddleware` and overriding "
"``response_gone_class`` and/or ``response_redirect_class``."
msgstr ""
"ミドルウェアが使用する :class:`~django.http.HttpResponse` クラスは、 :class:"
"`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` のサブクラ"
"スを作成し、 ``response_gone_class`` や ``response_redirect_class`` をオー"
"バーライドすることで変更できます。"

msgid ""
"The :class:`~django.http.HttpResponse` class used when a :class:`~django."
"contrib.redirects.models.Redirect` is not found for the requested path or "
"has a blank ``new_path`` value."
msgstr ""
"要求されたパスが見つからないか、``new_path`` に空の値が含まれている時に、 :"
"class:`~django.contrib.redirects.models.Redirect` が見つからないときに使用さ"
"れる :class:`~django.http.HttpResponse` クラス。"

msgid "Defaults to :class:`~django.http.HttpResponseGone`."
msgstr "デフォルトは :class:`~django.http.HttpResponseGone` です。"

msgid "The :class:`~django.http.HttpResponse` class that handles the redirect."
msgstr "リダイレクトを処理する :class:`~django.http.HttpResponse` クラス。"

msgid "Defaults to :class:`~django.http.HttpResponsePermanentRedirect`."
msgstr ""
"デフォルトは :class:`~django.http.HttpResponsePermanentRedirect` です。"

msgid "The sitemap framework"
msgstr "サイトマップ・フレームワーク"

msgid ""
"Django comes with a high-level sitemap-generating framework to create "
"sitemap_ XML files."
msgstr ""
"Djangoには、 sitemap_ XML ファイルを作成するための高レベルなサイトマップ生成"
"フレームワークが付属しています。"

msgid ""
"A sitemap is an XML file on your website that tells search-engine indexers "
"how frequently your pages change and how \"important\" certain pages are in "
"relation to other pages on your site. This information helps search engines "
"index your site."
msgstr ""
"サイトマップとは、検索エンジンのインデクサーに、ページの変更頻度や、あるペー"
"ジがサイト内の他のページと比較してどの程度「重要」であるかを伝える、ウェブサ"
"イト上のXMLファイルのことです。この情報は、検索エンジンがあなたのサイトをイン"
"デックスするのに役立ちます。"

msgid ""
"The Django sitemap framework automates the creation of this XML file by "
"letting you express this information in Python code."
msgstr ""
"Django サイトマップフレームワークは、この情報を Python コードで表現すること"
"で、XML ファイルの作成を自動化します。"

msgid ""
"It works much like Django's :doc:`syndication framework </ref/contrib/"
"syndication>`. To create a sitemap, write a :class:`~django.contrib.sitemaps."
"Sitemap` class and point to it in your :doc:`URLconf </topics/http/urls>`."
msgstr ""
"これは Django の :doc:`配信 (syndication) フレームワーク </ref/contrib/"
"syndication>` のように動作します。サイトマップを作成するには、 :class:"
"`~django.contrib.sitemaps.Sitemap` クラスを書き、 :doc:`URLconf </topics/"
"http/urls>` の中でそれを指定します。"

msgid "To install the sitemap app, follow these steps:"
msgstr ""
"サイトマップ アプリをインストールするには、以下の手順に従ってください。"

msgid ""
"Add ``'django.contrib.sitemaps'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""
"``'django.contrib.sitemaps'`` を :setting:`INSTALLED_APPS` 設定に追加します。"

msgid ""
"Make sure your :setting:`TEMPLATES` setting contains a ``DjangoTemplates`` "
"backend whose ``APP_DIRS`` options is set to ``True``. It's in there by "
"default, so you'll only need to change this if you've changed that setting."
msgstr ""
":setting:`TEMPLATES` 設定には、``DjangoTemplates`` バックエンドが含まれてお"
"り、``APP_DIRS`` オプションが ``True`` に設定されていることを確認してくださ"
"い。これはデフォルトで設定されているので、設定を変更していない場合は、この設"
"定を変更する必要はありません。"

msgid ""
"Make sure you've installed the :mod:`sites framework<django.contrib.sites>`."
msgstr ""
":mod:`sites フレームワーク <django.contrib.sites>` がインストールされているこ"
"とを確認してください。"

msgid ""
"(Note: The sitemap application doesn't install any database tables. The only "
"reason it needs to go into :setting:`INSTALLED_APPS` is so that the :func:"
"`~django.template.loaders.app_directories.Loader` template loader can find "
"the default templates.)"
msgstr ""
"(注意: サイトマップアプリケーションはデータベーステーブルをインストールしませ"
"ん。 :setting:`INSTALLED_APPS` に入れる必要があるのは、 :func:`~django."
"template.loaders.app_directories.Loader` テンプレートローダーがデフォルトのテ"
"ンプレートを見つけられるようにするためです)。"

msgid "Initialization"
msgstr "初期設定"

msgid ""
"To activate sitemap generation on your Django site, add this line to your :"
"doc:`URLconf </topics/http/urls>`::"
msgstr ""
"Django サイトでサイトマップの生成を有効にするには、 :doc:`URLconf </topics/"
"http/urls>` に以下の行を追加します:"

msgid ""
"This tells Django to build a sitemap when a client accesses :file:`/sitemap."
"xml`."
msgstr ""
"これは Django に、クライアントが :file:`/sitemap.xml` にアクセスしたときにサ"
"イトマップを構築するように指示します。"

msgid ""
"The name of the sitemap file is not important, but the location is. Search "
"engines will only index links in your sitemap for the current URL level and "
"below. For instance, if :file:`sitemap.xml` lives in your root directory, it "
"may reference any URL in your site. However, if your sitemap lives at :file:"
"`/content/sitemap.xml`, it may only reference URLs that begin with :file:`/"
"content/`."
msgstr ""
"サイトマップファイルの名前は重要ではありませんが、場所は重要です。検索エンジ"
"ンは、現在のURLレベル以下のサイトマップのリンクだけをインデックスします。例え"
"ば、 :file:`sitemap.xml` がルートディレクトリにある場合、サイト内のどのURLで"
"も参照できます。しかし、サイトマップが :file:`/content/sitemap.xml` にある場"
"合は、 :file:`/content/` で始まるURLのみを参照できます。"

msgid ""
"The sitemap view takes an extra, required argument: ``{'sitemaps': sitemaps}"
"``. ``sitemaps`` should be a dictionary that maps a short section label (e."
"g., ``blog`` or ``news``) to its :class:`~django.contrib.sitemaps.Sitemap` "
"class (e.g., ``BlogSitemap`` or ``NewsSitemap``). It may also map to an "
"*instance* of a :class:`~django.contrib.sitemaps.Sitemap` class (e.g., "
"``BlogSitemap(some_var)``)."
msgstr ""
"サイトマップビューは追加の必須引数を取ります: ``{'sitemaps': sitemaps}``. "
"``sitemaps`` は短いセクションラベル (例えば ``blog`` や ``news``) を :class:"
"`~django.contrib.sitemaps.Sitemap` クラス (例えば ``BlogSitemap`` や "
"``NewsSitemap``) にマップする辞書です。また、 :class:`~django.contrib."
"sitemaps.Sitemap` クラスの *インスタンス* (例えば ``BlogSitemap(some_var)``) "
"にマップすることもできます。"

msgid "``Sitemap`` classes"
msgstr "``Sitemap`` クラス"

msgid ""
"A :class:`~django.contrib.sitemaps.Sitemap` class is a Python class that "
"represents a \"section\" of entries in your sitemap. For example, one :class:"
"`~django.contrib.sitemaps.Sitemap` class could represent all the entries of "
"your blog, while another could represent all of the events in your events "
"calendar."
msgstr ""
":class:`~django.contrib.sitemaps.Sitemap` クラスは、サイトマップ内のエントリ"
"の「セクション」を表す Python クラスです。例えば、1 つの :class:`~django."
"contrib.sitemaps.Sitemap` クラスはブログのすべてのエントリを表し、別のクラス"
"はイベントカレンダー内のすべてのイベントを表すことができます。"

msgid ""
"In the simplest case, all these sections get lumped together into one :file:"
"`sitemap.xml`, but it's also possible to use the framework to generate a "
"sitemap index that references individual sitemap files, one per section. "
"(See `Creating a sitemap index`_ below.)"
msgstr ""
"最も単純なケースでは、これらのセクションはすべて1つの :file:`sitemap.xml` に"
"まとめられますが、フレームワークを使って、セクションごとに1つのサイトマップ"
"ファイルを参照するサイトマップインデックスを生成することもできます。(下記の "
"`Creating a sitemap index`_ を参照してください)。"

msgid ""
":class:`~django.contrib.sitemaps.Sitemap` classes must subclass ``django."
"contrib.sitemaps.Sitemap``. They can live anywhere in your codebase."
msgstr ""
":class:`~django.contrib.sitemaps.Sitemap` クラスは ``django.contrib.sitemaps."
"Sitemap`` のサブクラスでなければなりません。これらはコードベースのどこにあっ"
"ても構いません。"

msgid "An example"
msgstr "例"

msgid ""
"Let's assume you have a blog system, with an ``Entry`` model, and you want "
"your sitemap to include all the links to your individual blog entries. "
"Here's how your sitemap class might look::"
msgstr ""
"たとえば、 ``Entry`` モデルのブログシステムがあり、サイトマップに個々のブログ"
"エントリへのリンクをすべて含めたいとします。サイトマップクラスは次のようにな"
"ります:"

msgid "Note:"
msgstr "備考:"

msgid ""
":attr:`~Sitemap.changefreq` and :attr:`~Sitemap.priority` are class "
"attributes corresponding to ``<changefreq>`` and ``<priority>`` elements, "
"respectively. They can be made callable as functions, as :attr:`~Sitemap."
"lastmod` was in the example."
msgstr ""
":attr:`~Sitemap.changefreq` と :attr:`~Sitemap.priority` はそれぞれ "
"``<changefreq>`` と ``<priority>`` 要素に対応するクラス属性です。これらは例"
"の :attr:`~Sitemap.lastmod` のように関数として呼び出すことができます。"

msgid ""
":attr:`~Sitemap.items()` is a method that returns a :term:`sequence` or "
"``QuerySet`` of objects. The objects returned will get passed to any "
"callable methods corresponding to a sitemap property (:attr:`~Sitemap."
"location`, :attr:`~Sitemap.lastmod`, :attr:`~Sitemap.changefreq`, and :attr:"
"`~Sitemap.priority`)."
msgstr ""
":attr:`~Sitemap.items()` はオブジェクトの :term:`sequence` または "
"``QuerySet`` を返すメソッドです。返されたオブジェクトはサイトマップのプロパ"
"ティに対応する呼び出し可能なメソッドに渡されます (:attr:`~Sitemap."
"location`、:attr:`~Sitemap.lastmod`、:attr:`~Sitemap.changefreq`、:attr:"
"`~Sitemap.priority`)。"

msgid ":attr:`~Sitemap.lastmod` should return a :class:`~datetime.datetime`."
msgstr ""
":attr:`~Sitemap.lastmod` は :class:`~datetime.datetime` を返すべきです。"

msgid ""
"There is no :attr:`~Sitemap.location` method in this example, but you can "
"provide it in order to specify the URL for your object. By default, :attr:"
"`~Sitemap.location()` calls ``get_absolute_url()`` on each object and "
"returns the result."
msgstr ""
"この例では :attr:`~Sitemap.location` メソッドはありませんが、オブジェクトの"
"URLを指定するために使用できます。デフォルトでは :attr:`~Sitemap.location()` "
"は各オブジェクトに対して ``get_absolute_url()`` を呼び出し、その結果を返しま"
"す。"

msgid "``Sitemap`` class reference"
msgstr "``Sitemap`` クラス リファレンス"

msgid "A ``Sitemap`` class can define the following methods/attributes:"
msgstr "サイトマップ ``Sitemap`` クラスは以下のメソッドや属性を定義できます:"

msgid ""
"**Required.** A method that returns a :term:`sequence` or ``QuerySet`` of "
"objects. The framework doesn't care what *type* of objects they are; all "
"that matters is that these objects get passed to the :attr:`~Sitemap."
"location()`, :attr:`~Sitemap.lastmod()`, :attr:`~Sitemap.changefreq()` and :"
"attr:`~Sitemap.priority()` methods."
msgstr ""
"**必須項目.** オブジェクトの :term:`sequence` または ``QuerySet`` を返すメ"
"ソッド。フレームワークはこれらのオブジェクトの *タイプ* が何であるかについて"
"は関心を持ちません; 大切なのはこれらのオブジェクトが :attr:`~Sitemap."
"location()`, :attr:`~Sitemap.lastmod()`, :attr:`~Sitemap.changefreq()`、およ"
"び :attr:`~Sitemap.priority()` メソッドに渡されることです。"

msgid "**Optional.** Either a method or attribute."
msgstr "**オプション。** メソッドまたは属性のいずれか。"

msgid ""
"If it's a method, it should return the absolute path for a given object as "
"returned by :attr:`~Sitemap.items()`."
msgstr ""
"メソッドであれば、:attr:`~Sitemap.items()` が返すオブジェクトの絶対パスを返す"
"必要があります。"

msgid ""
"If it's an attribute, its value should be a string representing an absolute "
"path to use for *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""
"属性である場合、その値は :attr:`~Sitemap.items()` が返す *すべての* オブジェ"
"クトに使用する絶対パスを表す文字列でなければなりません。"

msgid ""
"In both cases, \"absolute path\" means a URL that doesn't include the "
"protocol or domain. Examples:"
msgstr ""
"どちらの場合も、「絶対パス」とは、プロトコルやドメインを含まないURLを意味しま"
"す。たとえば:"

msgid "Good: ``'/foo/bar/'``"
msgstr "良い例: ``'/foo/bar/'``"

msgid "Bad: ``'example.com/foo/bar/'``"
msgstr "悪い例: ``'example.com/foo/bar/'``"

msgid "Bad: ``'https://example.com/foo/bar/'``"
msgstr "悪い例: ``'https://example.com/foo/bar/'``"

msgid ""
"If :attr:`~Sitemap.location` isn't provided, the framework will call the "
"``get_absolute_url()`` method on each object as returned by :attr:`~Sitemap."
"items()`."
msgstr ""
":attr:`~Sitemap.location` が提供されていない場合、フレームワークは :attr:"
"`~Sitemap.items()` が返す各オブジェクトに対して ``get_absolute_url()`` メソッ"
"ドを呼び出します。"

msgid ""
"To specify a protocol other than ``'http'``, use :attr:`~Sitemap.protocol`."
msgstr ""
"``'http'`` 以外のプロトコルを指定するには、 :attr:`~Sitemap.protocol` を使用"
"してください。"

msgid ""
"If it's a method, it should take one argument -- an object as returned by :"
"attr:`~Sitemap.items()` -- and return that object's last-modified date/time "
"as a :class:`~datetime.datetime`."
msgstr ""
"メソッドであれば、 :attr:`~Sitemap.items()` が返すオブジェクトを引数に取り、"
"そのオブジェクトの最終更新日時を :class:`~datetime.datetime` として返す必要が"
"あります。"

msgid ""
"If it's an attribute, its value should be a :class:`~datetime.datetime` "
"representing the last-modified date/time for *every* object returned by :"
"attr:`~Sitemap.items()`."
msgstr ""
"属性であれば、その値は :attr:`~Sitemap.items()` で返されるすべてのオブジェク"
"トの最終更新日時を表す :class:`~datetime.datetime` である必要があります。"

msgid ""
"If all items in a sitemap have a :attr:`~Sitemap.lastmod`, the sitemap "
"generated by :func:`views.sitemap` will have a ``Last-Modified`` header "
"equal to the latest ``lastmod``. You can activate the :class:`~django."
"middleware.http.ConditionalGetMiddleware` to make Django respond "
"appropriately to requests with an ``If-Modified-Since`` header which will "
"prevent sending the sitemap if it hasn't changed."
msgstr ""
"サイトマップ内のすべてのアイテムに :attr:`~Sitemap.lastmod` がある場合、 :"
"func:`views.sitemap` によって生成されるサイトマップには、最新の ``lastmod`` "
"に等しい ``Last-Modified`` ヘッダーが付きます。リクエストに ``If-Modified-"
"Since`` ヘッダーがある場合、Django が適切に応答するようにするには、 :class:"
"`~django.middleware.http.ConditionalGetMiddleware` をアクティブにします。これ"
"により、サイトマップが変更されていない場合には送信を防ぎます。"

msgid "**Optional.**"
msgstr "**オプション。**"

msgid ""
"This property returns a :class:`~django.core.paginator.Paginator` for :attr:"
"`~Sitemap.items()`. If you generate sitemaps in a batch you may want to "
"override this as a cached property in order to avoid multiple ``items()`` "
"calls."
msgstr ""
"このプロパティは、 :attr:`~Sitemap.items()` のための :class:`~django.core."
"paginator.Paginator` を返します。サイトマップを一括生成する場合は、複数の "
"``items()`` 呼び出しを避けるためにこのキャッシュされたプロパティをオーバーラ"
"イドすると良いでしょう。"

msgid ""
"If it's a method, it should take one argument -- an object as returned by :"
"attr:`~Sitemap.items()` -- and return that object's change frequency as a "
"string."
msgstr ""
"メソッドの場合、1つの引数 (:attr:`~Sitemap.items()` で返されるオブジェクト) "
"を取るべきであり、そのオブジェクトの変更頻度を文字列で返すべきです。"

msgid ""
"If it's an attribute, its value should be a string representing the change "
"frequency of *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""
"属性であれば、その値は :attr:`~Sitemap.items()` が返す *すべての* オブジェク"
"トの変更頻度を表す文字列でなければなりません。"

msgid ""
"Possible values for :attr:`~Sitemap.changefreq`, whether you use a method or "
"attribute, are:"
msgstr ""
":attr:`~Sitemap.changefreq` の可能な値は、メソッドの場合も属性の場合も、以下"
"の通りです。"

msgid "``'always'``"
msgstr "``'always'``"

msgid "``'hourly'``"
msgstr "``'hourly'``"

msgid "``'daily'``"
msgstr "``'daily'``"

msgid "``'weekly'``"
msgstr "``'weekly'``"

msgid "``'monthly'``"
msgstr "``'monthly'``"

msgid "``'yearly'``"
msgstr "``'yearly'``"

msgid "``'never'``"
msgstr "``'never'``"

msgid ""
"If it's a method, it should take one argument -- an object as returned by :"
"attr:`~Sitemap.items()` -- and return that object's priority as either a "
"string or float."
msgstr ""
"メソッドであれば、1つの引数 (:attr:`~Sitemap.items()` が返すオブジェクト) を"
"取り、そのオブジェクトの優先順位を文字列か浮動小数点数で返します。"

msgid ""
"If it's an attribute, its value should be either a string or float "
"representing the priority of *every* object returned by :attr:`~Sitemap."
"items()`."
msgstr ""
"属性であれば、その値は、:attr:`~Sitemap.items()` で返される *すべて* のオブ"
"ジェクトの優先度を表す文字列または浮動小数点数である必要があります。"

msgid ""
"Example values for :attr:`~Sitemap.priority`: ``0.4``, ``1.0``. The default "
"priority of a page is ``0.5``. See the `sitemaps.org documentation`_ for "
"more."
msgstr ""
":attr:`~Sitemap.priority` の例として、``0.4``、``1.0`` を指定します。ページの"
"デフォルトの優先度は ``0.5`` です。詳細については、`sitemaps.org "
"documentation`_ を参照してください。"

msgid ""
"This attribute defines the protocol (``'http'`` or ``'https'``) of the URLs "
"in the sitemap. If it isn't set, the protocol with which the sitemap was "
"requested is used. If the sitemap is built outside the context of a request, "
"the default is ``'https'``."
msgstr ""
"この属性はサイトマップのURLのプロトコル (``'http'`` または ``'https'``) を定"
"義します。設定されていない場合は、サイトマップがリクエストされたプロトコルが"
"使用されます。サイトマップがリクエストのコンテキスト外で作成された場合、デ"
"フォルトは ``'https'`` です。"

msgid ""
"In older versions, the default protocol for sitemaps built outside the "
"context of a request was ``'http'``."
msgstr ""
"古いバージョンでは、リクエストのコンテキスト外に構築されたサイトマップのデ"
"フォルトプロトコルは ``'http'`` でした。"

msgid ""
"This attribute defines the maximum number of URLs included on each page of "
"the sitemap. Its value should not exceed the default value of ``50000``, "
"which is the upper limit allowed in the `Sitemaps protocol <https://www."
"sitemaps.org/protocol.html#index>`_."
msgstr ""
"この属性はサイトマップの各ページに含まれるURLの最大数を定義します。この値はデ"
"フォルト値の ``50000`` を超えてはいけません。これは `Sitemaps protocol "
"<https://www.sitemaps.org/protocol.html#index>`_ で許可されている上限値です。"

msgid ""
"A boolean attribute that defines if the URLs of this sitemap should be "
"generated using all of your :setting:`LANGUAGES`. The default is ``False``."
msgstr ""
"このサイトマップのURLを :setting:`LANGUAGES` のすべてを使用して生成するかどう"
"かを定義するブール値の属性です。デフォルトは ``False`` です。"

msgid ""
"A :term:`sequence` of :term:`language codes<language code>` to use for "
"generating alternate links when :attr:`~Sitemap.i18n` is enabled. Defaults "
"to :setting:`LANGUAGES`."
msgstr ""
":attr:`~Sitemap.i18n` が有効のときに代替リンクを生成するために使用する :term:"
"`言語コード <language code>` の :term:`sequence`。デフォルトは :setting:"
"`LANGUAGES`。"

msgid ""
"A boolean attribute. When used in conjunction with :attr:`~Sitemap.i18n` "
"generated URLs will each have a list of alternate links pointing to other "
"language versions using the `hreflang attribute`_. The default is ``False``."
msgstr ""
"真偽値属性。これを :attr:`~Sitemap.i18n` と併用すると、生成される各URLには他"
"言語バージョンを指す代替リンクのリストがあり、 `hreflang attribute`_ を使用し"
"ます。デフォルトは ``False`` です。"

msgid ""
"A boolean attribute. When ``True`` the alternate links generated by :attr:"
"`~Sitemap.alternates` will contain a ``hreflang=\"x-default\"`` fallback "
"entry with a value of :setting:`LANGUAGE_CODE`. The default is ``False``."
msgstr ""
"真偽値属性です。``True`` の場合、 :attr:`~Sitemap.alternates` によって生成さ"
"れた代替リンクには、 ``hreflang=\"x-default\"`` フォールバックエントリーが含"
"まれ、その値は :setting:`LANGUAGE_CODE` になります。デフォルトは ``False`` で"
"す。"

msgid ""
"**Optional.** A method that returns the latest value returned by :attr:"
"`~Sitemap.lastmod`. This function is used to add the ``lastmod`` attribute "
"to :ref:`Sitemap index context variables<sitemap-index-context-variables>`."
msgstr ""
"**オプション。** :attr:`~Sitemap.lastmod` で返される最新の値を返すメソッド。"
"この関数は、 :ref:`Sitemap インデックス コンテキスト変数 <sitemap-index-"
"context-variables>` に ``lastmod`` 属性を追加するために使用されます。"

msgid "By default :meth:`~Sitemap.get_latest_lastmod` returns:"
msgstr "デフォルトでは、 :meth:`~Sitemap.get_latest_lastmod` は以下を返します:"

msgid "If :attr:`~Sitemap.lastmod` is an attribute: :attr:`~Sitemap.lastmod`."
msgstr ":attr:`~Sitemap.lastmod` が属性の場合:  :attr:`~Sitemap.lastmod` 。"

msgid ""
"If :attr:`~Sitemap.lastmod` is a method: The latest ``lastmod`` returned by "
"calling the method with all items returned by :meth:`Sitemap.items`."
msgstr ""
":attr:`~Sitemap.lastmod` がメソッドの場合、 :meth:`Sitemap.items` で返される"
"すべてのアイテムを使用してメソッドを呼び出した結果、最新の ``lastmod`` が返さ"
"れます。"

msgid ""
"**Optional.** A method that returns the sequence of language codes for which "
"the item is displayed. By default :meth:`~Sitemap.get_languages_for_item` "
"returns :attr:`~Sitemap.languages`."
msgstr ""
"**オプション。** アイテムが表示される言語コードのシーケンスを返すメソッド。デ"
"フォルトでは、 :meth:`~Sitemap.get_languages_for_item` は :attr:`~Sitemap."
"languages` を返します。"

msgid "Shortcuts"
msgstr "ショートカット"

msgid "The sitemap framework provides a convenience class for a common case:"
msgstr ""
"サイトマップフレームワークは、一般的なケースに対する便利なクラスを提供しま"
"す。"

msgid ""
"The :class:`django.contrib.sitemaps.GenericSitemap` class allows you to "
"create a sitemap by passing it a dictionary which has to contain at least a "
"``queryset`` entry. This queryset will be used to generate the items of the "
"sitemap. It may also have a ``date_field`` entry that specifies a date field "
"for objects retrieved from the ``queryset``. This will be used for the :attr:"
"`~Sitemap.lastmod` attribute and :meth:`~Sitemap.get_latest_lastmod` methods "
"in the in the generated sitemap."
msgstr ""
":class:`django.contrib.sitemaps.GenericSitemap` クラスでは、少なくとも "
"``queryset`` エントリを含む辞書を渡すことで、サイトマップを作成できます。こ"
"の ``queryset`` は、サイトマップのアイテムを生成するために使用されます。ま"
"た、``queryset`` から取得されたオブジェクトの日付フィールドを指定する "
"``date_field`` エントリを持つこともできます。これは、生成されたサイトマップ"
"の :attr:`~Sitemap.lastmod` 属性および :meth:`~Sitemap.get_latest_lastmod` メ"
"ソッドに使用されます。"

msgid ""
"The :attr:`~Sitemap.priority`, :attr:`~Sitemap.changefreq`, and :attr:"
"`~Sitemap.protocol` keyword arguments allow specifying these attributes for "
"all URLs."
msgstr ""
":attr:`~Sitemap.priority` 、 :attr:`~Sitemap.changefreq`、 :attr:`~Sitemap."
"protocol` キーワード引数を使用すると、すべてのURLに対してこれらの属性を指定で"
"きます。"

msgid ""
"Here's an example of a :doc:`URLconf </topics/http/urls>` using :class:"
"`GenericSitemap`::"
msgstr ""
"以下は :class:`GenericSitemap` を使用した :doc:`URLconf </topics/http/urls>` "
"の例です:"

msgid "Sitemap for static views"
msgstr "静的ビューのサイトマップ"

msgid ""
"Often you want the search engine crawlers to index views which are neither "
"object detail pages nor flatpages. The solution is to explicitly list URL "
"names for these views in ``items`` and call :func:`~django.urls.reverse` in "
"the ``location`` method of the sitemap. For example::"
msgstr ""
"検索エンジンのクローラに、オブジェクト詳細ページでもフラットページでもない"
"ビューをインデックスさせたいことがよくあります。その解決策は、 ``items`` にこ"
"れらのビューの URL 名を明示的に列挙し、サイトマップの ``location`` メソッド"
"で :func:`~django.urls.reverse` を呼び出すことです。例えば次のようにします:"

msgid "Creating a sitemap index"
msgstr "サイトマップインデックスを作成する"

msgid ""
"The sitemap framework also has the ability to create a sitemap index that "
"references individual sitemap files, one per each section defined in your "
"``sitemaps`` dictionary. The only differences in usage are:"
msgstr ""
"サイトマップフレームワークには、 ``sitemaps`` 辞書で定義された各セクションご"
"とに1つずつ、個別のサイトマップファイルを参照するサイトマップインデックスを作"
"成する機能もあります。使用上の唯一の違いは下記です:"

msgid ""
"You use two views in your URLconf: :func:`django.contrib.sitemaps.views."
"index` and :func:`django.contrib.sitemaps.views.sitemap`."
msgstr ""
"URLconf で 2 つのビューを使用しています: :func:`django.contrib.sitemaps."
"views.index` と :func:`django.contrib.sitemaps.views.sitemap` 。"

msgid ""
"The :func:`django.contrib.sitemaps.views.sitemap` view should take a "
"``section`` keyword argument."
msgstr ""
":func:`django.contrib.sitemaps.views.sitemap` ビューは、``section`` キーワー"
"ド引数を受け取るべきです。"

msgid ""
"Here's what the relevant URLconf lines would look like for the example "
"above::"
msgstr "上記の例に対する関連するURLconfの行は、次のようになります:"

msgid ""
"This will automatically generate a :file:`sitemap.xml` file that references "
"both :file:`sitemap-flatpages.xml` and :file:`sitemap-blog.xml`. The :class:"
"`~django.contrib.sitemaps.Sitemap` classes and the ``sitemaps`` dict don't "
"change at all."
msgstr ""
"これにより、自動的に :file:`sitemap.xml` ファイルが生成され、 :file:`sitemap-"
"flatpages.xml` と :file:`sitemap-blog.xml` の両方が参照されます。 :class:"
"`~django.contrib.sitemaps.Sitemap` クラスと ``sitemaps`` 辞書は全く変わりませ"
"ん。"

msgid ""
"If all sitemaps have a ``lastmod`` returned by :meth:`Sitemap."
"get_latest_lastmod` the sitemap index will have a ``Last-Modified`` header "
"equal to the latest ``lastmod``."
msgstr ""
"すべてのサイトマップが :meth:`Sitemap.get_latest_lastmod` で返される "
"``lastmod`` を持っている場合、サイトマップインデックスは最新の ``lastmod`` と"
"同じ ``Last-Modified`` ヘッダーを持ちます。"

msgid ""
"You should create an index file if one of your sitemaps has more than 50,000 "
"URLs. In this case, Django will automatically paginate the sitemap, and the "
"index will reflect that."
msgstr ""
"サイトマップの URL が 50,000 を超える場合は、インデックスファイルを作成すべき"
"です。この場合、 Django は自動的にサイトマップをページ分割し、インデックスに"
"反映します。"

msgid ""
"If you're not using the vanilla sitemap view -- for example, if it's wrapped "
"with a caching decorator -- you must name your sitemap view and pass "
"``sitemap_url_name`` to the index view::"
msgstr ""
"通常のサイトマップビューを使用していない場合 (たとえば、キャッシュデコレータ"
"でラップされている場合) は、サイトマップビューに名前を付けて、インデックス"
"ビューに ``sitemap_url_name`` を渡さなければなりません:"

msgid "Template customization"
msgstr "テンプレートをカスタマイズする"

msgid ""
"If you wish to use a different template for each sitemap or sitemap index "
"available on your site, you may specify it by passing a ``template_name`` "
"parameter to the ``sitemap`` and ``index`` views via the URLconf::"
msgstr ""
"サイト上で利用可能な各サイトマップやサイトマップインデックスごとに異なるテン"
"プレートを使用したい場合は、URLconf を介して ``sitemap`` ビューや ``index`` "
"ビューに ``template_name`` パラメータを渡すことで指定できます:"

msgid "Context variables"
msgstr "コンテキスト変数"

msgid ""
"When customizing the templates for the :func:`~django.contrib.sitemaps.views."
"index` and :func:`~django.contrib.sitemaps.views.sitemap` views, you can "
"rely on the following context variables."
msgstr ""
"テンプレートをカスタマイズする際に、 :func:`~django.contrib.sitemaps.views."
"index` と :func:`~django.contrib.sitemaps.views.sitemap` ビューには、以下のコ"
"ンテキスト変数に依存できます。"

msgid ""
"The variable ``sitemaps`` is a list of objects containing the ``location`` "
"and ``lastmod`` attribute for each of the sitemaps. Each URL exposes the "
"following attributes:"
msgstr ""
"変数 ``sitemaps`` は各サイトマップの ``location`` と ``lastmod`` 属性を含むオ"
"ブジェクトのリストです。各URLは以下の属性を持ちます:"

msgid "``location``: The location (url & page) of the sitemap."
msgstr "``location``: サイトマップの場所 (URLとページ)。"

msgid ""
"``lastmod``: Populated by the :meth:`~Sitemap.get_latest_lastmod` method for "
"each sitemap."
msgstr ""
"``lastmod``: 各サイトマップに対して :meth:`~Sitemap.get_latest_lastmod` メ"
"ソッドによって設定されます。"

msgid "Sitemap"
msgstr "サイトマップ"

msgid ""
"The variable ``urlset`` is a list of URLs that should appear in the sitemap. "
"Each URL exposes attributes as defined in the :class:`~django.contrib."
"sitemaps.Sitemap` class:"
msgstr ""
"変数 ``urlset`` は、サイトマップに表示されるべきURLのリストです。各URLは、 :"
"class:`~django.contrib.sitemaps.Sitemap` クラスで定義された属性を公開していま"
"す。"

msgid "``alternates``"
msgstr "``alternates``"

msgid "``changefreq``"
msgstr "``changefreq``"

msgid "``item``"
msgstr "``item``"

msgid "``lastmod``"
msgstr "``lastmod``"

msgid "``location``"
msgstr "``location``"

msgid "``priority``"
msgstr "``priority``"

msgid ""
"The ``alternates`` attribute is available when :attr:`~Sitemap.i18n` and :"
"attr:`~Sitemap.alternates` are enabled. It is a list of other language "
"versions, including the optional :attr:`~Sitemap.x_default` fallback, for "
"each URL. Each alternate is a dictionary with ``location`` and ``lang_code`` "
"keys."
msgstr ""
"``alternates`` 属性は、 :attr:`~Sitemap.i18n` と :attr:`~Sitemap.alternates` "
"が有効になっている場合に利用可能です。それは、各URLに対してオプションの :"
"attr:`~Sitemap.x_default` フォールバックを含む、他の言語バージョンのリストで"
"す。各代替バージョンは、``location`` と ``lang_code`` キーを持つ辞書です。"

msgid ""
"The ``item`` attribute has been added for each URL to allow more flexible "
"customization of the templates, such as `Google news sitemaps`_. Assuming "
"Sitemap's :attr:`~Sitemap.items()` would return a list of items with "
"``publication_data`` and a ``tags`` field something like this would generate "
"a Google News compatible sitemap:"
msgstr ""
"各URLに ``item`` 属性が追加され、`Google news sitemaps`_ のようなテンプレート"
"をより柔軟にカスタマイズできるようになりました。Sitemapの :attr:`~Sitemap."
"items()` が ``publication_data`` と ``tags`` フィールドを持つアイテムのリスト"
"を返すと仮定すると、このようにGoogleニュース互換のサイトマップが生成されます:"

msgid "The \"sites\" framework"
msgstr "\"sites\" フレームワーク"

msgid ""
"Django comes with an optional \"sites\" framework. It's a hook for "
"associating objects and functionality to particular websites, and it's a "
"holding place for the domain names and \"verbose\" names of your Django-"
"powered sites."
msgstr ""
"Django にはオプションで \"sites\" フレームワークが付属しています。これは、オ"
"ブジェクトや機能を特定の Web サイトに関連付けるためのフックで、 Django で動く"
"サイトのドメイン名や \"冗長な\" 名前を保持する場所です。"

msgid ""
"Use it if your single Django installation powers more than one site and you "
"need to differentiate between those sites in some way."
msgstr ""
"1 つの Django インストールで複数のサイトを運用し、これらのサイトを何らかの方"
"法で区別する必要がある場合に使用します。"

msgid "The sites framework is mainly based on this model:"
msgstr "sites フレームワークは、主にこのモデルに基づいています:"

msgid ""
"A model for storing the ``domain`` and ``name`` attributes of a website."
msgstr "ウェブサイトの ``domain`` と ``name`` 属性を格納するモデル。"

msgid ""
"The fully qualified domain name associated with the website. For example, "
"``www.example.com``."
msgstr ""
"ウェブサイトに関連付けられた完全修飾ドメイン名。たとえば、 ``www.example."
"com`` 。"

msgid "A human-readable \"verbose\" name for the website."
msgstr "人間が読める \"冗長な\" ウェブサイトの名前。"

msgid ""
"The :setting:`SITE_ID` setting specifies the database ID of the :class:"
"`~django.contrib.sites.models.Site` object associated with that particular "
"settings file. If the setting is omitted, the :func:`~django.contrib.sites."
"shortcuts.get_current_site` function will try to get the current site by "
"comparing the :attr:`~django.contrib.sites.models.Site.domain` with the host "
"name from the :meth:`request.get_host() <django.http.HttpRequest.get_host>` "
"method."
msgstr ""
":setting:`SITE_ID` 設定は、その特定の設定ファイルに関連付けられている :class:"
"`~django.contrib.sites.models.Site` オブジェクトのデータベース ID を指定しま"
"す。この設定が省略された場合、 :func:`~django.contrib.sites.shortcuts."
"get_current_site` 関数は、:attr:`~django.contrib.sites.models.Site.domain` "
"と :meth:`request.get_host() <django.http.HttpRequest.get_host>` メソッドから"
"のホスト名を比較することで、現在のサイトを取得しようとします。"

msgid ""
"How you use this is up to you, but Django uses it in a couple of ways "
"automatically via a couple of conventions."
msgstr ""
"これをどのように使用するかはあなた次第ですが、Djangoはいくつかの慣習を通じて"
"自動的にいくつかの方法で使用します。"

msgid "Example usage"
msgstr "使用例"

msgid "Why would you use sites? It's best explained through examples."
msgstr ""
"なぜ sites を使うのでしょうか？ それは例を挙げるとわかりやすいでしょう。"

msgid "Associating content with multiple sites"
msgstr "複数のサイトとコンテンツを関連付ける"

msgid ""
"The LJWorld.com_ and Lawrence.com sites were operated by the same news "
"organization -- the Lawrence Journal-World newspaper in Lawrence, Kansas. "
"LJWorld.com focused on news, while Lawrence.com focused on local "
"entertainment. But sometimes editors wanted to publish an article on *both* "
"sites."
msgstr ""
"LJWorld.com_ と Lawrence.com のサイトは、同じニュース組織、カンザス州ローレン"
"スにあるローレンス・ジャーナル・ワールド新聞社によって運営されていました。"
"LJWorld.com はニュースに焦点を当てていましたが、Lawrence.com は地元のエンター"
"テインメントに焦点を当てていました。しかし、時には編集者たちは記事を *両方の"
"* サイトに掲載したいと思うことがありました。"

msgid ""
"The naive way of solving the problem would be to require site producers to "
"publish the same story twice: once for LJWorld.com and again for Lawrence."
"com. But that's inefficient for site producers, and it's redundant to store "
"multiple copies of the same story in the database."
msgstr ""
"問題を解決する素朴な方法は、サイトのプロデューサーに同じストーリーを二度公開"
"させることです。一度は LJWorld.com 用に、もう一度は Lawrence.com 用です。しか"
"し、それはサイトプロデューサーにとって非効率的であり、データベースに同じス"
"トーリーの複数のコピーを保存することは冗長です。"

msgid ""
"A better solution removes the content duplication: Both sites use the same "
"article database, and an article is associated with one or more sites. In "
"Django model terminology, that's represented by a :class:`~django.db.models."
"ManyToManyField` in the ``Article`` model::"
msgstr ""
"より良い解決方法は、内容の重複を解消することです。どちらのサイトも同じ記事"
"データベースを使用し、記事は1つ以上のサイトに関連付けられます。Djangoモデルの"
"用語では、これは ``Article`` モデル中に :class:`~django.db.models."
"ManyToManyField` で表されます:"

msgid "This accomplishes several things quite nicely:"
msgstr "これにより、いくつかのことが非常にうまく達成されます:"

msgid ""
"It lets the site producers edit all content -- on both sites -- in a single "
"interface (the Django admin)."
msgstr ""
"サイト制作者が両方のサイトの全てのコンテンツをシングルインターフェイス"
"(Django 管理画面)で編集できるようにします。"

msgid ""
"It means the same story doesn't have to be published twice in the database; "
"it only has a single record in the database."
msgstr ""
"同じストーリーをデータベースに2回公開する必要はありません。データベースには単"
"一のレコードのみが存在します。"

msgid ""
"It lets the site developers use the same Django view code for both sites. "
"The view code that displays a given story checks to make sure the requested "
"story is on the current site. It looks something like this::"
msgstr ""
"これにより、サイト開発者は両方のサイトで同じ Django ビューコードを使うことが"
"できます。指定されたストーリーを表示するビューコードは、リクエストされたス"
"トーリーが 現在のサイトにあるかどうかをチェックします。以下のようになります："

msgid "Associating content with a single site"
msgstr "1つのサイトとコンテンツを関連付ける"

msgid ""
"Similarly, you can associate a model to the :class:`~django.contrib.sites."
"models.Site` model in a many-to-one relationship, using :class:`~django.db."
"models.ForeignKey`."
msgstr ""
"同様に、:class:`~django.db.models.ForeignKey` を使って、あるモデルを :class:"
"`~django.contrib.sites.models.Site` モデルに多対一のリレーションシップで関連"
"付けることができます。"

msgid ""
"For example, if an article is only allowed on a single site, you'd use a "
"model like this::"
msgstr ""
"たとえば、1つのサイトにのみ記事を許可する場合は、次のようなモデルを使用しま"
"す:"

msgid "This has the same benefits as described in the last section."
msgstr "この利点は前のセクションで説明されたものと同じです。"

msgid "Hooking into the current site from views"
msgstr "ビューから現在のサイトにフックする"

msgid ""
"You can use the sites framework in your Django views to do particular things "
"based on the site in which the view is being called. For example::"
msgstr ""
"Djangoのビュー内でサイトフレームワークを利用して、ビューが呼び出されているサ"
"イトに基づいた特定の処理を行うことができます。たとえば:"

msgid ""
"It's fragile to hard-code the site IDs like that, in case they change. The "
"cleaner way of accomplishing the same thing is to check the current site's "
"domain::"
msgstr ""
"そのようにサイトIDをハードコードするのは、それらが変更された場合に脆弱です。"
"同じことを達成するよりクリーンな方法は、現在のサイトのドメインを確認すること"
"です:"

msgid ""
"This has also the advantage of checking if the sites framework is installed, "
"and return a :class:`~django.contrib.sites.requests.RequestSite` instance if "
"it is not."
msgstr ""
"これには、サイトフレームワークがインストールされているかどうかを確認するとい"
"う利点もあります。インストールされていない場合は、 :class:`~django.contrib."
"sites.requests.RequestSite` インスタンスを返します。"

msgid ""
"If you don't have access to the request object, you can use the "
"``get_current()`` method of the :class:`~django.contrib.sites.models.Site` "
"model's manager. You should then ensure that your settings file does contain "
"the :setting:`SITE_ID` setting. This example is equivalent to the previous "
"one::"
msgstr ""
"リクエストオブジェクトにアクセスできない場合は、:class:`~django.contrib."
"sites.models.Site` モデルのマネージャの ``get_current()`` メソッドを使用でき"
"ます。その際、設定ファイルに :setting:`SITE_ID` の設定が含まれていることを確"
"認してください。この例は、前の例と同等です:"

msgid "Getting the current domain for display"
msgstr "表示用の現在のドメインを取得する"

msgid ""
"LJWorld.com and Lawrence.com both have email alert functionality, which lets "
"readers sign up to get notifications when news happens. It's pretty basic: A "
"reader signs up on a web form and immediately gets an email saying, \"Thanks "
"for your subscription.\""
msgstr ""
"LJWorld.com と Lawrence.com はどちらも、ニュースが発生したときに通知を受け取"
"るために読者がサインアップできるメールアラート機能を持っています。とても基本"
"的なものです。読者がウェブフォームでサインアップをすると、すぐに「ご登録あり"
"がとうございます」というメールが送られます。"

msgid ""
"It'd be inefficient and redundant to implement this sign up processing code "
"twice, so the sites use the same code behind the scenes. But the \"thank you "
"for signing up\" notice needs to be different for each site. By using :class:"
"`~django.contrib.sites.models.Site` objects, we can abstract the \"thank "
"you\" notice to use the values of the current site's :attr:`~django.contrib."
"sites.models.Site.name` and :attr:`~django.contrib.sites.models.Site.domain`."
msgstr ""
"このサインアップ処理コードを2回実装するのは、非効率的で冗長です。そこで、サイ"
"トは裏で同じコードを使用しています。しかし、各サイトの「サインアップしていた"
"だきありがとうございます」通知は異なる必要があります。 :class:`~django."
"contrib.sites.models.Site` オブジェクトを使用することで、現在のサイトの :"
"attr:`~django.contrib.sites.models.Site.name` と :attr:`~django.contrib."
"sites.models.Site.domain` の値を使用して「ありがとうございます」通知を抽象化"
"できます。"

msgid "Here's an example of what the form-handling view looks like::"
msgstr "以下は、フォームハンドリングビューの例です:"

msgid ""
"On Lawrence.com, this email has the subject line \"Thanks for subscribing to "
"lawrence.com alerts.\" On LJWorld.com, the email has the subject \"Thanks "
"for subscribing to LJWorld.com alerts.\" Same goes for the email's message "
"body."
msgstr ""
"Lawrence.com では、このメールの件名は \"Thanks for subscribing to lawrence."
"com alerts.\" です。LJWorld.com では、メールの件名は \"Thanks for "
"subscribing to LJWorld.com alerts.\" となります。メールのメッセージ本体も同様"
"です。"

msgid ""
"Note that an even more flexible (but more heavyweight) way of doing this "
"would be to use Django's template system. Assuming Lawrence.com and LJWorld."
"com have different template directories (:setting:`DIRS <TEMPLATES-DIRS>`), "
"you could farm out to the template system like so::"
msgstr ""
"これを行うさらに柔軟（しかしより重い）方法として、Djangoのテンプレートシステ"
"ムを使用できます。Lawrence.com と LJWorld.com が異なるテンプレートディレクト"
"リ(:setting:`DIRS <TEMPLATES-DIRS>`)を持っていると仮定すると、以下のようにテ"
"ンプレートシステムに任せることができます:"

msgid ""
"In this case, you'd have to create :file:`subject.txt` and :file:`message."
"txt` template files for both the LJWorld.com and Lawrence.com template "
"directories. That gives you more flexibility, but it's also more complex."
msgstr ""
"この場合、LJWorld.com と Lawrence.com のテンプレートディレクトリの両方につい"
"て、:file:`subject.txt` と :file:`message.txt` のテンプレートファイルを作成す"
"る必要があります。これにより柔軟性は高まりますが、同時により複雑になります。"

msgid ""
"It's a good idea to exploit the :class:`~django.contrib.sites.models.Site` "
"objects as much as possible, to remove unneeded complexity and redundancy."
msgstr ""
":class:`~django.contrib.sites.models.Site` クラスのオブジェクトを可能な限り活"
"用することは、不要な複雑さと冗長性を排除する良い考えです。"

msgid "Getting the current domain for full URLs"
msgstr "フルURLのための現在のドメインの取得"

msgid ""
"Django's ``get_absolute_url()`` convention is nice for getting your objects' "
"URL without the domain name, but in some cases you might want to display the "
"full URL -- with ``http://`` and the domain and everything -- for an object. "
"To do this, you can use the sites framework. An example:"
msgstr ""
"Django の ``get_absolute_url()`` の慣習は、オブジェクトのURLをドメイン名なし"
"で取得するのに便利ですが、場合によってはオブジェクトの完全な URL (``http://"
"`` やドメイン名など全てを含む) を表示したいこともあるでしょう。これを行うに"
"は、サイトフレームワークを使用できます。例:"

msgid "Enabling the sites framework"
msgstr "サイトフレームワークを有効にする"

msgid "To enable the sites framework, follow these steps:"
msgstr "サイトフレームワークを有効にするには、次の手順に従ってください:"

msgid ""
"Add ``'django.contrib.sites'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""
"``django.contrib.sites'`` を :setting:`INSTALLED_APPS` 設定に追加します。"

msgid "Define a :setting:`SITE_ID` setting::"
msgstr ":setting:`SITE_ID` 設定を定義します:"

msgid "Run :djadmin:`migrate`."
msgstr ":djadmin:`migrate` を実行します。"

msgid ""
"``django.contrib.sites`` registers a :data:`~django.db.models.signals."
"post_migrate` signal handler which creates a default site named ``example."
"com`` with the domain ``example.com``. This site will also be created after "
"Django creates the test database. To set the correct name and domain for "
"your project, you can use a :ref:`data migration <data-migrations>`."
msgstr ""
"``django.contrib.sites`` は、デフォルトサイトとして名前とドメインが "
"``example.com`` であるサイトを作成する :data:`~django.db.models.signals."
"post_migrate` シグナルハンドラを登録します。このサイトは、Djangoがテストデー"
"タベースを作成した後にも作成されます。プロジェクトの正しい名前とドメインを設"
"定するには、:ref:`データマイグレーション <data-migrations>` を使用できます。"

msgid ""
"In order to serve different sites in production, you'd create a separate "
"settings file with each ``SITE_ID`` (perhaps importing from a common "
"settings file to avoid duplicating shared settings) and then specify the "
"appropriate :envvar:`DJANGO_SETTINGS_MODULE` for each site."
msgstr ""
"本番環境で異なるサイトを提供するには、各 ``SITE_ID`` 用に個別の設定ファイルを"
"作成します（共有設定の重複を避けるために、共通の設定ファイルからインポートす"
"ることもできます）。そして、各サイトに適切な :envvar:"
"`DJANGO_SETTINGS_MODULE` を指定します。"

msgid "Caching the current ``Site`` object"
msgstr "現在の ``Site`` オブジェクトをキャッシュする"

msgid ""
"As the current site is stored in the database, each call to ``Site.objects."
"get_current()`` could result in a database query. But Django is a little "
"cleverer than that: on the first request, the current site is cached, and "
"any subsequent call returns the cached data instead of hitting the database."
msgstr ""
"現在のサイトはデータベースに保存されているため、``Site.objects."
"get_current()`` を呼び出すたびにデータベースクエリが発生する可能性がありま"
"す。しかし、Djangoは少し賢く: 最初のリクエストで、現在のサイトがキャッシュさ"
"れ、以降の呼び出しではデータベースにアクセスする代わりにキャッシュされたデー"
"タが返されます。"

msgid ""
"If for any reason you want to force a database query, you can tell Django to "
"clear the cache using ``Site.objects.clear_cache()``::"
msgstr ""
"何らかの理由でデータベースクエリを強制的に実行したい場合は、Django にキャッ"
"シュをクリアするよう指示できます。これを行うには、 ``Site.objects."
"clear_cache()`` を使用します。"

msgid "The ``CurrentSiteManager``"
msgstr "``CurrentSiteManager``"

msgid ""
"If :class:`~django.contrib.sites.models.Site` plays a key role in your "
"application, consider using the helpful :class:`~django.contrib.sites."
"managers.CurrentSiteManager` in your model(s). It's a model :doc:`manager </"
"topics/db/managers>` that automatically filters its queries to include only "
"objects associated with the current :class:`~django.contrib.sites.models."
"Site`."
msgstr ""
"もし :class:`~django.contrib.sites.models.Site` があなたのアプリケーションで"
"重要な役割を果たしているなら、モデルに :class:`~django.contrib.sites."
"managers.CurrentSiteManager` を使うことを検討してください。これは :doc:`マ"
"ネージャー </topics/db/managers>` であり、そのクエリが自動的に現在の :class:"
"`~django.contrib.sites.models.Site` に関連付けられたオブジェクトのみを含むよ"
"うにフィルタリングされます。"

msgid "Mandatory :setting:`SITE_ID`"
msgstr "必須 :setting:`SITE_ID`"

msgid ""
"The ``CurrentSiteManager`` is only usable when the :setting:`SITE_ID` "
"setting is defined in your settings."
msgstr ""
"``CurrentSiteManager`` は、設定ファイルに :setting:`SITE_ID` 設定が定義されて"
"いる場合にのみ使用可能です。"

msgid ""
"Use :class:`~django.contrib.sites.managers.CurrentSiteManager` by adding it "
"to your model explicitly. For example::"
msgstr ""
":class:`~django.contrib.sites.managers.CurrentSiteManager` を明示的にモデルに"
"追加することで使用します。例えば:"

msgid ""
"With this model, ``Photo.objects.all()`` will return all ``Photo`` objects "
"in the database, but ``Photo.on_site.all()`` will return only the ``Photo`` "
"objects associated with the current site, according to the :setting:"
"`SITE_ID` setting."
msgstr ""
"このモデルを使うと、``Photo.objects.all()`` はデータベース内の全ての "
"``Photo`` オブジェクトを返しますが、``Photo.on_site.all()`` は :setting:"
"`SITE_ID` 設定に従って、現在のサイトに関連付けられた ``Photo`` オブジェクトの"
"みを返します。"

msgid "Put another way, these two statements are equivalent::"
msgstr "別の言い方をすると、これら2つのステートメントは等価です:"

msgid ""
"How did :class:`~django.contrib.sites.managers.CurrentSiteManager` know "
"which field of ``Photo`` was the :class:`~django.contrib.sites.models.Site`? "
"By default, :class:`~django.contrib.sites.managers.CurrentSiteManager` looks "
"for a either a :class:`~django.db.models.ForeignKey` called ``site`` or a :"
"class:`~django.db.models.ManyToManyField` called ``sites`` to filter on. If "
"you use a field named something other than ``site`` or ``sites`` to identify "
"which :class:`~django.contrib.sites.models.Site` objects your object is "
"related to, then you need to explicitly pass the custom field name as a "
"parameter to :class:`~django.contrib.sites.managers.CurrentSiteManager` on "
"your model. The following model, which has a field called ``publish_on``, "
"demonstrates this::"
msgstr ""
":class:`~django.contrib.sites.managers.CurrentSiteManager` は、どうやって "
"``Photo`` のどのフィールドが :class:`~django.contrib.sites.models.Site` であ"
"るかを知ったのでしょうか？デフォルトでは、:class:`~django.contrib.sites."
"managers.CurrentSiteManager` は、``site`` という名前の :class:`~django.db."
"models.ForeignKey` または ``sites`` という名前の :class:`~django.db.models."
"ManyToManyField` をフィルタに使用するフィールドを探します。もし、モデルが関連"
"付けられている :class:`~django.contrib.sites.models.Site` オブジェクトを識別"
"するために ``site`` や ``sites`` 以外の名前のフィールドを使用する場合は、カス"
"タムフィールド名をパラメータとして :class:`~django.contrib.sites.managers."
"CurrentSiteManager` に明示的に渡す必要があります。以下のモデル例は、"
"``publish_on`` というフィールドを持っています:"

msgid ""
"If you attempt to use :class:`~django.contrib.sites.managers."
"CurrentSiteManager` and pass a field name that doesn't exist, Django will "
"raise a ``ValueError``."
msgstr ""
":class:`~django.contrib.sites.managers.CurrentSiteManager` を使用し、存在しな"
"いフィールド名を渡した場合、Django は ``ValueError`` を発生させます。"

msgid ""
"Finally, note that you'll probably want to keep a normal (non-site-specific) "
"``Manager`` on your model, even if you use :class:`~django.contrib.sites."
"managers.CurrentSiteManager`. As explained in the :doc:`manager "
"documentation </topics/db/managers>`, if you define a manager manually, then "
"Django won't create the automatic ``objects = models.Manager()`` manager for "
"you. Also note that certain parts of Django -- namely, the Django admin site "
"and generic views -- use whichever manager is defined *first* in the model, "
"so if you want your admin site to have access to all objects (not just site-"
"specific ones), put ``objects = models.Manager()`` in your model, before you "
"define :class:`~django.contrib.sites.managers.CurrentSiteManager`."
msgstr ""
"最後に、 :class:`~django.contrib.sites.managers.CurrentSiteManager` を使用し"
"ても、モデルに通常の（サイト固有ではない） ``Manager`` を保持したい場合がある"
"ことに注意してください。 :doc:`マネージャのドキュメント </topics/db/"
"managers>` で説明されているように、マネージャを手動で定義すると、Djangoは自動"
"的な ``objects = models.Manager()`` マネージャを作成しません。また、Djangoの"
"特定の部分、特にDjango管理サイトとジェネリックビューは、モデル内で *最初に* "
"定義されたマネージャを使用するため、管理サイトが全てのオブジェクト（サイト固"
"有のものだけでなく）にアクセスできるようにするには、 :class:`~django.contrib."
"sites.managers.CurrentSiteManager` を定義する前に、モデルに ``objects = "
"models.Manager()`` を置いてください。"

msgid "Site middleware"
msgstr "Site ミドルウェア"

msgid "If you often use this pattern::"
msgstr "もしこのパターンをよく使うなら、:"

msgid ""
"To avoid repetitions, add :class:`django.contrib.sites.middleware."
"CurrentSiteMiddleware` to :setting:`MIDDLEWARE`. The middleware sets the "
"``site`` attribute on every request object, so you can use ``request.site`` "
"to get the current site."
msgstr ""
"繰り返しを避けるために、 :setting:`MIDDLEWARE` に :class:`django.contrib."
"sites.middleware.CurrentSiteMiddleware` を追加してください。このミドルウェア"
"は、リクエストオブジェクトのすべてに ``site`` 属性を設定するため、``request."
"site`` を使って現在のサイトを取得できます。"

msgid "How Django uses the sites framework"
msgstr "Django はどのように sites フレームワークを使うか"

msgid ""
"Although it's not required that you use the sites framework, it's strongly "
"encouraged, because Django takes advantage of it in a few places. Even if "
"your Django installation is powering only a single site, you should take the "
"two seconds to create the site object with your ``domain`` and ``name``, and "
"point to its ID in your :setting:`SITE_ID` setting."
msgstr ""
"sites フレームワークの利用は必須ではありませんが、Django はいくつかの場所でこ"
"れを利用しているので、強く推奨します。Django のインストールが 1 つのサイトだ"
"けであっても、2 秒かけて ``domain`` と ``name`` でサイトオブジェクトを作成"
"し、 :setting:`SITE_ID` 設定でその ID を指定してください。"

msgid "Here's how Django uses the sites framework:"
msgstr "Django は、sites フレームワークを次のように使用します:"

msgid ""
"In the :mod:`redirects framework <django.contrib.redirects>`, each redirect "
"object is associated with a particular site. When Django searches for a "
"redirect, it takes into account the current site."
msgstr ""
":mod:`redirects フレームワーク <django.contrib.redirects>` では、それぞれのリ"
"ダイレクトオブジェクトが特定のサイトに関連付けられています。Django がリダイレ"
"クトを検索する際には、現在のサイトも考慮されます。"

msgid ""
"In the :mod:`flatpages framework <django.contrib.flatpages>`, each flatpage "
"is associated with a particular site. When a flatpage is created, you "
"specify its :class:`~django.contrib.sites.models.Site`, and the :class:"
"`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` checks the "
"current site in retrieving flatpages to display."
msgstr ""
":mod:`flatpages フレームワーク <django.contrib.flatpages>` で、各フラットペー"
"ジは特定のサイトに関連付けられています。フラットページを作成するときには、そ"
"の :class:`~django.contrib.sites.models.Site` を指定し、 :class:`~django."
"contrib.flatpages.middleware.FlatpageFallbackMiddleware` は表示するフラット"
"ページを取得する際に現在のサイトをチェックします。"

msgid ""
"In the :mod:`syndication framework <django.contrib.syndication>`, the "
"templates for ``title`` and ``description`` automatically have access to a "
"variable ``{{ site }}``, which is the :class:`~django.contrib.sites.models."
"Site` object representing the current site. Also, the hook for providing "
"item URLs will use the ``domain`` from the current :class:`~django.contrib."
"sites.models.Site` object if you don't specify a fully-qualified domain."
msgstr ""
":mod:`syndication フレームワーク <django.contrib.syndication>` では、"
"``title`` と ``description`` のテンプレートは、現在のサイトを表す :class:"
"`~django.contrib.sites.models.Site` オブジェクトを表す変数 ``{{ site }}`` に"
"自動的にアクセスできます。また、アイテムの URL を提供するためのフックは、完全"
"修飾ドメインを指定しない場合、現在の :class:`~django.contrib.sites.models."
"Site` オブジェクトの ``domain`` を使用します。"

msgid ""
"In the :mod:`authentication framework <django.contrib.auth>`, :class:`django."
"contrib.auth.views.LoginView` passes the current :class:`~django.contrib."
"sites.models.Site` name to the template as ``{{ site_name }}``."
msgstr ""
":mod:`認証フレームワーク <django.contrib.auth>` では、 :class:`django."
"contrib.auth.views.LoginView` は現在の :class:`~django.contrib.sites.models."
"Site` 名をテンプレートに ``{{ site_name }}`` として渡します。"

msgid ""
"The shortcut view (``django.contrib.contenttypes.views.shortcut``) uses the "
"domain of the current :class:`~django.contrib.sites.models.Site` object when "
"calculating an object's URL."
msgstr ""
"ショートカットビュー(``django.contrib.contenttypes.views.shortcut``) は、オブ"
"ジェクトのURLを計算する際、現在の :class:`~django.contrib.sites.models.Site` "
"オブジェクトのドメインを使用します。"

msgid ""
"In the admin framework, the \"view on site\" link uses the current :class:"
"`~django.contrib.sites.models.Site` to work out the domain for the site that "
"it will redirect to."
msgstr ""
"admin フレームワークでは、 \"view on site\" リンクは、リダイレクト先のサイト"
"のドメインを求めるために、現在の :class:`~django.contrib.sites.models.Site` "
"を使用します。"

msgid "``RequestSite`` objects"
msgstr "``RequestSite`` オブジェクト"

msgid ""
"Some :doc:`django.contrib </ref/contrib/index>` applications take advantage "
"of the sites framework but are architected in a way that doesn't *require* "
"the sites framework to be installed in your database. (Some people don't "
"want to, or just aren't *able* to install the extra database table that the "
"sites framework requires.) For those cases, the framework provides a :class:"
"`django.contrib.sites.requests.RequestSite` class, which can be used as a "
"fallback when the database-backed sites framework is not available."
msgstr ""
"一部の :doc:`django.contrib </ref/contrib/index>` アプリケーションはサイトフ"
"レームワークを活用していますが、サイトフレームワークをデータベースにインス"
"トールすることを *必要としない* ように設計されています。(サイトフレームワーク"
"が要求する追加のデータベーステーブルをインストールしたくない、またはインス"
"トールできない人もいます。) そのような場合のために、フレームワークは :class:"
"`django.contrib.sites.requests.RequestSite` クラスを提供しており、データベー"
"スをバックエンドとするサイトフレームワークが利用できないときにフォールバック"
"として使用できます。"

msgid ""
"A class that shares the primary interface of :class:`~django.contrib.sites."
"models.Site` (i.e., it has ``domain`` and ``name`` attributes) but gets its "
"data from a Django :class:`~django.http.HttpRequest` object rather than from "
"a database."
msgstr ""
":class:`~django.contrib.sites.models.Site` の主要なインターフェイス(つまり、"
"``domain`` と ``name`` 属性を持つ)を共有するクラスですが、データをデータベー"
"スではなく Django の :class:`~django.http.HttpRequest` オブジェクトから取得し"
"ます。"

msgid ""
"Sets the ``name`` and ``domain`` attributes to the value of :meth:`~django."
"http.HttpRequest.get_host`."
msgstr ""
"``name`` および ``domain`` 属性を :meth:`~django.http.HttpRequest.get_host` "
"の値に設定します。"

msgid ""
"A :class:`~django.contrib.sites.requests.RequestSite` object has a similar "
"interface to a normal :class:`~django.contrib.sites.models.Site` object, "
"except its :meth:`~django.contrib.sites.requests.RequestSite.__init__()` "
"method takes an :class:`~django.http.HttpRequest` object. It's able to "
"deduce the ``domain`` and ``name`` by looking at the request's domain. It "
"has ``save()`` and ``delete()`` methods to match the interface of :class:"
"`~django.contrib.sites.models.Site`, but the methods raise :exc:"
"`NotImplementedError`."
msgstr ""
":class:`~django.contrib.sites.requests.RequestSite` オブジェクトは、通常の :"
"class:`~django.contrib.sites.models.Site` オブジェクトに似たインターフェース"
"を持っていますが、その :meth:`~django.contrib.sites.requests.RequestSite."
"__init__()` メソッドは :class:`~django.http.HttpRequest` オブジェクトを引数に"
"取ります。リクエストのドメインを見て、``domain`` と ``name`` を推測できま"
"す。 :class:`~django.contrib.sites.models.Site` のインターフェースに合わせた "
"``save()`` および ``delete()`` メソッドを持っていますが、これらのメソッドは :"
"exc:`NotImplementedError` を発生させます。"

msgid "``get_current_site`` shortcut"
msgstr "``get_current_site`` ショートカット"

msgid ""
"Finally, to avoid repetitive fallback code, the framework provides a :func:"
"`django.contrib.sites.shortcuts.get_current_site` function."
msgstr ""
"最後に、繰り返しのフォールバックコードを避けるために、フレームワークは :func:"
"`django.contrib.sites.shortcuts.get_current_site` 関数を提供しています。"

msgid ""
"A function that checks if ``django.contrib.sites`` is installed and returns "
"either the current :class:`~django.contrib.sites.models.Site` object or a :"
"class:`~django.contrib.sites.requests.RequestSite` object based on the "
"request. It looks up the current site based on :meth:`request.get_host() "
"<django.http.HttpRequest.get_host>` if the :setting:`SITE_ID` setting is not "
"defined."
msgstr ""
"``django.contrib.sites`` がインストールされているかをチェックし、リクエストに"
"基づいて現在の :class:`~django.contrib.sites.models.Site` オブジェクトまた"
"は :class:`~django.contrib.sites.requests.RequestSite` オブジェクトのどちらか"
"を返す関数です。 :setting:`SITE_ID` 設定が定義されていない場合、 :meth:"
"`request.get_host() <django.http.HttpRequest.get_host>` を使用して現在のサイ"
"トを検索します。"

msgid ""
"Both a domain and a port may be returned by :meth:`request.get_host() "
"<django.http.HttpRequest.get_host>` when the Host header has a port "
"explicitly specified, e.g. ``example.com:80``. In such cases, if the lookup "
"fails because the host does not match a record in the database, the port is "
"stripped and the lookup is retried with the domain part only. This does not "
"apply to :class:`~django.contrib.sites.requests.RequestSite` which will "
"always use the unmodified host."
msgstr ""
"Hostヘッダーにポートが明示的に指定されている場合 (例: ``example.com:80``)、 :"
"meth:`request.get_host() <django.http.HttpRequest.get_host>` によってドメイン"
"とポートの両方が返されることがあります。そのような場合、ホストがデータベース"
"のレコードと一致しないために検索が失敗したら、ポートは取り除かれ、ドメイン部"
"分のみで検索が再試行されます。この処理は :class:`~django.contrib.sites."
"requests.RequestSite` には適用されず、常に変更されていないホストが使用されま"
"す。"

msgid "The ``staticfiles`` app"
msgstr "``staticfiles`` アプリ"

msgid ""
"``django.contrib.staticfiles`` collects static files from each of your "
"applications (and any other places you specify) into a single location that "
"can easily be served in production."
msgstr ""
"``django.contrib.staticfiles`` は、各アプリケーション（と、あらかじめ指定した"
"他の場所）から静的ファイルを収集し、本番環境で簡単に提供できるように一か所に"
"まとめます。"

msgid ""
"For an introduction to the static files app and some usage examples, see :"
"doc:`/howto/static-files/index`. For guidelines on deploying static files, "
"see :doc:`/howto/static-files/deployment`."
msgstr ""
"静的ファイルアプリの導入と活用例については、 :doc:`/howto/static-files/"
"index` を参照してください。静的ファイルのデプロイに関するガイドラインについて"
"は、 :doc:`/howto/static-files/deployment` を参照してください。"

msgid ""
"See :ref:`staticfiles settings <settings-staticfiles>` for details on the "
"following settings:"
msgstr ""
"次の設定に関する詳細については、 :ref:`静的ファイルの設定 <settings-"
"staticfiles>` を参照してください。"

msgid ":setting:`STORAGES`"
msgstr ":setting:`STORAGES`"

msgid ":setting:`STATIC_ROOT`"
msgstr ":setting:`STATIC_ROOT`"

msgid ":setting:`STATIC_URL`"
msgstr ":setting:`STATIC_URL`"

msgid ":setting:`STATICFILES_DIRS`"
msgstr ":setting:`STATICFILES_DIRS`"

msgid ":setting:`STATICFILES_STORAGE`"
msgstr ":setting:`STATICFILES_STORAGE`"

msgid ":setting:`STATICFILES_FINDERS`"
msgstr ":setting:`STATICFILES_FINDERS`"

msgid "Management Commands"
msgstr "管理コマンド"

msgid "``django.contrib.staticfiles`` exposes three management commands."
msgstr "``django.contrib.staticfiles`` は3つの管理コマンドを提供します。"

msgid "``collectstatic``"
msgstr "``collectstatic``"

msgid "Collects the static files into :setting:`STATIC_ROOT`."
msgstr "静的ファイルを :setting:`STATIC_ROOT` に収集します。"

msgid ""
"Duplicate file names are by default resolved in a similar way to how "
"template resolution works: the file that is first found in one of the "
"specified locations will be used. If you're confused, the :djadmin:"
"`findstatic` command can help show you which files are found."
msgstr ""
"デフォルトでは、重複するファイル名はテンプレートの解決方法と同様に処理されま"
"す。すなわち、指定された場所のいずれかで最初に見つかったファイルが使用されま"
"す。どのファイルが反映されたかわからない場合は、 :djadmin:`findstatic` コマン"
"ドを使用して、どのファイルが適用されたかを確認できます。"

msgid ""
"On subsequent ``collectstatic`` runs (if ``STATIC_ROOT`` isn't empty), files "
"are copied only if they have a modified timestamp greater than the timestamp "
"of the file in ``STATIC_ROOT``. Therefore if you remove an application from :"
"setting:`INSTALLED_APPS`, it's a good idea to use the :option:`collectstatic "
"--clear` option in order to remove stale static files."
msgstr ""
"その後、再度 ``collectstatic`` を実行すると、（ ``STATIC_ROOT`` が空でない限"
"り）収集元のファイルは、そのタイムスタンプが ``STATIC_ROOT`` にあるファイルの"
"タイムスタンプよりも後の日時であるときのみコピーされます。そのため、 :"
"setting:`INSTALLED_APPS` からアプリケーションを削除するときは、 :option:"
"`collectstatic --clear` を実行することで古い静的ファイルを削除すると良いで"
"しょう。"

msgid ""
"Files are searched by using the :setting:`enabled finders "
"<STATICFILES_FINDERS>`. The default is to look in all locations defined in :"
"setting:`STATICFILES_DIRS` and in the ``'static'`` directory of apps "
"specified by the :setting:`INSTALLED_APPS` setting."
msgstr ""
"ファイルの検索には、 :setting:`有効化された検索システム "
"<STATICFILES_FINDERS>` が使用されます。デフォルトでは、 :setting:"
"`STATICFILES_DIRS` で定義されたすべての場所と、 :setting:`INSTALLED_APPS` 設"
"定で指定されたアプリケーションの ``'static'`` ディレクトリを参照します。"

msgid ""
"The :djadmin:`collectstatic` management command calls the :meth:`~django."
"contrib.staticfiles.storage.StaticFilesStorage.post_process` method of the "
"``staticfiles`` storage backend from :setting:`STORAGES` after each run and "
"passes a list of paths that have been found by the management command. It "
"also receives all command line options of :djadmin:`collectstatic`. This is "
"used by the :class:`~django.contrib.staticfiles.storage."
"ManifestStaticFilesStorage` by default."
msgstr ""
":djadmin:`collectstatic` コマンドは、実行するたび :setting:`STORAGES` から "
"``staticfiles`` ストレージバックエンドの :meth:`~django.contrib.staticfiles."
"storage.StaticFilesStorage.post_process` メソッドを呼び出し、この管理コマンド"
"によって見つかったファイルパスのリストを返します。同時に、 :djadmin:"
"`collectstatic` のすべてのコマンドラインオプションを受け取ります。このオプ"
"ションは、デフォルトでは :class:`~django.contrib.staticfiles.storage."
"ManifestStaticFilesStorage` に渡されます。"

msgid ""
"By default, collected files receive permissions from :setting:"
"`FILE_UPLOAD_PERMISSIONS` and collected directories receive permissions "
"from :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS`. If you would like "
"different permissions for these files and/or directories, you can subclass "
"either of the :ref:`static files storage classes <staticfiles-storages>` and "
"specify the ``file_permissions_mode`` and/or ``directory_permissions_mode`` "
"parameters, respectively. For example::"
msgstr ""
"デフォルトでは、収集されたファイルは :setting:`FILE_UPLOAD_PERMISSIONS` か"
"ら、収集されたディレクトリは :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS` か"
"らアクセス許可を受け取ります。これらのファイルまたはディレクトリに異なるアク"
"セス許可を設定したい場合は、:ref:`静的ファイルストレージのクラス "
"<staticfiles-storages>` のいずれかをサブクラス化し、それぞれ "
"``file_permissions_mode`` および/または ``directory_permissions_mode`` パラ"
"メータを指定します。以下に例を示します。"

msgid ""
"Then set the ``staticfiles`` storage backend in :setting:`STORAGES` setting "
"to ``'path.to.MyStaticFilesStorage'``."
msgstr ""
"次に、 :setting:`STORAGES` 設定で ``staticfiles`` ストレージバックエンドを "
"``'path.to.MyStaticFilesStorage'`` と指定してください。"

msgid "Some commonly used options are:"
msgstr "この管理コマンドでよく使われるオプションをいくつか示します。"

msgid "Do NOT prompt the user for input of any kind."
msgstr "ユーザーにいかなる入力も要求せずに処理を実行します。"

msgid ""
"Ignore files, directories, or paths matching this glob-style pattern. Use "
"multiple times to ignore more. When specifying a path, always use forward "
"slashes, even on Windows."
msgstr ""
"指定した glob スタイルのパターンに一致するファイル、ディレクトリ、またはパス"
"からの収集を行わないようにします。対象外のパターンが複数ある場合は、その数だ"
"け指定してください。また、パスを指定するとき、Windowsでも常にスラッシュを使用"
"してください。"

msgid "Do everything except modify the filesystem."
msgstr "ファイルシステムを変更すること以外の全てを行います。"

msgid ""
"Clear the existing files before trying to copy or link the original file."
msgstr "既存のファイルを削除してから、元のファイルをコピーまたはリンクします。"

msgid "Create a symbolic link to each file instead of copying."
msgstr "各ファイルをコピーする代わりに、シンボリックリンクを作成します。"

msgid ""
"Don't call the :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage."
"post_process` method of the configured ``staticfiles`` storage backend from :"
"setting:`STORAGES`."
msgstr ""
":setting:`STORAGES` に設定された ``staticfiles`` ストレージバックエンドの :"
"meth:`~django.contrib.staticfiles.storage.StaticFilesStorage.post_process` メ"
"ソッドを呼び出さないようにします。"

msgid ""
"Don't ignore the common private glob-style patterns ``'CVS'``, ``'.*'`` and "
"``'*~'``."
msgstr ""
"一般的なプライベート glob スタイルのパターンである ``'CVS'`` 、 ``'.*'`` およ"
"び ``'*~'`` を収集対象外としないようにします。"

msgid "For a full list of options, refer to the commands own help by running:"
msgstr ""
"すべてのオプションのリストは、次のコマンドを実行してコマンドのヘルプから参照"
"してください。"

msgid "Customizing the ignored pattern list"
msgstr "無視パターンリストをカスタマイズする"

msgid ""
"The default ignored pattern list, ``['CVS', '.*', '*~']``, can be customized "
"in a more persistent way than providing the ``--ignore`` command option at "
"each ``collectstatic`` invocation. Provide a custom :class:`~django.apps."
"AppConfig` class, override the ``ignore_patterns`` attribute of this class "
"and replace ``'django.contrib.staticfiles'`` with that class path in your :"
"setting:`INSTALLED_APPS` setting::"
msgstr ""
"デフォルトの無視パターンリストは ``['CVS', '.*', '*~']`` ですが、これは "
"``collectstatic`` の呼び出しのたびに ``--ignore`` オプションを指定することな"
"く、より永続的な方法でカスタマイズできます。以下のように、 "
"``ignore_patterns`` 属性をオーバーライドしたカスタムの :class:`~django.apps."
"AppConfig` クラスを実装し、 :setting:`INSTALLED_APPS` 設定で ``'django."
"contrib.staticfiles'`` をそのカスタムクラスのパスに置き換えてください。"

msgid "``findstatic``"
msgstr "``findstatic``"

msgid "Searches for one or more relative paths with the enabled finders."
msgstr "有効な検索機能を使用して、1つ以上の相対パスを検索します。"

msgid ""
"By default, all matching locations are found. To only return the first match "
"for each relative path, use the ``--first`` option:"
msgstr ""
"デフォルトでは、一致するすべてのファイルのパスが表示されます。最初に見つかっ"
"たファイルの相対パスだけを返すには、 ``--first`` オプションを使用してくださ"
"い。"

msgid ""
"This is a debugging aid; it'll show you exactly which static file will be "
"collected for a given path."
msgstr ""
"指定したパスに対して収集された静的ファイルが正確に表示されるので、デバッグの"
"助けになります。"

msgid ""
"By setting the ``--verbosity`` flag to 0, you can suppress the extra output "
"and just get the path names:"
msgstr ""
"``--verbosity`` フラグを 0 に設定することで、追加の出力を抑制し、パス名のみを"
"取得できます。"

msgid ""
"On the other hand, by setting the ``--verbosity`` flag to 2, you can get all "
"the directories which were searched:"
msgstr ""
"一方、 ``--verbosity`` フラグを2に設定することで、検索されたすべてのディレク"
"トリを取得することもできます。"

msgid "``runserver``"
msgstr "``runserver``"

msgid ""
"Overrides the core :djadmin:`runserver` command if the ``staticfiles`` app "
"is :setting:`installed<INSTALLED_APPS>` and adds automatic serving of static "
"files. File serving doesn't run through :setting:`MIDDLEWARE`."
msgstr ""
"``staticfiles`` アプリケーションが :setting:`インストール<INSTALLED_APPS>` さ"
"れている場合、 :djadmin:`runserver` コマンドを上書きし、静的ファイルの自動"
"サービスを追加します。ファイルのサービスは :setting:`MIDDLEWARE` を経由しませ"
"ん。"

msgid "The command adds these options:"
msgstr "このコマンドには、以下のオプションが追加されています。"

msgid ""
"Use the ``--nostatic`` option to disable serving of static files with the :"
"doc:`staticfiles </ref/contrib/staticfiles>` app entirely. This option is "
"only available if the :doc:`staticfiles </ref/contrib/staticfiles>` app is "
"in your project's :setting:`INSTALLED_APPS` setting."
msgstr ""
"``--nostatic`` オプションを使用すると、 :doc:`staticfiles </ref/contrib/"
"staticfiles>` アプリケーションによる静的ファイルの配信を完全に無効にします。"
"このオプションは、 :setting:`INSTALLED_APPS` 設定に :doc:`staticfiles </ref/"
"contrib/staticfiles>` アプリケーションが含まれている場合にのみ利用可能です。"

msgid "Example usage:"
msgstr "使用例:"

msgid ""
"Use the ``--insecure`` option to force serving of static files with the :doc:"
"`staticfiles </ref/contrib/staticfiles>` app even if the :setting:`DEBUG` "
"setting is ``False``. By using this you acknowledge the fact that it's "
"**grossly inefficient** and probably **insecure**. This is only intended for "
"local development, should **never be used in production** and is only "
"available if the :doc:`staticfiles </ref/contrib/staticfiles>` app is in "
"your project's :setting:`INSTALLED_APPS` setting."
msgstr ""
"``--insecure`` オプションを使用すると、 :setting:`DEBUG` 設定が ``False`` の"
"場合でも、静的ファイルを強制的に :doc:`staticfiles </ref/contrib/"
"staticfiles>` アプリで配信します。これを使用する場合、 **非常に非効率的** "
"で、おそらく **安全ではない** ことを受け入れる必要があります。これはローカル"
"開発のみを目的としているので、 **本番環境では使用しないでください** 。ま"
"た、 :doc:`staticfiles </ref/contrib/staticfiles>` アプリがプロジェクトの :"
"setting:`INSTALLED_APPS` 設定に含まれている場合のみ利用可能です。"

msgid ""
"``--insecure`` doesn't work with :class:`~.storage."
"ManifestStaticFilesStorage`."
msgstr ""
"``--insecure`` オプションは :class:`~.storage.ManifestStaticFilesStorage` と"
"同時に使用することはできません。"

msgid "Storages"
msgstr "ストレージ"

msgid "``StaticFilesStorage``"
msgstr "``StaticFilesStorage``"

msgid ""
"A subclass of the :class:`~django.core.files.storage.FileSystemStorage` "
"storage backend that uses the :setting:`STATIC_ROOT` setting as the base "
"file system location and the :setting:`STATIC_URL` setting respectively as "
"the base URL."
msgstr ""
":class:`~django.core.files.storage.FileSystemStorage` ストレージバックエンド"
"のサブクラスです。 :setting:`STATIC_ROOT` 設定を基本ファイルシステムの場所と"
"して、:setting:`STATIC_URL` 設定を基本URLとして使用します。"

msgid ""
"If this method is defined on a storage, it's called by the :djadmin:"
"`collectstatic` management command after each run and gets passed the local "
"storages and paths of found files as a dictionary, as well as the command "
"line options. It yields tuples of three values: ``original_path, "
"processed_path, processed``. The path values are strings and ``processed`` "
"is a boolean indicating whether or not the value was post-processed, or an "
"exception if post-processing failed."
msgstr ""
"このメソッドがストレージ上で定義されている場合は、 :djadmin:`collectstatic` "
"管理コマンドが実行されるたびに呼び出され、見つかったファイルのローカルスト"
"レージとパス、およびコマンドラインオプションが辞書として渡されます。この処理"
"は ``original_path`` 、 ``processed_path`` 、 ``processed`` の3つの値のタプル"
"を生成します。パスの値は文字列であり、 ``processed`` は値が事後処理されたかど"
"うかを示すブール値であり、事後処理が失敗した場合は例外が格納されます。"

msgid ""
"The :class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` "
"uses this behind the scenes to replace the paths with their hashed "
"counterparts and update the cache appropriately."
msgstr ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` は、"
"これを裏で使用してパスをハッシュ化された対応するパスに置き換え、キャッシュを"
"適切に更新します。"

msgid "``ManifestStaticFilesStorage``"
msgstr "``ManifestStaticFilesStorage``"

msgid ""
"A subclass of the :class:`~django.contrib.staticfiles.storage."
"StaticFilesStorage` storage backend which stores the file names it handles "
"by appending the MD5 hash of the file's content to the filename. For "
"example, the file ``css/styles.css`` would also be saved as ``css/"
"styles.55e7cbb9ba48.css``."
msgstr ""
":class:`~django.contrib.staticfiles.storage.StaticFilesStorage` のストレージ"
"バックエンドのサブクラスです。ファイル名を処理する際に、ファイルの内容のMD5"
"ハッシュをファイル名に追加して保存します。たとえば、ファイル ``css/styles."
"css`` は ``css/styles.55e7cbb9ba48.css`` として保存されます。"

msgid ""
"The purpose of this storage is to keep serving the old files in case some "
"pages still refer to those files, e.g. because they are cached by you or a "
"3rd party proxy server. Additionally, it's very helpful if you want to apply "
"`far future Expires headers`_ to the deployed files to speed up the load "
"time for subsequent page visits."
msgstr ""
"このストレージの目的は、古いファイルを提供し続けることです。なぜなら、古い"
"ファイルはあなたや第三者のプロキシサーバによってキャッシュされており、いくつ"
"かのページがまだそれらのファイルを参照することがあるからです。また、展開され"
"たファイルに `far future Expires headers`_ を適用して、次回のページ訪問の読み"
"込み時間を高速化する場合にも非常に役立ちます。"

msgid ""
"The storage backend automatically replaces the paths found in the saved "
"files matching other saved files with the path of the cached copy (using "
"the :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage."
"post_process` method). The regular expressions used to find those paths "
"(``django.contrib.staticfiles.storage.HashedFilesMixin.patterns``) cover:"
msgstr ""
"保存されたファイル内のパスが他の保存されたファイルと一致する場合、ストレージ"
"バックエンドは自動的にキャッシュされたコピーのパスでそれらのパスを置き換えま"
"す（このとき、 :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage."
"post_process` メソッドを使用）。これらのパスを検索するために使用される正規表"
"現（ ``django.contrib.staticfiles.storage.HashedFilesMixin.patterns`` ）は以"
"下に対応しています。"

msgid ""
"The `@import`_ rule and `url()`_ statement of `Cascading Style Sheets`_."
msgstr ""
"`@import`_ ルールと `url()`_ ステートメントの `Cascading Style Sheets`_"

msgid "`Source map`_ comments in CSS and JavaScript files."
msgstr "CSS および JavaScript ファイル内の `Source map`_ コメント"

msgid ""
"Subclass ``ManifestStaticFilesStorage`` and set the "
"``support_js_module_import_aggregation`` attribute to ``True``, if you want "
"to use the experimental regular expressions to cover:"
msgstr ""
"``ManifestStaticFilesStorage`` のサブクラスを作成し、 "
"``support_js_module_import_aggregation`` 属性を ``True`` に設定すると、実験的"
"な正規表現を使用して以下にも対応できます。"

msgid "The `modules import`_ in JavaScript."
msgstr "JavaScript の `modules import`_"

msgid "The `modules aggregation`_ in JavaScript."
msgstr "JavaScriptの `modules aggregation`_"

msgid "For example, the ``'css/styles.css'`` file with this content:"
msgstr "たとえば、以下のような ``'css/styles.css'`` を定義します。"

msgid ""
"...would be replaced by calling the :meth:`~django.core.files.storage."
"Storage.url` method of the ``ManifestStaticFilesStorage`` storage backend, "
"ultimately saving a ``'css/styles.55e7cbb9ba48.css'`` file with the "
"following content:"
msgstr ""
"...これは ``ManifestStaticFilesStorage`` ストレージバックエンドの :meth:"
"`~django.core.files.storage.Storage.url` メソッドを呼び出すことで置換され、最"
"終的に ``'css/styles.55e7cbb9ba48.css'`` というファイルが以下の内容で保存され"
"ます。"

msgid "Usage of the ``integrity`` HTML attribute with local files"
msgstr "ローカルファイルに対する ``integrity`` HTML属性の使用方法"

msgid ""
"When using the optional ``integrity`` attribute within tags like "
"``<script>`` or ``<link>``, its value should be calculated based on the "
"files as they are served, not as stored in the filesystem. This is "
"particularly important because depending on how static files are collected, "
"their checksum may have changed (for example when using :djadmin:"
"`collectstatic`). At the moment, there is no out-of-the-box tooling "
"available for this."
msgstr ""
"``<script>`` や ``<link>`` のようなタグ内で任意の ``integrity`` 属性を使用す"
"る場合、その値はファイルシステムに保存されている状態ではなく、提供されるファ"
"イルに基づいて計算されるべきです。これは、静的ファイルがどのように収集される"
"かによって、そのチェックサムが変更され得るため、特に重要です（例えば、:"
"djadmin:`collectstatic` を使用した場合）。現時点では、このための既製のツール"
"は用意されていません。"

msgid ""
"You can change the location of the manifest file by using a custom "
"``ManifestStaticFilesStorage`` subclass that sets the ``manifest_storage`` "
"argument. For example::"
msgstr ""
"マニフェストファイルの場所は、``manifest_storage`` 引数を設定するカスタムの "
"``ManifestStaticFilesStorage`` サブクラスを使用することで変更できます。たとえ"
"ば:"

msgid "References in comments"
msgstr "コメント内の参照"

msgid ""
"``ManifestStaticFilesStorage`` doesn't ignore paths in statements that are "
"commented out. This :ticket:`may crash on the nonexistent paths <21080>`. "
"You should check and eventually strip comments."
msgstr ""
"``ManifestStaticFilesStorage`` は、コメントアウトされた文内のパスを無視しませ"
"ん。これにより、存在しないパスで :ticket:`クラッシュする可能性があります "
"<21080>` 。コメントをチェックし、必要に応じて削除するべきです。"

msgid ""
"Experimental optional support for finding paths to JavaScript modules in "
"``import`` and ``export`` statements was added."
msgstr ""
"``import`` と ``export`` ステートメント内でJavaScriptモジュールへのパスを見つ"
"けるための実験的なオプションサポートが追加されました。"

msgid ""
"This attribute provides a single hash that changes whenever a file in the "
"manifest changes. This can be useful to communicate to SPAs that the assets "
"on the server have changed (due to a new deployment)."
msgstr ""
"この属性は、マニフェスト内のファイルが変更されるたびに変わる単一のハッシュを"
"提供します。これは、サーバー上のアセットが変更されたこと（新しいデプロイメン"
"トが原因）をSPAに通知するのに役立つことがあります。"

msgid ""
"Since static files might reference other static files that need to have "
"their paths replaced, multiple passes of replacing paths may be needed until "
"the file hashes converge. To prevent an infinite loop due to hashes not "
"converging (for example, if ``'foo.css'`` references ``'bar.css'`` which "
"references ``'foo.css'``) there is a maximum number of passes before post-"
"processing is abandoned. In cases with a large number of references, a "
"higher number of passes might be needed. Increase the maximum number of "
"passes by subclassing ``ManifestStaticFilesStorage`` and setting the "
"``max_post_process_passes`` attribute. It defaults to 5."
msgstr ""
"静的ファイルは他の静的ファイルを参照することがあるため、パスを置き換える処理"
"を複数回行う必要があります。ファイルのハッシュが収束するまでこの処理を繰り返"
"します。無限ループを防ぐため(``'foo.css'`` が ``'bar.css'`` を参照し、その "
"``'bar.css'`` が再び ``'foo.css'`` を参照する例のように、ハッシュが収束しない"
"場合)、ポストプロセッシングを中止する前に最大で何回のパスが可能かを設定してい"
"ます。多くの参照があるケースでは、より多くのパスが必要になることがあります。"
"最大パス数を増やすには、``ManifestStaticFilesStorage`` をサブクラス化し、"
"``max_post_process_passes`` 属性を設定します。デフォルトは5です。"

msgid ""
"To enable the ``ManifestStaticFilesStorage`` you have to make sure the "
"following requirements are met:"
msgstr ""
"``ManifestStaticFilesStorage`` を有効にするには、以下の要件を満たしていること"
"を確認してください:"

msgid ""
"the ``staticfiles`` storage backend in :setting:`STORAGES` setting is set to "
"``'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'``"
msgstr ""
":setting:`STORAGES` 設定の ``staticfiles`` ストレージバックエンドが "
"``'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'`` に設定さ"
"れていること"

msgid "the :setting:`DEBUG` setting is set to ``False``"
msgstr ":setting:`DEBUG` 設定が ``False`` に設定されていること"

msgid ""
"you've collected all your static files by using the :djadmin:`collectstatic` "
"management command"
msgstr ""
":djadmin:`collectstatic` 管理コマンドを使用して、全ての静的ファイルを収集した"
"こと"

msgid ""
"Since creating the MD5 hash can be a performance burden to your website "
"during runtime, ``staticfiles`` will automatically store the mapping with "
"hashed names for all processed files in a file called ``staticfiles.json``. "
"This happens once when you run the :djadmin:`collectstatic` management "
"command."
msgstr ""
"MD5ハッシュを作成することは、実行時にウェブサイトにとってパフォーマンス上の負"
"担となる可能性があるため、 ``staticfiles`` は自動的に ``staticfiles.json`` と"
"いうファイルに、処理されたすべてのファイルのハッシュ名とマッピングを保存しま"
"す。これは :djadmin:`collectstatic` 管理コマンドを実行したときに一度だけ起こ"
"ります。"

msgid ""
"If a file isn't found in the ``staticfiles.json`` manifest at runtime, a "
"``ValueError`` is raised. This behavior can be disabled by subclassing "
"``ManifestStaticFilesStorage`` and setting the ``manifest_strict`` attribute "
"to ``False`` -- nonexistent paths will remain unchanged."
msgstr ""
"実行時に ``staticfiles.json`` マニフェストでファイルが見つからない場合、"
"``ValueError`` が発生します。この動作は、``ManifestStaticFilesStorage`` をサ"
"ブクラス化し、``manifest_strict`` 属性を ``False`` に設定することで無効にでき"
"ます(存在しないパスはそのままになります)。"

msgid ""
"Due to the requirement of running :djadmin:`collectstatic`, this storage "
"typically shouldn't be used when running tests as ``collectstatic`` isn't "
"run as part of the normal test setup. During testing, ensure that "
"``staticfiles`` storage backend in the :setting:`STORAGES` setting is set to "
"something else like ``'django.contrib.staticfiles.storage."
"StaticFilesStorage'`` (the default)."
msgstr ""
":djadmin:`collectstatic` を実行する必要があるため、このストレージは通常、テス"
"トの実行時には使用しないでください。テスト中は、 :setting:`STORAGES` 設定にあ"
"る ``staticfiles`` ストレージバックエンドが ``'django.contrib.staticfiles."
"storage.StaticFilesStorage'`` (デフォルト) のように他のものに設定されているこ"
"とを確認してください。"

msgid ""
"The method that is used when creating the hashed name of a file. Needs to "
"return a hash for the given file name and content. By default it calculates "
"a MD5 hash from the content's chunks as mentioned above. Feel free to "
"override this method to use your own hashing algorithm."
msgstr ""
"ファイルのハッシュ化された名前を作成する際に使用されるメソッドです。与えられ"
"たファイル名と内容に対するハッシュを返す必要があります。デフォルトでは、上述"
"のように、内容のチャンクからMD5ハッシュを計算します。このメソッドをオーバーラ"
"イドして、独自のハッシュアルゴリズムを使用することもできます。"

msgid "``ManifestFilesMixin``"
msgstr "``ManifestFilesMixin``"

msgid ""
"Use this mixin with a custom storage to append the MD5 hash of the file's "
"content to the filename as :class:`~storage.ManifestStaticFilesStorage` does."
msgstr ""
"カスタムストレージでこのミックスインを使用すると、 :class:`~storage."
"ManifestStaticFilesStorage` が行うように、ファイルの内容の MD5 ハッシュをファ"
"イル名に追加します。"

msgid "Finders Module"
msgstr "ファインダー・モジュール"

msgid ""
"``staticfiles`` finders has a ``searched_locations`` attribute which is a "
"list of directory paths in which the finders searched. Example usage::"
msgstr ""
"``staticfiles`` ファインダーには、ファインダーが検索したディレクトリパスのリ"
"ストである ``searched_locations`` 属性があります。使用例:"

msgid "Other Helpers"
msgstr "その他のヘルパー"

msgid ""
"There are a few other helpers outside of the :mod:`staticfiles <django."
"contrib.staticfiles>` app to work with static files:"
msgstr ""
":mod:`staticfiles <django.contrib.staticfiles>` アプリ以外にも、静的ファイル"
"を扱うためのいくつかの他のヘルパーがあります。"

msgid ""
"The :func:`django.template.context_processors.static` context processor "
"which adds :setting:`STATIC_URL` to every template context rendered with :"
"class:`~django.template.RequestContext` contexts."
msgstr ""
":func:`django.template.context_processors.static` コンテキストプロセッサ"
"は、 :class:`~django.template.RequestContext` コンテキストでレンダリングされ"
"たすべてのテンプレートコンテキストに :setting:`STATIC_URL` を追加します。"

msgid ""
"The builtin template tag :ttag:`static` which takes a path and urljoins it "
"with the static prefix :setting:`STATIC_URL`. If ``django.contrib."
"staticfiles`` is installed, the tag uses the ``url()`` method of the "
"``staticfiles`` storage backend from :setting:`STORAGES` instead."
msgstr ""
"組み込みのテンプレートタグ :ttag:`static` はパスを受け取り、静的なプレフィッ"
"クス :setting:`STATIC_URL` と urljoin します。もし ``django.contrib."
"staticfiles`` がインストールされていれば、代わりに :setting:`STORAGES` にあ"
"る ``staticfiles`` ストレージバックエンドの ``url()`` メソッドを使用します。"

msgid ""
"The builtin template tag :ttag:`get_static_prefix` which populates a "
"template variable with the static prefix :setting:`STATIC_URL` to be used as "
"a variable or directly."
msgstr ""
"組み込みのテンプレートタグ :ttag:`get_static_prefix` は、テンプレート変数に静"
"的プレフィックス :setting:`STATIC_URL` を代入し、変数として、または直接使用し"
"ます。"

msgid ""
"The similar template tag :ttag:`get_media_prefix` which works like :ttag:"
"`get_static_prefix` but uses :setting:`MEDIA_URL`."
msgstr ""
"同様のテンプレートタグ :ttag:`get_media_prefix` は :ttag:`get_static_prefix` "
"のように動作しますが、 :setting:`MEDIA_URL` を使用します。"

msgid ""
"The ``staticfiles`` key in :data:`django.core.files.storage.storages` "
"contains a ready-to-use instance of the staticfiles storage backend."
msgstr ""
"``staticfiles`` キーは :data:`django.core.files.storage.storages` に含まれて"
"おり、 staticfiles ストレージバックエンドの使用準備が整ったインスタンスが格納"
"されています。"

msgid "Static file development view"
msgstr "静的ファイル開発ビュー"

msgid ""
"The static files tools are mostly designed to help with getting static files "
"successfully deployed into production. This usually means a separate, "
"dedicated static file server, which is a lot of overhead to mess with when "
"developing locally. Thus, the ``staticfiles`` app ships with a **quick and "
"dirty helper view** that you can use to serve files locally in development."
msgstr ""
"静的ファイルツールは、主に静的ファイルを本番環境にうまくデプロイするために設"
"計されています。これは通常、開発時には扱いが大変な専用の静的ファイルサーバー"
"を意味します。そのため、``staticfiles`` アプリには、開発中にローカルでファイ"
"ルを提供するために使用できる **素早くて簡易なヘルパービュー** が同梱されてい"
"ます。"

msgid "This view function serves static files in development."
msgstr "このビュー関数は、開発中に静的ファイルを配信します。"

msgid "This view will only work if :setting:`DEBUG` is ``True``."
msgstr "このビューは :setting:`DEBUG` が ``True`` の場合にのみ機能します。"

msgid ""
"That's because this view is **grossly inefficient** and probably "
"**insecure**. This is only intended for local development, and should "
"**never be used in production**."
msgstr ""
"このビューは **極めて非効率的** であり、おそらく **セキュリティ上の問題** も"
"抱えています。このビューは、 **ローカル開発向け** であり、 **本番環境で使用す"
"るべきではありません** 。"

msgid ""
"To guess the served files' content types, this view relies on the :py:mod:"
"`mimetypes` module from the Python standard library, which itself relies on "
"the underlying platform's map files. If you find that this view doesn't "
"return proper content types for certain files, it is most likely that the "
"platform's map files are incorrect or need to be updated. This can be "
"achieved, for example, by installing or updating the ``mailcap`` package on "
"a Red Hat distribution, ``mime-support`` on a Debian distribution, or by "
"editing the keys under ``HKEY_CLASSES_ROOT`` in the Windows registry."
msgstr ""
"提供するファイルのコンテンツタイプを推測するために、このビューはPython標準ラ"
"イブラリの :py:mod:`mimetypes` モジュールに依存しています。これは、その下層に"
"あるプラットフォームのマップファイルにも依存しています。もし、このビューが特"
"定のファイルに対して適切なコンテンツタイプを返さない場合、最も可能性が高いの"
"は、プラットフォームのマップファイルが不正確であるか、更新が必要であることを"
"意味しています。例えば、Red Hatディストリビューションで ``mailcap`` パッケー"
"ジをインストールまたは更新すること、Debianディストリビューションで ``mime-"
"support`` をインストールまたは更新すること、あるいはWindowsレジストリの "
"``HKEY_CLASSES_ROOT`` 下のキーを編集することによって、これを修正できます。"

msgid ""
"This view is automatically enabled by :djadmin:`runserver` (with a :setting:"
"`DEBUG` setting set to ``True``). To use the view with a different local "
"development server, add the following snippet to the end of your primary URL "
"configuration::"
msgstr ""
"このビューは、 :djadmin:`runserver` (および :setting:`DEBUG` 設定が ``True`` "
"に設定されている場合) によって自動的に有効になります。異なるローカル開発サー"
"バーでこのビューを使用するには、主要なURL設定の末尾に以下のコードを追加してく"
"ださい:"

msgid ""
"Note, the beginning of the pattern (``r'^static/'``) should be your :setting:"
"`STATIC_URL` setting."
msgstr ""
"注意: パターンの先頭 (``r'^static/'``) はあなたの設定 (:setting:"
"`STATIC_URL`) であるべきです。"

msgid ""
"Since this is a bit finicky, there's also a helper function that'll do this "
"for you:"
msgstr "これは少し厄介なので、これを代行してくれるヘルパー関数もあります:"

msgid ""
"This will return the proper URL pattern for serving static files to your "
"already defined pattern list. Use it like this::"
msgstr ""
"これは、すでに定義されているパターンリストに静的ファイルを提供するための適切"
"なURLパターンを返します。次のように使います:"

msgid ""
"This will inspect your :setting:`STATIC_URL` setting and wire up the view to "
"serve static files accordingly. Don't forget to set the :setting:"
"`STATICFILES_DIRS` setting appropriately to let ``django.contrib."
"staticfiles`` know where to look for files in addition to files in app "
"directories."
msgstr ""
"これにより、:setting:`STATIC_URL` 設定が検査され、静的ファイルを適切に提供す"
"るためのビューが設定されます。 ``django.contrib.staticfiles`` がアプリディレ"
"クトリ内のファイルに加えて、どこでファイルを探せばよいかを知るために、 :"
"setting:`STATICFILES_DIRS` 設定を適切に設定することを忘れないでください。"

msgid ""
"This helper function will only work if :setting:`DEBUG` is ``True`` and "
"your :setting:`STATIC_URL` setting is neither empty nor a full URL such as "
"``http://static.example.com/``."
msgstr ""
"このヘルパー関数は、 :setting:`DEBUG` が ``True`` であり、かつ :setting:"
"`STATIC_URL` の設定が空でも完全なURL (例: ``http://static.example.com/``) で"
"もない場合にのみ動作します。"

msgid "Specialized test case to support 'live testing'"
msgstr "「ライブテスト」をサポートするための特別なテストケース"

msgid ""
"This unittest TestCase subclass extends :class:`django.test."
"LiveServerTestCase`."
msgstr ""
"この unittest の TestCase サブクラスは :class:`django.test."
"LiveServerTestCase` を拡張しています。"

msgid ""
"Just like its parent, you can use it to write tests that involve running the "
"code under test and consuming it with testing tools through HTTP (e.g. "
"Selenium, PhantomJS, etc.), because of which it's needed that the static "
"assets are also published."
msgstr ""
"親と同様に、テスト対象のコードを実行し、HTTP を介してテストツール(例: "
"Selenium、PhantomJS など)で使用するテストを記述するために使用できます。そのた"
"め、静的アセットも公開する必要があります。"

msgid ""
"But given the fact that it makes use of the :func:`django.contrib."
"staticfiles.views.serve` view described above, it can transparently overlay "
"at test execution-time the assets provided by the ``staticfiles`` finders. "
"This means you don't need to run :djadmin:`collectstatic` before or as a "
"part of your tests setup."
msgstr ""
"しかし、上記で説明した :func:`django.contrib.staticfiles.views.serve` ビュー"
"を利用しているため、テスト実行時に ``staticfiles`` ファインダーによって配信さ"
"れたアセットを透過的に上書きできます。つまり、テストのセットアップの前やその"
"一部として :djadmin:`collectstatic` を実行する必要はありません。"

msgid "The syndication feed framework"
msgstr "配信 (syndication) フィード フレームワーク"

msgid ""
"Django comes with a high-level syndication-feed-generating framework for "
"creating RSS_ and :rfc:`Atom <4287>` feeds."
msgstr ""
"Django には、RSS_ と :rfc:`Atom <4287>` フィードを作成するための高レベルな配"
"信 (syndication) フィード生成フレームワークが付属しています。"

msgid ""
"To create any syndication feed, all you have to do is write a short Python "
"class. You can create as many feeds as you want."
msgstr ""
"任意の配信フィードを作成するには、短い Python クラスを書くだけで済みます。好"
"きなだけフィードを作成できます。"

msgid ""
"Django also comes with a lower-level feed-generating API. Use this if you "
"want to generate feeds outside of a web context, or in some other lower-"
"level way."
msgstr ""
"Djangoには、低レベルのフィード生成APIも付属しています。ウェブコンテキストの外"
"や、他の低レベルな方法でフィードを生成したい場合に使用してください。"

msgid "The high-level framework"
msgstr "高レベルのフレームワーク"

msgid ""
"The high-level feed-generating framework is supplied by the :class:`~django."
"contrib.syndication.views.Feed` class. To create a feed, write a :class:"
"`~django.contrib.syndication.views.Feed` class and point to an instance of "
"it in your :doc:`URLconf </topics/http/urls>`."
msgstr ""
"高レベルのフィード生成フレームワークは :class:`~django.contrib.syndication."
"views.Feed` クラスによって提供されます。フィードを作成するには、 :class:"
"`~django.contrib.syndication.views.Feed` クラスを記述し、 :doc:`URLconf </"
"topics/http/urls>` でそのインスタンスを指定します。"

msgid "``Feed`` classes"
msgstr "``Feed`` クラス"

msgid ""
"A :class:`~django.contrib.syndication.views.Feed` class is a Python class "
"that represents a syndication feed. A feed can be simple (e.g., a \"site "
"news\" feed, or a basic feed displaying the latest entries of a blog) or "
"more complex (e.g., a feed displaying all the blog entries in a particular "
"category, where the category is variable)."
msgstr ""
":class:`~django.contrib.syndication.views.Feed` クラスは配信フィードを表す "
"Python クラスです。フィードは単純なもの (例えば、\"サイトニュース\" フィード"
"や、ブログの最新エントリを表示する基本的なフィード) もあれば、より複雑なもの "
"(例えば、特定のカテゴリに属する全てのブログエントリを表示するフィード (カテゴ"
"リは可変)) もあります。"

msgid ""
"Feed classes subclass :class:`django.contrib.syndication.views.Feed`. They "
"can live anywhere in your codebase."
msgstr ""
"フィードクラスは :class:`django.contrib.syndication.views.Feed` のサブクラス"
"です。これらはコードベースのどこにでも置くことができます。"

msgid ""
"Instances of :class:`~django.contrib.syndication.views.Feed` classes are "
"views which can be used in your :doc:`URLconf </topics/http/urls>`."
msgstr ""
":class:`~django.contrib.syndication.views.Feed` クラスのインスタンスは、 :"
"doc:`URLconf </topics/http/urls>` で使用できるビューです。"

msgid "A simple example"
msgstr "簡単な例"

msgid ""
"This simple example, taken from a hypothetical police beat news site "
"describes a feed of the latest five news items::"
msgstr ""
"この単純な例は、ある警察のニュースサイトから引用したもので、最新の5つのニュー"
"スのフィードを記述しています:"

msgid ""
"To connect a URL to this feed, put an instance of the Feed object in your :"
"doc:`URLconf </topics/http/urls>`. For example::"
msgstr ""
"このフィードにURLを接続するには、 :doc:`URLconf </topics/http/urls>` にFeedオ"
"ブジェクトのインスタンスを配置します。例えば:"

msgid ""
"The Feed class subclasses :class:`django.contrib.syndication.views.Feed`."
msgstr ""
"Feedクラスは :class:`django.contrib.syndication.views.Feed` のサブクラスで"
"す。"

msgid ""
"``title``, ``link`` and ``description`` correspond to the standard RSS "
"``<title>``, ``<link>`` and ``<description>`` elements, respectively."
msgstr ""
"``title``、``link``、および ``description`` は、それぞれ標準RSSの "
"``<title>``, ``<link>``, ``<description>`` 要素に対応します。"

msgid ""
"``items()`` is, a method that returns a list of objects that should be "
"included in the feed as ``<item>`` elements. Although this example returns "
"``NewsItem`` objects using Django's :doc:`object-relational mapper </ref/"
"models/querysets>`, ``items()`` doesn't have to return model instances. "
"Although you get a few bits of functionality \"for free\" by using Django "
"models, ``items()`` can return any type of object you want."
msgstr ""
"``items()`` は、フィードに含めるべきオブジェクトのリストを返すメソッドです。"
"この例では、Djangoの :doc:`ORM </ref/models/querysets>` を使用して "
"``NewsItem`` オブジェクトを返しますが、 ``items()`` は必ずモデルインスタンス"
"を返す必要はありません。Django モデルを使用することで、いくつかの機能が「タ"
"ダ」で提供されますが、 ``items()`` は任意の種類のオブジェクトを返すことができ"
"ます。"

msgid ""
"If you're creating an Atom feed, rather than an RSS feed, set the "
"``subtitle`` attribute instead of the ``description`` attribute. See "
"`Publishing Atom and RSS feeds in tandem`_, later, for an example."
msgstr ""
"Atom フィードを作成する場合、RSS フィードではなく、``description`` 属性の代わ"
"りに ``subtitle`` 属性を設定してください。例については、後述の `Publishing "
"Atom and RSS feeds in tandem`_ を参照してください。"

msgid ""
"One thing is left to do. In an RSS feed, each ``<item>`` has a ``<title>``, "
"``<link>`` and ``<description>``. We need to tell the framework what data to "
"put into those elements."
msgstr ""
"まだやるべきことが一つあります。RSSフィードでは、各 ``<item>`` には "
"``<title>``, ``<link>``, そして ``<description>`` が含まれています。これらの"
"要素にどんなデータを入れるべきか、フレームワークに伝える必要があります。"

msgid ""
"For the contents of ``<title>`` and ``<description>``, Django tries calling "
"the methods ``item_title()`` and ``item_description()`` on the :class:"
"`~django.contrib.syndication.views.Feed` class. They are passed a single "
"parameter, ``item``, which is the object itself. These are optional; by "
"default, the string representation of the object is used for both."
msgstr ""
"``<title>`` と ``<description>`` の内容について、Djangoは :class:`~django."
"contrib.syndication.views.Feed` クラスでメソッド ``item_title()`` と "
"``item_description()`` を呼び出そうとします。これらには、オブジェクト自体を表"
"す単一のパラメータ ``item`` が渡されます。これらはオプションであり、デフォル"
"トではオブジェクトの文字列表現が両方に使用されます。"

msgid ""
"If you want to do any special formatting for either the title or "
"description, :doc:`Django templates </ref/templates/language>` can be used "
"instead. Their paths can be specified with the ``title_template`` and "
"``description_template`` attributes on the :class:`~django.contrib."
"syndication.views.Feed` class. The templates are rendered for each item and "
"are passed two template context variables:"
msgstr ""
"タイトルや説明文に特別な書式を設定したい場合は、 :doc:`Django テンプレート </"
"ref/templates/language>` を代わりに使用できます。そのパスは :class:`~django."
"contrib.syndication.views.Feed` クラスの ``title_template`` と "
"``description_template`` 属性で指定できます。テンプレートはアイテムごとにレン"
"ダリングされ、2つのテンプレートコンテキスト変数に渡されます:"

msgid ""
"``{{ obj }}`` -- The current object (one of whichever objects you returned "
"in ``items()``)."
msgstr ""
"``{{ obj }}`` -- 現在のオブジェクト (``items()`` で返したオブジェクトのいずれ"
"か)。"

msgid ""
"``{{ site }}`` -- A :class:`django.contrib.sites.models.Site` object "
"representing the current site. This is useful for ``{{ site.domain }}`` or "
"``{{ site.name }}``. If you do *not* have the Django sites framework "
"installed, this will be set to a :class:`~django.contrib.sites.requests."
"RequestSite` object. See the :ref:`RequestSite section of the sites "
"framework documentation <requestsite-objects>` for more."
msgstr ""
"``{{ site }}`` ―― 現在のサイトを表す :class:`django.contrib.sites.models."
"Site` オブジェクト。これは ``{{ site.domain }}`` や ``{{ site.name }}`` に便"
"利です。Django サイトフレームワークがインストールされていない場合は、これは :"
"class:`~django.contrib.sites.requests.RequestSite` オブジェクトに設定されま"
"す。詳細は、サイトフレームワークのドキュメントの :ref:`RequestSite のセクショ"
"ン <requestsite-objects>` を参照してください。"

msgid "See `a complex example`_ below that uses a description template."
msgstr ""
"記述テンプレートを使用した以下の `a complex example`_ を参照してください。"

msgid ""
"There is also a way to pass additional information to title and description "
"templates, if you need to supply more than the two variables mentioned "
"before. You can provide your implementation of ``get_context_data`` method "
"in your ``Feed`` subclass. For example::"
msgstr ""
"必要な変数が2つ以上ある場合、タイトルと説明テンプレートに追加情報を渡す方法も"
"あります。その場合は、``Feed`` サブクラス内で ``get_context_data`` メソッドの"
"実装を提供できます。例えば:"

msgid "And the template:"
msgstr "テンプレートは以下の通りです:"

msgid ""
"This method will be called once per each item in the list returned by "
"``items()`` with the following keyword arguments:"
msgstr ""
"このメソッドは、``items()`` で返されたリストの各アイテムごとに、次のキーワー"
"ド引数とともに一度ずつ呼び出されます:"

msgid ""
"``item``: the current item. For backward compatibility reasons, the name of "
"this context variable is ``{{ obj }}``."
msgstr ""
"``item``: 現在のアイテム。後方互換性のため、このコンテキスト変数の名前は "
"``{{ obj }}`` です。"

msgid ""
"``obj``: the object returned by ``get_object()``. By default this is not "
"exposed to the templates to avoid confusion with ``{{ obj }}`` (see above), "
"but you can use it in your implementation of ``get_context_data()``."
msgstr ""
"``obj``: ``get_object()`` で返されるオブジェクト。デフォルトでは、テンプレー"
"トでの混乱を避けるため ``{{ obj }}`` (前述) で公開されませんが、 "
"``get_context_data()`` の実装で使用できます。"

msgid "``site``: current site as described above."
msgstr "``site``: 上記で説明した現在のサイト。"

msgid "``request``: current request."
msgstr "``request``: 現在のリクエスト。"

msgid ""
"The behavior of ``get_context_data()`` mimics that of :ref:`generic views "
"<adding-extra-context>` - you're supposed to call ``super()`` to retrieve "
"context data from parent class, add your data and return the modified "
"dictionary."
msgstr ""
"``get_context_data()`` の動作は :ref:`ジェネリックビュー <adding-extra-"
"context>` と同様です。親クラスからコンテキストデータを取得するために "
"``super()`` を呼び出し、自分のデータを追加して、修正された辞書を返すことに"
"なっています。"

msgid ""
"To specify the contents of ``<link>``, you have two options. For each item "
"in ``items()``, Django first tries calling the ``item_link()`` method on "
"the :class:`~django.contrib.syndication.views.Feed` class. In a similar way "
"to the title and description, it is passed it a single parameter, ``item``. "
"If that method doesn't exist, Django tries executing a "
"``get_absolute_url()`` method on that object. Both ``get_absolute_url()`` "
"and ``item_link()`` should return the item's URL as a normal Python string. "
"As with ``get_absolute_url()``, the result of ``item_link()`` will be "
"included directly in the URL, so you are responsible for doing all necessary "
"URL quoting and conversion to ASCII inside the method itself."
msgstr ""
"``<link>`` の内容を指定するには、2つの選択肢があります。``items()`` の各項目"
"に対して、Djangoはまず :class:`~django.contrib.syndication.views.Feed` クラス"
"上の ``item_link()`` メソッドを呼び出すことを試みます。タイトルや説明と同様"
"に、これには単一のパラメータ ``item`` が渡されます。そのメソッドが存在しない"
"場合、Djangoはそのオブジェクト上で ``get_absolute_url()`` メソッドを実行しよ"
"うとします。``get_absolute_url()`` および ``item_link()`` は、いずれも項目の"
"URLを通常のPython文字列として返すべきです。``get_absolute_url()`` と同様に、"
"``item_link()`` の結果はURLに直接含まれるため、メソッド内で必要なURLクォー"
"ティングおよびASCIIへの変換をすべて自身で行う責任があります。"

msgid "A complex example"
msgstr "複雑な例"

msgid "The framework also supports more complex feeds, via arguments."
msgstr ""
"このフレームワークは、引数を通じて、より複雑なフィードもサポートしています。"

msgid ""
"For example, a website could offer an RSS feed of recent crimes for every "
"police beat in a city. It'd be silly to create a separate :class:`~django."
"contrib.syndication.views.Feed` class for each police beat; that would "
"violate the :ref:`DRY principle <dry>` and would couple data to programming "
"logic. Instead, the syndication framework lets you access the arguments "
"passed from your :doc:`URLconf </topics/http/urls>` so feeds can output "
"items based on information in the feed's URL."
msgstr ""
"たとえば、あるウェブサイトが、都市内の各警察管轄地域の最近の犯罪についてのRSS"
"フィードを提供しているとします。各警察の管轄地域ごとに :class:`~django."
"contrib.syndication.views.Feed` クラスを別々に作成するのは愚かなことです。そ"
"れは :ref:`DRY原則 <dry>` に反し、データをプログラミングロジックに結びつけて"
"しまいます。代わりに、配信 (syndication) フレームワークを使用すると、:doc:"
"`URLconf </topics/http/urls>` から渡された引数にアクセスできます。そのため、"
"フィードのURL内の情報に基づいてアイテムを出力できます。"

msgid "The police beat feeds could be accessible via URLs like this:"
msgstr "警察の管轄地域のフィードは次のようなURLを介してアクセスできます:"

msgid "``/beats/613/rss/`` -- Returns recent crimes for beat 613."
msgstr "``/beats/613/rss/`` ―― 613番担当地域の最近の犯罪情報を返します。"

msgid "``/beats/1424/rss/`` -- Returns recent crimes for beat 1424."
msgstr "\"/beats/1424/rss/\" ―― 1424番担当地域の最近の犯罪を返します。"

msgid ""
"These can be matched with a :doc:`URLconf </topics/http/urls>` line such as::"
msgstr ""
"これらは、次のような :doc:`URLconf </topics/http/urls>` 行とマッチするでしょ"
"う:"

msgid ""
"Like a view, the arguments in the URL are passed to the ``get_object()`` "
"method along with the request object."
msgstr ""
"ビューと同様に、URLの引数はリクエストオブジェクトと共に ``get_object()`` メ"
"ソッドに渡されます。"

msgid "Here's the code for these beat-specific feeds::"
msgstr "これらの管轄地域に特化したフィードのコードは以下の通りです:"

msgid ""
"To generate the feed's ``<title>``, ``<link>`` and ``<description>``, Django "
"uses the ``title()``, ``link()`` and ``description()`` methods. In the "
"previous example, they were string class attributes, but this example "
"illustrates that they can be either strings *or* methods. For each of "
"``title``, ``link`` and ``description``, Django follows this algorithm:"
msgstr ""
"フィードの ``<title>``, ``<link>``, ``<description>`` を生成するために、 "
"Django は ``title()``, ``link()``, ``description()`` メソッドを使います。前の"
"例では、これらは文字列のクラス属性でしたが、この例では、文字列 *または* メ"
"ソッドを指定できます。 ``title``、``link``、``description`` のそれぞれについ"
"て、 Django は以下のアルゴリズムに従います"

msgid ""
"First, it tries to call a method, passing the ``obj`` argument, where "
"``obj`` is the object returned by ``get_object()``."
msgstr ""
"まず、 ``obj`` を引数にして、メソッドを呼び出そうとします。ここで、 ``obj`` "
"は ``get_object()`` によって返されたオブジェクトです "

msgid "Failing that, it tries to call a method with no arguments."
msgstr "それが失敗した場合、引数なしでメソッドを呼び出そうとします。"

msgid "Failing that, it uses the class attribute."
msgstr "それができない場合は、クラス属性を使用します。"

msgid ""
"Also note that ``items()`` also follows the same algorithm -- first, it "
"tries ``items(obj)``, then ``items()``, then finally an ``items`` class "
"attribute (which should be a list)."
msgstr ""
"また、``items()`` も同じアルゴリズムに従います。最初に ``items(obj)`` を試"
"し、次に ``items()``、最後に ``items`` クラス属性（リストであるべきです）を試"
"します。"

msgid ""
"We are using a template for the item descriptions. It can be as minimal as "
"this:"
msgstr "アイテムの説明用にテンプレートを使用しています。これは最小限の例です:"

msgid "However, you are free to add formatting as desired."
msgstr "ただし、フォーマットは必要に応じて追加できます。"

msgid ""
"The ``ExampleFeed`` class below gives full documentation on methods and "
"attributes of :class:`~django.contrib.syndication.views.Feed` classes."
msgstr ""
"以下の ``ExampleFeed`` クラスは、 :class:`~django.contrib.syndication.views."
"Feed` クラスのメソッドと属性に関する完全なドキュメントを提供します。"

msgid "Specifying the type of feed"
msgstr "フィードの種類を指定する"

msgid "By default, feeds produced in this framework use RSS 2.0."
msgstr ""
"デフォルトでは、このフレームワークで作成されたフィードはRSS 2.0を使用します。"

msgid ""
"To change that, add a ``feed_type`` attribute to your :class:`~django."
"contrib.syndication.views.Feed` class, like so::"
msgstr ""
"これを変更するには、次のように :class:`~django.contrib.syndication.views."
"Feed` クラスに ``feed_type`` 属性を追加します:"

msgid "Note that you set ``feed_type`` to a class object, not an instance."
msgstr ""
"``feed_type`` にはインスタンスではなく、クラスオブジェクトを設定することに注"
"意してください。"

msgid "Currently available feed types are:"
msgstr "現在利用可能なフィードタイプは以下の通りです:"

msgid ":class:`django.utils.feedgenerator.Rss201rev2Feed` (RSS 2.01. Default.)"
msgstr ""
":class:`django.utils.feedgenerator.Rss201rev2Feed` (RSS 2.01。デフォルト。)"

msgid ":class:`django.utils.feedgenerator.RssUserland091Feed` (RSS 0.91.)"
msgstr ":class:`django.utils.feedgenerator.RssUserland091Feed` (RSS 0.91.)"

msgid ":class:`django.utils.feedgenerator.Atom1Feed` (Atom 1.0.)"
msgstr ":class:`django.utils.feedgenerator.Atom1Feed` (Atom 1.0.)"

msgid "Enclosures"
msgstr "エンクロージャ (Enclosure)"

msgid ""
"To specify enclosures, such as those used in creating podcast feeds, use the "
"``item_enclosures`` hook or, alternatively and if you only have a single "
"enclosure per item, the ``item_enclosure_url``, ``item_enclosure_length``, "
"and ``item_enclosure_mime_type`` hooks. See the ``ExampleFeed`` class below "
"for usage examples."
msgstr ""
"ポッドキャストフィードを作成する際に使用されるエンクロージャ (enclosure) を指"
"定するには、``item_enclosures`` フックを使用するか、またはアイテムごとに1つの"
"エンクロージャのみを持つ場合は代わりに ``item_enclosure_url``、"
"``item_enclosure_length``、``item_enclosure_mime_type`` フックを使用します。"
"使用例については、以下の ``ExampleFeed`` クラスを参照してください。"

msgid "Language"
msgstr "言語"

msgid ""
"Feeds created by the syndication framework automatically include the "
"appropriate ``<language>`` tag (RSS 2.0) or ``xml:lang`` attribute (Atom). "
"By default, this is :func:`django.utils.translation.get_language()`. You can "
"change it by setting the ``language`` class attribute."
msgstr ""
"配信フレームワークによって作成されたフィードは、自動的に適切な "
"``<language>`` タグ (RSS 2.0) または ``xml:lang`` 属性 (Atom) を含みます。デ"
"フォルトでは :func:`django.utils.translation.get_language()` です。 "
"``language`` クラス属性を設定することで変更できます。"

msgid ""
"The ``link`` method/attribute can return either an absolute path (e.g. ``\"/"
"blog/\"``) or a URL with the fully-qualified domain and protocol (e.g. "
"``\"https://www.example.com/blog/\"``). If ``link`` doesn't return the "
"domain, the syndication framework will insert the domain of the current "
"site, according to your :setting:`SITE_ID setting <SITE_ID>`."
msgstr ""
"``link`` メソッド/属性は絶対パス (例: ``\"/blog/\"``) または完全修飾ドメイン"
"とプロトコルを含むURL (例：``\"https://www.example.com/blog/\"``) を返すこと"
"ができます。もし ``link`` がドメインを返さない場合、配信フレームワークは :"
"setting:`SITE_ID 設定<SITE_ID>` に従って、現在のサイトのドメインを挿入しま"
"す。"

msgid ""
"Atom feeds require a ``<link rel=\"self\">`` that defines the feed's current "
"location. The syndication framework populates this automatically, using the "
"domain of the current site according to the :setting:`SITE_ID` setting."
msgstr ""
"Atom フィードには、フィードの現在の場所を定義する ``<link rel=\"self\">`` が"
"必要です。配信フレームワークは、:setting:`SITE_ID` 設定に従って、現在のサイト"
"のドメインを使用して、これを自動的に設定します。"

msgid "Publishing Atom and RSS feeds in tandem"
msgstr "Atom と RSS フィードを同時に公開する"

msgid ""
"Some developers like to make available both Atom *and* RSS versions of their "
"feeds. To do that, you can create a subclass of your :class:`~django.contrib."
"syndication.views.Feed` class and set the ``feed_type`` to something "
"different. Then update your URLconf to add the extra versions."
msgstr ""
"フィードの Atom 版と RSS 版の *両方* を利用したい開発者もいるでしょう。そのた"
"めには、 :class:`~django.contrib.syndication.views.Feed` クラスのサブクラスを"
"作成し、 ``feed_type`` を別のものに設定します。それから URLconf を更新して、"
"追加バージョンを追加します。"

msgid "Here's a full example::"
msgstr "すべての例を示します:"

msgid ""
"In this example, the RSS feed uses a ``description`` while the Atom feed "
"uses a ``subtitle``. That's because Atom feeds don't provide for a feed-"
"level \"description,\" but they *do* provide for a \"subtitle.\""
msgstr ""
"この例では、RSSフィードは ``description`` を使っていますが、Atomフィードは "
"``subtitle`` を使っています。Atomフィードはフィードレベルの \"description\" "
"を提供しませんが、\"subtitle\" を提供 *する* からです。"

msgid ""
"If you provide a ``description`` in your :class:`~django.contrib.syndication."
"views.Feed` class, Django will *not* automatically put that into the "
"``subtitle`` element, because a subtitle and description are not necessarily "
"the same thing. Instead, you should define a ``subtitle`` attribute."
msgstr ""
":class:`~django.contrib.syndication.views.Feed` クラスに ``description`` を提"
"供した場合、サブタイトルと説明が必ずしも同じものではないため、Django は自動的"
"にそれを ``subtitle`` 要素に入れ *ません* 。代わりに、 ``subtitle`` 属性を定"
"義するべきです。"

msgid ""
"In the above example, we set the Atom feed's ``subtitle`` to the RSS feed's "
"``description``, because it's quite short already."
msgstr ""
"上記の例では、Atomフィードの ``subtitle`` をRSSフィードの ``description`` に"
"設定していますが、これは既にかなり短いためです。"

msgid "And the accompanying URLconf::"
msgstr "そして、それに伴うURLconfは次のとおりです:"

msgid "``Feed`` class reference"
msgstr "``Feed`` クラスのリファレンス"

msgid ""
"This example illustrates all possible attributes and methods for a :class:"
"`~django.contrib.syndication.views.Feed` class::"
msgstr ""
"この例は、 :class:`~django.contrib.syndication.views.Feed` クラスの可能な全て"
"の属性とメソッドを示しています:"

msgid "The low-level framework"
msgstr "低レベルのフレームワーク"

msgid ""
"Behind the scenes, the high-level RSS framework uses a lower-level framework "
"for generating feeds' XML. This framework lives in a single module: :source:"
"`django/utils/feedgenerator.py`."
msgstr ""
"舞台裏では、高水準のRSSフレームワークがフィードのXMLを生成するために、より低"
"水準のフレームワークを使用しています。このフレームワークは単一のモジュールに"
"存在します: :source:`django/utils/feedgenerator.py` 。"

msgid ""
"You use this framework on your own, for lower-level feed generation. You can "
"also create custom feed generator subclasses for use with the ``feed_type`` "
"``Feed`` option."
msgstr ""
"このフレームワークを使用して、低レベルのフィードを生成します。独自のフィード"
"ジェネレータサブクラスを作成して ``feed_type`` ``Feed`` オプションで使用する"
"こともできます。"

msgid "``SyndicationFeed`` classes"
msgstr "``SyndicationFeed`` クラス"

msgid "The :mod:`~django.utils.feedgenerator` module contains a base class:"
msgstr ""
":mod:`~django.utils.feedgenerator` モジュールには以下の基底クラスが含まれてい"
"ます:"

msgid ":class:`django.utils.feedgenerator.SyndicationFeed`"
msgstr ":class:`django.utils.feedgenerator.SyndicationFeed`"

msgid "and several subclasses:"
msgstr "サブクラスは以下です:"

msgid ":class:`django.utils.feedgenerator.RssUserland091Feed`"
msgstr ":class:`django.utils.feedgenerator.RssUserland091Feed`"

msgid ":class:`django.utils.feedgenerator.Rss201rev2Feed`"
msgstr ":class:`django.utils.feedgenerator.Rss201rev2Feed`"

msgid ":class:`django.utils.feedgenerator.Atom1Feed`"
msgstr ":class:`django.utils.feedgenerator.Atom1Feed`"

msgid ""
"Each of these three classes knows how to render a certain type of feed as "
"XML. They share this interface:"
msgstr ""
"これら3つのクラスは、特定の種類のフィードをXMLとしてレンダリングする方法を"
"知っています。これらはこのインターフェイスを共有しています:"

msgid ":meth:`.SyndicationFeed.__init__`"
msgstr ":meth:`.SyndicationFeed.__init__`"

msgid ""
"Initialize the feed with the given dictionary of metadata, which applies to "
"the entire feed. Required keyword arguments are:"
msgstr ""
"与えられたメタデータの辞書でフィードを初期化します。これはフィード全体に適用"
"されます。必須のキーワード引数は以下の通りです:"

msgid "``title``"
msgstr "``title``"

msgid "There's also a bunch of other optional keywords:"
msgstr "他にもいくつかのオプションキーワードがあります:"

msgid "``language``"
msgstr "``language``"

msgid "``author_email``"
msgstr "``author_email``"

msgid "``author_name``"
msgstr "``author_name``"

msgid "``author_link``"
msgstr "``author_link``"

msgid "``subtitle``"
msgstr "``subtitle``"

msgid "``categories``"
msgstr "``categories``"

msgid "``feed_url``"
msgstr "``feed_url``"

msgid "``feed_copyright``"
msgstr "``feed_copyright``"

msgid "``feed_guid``"
msgstr "``feed_guid``"

msgid "``ttl``"
msgstr "``ttl``"

msgid ""
"Any extra keyword arguments you pass to ``__init__`` will be stored in "
"``self.feed`` for use with `custom feed generators`_."
msgstr ""
"``__init__`` に渡された追加のキーワード引数は、 `custom feed generators`_ で"
"の使用のために ``self.feed`` に格納されます。"

msgid ""
"All parameters should be strings, except ``categories``, which should be a "
"sequence of strings. Beware that some control characters are `not allowed "
"<https://www.w3.org/International/questions/qa-controls>`_ in XML documents. "
"If your content has some of them, you might encounter a :exc:`ValueError` "
"when producing the feed."
msgstr ""
"すべてのパラメータは文字列であるべきですが、 ``categories`` のみ文字列のシー"
"ケンスであるべきです。XMLドキュメントでは、いくつかの制御文字が `許可されてい"
"ない <https://www.w3.org/International/questions/qa-controls>`_ ことに注意し"
"てください。コンテンツにそれらが含まれている場合、フィードを生成する際に :"
"exc:`ValueError` に遭遇するかもしれません。"

msgid ":meth:`.SyndicationFeed.add_item`"
msgstr ":meth:`.SyndicationFeed.add_item`"

msgid "Add an item to the feed with the given parameters."
msgstr "指定されたパラメータを使用してフィードにアイテムを追加します。"

msgid "Required keyword arguments are:"
msgstr "必須キーワード引数は以下の通りです:"

msgid "Optional keyword arguments are:"
msgstr "オプションのキーワード引数は次のとおりです:"

msgid "``pubdate``"
msgstr "``pubdate``"

msgid "``comments``"
msgstr "``comments``"

msgid "``unique_id``"
msgstr "``unique_id``"

msgid "``enclosures``"
msgstr "``enclosures``"

msgid "``item_copyright``"
msgstr "``item_copyright``"

msgid "``updateddate``"
msgstr "``updateddate``"

msgid "Extra keyword arguments will be stored for `custom feed generators`_."
msgstr "追加のキーワード引数は `custom feed generators`_ 用に保存されます。"

msgid "All parameters, if given, should be strings, except:"
msgstr "パラメータを指定する場合は、文字列でなければなりません:"

msgid "``pubdate`` should be a Python  :class:`~datetime.datetime` object."
msgstr ""
"``pubdate`` は Python の :class:`~datetime.datetime` オブジェクトであるべきで"
"す。"

msgid "``updateddate`` should be a Python  :class:`~datetime.datetime` object."
msgstr ""
"``updateddate`` はPythonの :class:`~datetime.datetime` オブジェクトでなければ"
"なりません。"

msgid ""
"``enclosures`` should be a list of :class:`django.utils.feedgenerator."
"Enclosure` instances."
msgstr ""
"``enclosures`` は :class:`django.utils.feedgenerator.Enclosure` インスタンス"
"のリストであるべきです。"

msgid "``categories`` should be a sequence of strings."
msgstr "``categories`` は文字列のシーケンスであるべきです。"

msgid ":meth:`.SyndicationFeed.write`"
msgstr ":meth:`.SyndicationFeed.write`"

msgid ""
"Outputs the feed in the given encoding to outfile, which is a file-like "
"object."
msgstr ""
"指定されたエンコーディングでフィードを outfile に出力します。outfile はファイ"
"ルライクなオブジェクトです。"

msgid ":meth:`.SyndicationFeed.writeString`"
msgstr ":meth:`.SyndicationFeed.writeString`"

msgid "Returns the feed as a string in the given encoding."
msgstr "指定されたエンコーディングでフィードを文字列として返します。"

msgid ""
"For example, to create an Atom 1.0 feed and print it to standard output:"
msgstr ""
"例えば、Atom 1.0 フィードを作成して標準出力に出力するには、次のようにします:"

msgid "Custom feed generators"
msgstr "カスタムフィードジェネレータ"

msgid ""
"If you need to produce a custom feed format, you've got a couple of options."
msgstr ""
"カスタムフィード形式を作成する必要がある場合、いくつかのオプションがありま"
"す。"

msgid ""
"If the feed format is totally custom, you'll want to subclass "
"``SyndicationFeed`` and completely replace the ``write()`` and "
"``writeString()`` methods."
msgstr ""
"フィードフォーマットが完全にカスタムである場合は、``SyndicationFeed`` をサブ"
"クラス化し、``write()`` メソッドと ``writeString()`` メソッドを完全に置き換え"
"る必要があります。"

msgid ""
"However, if the feed format is a spin-off of RSS or Atom (i.e. GeoRSS_, "
"Apple's `iTunes podcast format`_, etc.), you've got a better choice. These "
"types of feeds typically add extra elements and/or attributes to the "
"underlying format, and there are a set of methods that ``SyndicationFeed`` "
"calls to get these extra attributes. Thus, you can subclass the appropriate "
"feed generator class (``Atom1Feed`` or ``Rss201rev2Feed``) and extend these "
"callbacks. They are:"
msgstr ""
"しかし、フィードフォーマットがRSSやAtom（例えば、 GeoRSS_ 、Appleの `iTunes "
"podcast format`_ など）の派生形式である場合、より良い選択肢があります。これら"
"のタイプのフィードは、通常、基本となるフォーマットに追加の要素や属性を追加"
"し、 ``SyndicationFeed`` がこれらの追加属性を取得するために呼び出す一連のメ"
"ソッドがあります。したがって、適切なフィードジェネレータクラス "
"(``Atom1Feed`` または ``Rss201rev2Feed``) をサブクラス化し、これらのコール"
"バックを拡張できます。それらは次のとおりです:"

msgid "``SyndicationFeed.root_attributes(self)``"
msgstr "``SyndicationFeed.root_attributes(self)``"

msgid ""
"Return a ``dict`` of attributes to add to the root feed element (``feed``/"
"``channel``)."
msgstr ""
"ルートフィード要素 (``feed``/``channel``) に追加する属性の ``dict`` を返しま"
"す。"

msgid "``SyndicationFeed.add_root_elements(self, handler)``"
msgstr "``SyndicationFeed.add_root_elements(self, handler)``"

msgid ""
"Callback to add elements inside the root feed element (``feed``/"
"``channel``). ``handler`` is an :class:`~xml.sax.saxutils.XMLGenerator` from "
"Python's built-in SAX library; you'll call methods on it to add to the XML "
"document in process."
msgstr ""
"ルートフィード要素 (``feed``/``channel``) 内に要素を追加するためのコールバッ"
"クです。``handler`` はPythonの組み込みSAXライブラリからの :class:`~xml.sax."
"saxutils.XMLGenerator` です。処理中のXMLドキュメントに追加するには、これに対"
"してメソッドを呼び出します。"

msgid "``SyndicationFeed.item_attributes(self, item)``"
msgstr "``SyndicationFeed.item_attributes(self, item)``"

msgid ""
"Return a ``dict`` of attributes to add to each item (``item``/``entry``) "
"element. The argument, ``item``, is a dictionary of all the data passed to "
"``SyndicationFeed.add_item()``."
msgstr ""
"各アイテム (``item``/``entry``) 要素に追加する属性の ``dict`` を返します。引"
"数の ``item`` は、 ``SyndicationFeed.add_item()`` に渡されるすべてのデータの"
"辞書です。"

msgid "``SyndicationFeed.add_item_elements(self, handler, item)``"
msgstr "``SyndicationFeed.add_item_elements(self, handler, item)``"

msgid ""
"Callback to add elements to each item (``item``/``entry``) element. "
"``handler`` and ``item`` are as above."
msgstr ""
"各アイテム (``item``/``entry``) 要素に要素を追加するためのコールバックです。 "
"``handler`` と ``item`` は上記の通りです。"

msgid ""
"If you override any of these methods, be sure to call the superclass methods "
"since they add the required elements for each feed format."
msgstr ""
"これらのメソッドをオーバーライドする場合は、基底クラスのメソッドを必ず呼び出"
"してください。これらは、それぞれのフィードフォーマットに必要な要素を追加する"
"ためです。"

msgid ""
"For example, you might start implementing an iTunes RSS feed generator like "
"so::"
msgstr ""
"たとえば、iTunesのRSSフィードジェネレーターの実装を次のように始めることができ"
"ます:"

msgid ""
"There's a lot more work to be done for a complete custom feed class, but the "
"above example should demonstrate the basic idea."
msgstr ""
"完全なカスタムフィードクラスを作成するには、まだ多くの作業が必要ですが、上記"
"の例で基本的な考え方を示すことができるはずです。"

msgid "Cross Site Request Forgery protection"
msgstr "クロスサイトリクエストフォージェリ (CSRF) 対策"

msgid ""
"The CSRF middleware and template tag provides easy-to-use protection against "
"`Cross Site Request Forgeries`_. This type of attack occurs when a malicious "
"website contains a link, a form button or some JavaScript that is intended "
"to perform some action on your website, using the credentials of a logged-in "
"user who visits the malicious site in their browser. A related type of "
"attack, 'login CSRF', where an attacking site tricks a user's browser into "
"logging into a site with someone else's credentials, is also covered."
msgstr ""
"CSRF ミドルウェアとテンプレートタグは、簡単に扱える `Cross Site Request "
"Forgeries`_ 対策を提供しています。このタイプの攻撃は、訪問者のログイン情報を"
"悪用してあなたのサイトに何らかの操作を行うことを目的とした、リンクやフォーム"
"ボタン、 JavaScript を設置した悪意のあるウェブサイトによって行われます。ま"
"た、関連する攻撃として、ユーザーを騙して別のユーザー権限でログインさせる 'ロ"
"グイン CSRF' と呼ばれる攻撃もありますが、これも対策に含まれます。"

msgid ""
"The first defense against CSRF attacks is to ensure that GET requests (and "
"other 'safe' methods, as defined by :rfc:`9110#section-9.2.1`) are side "
"effect free. Requests via 'unsafe' methods, such as POST, PUT, and DELETE, "
"can then be protected by the steps outlined in :ref:`using-csrf`."
msgstr ""
"CSRF 攻撃に対する第一の防御は、 GET リクエスト (および :rfc:"
"`9110#section-9.2.1` で定義された ‘安全な’ メソッド) から副作用を取り除くとい"
"うものです。そして、 POST、PUT、DELETE のような、’安全でない’ メソッドによる"
"リクエストについては、 :ref:`using-csrf` で説明されている手順で保護できます。"

msgid "The CSRF protection is based on the following things:"
msgstr "CSRF対策は以下のようなことを基本としています:"

msgid ""
"A CSRF cookie that is a random secret value, which other sites will not have "
"access to."
msgstr "他のサイトがアクセスできないランダムな秘密の値である CSRF クッキー。"

msgid ""
"``CsrfViewMiddleware`` sends this cookie with the response whenever ``django."
"middleware.csrf.get_token()`` is called. It can also send it in other cases. "
"For security reasons, the value of the secret is changed each time a user "
"logs in."
msgstr ""
"``CsrfViewMiddleware`` は ``django.middleware.csrf.get_token()`` が呼び出され"
"ると、常にこのクッキーをレスポンスと一緒に送信します。その他の場合にも送信で"
"きます。セキュリティ上の理由から、secret の値はユーザがログインするたびに変更"
"されます。"

msgid ""
"A hidden form field with the name 'csrfmiddlewaretoken', present in all "
"outgoing POST forms."
msgstr ""
"\"csrfmiddlewaretoken\" と名付けられた、すべての送信 POST フォームに存在する"
"隠しフォームフィールド。"

msgid ""
"In order to protect against `BREACH`_ attacks, the value of this field is "
"not simply the secret. It is scrambled differently with each response using "
"a mask. The mask is generated randomly on every call to ``get_token()``, so "
"the form field value is different each time."
msgstr ""
"`BREACH`_ 攻撃から守るために、このフィールドの値は単なる秘密ではありません。"
"マスクを使って、レスポンスごとに異なるスクランブルをかけます。マスクは "
"``get_token()`` を呼び出すたびにランダムに生成されるので、フォームフィールド"
"の値は毎回異なります。"

msgid "This part is done by the template tag."
msgstr "この動作はテンプレートタグによって行われます。"

msgid ""
"For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or "
"TRACE, a CSRF cookie must be present, and the 'csrfmiddlewaretoken' field "
"must be present and correct. If it isn't, the user will get a 403 error."
msgstr ""
"HTTP GET、HEAD、OPTIONS、または TRACE を使用していないすべての受信リクエスト"
"について、CSRF クッキーが存在し、\"csrfmiddlewaretoken\" フィールドが正しく存"
"在する必要があります。存在しない場合、ユーザは 403 エラーを受け取ります。"

msgid ""
"When validating the 'csrfmiddlewaretoken' field value, only the secret, not "
"the full token, is compared with the secret in the cookie value. This allows "
"the use of ever-changing tokens. While each request may use its own token, "
"the secret remains common to all."
msgstr ""
"\"csrfmiddlewaretoken\" フィールドの値を検証するとき、完全なトークンではなく"
"シークレットだけがクッキー値のシークレットと比較されます。これにより、常に変"
"化するトークンを使うことができます。各リクエストは固有のトークンを使うかもし"
"れませんが、シークレットはすべてのリクエストに共通のままです。"

msgid "This check is done by ``CsrfViewMiddleware``."
msgstr "このチェックは ``CsrfViewMiddleware`` によって行われます。"

msgid ""
"``CsrfViewMiddleware`` verifies the `Origin header`_, if provided by the "
"browser, against the current host and the :setting:`CSRF_TRUSTED_ORIGINS` "
"setting. This provides protection against cross-subdomain attacks."
msgstr ""
"``CsrfViewMiddleware`` はブラウザから提供された場合、現在のホストと :setting:"
"`CSRF_TRUSTED_ORIGINS` 設定に対して `Origin header`_ を検証します。これによ"
"り、クロスサブドメイン攻撃から保護されます。"

msgid ""
"In addition, for HTTPS requests, if the ``Origin`` header isn't provided, "
"``CsrfViewMiddleware`` performs strict referer checking. This means that "
"even if a subdomain can set or modify cookies on your domain, it can't force "
"a user to post to your application since that request won't come from your "
"own exact domain."
msgstr ""
"さらに、HTTPS リクエストの場合、``Origin`` ヘッダーが提供されない場合には、"
"``CsrfViewMiddleware`` は厳密なリファラチェックを実行します。これは、サブドメ"
"インがあなたのドメインに対してクッキーを設定または変更できるとしても、そのリ"
"クエストがあなた自身の正確なドメインから来ない限り、ユーザーがあなたのアプリ"
"ケーションに対して投稿を強制することはできないことを意味します。"

msgid ""
"This also addresses a man-in-the-middle attack that's possible under HTTPS "
"when using a session independent secret, due to the fact that HTTP ``Set-"
"Cookie`` headers are (unfortunately) accepted by clients even when they are "
"talking to a site under HTTPS. (Referer checking is not done for HTTP "
"requests because the presence of the ``Referer`` header isn't reliable "
"enough under HTTP.)"
msgstr ""
"これはまた、セッションに依存しない秘密を使用するときに HTTPS で可能な中間者攻"
"撃 (man-in-the-middle attack) に対処するためでもあります。 HTTP の ``Set-"
"Cookie`` ヘッダは (残念ながら) クライアントが HTTPS でサイトと通信していると"
"きでも受け付けられます。 (``Referer`` ヘッダーの存在が HTTP 下では十分に信頼"
"できないため、HTTP リクエストに対してはリファラチェックは行われません。)"

msgid ""
"If the :setting:`CSRF_COOKIE_DOMAIN` setting is set, the referer is compared "
"against it. You can allow cross-subdomain requests by including a leading "
"dot. For example, ``CSRF_COOKIE_DOMAIN = '.example.com'`` will allow POST "
"requests from ``www.example.com`` and ``api.example.com``. If the setting is "
"not set, then the referer must match the HTTP ``Host`` header."
msgstr ""
"もし :setting:`CSRF_COOKIE_DOMAIN` 設定が設定されていれば、リファラはその設定"
"と比較されます。先頭のドットを指定することで、クロスサブドメインリクエストを"
"許可できます。たとえば、``CSRF_COOKIE_DOMAIN = '.example.com'`` は ``www."
"example.com`` と ``api.example.com`` からの POST リクエストを許可します。この"
"設定が設定されていない場合、referer は HTTP の ``Host`` ヘッダと一致しなけれ"
"ばなりません。"

msgid ""
"Expanding the accepted referers beyond the current host or cookie domain can "
"be done with the :setting:`CSRF_TRUSTED_ORIGINS` setting."
msgstr ""
":setting:`CSRF_TRUSTED_ORIGINS` 設定により、現在のホストやクッキーのドメイン"
"を超えてリファラを拡張できます。"

msgid ""
"This ensures that only forms that have originated from trusted domains can "
"be used to POST data back."
msgstr ""
"これにより、信頼できるドメインから送信されたフォームだけが、データを POST す"
"るために使用できるようになります。"

msgid ""
"It deliberately ignores GET requests (and other requests that are defined as "
"'safe' by :rfc:`9110#section-9.2.1`). These requests ought never to have any "
"potentially dangerous side effects, and so a CSRF attack with a GET request "
"ought to be harmless. :rfc:`9110#section-9.2.1` defines POST, PUT, and "
"DELETE as 'unsafe', and all other methods are also assumed to be unsafe, for "
"maximum protection."
msgstr ""
"GET リクエスト（および :rfc:`9110#section-9.2.1` によって「安全」と定義されて"
"いる他のリクエスト）を意図的に無視します。これらのリクエストは決して潜在的に"
"危険な副作用を持つべきではなく、したがって GET リクエストを使用した CSRF 攻撃"
"は無害であるべきです。 :rfc:`9110#section-9.2.1` は POST、PUT、DELETE を「安"
"全でない」と定義し、最大限の保護のためには、他のすべてのメソッドも安全でない"
"とみなされます。"

msgid ""
"The CSRF protection cannot protect against man-in-the-middle attacks, so "
"use :ref:`HTTPS <security-recommendation-ssl>` with :ref:`http-strict-"
"transport-security`. It also assumes :ref:`validation of the HOST header "
"<host-headers-virtual-hosting>` and that there aren't any :ref:`cross-site "
"scripting vulnerabilities <cross-site-scripting>` on your site (because XSS "
"vulnerabilities already let an attacker do anything a CSRF vulnerability "
"allows and much worse)."
msgstr ""
"CSRF保護は中間者攻撃に対して保護することはできませんので、:ref:`HTTPS "
"<security-recommendation-ssl>` を :ref:`http-strict-transport-security` と共"
"に使用してください。また、:ref:`HOSTヘッダーの検証 <host-headers-virtual-"
"hosting>` が行われていること、およびサイト上に :ref:`クロスサイトスクリプティ"
"ングの脆弱性 <cross-site-scripting>` が存在しないことを前提としています（なぜ"
"なら、XSSの脆弱性は既に攻撃者がCSRFの脆弱性を利用して行えること、そしてそれ以"
"上のことを可能にするからです）。"

msgid "Removing the ``Referer`` header"
msgstr "リファラヘッダーの削除"

msgid ""
"To avoid disclosing the referrer URL to third-party sites, you might want to "
"`disable the referer`_ on your site's ``<a>`` tags. For example, you might "
"use the ``<meta name=\"referrer\" content=\"no-referrer\">`` tag or include "
"the ``Referrer-Policy: no-referrer`` header. Due to the CSRF protection's "
"strict referer checking on HTTPS requests, those techniques cause a CSRF "
"failure on requests with 'unsafe' methods. Instead, use alternatives like "
"``<a rel=\"noreferrer\" ...>\"`` for links to third-party sites."
msgstr ""
"サードパーティのサイトにリファラURLを公開しないようにするには、自分のサイト"
"の ``<a>`` タグでリファラを無効にするとよいでしょう ( `disable the "
"referer`_ ) 。たとえば、 ``<meta name=\"referrer\" content=\"no-"
"referrer\">`` タグを使うか、 ``Referrer-Policy: no-referrer`` ヘッダを含めま"
"す。CSRF による HTTPS リクエストの厳格な参照元チェックにより、これらのテク"
"ニックは「安全でない」メソッドを含むリクエストで CSRF 失敗の原因となります。"
"代わりに、サードパーティのサイトへのリンクには ``<a rel=\"noreferrer\" ..."
">\"`` のような代替手段を使用してください。"

msgid ""
"Subdomains within a site will be able to set cookies on the client for the "
"whole domain. By setting the cookie and using a corresponding token, "
"subdomains will be able to circumvent the CSRF protection. The only way to "
"avoid this is to ensure that subdomains are controlled by trusted users (or, "
"are at least unable to set cookies). Note that even without CSRF, there are "
"other vulnerabilities, such as session fixation, that make giving subdomains "
"to untrusted parties a bad idea, and these vulnerabilities cannot easily be "
"fixed with current browsers."
msgstr ""
"サイト内のサブドメインは、ドメイン全体のクライアントにクッキーを設定できま"
"す。クッキーを設定し、対応するトークンを使うことで、サブドメインは CSRF 防御"
"を回避できます。これを避ける唯一の方法は、サブドメインが信頼されたユーザに"
"よって管理される（あるいは、少なくともクッキーを設定できない）ようにすること"
"です。CSRF がなくても、セッションの固定化など、サブドメインを信頼できない相手"
"に与えることを悪用する脆弱性は他にもあり、これらの脆弱性は現在のブラウザでは"
"簡単に修正できないことに注意してください。"

msgid "Utilities"
msgstr "ユーティリティ"

msgid ""
"The examples below assume you are using function-based views. If you are "
"working with class-based views, you can refer to :ref:`Decorating class-"
"based views<decorating-class-based-views>`."
msgstr ""
"以下の例では、関数ベースのビューを使っていることを想定しています。クラスベー"
"スのビューを使っている場合は、:ref:`Decorating class-based views<decorating-"
"class-based-views>` を参照してください。"

msgid ""
"This decorator marks a view as being exempt from the protection ensured by "
"the middleware. Example::"
msgstr ""
"このデコレータは、ビューがミドルウェアによる保護の対象外であることを示しま"
"す。例:"

msgid "Support for wrapping asynchronous view functions was added."
msgstr "非同期ビュー関数のラップをサポートしました。"

msgid ""
"Decorator that provides the protection of ``CsrfViewMiddleware`` to a view."
msgstr "ビューに対する ``CsrfViewMiddleware`` の保護を提供するデコレータです。"

msgid "Usage::"
msgstr "使い方は以下の通りです::"

msgid ""
"Normally the :ttag:`csrf_token` template tag will not work if "
"``CsrfViewMiddleware.process_view`` or an equivalent like ``csrf_protect`` "
"has not run. The view decorator ``requires_csrf_token`` can be used to "
"ensure the template tag does work. This decorator works similarly to "
"``csrf_protect``, but never rejects an incoming request."
msgstr ""
"通常 :ttag:`csrf_token` テンプレートタグは ``CsrfViewMiddleware."
"process_view`` または ``csrf_protect`` のような等価なものが実行されていないと"
"動作しません。ビューデコレータ ``requires_csrf_token`` を使用すると、テンプ"
"レートタグを確実に動作させることができます。このデコレータは "
"``csrf_protect`` と同様に動作しますが、リクエストを拒否することはありません。"

msgid "This decorator forces a view to send the CSRF cookie."
msgstr "このデコレータはビューに強制的に CSRF クッキーを送信させます。"

msgid "A number of settings can be used to control Django's CSRF behavior:"
msgstr "Django の CSRF 動作を制御するための、多くの設定があります:"

msgid ":setting:`CSRF_COOKIE_AGE`"
msgstr ":setting:`CSRF_COOKIE_AGE`"

msgid ":setting:`CSRF_COOKIE_DOMAIN`"
msgstr ":setting:`CSRF_COOKIE_DOMAIN`"

msgid ":setting:`CSRF_COOKIE_HTTPONLY`"
msgstr ":setting:`CSRF_COOKIE_HTTPONLY`"

msgid ":setting:`CSRF_COOKIE_NAME`"
msgstr ":setting:`CSRF_COOKIE_NAME`"

msgid ":setting:`CSRF_COOKIE_PATH`"
msgstr ":setting:`CSRF_COOKIE_PATH`"

msgid ":setting:`CSRF_COOKIE_SAMESITE`"
msgstr ":setting:`CSRF_COOKIE_SAMESITE`"

msgid ":setting:`CSRF_COOKIE_SECURE`"
msgstr ":setting:`CSRF_COOKIE_SECURE`"

msgid ":setting:`CSRF_FAILURE_VIEW`"
msgstr ":setting:`CSRF_FAILURE_VIEW`"

msgid ":setting:`CSRF_HEADER_NAME`"
msgstr ":setting:`CSRF_HEADER_NAME`"

msgid ":setting:`CSRF_TRUSTED_ORIGINS`"
msgstr ":setting:`CSRF_TRUSTED_ORIGINS`"

msgid ":setting:`CSRF_USE_SESSIONS`"
msgstr ":setting:`CSRF_USE_SESSIONS`"

msgid "Frequently Asked Questions"
msgstr "よくある質問"

msgid ""
"Is posting an arbitrary CSRF token pair (cookie and POST data) a "
"vulnerability?"
msgstr ""
"任意の CSRF トークンのペア(クッキーと POST データ)を投稿するのは脆弱性ではな"
"いですか?"

msgid ""
"No, this is by design. Without a man-in-the-middle attack, there is no way "
"for an attacker to send a CSRF token cookie to a victim's browser, so a "
"successful attack would need to obtain the victim's browser's cookie via XSS "
"or similar, in which case an attacker usually doesn't need CSRF attacks."
msgstr ""
"いいえ、これは設計によるものです。中間者攻撃がなければ、攻撃者が CSRF トーク"
"ン・クッキーを被害者のブラウザに送信する方法はありません。したがって、攻撃を"
"成功させるには、XSS などによって被害者のブラウザのクッキーを取得する必要があ"
"りますが、その場合、攻撃者は通常 CSRF 攻撃を必要としません。"

msgid ""
"Some security audit tools flag this as a problem but as mentioned before, an "
"attacker cannot steal a user's browser's CSRF cookie. \"Stealing\" or "
"modifying *your own* token using Firebug, Chrome dev tools, etc. isn't a "
"vulnerability."
msgstr ""
"セキュリティ監査ツールの中には、これを問題視するものもありますが、前述のよう"
"に、攻撃者はユーザのブラウザの CSRF クッキーを盗むことはできません。Firebugや"
"Chromeの開発ツールなどを使って *自分自身* のトークンを「盗んだり」修正したり"
"することは脆弱性ではありません。"

msgid ""
"Is it a problem that Django's CSRF protection isn't linked to a session by "
"default?"
msgstr ""
"Django の CSRF 防御がデフォルトでセッションにリンクされていないのは問題ではな"
"いですか？"

msgid ""
"No, this is by design. Not linking CSRF protection to a session allows using "
"the protection on sites such as a *pastebin* that allow submissions from "
"anonymous users which don't have a session."
msgstr ""
"いいえ、これは設計によるものです。CSRF 防御をセッションにリンクしないこと"
"で、 *pastebin* のような、セッションを持たない匿名ユーザからの投稿を許可する"
"サイトで保護を使用できます。"

msgid ""
"If you wish to store the CSRF token in the user's session, use the :setting:"
"`CSRF_USE_SESSIONS` setting."
msgstr ""
"CSRF トークンをユーザのセッションに保存したい場合は、 :setting:"
"`CSRF_USE_SESSIONS` 設定を使用します。"

msgid "Why might a user encounter a CSRF validation failure after logging in?"
msgstr "ログイン後に CSRF 検証に失敗するのはなぜですか？"

msgid ""
"For security reasons, CSRF tokens are rotated each time a user logs in. Any "
"page with a form generated before a login will have an old, invalid CSRF "
"token and need to be reloaded. This might happen if a user uses the back "
"button after a login or if they log in a different browser tab."
msgstr ""
"セキュリティ上の理由から、CSRF トークンはユーザがログインするたびにローテー"
"ションされます。ログイン前にフォームが生成されたページは、古くて無効な CSRF "
"トークンを持つことになり、再読み込みが必要になります。これは、ユーザがログイ"
"ン後に戻るボタンを使用した場合や、別のブラウザのタブでログインした場合に発生"
"することがあります。"

msgid "Databases"
msgstr "データベース"

msgid "Django officially supports the following databases:"
msgstr "Django は次のデータベースを公式にサポートしています。"

msgid ":ref:`PostgreSQL <postgresql-notes>`"
msgstr ":ref:`PostgreSQL <postgresql-notes>`"

msgid ":ref:`MariaDB <mariadb-notes>`"
msgstr ":ref:`MariaDB <mariadb-notes>`"

msgid ":ref:`MySQL <mysql-notes>`"
msgstr ":ref:`MySQL <mysql-notes>`"

msgid ":ref:`Oracle <oracle-notes>`"
msgstr ":ref:`Oracle <oracle-notes>`"

msgid ":ref:`SQLite <sqlite-notes>`"
msgstr ":ref:`SQLite <sqlite-notes>`"

msgid ""
"There are also a number of :ref:`database backends provided by third parties "
"<third-party-notes>`."
msgstr ""
":ref:`サードパーティから提供されているデータベースバックエンド <third-party-"
"notes>` も多数あります。"

msgid ""
"Django attempts to support as many features as possible on all database "
"backends. However, not all database backends are alike, and we've had to "
"make design decisions on which features to support and which assumptions we "
"can make safely."
msgstr ""
"Django はすべてのデータベースで可能な限り多くの機能をサポートするように努めて"
"います。しかし、すべてのデータベースバックエンドが似ているわけではないため、"
"どの機能をサポートし、どのような前提なら安全に想定できるのかについて、設計上"
"の決断を下す必要がありました。"

msgid ""
"This file describes some of the features that might be relevant to Django "
"usage. It is not intended as a replacement for server-specific documentation "
"or reference manuals."
msgstr ""
"このファイルは Django の利用に関係する可能性のある一部の機能を説明していま"
"す。サーバー固有のドキュメントやリファレンスマニュアルを置換することを意図し"
"たものではありません。"

msgid "General notes"
msgstr "一般的なメモ"

msgid "Persistent connections"
msgstr "持続的 (persistent) な接続"

msgid ""
"Persistent connections avoid the overhead of reestablishing a connection to "
"the database in each HTTP request. They're controlled by the :setting:"
"`CONN_MAX_AGE` parameter which defines the maximum lifetime of a connection. "
"It can be set independently for each database."
msgstr ""
"持続的な接続は HTTP リクエストごとにデータベースへの接続を再確立するオーバー"
"ヘッドを回避します。持続的な接続は接続の最大寿命を定義する :setting:"
"`CONN_MAX_AGE` パラメータによって制御されます。このパラメータはデータベースご"
"とに個別に設定できます。"

msgid ""
"The default value is ``0``, preserving the historical behavior of closing "
"the database connection at the end of each request. To enable persistent "
"connections, set :setting:`CONN_MAX_AGE` to a positive integer of seconds. "
"For unlimited persistent connections, set it to ``None``."
msgstr ""
"デフォルト値は ``0`` で、各リクエストの終了時にデータベース接続をクローズする"
"という従来の動作を維持します。持続的な接続を有効にするには、 :setting:"
"`CONN_MAX_AGE` に秒単位の正の整数を設定します。持続的な接続を無制限にするに"
"は、``None`` に設定します。"

msgid "Connection management"
msgstr "接続管理"

msgid ""
"Django opens a connection to the database when it first makes a database "
"query. It keeps this connection open and reuses it in subsequent requests. "
"Django closes the connection once it exceeds the maximum age defined by :"
"setting:`CONN_MAX_AGE` or when it isn't usable any longer."
msgstr ""
"Django は、最初にデータベースへの問い合わせを行うときに、データベースへの接続"
"をオープンします。Django はこの接続をオープンしたままにしておき、その後のリク"
"エストで再利用します。Django は接続が :setting:`CONN_MAX_AGE` で定義された最"
"大寿命を超えたり、それ以上使えなくなると接続をクローズします。"

msgid ""
"In detail, Django automatically opens a connection to the database whenever "
"it needs one and doesn't have one already — either because this is the first "
"connection, or because the previous connection was closed."
msgstr ""
"正確には、Djangoは必要なときに、または接続がない場合（これが最初の接続である"
"か、前の接続がクローズされていた場合）に自動的にデータベースへの接続をオープ"
"ンします。"

msgid ""
"At the beginning of each request, Django closes the connection if it has "
"reached its maximum age. If your database terminates idle connections after "
"some time, you should set :setting:`CONN_MAX_AGE` to a lower value, so that "
"Django doesn't attempt to use a connection that has been terminated by the "
"database server. (This problem may only affect very low traffic sites.)"
msgstr ""
"各リクエストの最初に、Django は接続が最大寿命に達した場合、接続をクローズしま"
"す。もしデータベースがアイドル状態の接続をしばらくしてから終了するのであれ"
"ば、 :setting:`CONN_MAX_AGE` を低い値に設定して、Django がデータベースサーバ"
"にすでに終了した接続を使おうとしないようにすべきです。(この問題は、非常にトラ"
"フィックの少ないサイトにしか影響しないかもしれません)。"

msgid ""
"At the end of each request, Django closes the connection if it has reached "
"its maximum age or if it is in an unrecoverable error state. If any database "
"errors have occurred while processing the requests, Django checks whether "
"the connection still works, and closes it if it doesn't. Thus, database "
"errors affect at most one request per each application's worker thread; if "
"the connection becomes unusable, the next request gets a fresh connection."
msgstr ""
"各リクエストの終了時に、 Django は接続が最大寿命に達していたり、回復不可能な"
"エラー状態になっていたりすると、接続をクローズします。リクエストの処理中に"
"データベースエラーが発生した場合、 Django は接続がまだ動作しているかどうかを"
"チェックし、動作していなければ接続をクローズします。接続が使えなくなると、次"
"のリクエストは新しい接続を取得します。"

msgid ""
"Setting :setting:`CONN_HEALTH_CHECKS` to ``True`` can be used to improve the "
"robustness of connection reuse and prevent errors when a connection has been "
"closed by the database server which is now ready to accept and serve new "
"connections, e.g. after database server restart. The health check is "
"performed only once per request and only if the database is being accessed "
"during the handling of the request."
msgstr ""
":setting:`CONN_HEALTH_CHECKS` を ``True`` に設定することで、接続の再利用の堅"
"牢性を向上させ、データベースサーバーによって接続がクローズされた後に新しい接"
"続を受け入れて提供する準備ができている場合（例えば、データベースサーバーの再"
"起動後など）にエラーを防ぐことができます。ヘルスチェックはリクエストごとに一"
"度だけ実行され、リクエストの処理中にデータベースがアクセスされている場合のみ"
"実行されます。"

msgid "Caveats"
msgstr "注意事項"

msgid ""
"Since each thread maintains its own connection, your database must support "
"at least as many simultaneous connections as you have worker threads."
msgstr ""
"各スレッドは独自の接続を維持するため、データベースは少なくともワーカースレッ"
"ドと同数の同時接続をサポートする必要があります。"

msgid ""
"Sometimes a database won't be accessed by the majority of your views, for "
"example because it's the database of an external system, or thanks to "
"caching. In such cases, you should set :setting:`CONN_MAX_AGE` to a low "
"value or even ``0``, because it doesn't make sense to maintain a connection "
"that's unlikely to be reused. This will help keep the number of simultaneous "
"connections to this database small."
msgstr ""
"データベースが外部システムのデータベースであったり、キャッシュのおかげで"
"ビューの大部分からアクセスされないことがあります。このような場合、 :setting:"
"`CONN_MAX_AGE` を低い値、あるいは ``0`` に設定する必要があります。これによ"
"り、このデータベースへの同時接続数を少なく保つことができます。"

msgid ""
"The development server creates a new thread for each request it handles, "
"negating the effect of persistent connections. Don't enable them during "
"development."
msgstr ""
"開発用サーバはリクエストを処理するたびに新しいスレッドを生成し、 持続的な接続"
"の効果を無効にします。開発中は有効にしないでください。"

msgid ""
"When Django establishes a connection to the database, it sets up appropriate "
"parameters, depending on the backend being used. If you enable persistent "
"connections, this setup is no longer repeated every request. If you modify "
"parameters such as the connection's isolation level or time zone, you should "
"either restore Django's defaults at the end of each request, force an "
"appropriate value at the beginning of each request, or disable persistent "
"connections."
msgstr ""
"Django がデータベースへの接続を確立するとき、使われているバックエンドに応じて"
"適切なパラメータを設定します。持続的な接続を有効にすると、この設定はリクエス"
"トの度に繰り返されなくなります。接続の分離レベルやタイムゾーンなどのパラメー"
"タを変更した場合は、リクエストの最後に Django のデフォルトに戻すか、リクエス"
"トの最初に適切な値を設定するか、持続的な接続を無効にしてください。"

msgid ""
"If a connection is created in a long-running process, outside of Django’s "
"request-response cycle, the connection will remain open until explicitly "
"closed, or timeout occurs."
msgstr ""
"接続が Django のリクエスト/レスポンスサイクルの外側の、長く実行されるプロセス"
"で作成された場合、接続は明示的にクローズされるか、タイムアウトが発生するまで"
"オープンされたままになります。"

msgid "Encoding"
msgstr "エンコーディング"

msgid ""
"Django assumes that all databases use UTF-8 encoding. Using other encodings "
"may result in unexpected behavior such as \"value too long\" errors from "
"your database for data that is valid in Django. See the database specific "
"notes below for information on how to set up your database correctly."
msgstr ""
"Django はすべてのデータベースが UTF-8 エンコーディングを使用することを想定し"
"ています。他のエンコーディングを使用すると、Django にとっては有効なデータに対"
"して、データベースから「value too long (値が大きすぎる)」エラーなどの予期しな"
"い動作が起こる可能性があります。データベースを正しく設定する方法については、"
"以下のデータベース固有のノートを確認してください。"

msgid "PostgreSQL notes"
msgstr "PostgreSQL に関するノート"

msgid ""
"Django supports PostgreSQL 12 and higher. `psycopg`_ 3.1.8+ or `psycopg2`_ "
"2.8.4+ is required, though the latest `psycopg`_ 3.1.8+ is recommended."
msgstr ""
"Django は PostgreSQL 12 以上をサポートします。`psycopg`_ 3.1.8+ または "
"`psycopg2`_ 2.8.4+ が必要ですが、最新の `psycopg`_ 3.1.8+ が推奨されます。"

msgid ""
"Support for ``psycopg2`` is likely to be deprecated and removed at some "
"point in the future."
msgstr ""
"``psycopg2`` のサポートは、将来のある時点で非推奨となり削除される可能性があり"
"ます。"

msgid "PostgreSQL connection settings"
msgstr "PostgreSQL の接続設定"

msgid "See :setting:`HOST` for details."
msgstr "詳細は :setting:`HOST` を参照してください。"

msgid ""
"To connect using a service name from the `connection service file`_ and a "
"password from the `password file`_, you must specify them in the :setting:"
"`OPTIONS` part of your database configuration in :setting:`DATABASES`:"
msgstr ""
"`connection service file`_ のサービス名と `password file`_ のパスワードを使用"
"して接続するためには、それらを :setting:`DATABASES` 内のデータベース設定の :"
"setting:`OPTIONS` 部分で指定しなければなりません。"

msgid "``settings.py``"
msgstr "``settings.py``"

msgid "``.pg_service.conf``"
msgstr "``.pg_service.conf``"

msgid "``.my_pgpass``"
msgstr "``.my_pgpass``"

msgid ""
"The PostgreSQL backend passes the content of :setting:`OPTIONS` as keyword "
"arguments to the connection constructor, allowing for more advanced control "
"of driver behavior. All available `parameters`_ are described in detail in "
"the PostgreSQL documentation."
msgstr ""
"PostgreSQLバックエンドは :setting:`OPTIONS` の内容をキーワード引数として接続"
"コンストラクタに渡します。これにより、ドライバの動作をより高度に制御できま"
"す。利用可能なすべての `parameters`_ についてはPostgreSQLのドキュメントで詳し"
"く説明されています。"

msgid ""
"Using a service name for testing purposes is not supported. This :ticket:"
"`may be implemented later <33685>`."
msgstr ""
"テスト目的のサービス名の使用はサポートされていません。これは :ticket:`将来実"
"装される可能性があります <33685>` 。"

msgid "Optimizing PostgreSQL's configuration"
msgstr "PostgreSQL の設定を最適化する"

msgid "Django needs the following parameters for its database connections:"
msgstr "Django はデータベース接続のために次のパラメータが必要です。"

msgid "``client_encoding``: ``'UTF8'``,"
msgstr "``client_encoding``: ``'UTF8'``,"

msgid ""
"``default_transaction_isolation``: ``'read committed'`` by default, or the "
"value set in the connection options (see below),"
msgstr ""
"``default_transaction_isolation``: デフォルトの ``'read committed'`` または接"
"続オプションで設定した値 (以下を参照)。"

msgid "``timezone``:"
msgstr "``timezone``:"

msgid ""
"when :setting:`USE_TZ` is ``True``, ``'UTC'`` by default, or the :setting:"
"`TIME_ZONE <DATABASE-TIME_ZONE>` value set for the connection,"
msgstr ""
":setting:`USE_TZ` が ``True`` のとき、デフォルトの ``'UTC'`` または接続のため"
"に設定した :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` の値。"

msgid ""
"when :setting:`USE_TZ` is ``False``, the value of the global :setting:"
"`TIME_ZONE` setting."
msgstr ""
":setting:`USE_TZ` が ``False`` のとき、グローバルの :setting:`TIME_ZONE` 設定"
"の値。"

msgid ""
"If these parameters already have the correct values, Django won't set them "
"for every new connection, which improves performance slightly. You can "
"configure them directly in :file:`postgresql.conf` or more conveniently per "
"database user with `ALTER ROLE`_."
msgstr ""
"これらのパラメータがすでに正しい値を持っている場合、 Django は新しい接続のた"
"びにパラメータを設定しないので、パフォーマンスが少し改善されます。これらのパ"
"ラメータは :file:`postgresql.conf` で直接設定することもできますし、 `ALTER "
"ROLE`_ でデータベースユーザごとに設定することもできます。"

msgid ""
"Django will work just fine without this optimization, but each new "
"connection will do some additional queries to set these parameters."
msgstr ""
"Django はこの最適化なしでも問題なく動作しますが、新しい接続のたびに、これらの"
"パラメータを設定するために追加のクエリを実行します。"

msgid "Isolation level"
msgstr "分離レベル (isolation level)"

msgid ""
"Like PostgreSQL itself, Django defaults to the ``READ COMMITTED`` `isolation "
"level`_. If you need a higher isolation level such as ``REPEATABLE READ`` or "
"``SERIALIZABLE``, set it in the :setting:`OPTIONS` part of your database "
"configuration in :setting:`DATABASES`::"
msgstr ""
"PostgreSQL 自体と同様に、Django のデフォルトは ``READ COMMITTED`` の "
"`isolation level`_ に設定されています。``REPEATABLE READ`` や "
"``SERIALIZABLE`` などのより高いレベルの分離レベルが必要な場合は、:setting:"
"`DATABASES` 内のデータベース設定の :setting:`OPTIONS` 部分に指定してくださ"
"い。"

msgid ""
"Under higher isolation levels, your application should be prepared to handle "
"exceptions raised on serialization failures. This option is designed for "
"advanced uses."
msgstr ""
"より高い分離レベルのもとでは、アプリケーションはシリアライズの失敗時に発生す"
"る例外を処理できるように準備しておく必要があります。このオプションは高度な利"
"用のために設計されています。"

msgid "``IsolationLevel`` was added."
msgstr "``IsolationLevel`` が追加されました。"

msgid "Role"
msgstr "ロール"

msgid ""
"If you need to use a different role for database connections than the role "
"use to establish the connection, set it in the :setting:`OPTIONS` part of "
"your database configuration in :setting:`DATABASES`::"
msgstr ""
"データベース接続のためにコネクションの確立に使用するロールとは別のロールを使"
"用する必要がある場合は、次のように :setting:`DATABASES` 内のデータベース設定"
"の :setting:`OPTIONS` 部分で指定してください。"

msgid "Server-side parameters binding"
msgstr "サーバーサイド パラメータ バインディング"

msgid ""
"With `psycopg`_ 3.1.8+, Django defaults to the :ref:`client-side binding "
"cursors <psycopg:client-side-binding-cursors>`. If you want to use the :ref:"
"`server-side binding <psycopg:server-side-binding>` set it in the :setting:"
"`OPTIONS` part of your database configuration in :setting:`DATABASES`::"
msgstr ""
"`psycopg`_ 3.1.8+ では、Django のデフォルトは :ref:`クライアントサイド・バイ"
"ンディングカーソル <psycopg:client-side-binding-cursors>` です。もし :ref:`"
"サーバーサイド・バインディング <psycopg:server-side-binding>` を使いたい場合"
"は、 :setting:`DATABASES` のデータベース設定の :setting:`OPTIONS` の部分で設"
"定してください："

msgid "This option is ignored with ``psycopg2``."
msgstr "このオプションは ``psycopg2`` では無視されます。"

msgid "Indexes for ``varchar`` and ``text`` columns"
msgstr "``varchar`` カラムと ``text`` カラムのインデックス"

msgid ""
"When specifying ``db_index=True`` on your model fields, Django typically "
"outputs a single ``CREATE INDEX`` statement.  However, if the database type "
"for the field is either ``varchar`` or ``text`` (e.g., used by "
"``CharField``, ``FileField``, and ``TextField``), then Django will create an "
"additional index that uses an appropriate `PostgreSQL operator class`_ for "
"the column.  The extra index is necessary to correctly perform lookups that "
"use the ``LIKE`` operator in their SQL, as is done with the ``contains`` and "
"``startswith`` lookup types."
msgstr ""
"モデルフィールドに ``db_index=True`` を指定すると、Django は通常 1 つの "
"``CREATE INDEX`` ステートメントを出力します。しかし、フィールドのデータベース"
"タイプが ``varchar`` か ``text`` (例えば、 ``CharField``、 ``FileField``、 "
"``TextField`` で使われます) の場合、Django はカラムに適切な `PostgreSQL "
"operator class`_ を使う追加のインデックスを作成します。この追加インデックス"
"は、 ``contains`` や ``startswith`` のような ``LIKE`` 演算子を SQL で使った"
"ルックアップを正しく実行するために必要です。"

msgid "Migration operation for adding extensions"
msgstr "拡張機能を追加するためのマイグレーション・オペレーション"

msgid ""
"If you need to add a PostgreSQL extension (like ``hstore``, ``postgis``, "
"etc.) using a migration, use the :class:`~django.contrib.postgres.operations."
"CreateExtension` operation."
msgstr ""
"マイグレーションを使用して PostgreSQL 拡張機能 (``hstore`` や ``postgis`` な"
"ど) を追加する必要がある場合は、 :class:`~django.contrib.postgres.operations."
"CreateExtension` オペレーションを使用してください。"

msgid "Server-side cursors"
msgstr "サーバーサイド・カーソル"

msgid ""
"When using :meth:`QuerySet.iterator() <django.db.models.query.QuerySet."
"iterator>`, Django opens a :ref:`server-side cursor <psycopg:server-side-"
"cursors>`. By default, PostgreSQL assumes that only the first 10% of the "
"results of cursor queries will be fetched. The query planner spends less "
"time planning the query and starts returning results faster, but this could "
"diminish performance if more than 10% of the results are retrieved. "
"PostgreSQL's assumptions on the number of rows retrieved for a cursor query "
"is controlled with the `cursor_tuple_fraction`_ option."
msgstr ""
":meth:`QuerySet.iterator() <django.db.models.query.QuerySet.iterator>` を使う"
"と、 Django は :ref:`サーバーサイドカーソル <psycopg:server-side-cursors>` を"
"オープンします。デフォルトでは、PostgreSQL はカーソルクエリの結果の最初の10%"
"だけがフェッチされると仮定しています。クエリプランナはクエリの計画に費やす時"
"間を減らし、より速く結果を返すようになりますが、結果の10%以上が取得された場"
"合、性能が低下する可能性があります。PostgreSQLがカーソルクエリで取得する行数"
"に関する仮定を制御するには、 `cursor_tuple_fraction`_ オプションを使用してく"
"ださい。"

msgid "Transaction pooling and server-side cursors"
msgstr "トランザクションプールとサーバーサイドカーソル"

msgid ""
"Using a connection pooler in transaction pooling mode (e.g. `PgBouncer`_) "
"requires disabling server-side cursors for that connection."
msgstr ""
"トランザクションプーリングモード（たとえば、`PgBouncer`_ ）で接続プーラを使用"
"するには、その接続のサーバーサイドカーソルを無効にする必要があります。"

msgid ""
"Server-side cursors are local to a connection and remain open at the end of "
"a transaction when :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` is ``True``. "
"A subsequent transaction may attempt to fetch more results from a server-"
"side cursor. In transaction pooling mode, there's no guarantee that "
"subsequent transactions will use the same connection. If a different "
"connection is used, an error is raised when the transaction references the "
"server-side cursor, because server-side cursors are only accessible in the "
"connection in which they were created."
msgstr ""
"サーバーサイドカーソルは接続に対してローカルに存在し、 :setting:`AUTOCOMMIT "
"<DATABASE-AUTOCOMMIT>` が ``True`` の場合、トランザクションの終了時にも接続を"
"オープンしたままにします。後続のトランザクションはサーバーサイドカーソルから"
"より多くの結果を取得しようとするかもしれません。トランザクションプーリング"
"モードでは、後続のトランザクションが同じ接続を使用するという保証はありませ"
"ん。異なる接続が使用される場合、トランザクションがサーバーサイドカーソルを参"
"照する時にエラーが発生します。サーバーサイドカーソルは、それが作成された接続"
"でのみアクセス可能だからです。"

msgid ""
"One solution is to disable server-side cursors for a connection in :setting:"
"`DATABASES` by setting :setting:`DISABLE_SERVER_SIDE_CURSORS <DATABASE-"
"DISABLE_SERVER_SIDE_CURSORS>` to ``True``."
msgstr ""
"一つの解決策は、 :setting:`DATABASES` で :setting:"
"`DISABLE_SERVER_SIDE_CURSORS <DATABASE-DISABLE_SERVER_SIDE_CURSORS>` を "
"``True`` に設定して、接続のサーバーサイドカーソルを無効にすることです。"

msgid ""
"To benefit from server-side cursors in transaction pooling mode, you could "
"set up :doc:`another connection to the database </topics/db/multi-db>` in "
"order to perform queries that use server-side cursors. This connection needs "
"to either be directly to the database or to a connection pooler in session "
"pooling mode."
msgstr ""
"トランザクションプーリングモードでサーバーサイドカーソルの恩恵を受けるには、"
"サーバーサイドカーソルを使用するクエリを実行するために、:doc:`データベースへ"
"のもう1つの接続 </topics/db/multi-db>` を設定します。この接続はデータベースに"
"直接接続するか、セッションプーリングモードの接続プーラに接続する必要がありま"
"す。"

msgid ""
"Another option is to wrap each ``QuerySet`` using server-side cursors in an :"
"func:`~django.db.transaction.atomic` block, because it disables "
"``autocommit`` for the duration of the transaction. This way, the server-"
"side cursor will only live for the duration of the transaction."
msgstr ""
"もう一つの方法は、サーバーサイドのカーソルを使用している ``QuerySet`` を :"
"func:`~django.db.transaction.atomic` ブロックでラップすることです。これはトラ"
"ンザクションの間、 ``autocommit`` を無効にするからです。これにより、サーバー"
"サイドカーソルはトランザクションの間だけ生きることになります。"

msgid "Manually-specifying values of auto-incrementing primary keys"
msgstr "自動インクリメントの主キーの値を手動で指定する"

msgid ""
"Django uses PostgreSQL's identity columns to store auto-incrementing primary "
"keys. An identity column is populated with values from a `sequence`_ that "
"keeps track of the next available value. Manually assigning a value to an "
"auto-incrementing field doesn't update the field's sequence, which might "
"later cause a conflict. For example:"
msgstr ""
"Django は自動インクリメントの主キーを格納するために PostgreSQL の identity カ"
"ラムを使います。identity カラムには、次に利用可能な値を追跡する `sequence`_ "
"の値が代入されます。自動インクリメントのフィールドに手動で値を代入しても、"
"フィールドのシーケンスは更新されません。たとえば下記のようになります："

msgid ""
"If you need to specify such values, reset the sequence afterward to avoid "
"reusing a value that's already in the table. The :djadmin:`sqlsequencereset` "
"management command generates the SQL statements to do that."
msgstr ""
"そのような値を指定する必要がある場合は、既にテーブルにある値を再利用しないよ"
"うに、後でシーケンスをリセットしてください。 :djadmin:`sqlsequencereset` 管理"
"コマンドはそのための SQL 文を生成します。"

msgid "Test database templates"
msgstr "テストデータベースのテンプレート"

msgid ""
"You can use the :setting:`TEST['TEMPLATE'] <TEST_TEMPLATE>` setting to "
"specify a `template`_ (e.g. ``'template0'``) from which to create a test "
"database."
msgstr ""
":setting:`TEST['TEMPLATE'] <TEST_TEMPLATE>` 設定を使用すると、テストデータ"
"ベースを作成するための `template`_ (たとえば ``'template0'``) を指定できま"
"す。"

msgid "Speeding up test execution with non-durable settings"
msgstr "non-durable 設定でテストの実行を高速化する"

msgid ""
"You can speed up test execution times by `configuring PostgreSQL to be non-"
"durable <https://www.postgresql.org/docs/current/non-durability.html>`_."
msgstr ""
"`PostgreSQL を non-durable に設定する <https://www.postgresql.org/docs/"
"current/non-durability.html>`_ ことで、テストの実行時間を短縮できます。"

msgid ""
"This is dangerous: it will make your database more susceptible to data loss "
"or corruption in the case of a server crash or power loss. Only use this on "
"a development machine where you can easily restore the entire contents of "
"all databases in the cluster."
msgstr ""
"これは危険です。サーバがクラッシュしたり電源が切れたりした場合に、データベー"
"スがデータ損失や破損の影響を受けやすくなります。クラスタ内の全データベースの"
"内容を簡単にリストアできる開発マシンでのみ使用してください。"

msgid "MariaDB notes"
msgstr "MariaDB に関するノート"

msgid "Django supports MariaDB 10.4 and higher."
msgstr "Django は MariaDB 10.4 以降をサポートしています。"

msgid ""
"To use MariaDB, use the MySQL backend, which is shared between the two. See "
"the :ref:`MySQL notes <mysql-notes>` for more details."
msgstr ""
"MariaDBを使用するには、MySQLバックエンドを使用してください、これは2つの間で共"
"有されています。詳細は :ref:`MySQL に関するノート <mysql-notes>` を参照してく"
"ださい。"

msgid "MySQL notes"
msgstr "MySQL に関するノート"

msgid "Version support"
msgstr "バージョン サポート"

msgid "Django supports MySQL 8.0.11 and higher."
msgstr "Django は MySQL 8.0.11 以降をサポートしています。"

msgid ""
"Django's ``inspectdb`` feature uses the ``information_schema`` database, "
"which contains detailed data on all database schemas."
msgstr ""
"Django の ``inspectdb`` 機能は ``information_schema`` データベースを使いま"
"す。このデータベースには全てのデータベーススキーマの詳細なデータが含まれてい"
"ます。"

msgid ""
"Django expects the database to support Unicode (UTF-8 encoding) and "
"delegates to it the task of enforcing transactions and referential "
"integrity. It is important to be aware of the fact that the two latter ones "
"aren't actually enforced by MySQL when using the MyISAM storage engine, see "
"the next section."
msgstr ""
"Django は、データベースが Unicode (UTF-8 エンコーディング) をサポートすること"
"を期待し、 トランザクションと参照整合性を強制するタスクを MySQL に委譲しま"
"す。MyISAM ストレージエンジンを使う場合、MySQL が後者 2 つを実際には強制して"
"いないという事実に注意することが重要です。次の節を参照してください。"

msgid "Storage engines"
msgstr "ストレージ エンジン"

msgid ""
"MySQL has several `storage engines`_. You can change the default storage "
"engine in the server configuration."
msgstr ""
"MySQL にはいくつかの `storage engines`_ があります。サーバ設定でデフォルトの"
"ストレージエンジンを変更できます。"

msgid ""
"MySQL's default storage engine is InnoDB_. This engine is fully "
"transactional and supports foreign key references. It's the recommended "
"choice. However, the InnoDB autoincrement counter is lost on a MySQL restart "
"because it does not remember the ``AUTO_INCREMENT`` value, instead "
"recreating it as \"max(id)+1\". This may result in an inadvertent reuse of :"
"class:`~django.db.models.AutoField` values."
msgstr ""
"MySQL のデフォルトのストレージエンジンは InnoDB_ です。このエンジンは完全にト"
"ランザクショナルで、外部キー参照をサポートしています。推奨される選択です。し"
"かし、InnoDB は ``AUTO_INCREMENT`` の値を記憶せず、\"max(id)+1\" として再作成"
"するため、MySQL の再起動時に自動インクリメントカウンタが失われます。このた"
"め、 :class:`~django.db.models.AutoField` の値が不用意に再利用される可能性が"
"あります。"

msgid ""
"The main drawbacks of MyISAM_ are that it doesn't support transactions or "
"enforce foreign-key constraints."
msgstr ""
"MyISAM_ の主な欠点は、トランザクションをサポートしていないことと、外部キー制"
"約を強制していないことです。"

msgid "MySQL DB API Drivers"
msgstr "MySQL DB API ドライバ"

msgid ""
"MySQL has a couple drivers that implement the Python Database API described "
"in :pep:`249`:"
msgstr ""
"MySQL には :pep:`249` で説明されている Python Database API を実装したドライバ"
"がいくつかあります："

msgid ""
":pypi:`mysqlclient` is a native driver. It's **the recommended choice**."
msgstr ""
":pypi:`mysqlclient` はネイティブドライバです。 **推奨される選択肢です** 。"

msgid ""
"`MySQL Connector/Python`_ is a pure Python driver from Oracle that does not "
"require the MySQL client library or any Python modules outside the standard "
"library."
msgstr ""
"`MySQL Connector/Python`_ は Oracle による純粋な Python ドライバで、MySQL ク"
"ライアントライブラリや標準ライブラリ以外の Python モジュールを必要としませ"
"ん。"

msgid "These drivers are thread-safe and provide connection pooling."
msgstr "これらのドライバはスレッドセーフで、コネクションプールを提供します。"

msgid ""
"In addition to a DB API driver, Django needs an adapter to access the "
"database drivers from its ORM. Django provides an adapter for mysqlclient "
"while MySQL Connector/Python includes `its own`_."
msgstr ""
"DB API ドライバに加え、Django は ORM からデータベースドライバにアクセスするた"
"めのアダプタが必要です。Django は mysqlclient 用のアダプタを提供しますが、"
"MySQL Connector/Python には内蔵のアダプタ (`its own`_) があります。"

msgid "mysqlclient"
msgstr "mysqlclient"

msgid "Django requires `mysqlclient`_ 1.4.3 or later."
msgstr "Django には `mysqlclient`_ 1.4.3 以降が必要です。"

msgid "MySQL Connector/Python"
msgstr "MySQL Connector/Python"

msgid ""
"MySQL Connector/Python is available from the `download page`_. The Django "
"adapter is available in versions 1.1.X and later. It may not support the "
"most recent releases of Django."
msgstr ""
"MySQL Connector/Python は `download page`_ から入手できます。Django アダプタ"
"はバージョン 1.1.X 以降で利用可能です。Django の最新リリースには対応していな"
"いかもしれません。"

msgid "Time zone definitions"
msgstr "タイムゾーンの定義"

msgid ""
"If you plan on using Django's :doc:`timezone support </topics/i18n/"
"timezones>`, use `mysql_tzinfo_to_sql`_ to load time zone tables into the "
"MySQL database. This needs to be done just once for your MySQL server, not "
"per database."
msgstr ""
"Django の :doc:`タイムゾーンサポート </topics/i18n/timezones>` を使うつもりな"
"ら、 `mysql_tzinfo_to_sql`_ を使って MySQL データベースにタイムゾーンテーブル"
"を読み込んでください。これはデータベースごとではなく、MySQLサーバーに対して一"
"度だけ行う必要があります。"

msgid "Creating your database"
msgstr "データベースを作成する"

msgid ""
"You can `create your database`_ using the command-line tools and this SQL:"
msgstr ""
"コマンドラインツールで以下のSQLを実行することで、データベースを作成 (`create "
"your database`_) できます:"

msgid "This ensures all tables and columns will use UTF-8 by default."
msgstr ""
"これにより、すべてのテーブルとカラムがデフォルトでUTF-8を使用するようになりま"
"す。"

msgid "Collation settings"
msgstr "照合順序 (collation) の設定"

msgid ""
"The collation setting for a column controls the order in which data is "
"sorted as well as what strings compare as equal. You can specify the "
"``db_collation`` parameter to set the collation name of the column for :attr:"
"`CharField <django.db.models.CharField.db_collation>` and :attr:`TextField "
"<django.db.models.TextField.db_collation>`."
msgstr ""
"カラムの照合順序 (collation) の設定は、どの文字列を等しいものとして比較するか"
"だけでなく、データをソートする順序も制御します。 :attr:`CharField <django.db."
"models.CharField.db_collation>` と :attr:`TextField <django.db.models."
"TextField.db_collation>` には ``db_collation`` パラメータを指定して、カラムの"
"照合順序を設定できます。"

msgid ""
"The collation can also be set on a database-wide level and per-table. This "
"is `documented thoroughly`_ in the MySQL documentation. In such cases, you "
"must set the collation by directly manipulating the database settings or "
"tables. Django doesn't provide an API to change them."
msgstr ""
"照合順序はデータベース全体およびテーブルごとに設定することもできます。これに"
"ついては、MySQL ドキュメント `documented thoroughly`_ で詳しく説明されていま"
"す。このような場合、照合順序はデータベースの設定やテーブルを直接操作して設定"
"する必要があります。Django はそれらを変更する API を提供しません。"

msgid ""
"By default, with a UTF-8 database, MySQL will use the ``utf8_general_ci`` "
"collation. This results in all string equality comparisons being done in a "
"*case-insensitive* manner. That is, ``\"Fred\"`` and ``\"freD\"`` are "
"considered equal at the database level. If you have a unique constraint on a "
"field, it would be illegal to try to insert both ``\"aa\"`` and ``\"AA\"`` "
"into the same column, since they compare as equal (and, hence, non-unique) "
"with the default collation. If you want case-sensitive comparisons on a "
"particular column or table, change the column or table to use the "
"``utf8_bin`` collation."
msgstr ""
"デフォルトでは、UTF-8 データベースでは、MySQL は ``utf8_general_ci`` 照合順序"
"を使用します。この結果、すべての文字列の等値比較は *大文字小文字を区別しない"
"* 方法で行われます。つまり、``\"Fred\"`` と ``\"freD\"`` はデータベースレベル"
"では等しいとみなされます。フィールドにユニーク制約がある場合、``\"aa\"`` と "
"``\"AA\"`` の両方を同じカラムに挿入しようとするのは不正です。デフォルトの照合"
"順序では等しい (つまり一意ではない) と比較されるからです。特定のカラムやテー"
"ブルで大文字小文字を区別して比較したい場合は、そのカラムやテーブルを "
"``utf8_bin`` 照合順序を使用するように変更してください。"

msgid ""
"Please note that according to `MySQL Unicode Character Sets`_, comparisons "
"for the ``utf8_general_ci`` collation are faster, but slightly less correct, "
"than comparisons for ``utf8_unicode_ci``. If this is acceptable for your "
"application, you should use ``utf8_general_ci`` because it is faster. If "
"this is not acceptable (for example, if you require German dictionary "
"order), use ``utf8_unicode_ci`` because it is more accurate."
msgstr ""
"`MySQL Unicode Character Sets`_ によると、照合順序 ``utf8_general_ci`` の比較"
"は、``utf8_unicode_ci`` の比較よりも高速ですが、正しさは若干劣ることに注意し"
"てください。もしこれがあなたのアプリケーションで許容できるのであれば、 "
"``utf8_general_ci`` を使うべきです。これが許容できない場合(例えば、ドイツ語の"
"辞書の並び順が必要な場合)、より正確な ``utf8_unicode_ci`` を使用してくださ"
"い。"

msgid ""
"Model formsets validate unique fields in a case-sensitive manner. Thus when "
"using a case-insensitive collation, a formset with unique field values that "
"differ only by case will pass validation, but upon calling ``save()``, an "
"``IntegrityError`` will be raised."
msgstr ""
"モデルのフォームセットは大文字小文字を区別して一意なフィールドをバリデーショ"
"ンします。したがって、大文字小文字を区別しない照合順序を使用している場合、大"
"文字小文字の違いだけで一意なフィールド値を持つフォームセットはバリデーション"
"を通過しますが、 ``save()`` を呼び出すと ``IntegrityError`` が発生します。"

msgid "Connecting to the database"
msgstr "データベースに接続する"

msgid "Refer to the :doc:`settings documentation </ref/settings>`."
msgstr ":doc:`設定のドキュメント </ref/settings>` を参照してください。"

msgid "Connection settings are used in this order:"
msgstr "接続設定はこの順番で使用されます："

msgid ":setting:`OPTIONS`."
msgstr ":setting:`OPTIONS`."

msgid ""
":setting:`NAME`, :setting:`USER`, :setting:`PASSWORD`, :setting:`HOST`, :"
"setting:`PORT`"
msgstr ""
":setting:`NAME`, :setting:`USER`, :setting:`PASSWORD`, :setting:`HOST`, :"
"setting:`PORT`"

msgid "MySQL option files."
msgstr "MySQL オプションファイル。"

msgid ""
"In other words, if you set the name of the database in :setting:`OPTIONS`, "
"this will take precedence over :setting:`NAME`, which would override "
"anything in a `MySQL option file`_."
msgstr ""
"言い換えると、:setting:`OPTIONS` でデータベースの名前を設定した場合、これは :"
"setting:`NAME` よりも優先されます。これは `MySQL option file`_ の内容を上書き"
"することになります。"

msgid "Here's a sample configuration which uses a MySQL option file::"
msgstr "以下は MySQL オプションファイルを使用するサンプル設定です："

msgid ""
"Several other `MySQLdb connection options`_ may be useful, such as ``ssl``, "
"``init_command``, and ``sql_mode``."
msgstr ""
"他にも ``ssl``、``init_command``、``sql_mode`` などの `MySQLdb connection "
"options`_ が役に立ちます。"

msgid "Setting ``sql_mode``"
msgstr "``sql_mode`` の設定"

msgid ""
"The default value of the ``sql_mode`` option contains "
"``STRICT_TRANS_TABLES``. That option escalates warnings into errors when "
"data are truncated upon insertion, so Django highly recommends activating a "
"`strict mode`_ for MySQL to prevent data loss (either "
"``STRICT_TRANS_TABLES`` or ``STRICT_ALL_TABLES``)."
msgstr ""
"``sql_mode`` オプションのデフォルト値には ``STRICT_TRANS_TABLES`` が含まれて"
"います。このオプションは、挿入時にデータが切り捨てられた場合に警告をエラーに"
"エスカレートさせるため、Djangoはデータ損失を防ぐためにMySQLで `strict mode`_ "
"を有効にすることを強く推奨します (``STRICT_TRANS_TABLES`` または "
"``STRICT_ALL_TABLES`` のいずれか)。"

msgid ""
"If you need to customize the SQL mode, you can set the ``sql_mode`` variable "
"like other MySQL options: either in a config file or with the entry "
"``'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\"`` in the :setting:"
"`OPTIONS` part of your database configuration in :setting:`DATABASES`."
msgstr ""
"SQLモードをカスタマイズする必要がある場合は、他のMySQLオプションと同様に "
"``sql_mode`` 変数を設定できます。設定ファイル内、または :setting:`DATABASES` "
"のデータベース設定の :setting:`OPTIONS` 部分に ``'init_command': \"SET "
"sql_mode='STRICT_TRANS_TABLES'\"`` エントリを追加することで設定できます。"

msgid ""
"When running concurrent loads, database transactions from different sessions "
"(say, separate threads handling different requests) may interact with each "
"other. These interactions are affected by each session's `transaction "
"isolation level`_. You can set a connection's isolation level with an "
"``'isolation_level'`` entry in the :setting:`OPTIONS` part of your database "
"configuration in :setting:`DATABASES`. Valid values for this entry are the "
"four standard isolation levels:"
msgstr ""
"並行読み込みを実行する場合、異なるセッション（例えば、異なるリクエストを処理"
"する別々のスレッド）からのデータベース・トランザクションは互いに影響し合う可"
"能性があります。これらの相互作用は各セッションの `transaction isolation "
"level`_ の影響を受けます。接続の分離レベルは :setting:`DATABASES` の :"
"setting:`OPTIONS` 部分にある ``'isolation_level'`` エントリで設定できます。こ"
"のエントリの有効な値は4つの標準的な分離レベルです："

msgid "``'read uncommitted'``"
msgstr "``'read uncommitted'``"

msgid "``'read committed'``"
msgstr "``'read committed'``"

msgid "``'repeatable read'``"
msgstr "``'repeatable read'``"

msgid "``'serializable'``"
msgstr "``'serializable'``"

msgid ""
"or ``None`` to use the server's configured isolation level. However, Django "
"works best with and defaults to read committed rather than MySQL's default, "
"repeatable read. Data loss is possible with repeatable read. In particular, "
"you may see cases where :meth:`~django.db.models.query.QuerySet."
"get_or_create` will raise an :exc:`~django.db.IntegrityError` but the object "
"won't appear in a subsequent :meth:`~django.db.models.query.QuerySet.get` "
"call."
msgstr ""
"または ``None`` でサーバで設定された分離レベルを使用します。しかし、Djangoで"
"は MySQL のデフォルトである repeatable read ではなく、read commited を推奨"
"し、デフォルトとしています。repeatable read ではデータ損失が発生する可能性が"
"あります。特に、 :meth:`~django.db.models.query.QuerySet.get_or_create` は :"
"exc:`~django.db.IntegrityError` を発生させますが、その後の :meth:`~django.db."
"models.query.QuerySet.get` 呼び出しではオブジェクトが表示されないような場合が"
"あります。"

msgid "Creating your tables"
msgstr "テーブルを作成する"

msgid ""
"When Django generates the schema, it doesn't specify a storage engine, so "
"tables will be created with whatever default storage engine your database "
"server is configured for. The easiest solution is to set your database "
"server's default storage engine to the desired engine."
msgstr ""
"Django はスキーマを生成するとき、ストレージエンジンを指定しないので、テーブル"
"はデータベースサーバが設定したデフォルトのストレージエンジンで作成されます。"
"最も簡単な解決策は、データベースサーバのデフォルトのストレージエンジンを、希"
"望のエンジンに設定することです。"

msgid ""
"If you're using a hosting service and can't change your server's default "
"storage engine, you have a couple of options."
msgstr ""
"ホスティングサービスを利用していて、サーバーのデフォルトストレージエンジンを"
"変更できない場合、いくつかの選択肢があります。"

msgid ""
"After the tables are created, execute an ``ALTER TABLE`` statement to "
"convert a table to a new storage engine (such as InnoDB):"
msgstr ""
"テーブルが作成された後、 ``ALTER TABLE`` ステートメントを実行して、テーブルを"
"新しいストレージエンジン（InnoDBなど）に変換します："

msgid "This can be tedious if you have a lot of tables."
msgstr "これはテーブルの数が多い場合、面倒です。"

msgid ""
"Another option is to use the ``init_command`` option for MySQLdb prior to "
"creating your tables::"
msgstr ""
"テーブルを作成する前に MySQLdb の ``init_command`` オプションを使用する方法も"
"あります："

msgid ""
"This sets the default storage engine upon connecting to the database. After "
"your tables have been created, you should remove this option as it adds a "
"query that is only needed during table creation to each database connection."
msgstr ""
"これは、データベース接続時のデフォルトのストレージエンジンを設定します。テー"
"ブルが作成された後は、このオプションを削除してください。テーブルの作成時にの"
"み必要なクエリを各データベース接続に追加することになります。"

msgid "Table names"
msgstr "テーブル名"

msgid ""
"There are `known issues`_ in even the latest versions of MySQL that can "
"cause the case of a table name to be altered when certain SQL statements are "
"executed under certain conditions. It is recommended that you use lowercase "
"table names, if possible, to avoid any problems that might arise from this "
"behavior. Django uses lowercase table names when it auto-generates table "
"names from models, so this is mainly a consideration if you are overriding "
"the table name via the :class:`~django.db.models.Options.db_table` parameter."
msgstr ""
"MySQL の最新バージョンでも、特定の条件下で特定の SQL 文を実行すると、テーブル"
"名の大文字と小文字が変わってしまうという既知の問題 `known issues`_ がありま"
"す。この動作から発生する可能性のある問題を避けるために、可能であれば小文字の"
"テーブル名を使うことをお勧めします。Django はモデルからテーブル名を自動生成す"
"るときに小文字のテーブル名を使うので、これは主に :class:`~django.db.models."
"Options.db_table` パラメータでテーブル名を上書きする場合に考慮すべき点です。"

msgid "Savepoints"
msgstr "セーブポイント"

msgid ""
"Both the Django ORM and MySQL (when using the InnoDB :ref:`storage engine "
"<mysql-storage-engines>`) support database :ref:`savepoints <topics-db-"
"transactions-savepoints>`."
msgstr ""
"Django ORM と MySQL (InnoDB :ref:`ストレージエンジン <mysql-storage-"
"engines>` を使う場合) はどちらも、データベース :ref:`セーブポイント <topics-"
"db-transactions-savepoints>` をサポートしています。"

msgid ""
"If you use the MyISAM storage engine please be aware of the fact that you "
"will receive database-generated errors if you try to use the :ref:`savepoint-"
"related methods of the transactions API <topics-db-transactions-"
"savepoints>`. The reason for this is that detecting the storage engine of a "
"MySQL database/table is an expensive operation so it was decided it isn't "
"worth to dynamically convert these methods in no-op's based in the results "
"of such detection."
msgstr ""
"MyISAM ストレージエンジンを使用している場合、 :ref:`トランザクション API の"
"セーブポイント関連メソッド <topics-db-transactions-savepoints>` を使おとする"
"と、データベース由来のエラーが発生することに注意してください。これは、MySQL "
"データベース/テーブルのストレージエンジンを検出するのは高コストな操作であるた"
"め、このような検出結果に基づいてこれらのメソッドを何もしない関数に動的に変換"
"する価値はないと判断されるためです。"

msgid "Notes on specific fields"
msgstr "特定のフィールドに関する注意事項"

msgid "Character fields"
msgstr "文字 (Char) フィールド"

msgid ""
"Any fields that are stored with ``VARCHAR`` column types may have their "
"``max_length`` restricted to 255 characters if you are using ``unique=True`` "
"for the field. This affects :class:`~django.db.models.CharField`, :class:"
"`~django.db.models.SlugField`. See `the MySQL documentation`_ for more "
"details."
msgstr ""
"フィールドに ``unique=True`` を使用している場合、カラムタイプが ``VARCHAR`` "
"で格納されているフィールドの ``max_length`` が 255 文字に制限される可能性があ"
"ります。これは :class:`~django.db.models.CharField`, :class:`~django.db."
"models.SlugField` に影響します。詳細は `the MySQL documentation`_ を参照して"
"ください。"

msgid "``TextField`` limitations"
msgstr "``TextField`` の制限"

msgid ""
"MySQL can index only the first N chars of a ``BLOB`` or ``TEXT`` column. "
"Since ``TextField`` doesn't have a defined length, you can't mark it as "
"``unique=True``. MySQL will report: \"BLOB/TEXT column '<db_column>' used in "
"key specification without a key length\"."
msgstr ""
"MySQL は ``BLOB`` または ``TEXT`` カラムの最初の N 文字だけをインデックス化で"
"きます。 ``TextField`` は定義された長さを持たないので、 ``unique=True`` とし"
"てマークすることはできません。MySQL は次のように報告します： \"BLOB/TEXT "
"column '<db_column>' used in key specification without a key length\" 。"

msgid "Fractional seconds support for Time and DateTime fields"
msgstr "Time および DateTime フィールドの 1 秒単位未満の時間のサポート"

msgid ""
"MySQL can store fractional seconds, provided that the column definition "
"includes a fractional indication (e.g. ``DATETIME(6)``)."
msgstr ""
"MySQL では、カラム定義に端数表示 (例: ``DATETIME(6)``) が含まれていれば、秒未"
"満の端数を格納できます。"

msgid ""
"Django will not upgrade existing columns to include fractional seconds if "
"the database server supports it. If you want to enable them on an existing "
"database, it's up to you to either manually update the column on the target "
"database, by executing a command like:"
msgstr ""
"Django は、データベースサーバがサポートしている場合、既存のカラムを秒未満の端"
"数を含むようにアップグレードしません。既存のデータベースで秒未満のカラムを有"
"効にしたい場合は、以下のようなコマンドを実行して、手動で対象のデータベースの"
"カラムを更新する必要があります："

msgid ""
"or using a :class:`~django.db.migrations.operations.RunSQL` operation in a :"
"ref:`data migration <data-migrations>`."
msgstr ""
"または :ref:`データマイグレーション <data-migrations>` の :class:`~django.db."
"migrations.operations.RunSQL` オペレーションを使用します。"

msgid "``TIMESTAMP`` columns"
msgstr "``TIMESTAMP`` カラム"

msgid ""
"If you are using a legacy database that contains ``TIMESTAMP`` columns, you "
"must set :setting:`USE_TZ = False <USE_TZ>` to avoid data corruption. :"
"djadmin:`inspectdb` maps these columns to :class:`~django.db.models."
"DateTimeField` and if you enable timezone support, both MySQL and Django "
"will attempt to convert the values from UTC to local time."
msgstr ""
"もし ``TIMESTAMP`` カラムを含むレガシーデータベースを使用している場合、データ"
"の破損を避けるために、:setting:`USE_TZ = False <USE_TZ>` を設定する必要があり"
"ます。:djadmin:`inspectdb` はこれらのカラムを :class:`~django.db.models."
"DateTimeField` にマッピングし、タイムゾーンサポートを有効にすると、MySQLと"
"Djangoの両方が値をUTCからローカル時間に変換しようと試みます。"

msgid "Row locking with ``QuerySet.select_for_update()``"
msgstr "``QuerySet.select_for_update()`` による行のロック"

msgid ""
"MySQL and MariaDB do not support some options to the ``SELECT ... FOR "
"UPDATE`` statement. If ``select_for_update()`` is used with an unsupported "
"option, then a :exc:`~django.db.NotSupportedError` is raised."
msgstr ""
"MySQL と MariaDB は ``SELECT ... FOR UPDATE`` 文のいくつかのオプションをサ"
"ポートしていません。もし ``select_for_update()`` がサポートされていないオプ"
"ションで使用された場合、 :exc:`~django.db.NotSupportedError` が発生します。"

msgid "Option"
msgstr "オプション"

msgid "``SKIP LOCKED``"
msgstr "``SKIP LOCKED``"

msgid "X (≥10.6)"
msgstr "X (≥10.6)"

msgid "``NOWAIT``"
msgstr "``NOWAIT``"

msgid "``OF``"
msgstr "``OF``"

msgid "``NO KEY``"
msgstr "``NO KEY``"

msgid ""
"When using ``select_for_update()`` on MySQL, make sure you filter a queryset "
"against at least a set of fields contained in unique constraints or only "
"against fields covered by indexes. Otherwise, an exclusive write lock will "
"be acquired over the full table for the duration of the transaction."
msgstr ""
"MySQL で ``select_for_update()`` を使用する場合は、少なくともユニーク制約に含"
"まれるフィールドのセットに対してクエリセットをフィルタリングするか、インデッ"
"クスがカバーするフィールドに対してだけフィルタリングするようにしてください。"
"そうしないと、トランザクションの間、テーブル全体に対して排他的書き込みロック"
"がかかります。"

msgid "Automatic typecasting can cause unexpected results"
msgstr "自動型キャストは予期せぬ結果を引き起こすことがあります"

msgid ""
"When performing a query on a string type, but with an integer value, MySQL "
"will coerce the types of all values in the table to an integer before "
"performing the comparison. If your table contains the values ``'abc'``, "
"``'def'`` and you query for ``WHERE mycolumn=0``, both rows will match. "
"Similarly, ``WHERE mycolumn=1`` will match the value ``'abc1'``. Therefore, "
"string type fields included in Django will always cast the value to a string "
"before using it in a query."
msgstr ""
"文字列型で整数値のクエリを実行する場合、MySQL はテーブル内のすべての値の型を"
"整数に強制的に変換してから比較を実行します。テーブルに ``'abc'``, ``'def'`` "
"という値があり、``WHERE mycolumn=0`` というクエリを実行した場合、両方の行が"
"マッチします。同様に、``WHERE mycolumn=1`` は値 ``'abc1'`` にマッチします。し"
"たがって、 Django の文字列型フィールドは、クエリで使う前に必ず値を文字列に"
"キャストします。"

msgid ""
"If you implement custom model fields that inherit from :class:`~django.db."
"models.Field` directly, are overriding :meth:`~django.db.models.Field."
"get_prep_value`, or use :class:`~django.db.models.expressions.RawSQL`, :meth:"
"`~django.db.models.query.QuerySet.extra`, or :meth:`~django.db.models."
"Manager.raw`, you should ensure that you perform appropriate typecasting."
msgstr ""
":class:`~django.db.models.Field` を直接継承したカスタムモデルフィールドを実装"
"したり、 :meth:`~django.db.models.Field.get_prep_value` をオーバーライドした"
"り、 :class:`~django.db.models.expressions.RawSQL`、 :meth:`~django.db."
"models.query.QuerySet.extra`、 :meth:`~django.db.models.Manager.raw` をオー"
"バーライドする場合は、適切な型キャストを行う必要があります。"

msgid "SQLite notes"
msgstr "SQLite に関するノート"

msgid "Django supports SQLite 3.27.0 and later."
msgstr "Django は SQLite 3.27.0 以降をサポートしています。"

msgid ""
"SQLite_ provides an excellent development alternative for applications that "
"are predominantly read-only or require a smaller installation footprint. As "
"with all database servers, though, there are some differences that are "
"specific to SQLite that you should be aware of."
msgstr ""
"SQLite_ は、主に読み取り専用であったり、より小さなインストール容量を必要とす"
"るアプリケーションのための優れた開発代替手段を提供します。しかし、すべての"
"データベースサーバと同様に、SQLite 固有の注意すべき違いがいくつかあります。"

msgid "Substring matching and case sensitivity"
msgstr "部分文字列のマッチングと大文字と小文字の区別"

msgid ""
"For all SQLite versions, there is some slightly counter-intuitive behavior "
"when attempting to match some types of strings.  These are triggered when "
"using the :lookup:`iexact` or :lookup:`contains` filters in Querysets. The "
"behavior splits into two cases:"
msgstr ""
"SQLite のすべてのバージョンで、いくつかの型の文字列をマッチさせようとすると、"
"少し直感に反する動作があります。 これは Queryset で :lookup:`iexact` や :"
"lookup:`contains` フィルタを使用した場合に発生します。動作は2つのケースに分か"
"れます："

msgid ""
"1. For substring matching, all matches are done case-insensitively. That is "
"a filter such as ``filter(name__contains=\"aa\")`` will match a name of "
"``\"Aabb\"``."
msgstr ""
"1. 部分文字列のマッチングでは、すべてのマッチは大文字小文字を区別しません。つ"
"まり、``filter(name__contains=\"aa\")`` のようなフィルタは ``\"Aabb\"`` とい"
"う名前にマッチします。"

msgid ""
"2. For strings containing characters outside the ASCII range, all exact "
"string matches are performed case-sensitively, even when the case-"
"insensitive options are passed into the query. So the :lookup:`iexact` "
"filter will behave exactly the same as the :lookup:`exact` filter in these "
"cases."
msgstr ""
"2. ASCII の範囲外の文字を含む文字列では、大文字小文字を区別しないオプションが"
"クエリに渡された場合でも、すべての文字列の完全一致は大文字小文字を区別して実"
"行されます。そのため、このような場合 :lookup:`iexact` フィルタは :lookup:"
"`exact` フィルタと全く同じ動作をします。"

msgid ""
"Some possible workarounds for this are `documented at sqlite.org`_, but they "
"aren't utilized by the default SQLite backend in Django, as incorporating "
"them would be fairly difficult to do robustly. Thus, Django exposes the "
"default SQLite behavior and you should be aware of this when doing case-"
"insensitive or substring filtering."
msgstr ""
"この回避策はドキュメント化されています `documented at sqlite.org`_ が、"
"Django のデフォルトの SQLite バックエンドでは利用されていません。それらを堅牢"
"に組み込むのはかなり難しいからです。そのため、Django はデフォルトの SQLite の"
"動作を踏襲しており、大文字小文字を区別しないフィルタリングや部分文字列フィル"
"タリングを行う際には、このことを意識する必要があります。"

msgid "Decimal handling"
msgstr "10進数 (Decimal) の扱い"

msgid ""
"SQLite has no real decimal internal type. Decimal values are internally "
"converted to the ``REAL`` data type (8-byte IEEE floating point number), as "
"explained in the `SQLite datatypes documentation`__, so they don't support "
"correctly-rounded decimal floating point arithmetic."
msgstr ""
"SQLiteには本物の10進数の内部型はありません。 `SQLite datatypes "
"documentation`__ で説明されているように、10進数の値は内部的に ``REAL`` データ"
"型 (8バイトの IEEE 浮動小数点数) に変換されます。"

msgid "\"Database is locked\" errors"
msgstr "\"Database is locked\" エラー"

msgid ""
"SQLite is meant to be a lightweight database, and thus can't support a high "
"level of concurrency. ``OperationalError: database is locked`` errors "
"indicate that your application is experiencing more concurrency than "
"``sqlite`` can handle in default configuration. This error means that one "
"thread or process has an exclusive lock on the database connection and "
"another thread timed out waiting for the lock the be released."
msgstr ""
"SQLite は軽量なデータベースであるため、高い並行性をサポートすることはできませ"
"ん。 ``OperationalError: database is locked`` のエラーは、アプリケーションが"
"デフォルト設定の ``sqlite`` で扱える以上の同時実行を試行していることを示して"
"います。このエラーは、あるスレッドまたはプロセスがデータベース接続を排他的に"
"ロックし、別のスレッドがロックが解除されるのを待ってタイムアウトしたことを意"
"味します。"

msgid ""
"Python's SQLite wrapper has a default timeout value that determines how long "
"the second thread is allowed to wait on the lock before it times out and "
"raises the ``OperationalError: database is locked`` error."
msgstr ""
"Python の SQLite ラッパーにはデフォルトのタイムアウト値があり、2番目のスレッ"
"ドがタイムアウトして ``OperationalError: database is locked`` というエラーを"
"発生させるまでに、どれだけの時間ロックを待つことができるかを決めます。"

msgid "If you're getting this error, you can solve it by:"
msgstr "このエラーが発生した場合は、次の方法で解決できます："

msgid ""
"Switching to another database backend. At a certain point SQLite becomes too "
"\"lite\" for real-world applications, and these sorts of concurrency errors "
"indicate you've reached that point."
msgstr ""
"他のデータベース・バックエンドに乗り換えることです。ある段階でSQLiteは実世界"
"のアプリケーションには \"軽すぎる \"ようになり、この種の同時実行エラーはその"
"段階に達していることを示しています。"

msgid ""
"Rewriting your code to reduce concurrency and ensure that database "
"transactions are short-lived."
msgstr ""
"並行処理を減らし、データベーストランザクションが短時間で終了するようにコード"
"を書き換えます。"

msgid ""
"Increase the default timeout value by setting the ``timeout`` database "
"option::"
msgstr ""
"データベースオプションの ``timeout`` を設定することで、デフォルトのタイムアウ"
"ト値を増やすことができます："

msgid ""
"This will make SQLite wait a bit longer before throwing \"database is "
"locked\" errors; it won't really do anything to solve them."
msgstr ""
"これはSQLiteが \"データベースがロックされています\" エラーを発生させるまで少"
"し待機させます。解決するために何かするわけではありません。"

msgid "``QuerySet.select_for_update()`` not supported"
msgstr "``QuerySet.select_for_update()`` はサポートされていません。"

msgid ""
"SQLite does not support the ``SELECT ... FOR UPDATE`` syntax. Calling it "
"will have no effect."
msgstr ""
"SQLite は ``SELECT ... FOR UPDATE`` 構文をサポートしていません。これを呼び出"
"しても何も起こりません。"

msgid "Isolation when using ``QuerySet.iterator()``"
msgstr "``QuerySet.iterator()`` を使用する際の分離の問題"

msgid ""
"There are special considerations described in `Isolation In SQLite`_ when "
"modifying a table while iterating over it using :meth:`.QuerySet.iterator`. "
"If a row is added, changed, or deleted within the loop, then that row may or "
"may not appear, or may appear twice, in subsequent results fetched from the "
"iterator. Your code must handle this."
msgstr ""
":meth:`.QuerySet.iterator` を使用してテーブルをイテレートしながらテーブルを変"
"更する場合、 `Isolation In SQLite`_ で説明されている特別な注意点があります。"
"ループ内で行が追加、変更、削除された場合、その行はイテレータからフェッチされ"
"た後続の結果に現れるかもしれませんし、現れないかもしれません。コード内でこれ"
"を処理する必要があります。"

msgid "Enabling JSON1 extension on SQLite"
msgstr "SQLite で JSON1 拡張機能を有効にする"

msgid ""
"To use :class:`~django.db.models.JSONField` on SQLite, you need to enable "
"the `JSON1 extension`_ on Python's :py:mod:`sqlite3` library. If the "
"extension is not enabled on your installation, a system error (``fields."
"E180``) will be raised."
msgstr ""
"SQLite で :class:`~django.db.models.JSONField` を使うには、Python の :py:mod:"
"`sqlite3` ライブラリで `JSON1 extension`_ を有効にする必要があります。拡張機"
"能が有効になっていない場合、システムエラー (``fields.E180``) が発生します。"

msgid ""
"To enable the JSON1 extension you can follow the instruction on `the wiki "
"page`_."
msgstr ""
"JSON1 拡張機能を有効にするには、 `the wiki page`_ の手順に従ってください。"

msgid "The JSON1 extension is enabled by default on SQLite 3.38+."
msgstr "JSON1 拡張機能は SQLite 3.38+ ではデフォルトで有効になっています。"

msgid "Oracle notes"
msgstr "Oracle に関するノート"

msgid ""
"Django supports `Oracle Database Server`_ versions 19c and higher. Version "
"1.3.2 or higher of the `oracledb`_ Python driver is required."
msgstr ""
"Django は `Oracle Database Server`_ バージョン 19c 以降をサポートしています。"
"バージョン 1.3.2 以上の `oracledb`_ Python ドライバが必要です。"

msgid "Support for ``cx_Oracle`` is deprecated."
msgstr "``cx_Oracle`` のサポートは非推奨になりました。"

msgid ""
"In order for the ``python manage.py migrate`` command to work, your Oracle "
"database user must have privileges to run the following commands:"
msgstr ""
"``python manage.py migrate`` コマンドを動作させるには、Oracleデータベースユー"
"ザーが以下のコマンドを実行する権限を持っている必要があります："

msgid "CREATE TABLE"
msgstr "CREATE TABLE"

msgid "CREATE SEQUENCE"
msgstr "CREATE SEQUENCE"

msgid "CREATE PROCEDURE"
msgstr "CREATE PROCEDURE"

msgid "CREATE TRIGGER"
msgstr "CREATE TRIGGER"

msgid ""
"To run a project's test suite, the user usually needs these *additional* "
"privileges:"
msgstr ""
"プロジェクトのテスト・スイートを実行するには、通常、ユーザーはこれらの *追加"
"* 権限を必要とします："

msgid "CREATE USER"
msgstr "CREATE USER"

msgid "ALTER USER"
msgstr "ALTER USER"

msgid "DROP USER"
msgstr "DROP USER"

msgid "CREATE TABLESPACE"
msgstr "CREATE TABLESPACE"

msgid "DROP TABLESPACE"
msgstr "DROP TABLESPACE"

msgid "CREATE SESSION WITH ADMIN OPTION"
msgstr "CREATE SESSION WITH ADMIN OPTION"

msgid "CREATE TABLE WITH ADMIN OPTION"
msgstr "CREATE TABLE WITH ADMIN OPTION"

msgid "CREATE SEQUENCE WITH ADMIN OPTION"
msgstr "CREATE SEQUENCE WITH ADMIN OPTION"

msgid "CREATE PROCEDURE WITH ADMIN OPTION"
msgstr "CREATE PROCEDURE WITH ADMIN OPTION"

msgid "CREATE TRIGGER WITH ADMIN OPTION"
msgstr "CREATE TRIGGER WITH ADMIN OPTION"

msgid ""
"While the ``RESOURCE`` role has the required ``CREATE TABLE``, ``CREATE "
"SEQUENCE``, ``CREATE PROCEDURE``, and ``CREATE TRIGGER`` privileges, and a "
"user granted ``RESOURCE WITH ADMIN OPTION`` can grant ``RESOURCE``, such a "
"user cannot grant the individual privileges (e.g. ``CREATE TABLE``), and "
"thus ``RESOURCE WITH ADMIN OPTION`` is not usually sufficient for running "
"tests."
msgstr ""
"``RESOURCE`` ロールは ``CREATE TABLE``, ``CREATE SEQUENCE``, ``CREATE "
"PROCEDURE``, ``CREATE TRIGGER`` の権限を持っており、``RESOURCE WITH ADMIN "
"OPTION`` を与えられたユーザは ``RESOURCE`` を与えることができますが、個々の権"
"限 (例えば ``CREATE TABLE``) を与えることはできません。そのため、``RESOURCE "
"WITH ADMIN OPTION`` は通常テストの実行には十分ではありません。"

msgid ""
"Some test suites also create views or materialized views; to run these, the "
"user also needs ``CREATE VIEW WITH ADMIN OPTION`` and ``CREATE MATERIALIZED "
"VIEW WITH ADMIN OPTION`` privileges. In particular, this is needed for "
"Django's own test suite."
msgstr ""
"これらを実行するには、ユーザは ``CREATE VIEW WITH ADMIN OPTION`` と ``CREATE "
"MATERIALIZED VIEW WITH ADMIN OPTION`` 権限も必要です。特に、これは Django 自"
"身のテストスイートに必要です。"

msgid ""
"All of these privileges are included in the DBA role, which is appropriate "
"for use on a private developer's database."
msgstr ""
"これらの権限はすべて DBA ロールに含まれており、プライベートな開発者のデータ"
"ベースで使用するのに適しています。"

msgid ""
"The Oracle database backend uses the ``SYS.DBMS_LOB`` and ``SYS."
"DBMS_RANDOM`` packages, so your user will require execute permissions on it. "
"It's normally accessible to all users by default, but in case it is not, "
"you'll need to grant permissions like so:"
msgstr ""
"Oracle データベースのバックエンドは ``SYS.DBMS_LOB`` パッケージと ``SYS."
"DBMS_RANDOM`` パッケージを使用しているので、ユーザーには実行パーミッションが"
"必要です。通常はデフォルトですべてのユーザーがアクセス可能ですが、そうでない"
"場合は以下のようにパーミッションを付与する必要があります："

msgid ""
"To connect using the service name of your Oracle database, your ``settings."
"py`` file should look something like this::"
msgstr ""
"Oracle データベースのサービス名を使用して接続するには、``settings.py`` ファイ"
"ルを次のように設定します："

msgid ""
"In this case, you should leave both :setting:`HOST` and :setting:`PORT` "
"empty. However, if you don't use a ``tnsnames.ora`` file or a similar naming "
"method and want to connect using the SID (\"xe\" in this example), then fill "
"in both :setting:`HOST` and :setting:`PORT` like so::"
msgstr ""
"この場合、:setting:`HOST` と :setting:`PORT` の両方を空のままにします。しか"
"し、``tnsnames.ora`` ファイルや同様の命名メソッドを使用せず、SID（この例では "
"\"xe\"）を使用して接続したい場合は、次のように :setting:`HOST` と :setting:"
"`PORT` の両方を入力します："

msgid ""
"You should either supply both :setting:`HOST` and :setting:`PORT`, or leave "
"both as empty strings. Django will use a different connect descriptor "
"depending on that choice."
msgstr ""
":setting:`HOST` と :setting:`PORT` の両方を指定するか、両方を空文字列のままに"
"してください。Django はその選択によって異なる接続記述子を使います。"

msgid "Full DSN and Easy Connect"
msgstr "Full DSN と Easy Connect"

msgid ""
"A Full DSN or Easy Connect string can be used in :setting:`NAME` if both :"
"setting:`HOST` and :setting:`PORT` are empty. This format is required when "
"using RAC or pluggable databases without ``tnsnames.ora``, for example."
msgstr ""
":setting:`HOST` と :setting:`PORT` の両方が空の場合、:setting:`NAME` に Full "
"DSN または Easy Connect 文字列を使用できます。このフォーマットは、例えば "
"``tnsnames.ora`` のない RAC やプラガブル (pluggable) なデータベースを使用する"
"場合に必要です。"

msgid "Example of an Easy Connect string::"
msgstr "Easy Connect 文字列の例："

msgid "Example of a full DSN string::"
msgstr "Full DSN 文字列の例："

msgid "Threaded option"
msgstr "スレッド (threaded) オプション"

msgid ""
"If you plan to run Django in a multithreaded environment (e.g. Apache using "
"the default MPM module on any modern operating system), then you **must** "
"set the ``threaded`` option of your Oracle database configuration to "
"``True``::"
msgstr ""
"Django をマルチスレッド環境 (例えば、最近のオペレーティングシステムでデフォル"
"トの MPM モジュールを使った Apache など) で動作させたい場合は、 Oracle データ"
"ベースの設定の ``threaded`` オプションを ``True`` に設定する必要があります："

msgid "Failure to do this may result in crashes and other odd behavior."
msgstr ""
"これを行わないと、クラッシュその他の異常な動作が発生する可能性があります。"

msgid "INSERT ... RETURNING INTO"
msgstr "INSERT ... RETURNING INTO"

msgid ""
"By default, the Oracle backend uses a ``RETURNING INTO`` clause to "
"efficiently retrieve the value of an ``AutoField`` when inserting new rows.  "
"This behavior may result in a ``DatabaseError`` in certain unusual setups, "
"such as when inserting into a remote table, or into a view with an ``INSTEAD "
"OF`` trigger. The ``RETURNING INTO`` clause can be disabled by setting the "
"``use_returning_into`` option of the database configuration to ``False``::"
msgstr ""
"デフォルトでは、Oracle バックエンドは新しい行を挿入するときに ``AutoField`` "
"の値を効率的に取得するために ``RETURNING INTO`` 句を使用します。 この動作は、"
"リモートテーブルへの挿入や ``INSTEAD OF`` トリガを使用したビューへの挿入な"
"ど、特殊なセットアップの場合に ``DatabaseError`` を引き起こす可能性がありま"
"す。 ``RETURNING INTO`` 句は、データベース設定の ``use_returning_into`` オプ"
"ションを ``False`` に設定することで無効にできます："

msgid ""
"In this case, the Oracle backend will use a separate ``SELECT`` query to "
"retrieve ``AutoField`` values."
msgstr ""
"この場合、Oracle バックエンドは個別の ``SELECT`` クエリを使って "
"``AutoField`` の値を取得します。"

msgid "Naming issues"
msgstr "命名に関する問題"

msgid ""
"Oracle imposes a name length limit of 30 characters. To accommodate this, "
"the backend truncates database identifiers to fit, replacing the final four "
"characters of the truncated name with a repeatable MD5 hash value. "
"Additionally, the backend turns database identifiers to all-uppercase."
msgstr ""
"Oracle では、名前の長さに 30 文字という制限があります。これに対応するため、"
"バックエンドはデータベース識別子を適当な長さに切り詰め、切り詰めた名前の最後"
"の4文字を繰り返し使用可能なMD5ハッシュ値に置き換えます。さらに、バックエンド"
"はデータベース識別子をすべて大文字にします。"

msgid ""
"To prevent these transformations (this is usually required only when dealing "
"with legacy databases or accessing tables which belong to other users), use "
"a quoted name as the value for ``db_table``::"
msgstr ""
"このような変換を防ぐには（通常、レガシーデータベースを扱う場合や、他のユー"
"ザーのテーブルにアクセスする場合にのみ必要です）、``db_table`` の値として引用"
"符で囲まれた名前を使用します："

msgid ""
"Quoted names can also be used with Django's other supported database "
"backends; except for Oracle, however, the quotes have no effect."
msgstr ""
"引用符で囲まれた名前は、Django がサポートしている Oracle 以外の他のデータベー"
"スバックエンドでも使用できます。ただし、引用符には効果がありません。"

msgid ""
"When running ``migrate``, an ``ORA-06552`` error may be encountered if "
"certain Oracle keywords are used as the name of a model field or the value "
"of a ``db_column`` option.  Django quotes all identifiers used in queries to "
"prevent most such problems, but this error can still occur when an Oracle "
"datatype is used as a column name.  In particular, take care to avoid using "
"the names ``date``, ``timestamp``, ``number`` or ``float`` as a field name."
msgstr ""
"``migrate`` を実行すると、特定の Oracle キーワードがモデルフィールド名や "
"``db_column`` オプションの値として使われた場合に、 ``ORA-06552`` エラーが発生"
"することがあります。 Django はクエリで使われる全ての識別子を引用符で囲むこと"
"で、このような問題のほとんどを 防ぎますが、Oracle のデータ型がカラム名として"
"使われると、このエラーが発生する可能性が あります。 特に、フィールド名として "
"``date``, ``timestamp``, ``number``, ``float`` を使わないように注意してくださ"
"い。"

msgid "NULL and empty strings"
msgstr "NULL と空の文字列"

msgid ""
"Django generally prefers to use the empty string (``''``) rather than "
"``NULL``, but Oracle treats both identically. To get around this, the Oracle "
"backend ignores an explicit ``null`` option on fields that have the empty "
"string as a possible value and generates DDL as if ``null=True``. When "
"fetching from the database, it is assumed that a ``NULL`` value in one of "
"these fields really means the empty string, and the data is silently "
"converted to reflect this assumption."
msgstr ""
"Django は通常、 ``NULL`` よりも空文字列 (``''``) を好んで使いますが、 Oracle "
"はどちらも同じように扱います。これを回避するために、 Oracle バックエンドは、"
"空の文字列を値とするフィールドの明示的な ``null`` オプションを無視し、 "
"``null=True`` であるかのように DDL を生成します。データベースから取得する際、"
"これらのフィールドの ``NULL`` 値は本当に空の文字列を意味すると仮定され、この"
"仮定を反映するようにデータは静かに変換されます。"

msgid ""
"The Oracle backend stores ``TextFields`` as ``NCLOB`` columns. Oracle "
"imposes some limitations on the usage of such LOB columns in general:"
msgstr ""
"Oracle バックエンドは ``TextFields`` を ``NCLOB`` カラムとして保存します。"
"Oracle は通常、このような LOB カラムの使用にいくつかの制限を設けています："

msgid "LOB columns may not be used as primary keys."
msgstr "LOBカラムは主キーとして使用できません。"

msgid "LOB columns may not be used in indexes."
msgstr "LOB 列はインデックスでは使用できません。"

msgid ""
"LOB columns may not be used in a ``SELECT DISTINCT`` list. This means that "
"attempting to use the ``QuerySet.distinct`` method on a model that includes "
"``TextField`` columns will result in an ``ORA-00932`` error when run against "
"Oracle. As a workaround, use the ``QuerySet.defer`` method in conjunction "
"with ``distinct()`` to prevent ``TextField`` columns from being included in "
"the ``SELECT DISTINCT`` list."
msgstr ""
"LOB 列は ``SELECT DISTINCT`` リストでは使用できません。つまり、Oracle に対し"
"て ``TextField`` 列を含むモデルで ``QuerySet.distinct`` メソッドを使用する"
"と、``ORA-00932`` エラーが発生します。回避策として、 ``QuerySet.defer`` メ"
"ソッドと ``distinct()`` を併用して、 ``TextField`` 列が ``SELECT DISTINCT`` "
"リストに含まれないようにしてください。"

msgid "Subclassing the built-in database backends"
msgstr "組み込みデータベース・バックエンドをサブクラス化する"

msgid ""
"Django comes with built-in database backends. You may subclass an existing "
"database backends to modify its behavior, features, or configuration."
msgstr ""
"Django には組み込みのデータベースバックエンドが付属しています。既存のデータ"
"ベースバックエンドをサブクラス化して、その動作や機能、設定を変更できます。"

msgid ""
"Consider, for example, that you need to change a single database feature. "
"First, you have to create a new directory with a ``base`` module in it. For "
"example:"
msgstr ""
"たとえば、データベースの機能を一つだけ変更する必要があるとします。まず、"
"``base`` モジュールを含む新しいディレクトリを作成します。たとえば："

msgid ""
"The ``base.py`` module must contain a class named ``DatabaseWrapper`` that "
"subclasses an existing engine from the ``django.db.backends`` module. Here's "
"an example of subclassing the PostgreSQL engine to change a feature class "
"``allows_group_by_selected_pks_on_model``:"
msgstr ""
"``base.py`` モジュールには、 ``django.db.backends`` モジュールの既存のエンジ"
"ンをサブクラス化した ``DatabaseWrapper`` というクラスを含める必要があります。"
"以下は、PostgreSQL エンジンをサブクラス化して "
"``allows_group_by_selected_pks_on_model`` という機能を変更する例です："

msgid "``mysite/mydbengine/base.py``"
msgstr "``mysite/mydbengine/base.py``"

msgid ""
"Finally, you must specify a :setting:`DATABASE-ENGINE` in your ``settings."
"py`` file::"
msgstr ""
"最後に、``settings.py`` ファイルで :setting:`DATABASE-ENGINE` を指定する必要"
"があります："

msgid ""
"You can see the current list of database engines by looking in :source:"
"`django/db/backends`."
msgstr ""
"現在のデータベースエンジンのリストは :source:`django/db/backends` で見ること"
"ができます。"

msgid "Using a 3rd-party database backend"
msgstr "サードパーティのデータベース・バックエンドを使う"

msgid ""
"In addition to the officially supported databases, there are backends "
"provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""
"公式にサポートされているデータベースに加え、サードパーティが提供するバックエ"
"ンドがあり、Django で他のデータベースを使うことができます："

msgid ":pypi:`CockroachDB <django-cockroachdb>`"
msgstr ":pypi:`CockroachDB <django-cockroachdb>`"

msgid ":pypi:`Firebird <django-firebird>`"
msgstr ":pypi:`Firebird <django-firebird>`"

msgid ":pypi:`Google Cloud Spanner <django-google-spanner>`"
msgstr ":pypi:`Google Cloud Spanner <django-google-spanner>`"

msgid ":pypi:`Microsoft SQL Server <mssql-django>`"
msgstr ":pypi:`Microsoft SQL Server <mssql-django>`"

msgid ":pypi:`Snowflake <django-snowflake>`"
msgstr ":pypi:`Snowflake <django-snowflake>`"

msgid ":pypi:`TiDB <django-tidb>`"
msgstr ":pypi:`TiDB <django-tidb>`"

msgid ":pypi:`YugabyteDB <django-yugabytedb>`"
msgstr ":pypi:`YugabyteDB <django-yugabytedb>`"

msgid ""
"The Django versions and ORM features supported by these unofficial backends "
"vary considerably. Queries regarding the specific capabilities of these "
"unofficial backends, along with any support queries, should be directed to "
"the support channels provided by each 3rd party project."
msgstr ""
"これらの非公式のバックエンドがサポートする Django のバージョンと ORM の機能"
"は、バックエンドによって大きく異なります。これらの非公式なバックエンドの特定"
"の機能に関する質問や、サポートに関する質問は、各サードパーティプロジェクトが"
"提供するサポートチャンネルに直接問い合わせてください。"

msgid "``django-admin`` and ``manage.py``"
msgstr "``django-admin`` と ``manage.py``"

msgid ""
"``django-admin`` is Django's command-line utility for administrative tasks. "
"This document outlines all it can do."
msgstr ""
"``django-admin`` は Django の管理タスクのためのコマンドラインユーティリティで"
"す。このドキュメントでは、その機能の全体を一通り説明します。"

msgid ""
"In addition, ``manage.py`` is automatically created in each Django project. "
"It does the same thing as ``django-admin`` but also sets the :envvar:"
"`DJANGO_SETTINGS_MODULE` environment variable so that it points to your "
"project's ``settings.py`` file."
msgstr ""
"さらに、``manage.py`` は各 Django プロジェクト内に自動的に作成されます。"
"``jango-admin`` と同じことができますが、:envvar:`DJANGO_SETTINGS_MODULE` を設"
"定することもでき、プロジェクトの ``settings.py`` を指定できます。"

msgid ""
"The ``django-admin`` script should be on your system path if you installed "
"Django via ``pip``. If it's not in your path, ensure you have your virtual "
"environment activated."
msgstr ""
"Django を ``pip`` 経由でインストールした場合、 ``django-admin`` はシステムパ"
"ス上に設定されているはずです。もしシステムパスにない場合、仮想環境が有効に"
"なっていることを確認してください。"

msgid ""
"Generally, when working on a single Django project, it's easier to use "
"``manage.py`` than ``django-admin``. If you need to switch between multiple "
"Django settings files, use ``django-admin`` with :envvar:"
"`DJANGO_SETTINGS_MODULE` or the :option:`--settings` command line option."
msgstr ""
"通常、単体の Django プロジェクトを用いる場合、``django-admin`` よりも "
"``manage.py`` の方が簡単に利用できます。もし複数の Django 設定ファイル間での"
"切り替えが必要な場合は、``django-admin`` を :envvar:`DJANGO_SETTINGS_MODULE` "
"もしくは :option:`--settings` オプションと共に利用してください。"

msgid ""
"The command-line examples throughout this document use ``django-admin`` to "
"be consistent, but any example can use ``manage.py`` or ``python -m django`` "
"just as well."
msgstr ""
"本項ではコマンドラインの実行例は一貫して ``django-admin`` を使用しますが、実"
"行例は全て ``manage.py`` もしくは ``python -m django`` でも同様に利用可能で"
"す。"

msgid ""
"``command`` should be one of the commands listed in this document. "
"``options``, which is optional, should be zero or more of the options "
"available for the given command."
msgstr ""
"``command`` にはこのドキュメントに一覧されたコマンドの1つでなければなりませ"
"ん。``options`` はオプションで、与えられたコマンドで利用できる 0 個以上のオプ"
"ションを指定します。"

msgid "Getting runtime help"
msgstr "ランタイムのヘルプを表示する"

msgid ""
"Run ``django-admin help`` to display usage information and a list of the "
"commands provided by each application."
msgstr ""
"``django-admin help`` を実行すると、使用方法の情報と、各アプリケーションが提"
"供するコマンドのリストが表示されます。"

msgid ""
"Run ``django-admin help --commands`` to display a list of all available "
"commands."
msgstr ""
"``django-admin help --commands`` を実行すると、利用可能な全てのコマンドの一覧"
"が表示されます。"

msgid ""
"Run ``django-admin help <command>`` to display a description of the given "
"command and a list of its available options."
msgstr ""
"``django-admin help <command>`` を実行すると、与えられたコマンドの説明と利用"
"可能なオプションの一覧が表示されます。"

msgid "App names"
msgstr "アプリ名"

msgid ""
"Many commands take a list of \"app names.\" An \"app name\" is the basename "
"of the package containing your models. For example, if your :setting:"
"`INSTALLED_APPS` contains the string ``'mysite.blog'``, the app name is "
"``blog``."
msgstr ""
"多くのコマンドは「アプリ名」のリストを取ります。1つの「アプリ名」はモデルを含"
"むパッケージのベースネーム (basename) となります。たとえば、:setting:"
"`INSTALLED_APPS` が文字列 ``'mysite.blog'`` を含む場合、アプリ名は ``blog`` "
"になります。"

msgid "Determining the version"
msgstr "バージョンを特定する"

msgid "Run ``django-admin version`` to display the current Django version."
msgstr ""
"``django-admin version`` を実行すると、現在の Django のバージョンが表示されま"
"す。"

msgid "The output follows the schema described in :pep:`440`:"
msgstr "出力は、次のように :pep:`440` で説明されたスキーマに従います。"

msgid "Displaying debug output"
msgstr "デバック出力を表示する"

msgid ""
"Use :option:`--verbosity`, where it is supported, to specify the amount of "
"notification and debug information that ``django-admin`` prints to the "
"console."
msgstr ""
"サポートされている場合に :option:`--verbosity` を使うと、``django-admin`` が"
"コンソールに表示する通知とデバッグ情報の量を指定できます。"

msgid "Available commands"
msgstr "利用可能なコマンド"

msgid "``check``"
msgstr "``check``"

msgid ""
"Uses the :doc:`system check framework </ref/checks>` to inspect the entire "
"Django project for common problems."
msgstr ""
":doc:`システムチェック フレームワーク </ref/checks>` を使用して、Django プロ"
"ジェクト全体のよくある問題を検査します。"

msgid ""
"By default, all apps will be checked. You can check a subset of apps by "
"providing a list of app labels as arguments:"
msgstr ""
"デフォルトでは、全てのアプリがチェックされます。アプリのサブセットをチェック"
"するには、次のようにアプリのラベルの一覧を引数として渡します。"

msgid ""
"The system check framework performs many different types of checks that are :"
"ref:`categorized with tags <system-check-builtin-tags>`. You can use these "
"tags to restrict the checks performed to just those in a particular "
"category. For example, to perform only models and compatibility checks, run:"
msgstr ""
"システムチェック フレームワークは、 :ref:`タグでカテゴリ化された <system-"
"check-builtin-tags>` さまざまな種類のチェックを実行します。これらのタグを使用"
"すると、特定のカテゴリ内のタグだけに実行するチェックを制限できます。たとえ"
"ば、モデルと互換性のチェックだけを実行するには、次のコマンドを実行します。"

msgid "Specifies the database to run checks requiring database access:"
msgstr ""
"データベースアクセスが必要なチェックを実行するには、次のようにデータベースを"
"指定します。"

msgid "By default, these checks will not be run."
msgstr "デフォルトでは、これらのチェックは実行されません。"

msgid "Lists all available tags."
msgstr "利用可能なタグを一覧します。"

msgid ""
"Activates some additional checks that are only relevant in a deployment "
"setting."
msgstr ""
"デプロイメントの設定にだけ関係のある、いくつかの追加チェックを有効化します。"

msgid ""
"You can use this option in your local development environment, but since "
"your local development settings module may not have many of your production "
"settings, you will probably want to point the ``check`` command at a "
"different settings module, either by setting the :envvar:"
"`DJANGO_SETTINGS_MODULE` environment variable, or by passing the ``--"
"settings`` option:"
msgstr ""
"このオプションはローカルの開発環境で使えますが、ローカルの開発の設定モジュー"
"ルは本番の設定の多くがないかもしれないため、おそらく :envvar:"
"`DJANGO_SETTINGS_MODULE` 環境変数を設定するか、``--settings`` オプションを渡"
"すことで、異なる設定モジュールを指定したくなるでしょう。"

msgid ""
"Or you could run it directly on a production or staging deployment to verify "
"that the correct settings are in use (omitting ``--settings``). You could "
"even make it part of your integration test suite."
msgstr ""
"あるいは、(``--settings`` を省略して) 正しい設定が使用されていることを検証す"
"るために、本番かステージングのデプロイメントで直接実行することも可能です。"

msgid ""
"Specifies the message level that will cause the command to exit with a non-"
"zero status. Default is ``ERROR``."
msgstr ""
"0 以外のステータスでコマンドを終了させるメッセージレベルを指定します。デフォ"
"ルトは ``ERROR`` です。"

msgid "``compilemessages``"
msgstr "``compilemessages``"

msgid ""
"Compiles ``.po`` files created by :djadmin:`makemessages` to ``.mo`` files "
"for use with the built-in gettext support. See :doc:`/topics/i18n/index`."
msgstr ""
"ビルトインの gettext サポートで使用できるように、:djadmin:`makemessages` が作"
"成した ``.po`` ファイルを ``.mo`` ファイルにコンパイルします。詳しくは :doc:"
"`/topics/i18n/index` を参照してください。"

msgid ""
"Specifies the locale(s) to process. If not provided, all locales are "
"processed."
msgstr ""
"処理する locale を指定します。提供されなかった場合、すべてのロケールが処理さ"
"れます。"

msgid ""
"Specifies the locale(s) to exclude from processing. If not provided, no "
"locales are excluded."
msgstr ""
"処理から除外する locale を指定します。提供されなかった場合、どのロケールも除"
"外されません。"

msgid "Includes `fuzzy translations`_ into compiled files."
msgstr "`fuzzy な翻訳`_ をコンパイルされたファイルに含めます"

msgid ""
"Ignores directories matching the given :mod:`glob`-style pattern. Use "
"multiple times to ignore more."
msgstr ""
"与えられた :mod:`glob` スタイルのパターンに一致するディレクトリを無視しま"
"す。 何度も無視するためには複数回使用してください。"

msgid "``createcachetable``"
msgstr "``createcachetable``"

msgid ""
"Creates the cache tables for use with the database cache backend using the "
"information from your settings file. See :doc:`/topics/cache` for more "
"information."
msgstr ""
"設定ファイルからの情報を使用して、データベース キャッシュ バックエンドで使用"
"するためのキャッシュテーブルを作成します。詳細な情報については、 :doc:`/"
"topics/cache` を参照してください。"

msgid ""
"Specifies the database in which the cache table(s) will be created. Defaults "
"to ``default``."
msgstr ""
"キャッシュテーブルを作成するデータベースを指定します。デフォルトは "
"``default`` です。"

msgid ""
"Prints the SQL that would be run without actually running it, so you can "
"customize it or use the migrations framework."
msgstr ""
"実行予定の SQL を、実際には実行せずに出力します。これにより、SQL をカスタマイ"
"ズしたり、マイグレーション フレームワークを使用できます。"

msgid "``dbshell``"
msgstr "``dbshell``"

msgid ""
"Runs the command-line client for the database engine specified in your :"
"setting:`ENGINE <DATABASE-ENGINE>` setting, with the connection parameters "
"specified in your :setting:`USER`, :setting:`PASSWORD`, etc., settings."
msgstr ""
":setting:`USER` や :setting:`PASSWORD` などの設定で指定されたコネクション パ"
"ラメータを使用して、:setting:`ENGINE <DATABASE-ENGINE>` 設定で指定されたデー"
"タベースエンジン用のコマンドライン クライアントを実行します。"

msgid "For PostgreSQL, this runs the ``psql`` command-line client."
msgstr ""
"PostgreSQL の場合、``psql`` コマンドライン クライアントが実行されます。"

msgid "For MySQL, this runs the ``mysql`` command-line client."
msgstr "MySQL の場合、``mysql`` コマンドライン クライアントが実行されます。"

msgid "For SQLite, this runs the ``sqlite3`` command-line client."
msgstr "SQLite の場合、``sqlite3`` コマンドライン クライアントが実行されます。"

msgid "For Oracle, this runs the ``sqlplus`` command-line client."
msgstr "Oracle の場合、``sqlplus`` コマンドライン クライアントが実行されます。"

msgid ""
"This command assumes the programs are on your ``PATH`` so that a call to the "
"program name (``psql``, ``mysql``, ``sqlite3``, ``sqlplus``) will find the "
"program in the right place. There's no way to specify the location of the "
"program manually."
msgstr ""
"このコマンドは、プログラム名 (``psql``、``mysql``、``sqlite3``、``sqlplus``) "
"の呼び出しで正しい場所にあるプログラムが見つかるように ``PATH`` が設定されて"
"いるを想定しています。プログラムの場所を手動で指定する方法はありません。"

msgid ""
"Specifies the database onto which to open a shell. Defaults to ``default``."
msgstr ""
"シェルをオープンするデータベースを指定します。デフォルトは ``default`` です。"

msgid ""
"Any arguments following a ``--`` divider will be passed on to the underlying "
"command-line client. For example, with PostgreSQL you can use the ``psql`` "
"command's ``-c`` flag to execute a raw SQL query directly:"
msgstr ""
"``--`` 区切り文字に続く引数は、ベースのコマンドライン クライアントに渡されま"
"す。たとえば、PostgreSQL では、次のように ``psql`` コマンドの ``-c`` フラグを"
"使うことで、素の SQL クエリを直接実行できます。"

msgid ""
"On MySQL/MariaDB, you can do this with the ``mysql`` command's ``-e`` flag:"
msgstr ""
"MySQL/MariaDB では、次のように ``mysql`` の ``-e`` フラグを使用すると実行でき"
"ます。"

msgid ""
"Be aware that not all options set in the :setting:`OPTIONS` part of your "
"database configuration in :setting:`DATABASES` are passed to the command-"
"line client, e.g. ``'isolation_level'``."
msgstr ""
":setting:`DATABASES` のデータベース設定の :setting:`OPTIONS` 部分で設定された"
"すべてのオプションがコマンドラインクライアントに渡されるわけではないことに注"
"意してください。例えば、``'isolation_level'`` などです。"

msgid "``diffsettings``"
msgstr "``diffsettings``"

msgid ""
"Displays differences between the current settings file and Django's default "
"settings (or another settings file specified by :option:`--default`)."
msgstr ""
"現在の設定ファイルと Django のデフォルトの設定 (または他の :option:`--"
"default` で指定された設定ファイル) の違いを表示します。"

msgid ""
"Settings that don't appear in the defaults are followed by ``\"###\"``. For "
"example, the default settings don't define :setting:`ROOT_URLCONF`, so :"
"setting:`ROOT_URLCONF` is followed by ``\"###\"`` in the output of "
"``diffsettings``."
msgstr ""
"デフォルトに現れない設定には ``\"###\"`` が続きます。たとえば、デフォルト設定"
"が :setting:`ROOT_URLCONF` を定義していない場合、``diffsettings`` の出力内"
"の :setting:`ROOT_URLCONF` の後には ``\"###\"`` が表示されます"

msgid ""
"Displays all settings, even if they have Django's default value. Such "
"settings are prefixed by ``\"###\"``."
msgstr ""
"Django のデフォルト値が設定されていたとしても、すべての設定を表示する。このよ"
"うな設定には、前に ``\"###\"`` という接頭辞が付きます。"

msgid ""
"The settings module to compare the current settings against. Leave empty to "
"compare against Django's default settings."
msgstr ""
"現在の設定の比較対象にする設定モジュール。空にすると、Django のデフォルトの設"
"定と比較します。"

msgid ""
"Specifies the output format. Available values are ``hash`` and ``unified``. "
"``hash`` is the default mode that displays the output that's described "
"above. ``unified`` displays the output similar to ``diff -u``. Default "
"settings are prefixed with a minus sign, followed by the changed setting "
"prefixed with a plus sign."
msgstr ""
"出力フォーマットを指定します。指定可能な値は ``hash`` と ``unified`` です。"
"``hash`` はデフォルトのモードで、上に説明したような出力を表示します。"
"``unified`` は ``diff -u`` に似た出力を表示します。デフォルトの設定はマイナス"
"記号が前に付き、その後にプラス記号が前についた変更された設定が続きます。"

msgid "``dumpdata``"
msgstr "``dumpdata``"

msgid ""
"Outputs to standard output all data in the database associated with the "
"named application(s)."
msgstr ""
"名前を指定したアプリケーションと関連するデータベースの中のすべてのデータを、"
"標準出力にアウトプットします。"

msgid ""
"If no application name is provided, all installed applications will be "
"dumped."
msgstr ""
"アプリケーション名が指定されなかった場合、インストールされたすべてのアプリ"
"ケーションをダンプします。"

msgid ""
"The output of ``dumpdata`` can be used as input for :djadmin:`loaddata`."
msgstr ""
"``dumpdata`` のアウトプットは :djadmin:`loaddata` に対するインプットして使用"
"できます。"

msgid ""
"When result of ``dumpdata`` is saved as a file, it can serve as a :ref:"
"`fixture <fixtures-explanation>` for :ref:`tests <topics-testing-fixtures>` "
"or as an :ref:`initial data <initial-data-via-fixtures>`."
msgstr ""
"``dumpdata`` の出力をファイルとして保存すると、 :ref:`テスト <topics-testing-"
"fixtures>` の :ref:`フィクスチャ <fixtures-explanation>`  や、 :ref:`初期デー"
"タ <initial-data-via-fixtures>` として活用できます。"

msgid ""
"Note that ``dumpdata`` uses the default manager on the model for selecting "
"the records to dump. If you're using a :ref:`custom manager <custom-"
"managers>` as the default manager and it filters some of the available "
"records, not all of the objects will be dumped."
msgstr ""
"``dumpdata`` は、ダンプするレコードを選択するために、モデルのデフォルトのマ"
"ネージャを使用することに注意してください。:ref:`カスタム マネージャ <custom-"
"managers>` をデフォルトのマネージャとして使用していて、利用できるレコードの一"
"部をフィルタリングしている場合、必ずしもすべてのオブジェクトがダンプされるわ"
"けではありません。"

msgid ""
"Uses Django's base manager, dumping records which might otherwise be "
"filtered or modified by a custom manager."
msgstr ""
"レコードをダンプする際に、フィルタリングまたは変更される可能性があるカスタム "
"マネージャーの代わりに、Django のベース マネージャを使用します。"

msgid ""
"Specifies the serialization format of the output. Defaults to JSON. "
"Supported formats are listed in :ref:`serialization-formats`."
msgstr ""
"出力のシリアライズフォーマットを指定します。デフォルトは JSON です。対応"
"フォーマットは :ref:`serialization-formats` に一覧があります。"

msgid ""
"Specifies the number of indentation spaces to use in the output. Defaults to "
"``None`` which displays all data on single line."
msgstr ""
"出力で使用するインデントのスペースの数を指定します。デフォルトは ``None`` "
"で、全てのデータを1行で表示します。"

msgid ""
"Prevents specific applications or models (specified in the form of "
"``app_label.ModelName``) from being dumped. If you specify a model name, "
"then only that model will be excluded, rather than the entire application. "
"You can also mix application names and model names."
msgstr ""
"(``app_label.ModelName`` の形式で指定された) 特定のアプリケーションやモデルが"
"ダンプされるのを防ぎます。モデル名を指定した場合には、アプリケーション全体で"
"はなく、そのモデルだけが除外されます。アプリケーション名とモデル名を混ぜるこ"
"ともできます。"

msgid ""
"If you want to exclude multiple applications, pass ``--exclude`` more than "
"once:"
msgstr ""
"複数のアプリケーションを除外したいときは、``--exclude`` を複数回渡してくださ"
"い。"

msgid ""
"Specifies the database from which data will be dumped. Defaults to "
"``default``."
msgstr ""
"データをダンプするデータベースを指定します。デフォルトは ``default`` です。"

msgid ""
"Uses the ``natural_key()`` model method to serialize any foreign key and "
"many-to-many relationship to objects of the type that defines the method. If "
"you're dumping ``contrib.auth`` ``Permission`` objects or ``contrib."
"contenttypes`` ``ContentType`` objects, you should probably use this flag. "
"See the :ref:`natural keys <topics-serialization-natural-keys>` "
"documentation for more details on this and the next option."
msgstr ""
"``natural_key()`` モデルメソッドを使用して、任意の外部キーと多対多リレーショ"
"ンを、メソッドを定義している種類のオブジェクトにシリアルライズします。"
"``contrib.auth`` の ``Permission`` オブジェクトや ``contrib.contenttypes`` "
"の ``ContentType`` オブジェクトをダンプする場合、おそらくこのフラグを使う必要"
"があります。このオプションと次のオプションの詳細については、:ref:`ナチュラル"
"キー <topics-serialization-natural-keys>` のドキュメントを参照しください。"

msgid ""
"Omits the primary key in the serialized data of this object since it can be "
"calculated during deserialization."
msgstr ""
"このオブジェクトのシリアライズされたデータの主キーを省略します。これが省略で"
"きるのは、デシリアライズ時に計算できるためです。"

msgid ""
"Outputs only the objects specified by a comma separated list of primary "
"keys. This is only available when dumping one model. By default, all the "
"records of the model are output."
msgstr ""
"カンマで区切られた主キーのリストで指定されたオブジェクトだけを出力します。こ"
"れは1つのモデルをダンプするときのみ有効です。デフォルトでは、モデルのすべての"
"レコードが出力されます。"

msgid ""
"Specifies a file to write the serialized data to. By default, the data goes "
"to standard output."
msgstr ""
"シリアライズされたデータを書き込むファイルを指定します。デフォルトでは、デー"
"タは標準出力に出力されます。"

msgid ""
"When this option is set and ``--verbosity`` is greater than 0 (the default), "
"a progress bar is shown in the terminal."
msgstr ""
"このオプションが設定されていて、 ``--verbosity`` が 0 (デフォルト) より大きい"
"場合、ターミナルにプログレスバーが表示されます。"

msgid "Fixtures compression"
msgstr "フィクスチャの圧縮"

msgid ""
"The output file can be compressed with one of the ``bz2``, ``gz``, ``lzma``, "
"or ``xz`` formats by ending the filename with the corresponding extension. "
"For example, to output the data as a compressed JSON file:"
msgstr ""
"出力ファイルは、ファイル名の最後に対応する拡張子をつけることで、 ``bz2``、"
"``gz``、``lzma``、``xz`` のいずれかの形式で圧縮できます。たとえば、データを圧"
"縮された JSON ファイルとして出力するには、次のようにします："

msgid "``flush``"
msgstr "``flush``"

msgid ""
"Removes all data from the database and re-executes any post-synchronization "
"handlers. The table of which migrations have been applied is not cleared."
msgstr ""
"データベースからすべてのデータを削除し、同期後のハンドラを再実行します。マイ"
"グレーションが適用されたテーブルはクリアされません。"

msgid ""
"If you would rather start from an empty database and rerun all migrations, "
"you should drop and recreate the database and then run :djadmin:`migrate` "
"instead."
msgstr ""
"空のデータベースから始めて、すべてのマイグレーションを再実行したい場合は、代"
"わりにデータベースを削除して再作成してから :djadmin:`migrate` を実行してくだ"
"さい。"

msgid "Suppresses all user prompts."
msgstr "すべてのユーザープロンプトを表示しません。"

msgid "Specifies the database to flush. Defaults to ``default``."
msgstr ""
"フラッシュするデータベースを指定します。デフォルトは ``default`` です。"

msgid ""
"Introspects the database tables in the database pointed-to by the :setting:"
"`NAME` setting and outputs a Django model module (a ``models.py`` file) to "
"standard output."
msgstr ""
":setting:`NAME` 設定で指定されたデータベースのテーブルをイントロスペクトし、 "
"Django モデルモジュール (``models.py`` ファイル) を標準出力に出力します。"

msgid ""
"You may choose what tables or views to inspect by passing their names as "
"arguments. If no arguments are provided, models are created for views only "
"if the :option:`--include-views` option is used. Models for partition tables "
"are created on PostgreSQL if the :option:`--include-partitions` option is "
"used."
msgstr ""
"引数にテーブルやビューの名前を渡すことで、検査するテーブルやビューを選択でき"
"ます。引数を指定しなかった場合、 :option:`--include-views` オプションが使用さ"
"れた場合のみ、ビューのモデルが作成されます。PostgreSQL で :option:`--include-"
"partitions` オプションが使用された場合、パーティションテーブルのモデルが作成"
"されます。"

msgid ""
"Use this if you have a legacy database with which you'd like to use Django. "
"The script will inspect the database and create a model for each table "
"within it."
msgstr ""
"Django で使いたいレガシーデータベースがある場合に使ってください。このスクリプ"
"トはデータベースを検査し、各テーブルのモデルを作成します。"

msgid ""
"As you might expect, the created models will have an attribute for every "
"field in the table. Note that ``inspectdb`` has a few special cases in its "
"field-name output:"
msgstr ""
"ご想像の通り、作成されたモデルはテーブルのすべてのフィールドに対して属性を持"
"ちます。 ``inspectdb`` はフィールド名の出力において、いくつかの特殊なケースを"
"持つことに注意してください："

msgid ""
"If ``inspectdb`` cannot map a column's type to a model field type, it'll use "
"``TextField`` and will insert the Python comment ``'This field type is a "
"guess.'`` next to the field in the generated model. The recognized fields "
"may depend on apps listed in :setting:`INSTALLED_APPS`. For example, :mod:"
"`django.contrib.postgres` adds recognition for several PostgreSQL-specific "
"field types."
msgstr ""
"カラムの型をモデルのフィールド型にマッピングできない場合、``inspectdb`` は "
"``TextField`` を使用し、生成されたモデルのフィールドの横に ``'This field "
"type is a guess.'`` という Python のコメントを挿入します。 認識されるフィール"
"ドは :setting:`INSTALLED_APPS` にリストされているアプリに依存します。たとえ"
"ば、 :mod:`django.contrib.postgres` はいくつかの PostgreSQL 固有のフィールド"
"タイプの認識を追加します。"

msgid ""
"If the database column name is a Python reserved word (such as ``'pass'``, "
"``'class'`` or ``'for'``), ``inspectdb`` will append ``'_field'`` to the "
"attribute name. For example, if a table has a column ``'for'``, the "
"generated model will have a field ``'for_field'``, with the ``db_column`` "
"attribute set to ``'for'``. ``inspectdb`` will insert the Python comment "
"``'Field renamed because it was a Python reserved word.'`` next to the field."
msgstr ""
"データベースのカラム名が Python の予約語 (``pass'``, ``class'``, ``for'`` な"
"ど) の場合、 ``inspectdb`` は属性名に ``'_field'`` を追加します。 例えば、"
"テーブルに ``'for'`` というカラムがある場合、生成されるモデルはフィールド "
"``'for_field'`` を持ち、 ``db_column'`` 属性は ``'for'`` に設定されます。その"
"際、 ``inspectdb`` はフィールドの横に ``'Field renamed because it was a "
"Python reserved word.\"`` という Python コメントを挿入します。"

msgid ""
"This feature is meant as a shortcut, not as definitive model generation. "
"After you run it, you'll want to look over the generated models yourself to "
"make customizations. In particular, you'll need to rearrange models' order, "
"so that models that refer to other models are ordered properly."
msgstr ""
"この機能は、決定的なモデル生成としてではなく、ショートカットとして意図されて"
"います。 この機能を実行した後、生成されたモデルを自分で見て、カスタマイズして"
"ください。特に、他のモデルを参照するモデルが適切に並ぶように、モデルの順序を"
"並べ替える必要があるでしょう。"

msgid ""
"Django doesn't create database defaults when a :attr:`~django.db.models."
"Field.default` is specified on a model field. Similarly, database defaults "
"aren't translated to model field defaults or detected in any fashion by "
"``inspectdb``."
msgstr ""
"Django はモデルフィールドに :attr:`~django.db.models.Field.default` が指定さ"
"れても、データベースのデフォルト値を作成しません。 同様に、データベースのデ"
"フォルト値はモデルフィールドのデフォルト値に変換されませんし、 ``inspectdb`` "
"によって検出されることもありません。"

msgid ""
"By default, ``inspectdb`` creates unmanaged models. That is, ``managed = "
"False`` in the model's ``Meta`` class tells Django not to manage each "
"table's creation, modification, and deletion. If you do want to allow Django "
"to manage the table's lifecycle, you'll need to change the :attr:`~django.db."
"models.Options.managed` option to ``True`` (or remove it because ``True`` is "
"its default value)."
msgstr ""
"デフォルトでは、 ``inspectdb`` は非管理モデルを作成します。 つまり、モデルの "
"``Meta`` クラスで ``managed = False`` を指定することで、 Django は各テーブル"
"の作成、変更、削除を管理しないようになります。テーブルのライフサイクルを "
"Django に管理させたい場合は、 :attr:`~django.db.models.Options.managed` オプ"
"ションを ``True`` に変更する必要があります (あるいは、 ``True`` がデフォルト"
"値なので削除してください)。"

msgid "Database-specific notes"
msgstr "データベース固有の注意事項"

msgid ""
"Models are created for materialized views if :option:`--include-views` is "
"used."
msgstr ""
":option:`--include-views` が使用されている場合、モデルはマテリアライズド"
"ビューのために作成されます。"

msgid "Models are created for foreign tables."
msgstr "モデルは外部テーブル用に作成されます。"

msgid ""
"Models are created for partition tables if :option:`--include-partitions` is "
"used."
msgstr ""
":option:`--include-partitions` が使用されている場合、モデルはパーティション"
"テーブルに対して作成されます。"

msgid "Specifies the database to introspect. Defaults to ``default``."
msgstr ""
"イントロスペクトするデータベースを指定します。デフォルトは ``default`` です。"

msgid "If this option is provided, models are also created for partitions."
msgstr "このオプションを指定すると、パーティション用のモデルも作成されます。"

msgid "Only support for PostgreSQL is implemented."
msgstr "PostgreSQL 向けのサポートのみが実装されています。"

msgid "If this option is provided, models are also created for database views."
msgstr ""
"このオプションを指定すると、データベースビュー用のモデルも作成されます。"

msgid "``loaddata``"
msgstr "``loaddata``"

msgid ""
"Searches for and loads the contents of the named :ref:`fixture <fixtures-"
"explanation>` into the database."
msgstr ""
"指定された :ref:`フィクスチャ <fixtures-explanation>` の内容を検索してデータ"
"ベースにロードします。"

msgid ""
"Specifies the database into which the data will be loaded. Defaults to "
"``default``."
msgstr ""
"データを読み込むデータベースを指定します。デフォルトは ``default`` です。"

msgid ""
"Ignores fields and models that may have been removed since the fixture was "
"originally generated."
msgstr ""
"フィクスチャが最初に生成されてから削除された可能性のあるフィールドやモデルを"
"無視します。"

msgid ""
"Specifies a single app to look for fixtures in rather than looking in all "
"apps."
msgstr ""
"すべてのアプリでフィクスチャを探すのではなく、一つのアプリでフィクスチャを探"
"すように指定します。"

msgid ""
"Specifies the :ref:`serialization format <serialization-formats>` (e.g., "
"``json`` or ``xml``) for fixtures :ref:`read from stdin <loading-fixtures-"
"stdin>`."
msgstr ""
":ref:`stdin から読み込む <loading-fixtures-stdin>` フィクスチャの :ref:`シリ"
"アライズフォーマット<serialization-formats>` (``json`` や ``xml`` など) を指"
"定します。"

msgid ""
"Excludes loading the fixtures from the given applications and/or models (in "
"the form of ``app_label`` or ``app_label.ModelName``). Use the option "
"multiple times to exclude more than one app or model."
msgstr ""
"(``app_label`` または ``app_label.ModelName`` の形で) 指定されたアプリケー"
"ションやモデルからのフィクスチャの読み込みを除外します。複数のアプリやモデル"
"を除外するには、このオプションを複数回使います。"

msgid "Loading fixtures from ``stdin``"
msgstr "``stdin`` からフィクスチャを読み込む"

msgid ""
"You can use a dash as the fixture name to load input from ``sys.stdin``. For "
"example:"
msgstr ""
"``sys.stdin`` から入力を読み込むには、フィクスチャ名としてハイフンを使用しま"
"す。たとえば下記のようにします："

msgid ""
"When reading from ``stdin``, the :option:`--format <loaddata --format>` "
"option is required to specify the :ref:`serialization format <serialization-"
"formats>` of the input (e.g., ``json`` or ``xml``)."
msgstr ""
"``stdin`` から読み込む場合、 :option:`--format <loaddata --format>` オプショ"
"ンで入力の :ref:`シリアライズフォーマット <serialization-formats>` (例 "
"``json`` や ``xml``) を指定する必要があります。"

msgid ""
"Loading from ``stdin`` is useful with standard input and output "
"redirections. For example:"
msgstr ""
"``stdin`` からの読み込みは、標準入出力をリダイレクトするのに便利です。たとえ"
"ば："

msgid ""
"The :djadmin:`dumpdata` command can be used to generate input for "
"``loaddata``."
msgstr ""
":djadmin:`dumpdata` コマンドは ``loaddata`` の入力を生成するために使用できま"
"す。"

msgid ""
"For more detail about fixtures see the :ref:`fixtures-explanation` topic."
msgstr ""
"フィクスチャの詳細については :ref:`fixtures-explanation` トピックを参照してく"
"ださい。"

msgid "``makemessages``"
msgstr "``makemessages``"

msgid ""
"Runs over the entire source tree of the current directory and pulls out all "
"strings marked for translation. It creates (or updates) a message file in "
"the conf/locale (in the Django tree) or locale (for project and application) "
"directory. After making changes to the messages files you need to compile "
"them with :djadmin:`compilemessages` for use with the builtin gettext "
"support. See the :ref:`i18n documentation <how-to-create-language-files>` "
"for details."
msgstr ""
"現在のディレクトリのソースツリー全体を走査し、翻訳が必要な文字列をすべて取り"
"出します。conf/locale ディレクトリ (Django ツリーの場合) か locale ディレクト"
"リ (プロジェクトとアプリケーションの場合) にメッセージファイルを作成 (または"
"更新) します。メッセージファイルを変更した後は、組み込みの gettext サポートを"
"使うために :djadmin:`compilemessages` でコンパイルする必要があります。詳しく"
"は :ref:`国際化のドキュメント <how-to-create-language-files>` を参照してくだ"
"さい。"

msgid ""
"This command doesn't require configured settings. However, when settings "
"aren't configured, the command can't ignore the :setting:`MEDIA_ROOT` and :"
"setting:`STATIC_ROOT` directories or include :setting:`LOCALE_PATHS`."
msgstr ""
"このコマンドは設定を必要としません。しかし、設定が構成されていない場合、コマ"
"ンドは :setting:`MEDIA_ROOT` と :setting:`STATIC_ROOT` ディレクトリを無視した"
"り、 :setting:`LOCALE_PATHS` をインクルードしたりすることはできません。"

msgid "Updates the message files for all available languages."
msgstr "利用可能な全ての言語に対してメッセージファイルを更新します。"

msgid ""
"Specifies a list of file extensions to examine (default: ``html``, ``txt``, "
"``py`` or ``js`` if :option:`--domain` is ``djangojs``)."
msgstr ""
"検査するファイル拡張子のリストを指定します (デフォルト: ``html``、``txt``、"
"``py``、 ``js`` (:option:`--domain` が ``djangojs`` の場合)。"

msgid ""
"Separate multiple extensions with commas or use ``-e`` or ``--extension`` "
"multiple times:"
msgstr ""
"複数の拡張子はカンマで区切るか、``-e`` または ``--extension`` を複数回使用し"
"てください："

msgid "Specifies the locale(s) to process."
msgstr "処理する場所 (locale) を指定します。"

msgid "Specifies the domain of the messages files. Supported options are:"
msgstr ""
"メッセージファイルのドメインを指定します。サポートされているオプションは以下"
"の通りです:"

msgid "``django`` for all ``*.py``, ``*.html`` and ``*.txt`` files (default)"
msgstr ""
"``*.py``、``*.html``、``*.txt`` ファイルすべてに対して ``django`` (デフォル"
"ト)"

msgid "``djangojs`` for ``*.js`` files"
msgstr "``*.js`` ファイルに対して ``djangojs``"

msgid ""
"Follows symlinks to directories when looking for new translation strings."
msgstr ""
"新しい翻訳文字列を探すときに、ディレクトリへのシンボリックリンクをたどりま"
"す。"

msgid ""
"Ignores files or directories matching the given :mod:`glob`-style pattern. "
"Use multiple times to ignore more."
msgstr ""
"与えられた :mod:`glob` スタイルのパターンに一致するファイルやディレクトリを無"
"視します。 何度も無視するためには複数回使用してください。"

msgid ""
"These patterns are used by default: ``'CVS'``, ``'.*'``, ``'*~'``, ``'*."
"pyc'``."
msgstr ""
"次のパターンはデフォルトで使われます: ``'CVS'``、``'.*'``、``'*~'``、``'*."
"pyc'``。"

msgid "Disables the default values of ``--ignore``."
msgstr "``--ignore`` のデフォルト値を無効化します。"

msgid ""
"Disables breaking long message lines into several lines in language files."
msgstr "言語ファイル内で、長いメッセージ行の複数行への分割を無効化します。"

msgid ""
"Suppresses writing '``#: filename:line``’ comment lines in language files. "
"Using this option makes it harder for technically skilled translators to "
"understand each message's context."
msgstr ""
"言語ファイル内に '``#: filename:line``' コメント行を書き込むのを抑制します。"
"このオプションを使うと、技術的な翻訳者がそれぞれのメッセージの文脈を理解する"
"ことが難しくなります。"

msgid ""
"Controls ``#: filename:line`` comment lines in language files. If the option "
"is:"
msgstr ""
"言語ファイル中のコメント行 ``#: filename:line`` をコントロールします。オプ"
"ションは下記です："

msgid ""
"``full`` (the default if not given): the lines include both file name and "
"line number."
msgstr ""
"``full`` (省略時のデフォルト): ファイル名と行番号の両方を含む行を表示します。"

msgid "``file``: the line number is omitted."
msgstr "``file``: 行番号は省略されます。"

msgid "``never``: the lines are suppressed (same as :option:`--no-location`)."
msgstr "``never``: 行の出力が抑制されます (:option:`--no-location` と同じ)。"

msgid "Requires ``gettext`` 0.19 or newer."
msgstr "``gettext`` 0.19 以降が必要です。"

msgid "Removes obsolete message strings from the ``.po`` files."
msgstr "廃止されたメッセージ文字列を ``.po`` ファイルから削除します。"

msgid ""
"Prevents deleting the temporary ``.pot`` files generated before creating the "
"``.po`` file. This is useful for debugging errors which may prevent the "
"final language files from being created."
msgstr ""
"``.po`` ファイルが作成される前に生成される一時的な ``.pot`` ファイルを削除し"
"ないようにします。最終的な言語ファイルが生成されるのを妨げるようなエラーをデ"
"バッグするために有用です。"

msgid ""
"See :ref:`customizing-makemessages` for instructions on how to customize the "
"keywords that :djadmin:`makemessages` passes to ``xgettext``."
msgstr ""
":djadmin:`makemessages` が ``xgettext`` に渡すキーワードをカスタマイズする方"
"法を知りたい場合は、:ref:`customizing-makemessages` を参照してください。"

msgid "``makemigrations``"
msgstr "``makemigrations``"

msgid ""
"Creates new migrations based on the changes detected to your models. "
"Migrations, their relationship with apps and more are covered in depth in :"
"doc:`the migrations documentation</topics/migrations>`."
msgstr ""
"検出されたモデルの変更に基づいて、新しいマイグレーションを作成します。マイグ"
"レーションおよびそのアプリとの関係は、詳しくは  :doc:`マイグレーションのド"
"キュメント </topics/migrations>` で説明しています。"

msgid ""
"Providing one or more app names as arguments will limit the migrations "
"created to the app(s) specified and any dependencies needed (the table at "
"the other end of a ``ForeignKey``, for example)."
msgstr ""
"1つ以上のアプリ名を引数として与えると、作成するマイグレーションを、指定された"
"アプリとそれに必要な依存関係 (たとえば、外部キーで繋がれた他のテーブルなど) "
"に限定されます。"

msgid ""
"To add migrations to an app that doesn't have a ``migrations`` directory, "
"run ``makemigrations`` with the app's ``app_label``."
msgstr ""
"マイグレーションを ``migrations`` ディレクトリが存在しないアプリに追加するに"
"は、``makemigrations`` にアプリの ``app_label`` を付けて実行します。"

msgid ""
"Suppresses all user prompts. If a suppressed prompt cannot be resolved "
"automatically, the command will exit with error code 3."
msgstr ""
"すべてのユーザープロンプトを抑制します。もし、抑制されたプロンプトが自動的に"
"解決できなかった場合は、エラーコード 3 で終了します。"

msgid ""
"Outputs an empty migration for the specified apps, for manual editing. This "
"is for advanced users and should not be used unless you are familiar with "
"the migration format, migration operations, and the dependencies between "
"your migrations."
msgstr ""
"手動で編集するために、指定されたアプリに対する空のマイグレーションを出力しま"
"す。このオプションは詳しいユーザーのためのもので、マイグレーションのフォー"
"マット、マイグレーション・オペレーション、およびマイグレーション間の依存関係"
"について十分理解していない限り、使うべきではありません。"

msgid ""
"Shows what migrations would be made without actually writing any migrations "
"files to disk. Using this option along with ``--verbosity 3`` will also show "
"the complete migrations files that would be written."
msgstr ""
"実際にマイグレーションをディスクには書き込まず、作成される予定のマイグレー"
"ションを表示します。このオプションを ``--verbosity 3`` オプションと併用するこ"
"とで、書き込まれる予定のマイグレーションファイルの内容そのものを表示できま"
"す。"

msgid "Enables fixing of migration conflicts."
msgstr "マイグレーションで発生するコンフリクトの修復を有効にする"

msgid ""
"Allows naming the generated migration(s) instead of using a generated name. "
"The name must be a valid Python :ref:`identifier <python:identifiers>`."
msgstr ""
"生成されたマイグレーションに名前を付けることができます。名前は有効な Python :"
"ref:`識別子 <python:identifiers>` でなければなりません。"

msgid "Generate migration files without Django version and timestamp header."
msgstr ""
"Django のバージョンとタイムスタンプヘッダなしでマイグレーションファイルを生成"
"します。"

msgid ""
"Makes ``makemigrations`` exit with a non-zero status when model changes "
"without migrations are detected. Implies ``--dry-run``."
msgstr ""
"マイグレーションを伴わないモデル変更が検出された場合に、 ``makemigrations`` "
"を 0 以外のステータスで終了するようにします。これは ``--dry-run`` を意味しま"
"す。"

msgid ""
"In older versions, the missing migrations were also created when using the "
"``--check`` option."
msgstr ""
"古いバージョンでは、 ``--check`` オプションを使用した場合にも、欠損したマイグ"
"レーションが作成されていました。"

msgid ""
"Diverts log output and input prompts to ``stderr``, writing only paths of "
"generated migration files to ``stdout``."
msgstr ""
"ログ出力と入力プロンプトを ``stderr`` に流し、生成されたマイグレーションファ"
"イルのパスのみを ``stdout`` に書き込みます。"

msgid ""
"Merges model changes into the latest migration and optimize the resulting "
"operations."
msgstr ""
"モデルの変更を最新のマイグレーションにマージし、その結果生じるオペレーション"
"を最適化します。"

msgid ""
"The updated migration will have a generated name. In order to preserve the "
"previous name, set it using ``--name``."
msgstr ""
"更新されたマイグレーションは生成された名前を持ちます。以前の名前を保持するに"
"は、``--name`` を使って設定してください。"

msgid "``migrate``"
msgstr "``migrate``"

msgid ""
"Synchronizes the database state with the current set of models and "
"migrations. Migrations, their relationship with apps and more are covered in "
"depth in :doc:`the migrations documentation</topics/migrations>`."
msgstr ""
"データベースの状態を、現在のモデルとマイグレーションのセットを基づいて同期し"
"ます。マイグレーションおよびそのアプリとの関係については、詳しくは :doc:`マイ"
"グレーションのドキュメント </topics/migrations>` で説明しています。"

msgid ""
"The behavior of this command changes depending on the arguments provided:"
msgstr "このコマンドの動作は、次のように与えられた引数によって変化します。"

msgid "No arguments: All apps have all of their migrations run."
msgstr ""
"引数なし: 全てのアプリが、それぞれが持つマイグレーションを全て実行します。"

msgid ""
"``<app_label>``: The specified app has its migrations run, up to the most "
"recent migration. This may involve running other apps' migrations too, due "
"to dependencies."
msgstr ""
"``<app_label>``: 指定したアプリに最新のマイグレーションまで実行させます。依存"
"関係によっては、他のアプリのマイグレーションも実行される場合もあります"

msgid ""
"``<app_label> <migrationname>``: Brings the database schema to a state where "
"the named migration is applied, but no later migrations in the same app are "
"applied. This may involve unapplying migrations if you have previously "
"migrated past the named migration. You can use a prefix of the migration "
"name, e.g. ``0001``, as long as it's unique for the given app name. Use the "
"name ``zero`` to migrate all the way back i.e. to revert all applied "
"migrations for an app."
msgstr ""
"``<app_label> <migrationname>``: データベーススキーマを、指定した名前のマイグ"
"レーションが実行された状態になるようにします。指定したよりも後のマイグレー"
"ションは適用されません。指定されたより前のマイグレーションがすでに適用されて"
"いた場合など、指定の仕方によってはマイグレーションが実行できない場合がありま"
"す。アプリに対するすべてのマイグレーションの適用をリセットするには、``zero`` "
"という名前を指定してください。指定したアプリ名で一意であれば、マイグレーショ"
"ン名のプレフィックス、例えば ``0001`` を使用できます。アプリに適用されたマイ"
"グレーションをすべて元に戻すには ``zero`` という名前を指定してください。"

msgid ""
"When unapplying migrations, all dependent migrations will also be unapplied, "
"regardless of ``<app_label>``. You can use ``--plan`` to check which "
"migrations will be unapplied."
msgstr ""
"マイグレーションの適用を取り消すと、``<app_label>`` に関係なく、依存するマイ"
"グレーションもすべて取り消されます。どのマイグレーションが取り消されるかを調"
"べるには ``--plan`` を使用してください。"

msgid "Specifies the database to migrate. Defaults to ``default``."
msgstr ""
"マイグレートするデータベースを指定します。デフォルトは ``default`` です。"

msgid ""
"Marks the migrations up to the target one (following the rules above) as "
"applied, but without actually running the SQL to change your database schema."
msgstr ""
"（上記のルールに従って）ターゲットのマイグレーションまでを適用されたものとし"
"てマークしますが、データベーススキーマを変更するSQLを実際には実行しません。"

msgid ""
"This is intended for advanced users to manipulate the current migration "
"state directly if they're manually applying changes; be warned that using "
"``--fake`` runs the risk of putting the migration state table into a state "
"where manual recovery will be needed to make migrations run correctly."
msgstr ""
"これは上級ユーザが手動で変更を適用する場合に、現在のマイグレーション状態を直"
"接操作することを想定しています。 ``--fake`` を使用すると、マイグレーションを"
"正しく実行するためにマイグレーション状態テーブルを手動で回復する必要がある状"
"態になる危険性があることに注意してください。"

msgid ""
"Allows Django to skip an app's initial migration if all database tables with "
"the names of all models created by all :class:`~django.db.migrations."
"operations.CreateModel` operations in that migration already exist. This "
"option is intended for use when first running migrations against a database "
"that preexisted the use of migrations. This option does not, however, check "
"for matching database schema beyond matching table names and so is only safe "
"to use if you are confident that your existing schema matches what is "
"recorded in your initial migration."
msgstr ""
"マイグレーションに含まれる全ての :class:`~django.db.migrations.operations."
"CreateModel` オペレーションで作成された全てのモデルの名前を持つデータベース"
"テーブルが既に存在する場合、 Django がアプリの初期マイグレーションをスキップ"
"できるようにします。このオプションは、マイグレーションを使用する前のデータ"
"ベースに対してマイグレーションを初めて実行するときに使用することを想定してい"
"ます。しかし、このオプションは、テーブル名の一致以外のデータベーススキーマの"
"一致をチェックしないので、既存のスキーマが初期マイグレーションに記録されてい"
"るものと一致することを確信している場合のみ安全に使用できます。"

msgid ""
"Shows the migration operations that will be performed for the given "
"``migrate`` command."
msgstr ""
"指定された ``migrate`` コマンドに対して実行されるマイグレーション・オペレー"
"ションを表示します。"

msgid ""
"Allows creating tables for apps without migrations. While this isn't "
"recommended, the migrations framework is sometimes too slow on large "
"projects with hundreds of models."
msgstr ""
"マイグレーションせずにアプリ用のテーブルを作成できるようにします。これは推奨"
"されませんが、マイグレーションフレームワークは何百ものモデルがある大規模なプ"
"ロジェクトでは遅すぎることがあります。"

msgid ""
"Suppresses all user prompts. An example prompt is asking about removing "
"stale content types."
msgstr ""
"すべてのユーザープロンプトを表示しません。プロンプトの例は、古くなったコンテ"
"ンツタイプの削除に関する質問です。"

msgid ""
"Makes ``migrate`` exit with a non-zero status when unapplied migrations are "
"detected."
msgstr ""
"適用されていないマイグレーションが検出された場合に、 ``migrate`` を 0 以外の"
"ステータスで終了するようにします。"

msgid ""
"Deletes nonexistent migrations from the ``django_migrations`` table. This is "
"useful when migration files replaced by a squashed migration have been "
"removed. See :ref:`migration-squashing` for more details."
msgstr ""
"存在しないマイグレーションを ``django_migrations`` テーブルから削除します。こ"
"れはスカッシュしたマイグレーションによって置き換えられたマイグレーションファ"
"イルが削除された場合に便利です。詳細は :ref:`migration-squashing` を参照して"
"ください。"

msgid "``optimizemigration``"
msgstr "``optimizemigration``"

msgid ""
"Optimizes the operations for the named migration and overrides the existing "
"file. If the migration contains functions that must be manually copied, the "
"command creates a new migration file suffixed with ``_optimized`` that is "
"meant to replace the named migration."
msgstr ""
"指定されたマイグレーション・オペレーションを最適化し、既存のファイルを上書き"
"します。マイグレーションに手動でコピーしなければならない関数が含まれている場"
"合、このコマンドは ``_optimized`` で終わる新しいマイグレーションファイルを作"
"成し、指定されたマイグレーションを置き換えます。"

msgid ""
"Makes ``optimizemigration`` exit with a non-zero status when a migration can "
"be optimized."
msgstr ""
"マイグレーションを最適化できる場合に、 ``optimizemigration`` を 0 以外のス"
"テータスで終了するようにします。"

msgid ""
"Starts a lightweight development web server on the local machine. By "
"default, the server runs on port 8000 on the IP address ``127.0.0.1``. You "
"can pass in an IP address and port number explicitly."
msgstr ""
"ローカルマシンで軽量の開発用ウェブサーバを起動します。デフォルトでは、IPアド"
"レス ``127.0.0.1`` のポート 8000 で動作します。IPアドレスとポート番号を明示的"
"に渡すこともできます。"

msgid ""
"If you run this script as a user with normal privileges (recommended), you "
"might not have access to start a port on a low port number. Low port numbers "
"are reserved for the superuser (root)."
msgstr ""
"このスクリプトを通常の権限を持つユーザ（推奨）で実行した場合、小さいポート番"
"号のポートを起動するためのアクセス権がない可能性があります。小さいポート番号"
"はスーパーユーザ（root）のために予約されています。"

msgid ""
"This server uses the WSGI application object specified by the :setting:"
"`WSGI_APPLICATION` setting."
msgstr ""
"このサーバーは :setting:`WSGI_APPLICATION` 設定で指定された WSGI アプリケー"
"ションオブジェクトを使用します。"

msgid ""
"DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through "
"security audits or performance tests. (And that's how it's gonna stay. We're "
"in the business of making web frameworks, not web servers, so improving this "
"server to be able to handle a production environment is outside the scope of "
"Django.)"
msgstr ""
"**このサーバーを本番環境で使用しないでください** 。セキュリティ監査もパフォー"
"マンステストも行っていません。(そして、それは将来も変わりません。私たちは "
"Web フレームワークを作るのが仕事であって、 Web サーバを作るのが仕事ではないの"
"で、本番環境を扱えるようにこのサーバを改良するのは Django の範囲外です)。"

msgid ""
"The development server automatically reloads Python code for each request, "
"as needed. You don't need to restart the server for code changes to take "
"effect. However, some actions like adding files don't trigger a restart, so "
"you'll have to restart the server in these cases."
msgstr ""
"開発サーバーは必要に応じてリクエストごとにPythonコードを自動的にリロードしま"
"す。コード変更の効果を得るためにサーバーを再起動する必要はありません。しかし"
"ながら、ファイルの追加のようないくつかの行動は再起動をトリガーしません、この"
"ような場合はサーバーを再起動する必要があります。"

msgid ""
"If you're using Linux or MacOS and install both :pypi:`pywatchman` and the "
"`Watchman`_ service, kernel signals will be used to autoreload the server "
"(rather than polling file modification timestamps each second). This offers "
"better performance on large projects, reduced response time after code "
"changes, more robust change detection, and a reduction in power usage. "
"Django supports ``pywatchman`` 1.2.0 and higher."
msgstr ""
"Linux や MacOS を使用していて、 :pypi:`pywatchman` と `Watchman`_ サービスの"
"両方をインストールしている場合、カーネルシグナルがサーバーの自動再ロードに使"
"用されます(毎秒ファイルの変更タイムスタンプをポーリングするのではなく)。これ"
"により、大規模なプロジェクトでのパフォーマンスが改善され、コード変更後の 応答"
"時間が短縮され、変更検出がより強固になり、消費電力が削減されます。Django は "
"``pywatchman`` 1.2.0 以降をサポートしています。"

msgid "Large directories with many files may cause performance issues"
msgstr ""
"巨大なディレクトリに多くのファイルが含まれる場合、パフォーマンスの問題を引き"
"起こす可能性があります。"

msgid ""
"When using Watchman with a project that includes large non-Python "
"directories like ``node_modules``, it's advisable to ignore this directory "
"for optimal performance. See the `watchman documentation`_ for information "
"on how to do this."
msgstr ""
"``node_modules`` のような大きな非 Python ディレクトリを含むプロジェクトで "
"Watchman を使う場合、最適なパフォーマンスのためにこのディレクトリを無視するこ"
"とをお勧めします。この方法については `watchman documentation`_ を参照してくだ"
"さい。"

msgid "Watchman timeout"
msgstr "Watchman のタイムアウト"

msgid ""
"The default timeout of ``Watchman`` client is 5 seconds. You can change it "
"by setting the :envvar:`DJANGO_WATCHMAN_TIMEOUT` environment variable."
msgstr ""
"Watchman クライアントのデフォルトのタイムアウトは 5 秒です。これを変更するに"
"は :envvar:`DJANGO_WATCHMAN_TIMEOUT` 環境変数を設定します。"

msgid ""
"When you start the server, and each time you change Python code while the "
"server is running, the system check framework will check your entire Django "
"project for some common errors (see the :djadmin:`check` command). If any "
"errors are found, they will be printed to standard output. You can use the "
"``--skip-checks`` option to skip running system checks."
msgstr ""
"サーバを起動したとき、そしてサーバ起動中に Python コードを変更するたびに、シ"
"ステムチェックフレームワークが Django プロジェクト全体に一般的なエラーがない"
"かチェックします (:djadmin:`check` コマンドを参照してください)。エラーが見つ"
"かった場合、標準出力に出力されます。システムチェックの実行をスキップするには "
"``--skip-checks`` オプションを使います。"

msgid ""
"You can run as many concurrent servers as you want, as long as they're on "
"separate ports by executing ``django-admin runserver`` more than once."
msgstr ""
"``django-admin runserver`` を複数回実行することで、異なるポート上であれば、好"
"きなだけ並列でサーバーを実行できます。"

msgid ""
"Note that the default IP address, ``127.0.0.1``, is not accessible from "
"other machines on your network. To make your development server viewable to "
"other machines on the network, use its own IP address (e.g. "
"``192.168.2.1``), ``0`` (shortcut for ``0.0.0.0``), ``0.0.0.0``, or ``::`` "
"(with IPv6 enabled)."
msgstr ""
"デフォルトの IP アドレス ``127.0.0.1`` は、同じネットワーク上の他のマシンから"
"はアクセスできないことに注意してください。開発用サーバーを他のマシンから見ら"
"れるようにするには、ネットワーク上の自分のローカル IP アドレス (例 "
"``192.168.2.1``) または ``0`` (``0.0.0.0`` のショートカット)、 ``0.0.0.0`` 、"
"または ``::`` (IPv6を有効にした場合) を使用します。"

msgid ""
"You can provide an IPv6 address surrounded by brackets (e.g. "
"``[200a::1]:8000``). This will automatically enable IPv6 support."
msgstr ""
"ブラケットで囲んだ IPv6 アドレス (例 ``[200a::1]:8000``) も使用できます。その"
"場合は、IPv6 のサポートが自動的に有効になります。"

msgid "A hostname containing ASCII-only characters can also be used."
msgstr "ホスト名には ASCII 文字のみからなる文字列も使用できます。"

msgid ""
"If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled "
"(default in new projects) the :djadmin:`runserver` command will be "
"overridden with its own :ref:`runserver<staticfiles-runserver>` command."
msgstr ""
":doc:`staticfiles</ref/contrib/staticfiles>` contrib アプリが有効になっている"
"場合 (新しいプロジェクトのデフォルト)、 :djadmin:`runserver` コマンドは独自"
"の :ref:`runserver<staticfiles-runserver>` コマンドで上書きされます。"

msgid ""
"Logging of each request and response of the server is sent to the :ref:"
"`django-server-logger` logger."
msgstr ""
"サーバの各リクエストとレスポンスのログは :ref:`django-server-logger` ロガーに"
"送られます。"

msgid ""
"Disables the auto-reloader. This means any Python code changes you make "
"while the server is running will *not* take effect if the particular Python "
"modules have already been loaded into memory."
msgstr ""
"自動リローダを無効にします。これは、もし特定の Python モジュールが既にメモリ"
"に読み込まれている場合、サーバの実行中に行った Python コードの変更は *反映* "
"されないことを意味します。"

msgid ""
"Disables use of threading in the development server. The server is "
"multithreaded by default."
msgstr ""
"開発サーバーでのスレッドの使用を無効にします。デフォルトではサーバーはマルチ"
"スレッドです。"

msgid ""
"Uses IPv6 for the development server. This changes the default IP address "
"from ``127.0.0.1`` to ``::1``."
msgstr ""
"開発用サーバーで IPv6 を使用します。これにより、デフォルトの IP アドレスが "
"``127.0.0.1`` から ``::1`` に変わります。"

msgid "Examples of using different ports and addresses"
msgstr "異なるポートとアドレスを使用する場合の引数例"

msgid "Port 8000 on IP address ``127.0.0.1``:"
msgstr "IP アドレス ``127.0.0.1`` 上でポート 8000 を使用する場合:"

msgid "Port 8000 on IP address ``1.2.3.4``:"
msgstr "IP アドレス ``1.2.3.4`` 上でポート 8000 を使用する場合:"

msgid "Port 7000 on IP address ``127.0.0.1``:"
msgstr "IP アドレス ``127.0.0.1`` 上でポート 7000 を使用する場合:"

msgid "Port 7000 on IP address ``1.2.3.4``:"
msgstr "IP アドレス ``1.2.3.4`` 上でポート 7000 を使用する場合:"

msgid "Port 8000 on IPv6 address ``::1``:"
msgstr "IPv6 アドレス ``::1`` 上でポート 8000 を使用する場合:"

msgid "Port 7000 on IPv6 address ``::1``:"
msgstr "IPv6 アドレス ``::1`` 上でポート 7000 を使用する場合:"

msgid "Port 7000 on IPv6 address ``2001:0db8:1234:5678::9``:"
msgstr ""
"IPv6 アドレス ``2001:0db8:1234:5678::9`` 上でポート 7000 を使用する場合:"

msgid "Port 8000 on IPv4 address of host ``localhost``:"
msgstr "IPv4 アドレスのホスト ``localhost`` 上でポート 8000 を使用する場合:"

msgid "Port 8000 on IPv6 address of host ``localhost``:"
msgstr "IPv6 アドレスのホスト ``localhost`` 上でポート 8000 を使用する場合:"

msgid "Serving static files with the development server"
msgstr "開発用サーバーで静的 (static) ファイルを配信する"

msgid ""
"By default, the development server doesn't serve any static files for your "
"site (such as CSS files, images, things under :setting:`MEDIA_URL` and so "
"forth). If you want to configure Django to serve static media, read :doc:`/"
"howto/static-files/index`."
msgstr ""
"デフォルトでは、開発サーバはサイトの静的ファイル (CSS ファイルや画像、 :"
"setting:`MEDIA_URL` 以下にあるものなど) を配信しません。Django が静的メディア"
"を配信するように設定したい場合は、 :doc:`/howto/static-files/index` を参照し"
"てください。"

msgid "Serving with ASGI in development"
msgstr "開発中に ASGI サーバーを使う"

msgid ""
"Django's ``runserver`` command provides a WSGI server. In order to run under "
"ASGI you will need to use an :doc:`ASGI server </howto/deployment/asgi/"
"index>`. The Django Daphne project provides :ref:`daphne-runserver` that you "
"can use."
msgstr ""
"Django の ``runserver`` コマンドは WSGI サーバーを提供します。ASGI で実行する"
"には、 :doc:`ASGI サーバー </howto/deployment/asgi/index>` を使う必要がありま"
"す。Django Daphne プロジェクトは、 :ref:`daphne-runserver` を提供しています。"

msgid "``sendtestemail``"
msgstr "``sendtestemail``"

msgid ""
"Sends a test email (to confirm email sending through Django is working) to "
"the recipient(s) specified. For example:"
msgstr ""
"（Django によるメール送信が動作していることを確認するために）指定した受信者に"
"テストメールを送信します。たとえば以下のようにします："

msgid ""
"There are a couple of options, and you may use any combination of them "
"together:"
msgstr ""
"いくつかのオプションがあるので、次のようにそれらを任意に組み合わせて使用でき"
"ます。"

msgid ""
"Mails the email addresses specified in :setting:`MANAGERS` using :meth:"
"`~django.core.mail.mail_managers()`."
msgstr ""
":meth:`~django.core.mail.mail_managers()` を使用して :setting:`MANAGERS` で指"
"定されたメールアドレスにメールします。"

msgid ""
"Mails the email addresses specified in :setting:`ADMINS` using :meth:"
"`~django.core.mail.mail_admins()`."
msgstr ""
":meth:`~django.core.mail.mail_admins()` を使用して :setting:`ADMINS` で指定さ"
"れたメールアドレスにメールします。"

msgid "``shell``"
msgstr "``shell``"

msgid "Starts the Python interactive interpreter."
msgstr "Python のインタラクティブ・インタープリタを開始します。"

msgid ""
"Specifies the shell to use. By default, Django will use IPython_ or bpython_ "
"if either is installed. If both are installed, specify which one you want "
"like so:"
msgstr ""
"使用するシェルを指定します。デフォルトでは、Django はインストールされている場"
"合には  IPython_ または bpython_ を使用します。両方インストールされている場合"
"には、次のようにして使いたいシェルを指定してください。"

msgid "IPython:"
msgstr "IPython:"

msgid "bpython:"
msgstr "bpython:"

msgid ""
"If you have a \"rich\" shell installed but want to force use of the "
"\"plain\" Python interpreter, use ``python`` as the interface name, like so:"
msgstr ""
"\"リッチな\" シェルをインストールしているが、\"プレーン\" な Python インタプ"
"リタを強制的に使いたい場合は、インターフェイス名として ``python`` を次のよう"
"に使用します："

msgid ""
"Disables reading the startup script for the \"plain\" Python interpreter. By "
"default, the script pointed to by the :envvar:`PYTHONSTARTUP` environment "
"variable or the ``~/.pythonrc.py`` script is read."
msgstr ""
"\"プレーン\" Python インタプリタのスタートアップスクリプトを読み込まないよう"
"にします。デフォルトでは :envvar:`PYTHONSTARTUP` 環境変数か ``~/.pythonrc."
"py`` スクリプトが指すスクリプトが読み込まれます。"

msgid "Lets you pass a command as a string to execute it as Django, like so:"
msgstr "以下のように、コマンドを文字列で渡して、Django として実行できます："

msgid "You can also pass code in on standard input to execute it. For example:"
msgstr "標準入力にコードを渡して実行することもできます。たとえば："

msgid ""
"On Windows, the REPL is output due to implementation limits of :func:`select."
"select` on that platform."
msgstr ""
"Windowsでは、そのプラットフォームでの :func:`select.select` の実装制限に応じ"
"て REPL が出力されます。"

msgid "``showmigrations``"
msgstr "``showmigrations``"

msgid ""
"Shows all migrations in a project. You can choose from one of two formats:"
msgstr ""
"プロジェクト内のすべてのマイグレーションを表示します。2つの形式から選択できま"
"す："

msgid ""
"Lists all of the apps Django knows about, the migrations available for each "
"app, and whether or not each migration is applied (marked by an ``[X]`` next "
"to the migration name). For a ``--verbosity`` of 2 and above, the applied "
"datetimes are also shown."
msgstr ""
"Django が知っている全てのアプリ、各アプリで利用可能なマイグレーション、各マイ"
"グレーションが適用されているかどうか（マイグレーション名の横に ``[X]`` と表示"
"されます）を一覧表示します。また、 ``--verbosity`` が 2 以上の場合、適用され"
"た日時も表示されます。"

msgid ""
"Apps without migrations are also listed, but have ``(no migrations)`` "
"printed under them."
msgstr ""
"マイグレーションのないアプリもリストアップされますが、その下に ``(no "
"migrations)`` と表示されます。"

msgid "This is the default output format."
msgstr "これはデフォルトの出力形式です。"

msgid ""
"Shows the migration plan Django will follow to apply migrations. Like ``--"
"list``, applied migrations are marked by an ``[X]``. For a ``--verbosity`` "
"of 2 and above, all dependencies of a migration will also be shown."
msgstr ""
"Django が適用するマイグレーションの計画を表示します。 ``list`` と同様に、適用"
"されたマイグレーションは ``[X]`` でマークされます。また、 ``--verbosity`` が "
"2 以上の場合、マイグレーションの全ての依存関係も表示されます。"

msgid ""
"``app_label``\\s arguments limit the output, however, dependencies of "
"provided apps may also be included."
msgstr ""
"``app_label`` 引数によって出力は制限されますが、提供されたアプリの依存関係も"
"含めることができます。"

msgid "Specifies the database to examine. Defaults to ``default``."
msgstr "検査するデータベースを指定します。デフォルトは ``default`` です。"

msgid "``sqlflush``"
msgstr "``sqlflush``"

msgid ""
"Prints the SQL statements that would be executed for the :djadmin:`flush` "
"command."
msgstr ":djadmin:`flush` コマンドで実行される SQL 文を表示します。"

msgid ""
"Specifies the database for which to print the SQL. Defaults to ``default``."
msgstr "SQLを表示するデータベースを指定します。デフォルトは ``default`` です。"

msgid "``sqlmigrate``"
msgstr "``sqlmigrate``"

msgid ""
"Prints the SQL for the named migration. This requires an active database "
"connection, which it will use to resolve constraint names; this means you "
"must generate the SQL against a copy of the database you wish to later apply "
"it on."
msgstr ""
"指定された名前のマイグレーション用の SQL を出力します。これは、制約名の解決に"
"使用するアクティブなデータベース接続を必要とします。つまり、後で適用したい"
"データベースのコピーに対して SQL を生成する必要があります。"

msgid "Note that ``sqlmigrate`` doesn't colorize its output."
msgstr "``sqlmigrate`` は出力に色をつけないことに注意してください。"

msgid ""
"Generates the SQL for unapplying the migration. By default, the SQL created "
"is for running the migration in the forwards direction."
msgstr ""
"マイグレーションの適用を取り消すSQLを生成します。デフォルトでは、マイグレー"
"ションを順方向に実行するための SQL が生成されます。"

msgid ""
"Specifies the database for which to generate the SQL. Defaults to "
"``default``."
msgstr ""
"SQL を生成するデータベースを指定します。デフォルトは ``default`` です。"

msgid "``sqlsequencereset``"
msgstr "``sqlsequencereset``"

msgid ""
"Prints the SQL statements for resetting sequences for the given app name(s)."
msgstr "指定されたアプリ名のシーケンスをリセットする SQL 文を出力します。"

msgid ""
"Sequences are indexes used by some database engines to track the next "
"available number for automatically incremented fields."
msgstr ""
"シーケンスは、自動的にインクリメントされるフィールドの次に利用可能な番号を追"
"跡するために、いくつかのデータベースエンジンで使用されるインデックスです。"

msgid ""
"Use this command to generate SQL which will fix cases where a sequence is "
"out of sync with its automatically incremented field data."
msgstr ""
"このコマンドを使用して、シーケンスが自動的にインクリメントされたフィールド"
"データと同期していないケースを修正するSQLを生成できます。"

msgid "``squashmigrations``"
msgstr "``squashmigrations``"

msgid ""
"Squashes the migrations for ``app_label`` up to and including "
"``migration_name`` down into fewer migrations, if possible. The resulting "
"squashed migrations can live alongside the unsquashed ones safely. For more "
"information, please read :ref:`migration-squashing`."
msgstr ""
"``migration_name`` までの ``app_label`` のマイグレーションを、可能であればよ"
"り少ないマイグレーションにスカッシュします。スカッシュされたマイグレーション"
"は、スカッシュされていないマイグレーションと安全に共存できます。詳しくは :"
"ref:`migration-squashing` を参照してください。"

msgid ""
"When ``start_migration_name`` is given, Django will only include migrations "
"starting from and including this migration. This helps to mitigate the "
"squashing limitation of :class:`~django.db.migrations.operations.RunPython` "
"and :class:`django.db.migrations.operations.RunSQL` migration operations."
msgstr ""
"``start_migration_name`` を指定すると、 Django はこのマイグレーションから始ま"
"り、このマイグレーションを含むマイグレーションだけを取り込みます。これは :"
"class:`~django.db.migrations.operations.RunPython` と :class:`django.db."
"migrations.operations.RunSQL` マイグレーション・オペレーションのスカッシュ制"
"限を緩和するのに役立ちます。"

msgid ""
"Disables the optimizer when generating a squashed migration. By default, "
"Django will try to optimize the operations in your migrations to reduce the "
"size of the resulting file. Use this option if this process is failing or "
"creating incorrect migrations, though please also file a Django bug report "
"about the behavior, as optimization is meant to be safe."
msgstr ""
"スカッシュされたマイグレーションを生成する際に、オプティマイザを無効にしま"
"す。デフォルトでは、 Django はマイグレーションする際の処理を最適化し、結果の"
"ファイルサイズを小さくしようとします。この処理が失敗したり、正しくないマイグ"
"レーションを作成したりする場合は、このオプションを使ってください。最適化は安"
"全であることを意図しているので、その動作について Django バグレポートを提出し"
"てください。"

msgid ""
"Sets the name of the squashed migration. When omitted, the name is based on "
"the first and last migration, with ``_squashed_`` in between."
msgstr ""
"スカッシュされたマイグレーションの名前を設定します。省略した場合は、最初と最"
"後のマイグレーションの間に ``_squashed_`` を加えた名前になります。"

msgid ""
"Generate squashed migration file without Django version and timestamp header."
msgstr ""
"Django のバージョンとタイムスタンプのヘッダなしで、スカッシュしたマイグレー"
"ションファイルを生成します。"

msgid "``startapp``"
msgstr "``startapp``"

msgid ""
"Creates a Django app directory structure for the given app name in the "
"current directory or the given destination."
msgstr ""
"指定されたアプリ名の Django アプリディレクトリ構造を、カレントディレクトリ"
"か、指定された保存先に作成します。"

msgid ""
"By default, :source:`the new directory <django/conf/app_template>` contains "
"a ``models.py`` file and other app template files. If only the app name is "
"given, the app directory will be created in the current working directory."
msgstr ""
"デフォルトでは、:source:`新しいディレクトリ <django/conf/app_template>` には "
"``models.py`` ファイルと他のアプリテンプレートファイルが含まれます。アプリ名"
"だけが与えられた場合、アプリディレクトリは現在の作業ディレクトリに作成されま"
"す。"

msgid ""
"If the optional destination is provided, Django will use that existing "
"directory rather than creating a new one. You can use '.' to denote the "
"current working directory."
msgstr ""
"オプションで保存先を指定すると、 Django は新しいディレクトリを作成するのでは"
"なく、既存のディレクトリを使用します。現在の作業ディレクトリを表すには \".\" "
"を使用してください。"

msgid ""
"Provides the path to a directory with a custom app template file, or a path "
"to an uncompressed archive (``.tar``) or a compressed archive (``.tar.gz``, "
"``.tar.bz2``, ``.tar.xz``, ``.tar.lzma``, ``.tgz``, ``.tbz2``, ``.txz``, ``."
"tlz``, ``.zip``) containing the app template files."
msgstr ""
"カスタムアプリテンプレートファイルを含むディレクトリへのパス、または圧縮され"
"ていないアーカイブ (``.tar``) や圧縮されたアーカイブ (``.tar.gz``, ``.tar."
"bz2``, ``.tar.xz``, ``.tar.lzma``, ``.tgz``, ``.tbz2``, ``.txz``, ``.tlz``, "
"``.zip``) 内のアプリテンプレートファイルを含むパスを指定します。"

msgid ""
"For example, this would look for an app template in the given directory when "
"creating the ``myapp`` app:"
msgstr ""
"たとえば、``myapp`` アプリを作成するときに、指定されたディレクトリのアプリテ"
"ンプレートを探すには以下のようにします："

msgid ""
"Django will also accept URLs (``http``, ``https``, ``ftp``) to compressed "
"archives with the app template files, downloading and extracting them on the "
"fly."
msgstr ""
"Djangoは、アプリテンプレートファイルを含む圧縮アーカイブへのURL (``http``、"
"``https``、``ftp``) も受け付けることができ、それらをダウンロードしてリアルタ"
"イムで展開します。"

msgid ""
"For example, taking advantage of GitHub's feature to expose repositories as "
"zip files, you can use a URL like:"
msgstr ""
"たとえば、GitHub の zip ファイルとしてリポジトリを公開する機能を使えば、次の"
"ような URL を使うことができます："

msgid ""
"Specifies which file extensions in the app template should be rendered with "
"the template engine. Defaults to ``py``."
msgstr ""
"アプリテンプレート内のどの拡張子をテンプレートエンジンでレンダリングするかを"
"指定します。デフォルトは ``py`` です。"

msgid ""
"Specifies which files in the app template (in addition to those matching ``--"
"extension``) should be rendered with the template engine. Defaults to an "
"empty list."
msgstr ""
"(``--extension`` にマッチするものに加えて) アプリテンプレート内のどのファイル"
"をテンプレートエンジンでレンダリングするかを指定します。デフォルトは空のリス"
"トです。"

msgid ""
"Specifies which directories in the app template should be excluded, in "
"addition to ``.git`` and ``__pycache__``. If this option is not provided, "
"directories named ``__pycache__`` or starting with ``.`` will be excluded."
msgstr ""
"``.git`` と ``__pycache__`` に加えて、アプリテンプレート内のどのディレクトリ"
"を除外するかを指定します。このオプションを指定しない場合、``__pycache__`` と"
"いう名前のディレクトリや、``.`` で始まるディレクトリは除外されます。"

msgid ""
"The :class:`template context <django.template.Context>` used for all "
"matching files is:"
msgstr ""
"マッチする全てのファイルに使用される :class:`テンプレートコンテキスト "
"<django.template.Context>` は以下の通りです："

msgid ""
"Any option passed to the ``startapp`` command (among the command's supported "
"options)"
msgstr ""
"``startapp`` コマンドに渡されたオプション (コマンドでサポートされているオプ"
"ションに限る)"

msgid "``app_name`` -- the app name as passed to the command"
msgstr "``app_name`` -- コマンドに渡されたアプリ名"

msgid "``app_directory`` -- the full path of the newly created app"
msgstr "``app_directory`` -- 新規作成されたアプリのフルパス"

msgid "``camel_case_app_name`` -- the app name in camel case format"
msgstr "``camel_case_app_name`` -- キャメルケース形式のアプリ名"

msgid ""
"``docs_version`` -- the version of the documentation: ``'dev'`` or ``'1.x'``"
msgstr ""
"``docs_version`` -- ドキュメントのバージョン: ``'dev'`` または ``1.x'``"

msgid "``django_version`` -- the version of Django, e.g. ``'2.0.3'``"
msgstr "``django_version`` -- Django のバージョン、例えば ``'2.0.3'`` 。"

msgid ""
"When the app template files are rendered with the Django template engine (by "
"default all ``*.py`` files), Django will also replace all stray template "
"variables contained. For example, if one of the Python files contains a "
"docstring explaining a particular feature related to template rendering, it "
"might result in an incorrect example."
msgstr ""
"アプリのテンプレートファイルが Django テンプレートエンジンでレンダリングされ"
"るとき (デフォルトではすべての ``*.py`` ファイル)、Django は含まれるすべての"
"不明なテンプレート変数も置き換えます。たとえば、 Python ファイルの 1 つに、テ"
"ンプレートレンダリングに関連する特定の機能を説明する docstring が含まれていた"
"場合、間違った結果を生むかもしれません。"

msgid ""
"To work around this problem, you can use the :ttag:`templatetag` template "
"tag to \"escape\" the various parts of the template syntax."
msgstr ""
"この問題を回避するために、テンプレートタグ :ttag:`templatetag` を使ってテンプ"
"レートの構文の様々な部分を「エスケープ」することができます。"

msgid ""
"In addition, to allow Python template files that contain Django template "
"language syntax while also preventing packaging systems from trying to byte-"
"compile invalid ``*.py`` files, template files ending with ``.py-tpl`` will "
"be renamed to ``.py``."
msgstr ""
"さらに、パッケージングシステムが無効な ``*.py`` ファイルをバイトコンパイルし"
"ようとするのを防ぐと同時に、 Django テンプレート言語構文を含む Python テンプ"
"レートファイルを許可するために、 ``.py-tpl`` で終わるテンプレートファイルは "
"``.py`` にリネームされます。"

msgid ""
"The contents of custom app (or project) templates should always be audited "
"before use: Such templates define code that will become part of your "
"project, and this means that such code will be trusted as much as any app "
"you install, or code you write yourself. Further, even rendering the "
"templates is, effectively, executing code that was provided as input to the "
"management command. The Django template language may provide wide access "
"into the system, so make sure any custom template you use is worthy of your "
"trust."
msgstr ""
"カスタムアプリ（またはプロジェクト）テンプレートのコンテンツは、使用前に必ず"
"監査されるべきです。 これらのテンプレートは、プロジェクトの一部となるコードを"
"定義しており、これらのコードは、インストールしたアプリや自分で書いたコードと"
"同じくらい信頼されることを意味します。さらに、テンプレートをレンダリングする"
"ことは、事実上、提供されたコードを管理コマンドへの入力として実行することにす"
"らなります。Django のテンプレート言語は、システムへの広いアクセスを提供する可"
"能性がありますので、使うカスタムテンプレートが信頼に値するものであることを確"
"認してくだ さい。"

msgid "``startproject``"
msgstr "``startproject``"

msgid ""
"Creates a Django project directory structure for the given project name in "
"the current directory or the given destination."
msgstr ""
"指定されたプロジェクト名の Django プロジェクトディレクトリ構造を、カレント"
"ディレクトリか指定された保存先に作成します。"

msgid ""
"By default, :source:`the new directory <django/conf/project_template>` "
"contains ``manage.py`` and a project package (containing a ``settings.py`` "
"and other files)."
msgstr ""
"デフォルトでは、 :source:`新しいディレクトリ <django/conf/project_template>` "
"には ``manage.py`` とプロジェクトパッケージ (``settings.py`` と他のファイルを"
"含む) があります。"

msgid ""
"If only the project name is given, both the project directory and project "
"package will be named ``<projectname>`` and the project directory will be "
"created in the current working directory."
msgstr ""
"プロジェクト名だけを指定した場合、プロジェクトディレクトリとプロジェクトパッ"
"ケージは ``<projectname>`` という名前になり、プロジェクトディレクトリは現在の"
"作業ディレクトリに作成されます。"

msgid ""
"If the optional destination is provided, Django will use that existing "
"directory as the project directory, and create ``manage.py`` and the project "
"package within it. Use '.' to denote the current working directory."
msgstr ""
"オプションで保存先を指定すると、 Django はその既存のディレクトリをプロジェク"
"トディレクトリとして使用し、 ``manage.py`` とその中にプロジェクトパッケージを"
"作成します。現在の作業ディレクトリを表すには \".\" を使用してください。"

msgid ""
"Specifies a directory, file path, or URL of a custom project template. See "
"the :option:`startapp --template` documentation for examples and usage."
msgstr ""
"カスタムプロジェクトテンプレートのディレクトリ、ファイルパス、または URL を指"
"定します。例と使い方は :option:`startapp --template` のドキュメントを参照して"
"ください。"

msgid ""
"Specifies which file extensions in the project template should be rendered "
"with the template engine. Defaults to ``py``."
msgstr ""
"プロジェクトテンプレート内のどの拡張子をテンプレートエンジンでレンダリングす"
"るかを指定します。デフォルトは ``py`` です。"

msgid ""
"Specifies which files in the project template (in addition to those matching "
"``--extension``) should be rendered with the template engine. Defaults to an "
"empty list."
msgstr ""
"(``--extension`` にマッチするものに加えて) プロジェクトテンプレート内のどの"
"ファイルをテンプレートエンジンでレンダリングするかを指定します。デフォルトは"
"空のリストです。"

msgid ""
"Specifies which directories in the project template should be excluded, in "
"addition to ``.git`` and ``__pycache__``. If this option is not provided, "
"directories named ``__pycache__`` or starting with ``.`` will be excluded."
msgstr ""
"``.git`` と ``__pycache__`` に加えて、プロジェクトテンプレート内のどのディレ"
"クトリを除外するかを指定します。このオプションを指定しない場合、"
"``__pycache__`` という名前のディレクトリや、``.`` で始まるディレクトリは除外"
"されます。"

msgid "The :class:`template context <django.template.Context>` used is:"
msgstr ""
"使用される :class:`テンプレートコンテキスト <django.template.Context>` は以下"
"の通りです："

msgid ""
"Any option passed to the ``startproject`` command (among the command's "
"supported options)"
msgstr ""
"``startproject`` コマンドに渡されたオプション (コマンドでサポートされているオ"
"プションに限る)"

msgid "``project_name`` -- the project name as passed to the command"
msgstr "``project_name`` -- コマンドに渡されたプロジェクト名"

msgid "``project_directory`` -- the full path of the newly created project"
msgstr "``project_directory`` -- 新規作成されたプロジェクトのフルパス"

msgid "``secret_key`` -- a random key for the :setting:`SECRET_KEY` setting"
msgstr "``secret_key`` -- :setting:`SECRET_KEY` 設定用のランダムなキー。"

msgid ""
"Please also see the :ref:`rendering warning <render_warning>` and :ref:"
"`trusted code warning <trusted_code_warning>` as mentioned for :djadmin:"
"`startapp`."
msgstr ""
":djadmin:`startapp` で説明した :ref:`レンダリングに関する警告 "
"<render_warning>` と :ref:`信頼されたコードに関する警告 "
"<trusted_code_warning>` も参照してください。"

msgid "``test``"
msgstr "``test``"

msgid ""
"Runs tests for all installed apps. See :doc:`/topics/testing/index` for more "
"information."
msgstr ""
"インストールされている全てのアプリのテストを実行します。詳しくは :doc:`/"
"topics/testing/index` を参照してください。"

msgid ""
"Stops running tests and reports the failure immediately after a test fails."
msgstr "テストが失敗したら直ちにテストの実行を停止し、失敗を報告します。"

msgid ""
"Controls the test runner class that is used to execute tests. This value "
"overrides the value provided by the :setting:`TEST_RUNNER` setting."
msgstr ""
"テストの実行に使われるテストランナークラスを制御します。この値は :setting:"
"`TEST_RUNNER` 設定によって提供される値を上書きします。"

msgid ""
"Suppresses all user prompts. A typical prompt is a warning about deleting an "
"existing test database."
msgstr ""
"すべてのユーザープロンプトを表示しません。典型的なプロンプトは、既存のテスト"
"データベースの削除に関する警告です。"

msgid "Test runner options"
msgstr "テストランナーのオプション"

msgid ""
"The ``test`` command receives options on behalf of the specified :option:`--"
"testrunner`. These are the options of the default test runner: :class:"
"`~django.test.runner.DiscoverRunner`."
msgstr ""
"``test`` コマンドは指定された :option:`--testrunner` の代わりにオプションを受"
"け取ります。これらはデフォルトのテストランナーである :class:`~django.test."
"runner.DiscoverRunner` のオプションです。"

msgid ""
"Preserves the test database between test runs. This has the advantage of "
"skipping both the create and destroy actions which can greatly decrease the "
"time to run tests, especially those in a large test suite. If the test "
"database does not exist, it will be created on the first run and then "
"preserved for each subsequent run. Unless the :setting:`MIGRATE "
"<TEST_MIGRATE>` test setting is ``False``, any unapplied migrations will "
"also be applied to the test database before running the test suite."
msgstr ""
"テスト実行の間、テストデータベースを保持します。これには、作成と破棄の両方の"
"アクションを省略できるという利点があり、 特に大規模なテストスイートにおけるテ"
"ストの実行時間を大幅に短縮できます。テストデータベースが存在しない場合は、最"
"初の実行時に作成され、それ以降の実行時に保存されます。:setting:`MIGRATE "
"<TEST_MIGRATE>` テスト設定が ``False`` でない限り、テストスイートを実行する前"
"に、未適用のマイグレーションもテストデータベースに適用されます。"

msgid ""
"Randomizes the order of tests before running them. This can help detect "
"tests that aren't properly isolated. The test order generated by this option "
"is a deterministic function of the integer seed given. When no seed is "
"passed, a seed is chosen randomly and printed to the console. To repeat a "
"particular test order, pass a seed. The test orders generated by this option "
"preserve Django's :ref:`guarantees on test order <order-of-tests>`. They "
"also keep tests grouped by test case class."
msgstr ""
"テストを実行する前に、テストの順番をランダムにします。これは、適切に分離され"
"ていないテストの検出に役立ちます。このオプションで生成されるテストの順番は、 "
"与えられた整数シードの決定論的な関数です。シードが渡されない場合は、ランダム"
"にシードが選ばれてコンソールに出力されます。特定のテスト順序を繰り返すには、"
"シードを渡します。このオプションで生成されるテスト順序は Django の :ref:`テス"
"ト順序における保証 <order-of-tests>` を保持します。また、テストはテストケース"
"クラスごとにグループ化されます。"

msgid ""
"The shuffled orderings also have a special consistency property useful when "
"narrowing down isolation issues. Namely, for a given seed and when running a "
"subset of tests, the new order will be the original shuffling restricted to "
"the smaller set. Similarly, when adding tests while keeping the seed the "
"same, the order of the original tests will be the same in the new order."
msgstr ""
"シャッフルされた順序は、分離の問題を絞り込む際に有用な特別な一貫性を持ってい"
"ます。つまり、シードを指定してテストのサブセットを実行する場合、新しい順序は"
"より小さなセットに制限されつつ、元のシャッフル順序を維持します。同様に、シー"
"ドを同じに保ちながらテストを追加すると、元のテストの順序は新しい順序でも同じ"
"ままです。"

msgid ""
"Sorts test cases in the opposite execution order. This may help in debugging "
"the side effects of tests that aren't properly isolated. :ref:`Grouping by "
"test class <order-of-tests>` is preserved when using this option. This can "
"be used in conjunction with ``--shuffle`` to reverse the order for a "
"particular seed."
msgstr ""
"テストケースを逆の実行順序で並べ替えます。これは適切に分離されていないテスト"
"の副作用をデバッグする際に役立つかもしれません。 :ref:`テストクラス <order-"
"of-tests>` によるグループ化は、このオプションを使用しても保持されます。 ``--"
"shuffle`` と組み合わせて使用することで、特定のシードの順番を逆にできます。"

msgid ""
"Sets the :setting:`DEBUG` setting to ``True`` prior to running tests. This "
"may help troubleshoot test failures."
msgstr ""
"テストを実行する前に :setting:`DEBUG` 設定を ``True`` に設定します。これはテ"
"ストの失敗のトラブルシューティングに役立ちます。"

msgid ""
"Enables :ref:`SQL logging <django-db-logger>` for failing tests. If ``--"
"verbosity`` is ``2``, then queries in passing tests are also output."
msgstr ""
"失敗したテストの :ref:`SQL ロギング <django-db-logger>` を有効にします。もし "
"``--verbosity`` が ``2`` なら、パスしたテストのクエリも出力されます。"

msgid ""
"Runs tests in separate parallel processes. Since modern processors have "
"multiple cores, this allows running tests significantly faster."
msgstr ""
"別々の並列プロセスでテストを実行します。現代のプロセッサは複数のコアを備えて"
"いるため、これによってテストの実行速度を大幅に向上させることができます。"

msgid ""
"Using ``--parallel`` without a value, or with the value ``auto``, runs one "
"test process per core according to :func:`multiprocessing.cpu_count()`. You "
"can override this by passing the desired number of processes, e.g. ``--"
"parallel 4``, or by setting the :envvar:`DJANGO_TEST_PROCESSES` environment "
"variable."
msgstr ""
"値を指定せずに ``--parallel`` を使用した場合、または値 ``auto`` を指定した場"
"合、 :func:`multiprocessing.cpu_count()` に従って各コアに 1 つのテストプロセ"
"スを実行します。これをオーバーライドするには、必要なプロセス数、たとえば ``--"
"parallel 4`` を渡すか、 :envvar:`DJANGO_TEST_PROCESSES` 環境変数を設定しま"
"す。"

msgid ""
"Django distributes test cases — :class:`unittest.TestCase` subclasses — to "
"subprocesses. If there are fewer test case classes than configured "
"processes, Django will reduce the number of processes accordingly."
msgstr ""
"Django はテストケース (:class:`unittest.TestCase` サブクラス) をサブプロセス"
"に分散します。設定されたプロセス数よりもテストケースクラスの数が少ない場合、 "
"Django はそれに応じてプロセス数を減らします。"

msgid ""
"Each process gets its own database. You must ensure that different test case "
"classes don't access the same resources. For instance, test case classes "
"that touch the filesystem should create a temporary directory for their own "
"use."
msgstr ""
"各プロセスごとに個別のデータベースを持つため、異なるテストケースクラスが同じ"
"リソースにアクセスしないように注意が必要です。たとえば、複数のテストケースク"
"ラスがファイルシステムにアクセスするような場合には、各テストケースクラスごと"
"に個別に一時ディレクトリを作成するようにしてください。"

msgid ""
"If you have test classes that cannot be run in parallel, you can use "
"``SerializeMixin`` to run them sequentially. See :ref:`Enforce running test "
"classes sequentially <topics-testing-enforce-run-sequentially>`."
msgstr ""
"並列で実行できないテストクラスがある場合は、 ``SerializeMixin`` を使って逐次"
"的に実行できます。 :ref:`テストクラスの逐次実行を強制する <topics-testing-"
"enforce-run-sequentially>` を参照してください。"

msgid ""
"This option requires the third-party ``tblib`` package to display tracebacks "
"correctly:"
msgstr ""
"このオプションはトレースバックを正しく表示するために、サードパーティの "
"``tblib`` パッケージが必要です："

msgid ""
"This feature isn't available on Windows. It doesn't work with the Oracle "
"database backend either."
msgstr ""
"この機能はWindowsでは使用できません。Oracleデータベースのバックエンドでも動作"
"しません。"

msgid ""
"If you want to use :mod:`pdb` while debugging tests, you must disable "
"parallel execution (``--parallel=1``). You'll see something like ``bdb."
"BdbQuit`` if you don't."
msgstr ""
"テストのデバッグ中に :mod:`pdb` を使用したい場合は、並列実行を無効にする必要"
"があります (``--parallel=1``) 。そうしないと ``bdb.BdbQuit`` のようなメッセー"
"ジが表示されます。"

msgid ""
"When test parallelization is enabled and a test fails, Django may be unable "
"to display the exception traceback. This can make debugging difficult. If "
"you encounter this problem, run the affected test without parallelization to "
"see the traceback of the failure."
msgstr ""
"テストの並列化が有効で、テストが失敗した場合、 Django は例外のトレースバック"
"を表示できないかもしれません。これはデバッグを困難にします。この問題に遭遇し"
"た場合は、並列化せずに該当するテストを実行して、失敗のトレースバックを確認し"
"てください。"

msgid ""
"This is a known limitation. It arises from the need to serialize objects in "
"order to exchange them between processes. See :ref:`python:pickle-picklable` "
"for details."
msgstr ""
"これは既知の制限です。これは、プロセス間でオブジェクトを交換するためにオブ"
"ジェクトをシリアライズする必要があることから生じます。詳しくは :ref:`python:"
"pickle-picklable` を参照してください。"

msgid ""
"Runs only tests :ref:`marked with the specified tags <topics-tagging-"
"tests>`. May be specified multiple times and combined with :option:`test --"
"exclude-tag`."
msgstr ""
":ref:`指定したタグ <topics-tagging-tests>` でマークされたテストのみを実行しま"
"す。:option:`test --exclude-tag` と組み合わせて複数回指定できます。"

msgid "Tests that fail to load are always considered matching."
msgstr "ロードに失敗したテストは常にマッチしたとみなされます。"

msgid ""
"Excludes tests :ref:`marked with the specified tags <topics-tagging-tests>`. "
"May be specified multiple times and combined with :option:`test --tag`."
msgstr ""
":ref:`指定したタグ <topics-tagging-tests>` でマークされたテストを除外しま"
"す。:option:`test --tag` と組み合わせて複数回指定できます。"

msgid ""
"Runs test methods and classes matching test name patterns, in the same way "
"as :option:`unittest's -k option<unittest.-k>`. Can be specified multiple "
"times."
msgstr ""
":option:`unittest の -k オプション <unittest.-k>` と同じように、テスト名のパ"
"ターンにマッチするテストメソッドとクラスを実行します。複数回指定できます。"

msgid ""
"Spawns a ``pdb`` debugger at each test error or failure. If you have it "
"installed, ``ipdb`` is used instead."
msgstr ""
"テストのエラーや失敗のたびに ``pdb`` デバッガを起動します。インストールされて"
"いる場合は、代わりに ``ipdb`` が使用されます。"

msgid ""
"Discards output (``stdout`` and ``stderr``) for passing tests, in the same "
"way as :option:`unittest's --buffer option<unittest.-b>`."
msgstr ""
":option:`unittest の --buffer オプション <unittest.-b>` と同じように、テスト"
"に合格した出力 (``stdout`` と ``stderr``) を破棄します。"

msgid ""
"Django automatically calls :func:`faulthandler.enable()` when starting the "
"tests, which allows it to print a traceback if the interpreter crashes. Pass "
"``--no-faulthandler`` to disable this behavior."
msgstr ""
"Django はテストの開始時に :func:`faulthandler.enable()` を自動的に呼び出しま"
"す。これにより、インタプリタがクラッシュした場合にトレースバックを表示しま"
"す。この動作を無効にするには ``--no-faulthandler`` を渡してください。"

msgid "Outputs timings, including database setup and total run time."
msgstr "データベースのセットアップや総実行時間などのタイミングを出力します。"

msgid "Shows the N slowest test cases (N=0 for all)."
msgstr "最も遅い N 個のテストケースを表示します（N=0 の場合はすべて）。"

msgid "Python 3.12 and later"
msgstr "Python 3.12 以降が必要です"

msgid "This feature is only available for Python 3.12 and later."
msgstr "この機能は Python 3.12 以降でのみ利用可能です。"

msgid "``testserver``"
msgstr "``testserver``"

msgid ""
"Runs a Django development server (as in :djadmin:`runserver`) using data "
"from the given fixture(s)."
msgstr ""
"(:djadmin:`runserver` のように) 与えられたフィクスチャのデータを使って "
"Django 開発サーバを起動します。"

msgid "For example, this command:"
msgstr "たとえばこのコマンドは、："

msgid "...would perform the following steps:"
msgstr "... 以下のステップを実行します："

msgid "Create a test database, as described in :ref:`the-test-database`."
msgstr ""
":ref:`the-test-database` で説明されているように、テスト用データベースを作成し"
"ます。"

msgid ""
"Populate the test database with fixture data from the given fixtures. (For "
"more on fixtures, see the documentation for :djadmin:`loaddata` above.)"
msgstr ""
"与えられたフィクスチャからフィクスチャデータをテストデータベースに投入しま"
"す。(フィクスチャの詳細については、上記の :djadmin:`loaddata` のドキュメント"
"を参照してください)。"

msgid ""
"Runs the Django development server (as in :djadmin:`runserver`), pointed at "
"this newly created test database instead of your production database."
msgstr ""
"Django 開発サーバを実行します (:djadmin:`runserver` のように)。本番用データ"
"ベースの代わりに、新しく作成したテスト用データベースを指定します。"

msgid "This is useful in a number of ways:"
msgstr "これはいろいろな面で便利です："

msgid ""
"When you're writing :doc:`unit tests </topics/testing/overview>` of how your "
"views act with certain fixture data, you can use ``testserver`` to interact "
"with the views in a web browser, manually."
msgstr ""
":doc:`ユニットテスト </topics/testing/overview>` を書くとき、フィクスチャデー"
"タを使ってビューがどのように動作するか、 ``testserver`` を使ってウェブブラウ"
"ザでビューと手動でやりとりできます。"

msgid ""
"Let's say you're developing your Django application and have a \"pristine\" "
"copy of a database that you'd like to interact with. You can dump your "
"database to a :ref:`fixture <fixtures-explanation>` (using the :djadmin:"
"`dumpdata` command, explained above), then use ``testserver`` to run your "
"web application with that data.  With this arrangement, you have the "
"flexibility of messing up your data in any way, knowing that whatever data "
"changes you're making are only being made to a test database."
msgstr ""
"Django アプリケーションを開発していて、対話したいデータベースの \"まっさらな"
"\" コピーがあるとします。データベースを :ref:`フィクスチャ <fixtures-"
"explanation>` にダンプし (上で説明した :djadmin:`dumpdata` コマンドを使いま"
"す)、そのデータを使って ``testserver`` で Web アプリケーションを実行します。"
"この方法では、どんなデータの変更もテスト用のデータベースに対してだけ行われる"
"ため、柔軟にデータを変更できます。"

msgid ""
"Note that this server does *not* automatically detect changes to your Python "
"source code (as :djadmin:`runserver` does). It does, however, detect changes "
"to templates."
msgstr ""
"このサーバは Python のソースコードの変更を (:djadmin:`runserver` のように) 自"
"動的に検出することは **しない** ことに注意してください。しかし、テンプレート"
"の変更は検出します。"

msgid ""
"Specifies a different port, or IP address and port, from the default of "
"``127.0.0.1:8000``. This value follows exactly the same format and serves "
"exactly the same function as the argument to the :djadmin:`runserver` "
"command."
msgstr ""
"デフォルトの ``127.0.0.1:8000`` とは異なるポート、または IP アドレスとポート"
"を指定します。この値は :djadmin:`runserver` コマンドの引数と全く同じフォー"
"マットで、全く同じ機能を果たします。"

msgid "To run the test server on port 7000 with ``fixture1`` and ``fixture2``:"
msgstr ""
"ポート7000で ``fixture1`` と ``fixture2`` を使ってテストサーバを動かすには、"
"以下のようにします："

msgid ""
"(The above statements are equivalent. We include both of them to demonstrate "
"that it doesn't matter whether the options come before or after the fixture "
"arguments.)"
msgstr ""
"（上の2つは等価です。オプションがフィクスチャの引数の前でも後でも問題ないこと"
"を示すために、この2つを紹介しています）"

msgid "To run on 1.2.3.4:7000 with a ``test`` fixture:"
msgstr ""
"1.2.3.4:7000 で ``test`` フィクスチャを使って実行するには、下記のようにしま"
"す："

msgid "Commands provided by applications"
msgstr "アプリケーションが提供するコマンド"

msgid ""
"Some commands are only available when the ``django.contrib`` application "
"that :doc:`implements </howto/custom-management-commands>` them has been :"
"setting:`enabled <INSTALLED_APPS>`. This section describes them grouped by "
"their application."
msgstr ""
"いくつかのコマンドは、それを :doc:`実装した </howto/custom-management-"
"commands>` ``django.contrib`` アプリケーションが :setting:`有効に "
"<INSTALLED_APPS>` なっていないと利用できません。この節では、それらをアプリ"
"ケーションごとに分類して説明します。"

msgid "``changepassword``"
msgstr "``changepassword``"

msgid ""
"This command is only available if Django's :doc:`authentication system </"
"topics/auth/index>` (``django.contrib.auth``) is installed."
msgstr ""
"このコマンドは Django の :doc:`認証システム </topics/auth/index>` (``django."
"contrib.auth``) がインストールされている場合のみ利用できます。"

msgid ""
"Allows changing a user's password. It prompts you to enter a new password "
"twice for the given user. If the entries are identical, this immediately "
"becomes the new password. If you do not supply a user, the command will "
"attempt to change the password whose username matches the current user."
msgstr ""
"ユーザのパスワードを変更できます。指定されたユーザの新しいパスワードを2回入力"
"するよう求められます。入力が同じであれば、これが直ちに新しいパスワードになり"
"ます。ユーザを指定しなかった場合、コマンドはユーザ名が現在のユーザと一致する"
"パスワードを変更しようとします。"

msgid "Specifies the database to query for the user. Defaults to ``default``."
msgstr ""
"ユーザーをクエリするデータベースを指定します。デフォルトは ``default`` です。"

msgid "``createsuperuser``"
msgstr "``createsuperuser``"

msgid ""
"Creates a superuser account (a user who has all permissions). This is useful "
"if you need to create an initial superuser account or if you need to "
"programmatically generate superuser accounts for your site(s)."
msgstr ""
"superuser アカウント (すべての権限を持ったユーザー) を作成します。このコマン"
"ドは、最初に superuser アカウントを作成する場合や、サイトの superuser アカウ"
"ントをプログラムから自動生成する必要がある場合に便利です。"

msgid ""
"When run interactively, this command will prompt for a password for the new "
"superuser account. When run non-interactively, you can provide a password by "
"setting the :envvar:`DJANGO_SUPERUSER_PASSWORD` environment variable. "
"Otherwise, no password will be set, and the superuser account will not be "
"able to log in until a password has been manually set for it."
msgstr ""
"対話的に実行すると、このコマンドは新しいスーパーユーザアカウントのパスワード"
"を要求します。非対話的に実行する場合、 :envvar:`DJANGO_SUPERUSER_PASSWORD` 環"
"境変数を設定することでパスワードを設定できます。そうでない場合、パスワードは"
"設定されず、スーパーユーザーアカウントはパスワードが手動で設定されるまでログ"
"インできません。"

msgid ""
"In non-interactive mode, the :attr:`~django.contrib.auth.models.CustomUser."
"USERNAME_FIELD` and required fields (listed in :attr:`~django.contrib.auth."
"models.CustomUser.REQUIRED_FIELDS`) fall back to "
"``DJANGO_SUPERUSER_<uppercase_field_name>`` environment variables, unless "
"they are overridden by a command line argument. For example, to provide an "
"``email`` field, you can use ``DJANGO_SUPERUSER_EMAIL`` environment variable."
msgstr ""
"非インタラクティブモードでは、 :attr:`~django.contrib.auth.models.CustomUser."
"USERNAME_FIELD` と必須フィールド (:attr:`~django.contrib.auth.models."
"CustomUser.REQUIRED_FIELDS` にリストされています) はコマンドライン引数で上書"
"きされない限り、環境変数 ``DJANGO_SUPERUSER_<uppercase_field_name>`` にフォー"
"ルバックします。例えば、 ``email`` フィールドを指定するには、環境変数 "
"``DJANGO_SUPERUSER_EMAIL`` を使用します。"

msgid ""
"Suppresses all user prompts. If a suppressed prompt cannot be resolved "
"automatically, the command will exit with error code 1."
msgstr ""
"すべてのユーザープロンプトを表示しません。もし、抑制されたプロンプトが自動的"
"に解決できなかった場合は、エラーコード 1 で終了します。"

msgid ""
"The username and email address for the new account can be supplied by using "
"the ``--username`` and ``--email`` arguments on the command line. If either "
"of those is not supplied, ``createsuperuser`` will prompt for it when "
"running interactively."
msgstr ""
"新しいアカウントのユーザー名とメールアドレスはコマンドラインの ``--"
"username`` と ``--email`` 引数で指定できます。これらのどちらかが与えられない"
"場合、 ``createsuperuser`` は対話的に実行する際にその入力を要求します。"

msgid "Specifies the database into which the superuser object will be saved."
msgstr "スーパーユーザ・オブジェクトを保存するデータベースを指定します。"

msgid ""
"You can subclass the management command and override ``get_input_data()`` if "
"you want to customize data input and validation. Consult the source code for "
"details on the existing implementation and the method's parameters. For "
"example, it could be useful if you have a ``ForeignKey`` in :attr:`~django."
"contrib.auth.models.CustomUser.REQUIRED_FIELDS` and want to allow creating "
"an instance instead of entering the primary key of an existing instance."
msgstr ""
"データの入力とバリデーションをカスタマイズしたい場合は、管理コマンドをサブク"
"ラス化して ``get_input_data()`` をオーバーライドします。既存の実装やメソッド"
"のパラメータの詳細についてはソースコードを参照してください。たとえば、:attr:"
"`~django.contrib.auth.models.CustomUser.REQUIRED_FIELDS` に ``ForeignKey`` が"
"あり、既存のインスタンスの主キーを入力する代わりにインスタンスを作成できるよ"
"うにしたい場合に便利です。"

msgid "``django.contrib.contenttypes``"
msgstr "``django.contrib.contenttypes``"

msgid "``remove_stale_contenttypes``"
msgstr "``remove_stale_contenttypes``"

msgid ""
"This command is only available if Django's :doc:`contenttypes app </ref/"
"contrib/contenttypes>` (:mod:`django.contrib.contenttypes`) is installed."
msgstr ""
"このコマンドは Django の :doc:`contenttypes アプリ </ref/contrib/"
"contenttypes>` (:mod:`django.contrib.contenttypes`) がインストールされている"
"場合のみ利用できます。"

msgid ""
"Deletes stale content types (from deleted models) in your database. Any "
"objects that depend on the deleted content types will also be deleted. A "
"list of deleted objects will be displayed before you confirm it's okay to "
"proceed with the deletion."
msgstr ""
"（削除されたモデルの）古くなったコンテンツタイプをデータベースから削除しま"
"す。削除されたコンテンツタイプに依存しているオブジェクトも削除されます。削除"
"されたオブジェクトのリストが表示された後、削除を続行できます。"

msgid "Specifies the database to use. Defaults to ``default``."
msgstr "使用するデータベースを指定します。デフォルトは ``default`` です。"

msgid ""
"Deletes stale content types including ones from previously installed apps "
"that have been removed from :setting:`INSTALLED_APPS`. Defaults to ``False``."
msgstr ""
":setting:`INSTALLED_APPS` から削除された、以前にインストールされたアプリのも"
"のを含む、古くなったコンテンツタイプを削除します。デフォルトは ``False`` で"
"す。"

msgid "``django.contrib.gis``"
msgstr "``django.contrib.gis``"

msgid ""
"This command is only available if :doc:`GeoDjango </ref/contrib/gis/index>` "
"(``django.contrib.gis``) is installed."
msgstr ""
"このコマンドは、:doc:`GeoDjango </ref/contrib/gis/index>` (``django.contrib."
"gis``) がインストールされている場合のみ使用できます。"

msgid ""
"Please refer to its :djadmin:`description <ogrinspect>` in the GeoDjango "
"documentation."
msgstr ""
"GeoDjango のドキュメントの :djadmin:`description <ogrinspect>` を参照してくだ"
"さい。"

msgid "``django.contrib.sessions``"
msgstr "``django.contrib.sessions``"

msgid "``clearsessions``"
msgstr "``clearsessions``"

msgid "Can be run as a cron job or directly to clean out expired sessions."
msgstr ""
"cron job に設定したり、直接実行することで、期限切れのセッションを削除できま"
"す。"

msgid "``django.contrib.staticfiles``"
msgstr "``django.contrib.staticfiles``"

msgid ""
"This command is only available if the :doc:`static files application </howto/"
"static-files/index>` (``django.contrib.staticfiles``) is installed."
msgstr ""
"このコマンドは :doc:`static files アプリケーション </howto/static-files/"
"index>` (``django.contrib.staticfiles``) がインストールされている場合のみ使用"
"できます。"

msgid ""
"Please refer to its :djadmin:`description <collectstatic>` in the :doc:"
"`staticfiles </ref/contrib/staticfiles>` documentation."
msgstr ""
":doc:`staticfiles </ref/contrib/staticfiles>` ドキュメントの :djadmin:"
"`description <collectstatic>` を参照してください。"

msgid ""
"Please refer to its :djadmin:`description <findstatic>` in the :doc:"
"`staticfiles </ref/contrib/staticfiles>` documentation."
msgstr ""
":doc:`staticfiles </ref/contrib/staticfiles>` ドキュメントの :djadmin:"
"`description <findstatic>` を参照してください。"

msgid "Default options"
msgstr "デフォルトのオプション"

msgid ""
"Although some commands may allow their own custom options, every command "
"allows for the following options by default:"
msgstr ""
"コマンドによっては独自のカスタムオプションを使用できるものもありますが、どの"
"コマンドでもデフォルトでは以下のオプションが使用できます："

msgid ""
"Adds the given filesystem path to the Python :py:data:`sys.path` module "
"attribute. If this isn't provided, ``django-admin`` will use the :envvar:"
"`PYTHONPATH` environment variable."
msgstr ""
"与えられたファイルシステムのパスを Python :py:data:`sys.path` モジュール属性"
"に追加します。これが指定されていない場合、``django-admin`` は :envvar:"
"`PYTHONPATH` 環境変数を使用します。"

msgid ""
"This option is unnecessary in ``manage.py``, because it takes care of "
"setting the Python path for you."
msgstr ""
"このオプションは ``manage.py`` では不要です。Python のパスの設定は ``manage."
"py`` が行ってくれるからです。"

msgid ""
"Specifies the settings module to use. The settings module should be in "
"Python package syntax, e.g. ``mysite.settings``. If this isn't provided, "
"``django-admin`` will use the :envvar:`DJANGO_SETTINGS_MODULE` environment "
"variable."
msgstr ""
"使用する設定モジュールを指定します。設定モジュールは Python パッケージの構文"
"である必要があります (例: ``mysite.settings``)。これが指定されていない場合、 "
"``django-admin`` は :envvar:`DJANGO_SETTINGS_MODULE` 環境変数を使用します。"

msgid ""
"This option is unnecessary in ``manage.py``, because it uses ``settings.py`` "
"from the current project by default."
msgstr ""
"このオプションは ``manage.py`` では不要です。デフォルトでは現在のプロジェクト"
"の ``settings.py`` を使用するからです。"

msgid ""
"Displays a full stack trace when a :exc:`~django.core.management."
"CommandError` is raised. By default, ``django-admin`` will show an error "
"message when a ``CommandError`` occurs and a full stack trace for any other "
"exception."
msgstr ""
":exc:`~django.core.management.CommandError` が発生した場合、完全なスタックト"
"レースを表示します。デフォルトでは、 ``django-admin`` は ``CommandError`` が"
"発生するとエラーメッセージを表示し、それ以外の例外が発生すると完全なスタック"
"トレースを表示します。"

msgid "This option is ignored by :djadmin:`runserver`."
msgstr "このオプションは :djadmin:`runserver` では無視されます。"

msgid ""
"Specifies the amount of notification and debug information that a command "
"should print to the console."
msgstr "コマンドがコンソールに表示する通知とデバッグ情報の量を指定します。"

msgid "``0`` means no output."
msgstr "``0`` は出力なしを意味します。"

msgid "``1`` means normal output (default)."
msgstr "``1`` は通常の出力を意味します（デフォルト）。"

msgid "``2`` means verbose output."
msgstr "``2`` は詳細な出力を意味します。"

msgid "``3`` means *very* verbose output."
msgstr "``3`` は *非常に* 詳細な出力を意味します。"

msgid ""
"Disables colorized command output.  Some commands format their output to be "
"colorized. For example, errors will be printed to the console in red and SQL "
"statements will be syntax highlighted."
msgstr ""
"カラー表示されたコマンドの出力を無効にします。一部のコマンドは、出力をカラー"
"表示するようにフォーマットされます。たとえば、エラーは赤色でコンソールに表示"
"され、SQL文はシンタックスハイライトされます。"

msgid ""
"Forces colorization of the command output if it would otherwise be disabled "
"as discussed in :ref:`syntax-coloring`. For example, you may want to pipe "
"colored output to another command."
msgstr ""
":ref:`syntax-coloring` で説明されているように、コマンドの出力が無効になる場合"
"でも出力のカラー表示を強制します。例えば、色付きの出力を別のコマンドにパイプ"
"したい場合などに使用します。"

msgid ""
"Skips running system checks prior to running the command. This option is "
"only available if the :attr:`~django.core.management.BaseCommand."
"requires_system_checks` command attribute is not an empty list or tuple."
msgstr ""
"コマンドを実行する前のシステムチェックをスキップします。このオプションは :"
"attr:`~django.core.management.BaseCommand.requires_system_checks` コマンド属"
"性が空のリストやタプルでない場合にだけ有効です。"

msgid "Extra niceties"
msgstr "追加の便利機能"

msgid "Syntax coloring"
msgstr "シンタックスカラーリング"

msgid ""
"The ``django-admin`` / ``manage.py`` commands will use pretty color-coded "
"output if your terminal supports ANSI-colored output. It won't use the color "
"codes if you're piping the command's output to another program unless the :"
"option:`--force-color` option is used."
msgstr ""
"``dango-admin`` / ``manage.py`` コマンドは、ターミナルが ANSI カラー出力をサ"
"ポートしている場合、色分けされた出力を使用します。 :option:`--force-color` オ"
"プションが使用されていない限り、コマンドの出力を他のプログラムにパイプしても"
"カラー出力は使用されません。"

msgid "Windows support"
msgstr "Windows でのサポート"

msgid ""
"On Windows 10, the `Windows Terminal`_ application, `VS Code`_, and "
"PowerShell (where virtual terminal processing is enabled) allow colored "
"output, and are supported by default."
msgstr ""
"Windows 10 では、 `Windows Terminal`_ アプリケーション、 `VS Code`_ 、および "
"PowerShell (仮想ターミナル処理が有効になっている場合) では色付きの出力が可能"
"で、デフォルトでサポートされています。"

msgid ""
"Under Windows, the legacy ``cmd.exe`` native console doesn't support ANSI "
"escape sequences so by default there is no color output. In this case either "
"of two third-party libraries are needed:"
msgstr ""
"Windows では、レガシーの ``cmd.exe`` ネイティブコンソールは ANSI エスケープ"
"シーケンスをサポートしていないため、デフォルトではカラー出力ができません。こ"
"の場合、2つのサードパーティライブラリのどちらかが必要になります："

msgid ""
"Install :pypi:`colorama`, a Python package that translates ANSI color codes "
"into Windows API calls. Django commands will detect its presence and will "
"make use of its services to color output just like on Unix-based platforms. "
"``colorama`` can be installed via pip:"
msgstr ""
":pypi:`colorama` は、ANSI カラーコードを Windows API 呼び出しに変換する "
"Python パッケージです。Django のコマンドはこのパッケージの存在を検出し、Unix "
"ベースのプラット フォームと同じように、このパッケージのサービスを利用して出力"
"に色をつけます。 ``colorama`` は pip でインストールできます："

msgid ""
"Install `ANSICON`_, a third-party tool that allows ``cmd.exe`` to process "
"ANSI color codes. Django commands will detect its presence and will make use "
"of its services to color output just like on Unix-based platforms."
msgstr ""
"`ANSICON`_ をインストールします。これは、 ``cmd.exe`` が ANSI カラーコードを"
"処理できるようにするサードパーティツールです。Django のコマンドはこのツールの"
"存在を検出し、Unix ベースのプラットフォームと同じように、このツールのサービス"
"を利用して出力に色をつけます。"

msgid ""
"Other modern terminal environments on Windows, that support terminal colors, "
"but which are not automatically detected as supported by Django, may "
"\"fake\" the installation of ``ANSICON`` by setting the appropriate "
"environmental variable, ``ANSICON=\"on\"``."
msgstr ""
"ターミナルカラーをサポートしているが、Django がサポートしていることを自動的に"
"検出しない Windows の他のモダンなターミナル環境では、 ``ANSICON=\"on\"`` とい"
"う適切な環境変数を設定することで、 ``ANSICON`` のインストールを「偽装」するこ"
"とができます。"

msgid "Custom colors"
msgstr "カラーをカスタマイズする"

msgid ""
"The colors used for syntax highlighting can be customized. Django ships with "
"three color palettes:"
msgstr ""
"シンタックスハイライトに使う色はカスタマイズできます。Django には 3 つのカ"
"ラーパレットが同梱されています："

msgid ""
"``dark``, suited to terminals that show white text on a black background. "
"This is the default palette."
msgstr ""
"``dark``, 黒い背景に白いテキストを表示する端末に適しています。これはデフォル"
"トのパレットです。"

msgid ""
"``light``, suited to terminals that show black text on a white background."
msgstr "``light``, これは白い背景に黒いテキストを表示する端末に適しています。"

msgid "``nocolor``, which disables syntax highlighting."
msgstr "``nocolor``, これはシンタックスハイライトを無効にします。"

msgid ""
"You select a palette by setting a :envvar:`DJANGO_COLORS` environment "
"variable to specify the palette you want to use. For example, to specify the "
"``light`` palette under a Unix or OS/X BASH shell, you would run the "
"following at a command prompt:"
msgstr ""
"パレットを選択するには :envvar:`DJANGO_COLORS` 環境変数を設定して使用したいパ"
"レットを指定します。例えば、UnixやOS/XのBASHシェルで ``light`` パレットを指定"
"するには、ターミナルで以下のように実行します："

msgid ""
"You can also customize the colors that are used. Django specifies a number "
"of roles in which color is used:"
msgstr ""
"使用する色をカスタマイズすることもできます。Django は色が使われる役割（ロー"
"ル）をいくつか指定しています："

msgid "``error`` - A major error."
msgstr "``error`` - 主なエラー。"

msgid "``notice`` - A minor error."
msgstr "``notice`` - 軽微なエラー。"

msgid "``success`` - A success."
msgstr "``success`` - 成功。"

msgid "``warning`` - A warning."
msgstr "``warning`` - 警告。"

msgid "``sql_field`` - The name of a model field in SQL."
msgstr "``sql_field`` - SQL のモデルフィールドの名前。"

msgid "``sql_coltype`` - The type of a model field in SQL."
msgstr "``sql_coltype`` - SQL のモデルフィールドの型。"

msgid "``sql_keyword`` - An SQL keyword."
msgstr "``sql_keyword`` - SQLキーワード。"

msgid "``sql_table`` - The name of a model in SQL."
msgstr "``sql_table`` - SQL 内のモデルの名前。"

msgid "``http_info`` - A 1XX HTTP Informational server response."
msgstr "``http_info`` - 1XX HTTP Informational サーバーレスポンス。"

msgid "``http_success`` - A 2XX HTTP Success server response."
msgstr "``http_success`` - 2XX HTTP Success サーバーレスポンス。"

msgid "``http_not_modified`` - A 304 HTTP Not Modified server response."
msgstr "``http_not_modified`` - 304 HTTP Not Modified サーバーレスポンス。"

msgid "``http_redirect`` - A 3XX HTTP Redirect server response other than 304."
msgstr "``http_redirect`` - 304以外の3XX HTTPリダイレクトサーバーレスポンス。"

msgid "``http_not_found`` - A 404 HTTP Not Found server response."
msgstr "``http_not_found`` - 404 HTTP Not Found サーバーレスポンス。"

msgid ""
"``http_bad_request`` - A 4XX HTTP Bad Request server response other than 404."
msgstr ""
"``http_bad_request`` - 404 以外の 4XX HTTP Bad Request サーバーレスポンス。"

msgid "``http_server_error`` - A 5XX HTTP Server Error response."
msgstr "``http_server_error`` - 5XX HTTP サーバーエラー。"

msgid "``migrate_heading`` - A heading in a migrations management command."
msgstr "``migrate_heading`` - マイグレーション管理コマンドの見出し。"

msgid "``migrate_label`` - A migration name."
msgstr "``migrate_label`` - マイグレーション名。"

msgid ""
"Each of these roles can be assigned a specific foreground and background "
"color, from the following list:"
msgstr ""
"これらの各ロールには、以下のリストから特定の前景色と背景色を割り当てることが"
"できます："

msgid "``black``"
msgstr "``black``"

msgid "``red``"
msgstr "``red``"

msgid "``green``"
msgstr "``green``"

msgid "``yellow``"
msgstr "``yellow``"

msgid "``blue``"
msgstr "``blue``"

msgid "``magenta``"
msgstr "``magenta``"

msgid "``cyan``"
msgstr "``cyan``"

msgid "``white``"
msgstr "``white``"

msgid ""
"Each of these colors can then be modified by using the following display "
"options:"
msgstr "これらの色はそれぞれ、以下の表示オプションを使って変更できます："

msgid "``bold``"
msgstr "``bold``"

msgid "``underscore``"
msgstr "``underscore``"

msgid "``blink``"
msgstr "``blink``"

msgid "``reverse``"
msgstr "``reverse``"

msgid "``conceal``"
msgstr "``conceal``"

msgid "A color specification follows one of the following patterns:"
msgstr "色の指定は、次のいずれかのパターンに従います："

msgid "``role=fg``"
msgstr "``role=fg``"

msgid "``role=fg/bg``"
msgstr "``role=fg/bg``"

msgid "``role=fg,option,option``"
msgstr "``role=fg,option,option``"

msgid "``role=fg/bg,option,option``"
msgstr "``role=fg/bg,option,option``"

msgid ""
"where ``role`` is the name of a valid color role, ``fg`` is the foreground "
"color, ``bg`` is the background color and each ``option`` is one of the "
"color modifying options. Multiple color specifications are then separated by "
"a semicolon. For example:"
msgstr ""
"ここで ``role`` は有効な色の役割の名前、 ``fg`` は描画色、 ``bg`` は背景色、"
"そしてそれぞれの ``option`` は色を変更するオプションの一つです。複数の色の指"
"定はセミコロンで区切ります。たとえば以下のようにします："

msgid ""
"would specify that errors be displayed using blinking yellow on blue, and "
"notices displayed using magenta. All other color roles would be left "
"uncolored."
msgstr ""
"これを指定すると、エラーは青地に黄色の点滅で表示され、通知はマゼンタで表示さ"
"れます。それ以外の色の役割には色を付けません。"

msgid ""
"Colors can also be specified by extending a base palette. If you put a "
"palette name in a color specification, all the colors implied by that "
"palette will be loaded. So:"
msgstr ""
"色はベースパレットを拡張して指定することもできます。色指定にパレット名を入れ"
"ると、そのパレットが意味するすべての色が読み込まれます。つまり："

msgid ""
"would specify the use of all the colors in the light color palette, *except* "
"for the colors for errors and notices which would be overridden as specified."
msgstr ""
"これを指定すると、light カラーパレットのすべての色の使用が指定されますが、"
"error と notice の色は指定どおりにオーバーライドされます。"

msgid "Bash completion"
msgstr "Bash による補完"

msgid ""
"If you use the Bash shell, consider installing the Django bash completion "
"script, which lives in :source:`extras/django_bash_completion` in the Django "
"source distribution. It enables tab-completion of ``django-admin`` and "
"``manage.py`` commands, so you can, for instance..."
msgstr ""
"Bash シェルを使用している場合は、Django bash 補完スクリプトのインストールを検"
"討してください。スクリプトは Django のソース配布元の :source:`extras/"
"django_bash_completion` にあります。このスクリプトを使うと、``django-admin`` "
"と ``manage.py`` コマンドで tab キーによる補完が有効になります。使い方を説明"
"すると、"

msgid "Type ``django-admin``."
msgstr "まず、``django-admin`` とタイプします。"

msgid "Press [TAB] to see all available options."
msgstr "[TAB] キーをクリックし、利用できるオプション一覧を表示します。"

msgid ""
"Type ``sql``, then [TAB], to see all available options whose names start "
"with ``sql``."
msgstr ""
"``sql`` とタイプし、[TAB] キーを押すと、名前が ``sql`` で始まるオプション一覧"
"が表示されます。"

msgid ""
"See :doc:`/howto/custom-management-commands` for how to add customized "
"actions."
msgstr ""
"独自のカスタムアクションを追加したい場合は、:doc:`/howto/custom-management-"
"commands` を読んでください。"

msgid "Black formatting"
msgstr "Black フォーマッタ"

msgid ""
"The Python files created by :djadmin:`startproject`, :djadmin:`startapp`, :"
"djadmin:`optimizemigration`, :djadmin:`makemigrations`, and :djadmin:"
"`squashmigrations` are formatted using the ``black`` command if it is "
"present on your ``PATH``."
msgstr ""
":djadmin:`startproject`, :djadmin:`startapp`, :djadmin:`optimizemigration`, :"
"djadmin:`makemigrations`, :djadmin:`squashmigrations` によって作成された "
"Python ファイルは、 ``black`` コマンドが ``PATH`` にあれば、それを使って"
"フォーマットされます。"

msgid ""
"If you have ``black`` globally installed, but do not wish it used for the "
"current project, you can set the ``PATH`` explicitly:"
msgstr ""
"もし ``black`` がグローバルにインストールされているが、現在のプロジェクトで使"
"用したくない場合は、 ``PATH`` を明示的に設定できます："

msgid ""
"For commands using ``stdout`` you can pipe the output to ``black`` if needed:"
msgstr ""
"``stdout`` を使用するコマンドでは、必要に応じて出力を ``black`` にパイプでき"
"ます："

msgid "Running management commands from your code"
msgstr "コードから管理コマンドを実行する"

msgid "To call a management command from code use ``call_command()``."
msgstr "コードから管理コマンドを呼び出すには ``call_command()`` を使います。"

msgid ""
"the name of the command to call or a command object. Passing the name is "
"preferred unless the object is required for testing."
msgstr ""
"呼び出すコマンドの名前またはコマンド・オブジェクト。オブジェクトがテストに必"
"要でない限り、名前を渡すことが望ましいです。"

msgid "``*args``"
msgstr "``*args``"

msgid ""
"a list of arguments accepted by the command. Arguments are passed to the "
"argument parser, so you can use the same style as you would on the command "
"line. For example, ``call_command('flush', '--verbosity=0')``."
msgstr ""
"コマンドが受け付ける引数のリスト。引数は引数パーサに渡されるので、コマンドラ"
"インと同じスタイルで使用できます。たとえば、``call_command('flush', '--"
"verbosity=0')`` のようにします。"

msgid "``**options``"
msgstr "``**options``"

msgid ""
"named options accepted on the command-line. Options are passed to the "
"command without triggering the argument parser, which means you'll need to "
"pass the correct type. For example, ``call_command('flush', verbosity=0)`` "
"(zero must be an integer rather than a string)."
msgstr ""
"コマンドラインで受け付ける名前付きオプション。オプションは引数パーサを起動す"
"ることなくコマンドに渡されるため、正しい型を渡す必要があります。例えば、"
"``call_command('flush', verbosity=0)`` (ゼロは文字列ではなく整数でなければな"
"りません)。"

msgid ""
"Note that command options that take no arguments are passed as keywords with "
"``True`` or ``False``, as you can see with the ``interactive`` option above."
msgstr ""
"上の ``interactive`` オプションのように、引数を取らないコマンドオプションは"
"キーワードとして ``True`` または ``False`` で渡されることに注意してください。"

msgid ""
"Named arguments can be passed by using either one of the following syntaxes::"
msgstr "名前付き引数は、以下の構文のいずれかを使って渡すことができます："

msgid ""
"Some command options have different names when using ``call_command()`` "
"instead of ``django-admin`` or ``manage.py``. For example, ``django-admin "
"createsuperuser --no-input`` translates to ``call_command('createsuperuser', "
"interactive=False)``. To find what keyword argument name to use for "
"``call_command()``, check the command's source code for the ``dest`` "
"argument passed to ``parser.add_argument()``."
msgstr ""
"コマンドオプションの中には、 ``djangoo-admin`` や ``manage.py`` の代わりに "
"``call_command()`` を使用すると異なる名前になるものがあります。たとえば、 "
"``django-admin createsuperuser --no-input`` は "
"``call_command('createsuperuser', interactive=False)`` となります。 "
"``call_command()`` で使用するキーワード引数名を調べるには、コマンドのソース"
"コードで ``parser.add_argument()`` に渡される ``dest`` 引数を確認してくださ"
"い。"

msgid "Command options which take multiple options are passed a list::"
msgstr "複数のオプションを取るコマンドオプションは、リストで渡します："

msgid ""
"The return value of the ``call_command()`` function is the same as the "
"return value of the ``handle()`` method of the command."
msgstr ""
"``call_command()`` 関数の戻り値は、コマンドの ``handle()`` メソッドの戻り値と"
"同じです。"

msgid "Output redirection"
msgstr "出力のリダイレクト"

msgid ""
"Note that you can redirect standard output and error streams as all commands "
"support the ``stdout`` and ``stderr`` options. For example, you could write::"
msgstr ""
"すべてのコマンドは ``stdout`` と ``stderr`` オプションをサポートしているの"
"で、標準出力やエラーのストリームはリダイレクトできます。例えば、次のように書"
"くことができます："

msgid "Django Exceptions"
msgstr "Django の例外"

msgid ""
"Django raises some of its own exceptions as well as standard Python "
"exceptions."
msgstr "Django は普通の Python の例外の他に、いくつか独自の例外も起こします。"

msgid "Django Core Exceptions"
msgstr "Django Core 例外"

msgid ""
"Django core exception classes are defined in ``django.core.exceptions``."
msgstr ""
"Django core 例外クラスは ``django.core.exceptions`` で定義されています。"

msgid "``AppRegistryNotReady``"
msgstr "``AppRegistryNotReady``"

msgid ""
"This exception is raised when attempting to use models before the :ref:`app "
"loading process <app-loading-process>`, which initializes the ORM, is "
"complete."
msgstr ""
"この例外は、ORM を初期化する :ref:`アプリケーション読み込みプロセス <app-"
"loading-process>` が完了する前にモデルを使用しようとしたときに発生します。"

msgid "``ObjectDoesNotExist``"
msgstr "``ObjectDoesNotExist``"

msgid ""
"The base class for :exc:`Model.DoesNotExist <django.db.models.Model."
"DoesNotExist>` exceptions. A ``try/except`` for ``ObjectDoesNotExist`` will "
"catch :exc:`~django.db.models.Model.DoesNotExist` exceptions for all models."
msgstr ""
":exc:`Model.DoesNotExist <django.db.models.Model.DoesNotExist>` 例外の基底ク"
"ラスです。``ObjectDoesNotExist`` のための ``try/except`` は、すべてのモデル"
"の :exc:`~django.db.models.Model.DoesNotExist` 例外をキャッチします。"

msgid "See :meth:`~django.db.models.query.QuerySet.get()`."
msgstr ":meth:`~django.db.models.query.QuerySet.get()` を参照してください。"

msgid "``EmptyResultSet``"
msgstr "``EmptyResultSet``"

msgid ""
"``EmptyResultSet`` may be raised during query generation if a query won't "
"return any results. Most Django projects won't encounter this exception, but "
"it might be useful for implementing custom lookups and expressions."
msgstr ""
"``EmptyResultSet`` は、クエリが何も結果を返さない場合に、クエリ生成時に発生す"
"る可能性があります。ほとんどの Django プロジェクトでは、この例外に遭遇するこ"
"とはないでしょうが、カスタムルックアップや式を実装する際に役立つかもしれませ"
"ん。"

msgid "``FullResultSet``"
msgstr "``FullResultSet``"

msgid ""
"``FullResultSet`` may be raised during query generation if a query will "
"match everything. Most Django projects won't encounter this exception, but "
"it might be useful for implementing custom lookups and expressions."
msgstr ""
"``FullResultSet`` は、クエリが全てに一致する場合に、クエリ生成中に発生する可"
"能性があります。ほとんどの Django プロジェクトではこの例外に遭遇することはあ"
"りませんが、カスタムルックアップや式を実装する際に役立つかもしれません。"

msgid "``FieldDoesNotExist``"
msgstr "``FieldDoesNotExist``"

msgid ""
"The ``FieldDoesNotExist`` exception is raised by a model's ``_meta."
"get_field()`` method when the requested field does not exist on the model or "
"on the model's parents."
msgstr ""
"モデルの ``_meta.get_field()`` メソッドによって、リクエストされたフィールドが"
"モデルまたはモデルの親に存在しない場合、 ``FieldDoesNotExist`` 例外が発生しま"
"す。"

msgid "``MultipleObjectsReturned``"
msgstr "``MultipleObjectsReturned``"

msgid ""
"The base class for :exc:`Model.MultipleObjectsReturned <django.db.models."
"Model.MultipleObjectsReturned>` exceptions. A ``try/except`` for "
"``MultipleObjectsReturned`` will catch :exc:`~django.db.models.Model."
"MultipleObjectsReturned` exceptions for all models."
msgstr ""
":exc:`Model.MultipleObjectsReturned <django.db.models.Model."
"MultipleObjectsReturned>` 例外の基底クラスです。``MultipleObjectsReturned`` "
"の ``try/except`` は、すべてのモデルの :exc:`~django.db.models.Model."
"MultipleObjectsReturned` 例外をキャッチします。"

msgid "``SuspiciousOperation``"
msgstr "``SuspiciousOperation``"

msgid ""
"The :exc:`SuspiciousOperation` exception is raised when a user has performed "
"an operation that should be considered suspicious from a security "
"perspective, such as tampering with a session cookie. Subclasses of "
"``SuspiciousOperation`` include:"
msgstr ""
":exc:`SuspiciousOperation` 例外は、セッションクッキーの改ざんなど、セキュリ"
"ティの観点から疑わしいとみなされる操作をユーザーが行った場合に発生します。 "
"``SuspiciousOperation`` のサブクラスには以下が含まれます:"

msgid "``DisallowedHost``"
msgstr "``DisallowedHost``"

msgid "``DisallowedModelAdminLookup``"
msgstr "``DisallowedModelAdminLookup``"

msgid "``DisallowedModelAdminToField``"
msgstr "``DisallowedModelAdminToField``"

msgid "``DisallowedRedirect``"
msgstr "``DisallowedRedirect``"

msgid "``InvalidSessionKey``"
msgstr "``InvalidSessionKey``"

msgid "``RequestDataTooBig``"
msgstr "``RequestDataTooBig``"

msgid "``SuspiciousFileOperation``"
msgstr "``SuspiciousFileOperation``"

msgid "``SuspiciousMultipartForm``"
msgstr "``SuspiciousMultipartForm``"

msgid "``SuspiciousSession``"
msgstr "``SuspiciousSession``"

msgid "``TooManyFieldsSent``"
msgstr "``TooManyFieldsSent``"

msgid "``TooManyFilesSent``"
msgstr "``TooManyFilesSent``"

msgid ""
"If a ``SuspiciousOperation`` exception reaches the ASGI/WSGI handler level "
"it is logged at the ``Error`` level and results in a :class:`~django.http."
"HttpResponseBadRequest`. See the :doc:`logging documentation </topics/"
"logging/>` for more information."
msgstr ""
"もし ``SuspiciousOperation`` 例外が ASGI/WSGI ハンドラレベルに達した場合、"
"``Error`` レベルでログ記録され、 :class:`~django.http."
"HttpResponseBadRequest` が結果として返されます。 詳細については、:doc:`ロギン"
"グのドキュメント </topics/logging/>` を参照してください。"

msgid "``SuspiciousOperation`` is raised when too many files are submitted."
msgstr ""
"``SuspiciousOperation`` は、あまりにも多くのファイルが送信された場合に発生し"
"ます。"

msgid "``PermissionDenied``"
msgstr "``PermissionDenied``"

msgid ""
"The :exc:`PermissionDenied` exception is raised when a user does not have "
"permission to perform the action requested."
msgstr ""
":exc:`PermissionDenied` 例外は、ユーザーにリクエストされたアクションを実行す"
"る権限がない場合に発生します。"

msgid "``ViewDoesNotExist``"
msgstr "``ViewDoesNotExist``"

msgid ""
"The :exc:`ViewDoesNotExist` exception is raised by :mod:`django.urls` when a "
"requested view does not exist."
msgstr ""
":exc:`ViewDoesNotExist` 例外は、リクエストされたビューが存在しないい場合に、:"
"mod:`django.urls` によって発生します。"

msgid "``MiddlewareNotUsed``"
msgstr "``MiddlewareNotUsed``"

msgid ""
"The :exc:`MiddlewareNotUsed` exception is raised when a middleware is not "
"used in the server configuration."
msgstr ""
":exc:`MiddlewareNotUsed` 例外は、サーバーの設定の中でミドルウェアが使用されな"
"かった時に発生します。"

msgid "``ImproperlyConfigured``"
msgstr "``ImproperlyConfigured``"

msgid ""
"The :exc:`ImproperlyConfigured` exception is raised when Django is somehow "
"improperly configured -- for example, if a value in ``settings.py`` is "
"incorrect or unparseable."
msgstr ""
":exc:`ImproperlyConfigured` 例外は、Django が何らかの点で不適切に設定されてい"
"る場合に発生します。たとえば、``settings.py`` に含まれる値が不正であったり、"
"パースできないような場合が考えられます。"

msgid "``FieldError``"
msgstr "``FieldError``"

msgid ""
"The :exc:`FieldError` exception is raised when there is a problem with a "
"model field. This can happen for several reasons:"
msgstr ""
":exc:`FieldError` 例外は、モデルのフィールドに問題がある時に発生します。発生"
"理由としては、次のようないくつかの理由が考えられます。"

msgid ""
"A field in a model clashes with a field of the same name from an abstract "
"base class"
msgstr ""
"モデル内のフィールドが、抽象基底クラスからの同名のフィールドと衝突しています"

msgid "An infinite loop is caused by ordering"
msgstr "ソートによって無限ループが起こります"

msgid "A keyword cannot be parsed from the filter parameters"
msgstr "フィルタパラメータからキーワードを解析できません"

msgid "A field cannot be determined from a keyword in the query parameters"
msgstr "クエリパラメータのキーワードからは、フィールドを特定できません"

msgid "A join is not permitted on the specified field"
msgstr "指定されたフィールドに対する結合は許可されていません"

msgid "A field name is invalid"
msgstr "フィールド名が無効です"

msgid "A query contains invalid order_by arguments"
msgstr "クエリに無効な order_by 引数が含まれています"

msgid "``ValidationError``"
msgstr "``ValidationError``"

msgid ""
"The :exc:`ValidationError` exception is raised when data fails form or model "
"field validation. For more information about validation, see :doc:`Form and "
"Field Validation </ref/forms/validation>`, :ref:`Model Field Validation "
"<validating-objects>` and the :doc:`Validator Reference </ref/validators>`."
msgstr ""
":exc:`ValidationError` 例外は、データがフォームまたはモデルのフィールド検証に"
"失敗すると発生します。検証 (validation) のより詳しい情報については、:doc:`"
"フォームとフィールドのバリデーション </ref/forms/validation>` や :ref:`モデル"
"フィールドのバリデーション <validating-objects>`、:doc:`バリデータのリファレ"
"ンス </ref/validators>` を参照してください。"

msgid "``NON_FIELD_ERRORS``"
msgstr "``NON_FIELD_ERRORS``"

msgid ""
"``ValidationError``\\s that don't belong to a particular field in a form or "
"model are classified as ``NON_FIELD_ERRORS``. This constant is used as a key "
"in dictionaries that otherwise map fields to their respective list of errors."
msgstr ""
"``ValidationError`` でフォームやモデルの特定のフィールドに属さないものは、 "
"``NON_FIELD_ERRORS`` として分類されます。この定数は、他のフィールドをそれぞれ"
"のエラーリストにマッピングする辞書でキーとして使用されます。"

msgid "``BadRequest``"
msgstr "``BadRequest``"

msgid ""
"The :exc:`BadRequest` exception is raised when the request cannot be "
"processed due to a client error. If a ``BadRequest`` exception reaches the "
"ASGI/WSGI handler level it results in a :class:`~django.http."
"HttpResponseBadRequest`."
msgstr ""
":exc:`BadRequest` 例外は、クライアントエラーによりリクエストを処理できない場"
"合に発生します。 ``BadRequest`` 例外が ASGI/WSGI ハンドラレベルに到達する"
"と、 :class:`~django.http.HttpResponseBadRequest` が結果として返されます。"

msgid "``RequestAborted``"
msgstr "``RequestAborted``"

msgid ""
"The :exc:`RequestAborted` exception is raised when an HTTP body being read "
"in by the handler is cut off midstream and the client connection closes, or "
"when the client does not send data and hits a timeout where the server "
"closes the connection."
msgstr ""
":exc:`RequestAborted` 例外は、ハンドラによって読み込まれた HTTP ボディが途中"
"で切断され、クライアント接続が閉じられるか、またはクライアントがデータを送信"
"せず、サーバーが接続を閉じるタイムアウトに達したときに発生します。"

msgid ""
"It is internal to the HTTP handler modules and you are unlikely to see it "
"elsewhere. If you are modifying HTTP handling code, you should raise this "
"when you encounter an aborted request to make sure the socket is closed "
"cleanly."
msgstr ""
"これはHTTPハンドラーモジュール内部のもので、他の場所で見ることはまずありませ"
"ん。HTTP処理コードを変更している場合、ソケットがクリーンに閉じられるように、"
"中断されたリクエストに遭遇した際にはこれを発生させるべきです。"

msgid "``SynchronousOnlyOperation``"
msgstr "``SynchronousOnlyOperation``"

msgid ""
"The :exc:`SynchronousOnlyOperation` exception is raised when code that is "
"only allowed in synchronous Python code is called from an asynchronous "
"context (a thread with a running asynchronous event loop). These parts of "
"Django are generally heavily reliant on thread-safety to function and don't "
"work correctly under coroutines sharing the same thread."
msgstr ""
":exc:`SynchronousOnlyOperation` 例外は、同期的な Python コードでのみ許可され"
"ているコードが、実行中の非同期イベントループを持つスレッドから非同期コンテキ"
"ストで呼び出されたときに発生します。Django のこれらの部分は、一般に機能するた"
"めにスレッドセーフに大きく依存しており、同じスレッドを共有するコルーチンの下"
"では正しく動作しません。"

msgid ""
"If you are trying to call code that is synchronous-only from an asynchronous "
"thread, then create a synchronous thread and call it in that. You can "
"accomplish this is with :func:`asgiref.sync.sync_to_async`."
msgstr ""
"非同期スレッドから同期専用のコードを呼び出そうとしている場合は、同期スレッド"
"を作成し、その中で呼び出してください。これは、 :func:`asgiref.sync."
"sync_to_async` を使用して実現できます。"

msgid "URL Resolver exceptions"
msgstr "URL Resolver の例外"

msgid "URL Resolver exceptions are defined in ``django.urls``."
msgstr "URL Resolver の例外は ``django.urls`` で定義されています。"

msgid "``Resolver404``"
msgstr "``Resolver404``"

msgid ""
"The :exc:`Resolver404` exception is raised by :func:`~django.urls.resolve()` "
"if the path passed to ``resolve()`` doesn't map to a view. It's a subclass "
"of :class:`django.http.Http404`."
msgstr ""
":exc:`Resolver404` 例外は、``resolve()`` に渡されたパスがビューにマッピングさ"
"れていない場合に、 :func:`~django.urls.resolve()` によって発生します。これ"
"は :class:`django.http.Http404` のサブクラスです。"

msgid "``NoReverseMatch``"
msgstr "``NoReverseMatch``"

msgid ""
"The :exc:`NoReverseMatch` exception is raised by :mod:`django.urls` when a "
"matching URL in your URLconf cannot be identified based on the parameters "
"supplied."
msgstr ""
":exc:`NoReverseMatch` 例外は、提供されたパラメータに基づいてURLconf内の一致す"
"るURLを特定できない場合に、 :mod:`django.urls` によって発生します。"

msgid "Database Exceptions"
msgstr "データベースの例外"

msgid "Database exceptions may be imported from ``django.db``."
msgstr "データベースの例外は ``django.db`` からインポートできます。"

msgid ""
"Django wraps the standard database exceptions so that your Django code has a "
"guaranteed common implementation of these classes."
msgstr ""
"Django は標準のデータベース例外をラップしており、これによって Django コードに"
"はこれらのクラスの共通の実装が保証されます。"

msgid ""
"The Django wrappers for database exceptions behave exactly the same as the "
"underlying database exceptions. See :pep:`249`, the Python Database API "
"Specification v2.0, for further information."
msgstr ""
"Djangoのデータベース例外のラッパーは、基になるデータベース例外と全く同じ動作"
"をします。詳細については、 :pep:`249` 、Python Database API Specification "
"v2.0 を参照してください。"

msgid ""
"As per :pep:`3134`, a ``__cause__`` attribute is set with the original "
"(underlying) database exception, allowing access to any additional "
"information provided."
msgstr ""
":pep:`3134` に従って、 ``__cause__`` 属性が、追加情報へのアクセスを可能にする"
"元の(ベースとなる)データベース例外とともに設定されます。"

msgid ""
"Raised to prevent deletion of referenced objects when using :attr:`django.db."
"models.PROTECT`. :exc:`models.ProtectedError` is a subclass of :exc:"
"`IntegrityError`."
msgstr ""
"参照されているオブジェクトの削除を防ぐために発生させられる :attr:`django.db."
"models.PROTECT` を使用しています。 :exc:`models.ProtectedError` は :exc:"
"`IntegrityError` のサブクラスです。"

msgid ""
"Raised to prevent deletion of referenced objects when using :attr:`django.db."
"models.RESTRICT`. :exc:`models.RestrictedError` is a subclass of :exc:"
"`IntegrityError`."
msgstr ""
":attr:`django.db.models.RESTRICT` を使用して参照されているオブジェクトの削除"
"を防ぐために発生します。 :exc:`models.RestrictedError` は :exc:"
"`IntegrityError` のサブクラスです。"

msgid "HTTP Exceptions"
msgstr "HTTP 例外"

msgid "HTTP exceptions may be imported from ``django.http``."
msgstr "HTTPの例外は ``django.http`` からインポートできます。"

msgid "``UnreadablePostError``"
msgstr "``UnreadablePostError``"

msgid ":exc:`UnreadablePostError` is raised when a user cancels an upload."
msgstr ""
":exc:`UnreadablePostError` は、ユーザーがアップロードをキャンセルすると発生し"
"ます。"

msgid "Sessions Exceptions"
msgstr "セッションの例外"

msgid ""
"Sessions exceptions are defined in ``django.contrib.sessions.exceptions``."
msgstr ""
"セッションの例外は ``django.contrib.sessions.exceptions`` で定義されていま"
"す。"

msgid "``SessionInterrupted``"
msgstr "``SessionInterrupted``"

msgid ""
":exc:`SessionInterrupted` is raised when a session is destroyed in a "
"concurrent request. It's a subclass of :exc:`~django.core.exceptions."
"BadRequest`."
msgstr ""
":exc:`SessionInterrupted` は、並行リクエストでセッションが破棄された場合に発"
"生します。これは :exc:`~django.core.exceptions.BadRequest` のサブクラスです。"

msgid "Transaction Exceptions"
msgstr "トランザクションの例外"

msgid "Transaction exceptions are defined in ``django.db.transaction``."
msgstr ""
"トランザクションの例外は ``django.db.transaction`` で定義されています。"

msgid "``TransactionManagementError``"
msgstr "``TransactionManagementError``"

msgid ""
":exc:`TransactionManagementError` is raised for any and all problems related "
"to database transactions."
msgstr ""
":exc:`TransactionManagementError` が発生するのは、データベースのトランザク"
"ションに関するあらゆる問題に対してです。"

msgid "Testing Framework Exceptions"
msgstr "テストフレームワークの例外"

msgid "Exceptions provided by the ``django.test`` package."
msgstr "``django.test`` パッケージが提供する例外です。"

msgid "``RedirectCycleError``"
msgstr "``RedirectCycleError``"

msgid ""
":exc:`~client.RedirectCycleError` is raised when the test client detects a "
"loop or an overly long chain of redirects."
msgstr ""
":exc:`~client.RedirectCycleError` は、テストクライアントがループまたは過度に"
"長いリダイレクトの連結を検出した時に発生します。"

msgid "Python Exceptions"
msgstr "Python の例外"

msgid ""
"Django raises built-in Python exceptions when appropriate as well. See the "
"Python documentation for further information on the :ref:`bltin-exceptions`."
msgstr ""
"Django は、十分適切な場合にはビルトインの Python の例外を起こします。詳しい情"
"報については、Python のドキュメント :ref:`bltin-exceptions` を読んでくださ"
"い。"

msgid "The ``File`` object"
msgstr "``File`` オブジェクト"

msgid ""
"The :mod:`django.core.files` module and its submodules contain built-in "
"classes for basic file handling in Django."
msgstr ""
":mod:`django.core.files` モジュールとそのサブモジュールでは、Django の基本的"
"なファイルハンドリングに関するビルトインクラスが定義されています。"

msgid "The ``File`` class"
msgstr "``File`` クラス"

msgid ""
"The :class:`File` class is a thin wrapper around a Python :py:term:`file "
"object` with some Django-specific additions. Internally, Django uses this "
"class when it needs to represent a file."
msgstr ""
":class:`File` クラスは、Python の :py:term:`file object` に Django 特有の追加"
"機能を付け加えた薄いラッパーです。内部的でファイルを表現する必要がある場合に"
"は、Django はこのクラスを使います。"

msgid ":class:`File` objects have the following attributes and methods:"
msgstr ":class:`File` オブジェクトには次の属性とメソッドを持ちます。"

msgid ""
"The name of the file including the relative path from :setting:`MEDIA_ROOT`."
msgstr ":setting:`MEDIA_ROOT` からの相対パスを含むファイル名です。"

msgid "The size of the file in bytes."
msgstr "バイト単位で表されたファイルサイズ。"

msgid "The underlying :py:term:`file object` that this class wraps."
msgstr ""
"このクラスがラッピングしている、素の :py:term:`file object` クラスです。"

msgid "Be careful with this attribute in subclasses."
msgstr "この属性をサブクラスで扱う場合には注意が必要です。"

msgid ""
"Some subclasses of :class:`File`, including :class:`~django.core.files.base."
"ContentFile` and :class:`~django.db.models.fields.files.FieldFile`, may "
"replace this attribute with an object other than a Python :py:term:`file "
"object`. In these cases, this attribute may itself be a :class:`File` "
"subclass (and not necessarily the same subclass). Whenever possible, use the "
"attributes and methods of the subclass itself rather than the those of the "
"subclass's ``file`` attribute."
msgstr ""
":class:`~django.core.files.base.ContentFile` や :class:`~django.db.models."
"fields.files.FieldFile` など :class:`File` のサブクラスは、この属性を Python "
"の :py:term:`file object` 以外のオブジェクトに置き換えることがあります。この"
"ような場合には、この属性自体は :class:`File`  のサブクラスであるかもしれませ"
"ん (が、同じサブクラスとは限りません)。そのため、可能な限り、サブクラスの "
"``file`` 属性ではなく、サブクラス自身が持つ属性やメソッドを使用するようにして"
"ください。"

msgid "The read/write mode for the file."
msgstr "ファイルの読み込み/書き込みのモードです。"

msgid ""
"Open or reopen the file (which also does ``File.seek(0)``). The ``mode`` "
"argument allows the same values as Python's built-in :func:`python:open()`. "
"``*args`` and ``**kwargs`` are passed after ``mode`` to Python's built-in :"
"func:`python:open`."
msgstr ""
"ファイルを開くか再オープンします（これは ``File.seek(0)`` も行います）。 "
"``mode`` 引数は、Python の組み込み関数 :func:`python:open()` と同じ値を許可し"
"ます。 ``*args`` と ``**kwargs`` は、``mode`` の後に、Python の組み込み関数 :"
"func:`python:open` に渡されます。"

msgid ""
"When reopening a file, ``mode`` will override whatever mode the file was "
"originally opened with; ``None`` means to reopen with the original mode."
msgstr ""
"ファイルを再オープンする際、 ``mode`` はファイルが元々開かれていたモードを上"
"書きします。 ``None`` はオリジナルのモードで再オープンすることを意味します。"

msgid "It can be used as a context manager, e.g. ``with file.open() as f:``."
msgstr ""
"コンテキストマネージャとして使用できます。たとえば、 ``with file.open() as f:"
"`` のようにです。"

msgid "Support for passing ``*args`` and ``**kwargs`` was added."
msgstr "``*args`` と ``**kwargs`` を渡すためのサポートが追加されました。"

msgid "Iterate over the file yielding one line at a time."
msgstr "ファイルをイテレートして、1行ずつ返します。"

msgid ""
"Iterate over the file yielding \"chunks\" of a given size. ``chunk_size`` "
"defaults to 64 KB."
msgstr ""
"ファイルをイテレートし、指定されたサイズの「チャンク」を生成します。 "
"``chunk_size`` のデフォルトは 64 KB です。"

msgid ""
"This is especially useful with very large files since it allows them to be "
"streamed off disk and avoids storing the whole file in memory."
msgstr ""
"これは非常に大きなファイルに特に便利であり、ディスクからストリーミングしてメ"
"モリ全体にファイルを保存することを避けることができます。"

msgid ""
"Returns ``True`` if the file is large enough to require multiple chunks to "
"access all of its content give some ``chunk_size``."
msgstr ""
"``chunk_size`` (一括サイズ) で指定されたファイルの全内容にアクセスするために"
"複数のチャンクが必要な場合は ``True`` を返します。"

msgid "Close the file."
msgstr "ファイルを閉じてください。"

msgid ""
"In addition to the listed methods, :class:`~django.core.files.File` exposes "
"the following attributes and methods of its ``file`` object: ``encoding``, "
"``fileno``, ``flush``, ``isatty``, ``newlines``, ``read``, ``readinto``, "
"``readline``, ``readlines``, ``seek``, ``tell``, ``truncate``, ``write``, "
"``writelines``, ``readable()``, ``writable()``, and ``seekable()``."
msgstr ""
"リストされたメソッドに加えて、:class:`~django.core.files.File` は、その "
"``file`` オブジェクトの以下の属性とメソッドを公開しています: ``encoding``, "
"``fileno``, ``flush``, ``isatty``, ``newlines``, ``read``, ``readinto``, "
"``readline``, ``readlines``, ``seek``, ``tell``, ``truncate``, ``write``, "
"``writelines``, ``readable()``, ``writable()``, および ``seekable()`` 。"

msgid "The ``ContentFile`` class"
msgstr "``ContentFile`` クラス"

msgid ""
"The ``ContentFile`` class inherits from :class:`~django.core.files.File`, "
"but unlike :class:`~django.core.files.File` it operates on string content "
"(bytes also supported), rather than an actual file. For example::"
msgstr ""
"``ContentFile`` クラスは :class:`~django.core.files.File` を継承しています"
"が、:class:`~django.core.files.File` とは異なり、実際のファイルではなく文字列"
"コンテンツ(バイトもサポート)で操作します。例えば："

msgid "The ``ImageFile`` class"
msgstr "``ImageFile`` クラス"

msgid ""
"Django provides a built-in class specifically for images. :class:`django."
"core.files.images.ImageFile` inherits all the attributes and methods of :"
"class:`~django.core.files.File`, and additionally provides the following:"
msgstr ""
"Django には画像専用の組み込みクラスがあります。 :class:`django.core.files."
"images.ImageFile` は :class:`~django.core.files.File` のすべての属性とメソッ"
"ドを継承し、さらに次のものを提供します:"

msgid "Width of the image in pixels."
msgstr "画像の幅 (ピクセル単位)。"

msgid "Height of the image in pixels."
msgstr "画像の高さ(ピクセル単位)。"

msgid "Additional methods on files attached to objects"
msgstr "オブジェクトに添付されたファイルに関する追加メソッド"

msgid ""
"Any :class:`File` that is associated with an object (as with ``Car.photo``, "
"below) will also have a couple of extra methods:"
msgstr ""
"オブジェクト（以下の ``Car.photo`` のように）に関連付けられた :class:`File` "
"には、いくつかの追加メソッドも用意されています。"

msgid ""
"Saves a new file with the file name and contents provided. This will not "
"replace the existing file, but will create a new file and update the object "
"to point to it. If ``save`` is ``True``, the model's ``save()`` method will "
"be called once the file is saved. That is, these two lines:"
msgstr ""
"提供されたファイル名と内容で新しいファイルを保存します。これは既存のファイル"
"を置き換えるものではありませんが、新しいファイルを作成し、オブジェクトがそれ"
"を指すように更新します。 ``save`` が ``True`` の場合、ファイルが保存されたら"
"モデルの ``save()`` メソッドが一度呼び出されます。つまり、次の二行です:"

msgid "are equivalent to:"
msgstr "これは以下と同等です:"

msgid ""
"Note that the ``content`` argument must be an instance of either :class:"
"`File` or of a subclass of :class:`File`, such as :class:`~django.core.files."
"base.ContentFile`."
msgstr ""
"``content`` 引数は、 :class:`File` または :class:`File` のサブクラス（例え"
"ば、 :class:`~django.core.files.base.ContentFile` など）のインスタンスでなけ"
"ればなりません。"

msgid ""
"Removes the file from the model instance and deletes the underlying file. If "
"``save`` is ``True``, the model's ``save()`` method will be called once the "
"file is deleted."
msgstr ""
"モデルインスタンスからファイルを削除し、基になるファイルも削除します。 "
"``save`` が ``True`` の場合、ファイルが削除された後にモデルの ``save()`` メ"
"ソッドが一度呼び出されます。"

msgid "File handling"
msgstr "ファイルの取り扱い"

msgid "File storage API"
msgstr "ファイルストレージ API"

msgid "Getting the default storage class"
msgstr "デフォルトのストレージクラスの取得"

msgid "Django provides convenient ways to access the default storage class:"
msgstr ""
"Djangoでは、デフォルトストレージクラスにアクセスするための便利な方法を提供し"
"ています。"

msgid "Storage instances as defined by :setting:`STORAGES`."
msgstr ":setting:`STORAGES` によって定義されたストレージのインスタンス。"

msgid ""
":class:`~django.core.files.storage.DefaultStorage` provides lazy access to "
"the default storage system as defined by ``default`` key in :setting:"
"`STORAGES`. :class:`DefaultStorage` uses :data:`~django.core.files.storage."
"storages` internally."
msgstr ""
":class:`~django.core.files.storage.DefaultStorage` は、:setting:`STORAGES` で"
"定義された ``default`` キーによって定義されたデフォルトのストレージシステムへ"
"の遅延アクセスを提供します。 :class:`DefaultStorage` は、内部的に :data:"
"`~django.core.files.storage.storages` を使用します。"

msgid ""
":data:`~django.core.files.storage.default_storage` is an instance of the :"
"class:`~django.core.files.storage.DefaultStorage`."
msgstr ""
":data:`~django.core.files.storage.default_storage` は :class:`~django.core."
"files.storage.DefaultStorage` のインスタンスです。"

msgid "Returns a class or module which implements the storage API."
msgstr "ストレージAPIを実装するクラスまたはモジュールを返します。"

msgid ""
"When called without the ``import_path`` parameter ``get_storage_class`` will "
"return the default storage system as defined by ``default`` key in :setting:"
"`STORAGES`. If ``import_path`` is provided, ``get_storage_class`` will "
"attempt to import the class or module from the given path and will return it "
"if successful. An exception will be raised if the import is unsuccessful."
msgstr ""
"``import_path`` パラメータが提供されない場合、``get_storage_class`` は :"
"setting:`STORAGES` の ``default`` キーで定義されたデフォルトのストレージシス"
"テムを返します。 ``import_path`` が提供された場合、``get_storage_class`` は指"
"定されたパスからクラスまたはモジュールをインポートしようと試み、成功した場合"
"はそれを返します。インポートが失敗した場合は例外が発生します。"

msgid ""
"The ``get_storage_class()`` function is deprecated. Use :data:`storages` "
"instead"
msgstr ""
"``get_storage_class()`` 関数は非推奨です。代わりに :data:`storages` を使用し"
"てください。"

msgid "The ``FileSystemStorage`` class"
msgstr "``FileSystemStorage`` クラス"

msgid ""
"The :class:`~django.core.files.storage.FileSystemStorage` class implements "
"basic file storage on a local filesystem. It inherits from :class:`~django."
"core.files.storage.Storage` and provides implementations for all the public "
"methods thereof."
msgstr ""
":class:`~django.core.files.storage.FileSystemStorage` クラスは、ローカルファ"
"イルシステム上での基本的なファイルストレージを実装しています。これは :class:"
"`~django.core.files.storage.Storage` から継承し、そこで定義されたすべてのパブ"
"リックメソッドに対する実装を提供します。"

msgid ""
"Absolute path to the directory that will hold the files. Defaults to the "
"value of your :setting:`MEDIA_ROOT` setting."
msgstr ""
"ファイルを格納するディレクトリの絶対パス。デフォルトは :setting:`MEDIA_ROOT` "
"設定の値です。"

msgid ""
"URL that serves the files stored at this location. Defaults to the value of "
"your :setting:`MEDIA_URL` setting."
msgstr ""
"この場所に保存されているファイルが提供される URL。デフォルトは :setting:"
"`MEDIA_URL` 設定の値です。"

msgid ""
"The file system permissions that the file will receive when it is saved. "
"Defaults to :setting:`FILE_UPLOAD_PERMISSIONS`."
msgstr ""
"保存される際にファイルが受け取るファイルシステムの権限。デフォルトは :"
"setting:`FILE_UPLOAD_PERMISSIONS` です。"

msgid ""
"The file system permissions that the directory will receive when it is "
"saved. Defaults to :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS`."
msgstr ""
"保存された際にそのディレクトリが受け取るファイルシステムの権限。デフォルト"
"は :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS` です。"

msgid ""
"The ``FileSystemStorage.delete()`` method will not raise an exception if the "
"given file name does not exist."
msgstr ""
"``FileSystemStorage.delete()`` メソッドは、指定されたファイル名が存在しない場"
"合に例外を発生させません。"

msgid ""
"Returns a :class:`~datetime.datetime` of the system's ctime, i.e. :func:`os."
"path.getctime`. On some systems (like Unix), this is the time of the last "
"metadata change, and on others (like Windows), it's the creation time of the "
"file."
msgstr ""
"システムの ctime、つまり :func:`os.path.getctime` の :class:`~datetime."
"datetime` を返します。一部のシステム(例えば Unix)では、これは最後のメタデータ"
"変更の時間ですが、他のシステム(例えば Windows)では、ファイルの作成時間です。"

msgid "The ``InMemoryStorage`` class"
msgstr "``InMemoryStorage`` クラス"

msgid ""
"The :class:`~django.core.files.storage.InMemoryStorage` class implements a "
"memory-based file storage. It has no persistence, but can be useful for "
"speeding up tests by avoiding disk access."
msgstr ""
":class:`~django.core.files.storage.InMemoryStorage` クラスはメモリベースの"
"ファイルストレージを実装しています。永続性はありませんが、ディスクアクセスを"
"避けることでテストの高速化に役立ちます。"

msgid ""
"Absolute path to the directory name assigned to files. Defaults to the value "
"of your :setting:`MEDIA_ROOT` setting."
msgstr ""
"ファイルに割り当てられたディレクトリ名の絶対パス。デフォルトは、:setting:"
"`MEDIA_ROOT` 設定値を使います。"

msgid ""
"The file system permissions assigned to files, provided for compatibility "
"with ``FileSystemStorage``. Defaults to :setting:`FILE_UPLOAD_PERMISSIONS`."
msgstr ""
"ファイルに割り当てられたファイルシステムの権限は、 ``FileSystemStorage`` との"
"互換性を提供するために用意されています。デフォルトは :setting:"
"`FILE_UPLOAD_PERMISSIONS` です。"

msgid ""
"The file system permissions assigned to directories, provided for "
"compatibility with ``FileSystemStorage``. Defaults to :setting:"
"`FILE_UPLOAD_DIRECTORY_PERMISSIONS`."
msgstr ""
"ディレクトリに割り当てられたファイルシステムの権限であり、 "
"``FileSystemStorage`` との互換性のために提供されます。デフォルトは :setting:"
"`FILE_UPLOAD_DIRECTORY_PERMISSIONS` です。"

msgid "The ``Storage`` class"
msgstr "``Storage`` クラス"

msgid ""
"The :class:`~django.core.files.storage.Storage` class provides a "
"standardized API for storing files, along with a set of default behaviors "
"that all other storage systems can inherit or override as necessary."
msgstr ""
":class:`~django.core.files.storage.Storage` クラスは、ファイルを保存するため"
"の標準化された API と、他のすべてのストレージシステムが継承または必要に応じて"
"オーバーライドできる一連のデフォルト動作を提供します。"

msgid ""
"When methods return naive ``datetime`` objects, the effective timezone used "
"will be the current value of ``os.environ['TZ']``; note that this is usually "
"set from Django's :setting:`TIME_ZONE`."
msgstr ""
"メソッドが naive な ``datetime`` オブジェクトを返す場合、実際に使用されるタイ"
"ムゾーンは ``os.environ['TZ']`` の現在の値になります。これは通常、Djangoの :"
"setting:`TIME_ZONE` から設定されることに注意してください。"

msgid ""
"Deletes the file referenced by ``name``. If deletion is not supported on the "
"target storage system this will raise ``NotImplementedError`` instead."
msgstr ""
"``name`` で参照されるファイルを削除します。対象のストレージシステムで削除がサ"
"ポートされていない場合は、代わりに ``NotImplementedError`` を発生させます。"

msgid ""
"Returns ``True`` if a file referenced by the given name already exists in "
"the storage system, or ``False`` if the name is available for a new file."
msgstr ""
"指定された名前で参照されるファイルがストレージシステムにすでに存在する場合は "
"``True`` を返し、新しいファイルに使用できる場合は ``False`` を返します。"

msgid ""
"Returns a :class:`~datetime.datetime` of the last accessed time of the file. "
"For storage systems unable to return the last accessed time this will raise :"
"exc:`NotImplementedError`."
msgstr ""
"ファイルの最終アクセス時刻を :class:`~datetime.datetime` で返します。最終アク"
"セス時刻を返すことができないストレージシステムの場合は :exc:"
"`NotImplementedError` を発生させます。"

msgid ""
"If :setting:`USE_TZ` is ``True``, returns an aware ``datetime``, otherwise "
"returns a naive ``datetime`` in the local timezone."
msgstr ""
":setting:`USE_TZ` が ``True`` の場合、意識的（aware）な ``datetime`` を返しま"
"す。それ以外の場合、ローカルタイムゾーンのナイーブ（naive）な ``datetime`` を"
"返します。"

msgid ""
"Returns an alternative filename based on the ``file_root`` and ``file_ext`` "
"parameters, an underscore plus a random 7 character alphanumeric string is "
"appended to the filename before the extension."
msgstr ""
"``file_root`` および ``file_ext`` パラメータに基づいて代替ファイル名を返しま"
"す。拡張子の前にアンダースコアとランダムな7文字の英数字文字列がファイル名に追"
"加されます。"

msgid ""
"Returns a filename based on the ``name`` parameter that's free and available "
"for new content to be written to on the target storage system."
msgstr ""
"``name`` パラメータに基づいて、ターゲットのストレージシステム上で新しいコンテ"
"ンツを書き込むために利用可能かつ空いているファイル名を返します。"

msgid ""
"The length of the filename will not exceed ``max_length``, if provided. If a "
"free unique filename cannot be found, a :exc:`SuspiciousFileOperation "
"<django.core.exceptions.SuspiciousOperation>` exception will be raised."
msgstr ""
"``max_length`` を指定した場合、ファイル名の長さはその値を超えません。自由な一"
"意のファイル名が見つからない場合、 :exc:`SuspiciousFileOperation <django."
"core.exceptions.SuspiciousOperation>` 例外が発生します。"

msgid ""
"If a file with ``name`` already exists, :meth:`get_alternative_name` is "
"called to obtain an alternative name."
msgstr ""
"``name`` という名前のファイルが既に存在する場合、代替名を取得するために :"
"meth:`get_alternative_name` が呼び出されます。"

msgid ""
"Returns a :class:`~datetime.datetime` of the creation time of the file. For "
"storage systems unable to return the creation time this will raise :exc:"
"`NotImplementedError`."
msgstr ""
"ファイルの作成時間を :class:`~datetime.datetime` で返します。作成時間を返すこ"
"とができないストレージシステムの場合、 :exc:`NotImplementedError` を発生させ"
"ます。"

msgid ""
"Returns a :class:`~datetime.datetime` of the last modified time of the file. "
"For storage systems unable to return the last modified time this will raise :"
"exc:`NotImplementedError`."
msgstr ""
"ファイルの最終更新時間の :class:`~datetime.datetime` を返します。最終更新時間"
"を返すことができないストレージシステムの場合、 :exc:`NotImplementedError` を"
"発生させます。"

msgid ""
"Returns a filename based on the ``name`` parameter that's suitable for use "
"on the target storage system."
msgstr ""
"``name`` パラメータに基づいて、ターゲットのストレージシステムで使用に適した"
"ファイル名を返します。"

msgid ""
"Validates the ``filename`` by calling :attr:`get_valid_name()` and returns a "
"filename to be passed to the :meth:`save` method."
msgstr ""
"``filename`` を :attr:`get_valid_name()` によって検証し、:meth:`save` メソッ"
"ドに渡すべきファイル名を返します。"

msgid ""
"The ``filename`` argument may include a path as returned by :attr:`FileField."
"upload_to <django.db.models.FileField.upload_to>`. In that case, the path "
"won't be passed to :attr:`get_valid_name()` but will be prepended back to "
"the resulting name."
msgstr ""
"``filename`` 引数には、 :attr:`FileField.upload_to <django.db.models."
"FileField.upload_to>` によって返されたパスを含むことができます。その場合、パ"
"スは :attr:`get_valid_name()` に渡されることはありませんが、結果として得られ"
"た名前の前に再び追加されます。"

msgid ""
"The default implementation uses :mod:`os.path` operations. Override this "
"method if that's not appropriate for your storage."
msgstr ""
"デフォルトの実装では :mod:`os.path` 操作を使用しています。この方法があなたの"
"ストレージに適していない場合は、このメソッドをオーバーライドしてください。"

msgid ""
"Lists the contents of the specified path, returning a 2-tuple of lists; the "
"first item being directories, the second item being files. For storage "
"systems that aren't able to provide such a listing, this will raise a "
"``NotImplementedError`` instead."
msgstr ""
"指定されたパスの内容をリストアップし、2つのリストからなるタプルを返します。最"
"初のアイテムはディレクトリで、2番目のアイテムはファイルです。このようなリスト"
"を提供できないストレージシステムでは、代わりに ``NotImplementedError`` を発生"
"させます。"

msgid ""
"Opens the file given by ``name``. Note that although the returned file is "
"guaranteed to be a ``File`` object, it might actually be some subclass. In "
"the case of remote file storage this means that reading/writing could be "
"quite slow, so be warned."
msgstr ""
"``name`` で指定されたファイルを開きます。返されるファイルは必ず ``File`` オブ"
"ジェクトである保証がありますが、実際にはサブクラスである可能性があります。リ"
"モートファイルストレージの場合、読み書きがかなり遅いかもしれないので注意して"
"ください。"

msgid ""
"The local filesystem path where the file can be opened using Python's "
"standard ``open()``. For storage systems that aren't accessible from the "
"local filesystem, this will raise ``NotImplementedError`` instead."
msgstr ""
"ファイルがPythonの標準 ``open()`` を使って開けるローカルファイルシステムのパ"
"ス。ローカルファイルシステムからアクセスできないストレージシステムの場合、代"
"わりに ``NotImplementedError`` を発生させます。"

msgid ""
"Saves a new file using the storage system, preferably with the name "
"specified. If there already exists a file with this name ``name``, the "
"storage system may modify the filename as necessary to get a unique name. "
"The actual name of the stored file will be returned."
msgstr ""
"ストレージシステムを使用して新しいファイルを保存します。すでに ``name`` とい"
"う名前のファイルが存在する場合、ストレージシステムは一意な名前を得るために必"
"要に応じてファイル名を変更することがあります。保存されたファイルの実際の名前"
"が返されます。"

msgid ""
"The ``max_length`` argument is passed along to :meth:`get_available_name`."
msgstr "``max_length`` 引数は :meth:`get_available_name` に渡されます。"

msgid ""
"The ``content`` argument must be an instance of :class:`django.core.files."
"File` or a file-like object that can be wrapped in ``File``."
msgstr ""
"``content`` 引数は、:class:`django.core.files.File` のインスタンス、または "
"``File`` でラップできるファイルライクオブジェクトでなければなりません。"

msgid ""
"Returns the total size, in bytes, of the file referenced by ``name``. For "
"storage systems that aren't able to return the file size this will raise "
"``NotImplementedError`` instead."
msgstr ""
"``name`` で参照されるファイルの総サイズ(バイト単位)を返します。ファイルサイズ"
"を返せないストレージシステムの場合は、代わりに ``NotImplementedError`` を発生"
"させます。"

msgid ""
"Returns the URL where the contents of the file referenced by ``name`` can be "
"accessed. For storage systems that don't support access by URL this will "
"raise ``NotImplementedError`` instead."
msgstr ""
"``name`` で参照されているファイルの内容にアクセスできるURLを返します。URLによ"
"るアクセスをサポートしていないストレージシステムの場合は、代わりに "
"``NotImplementedError`` を発生させます。"

msgid "Uploaded Files and Upload Handlers"
msgstr "アップロードファイルとアップロードハンドラ"

msgid "Uploaded files"
msgstr "アップロードファイル"

msgid ""
"During file uploads, the actual file data is stored in :attr:`request.FILES "
"<django.http.HttpRequest.FILES>`. Each entry in this dictionary is an "
"``UploadedFile`` object (or a subclass) -- a wrapper around an uploaded "
"file. You'll usually use one of these methods to access the uploaded content:"
msgstr ""
"ファイルアップロード中、実際のファイルデータは :attr:`request.FILES <django."
"http.HttpRequest.FILES>` に保存されます。この辞書の各エントリーは "
"``UploadedFile`` オブジェクト(またはそのサブクラス)です。これはアップロードさ"
"れたファイルのラッパーです。アップロードされたコンテンツにアクセスするため"
"に、通常、以下のメソッドのいずれかを使用します:"

msgid ""
"Read the entire uploaded data from the file. Be careful with this method: if "
"the uploaded file is huge it can overwhelm your system if you try to read it "
"into memory. You'll probably want to use ``chunks()`` instead; see below."
msgstr ""
"アップロードされたデータ全体をファイルから読み込む。このメソッドには注意が必"
"要です。アップロードされたファイルが巨大な場合、それをメモリに読み込もうとす"
"るとシステムを圧迫する可能性があります。おそらく代わりに ``chunks()`` を使う"
"ことになるでしょう。"

msgid ""
"Returns ``True`` if the uploaded file is big enough to require reading in "
"multiple chunks. By default this will be any file larger than 2.5 megabytes, "
"but that's configurable; see below."
msgstr ""
"アップロードされたファイルが、複数のチャンクに分けて読み込む必要があるほど大"
"きい場合に ``True`` を返します。デフォルトでは2.5MB以上のファイルですが、設定"
"可能です。"

msgid ""
"A generator returning chunks of the file. If ``multiple_chunks()`` is "
"``True``, you should use this method in a loop instead of ``read()``."
msgstr ""
"ファイルのチャンクを返すジェネレータです。``multiple_chunks()`` が ``True`` "
"の場合、 ``read()`` の代わりにこのメソッドをループで使用すべきです。"

msgid ""
"In practice, it's often easiest to use ``chunks()`` all the time. Looping "
"over ``chunks()`` instead of using ``read()`` ensures that large files don't "
"overwhelm your system's memory."
msgstr ""
"実際には、常に ``chunks()`` を使用するのが最も簡単です。 ``read()`` を使用す"
"る代わりに ``chunks()`` をループ処理することで、大きなファイルがシステムのメ"
"モリを圧迫しないようにできます。"

msgid "Here are some useful attributes of ``UploadedFile``:"
msgstr "``UploadedFile`` の有用な属性は次の通りです:"

msgid "The name of the uploaded file (e.g. ``my_file.txt``)."
msgstr "アップロードされたファイルの名前 (例: ``my_file.txt``)。"

msgid "The size, in bytes, of the uploaded file."
msgstr "アップロードされたファイルのサイズ（バイト単位）。"

msgid ""
"The content-type header uploaded with the file (e.g. :mimetype:`text/plain` "
"or :mimetype:`application/pdf`). Like any data supplied by the user, you "
"shouldn't trust that the uploaded file is actually this type. You'll still "
"need to validate that the file contains the content that the content-type "
"header claims -- \"trust but verify.\""
msgstr ""
"ファイルと共にアップロードされるコンテンツタイプのヘッダ (例: :mimetype:"
"`text/plain` や :mimetype:`application/pdf`)。ユーザーから提供されるデータの"
"ように、アップロードされたファイルが実際にこのタイプであると信頼すべきではあ"
"りません。依然として、ファイルがコンテンツタイプヘッダが示すコンテンツを含ん"
"でいることを検証する必要があります。\"信頼するが検証せよ\" です。"

msgid ""
"A dictionary containing extra parameters passed to the ``content-type`` "
"header. This is typically provided by services, such as Google App Engine, "
"that intercept and handle file uploads on your behalf. As a result your "
"handler may not receive the uploaded file content, but instead a URL or "
"other pointer to the file (see :rfc:`RFC 2388 <2388#section-5.3>`)."
msgstr ""
"``content-type`` ヘッダーに渡される追加のパラメータを含む辞書です。通常、"
"Google App Engine などのサービスがファイルのアップロードを取り扱っている場合"
"に提供されます。その結果、ハンドラはアップロードされたファイル内容を受信しな"
"いかもしれず、代わりにファイルへの URL や他のポインターを受け取ります (:rfc:"
"`RFC 2388 <2388#section-5.3>` を参照)。"

msgid ""
"For :mimetype:`text/*` content-types, the character set (i.e. ``utf8``) "
"supplied by the browser. Again, \"trust but verify\" is the best policy here."
msgstr ""
":mimetype:`text/*` コンテンツタイプについては、ブラウザが提供する文字セット"
"(例えば ``utf8``)です。ここでも、\"信頼するが検証せよ\" が最良の方針です。"

msgid ""
"Like regular Python files, you can read the file line-by-line by iterating "
"over the uploaded file::"
msgstr ""
"通常の Python ファイルのように、アップロードされたファイルをイテレートするこ"
"とで、ファイルを一行ずつ読むことができます:"

msgid ""
"Lines are split using :pep:`universal newlines <278>`. The following are "
"recognized as ending a line: the Unix end-of-line convention ``'\\n'``, the "
"Windows convention ``'\\r\\n'``, and the old Macintosh convention ``'\\r'``."
msgstr ""
"行は :pep:`ユニバーサル改行 <278>` によって分割されます。以下のものが行の終わ"
"りとして認識されます: Unix の改行規則 ``'\\n'``、Windowsの改行規則 "
"``'\\r\\n'``、古い Macintosh の改行規則 ``'\\r'``。"

msgid "Subclasses of ``UploadedFile`` include:"
msgstr "``UploadedFile`` のサブクラスには以下が含まれます:"

msgid ""
"A file uploaded to a temporary location (i.e. stream-to-disk). This class is "
"used by the :class:`~django.core.files.uploadhandler."
"TemporaryFileUploadHandler`. In addition to the methods from :class:"
"`UploadedFile`, it has one additional method:"
msgstr ""
"一時的な場所にアップロードされたファイル (つまり、stream-to-disk)。このクラス"
"は、 :class:`~django.core.files.uploadhandler.TemporaryFileUploadHandler` に"
"よって使用されます。 :class:`UploadedFile` のメソッドに加えて、1つの追加メ"
"ソッドを持っています:"

msgid "Returns the full path to the temporary uploaded file."
msgstr "一時アップロードされたファイルの完全なパスを返します。"

msgid ""
"A file uploaded into memory (i.e. stream-to-memory). This class is used by "
"the :class:`~django.core.files.uploadhandler.MemoryFileUploadHandler`."
msgstr ""
"メモリへのアップロードされたファイル(つまり、stream-to-memory)。このクラス"
"は :class:`~django.core.files.uploadhandler.MemoryFileUploadHandler` によって"
"使用されます。"

msgid "Built-in upload handlers"
msgstr "ビルトインのアップロードハンドラ"

msgid ""
"Together the :class:`MemoryFileUploadHandler` and :class:"
"`TemporaryFileUploadHandler` provide Django's default file upload behavior "
"of reading small files into memory and large ones onto disk. They are "
"located in ``django.core.files.uploadhandler``."
msgstr ""
":class:`MemoryFileUploadHandler` と :class:`TemporaryFileUploadHandler` は、"
"小さなファイルをメモリに読み込み、大きなファイルをディスクに保存するDjangoの"
"デフォルトのファイルアップロードの動作を提供します。これらは ``django.core."
"files.uploadhandler`` に位置しています。"

msgid ""
"File upload handler to stream uploads into memory (used for small files)."
msgstr ""
"小さいファイル用にアップロードをメモリにストリームするためのファイルアップ"
"ロードハンドラ。"

msgid ""
"Upload handler that streams data into a temporary file using :class:`~django."
"core.files.uploadedfile.TemporaryUploadedFile`."
msgstr ""
":class:`~django.core.files.uploadedfile.TemporaryUploadedFile` を使ってデータ"
"を一時ファイルにストリームするアップロードハンドラ。"

msgid "Writing custom upload handlers"
msgstr "アップロードハンドラをカスタマイズする"

msgid ""
"All file upload handlers should be subclasses of ``django.core.files."
"uploadhandler.FileUploadHandler``. You can define upload handlers wherever "
"you wish."
msgstr ""
"全てのファイルアップロードハンドラは、``django.core.files.uploadhandler."
"FileUploadHandler`` のサブクラスとなります。アップロードハンドラはいつでも好"
"きなときに定義できます。"

msgid "Required methods"
msgstr "必要なメソッド"

msgid "Custom file upload handlers **must** define the following methods:"
msgstr ""
"カスタマイズされたファイルアップロードハンドラでは、以下のメソッドを定義する "
"**必要があります**。"

msgid "Receives a \"chunk\" of data from the file upload."
msgstr "ファイルアップロードから、データの \"chunk\" を受け取ります。"

msgid "``raw_data`` is a bytestring containing the uploaded data."
msgstr "``raw_data`` はアップロードされたデータを含むバイト文字列です。"

msgid ""
"``start`` is the position in the file where this ``raw_data`` chunk begins."
msgstr ""
"``start`` はこの ``raw_data`` チャンクが始まる、ファイル内での位置です。"

msgid ""
"The data you return will get fed into the subsequent upload handlers' "
"``receive_data_chunk`` methods. In this way, one handler can be a \"filter\" "
"for other handlers."
msgstr ""
"あなたが返すデータは、その後のアップロードハンドラの ``receive_data_chunk`` "
"メソッドに渡されます。 この方法で、1 つのハンドラは他のハンドラの「フィルタ」"
"になることができます。"

msgid ""
"Return ``None`` from ``receive_data_chunk`` to short-circuit remaining "
"upload handlers from getting this chunk. This is useful if you're storing "
"the uploaded data yourself and don't want future handlers to store a copy of "
"the data."
msgstr ""
"``receive_data_chunk`` から ``None`` を返し、残りのアップロードハンドラがこの"
"チャンクを取得するのを短絡します。 これは、アップロードしたデータを自分で保存"
"しておき、将来のハンドラでデータのコピーを保存したくない場合に便利です。"

msgid ""
"If you raise a ``StopUpload`` or a ``SkipFile`` exception, the upload will "
"abort or the file will be completely skipped."
msgstr ""
"``StopUpload`` または ``SkipFile`` 例外を発生させると、アップロードが中止され"
"るか、ファイルが完全にスキップされます。"

msgid "Called when a file has finished uploading."
msgstr "ファイルのアップロードが完了したときに呼ばれます。"

msgid ""
"The handler should return an ``UploadedFile`` object that will be stored in "
"``request.FILES``. Handlers may also return ``None`` to indicate that the "
"``UploadedFile`` object should come from subsequent upload handlers."
msgstr ""
"ハンドラーは ``request.FILES`` に格納される ``UploadedFile`` オブジェクトを返"
"すべきです。またハンドラーは、``UploadedFile`` オブジェクトが後続のアップロー"
"ドハンドラーから来るべきであることを示すために ``None`` を返すこともできま"
"す。"

msgid "Optional methods"
msgstr "省略可能なメソッド"

msgid ""
"Custom upload handlers may also define any of the following optional methods "
"or attributes:"
msgstr ""
"独自のアップロードハンドラは、以下の省略可能なメソッドや属性を定義できます:"

msgid ""
"Size, in bytes, of the \"chunks\" Django should store into memory and feed "
"into the handler. That is, this attribute controls the size of chunks fed "
"into ``FileUploadHandler.receive_data_chunk``."
msgstr ""
"Django がメモリに格納してハンドラに送り込む \"chunks\" のサイズです (byte で"
"表されます)。 つまり、この属性は ``FileUploadHandler.receive_data_chunk`` に"
"渡されるチャンクのサイズをコントロールします。"

msgid ""
"For maximum performance the chunk sizes should be divisible by ``4`` and "
"should not exceed 2 GB (2\\ :sup:`31` bytes) in size. When there are "
"multiple chunk sizes provided by multiple handlers, Django will use the "
"smallest chunk size defined by any handler."
msgstr ""
"パフォーマンスを最大限にするために、チャンクサイズは ``4`` で割り切れる必要が"
"あり、2 GB (2\\ :sup:`31` bytes) を超えてはいけません。 複数のハンドラによっ"
"てチャンクサイズが複数ある場合、Django はハンドラで定義された最小のチャンクサ"
"イズを使用します。"

msgid "The default is 64*2\\ :sup:`10` bytes, or 64 KB."
msgstr "デフォルトは 64*2\\ :sup:`10` bytes、つまり 64 KB です。"

msgid ""
"Callback signaling that a new file upload is starting. This is called before "
"any data has been fed to any upload handlers."
msgstr ""
"新しいファイルのアップロード開始を通知するコールバックです。 アップロードハン"
"ドラにデータが送られる前に呼び出されます。"

msgid "``field_name`` is a string name of the file ``<input>`` field."
msgstr "``field_name`` は、ファイル ``<input>`` フィールドの文字列名です。"

msgid "``file_name`` is the filename provided by the browser."
msgstr "``file_name`` はブラウザによって提供されるファイル名です。"

msgid ""
"``content_type`` is the MIME type provided by the browser -- E.g. ``'image/"
"jpeg'``."
msgstr ""
"``content_type`` は、ブラウザによって提供される MIME タイプです -- 例: "
"``'image/jpeg'``。"

msgid ""
"``content_length`` is the length of the image given by the browser. "
"Sometimes this won't be provided and will be ``None``."
msgstr ""
"``content_length`` は、ブラウザによって与えられる画像の長さです。提供されず"
"に ``None`` となることがあります。"

msgid ""
"``charset`` is the character set (i.e. ``utf8``) given by the browser. Like "
"``content_length``, this sometimes won't be provided."
msgstr ""
"``charset`` は、ブラウザによって与えられる文字セットです (例: ``utf8``)。"
"``content_length`` のように、提供されないことがあります。"

msgid ""
"``content_type_extra`` is extra information about the file from the "
"``content-type`` header. See :attr:`UploadedFile.content_type_extra <django."
"core.files.uploadedfile.UploadedFile.content_type_extra>`."
msgstr ""
"``content_type_extra`` は、``content-type`` からの、ファイルについての追加情"
"報です。:attr:`UploadedFile.content_type_extra <django.core.files."
"uploadedfile.UploadedFile.content_type_extra>` を参照してください。"

msgid ""
"This method may raise a ``StopFutureHandlers`` exception to prevent future "
"handlers from handling this file."
msgstr ""
"このメソッドは、将来のハンドラがこのファイルをハンドリングするのを防ぐため、"
"``StopFutureHandlers`` 例外を投げます。"

msgid "Callback signaling that the entire upload (all files) has completed."
msgstr ""
"全てのアップロード (全てのファイル)  が完了したことを通知するコールバックで"
"す。"

msgid ""
"Callback signaling that the upload was interrupted, e.g. when the user "
"closed their browser during file upload."
msgstr ""
"アップロードが中断されたことを通知するコールバック。例えば、ユーザーがファイ"
"ルアップロード中にブラウザを閉じたときなど。"

msgid ""
"Allows the handler to completely override the parsing of the raw HTTP input."
msgstr ""
"ハンドラに対して、生の HTTP インプットのパースを完全にオーバーライドできるよ"
"うにします。"

msgid "``input_data`` is a file-like object that supports ``read()``-ing."
msgstr ""
"``input_data`` は、``read()`` をサポートするファイルのようなオブジェクトで"
"す。"

msgid "``META`` is the same object as ``request.META``."
msgstr "``META`` は、``request.META`` と同じオブジェクトです。"

msgid ""
"``content_length`` is the length of the data in ``input_data``. Don't read "
"more than ``content_length`` bytes from ``input_data``."
msgstr ""
"``content_length`` は、``input_data`` 内のデータの長さです。``input_data`` か"
"ら ``content_length`` バイト以上を読み出さないでください。"

msgid "``boundary`` is the MIME boundary for this request."
msgstr "``boundary`` は、このリクエストの MIME boundary です。"

msgid "``encoding`` is the encoding of the request."
msgstr "``encoding`` は、リクエストのエンコーディングです。"

msgid ""
"Return ``None`` if you want upload handling to continue, or a tuple of "
"``(POST, FILES)`` if you want to return the new data structures suitable for "
"the request directly."
msgstr ""
"アップロードハンドリングを継続したいとき、``None`` を返します。もしくはリクエ"
"ストに適した新しいデータ構造を直接返したいとき、 ``(POST, FILES)`` のタプルを"
"返します。"

msgid "The Forms API"
msgstr "フォーム API"

msgid "About this document"
msgstr "このドキュメントについて"

msgid ""
"This document covers the gritty details of Django's forms API. You should "
"read the :doc:`introduction to working with forms </topics/forms/index>` "
"first."
msgstr ""
"このドキュメントでは、Django のフォーム API の詳細について説明します。このド"
"キュメントを読む前に :doc:`フォームについての概要 </topics/forms/index>` を読"
"むことをおすすめします。"

msgid "Bound and unbound forms"
msgstr ""
"バインドされた (bound) フォームとバインドされていない (unbound) フォーム"

msgid ""
"A :class:`Form` instance is either **bound** to a set of data, or "
"**unbound**."
msgstr ""
":class:`Form` のインスタンスには、データセットに **バインドされている (bound "
"な)** ものと **バインドされていない (unbound な)** ものがあります。"

msgid ""
"If it's **bound** to a set of data, it's capable of validating that data and "
"rendering the form as HTML with the data displayed in the HTML."
msgstr ""
"データセットに **バインドされた** ``Form`` インスタンスであれば、そのデータを"
"バリデーションしたり、HTMLとしてフォームをレンダリングし、HTMLにデータを表示"
"したりすることができます。"

msgid ""
"If it's **unbound**, it cannot do validation (because there's no data to "
"validate!), but it can still render the blank form as HTML."
msgstr ""
"データセットに **バインドされていない** ``Form`` インスタンスでは、（検証する"
"データがないので）データをバリデーションすることはできませんが、空のフォーム"
"をHTMLとしてレンダリングできます。"

msgid "To create an unbound :class:`Form` instance, instantiate the class:"
msgstr ""
"バインドされていない :class:`Form` のインスタンスを作成するには、クラスの初期"
"化を行います。"

msgid ""
"To bind data to a form, pass the data as a dictionary as the first parameter "
"to your :class:`Form` class constructor:"
msgstr ""
"フォームにデータをバインドするには、辞書型のデータを :class:`Form` クラスのコ"
"ンストラクタの最初のパラメータとして渡します。"

msgid ""
"In this dictionary, the keys are the field names, which correspond to the "
"attributes in your :class:`Form` class. The values are the data you're "
"trying to validate. These will usually be strings, but there's no "
"requirement that they be strings; the type of data you pass depends on the :"
"class:`Field`, as we'll see in a moment."
msgstr ""
"この辞書では、キーは :class:`Form` クラスの属性に対応するフィールド名を、値に"
"は検証したいデータを指定します。これらは通常文字列ですが、必ずしも文字列型で"
"なくてもかまいません。後ほど解説しますが、渡すデータの型は、 :class:`Field` "
"に依存します。"

msgid ""
"If you need to distinguish between bound and unbound form instances at "
"runtime, check the value of the form's :attr:`~Form.is_bound` attribute:"
msgstr ""
"実行時にバインドされたフォームインスタンスと、されていないフォームインスタン"
"スを区別する必要があるときは、フォームの :attr:`~Form.is_bound` 属性の値を確"
"認してください。"

msgid ""
"Note that passing an empty dictionary creates a *bound* form with empty data:"
msgstr ""
"空の辞書を渡すと、データが空の *バインドされた* フォームが作成されることに注"
"意してください。"

msgid ""
"If you have a bound :class:`Form` instance and want to change the data "
"somehow, or if you want to bind an unbound :class:`Form` instance to some "
"data, create another :class:`Form` instance. There is no way to change data "
"in a :class:`Form` instance. Once a :class:`Form` instance has been created, "
"you should consider its data immutable, whether it has data or not."
msgstr ""
":class:`Form` インスタンス内のデータを変更する方法はありません。 一度作成され"
"た :class:`Form` インスタンスのデータは、その有無に関わらず変更不可能であると"
"考えてください。もし :class:`Form` インスタンスにバインドされたデータを変更し"
"たい場合や、バインドされていない :class:`Form` インスタンスをデータにバインド"
"したい場合は、別の :class:`Form` インスタンスを作成してください。 "

msgid "Using forms to validate data"
msgstr "フォームをデータの検証に使用する"

msgid ""
"Implement a ``clean()`` method on your ``Form`` when you must add custom "
"validation for fields that are interdependent. See :ref:`validating-fields-"
"with-clean` for example usage."
msgstr ""
"相互に関連のあるフィールドに対して独自のバリデーションを追加する必要がある場"
"合、``Form`` 上で ``clean()`` を実装してください。具体的な使用方法は :ref:"
"`validating-fields-with-clean` を参照してください。"

msgid ""
"The primary task of a :class:`Form` object is to validate data. With a "
"bound :class:`Form` instance, call the :meth:`~Form.is_valid` method to run "
"validation and return a boolean designating whether the data was valid:"
msgstr ""
":class:`Form` オブジェクトの主なタスクは、データの検証です。バインドされた :"
"class:`Form` インスタンスでは、 :meth:`~Form.is_valid` メソッドを呼び出して検"
"証を実行し、データが有効であるかどうかを示すブール値を返します。"

msgid ""
"Let's try with some invalid data. In this case, ``subject`` is blank (an "
"error, because all fields are required by default) and ``sender`` is not a "
"valid email address:"
msgstr ""
"まずは無効なデータで試してみましょう。以下のケースでは、 ``subject`` は空白で"
"（デフォルトではすべてのフィールドが必須なのでエラーになります）、 "
"``sender`` が有効なメールアドレスではありません。"

msgid ""
"Access the :attr:`~Form.errors` attribute to get a dictionary of error "
"messages:"
msgstr ""
":attr:`~Form.errors` 属性にアクセスして、エラーメッセージの辞書を取得します。"

msgid ""
"In this dictionary, the keys are the field names, and the values are lists "
"of strings representing the error messages. The error messages are stored in "
"lists because a field can have multiple error messages."
msgstr ""
"この辞書では、キーはフィールド名であり、値はエラーメッセージを表す文字列のリ"
"ストです。エラーメッセージがリストに格納されているのは、1つのフィールドに複数"
"のエラーメッセージが出力される場合があるからです。"

msgid ""
"You can access :attr:`~Form.errors` without having to call :meth:`~Form."
"is_valid` first. The form's data will be validated the first time either you "
"call :meth:`~Form.is_valid` or access :attr:`~Form.errors`."
msgstr ""
":meth:`~Form.is_valid` を呼び出す前にも、 :attr:`~Form.errors` にアクセスでき"
"ます。フォームのデータは、最初に :meth:`~Form.is_valid` を呼び出すか、 :attr:"
"`~Form.errors` にアクセスした時点で検証されます。"

msgid ""
"The validation routines will only get called once, regardless of how many "
"times you access :attr:`~Form.errors` or call :meth:`~Form.is_valid`. This "
"means that if validation has side effects, those side effects will only be "
"triggered once."
msgstr ""
"バリデーションのルーチンは、:attr:`~Form.errors` や call :meth:`~Form."
"is_valid` を何度呼び出したとしても、最初の一度だけ呼び出されます。これは、バ"
"リデーションが副作用を持っている場合、その副作用は一度しか発生しないというこ"
"とを意味します。"

msgid ""
"Returns a ``dict`` that maps fields to their original ``ValidationError`` "
"instances."
msgstr ""
"フィールドとオリジナルの ``ValidationError`` インスタンスをマッピングする "
"``dict`` を返します。"

msgid ""
"Use this method anytime you need to identify an error by its ``code``. This "
"enables things like rewriting the error's message or writing custom logic in "
"a view when a given error is present. It can also be used to serialize the "
"errors in a custom format (e.g. XML); for instance, :meth:`~Form.errors."
"as_json()` relies on ``as_data()``."
msgstr ""
"``code`` によりエラーを特定する必要があるときはこのメソッドを使用してくださ"
"い。これによって、エラーメッセージの上書きや、エラーが存在するときのビューで"
"の独自のロジックが作成できるようになります。独自のフォーマット (たとえば "
"XML) でシリアライズするためにも使えます。たとえば、:meth:`~Form.errors."
"as_json()` は ``as_data()`` を利用しています。"

msgid ""
"The need for the ``as_data()`` method is due to backwards compatibility. "
"Previously ``ValidationError`` instances were lost as soon as their "
"**rendered** error messages were added to the ``Form.errors`` dictionary. "
"Ideally ``Form.errors`` would have stored ``ValidationError`` instances and "
"methods with an ``as_`` prefix could render them, but it had to be done the "
"other way around in order not to break code that expects rendered error "
"messages in ``Form.errors``."
msgstr ""
"``as_data()`` の必要性は、後方互換性に起因します。以前は ``ValidationError`` "
"インスタンスは **レンダリングされた** エラーメッセージが ``Form.errors`` ディ"
"クショナリに追加されると同時に消失していました。できれば ``Form.errors`` が "
"``ValidationError`` インスタンスを保持し、``as_`` プレフィクスを伴うメソッド"
"がエラーをレンダリングできるのが理想でしたが、``Form.errors`` 内のレンダリン"
"グされたエラーメッセージを受け取る可能性があるコードを壊さないために、逆の実"
"装にしなくてはなりませんでした。"

msgid "Returns the errors serialized as JSON."
msgstr "エラーをJSONとしてシリアライズしたものを返します。"

msgid ""
"By default, ``as_json()`` does not escape its output. If you are using it "
"for something like AJAX requests to a form view where the client interprets "
"the response and inserts errors into the page, you'll want to be sure to "
"escape the results on the client-side to avoid the possibility of a cross-"
"site scripting attack. You can do this in JavaScript with ``element."
"textContent = errorText`` or with jQuery's ``$(el).text(errorText)`` (rather "
"than its ``.html()`` function)."
msgstr ""
"デフォルトでは、``as_json()`` は出力をエスケープしません。フォームビューへの"
"AJAXリクエストなど、クライアントがレスポンスを解釈しエラーをページに挿入する"
"場合には、クロスサイトスクリプティング攻撃の可能性を避けるために、クライアン"
"ト側で結果をエスケープする必要があります。これはJavaScriptで、 ``element."
"textContent = errorText`` 、またはjQueryの ``$(el).text(errorText)`` (``."
"html()`` 関数ではなく) を使用することで実行できます。"

msgid ""
"If for some reason you don't want to use client-side escaping, you can also "
"set ``escape_html=True`` and error messages will be escaped so you can use "
"them directly in HTML."
msgstr ""
"何らかの理由でクライアントサイドのエスケープを使いたくない場合は、 "
"``escape_html=True`` を設定すればエラーメッセージがエスケープされ、HTMLで直接"
"使用できるようになります。"

msgid ""
"Returns the errors as a dictionary suitable for serializing to JSON. :meth:"
"`Form.errors.as_json()` returns serialized JSON, while this returns the "
"error data before it's serialized."
msgstr ""
"JSON にシリアライズできる形式のエラーを辞書として返します。 :meth:`Form."
"errors.as_json()` はシリアライズされた JSON を返しますが、これはシリアライズ"
"される前のエラーデータを返します。"

msgid ""
"The ``escape_html`` parameter behaves as described in :meth:`Form.errors."
"as_json()`."
msgstr ""
"``escape_html`` パラメータは、 :meth:`Form.errors.as_json()` で説明されている"
"ように動作します。"

msgid ""
"This method allows adding errors to specific fields from within the ``Form."
"clean()`` method, or from outside the form altogether; for instance from a "
"view."
msgstr ""
"このメソッドは、``Form.clean()`` メソッド内またはフォーム全体の外部から特定の"
"フィールドにエラーを追加することを可能にします。たとえば、ビューから追加する"
"こともできます。"

msgid ""
"The ``field`` argument is the name of the field to which the errors should "
"be added. If its value is ``None`` the error will be treated as a non-field "
"error as returned by :meth:`Form.non_field_errors() <django.forms.Form."
"non_field_errors>`."
msgstr ""
"``field`` 引数にはエラーを追加したいフィールド名を指定します。この値が "
"``None`` の場合、 :meth:`Form.non_field_errors() <django.forms.Form."
"non_field_errors>` によって返されるようなフィールドによらないエラーとして扱わ"
"れます。"

msgid ""
"The ``error`` argument can be a string, or preferably an instance of "
"``ValidationError``. See :ref:`raising-validation-error` for best practices "
"when defining form errors."
msgstr ""
"フォームエラーを定義するときのベストプラクティスとして、 ``error`` 引数は文字"
"列もしくは、できれば ``ValidationError`` のインスタンスを指定します。フォーム"
"エラーの定義時のベストプラクティスについては、 :ref:`raising-validation-"
"error` を参照してください。"

msgid ""
"Note that ``Form.add_error()`` automatically removes the relevant field from "
"``cleaned_data``."
msgstr ""
"``Form.add_error()`` は ``cleaned_data`` からフィールドを自動的に削除してしま"
"うことに注意してください。"

msgid ""
"This method returns a boolean designating whether a field has an error with "
"a specific error ``code``. If ``code`` is ``None``, it will return ``True`` "
"if the field contains any errors at all."
msgstr ""
"このメソッドは指定したフィールドが特定の ``code`` のエラーを持つか否かを真偽"
"値で返します。``code`` が ``None`` の場合、そのフィールドにエラーが一つもない"
"場合に ``True`` を返します。"

msgid ""
"To check for non-field errors use :data:`~django.core.exceptions."
"NON_FIELD_ERRORS` as the ``field`` parameter."
msgstr ""
"フィールドによらないエラー (non-field errors) の有無を確認したい場合は、"
"``field`` 引数に :data:`~django.core.exceptions.NON_FIELD_ERRORS` を渡しま"
"す。"

msgid ""
"This method returns the list of errors from :attr:`Form.errors <django.forms."
"Form.errors>`  that aren't associated with a particular field. This includes "
"``ValidationError``\\s that are raised in :meth:`Form.clean() <django.forms."
"Form.clean>` and errors added using :meth:`Form.add_error(None, \"...\") "
"<django.forms.Form.add_error>`."
msgstr ""
"このメソッドは、特定のフィールドに関連付けられていない :attr:`Form.errors "
"<django.forms.Form.errors>` からのエラーリストを返します。これには、:meth:"
"`Form.clean() <django.forms.Form.clean>` で発生した ``ValidationError`` や、:"
"meth:`Form.add_error(None, \"...\") <django.forms.Form.add_error>` を使用して"
"追加されたエラーが含まれます。"

msgid "Behavior of unbound forms"
msgstr "バインドされていないフォームの動作"

msgid ""
"It's meaningless to validate a form with no data, but, for the record, "
"here's what happens with unbound forms:"
msgstr ""
"フォームにデータがない場合、フォームの検証は意味をなしません。一応記載してお"
"くと、バインドされていないフォームでは次のような結果になります。"

msgid "Initial form values"
msgstr "フォームの初期値"

msgid ""
"Use :attr:`~Form.initial` to declare the initial value of form fields at "
"runtime. For example, you might want to fill in a ``username`` field with "
"the username of the current session."
msgstr ""
":attr:`~Form.initial` を使うことで、実行時にフォームの初期値を設定できます。"
"たとえば、 ``username`` フォームを埋めるのに、現在のセッションの username を"
"使うことができます。"

msgid ""
"To accomplish this, use the :attr:`~Form.initial` argument to a :class:"
"`Form`. This argument, if given, should be a dictionary mapping field names "
"to initial values. Only include the fields for which you're specifying an "
"initial value; it's not necessary to include every field in your form. For "
"example:"
msgstr ""
"これを実現するには、 :class:`Form` の初期化時に :attr:`~Form.initial` 引数を"
"使用します。この引数には、フィールド名と初期値のマッピングした辞書を指定しま"
"す。初期値を指定するフィールドだけを含めればよく、フォーム内のすべてのフィー"
"ルドを含める必要はありません。以下に例を示します。"

msgid ""
"These values are only displayed for unbound forms, and they're not used as "
"fallback values if a particular value isn't provided."
msgstr ""
"これらの値はバインドされていないフォームに表示されるだけです。値が入力されな"
"かった場合の、フォールバックされる値として使われることはありません。"

msgid ""
"If a :class:`~django.forms.Field` defines :attr:`~Field.initial` *and* you "
"include :attr:`~Form.initial` when instantiating the ``Form``, then the "
"latter ``initial`` will have precedence. In this example, ``initial`` is "
"provided both at the field level and at the form instance level, and the "
"latter gets precedence:"
msgstr ""
":class:`~django.forms.Field` において :class:`~Field.initial` を定義 *した上"
"で* ``Form`` をインスタンス化するときに :attr:`~Form.initial` を指定した場"
"合、後者の ``initial`` が優先されます。以下の例では、フィールドレベルとフォー"
"ムインスタンスレベルの両方で ``initial`` が提供され、後者が優先されます。"

msgid ""
"Returns the initial data for a form field. It retrieves the data from :attr:"
"`Form.initial` if present, otherwise trying :attr:`Field.initial`. Callable "
"values are evaluated."
msgstr ""
"フォームフィールドの初期データを返します。データは、存在する場合は :attr:"
"`Form.initial` から取得し、それ以外の場合は :attr:`Field.initial` を参照しま"
"す。呼び出し可能な値は評価されます。"

msgid ""
"It is recommended to use :attr:`BoundField.initial` over :meth:`~Form."
"get_initial_for_field()` because ``BoundField.initial`` has a simpler "
"interface. Also, unlike :meth:`~Form.get_initial_for_field()`, :attr:"
"`BoundField.initial` caches its values. This is useful especially when "
"dealing with callables whose return values can change (e.g. ``datetime.now`` "
"or ``uuid.uuid4``):"
msgstr ""
"``BoundField.initial`` はよりシンプルなインターフェースを持っているため、:"
"meth:`~Form.get_initial_for_field()` よりも :attr:`BoundField.initial` の使用"
"が推奨されます。また、:meth:`~Form.get_initial_for_field()` とは異なり、:"
"attr:`BoundField.initial` はその値をキャッシュします。これは、戻り値が変わる"
"可能性がある呼び出し可能オブジェクト (例: ``datetime.now`` や ``uuid."
"uuid4``) を扱う場合に特に便利です。"

msgid "Checking which form data has changed"
msgstr "どのフォームデータが変更されたかをチェックする"

msgid ""
"Use the ``has_changed()`` method on your ``Form`` when you need to check if "
"the form data has been changed from the initial data."
msgstr ""
"フォームデータが初期値から変更されたかどうかをチェックしたい場合は、 "
"``has_changed()`` メソッドを使います。"

msgid ""
"When the form is submitted, we reconstruct it and provide the original data "
"so that the comparison can be done:"
msgstr ""
"フォームが送信された場合、比較ができるようにフォームを再構築して元のデータを"
"提供します::"

msgid ""
"``has_changed()`` will be ``True`` if the data from ``request.POST`` differs "
"from what was provided in :attr:`~Form.initial` or ``False`` otherwise. The "
"result is computed by calling :meth:`Field.has_changed` for each field in "
"the form."
msgstr ""
"``has_changed()`` は、 ``request.POST`` が :attr:`~Form.initial` で提供された"
"データと異なる場合、 ``True`` を返し、同じであれば ``False`` を返します。この"
"結果は、それぞれのフィールドで :meth:`Field.has_changed` を呼ぶことで計算され"
"ます。"

msgid ""
"The ``changed_data`` attribute returns a list of the names of the fields "
"whose values in the form's bound data (usually ``request.POST``) differ from "
"what was provided in :attr:`~Form.initial`. It returns an empty list if no "
"data differs."
msgstr ""
"``changed_data`` 属性は、フォームにバインドされたデータ (ふつうは ``request."
"POST``) の値が :attr:`~Form.initial` で提供されたものと異なるとき、そのフィー"
"ルド名のリストを返します。データが変更されていない場合は、空のリストを返しま"
"す。"

msgid "Accessing the fields from the form"
msgstr "フォームからフィールドにアクセスする"

msgid ""
"You can access the fields of :class:`Form` instance from its ``fields`` "
"attribute:"
msgstr ""
":class:`Form` インスタンスのフィールドには、その ``fields`` 属性からアクセス"
"できます。"

msgid ""
"You can alter the field and :class:`.BoundField` of :class:`Form` instance "
"to change the way it is presented in the form:"
msgstr ""
"フィールドと :class:`.BoundField` 、 :class:`Form` インスタンスを変更すること"
"で、フォーム内でのフィールドの表示方法を変更できます。"

msgid ""
"Beware not to alter the ``base_fields`` attribute because this modification "
"will influence all subsequent ``ContactForm`` instances within the same "
"Python process:"
msgstr ""
"``base_fields`` 属性を変更しないように注意してください。この変更は、同じ"
"Pythonプロセス内のすべての後続の ``ContactForm`` インスタンスに影響を与えま"
"す。"

msgid "Accessing \"clean\" data"
msgstr "\"clean\" なデータにアクセスする"

msgid ""
"Each field in a :class:`Form` class is responsible not only for validating "
"data, but also for \"cleaning\" it -- normalizing it to a consistent format. "
"This is a nice feature, because it allows data for a particular field to be "
"input in a variety of ways, always resulting in consistent output."
msgstr ""
":class:`Form` クラスの各フィールドは、データの検証だけでなく、それを「クリー"
"ニング」する – すなわち、データを一貫した形式に正規化する役割も担っています。"
"これは素晴らしい機能で、各フィールドにおいて、様々な形式で入力されるデータか"
"ら、常に整合性のある出力を得ることができます。"

msgid ""
"For example, :class:`~django.forms.DateField` normalizes input into a Python "
"``datetime.date`` object. Regardless of whether you pass it a string in the "
"format ``'1994-07-15'``, a ``datetime.date`` object, or a number of other "
"formats, ``DateField`` will always normalize it to a ``datetime.date`` "
"object as long as it's valid."
msgstr ""
"たとえば、 :class:`~django.forms.DateField` はインプットを Python の "
"``datetime.date`` オブジェクトに正規化します。たとえ ``'1994-07-15'`` という"
"形式の文字列で渡そうが、 ``datetime.date`` オブジェクトを渡そうが、他の様々な"
"形式で渡そうが、それが検証にパスする限り ``DateField`` はいつも ``datetime."
"date`` オブジェクトに正規化します。"

msgid ""
"Once you've created a :class:`~Form` instance with a set of data and "
"validated it, you can access the clean data via its ``cleaned_data`` "
"attribute:"
msgstr ""
":class:`~Form` インスタンスを作成し、データをセットして検証した後は、"
"``cleaned_data`` 属性を介してクリーンなデータにアクセスできます。"

msgid ""
"Note that any text-based field -- such as ``CharField`` or ``EmailField`` -- "
"always cleans the input into a string. We'll cover the encoding implications "
"later in this document."
msgstr ""
"``CharField`` や ``EmailField`` といったテキストベースのフィールドは、入力を"
"文字列に正規化します。暗黙的な文字エンコードの動作については、後のドキュメン"
"トでカバーします。"

msgid ""
"If your data does *not* validate, the ``cleaned_data`` dictionary contains "
"only the valid fields:"
msgstr ""
"もしデータが検証に合格 *しなかった* 場合、 ``cleaned_data`` の辞書には有効な"
"フィールドのみが含まれます。"

msgid ""
"``cleaned_data`` will always *only* contain a key for fields defined in the "
"``Form``, even if you pass extra data when you define the ``Form``. In this "
"example, we pass a bunch of extra fields to the ``ContactForm`` constructor, "
"but ``cleaned_data`` contains only the form's fields:"
msgstr ""
"たとえ ``Form`` を定義する際に追加のデータを渡しても、 ``cleaned_data`` には "
"``Form`` で定義されたフィールドのキー *のみ* が含まれます。この例では "
"``ContactForm`` のコンストラクタに追加のフィールドを渡していますが、 "
"``cleaned_data`` にはフォームのフィールドのみが含まれます。"

msgid ""
"When the ``Form`` is valid, ``cleaned_data`` will include a key and value "
"for *all* its fields, even if the data didn't include a value for some "
"optional fields. In this example, the data dictionary doesn't include a "
"value for the ``nick_name`` field, but ``cleaned_data`` includes it, with an "
"empty value:"
msgstr ""
"``Form`` の検証に合格した場合、 任意入力のフィールドのデータが一部含まれてい"
"なかったとしても、 *すべての* フィールドのキーと値が含まれています。この例で"
"は、渡したデータに ``nick_name`` フィールドの値は含まれていませんが、 "
"``cleaned_data`` には空の値が含まれています。"

msgid ""
"In this above example, the ``cleaned_data`` value for ``nick_name`` is set "
"to an empty string, because ``nick_name`` is ``CharField``, and "
"``CharField``\\s treat empty values as an empty string. Each field type "
"knows what its \"blank\" value is -- e.g., for ``DateField``, it's ``None`` "
"instead of the empty string. For full details on each field's behavior in "
"this case, see the \"Empty value\" note for each field in the \"Built-in "
"``Field`` classes\" section below."
msgstr ""
"上の例では、 ``cleaned_data`` 中の ``nick_name`` の値には空の文字列がセットさ"
"れています。これは、 ``nick_name`` が ``CharField`` であり、 ``CharField`` は"
"空の値を空の文字列として扱うからです。それぞれのフィールドタイプは、それぞれ"
"の ``空の`` 値が何であるか知っています -- たとえば、 ``DateField`` では空の文"
"字列の代わりに ``None`` です。それぞれのフィールドの挙動の完全な詳細は、あと"
"の \"Built-in ``Field`` classes\" セクションにある \"Empty value\" ノートを見"
"てください。"

msgid ""
"You can write code to perform validation for particular form fields (based "
"on their name) or for the form as a whole (considering combinations of "
"various fields). More information about this is in :doc:`/ref/forms/"
"validation`."
msgstr ""
"特定のいくつかの (フォーム名に基づく) フォームフィールドまたは (さまざまな"
"フィールドの組み合わせを考えて) フォーム全体に対してのバリデーションを行う"
"コードを書くこともできます。これについての詳細は、 :doc:`/ref/forms/"
"validation` を見てください。"

msgid "Outputting forms as HTML"
msgstr "フォームをHTMLとしてアウトプットする"

msgid ""
"The second task of a ``Form`` object is to render itself as HTML. To do so, "
"``print`` it:"
msgstr ""
"``Form`` オブジェクトの2番目のタスクは、自身をHTMLとしてレンダリングすること"
"です。それを行うには ``print`` します。"

msgid ""
"If the form is bound to data, the HTML output will include that data "
"appropriately. For example, if a field is represented by an ``<input "
"type=\"text\">``, the data will be in the ``value`` attribute. If a field is "
"represented by an ``<input type=\"checkbox\">``, then that HTML will include "
"``checked`` if appropriate:"
msgstr ""
"フォームがデータにバインドされている場合、HTMLの出力にはそのデータが適切に含"
"まれます。たとえば、フィールドが ``<input type=\"text\">`` で表される場合、"
"データは ``value`` 属性に含まれます。フィールドが ``<input "
"type=\"checkbox\">`` で表される場合、HTMLには必要に応じて ``checked`` が含ま"
"れます。"

msgid ""
"This default output wraps each field with a ``<div>``. Notice the following:"
msgstr ""
"このデフォルトの出力は、各フィールドを ``<div>`` で囲みます。以下の点に注意し"
"てください。"

msgid ""
"For flexibility, the output does *not* include the ``<form>`` and ``</"
"form>`` tags or an ``<input type=\"submit\">`` tag. It's your job to do that."
msgstr ""
"柔軟性のために、出力には ``<form>`` と ``</form>`` のタグや ``<input "
"type=\"submit\">`` のタグは含まれていません。これらは各自で追加するようにして"
"ください。"

msgid ""
"Each field type has a default HTML representation. ``CharField`` is "
"represented by an ``<input type=\"text\">`` and ``EmailField`` by an "
"``<input type=\"email\">``. ``BooleanField(null=False)`` is represented by "
"an ``<input type=\"checkbox\">``. Note these are merely sensible defaults; "
"you can specify which HTML to use for a given field by using widgets, which "
"we'll explain shortly."
msgstr ""
"それぞれのフィールドタイプはデフォルトの HTML 表現を持っています。 "
"``CharField`` は ``<input type=\"text\">`` で、 ``EmailField`` は ``<input "
"type=\"email\">`` で表現され、``BooleanField(null=False)`` は ``<input "
"type=\"checkbox\">`` で表現されます。これらは単なる実用的なデフォルトであり、"
"あるフィールドにどの HTML を使うかは、すぐ後で説明するウィジェットを使って指"
"定できます。"

msgid ""
"The HTML ``name`` for each tag is taken directly from its attribute name in "
"the ``ContactForm`` class."
msgstr ""
"HTML のそれぞれのタグの ``name`` は、 ``ContactForm`` クラスの属性名から直接"
"とられます。"

msgid ""
"The text label for each field -- e.g. ``'Subject:'``, ``'Message:'`` and "
"``'Cc myself:'`` is generated from the field name by converting all "
"underscores to spaces and upper-casing the first letter. Again, note these "
"are merely sensible defaults; you can also specify labels manually."
msgstr ""
"それぞれのフィールドのテキストラベル、たとえば ``'Subject:'``, "
"``'Message:'`` , ``'Cc myself:'`` は、フィールド名のアンダースコアをスペース"
"に変換し、頭文字を大文字に変換して生成されます。これらもまた単なる実用的なデ"
"フォルトです; 手動でラベルを指定することもできます。"

msgid ""
"Each text label is surrounded in an HTML ``<label>`` tag, which points to "
"the appropriate form field via its ``id``. Its ``id``, in turn, is generated "
"by prepending ``'id_'`` to the field name. The ``id`` attributes and "
"``<label>`` tags are included in the output by default, to follow best "
"practices, but you can change that behavior."
msgstr ""
"それぞれのテキストラベルは HTML ``<label>`` タグで囲まれており、 ``id`` を通"
"して適切なフォームフィールドを指しています。``id`` は、フィールド名に "
"``'id_'`` を前置することで生成されます。``id`` 属性と ``<label>`` タグは、ベ"
"ストプラクティスに従ってデフォルトでアウトプットにインクルードされますが、こ"
"の挙動も変更できます。"

msgid ""
"The output uses HTML5 syntax, targeting ``<!DOCTYPE html>``. For example, it "
"uses boolean attributes such as ``checked`` rather than the XHTML style of "
"``checked='checked'``."
msgstr ""
"出力はHTML5の構文を使用し、 ``<!DOCTYPE html>`` をターゲットにしています。例"
"えば、 ``checked='checked'`` のXHTMLスタイルではなく ``checked`` のようなブー"
"ル属性を使用します。"

msgid ""
"Although ``<div>`` output is the default output style when you ``print`` a "
"form you can customize the output by using your own form template which can "
"be set site-wide, per-form, or per-instance. See :ref:`reusable-form-"
"templates`."
msgstr ""
"フォームを ``print`` するときは ``<div>`` がデフォルトの出力スタイルですが、"
"独自のフォームテンプレートを使用して、出力をカスタマイズできます。このテンプ"
"レートは、サイト全体、フォームごと、またはインスタンスごとに設定できます。詳"
"細は、 :ref:`reusable-form-templates` を参照してください。"

msgid "Default rendering"
msgstr "デフォルトのレンダリング"

msgid ""
"The default rendering when you ``print`` a form uses the following methods "
"and attributes."
msgstr ""
"フォームを ``print`` するときのデフォルトのレンダリングでは、次のメソッドと属"
"性が使用されます。"

msgid "``template_name``"
msgstr "``template_name``"

msgid ""
"The name of the template rendered if the form is cast into a string, e.g. "
"via ``print(form)`` or in a template via ``{{ form }}``."
msgstr ""
"フォームを文字列に変換するときにレンダリングされるテンプレートの名前です。例"
"えば、 ``print(form)`` やテンプレート内の ``{{ form }}`` などで使用されます。"

msgid ""
"By default, a property returning the value of the renderer's :attr:`~django."
"forms.renderers.BaseRenderer.form_template_name`. You may set it as a string "
"template name in order to override that for a particular form class."
msgstr ""
"デフォルトでは、レンダラーの :attr:`~django.forms.renderers.BaseRenderer."
"form_template_name` の値を返すプロパティです。特定のフォームクラスに対してそ"
"れを上書きするために、文字列型のテンプレート名として設定できます。"

msgid "``render()``"
msgstr "``render()``"

msgid ""
"The render method is called by ``__str__`` as well as the :meth:`.Form."
"as_div`, :meth:`.Form.as_table`, :meth:`.Form.as_p`, and :meth:`.Form.as_ul` "
"methods. All arguments are optional and default to:"
msgstr ""
"renderメソッドは、 ``__str__`` だけでなく、 :meth:`.Form.as_div` 、 :meth:`."
"Form.as_table` 、 :meth:`.Form.as_p` 、および :meth:`.Form.as_ul` メソッドに"
"よって呼び出されます。すべての引数はオプションであり、デフォルトは次のとおり"
"です。"

msgid "``template_name``: :attr:`.Form.template_name`"
msgstr "``template_name``: :attr:`.Form.template_name`"

msgid "``context``: Value returned by :meth:`.Form.get_context`"
msgstr "``context``: :meth:`.Form.get_context` が返す値"

msgid "``renderer``: Value returned by :attr:`.Form.default_renderer`"
msgstr "``renderer``: :attr:`.Form.default_renderer` が返す値"

msgid ""
"By passing ``template_name`` you can customize the template used for just a "
"single call."
msgstr ""
"``template_name`` を渡すことで、単一の呼び出しに使用されるテンプレートをカス"
"タマイズできます。"

msgid "``get_context()``"
msgstr "``get_context()``"

msgid "Return the template context for rendering the form."
msgstr "テンプレートをレンダリングするためのコンテキストを返します。"

msgid "The available context is:"
msgstr "利用可能なコンテキストは次のとおりです。"

msgid "``form``: The bound form."
msgstr "``form``: バインドされたフォーム。"

msgid "``fields``: All bound fields, except the hidden fields."
msgstr ""
"``fields``: 隠されたフィールドを除く、すべてのバインドされたフィールド。"

msgid "``hidden_fields``: All hidden bound fields."
msgstr "``hidden_fields``: すべての隠されたバインドフィールド。"

msgid "``errors``: All non field related or hidden field related form errors."
msgstr ""
"``errors``: フォームの非フィールド関連または非表示フィールド関連の全エラー。"

msgid "``template_name_label``"
msgstr "``template_name_label``"

msgid ""
"The template used to render a field's ``<label>``, used when calling :meth:"
"`BoundField.label_tag`/:meth:`~BoundField.legend_tag`. Can be changed per "
"form by overriding this attribute or more generally by overriding the "
"default template, see also :ref:`overriding-built-in-form-templates`."
msgstr ""
"テンプレートは、 :meth:`BoundField.label_tag`/:meth:`~BoundField.legend_tag` "
"を呼び出す際に使用されるフィールドの ``<label>`` をレンダリングするために使用"
"されます。この属性をオーバーライドするか、デフォルトのテンプレートをオーバー"
"ライドすることで、フォームごとに変更できます。詳細については、 :ref:"
"`overriding-built-in-form-templates` も参照してください。"

msgid "Output styles"
msgstr "出力スタイル"

msgid ""
"The recommended approach for changing form output style is to set a custom "
"form template either site-wide, per-form, or per-instance. See :ref:"
"`reusable-form-templates` for examples."
msgstr ""
"フォームの出力スタイルを変更する推奨されるアプローチは、サイト全体、フォーム"
"ごと、またはインスタンスごとにカスタムフォームテンプレートを設定することで"
"す。例については、 :ref:`reusable-form-templates` を参照してください。"

msgid ""
"The following helper functions are provided for backward compatibility and "
"are a proxy to :meth:`Form.render` passing a particular ``template_name`` "
"value."
msgstr ""
"以下のヘルパー関数は後方互換性のために提供され、特定の ``template_name`` 値を"
"渡す :meth:`Form.render` へのプロキシです。"

msgid ""
"Of the framework provided templates and output styles, the default "
"``as_div()`` is recommended over the ``as_p()``, ``as_table()``, and "
"``as_ul()`` versions as the template implements ``<fieldset>`` and "
"``<legend>`` to group related inputs and is easier for screen reader users "
"to navigate."
msgstr ""
"フレームワークが提供するテンプレートと出力スタイルのうち、デフォルトの "
"``as_div()`` は ``as_p()``, ``as_table()``, ``as_ul()`` バージョンよりも推奨"
"されます。なぜなら、このテンプレートは ``<fieldset>`` と ``<legend>`` を実装"
"しており、関連する入力をグループ化し、スクリーンリーダーユーザがナビゲートし"
"やすいからです。"

msgid ""
"Each helper pairs a form method with an attribute giving the appropriate "
"template name."
msgstr ""
"各ヘルパーは、適切なテンプレート名を指定する属性とフォームメソッドをペアにし"
"ます。"

msgid "``as_div()``"
msgstr "``as_div()``"

msgid ""
"The template used by ``as_div()``. Default: ``'django/forms/div.html'``."
msgstr ""
"``as_div()`` に使用されるテンプレート。デフォルト: ``'django/forms/div."
"html'``。"

msgid ""
"``as_div()`` renders the form as a series of ``<div>`` elements, with each "
"``<div>`` containing one field, such as:"
msgstr ""
"``as_div()`` はフォームを一連の ``<div>`` 要素としてレンダリングし、各 "
"``<div>`` には以下のように一つのフィールドを含みます"

msgid "… gives HTML like:"
msgstr "… これは次のようなHTMLを生成します:"

msgid "``as_p()``"
msgstr "``as_p()``"

msgid "The template used by ``as_p()``. Default: ``'django/forms/p.html'``."
msgstr ""
"``as_p()`` に使われるテンプレート。デフォルト: ``'django/forms/p.html'`` 。"

msgid ""
"``as_p()`` renders the form as a series of ``<p>`` tags, with each ``<p>`` "
"containing one field:"
msgstr ""
"``as_p()`` は、フォームを一連の ``<p>`` タグとしてレンダリングし、各 ``<p>`` "
"は1つのフィールドを含みます。"

msgid "``as_ul()``"
msgstr "``as_ul()``"

msgid "The template used by ``as_ul()``. Default: ``'django/forms/ul.html'``."
msgstr ""
"``as_ul()`` によって使用されるテンプレート。デフォルト: ``'django/forms/ul."
"html'`` 。"

msgid ""
"``as_ul()`` renders the form as a series of ``<li>`` tags, with each "
"``<li>`` containing one field. It does *not* include the ``<ul>`` or ``</"
"ul>``, so that you can specify any HTML attributes on the ``<ul>`` for "
"flexibility:"
msgstr ""
"``as_ul()`` は、フォームを一連の ``<li>`` タグとしてレンダリングし、各 "
"``<li>`` には一つのフィールドが含まれます。柔軟性のために、``<ul>`` に任意の"
"HTML属性を指定できるように、 ``<ul>`` や ``</ul>`` は含まれ *ません* 。"

msgid "``as_table()``"
msgstr "``as_table()``"

msgid ""
"The template used by ``as_table()``. Default: ``'django/forms/table.html'``."
msgstr ""
"``as_table()`` によって使用されるテンプレート。デフォルト: ``'django/forms/"
"table.html'`` 。"

msgid "``as_table()`` renders the form as an HTML ``<table>``:"
msgstr ""
"``as_table()`` はフォームを HTML の ``<table>`` としてレンダリングします:"

msgid "Styling required or erroneous form rows"
msgstr "必須フォームとエラーのあるフォームのスタイリング"

msgid ""
"It's pretty common to style form rows and fields that are required or have "
"errors. For example, you might want to present required form rows in bold "
"and highlight errors in red."
msgstr ""
"必須フォームやエラーのあるフォームの行を装飾するのはとても一般的です。たとえ"
"ば、必須フォームの行は太字にしたり、エラーであれば赤色にしたくなることもある"
"でしょう。"

msgid ""
"The :class:`Form` class has a couple of hooks you can use to add ``class`` "
"attributes to required rows or to rows with errors: set the :attr:`Form."
"error_css_class` and/or :attr:`Form.required_css_class` attributes::"
msgstr ""
":class:`Form` クラスには、必須フォームやエラーのあるフォームに ``class`` 属性"
"を追加するためのいくつかのフックを用意しています。具体的には、 :attr:`Form."
"error_css_class` 属性や :attr:`Form.required_css_class` 属性をセットします::"

msgid ""
"Once you've done that, rows will be given ``\"error\"`` and/or "
"``\"required\"`` classes, as needed. The HTML will look something like:"
msgstr ""
"それを行ったら、必要に応じて行には ``\"error\"`` および/または "
"``\"required\"`` のクラスが与えられます。HTMLは以下のようになるでしょう:"

msgid "Configuring form elements' HTML ``id`` attributes and ``<label>`` tags"
msgstr "フォーム要素の HTML ``id`` 属性と ``<label>`` タグを設定する"

msgid "By default, the form rendering methods include:"
msgstr ""
"デフォルトでは、フォームをレンダリングするメソッドは次のものを含みます::"

msgid "HTML ``id`` attributes on the form elements."
msgstr "フォーム要素に対する HTML ``id`` 属性。"

msgid ""
"The corresponding ``<label>`` tags around the labels. An HTML ``<label>`` "
"tag designates which label text is associated with which form element. This "
"small enhancement makes forms more usable and more accessible to assistive "
"devices. It's always a good idea to use ``<label>`` tags."
msgstr ""
"ラベルの前後に、フォームに対応する ``<label>`` タグ。 HTML の ``<label>`` タ"
"グは、どのラベルテキストがどのフォーム要素と関係しているかを指定します。この"
"小さな修飾によって、補助的なデバイスでフォームにアクセスするのが便利になりま"
"す。いつも ``<label>`` タグを使うようにするとよいでしょう。"

msgid ""
"The ``id`` attribute values are generated by prepending ``id_`` to the form "
"field names.  This behavior is configurable, though, if you want to change "
"the ``id`` convention or remove HTML ``id`` attributes and ``<label>`` tags "
"entirely."
msgstr ""
"``id`` 属性の値は、フォームフィールド名に ``id_`` を前置して生成されます。し"
"かし、もし ``id`` 規約を変更したかったり、 HTML ``id`` 属性と ``<label>`` タ"
"グを完全に消し去りたいような場合は、この挙動は変更可能です。"

msgid ""
"Use the ``auto_id`` argument to the ``Form`` constructor to control the "
"``id`` and label behavior. This argument must be ``True``, ``False`` or a "
"string."
msgstr ""
"``id`` とラベルの挙動を制御するには、 ``auto_id`` 引数を使います。この引数"
"は、 ``True`` か ``False`` か文字列でなければなりません。"

msgid ""
"If ``auto_id`` is ``False``, then the form output will not include "
"``<label>`` tags nor ``id`` attributes:"
msgstr ""
"``auto_id`` が ``False`` の場合、フォームの出力には ``<label>`` タグや "
"``id`` 属性が含まれなくなります。"

msgid ""
"If ``auto_id`` is set to ``True``, then the form output *will* include "
"``<label>`` tags and will use the field name as its ``id`` for each form "
"field:"
msgstr ""
"``auto_id`` が ``True`` に設定されている場合、フォームの出力には ``<label>`` "
"タグが含まれ、各フォームフィールドの ``id`` としてフィールド名を使用します。"

msgid ""
"If ``auto_id`` is set to a string containing the format character ``'%s'``, "
"then the form output will include ``<label>`` tags, and will generate ``id`` "
"attributes based on the format string. For example, for a format string "
"``'field_%s'``, a field named ``subject`` will get the ``id`` value "
"``'field_subject'``. Continuing our example:"
msgstr ""
"``auto_id`` が ``'%s'`` 形式の文字を含む文字列に設定されている場合、フォーム"
"の出力には ``<label>`` タグが含まれ、フォーマット文字列に基づいて ``id`` 属性"
"が生成されます。例えば、フォーマット文字列が ``'field_%s'`` の場合、"
"``subject`` という名前のフィールドは ``'field_subject'`` という ``id`` 値を取"
"得します。例を続けます:"

msgid ""
"If ``auto_id`` is set to any other true value -- such as a string that "
"doesn't include ``%s`` -- then the library will act as if ``auto_id`` is "
"``True``."
msgstr ""
"もし、 ``auto_id`` が (``%s`` を含まない文字列のような) それ以外の真の値に"
"セットされた場合、ライブラリは ``auto_id`` が ``True`` の場合と同様に動作しま"
"す。"

msgid "By default, ``auto_id`` is set to the string ``'id_%s'``."
msgstr ""
"デフォルトでは、 ``auto_id`` は文字列 ``'id_%s'`` がセットされています。"

msgid ""
"A translatable string (defaults to a colon (``:``) in English) that will be "
"appended after any label name when a form is rendered."
msgstr ""
"フォームをレンダリングする際、すべてのラベル名の後ろにつけられる翻訳可能な文"
"字列の接尾語 (英語ではコロン (``:``) がデフォルト) です。"

msgid ""
"It's possible to customize that character, or omit it entirely, using the "
"``label_suffix`` parameter:"
msgstr ""
"その文字をカスタマイズしたり、完全に省略したりすることも、``label_suffix`` パ"
"ラメータを使用して可能です。"

msgid ""
"Note that the label suffix is added only if the last character of the label "
"isn't a punctuation character (in English, those are ``.``, ``!``, ``?`` or "
"``:``)."
msgstr ""
"接尾文字列は、ラベルの最後の文字が句読文字 (英語では、 ``.``, ``!``, ``?``, "
"``:``) でない場合に限ってつけられます。"

msgid ""
"Fields can also define their own :attr:`~django.forms.Field.label_suffix`. "
"This will take precedence over :attr:`Form.label_suffix <django.forms.Form."
"label_suffix>`. The suffix can also be overridden at runtime using the "
"``label_suffix`` parameter to :meth:`~django.forms.BoundField.label_tag`/ :"
"meth:`~django.forms.BoundField.legend_tag`."
msgstr ""
"フィールドはそれ自身の :attr:`~django.forms.Field.label_suffix` を定義するこ"
"ともできます。これは :attr:`Form.label_suffix <django.forms.Form."
"label_suffix>` よりも優先されます。また、 ``label_suffix`` パラメータを :"
"meth:`~django.forms.BoundField.label_tag` / :meth:`~django.forms.BoundField."
"legend_tag` に使用することで、実行時に接尾辞を上書きすることもできます。"

msgid ""
"When set to ``True`` (the default), required form fields will have the "
"``required`` HTML attribute."
msgstr ""
"``True`` (デフォルト値) に設定した場合、必須フォームフィールドは HTMLの "
"``required`` 属性を伴います。"

msgid ""
":doc:`Formsets </topics/forms/formsets>` instantiate forms with "
"``use_required_attribute=False`` to avoid incorrect browser validation when "
"adding and deleting forms from a formset."
msgstr ""
":doc:`Formsets </topics/forms/formsets>` は、フォームセットにフォームを追加ま"
"たは削除したときのブラウザの誤検証を避けるため、 "
"``use_required_attribute=False`` としてフォームをインスタンス化します。"

msgid "Configuring the rendering of a form's widgets"
msgstr "フォームウィジェットのレンダリングを設定する"

msgid ""
"Specifies the :doc:`renderer <renderers>` to use for the form. Defaults to "
"``None`` which means to use the default renderer specified by the :setting:"
"`FORM_RENDERER` setting."
msgstr ""
"フォームの :doc:`renderer <renderers>` を指定します。デフォルトは ``None`` "
"で、 :setting:`FORM_RENDERER` 設定で指定されたデフォルトのレンダラーを使用す"
"ることを意味します。"

msgid ""
"You can set this as a class attribute when declaring your form or use the "
"``renderer`` argument to ``Form.__init__()``. For example::"
msgstr ""
"これはクラスの属性としてフォーム定義の際に設定するもしくは、``Form."
"__init__()`` に ``renderer`` 引数を使うことで設定します。たとえば::"

msgid "or::"
msgstr "もしくは::"

msgid "Notes on field ordering"
msgstr "フィールドの順序に関する記述"

msgid ""
"In the ``as_p()``, ``as_ul()`` and ``as_table()`` shortcuts, the fields are "
"displayed in the order in which you define them in your form class. For "
"example, in the ``ContactForm`` example, the fields are defined in the order "
"``subject``, ``message``, ``sender``, ``cc_myself``. To reorder the HTML "
"output, change the order in which those fields are listed in the class."
msgstr ""
"``as_p()``, ``as_ul()``,  ``as_table()`` ショートカットでは、フィールドは"
"フォームクラスで定義した順序で表示されます。たとえば、 ``ContactForm`` の例で"
"は、フィールドは ``subject``, ``message``, ``sender``, ``cc_myself`` の順で定"
"義されます。 HTML アウトプットの順序を変更するには、クラスの中で定義する順序"
"を変えます。"

msgid "There are several other ways to customize the order:"
msgstr "順序のカスタマイズには、ほかにもいくつかの方法があります:"

msgid ""
"By default ``Form.field_order=None``, which retains the order in which you "
"define the fields in your form class. If ``field_order`` is a list of field "
"names, the fields are ordered as specified by the list and remaining fields "
"are appended according to the default order. Unknown field names in the list "
"are ignored. This makes it possible to disable a field in a subclass by "
"setting it to ``None`` without having to redefine ordering."
msgstr ""
"デフォルトでは ``Form.field_order=None`` で、これはフォームクラスでフィールド"
"を定義した順番を保持します。``field_order`` がフィールド名のリストである場"
"合、指定されたリストに従ってフィールドが順序付けられ、残りのフィールドはデ"
"フォルトの順序に従って追加されます。リスト内の未知のフィールド名は無視されま"
"す。これにより、サブクラスでフィールドを ``None`` に設定して無効にしても、順"
"序を再定義する必要がなくなります。"

msgid ""
"You can also use the ``Form.field_order`` argument to a :class:`Form` to "
"override the field order. If a :class:`~django.forms.Form` defines :attr:"
"`~Form.field_order` *and* you include ``field_order`` when instantiating the "
"``Form``, then the latter ``field_order`` will have precedence."
msgstr ""
":class:`Form` に ``Form.field_order`` 引数を使うことで、フィールドの順序を"
"オーバーライドすることもできます。 :class:`~django.forms.Form` の中で :attr:"
"`~Form.field_order` が定義されていて、 *かつ* ``Form`` をインスタンス化する際"
"に ``field_order`` をインクルードする場合、後者の ``field_order`` が優先され"
"ます。"

msgid ""
"You may rearrange the fields any time using ``order_fields()`` with a list "
"of field names as in :attr:`~django.forms.Form.field_order`."
msgstr ""
"また、 ``order_fields()`` に :attr:`~django.forms.Form.field_order` と同様の"
"フィールド名のリストを用いて、いつでもフィールドの順序を変更できます。"

msgid "How errors are displayed"
msgstr "エラーの表示方法"

msgid ""
"If you render a bound ``Form`` object, the act of rendering will "
"automatically run the form's validation if it hasn't already happened, and "
"the HTML output will include the validation errors as a ``<ul "
"class=\"errorlist\">`` near the field. The particular positioning of the "
"error messages depends on the output method you're using:"
msgstr ""
"バインドされた ``Form`` オブジェクトをレンダリングすると、まだ実行されていな"
"い場合はフォームのバリデーションが自動的に実行され、HTML出力にはバリデーショ"
"ンエラーがフィールドの近くに ``<ul class=\"errorlist\">`` として含まれます。"
"エラーメッセージの具体的な配置は使用している出力方法に依存します。"

msgid "Customizing the error list format"
msgstr "エラーリストのフォーマットをカスタムする"

msgid ""
"By default, forms use ``django.forms.utils.ErrorList`` to format validation "
"errors. ``ErrorList`` is a list like object where ``initlist`` is the list "
"of errors. In addition this class has the following attributes and methods."
msgstr ""
"デフォルトでは、フォームはバリデーションエラーを整形するために ``django."
"forms.utils.ErrorList`` を使用します。``ErrorList`` はリストのようなオブジェ"
"クトであり、``initlist`` はエラーのリストです。さらに、このクラスは以下の属性"
"とメソッドを持っています。"

msgid ""
"The CSS classes to be used when rendering the error list. Any provided "
"classes are added to the default ``errorlist`` class."
msgstr ""
"エラーリストをレンダリングする際に使用されるCSSクラス。指定されたクラスは、デ"
"フォルトの ``errorlist`` クラスに追加されます。"

msgid ""
"Specifies the :doc:`renderer <renderers>` to use for ``ErrorList``. Defaults "
"to ``None`` which means to use the default renderer specified by the :"
"setting:`FORM_RENDERER` setting."
msgstr ""
"``ErrorList`` に使用する :doc:`レンダラー <renderers>` を指定します。デフォル"
"トでは ``None`` であり、これは :setting:`FORM_RENDERER` 設定で指定されたデ"
"フォルトのレンダラーを使用することを意味します。"

msgid ""
"The name of the template used when calling ``__str__`` or :meth:`render`. By "
"default this is ``'django/forms/errors/list/default.html'`` which is a proxy "
"for the ``'ul.html'`` template."
msgstr ""
"``__str__`` や :meth:`render` を呼び出した際に使用されるテンプレートの名前で"
"す。デフォルトでは、これは ``'django/forms/errors/list/default.html'`` であ"
"り、``'ul.html'`` テンプレートのプロキシとなります。"

msgid ""
"The name of the template used when calling :meth:`.as_text`. By default this "
"is ``'django/forms/errors/list/text.html'``. This template renders the "
"errors as a list of bullet points."
msgstr ""
":meth:`.as_text` を呼び出す際に使用されるテンプレートの名前です。デフォルトで"
"は、これは ``'django/forms/errors/list/text.html'`` です。このテンプレート"
"は、エラーを箇条書きのリストとしてレンダリングします。"

msgid ""
"The name of the template used when calling :meth:`.as_ul`. By default this "
"is ``'django/forms/errors/list/ul.html'``. This template renders the errors "
"in ``<li>`` tags with a wrapping ``<ul>`` with the CSS classes as defined "
"by :attr:`.error_class`."
msgstr ""
":meth:`.as_ul` を呼び出すときに使用されるテンプレートの名前です。デフォルトで"
"はこれは ``'django/forms/errors/list/ul.html'`` です。このテンプレートは、 :"
"attr:`.error_class` で定義された CSS クラスを持つ包括的な ``<ul>`` で "
"``<li>`` タグ内のエラーをレンダリングします。"

msgid "Return context for rendering of errors in a template."
msgstr "テンプレート内のエラーのレンダリング用のコンテキストを返します。"

msgid "``errors`` : A list of the errors."
msgstr "``errors``: エラーのリスト。"

msgid "``error_class`` : A string of CSS classes."
msgstr "``error_class``: CSSクラスの文字列。"

msgid ""
"The render method is called by ``__str__`` as well as by the :meth:`.as_ul` "
"method."
msgstr ""
"renderメソッドは、 ``__str__`` と :meth:`.as_ul` メソッドの両方から呼び出され"
"ます。"

msgid "All arguments are optional and will default to:"
msgstr "すべての引数はオプションで、デフォルト値は以下の通りです:"

msgid "``template_name``: Value returned by :attr:`.template_name`"
msgstr "``template_name``: :attr:`.template_name` が返す値"

msgid "``context``: Value returned by :meth:`.get_context`"
msgstr "``context``: :meth:`.get_context` が返す値"

msgid "``renderer``: Value returned by :attr:`.renderer`"
msgstr "``renderer``: :attr:`.renderer` が返す値"

msgid ""
"Renders the error list using the template defined by :attr:`."
"template_name_text`."
msgstr ""
"エラーリストを :attr:`.template_name_text` で定義されたテンプレートを使用して"
"レンダリングします。"

msgid ""
"Renders the error list using the template defined by :attr:`."
"template_name_ul`."
msgstr ""
":attr:`.template_name_ul` で定義されたテンプレートを使用してエラーリストをレ"
"ンダリングします。"

msgid ""
"If you'd like to customize the rendering of errors this can be achieved by "
"overriding the :attr:`.template_name` attribute or more generally by "
"overriding the default template, see also :ref:`overriding-built-in-form-"
"templates`."
msgstr ""
"エラーのレンダリングをカスタマイズしたい場合は、:attr:`.template_name` 属性を"
"オーバーライドするか、あるいはデフォルトテンプレートをオーバーライドすること"
"によって達成できます。詳しくは :ref:`overriding-built-in-form-templates` も参"
"照してください。"

msgid "More granular output"
msgstr "さらに詳細なアウトプット"

msgid ""
"The ``as_p()``, ``as_ul()``, and ``as_table()`` methods are shortcuts -- "
"they're not the only way a form object can be displayed."
msgstr ""
"``as_p()``, ``as_ul()``, ``as_table()`` メソッドはショートカットです -- "
"フォームオブジェクトを表示する唯一の方法ではありません。"

msgid ""
"Used to display HTML or access attributes for a single field of a :class:"
"`Form` instance."
msgstr ""
":class:`Form` インスタンスのひとつのフィールドを HTML として表示したり、その"
"属性にアクセスするのに使います。"

msgid ""
"The ``__str__()`` method of this object displays the HTML for this field."
msgstr ""
"このオブジェクトの ``__str__()`` メソッドは、このフィールドの HTML を表示しま"
"す。"

msgid ""
"To retrieve a single ``BoundField``, use dictionary lookup syntax on your "
"form using the field's name as the key:"
msgstr ""
"単一の ``BoundField`` を取得するには、フィールド名をキーとしてフォームに対し"
"て辞書参照構文を使用します。"

msgid "To retrieve all ``BoundField`` objects, iterate the form:"
msgstr ""
"全ての ``BoundField`` オブジェクトを取得するには、フォームをイテレートします:"

msgid "The field-specific output honors the form object's ``auto_id`` setting:"
msgstr ""
"フィールド固有の出力は、フォームオブジェクトの ``auto_id`` 設定を反映します:"

msgid "Attributes of ``BoundField``"
msgstr "``BoundField`` の属性一覧"

msgid ""
"The HTML ID attribute for this ``BoundField``. Returns an empty string if :"
"attr:`Form.auto_id` is ``False``."
msgstr ""
"この ``BoundField`` の HTML ID 属性。 :attr:`Form.auto_id` が ``False`` であ"
"れば、空の文字列を返します。"

msgid ""
"This property returns the data for this :class:`~django.forms.BoundField` "
"extracted by the widget's :meth:`~django.forms.Widget.value_from_datadict` "
"method, or ``None`` if it wasn't given:"
msgstr ""
"このプロパティは、ウィジェットの :meth:`~django.forms.Widget."
"value_from_datadict` メソッドによって抽出された、この :class:`~django.forms."
"BoundField` のデータを返します。もしデータが与えられていない場合は、 "
"``None`` を返します。"

msgid ""
"A :ref:`list-like object <ref-forms-error-list-format>` that is displayed as "
"an HTML ``<ul class=\"errorlist\">`` when printed:"
msgstr ""
"プリント時に HTML の ``<ul class=\"errorlist\">`` として表示される :ref:`リス"
"トのようなオブジェクト <ref-forms-error-list-format>` です:"

msgid ""
"When rendering a field with errors, ``aria-invalid=\"true\"`` will be set on "
"the field's widget to indicate there is an error to screen reader users."
msgstr ""
"エラーを含むフィールドをレンダリングする際、そのフィールドのウィジェットに "
"``aria-invalid=\"true\"`` が設定され、スクリーンリーダーユーザーにエラーが存"
"在することを示します。"

msgid "The ``aria-invalid=\"true\"`` was added when a field has errors."
msgstr ""
"フィールドにエラーがある場合、 ``aria-invalid=\"true\"`` が追加されました。"

msgid ""
"The form :class:`~django.forms.Field` instance from the form class that "
"this :class:`~django.forms.BoundField` wraps."
msgstr ""
"この :class:`~django.forms.BoundField` がラップしているフォームクラスの :"
"class:`~django.forms.Field` インスタンス。"

msgid ""
"The :class:`~django.forms.Form` instance this :class:`~django.forms."
"BoundField` is bound to."
msgstr ""
"この :class:`~django.forms.BoundField` がバインドされている :class:`~django."
"forms.Form` インスタンス。"

msgid "The :attr:`~django.forms.Field.help_text` of the field."
msgstr "フィールドの :attr:`~django.forms.Field.help_text` 。"

msgid ""
"The name that will be used in the widget's HTML ``name`` attribute. It takes "
"the form :attr:`~django.forms.Form.prefix` into account."
msgstr ""
"ウィジェットのHTMLの ``name`` 属性で使用される名前です。これは :attr:"
"`~django.forms.Form.prefix` の形式を考慮します。"

msgid ""
"Use this property to render the ID of this field. For example, if you are "
"manually constructing a ``<label>`` in your template (despite the fact that :"
"meth:`~BoundField.label_tag`/:meth:`~BoundField.legend_tag` will do this for "
"you):"
msgstr ""
"このプロパティを使用して、このフィールドのIDをレンダリングします。例えば、(:"
"meth:`~BoundField.label_tag`/:meth:`~BoundField.legend_tag` がこれを行ってく"
"れるにも関わらず、) テンプレートで手動で ``<label>`` を構築している場合は:"

msgid ""
"By default, this will be the field's name prefixed by ``id_`` "
"(\"``id_my_field``\" for the example above). You may modify the ID by "
"setting :attr:`~django.forms.Widget.attrs` on the field's widget. For "
"example, declaring a field like this::"
msgstr ""
"デフォルトでは、これはフィールドの名前に ``id_`` を前につけたものになります"
"(上の例では \"``id_my_field``\")。フィールドのウィジェットの :attr:`~django."
"forms.Widget.attrs` を設定することで、IDを変更できます。例えば、以下のように"
"フィールドを宣言します:"

msgid "and using the template above, would render something like:"
msgstr "そして、上記のテンプレートを使用すると、以下のように表示されます:"

msgid ""
"Use :attr:`BoundField.initial` to retrieve initial data for a form field. It "
"retrieves the data from :attr:`Form.initial` if present, otherwise trying :"
"attr:`Field.initial`. Callable values are evaluated. See :ref:`ref-forms-"
"initial-form-values` for more examples."
msgstr ""
":attr:`BoundField.initial` を使用して、フォームフィールドの初期データを取得し"
"ます。データは、存在する場合は :attr:`Form.initial` から、そうでなければ :"
"attr:`Field.initial` から取得されます。呼び出し可能オブジェクトの値は評価され"
"ます。より多くの例については、 :ref:`ref-forms-initial-form-values` を参照し"
"てください。"

msgid ""
":attr:`BoundField.initial` caches its return value, which is useful "
"especially when dealing with callables whose return values can change (e.g. "
"``datetime.now`` or ``uuid.uuid4``):"
msgstr ""
":attr:`BoundField.initial` はその返り値をキャッシュします。これは、返り値が変"
"わる可能性がある呼び出し可能オブジェクト(例: ``datetime.now`` や ``uuid."
"uuid4`` など)を扱う際に特に便利です。"

msgid ""
"Using :attr:`BoundField.initial` is recommended over :meth:`~Form."
"get_initial_for_field()`."
msgstr ""
":meth:`~Form.get_initial_for_field()` よりも :attr:`BoundField.initial` を使"
"うことをお勧めします。"

msgid ""
"Returns ``True`` if this :class:`~django.forms.BoundField`'s widget is "
"hidden."
msgstr ""
"この :class:`~django.forms.BoundField` のウィジェットが非表示の場合、 "
"``True`` を返します。"

msgid ""
"The :attr:`~django.forms.Field.label` of the field. This is used in :meth:"
"`~BoundField.label_tag`/:meth:`~BoundField.legend_tag`."
msgstr ""
"フィールドの :attr:`~django.forms.Field.label` 。これは :meth:`~BoundField."
"label_tag`/:meth:`~BoundField.legend_tag` で使用されます。"

msgid "The name of this field in the form:"
msgstr "このフィールドのフォーム上での名前:"

msgid ""
"The name of the template rendered with :meth:`.BoundField.as_field_group`."
msgstr ""
":meth:`.BoundField.as_field_group` でレンダリングされるテンプレートの名前。"

msgid ""
"A property returning the value of the :attr:`~django.forms.Field."
"template_name` if set otherwise :attr:`~django.forms.renderers.BaseRenderer."
"field_template_name`."
msgstr ""
"指定されていれば :attr:`~django.forms.Field.template_name` の値を、そうでなけ"
"れば :attr:`~django.forms.renderers.BaseRenderer.field_template_name` の値を"
"返すプロパティ。"

msgid ""
"Returns the value of this BoundField widget's ``use_fieldset`` attribute."
msgstr "この BoundField ウィジェットの ``use_fieldset`` 属性の値を返します。"

msgid ""
"Returns the lowercased class name of the wrapped field's widget, with any "
"trailing ``input`` or ``widget`` removed. This may be used when building "
"forms where the layout is dependent upon the widget type. For example:"
msgstr ""
"ラップされたフィールドのウィジェットのクラス名を小文字にして、末尾の "
"``input`` や ``widget`` を削除したものを返します。これは、ウィジェットのタイ"
"プに依存するレイアウトを持つフォームを構築する際に使用できます。例えば："

msgid "Methods of ``BoundField``"
msgstr "``BoundField`` のメソッド"

msgid ""
"Renders the field using :meth:`.BoundField.render` with default values which "
"renders the ``BoundField``, including its label, help text and errors using "
"the template's :attr:`~django.forms.Field.template_name` if set otherwise :"
"attr:`~django.forms.renderers.BaseRenderer.field_template_name`"
msgstr ""
"フィールドを :meth:`.BoundField.render` を使用してデフォルト値でレンダリング"
"し、設定されている場合はテンプレートの :attr:`~django.forms.Field."
"template_name` 、そうでなければ :attr:`~django.forms.renderers.BaseRenderer."
"field_template_name` を使用して、``BoundField`` をラベル、ヘルプテキスト、エ"
"ラーとともにレンダリングします。"

msgid ""
"Returns a string of HTML for representing this as an ``<input "
"type=\"hidden\">``."
msgstr ""
"これを ``<input type=\"hidden\">`` として表現するためのHTMLの文字列を返しま"
"す。"

msgid "``**kwargs`` are passed to :meth:`~django.forms.BoundField.as_widget`."
msgstr ""
"``**kwargs`` は :meth:`~django.forms.BoundField.as_widget` に渡されます。"

msgid ""
"This method is primarily used internally. You should use a widget instead."
msgstr ""
"このメソッドは主に内部で使用されます。代わりにウィジェットを使用すべきです。"

msgid ""
"Renders the field by rendering the passed widget, adding any HTML attributes "
"passed as ``attrs``.  If no widget is specified, then the field's default "
"widget will be used."
msgstr ""
"渡されたウィジェットをレンダリングして、``attrs`` として渡された任意のHTML属"
"性を追加してフィールドをレンダリングします。ウィジェットが指定されていない場"
"合、フィールドのデフォルトウィジェットが使用されます。"

msgid ""
"``only_initial`` is used by Django internals and should not be set "
"explicitly."
msgstr ""
"``only_initial`` は Django の内部で使用されるものであり、明示的に設定すべきで"
"はありません。"

msgid ""
"When you use Django's rendering shortcuts, CSS classes are used to indicate "
"required form fields or fields that contain errors. If you're manually "
"rendering a form, you can access these CSS classes using the ``css_classes`` "
"method:"
msgstr ""
"Djangoのレンダリングショートカットを利用すると、必須のフォームフィールドやエ"
"ラーを含むフィールドを示すためのCSSクラスが使用されます。フォームを手動でレン"
"ダリングする場合は、 ``css_classes`` メソッドを使用してこれらのCSSクラスにア"
"クセスできます。"

msgid ""
"If you want to provide some additional classes in addition to the error and "
"required classes that may be required, you can provide those classes as an "
"argument:"
msgstr ""
"エラークラスと必須クラスが必要な場合に加えて、追加のクラスを提供したい場合"
"は、引数としてそのクラスを提供できます:"

msgid ""
"Return the template context for rendering the field. The available context "
"is ``field`` being the instance of the bound field."
msgstr ""
"レンダリングするためのテンプレートコンテキストを返します。利用可能なコンテキ"
"ストは、バインドされたフィールドのインスタンスである ``field`` です。"

msgid ""
"Renders a label tag for the form field using the template specified by :attr:"
"`.Form.template_name_label`."
msgstr ""
"フォームフィールドのラベルタグを、 :attr:`.Form.template_name_label` で指定さ"
"れたテンプレートを使用してレンダリングします。"

msgid "``field``: This instance of the :class:`BoundField`."
msgstr "``field``: この :class:`BoundField` のインスタンス。"

msgid ""
"``contents``: By default a concatenated string of :attr:`BoundField.label` "
"and :attr:`Form.label_suffix` (or :attr:`Field.label_suffix`, if set). This "
"can be overridden by the ``contents`` and ``label_suffix`` arguments."
msgstr ""
"``contents``: デフォルトでは :attr:`BoundField.label` と :attr:`Form."
"label_suffix` (または設定されている場合は :attr:`Field.label_suffix`) の結合"
"された文字列です。これは ``contents`` と ``label_suffix`` 引数によって上書き"
"できます。"

msgid ""
"``attrs``: A ``dict`` containing ``for``, :attr:`Form.required_css_class`, "
"and ``id``. ``id`` is generated by the field's widget ``attrs`` or :attr:"
"`BoundField.auto_id`. Additional attributes can be provided by the ``attrs`` "
"argument."
msgstr ""
"``attrs``: ``for``、:attr:`Form.required_css_class`、および ``id`` を含む "
"``dict`` 。``id`` はフィールドのウィジェット ``attrs`` または :attr:"
"`BoundField.auto_id` によって生成されます。追加の属性は ``attrs`` 引数によっ"
"て提供できます。"

msgid ""
"``use_tag``: A boolean which is ``True`` if the label has an ``id``. If "
"``False`` the default template omits the ``tag``."
msgstr ""
"``use_tag``: ラベルに ``id`` がある場合は ``True``、そうでない場合は "
"``False`` の真偽値です。``False`` の場合、デフォルトテンプレートは ``tag`` を"
"省略します。"

msgid ""
"``tag``: An optional string to customize the tag, defaults to ``label``."
msgstr ""
"``tag``: タグをカスタマイズするオプションの文字列で、デフォルトは ``label`` "
"です。"

msgid ""
"In your template ``field`` is the instance of the ``BoundField``. Therefore "
"``field.field`` accesses :attr:`BoundField.field` being the field you "
"declare, e.g. ``forms.CharField``."
msgstr ""
"テンプレートでは、``field`` は ``BoundField`` のインスタンスです。したがっ"
"て、``field.field`` でアクセスする :attr:`BoundField.field` は、あなたが宣言"
"したフィールド、例えば ``forms.CharField`` になります。"

msgid ""
"To separately render the label tag of a form field, you can call its "
"``label_tag()`` method:"
msgstr ""
"フォームフィールドのラベルタグを別々にレンダリングするには、その "
"``label_tag()`` メソッドを呼び出します:"

msgid ""
"If you'd like to customize the rendering this can be achieved by overriding "
"the :attr:`.Form.template_name_label` attribute or more generally by "
"overriding the default template, see also :ref:`overriding-built-in-form-"
"templates`."
msgstr ""
"レンダリングをカスタマイズしたい場合は、 :attr:`.Form.template_name_label` 属"
"性をオーバーライドするか、一般的にはデフォルトのテンプレートをオーバーライド"
"してください。詳細は、 :ref:`overriding-built-in-form-templates` も参照してく"
"ださい。"

msgid ""
"Calls :meth:`.label_tag` with ``tag='legend'`` to render the label with "
"``<legend>`` tags. This is useful when rendering radio and multiple checkbox "
"widgets where ``<legend>`` may be more appropriate than a ``<label>``."
msgstr ""
"``tag='legend'`` を指定して :meth:`.label_tag` を呼び出すと、ラベルを "
"``<legend>`` タグでレンダリングします。これは、 ``<label>`` よりも "
"``<legend>`` が適しているラジオボタンや複数のチェックボックスウィジェットをレ"
"ンダリングする際に便利です。"

msgid ""
"The render method is called by ``as_field_group``. All arguments are "
"optional and default to:"
msgstr ""
"renderメソッドは ``as_field_group`` によって呼び出されます。すべての引数はオ"
"プションであり、デフォルト値は次のとおりです。"

msgid "``template_name``: :attr:`.BoundField.template_name`"
msgstr "``template_name``: :attr:`.BoundField.template_name`"

msgid "``context``: Value returned by :meth:`.BoundField.get_context`"
msgstr "``context``: :meth:`.BoundField.get_context` が返す値"

msgid ""
"Use this method to render the raw value of this field as it would be "
"rendered by a ``Widget``:"
msgstr ""
"このメソッドを使用すると、``Widget`` によってレンダリングされるフィールドの生"
"の値をレンダリングできます:"

msgid "Customizing ``BoundField``"
msgstr "``BoundField`` のカスタマイズ"

msgid ""
"If you need to access some additional information about a form field in a "
"template and using a subclass of :class:`~django.forms.Field` isn't "
"sufficient, consider also customizing :class:`~django.forms.BoundField`."
msgstr ""
"テンプレートでフォームフィールドに関する追加情報にアクセスする必要があり、 :"
"class:`~django.forms.Field` のサブクラスを使用するだけでは不十分な場合は、 :"
"class:`~django.forms.BoundField` のカスタマイズも検討してください。"

msgid "A custom form field can override ``get_bound_field()``:"
msgstr ""
"カスタムフォームフィールドは ``get_bound_field()`` をオーバーライドできます:"

msgid ""
"Takes an instance of :class:`~django.forms.Form` and the name of the field. "
"The return value will be used when accessing the field in a template. Most "
"likely it will be an instance of a subclass of :class:`~django.forms."
"BoundField`."
msgstr ""
":class:`~django.forms.Form` のインスタンスとフィールドの名前を受け取ります。"
"テンプレートでフィールドにアクセスする際に使用される返り値は、ほとんどの場"
"合、 :class:`~django.forms.BoundField` のサブクラスのインスタンスになります。"

msgid ""
"If you have a ``GPSCoordinatesField``, for example, and want to be able to "
"access additional information about the coordinates in a template, this "
"could be implemented as follows::"
msgstr ""
"たとえば ``GPSCoordinatesField`` を持っていて、テンプレート内で座標に関する追"
"加情報にアクセスしたい場合、以下のように実装できます:"

msgid ""
"Now you can access the country in a template with ``{{ form.coordinates."
"country }}``."
msgstr ""
"これで、テンプレート内で ``{{ form.coordinates.country }}`` を使って国にアク"
"セスできるようになりました。"

msgid "Binding uploaded files to a form"
msgstr "アップロードされたファイルをフォームにバインドする"

msgid ""
"Dealing with forms that have ``FileField`` and ``ImageField`` fields is a "
"little more complicated than a normal form."
msgstr ""
"``FileField`` と ``ImageField`` フィールドを持つフォームを扱うのは、通常の"
"フォームよりも少し複雑です。"

msgid ""
"Firstly, in order to upload files, you'll need to make sure that your "
"``<form>`` element correctly defines the ``enctype`` as ``\"multipart/form-"
"data\"``:"
msgstr ""
"まず、ファイルをアップロードするには、``<form>`` 要素が ``enctype`` を "
"``\"multipart/form-data\"`` として正しく定義していることを確認する必要があり"
"ます:"

msgid ""
"Secondly, when you use the form, you need to bind the file data. File data "
"is handled separately to normal form data, so when your form contains a "
"``FileField`` and ``ImageField``, you will need to specify a second argument "
"when you bind your form. So if we extend our ContactForm to include an "
"``ImageField`` called ``mugshot``, we need to bind the file data containing "
"the mugshot image:"
msgstr ""
"次に、フォームを使用する際には、ファイルデータをバインドする必要があります。"
"ファイルデータは通常のフォームデータとは別に扱われるため、フォームに "
"``FileField`` や ``ImageField`` が含まれている場合、フォームをバインドする際"
"に第2引数を指定する必要があります。したがって、 ``ImageField`` を "
"``mugshot`` という名前で ContactForm に追加した場合、mugshot イメージを含む"
"ファイルデータをバインドする必要があります:"

msgid ""
"In practice, you will usually specify ``request.FILES`` as the source of "
"file data (just like you use ``request.POST`` as the source of form data):"
msgstr ""
"実際には、通常、（フォームデータのソースとして ``request.POST`` を使用するの"
"と同様に、）ファイルデータのソースとして ``request.FILES`` を指定します:"

msgid ""
"Constructing an unbound form is the same as always -- omit both form data "
"*and* file data:"
msgstr ""
"バインドされていないフォームを作成する方法は、いつも通りです。フォームデータ "
"*と* ファイルデータの両方を省略します。"

msgid "Testing for multipart forms"
msgstr "マルチパートフォームのテスト"

msgid ""
"If you're writing reusable views or templates, you may not know ahead of "
"time whether your form is a multipart form or not. The ``is_multipart()`` "
"method tells you whether the form requires multipart encoding for submission:"
msgstr ""
"再利用可能なビューやテンプレートを書いている場合、フォームがマルチパート"
"フォームかどうかを事前に知ることができないかもしれません。 "
"``is_multipart()`` メソッドは、フォームの送信にマルチパートエンコーディングが"
"必要かどうかを教えてくれます:"

msgid "Here's an example of how you might use this in a template:"
msgstr "テンプレートでの使い方の例です:"

msgid "Subclassing forms"
msgstr "フォームをサブクラス化する"

msgid ""
"If you have multiple ``Form`` classes that share fields, you can use "
"subclassing to remove redundancy."
msgstr ""
"複数の ``Form`` クラスがフィールドを共有している場合、サブクラス化を利用して"
"冗長性を排除できます。"

msgid ""
"When you subclass a custom ``Form`` class, the resulting subclass will "
"include all fields of the parent class(es), followed by the fields you "
"define in the subclass."
msgstr ""
"カスタム ``Form`` クラスをサブクラス化すると、親クラスのすべてのフィールドが"
"含まれ、その後にサブクラスで定義したフィールドが続きます。"

msgid ""
"In this example, ``ContactFormWithPriority`` contains all the fields from "
"``ContactForm``, plus an additional field, ``priority``. The ``ContactForm`` "
"fields are ordered first:"
msgstr ""
"この例では、``ContactFormWithPriority`` は ``ContactForm`` の全てのフィールド"
"に加え、追加のフィールド ``priority`` を含んでいます。``ContactForm`` の"
"フィールドが最初に配置されます:"

msgid ""
"It's possible to subclass multiple forms, treating forms as mixins. In this "
"example, ``BeatleForm`` subclasses both ``PersonForm`` and "
"``InstrumentForm`` (in that order), and its field list includes the fields "
"from the parent classes:"
msgstr ""
"複数のフォームをサブクラス化し、フォームをミックスインとして扱うことができま"
"す。この例では、``BeatleForm`` が ``PersonForm`` と ``InstrumentForm`` （この"
"順番で）の両方をサブクラス化し、そのフィールドリストは親クラスのフィールドを"
"含んでいます:"

msgid ""
"It's possible to declaratively remove a ``Field`` inherited from a parent "
"class by setting the name of the field to ``None`` on the subclass. For "
"example:"
msgstr ""
"親クラスから継承された ``Field`` を、サブクラスでフィールドの名前を ``None`` "
"に設定することで、宣言的にフィールドを削除できます。たとえば次のようにします:"

msgid "Prefixes for forms"
msgstr "フォームのプレフィックス"

msgid ""
"You can put several Django forms inside one ``<form>`` tag. To give each "
"``Form`` its own namespace, use the ``prefix`` keyword argument:"
msgstr ""
"1 つの ``<form>`` タグの中に複数の Django フォームを配置できます。各 "
"``Form`` に独自の名前空間を与えるには、``prefix`` キーワード引数を使用しま"
"す。"

msgid "The prefix can also be specified on the form class:"
msgstr "プレフィックスは、フォームクラスにも指定できます："

msgid "Form fields"
msgstr "フォーム フィールド"

msgid ""
"When you create a ``Form`` class, the most important part is defining the "
"fields of the form. Each field has custom validation logic, along with a few "
"other hooks."
msgstr ""
"``Form`` クラスを作成時の一番重要な部分は、form のフィールド (field) の定義で"
"す。各フィールドにはカスタムの検証ロジックがあり、他にいくつかのフックもあり"
"ます。"

msgid ""
"Although the primary way you'll use ``Field`` classes is in ``Form`` "
"classes, you can also instantiate them and use them directly to get a better "
"idea of how they work. Each ``Field`` instance has a ``clean()`` method, "
"which takes a single argument and either raises a ``django.core.exceptions."
"ValidationError`` exception or returns the clean value:"
msgstr ""
"``Field`` クラスを使用する主な方法は ``Form`` クラス内ですが、それらを直接イ"
"ンスタンス化して使用することで、その動作をより良く理解できます。各 ``Field`` "
"インスタンスには、単一の引数を取る ``clean()`` メソッドがあり、``django.core."
"exceptions.ValidationError`` 例外を発生させるか、クリーンな値を返します。"

msgid "Core field arguments"
msgstr "field のコアとなる引数"

msgid ""
"Each ``Field`` class constructor takes at least these arguments. Some "
"``Field`` classes take additional, field-specific arguments, but the "
"following should *always* be accepted:"
msgstr ""
"各 ``Field`` クラスのコンストラクタは少なくとも以下の引数を受け付けます。"
"``Field`` クラスによっては追加のフィールド固有の引数も取れることがあります"
"が、以下に説明する引数は *常に* 取ることができます。"

msgid "``required``"
msgstr "``required``"

msgid ""
"By default, each ``Field`` class assumes the value is required, so if you "
"pass an empty value -- either ``None`` or the empty string (``\"\"``) -- "
"then ``clean()`` will raise a ``ValidationError`` exception:"
msgstr ""
"デフォルトでは、各 ``Field`` クラスは値が必須であると想定しているため、空の"
"値 (``None`` もしくは空文字列 (``\"\"``)) を渡すと、``clean()`` は "
"``ValidationError`` 例外を発生させます。"

msgid ""
"To specify that a field is *not* required, pass ``required=False`` to the "
"``Field`` constructor:"
msgstr ""
"フィールドが必須で *ない* ことを指定するには、``Field`` コンストラクタに "
"``required=False`` を渡します:"

msgid ""
"If a ``Field`` has ``required=False`` and you pass ``clean()`` an empty "
"value, then ``clean()`` will return a *normalized* empty value rather than "
"raising ``ValidationError``. For ``CharField``, this will return :attr:"
"`~CharField.empty_value` which defaults to an empty string. For other "
"``Field`` classes, it might be ``None``. (This varies from field to field.)"
msgstr ""
"``Field`` に ``required=False`` が設定されていて、``clean()`` に空の値を渡し"
"た場合、``clean()`` は ``ValidationError`` を発生させる代わりに、 *正規化され"
"た* 空の値を返します。``CharField`` の場合、これは :attr:`~CharField."
"empty_value` を返し、デフォルトでは空の文字列となります。他の ``Field`` クラ"
"スでは、``None`` になることもあります。(これはフィールドによって異なります。)"

msgid ""
"Widgets of required form fields have the ``required`` HTML attribute. Set "
"the :attr:`Form.use_required_attribute` attribute to ``False`` to disable "
"it. The ``required`` attribute isn't included on forms of formsets because "
"the browser validation may not be correct when adding and deleting formsets."
msgstr ""
"必須フォームフィールドのウィジェットは、``required`` HTML属性を持っています。"
"これを無効にするには、 :attr:`Form.use_required_attribute` 属性を ``False`` "
"に設定します。フォームセットのフォームには、``required`` 属性が含まれていませ"
"ん。これは、フォームセットの追加や削除を行う際にブラウザの検証が正しくない可"
"能性があるためです。"

msgid "``label``"
msgstr "``label``"

msgid ""
"The ``label`` argument lets you specify the \"human-friendly\" label for "
"this field. This is used when the ``Field`` is displayed in a ``Form``."
msgstr ""
"``label`` 属性は、フィールドに対する \"人が読みやすい\" ラベルを指定します。"
"このラベルは ``Field`` が ``Form`` 内で表示されるときに使用されます。"

msgid ""
"As explained in \"Outputting forms as HTML\" above, the default label for a "
"``Field`` is generated from the field name by converting all underscores to "
"spaces and upper-casing the first letter. Specify ``label`` if that default "
"behavior doesn't result in an adequate label."
msgstr ""
"上述の \"HTML としてフォームを出力する\" で説明したとおり、``Field`` に対する"
"デフォルトのラベルはアンダースコアを空白に、また単語の最初の小文字を大文字に"
"変換して生成されます。 デフォルトではない文字列を表示したい場合には、"
"``label`` を指定してください。"

msgid ""
"Here's a full example ``Form`` that implements ``label`` for two of its "
"fields. We've specified ``auto_id=False`` to simplify the output:"
msgstr ""
"以下は、2 つのフィールドに対して ``label`` を実装する ``Form`` の完全な例で"
"す。出力を簡略化するために、 ``auto_id=False`` を指定しています:"

msgid "``label_suffix``"
msgstr "``label_suffix``"

msgid ""
"The ``label_suffix`` argument lets you override the form's :attr:`~django."
"forms.Form.label_suffix` on a per-field basis:"
msgstr ""
"``label_suffix`` 引数を使用すると、フォームの :attr:`~django.forms.Form."
"label_suffix` をフィールドごとに上書きできます。"

msgid "``initial``"
msgstr "``initial``"

msgid ""
"The ``initial`` argument lets you specify the initial value to use when "
"rendering this ``Field`` in an unbound ``Form``."
msgstr ""
"``initial`` 属性は、``Field`` が結びつけられていない ``Form`` で表示されると"
"きに使われる初期値を指定します。"

msgid ""
"To specify dynamic initial data, see the :attr:`Form.initial` parameter."
msgstr ""
"動的に初期値を指定する方法は、:attr:`Form.initial` パラメータを参照してくださ"
"い。"

msgid ""
"The use-case for this is when you want to display an \"empty\" form in which "
"a field is initialized to a particular value. For example:"
msgstr ""
"これの使用例は、あるフィールドが特定の値で初期化された「空」のフォームを表示"
"したい場合です。例えば:"

msgid ""
"You may be thinking, why not just pass a dictionary of the initial values as "
"data when displaying the form? Well, if you do that, you'll trigger "
"validation, and the HTML output will include any validation errors:"
msgstr ""
"初期値の辞書をフォームの表示時にデータとして渡すだけでよいのでは？と考えるか"
"もしれません。しかし、それを行うとバリデーションがトリガーされ、HTML出力には"
"バリデーションエラーが含まれます。"

msgid ""
"This is why ``initial`` values are only displayed for unbound forms. For "
"bound forms, the HTML output will use the bound data."
msgstr ""
"これが、``initial`` 値が未結合フォームにのみ表示される理由です。結合フォーム"
"の場合、HTML 出力は結合データを使用します。"

msgid ""
"Also note that ``initial`` values are *not* used as \"fallback\" data in "
"validation if a particular field's value is not given. ``initial`` values "
"are *only* intended for initial form display:"
msgstr ""
"また、``initial`` 値は、特定のフィールドの値が指定されていない場合に、バリ"
"デーション内で \"デフォルト\" データとして使用されません。``initial`` 値は、"
"初期フォーム表示のためのみに意図されています。"

msgid "Instead of a constant, you can also pass any callable:"
msgstr "定数の代わりに、任意の呼び出し可能オブジェクトを渡すこともできます:"

msgid ""
"The callable will be evaluated only when the unbound form is displayed, not "
"when it is defined."
msgstr ""
"呼び出し可能オブジェクトは、定義される時ではなく、未バインドの形式が表示され"
"る時にのみ評価されます。"

msgid "``widget``"
msgstr "``widget``"

msgid ""
"The ``widget`` argument lets you specify a ``Widget`` class to use when "
"rendering this ``Field``. See :doc:`/ref/forms/widgets` for more information."
msgstr ""
"``widget`` 引数は、``Field`` をレンダリングするときに使う ``Widget`` クラスを"
"指定します。詳しくは :doc:`/ref/forms/widgets` を参照してください。"

msgid "``help_text``"
msgstr "``help_text``"

msgid ""
"The ``help_text`` argument lets you specify descriptive text for this "
"``Field``. If you provide ``help_text``, it will be displayed next to the "
"``Field`` when the ``Field`` is rendered by one of the convenience ``Form`` "
"methods (e.g., ``as_ul()``)."
msgstr ""
"``help_text`` 引数は、``Field`` を説明するテキストを指定します。"
"``help_text`` を指定した場合、容易な ``Form`` メソッド (たとえば "
"``as_ul()``) で ``Field`` がレンダリングされるときに、``Field`` の隣に表示さ"
"れます。"

msgid ""
"Like the model field's :attr:`~django.db.models.Field.help_text`, this value "
"isn't HTML-escaped in automatically-generated forms."
msgstr ""
"モデルフィールドの :attr:`~django.db.models.Field.help_text` と同じく、値は自"
"動的に生成されるフォーム内で HTML 用にエスケープされません。"

msgid ""
"Here's a full example ``Form`` that implements ``help_text`` for two of its "
"fields. We've specified ``auto_id=False`` to simplify the output:"
msgstr ""
"以下は、2つのフィールドに ``help_text`` を実装した ``Form`` の完全な例です。"
"出力を単純化するために ``auto_id=False`` を指定しています:"

msgid ""
"When a field has help text and the widget is not rendered in a "
"``<fieldset>``, ``aria-describedby`` is added to the ``<input>`` to "
"associate it to the help text:"
msgstr ""
"フィールドにヘルプテキストがあり、ウィジェットが ``<fieldset>`` でレンダリン"
"グされていない場合、``aria-describedby`` が ``<input>`` に追加され、ヘルプテ"
"キストと関連付けられます:"

msgid ""
"When adding a custom ``aria-describedby`` attribute, make sure to also "
"include the ``id`` of the ``help_text`` element (if used) in the desired "
"order. For screen reader users, descriptions will be read in their order of "
"appearance inside ``aria-describedby``:"
msgstr ""
"カスタム ``aria-describedby`` 属性を追加する際には、使用している場合は "
"``help_text`` 要素の ``id`` も希望する順序で含めることを確認してください。ス"
"クリーンリーダーのユーザーにとって、説明は ``aria-describedby`` 内の出現順に"
"読み上げられます。"

msgid ""
"``aria-describedby`` was added to associate ``help_text`` with its input."
msgstr ""
"``help_text`` をその入力と関連付けるために、``aria-describedby`` が追加されま"
"した。"

msgid "``error_messages``"
msgstr "``error_messages``"

msgid ""
"The ``error_messages`` argument lets you override the default messages that "
"the field will raise. Pass in a dictionary with keys matching the error "
"messages you want to override. For example, here is the default error "
"message:"
msgstr ""
"``error_messages`` 引数を使用すると、フィールドが出すデフォルトのメッセージを"
"上書きできます。上書きしたいエラーメッセージに一致するキーを持つ辞書を渡して"
"ください。例えば、これはデフォルトのエラーメッセージです："

msgid "And here is a custom error message:"
msgstr "そしてこれがカスタムエラーメッセージです:"

msgid ""
"In the `built-in Field classes`_ section below, each ``Field`` defines the "
"error message keys it uses."
msgstr ""
"以下の `built-in Field classes`_ セクションでは、各 ``Field`` が使用するエ"
"ラーメッセージのキーを定義しています。"

msgid "``validators``"
msgstr "``validators``"

msgid ""
"The ``validators`` argument lets you provide a list of validation functions "
"for this field."
msgstr ""
"``validators`` 引数は、フィールドに対するバリデーション関数のリストを指定しま"
"す。"

msgid ""
"See the :doc:`validators documentation </ref/validators>` for more "
"information."
msgstr ""
"詳しくは :doc:`バリデータのドキュメント </ref/validators>` を参照してくださ"
"い。"

msgid "``localize``"
msgstr "``localize``"

msgid ""
"The ``localize`` argument enables the localization of form data input, as "
"well as the rendered output."
msgstr ""
"``localize`` 引数は、form データの入力とレンダリングした出力のローカライズを"
"有効にします。"

msgid ""
"See the :doc:`format localization </topics/i18n/formatting>` documentation "
"for more information."
msgstr ""
"詳しくは :doc:`表示形式のローカライズ </topics/i18n/formatting>` ドキュメント"
"を読んでください。"

msgid "``disabled``"
msgstr "``disabled``"

msgid ""
"The ``disabled`` boolean argument, when set to ``True``, disables a form "
"field using the ``disabled`` HTML attribute so that it won't be editable by "
"users. Even if a user tampers with the field's value submitted to the "
"server, it will be ignored in favor of the value from the form's initial "
"data."
msgstr ""
"``disabled`` はブール値の引数を取ります。 ``True`` にセットされた場合、フォー"
"ムのフィールドを ``disabled`` HTML 属性を使って無効化し、ユーザーが編集できな"
"いようにします。たとえユーザーが勝手にフィールドの値を書き換えてサーバーに送"
"信したとしても、フォームの初期データを使い、書き換えられたデータは無視しま"
"す。"

msgid ""
"The ``template_name`` argument allows a custom template to be used when the "
"field is rendered with :meth:`~django.forms.BoundField.as_field_group`. By "
"default this value is set to ``\"django/forms/field.html\"``. Can be changed "
"per field by overriding this attribute or more generally by overriding the "
"default template, see also :ref:`overriding-built-in-field-templates`."
msgstr ""
"``template_name`` 引数は、フィールドが :meth:`~django.forms.BoundField."
"as_field_group` でレンダリングされるときにカスタムテンプレートを使用できるよ"
"うにします。デフォルトの値は ``\"django/forms/field.html\"`` に設定されていま"
"す。この属性をオーバーライドするか、デフォルトテンプレートをオーバーライドす"
"ることで、フィールドごとに変更できます。詳細は、 :ref:`overriding-built-in-"
"field-templates` も参照してください。"

msgid "Checking if the field data has changed"
msgstr "フィールドのデータの変更チェック"

msgid "``has_changed()``"
msgstr "``has_changed()``"

msgid ""
"The ``has_changed()`` method is used to determine if the field value has "
"changed from the initial value. Returns ``True`` or ``False``."
msgstr ""
"``has_changed()`` メソッドは、フィールドの値が最初の値から変更されたかどうか"
"を確認するのに使用します。``True`` または ``False`` を返します。"

msgid "See the :class:`Form.has_changed()` documentation for more information."
msgstr "詳しくは :class:`Form.has_changed()` ドキュメントを読んでください。"

msgid "Built-in ``Field`` classes"
msgstr "ビルトインの ``Field`` クラス"

msgid ""
"Naturally, the ``forms`` library comes with a set of ``Field`` classes that "
"represent common validation needs. This section documents each built-in "
"field."
msgstr ""
"当然ながら、``forms`` ライブラリには共通のバリデーションニーズを代表する一連"
"の ``Field`` クラスが含まれています。このセクションでは、各ビルトインフィール"
"ドについて説明します。"

msgid ""
"For each field, we describe the default widget used if you don't specify "
"``widget``. We also specify the value returned when you provide an empty "
"value (see the section on ``required`` above to understand what that means)."
msgstr ""
"各フィールドについて、``widget`` を指定しない場合に使用されるデフォルトウィ"
"ジェットを説明します。また、空の値を提供した場合に返される値も指定します（こ"
"れがどういう意味かについては ``required`` セクションを参照してください）。"

msgid "``BooleanField``"
msgstr "``BooleanField``"

msgid "Default widget: :class:`CheckboxInput`"
msgstr "デフォルトのウィジェット: :class:`CheckboxInput`"

msgid "Empty value: ``False``"
msgstr "空の値: ``False``"

msgid "Normalizes to: A Python ``True`` or ``False`` value."
msgstr "正規化後の値: Pythonの ``True`` または ``False`` になります。"

msgid ""
"Validates that the value is ``True`` (e.g. the check box is checked) if the "
"field has ``required=True``."
msgstr ""
"フィールドが ``required=True`` を持つ場合、値が ``True`` (例えば、チェック"
"ボックスがチェックされている)であることを確認します。"

msgid "Error message keys: ``required``"
msgstr "エラーメッセージのキー: ``required``"

msgid ""
"Since all ``Field`` subclasses have ``required=True`` by default, the "
"validation condition here is important. If you want to include a boolean in "
"your form that can be either ``True`` or ``False`` (e.g. a checked or "
"unchecked checkbox), you must remember to pass in ``required=False`` when "
"creating the ``BooleanField``."
msgstr ""
"すべての ``Field`` のサブクラスはデフォルトで ``required=True`` ですので、こ"
"こでのバリデーション条件は重要です。フォームに True または False のどちらかで"
"あるブール値 (たとえば、チェックありまたはチェックなしのチェックボックス) を"
"含めたい場合は、 ``BooleanField`` を作成する際に ``required=False`` を渡すこ"
"とを忘れないでください。"

msgid "``CharField``"
msgstr "``CharField``"

msgid "Default widget: :class:`TextInput`"
msgstr "デフォルトのウィジェット: :class:`TextInput`"

msgid "Empty value: Whatever you've given as :attr:`empty_value`."
msgstr "空の値: :attr:`empty_value` として与えたもの"

msgid "Normalizes to: A string."
msgstr "正規化後の値: 文字列になります。"

msgid ""
"Uses :class:`~django.core.validators.MaxLengthValidator` and :class:`~django."
"core.validators.MinLengthValidator` if ``max_length`` and ``min_length`` are "
"provided. Otherwise, all inputs are valid."
msgstr ""
"``max_length`` と ``min_length`` が与えられた場合は、:class:`~django.core."
"validators.MaxLengthValidator` と :class:`~django.core.validators."
"MinLengthValidator` を使用します。それ以外の場合は、すべての入力が有効です。"

msgid "Error message keys: ``required``, ``max_length``, ``min_length``"
msgstr "エラーメッセージキー: ``required``, ``max_length``, ``min_length``"

msgid "Has the following optional arguments for validation:"
msgstr "次のオプション引数がバリデーションに使用されます:"

msgid ""
"If provided, these arguments ensure that the string is at most or at least "
"the given length."
msgstr ""
"これらの引数が提供された場合、文字列が与えられた長さ以下か以上であることを保"
"証します。"

msgid ""
"If ``True`` (default), the value will be stripped of leading and trailing "
"whitespace."
msgstr "``True`` （デフォルト）の場合、値から先頭と末尾の空白が削除されます。"

msgid "The value to use to represent \"empty\". Defaults to an empty string."
msgstr "「空」を表すのに使用する値です。デフォルトは空の文字列です。"

msgid "``ChoiceField``"
msgstr "``ChoiceField``"

msgid "Default widget: :class:`Select`"
msgstr "デフォルトのウィジェット: :class:`Select`"

msgid "Empty value: ``''`` (an empty string)"
msgstr "空の値: ``''`` (空の文字列)"

msgid "Validates that the given value exists in the list of choices."
msgstr "指定された値が選択肢のリスト内に存在することを検証します。"

msgid "Error message keys: ``required``, ``invalid_choice``"
msgstr "エラーメッセージのキー: ``required``, ``invalid_choice``"

msgid ""
"The ``invalid_choice`` error message may contain ``%(value)s``, which will "
"be replaced with the selected choice."
msgstr ""
"``invalid_choice`` エラーメッセージには ``%(value)s`` が含まれていることがあ"
"り、選択された選択肢に置き換えられます。"

msgid "Takes one extra argument:"
msgstr "1つの追加引数を受け取ります:"

msgid ""
"Either an :term:`iterable` of 2-tuples to use as choices for this field, :"
"ref:`enumeration type <field-choices-enum-types>`, or a callable that "
"returns such an iterable. This argument accepts the same formats as the "
"``choices`` argument to a model field. See the :ref:`model field reference "
"documentation on choices <field-choices>` for more details. If the argument "
"is a callable, it is evaluated each time the field's form is initialized, in "
"addition to during rendering. Defaults to an empty list."
msgstr ""
"このフィールドの選択肢として使用する2値タプルの :term:`iterable` 、 :ref:`列"
"挙型 <field-choices-enum-types>` 、またはそのようなイテラブルを返す呼び出し可"
"能オブジェクトのいずれか。この引数は、モデルフィールドの ``choices`` 引数と同"
"じ形式を受け入れます。詳細については、 :ref:`モデルフィールドのリファレンスド"
"キュメント <field-choices>` を参照してください。引数が呼び出し可能オブジェク"
"トの場合、フィールドのフォームが初期化されるたび、およびレンダリング中に評価"
"されます。デフォルトは空のリストです。"

msgid "Choice type"
msgstr "選択肢 (Choice) 型"

msgid ""
"This field normalizes choices to strings, so if choices are required in "
"other data types, such as integers or booleans, consider using :class:"
"`TypedChoiceField` instead."
msgstr ""
"このフィールドは選択肢を文字列に正規化するため、整数やブール値など、他のデー"
"タ型で選択肢が必要な場合は、代わりに :class:`TypedChoiceField` を使用すること"
"を検討してください。"

msgid ""
"Support for mappings and using :ref:`enumeration types <field-choices-enum-"
"types>` directly in ``choices`` was added."
msgstr ""
"マッピングのサポートと、``choices`` で直接 :ref:`列挙型(enum types) <field-"
"choices-enum-types>` を使用する機能が追加されました。"

msgid "``DateField``"
msgstr "``DateField``"

msgid "Default widget: :class:`DateInput`"
msgstr "デフォルトのウィジェット: :class:`DateInput`"

msgid "Empty value: ``None``"
msgstr "空の値: ``None``"

msgid "Normalizes to: A Python ``datetime.date`` object."
msgstr "正規化後の値: Python の ``datetime.date`` オブジェクトになります。"

msgid ""
"Validates that the given value is either a ``datetime.date``, ``datetime."
"datetime`` or string formatted in a particular date format."
msgstr ""
"与えられた値が ``datetime.date``、``datetime.datetime`` または特定の日付の表"
"示形式のどれかに当てはまるか検証します。"

msgid "Error message keys: ``required``, ``invalid``"
msgstr "エラーメッセージのキー: ``required``、``invalid``"

msgid "Takes one optional argument:"
msgstr "1 つの省略可能な引数を取ります:"

msgid ""
"An iterable of formats used to attempt to convert a string to a valid "
"``datetime.date`` object."
msgstr ""
"文字列を有効な ``datetime.date`` オブジェクトに変換しようとする際に使用される"
"フォーマットのイテラブル。"

msgid ""
"If no ``input_formats`` argument is provided, the default input formats are "
"taken from the active locale format ``DATE_INPUT_FORMATS`` key, or from :"
"setting:`DATE_INPUT_FORMATS` if localization is disabled. See also :doc:"
"`format localization </topics/i18n/formatting>`."
msgstr ""
"``input_formats`` 引数が指定されていない場合、デフォルトの入力形式は有効なロ"
"ケール形式の ``DATE_INPUT_FORMATS`` キーから取得されるか、ローカライズが無効"
"になっている場合は :setting:`DATE_INPUT_FORMATS` から取得されます。また、 :"
"doc:`表示形式のローカライズ </topics/i18n/formatting>` も参照してください。"

msgid "``DateTimeField``"
msgstr "``DateTimeField``"

msgid "Default widget: :class:`DateTimeInput`"
msgstr "デフォルトのウィジェット: :class:`DateTimeInput`"

msgid "Normalizes to: A Python ``datetime.datetime`` object."
msgstr "正規化後の値: Python の ``datetime.datetime`` オブジェクトになります。"

msgid ""
"Validates that the given value is either a ``datetime.datetime``, ``datetime."
"date`` or string formatted in a particular datetime format."
msgstr ""
"与えられた値が ``datetime.datetime``、``datetime.date`` または特定の日時の表"
"示形式の文字列のどれかに当てはまるか検証します。"

msgid ""
"An iterable of formats used to attempt to convert a string to a valid "
"``datetime.datetime`` object, in addition to ISO 8601 formats."
msgstr ""
"ISO 8601 形式に加えて、文字列を有効な ``datetime.datetime`` オブジェクトに変"
"換しようと試みる際に使用される形式のイテラブル。"

msgid ""
"The field always accepts strings in ISO 8601 formatted dates or similar "
"recognized by :func:`~django.utils.dateparse.parse_datetime`. Some examples "
"are:"
msgstr ""
"このフィールドは常に、ISO 8601形式の日付や :func:`~django.utils.dateparse."
"parse_datetime` で認識される類似の形式の文字列を受け付けます。いくつかの例を"
"挙げます:"

msgid "``'2006-10-25 14:30:59'``"
msgstr "``'2006-10-25 14:30:59'``"

msgid "``'2006-10-25T14:30:59'``"
msgstr "``'2006-10-25T14:30:59'``"

msgid "``'2006-10-25 14:30'``"
msgstr "``'2006-10-25 14:30'``"

msgid "``'2006-10-25T14:30'``"
msgstr "``'2006-10-25T14:30'``"

msgid "``'2006-10-25T14:30Z'``"
msgstr "``'2006-10-25T14:30Z'``"

msgid "``'2006-10-25T14:30+02:00'``"
msgstr "``'2006-10-25T14:30+02:00'``"

msgid "``'2006-10-25'``"
msgstr "``'2006-10-25'``"

msgid ""
"If no ``input_formats`` argument is provided, the default input formats are "
"taken from the active locale format ``DATETIME_INPUT_FORMATS`` and "
"``DATE_INPUT_FORMATS`` keys, or from :setting:`DATETIME_INPUT_FORMATS` and :"
"setting:`DATE_INPUT_FORMATS` if localization is disabled. See also :doc:"
"`format localization </topics/i18n/formatting>`."
msgstr ""
"``input_formats`` 引数が提供されない場合、デフォルトの入力フォーマットはアク"
"ティブなロケールフォーマットの ``DATETIME_INPUT_FORMATS`` と "
"``DATE_INPUT_FORMATS`` キーから取得されます。もしくは、ローカライズが無効の場"
"合は :setting:`DATETIME_INPUT_FORMATS` と :setting:`DATE_INPUT_FORMATS` から"
"取得されます。また、表示形式のローカライズについては :doc:`表示形式のローカラ"
"イズ </topics/i18n/formatting>` も参照してください。"

msgid "``DecimalField``"
msgstr "``DecimalField``"

msgid ""
"Default widget: :class:`NumberInput` when :attr:`Field.localize` is "
"``False``, else :class:`TextInput`."
msgstr ""
"デフォルトのウィジェット: :attr:`Field.localize` が ``False`` のとき :class:"
"`NumberInput`、``True`` のとき :class:`TextInput`."

msgid "Normalizes to: A Python ``decimal``."
msgstr "正規化後の値: Python の ``decimal`` になります。"

msgid ""
"Validates that the given value is a decimal. Uses :class:`~django.core."
"validators.MaxValueValidator` and :class:`~django.core.validators."
"MinValueValidator` if ``max_value`` and ``min_value`` are provided. Uses :"
"class:`~django.core.validators.StepValueValidator` if ``step_size`` is "
"provided. Leading and trailing whitespace is ignored."
msgstr ""
"指定された値が10進数であることを検証します。 ``max_value`` と ``min_value`` "
"が提供されている場合は :class:`~django.core.validators.MaxValueValidator` お"
"よび :class:`~django.core.validators.MinValueValidator` を使用します。 "
"``step_size`` が提供されている場合は :class:`~django.core.validators."
"StepValueValidator` を使用します。先頭及び末尾の空白は無視されます。"

msgid ""
"Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``, "
"``max_digits``, ``max_decimal_places``, ``max_whole_digits``, ``step_size``."
msgstr ""
"エラーメッセージのキー: ``required``, ``invalid``, ``max_value``, "
"``min_value``, ``max_digits``, ``max_decimal_places``, ``max_whole_digits``, "
"``step_size`` 。"

msgid ""
"The ``max_value`` and ``min_value`` error messages may contain "
"``%(limit_value)s``, which will be substituted by the appropriate limit. "
"Similarly, the ``max_digits``, ``max_decimal_places`` and "
"``max_whole_digits`` error messages may contain ``%(max)s``."
msgstr ""
"``max_value`` および ``min_value`` のエラーメッセージには "
"``%(limit_value)s`` が含まれる場合があり、これは適切な制限値に置き換えられま"
"す。同様に、``max_digits``、``max_decimal_places``、および "
"``max_whole_digits`` のエラーメッセージには ``%(max)s`` が含まれる場合があり"
"ます。"

msgid "Takes five optional arguments:"
msgstr "5つのオプション引数を受け取ります:"

msgid ""
"These control the range of values permitted in the field, and should be "
"given as ``decimal.Decimal`` values."
msgstr ""
"これらはフィールドに許可される値の範囲を制御し、``decimal.Decimal`` 値として"
"指定する必要があります。"

msgid ""
"The maximum number of digits (those before the decimal point plus those "
"after the decimal point, with leading zeros stripped) permitted in the value."
msgstr ""
"値で許容される桁数の最大値 (小数点より前と小数点より後の桁数を合わせ、先頭の"
"ゼロは除く)。"

msgid "The maximum number of decimal places permitted."
msgstr "許可される小数点以下の最大桁数。"

msgid ""
"Limit valid inputs to an integral multiple of ``step_size``. If "
"``min_value`` is also provided, it's added as an offset to determine if the "
"step size matches."
msgstr ""
"有効な入力を ``step_size`` の整数倍に制限します。もし ``min_value`` も指定さ"
"れている場合、その値をオフセットとして加算し、ステップサイズが一致しているか"
"を判断します。"

msgid "``DurationField``"
msgstr "``DurationField``"

msgid "Normalizes to: A Python :class:`~python:datetime.timedelta`."
msgstr ""
"正規化後の値: Python の :class:`~python:datetime.timedelta` になります。"

msgid ""
"Validates that the given value is a string which can be converted into a "
"``timedelta``. The value must be between :attr:`datetime.timedelta.min` and :"
"attr:`datetime.timedelta.max`."
msgstr ""
"指定された値が ``timedelta`` に変換できる文字列であることを検証します。値は :"
"attr:`datetime.timedelta.min` と :attr:`datetime.timedelta.max` の間でなけれ"
"ばなりません。"

msgid "Error message keys: ``required``, ``invalid``, ``overflow``."
msgstr "エラーメッセージのキー: ``required``、``invalid``、``overflow`` 。"

msgid ""
"Accepts any format understood by :func:`~django.utils.dateparse."
"parse_duration`."
msgstr ""
":func:`~django.utils.dateparse.parse_duration` が理解できるどんな形式でも受け"
"入れます。"

msgid "``EmailField``"
msgstr "``EmailField``"

msgid "Default widget: :class:`EmailInput`"
msgstr "デフォルトのウィジェット: :class:`EmailInput`"

msgid "Empty value: Whatever you've given as ``empty_value``."
msgstr "空の値: ``empty_value`` として指定したものです。"

msgid ""
"Uses :class:`~django.core.validators.EmailValidator` to validate that the "
"given value is a valid email address, using a moderately complex regular "
"expression."
msgstr ""
":class:`~django.core.validators.EmailValidator` を使用して、与えられた値が有"
"効なメールアドレスであることを、比較的複雑な正規表現を使用してバリデーション"
"します。"

msgid ""
"Has the optional arguments ``max_length``, ``min_length``, and "
"``empty_value`` which work just as they do for :class:`CharField`. The "
"``max_length`` argument defaults to 320 (see :rfc:`3696#section-3`)."
msgstr ""
"オプション引数として ``max_length``、``min_length``、``empty_value`` があ"
"り、:class:`CharField` と同じように機能します。 ``max_length`` 引数のデフォル"
"ト値は320です( :rfc:`3696#section-3` を参照)。"

msgid "The default value for ``max_length`` was changed to 320 characters."
msgstr "``max_length`` のデフォルト値が 320 文字に変更されました。"

msgid "``FileField``"
msgstr "``FileField``"

msgid "Default widget: :class:`ClearableFileInput`"
msgstr "デフォルトのウィジェット: :class:`ClearableFileInput`"

msgid ""
"Normalizes to: An ``UploadedFile`` object that wraps the file content and "
"file name into a single object."
msgstr ""
"ファイルコンテンツとファイル名を1つのオブジェクトにラッピングした "
"``UploadedFile`` オブジェクトに正規化されます。"

msgid "Can validate that non-empty file data has been bound to the form."
msgstr ""
"フォームに空でないファイルデータがバインドされていることをバリデーションでき"
"ます。"

msgid ""
"Error message keys: ``required``, ``invalid``, ``missing``, ``empty``, "
"``max_length``"
msgstr ""
"エラーメッセージのキー: ``required``, ``invalid``, ``missing``, ``empty``, "
"``max_length``"

msgid ""
"Has the optional arguments for validation: ``max_length`` and "
"``allow_empty_file``. If provided, these ensure that the file name is at "
"most the given length, and that validation will succeed even if the file "
"content is empty."
msgstr ""
"バリデーションのためのオプション引数には ``max_length`` と "
"``allow_empty_file`` があります。もしこれらが指定された場合、ファイル名は与え"
"られた長さ以下でなければならず、ファイルの内容が空でもバリデーションは成功し"
"ます。"

msgid ""
"To learn more about the ``UploadedFile`` object, see the :doc:`file uploads "
"documentation </topics/http/file-uploads>`."
msgstr ""
"``UploadedFile`` オブジェクトについて詳しく知るには、 :doc:`ファイルのアップ"
"ロードのドキュメント </topics/http/file-uploads>` を読んでください。"

msgid ""
"When you use a ``FileField`` in a form, you must also remember to :ref:`bind "
"the file data to the form <binding-uploaded-files>`."
msgstr ""
"フォーム内で ``FileField`` を使用する時は、:ref:`ファイルのデータをフォームに"
"バインド <binding-uploaded-files>` することも必要です。"

msgid ""
"The ``max_length`` error refers to the length of the filename. In the error "
"message for that key, ``%(max)d`` will be replaced with the maximum filename "
"length and ``%(length)d`` will be replaced with the current filename length."
msgstr ""
"``max_length`` エラーは、ファイル名の長さに関連しています。そのキーのエラー"
"メッセージでは、``%(max)d`` は最大ファイル名長さに置き換えられ、"
"``%(length)d`` は現在のファイル名の長さに置き換えられます。"

msgid "``FilePathField``"
msgstr "``FilePathField``"

msgid "Validates that the selected choice exists in the list of choices."
msgstr "選択された選択肢が選択肢のリストに存在することを検証します。"

msgid ""
"The field allows choosing from files inside a certain directory. It takes "
"five extra arguments; only ``path`` is required:"
msgstr ""
"このフィールドは、特定のディレクトリ内のファイルから選択することを可能にしま"
"す。5つの追加引数を受け取りますが、``path`` のみが必須です:"

msgid ""
"The absolute path to the directory whose contents you want listed. This "
"directory must exist."
msgstr ""
"リストアップしたいディレクトリの絶対パス。このディレクトリは存在していなけれ"
"ばなりません。"

msgid ""
"If ``False`` (the default) only the direct contents of ``path`` will be "
"offered as choices. If ``True``, the directory will be descended into "
"recursively and all descendants will be listed as choices."
msgstr ""
"``False`` (デフォルト) の場合、``path`` の直接の内容のみが選択肢として提示さ"
"れます。``True`` の場合、ディレクトリは再帰的に降りていき、すべての子孫が選択"
"肢としてリストアップされます。"

msgid ""
"A regular expression pattern; only files with names matching this expression "
"will be allowed as choices."
msgstr ""
"正規表現パターンです。この表現と一致する名前のファイルのみが選択肢として許可"
"されます。"

msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``True``.  Specifies "
"whether files in the specified location should be included.  Either this or :"
"attr:`allow_folders` must be ``True``."
msgstr ""
"オプション。``True`` または ``False`` のいずれかを指定します。デフォルトは "
"``True`` です。指定された場所のファイルを含めるかどうかを指定します。これか :"
"attr:`allow_folders` のいずれかを ``True`` にする必要があります。"

msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``False``.  Specifies "
"whether folders in the specified location should be included.  Either this "
"or :attr:`allow_files` must be ``True``."
msgstr ""
"オプションです。``True`` または ``False`` です。デフォルトは ``False`` です。"
"指定された場所のフォルダを含めるかどうかを指定します。これか :attr:"
"`allow_files` のいずれかが ``True`` でなければなりません。"

msgid "``FloatField``"
msgstr "``FloatField``"

msgid "Normalizes to: A Python float."
msgstr "正規化後の値: Python の float になります。"

msgid ""
"Validates that the given value is a float. Uses :class:`~django.core."
"validators.MaxValueValidator` and :class:`~django.core.validators."
"MinValueValidator` if ``max_value`` and ``min_value`` are provided. Uses :"
"class:`~django.core.validators.StepValueValidator` if ``step_size`` is "
"provided. Leading and trailing whitespace is allowed, as in Python's "
"``float()`` function."
msgstr ""
"指定された値が float であることを検証します。 ``max_value`` と ``min_value`` "
"が提供されている場合は :class:`~django.core.validators.MaxValueValidator` "
"と :class:`~django.core.validators.MinValueValidator` を使用します。"
"``step_size`` が提供されている場合は :class:`~django.core.validators."
"StepValueValidator` を使用します。Python の ``float()`` 関数と同様、先頭と末"
"尾の空白は許可されます。"

msgid ""
"Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``, "
"``step_size``."
msgstr ""
"エラーメッセージのキー: ``required``、``invalid``、``max_value``、"
"``min_value``、``step_size`` 。"

msgid "Takes three optional arguments:"
msgstr "オプションで3つの引数を取ります:"

msgid "These control the range of values permitted in the field."
msgstr "これらは、フィールドに許可される値の範囲を制御します。"

msgid "``GenericIPAddressField``"
msgstr "``GenericIPAddressField``"

msgid "A field containing either an IPv4 or an IPv6 address."
msgstr "IPv4 または IPv6 アドレスのいずれかを持つフィールドです。"

msgid ""
"Normalizes to: A string. IPv6 addresses are normalized as described below."
msgstr ""
"正規化後の値: 文字列。以下の説明に従って、IPv6 アドレスは正規化されます。"

msgid "Validates that the given value is a valid IP address."
msgstr "与えられた値が有効な IP アドレスを表しているか検証します。"

msgid ""
"The IPv6 address normalization follows :rfc:`4291#section-2.2` section 2.2, "
"including using the IPv4 format suggested in paragraph 3 of that section, "
"like ``::ffff:192.0.2.0``. For example, ``2001:0::0:01`` would be normalized "
"to ``2001::1``, and ``::ffff:0a0a:0a0a`` to ``::ffff:10.10.10.10``. All "
"characters are converted to lowercase."
msgstr ""
"IPv6 アドレスは、 :rfc:`4291#section-2.2` section 2.2 (同セクションの "
"paragraph 3 で提案された IPv4 のフォーマットの使用を含む) にしたがって、 ``::"
"ffff:192.0.2.0`` のように正規化します。たとえば、 ``2001:0::0:01`` は "
"``2001::1`` と正規化され、 ``::ffff:0a0a:0a0a`` は ``::ffff:10.10.10.10`` と"
"正規化されます。そして、すべての文字は小文字に変換されます。"

msgid "Takes two optional arguments:"
msgstr "次の2つの省略可能な引数を取ります:"

msgid ""
"Limits valid inputs to the specified protocol. Accepted values are ``both`` "
"(default), ``IPv4`` or ``IPv6``. Matching is case insensitive."
msgstr ""
"有効な入力を指定したプロトコルに限定します。指定できる値は、 ``both`` (デフォ"
"ルト)、 ``IPv4`` または ``IPv6`` です。大文字・小文字は無視されます。"

msgid ""
"Unpacks IPv4 mapped addresses like ``::ffff:192.0.2.1``. If this option is "
"enabled that address would be unpacked to ``192.0.2.1``. Default is "
"disabled. Can only be used when ``protocol`` is set to ``'both'``."
msgstr ""
"IPv4 にマッピングされた ``::ffff:192.0.2.1`` のようなアドレスをアンパックしま"
"す。このオプションを有効にすると、このアドレスは ``192.0.2.1`` とアンパックさ"
"れます。デフォルトは無効です。``protocol`` が ``'both'`` に設定されている場合"
"にだけ使用できます。"

msgid "``ImageField``"
msgstr "``ImageField``"

msgid ""
"Validates that file data has been bound to the form. Also uses :class:"
"`~django.core.validators.FileExtensionValidator` to validate that the file "
"extension is supported by Pillow."
msgstr ""
"ファイルデータがフォームにバインドされたことを検証します。また、 :class:"
"`~django.core.validators.FileExtensionValidator` を使用して、ファイルの拡張子"
"が Pillow でサポートされているかを検証します。"

msgid ""
"Error message keys: ``required``, ``invalid``, ``missing``, ``empty``, "
"``invalid_image``"
msgstr ""
"エラーメッセージのキー: ``required``, ``invalid``, ``missing``, ``empty``, "
"``invalid_image``"

msgid ""
"Using an ``ImageField`` requires that `Pillow`_ is installed with support "
"for the image formats you use. If you encounter a ``corrupt image`` error "
"when you upload an image, it usually means that Pillow doesn't understand "
"its format. To fix this, install the appropriate library and reinstall "
"Pillow."
msgstr ""
"``ImageField`` を使用するには、使用する画像形式をサポートする `Pillow`_ がイ"
"ンストールされている必要があります。画像をアップロードする際に ``corrupt "
"image`` エラーが発生する場合、通常はその形式を理解していないためです。これを"
"修正するには、適切なライブラリをインストールして Pillow を再インストールして"
"ください。"

msgid ""
"When you use an ``ImageField`` on a form, you must also remember to :ref:"
"`bind the file data to the form <binding-uploaded-files>`."
msgstr ""
"フォームで ``ImageField`` を使用する場合、:ref:`フォームにファイルデータをバ"
"インドする <binding-uploaded-files>` 必要も覚えておいてください。"

msgid ""
"After the field has been cleaned and validated, the ``UploadedFile`` object "
"will have an additional ``image`` attribute containing the Pillow `Image`_ "
"instance used to check if the file was a valid image. Pillow closes the "
"underlying file descriptor after verifying an image, so while non-image data "
"attributes, such as ``format``, ``height``, and ``width``, are available, "
"methods that access the underlying image data, such as ``getdata()`` or "
"``getpixel()``, cannot be used without reopening the file. For example:"
msgstr ""
"フィールドがクリーンアップされ、バリデーションされた後、``UploadedFile`` オブ"
"ジェクトには、ファイルが有効な画像であるかを確認するために使用されたPillowの "
"`Image`_ インスタンスを含む追加の ``image`` 属性があります。Pillow は画像を検"
"証した後にベースとなるファイルディスクリプタを閉じるため、``format``、"
"``height``、``width`` などの非画像データ属性は使用可能ですが、``getdata()`` "
"や ``getpixel()`` のようにベースとなる画像データにアクセスするメソッドは、"
"ファイルを再度開かない限り使用できません。例えば:"

msgid ""
"Additionally, ``UploadedFile.content_type`` will be updated with the image's "
"content type if Pillow can determine it, otherwise it will be set to "
"``None``."
msgstr ""
"さらに、Pillowが画像のコンテンツタイプを特定できる場合には、``UploadedFile."
"content_type`` は画像のコンテンツタイプで更新されます。それ以外の場合は、"
"``None`` に設定されます。"

msgid "``IntegerField``"
msgstr "``IntegerField``"

msgid "Normalizes to: A Python integer."
msgstr "正規化後の値: Python の整数になります。"

msgid ""
"Validates that the given value is an integer. Uses :class:`~django.core."
"validators.MaxValueValidator` and :class:`~django.core.validators."
"MinValueValidator` if ``max_value`` and ``min_value`` are provided. Uses :"
"class:`~django.core.validators.StepValueValidator` if ``step_size`` is "
"provided. Leading and trailing whitespace is allowed, as in Python's "
"``int()`` function."
msgstr ""
"与えられた値が整数であることを検証します。``max_value`` と ``min_value`` が提"
"供されている場合は :class:`~django.core.validators.MaxValueValidator` と :"
"class:`~django.core.validators.MinValueValidator` を使用します。"
"``step_size`` が提供されている場合は :class:`~django.core.validators."
"StepValueValidator` を使用します。Python の ``int()`` 関数と同様、先頭と末尾"
"の空白は許可されます。"

msgid ""
"Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``, "
"``step_size``"
msgstr ""
"エラーメッセージキー: ``required``, ``invalid``, ``max_value``, "
"``min_value``, ``step_size``"

msgid ""
"The ``max_value``, ``min_value`` and ``step_size`` error messages may "
"contain ``%(limit_value)s``, which will be substituted by the appropriate "
"limit."
msgstr ""
"``max_value``、``min_value``、および ``step_size`` のエラーメッセージには、"
"``%(limit_value)s`` が含まれることがあり、これは適切な制限値に置き換えられま"
"す。"

msgid "Takes three optional arguments for validation:"
msgstr "バリデーションのために、3つのオプション引数を受け取ります:"

msgid "``JSONField``"
msgstr "``JSONField``"

msgid ""
"A field which accepts JSON encoded data for a :class:`~django.db.models."
"JSONField`."
msgstr ""
":class:`~django.db.models.JSONField` 用の、JSON エンコードされたデータを受け"
"入れるフィールドです。"

msgid "Default widget: :class:`Textarea`"
msgstr "デフォルトのウィジェット: :class:`Textarea`"

msgid ""
"Normalizes to: A Python representation of the JSON value (usually as a "
"``dict``, ``list``, or ``None``), depending on :attr:`JSONField.decoder`."
msgstr ""
"正規化後の値: :attr:`JSONField.decoder` に依存して、JSON 値の Python 表現 (通"
"常は ``dict``、``list``、または ``None``) に正規化されます。"

msgid "Validates that the given value is a valid JSON."
msgstr "与えられた値が有効な JSON であることを検証します。"

msgid ""
"A :py:class:`json.JSONEncoder` subclass to serialize data types not "
"supported by the standard JSON serializer (e.g. ``datetime.datetime`` or :"
"class:`~python:uuid.UUID`). For example, you can use the :class:`~django."
"core.serializers.json.DjangoJSONEncoder` class."
msgstr ""
"標準のJSONシリアライザがサポートしていないデータ型 (``datetime.datetime`` "
"や :class:`~python:uuid.UUID` など) をシリアライズするための :py:class:`json."
"JSONEncoder` のサブクラスです。例えば、 :class:`~django.core.serializers."
"json.DjangoJSONEncoder` クラスを使用できます。"

msgid "Defaults to ``json.JSONEncoder``."
msgstr "デフォルトは ``json.JSONEncoder`` です。"

msgid ""
"A :py:class:`json.JSONDecoder` subclass to deserialize the input. Your "
"deserialization may need to account for the fact that you can't be certain "
"of the input type. For example, you run the risk of returning a ``datetime`` "
"that was actually a string that just happened to be in the same format "
"chosen for ``datetime``\\s."
msgstr ""
"入力をデシリアライズするための :py:class:`json.JSONDecoder` のサブクラスで"
"す。デシリアライズでは、入力タイプを確実に把握できないという事実に対応する必"
"要があります。例えば、``datetime`` 形式と同じ形式を持つ文字列が、実際には "
"``datetime`` として返されるリスクがあります。"

msgid ""
"The ``decoder`` can be used to validate the input. If :py:class:`json."
"JSONDecodeError` is raised during the deserialization, a ``ValidationError`` "
"will be raised."
msgstr ""
"``decoder`` を使用して入力をバリデーションできます。デシリアライズ中に :py:"
"class:`json.JSONDecodeError` が発生した場合は、``ValidationError`` が発生しま"
"す。"

msgid "Defaults to ``json.JSONDecoder``."
msgstr "デフォルトは ``json.JSONDecoder`` です。"

msgid ""
"If you use a :class:`ModelForm <django.forms.ModelForm>`, the ``encoder`` "
"and ``decoder`` from :class:`~django.db.models.JSONField` will be used."
msgstr ""
":class:`ModelForm <django.forms.ModelForm>` を使用する場合、:class:`~django."
"db.models.JSONField` からの ``encoder`` と ``decoder`` が使用されます。"

msgid ""
"``JSONField`` is not particularly user friendly in most cases. However, it "
"is a useful way to format data from a client-side widget for submission to "
"the server."
msgstr ""
"``JSONField`` は多くの場合、ユーザーフレンドリーとは言えません。しかし、クラ"
"イアントサイドのウィジェットからサーバーに送信するためのデータをフォーマット"
"する便利な方法です。"

msgid "``MultipleChoiceField``"
msgstr "``MultipleChoiceField``"

msgid "Default widget: :class:`SelectMultiple`"
msgstr "デフォルトのウィジェット: :class:`SelectMultiple`"

msgid "Empty value: ``[]`` (an empty list)"
msgstr "空の値: ``[]`` (空のリスト)"

msgid "Normalizes to: A list of strings."
msgstr "正規化後の値: 文字列のリストになります。"

msgid ""
"Validates that every value in the given list of values exists in the list of "
"choices."
msgstr ""
"与えられた値のリストの各値が、選択肢のリストに存在することを検証します。"

msgid "Error message keys: ``required``, ``invalid_choice``, ``invalid_list``"
msgstr ""
"エラーメッセージのキー: ``required``, ``invalid_choice``, ``invalid_list``"

msgid ""
"Takes one extra required argument, ``choices``, as for :class:`ChoiceField`."
msgstr ""
":class:`ChoiceField` のために、1つの追加の必須引数 ``choices`` を取ります。"

msgid "``NullBooleanField``"
msgstr "``NullBooleanField``"

msgid "Default widget: :class:`NullBooleanSelect`"
msgstr "デフォルトのウィジェット: :class:`NullBooleanSelect`"

msgid "Normalizes to: A Python ``True``, ``False`` or ``None`` value."
msgstr ""
"正規化後の値: Pythonの ``True``、``False``、または ``None`` になります。"

msgid "Validates nothing (i.e., it never raises a ``ValidationError``)."
msgstr ""
"何も検証しません（つまり、``ValidationError`` を決して発生させません）。"

msgid ""
"``NullBooleanField`` may be used with widgets such as :class:`~django.forms."
"Select` or :class:`~django.forms.RadioSelect` by providing the widget "
"``choices``::"
msgstr ""
"``NullBooleanField`` は、ウィジェットの ``choices`` を指定することで、 :"
"class:`~django.forms.Select` や :class:`~django.forms.RadioSelect` などのウィ"
"ジェットで使用できます。"

msgid "``RegexField``"
msgstr "``RegexField``"

msgid ""
"Uses :class:`~django.core.validators.RegexValidator` to validate that the "
"given value matches a certain regular expression."
msgstr ""
":class:`~django.core.validators.RegexValidator` を使用して、与えられた値が特"
"定の正規表現と一致するかどうかを検証します。"

msgid "Takes one required argument:"
msgstr "1つの必須引数を取ります:"

msgid ""
"A regular expression specified either as a string or a compiled regular "
"expression object."
msgstr ""
"文字列またはコンパイルされた正規表現オブジェクトとして指定される正規表現。"

msgid ""
"Also takes ``max_length``, ``min_length``, ``strip``, and ``empty_value`` "
"which work just as they do for :class:`CharField`."
msgstr ""
"``max_length``、``min_length``、``strip``、および ``empty_value`` も受け取り"
"ます。これらは :class:`CharField` と全く同じように機能します。"

msgid ""
"Defaults to ``False``. If enabled, stripping will be applied before the "
"regex validation."
msgstr ""
"デフォルトは ``False`` です。有効にした場合、正規表現バリデーションの前にスト"
"リップ処理が適用されます。"

msgid "``SlugField``"
msgstr "``SlugField``"

msgid ""
"Uses :class:`~django.core.validators.validate_slug` or :class:`~django.core."
"validators.validate_unicode_slug` to validate that the given value contains "
"only letters, numbers, underscores, and hyphens."
msgstr ""
":class:`~django.core.validators.validate_slug` または :class:`~django.core."
"validators.validate_unicode_slug` を使用して、与えられた値が文字、数字、アン"
"ダースコア、ハイフンのみを含むかを検証します。"

msgid "Error messages: ``required``, ``invalid``"
msgstr "エラーメッセージ: ``required``、``invalid``"

msgid ""
"This field is intended for use in representing a model :class:`~django.db."
"models.SlugField` in forms."
msgstr ""
"このフィールドは、フォームでモデルの :class:`~django.db.models.SlugField` を"
"表現するために使用することを意図しています。"

msgid "Takes two optional parameters:"
msgstr "2つのオプションパラメーターを取ります："

msgid ""
"A boolean instructing the field to accept Unicode letters in addition to "
"ASCII letters. Defaults to ``False``."
msgstr ""
"フィールドが ASCII 文字に加えて Unicode 文字を受け入れるよう指示するブール値"
"です。デフォルトは ``False`` です。"

msgid "``TimeField``"
msgstr "``TimeField``"

msgid "Default widget: :class:`TimeInput`"
msgstr "デフォルトのウィジェット: :class:`TimeInput`"

msgid "Normalizes to: A Python ``datetime.time`` object."
msgstr "正規化後の値: Python の ``datetime.time`` オブジェクトになります。"

msgid ""
"Validates that the given value is either a ``datetime.time`` or string "
"formatted in a particular time format."
msgstr ""
"与えられた値が ``datetime.time`` か、特定の時間形式でフォーマットされた文字列"
"であることを検証します。"

msgid ""
"An iterable of formats used to attempt to convert a string to a valid "
"``datetime.time`` object."
msgstr ""
"文字列を有効な ``datetime.time`` オブジェクトに変換するために試みる形式のイテ"
"ラブル。"

msgid ""
"If no ``input_formats`` argument is provided, the default input formats are "
"taken from the active locale format ``TIME_INPUT_FORMATS`` key, or from :"
"setting:`TIME_INPUT_FORMATS` if localization is disabled. See also :doc:"
"`format localization </topics/i18n/formatting>`."
msgstr ""
"``input_formats`` 引数が指定されていない場合、デフォルトの入力形式は、アク"
"ティブなロケール形式の ``TIME_INPUT_FORMATS`` キーから取得されるか、ローカラ"
"イズが無効の場合は :setting:`TIME_INPUT_FORMATS` から取得されます。詳細は、:"
"doc:`表示形式のローカライズ </topics/i18n/formatting>` を参照してください。"

msgid "``TypedChoiceField``"
msgstr "``TypedChoiceField``"

msgid ""
"Just like a :class:`ChoiceField`, except :class:`TypedChoiceField` takes two "
"extra arguments, :attr:`coerce` and :attr:`empty_value`."
msgstr ""
":class:`ChoiceField` と同様ですが、 :class:`TypedChoiceField` は2つの追加引"
"数、 :attr:`coerce` と :attr:`empty_value` を取ります。"

msgid ""
"Normalizes to: A value of the type provided by the :attr:`coerce` argument."
msgstr "正規化後の値: :attr:`coerce` 引数で指定された型になります。"

msgid ""
"Validates that the given value exists in the list of choices and can be "
"coerced."
msgstr "指定された値が選択肢のリストに存在し、強制変換できることを検証します。"

msgid "Takes extra arguments:"
msgstr "追加の引数を取ります:"

msgid ""
"A function that takes one argument and returns a coerced value. Examples "
"include the built-in ``int``, ``float``, ``bool`` and other types. Defaults "
"to an identity function. Note that coercion happens after input validation, "
"so it is possible to coerce to a value not present in ``choices``."
msgstr ""
"1つの引数を受け取り、強制された値を返す関数です。例には組み込みの ``int``、"
"``float``、``bool``、その他の型が含まれます。デフォルトは恒等関数です。強制は"
"入力バリデーションの後に行われるため、``choices`` に存在しない値への強制が可"
"能です。"

msgid ""
"The value to use to represent \"empty.\" Defaults to the empty string; "
"``None`` is another common choice here. Note that this value will not be "
"coerced by the function given in the ``coerce`` argument, so choose it "
"accordingly."
msgstr ""
"\"空\" を表すために使用する値です。デフォルトは空文字列です。 ``None`` もここ"
"でよく使用される選択肢の一つです。この値は、 ``coerce`` 引数で与えられた関数"
"によって強制されないことに注意してください。それに応じて選択してください。"

msgid "``TypedMultipleChoiceField``"
msgstr "``TypedMultipleChoiceField``"

msgid ""
"Just like a :class:`MultipleChoiceField`, except :class:"
"`TypedMultipleChoiceField` takes two extra arguments, ``coerce`` and "
"``empty_value``."
msgstr ""
":class:`MultipleChoiceField` と同様ですが、 :class:"
"`TypedMultipleChoiceField` は ``coerce`` と ``empty_value`` という2つの追加の"
"引数を受け取ります。"

msgid "Empty value: Whatever you've given as ``empty_value``"
msgstr "空の値: ``empty_value`` として渡したもの"

msgid ""
"Normalizes to: A list of values of the type provided by the ``coerce`` "
"argument."
msgstr ""
"正規化後の値: ``coerce`` 引数によって提供される型の値のリストになります。"

msgid ""
"Validates that the given values exists in the list of choices and can be "
"coerced."
msgstr ""
"指定された値が選択肢のリスト内に存在し、強制変換できることを検証します。"

msgid ""
"Takes two extra arguments, ``coerce`` and ``empty_value``, as for :class:"
"`TypedChoiceField`."
msgstr ""
":class:`TypedChoiceField` と同様に、2つの追加引数 ``coerce`` と "
"``empty_value`` を取ります。"

msgid "``URLField``"
msgstr "``URLField``"

msgid "Default widget: :class:`URLInput`"
msgstr "デフォルトのウィジェット: :class:`URLInput`"

msgid ""
"Uses :class:`~django.core.validators.URLValidator` to validate that the "
"given value is a valid URL."
msgstr ""
"与えられた値が有効なURLであることを検証するために :class:`~django.core."
"validators.URLValidator` を使用します。"

msgid ""
"Has the optional arguments ``max_length``, ``min_length``, ``empty_value`` "
"which work just as they do for :class:`CharField`, and one more argument:"
msgstr ""
"オプション引数 ``max_length``、``min_length``、``empty_value`` は :class:"
"`CharField` での動作と全く同じように機能し、さらにもう一つの引数があります:"

msgid ""
"The scheme assumed for URLs provided without one. Defaults to ``\"http\"``. "
"For example, if ``assume_scheme`` is ``\"https\"`` and the provided value is "
"``\"example.com\"``, the normalized value will be ``\"https://example."
"com\"``."
msgstr ""
"スキーマが省略されたURLに対して想定されるスキーマです。デフォルトは "
"``\"http\"`` です。たとえば、``assume_scheme`` が ``\"https\"`` で、提供され"
"た値が ``\"example.com\"`` の場合、正規化された値は ``\"https://example."
"com\"`` になります。"

msgid ""
"The default value for ``assume_scheme`` will change from ``\"http\"`` to "
"``\"https\"`` in Django 6.0. Set :setting:`FORMS_URLFIELD_ASSUME_HTTPS` "
"transitional setting to ``True`` to opt into using ``\"https\"`` during the "
"Django 5.x release cycle."
msgstr ""
"``assume_scheme`` のデフォルト値は Django 6.0 で ``\"http\"`` から "
"``\"https\"`` に変更されます。Django 5.x のリリースサイクル中に "
"``\"https\"`` を使用するようにするには、移行用設定の :setting:"
"`FORMS_URLFIELD_ASSUME_HTTPS` を ``True`` に設定してください。"

msgid "``UUIDField``"
msgstr "``UUIDField``"

msgid "Normalizes to: A :class:`~python:uuid.UUID` object."
msgstr ""
"正規化後の値: :class:`~python:uuid.UUID` オブジェクトに正規化されます。"

msgid ""
"This field will accept any string format accepted as the ``hex`` argument to "
"the :class:`~python:uuid.UUID` constructor."
msgstr ""
"このフィールドは、 :class:`~python:uuid.UUID` コンストラクタの ``hex`` 引数と"
"して受け入れられる任意の文字列形式を受け付けます。"

msgid "Slightly complex built-in ``Field`` classes"
msgstr "少し複雑な組み込み ``Field`` クラス"

msgid "``ComboField``"
msgstr "``ComboField``"

msgid ""
"Validates the given value against each of the fields specified as an "
"argument to the ``ComboField``."
msgstr ""
"``ComboField`` に引数として指定された各フィールドに対して、与えられた値をバリ"
"デーションします。"

msgid "Takes one extra required argument:"
msgstr "1つの必須の追加引数を受け取ります:"

msgid ""
"The list of fields that should be used to validate the field's value (in the "
"order in which they are provided)."
msgstr ""
"フィールドの値を検証するために使用すべきフィールドのリスト(渡した順序で検証さ"
"れます)。"

msgid "``MultiValueField``"
msgstr "``MultiValueField``"

msgid ""
"Normalizes to: the type returned by the ``compress`` method of the subclass."
msgstr ""
"正規化後の値: サブクラスの ``compress`` メソッドによって返される型になりま"
"す。"

msgid ""
"Validates the given value against each of the fields specified as an "
"argument to the ``MultiValueField``."
msgstr ""
"指定された引数としての ``MultiValueField`` に各フィールドに対して与えられた値"
"を検証します。"

msgid "Error message keys: ``required``, ``invalid``, ``incomplete``"
msgstr "エラーメッセージキー: ``required``, ``invalid``, ``incomplete``"

msgid ""
"Aggregates the logic of multiple fields that together produce a single value."
msgstr "複数のフィールドのロジックを集計し、単一の値を生成します。"

msgid ""
"This field is abstract and must be subclassed. In contrast with the single-"
"value fields, subclasses of :class:`MultiValueField` must not implement :"
"meth:`~django.forms.Field.clean` but instead - implement :meth:"
"`~MultiValueField.compress`."
msgstr ""
"このフィールドは抽象フィールドで、サブクラス化する必要があります。単一値"
"フィールドとは対照的に、:class:`MultiValueField` のサブクラスは :meth:"
"`~django.forms.Field.clean` を実装してはいけません。代わりに、:meth:"
"`~MultiValueField.compress` を実装します。"

msgid ""
"A tuple of fields whose values are cleaned and subsequently combined into a "
"single value.  Each value of the field is cleaned by the corresponding field "
"in ``fields`` -- the first value is cleaned by the first field, the second "
"value is cleaned by the second field, etc. Once all fields are cleaned, the "
"list of clean values is combined into a single value by :meth:"
"`~MultiValueField.compress`."
msgstr ""
"値がクリーニングされた後に単一の値に組み合わされるフィールドのタプル。フィー"
"ルドの各値は、``fields`` 内の対応するフィールドによってクリーニングされます。"
"最初の値は最初のフィールドによって、2番目の値は2番目のフィールドによって、と"
"いう具合にクリーニングされます。すべてのフィールドがクリーニングされたら、ク"
"リーニングされた値のリストは :meth:`~MultiValueField.compress` によって単一の"
"値に結合されます。"

msgid "Also takes some optional arguments:"
msgstr "オプションの引数もいくつか受け取ります:"

msgid ""
"Defaults to ``True``, in which case a ``required`` validation error will be "
"raised if no value is supplied for any field."
msgstr ""
"デフォルトは ``True`` で、フィールドに値が指定されていない場合は "
"``required`` バリデーションエラーが発生します。"

msgid ""
"When set to ``False``, the :attr:`Field.required` attribute can be set to "
"``False`` for individual fields to make them optional. If no value is "
"supplied for a required field, an ``incomplete`` validation error will be "
"raised."
msgstr ""
":attr:`Field.required` 属性を ``False`` に設定すると、個々のフィールドをオプ"
"ションフィールドにすることができます。必須フィールドに値が与えられない場合、"
"``incomplete`` というバリデーションエラーが発生します。"

msgid ""
"A default ``incomplete`` error message can be defined on the :class:"
"`MultiValueField` subclass, or different messages can be defined on each "
"individual field. For example::"
msgstr ""
"デフォルトの ``incomplete`` エラーメッセージは、:class:`MultiValueField` のサ"
"ブクラス上で定義できます。また、個々のフィールドごとに異なるメッセージを定義"
"することもできます。例えば:"

msgid ""
"Must be a subclass of :class:`django.forms.MultiWidget`. Default value is :"
"class:`~django.forms.TextInput`, which probably is not very useful in this "
"case."
msgstr ""
":class:`django.forms.MultiWidget` のサブクラスでなければなりません。デフォル"
"ト値は :class:`~django.forms.TextInput` ですが、この場合にはあまり役に立たな"
"いかもしれません。"

msgid ""
"Takes a list of valid values and returns  a \"compressed\" version of those "
"values -- in a single value. For example, :class:`SplitDateTimeField` is a "
"subclass which combines a time field and a date field into a ``datetime`` "
"object."
msgstr ""
"有効な値のリストを受け取り、それらの値を単一の値に「圧縮」して返します。例え"
"ば、:class:`SplitDateTimeField` は時間フィールドと日付フィールドを組み合わせ"
"て ``datetime`` オブジェクトにするサブクラスです。"

msgid "This method must be implemented in the subclasses."
msgstr "このメソッドはサブクラスで実装されなければなりません。"

msgid "``SplitDateTimeField``"
msgstr "``SplitDateTimeField``"

msgid "Default widget: :class:`SplitDateTimeWidget`"
msgstr "デフォルトのウィジェット: :class:`SplitDateTimeWidget`"

msgid ""
"Validates that the given value is a ``datetime.datetime`` or string "
"formatted in a particular datetime format."
msgstr ""
"指定された値が ``datetime.datetime`` または特定の日時形式でフォーマットされた"
"文字列であることを検証します。"

msgid ""
"Error message keys: ``required``, ``invalid``, ``invalid_date``, "
"``invalid_time``"
msgstr ""
"エラーメッセージのキー: ``required``, ``invalid``, ``invalid_date``, "
"``invalid_time``"

msgid ""
"A list of formats used to attempt to convert a string to a valid ``datetime."
"date`` object."
msgstr ""
"文字列を有効な ``datetime.date`` オブジェクトに変換する試行に使う表示形式のリ"
"ストです。"

msgid ""
"If no ``input_date_formats`` argument is provided, the default input formats "
"for :class:`DateField` are used."
msgstr ""
"``input_date_formats`` 引数が提供されない場合、:class:`DateField` のデフォル"
"トの入力フォーマットが使用されます。"

msgid ""
"A list of formats used to attempt to convert a string to a valid ``datetime."
"time`` object."
msgstr ""
"文字列を有効な ``datetime.time`` オブジェクトに変換しようとする際に使用される"
"フォーマットのリスト。"

msgid ""
"If no ``input_time_formats`` argument is provided, the default input formats "
"for :class:`TimeField` are used."
msgstr ""
"``input_time_formats`` 引数が提供されない場合、:class:`TimeField` のデフォル"
"ト入力フォーマットが使用されます。"

msgid "Fields which handle relationships"
msgstr "リレーションシップを扱うフィールド"

msgid ""
"Two fields are available for representing relationships between models: :"
"class:`ModelChoiceField` and :class:`ModelMultipleChoiceField`.  Both of "
"these fields require a single ``queryset`` parameter that is used to create "
"the choices for the field.  Upon form validation, these fields will place "
"either one model object (in the case of ``ModelChoiceField``) or multiple "
"model objects (in the case of ``ModelMultipleChoiceField``) into the "
"``cleaned_data`` dictionary of the form."
msgstr ""
"モデル間のリレーションシップを表すために2つのフィールドが利用可能です： :"
"class:`ModelChoiceField` と :class:`ModelMultipleChoiceField` です。これらの"
"フィールドの両方には、フィールドの選択肢を作成するために使用される単一の "
"``queryset`` パラメータが必要です。フォーム検証時、これらのフィールドは、"
"フォームの ``cleaned_data`` 辞書に一つのモデルオブジェクト "
"( ``ModelChoiceField`` の場合) または複数のモデルオブジェクト "
"( ``ModelMultipleChoiceField`` の場合) を配置します。"

msgid ""
"For more complex uses, you can specify ``queryset=None`` when declaring the "
"form field and then populate the ``queryset`` in the form's ``__init__()`` "
"method::"
msgstr ""
"より複雑な使い方をする場合は、フォームフィールドを宣言する際に "
"``queryset=None`` を指定し、その後フォームの ``__init__()`` メソッド内で "
"``queryset`` を設定できます。"

msgid ""
"Both ``ModelChoiceField`` and ``ModelMultipleChoiceField`` have an "
"``iterator`` attribute which specifies the class used to iterate over the "
"queryset when generating choices. See :ref:`iterating-relationship-choices` "
"for details."
msgstr ""
"``ModelChoiceField`` と ``ModelMultipleChoiceField`` には、選択肢を生成する際"
"にクエリセットを繰り返すために使用されるクラスを指定する ``iterator`` 属性が"
"あります。詳細は、 :ref:`iterating-relationship-choices` を参照してください。"

msgid "``ModelChoiceField``"
msgstr "``ModelChoiceField``"

msgid "Normalizes to: A model instance."
msgstr "正規化後の値: model インスタンスに正規化されます。"

msgid "Validates that the given id exists in the queryset."
msgstr "指定された id がクエリセット内に存在することを検証します。"

msgid ""
"Allows the selection of a single model object, suitable for representing a "
"foreign key. Note that the default widget for ``ModelChoiceField`` becomes "
"impractical when the number of entries increases. You should avoid using it "
"for more than 100 items."
msgstr ""
"外部キーを表すのに適した単一のモデルオブジェクトの選択を許可します。"
"``ModelChoiceField`` のデフォルトウィジェットは、エントリーの数が増えると非実"
"用的になることに注意してください。100項目以上には使用を避けるべきです。"

msgid "A single argument is required:"
msgstr "引数が1つ必要です:"

msgid ""
"A ``QuerySet`` of model objects from which the choices for the field are "
"derived and which is used to validate the user's selection. It's evaluated "
"when the form is rendered."
msgstr ""
"モデルオブジェクトの ``QuerySet`` で、フィールドの選択肢を導き出し、ユーザー"
"の選択を検証するために使用されます。フォームがレンダリングされるときに評価さ"
"れます。"

msgid "``ModelChoiceField`` also takes several optional arguments:"
msgstr "``ModelChoiceField`` は他にもいくつかのオプション引数を取ります:"

msgid ""
"By default the ``<select>`` widget used by ``ModelChoiceField`` will have an "
"empty choice at the top of the list. You can change the text of this label "
"(which is ``\"---------\"`` by default) with the ``empty_label`` attribute, "
"or you can disable the empty label entirely by setting ``empty_label`` to "
"``None``::"
msgstr ""
"デフォルトでは、``ModelChoiceField`` が使用する ``<select>`` ウィジェットに"
"は、リストの先頭に空の選択肢が表示されます。このラベルのテキスト（デフォルト"
"では ``\"---------\"``）を ``empty_label`` 属性で変更したり、``empty_label`` "
"を ``None`` に設定することで空のラベルを完全に無効にできます:"

msgid ""
"Note that no empty choice is created (regardless of the value of "
"``empty_label``) if a ``ModelChoiceField`` is required and has a default "
"initial value, or a ``widget`` is set to :class:`~django.forms.RadioSelect` "
"and the :attr:`~ModelChoiceField.blank` argument is ``False``."
msgstr ""
"``ModelChoiceField`` が必須でデフォルトの初期値を持っている場合や、"
"``widget`` が :class:`~django.forms.RadioSelect` に設定されており :attr:"
"`~ModelChoiceField.blank` 引数が ``False`` の場合には、 ``empty_label`` の値"
"に関係なく空の選択肢は作成されません。"

msgid ""
"This optional argument is used to specify the field to use as the value of "
"the choices in the field's widget. Be sure it's a unique field for the "
"model, otherwise the selected value could match more than one object. By "
"default it is set to ``None``, in which case the primary key of each object "
"will be used. For example::"
msgstr ""
"このオプション引数は、フィールドのウィジェットの選択肢の値として使用する"
"フィールドを指定するために使用されます。選択された値が複数のオブジェクトに一"
"致する可能性があるため、モデルにとって一意のフィールドであることを確認してく"
"ださい。デフォルトでは ``None`` に設定されており、この場合、各オブジェクトの"
"プライマリキーが使用されます。たとえば："

msgid "would yield:"
msgstr "上記によって、下記が得られます:"

msgid "and::"
msgstr "そして、:"

msgid ""
"When using the :class:`~django.forms.RadioSelect` widget, this optional "
"boolean argument determines whether an empty choice is created. By default, "
"``blank`` is ``False``, in which case no empty choice is created."
msgstr ""
":class:`~django.forms.RadioSelect` ウィジェットを使用する場合、このオプション"
"のブール引数は空の選択肢を作成するかどうかを決定します。デフォルトでは、"
"``blank`` は ``False`` で、空の選択肢は作成されません。"

msgid "``ModelChoiceField`` also has the attribute:"
msgstr "``ModelChoiceField`` には、以下の属性もあります:"

msgid ""
"The iterator class used to generate field choices from ``queryset``. By "
"default, :class:`ModelChoiceIterator`."
msgstr ""
"``queryset`` からフィールド選択肢を生成するために使用されるイテレータクラス。"
"デフォルトでは、:class:`ModelChoiceIterator` です。"

msgid ""
"The ``__str__()`` method of the model will be called to generate string "
"representations of the objects for use in the field's choices. To provide "
"customized representations, subclass ``ModelChoiceField`` and override "
"``label_from_instance``. This method will receive a model object and should "
"return a string suitable for representing it. For example::"
msgstr ""
"モデルの ``__str__()`` メソッドは、フィールドの選択肢で使用するためにオブジェ"
"クトの文字列表現を生成するために呼び出されます。カスタマイズした表現を提供す"
"るには、``ModelChoiceField`` をサブクラス化して ``label_from_instance`` を"
"オーバーライドします。このメソッドはモデルオブジェクトを受け取り、それを表す"
"のに適した文字列を返すべきです。例えば："

msgid "``ModelMultipleChoiceField``"
msgstr "``ModelMultipleChoiceField``"

msgid "Empty value: An empty ``QuerySet`` (``self.queryset.none()``)"
msgstr "空の値: 空の ``QuerySet`` (``self.queryset.none()``)"

msgid "Normalizes to: A ``QuerySet`` of model instances."
msgstr "正規化後の値: モデルインスタンスの ``QuerySet`` になります。"

msgid ""
"Validates that every id in the given list of values exists in the queryset."
msgstr ""
"与えられた値のリスト内のすべてのIDがクエリセット内に存在することを検証しま"
"す。"

msgid ""
"Error message keys: ``required``, ``invalid_list``, ``invalid_choice``, "
"``invalid_pk_value``"
msgstr ""
"エラーメッセージのキー: ``required``、 ``invalid_list``、 "
"``invalid_choice``、 ``invalid_pk_value``"

msgid ""
"The ``invalid_choice`` message may contain ``%(value)s`` and the "
"``invalid_pk_value`` message may contain ``%(pk)s``, which will be "
"substituted by the appropriate values."
msgstr ""
"``invalid_choice`` メッセージには ``%(value)s`` が含まれる可能性があり、"
"``invalid_pk_value`` メッセージには ``%(pk)s`` が含まれる可能性があります。こ"
"れらは適切な値に置き換えられます。"

msgid ""
"Allows the selection of one or more model objects, suitable for representing "
"a many-to-many relation. As with :class:`ModelChoiceField`, you can use "
"``label_from_instance`` to customize the object representations."
msgstr ""
"一つまたは複数のモデルオブジェクトを選択できるようにし、多対多のリレーション"
"シップを表すのに適しています。:class:`ModelChoiceField` と同様に, "
"``label_from_instance`` を使用してオブジェクトの表現をカスタマイズできます。"

msgid "Same as :class:`ModelChoiceField.queryset`."
msgstr ":class:`ModelChoiceField.queryset` と同じです。"

msgid "Same as :class:`ModelChoiceField.to_field_name`."
msgstr ":class:`ModelChoiceField.to_field_name` と同じです。"

msgid "``ModelMultipleChoiceField`` also has the attribute:"
msgstr "``ModelMultipleChoiceField`` には次の属性もあります:"

msgid "Same as :class:`ModelChoiceField.iterator`."
msgstr ":class:`ModelChoiceField.iterator` と同じです。"

msgid "Iterating relationship choices"
msgstr "リレーションシップの選択肢をイテレートする"

msgid ""
"By default, :class:`ModelChoiceField` and :class:`ModelMultipleChoiceField` "
"use :class:`ModelChoiceIterator` to generate their field ``choices``."
msgstr ""
"デフォルトでは、:class:`ModelChoiceField` と :class:"
"`ModelMultipleChoiceField` は、:class:`ModelChoiceIterator` を使用して、"
"フィールドの ``choices`` を生成します。"

msgid ""
"When iterated, ``ModelChoiceIterator`` yields 2-tuple choices containing :"
"class:`ModelChoiceIteratorValue` instances as the first ``value`` element in "
"each choice. ``ModelChoiceIteratorValue`` wraps the choice value while "
"maintaining a reference to the source model instance that can be used in "
"custom widget implementations, for example, to add `data-* attributes`_ to "
"``<option>`` elements."
msgstr ""
"``ModelChoiceIterator`` をイテレートすると、1つ目の ``value`` 要素として :"
"class:`ModelChoiceIteratorValue` インスタンスを含む2値タプルの選択肢が生成さ"
"れます。 ``ModelChoiceIteratorValue`` は、選択値をラップし、カスタムウィ"
"ジェットの実装で使用できる元のモデルインスタンスへの参照を保持します。たとえ"
"ば、 ``<option>`` 要素に `data-* attributes`_ を追加するのに使用できます。"

msgid "For example, consider the following models::"
msgstr "例として、以下のモデルを考えてみましょう:"

msgid ""
"You can use a :class:`~django.forms.Select` widget subclass to include the "
"value of ``Topping.price`` as the HTML attribute ``data-price`` for each "
"``<option>`` element::"
msgstr ""
":class:`~django.forms.Select` ウィジェットのサブクラスを使用して、各 "
"``<option>`` 要素の HTML 属性 ``data-price`` として ``Topping.price`` の値を"
"含めることができます。"

msgid "This will render the ``Pizza.topping`` select as:"
msgstr ""
"これにより、``Pizza.topping`` 選択肢は以下のようにレンダリングされます:"

msgid ""
"For more advanced usage you may subclass ``ModelChoiceIterator`` in order to "
"customize the yielded 2-tuple choices."
msgstr ""
"より高度な使い方をする場合は、 ``ModelChoiceIterator`` をサブクラスにして、得"
"られる2値タプルの選択肢をカスタマイズできます。"

msgid "``ModelChoiceIterator``"
msgstr "``ModelChoiceIterator``"

msgid ""
"The default class assigned to the ``iterator`` attribute of :class:"
"`ModelChoiceField` and :class:`ModelMultipleChoiceField`. An iterable that "
"yields 2-tuple choices from the queryset."
msgstr ""
":class:`ModelChoiceField` と :class:`ModelMultipleChoiceField` の "
"``iterator`` 属性に割り当てられたデフォルトのクラスです。クエリセットから 2 "
"タプルの選択肢を返すイテレータです。"

msgid ""
"The instance of ``ModelChoiceField`` or ``ModelMultipleChoiceField`` to "
"iterate and yield choices."
msgstr ""
"``ModelChoiceField`` または ``ModelMultipleChoiceField`` のインスタンスをイテ"
"レートして選択肢を生成します。"

msgid "``ModelChoiceIterator`` has the following method:"
msgstr "``ModelChoiceIterator`` には、以下のメソッドがあります:"

msgid ""
"Yields 2-tuple choices, in the ``(value, label)`` format used by :attr:"
"`ChoiceField.choices`. The first ``value`` element is a :class:"
"`ModelChoiceIteratorValue` instance."
msgstr ""
":attr:`ChoiceField.choices` で使用される ``(value, label)`` フォーマットの 2"
"値タプルの選択肢を生成します。最初の ``value`` 要素は :class:"
"`ModelChoiceIteratorValue` インスタンスです。"

msgid "``ModelChoiceIteratorValue``"
msgstr "``ModelChoiceIteratorValue``"

msgid "Two arguments are required:"
msgstr "2 つの引数が必要です:"

msgid ""
"The value of the choice. This value is used to render the ``value`` "
"attribute of an HTML ``<option>`` element."
msgstr ""
"選択肢の値です。HTMLの ``<option>`` 要素の ``value`` 属性のレンダリングに使用"
"されます。"

msgid ""
"The model instance from the queryset. The instance can be accessed in custom "
"``ChoiceWidget.create_option()`` implementations to adjust the rendered HTML."
msgstr ""
"クエリセットのモデルインスタンス。このインスタンスはカスタム ``ChoiceWidget."
"create_option()`` の実装でアクセスし、レンダリングされるHTMLを調整できます。"

msgid "``ModelChoiceIteratorValue`` has the following method:"
msgstr "``ModelChoiceIteratorValue`` には次のメソッドがあります:"

msgid "Return ``value`` as a string to be rendered in HTML."
msgstr "``value`` を HTML でレンダリングするための文字列として返します。"

msgid "Creating custom fields"
msgstr "カスタムフィールドの作成"

msgid ""
"If the built-in ``Field`` classes don't meet your needs, you can create "
"custom ``Field`` classes. To do this, create a subclass of ``django.forms."
"Field``. Its only requirements are that it implement a ``clean()`` method "
"and that its ``__init__()`` method accept the core arguments mentioned above "
"(``required``, ``label``, ``initial``, ``widget``, ``help_text``)."
msgstr ""
"組み込みの ``Field`` クラスが要件を満たさない場合は、カスタムの ``Field`` ク"
"ラスを作成できます。これには、 ``django.forms.Field`` のサブクラスを作成しま"
"す。唯一の要件は、 ``clean()`` メソッドを実装し、 ``__init__()`` メソッドが上"
"述の基本的な引数 (``required``, ``label``, ``initial``, ``widget``, "
"``help_text``) を受け入れることです。"

msgid ""
"You can also customize how a field will be accessed by overriding :meth:"
"`~django.forms.Field.get_bound_field()`."
msgstr ""
":meth:`~django.forms.Field.get_bound_field()` をオーバーライドすることで、"
"フィールドへのアクセス方法をカスタマイズすることもできます。"

msgid "Formset Functions"
msgstr "フォームセット (Formset) の関数"

msgid ""
"Formset API reference. For introductory material about formsets, see the :"
"doc:`/topics/forms/formsets` topic guide."
msgstr ""
"フォームセット (Formset) の API リファレンスです。Formset についての導入的な"
"情報は、 :doc:`/topics/forms/formsets` トピックガイドを参照してください。"

msgid "``formset_factory``"
msgstr "``formset_factory``"

msgid "Returns a ``FormSet`` class for the given ``form`` class."
msgstr "与えられた ``form`` クラスの ``FormSet`` クラスを返します。"

msgid "See :doc:`formsets </topics/forms/formsets>` for example usage."
msgstr ""
"使用例は :doc:`フォームセット </topics/forms/formsets>` を見てください。"

msgid "Forms"
msgstr "フォーム"

msgid ""
"Detailed form API reference. For introductory material, see the :doc:`/"
"topics/forms/index` topic guide."
msgstr ""
"詳細なフォーム API リファレンスです。入門的な内容については :doc:`/topics/"
"forms/index` トピックガイドを参照してください。"

msgid "Model Form Functions"
msgstr "モデルフォーム関数"

msgid ""
"Model Form API reference. For introductory material about model forms, see "
"the :doc:`/topics/forms/modelforms` topic guide."
msgstr ""
"Model Form の API リファレンスです。モデルフォームについての入門的な内容につ"
"いては、:doc:`/topics/forms/modelforms` を参照してください。"

msgid "``modelform_factory``"
msgstr "``modelform_factory``"

msgid ""
"Returns a :class:`~django.forms.ModelForm` class for the given ``model``. "
"You can optionally pass a ``form`` argument to use as a starting point for "
"constructing the ``ModelForm``."
msgstr ""
"与えられた ``model`` に対して :class:`~django.forms.ModelForm` を返します。必"
"要に応じて ``form`` 引数を渡すことで、``ModelForm`` を構築する開始地点として"
"使うことができます。"

msgid ""
"``fields`` is an optional list of field names. If provided, only the named "
"fields will be included in the returned fields."
msgstr ""
"``fields`` は、フィールド名の省略可能なリストです。提供された場合、指定された"
"フィールドだけが、返されるフィールドの中に含まれるようになります。"

msgid ""
"``exclude`` is an optional list of field names. If provided, the named "
"fields will be excluded from the returned fields, even if they are listed in "
"the ``fields`` argument."
msgstr ""
"``exclude`` は、フィールド名の省略可能なリストです。提供された場合、"
"``fields`` 引数の中に指定されていたとしても、指定されたフィールドが返される"
"フィールドから除かれます。"

msgid ""
"``formfield_callback`` is a callable that takes a model field and returns a "
"form field."
msgstr ""
"``formfield_callback`` は、モデルフィールドを取ってフォームフィールドを返す "
"callable です。"

msgid "``widgets`` is a dictionary of model field names mapped to a widget."
msgstr ""
"``widgets`` は、ウィジェットにマッピングされたモデルフィールド名のディクショ"
"ナリです。"

msgid ""
"``localized_fields`` is a list of names of fields which should be localized."
msgstr ""
"``localized_fields`` は、ローカライズされるべきフィールドの名前のリストです。"

msgid "``labels`` is a dictionary of model field names mapped to a label."
msgstr ""
"``labels`` は、ラベルにマッピングされたモデルフィールド名のディクショナリで"
"す。"

msgid ""
"``help_texts`` is a dictionary of model field names mapped to a help text."
msgstr ""
"``help_texts`` は、ヘルプテキストにマッピングされたモデルフィールド名のディク"
"ショナリです。"

msgid ""
"``error_messages`` is a dictionary of model field names mapped to a "
"dictionary of error messages."
msgstr ""
"``error_messages`` は、エラーメッセージにマッピングされたモデルフィールド名の"
"ディクショナリです。"

msgid ""
"``field_classes`` is a dictionary of model field names mapped to a form "
"field class."
msgstr ""
"``field_classes`` は、フォームフィールドクラスにマッピングされたモデルフィー"
"ルド名のディクショナリです。"

msgid "See :ref:`modelforms-factory` for example usage."
msgstr "使用例は :ref:`modelforms-factory` を参照してください。"

msgid ""
"You must provide the list of fields explicitly, either via keyword arguments "
"``fields`` or ``exclude``, or the corresponding attributes on the form's "
"inner ``Meta`` class. See :ref:`modelforms-selecting-fields` for more "
"information. Omitting any definition of the fields to use will result in an :"
"exc:`~django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""
"フィールドのリストは、キーワード引数 ``fields`` や ``exclude``、もしくは"
"フォームの内部の ``Meta`` クラスで対応する属性を使って、明示的に提供する必要"
"があります。詳しくは :ref:`modelforms-selecting-fields` を参照してください。"
"使うフィールドの定義を省略すると、:exc:`~django.core.exceptions."
"ImproperlyConfigured` 例外を引き起こします。"

msgid "``modelformset_factory``"
msgstr "``modelformset_factory``"

msgid "Returns a ``FormSet`` class for the given ``model`` class."
msgstr "与えられた ``model`` クラスに対して、``FormSet`` クラスを返します。"

msgid ""
"Arguments ``model``, ``form``, ``fields``, ``exclude``, "
"``formfield_callback``, ``widgets``, ``localized_fields``, ``labels``, "
"``help_texts``, ``error_messages``, and ``field_classes`` are all passed "
"through to :func:`~django.forms.models.modelform_factory`."
msgstr ""
"引数 ``model``、``form``、``fields``、``exclude``、``formfield_callback``、"
"``widgets``、``localized_fields``、``labels``、``help_texts``、"
"``error_messages``、``field_classes`` は、すべて :func:`~django.forms.models."
"modelform_factory` を通して引き渡されます。"

msgid ""
"Arguments ``formset``, ``extra``, ``can_delete``, ``can_order``, "
"``max_num``, ``validate_max``, ``min_num``, ``validate_min``, "
"``absolute_max``, ``can_delete_extra``, and ``renderer`` are passed through "
"to :func:`~django.forms.formsets.formset_factory`. See :doc:`formsets </"
"topics/forms/formsets>` for details."
msgstr ""
"引数 ``formset``, ``extra``, ``can_delete``, ``can_order``, ``max_num``, "
"``validate_max``, ``min_num``, ``validate_min``, ``absolute_max``, "
"``can_delete_extra``, および ``renderer`` は :func:`~django.forms.formsets."
"formset_factory` にそのまま渡されます。詳細については :doc:`フォームセット </"
"topics/forms/formsets>` を参照してください。"

msgid ""
"The ``edit_only`` argument allows :ref:`preventing new objects creation "
"<model-formsets-edit-only>`."
msgstr ""
"``edit_only`` 引数は :ref:`新しいオブジェクトの作成を防ぐ <model-formsets-"
"edit-only>` のに使用できます。"

msgid "See :ref:`model-formsets` for example usage."
msgstr "使用例は :ref:`model-formsets` を参照してください。"

msgid "``inlineformset_factory``"
msgstr "``inlineformset_factory``"

msgid ""
"Returns an ``InlineFormSet`` using :func:`modelformset_factory` with "
"defaults of ``formset=``:class:`~django.forms.models.BaseInlineFormSet`, "
"``can_delete=True``, and ``extra=3``."
msgstr ""
"``formset=``:class:`~django.forms.models.BaseInlineFormSet`、"
"``can_delete=True``、``extra=3`` をデフォルトとする、 :func:"
"`modelformset_factory` を使った ``InlineFormSet`` を返します。"

msgid ""
"If your model has more than one :class:`~django.db.models.ForeignKey` to the "
"``parent_model``, you must specify a ``fk_name``."
msgstr ""
"モデルが ``parent_model`` に複数の :class:`~django.db.models.ForeignKey` を持"
"つ場合,  ``fk_name`` を指定する必要があります。"

msgid "See :ref:`inline-formsets` for example usage."
msgstr "使用例は :ref:`inline-formsets` を参照してください。"

msgid "The form rendering API"
msgstr "フォームレンダリング API"

msgid ""
"Django's form widgets are rendered using Django's :doc:`template engines "
"system </topics/templates>`."
msgstr ""
"Djangoのフォームウィジェットは、Djangoの :doc:`テンプレートエンジンシステム "
"</topics/templates>` を使用してレンダリングされます。"

msgid "The form rendering process can be customized at several levels:"
msgstr ""
"フォームのレンダリングプロセスは、いくつかのレベルでカスタマイズできます:"

msgid "Widgets can specify custom template names."
msgstr "ウィジェットはカスタムテンプレート名を指定できます。"

msgid "Forms and widgets can specify custom renderer classes."
msgstr "フォームとウィジェットは、カスタムレンダラークラスを指定できます。"

msgid ""
"A widget's template can be overridden by a project. (Reusable applications "
"typically shouldn't override built-in templates because they might conflict "
"with a project's custom templates.)"
msgstr ""
"ウィジェットのテンプレートはプロジェクトによって上書きできます。(再利用可能な"
"アプリケーションは通常、組込みテンプレートを上書きすべきではありません。なぜ"
"なら、それがプロジェクトのカスタムテンプレートと競合する可能性があるからで"
"す。)"

msgid "The low-level render API"
msgstr "低レベルのレンダリングAPI"

msgid ""
"The rendering of form templates is controlled by a customizable renderer "
"class. A custom renderer can be specified by updating the :setting:"
"`FORM_RENDERER` setting. It defaults to ``'``:class:`django.forms.renderers."
"DjangoTemplates`\\ ``'``."
msgstr ""
"フォームテンプレートのレンダリングは、カスタマイズ可能なレンダラークラスに"
"よって制御されます。カスタムレンダラーは、:setting:`FORM_RENDERER` 設定を更新"
"することによって指定できます。デフォルトでは ``'``:class:`django.forms."
"renderers.DjangoTemplates`\\ ``'`` になっています。"

msgid ""
"By specifying a custom form renderer and overriding :attr:`~.BaseRenderer."
"form_template_name` you can adjust the default form markup across your "
"project from a single place."
msgstr ""
"カスタムフォームレンダラーを指定し、:attr:`~.BaseRenderer."
"form_template_name` をオーバーライドすることで、プロジェクト全体のデフォルト"
"フォームマークアップを一か所から調整できます。"

msgid ""
"You can also provide a custom renderer per-form or per-widget by setting "
"the :attr:`.Form.default_renderer` attribute or by using the ``renderer`` "
"argument of :meth:`.Form.render`, or :meth:`.Widget.render`."
msgstr ""
":attr:`.Form.default_renderer` 属性を設定するか、または :meth:`.Form.render` "
"や :meth:`.Widget.render` のメソッドの ``renderer`` 引数を使用することで、"
"フォームごとやウィジェットごとにカスタムレンダラーを提供することもできます。"

msgid ""
"Matching points apply to formset rendering. See :ref:`formset-rendering` for "
"discussion."
msgstr ""
"マッチングポイントは、formset のレンダリングに適用されます。詳細は、:ref:"
"`formset-rendering` を参照してください。"

msgid ""
"Use one of the :ref:`built-in template form renderers <built-in-template-"
"form-renderers>` or implement your own. Custom renderers must implement a "
"``render(template_name, context, request=None)`` method. It should return a "
"rendered templates (as a string) or raise :exc:`~django.template."
"TemplateDoesNotExist`."
msgstr ""
":ref:`組み込みのテンプレートフォームレンダラ <built-in-template-form-"
"renderers>` のいずれかを使用するか、独自のものを実装してください。カスタムレ"
"ンダラは、``render(template_name, context, request=None)`` メソッドを実装する"
"必要があります。レンダリングされたテンプレート(文字列として)を返すか、 :exc:"
"`~django.template.TemplateDoesNotExist` を発生させるべきです。"

msgid "The base class for the built-in form renderers."
msgstr "組み込みフォームレンダラーの基底クラスです。"

msgid "The default name of the template to use to render a form."
msgstr ""
"フォームをレンダリングするために使用するテンプレートのデフォルト名です。"

msgid "Defaults to ``\"django/forms/div.html\"`` template."
msgstr "デフォルトは ``\"django/forms/div.html\"`` テンプレートです。"

msgid "The default name of the template to use to render a formset."
msgstr ""
"フォームセットをレンダリングするために使用するテンプレートのデフォルト名。"

msgid "Defaults to ``\"django/forms/formsets/div.html\"`` template."
msgstr "デフォルトは ``\"django/forms/formsets/div.html\"`` テンプレートです。"

msgid "The default name of the template used to render a ``BoundField``."
msgstr ""
"``BoundField`` をレンダリングするために使用されるテンプレートのデフォルト名。"

msgid "Defaults to ``\"django/forms/field.html\"``"
msgstr "デフォルトは ``\"django/forms/field.html\"`` です。"

msgid ""
"Subclasses must implement this method with the appropriate template finding "
"logic."
msgstr ""
"サブクラスは、適切なテンプレート検索ロジックを持つようにこのメソッドを実装し"
"なければなりません。"

msgid ""
"Renders the given template, or raises :exc:`~django.template."
"TemplateDoesNotExist`."
msgstr ""
"指定されたテンプレートをレンダリングします。存在しない場合は、 :exc:`~django."
"template.TemplateDoesNotExist` を発生させます。"

msgid "Built-in-template form renderers"
msgstr "組み込みのテンプレートフォームレンダラー"

msgid "``DjangoTemplates``"
msgstr "``DjangoTemplates``"

msgid ""
"This renderer uses a standalone :class:`~django.template.backends.django."
"DjangoTemplates` engine (unconnected to what you might have configured in "
"the :setting:`TEMPLATES` setting). It loads templates first from the built-"
"in form templates directory in :source:`django/forms/templates` and then "
"from the installed apps' templates directories using the :class:"
"`app_directories <django.template.loaders.app_directories.Loader>` loader."
msgstr ""
"このレンダラーは、 (:setting:`TEMPLATES` 設定で構成されているものとは接続され"
"ていない) 独立した :class:`~django.template.backends.django.DjangoTemplates` "
"エンジンを使用しています。まず :source:`django/forms/templates` にある組み込"
"みのフォームテンプレートディレクトリからテンプレートを読み込み、次に :class:"
"`app_directories <django.template.loaders.app_directories.Loader>` ローダーを"
"使用してインストール済みアプリのテンプレートディレクトリから読み込みます。"

msgid ""
"If you want to render templates with customizations from your :setting:"
"`TEMPLATES` setting, such as context processors for example, use the :class:"
"`TemplatesSetting` renderer."
msgstr ""
"カスタマイズを施した :setting:`TEMPLATES` 設定からテンプレートをレンダリング"
"したい場合、例えばコンテキストプロセッサなどを使用するには、:class:"
"`TemplatesSetting` レンダラーを使用してください。"

msgid "The alias of :class:`DjangoTemplates`."
msgstr ":class:`DjangoTemplates` のエイリアス。"

msgid "``Jinja2``"
msgstr "``Jinja2``"

msgid ""
"This renderer is the same as the :class:`DjangoTemplates` renderer except "
"that it uses a :class:`~django.template.backends.jinja2.Jinja2` backend. "
"Templates for the built-in widgets are located in :source:`django/forms/"
"jinja2` and installed apps can provide templates in a ``jinja2`` directory."
msgstr ""
"このレンダラーは :class:`DjangoTemplates` レンダラーと同じですが、:class:"
"`~django.template.backends.jinja2.Jinja2` バックエンドを使用します。組み込み"
"ウィジェットのテンプレートは :source:`django/forms/jinja2` にあり、インストー"
"ルされたアプリは ``jinja2`` ディレクトリ内にテンプレートを提供できます。"

msgid ""
"To use this backend, all the forms and widgets in your project and its third-"
"party apps must have Jinja2 templates. Unless you provide your own Jinja2 "
"templates for widgets that don't have any, you can't use this renderer. For "
"example, :mod:`django.contrib.admin` doesn't include Jinja2 templates for "
"its widgets due to their usage of Django template tags."
msgstr ""
"このバックエンドを使用するには、プロジェクトとそのサードパーティアプリのすべ"
"てのフォームとウィジェットにJinja2のテンプレートがなければなりません。ウィ"
"ジェットにJinja2のテンプレートがない場合、自分で提供しない限り、このレンダ"
"ラーを使用することはできません。例えば、 :mod:`django.contrib.admin` は、"
"Djangoのテンプレートタグを使用しているため、そのウィジェットにJinja2テンプ"
"レートを含んでいません。"

msgid "The alias of :class:`Jinja2`."
msgstr ":class:`Jinja2` のエイリアス。"

msgid "``TemplatesSetting``"
msgstr "``TemplatesSetting``"

msgid ""
"This renderer gives you complete control of how form and widget templates "
"are sourced. It uses :func:`~django.template.loader.get_template` to find "
"templates based on what's configured in the :setting:`TEMPLATES` setting."
msgstr ""
"このレンダラーは、フォームとウィジェットのテンプレートの取得方法を完全に制御"
"できます。これは、 :func:`~django.template.loader.get_template` を使用し"
"て、 :setting:`TEMPLATES` 設定で構成されている内容に基づいてテンプレートを見"
"つけます。"

msgid "Using this renderer along with the built-in templates requires either:"
msgstr ""
"このレンダラーを組み込みテンプレートと一緒に使用するには, 次のいずれかが必要"
"です:"

msgid ""
"``'django.forms'`` in :setting:`INSTALLED_APPS` and at least one engine "
"with :setting:`APP_DIRS=True <TEMPLATES-APP_DIRS>`."
msgstr ""
":setting:`INSTALLED_APPS` に ``'django.forms'`` が含まれていて、少なくとも一"
"つのエンジンが :setting:`APP_DIRS=True <TEMPLATES-APP_DIRS>` に設定されている"
"必要があります。"

msgid ""
"Adding the built-in templates directory in :setting:`DIRS <TEMPLATES-DIRS>` "
"of one of your template engines. To generate that path::"
msgstr ""
"テンプレートエンジンの :setting:`DIRS <TEMPLATES-DIRS>` に組み込みテンプレー"
"トディレクトリを追加します。そのパスを生成するには次のようにします:"

msgid ""
"Using this renderer requires you to make sure the form templates your "
"project needs can be located."
msgstr ""
"このレンダラーを使用するには、プロジェクトが必要とするフォームテンプレートが"
"見つかるようにする必要があります。"

msgid "Context available in formset templates"
msgstr "フォームセットテンプレートで利用可能なコンテキスト"

msgid ""
"Formset templates receive a context from :meth:`.BaseFormSet.get_context`. "
"By default, formsets receive a dictionary with the following values:"
msgstr ""
"フォームセットテンプレートは、 :meth:`.BaseFormSet.get_context` からコンテキ"
"ストを受け取ります。デフォルトでは、フォームセットは以下の値を含む辞書を受け"
"取ります:"

msgid "``formset``: The formset instance."
msgstr "``formset``: フォームセットのインスタンス。"

msgid "Context available in form templates"
msgstr "フォームテンプレートで利用可能なコンテキスト"

msgid ""
"Form templates receive a context from :meth:`.Form.get_context`. By default, "
"forms receive a dictionary with the following values:"
msgstr ""
"フォームテンプレートは、 :meth:`.Form.get_context` からコンテキストを受け取り"
"ます。デフォルトでは、フォームは次の値を持つ辞書を受け取ります。"

msgid "Context available in field templates"
msgstr "フィールドテンプレートで利用可能なコンテキスト"

msgid ""
"Field templates receive a context from :meth:`.BoundField.get_context`. By "
"default, fields receive a dictionary with the following values:"
msgstr ""
"フィールドテンプレートは、 :meth:`.BoundField.get_context` からコンテキストを"
"受け取ります。デフォルトでは、フィールドは以下の値を含む辞書を受け取ります:"

msgid "``field``: The :class:`~django.forms.BoundField`."
msgstr "``field``: :class:`~django.forms.BoundField` 。"

msgid "Context available in widget templates"
msgstr "ウィジェットテンプレートで利用可能なコンテキスト"

msgid ""
"Widget templates receive a context from :meth:`.Widget.get_context`. By "
"default, widgets receive a single value in the context, ``widget``. This is "
"a dictionary that contains values like:"
msgstr ""
"Widgetテンプレートは :meth:`.Widget.get_context` からコンテキストを受け取りま"
"す。デフォルトでは、ウィジェットはコンテキスト内で単一の値、 ``widget`` を受"
"け取ります。これは次のような値を含む辞書です:"

msgid "``value``"
msgstr "``value``"

msgid "``attrs``"
msgstr "``attrs``"

msgid "``is_hidden``"
msgstr "``is_hidden``"

msgid ""
"Some widgets add further information to the context. For instance, all "
"widgets that subclass ``Input`` defines ``widget['type']`` and :class:`."
"MultiWidget` defines ``widget['subwidgets']`` for looping purposes."
msgstr ""
"一部のウィジェットは、コンテキストにさらなる情報を追加します。例えば、"
"``Input`` のサブクラスであるすべてのウィジェットは ``widget['type']`` を定義"
"し、:class:`.MultiWidget` はループ目的のために ``widget['subwidgets']`` を定"
"義します。"

msgid "Overriding built-in formset templates"
msgstr "組み込みのフォームセットテンプレートをオーバーライドする"

msgid ":attr:`.BaseFormSet.template_name`"
msgstr ":attr:`.BaseFormSet.template_name`"

msgid ""
"To override formset templates, you must use the :class:`TemplatesSetting` "
"renderer. Then overriding formset templates works :doc:`the same as </howto/"
"overriding-templates>` overriding any other template in your project."
msgstr ""
"フォームセットテンプレートをオーバーライドするには、:class:"
"`TemplatesSetting` レンダラーを使用する必要があります。そうすると、フォーム"
"セットテンプレートのオーバーライドは、プロジェクト内の他のテンプレートをオー"
"バーライドするのと :doc:`同じように行うことができます </howto/overriding-"
"templates>` 。"

msgid "Overriding built-in form templates"
msgstr "組み込みのフォームテンプレートをオーバーライドする"

msgid ":attr:`.Form.template_name`"
msgstr ":attr:`.Form.template_name`"

msgid ""
"To override form templates, you must use the :class:`TemplatesSetting` "
"renderer. Then overriding form templates works :doc:`the same as </howto/"
"overriding-templates>` overriding any other template in your project."
msgstr ""
"フォームテンプレートをオーバーライドするには、:class:`TemplatesSetting` レン"
"ダラーを使用する必要があります。その後、フォームテンプレートのオーバーライド"
"は、プロジェクト内の他のテンプレートをオーバーライドする場合と :doc:`同様に機"
"能します </howto/overriding-templates>`。"

msgid "Overriding built-in field templates"
msgstr "組み込みのフィールドテンプレートをオーバーライドする"

msgid ":attr:`.Field.template_name`"
msgstr ":attr:`.Field.template_name`"

msgid ""
"To override field templates, you must use the :class:`TemplatesSetting` "
"renderer. Then overriding field templates works :doc:`the same as </howto/"
"overriding-templates>` overriding any other template in your project."
msgstr ""
"フィールドテンプレートを上書きするには、 :class:`TemplatesSetting` レンダラー"
"を使用する必要があります。それから、フィールドテンプレートのオーバーライド"
"は、プロジェクト内の他のテンプレートのオーバーライドと :doc:`同じ方法 </"
"howto/overriding-templates>` で機能します。"

msgid "Overriding built-in widget templates"
msgstr "組み込みのウィジェットテンプレートをオーバーライドする"

msgid ""
"Each widget has a ``template_name`` attribute with a value such as ``input."
"html``. Built-in widget templates are stored in the ``django/forms/widgets`` "
"path. You can provide a custom template for ``input.html`` by defining "
"``django/forms/widgets/input.html``, for example. See :ref:`built-in "
"widgets` for the name of each widget's template."
msgstr ""
"各ウィジェットは、``input.html`` のような値を持つ ``template_name`` 属性を"
"持っています。組み込みウィジェットテンプレートは、 ``django/forms/widgets`` "
"パスに格納されています。例えば、 ``django/forms/widgets/input.html`` を定義す"
"ることで、 ``input.html`` のカスタムテンプレートを提供できます。各ウィジェッ"
"トのテンプレートの名前については、 :ref:`built-in widgets` を参照してくださ"
"い。"

msgid ""
"To override widget templates, you must use the :class:`TemplatesSetting` "
"renderer. Then overriding widget templates works :doc:`the same as </howto/"
"overriding-templates>` overriding any other template in your project."
msgstr ""
"ウィジェットテンプレートをオーバーライドするには、 :class:`TemplatesSetting` "
"レンダラを使用する必要があります。その後、ウィジェットテンプレートのオーバー"
"ライドは、プロジェクト内の他のテンプレートをオーバーライドするのと :doc:`同じ"
"方法で機能 </howto/overriding-templates>` します。"

msgid "Form and field validation"
msgstr "フォームとフィールドのバリデーション"

msgid ""
"Form validation happens when the data is cleaned. If you want to customize "
"this process, there are various places to make changes, each one serving a "
"different purpose. Three types of cleaning methods are run during form "
"processing. These are normally executed when you call the ``is_valid()`` "
"method on a form. There are other things that can also trigger cleaning and "
"validation (accessing the ``errors`` attribute or calling ``full_clean()`` "
"directly), but normally they won't be needed."
msgstr ""
"フォームのバリデーションは、データがクリーニング (clean) されるときに実行され"
"ます。このプロセスをカスタムしたい場合は、様々な箇所に変更を加えることがで"
"き、それぞれが違う目的を持っています。クリーニング方法のうち 3 タイプは、"
"フォームのプロセス中に実行されます。これらは、通常フォーム上の "
"``is_valid()`` メソッドを呼び出したときに実行されます。このほかにも、クリーニ"
"ングとバリデーションのトリガーとなる処理 (直接 ``errors`` 属性にアクセスした"
"り、 ``full_clean()`` を直接呼び出す) がありますが、通常必要とはなりません。"

msgid ""
"In general, any cleaning method can raise ``ValidationError`` if there is a "
"problem with the data it is processing, passing the relevant information to "
"the ``ValidationError`` constructor. :ref:`See below <raising-validation-"
"error>` for the best practice in raising ``ValidationError``. If no "
"``ValidationError`` is raised, the method should return the cleaned "
"(normalized) data as a Python object."
msgstr ""
"一般的に、あらゆるクリーニング方法は ``ValidationError`` を投げる可能性があり"
"ます。処理されるデータに問題がある場合、関連情報を ``ValidationError`` コンス"
"トラクタに渡します。:ref:`下記項目 <raising-validation-error>` に、"
"``ValidationError`` を投げる際のベストプラクティスがあります。"
"``ValidationError`` が投げられない場合、メソッドはクリーニングされた (標準化"
"された) データを Python オブジェクトとして返すはずです。"

msgid ""
"Most validation can be done using `validators`_ - helpers that can be "
"reused. Validators are functions (or callables) that take a single argument "
"and raise ``ValidationError`` on invalid input. Validators are run after the "
"field's ``to_python`` and ``validate`` methods have been called."
msgstr ""
"ほとんどのバリデーションは `validators`_ を使用して行うことができます。これは"
"再利用できるヘルパーです。バリデーション用の関数（または呼び出し可能オブジェ"
"クト）は、単一の引数を取り、無効な入力の場合に ``ValidationError`` を発生させ"
"ます。バリデーション用の関数は、フィールドの ``to_python`` メソッドと "
"``validate`` メソッドが呼び出された後に実行されます。"

msgid ""
"Validation of a form is split into several steps, which can be customized or "
"overridden:"
msgstr ""
"フォームのバリデーションは複数のステップに分割されます。カスタムやオーバーラ"
"イドもできます:"

msgid ""
"The ``to_python()`` method on a ``Field`` is the first step in every "
"validation. It coerces the value to a correct datatype and raises "
"``ValidationError`` if that is not possible. This method accepts the raw "
"value from the widget and returns the converted value. For example, a "
"``FloatField`` will turn the data into a Python ``float`` or raise a "
"``ValidationError``."
msgstr ""
"``Field`` の ``to_python()`` メソッドはすべてのバリデーションの最初のステップ"
"となります。これは、値をデータ型に正すことを強制し、それができない場合は "
"``ValidationError`` を投げます。このメソッドはウィジェットからそのままの値を"
"受け取り、変換した値を返します。たとえば、``FloatField`` は Python の "
"``float`` に変換されるか、もしくは ``ValidationError`` を投げます。"

msgid ""
"The ``validate()`` method on a ``Field`` handles field-specific validation "
"that is not suitable for a validator. It takes a value that has been coerced "
"to a correct datatype and raises ``ValidationError`` on any error. This "
"method does not return anything and shouldn't alter the value. You should "
"override it to handle validation logic that you can't or don't want to put "
"in a validator."
msgstr ""
"``Field`` の ``validate()`` メソッドは、フィールド特有のバリデーションを行い"
"ます。これはバリデータとしては不適です。正しいデータ型を強制された値を取り、"
"エラーの際は ``ValidationError`` を投げます。このメソッドは何も返さず、また値"
"の変更も行わないはずです。バリデータに記述したくないバリデーションロジックを"
"実行するためには、このメソッドをオーバーライドしてください。"

msgid ""
"The ``run_validators()`` method on a ``Field`` runs all of the field's "
"validators and aggregates all the errors into a single ``ValidationError``. "
"You shouldn't need to override this method."
msgstr ""
"``Field`` の ``run_validators()`` メソッドはフィールドのバリデータをすべて実"
"行し、すべてのエラーを単一の ``ValidationError`` に統合します。このメソッドを"
"オーバーライドする必要はないはずです。"

msgid ""
"The ``clean()`` method on a ``Field`` subclass is responsible for running "
"``to_python()``, ``validate()``, and ``run_validators()`` in the correct "
"order and propagating their errors. If, at any time, any of the methods "
"raise ``ValidationError``, the validation stops and that error is raised. "
"This method returns the clean data, which is then inserted into the "
"``cleaned_data`` dictionary of the form."
msgstr ""
"``Field`` サブクラスの ``clean()`` メソッドは、``to_python()``、"
"``validate()``、``run_validators()`` を正しい順序で実行し、エラーを伝達する役"
"目を負っています。もしこの過程のどこかで ``ValidationError`` が投げられた場"
"合、バリデーションは停止し、そのエラーを投げます。このメソッドはクリーニング"
"されたデータを返し、フォームの ``cleaned_data`` ディクショナリに格納します。"

msgid ""
"The ``clean_<fieldname>()`` method is called on a form subclass -- where "
"``<fieldname>`` is replaced with the name of the form field attribute. This "
"method does any cleaning that is specific to that particular attribute, "
"unrelated to the type of field that it is. This method is not passed any "
"parameters. You will need to look up the value of the field in ``self."
"cleaned_data`` and remember that it will be a Python object at this point, "
"not the original string submitted in the form (it will be in "
"``cleaned_data`` because the general field ``clean()`` method, above, has "
"already cleaned the data once)."
msgstr ""
"``clean_<fieldname>()`` メソッドは、フォームサブクラス上で呼び出されます -- "
"``<fieldname>`` がフォームのフィールド属性の名前と置き換えられます。このメ"
"ソッドは、フィールドのタイプにかかわらず、その特定の属性に対するクリーニング"
"を実行します。 このメソッドはパラメータを受け取りません。``self."
"cleaned_data`` 内のフィールドの値を検索する必要があり、またこの時点ではフォー"
"ム上で元々送信された文字列ではなく Python オブジェクトであること覚えておいて"
"ください (これは ``cleaned_data`` 内にあります。上記に出てきた一般フィールド"
"の ``clean()`` メソッドがすでに一度データをクリーニングしているからです)。"

msgid ""
"For example, if you wanted to validate that the contents of a ``CharField`` "
"called ``serialnumber`` was unique, ``clean_serialnumber()`` would be the "
"right place to do this. You don't need a specific field (it's a "
"``CharField``), but you want a formfield-specific piece of validation and, "
"possibly, cleaning/normalizing the data."
msgstr ""
"例えば、 ``serialnumber`` という ``CharField`` の内容が一意であることを検証し"
"たい場合、 ``clean_serialnumber()`` が適切な場所になります。特定のフィールド"
"は必要ありません (``CharField`` です) が、フォームフィールド固有のバリデー"
"ションや、データのクリーニング/正規化が必要です。"

msgid ""
"The return value of this method replaces the existing value in "
"``cleaned_data``, so it must be the field's value from ``cleaned_data`` "
"(even if this method didn't change it) or a new cleaned value."
msgstr ""
"このメソッドの戻り値は ``cleaned_data`` 内の既存の値を置き換えるため、(たとえ"
"このメソッドが変更しなかったとしても) ``cleaned_data`` からのフィールドの値、"
"ないし新しくクリーニングされた値になるはずです。"

msgid ""
"The form subclass's ``clean()`` method can perform validation that requires "
"access to multiple form fields. This is where you might put in checks such "
"as \"if field ``A`` is supplied, field ``B`` must contain a valid email "
"address\". This method can return a completely different dictionary if it "
"wishes, which will be used as the ``cleaned_data``."
msgstr ""
"フォームのサブクラスの ``clean()`` メソッドは、複数のフォームフィールドにまた"
"がるバリデーションにも使用できます。この場所には、たとえば「フィールド ``A`` "
"が入力されたときフィールド ``B`` は有効なメールアドレスのはず」といったチェッ"
"クを記述できます。このメソッドは、必要な場合はまったく違うディクショナリを返"
"すこともでき、その場合は ``cleaned_data`` として使用されます。"

msgid ""
"Since the field validation methods have been run by the time ``clean()`` is "
"called, you also have access to the form's ``errors`` attribute which "
"contains all the errors raised by cleaning of individual fields."
msgstr ""
"フィールドバリデーションのメソッドは ``clean()`` が呼ばれる際に実行されるの"
"で、フォームの ``errors`` 属性にもアクセスできるようになります。これは各"
"フィールドのクリーニングによって発生した例外をすべて含みます。"

msgid ""
"Note that any errors raised by your :meth:`Form.clean()` override will not "
"be associated with any field in particular. They go into a special "
"\"field\" (called ``__all__``), which you can access via the :meth:`~django."
"forms.Form.non_field_errors` method if you need to. If you want to attach "
"errors to a specific field in the form, you need to call :meth:`~django."
"forms.Form.add_error()`."
msgstr ""
":meth:`Form.clean()` をオーバーライドして発生させた例外は、特定のフィールドに"
"結びつかない点に注意してください。これらは特別な \"フィールド\" (``__all__`` "
"と呼ばれます) に格納され、必要に応じて :meth:`~django.forms.Form."
"non_field_errors` メソッドを通じてアクセスできます。特定のフィールドにエラー"
"を紐付けて格納したい場合は、:meth:`~django.forms.Form.add_error()` を呼び出す"
"必要があります。"

msgid ""
"Also note that there are special considerations when overriding the "
"``clean()`` method of a ``ModelForm`` subclass. (see the :ref:`ModelForm "
"documentation <overriding-modelform-clean-method>` for more information)"
msgstr ""
"``ModelForm`` サブクラスの ``clean()`` メソッドをオーバーライドする際、特に考"
"慮する点がまだあります (詳しくは :ref:`ModelForm ドキュメント <overriding-"
"modelform-clean-method>`  を参照してください)。"

msgid ""
"These methods are run in the order given above, one field at a time.  That "
"is, for each field in the form (in the order they are declared in the form "
"definition), the ``Field.clean()`` method (or its override) is run, then "
"``clean_<fieldname>()``. Finally, once those two methods are run for every "
"field, the :meth:`Form.clean()` method, or its override, is executed whether "
"or not the previous methods have raised errors."
msgstr ""
"これらのメソッドは、一度に一つのフィールドに対し、先述した通りの順番で実行さ"
"れます。フォーム内の各フィールドに対して (フォームの定義時に宣言された順序"
"で)、``Field.clean()`` メソッド (ないしそのオーバーライド) が実行され、その"
"後 ``clean_<fieldname>()`` が実行されます。最後に、この 2 つのメソッドが全"
"フィールドに対して実行された後、これらのメソッドでエラーが発生したかどうかに"
"かかわらず :meth:`Form.clean()` メソッド (ないしそのオーバーライド) が実行さ"
"れます。"

msgid "Examples of each of these methods are provided below."
msgstr "各メソッドの例は後述します。"

msgid ""
"As mentioned, any of these methods can raise a ``ValidationError``. For any "
"field, if the ``Field.clean()`` method raises a ``ValidationError``, any "
"field-specific cleaning method is not called. However, the cleaning methods "
"for all remaining fields are still executed."
msgstr ""
"上述の通り、どのメソッドでも ``ValidationError`` が発生する可能性があります。"
"どのフィールドに対しても、``Field.clean()`` メソッドが ``ValidationError`` を"
"発生させた場合、フィールド特有のクリーニングメソッドは呼ばれません。一方で、"
"すべての残りのフィールドに対するクリーニングメソッドは呼び出されます。"

msgid "Raising ``ValidationError``"
msgstr "``ValidationError`` を発生させる"

msgid ""
"In order to make error messages flexible and easy to override, consider the "
"following guidelines:"
msgstr ""
"エラーメッセージを柔軟かつ簡単にオーバーライドできるようにするため、以下のガ"
"イドラインを検討してください:"

msgid "Provide a descriptive error ``code`` to the constructor::"
msgstr "説明のための ``code`` をコンストラクタに渡します::"

msgid ""
"Don't coerce variables into the message; use placeholders and the ``params`` "
"argument of the constructor::"
msgstr ""
"メッセージには変数を強制しません; プレースホルダとコンストラクタの "
"``params`` 引数を使用します::"

msgid ""
"Use mapping keys instead of positional formatting. This enables putting the "
"variables in any order or omitting them altogether when rewriting the "
"message::"
msgstr ""
"位置指定ではなく、マッピングキーを使います。これにより、メッセージを書き直す"
"ときに、変数を任意の順序で配置したり、すべて省略したりすることができます。"

msgid "Wrap the message with ``gettext`` to enable translation::"
msgstr "メッセージを ``gettext`` でラップし、翻訳できるようにします::"

msgid "Putting it all together::"
msgstr "全てを一緒に記述すると以下のようになります::"

msgid ""
"Following these guidelines is particularly necessary if you write reusable "
"forms, form fields, and model fields."
msgstr ""
"再利用可能なフォーム、フォームフィールド、モデルフィールドを記述した場合、特"
"にこのガイドラインの遵守が必要となります。"

msgid ""
"While not recommended, if you are at the end of the validation chain (i.e. "
"your form ``clean()`` method) and you know you will *never* need to override "
"your error message you can still opt for the less verbose::"
msgstr ""
"推奨はされませんが、バリデーションチェーンの最後で (たとえばフォームの "
"``clean()`` メソッド) エラーメッセージのオーバーライドを *決してしない* こと"
"が確かな場合は、より簡潔に記述することもできます::"

msgid ""
"The :meth:`Form.errors.as_data() <django.forms.Form.errors.as_data()>` and :"
"meth:`Form.errors.as_json() <django.forms.Form.errors.as_json()>` methods "
"greatly benefit from fully featured ``ValidationError``\\s (with a ``code`` "
"name and a ``params`` dictionary)."
msgstr ""
":meth:`Form.errors.as_data() <django.forms.Form.errors.as_data()>` や :meth:"
"`Form.errors.as_json() <django.forms.Form.errors.as_json()>` メソッドは、十分"
"な機能を有する (``code`` 名と ``params`` ディクショナリを持つ) "
"``ValidationError`` により大きな恩恵を受けます。"

msgid "Raising multiple errors"
msgstr "複数のエラーを起こす"

msgid ""
"If you detect multiple errors during a cleaning method and wish to signal "
"all of them to the form submitter, it is possible to pass a list of errors "
"to the ``ValidationError`` constructor."
msgstr ""
"クリーニングメソッド内で複数のエラーを検証し、すべてのエラーをフォーム送信者"
"に知らせたい場合、``ValidationError`` コンストラクタにエラーのリストを渡すこ"
"とができます。"

msgid ""
"As above, it is recommended to pass a list of ``ValidationError`` instances "
"with ``code``\\s and ``params`` but a list of strings will also work::"
msgstr ""
"上述の通り、``ValidationError`` インスタンスには ``code`` と ``params`` を渡"
"すことが推奨されていますが、文字列のリストも使うことができます::"

msgid "Using validation in practice"
msgstr "実際にバリデーションを使用する"

msgid ""
"The previous sections explained how validation works in general for forms. "
"Since it can sometimes be easier to put things into place by seeing each "
"feature in use, here are a series of small examples that use each of the "
"previous features."
msgstr ""
"前のセクションでは、フォームに対する検証が一般にどのように働くかを説明しまし"
"た。実際の使われ方を見た方が機能をよく理解できるということが往々にしてありま"
"す。ここでは、説明した各機能を使った一連の小さな使用例を説明します。"

msgid "Using validators"
msgstr "バリデータを使う"

msgid ""
"Django's form (and model) fields support use of utility functions and "
"classes known as validators. A validator is a callable object or function "
"that takes a value and returns nothing if the value is valid or raises a :"
"exc:`~django.core.exceptions.ValidationError` if not. These can be passed to "
"a field's constructor, via the field's ``validators`` argument, or defined "
"on the :class:`~django.forms.Field` class itself with the "
"``default_validators`` attribute."
msgstr ""
"Django のフォーム(とモデル)フィールドは、バリデータとして知られるユーティリ"
"ティ関数やクラスの使用をサポートしています。バリデータは呼び出し可能なオブ"
"ジェクトや関数で、値を受け取り、その値が有効であれば何も返さず、有効でなけれ"
"ば :exc:`~django.core.exceptions.ValidationError` を発生させます。バリデータ"
"はフィールドのコンストラクタに渡すか、フィールドの ``validators`` 引数で渡す"
"か、 :class:`~django.forms.Field` クラスの ``default_validators`` 属性で定義"
"します。"

msgid ""
"Validators can be used to validate values inside the field, let's have a "
"look at Django's ``SlugField``::"
msgstr ""
"バリデータはフィールド内の値を検証するために使用できます。Django の "
"``SlugField`` を見てみましょう:"

msgid ""
"As you can see, ``SlugField`` is a ``CharField`` with a customized validator "
"that validates that submitted text obeys to some character rules. This can "
"also be done on field definition so::"
msgstr ""
"``SlugField`` は、特定の文字規則に従うテキストを受け付けるように検証するカス"
"タムバリデータを持つ ``CharField`` です。これは、フィールド定義時にも行うこと"
"ができます。"

msgid "is equivalent to::"
msgstr "これは以下と同じです::"

msgid ""
"Common cases such as validating against an email or a regular expression can "
"be handled using existing validator classes available in Django. For "
"example, ``validators.validate_slug`` is an instance of a :class:`~django."
"core.validators.RegexValidator` constructed with the first argument being "
"the pattern: ``^[-a-zA-Z0-9_]+$``. See the section on :doc:`writing "
"validators </ref/validators>` to see a list of what is already available and "
"for an example of how to write a validator."
msgstr ""
"一般的なケース (たとえば、メールや正規表現に対する検証) は、Django が提供する"
"既存のバリデータクラスを使って処理できます。たとえば、``validators."
"validate_slug`` は :class:`~django.core.validators.RegexValidator` の第 1 引"
"数をパターン ``^[-a-zA-Z0-9_]+$`` としたインスタンスです。:doc:`バリデータを"
"記述する </ref/validators>` のセクションを参照して、利用可能なバリデータのリ"
"ストとバリデータの記述方法の例を確認できます。"

msgid "Form field default cleaning"
msgstr "フォームフィールドのデフォルトのクリーニング"

msgid ""
"Let's first create a custom form field that validates its input is a string "
"containing comma-separated email addresses. The full class looks like this::"
msgstr ""
"まず、カンマで区切られたメールアドレスを含むかどうか検証するカスタムフォーム"
"フィールドを作成しましょう。クラスの全体像は以下のようになります::"

msgid ""
"Every form that uses this field will have these methods run before anything "
"else can be done with the field's data. This is cleaning that is specific to "
"this type of field, regardless of how it is subsequently used."
msgstr ""
"このフィールドを使うすべてのフォームでは、フィールドのデータを使えるようにな"
"る前に、これらのメソッドが実行されます。これはこのタイプのフィールドに特有で"
"あり、それはこの後の使われ方には関係ありません。"

msgid ""
"Let's create a ``ContactForm`` to demonstrate how you'd use this field::"
msgstr ""
"このフィールドの使い方を示すために、``ContactForm`` を作成してみましょう:"

msgid ""
"Use ``MultiEmailField`` like any other form field. When the ``is_valid()`` "
"method is called on the form, the ``MultiEmailField.clean()`` method will be "
"run as part of the cleaning process and it will, in turn, call the custom "
"``to_python()`` and ``validate()`` methods."
msgstr ""
"``MultiEmailField`` は他のフォームフィールドと同様に使用します。フォームに対"
"して ``is_valid()`` メソッドが呼び出されると、クリーニングプロセスの一環とし"
"て ``MultiEmailField.clean()`` メソッドが実行され、それがさらにカスタムの "
"``to_python()`` および ``validate()`` メソッドを呼び出します。"

msgid "Cleaning a specific field attribute"
msgstr "特定のフィールド属性をクリーニングする"

msgid ""
"Continuing on from the previous example, suppose that in our "
"``ContactForm``, we want to make sure that the ``recipients`` field always "
"contains the address ``\"fred@example.com\"``. This is validation that is "
"specific to our form, so we don't want to put it into the general "
"``MultiEmailField`` class. Instead, we write a cleaning method that operates "
"on the ``recipients`` field, like so::"
msgstr ""
"上の例を引き続き使用して、``ContactForm`` の ``recipients`` フィールドが常に "
"``\"fred@example.com\"`` を含むようにしたいとします。これはフォームに特有のバ"
"リデーションなので、``MultiEmailField`` クラスには記述したくありません。代わ"
"りに ``recipients`` フィールドで動作するクリーニングメソッドを記述します:"

msgid "Cleaning and validating fields that depend on each other"
msgstr "互いに依存するフィールドをクリーニングして検証する"

msgid ""
"Suppose we add another requirement to our contact form: if the ``cc_myself`` "
"field is ``True``, the ``subject`` must contain the word ``\"help\"``. We "
"are performing validation on more than one field at a time, so the form's :"
"meth:`~Form.clean()` method is a good spot to do this. Notice that we are "
"talking about the ``clean()`` method on the form here, whereas earlier we "
"were writing a ``clean()`` method on a field. It's important to keep the "
"field and form difference clear when working out where to validate things. "
"Fields are single data points, forms are a collection of fields."
msgstr ""
"コンタクトフォームに新たな要件を追加することを考えます: ``cc_myself`` フィー"
"ルドが ``True`` の場合、``subject`` には必ず ``\"help\"`` という言葉が含まれ"
"るという要件です。この場合、複数のフィールドにまたがったバリデーションを行う"
"ので、フォームの :meth:`~Form.clean()` メソッドで行うのが適切です。ここで注意"
"すべきなのは、今扱っているのはフォームの ``clean()`` メソッドであり、上記で"
"扱ってきたフィールドの ``clean()`` ではないということです。バリデーションを記"
"述すする場所を決める際は、フィールドとフォームの違いを明確にすることが重要で"
"す。 フィールドは単一のデータポイントであり、フォームはフィールドの集まりで"
"す。"

msgid ""
"By the time the form's ``clean()`` method is called, all the individual "
"field clean methods will have been run (the previous two sections), so "
"``self.cleaned_data`` will be populated with any data that has survived so "
"far. So you also need to remember to allow for the fact that the fields you "
"are wanting to validate might not have survived the initial individual field "
"checks."
msgstr ""
"フォームの ``clean()`` メソッドが呼び出されるまでに、個別のフィールドのクリー"
"ンメソッドが呼び出されているので (上記 2 つのセクションで見た通りです)、"
"``self.cleaned_data`` にはこれまでのクリーニングで生き残ったデータが格納され"
"ています。したがって、検証しようとしているフィールドが、この個別フィールドの"
"チェックを生き残っていない可能性を考慮する必要があります。"

msgid ""
"There are two ways to report any errors from this step. Probably the most "
"common method is to display the error at the top of the form. To create such "
"an error, you can raise a ``ValidationError`` from the ``clean()`` method. "
"For example::"
msgstr ""
"この段階でのエラーを通知するには 2 つの方法があります。おそらく最も一般的な方"
"法は、フォームのトップでエラーを表示する方法です。このようなエラーを生成する"
"には、``clean()`` メソッドで ``ValidationError`` を発生させてください。次に例"
"を示します。"

msgid ""
"In this code, if the validation error is raised, the form will display an "
"error message at the top of the form (normally) describing the problem. Such "
"errors are non-field errors, which are displayed in the template with "
"``{{ form.non_field_errors }}``."
msgstr ""
"このコードでは、検証エラーが発生した場合、通常、問題を説明するエラーメッセー"
"ジがフォームの上部に表示されます。このようなエラーは、フィールド以外のエラー"
"とされ、テンプレート内で ``{{ form.non_field_errors }}`` として表示されます。"

msgid ""
"The call to ``super().clean()`` in the example code ensures that any "
"validation logic in parent classes is maintained. If your form inherits "
"another that doesn't return a ``cleaned_data`` dictionary in its ``clean()`` "
"method (doing so is optional), then don't assign ``cleaned_data`` to the "
"result of the ``super()`` call and use ``self.cleaned_data`` instead::"
msgstr ""
"例のコードにある ``super().clean()`` の呼び出しは、親クラスのバリデーションロ"
"ジックも維持されることを保証します。``clean()`` メソッドで (必須ではないの"
"で) ``cleaned_data`` ディクショナリを返さないクラスを継承している場合、"
"``cleaned_data`` を ``super()`` の結果にアサインせず、代わりに ``self."
"cleaned_data`` を使用してください::"

msgid ""
"The second approach for reporting validation errors might involve assigning "
"the error message to one of the fields. In this case, let's assign an error "
"message to both the \"subject\" and \"cc_myself\" rows in the form display. "
"Be careful when doing this in practice, since it can lead to confusing form "
"output. We're showing what is possible here and leaving it up to you and "
"your designers to work out what works effectively in your particular "
"situation. Our new code (replacing the previous sample) looks like this::"
msgstr ""
"バリデーションエラーを通知するもう 1 つのアプローチは、エラーメッセージを"
"フィールドの 1 つにアサインすることです。この場合、エラーメッセージはフォーム"
"表示の  \"subject\" と \"cc_myself\" の両方の行にアサインしましょう。この方法"
"をとるときは、フォームの出力に混乱を招かないように注意してください。ここでは"
"何が可能なのかを示しますが、実際の状況で効果的に実装するのはあなたとあなたの"
"デザイナー次第です。(上の例を置き換えた) 新しいコードは以下のようになります::"

msgid ""
"The second argument of ``add_error()`` can be a string, or preferably an "
"instance of ``ValidationError``. See :ref:`raising-validation-error` for "
"more details. Note that ``add_error()`` automatically removes the field from "
"``cleaned_data``."
msgstr ""
"``add_error()`` の第2引数は、文字列でもよいですが、できれば "
"``ValidationError`` のインスタンスが最適です。詳細は、:ref:`raising-"
"validation-error` を参照してください。なお、``add_error()`` は自動的にフィー"
"ルドを ``cleaned_data`` から削除します。"

msgid ""
"A widget is Django's representation of an HTML input element. The widget "
"handles the rendering of the HTML, and the extraction of data from a GET/"
"POST dictionary that corresponds to the widget."
msgstr ""
"ウィジェットは、Django が HTML の input 要素の表現方法です。ウィジェットは、"
"HTML のレンダリングをコントロールして、ウィジェットに合致する GET/POST ディク"
"ショナリからデータを取り出します。"

msgid ""
"The HTML generated by the built-in widgets uses HTML5 syntax, targeting ``<!"
"DOCTYPE html>``. For example, it uses boolean attributes such as ``checked`` "
"rather than the XHTML style of ``checked='checked'``."
msgstr ""
"Built-in widgets によって作られる HTML は、``<!DOCTYPE html>`` を対象とした "
"HTML5 シンタックスを使います。たとえば、XHTML スタイルである "
"``checked='checked'`` よりも、``checked`` といった boolean 属性を使います。"

msgid ""
"Widgets should not be confused with the :doc:`form fields </ref/forms/"
"fields>`. Form fields deal with the logic of input validation and are used "
"directly in templates. Widgets deal with rendering of HTML form input "
"elements on the web page and extraction of raw submitted data. However, "
"widgets do need to be :ref:`assigned <widget-to-field>` to form fields."
msgstr ""
"ウィジェットを :doc:`フォームフィールド </ref/forms/fields>` と混同しないでく"
"ださい。フォームフィールドは入力値の検証ロジックを扱い、テンプレート内で直接"
"使用されます。ウィジェットはウェブページ上で input 要素から HTML の form をレ"
"ンダリングし、submit された生データを取り出します。ウィジェットはフォーム"
"フィールドにアサイン (:ref:`assigned <widget-to-field>`) される必要がありま"
"す。"

msgid "Specifying widgets"
msgstr "ウィジェットを指定する"

msgid ""
"Whenever you specify a field on a form, Django will use a default widget "
"that is appropriate to the type of data that is to be displayed. To find "
"which widget is used on which field, see the documentation about :ref:`built-"
"in-fields`."
msgstr ""
"フォーム上でフィールドを指定したときは、Django は描画されるデータのタイプに適"
"したデフォルトのウィジェットを使用します。各フィールドで使われるウィジェット"
"を調べるためには、 :ref:`built-in-fields` を参照してください。"

msgid ""
"However, if you want to use a different widget for a field, you can use the :"
"attr:`~Field.widget` argument on the field definition. For example::"
msgstr ""
"しかし、フィールドに別のウィジェットを使用したい場合は、フィールド定義で :"
"attr:`~Field.widget` 引数を使用できます。例えば:"

msgid ""
"This would specify a form with a comment that uses a larger :class:"
"`Textarea` widget, rather than the default :class:`TextInput` widget."
msgstr ""
"これは、comment のフォームに対して、デフォルトの :class:`TextInput` ウィ"
"ジェットではなく、より大きなサイズの :class:`Textarea` ウィジェットを指定して"
"います。"

msgid "Setting arguments for widgets"
msgstr "ウィジェットの引数を設定する"

msgid ""
"Many widgets have optional extra arguments; they can be set when defining "
"the widget on the field. In the following example, the :attr:`~django.forms."
"SelectDateWidget.years` attribute is set for a :class:`~django.forms."
"SelectDateWidget`::"
msgstr ""
"多くのウィジェットは、省略可能な追加の引数を持っています; これらは、フィール"
"ド上でウィジェットを定義する際にセットできます。以下の例では、:class:"
"`~django.forms.SelectDateWidget` に対して :attr:`~django.forms."
"SelectDateWidget.years` 属性がセットされます::"

msgid ""
"See the :ref:`built-in widgets` for more information about which widgets are "
"available and which arguments they accept."
msgstr ""
"使用可能なウィジェットとそれぞれの引数の詳細については、:ref:`built-in "
"widgets` を参照してください。"

msgid "Widgets inheriting from the ``Select`` widget"
msgstr "``Select`` ウィジェットを継承したウィジェット"

msgid ""
"Widgets inheriting from the :class:`Select` widget deal with choices. They "
"present the user with a list of options to choose from. The different "
"widgets present this choice differently; the :class:`Select` widget itself "
"uses a ``<select>`` HTML list representation, while :class:`RadioSelect` "
"uses radio buttons."
msgstr ""
":class:`Select` ウィジェットを継承したウィジェットは、選択肢を扱います。これ"
"らはユーザーに選択肢のリストを提示します。提示される選択肢はウィジェットに"
"よって異なります; :class:`Select` ウィジェット自体は、``<select>`` HTML のリ"
"スト表現を使い、一方で :class:`RadioSelect` はラジオボタンを使います。"

msgid ""
":class:`Select` widgets are used by default on :class:`ChoiceField` fields. "
"The choices displayed on the widget are inherited from the :class:"
"`ChoiceField` and changing :attr:`ChoiceField.choices` will update :attr:"
"`Select.choices`. For example:"
msgstr ""
":class:`ChoiceField` フィールドではデフォルトで :class:`Select` ウィジェット"
"が使用されます。ウィジェットに表示される選択肢は :class:`ChoiceField` から継"
"承され、:attr:`ChoiceField.choices` の変更は :attr:`Select.choices` を更新し"
"ます。例えば:"

msgid ""
"Widgets which offer a :attr:`~Select.choices` attribute can however be used "
"with fields which are not based on choice -- such as a :class:`CharField` -- "
"but it is recommended to use a :class:`ChoiceField`-based field when the "
"choices are inherent to the model and not just the representational widget."
msgstr ""
"とは言うものの、:attr:`~Select.choices` 属性を提供するウィジェットは、選択肢"
"に基づかないフィールド (たとえば :class:`CharField`) とともに使うことができま"
"すが、選択肢がモデルに継承され、単に表示されるだけのウィジェットではないとき"
"には、:class:`ChoiceField` に基づいたフィールドを使うことをおすすめします。"

msgid "Customizing widget instances"
msgstr "ウィジェットのインスタンスをカスタマイズする"

msgid ""
"When Django renders a widget as HTML, it only renders very minimal markup - "
"Django doesn't add class names, or any other widget-specific attributes. "
"This means, for example, that all :class:`TextInput` widgets will appear the "
"same on your web pages."
msgstr ""
"Django がウィジェットを HTML としてレンダリングする際、非常に最小限のマーク"
"アップのみをレンダリングします。Django はクラス名やその他のウィジェット固有の"
"属性を追加しません。したがって、例えばすべての :class:`TextInput` ウィジェッ"
"トはウェブページ上で同じように見えます。"

msgid ""
"There are two ways to customize widgets: :ref:`per widget instance <styling-"
"widget-instances>` and :ref:`per widget class <styling-widget-classes>`."
msgstr ""
"ウィジェットをカスタマイズする方法には 2 つあります: :ref:`ウィジェットごとの"
"インスタンス <styling-widget-instances>` と :ref:`ウィジェットごとのクラス "
"<styling-widget-classes>` です。"

msgid "Styling widget instances"
msgstr "ウィジェットのインスタンスにスタイルを設定する"

msgid ""
"If you want to make one widget instance look different from another, you "
"will need to specify additional attributes at the time when the widget "
"object is instantiated and assigned to a form field (and perhaps add some "
"rules to your CSS files)."
msgstr ""
"1 つのウィジェットのインスタンスを他と異なる見た目にしたい場合、ウィジェット"
"のオブジェクトをインスタンス化してフォームフィールドに割り当てるタイミング"
"で、追加の属性を指定する必要があります (そしておそらく、あなたの CSS ファイル"
"にいくつか記述を追加する必要もあります)。"

msgid "For example, take the following form::"
msgstr "たとえば、以下のフォームを取り上げます:"

msgid ""
"This form will include three default :class:`TextInput` widgets, with "
"default rendering -- no CSS class, no extra attributes. This means that the "
"input boxes provided for each widget will be rendered exactly the same:"
msgstr ""
"このフォームには、デフォルトの :class:`TextInput` ウィジェットが3つ含まれま"
"す。デフォルトのレンダリング（CSSクラスも追加属性もなし）を行います。つまり、"
"各ウィジェット用の入力ボックスがまったく同じようにレンダリングされます。"

msgid ""
"On a real web page, you probably don't want every widget to look the same. "
"You might want a larger input element for the comment, and you might want "
"the 'name' widget to have some special CSS class. It is also possible to "
"specify the 'type' attribute to take advantage of the new HTML5 input "
"types.  To do this, you use the :attr:`Widget.attrs` argument when creating "
"the widget::"
msgstr ""
"実際のウェブページでは、すべてのウィジェットを同じように見せたくないでしょ"
"う。コメント用の入力エレメントを大きくしたいかもしれませんし、 'name' ウィ"
"ジェットに特別な CSS クラスを付けたいかもしれません。また、新しい HTML5 入力"
"タイプを活用するために 'type' 属性を指定することもできます。ウィジェットを作"
"成する際に :attr:`Widget.attrs` 引数を使用します。"

msgid "You can also modify a widget in the form definition::"
msgstr "フォーム定義内でウィジェットを変更することもできます:"

msgid ""
"Or if the field isn't declared directly on the form (such as model form "
"fields), you can use the :attr:`Form.fields` attribute::"
msgstr ""
"あるいは、フォームに直接フィールドが宣言されていない場合（モデルフォーム"
"フィールドなど）、:attr:`Form.fields` 属性を使用できます："

msgid "Django will then include the extra attributes in the rendered output:"
msgstr ""
"Django はこれで、レンダリングされたアウトプットに、追加的な要素を含むようにな"
"ります:"

msgid ""
"You can also set the HTML ``id`` using :attr:`~Widget.attrs`. See :attr:"
"`BoundField.id_for_label` for an example."
msgstr ""
":attr:`~Widget.attrs` を使った HTML の ``id`` をセットすることもできます。:"
"attr:`BoundField.id_for_label` で例を参照してください。"

msgid "Styling widget classes"
msgstr "ウィジェットのクラスにスタイルを設定する"

msgid ""
"With widgets, it is possible to add assets (``css`` and ``javascript``) and "
"more deeply customize their appearance and behavior."
msgstr ""
"ウィジェットとともに、アセット (``css`` や ``javascript``) 、およびより詳細に"
"カスタマイズされた見た目や動作を追加できます。"

msgid ""
"In a nutshell, you will need to subclass the widget and either :ref:`define "
"a \"Media\" inner class  <assets-as-a-static-definition>` or :ref:`create a "
"\"media\" property <dynamic-property>`."
msgstr ""
"要するに、ウィジェットをサブクラス化して、 :ref:`\"Media\" 内部クラスの定義 "
"<assets-as-a-static-definition>` か :ref:`\"media\" プロパティの作成 "
"<dynamic-property>` のどちらかをする必要があります。"

msgid ""
"These methods involve somewhat advanced Python programming and are described "
"in detail in the :doc:`Form Assets </topics/forms/media>` topic guide."
msgstr ""
"これらのメソッドにはやや高度なPythonプログラミングが含まれており、トピックガ"
"イド :doc:`フォームアセット </topics/forms/media>` で詳しく説明しています。"

msgid "Base widget classes"
msgstr "ウィジェットの base クラス"

msgid ""
"Base widget classes :class:`Widget` and :class:`MultiWidget` are subclassed "
"by all the :ref:`built-in widgets <built-in widgets>` and may serve as a "
"foundation for custom widgets."
msgstr ""
":class:`Widget` や :class:`MultiWidget` といった基本ウィジェットは、:ref:`ビ"
"ルトインのウィジェット <built-in widgets>` によってサブクラス化され、カスタム"
"ウィジェットのための基礎となります。"

msgid "``Widget``"
msgstr "``ウィジェット``"

msgid ""
"This abstract class cannot be rendered, but provides the basic attribute :"
"attr:`~Widget.attrs`.  You may also implement or override the :meth:`~Widget."
"render()` method on custom widgets."
msgstr ""
"この抽象クラスはレンダリングできませんが、基本的な属性 :attr:`~Widget.attrs` "
"を提供します。カスタムウィジェット上で :meth:`~Widget.render()` を実行するか"
"オーバーライドできます。"

msgid ""
"A dictionary containing HTML attributes to be set on the rendered widget."
msgstr ""
"ディクショナリは、レンダリングされたウィジェット上にセットされる HTML の属性"
"を含んでいます。"

msgid ""
"If you assign a value of ``True`` or ``False`` to an attribute, it will be "
"rendered as an HTML5 boolean attribute:"
msgstr ""
"属性に ``True`` または ``False`` の値を割り当てると、HTML5 のブール属性として"
"レンダリングされます。"

msgid ""
"An attribute that defaults to ``True``. If set to ``False``, the "
"microseconds part of :class:`~datetime.datetime` and :class:`~datetime.time` "
"values will be set to ``0``."
msgstr ""
"``True`` をデフォルト値にする属性です。``False`` にセットされた場合は、:"
"class:`~datetime.datetime` と :class:`~datetime.time` のマイクロ秒の部分の値"
"は、``0`` にセットされます。"

msgid ""
"Cleans and returns a value for use in the widget template. ``value`` isn't "
"guaranteed to be valid input, therefore subclass implementations should "
"program defensively."
msgstr ""
"ウィジェットのテンプレートで使うための値を整えて返します。``value`` は入力値"
"が検証されるとは限りません。そのため、サブクラスの実行は防衛的にプログラムさ"
"れなければなりません。"

msgid ""
"Returns a dictionary of values to use when rendering the widget template. By "
"default, the dictionary contains a single key, ``'widget'``, which is a "
"dictionary representation of the widget containing the following keys:"
msgstr ""
"ウィジェットテンプレートのレンダリングに使用する値の辞書を返します。デフォル"
"トでは、辞書には単一のキー ``'widget'`` が含まれています。これは、ウィジェッ"
"トの辞書表現であり、以下のキーを含んでいます："

msgid "``'name'``: The name of the field from the ``name`` argument."
msgstr "``'name'``: ``name`` 引数からのフィールド名です。"

msgid ""
"``'is_hidden'``: A boolean indicating whether or not this widget is hidden."
msgstr "``'is_hidden'``: このウィジェットが非表示かどうかを示す真偽値です。"

msgid ""
"``'required'``: A boolean indicating whether or not the field for this "
"widget is required."
msgstr ""
"``'required'``: このウィジェットのフィールドが必須かどうかを表す真偽値です。"

msgid "``'value'``: The value as returned by :meth:`format_value`."
msgstr "``'value'``: :meth:`format_value` が返す値。"

msgid ""
"``'attrs'``: HTML attributes to be set on the rendered widget. The "
"combination of the :attr:`attrs` attribute and the ``attrs`` argument."
msgstr ""
"``'attrs'``: レンダリングされるウィジェットに設定されるHTML属性。:attr:"
"`attrs` 属性と ``attrs`` 引数の組み合わせです。"

msgid "``'template_name'``: The value of ``self.template_name``."
msgstr "``'template_name'``: ``self.template_name`` の値。"

msgid ""
"``Widget`` subclasses can provide custom context values by overriding this "
"method."
msgstr ""
"``Widget`` のサブクラスは、このメソッドをオーバーライドすることで、カスタムの"
"コンテキスト値を提供できます。"

msgid ""
"Returns the HTML ID attribute of this widget for use by a ``<label>``, given "
"the ID of the field. Returns an empty string if an ID isn't available."
msgstr ""
"このウィジェットのHTML ID属性を返します。これは、フィールドのIDをもとにして "
"``<label>`` によって使用されます。IDが利用可能でない場合は、空の文字列を返し"
"ます。"

msgid ""
"This hook is necessary because some widgets have multiple HTML elements and, "
"thus, multiple IDs. In that case, this method should return an ID value that "
"corresponds to the first ID in the widget's tags."
msgstr ""
"いくつかのウィジェットは複数の HTML 要素、そして、複数の ID を持っているた"
"め、このフックが必要です。この場合、このメソッドは、ウィジェットのタグの最初"
"の ID と一致する ID 値を返す必要があります。"

msgid ""
"Renders a widget to HTML using the given renderer. If ``renderer`` is "
"``None``, the renderer from the :setting:`FORM_RENDERER` setting is used."
msgstr ""
"指定されたレンダラーを使用して、ウィジェットをHTMLにレンダリングします。"
"``renderer`` が ``None`` の場合、:setting:`FORM_RENDERER` の設定からレンダ"
"ラーが使用されます。"

msgid ""
"Given a dictionary of data and this widget's name, returns the value of this "
"widget. ``files`` may contain data coming from :attr:`request.FILES <django."
"http.HttpRequest.FILES>`. Returns ``None`` if a value wasn't provided. Note "
"also that ``value_from_datadict`` may be called more than once during "
"handling of form data, so if you customize it and add expensive processing, "
"you should implement some caching mechanism yourself."
msgstr ""
"データとこのウィジェットの名前のディクショナリが与えられ、このウィジェットの"
"値を返します。``files`` には :attr:`request.FILES <django.http.HttpRequest."
"FILES>` からのデータが含まれている可能性があります。値が指定されなかった場合"
"は ``None`` を返します。 また、``value_from_datadict`` はフォームデータの処理"
"中に複数回呼び出される可能性があるので、カスタマイズして複雑な処理を追加する"
"場合は、自分でキャッシュの仕組みを実装する必要があります。"

msgid ""
"Given ``data`` and ``files`` dictionaries and this widget's name, returns "
"whether or not there's data or files for the widget."
msgstr ""
"``data`` と ``files`` のディクショナリとこのウィジェットの名前が与えられ、"
"ウィジェットのためのデータやファイルが存在するかを返します。"

msgid ""
"The method's result affects whether or not a field in a model form :ref:"
"`falls back to its default <topics-modelform-save>`."
msgstr ""
"メソッドの結果は、モデルフォームのフィールドが :ref:`デフォルトに逆戻りする "
"<topics-modelform-save>` かどうかに影響します。"

msgid ""
"Special cases are :class:`~django.forms.CheckboxInput`, :class:`~django."
"forms.CheckboxSelectMultiple`, and :class:`~django.forms.SelectMultiple`, "
"which always return ``False`` because an unchecked checkbox and unselected "
"``<select multiple>`` don't appear in the data of an HTML form submission, "
"so it's unknown whether or not the user submitted a value."
msgstr ""
"特別なケースは :class:`~django.forms.CheckboxInput`、:class:`~django.forms."
"CheckboxSelectMultiple`、そして :class:`~django.forms.SelectMultiple` で、こ"
"れらは常に ``False`` を返します。なぜなら、チェックされていないチェックボック"
"スや選択されていない ``<select multiple>`` はHTMLフォームの送信データに現れな"
"いため、ユーザーが値を送信したかどうか不明だからです。"

msgid ""
"An attribute to identify if the widget should be grouped in a ``<fieldset>`` "
"with a ``<legend>`` when rendered. Defaults to ``False`` but is ``True`` "
"when the widget contains multiple ``<input>`` tags such as :class:`~django."
"forms.CheckboxSelectMultiple`, :class:`~django.forms.RadioSelect`, :class:"
"`~django.forms.MultiWidget`, :class:`~django.forms.SplitDateTimeWidget`, "
"and :class:`~django.forms.SelectDateWidget`."
msgstr ""
"レンダリング時にウィジェットが ``<fieldset>`` と ``<legend>`` でグループ化さ"
"れるべきかを識別するための属性です。デフォルトは ``False`` ですが、 :class:"
"`~django.forms.CheckboxSelectMultiple`, :class:`~django.forms.RadioSelect`, :"
"class:`~django.forms.MultiWidget`, :class:`~django.forms."
"SplitDateTimeWidget`, :class:`~django.forms.SelectDateWidget` のように複数の "
"``<input>`` タグを含むウィジェットの場合は ``True`` になります。"

msgid ""
"Given a form field's ``initial`` value, returns whether or not the widget "
"can be rendered with the ``required`` HTML attribute. Forms use this method "
"along with :attr:`Field.required <django.forms.Field.required>` and :attr:"
"`Form.use_required_attribute <django.forms.Form.use_required_attribute>` to "
"determine whether or not to display the ``required`` attribute for each "
"field."
msgstr ""
"フォームフィールドの ``初期の`` 値が与えられ、ウィジェットが ``必要な`` HTML "
"属性とともにレンダリングできるかどうかを返します。フォームは、各フィールドに "
"``必要な`` 属性をレンダリングするかどうかを決定するために、:attr:`Field."
"required <django.forms.Field.required>` と :attr:`Form."
"use_required_attribute <django.forms.Form.use_required_attribute>` とともにこ"
"のメソッドを使います。"

msgid ""
"By default, returns ``False`` for hidden widgets and ``True`` otherwise. "
"Special cases are :class:`~django.forms.FileInput` and :class:`~django.forms."
"ClearableFileInput`, which return ``False`` when ``initial`` is set, and :"
"class:`~django.forms.CheckboxSelectMultiple`, which always returns ``False`` "
"because browser validation would require all checkboxes to be checked "
"instead of at least one."
msgstr ""
"デフォルトでは、隠されたウィジェットの場合は ``False`` を返し、それ以外の場合"
"は ``True`` を返します。特別なケースは :class:`~django.forms.FileInput` と :"
"class:`~django.forms.ClearableFileInput` で、これらは ``initial`` が設定され"
"ている場合に ``False`` を返し、 :class:`~django.forms."
"CheckboxSelectMultiple` は常に ``False`` を返します。これは、ブラウザの検証が"
"すべてのチェックボックスをチェックするのではなく、少なくとも1つをチェックする"
"ことを要求するためです。"

msgid ""
"Override this method in custom widgets that aren't compatible with browser "
"validation. For example, a WSYSIWG text editor widget backed by a hidden "
"``textarea`` element may want to always return ``False`` to avoid browser "
"validation on the hidden field."
msgstr ""
"ブラウザの検証と互換性のないカスタムウィジェットでは、このメソッドをオーバー"
"ライドしてください。たとえば、ある非表示の ``textarea`` 要素が背後にある "
"WSYSIWG テキストエディタのウィジェットは、ブラウザが非表示のフィールドを検証"
"するのを避けるため、常に ``False`` を返したがるかもしれません。"

msgid "``MultiWidget``"
msgstr "``MultiWidget``"

msgid ""
"A widget that is composed of multiple widgets. :class:`~django.forms."
"MultiWidget` works hand in hand with the :class:`~django.forms."
"MultiValueField`."
msgstr ""
"複数のウィジェットで構成されたウィジェットです。:class:`~django.forms."
"MultiWidget` は :class:`~django.forms.MultiValueField` と協調して動作します。"

msgid ":class:`MultiWidget` has one required argument:"
msgstr ":class:`MultiWidget` には 1 つの必要な引数があります。"

msgid "An iterable containing the widgets needed. For example:"
msgstr "必要なウィジェットを含むイテラブルです。例えば:"

msgid ""
"You may provide a dictionary in order to specify custom suffixes for the "
"``name`` attribute on each subwidget. In this case, for each ``(key, "
"widget)`` pair, the key will be appended to the ``name`` of the widget in "
"order to generate the attribute value. You may provide the empty string "
"(``''``) for a single key, in order to suppress the suffix for one widget. "
"For example:"
msgstr ""
"各サブウィジェットの ``name`` 属性にカスタムの接尾辞を指定するための辞書を指"
"定します。この場合、各 ``(key, widget)`` のペアについて、キーがウィジェット"
"の ``name`` に追加されて属性値を生成します。一つのウィジェットの接尾辞を抑制"
"するには、単一のキーに空文字列 (``''``) を提供します。例えば:"

msgid "And one required method:"
msgstr "それと、1 つの必要なメソッドです:"

msgid ""
"This method takes a single \"compressed\" value from the field and returns a "
"list of \"decompressed\" values. The input value can be assumed valid, but "
"not necessarily non-empty."
msgstr ""
"このメソッドは、フィールドから単一の \"圧縮された\" 値を取り、\"解凍された\" "
"値のリストを返します。入力された値は検証済みと見なせますが、空 (empty)でない"
"とは限りません。"

msgid ""
"This method **must be implemented** by the subclass, and since the value may "
"be empty, the implementation must be defensive."
msgstr ""
"このメソッドは、サブクラスによって **実行される必要があり**、値が空 (empty) "
"かもしれないので、処理は防衛的である必要があります。"

msgid ""
"The rationale behind \"decompression\" is that it is necessary to \"split\" "
"the combined value of the form field into the values for each widget."
msgstr ""
"\"解凍\" の裏にある根本的な原理は、フォームのフィールドから各ウィジェットの値"
"に、結合された値を \"分割する\" 必要があることです。"

msgid ""
"An example of this is how :class:`SplitDateTimeWidget` turns a :class:"
"`~datetime.datetime` value into a list with date and time split into two "
"separate values::"
msgstr ""
"以下は、:class:`SplitDateTimeWidget` が どのように :class:"
"`SplitDateTimeWidget` の値を 2 つの分割された値に日付や時刻とともにリストに入"
"れるかの例です::"

msgid ""
"Note that :class:`~django.forms.MultiValueField` has a complementary method :"
"meth:`~django.forms.MultiValueField.compress` with the opposite "
"responsibility - to combine cleaned values of all member fields into one."
msgstr ""
":class:`~django.forms.MultiValueField` が、正反対の責務 - 全メンバーフィール"
"ドの整えられた値を 1 つにまとめること - を持つ補完メソッド :meth:`~django."
"forms.MultiValueField.compress` を持っていることを覚えておいてください。"

msgid "It provides some custom context:"
msgstr "いくつかのカスタムコンテキストを提供します:"

msgid ""
"In addition to the ``'widget'`` key described in :meth:`Widget.get_context`, "
"``MultiWidget`` adds a ``widget['subwidgets']`` key."
msgstr ""
":meth:`Widget.get_context` で説明されている ``'widget'`` キーに加えて、 "
"``MultiWidget`` は ``widget['subwidgets']`` キーを追加します。"

msgid "These can be looped over in the widget template:"
msgstr "これらはウィジェットテンプレートでループ処理が可能です:"

msgid ""
"Here's an example widget which subclasses :class:`MultiWidget` to display a "
"date with the day, month, and year in different select boxes. This widget is "
"intended to be used with a :class:`~django.forms.DateField` rather than a :"
"class:`~django.forms.MultiValueField`, thus we have implemented :meth:"
"`~Widget.value_from_datadict`::"
msgstr ""
"異なるセレクトボックス内で :class:`MultiWidget` を日、月、年とともに日付を表"
"示するためにサブクラス化するウィジェットの例です。このウィジェットは :class:"
"`~django.forms.MultiValueField` ではなく :class:`~django.forms.DateField` と"
"ともに使われることを意図しています。そして、:meth:`~Widget."
"value_from_datadict` が実行されています::"

msgid ""
"The constructor creates several :class:`Select` widgets in a list. The "
"``super()`` method uses this list to set up the widget."
msgstr ""
"コンストラクタはリスト内に複数の :class:`Select` ウィジェットを作成します。"
"``super()`` メソッドはこのリストを使用してウィジェットを設定します。"

msgid ""
"The required method :meth:`~MultiWidget.decompress` breaks up a ``datetime."
"date`` value into the day, month, and year values corresponding to each "
"widget. If an invalid date was selected, such as the non-existent 30th "
"February, the :class:`~django.forms.DateField` passes this method a string "
"instead, so that needs parsing. The final ``return`` handles when ``value`` "
"is ``None``, meaning we don't have any defaults for our subwidgets."
msgstr ""
"必須のメソッド :meth:`~MultiWidget.decompress` は、``datetime.date`` 値をそれ"
"ぞれのウィジェットに対応する日、月、年の値に分解します。存在しない日付、たと"
"えば2月30日のような無効な日付が選択された場合、 :class:`~django.forms."
"DateField` はこのメソッドに文字列を渡すため、それを解析する必要があります。最"
"終的な ``return`` は、``value`` が ``None`` の場合を処理します。これは、サブ"
"ウィジェットに対してデフォルト値がないことを意味します。"

msgid ""
"The default implementation of :meth:`~Widget.value_from_datadict` returns a "
"list of values corresponding to each ``Widget``. This is appropriate when "
"using a ``MultiWidget`` with a :class:`~django.forms.MultiValueField`. But "
"since we want to use this widget with a :class:`~django.forms.DateField`, "
"which takes a single value, we have overridden this method. The "
"implementation here combines the data from the subwidgets into a string in "
"the format that :class:`~django.forms.DateField` expects."
msgstr ""
"デフォルトの :meth:`~Widget.value_from_datadict` の実装は、各 ``Widget`` に対"
"応する値のリストを返します。これは、:class:`~django.forms.MultiValueField` と"
"一緒に ``MultiWidget`` を使用する場合に適しています。しかし、単一の値を取る :"
"class:`~django.forms.DateField` とこのウィジェットを使用したいため、このメ"
"ソッドをオーバーライドしました。ここでの実装では、サブウィジェットからのデー"
"タを、:class:`~django.forms.DateField` が期待する形式の文字列に組み合わせま"
"す。"

msgid "Built-in widgets"
msgstr "ビルトインのウィジェット"

msgid ""
"Django provides a representation of all the basic HTML widgets, plus some "
"commonly used groups of widgets in the ``django.forms.widgets`` module, "
"including :ref:`the input of text <text-widgets>`, :ref:`various checkboxes "
"and selectors <selector-widgets>`, :ref:`uploading files <file-upload-"
"widgets>`, and :ref:`handling of multi-valued input <composite-widgets>`."
msgstr ""
"Django は、全ての基本的な HTML ウィジェットの表現のほか、``django.forms."
"widgets`` でいくつかの一般的に使われるウィジェットのグループを提供します。こ"
"れは :ref:`テキストの入力 <text-widgets>`、:ref:`多種のチェックボックスおよび"
"選択肢 <selector-widgets>`、:ref:`ファイルアップロード <file-upload-"
"widgets>`、:ref:`複数値の入力の扱い <composite-widgets>` を含みます。"

msgid "Widgets handling input of text"
msgstr "テキストの入力を扱うウィジェット"

msgid "These widgets make use of the HTML elements ``input`` and ``textarea``."
msgstr ""
"これらのウィジェットは、 ``input`` と ``textarea`` の HTML 要素を使います。"

msgid "``TextInput``"
msgstr "``TextInput``"

msgid "``input_type``: ``'text'``"
msgstr "``input_type``: ``'text'``"

msgid "``template_name``: ``'django/forms/widgets/text.html'``"
msgstr "``template_name``: ``'django/forms/widgets/text.html'``"

msgid "Renders as: ``<input type=\"text\" ...>``"
msgstr "レンダリング結果: ``<input type=\"text\" ...>``"

msgid "``NumberInput``"
msgstr "``NumberInput``"

msgid "``input_type``: ``'number'``"
msgstr "``input_type``: ``'number'``"

msgid "``template_name``: ``'django/forms/widgets/number.html'``"
msgstr "``template_name``: ``'django/forms/widgets/number.html'``"

msgid "Renders as: ``<input type=\"number\" ...>``"
msgstr "レンダリング結果: ``<input type=\"number\" ...>``"

msgid ""
"Beware that not all browsers support entering localized numbers in "
"``number`` input types. Django itself avoids using them for fields having "
"their :attr:`~django.forms.Field.localize` property set to ``True``."
msgstr ""
"全てのブラウザが ``number`` input タイプへローカライズされた数値を入力するこ"
"とをサポートしていない点に注意してください。Django 自身、:attr:`~django."
"forms.Field.localize` プロパティが ``True`` にセットされたフィールドでは、こ"
"れらを使用しません。"

msgid "``EmailInput``"
msgstr "``EmailInput``"

msgid "``input_type``: ``'email'``"
msgstr "``input_type``: ``'email'``"

msgid "``template_name``: ``'django/forms/widgets/email.html'``"
msgstr "``template_name``: ``'django/forms/widgets/email.html'``"

msgid "Renders as: ``<input type=\"email\" ...>``"
msgstr "レンダリング結果: ``<input type=\"email\" ...>``"

msgid "``URLInput``"
msgstr "``URLInput``"

msgid "``input_type``: ``'url'``"
msgstr "``input_type``: ``'url'``"

msgid "``template_name``: ``'django/forms/widgets/url.html'``"
msgstr "``template_name``: ``'django/forms/widgets/url.html'``"

msgid "Renders as: ``<input type=\"url\" ...>``"
msgstr "レンダリング結果: ``<input type=\"url\" ...>``"

msgid "``PasswordInput``"
msgstr "``PasswordInput``"

msgid "``input_type``: ``'password'``"
msgstr "``input_type``: ``'password'``"

msgid "``template_name``: ``'django/forms/widgets/password.html'``"
msgstr "``template_name``: ``'django/forms/widgets/password.html'``"

msgid "Renders as: ``<input type=\"password\" ...>``"
msgstr "レンダリング結果: ``<input type=\"password\" ...>``"

msgid ""
"Determines whether the widget will have a value filled in when the form is "
"re-displayed after a validation error (default is ``False``)."
msgstr ""
"バリデーションエラーの後、フォームが再描画されるときにウィジェットに値を書き"
"込むかどうかを決めます (デフォルトは ``False`` です)。"

msgid "``HiddenInput``"
msgstr "``HiddenInput``"

msgid "``input_type``: ``'hidden'``"
msgstr "``input_type``: ``'hidden'``"

msgid "``template_name``: ``'django/forms/widgets/hidden.html'``"
msgstr "``template_name``: ``'django/forms/widgets/hidden.html'``"

msgid "Renders as: ``<input type=\"hidden\" ...>``"
msgstr "レンダリング結果: ``<input type=\"hidden\" ...>``"

msgid ""
"Note that there also is a :class:`MultipleHiddenInput` widget that "
"encapsulates a set of hidden input elements."
msgstr ""
"hidden の Input 要素のセットをカプセル化する :class:`MultipleHiddenInput` "
"ウィジェットもあります。"

msgid "``DateInput``"
msgstr "``DateInput``"

msgid "``template_name``: ``'django/forms/widgets/date.html'``"
msgstr "``template_name``: ``'django/forms/widgets/date.html'``"

msgid ""
"Takes same arguments as :class:`TextInput`, with one more optional argument:"
msgstr ""
":class:`TextInput` と同じ引数を取り、さらに 1 つ省略可能な引数があります:"

msgid "The format in which this field's initial value will be displayed."
msgstr "このフィールドの初期値が描画されるフォーマットです。"

msgid ""
"If no ``format`` argument is provided, the default format is the first "
"format found in :setting:`DATE_INPUT_FORMATS` and respects :doc:`/topics/"
"i18n/formatting`. ``%U``, ``%W``, and ``%j`` formats are not supported by "
"this widget."
msgstr ""
"``format`` 引数が提供されない場合、デフォルトの形式は :setting:"
"`DATE_INPUT_FORMATS` で最初に見つかった形式で、 :doc:`/topics/i18n/"
"formatting` を尊重します。 ``%U``、``%W``、そして ``%j`` 形式は、このウィ"
"ジェットではサポートされていません。"

msgid "``DateTimeInput``"
msgstr "``DateTimeInput``"

msgid "``template_name``: ``'django/forms/widgets/datetime.html'``"
msgstr "``template_name``: ``'django/forms/widgets/datetime.html'``"

msgid ""
"If no ``format`` argument is provided, the default format is the first "
"format found in :setting:`DATETIME_INPUT_FORMATS` and respects :doc:`/topics/"
"i18n/formatting`. ``%U``, ``%W``, and ``%j`` formats are not supported by "
"this widget."
msgstr ""
"``format`` 引数が提供されていない場合、デフォルトのフォーマットは :setting:"
"`DATETIME_INPUT_FORMATS` で見つかった最初のフォーマットであり、 :doc:`/"
"topics/i18n/formatting` を尊重します。 ``%U``、``%W``、および ``%j`` フォー"
"マットは、このウィジェットではサポートされていません。"

msgid ""
"By default, the microseconds part of the time value is always set to ``0``. "
"If microseconds are required, use a subclass with the :attr:`~Widget."
"supports_microseconds` attribute set to ``True``."
msgstr ""
"デフォルトでは、時刻のマイクロ秒部分は常に ``0`` にセットされます。マイクロ秒"
"が必要な場合は、サブクラスで :attr:`~Widget.supports_microseconds` 属性を "
"``True`` にセットして使ってください。"

msgid "``TimeInput``"
msgstr "``TimeInput``"

msgid "``template_name``: ``'django/forms/widgets/time.html'``"
msgstr "``template_name``: ``'django/forms/widgets/time.html'``"

msgid ""
"If no ``format`` argument is provided, the default format is the first "
"format found in :setting:`TIME_INPUT_FORMATS` and respects :doc:`/topics/"
"i18n/formatting`."
msgstr ""
"``format`` 引数が渡されないとき、デフォルトのフォーマットは :setting:"
"`TIME_INPUT_FORMATS` 内で最初に見つかったフォーマットで、:doc:`/topics/i18n/"
"formatting` を尊重します。"

msgid "For the treatment of microseconds, see :class:`DateTimeInput`."
msgstr ""
"マイクロ秒の扱いについては、:class:`DateTimeInput` を参照してください。"

msgid "``Textarea``"
msgstr "``Textarea``"

msgid "``template_name``: ``'django/forms/widgets/textarea.html'``"
msgstr "``template_name``: ``'django/forms/widgets/textarea.html'``"

msgid "Renders as: ``<textarea>...</textarea>``"
msgstr "レンダリング結果: ``<textarea>...</textarea>``"

msgid "Selector and checkbox widgets"
msgstr "セレクタおよびチェックボックスのウィジェット"

msgid ""
"These widgets make use of the HTML elements ``<select>``, ``<input "
"type=\"checkbox\">``, and ``<input type=\"radio\">``."
msgstr ""
"これらのウィジェットは HTML 要素の ``<select>``, ``<input "
"type=\"checkbox\">``, および ``<input type=\"radio\">`` を使用しています。"

msgid ""
"Widgets that render multiple choices have an ``option_template_name`` "
"attribute that specifies the template used to render each choice. For "
"example, for the :class:`Select` widget, ``select_option.html`` renders the "
"``<option>`` for a ``<select>``."
msgstr ""
"複数の選択肢をレンダリングするウィジェットは、各選択肢をレンダリングするため"
"に使用されるテンプレートを指定する ``option_template_name`` 属性を持っていま"
"す。例えば、:class:`Select` ウィジェットの場合、``select_option.html`` は "
"``<select>`` のための ``<option>`` をレンダリングします。"

msgid "``CheckboxInput``"
msgstr "``CheckboxInput``"

msgid "``input_type``: ``'checkbox'``"
msgstr "``input_type``: ``'checkbox'``"

msgid "``template_name``: ``'django/forms/widgets/checkbox.html'``"
msgstr "``template_name``: ``'django/forms/widgets/checkbox.html'``"

msgid "Renders as: ``<input type=\"checkbox\" ...>``"
msgstr "レンダリング結果: ``<input type=\"checkbox\" ...>``"

msgid ""
"A callable that takes the value of the ``CheckboxInput`` and returns "
"``True`` if the checkbox should be checked for that value."
msgstr ""
"``CheckboxInput`` の値を受け取り、チェックボックスがチェックされる必要がある"
"場合は ``True`` を返す callable です。"

msgid "``Select``"
msgstr "``Select``"

msgid "``template_name``: ``'django/forms/widgets/select.html'``"
msgstr "``template_name``: ``'django/forms/widgets/select.html'``"

msgid "``option_template_name``: ``'django/forms/widgets/select_option.html'``"
msgstr ""
"``option_template_name``: ``'django/forms/widgets/select_option.html'``"

msgid "Renders as: ``<select><option ...>...</select>``"
msgstr "レンダリング結果: ``<select><option ...>...</select>``"

msgid ""
"This attribute is optional when the form field does not have a ``choices`` "
"attribute. If it does, it will override anything you set here when the "
"attribute is updated on the :class:`Field`."
msgstr ""
"フォームのフィールドに ``choices`` 属性がない場合、この属性は省略可能です。こ"
"の属性がある場合には、:class:`Field` で属性が更新されたときにセットされた全て"
"をオーバーライドします。"

msgid "``NullBooleanSelect``"
msgstr "``NullBooleanSelect``"

msgid "Select widget with options 'Unknown', 'Yes' and 'No'"
msgstr "'Unknown'、'Yes'、'No' の選択肢ウィジェット"

msgid "``SelectMultiple``"
msgstr "``SelectMultiple``"

msgid ""
"Similar to :class:`Select`, but allows multiple selection: ``<select "
"multiple>...</select>``"
msgstr ""
":class:`Select` に似ていますが、複数選択を許可します: ``<select multiple>..."
"</select>``"

msgid "``RadioSelect``"
msgstr "``RadioSelect``"

msgid "``template_name``: ``'django/forms/widgets/radio.html'``"
msgstr "``template_name``: ``'django/forms/widgets/radio.html'``"

msgid "``option_template_name``: ``'django/forms/widgets/radio_option.html'``"
msgstr "``option_template_name``: ``'django/forms/widgets/radio_option.html'``"

msgid ""
"Similar to :class:`Select`, but rendered as a list of radio buttons within "
"``<div>`` tags:"
msgstr ""
":class:`Select` と似ていますが、``<div>`` タグ内にラジオボタンのリストとして"
"レンダリングされます。"

msgid ""
"For more granular control over the generated markup, you can loop over the "
"radio buttons in the template. Assuming a form ``myform`` with a field "
"``beatles`` that uses a ``RadioSelect`` as its widget:"
msgstr ""
"生成されるマークアップをより詳細に制御するには、テンプレート内でラジオボタン"
"をループ処理します。ウィジェットとして ``RadioSelect`` を使用するフィールド "
"``beatles`` を持つフォーム ``myform`` を例にとると:"

msgid "This would generate the following HTML:"
msgstr "これにより、以下のHTMLが生成されます:"

msgid ""
"That included the ``<label>`` tags. To get more granular, you can use each "
"radio button's ``tag``, ``choice_label`` and ``id_for_label`` attributes. "
"For example, this template..."
msgstr ""
"これには ``<label>`` タグが含まれています。さらに詳しく制御したい場合は、各ラ"
"ジオボタンの ``tag``、``choice_label``、および ``id_for_label`` 属性を使用で"
"きます。例えば、このテンプレートは..."

msgid "...will result in the following HTML:"
msgstr "...次のHTMLを生成します:"

msgid ""
"If you decide not to loop over the radio buttons -- e.g., if your template "
"includes ``{{ myform.beatles }}`` -- they'll be output in a ``<div>`` with "
"``<div>`` tags, as above."
msgstr ""
"ラジオボタンをループしないことにした場合 (例えば、テンプレートに ``{{ myform."
"beatles }}`` を含む場合)、上記のように、ラジオボタンは ``<div>`` タグ内に "
"``<div>`` タグで出力されます。"

msgid ""
"The outer ``<div>`` container receives the ``id`` attribute of the widget, "
"if defined, or :attr:`BoundField.auto_id` otherwise."
msgstr ""
"外側の ``<div>`` コンテナは、定義されている場合はウィジェットの ``id`` 属性を"
"受け取り、定義されていない場合は :attr:`BoundField.auto_id` を受け取ります。"

msgid ""
"When looping over the radio buttons, the ``label`` and ``input`` tags "
"include ``for`` and ``id`` attributes, respectively. Each radio button has "
"an ``id_for_label`` attribute to output the element's ID."
msgstr ""
"ラジオボタンをループ処理する際、``label`` タグと ``input`` タグはそれぞれ "
"``for`` 属性と ``id`` 属性を含みます。各ラジオボタンには、要素のIDを出力する"
"ための ``id_for_label`` 属性があります。"

msgid "``CheckboxSelectMultiple``"
msgstr "``CheckboxSelectMultiple``"

msgid "``template_name``: ``'django/forms/widgets/checkbox_select.html'``"
msgstr "``template_name``: ``'django/forms/widgets/checkbox_select.html'``"

msgid ""
"``option_template_name``: ``'django/forms/widgets/checkbox_option.html'``"
msgstr ""
"``option_template_name``: ``'django/forms/widgets/checkbox_option.html'``"

msgid ""
"Similar to :class:`SelectMultiple`, but rendered as a list of checkboxes:"
msgstr ""
":class:`SelectMultiple` と似ていますが、チェックボックスのリストとしてレンダ"
"リングされます。"

msgid ""
"Like :class:`RadioSelect`, you can loop over the individual checkboxes for "
"the widget's choices. Unlike :class:`RadioSelect`, the checkboxes won't "
"include the ``required`` HTML attribute if the field is required because "
"browser validation would require all checkboxes to be checked instead of at "
"least one."
msgstr ""
":class:`RadioSelect` のように、ウィジェットの選択肢ごとに個々のチェックボック"
"スをループ処理できます。しかし、:class:`RadioSelect` とは異なり、フィールドが"
"必須であっても、チェックボックスには ``required`` HTML属性が含まれません。な"
"ぜなら、ブラウザの検証ではすべてのチェックボックスをチェックすることが求めら"
"れるのではなく、少なくとも1つをチェックすることが要求されるためです。"

msgid ""
"When looping over the checkboxes, the ``label`` and ``input`` tags include "
"``for`` and ``id`` attributes, respectively. Each checkbox has an "
"``id_for_label`` attribute to output the element's ID."
msgstr ""
"チェックボックスをループする際、``label`` タグと ``input`` タグにはそれぞれ "
"``for`` 属性と ``id`` 属性が含まれます。各チェックボックスには、要素のIDを出"
"力するための ``id_for_label`` 属性があります。"

msgid "File upload widgets"
msgstr "ファイルアップロード用ウィジェット"

msgid "``FileInput``"
msgstr "``FileInput``"

msgid "``template_name``: ``'django/forms/widgets/file.html'``"
msgstr "``template_name``: ``'django/forms/widgets/file.html'``"

msgid "Renders as: ``<input type=\"file\" ...>``"
msgstr "レンダリング結果: ``<input type=\"file\" ...>``"

msgid "``ClearableFileInput``"
msgstr "``ClearableFileInput``"

msgid "``template_name``: ``'django/forms/widgets/clearable_file_input.html'``"
msgstr ""
"``template_name``: ``'django/forms/widgets/clearable_file_input.html'``"

msgid ""
"Renders as: ``<input type=\"file\" ...>`` with an additional checkbox input "
"to clear the field's value, if the field is not required and has initial "
"data."
msgstr ""
"レンダリング結果: ``<input type=\"file\" ...>`` 。このフィールドが必須でなく"
"初期データがある場合、フィールドの値をクリアするための追加のチェックボックス"
"入力が含まれます。"

msgid "Composite widgets"
msgstr "複合ウィジェット"

msgid "``MultipleHiddenInput``"
msgstr "``MultipleHiddenInput``"

msgid "``template_name``: ``'django/forms/widgets/multiple_hidden.html'``"
msgstr "``template_name``: ``'django/forms/widgets/multiple_hidden.html'``"

msgid "Renders as: multiple ``<input type=\"hidden\" ...>`` tags"
msgstr "レンダリング結果: 複数の ``<input type=\"hidden\" ...>`` タグ"

msgid ""
"A widget that handles multiple hidden widgets for fields that have a list of "
"values."
msgstr ""
"値のリストを持つフィールドのために、複数の隠しウィジェットを扱うウィジェット"
"です。"

msgid "``SplitDateTimeWidget``"
msgstr "``SplitDateTimeWidget``"

msgid "``template_name``: ``'django/forms/widgets/splitdatetime.html'``"
msgstr "``template_name``: ``'django/forms/widgets/splitdatetime.html'``"

msgid ""
"Wrapper (using :class:`MultiWidget`) around two widgets: :class:`DateInput` "
"for the date, and :class:`TimeInput` for the time. Must be used with :class:"
"`SplitDateTimeField` rather than :class:`DateTimeField`."
msgstr ""
":class:`MultiWidget` を使用して2つのウィジェットを組み合わせたラッパーです。"
"日付用の :class:`DateInput` と、時間用の :class:`TimeInput` です。 :class:"
"`DateTimeField` ではなく、:class:`SplitDateTimeField` と共に使用する必要があ"
"ります。"

msgid "``SplitDateTimeWidget`` has several optional arguments:"
msgstr "``SplitDateTimeWidget`` にはいくつかの任意の引数があります:"

msgid "Similar to :attr:`DateInput.format`"
msgstr ":attr:`DateInput.format` と同様。"

msgid "Similar to :attr:`TimeInput.format`"
msgstr ":attr:`TimeInput.format` と同様"

msgid ""
"Similar to :attr:`Widget.attrs`. A dictionary containing HTML attributes to "
"be set on the rendered :class:`DateInput` and :class:`TimeInput` widgets, "
"respectively. If these attributes aren't set, :attr:`Widget.attrs` is used "
"instead."
msgstr ""
":attr:`Widget.attrs` に似ています。レンダリングされる :class:`DateInput` およ"
"び :class:`TimeInput` ウィジェットに設定される HTML 属性を含む辞書です。これ"
"らの属性が設定されていない場合は、代わりに :attr:`Widget.attrs` が使用されま"
"す。"

msgid "``SplitHiddenDateTimeWidget``"
msgstr "``SplitHiddenDateTimeWidget``"

msgid "``template_name``: ``'django/forms/widgets/splithiddendatetime.html'``"
msgstr "``template_name``: ``'django/forms/widgets/splithiddendatetime.html'``"

msgid ""
"Similar to :class:`SplitDateTimeWidget`, but uses :class:`HiddenInput` for "
"both date and time."
msgstr ""
":class:`SplitDateTimeWidget` に似ていますが、日付と時間の両方に :class:"
"`HiddenInput` を使用します。"

msgid "``SelectDateWidget``"
msgstr "``SelectDateWidget``"

msgid "``template_name``: ``'django/forms/widgets/select_date.html'``"
msgstr "``template_name``: ``'django/forms/widgets/select_date.html'``"

msgid ""
"Wrapper around three :class:`~django.forms.Select` widgets: one each for "
"month, day, and year."
msgstr ""
"月、日、年ごとに1つずつ、計3つの :class:`~django.forms.Select` ウィジェットを"
"まとめたラッパーです。"

msgid "Takes several optional arguments:"
msgstr "いくつかのオプション引数を取ります:"

msgid ""
"An optional list/tuple of years to use in the \"year\" select box. The "
"default is a list containing the current year and the next 9 years."
msgstr ""
"\"year\" セレクトボックスで使用する年のオプションのリストまたはタプルです。デ"
"フォルトは、現在の年と次の9年が含まれたリストです。"

msgid "An optional dict of months to use in the \"months\" select box."
msgstr "\"months\" オプションで、セレクトボックスで使用する月の辞書です。"

msgid ""
"The keys of the dict correspond to the month number (1-indexed) and the "
"values are the displayed months::"
msgstr "この辞書のキーは月の番号 (1から始まる) に対応し、値は表示される月です:"

msgid ""
"If the :class:`~django.forms.DateField` is not required, :class:"
"`SelectDateWidget` will have an empty choice at the top of the list (which "
"is ``---`` by default). You can change the text of this label with the "
"``empty_label`` attribute. ``empty_label`` can be a ``string``, ``list``, or "
"``tuple``. When a string is used, all select boxes will each have an empty "
"choice with this label. If ``empty_label`` is a ``list`` or ``tuple`` of 3 "
"string elements, the select boxes will have their own custom label. The "
"labels should be in this order ``('year_label', 'month_label', "
"'day_label')``."
msgstr ""
":class:`~django.forms.DateField` が必須でない場合、 :class:"
"`SelectDateWidget` はリストのトップに空の選択肢(デフォルトでは ``---``)を持ち"
"ます。このラベルのテキストは ``empty_label`` 属性で変更できます。 "
"``empty_label`` は ``string``、``list``、または ``tuple`` であることができま"
"す。文字列が使用されると、すべてのセレクトボックスはこのラベルを持つ空の選択"
"肢をそれぞれ持ちます。 ``empty_label`` が 3 つの文字列要素の ``list`` または "
"``tuple`` の場合、セレクトボックスはそれぞれ独自のカスタムラベルを持ちます。"
"ラベルはこの順序である必要があります: ``('year_label', 'month_label', "
"'day_label')`` 。"

msgid "Logging"
msgstr "ロギング"

msgid ":ref:`logging-how-to`"
msgstr ":ref:`logging-how-to`"

msgid ":ref:`Django logging overview <logging-explanation>`"
msgstr ":ref:`Django のロギングの概要 <logging-explanation>`"

msgid "Django's logging module extends Python's builtin :mod:`logging`."
msgstr ""
"Django の logging モジュールは Python の 組み込み :mod:`logging` モジュールを"
"継承しています。"

msgid ""
"Logging is configured as part of the general Django :func:`django.setup` "
"function, so it's always available unless explicitly disabled."
msgstr ""
"Logging は、一般的なDjangoの :func:`django.setup` 関数の一部として設定されて"
"いるため、明示的に無効にされない限り常に利用可能です。"

msgid "Django's default logging configuration"
msgstr "Django のデフォルトのロギング設定"

msgid ""
"By default, Django uses Python's :ref:`logging.config.dictConfig format "
"<logging-config-dictschema>`."
msgstr ""
"デフォルトでは、Django は Python の :ref:`logging.config.dictConfig フォー"
"マット <logging-config-dictschema>` を使用します。"

msgid "Default logging conditions"
msgstr "デフォルトのログ記録条件"

msgid "The full set of default logging conditions are:"
msgstr "デフォルトのログ記録条件の完全なセットは以下の通りです:"

msgid "When :setting:`DEBUG` is ``True``:"
msgstr ":setting:`DEBUG` が ``True`` のとき:"

msgid ""
"The ``django`` logger sends messages in the ``django`` hierarchy (except "
"``django.server``) at the ``INFO`` level or higher to the console."
msgstr ""
"``django`` ロガーは、``django`` ヒエラルキー (``django.server`` を除く) にお"
"いて、``INFO`` レベル以上のメッセージをコンソールに送信します。"

msgid "When :setting:`DEBUG` is ``False``:"
msgstr ":setting:`DEBUG` が ``False`` のとき:"

msgid ""
"The ``django`` logger sends messages in the ``django`` hierarchy (except "
"``django.server``)  with ``ERROR`` or ``CRITICAL`` level to :class:"
"`AdminEmailHandler`."
msgstr ""
"``django`` ロガーは、``django`` ヒエラルキー (``django.server`` を除く) にお"
"いて、``ERROR`` ないし ``CRITICAL`` レベルを :class:`AdminEmailHandler` に送"
"信します。"

msgid "Independently of the value of :setting:`DEBUG`:"
msgstr ":setting:`DEBUG` の値にかかわらず:"

msgid ""
"The :ref:`django-server-logger` logger sends messages at the ``INFO`` level "
"or higher to the console."
msgstr ""
":ref:`django-server-logger` ロガーは ``INFO`` レベル以上のメッセージをコン"
"ソールに送信します。"

msgid ""
"All loggers except :ref:`django-server-logger` propagate logging to their "
"parents, up to the root ``django`` logger. The ``console`` and "
"``mail_admins`` handlers are attached to the root logger to provide the "
"behavior described above."
msgstr ""
":ref:`django-server-logger` を除く全てのロガーは、ルートの ``django`` ロガー"
"まで、親に対してログを伝播させます。``console`` と ``mail_admins`` ハンドラ"
"は、上述の動作を提供するためにルートロガーにアタッチされます。"

msgid ""
"Python's own defaults send records of level ``WARNING`` and higher to the "
"console."
msgstr ""
"Pythonのデフォルトは、レベル ``WARNING`` 以上のレコードをコンソールに送りま"
"す。"

msgid "Default logging definition"
msgstr "デフォルトのロギング定義"

msgid ""
"Django's default logging configuration inherits Python's defaults. It's "
"available as ``django.utils.log.DEFAULT_LOGGING`` and defined in :source:"
"`django/utils/log.py`::"
msgstr ""
"Django のデフォルトのロギング設定は、Python のデフォルトを継承しています。こ"
"れは ``django.utils.log.DEFAULT_LOGGING`` として利用可能で、 :source:`django/"
"utils/log.py` で定義されています。"

msgid ""
"See :ref:`configuring-logging` on how to complement or replace this default "
"logging configuration."
msgstr ""
"このデフォルトのロギング設定を補完または置換する方法については、:ref:"
"`configuring-logging` を参照してください。"

msgid "Django logging extensions"
msgstr "Django のロギング拡張"

msgid ""
"Django provides a number of utilities to handle the particular requirements "
"of logging in a web server environment."
msgstr ""
"Djangoは、Web サーバー環境でのロギングの特別な要件を処理するための多数のユー"
"ティリティを提供しています。"

msgid "Loggers"
msgstr "ロガー"

msgid "Django provides several built-in loggers."
msgstr "Djangoはいくつかの組み込みロガーを提供しています。"

msgid "``django``"
msgstr "``django``"

msgid ""
"The parent logger for messages in the ``django`` :ref:`named logger "
"hierarchy <naming-loggers-hierarchy>`. Django does not post messages using "
"this name. Instead, it uses one of the loggers below."
msgstr ""
"``django`` :ref:`名前付きロガー階層<naming-loggers-hierarchy>` のメッセージの"
"親ロガーです。 Djangoは、この名前を使用してメッセージを投稿しません。代わり"
"に、以下のロガーのいずれかを使用します。"

msgid "``django.request``"
msgstr "``django.request``"

msgid ""
"Log messages related to the handling of requests. 5XX responses are raised "
"as ``ERROR`` messages; 4XX responses are raised as ``WARNING`` messages. "
"Requests that are logged to the ``django.security`` logger aren't logged to "
"``django.request``."
msgstr ""
"リクエストに関するログをハンドリングします。5XXレスポンスは ``ERROR`` メッ"
"セージとして送られ、 4XXレスポンスは ``WARNING`` メッセージとして送られま"
"す。 ``django.security`` ロガーに出力されたメッセージは、 ``django.request`` "
"ロガーには送られません。"

msgid "Messages to this logger have the following extra context:"
msgstr ""
"このロガーに送られるメッセージには、以下のようなコンテキストが含まれます。"

msgid "``status_code``: The HTTP response code associated with the request."
msgstr "``status_code``: リクエストに対するレスポンスのHTTPレスポンスコード。"

msgid "``request``: The request object that generated the logging message."
msgstr "``request``: ログのメッセージに対応するリクエストのオブジェクト。"

msgid "``django.server``"
msgstr "``django.server``"

msgid ""
"Log messages related to the handling of requests received by the server "
"invoked by the :djadmin:`runserver` command. HTTP 5XX responses are logged "
"as ``ERROR`` messages, 4XX responses are logged as ``WARNING`` messages, and "
"everything else is logged as ``INFO``."
msgstr ""
":djadmin:`runserver` コマンドによって立ち上がったサーバーが受け取ったリクエス"
"トに関するログメッセージ。HTTP の 5XX レスポンスは ``ERROR`` メッセージとして"
"送られ、 4XX レスポンスは ``WARNING`` メッセージとして送られ、その他は "
"``INFO`` メッセージとして送られます。"

msgid ""
"``request``: The request object (a :py:class:`socket.socket`) that generated "
"the logging message."
msgstr ""
"``request``: ログメッセージを生成したリクエストオブジェクト (:py:class:"
"`socket.socket`) 。"

msgid "``django.template``"
msgstr "``django.template``"

msgid "Log messages related to the rendering of templates."
msgstr "テンプレートのレンダリングに関するログメッセージ。"

msgid "Missing context variables are logged as ``DEBUG`` messages."
msgstr "コンテキストに変数が無い場合は DEBUG メッセージとして送られる。"

msgid "``django.db.backends``"
msgstr "``django.db.backends``"

msgid ""
"Messages relating to the interaction of code with the database. For example, "
"every application-level SQL statement executed by a request is logged at the "
"``DEBUG`` level to this logger."
msgstr ""
"コードとデータベースの間でのやりとりに関するメッセージ。たとえば、アプリケー"
"ションから実行全ての SQL は ``DEBUG`` レベルでメッセージが送られます。"

msgid "``duration``: The time taken to execute the SQL statement."
msgstr "``duration``: SQLを実行するのにかかった時間。"

msgid "``sql``: The SQL statement that was executed."
msgstr "``sql``: 実行されたSQL文。"

msgid "``params``: The parameters that were used in the SQL call."
msgstr "``params``: SQLの呼び出しに使ったパラメータ。"

msgid "``alias``: The alias of the database used in the SQL call."
msgstr "``alias``: SQL 呼び出しで使用されるデータベースのエイリアス。"

msgid ""
"For performance reasons, SQL logging is only enabled when ``settings.DEBUG`` "
"is set to ``True``, regardless of the logging level or handlers that are "
"installed."
msgstr ""
"パフォーマンスの観点から、 SQL ログは、ログレベルやハンドラに関わらず、 "
"``settings.DEBUG`` に True が設定されているときのみ有効になります。"

msgid ""
"This logging does not include framework-level initialization (e.g. ``SET "
"TIMEZONE``). Turn on query logging in your database if you wish to view all "
"database queries."
msgstr ""
"このログには、フレームワークレベルの初期化(例: ``SET TIMEZONE``) は含まれてい"
"ません。すべてのデータベースクエリを表示したい場合は、データムベースでクエリ"
"ログを有効にしてください。"

msgid ""
"Support for logging transaction management queries (``BEGIN``, ``COMMIT``, "
"and ``ROLLBACK``) was added."
msgstr ""
"トランザクション管理クエリ(``BEGIN``, ``COMMIT``, ``ROLLBACK``)のログ記録のサ"
"ポートが追加されました。"

msgid "``django.utils.autoreload``"
msgstr "``django.utils.autoreload``"

msgid ""
"Log messages related to automatic code reloading during the execution of the "
"Django development server. This logger generates an ``INFO`` message upon "
"detecting a modification in a source code file and may produce ``WARNING`` "
"messages during filesystem inspection and event subscription processes."
msgstr ""
"Django 開発サーバー実行中の自動コードリロードに関連するログメッセージです。こ"
"のロガーは、ソースコードファイルの変更を検出した際に ``INFO`` メッセージを生"
"成し、ファイルシステムの検査やイベント購読プロセス中に ``WARNING`` メッセージ"
"を生成することがあります。"

msgid ""
"Log messages related to :doc:`contrib/gis/index` at various points: during "
"the loading of external GeoSpatial libraries (GEOS, GDAL, etc.) and when "
"reporting errors. Each ``ERROR`` log record includes the caught exception "
"and relevant contextual data."
msgstr ""
":doc:`contrib/gis/index` に関連するログメッセージは、外部の地理空間ライブラリ"
"（GEOS、GDALなど）の読み込み時や、エラーを報告する時点で様々な場所に記録され"
"ます。各 ``ERROR`` ログレコードには、発生した例外と関連するコンテキストデータ"
"が含まれます。"

msgid "``django.dispatch``"
msgstr "``django.dispatch``"

msgid ""
"This logger is used in :doc:`signals`, specifically within the :mod:`~django."
"dispatch.Signal` class, to report issues when dispatching a signal to a "
"connected receiver. The ``ERROR`` log record includes the caught exception "
"as ``exc_info`` and adds the following extra context:"
msgstr ""
"このロガーは :doc:`signals` において使用されており、特に :mod:`~django."
"dispatch.Signal` クラス内で、接続されたレシーバへのシグナルのディスパッチ時に"
"問題が発生した場合に報告するために使用されます。``ERROR`` ログレコードには捕"
"捉された例外が ``exc_info`` として含まれ、以下の追加コンテキストが加えられま"
"す。"

msgid "``receiver``: The name of the receiver."
msgstr "``receiver``: レシーバの名前。"

msgid "``err``: The exception that occurred when calling the receiver."
msgstr "``err``: レシーバを呼び出した時に発生した例外。"

msgid "``django.security.*``"
msgstr "``django.security.*``"

msgid ""
"The security loggers will receive messages on any occurrence of :exc:"
"`~django.core.exceptions.SuspiciousOperation` and other security-related "
"errors. There is a sub-logger for each subtype of security error, including "
"all ``SuspiciousOperation``\\s. The level of the log event depends on where "
"the exception is handled.  Most occurrences are logged as a warning, while "
"any ``SuspiciousOperation`` that reaches the WSGI handler will be logged as "
"an error. For example, when an HTTP ``Host`` header is included in a request "
"from a client that does not match :setting:`ALLOWED_HOSTS`, Django will "
"return a 400 response, and an error message will be logged to the ``django."
"security.DisallowedHost`` logger."
msgstr ""
"セキュリティログは、 :exc:`~django.core.exceptions.SuspiciousOperation` およ"
"び他のセキュリティ関連のエラーが発生した際にメッセージを受け取ります。セキュ"
"リティエラーの各サブタイプごとにサブロガーがあり、すべての "
"``SuspiciousOperation`` が含まれます。ログイベントのレベルは、例外が処理され"
"る場所によって異なります。ほとんどの発生は警告としてログされますが、WSGIハン"
"ドラーに到達した ``SuspiciousOperation`` はエラーとしてログされます。たとえ"
"ば、クライアントからのリクエストに含まれるHTTP ``Host`` ヘッダーが :setting:"
"`ALLOWED_HOSTS` と一致しない場合、Djangoは400のレスポンスを返し、``django."
"security.DisallowedHost`` ロガーにエラーメッセージがログされます。"

msgid ""
"These log events will reach the ``django`` logger by default, which mails "
"error events to admins when ``DEBUG=False``. Requests resulting in a 400 "
"response due to a ``SuspiciousOperation`` will not be logged to the ``django."
"request`` logger, but only to the ``django.security`` logger."
msgstr ""
"これらのログイベントはデフォルトで ``django`` ロガーに到達し、"
"``DEBUG=False`` のときにはエラーイベントを管理者にメールします。"
"``SuspiciousOperation`` によって400レスポンスを引き起こすリクエストは "
"``django.request`` ロガーには記録されず、``django.security`` ロガーにのみ記録"
"されます。"

msgid ""
"To silence a particular type of ``SuspiciousOperation``, you can override "
"that specific logger following this example::"
msgstr ""
"特定のタイプの ``SuspiciousOperation`` を無視するには、以下の例に従って、その"
"特定のロガーをオーバーライドできます:"

msgid ""
"Other ``django.security`` loggers not based on ``SuspiciousOperation`` are:"
msgstr ""
"``SuspiciousOperation`` に基づかない他の ``django.security`` ロガーには、以下"
"があります:"

msgid ""
"``django.security.csrf``: For :ref:`CSRF failures <csrf-rejected-requests>`."
msgstr ""
"``django.security.csrf``: :ref:`CSRF の失敗 <csrf-rejected-requests>` に関す"
"るもの。"

msgid "``django.db.backends.schema``"
msgstr "``django.db.backends.schema``"

msgid ""
"Logs the SQL queries that are executed during schema changes to the database "
"by the :doc:`migrations framework </topics/migrations>`. Note that it won't "
"log the queries executed by :class:`~django.db.migrations.operations."
"RunPython`. Messages to this logger have ``params`` and ``sql`` in their "
"extra context (but unlike ``django.db.backends``, not duration). The values "
"have the same meaning as explained in :ref:`django-db-logger`."
msgstr ""
"スキーマの変更中に実行されるSQLクエリを、 :doc:`マイグレーションフレームワー"
"ク </topics/migrations>` によってログ記録します。ただし、 :class:`~django.db."
"migrations.operations.RunPython` によって実行されるクエリはログされません。こ"
"のロガーへのメッセージには、 ``params`` と ``sql`` が追加のコンテキストとして"
"含まれます（ただし、 ``django.db.backends`` とは異なり、実行時間は含まれませ"
"ん）。これらの値の意味については、 :ref:`django-db-logger` で説明されている内"
"容と同じです。"

msgid "Handlers"
msgstr "ハンドラ"

msgid ""
"Django provides one log handler in addition to :mod:`those provided by the "
"Python logging module <python:logging.handlers>`."
msgstr ""
"Django は、 :mod:`Pythonのモジュールによって提供されるもの <python:logging."
"handlers>` に加えて、1つのログハンドラを提供しています。"

msgid ""
"This handler sends an email to the site :setting:`ADMINS` for each log "
"message it receives."
msgstr ""
"このハンドラは、受け取ったログメッセージごとにサイトの :setting:`ADMINS` に電"
"子メールを送信します。"

msgid ""
"If the log record contains a ``request`` attribute, the full details of the "
"request will be included in the email. The email subject will include the "
"phrase \"internal IP\" if the client's IP address is in the :setting:"
"`INTERNAL_IPS` setting; if not, it will include \"EXTERNAL IP\"."
msgstr ""
"ログレコードに ``request`` 属性が含まれている場合、リクエストの詳細がメールに"
"含まれます。クライアントの IP アドレスが :setting:`INTERNAL_IPS` 設定にある場"
"合、メールの件名に \"internal IP\" というフレーズが含まれます。そうでない場合"
"は \"EXTERNAL IP\" が含まれます。"

msgid ""
"If the log record contains stack trace information, that stack trace will be "
"included in the email."
msgstr ""
"ログレコードにスタックトレース情報が含まれている場合、そのスタックトレースは"
"電子メールに含まれます。"

msgid ""
"The ``include_html`` argument of ``AdminEmailHandler`` is used to control "
"whether the traceback email includes an HTML attachment containing the full "
"content of the debug web page that would have been produced if :setting:"
"`DEBUG` were ``True``. To set this value in your configuration, include it "
"in the handler definition for ``django.utils.log.AdminEmailHandler``, like "
"this::"
msgstr ""
"``AdminEmailHandler`` の ``include_html`` 引数は、 :setting:`DEBUG` が "
"``True`` の場合に生成されるデバッグウェブページの内容を含む HTML 添付ファイル"
"を traceback メールに含めるかどうかを制御するために使用されます。この値を設定"
"するには、``django.utils.log.AdminEmailHandler`` のハンドラ定義に含めます。以"
"下のようになります:"

msgid ""
"Be aware of the :ref:`security implications of logging <logging-security-"
"implications>` when using the ``AdminEmailHandler``."
msgstr ""
"``AdminEmailHandler`` を使用する際は、 :ref:`ログのセキュリティ上の注意点 "
"<logging-security-implications>` に注意してください。"

msgid ""
"By setting the ``email_backend`` argument of ``AdminEmailHandler``, the :ref:"
"`email backend <topic-email-backends>` that is being used by the handler can "
"be overridden, like this::"
msgstr ""
"``AdminEmailHandler`` の ``email_backend`` 引数を設定することで、ハンドラーが"
"使用している :ref:`メールバックエンド <topic-email-backends>` を以下のように"
"上書きできます:"

msgid ""
"By default, an instance of the email backend specified in :setting:"
"`EMAIL_BACKEND` will be used."
msgstr ""
"デフォルトでは、 :setting:`EMAIL_BACKEND` で指定されたメールバックエンドのイ"
"ンスタンスが使用されます。"

msgid ""
"The ``reporter_class`` argument of ``AdminEmailHandler`` allows providing an "
"``django.views.debug.ExceptionReporter`` subclass to customize the traceback "
"text sent in the email body. You provide a string import path to the class "
"you wish to use, like this::"
msgstr ""
"``AdminEmailHandler`` の ``reporter_class`` 引数では、メール本文で送信される"
"トレースバックテキストをカスタマイズするために ``django.views.debug."
"ExceptionReporter`` サブクラスを提供できます。使用したいクラスへの文字列イン"
"ポートパスをこのように指定します:"

msgid ""
"Sends emails to admin users. To customize this behavior, you can subclass "
"the :class:`~django.utils.log.AdminEmailHandler` class and override this "
"method."
msgstr ""
"管理ユーザーにメールを送信します。この動作をカスタマイズするためには、 :"
"class:`~django.utils.log.AdminEmailHandler` クラスをサブクラス化して、このメ"
"ソッドをオーバーライドできます。"

msgid "Filters"
msgstr "フィルタ"

msgid ""
"Django provides some log filters in addition to those provided by the Python "
"logging module."
msgstr ""
"Djangoは、Pythonのロギングモジュールによって提供されるフィルタに加えて、いく"
"つかのログフィルタを提供しています。"

msgid ""
"This filter accepts a callback function (which should accept a single "
"argument, the record to be logged), and calls it for each record that passes "
"through the filter. Handling of that record will not proceed if the callback "
"returns False."
msgstr ""
"このフィルタは、(1 つの引数、ログを行うレコード) を受け入れるコールバック関数"
"を受け入れ、フィルタを通過する各レコードに対してその関数をコールします。コー"
"ルバックが False を返す場合、そのレコードの処理は進みません。"

msgid ""
"For instance, to filter out :exc:`~django.http.UnreadablePostError` (raised "
"when a user cancels an upload) from the admin emails, you would create a "
"filter function::"
msgstr ""
"例えば、管理者メールから（ユーザーがアップロードをキャンセルした時に発生す"
"る） :exc:`~django.http.UnreadablePostError` をフィルタリングするために、フィ"
"ルタ関数を作成します。"

msgid "and then add it to your logging config::"
msgstr "次に、ログ設定にそれを追加します:"

msgid "This filter will only pass on records when settings.DEBUG is False."
msgstr ""
"このフィルタは、``settings.DEBUG`` が False の時のみ、レコードを通過させま"
"す。"

msgid ""
"This filter is used as follows in the default :setting:`LOGGING` "
"configuration to ensure that the :class:`AdminEmailHandler` only sends error "
"emails to admins when :setting:`DEBUG` is ``False``::"
msgstr ""
"このフィルタは、デフォルトの :setting:`LOGGING` 設定で以下のように使用さ"
"れ、 :setting:`DEBUG` が ``False`` のときのみ :class:`AdminEmailHandler` がエ"
"ラーメールを管理者に送信するようにします:"

msgid ""
"This filter is similar to :class:`RequireDebugFalse`, except that records "
"are passed only when :setting:`DEBUG` is ``True``."
msgstr ""
"このフィルタは :class:`RequireDebugFalse` に似ていますが、:setting:`DEBUG` "
"が ``True`` の場合にのみレコードが渡されます。"

msgid ""
"This document explains all middleware components that come with Django. For "
"information on how to use them and how to write your own middleware, see "
"the :doc:`middleware usage guide </topics/http/middleware>`."
msgstr ""
"このドキュメントでは、Djangoに付属するすべてのミドルウェアコンポーネントにつ"
"いて説明します。それらの使用方法や独自のミドルウェアの作成方法についての情報"
"は、 :doc:`ミドルウェア使用ガイド </topics/http/middleware>` を参照してくださ"
"い。"

msgid "Available middleware"
msgstr "使用できる middleware"

msgid "Cache middleware"
msgstr "Cache middleware"

msgid ""
"Enable the site-wide cache. If these are enabled, each Django-powered page "
"will be cached for as long as the :setting:`CACHE_MIDDLEWARE_SECONDS` "
"setting defines. See the :doc:`cache documentation </topics/cache>`."
msgstr ""
"サイト全体でキャッシュを有効にします。有効にすると、Django を利用している各"
"ページは :setting:`CACHE_MIDDLEWARE_SECONDS` 設定で指定した時間だけキャッシュ"
"されます。詳しくは :doc:`キャッシュのドキュメント </topics/cache>` を参照して"
"ください。"

msgid "\"Common\" middleware"
msgstr "Common middleware"

msgid "Adds a few conveniences for perfectionists:"
msgstr "完璧主義者のためにいくつかの便利な機能を提供します。"

msgid ""
"Forbids access to user agents in the :setting:`DISALLOWED_USER_AGENTS` "
"setting, which should be a list of compiled regular expression objects."
msgstr ""
":setting:`DISALLOWED_USER_AGENTS` 設定に含まれるユーザーエージェントのアクセ"
"スを禁止します。この設定は、コンパイルした正規表現オブジェクトのリストである"
"必要があります。"

msgid ""
"Performs URL rewriting based on the :setting:`APPEND_SLASH` and :setting:"
"`PREPEND_WWW` settings."
msgstr ""
":setting:`APPEND_SLASH` および :setting:`PREPEND_WWW` 設定に基づいて、URL の"
"書き換えを実行します。"

msgid ""
"If :setting:`APPEND_SLASH` is ``True`` and the initial URL doesn't end with "
"a slash, and it is not found in the URLconf, then a new URL is formed by "
"appending a slash at the end. If this new URL is found in the URLconf, then "
"Django redirects the request to this new URL. Otherwise, the initial URL is "
"processed as usual."
msgstr ""
":setting:`APPEND_SLASH` が ``True`` で、与えられた URL がスラッシュで終わって"
"いなくて、さらに URLconf に URL が見つからなければ、Django は / が最後に追加"
"された新しい URL を作り、この新しい URL へリクエストをリダイレクトします。そ"
"れ以外のときには、最初の URL を通常通りに処理します。"

msgid ""
"For example, ``foo.com/bar`` will be redirected to ``foo.com/bar/`` if you "
"don't have a valid URL pattern for ``foo.com/bar`` but *do* have a valid "
"pattern for ``foo.com/bar/``."
msgstr ""
"たとえば、 ``foo.com/bar`` は、 ``foo.com/bar`` に対する有効な URL パタンがな"
"く、``foo.com/bar/`` に対しては有効なパタンが *存在する* 場合に、 ``foo.com/"
"bar/`` にリダイレクトされます。"

msgid ""
"If :setting:`PREPEND_WWW` is ``True``, URLs that lack a leading \"www.\" "
"will be redirected to the same URL with a leading \"www.\""
msgstr ""
":setting:`PREPEND_WWW` を ``True`` にすると、先頭に \"www.\" がない URL は "
"\"www.\" で始まる同じ URL にリダイレクトされます。"

msgid ""
"Both of these options are meant to normalize URLs. The philosophy is that "
"each URL should exist in one, and only one, place. Technically a URL ``foo."
"com/bar`` is distinct from ``foo.com/bar/`` -- a search-engine indexer would "
"treat them as separate URLs -- so it's best practice to normalize URLs."
msgstr ""
"2つのオプションが意味するのは、URL を正規化するということです。これは、1つの "
"URL には1つの、かつただ1つだけの場所を指すべきだという考えです。技術的には "
"URL ``foo.com/bar`` は ``foo.com/bar/`` とは区別されます。実際、サーチエンジ"
"ンのインデクスはこれらを区別して作成されます。よって、URL を正規化するという"
"のがベストプラクティスなのです。"

msgid ""
"If necessary, individual views may be excluded from the ``APPEND_SLASH`` "
"behavior using the :func:`~django.views.decorators.common.no_append_slash` "
"decorator::"
msgstr ""
"必要に応じて、個々のビューは、 :func:`~django.views.decorators.common."
"no_append_slash` デコレータを使用して、``APPEND_SLASH`` の動作から除外できま"
"す。"

msgid "Sets the ``Content-Length`` header for non-streaming responses."
msgstr ""
"非ストリーミングレスポンスに対して ``Content-Length`` ヘッダを設定します。"

msgid ""
"Defaults to :class:`~django.http.HttpResponsePermanentRedirect`. Subclass "
"``CommonMiddleware`` and override the attribute to customize the redirects "
"issued by the middleware."
msgstr ""
"デフォルトは :class:`~django.http.HttpResponsePermanentRedirect` です。ミドル"
"ウェアが発行するリダイレクトをカスタマイズするには、 ``CommonMiddleware`` を"
"サブクラス化し、この属性をオーバーライドします。"

msgid ""
"Sends broken link notification emails to :setting:`MANAGERS` (see :doc:`/"
"howto/error-reporting`)."
msgstr ""
"壊れたリンクの通知メールを :setting:`MANAGERS` に送信します (詳細は :doc:`/"
"howto/error-reporting` を参照)。"

msgid "GZip middleware"
msgstr "GZip middleware"

msgid ""
"Defaults to 100. Subclass ``GZipMiddleware`` and override the attribute to "
"change the maximum number of random bytes that is included with compressed "
"responses."
msgstr ""
"デフォルトは 100 です。 圧縮されたレスポンスに含まれるランダムバイトの最大数"
"を変更するには、``GZipMiddleware`` をサブクラス化して属性をオーバーライドして"
"ください。"

msgid ""
"Security researchers revealed that when compression techniques (including "
"``GZipMiddleware``) are used on a website, the site may become exposed to a "
"number of possible attacks."
msgstr ""
"セキュリティ研究者たちは、Webサイトで ``GZipMiddleware`` を含む圧縮技術が使用"
"されると、そのサイトが多くの潜在的な攻撃にさらされる可能性があることを明らか"
"にしました。"

msgid ""
"To mitigate attacks, Django implements a technique called *Heal The Breach "
"(HTB)*. It adds up to 100 bytes (see :attr:`.max_random_bytes`) of random "
"bytes to each response to make the attacks less effective."
msgstr ""
"攻撃を軽減するために、Django は *Heal The Breach (HTB)* と呼ばれる技術を実装"
"しています。攻撃の効果を軽減するため、各レスポンスに最大で 100 バイトまでのラ"
"ンダムなバイト (詳細は :attr:`.max_random_bytes` を参照) を追加します。"

msgid ""
"For more details, see the `BREACH paper (PDF)`_, `breachattack.com`_, and "
"the `Heal The Breach (HTB) paper`_."
msgstr ""
"詳細については、 `BREACH paper (PDF)`_ 、`breachattack.com`_、そして `Heal "
"The Breach (HTB) paper`_ を参照してください。"

msgid "Mitigation for the BREACH attack was added."
msgstr "BREACH 攻撃に対する緩和策が追加されました。"

msgid ""
"The ``django.middleware.gzip.GZipMiddleware`` compresses content for "
"browsers that understand GZip compression (all modern browsers)."
msgstr ""
"``django.middleware.gzip.GZipMiddleware`` は、GZip 圧縮に対応したブラウザ(す"
"べてのモダンブラウザ)のためにコンテンツを圧縮します。"

msgid ""
"This middleware should be placed before any other middleware that need to "
"read or write the response body so that compression happens afterward."
msgstr ""
"このミドルウェアは、レスポンスボディを読み書きする必要がある他のミドルウェア"
"よりも前に配置するべきです。圧縮がその後に行われるようにするためです。"

msgid "It will NOT compress content if any of the following are true:"
msgstr "次のいずれかが当てはまる場合、コンテンツは圧縮されません:"

msgid "The content body is less than 200 bytes long."
msgstr "コンテンツ・ボディの長さが200バイト未満。"

msgid "The response has already set the ``Content-Encoding`` header."
msgstr "レスポンスがすでに ``Content-Encoding`` ヘッダを設定している。"

msgid ""
"The request (the browser) hasn't sent an ``Accept-Encoding`` header "
"containing ``gzip``."
msgstr ""
"リクエスト（ブラウザ）が ``Accept-Encoding`` ヘッダに ``gzip`` を含んでいな"
"い。"

msgid ""
"If the response has an ``ETag`` header, the ETag is made weak to comply "
"with :rfc:`9110#section-8.8.1`."
msgstr ""
"もしレスポンスに ``ETag`` ヘッダーがあれば、ETag は、:rfc:"
"`9110#section-8.8.1` に準拠するために弱い形式になります。"

msgid ""
"You can apply GZip compression to individual views using the :func:`~django."
"views.decorators.gzip.gzip_page()` decorator."
msgstr ""
":func:`~django.views.decorators.gzip.gzip_page()` デコレータを使用して、個別"
"のビューに GZip 圧縮を適用できます。"

msgid "Conditional GET middleware"
msgstr "Conditional GET middleware"

msgid ""
"Handles conditional GET operations. If the response doesn't have an ``ETag`` "
"header, the middleware adds one if needed. If the response has an ``ETag`` "
"or ``Last-Modified`` header, and the request has ``If-None-Match`` or ``If-"
"Modified-Since``, the response is replaced by an :class:`~django.http."
"HttpResponseNotModified`."
msgstr ""
"条件付きGET操作を扱います。レスポンスに ``ETag`` ヘッダーがない場合、必要に応"
"じてミドルウェアが追加します。レスポンスに ``ETag`` または ``Last-Modified`` "
"ヘッダーがあり、リクエストに ``If-None-Match`` または ``If-Modified-Since`` "
"がある場合、レスポンスは :class:`~django.http.HttpResponseNotModified` に置き"
"換えられます。"

msgid "Locale middleware"
msgstr "Locale ミドルウェア"

msgid ""
"Enables language selection based on data from the request. It customizes "
"content for each user. See the :doc:`internationalization documentation </"
"topics/i18n/translation>`."
msgstr ""
"リクエストからのデータに基づいた言語セクションを有効化します。この機能は、そ"
"れぞれのユーザに対してコンテンツをカスタマイズします。 :doc:`国際化のドキュメ"
"ント </topics/i18n/translation>` を参照してください。"

msgid ""
"Defaults to :class:`~django.http.HttpResponseRedirect`. Subclass "
"``LocaleMiddleware`` and override the attribute to customize the redirects "
"issued by the middleware."
msgstr ""
"デフォルトは :class:`~django.http.HttpResponseRedirect` です。"
"``LocaleMiddleware`` をサブクラス化して属性をオーバーライドし、ミドルウェアに"
"よって発行されたリダイレクトをカスタマイズします。"

msgid "Message middleware"
msgstr "Message ミドルウェア"

msgid ""
"Enables cookie- and session-based message support. See the :doc:`messages "
"documentation </ref/contrib/messages>`."
msgstr ""
"クッキーおよびセッションをベースとしたメッセージサポートを有効化します。:doc:"
"`メッセージのドキュメント </ref/contrib/messages>` を参照してください。"

msgid "Security middleware"
msgstr "Security middleware"

msgid ""
"If your deployment situation allows, it's usually a good idea to have your "
"front-end web server perform the functionality provided by the "
"``SecurityMiddleware``. That way, if there are requests that aren't served "
"by Django (such as static media or user-uploaded files), they will have the "
"same protections as requests to your Django application."
msgstr ""
"デプロイメントの状況によっては、通常、フロントエンドのウェブサーバーが "
"``SecurityMiddleware`` が提供する機能を実行するのが良いです。これにより、"
"Djangoで処理されないリクエスト（静的メディアやユーザーがアップロードしたファ"
"イルなど）も、Djangoアプリケーションへのリクエストと同じ保護を受けることがで"
"きます。"

msgid ""
"The ``django.middleware.security.SecurityMiddleware`` provides several "
"security enhancements to the request/response cycle. Each one can be "
"independently enabled or disabled with a setting."
msgstr ""
"``django.middleware.security.SecurityMiddleware`` は、リクエスト/レスポンスサ"
"イクルに複数のセキュリティ強化機能を提供します。それぞれの機能は、設定を使っ"
"て個別に有効または無効にできます。"

msgid ":setting:`SECURE_CONTENT_TYPE_NOSNIFF`"
msgstr ":setting:`SECURE_CONTENT_TYPE_NOSNIFF`"

msgid ":setting:`SECURE_CROSS_ORIGIN_OPENER_POLICY`"
msgstr ":setting:`SECURE_CROSS_ORIGIN_OPENER_POLICY`"

msgid ":setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS`"
msgstr ":setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS`"

msgid ":setting:`SECURE_HSTS_PRELOAD`"
msgstr ":setting:`SECURE_HSTS_PRELOAD`"

msgid ":setting:`SECURE_HSTS_SECONDS`"
msgstr ":setting:`SECURE_HSTS_SECONDS`"

msgid ":setting:`SECURE_REDIRECT_EXEMPT`"
msgstr ":setting:`SECURE_REDIRECT_EXEMPT`"

msgid ":setting:`SECURE_REFERRER_POLICY`"
msgstr ":setting:`SECURE_REFERRER_POLICY`"

msgid ":setting:`SECURE_SSL_HOST`"
msgstr ":setting:`SECURE_SSL_HOST`"

msgid ":setting:`SECURE_SSL_REDIRECT`"
msgstr ":setting:`SECURE_SSL_REDIRECT`"

msgid "HTTP Strict Transport Security"
msgstr "HTTP Strict Transport Security"

msgid ""
"For sites that should only be accessed over HTTPS, you can instruct modern "
"browsers to refuse to connect to your domain name via an insecure connection "
"(for a given period of time) by setting the `\"Strict-Transport-Security\" "
"header`__. This reduces your exposure to some SSL-stripping man-in-the-"
"middle (MITM) attacks."
msgstr ""
"HTTPSでのみアクセスする必要のあるサイトでは、  `\"Strict-Transport-"
"Security\" header`__ を設定することで、一定期間、モダンブラウザに対して、セ"
"キュアでない接続を通じてドメイン名に接続しないように指示できます。これによ"
"り、SSLストリッピング型の中間者攻撃 (MITM) に対するリスクを軽減できます。"

msgid ""
"``SecurityMiddleware`` will set this header for you on all HTTPS responses "
"if you set the :setting:`SECURE_HSTS_SECONDS` setting to a non-zero integer "
"value."
msgstr ""
"``SecurityMiddleware`` は、:setting:`SECURE_HSTS_SECONDS` 設定をゼロ以外の整"
"数値に設定すると、すべての HTTPS レスポンスに対してこのヘッダーを自動的に設定"
"します。"

msgid ""
"When enabling HSTS, it's a good idea to first use a small value for testing, "
"for example, :setting:`SECURE_HSTS_SECONDS = 3600<SECURE_HSTS_SECONDS>` for "
"one hour. Each time a web browser sees the HSTS header from your site, it "
"will refuse to communicate non-securely (using HTTP) with your domain for "
"the given period of time. Once you confirm that all assets are served "
"securely on your site (i.e. HSTS didn't break anything), it's a good idea to "
"increase this value so that infrequent visitors will be protected (31536000 "
"seconds, i.e. 1 year, is common)."
msgstr ""
"HSTSを有効にする際には、最初に小さい値をテスト用に使用することをお勧めしま"
"す。たとえば、1時間の場合は :setting:`SECURE_HSTS_SECONDS = "
"3600<SECURE_HSTS_SECONDS>` です。ウェブブラウザがあなたのサイトからHSTSヘッ"
"ダーを検知するたびに、指定された期間、非セキュアな通信(HTTPを使用)をあなたの"
"ドメインと行うことを拒否します。サイト上の全てのアセットが安全に提供されてい"
"ること(つまり、HSTSが何も壊していないこと)を確認できたら、頻繁でない訪問者も"
"保護されるようにこの値を増やすことをお勧めします(一般的には31536000秒、すなわ"
"ち1年が普通です)。"

msgid ""
"Additionally, if you set the :setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS` "
"setting to ``True``, ``SecurityMiddleware`` will add the "
"``includeSubDomains`` directive to the ``Strict-Transport-Security`` header. "
"This is recommended (assuming all subdomains are served exclusively using "
"HTTPS), otherwise your site may still be vulnerable via an insecure "
"connection to a subdomain."
msgstr ""
"また、:setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS` 設定を ``True`` に設定する"
"と、``SecurityMiddleware`` は ``Strict-Transport-Security`` ヘッダーに "
"``includeSubDomains`` ディレクティブを追加します。これは推奨です (すべてのサ"
"ブドメインが HTTPS を使用してのみ提供されている場合)。それ以外の場合、サイト"
"はまだサブドメインへの安全でない接続を介して脆弱になる可能性があります。"

msgid ""
"If you wish to submit your site to the `browser preload list`_, set the :"
"setting:`SECURE_HSTS_PRELOAD` setting to ``True``. That appends the "
"``preload`` directive to the ``Strict-Transport-Security`` header."
msgstr ""
"`browser preload list`_ にサイトを登録する場合は、 :setting:"
"`SECURE_HSTS_PRELOAD` 設定を ``True`` に設定してください。これにより、 "
"``Strict-Transport-Security`` ヘッダーに ``preload`` ディレクティブが追加され"
"ます。"

msgid ""
"The HSTS policy applies to your entire domain, not just the URL of the "
"response that you set the header on. Therefore, you should only use it if "
"your entire domain is served via HTTPS only."
msgstr ""
"HSTSポリシーは、ヘッダーを設定したレスポンスのURLだけでなく、ドメイン全体に適"
"用されます。したがって、ドメイン全体がHTTPS経由のみで提供される場合にのみ使用"
"すべきです。"

msgid ""
"Browsers properly respecting the HSTS header will refuse to allow users to "
"bypass warnings and connect to a site with an expired, self-signed, or "
"otherwise invalid SSL certificate. If you use HSTS, make sure your "
"certificates are in good shape and stay that way!"
msgstr ""
"HSTSヘッダーを適切に尊重するブラウザは、期限切れ、自己署名、またはその他の無"
"効なSSL証明書を持つサイトに警告をバイパスして接続することをユーザーに許可しま"
"せん。HSTSを使用する場合は、証明書が適切な状態にあることを確認し、維持してく"
"ださい！"

msgid ""
"If you are deployed behind a load-balancer or reverse-proxy server, and the "
"``Strict-Transport-Security`` header is not being added to your responses, "
"it may be because Django doesn't realize that it's on a secure connection; "
"you may need to set the :setting:`SECURE_PROXY_SSL_HEADER` setting."
msgstr ""
"ロードバランサーやリバースプロキシサーバーの後ろに配置されている場合、そして "
"``Strict-Transport-Security`` ヘッダーがレスポンスに追加されていない場合は、"
"Djangoが安全な接続上にあることを認識していない可能性があります。その場合、:"
"setting:`SECURE_PROXY_SSL_HEADER` 設定を行う必要があるかもしれません。"

msgid "Referrer Policy"
msgstr "リファラ・ポリシー"

msgid ""
"Browsers use `the Referer header`__ as a way to send information to a site "
"about how users got there. When a user clicks a link, the browser will send "
"the full URL of the linking page as the referrer. While this can be useful "
"for some purposes -- like figuring out who's linking to your site -- it also "
"can cause privacy concerns by informing one site that a user was visiting "
"another site."
msgstr ""
"ブラウザは、ユーザーがどのようにそのサイトに到達したかについての情報をサイト"
"に送信する手段として、 `the Referer header`__ を使用します。ユーザーがリンク"
"をクリックすると、ブラウザはリファラとしてリンク元ページの完全な URL を送信し"
"ます。これにより、誰があなたのサイトにリンクしているかを特定するなどの目的に"
"は役立ちますが、同時に、ユーザーが別のサイトを訪れていたことを1つのサイトに通"
"知することでプライバシー上の懸念が引き起こされる可能性もあります。"

msgid ""
"Some browsers have the ability to accept hints about whether they should "
"send the HTTP ``Referer`` header when a user clicks a link; this hint is "
"provided via `the Referrer-Policy header`__. This header can suggest any of "
"three behaviors to browsers:"
msgstr ""
"一部のブラウザには、ユーザーがリンクをクリックした際に HTTP ``Referer`` ヘッ"
"ダを送信すべきかについてのヒントを受け入れる機能があります。このヒントは "
"`the Referrer-Policy header`__ を介して提供されます。このヘッダは、ブラウザに"
"対して3つの動作のいずれかを提案できます:"

msgid ""
"Full URL: send the entire URL in the ``Referer`` header. For example, if the "
"user is visiting ``https://example.com/page.html``, the ``Referer`` header "
"would contain ``\"https://example.com/page.html\"``."
msgstr ""
"完全なURL: ``Referer`` ヘッダーには、完全なURLを送信します。たとえば、ユー"
"ザーが ``https://example.com/page.html`` を訪問している場合、``Referer`` ヘッ"
"ダーには ``\"https://example.com/page.html\"`` が含まれます。"

msgid ""
"Origin only: send only the \"origin\" in the referrer. The origin consists "
"of the scheme, host and (optionally) port number. For example, if the user "
"is visiting ``https://example.com/page.html``, the origin would be ``https://"
"example.com/``."
msgstr ""
"Origin のみ: referrerには \"origin\" のみを送信します。origin はスキーム、ホ"
"スト、(オプションで) ポート番号から構成されます。例えば、ユーザーが "
"``https://example.com/page.html`` を訪問している場合、origin は ``https://"
"example.com/`` となります。"

msgid "No referrer: do not send a ``Referer`` header at all."
msgstr "リファラなし: ``Referer`` ヘッダーを一切送信しません。"

msgid ""
"There are two types of conditions this header can tell a browser to watch "
"out for:"
msgstr "このヘッダーがブラウザーに注意を促す条件は2種類あります:"

msgid ""
"Same-origin versus cross-origin: a link from ``https://example.com/1.html`` "
"to ``https://example.com/2.html`` is same-origin. A link from ``https://"
"example.com/page.html`` to ``https://not.example.com/page.html`` is cross-"
"origin."
msgstr ""
"同一オリジンとクロスオリジン: ``https://example.com/1.html`` から ``https://"
"example.com/2.html`` へのリンクは同一オリジンです。 ``https://example.com/"
"page.html`` から ``https://not.example.com/page.html`` へのリンクはクロスオリ"
"ジンです。"

msgid ""
"Protocol downgrade: a downgrade occurs if the page containing the link is "
"served via HTTPS, but the page being linked to is not served via HTTPS."
msgstr ""
"プロトコルのダウングレード: リンクを含むページがHTTPS経由で提供されている場"
"合、リンク先のページがHTTPS経由で提供されていない場合にダウングレードが発生し"
"ます。"

msgid ""
"When your site is served via HTTPS, :ref:`Django's CSRF protection system "
"<how-csrf-works>` requires the ``Referer`` header to be present, so "
"completely disabling the ``Referer`` header will interfere with CSRF "
"protection. To gain most of the benefits of disabling ``Referer`` headers "
"while also keeping CSRF protection, consider enabling only same-origin "
"referrers."
msgstr ""
"サイトが HTTPS 経由で提供される場合、:ref:`Django の CSRF 保護システム <how-"
"csrf-works>` は ``Referer`` ヘッダーが存在することを要求するので、"
"``Referer`` ヘッダーを完全に無効にすることは CSRF 保護の妨げになります。 "
"``Referer`` ヘッダーを無効にすることの多くの利点を享受しつつ、CSRF 保護も維持"
"するには、同一オリジンのリファラーのみを有効にすることを検討してください。"

msgid ""
"``SecurityMiddleware`` can set the ``Referrer-Policy`` header for you, based "
"on the :setting:`SECURE_REFERRER_POLICY` setting (note spelling: browsers "
"send a ``Referer`` header when a user clicks a link, but the header "
"instructing a browser whether to do so is spelled ``Referrer-Policy``). The "
"valid values for this setting are:"
msgstr ""
"``SecurityMiddleware`` は、:setting:`SECURE_REFERRER_POLICY` 設定に基づいて "
"``Referrer-Policy`` ヘッダを設定できます（スペルに注意: ブラウザはユーザーが"
"リンクをクリックすると ``Referer`` ヘッダを送信しますが、ブラウザにこれを行う"
"かどうかを指示するヘッダは ``Referrer-Policy`` と綴られます）。この設定の有効"
"な値は次の通りです:"

msgid "``no-referrer``"
msgstr "``no-referrer``"

msgid ""
"Instructs the browser to send no referrer for links clicked on this site."
msgstr ""
"このサイト上でクリックされたリンクに対して、ブラウザにリファラを送信しないよ"
"う指示します。"

msgid "``no-referrer-when-downgrade``"
msgstr "``no-referrer-when-downgrade``"

msgid ""
"Instructs the browser to send a full URL as the referrer, but only when no "
"protocol downgrade occurs."
msgstr ""
"ブラウザに、プロトコルのダウングレードが発生しない時にのみ、完全なURLをリファ"
"ラとして送信するよう指示します。"

msgid ""
"Instructs the browser to send only the origin, not the full URL, as the "
"referrer."
msgstr ""
"ブラウザに、リファラとして完全な URL ではなく、オリジンのみを送信するよう指示"
"します。"

msgid "``origin-when-cross-origin``"
msgstr "``origin-when-cross-origin``"

msgid ""
"Instructs the browser to send the full URL as the referrer for same-origin "
"links, and only the origin for cross-origin links."
msgstr ""
"ブラウザに、同一オリジンのリンクでは完全なURLをリファラとして送信するように指"
"示し、クロスオリジンのリンクではオリジンのみを送信するようにします。"

msgid "``same-origin``"
msgstr "``same-origin``"

msgid ""
"Instructs the browser to send a full URL, but only for same-origin links. No "
"referrer will be sent for cross-origin links."
msgstr ""
"ブラウザに対し、同一オリジンのリンクについては完全なURLを送信するよう指示しま"
"す。クロスオリジンのリンクに対しては、リファラは送信されません。"

msgid "``strict-origin``"
msgstr "``strict-origin``"

msgid ""
"Instructs the browser to send only the origin, not the full URL, and to send "
"no referrer when a protocol downgrade occurs."
msgstr ""
"ブラウザに、プロトコルのダウングレードが発生した場合に、完全なURLではなくオリ"
"ジンのみを送信するよう指示し、リファラを送信しないようにします。"

msgid "``strict-origin-when-cross-origin``"
msgstr "``strict-origin-when-cross-origin``"

msgid ""
"Instructs the browser to send the full URL when the link is same-origin and "
"no protocol downgrade occurs; send only the origin when the link is cross-"
"origin and no protocol downgrade occurs; and no referrer when a protocol "
"downgrade occurs."
msgstr ""
"同一オリジンでプロトコルのダウングレードが発生しない場合、ブラウザには完全な"
"URLを送信するよう指示します。クロスオリジンでプロトコルのダウングレードが発生"
"しない場合、ブラウザにはオリジンのみを送信するよう指示します。プロトコルのダ"
"ウングレードが発生する場合はリファラを送信しません。"

msgid "``unsafe-url``"
msgstr "``unsafe-url``"

msgid "Instructs the browser to always send the full URL as the referrer."
msgstr "ブラウザに常に完全なURLをリファラとして送信するよう指示します。"

msgid "Unknown Policy Values"
msgstr "ポリシーの値が unknown の場合"

msgid ""
"Where a policy value is `unknown`__ by a user agent, it is possible to "
"specify multiple policy values to provide a fallback. The last specified "
"value that is understood takes precedence. To support this, an iterable or "
"comma-separated string can be used with :setting:`SECURE_REFERRER_POLICY`."
msgstr ""
"ユーザーエージェントによってポリシー値が `unknown`__ とされた場合、フォール"
"バックを提供するために複数のポリシー値を指定できます。解釈可能な最後に指定さ"
"れた値が優先されます。これをサポートするために、イテラブルもしくはカンマで区"
"切られた文字列が :setting:`SECURE_REFERRER_POLICY` の設定として使用できます。"

msgid "Cross-Origin Opener Policy"
msgstr "同一生成元ポリシー (Cross-Origin Opener Policy)"

msgid ""
"Some browsers have the ability to isolate top-level windows from other "
"documents by putting them in a separate browsing context group based on the "
"value of the `Cross-Origin Opener Policy`__ (COOP) header. If a document "
"that is isolated in this way opens a cross-origin popup window, the popup’s "
"``window.opener`` property will be ``null``. Isolating windows using COOP is "
"a defense-in-depth protection against cross-origin attacks, especially those "
"like Spectre which allowed exfiltration of data loaded into a shared "
"browsing context."
msgstr ""
"一部のブラウザは、 `Cross-Origin Opener Policy`__ (COOP) ヘッダーの値に基づい"
"て、トップレベルウィンドウを他のドキュメントから分離する能力を持っています。"
"この分離によって、特定のドキュメントがクロスオリジンのポップアップウィンドウ"
"を開いた場合、そのポップアップの ``window.opener`` プロパティは ``null`` にな"
"ります。COOP を使用したウィンドウの分離は、特に Spectre のような、共有された"
"ブラウジングコンテキストに読み込まれたデータの外部への持ち出しを可能にしたク"
"ロスオリジン攻撃に対する深層防御保護です。"

msgid ""
"``SecurityMiddleware`` can set the ``Cross-Origin-Opener-Policy`` header for "
"you, based on the :setting:`SECURE_CROSS_ORIGIN_OPENER_POLICY` setting. The "
"valid values for this setting are:"
msgstr ""
"``SecurityMiddleware`` は、 :setting:`SECURE_CROSS_ORIGIN_OPENER_POLICY` 設定"
"に基づいて、 ``Cross-Origin-Opener-Policy`` ヘッダーを設定できます。この設定"
"の有効な値は以下の通りです:"

msgid ""
"Isolates the browsing context exclusively to same-origin documents. Cross-"
"origin documents are not loaded in the same browsing context. This is the "
"default and most secure option."
msgstr ""
"同じオリジンのドキュメントに閲覧コンテキストを排他的に限定します。異なるオリ"
"ジンのドキュメントは同じ閲覧コンテキストで読み込まれません。これがデフォルト"
"で最も安全なオプションです。"

msgid "``same-origin-allow-popups``"
msgstr "``same-origin-allow-popups``"

msgid ""
"Isolates the browsing context to same-origin documents or those which either "
"don't set COOP or which opt out of isolation by setting a COOP of ``unsafe-"
"none``."
msgstr ""
"ブラウジングコンテキストを同一オリジンのドキュメントに限定します。または、"
"COOP を設定しないドキュメントや、COOP を ``unsafe-none`` に設定して隔離からオ"
"プトアウトするドキュメントに限定します。"

msgid "``unsafe-none``"
msgstr "``unsafe-none``"

msgid ""
"Allows the document to be added to its opener's browsing context group "
"unless the opener itself has a COOP of ``same-origin`` or ``same-origin-"
"allow-popups``."
msgstr ""
"ドキュメントを、オープナー自体が ``same-origin`` または ``same-origin-allow-"
"popups`` のCOOPを持っている場合を除いて、そのオープナーのブラウジングコンテキ"
"ストグループに追加できるようにします。"

msgid "``X-Content-Type-Options: nosniff``"
msgstr "``X-Content-Type-Options: nosniff``"

msgid ""
"Some browsers will try to guess the content types of the assets that they "
"fetch, overriding the ``Content-Type`` header. While this can help display "
"sites with improperly configured servers, it can also pose a security risk."
msgstr ""
"一部のブラウザーは、取得したアセットのコンテンツタイプを推測し、 ``Content-"
"Type`` ヘッダーを上書きしようとします。これは不適切に設定されたサーバーのサイ"
"トを表示する際に役立つことがありますが、セキュリティリスクをもたらすこともあ"
"ります。"

msgid ""
"If your site serves user-uploaded files, a malicious user could upload a "
"specially-crafted file that would be interpreted as HTML or JavaScript by "
"the browser when you expected it to be something harmless."
msgstr ""
"サイトがユーザーがアップロードしたファイルを提供する場合、悪意のあるユーザー"
"が特別に作成したファイルをアップロードする可能性があります。そのファイルが無"
"害なものだと思っていたのに、ブラウザでHTMLまたはJavaScriptとして解釈されてし"
"まう恐れがあります。"

msgid ""
"To prevent the browser from guessing the content type and force it to always "
"use the type provided in the ``Content-Type`` header, you can pass the `X-"
"Content-Type-Options: nosniff`__ header.  ``SecurityMiddleware`` will do "
"this for all responses if the :setting:`SECURE_CONTENT_TYPE_NOSNIFF` setting "
"is ``True``."
msgstr ""
"ブラウザがコンテンツタイプを推測し、常に ``Content-Type`` ヘッダーで提供され"
"たタイプを使用するように強制するために、`X-Content-Type-Options: nosniff`__ "
"ヘッダーを渡すことができます。 :setting:`SECURE_CONTENT_TYPE_NOSNIFF` 設定が "
"``True`` であれば、 ``SecurityMiddleware`` は全てのレスポンスに対してこれを行"
"います。"

msgid ""
"Note that in most deployment situations where Django isn't involved in "
"serving user-uploaded files, this setting won't help you. For example, if "
"your :setting:`MEDIA_URL` is served directly by your front-end web server "
"(nginx, Apache, etc.) then you'd want to set this header there. On the other "
"hand, if you are using Django to do something like require authorization in "
"order to download files and you cannot set the header using your web server, "
"this setting will be useful."
msgstr ""
"ほとんどのデプロイ状況では、ユーザーがアップロードしたファイルの配信に "
"Django が関与しないため、この設定は助けになりません。たとえば、:setting:"
"`MEDIA_URL` がフロントエンドのウェブサーバー (nginx や Apache など) から直接"
"配信される場合は、このヘッダーを設定することをおすすめします。一方で、たとえ"
"ばもし認可が必要なファイルをダウンロードするために Django を使用していて、"
"ウェブサーバーを使ってヘッダーを設定することができない場合、この設定が役に立"
"つでしょう。"

msgid "SSL Redirect"
msgstr "SSL リダイレクト"

msgid ""
"If your site offers both HTTP and HTTPS connections, most users will end up "
"with an unsecured connection by default. For best security, you should "
"redirect all HTTP connections to HTTPS."
msgstr ""
"サイトが HTTP と HTTPS 接続の両方をサポートしている場合、多くのユーザーはデ"
"フォルトでセキュアでない接続を行ってしまいます。最善のセキュリティのために"
"は、すべての HTTP 接続を HTTPS 接続にリダイレクトするべきです。"

msgid ""
"If you set the :setting:`SECURE_SSL_REDIRECT` setting to True, "
"``SecurityMiddleware`` will permanently (HTTP 301) redirect all HTTP "
"connections to HTTPS."
msgstr ""
":setting:`SECURE_SSL_REDIRECT` 設定を True に設定すれば、 "
"``SecurityMiddleware`` が すべての HTTP 接続を HTTPS に parmanent (HTTP 301) "
"にリダイレクトしてくれます。"

msgid ""
"For performance reasons, it's preferable to do these redirects outside of "
"Django, in a front-end load balancer or reverse-proxy server such as "
"`nginx`_. :setting:`SECURE_SSL_REDIRECT` is intended for the deployment "
"situations where this isn't an option."
msgstr ""
"パフォーマンス上の理由により、このようなリダイレクトは Django の外部、フロン"
"トエンドのロードバランサーや `nginx`_ などのリバースプロキシサーバーで実行し"
"た方が良いです。 :setting:`SECURE_SSL_REDIRECT` は、これらのオプションが使用"
"できないデプロイ環境で使われることを想定しています。"

msgid ""
"If the :setting:`SECURE_SSL_HOST` setting has a value, all redirects will be "
"sent to that host instead of the originally-requested host."
msgstr ""
":setting:`SECURE_SSL_HOST` 設定に値がある場合、全てのリダイレクトは元々要求さ"
"れたホストではなく、その値で指定されたホストに送信されます。"

msgid ""
"If there are a few pages on your site that should be available over HTTP, "
"and not redirected to HTTPS, you can list regular expressions to match those "
"URLs in the :setting:`SECURE_REDIRECT_EXEMPT` setting."
msgstr ""
"サイトのいくつかのページをHTTP経由で利用可能にし、HTTPSにリダイレクトされない"
"ようにしたい場合は、 :setting:`SECURE_REDIRECT_EXEMPT` 設定にそれらのURLに一"
"致する正規表現をリストアップできます。"

msgid ""
"If you are deployed behind a load-balancer or reverse-proxy server and "
"Django can't seem to tell when a request actually is already secure, you may "
"need to set the :setting:`SECURE_PROXY_SSL_HEADER` setting."
msgstr ""
"ロードバランサーやリバースプロキシサーバーの後ろにデプロイしており、Django が"
"リクエストが既に安全であるかどうかを正しく判断できない場合は、 :setting:"
"`SECURE_PROXY_SSL_HEADER` 設定を行う必要があります。"

msgid "Session middleware"
msgstr "Session middleware"

msgid ""
"Enables session support. See the :doc:`session documentation </topics/http/"
"sessions>`."
msgstr ""
"セッションのサポートを有効にします。詳しくは :doc:`セッションのドキュメント "
"</topics/http/sessions>` を読んでください。"

msgid ""
"Adds the ``site`` attribute representing the current site to every incoming "
"``HttpRequest`` object. See the :ref:`sites documentation <site-middleware>`."
msgstr ""
"受信側のすべての ``HttpRequest`` オブジェクトに、現在のサイトを表す ``site`` "
"属性を追加します。詳しくは :ref:`sites のドキュメント <site-middleware>` を参"
"照してください。"

msgid "Authentication middleware"
msgstr "Authentication middleware"

msgid ""
"Adds the ``user`` attribute, representing the currently-logged-in user, to "
"every incoming ``HttpRequest`` object. See :ref:`Authentication in web "
"requests <auth-web-requests>`."
msgstr ""
"``HttpRequest`` オブジェクトに対して、現在ログインしているユーザーを表す "
"``user`` 属性を追加します。:ref:`ウェブリクエストにおける認証 <auth-web-"
"requests>` を参照してください。"

msgid ""
"Middleware for utilizing web server provided authentication. See :doc:`/"
"howto/auth-remote-user` for usage details."
msgstr ""
"Web サーバーが提供する認証を利用するためのミドルウェアです。使用方法の詳細に"
"ついては :doc:`/howto/auth-remote-user` を参照してください。"

msgid ""
"Middleware for utilizing web server provided authentication when enabled "
"only on the login page. See :ref:`persistent-remote-user-middleware-howto` "
"for usage details."
msgstr ""
"ログインページでのみ有効にした場合の、Webサーバー提供の認証を利用するためのミ"
"ドルウェアです。使い方の詳細については、 :ref:`persistent-remote-user-"
"middleware-howto` を参照してください。"

msgid "CSRF protection middleware"
msgstr "CSRF プロテクション middleware"

msgid ""
"Adds protection against Cross Site Request Forgeries by adding hidden form "
"fields to POST forms and checking requests for the correct value. See the :"
"doc:`Cross Site Request Forgery protection documentation </ref/csrf>`."
msgstr ""
"POST フォームに隠しフォームフィールドを追加し、リクエストの値が正しいかチェッ"
"クすることで、Cross Site Request Forgery に対するプロテクションを追加します。"
"詳しくは :doc:`Cross Site Request Forgery プロテクションのドキュメント </ref/"
"csrf>` を読んでください。"

msgid "``X-Frame-Options`` middleware"
msgstr "``X-Frame-Options`` middleware"

msgid ""
"Simple :doc:`clickjacking protection via the X-Frame-Options header </ref/"
"clickjacking/>`."
msgstr ""
"シンプルな :doc:`クリックジャッキングに対する X-Frame-Options ヘッダ経由のプ"
"ロテクション </ref/clickjacking/>` です。"

msgid "Middleware ordering"
msgstr "Middleware の順序"

msgid ""
"Here are some hints about the ordering of various Django middleware classes:"
msgstr ""
"Django の多様なミドルウェアクラスの順序に関する注意点を挙げておきます。"

msgid ":class:`~django.middleware.security.SecurityMiddleware`"
msgstr ":class:`~django.middleware.security.SecurityMiddleware`"

msgid ""
"It should go near the top of the list if you're going to turn on the SSL "
"redirect as that avoids running through a bunch of other unnecessary "
"middleware."
msgstr ""
"SSL リダイレクトを有効にしているなら、他のたくさんの必要のないミドルウェアが"
"実行されないように、リストの先頭付近に置くべきです。"

msgid ":class:`~django.middleware.cache.UpdateCacheMiddleware`"
msgstr ":class:`~django.middleware.cache.UpdateCacheMiddleware`"

msgid ""
"Before those that modify the ``Vary`` header (``SessionMiddleware``, "
"``GZipMiddleware``, ``LocaleMiddleware``)."
msgstr ""
"``Vary`` ヘッダに変更を加えるミドルウェア (``SessionMiddleware``, "
"``GZipMiddleware``, ``LocaleMiddleware``) の前に置きます。"

msgid ":class:`~django.middleware.gzip.GZipMiddleware`"
msgstr ":class:`~django.middleware.gzip.GZipMiddleware`"

msgid "Before any middleware that may change or use the response body."
msgstr "response body を変更・使用する可能性のあるミドルウェアの前に置きます。"

msgid "After ``UpdateCacheMiddleware``: Modifies ``Vary`` header."
msgstr ""
"``Vary`` ヘッダを修正するため、 ``UpdateCacheMiddleware`` の後に置きます。"

msgid ":class:`~django.contrib.sessions.middleware.SessionMiddleware`"
msgstr ":class:`~django.contrib.sessions.middleware.SessionMiddleware`"

msgid ""
"Before any middleware that may raise an exception to trigger an error view "
"(such as :exc:`~django.core.exceptions.PermissionDenied`) if you're using :"
"setting:`CSRF_USE_SESSIONS`."
msgstr ""
":setting:`CSRF_USE_SESSIONS` を使用している場合、例えば :exc:`~django.core."
"exceptions.PermissionDenied` のようなエラービューをトリガーする例外を発生させ"
"る可能性のあるミドルウェアよりも前に配置してください。"

msgid ":class:`~django.middleware.http.ConditionalGetMiddleware`"
msgstr ":class:`~django.middleware.http.ConditionalGetMiddleware`"

msgid ""
"Before any middleware that may change the response (it sets the ``ETag`` "
"header)."
msgstr ""
"レスポンスを変更する可能性があるミドルウェアよりも前に設定してください (これ"
"は ``ETag`` ヘッダを設定します)。"

msgid ""
"After ``GZipMiddleware`` so it won't calculate an ``ETag`` header on gzipped "
"contents."
msgstr ""
"gzip されたコンテンツに対して ``ETag`` ヘッダを計算しないように、 "
"``GZipMiddleware`` の後に置きます。"

msgid ":class:`~django.middleware.locale.LocaleMiddleware`"
msgstr ":class:`~django.middleware.locale.LocaleMiddleware`"

msgid ""
"One of the topmost, after ``SessionMiddleware`` (uses session data) and "
"``UpdateCacheMiddleware`` (modifies ``Vary`` header)."
msgstr ""
"``SessionMiddleware`` (session データを使う) と ``UpdateCacheMiddleware`` "
"(``Vary`` ヘッダを修正する) の後のできるだけ高い位置に置きます。"

msgid ":class:`~django.middleware.common.CommonMiddleware`"
msgstr ":class:`~django.middleware.common.CommonMiddleware`"

msgid ""
"Before any middleware that may change the response (it sets the ``Content-"
"Length`` header). A middleware that appears before ``CommonMiddleware`` and "
"changes the response must reset ``Content-Length``."
msgstr ""
"レスポンスを変更する可能性のあるミドルウェアの前に配置します (``Content-"
"Length`` ヘッダーを設定します)。 ``CommonMiddleware`` の前に配置され、レスポ"
"ンスを変更するミドルウェアは、 ``Content-Length`` をリセットする必要がありま"
"す。"

msgid ""
"Close to the top: it redirects when :setting:`APPEND_SLASH` or :setting:"
"`PREPEND_WWW` are set to ``True``."
msgstr ""
":setting:`APPEND_SLASH` か :setting:`PREPEND_WWW` が ``True`` に設定されてい"
"るとリダイレクトされるので、先頭の近くに置きます。"

msgid ""
"After ``SessionMiddleware`` if you're using :setting:`CSRF_USE_SESSIONS`."
msgstr ""
"``SessionMiddleware`` の後に、 :setting:`CSRF_USE_SESSIONS` を使用している場"
"合。"

msgid ":class:`~django.middleware.csrf.CsrfViewMiddleware`"
msgstr ":class:`~django.middleware.csrf.CsrfViewMiddleware`"

msgid ""
"Before any view middleware that assumes that CSRF attacks have been dealt "
"with."
msgstr "CSRF 攻撃が可能なすべての view ミドルウェアの前に置きます。"

msgid ""
"Before :class:`~django.contrib.auth.middleware.RemoteUserMiddleware`, or any "
"other authentication middleware that may perform a login, and hence rotate "
"the CSRF token, before calling down the middleware chain."
msgstr ""
":class:`~django.contrib.auth.middleware.RemoteUserMiddleware` の前、あるいは"
"ログインを実行し、CSRF トークンをローテートする可能性のある他の認証ミドルウェ"
"アの前、ミドルウェアチェインを呼び出す前に置きます。"

msgid ":class:`~django.contrib.auth.middleware.AuthenticationMiddleware`"
msgstr ":class:`~django.contrib.auth.middleware.AuthenticationMiddleware`"

msgid "After ``SessionMiddleware``: uses session storage."
msgstr "session ストレージを使うので、 ``SessionMiddleware`` の後に置きます。"

msgid ":class:`~django.contrib.messages.middleware.MessageMiddleware`"
msgstr ":class:`~django.contrib.messages.middleware.MessageMiddleware`"

msgid "After ``SessionMiddleware``: can use session-based storage."
msgstr ""
"session ベースの storage を使うので、 ``SessionMiddleware`` の後に置きます。"

msgid ":class:`~django.middleware.cache.FetchFromCacheMiddleware`"
msgstr ":class:`~django.middleware.cache.FetchFromCacheMiddleware`"

msgid ""
"After any middleware that modifies the ``Vary`` header: that header is used "
"to pick a value for the cache hash-key."
msgstr ""
"キャッシュのハッシュキーを生成するのに ``Vary`` ヘッダを使用するため、この"
"ヘッダを修正するすべてのミドルウェアのあとに置きます。"

msgid ""
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`"
msgstr ""
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`"

msgid "Should be near the bottom as it's a last-resort type of middleware."
msgstr ""
"最後に実行されるタイプのミドルウェアなので、できるだけ下に置く必要がありま"
"す。"

msgid ""
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware`"
msgstr ""
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware`"

msgid "Migration Operations"
msgstr "マイグレーション・オペレーション"

msgid ""
"Migration files are composed of one or more ``Operation``\\s, objects that "
"declaratively record what the migration should do to your database."
msgstr ""
"マイグレーションファイルは一つ以上の ``オペレーション``、データベースに対して"
"マイグレーションが行うべきオペレーションを宣言的に保持するオブジェクト、から"
"構成されます。"

msgid ""
"Django also uses these ``Operation`` objects to work out what your models "
"looked like historically, and to calculate what changes you've made to your "
"models since the last migration so it can automatically write your "
"migrations; that's why they're declarative, as it means Django can easily "
"load them all into memory and run through them without touching the database "
"to work out what your project should look like."
msgstr ""
"Django はこれらの ``Operation`` オブジェクトも使用して、モデルの履歴を確認"
"し、前回のマイグレーション以降にモデルに加えた変更を計算します。そのため、自"
"動的にマイグレーションを書き出すことができます。マイグレーションの定義が宣言"
"的なのはそのためであり、Django がそれらを簡単にメモリに読み込んで、データベー"
"スに触れることなくプロジェクトがどのようにあるべきかを把握するために実行する"
"ことができます。"

msgid ""
"There are also more specialized ``Operation`` objects which are for things "
"like :ref:`data migrations <data-migrations>` and for advanced manual "
"database manipulation. You can also write your own ``Operation`` classes if "
"you want to encapsulate a custom change you commonly make."
msgstr ""
":ref:`データのマイグレーション <data-migrations>` や高度なデータベースへの手"
"動操作のような特別な ``オペレーション`` も存在します。もし頻繁に行われる独自"
"の変更をカプセル化したければ独自に ``オペレーション`` を記述する事もできま"
"す。"

msgid ""
"If you need an empty migration file to write your own ``Operation`` objects "
"into, use ``python manage.py makemigrations --empty yourappname``, but be "
"aware that manually adding schema-altering operations can confuse the "
"migration autodetector and make resulting runs of :djadmin:`makemigrations` "
"output incorrect code."
msgstr ""
"もし独自の ``Operation`` オブジェクトを定義する空のマイグレーションファイルが"
"必要であれば、``python manage.py makemigrations --empty yourappname`` を実行"
"してください。ただし、手動でのスキーマ変更オペレーションの追加はマイグレー"
"ションの自動検出機構を混乱させ、 :djadmin:`makemigrations` が正しい結果を出力"
"しなくなる可能性があることに十分注意してください。"

msgid ""
"All of the core Django operations are available from the ``django.db."
"migrations.operations`` module."
msgstr ""
"Django が提供するコア機能は全て ``django.db.migrations.operations`` モジュー"
"ルから利用できます。"

msgid ""
"For introductory material, see the :doc:`migrations topic guide </topics/"
"migrations>`."
msgstr ""
"より入門的な内容に関しては、 :doc:`トピックスのマイグレーション </topics/"
"migrations>` を参照ください。"

msgid "Schema Operations"
msgstr "スキーマ・オペレーション"

msgid "``CreateModel``"
msgstr "``CreateModel``"

msgid ""
"Creates a new model in the project history and a corresponding table in the "
"database to match it."
msgstr ""
"プロジェクトの履歴に新たなモデル、そしてデータベース上に対応するテーブルを作"
"成します。"

msgid ""
"``name`` is the model name, as would be written in the ``models.py`` file."
msgstr ""
"``name`` は ``models.py`` ファイルに定義されているであろうモデルの名称です。"

msgid ""
"``fields`` is a list of 2-tuples of ``(field_name, field_instance)``. The "
"field instance should be an unbound field (so just ``models."
"CharField(...)``, rather than a field taken from another model)."
msgstr ""
"``fields`` は ``(フィールド名, フィールドのインスタンス)`` という 2 値のタプ"
"ルのリストです。フィールドのインスタンスは束縛されないフィールド(他のモデルか"
"ら取得した物でなく、単に ``models.CharField(...)`` 等と記述する物)でなければ"
"いけません。"

msgid ""
"``options`` is an optional dictionary of values from the model's ``Meta`` "
"class."
msgstr ""
"``options`` は定義されるモデルの ``Meta`` クラスの値からなるオプションの辞書"
"オブジェクトです。"

msgid ""
"``bases`` is an optional list of other classes to have this model inherit "
"from; it can contain both class objects as well as strings in the format "
"``\"appname.ModelName\"`` if you want to depend on another model (so you "
"inherit from the historical version). If it's not supplied, it defaults to "
"inheriting from the standard ``models.Model``."
msgstr ""
"``bases`` はオプションで、このモデルに継承させる他のクラスのリストです。（す"
"でに定義した他のモデルを継承する場合、）クラスオブジェクトまたは ``\"appname."
"ModelName\"`` という形式の文字列を含めることができます。このパラメータが空の"
"場合、デフォルトでは標準の ``models.Model`` から継承します。"

msgid ""
"``managers`` takes a list of 2-tuples of ``(manager_name, "
"manager_instance)``. The first manager in the list will be the default "
"manager for this model during migrations."
msgstr ""
"``managers`` は ``(マネージャ名, マネージャのインスタンス)`` という 2 値のタ"
"プルのリストを受け取ります。マイグレーションの間はリスト内で最初に定義された"
"マネージャがこのモデルの標準マネージャとして利用されます。"

msgid "``DeleteModel``"
msgstr "``DeleteModel``"

msgid ""
"Deletes the model from the project history and its table from the database."
msgstr ""
"プロジェクトの履歴からモデルを、加えてデータベースから該当モデルを扱うテーブ"
"ルを削除します。"

msgid "``RenameModel``"
msgstr "``RenameModel``"

msgid "Renames the model from an old name to a new one."
msgstr "モデルの名称を今までの名称から新しい名称に変更します。"

msgid ""
"You may have to manually add this if you change the model's name and quite a "
"few of its fields at once; to the autodetector, this will look like you "
"deleted a model with the old name and added a new one with a different name, "
"and the migration it creates will lose any data in the old table."
msgstr ""
"一度に定義しているモデルの名前とかなり多くのフィールドの名前を変更した場合は"
"手動でこの処理を追加する必要があるかもしれません;マイグレーションの自動検知機"
"構が古い名称を持ったモデルを削除して異なった名称のモデルを追加したと認識して"
"しまうため、そのマイグレーション処理は古いテーブルの全てのデータを消去してし"
"まいます。"

msgid "``AlterModelTable``"
msgstr "``AlterModelTable``"

msgid ""
"Changes the model's table name (the :attr:`~django.db.models.Options."
"db_table` option on the ``Meta`` subclass)."
msgstr ""
"定義しているモデルのテーブル名を変更します(``Meta`` サブクラスの :attr:"
"`~django.db.models.Options.db_table` オプションを参照します)。"

msgid "``AlterModelTableComment``"
msgstr "``AlterModelTableComment``"

msgid ""
"Changes the model's table comment (the :attr:`~django.db.models.Options."
"db_table_comment` option on the ``Meta`` subclass)."
msgstr ""
"モデルのテーブルコメント (``Meta`` サブクラスの :attr:`~django.db.models."
"Options.db_table_comment` オプション) を変更します。"

msgid "``AlterUniqueTogether``"
msgstr "``AlterUniqueTogether``"

msgid ""
"Changes the model's set of unique constraints (the :attr:`~django.db.models."
"Options.unique_together` option on the ``Meta`` subclass)."
msgstr ""
"モデルのユニーク制約のセットを変更します (``Meta`` サブクラスの :attr:"
"`~django.db.models.Options.unique_together` オプション)。"

msgid "``AlterIndexTogether``"
msgstr "``AlterIndexTogether``"

msgid ""
"Changes the model's set of custom indexes (the ``index_together`` option on "
"the ``Meta`` subclass)."
msgstr ""
"モデルのカスタムインデックスのセットを変更します (``Meta`` サブクラスの "
"``index_together`` オプション)。"

msgid ""
"``AlterIndexTogether`` is officially supported only for pre-Django 4.2 "
"migration files. For backward compatibility reasons, it's still part of the "
"public API, and there's no plan to deprecate or remove it, but it should not "
"be used for new migrations. Use :class:`~django.db.migrations.operations."
"AddIndex` and :class:`~django.db.migrations.operations.RemoveIndex` "
"operations instead."
msgstr ""
"``AlterIndexTogether`` は公式には Django 4.2 以前のマイグレーションファイルに"
"のみサポートされています。後方互換性の理由から、これはまだパブリック API の一"
"部であり、非推奨または削除する予定はありませんが、新しいマイグレーションには"
"使わないでください。代わりに :class:`~django.db.migrations.operations."
"AddIndex` と :class:`~django.db.migrations.operations.RemoveIndex` オペレー"
"ションを使ってください。"

msgid "``AlterOrderWithRespectTo``"
msgstr "``AlterOrderWithRespectTo``"

msgid ""
"Makes or deletes the ``_order`` column needed for the :attr:`~django.db."
"models.Options.order_with_respect_to` option on the ``Meta`` subclass."
msgstr ""
"``Meta`` サブクラスの :attr:`~django.db.models.Options."
"order_with_respect_to` オプションに必要な ``_order`` カラムを作成または削除し"
"ます。"

msgid "``AlterModelOptions``"
msgstr "``AlterModelOptions``"

msgid ""
"Stores changes to miscellaneous model options (settings on a model's "
"``Meta``) like ``permissions`` and ``verbose_name``. Does not affect the "
"database, but persists these changes for :class:`RunPython` instances to "
"use. ``options`` should be a dictionary mapping option names to values."
msgstr ""
"``permissions`` や ``verbose_name`` のような雑多なモデルオプション（モデルの "
"``Meta`` の設定）の変更を保存します。データベースには影響を与えませんが、 :"
"class:`RunPython` インスタンスが使用するためにこれらの変更を保持します。 "
"``options`` はオプション名と値をマッピングした辞書である必要があります。"

msgid "``AlterModelManagers``"
msgstr "``AlterModelManagers``"

msgid "Alters the managers that are available during migrations."
msgstr "マイグレーション中に利用可能なマネージャを変更します。"

msgid "``AddField``"
msgstr "``AddField``"

msgid ""
"Adds a field to a model. ``model_name`` is the model's name, ``name`` is the "
"field's name, and ``field`` is an unbound Field instance (the thing you "
"would put in the field declaration in ``models.py`` - for example, ``models."
"IntegerField(null=True)``."
msgstr ""
"モデルにフィールドを追加します。 ``model_name`` はモデル名、 ``name`` は"
"フィールド名、 ``field`` はバインドされていないフィールドのインスタンスです。"
"これは ``models.py`` のフィールド宣言に記述します。たとえば、 ``models."
"IntegerField(null=True)`` のように書きます。"

msgid ""
"The ``preserve_default`` argument indicates whether the field's default "
"value is permanent and should be baked into the project state (``True``), or "
"if it is temporary and just for this migration (``False``) - usually because "
"the migration is adding a non-nullable field to a table and needs a default "
"value to put into existing rows. It does not affect the behavior of setting "
"defaults in the database directly - Django never sets database defaults and "
"always applies them in the Django ORM code."
msgstr ""
"引数 ``preserve_default`` は、フィールドのデフォルト値が永続的で、プロジェク"
"トの状態に焼き込むべきもの (``True``) か、それとも一時的で今回のマイグレー"
"ションのためのもの (``False``) かを示します。通常、マイグレーションはテーブル"
"に NULL 値でないフィールドを追加するため、既存の行に入れるデフォルト値が必要"
"なためです。Django がデータベースのデフォルトを設定することはなく、常に "
"Django ORM コードの中でデフォルトを適用します。これは、データベースにデフォル"
"トを直接設定する動作には影響しません。"

msgid ""
"On older databases, adding a field with a default value may cause a full "
"rewrite of the table. This happens even for nullable fields and may have a "
"negative performance impact. To avoid that, the following steps should be "
"taken."
msgstr ""
"古いデータベースでは、デフォルト値を持つフィールドを追加すると、テーブルの完"
"全な書き換えが発生することがあります。これはNULL可能なフィールドでも発生し、"
"パフォーマンスに悪影響を及ぼす可能性があります。これを避けるには、以下の手順"
"を実行する必要があります。"

msgid ""
"Add the nullable field without the default value and run the :djadmin:"
"`makemigrations` command. This should generate a migration with an "
"``AddField`` operation."
msgstr ""
"デフォルト値なしで nullable フィールドを追加し、 :djadmin:`makemigrations` コ"
"マンドを実行します。これで ``AddField`` オペレーションを持つマイグレーション"
"が生成されるはずです。"

msgid ""
"Add the default value to your field and run the :djadmin:`makemigrations` "
"command. This should generate a migration with an ``AlterField`` operation."
msgstr ""
"デフォルト値をフィールドに追加し、 :djadmin:`makemigrations` コマンドを実行し"
"ます。これで ``AlterField`` オペレーションを持つマイグレーションが生成される"
"はずです。"

msgid "``RemoveField``"
msgstr "``RemoveField``"

msgid "Removes a field from a model."
msgstr "モデルからフィールドを削除します。"

msgid ""
"Bear in mind that when reversed, this is actually adding a field to a model. "
"The operation is reversible (apart from any data loss, which is "
"irreversible) if the field is nullable or if it has a default value that can "
"be used to populate the recreated column. If the field is not nullable and "
"does not have a default value, the operation is irreversible."
msgstr ""
"逆の場合、これは実際にはモデルにフィールドを追加していることに留意してくださ"
"い。フィールドが null 許容であるか、再作成されたカラムに入力するために使われ"
"るデフォルト値を持っている場合、この操作は可逆です（データの損失を除けば不可"
"逆です）。フィールドが null 許容でなく、デフォルト値を持たない場合、この操作"
"は不可逆です。"

msgid ""
"``RemoveField`` will also delete any additional database objects that are "
"related to the removed field (like views, for example). This is because the "
"resulting ``DROP COLUMN`` statement will include the ``CASCADE`` clause to "
"ensure `dependent objects outside the table are also dropped`_."
msgstr ""
"``RemoveField`` は、削除されたフィールドに関連する追加のデータベースオブジェ"
"クト（たとえばビューなど）も削除します。これは、テーブル外の依存オブジェクト"
"も確実に削除されるようにするために（参照: `dependent objects outside the "
"table are also dropped`_ ）、生成される ``DROP COLUMN`` ステートメントは "
"``CASCADE`` 句を含むからです。"

msgid "``AlterField``"
msgstr "``AlterField``"

msgid ""
"Alters a field's definition, including changes to its type, :attr:`~django."
"db.models.Field.null`, :attr:`~django.db.models.Field.unique`, :attr:"
"`~django.db.models.Field.db_column` and other field attributes."
msgstr ""
"フィールドの型を変更したり、 :attr:`~django.db.models.Field.null`, :attr:"
"`~django.db.models.Field.unique`, :attr:`~django.db.models.Field.db_column` "
"などのフィールド属性を変更したりします。"

msgid ""
"The ``preserve_default`` argument indicates whether the field's default "
"value is permanent and should be baked into the project state (``True``), or "
"if it is temporary and just for this migration (``False``) - usually because "
"the migration is altering a nullable field to a non-nullable one and needs a "
"default value to put into existing rows. It does not affect the behavior of "
"setting defaults in the database directly - Django never sets database "
"defaults and always applies them in the Django ORM code."
msgstr ""
"引数 ``preserve_default`` は、フィールドのデフォルト値が永続的で、プロジェク"
"トの状態に保持されるべきもの (``True``) か、それとも一時的でこのマイグレー"
"ションのためだけのもの (``False``) かを指定します。通常マイグレーションは "
"null 許容のフィールドを null 非許容のフィールドに変更し、既存の行に入れるデ"
"フォルト値が必要だからです。Django がデータベースのデフォルトを設定することは"
"なく、常に Django ORM コードの中でデフォルトを適用します。"

msgid ""
"Note that not all changes are possible on all databases - for example, you "
"cannot change a text-type field like ``models.TextField()`` into a number-"
"type field like ``models.IntegerField()`` on most databases."
msgstr ""
"たとえば、 ``models.TextField()`` のようなテキスト型のフィールドを ``models."
"IntegerField()`` のような数値型のフィールドに変更することは、ほとんどのデータ"
"ベースではできません。"

msgid "``RenameField``"
msgstr "``RenameField``"

msgid ""
"Changes a field's name (and, unless :attr:`~django.db.models.Field."
"db_column` is set, its column name)."
msgstr ""
"フィールドの名前を変更します(また、 :attr:`~django.db.models.Field."
"db_column` が指定されていない限り、カラム名も変更します)。"

msgid "``AddIndex``"
msgstr "``AddIndex``"

msgid ""
"Creates an index in the database table for the model with ``model_name``. "
"``index`` is an instance of the :class:`~django.db.models.Index` class."
msgstr ""
"データベーステーブルに ``model_name`` のモデルのインデックスを作成します。 "
"``index`` は :class:`~django.db.models.Index` クラスのインスタンスです。"

msgid "``RemoveIndex``"
msgstr "``RemoveIndex``"

msgid "Removes the index named ``name`` from the model with ``model_name``."
msgstr ""
"``model_name`` のモデルから ``name`` という名前のインデックスを削除します。"

msgid "``RenameIndex``"
msgstr "``RenameIndex``"

msgid ""
"Renames an index in the database table for the model with ``model_name``. "
"Exactly one of ``old_name`` and ``old_fields`` can be provided. "
"``old_fields`` is an iterable of the strings, often corresponding to fields "
"of :attr:`~django.db.models.Options.index_together`."
msgstr ""
"モデルのデータベーステーブルのインデックス名を ``model_name`` に変更します。 "
"``old_name`` と ``old_fields`` のどちらか一方を指定します。 ``old_fields`` は"
"文字列のイテラブルで、多くの場合 :attr:`~django.db.models.Options."
"index_together` のフィールドに対応します。"

msgid ""
"On databases that don't support an index renaming statement (SQLite and "
"MariaDB < 10.5.2), the operation will drop and recreate the index, which can "
"be expensive."
msgstr ""
"インデックス名の変更文をサポートしていないデータベース（SQLiteとMariaDB < "
"10.5.2）では、この操作はインデックスを削除して再作成することになり、コストが"
"かかります。"

msgid "``AddConstraint``"
msgstr "``AddConstraint``"

msgid ""
"Creates a :doc:`constraint </ref/models/constraints>` in the database table "
"for the model with ``model_name``."
msgstr ""
"データベーステーブルの ``model_name`` のモデルに :doc:`制約 </ref/models/"
"constraints>` を作成します。"

msgid "``RemoveConstraint``"
msgstr "``RemoveConstraint``"

msgid ""
"Removes the constraint named ``name`` from the model with ``model_name``."
msgstr "``model_name`` のモデルから ``name`` という名前の制約を削除します。"

msgid "Special Operations"
msgstr "特別なオペレーション"

msgid "``RunSQL``"
msgstr "``RunSQL``"

msgid ""
"Allows running of arbitrary SQL on the database - useful for more advanced "
"features of database backends that Django doesn't support directly."
msgstr ""
"データベース上で任意の SQL を実行できるようにします。Django が直接サポートし"
"ていない、データベースバックエンドのより高度な機能に便利です。"

msgid ""
"``sql``, and ``reverse_sql`` if provided, should be strings of SQL to run on "
"the database. On most database backends (all but PostgreSQL), Django will "
"split the SQL into individual statements prior to executing them."
msgstr ""
"``sql`` と ``reverse_sql`` があれば、データベースで実行する SQL の文字列を指"
"定します。ほとんどのデータベースバックエンド (PostgreSQL 以外) では、 Django "
"は SQL を実行する前に個々の文に分割します。"

msgid ""
"On PostgreSQL and SQLite, only use ``BEGIN`` or ``COMMIT`` in your SQL in :"
"ref:`non-atomic migrations <non-atomic-migrations>`, to avoid breaking "
"Django's transaction state."
msgstr ""
"PostgreSQL と SQLite では、Django のトランザクション状態を壊さないように、 :"
"ref:`ノンアトミックなマイグレーション <non-atomic-migrations>` の SQL で "
"``BEGIN`` か ``COMMIT`` だけを使ってください。"

msgid ""
"You can also pass a list of strings or 2-tuples. The latter is used for "
"passing queries and parameters in the same way as :ref:`cursor.execute() "
"<executing-custom-sql>`. These three operations are equivalent::"
msgstr ""
"文字列もしくは 2 値のタプルのリストを渡すことができます。その内後者はクエリと"
"パラメータを :ref:`cursor.execute() <executing-custom-sql>` において行うのと"
"同じ形式で渡すために用いられます。以下の 3 つの処理は互いに等価です::"

msgid ""
"If you want to include literal percent signs in the query, you have to "
"double them if you are passing parameters."
msgstr ""
"クエリにパーセント文字リテラルを含ませたい場合、パラメータを渡していればパー"
"セント文字を二重に記述する必要があります。"

msgid ""
"The ``reverse_sql`` queries are executed when the migration is unapplied. "
"They should undo what is done by the ``sql`` queries. For example, to undo "
"the above insertion with a deletion::"
msgstr ""
"``reverse_sql`` クエリはマイグレーションを元に戻す際に実行されます。これらの"
"クエリは ``sql`` クエリで実行された内容を元に戻します。たとえば、上記の挿入を"
"削除で取り消す場合:"

msgid ""
"If ``reverse_sql`` is ``None`` (the default), the ``RunSQL`` operation is "
"irreversible."
msgstr ""
"``reverse_sql`` が ``None`` (デフォルト) の場合、 ``RunSQL`` オペレーションは"
"元に戻りません。"

msgid ""
"The ``state_operations`` argument allows you to supply operations that are "
"equivalent to the SQL in terms of project state. For example, if you are "
"manually creating a column, you should pass in a list containing an "
"``AddField`` operation here so that the autodetector still has an up-to-date "
"state of the model. If you don't, when you next run ``makemigrations``, it "
"won't see any operation that adds that field and so will try to run it "
"again. For example::"
msgstr ""
"引数 ``state_operations`` にはプロジェクトのステートから見た SQL と等価となる"
"処理を渡すことができます。たとえば、手動でカラムを作成した場合、マイグレー"
"ションの自動検知機構が最新のモデルのステートを保持できるように ``AddField`` "
"のリストを渡す必要があります。そうしなければ、次に ``makemigrations`` を実行"
"した際、フィールドを追加した処理を一切検知せずに同じ追加処理を再度適用してし"
"まうでしょう。次に例を示します。"

msgid ""
"The optional ``hints`` argument will be passed as ``**hints`` to the :meth:"
"`allow_migrate` method of database routers to assist them in making routing "
"decisions. See :ref:`topics-db-multi-db-hints` for more details on database "
"hints."
msgstr ""
"オプションの ``hints`` 引数はデータベースルータオブジェクトの :meth:"
"`allow_migrate` メソッドに ``**hints`` として渡されてルーティングの決定を補助"
"します。データベースのヒントに関しての詳細は :ref:`topics-db-multi-db-hints` "
"を参照ください。"

msgid ""
"The optional ``elidable`` argument determines whether or not the operation "
"will be removed (elided) when :ref:`squashing migrations <migration-"
"squashing>`."
msgstr ""
"オプションの ``elidable`` 引数はこの処理を :ref:`マイグレーションのスカッ"
"シュ <migration-squashing>` を行った際に消去する(省略する)か否かを決定しま"
"す。"

msgid ""
"Pass the ``RunSQL.noop`` attribute to ``sql`` or ``reverse_sql`` when you "
"want the operation not to do anything in the given direction. This is "
"especially useful in making the operation reversible."
msgstr ""
"指定された順序での処理を行わない場合、``sql`` もしくは ``reverse_sql`` に対し"
"て ``RunSQL.noop`` 要素を渡します。これは特に処理を逆の順序で行いたい場合に有"
"用です。"

msgid "``RunPython``"
msgstr "``RunPython``"

msgid ""
"Runs custom Python code in a historical context. ``code`` (and "
"``reverse_code`` if supplied) should be callable objects that accept two "
"arguments; the first is an instance of ``django.apps.registry.Apps`` "
"containing historical models that match the operation's place in the project "
"history, and the second is an instance of :class:`SchemaEditor <django.db."
"backends.base.schema.BaseDatabaseSchemaEditor>`."
msgstr ""
"マイグレーション履歴を反映して独自の Python コードを実行します。``code`` (与"
"えられれば加えて ``reverse_code`` )は二つの引数を受け取る呼び出し可能オブジェ"
"クトでなければなりません;第一引数はプロジェクトの履歴において処理の場所が一致"
"している履歴を反映したモデルを含んだ ``django.apps.registry.Apps`` のインスタ"
"ンスであり、第二引数は :class:`SchemaEditor <django.db.backends.base.schema."
"BaseDatabaseSchemaEditor>` のインスタンスです。"

msgid ""
"The ``reverse_code`` argument is called when unapplying migrations. This "
"callable should undo what is done in the ``code`` callable so that the "
"migration is reversible. If ``reverse_code`` is ``None`` (the default), the "
"``RunPython`` operation is irreversible."
msgstr ""
"``reverse_code`` 引数はマイグレーションを元に戻す際に呼び出されます。この呼び"
"出し可能オブジェクトはマイグレーションが逆順処理可能となるよう、先の呼び出し"
"可能オブジェクト ``code`` で行われた処理を無効化しなければなりません。 "
"``reverse_code`` が ``None`` (デフォルト) の場合、 ``RunPython`` オペレーショ"
"ンは元に戻りません。"

msgid ""
"The optional ``hints`` argument will be passed as ``**hints`` to the :meth:"
"`allow_migrate` method of database routers to assist them in making a "
"routing decision. See :ref:`topics-db-multi-db-hints` for more details on "
"database hints."
msgstr ""
"オプションの ``hints`` 引数はルーティングの決定を補助するためにデータベース"
"ルータの :meth:`allow_migrate` メソッドに ``**hints`` として渡されます。デー"
"タベースのヒントに関しての詳細は :ref:`topics-db-multi-db-hints` を参照してく"
"ださい。"

msgid ""
"You are advised to write the code as a separate function above the "
"``Migration`` class in the migration file, and pass it to ``RunPython``. "
"Here's an example of using ``RunPython`` to create some initial objects on a "
"``Country`` model::"
msgstr ""
"マイグレーションファイルの ``Migration`` クラスから独立した別の関数として記述"
"し、 ``RunPython`` に渡すことを推奨します。以下に ``RunPython`` を用いて "
"``Country`` モデル上の初期オブジェクトを追加する例を示します:"

msgid ""
"This is generally the operation you would use to create :ref:`data "
"migrations <data-migrations>`, run custom data updates and alterations, and "
"anything else you need access to an ORM and/or Python code for."
msgstr ""
"これは :ref:`データのマイグレーション <data-migrations>` の作成、独自のデータ"
"更新と構成変更、そして ORM や Python のコードにアクセスを必要とするあらゆるオ"
"ペレーションのために行われる一般的なオペレーションです。"

msgid ""
"Much like :class:`RunSQL`, ensure that if you change schema inside here "
"you're either doing it outside the scope of the Django model system (e.g. "
"triggers) or that you use :class:`SeparateDatabaseAndState` to add in "
"operations that will reflect your changes to the model state - otherwise, "
"the versioned ORM and the autodetector will stop working correctly."
msgstr ""
":class:`RunSQL` と同様、もし内部のスキーマを変更する場合は Django のモデル機"
"構のスコープ範囲外 (たとえば triggers など) で行うか、もしくはモデルの状態に"
"変更を反映する処理に :class:`SeparateDatabaseAndState` を追加する事を心がけて"
"ください。そうでなければ、バージョン管理された ORM およびマイグレーションの自"
"動検出機構が正常に動作しなくなってしまいます。"

msgid ""
"By default, ``RunPython`` will run its contents inside a transaction on "
"databases that do not support DDL transactions (for example, MySQL and "
"Oracle). This should be safe, but may cause a crash if you attempt to use "
"the ``schema_editor`` provided on these backends; in this case, pass "
"``atomic=False`` to the ``RunPython`` operation."
msgstr ""
"標準では ``RunPython`` は DDL トランザクションをサポートしないデータベース "
"(たとえば MySQL と Oracle など) 上では通常のトランザクション内で記述された内"
"容の処理を行います。この仕組みは安全ではありますが、これらのデータベースバッ"
"クエンドを利用中に ``schema_editor`` を利用しようとするとクラッシュを引き起こ"
"す場合があります。このような場合は、``RunPython`` に対して ``atomic=False`` "
"を渡してください。"

msgid ""
"On databases that do support DDL transactions (SQLite and PostgreSQL), "
"``RunPython`` operations do not have any transactions automatically added "
"besides the transactions created for each migration. Thus, on PostgreSQL, "
"for example, you should avoid combining schema changes and ``RunPython`` "
"operations in the same migration or you may hit errors like "
"``OperationalError: cannot ALTER TABLE \"mytable\" because it has pending "
"trigger events``."
msgstr ""
"トランザクション中の DDL 使用をサポートしているデータベース(SQLite や "
"PostgreSQL)においては、``RunPython`` は各マイグレーションに対して作成されたト"
"ランザクション以外に自動的にトランザクションを保持しません。そのため、たとえ"
"ば PostgreSQL では、スキーマ変更と ``RunPython`` を同一のマイグレーション内で"
"結合させて用いるのは避けるべきであり、そうしなければ ``OperationalError: "
"cannot ALTER TABLE \"mytable\" because it has pending trigger events`` のよう"
"なエラーに遭遇する可能性があります。"

msgid ""
"If you have a different database and aren't sure if it supports DDL "
"transactions, check the ``django.db.connection.features.can_rollback_ddl`` "
"attribute."
msgstr ""
"もしここまでに挙げられた物と異なるデータベースを利用しておりトランザクション"
"中の DDL 事項をサポートしているか不明な場合、 ``django.db.connection."
"features.can_rollback_ddl`` 属性を確認してください。"

msgid ""
"If the ``RunPython`` operation is part of a :ref:`non-atomic migration <non-"
"atomic-migrations>`, the operation will only be executed in a transaction if "
"``atomic=True`` is passed to the ``RunPython`` operation."
msgstr ""
"もし ``RunPython`` オペレーションが :ref:`非アトミックなマイグレーション<non-"
"atomic-migrations>` の一部である場合、そのオペレーションは ``RunPython`` オペ"
"レーションに対して ``atomic=True`` が渡されて生成されたトランザクション中にお"
"いてのみ実行されます。"

msgid ""
"``RunPython`` does not magically alter the connection of the models for you; "
"any model methods you call will go to the default database unless you give "
"them the current database alias (available from ``schema_editor.connection."
"alias``, where ``schema_editor`` is the second argument to your function)."
msgstr ""
"``RunPython`` はモデルのデータベース接続を魔法のように切り替える事はしません;"
"データベースのエイリアス(作成した関数の第二引数 ``schema_editor`` 内、 "
"``schema_editor.connection.alias`` から利用可能)を指定していないモデルのメ"
"ソッドはすべてデフォルトのデータベースを利用します。"

msgid ""
"Pass the ``RunPython.noop`` method to ``code`` or ``reverse_code`` when you "
"want the operation not to do anything in the given direction. This is "
"especially useful in making the operation reversible."
msgstr ""
"指定された順序で処理を行いたくない場合は ``code`` もしくは ``reverse_code`` "
"に ``RunPython.noop`` メソッドを渡してください。この指定は処理を逆順で行いた"
"い場合に特に有用です。"

msgid "``SeparateDatabaseAndState``"
msgstr "``SeparateDatabaseAndState``"

msgid ""
"A highly specialized operation that lets you mix and match the database "
"(schema-changing) and state (autodetector-powering) aspects of operations."
msgstr ""
"データベース(スキーマ変更)と状態(自動検出機能)という2つの側面を混在させてマッ"
"チさせることができる、高度に専門化されたオペレーションです。"

msgid ""
"It accepts two lists of operations. When asked to apply state, it will use "
"the ``state_operations`` list (this is a generalized version of :class:"
"`RunSQL`'s ``state_operations`` argument). When asked to apply changes to "
"the database, it will use the ``database_operations`` list."
msgstr ""
"これは2つのオペレーションのリストを受け入れます。状態への適用を求められたとき"
"は、 ``state_operations`` リストを使用します(これは :class:`RunSQL` の "
"``state_operations`` 引数の一般化されたバージョンです)。データベースへの変更"
"の適用を求められたときは、 ``database_operations`` リストを使用します。"

msgid ""
"If the actual state of the database and Django's view of the state get out "
"of sync, this can break the migration framework, even leading to data loss. "
"It's worth exercising caution and checking your database and state "
"operations carefully. You can use :djadmin:`sqlmigrate` and :djadmin:"
"`dbshell` to check your database operations. You can use :djadmin:"
"`makemigrations`, especially with :option:`--dry-run<makemigrations --dry-"
"run>`, to check your state operations."
msgstr ""
"データベースの実際の状態と Django の状態のビューが同期しなくなると、マイグ"
"レーションフレームワークが壊れてしまい、データが失われることさえあります。"
"じっくりと、データベースと状態のオペレーションを慎重にチェックすべきです。"
"データベースのオペレーションをチェックするために、 :djadmin:`sqlmigrate` と :"
"djadmin:`dbshell` を使うことができます。状態のオペレーションをチェックするた"
"めに :djadmin:`makemigrations` 、特に :option:`--dry-run<makemigrations --"
"dry-run>` を使うことができます。"

msgid ""
"For an example using ``SeparateDatabaseAndState``, see :ref:`changing-a-"
"manytomanyfield-to-use-a-through-model`."
msgstr ""
"``SeparateDatabaseAndState`` の使用例は、 :ref:`changing-a-manytomanyfield-"
"to-use-a-through-model` を参照してください。"

msgid "Writing your own"
msgstr "独自のオペレーションを書く"

msgid ""
"Operations have a relatively simple API, and they're designed so that you "
"can easily write your own to supplement the built-in Django ones. The basic "
"structure of an ``Operation`` looks like this::"
msgstr ""
"オペレーションは比較的シンプルな API を持っており、Django に内蔵された機能を"
"独自に補助する処理を簡単に記述できるよう設計されています。``Operation`` の基"
"本構造は以下のようなものです::"

msgid ""
"You can take this template and work from it, though we suggest looking at "
"the built-in Django operations in ``django.db.migrations.operations`` - they "
"cover a lot of the example usage of semi-internal aspects of the migration "
"framework like ``ProjectState`` and the patterns used to get historical "
"models, as well as ``ModelState`` and the patterns used to mutate historical "
"models in ``state_forwards()``."
msgstr ""
"上の例もテンプレートとして利用できますが、 ``django.db.migrations."
"operations`` 内の Django 組み込みのオペレーションを参考にすることをお勧めしま"
"す。これらは ``ProjectState`` や履歴上のモデルを取得するために使用されるパ"
"ターン、 ``ModelState`` や ``state_forwards()`` で履歴上のモデルを模倣するた"
"めに使用されるパターンなど、マイグレーションフレームワークの半内部的な側面の"
"使用例を多くカバーしています。"

msgid "Some things to note:"
msgstr "いくつかの注意すべき点"

msgid ""
"You don't need to learn too much about ``ProjectState`` to write migrations; "
"just know that it has an ``apps`` property that gives access to an app "
"registry (which you can then call ``get_model`` on)."
msgstr ""
"マイグレーションを記述するのに ``ProjectState`` について多くを学ぶ必要はあり"
"ません。ただし、それがアプリケーションの登録情報へのアクセスを提供するプロパ"
"ティ ``app`` を持っていることだけは知っていて下さい。それに対して "
"``get_model`` を呼ぶことで取得できます。"

msgid ""
"``database_forwards`` and ``database_backwards`` both get two states passed "
"to them; these represent the difference the ``state_forwards`` method would "
"have applied, but are given to you for convenience and speed reasons."
msgstr ""
"``database_forwards`` と ``database_backwards`` はどちらもパラメータとして 2 "
"つの状態を受け取ります。これらは ``state_forwards`` メソッドが適用するであろ"
"う差分を表していますが、利便性と実行速度のために渡されます。"

msgid ""
"If you want to work with model classes or model instances from the "
"``from_state`` argument in ``database_forwards()`` or "
"``database_backwards()``, you must render model states using the "
"``clear_delayed_apps_cache()`` method to make related models available::"
msgstr ""
"もし ``database_forwards()`` や ``database_backwards()`` の ``from_state`` 引"
"数からモデルクラスやモデルインスタンスを操作したい場合は、 "
"``clear_delayed_apps_cache()`` メソッドを使ってモデルの状態をレンダリングし、"
"リレーション先モデルを利用できるようにする必要があります:"

msgid ""
"``to_state`` in the database_backwards method is the *older* state; that is, "
"the one that will be the current state once the migration has finished "
"reversing."
msgstr ""
"database_backwards メソッドにおける ``to_state`` は *古い* 状態を示します;そ"
"のため、その値はマイグレーションが状態を戻した場合は現在の状態となります。"

msgid ""
"You might see implementations of ``references_model`` on the built-in "
"operations; this is part of the autodetection code and does not matter for "
"custom operations."
msgstr ""
"内蔵されたオペレーションにおいて ``references_model`` が実装されているのを見"
"つけるかもしれません;これは独自のオペレーションのためでなく自動検知機構のコー"
"ドの一部として存在しています。"

msgid ""
"For performance reasons, the :class:`~django.db.models.Field` instances in "
"``ModelState.fields`` are reused across migrations. You must never change "
"the attributes on these instances. If you need to mutate a field in "
"``state_forwards()``, you must remove the old instance from ``ModelState."
"fields`` and add a new instance in its place. The same is true for the :"
"class:`~django.db.models.Manager` instances in ``ModelState.managers``."
msgstr ""
"パフォーマンス上の理由から、``ModelState.fields`` 内の :class:`~django.db."
"models.Field` のインスタンスはマイグレーション間で再利用されます。これらのイ"
"ンスタンスの属性を決して変更してはいけません。``state_forwards()`` 内のフィー"
"ルドを変更したい場合は、``ModelState.fields`` から古いインスタンスを削除して"
"新たなインスタンスと置き換える必要があります。``ModelState.managers`` 内の :"
"class:`~django.db.models.Manager` のインスタンスについても同様です。"

msgid ""
"As an example, let's make an operation that loads PostgreSQL extensions "
"(which contain some of PostgreSQL's more exciting features). Since there's "
"no model state changes, all it does is run one command::"
msgstr ""
"簡単な例として、(PostgreSQL のよりエキサイティングな機能を含んだ) PostgreSQL "
"拡張をロードするオペレーションを作成してみましょう。これはモデルの状態を変え"
"ず、1 つのコマンドを実行します:"

msgid "Model class reference"
msgstr "Model クラスのリファレンス"

msgid ""
"This document covers features of the :class:`~django.db.models.Model` class. "
"For more information about models, see :doc:`the complete list of Model "
"reference guides </ref/models/index>`."
msgstr ""
"このドキュメントでは :class:`~django.db.models.Model` クラスの機能を扱いま"
"す。モデルについての詳細は :doc:`モデルのリファレンスガイドの完全なリスト </"
"ref/models/index>` を参照してください。"

msgid "``DoesNotExist``"
msgstr "``DoesNotExist``"

msgid ""
"This exception is raised by the ORM when an expected object is not found. "
"For example, :meth:`.QuerySet.get` will raise it when no object is found for "
"the given lookups."
msgstr ""
"この例外は、期待したオブジェクトが見つからない場合に ORM が発生させます。例え"
"ば :meth:`.QuerySet.get` で、指定されたルックアップに対応するオブジェクトが見"
"つからない場合に発生します。"

msgid ""
"Django provides a ``DoesNotExist`` exception as an attribute of each model "
"class to identify the class of object that could not be found, allowing you "
"to catch exceptions for a particular model class. The exception is a "
"subclass of :exc:`django.core.exceptions.ObjectDoesNotExist`."
msgstr ""
"Django は各モデルクラスの属性として ``DoesNotExist`` 例外を提供し、見つからな"
"かったオブジェクトのクラスを特定することで、特定のモデルクラスの例外をキャッ"
"チできるようにします。この例外は :exc:`django.core.exceptions."
"ObjectDoesNotExist` のサブクラスです。"

msgid ""
"This exception is raised by :meth:`.QuerySet.get` when multiple objects are "
"found for the given lookups."
msgstr ""
"この例外は、:meth:`.QuerySet.get` によって、指定されたルックアップに対して複"
"数のオブジェクトが見つかった場合に発生します。"

msgid ""
"Django provides a ``MultipleObjectsReturned`` exception as an attribute of "
"each model class to identify the class of object for which multiple objects "
"were found, allowing you to catch exceptions for a particular model class. "
"The exception is a subclass of :exc:`django.core.exceptions."
"MultipleObjectsReturned`."
msgstr ""
"Django は各モデルクラスの属性として ``MultipleObjectsReturned`` 例外を提供"
"し、複数のオブジェクトが見つかったオブジェクトクラスを特定することで、特定の"
"モデルクラスの例外をキャッチできるようにします。この例外は :exc:`django.core."
"exceptions.MultipleObjectsReturned` のサブクラスです。"

msgid "``objects``"
msgstr "``objects``"

msgid ""
"Each non-abstract :class:`~django.db.models.Model` class must have a :class:"
"`~django.db.models.Manager` instance added to it. Django ensures that in "
"your model class you have  at least a default ``Manager`` specified. If you "
"don't add your own ``Manager``, Django will add an attribute ``objects`` "
"containing default :class:`~django.db.models.Manager` instance. If you add "
"your own :class:`~django.db.models.Manager` instance attribute, the default "
"one does not appear. Consider the following example::"
msgstr ""
"抽象クラスでない :class:`~django.db.models.Model` クラスには、 :class:"
"`~django.db.models.Manager` インスタンスが追加されていなければなりません。"
"Django はモデルクラスに少なくともデフォルトの ``Manager`` が指定されているこ"
"とを保証します。独自の ``Manager`` を追加しない場合、Django はデフォルトの :"
"class:`~django.db.models.Manager` インスタンスを含む ``objects`` 属性を追加し"
"ます。独自の :class:`~django.db.models.Manager` インスタンス属性を追加する"
"と、デフォルトのインスタンスは表示されなくなります。次の例を見てください："

msgid ""
"For more details on model managers see :doc:`Managers </topics/db/managers>` "
"and :ref:`Retrieving objects <retrieving-objects>`."
msgstr ""
"モデルマネージャの詳細については :doc:`マネージャ </topics/db/managers>` と :"
"ref:`オブジェクトの取得 <retrieving-objects>` を参照してください。"

msgid "Conditional Expressions"
msgstr "条件式"

msgid ""
"Conditional expressions let you use :keyword:`if` ... :keyword:`elif` ... :"
"keyword:`else` logic within filters, annotations, aggregations, and updates. "
"A conditional expression evaluates a series of conditions for each row of a "
"table and returns the matching result expression. Conditional expressions "
"can also be combined and nested like other :doc:`expressions <expressions>`."
msgstr ""
"条件式を使用すると、フィルタ、アノテーション、集計、更新の中で :keyword:"
"`if` ... :keyword:`elif` ... :keyword:`else` ロジックを使用できます。条件式は"
"テーブルの各行に対して一連の条件を評価し、マッチした結果式を返します。条件式"
"は他の :doc:`式 <expressions>` のように組み合わせたり、入れ子にしたりすること"
"もできます。"

msgid "The conditional expression classes"
msgstr "条件式クラス"

msgid "We'll be using the following model in the subsequent examples::"
msgstr "このページの例では、以下のモデルを使用します："

msgid "``When``"
msgstr "``When``"

msgid ""
"A ``When()`` object is used to encapsulate a condition and its result for "
"use in the conditional expression. Using a ``When()`` object is similar to "
"using the :meth:`~django.db.models.query.QuerySet.filter` method. The "
"condition can be specified using :ref:`field lookups <field-lookups>`, :"
"class:`~django.db.models.Q` objects, or :class:`~django.db.models."
"Expression` objects that have an ``output_field`` that is a :class:`~django."
"db.models.BooleanField`. The result is provided using the ``then`` keyword."
msgstr ""
"``When()`` オブジェクトは、条件式で使用する条件とその結果をカプセル化するため"
"に使用します。``When()`` オブジェクトの使用方法は :meth:`~django.db.models."
"query.QuerySet.filter` メソッドの使用方法と似ています。条件は :ref:`フィルド"
"ルックアップ <field-lookups>` や :class:`~django.db.models.Q` オブジェクト、"
"あるいは :class:`~django.db.models.BooleanField` である ``output_field`` を持"
"つ :class:`~django.db.models.Expression` オブジェクトを使って指定できます。結"
"果は ``then`` キーワードで指定します。"

msgid "Some examples:"
msgstr "例："

msgid "Keep in mind that each of these values can be an expression."
msgstr "これらの値はそれぞれ式になることを覚えておいてください。"

msgid ""
"Since the ``then`` keyword argument is reserved for the result of the "
"``When()``, there is a potential conflict if a :class:`~django.db.models."
"Model` has a field named ``then``. This can be resolved in two ways:"
msgstr ""
"``then`` キーワード引数は ``When()`` の結果のために予約されているので、 :"
"class:`~django.db.models.Model` に ``then`` という名前のフィールドがある場"
"合、衝突する可能性があります。これは 2 つの方法で解決できます："

msgid "``Case``"
msgstr "``Case``"

msgid ""
"A ``Case()`` expression is like the :keyword:`if` ... :keyword:`elif` ... :"
"keyword:`else` statement in ``Python``. Each ``condition`` in the provided "
"``When()`` objects is evaluated in order, until one evaluates to a truthful "
"value. The ``result`` expression from the matching ``When()`` object is "
"returned."
msgstr ""
"``Case()`` 式は ``Python`` の :keyword:`if` ... :keyword:`elif` ... :keyword:"
"`else` 文のようなものです。指定された ``When()`` オブジェクトの各 "
"``condition`` は 1 つが True と評価されるまで順番に評価されます。一致した "
"``When()`` オブジェクトの ``result`` 式が返されます。"

msgid "An example:"
msgstr "例:"

msgid ""
"``Case()`` accepts any number of ``When()`` objects as individual arguments. "
"Other options are provided using keyword arguments. If none of the "
"conditions evaluate to ``TRUE``, then the expression given with the "
"``default`` keyword argument is returned. If a ``default`` argument isn't "
"provided, ``None`` is used."
msgstr ""
"``Case()`` は任意の数の ``When()`` オブジェクトを引数として受け取ることができ"
"ます。その他のオプションはキーワード引数で指定します。どの条件も ``TRUE`` と"
"評価されない場合、キーワード引数 ``default`` で与えられた式が返されます。も"
"し ``default`` 引数が与えられなかった場合、 ``None`` が使用されます。"

msgid ""
"If we wanted to change our previous query to get the discount based on how "
"long the ``Client`` has been with us, we could do so using lookups:"
msgstr ""
"先ほどのクエリを修正して、``Client`` が私たちとどれくらいの期間、関係があるか"
"に基づいて割引を得るには、ルックアップが使用できます："

msgid ""
"Remember that the conditions are evaluated in order, so in the above example "
"we get the correct result even though the second condition matches both Jane "
"Doe and Jack Black. This works just like an :keyword:`if` ... :keyword:"
"`elif` ... :keyword:`else` statement in ``Python``."
msgstr ""
"条件は順番に評価されるので、上の例では2番目の条件がJane DoeとJack Blackの両方"
"にマッチしても正しい結果が得られることを覚えておいてください。これは "
"``Python`` の :keyword:`if` ... :keyword:`elif` ... :keyword:`else` 文と同じ"
"ように動作します。"

msgid ""
"``Case()`` also works in a ``filter()`` clause. For example, to find gold "
"clients that registered more than a month ago and platinum clients that "
"registered more than a year ago:"
msgstr ""
"``case()`` は ``filter()`` 句でも使えます。たとえば、1ヶ月以上前に登録された"
"ゴールドクライアントと1年以上前に登録されたプラチナクライアントを検索する場"
"合："

msgid "Advanced queries"
msgstr "高度なクエリ"

msgid ""
"Conditional expressions can be used in annotations, aggregations, filters, "
"lookups, and updates. They can also be combined and nested with other "
"expressions. This allows you to make powerful conditional queries."
msgstr ""
"条件式は、アノテーション、集計、フィルタ、ルックアップ、および更新で使用でき"
"ます。また、他の式と組み合わせたり、入れ子にしたりすることもできます。これに"
"より、強力な条件クエリを作成できます。"

msgid "Conditional update"
msgstr "条件付きの更新"

msgid ""
"Let's say we want to change the ``account_type`` for our clients to match "
"their registration dates. We can do this using a conditional expression and "
"the :meth:`~django.db.models.query.QuerySet.update` method:"
msgstr ""
"例えば、クライアントの ``account_type`` を登録日とマッチするように変更したい"
"とします。これを行うには、条件式と :meth:`~django.db.models.query.QuerySet."
"update` メソッドを使います："

msgid "Conditional aggregation"
msgstr "条件付きの集計"

msgid ""
"What if we want to find out how many clients there are for each "
"``account_type``? We can use the ``filter`` argument of :ref:`aggregate "
"functions <aggregation-functions>` to achieve this:"
msgstr ""
"それぞれの``account_type``に対応するクライアントの数を知りたい場合はどうすれ"
"ばよいでしょうか？そのためには :ref:`集計関数 <aggregation-functions>` の "
"``filter`` 引数を使います："

msgid ""
"This aggregate produces a query with the SQL 2003 ``FILTER WHERE`` syntax on "
"databases that support it:"
msgstr ""
"この集計は、SQL 2003の ``FILTER WHERE`` 構文をサポートするデータベース上で、"
"クエリを生成します："

msgid "On other databases, this is emulated using a ``CASE`` statement:"
msgstr ""
"他のデータベースでは、これは ``CASE`` ステートメントを使ってエミュレートされ"
"ます："

msgid ""
"The two SQL statements are functionally equivalent but the more explicit "
"``FILTER`` may perform better."
msgstr ""
"この2つのSQL文は機能的には等価ですが、より明示的な ``FILTER`` の方がパフォー"
"マンスが良いかもしれません。"

msgid "Conditional filter"
msgstr "条件フィルタ"

msgid ""
"When a conditional expression returns a boolean value, it is possible to use "
"it directly in filters. This means that it will not be added to the "
"``SELECT`` columns, but you can still use it to filter results:"
msgstr ""
"条件フィルタ条件式が真偽値を返す場合、それを直接フィルタで使用できます。つま"
"り、 ``SELECT`` カラムには追加されませんが、結果のフィルタリングには使用でき"
"ます："

msgid "In SQL terms, that evaluates to:"
msgstr "SQL文では、次のように評価されます:"

msgid "Constraints reference"
msgstr "制約 (Constraint) リファレンス"

msgid ""
"The classes defined in this module create database constraints. They are "
"added in the model :attr:`Meta.constraints <django.db.models.Options."
"constraints>` option."
msgstr ""
"このモジュールで定義されたクラスはデータベース制約を作成します。これらはモデ"
"ルの :attr:`Meta.constraints <django.db.models.Options.constraints>` オプショ"
"ンで追加されます。"

msgid "Referencing built-in constraints"
msgstr "組み込みの制約への参照について"

msgid ""
"Constraints are defined in ``django.db.models.constraints``, but for "
"convenience they're imported into :mod:`django.db.models`. The standard "
"convention is to use ``from django.db import models`` and refer to the "
"constraints as ``models.<Foo>Constraint``."
msgstr ""
"制約は ``django.db.models.constraints`` で定義されていますが、利便性のため"
"に :mod:`django.db.models` にインポートされています。標準的な規約は ``from "
"django.db import models`` を使い、制約を ``models.<Foo>Constraint`` と呼ぶこ"
"とです。"

msgid "Constraints in abstract base classes"
msgstr "抽象基底クラスにおける制約"

msgid ""
"You must always specify a unique name for the constraint. As such, you "
"cannot normally specify a constraint on an abstract base class, since the :"
"attr:`Meta.constraints <django.db.models.Options.constraints>` option is "
"inherited by subclasses, with exactly the same values for the attributes "
"(including ``name``) each time. To work around name collisions, part of the "
"name may contain ``'%(app_label)s'`` and ``'%(class)s'``, which are "
"replaced, respectively, by the lowercased app label and class name of the "
"concrete model. For example ``CheckConstraint(check=Q(age__gte=18), "
"name='%(app_label)s_%(class)s_is_adult')``."
msgstr ""
"制約には常に一意な名前を指定する必要があります。なぜなら、 :attr:`Meta."
"constraints <django.db.models.Options.constraints>` オプションはサブクラスに"
"継承され、属性 (``name`` を含む) には毎回全く同じ値が指定されるからです。名前"
"の衝突を避けるために、名前の一部に ``'%(app_label)s'`` と ``'%(class)s'`` を"
"含めることができます。これらはそれぞれ小文字のアプリラベルと具体的なモデルの"
"クラス名に置き換えられます。例えば ``CheckConstraint(check=Q(age__gte=18), "
"name='%(app_label)s_%(class)s_is_adult')`` のようになります。"

msgid "Validation of Constraints"
msgstr "制約のバリデーション"

msgid ""
"Constraints are checked during the :ref:`model validation <validating-"
"objects>`."
msgstr ""
"制約は :ref:`モデルのバリデーション <validating-objects>` の間にチェックされ"
"ます。"

msgid "Validation of Constraints with ``JSONField``"
msgstr "``JSONField`` の制約のバリデーション"

msgid ""
"Constraints containing :class:`~django.db.models.JSONField` may not raise "
"validation errors as key, index, and path transforms have many database-"
"specific caveats. This :ticket:`may be fully supported later <34059>`."
msgstr ""
":class:`~django.db.models.JSONField` を含む制約は、キー、インデックス、および"
"パストランスフォームが多くのデータベース固有の注意事項を持っているため、バリ"
"デーションエラーを起こさない可能性があります。これは :ticket:`将来的に完全に"
"サポートされる可能性があります <34059>` 。"

msgid ""
"You should always check that there are no log messages, in the ``django.db."
"models`` logger, like *\"Got a database error calling check() on …\"* to "
"confirm it's validated properly."
msgstr ""
"常に ``django.db.models`` のロガーに、 *\"Got a database error calling "
"check() on …\"* のようなログメッセージがないことを確認し、正しく検証されてい"
"ることを確認する必要があります。"

msgid "``BaseConstraint``"
msgstr "``BaseConstraint``"

msgid ""
"Base class for all constraints. Subclasses must implement "
"``constraint_sql()``, ``create_sql()``, ``remove_sql()`` and ``validate()`` "
"methods."
msgstr ""
"すべての制約の基底クラスです。サブクラスは ``constraint_sql()``, "
"``create_sql()``, ``remove_sql()``, ``validate()`` メソッドを実装しなければな"
"りません。"

msgid "Support for passing positional arguments is deprecated."
msgstr "位置引数のサポートは非推奨になりました。"

msgid "All constraints have the following parameters in common:"
msgstr "すべての制約 (constraint) に共通するパラメータは以下の通りです："

msgid ""
"The name of the constraint. You must always specify a unique name for the "
"constraint."
msgstr "制約の名前。制約には常に一意な名前を指定する必要があります。"

msgid ""
"The error message used when ``ValidationError`` is raised during :ref:`model "
"validation <validating-objects>`. Defaults to ``\"Constraint “%(name)s” is "
"violated.\"``."
msgstr ""
":ref:`モデルのバリデーション <validating-objects>` の実行中に "
"``ValidationError`` が発生した場合に表示されるエラーメッセージです。デフォル"
"トは ``\"Constraint \"%(name)s\" is violated.\"`` です。"

msgid "``validate()``"
msgstr "``validate()``"

msgid ""
"Validates that the constraint, defined on ``model``, is respected on the "
"``instance``. This will do a query on the database to ensure that the "
"constraint is respected. If fields in the ``exclude`` list are needed to "
"validate the constraint, the constraint is ignored."
msgstr ""
"モデル ``model`` で定義された制約がインスタンス ``instance`` で守られているか"
"どうかを検証します。これは、制約が守られていることを確認するために、データ"
"ベースに対してクエリを実行します。制約を検証するために ``exclude`` リストの"
"フィールドが必要な場合、制約は無視されます。"

msgid "Raise a ``ValidationError`` if the constraint is violated."
msgstr "制約に違反した場合は ``ValidationError`` を発生させます。"

msgid "This method must be implemented by a subclass."
msgstr "このメソッドはサブクラスで実装する必要があります。"

msgid "``CheckConstraint``"
msgstr "``CheckConstraint``"

msgid "Creates a check constraint in the database."
msgstr "データベースにチェック制約を作成します。"

msgid ""
"A :class:`Q` object or boolean :class:`~django.db.models.Expression` that "
"specifies the check you want the constraint to enforce."
msgstr ""
"適用したい制約をチェックする :class:`Q` オブジェクトまたは真偽値 :class:"
"`~django.db.models.Expression` 。"

msgid ""
"For example, ``CheckConstraint(check=Q(age__gte=18), name='age_gte_18')`` "
"ensures the age field is never less than 18."
msgstr ""
"例えば、``CheckConstraint(check=Q(age__gte=18), name='age_gte_18')`` は年齢"
"フィールドが18歳未満にならないようにします。"

msgid "Expression order"
msgstr "式の順序"

msgid ""
"``Q`` argument order is not necessarily preserved, however the order of "
"``Q`` expressions themselves are preserved. This may be important for "
"databases that preserve check constraint expression order for performance "
"reasons. For example, use the following format if order matters::"
msgstr ""
"``Q`` の引数の順番は必ずしも保持されるわけではありませんが、 ``Q`` 式の順番自"
"体は保持されます。これは、パフォーマンス上の理由からチェック制約式の順序を保"
"持するデータベースにとって、重要なことです。例えば、順序が重要な場合は以下の"
"形式を使用します。"

msgid ""
"Checks with nullable fields on Oracle must include a condition allowing for "
"``NULL`` values in order for :meth:`validate() <BaseConstraint.validate>` to "
"behave the same as check constraints validation. For example, if ``age`` is "
"a nullable field::"
msgstr ""
"OracleでNULL許容フィールドに対するチェックを行う場合、:meth:`validate() "
"<BaseConstraint.validate>` がチェック制約の検証と同様に動作するためには、"
"``NULL`` 値を許容する条件を含める必要があります。例えば、``age`` がNULL許容"
"フィールドの場合、以下のようにします："

msgid "``UniqueConstraint``"
msgstr "``UniqueConstraint``"

msgid "Creates a unique constraint in the database."
msgstr "データベースにユニーク制約（一意性制約）を作成します。"

msgid ""
"Positional argument ``*expressions`` allows creating functional unique "
"constraints on expressions and database functions."
msgstr ""
"位置引数 ``*expressions`` により、式やデータベース関数に対する関数的なユニー"
"ク制約を作成できます。"

msgid ""
"creates a unique constraint on the lowercased value of the ``name`` field in "
"descending order and the ``category`` field in the default ascending order."
msgstr ""
"これは ``name`` フィールドの小文字の値を降順で、``category`` フィールドの値を"
"デフォルトの昇順でユニーク制約を作成します。"

msgid ""
"Functional unique constraints have the same database restrictions as :attr:"
"`Index.expressions`."
msgstr ""
"関数的なユニーク制約は :attr:`Index.expressions` と同じデータベース制約を持ち"
"ます。"

msgid ""
"A list of field names that specifies the unique set of columns you want the "
"constraint to enforce."
msgstr "制約を適用したい一意な列のセットを表すフィールド名のリスト。"

msgid ""
"For example, ``UniqueConstraint(fields=['room', 'date'], "
"name='unique_booking')`` ensures each room can only be booked once for each "
"date."
msgstr ""
"例えば、``UniqueConstraint(fields=['room', 'date'], name='unique_booking')`` "
"は各 room が各 date で一度しか予約できないようにします。"

msgid ""
"A :class:`Q` object that specifies the condition you want the constraint to "
"enforce."
msgstr "制約を適用したい条件を指定する :class:`Q` オブジェクト。"

msgid "ensures that each user only has one draft."
msgstr "これは、各ユーザーが1つの DRAFT しか持たないことを保証します。"

msgid ""
"These conditions have the same database restrictions as :attr:`Index."
"condition`."
msgstr ""
"これらの condition は :attr:`Index.condition` と同じデータベースの制限を持ち"
"ます。"

msgid ""
"Set this parameter to create a deferrable unique constraint. Accepted values "
"are ``Deferrable.DEFERRED`` or ``Deferrable.IMMEDIATE``. For example::"
msgstr ""
"このパラメータを指定すると、遅延可能なユニーク制約を作成できます。使用可能な"
"値は ``Deferrable.DEFERRED`` または ``Deferrable.IMMEDIATE`` です。例えば："

msgid "MySQL, MariaDB, and SQLite."
msgstr "MySQL, MariaDB, SQLite の場合"

msgid ""
"Deferrable unique constraints are ignored on MySQL, MariaDB, and SQLite as "
"neither supports them."
msgstr ""
"MySQL、MariaDB、SQLite のいずれも遅延ユニーク制約をサポートしていないため、遅"
"延ユニーク制約は無視されます。"

msgid ""
"Deferred unique constraints may lead to a `performance penalty <https://www."
"postgresql.org/docs/current/sql-createtable.html#id-1.9.3.85.9.4>`_."
msgstr ""
"遅延ユニーク制約は、`パフォーマンスへのペナルティ <https://www.postgresql."
"org/docs/current/sql-createtable.html#id-1.9.3.85.9.4>`_ を引き起こす可能性が"
"あります。"

msgid ""
"A list or tuple of the names of the fields to be included in the covering "
"unique index as non-key columns. This allows index-only scans to be used for "
"queries that select only included fields (:attr:`~UniqueConstraint.include`) "
"and filter only by unique fields (:attr:`~UniqueConstraint.fields`)."
msgstr ""
"ユニークなカバリングインデックス (covering index) に非キー列として含める"
"フィールド名のリストまたはタプル。これにより、include されたフィールドだけを "
"SELECT するクエリと、 (:attr:`~UniqueConstraint.include`)、ユニークなフィール"
"ドだけでフィルタリングする(:attr:`~UniqueConstraint.fields`) クエリにインデッ"
"クスだけのスキャンを使用できます。"

msgid ""
"will allow filtering on ``room`` and ``date``, also selecting ``full_name``, "
"while fetching data only from the index."
msgstr ""
"この設定では、``room`` と ``date`` によるフィルタリング、``full_name`` の "
"SELECT の際にデータをインデックスからのみ取得します。"

msgid ""
"Unique constraints with non-key columns are ignored for databases besides "
"PostgreSQL."
msgstr ""
"PostgreSQL以外のデータベースでは、非キー列を持つユニーク制約は無視されます。"

msgid ""
"Non-key columns have the same database restrictions as :attr:`Index.include`."
msgstr ""
"非キーカラムは :attr:`Index.include` と同じデータベース制約を持ちます。"

msgid "``opclasses``"
msgstr "``opclasses``"

msgid ""
"The names of the `PostgreSQL operator classes <https://www.postgresql.org/"
"docs/current/indexes-opclass.html>`_ to use for this unique index. If you "
"require a custom operator class, you must provide one for each field in the "
"index."
msgstr ""
"この一意なインデックスに使用する `PostgreSQL operator クラス <https://www."
"postgresql.org/docs/current/indexes-opclass.html>`_ の名前です。カスタム演算"
"子クラスが必要な場合は、インデックスの各フィールドに1つずつ指定しなければなり"
"ません。"

msgid "creates a unique index on ``username`` using ``varchar_pattern_ops``."
msgstr ""
"これは ``username`` に ``varchar_pattern_ops`` を使用する一意なインデックスを"
"作成します。"

msgid "``opclasses`` are ignored for databases besides PostgreSQL."
msgstr "``opclasses`` はPostgreSQL以外のデータベースでは無視されます。"

msgid "``nulls_distinct``"
msgstr "``nulls_distinct``"

msgid ""
"Whether rows containing ``NULL`` values covered by the unique constraint "
"should be considered distinct from each other. The default value is ``None`` "
"which uses the database default which is ``True`` on most backends."
msgstr ""
"ユニーク制約の対象となる ``NULL`` 値を含む行を、互いに異なる行とみなすかどう"
"かを指定します。デフォルト値は ``None`` で、ほとんどのバックエンドで "
"``True`` となるデータベースのデフォルト値を使用します。"

msgid ""
"creates a unique constraint that only allows one row to store a ``NULL`` "
"value in the ``ordering`` column."
msgstr ""
"これは、 ``ordering`` カラムに ``NULL`` 値を格納できるのは1行だけというユニー"
"ク制約を作成します。"

msgid ""
"Unique constraints with ``nulls_distinct`` are ignored for databases besides "
"PostgreSQL 15+."
msgstr ""
"``nulls_distinct`` によるユニーク制約は、PostgreSQL 15+ 以外のデータベースで"
"は無視されます。"

msgid ""
"This code is *not used* for :class:`UniqueConstraint`\\s with :attr:"
"`~UniqueConstraint.fields` and without a :attr:`~UniqueConstraint."
"condition`. Such :class:`~UniqueConstraint`\\s have the same error code as "
"constraints defined with :attr:`.Field.unique` or in :attr:`Meta."
"unique_together <django.db.models.Options.constraints>`."
msgstr ""
"このコードは、:attr:`~UniqueConstraint.fields` を持ち、かつ :attr:"
"`~UniqueConstraint.condition` を持たない :class:`UniqueConstraint` には *使用"
"されません* 。このような :class:`~UniqueConstraint` は、:attr:`.Field."
"unique` や :attr:`Meta.unique_together <django.db.models.Options."
"constraints>` で定義された制約と同じエラーコードを持ちます。"

msgid ""
"This message is *not used* for :class:`UniqueConstraint`\\s with :attr:"
"`~UniqueConstraint.fields` and without a :attr:`~UniqueConstraint."
"condition`. Such :class:`~UniqueConstraint`\\s show the same message as "
"constraints defined with :attr:`.Field.unique` or in :attr:`Meta."
"unique_together <django.db.models.Options.constraints>`."
msgstr ""
"このメッセージは、:attr:`~UniqueConstraint.fields` を持ち、かつ :attr:"
"`~UniqueConstraint.condition` を持たない :class:`UniqueConstraint` には *使用"
"されません* 。このような :class:`~UniqueConstraint` は、:attr:`.Field."
"unique` や :attr:`Meta.unique_together <django.db.models.Options."
"constraints>` で定義された制約と同じメッセージを表示します。"

msgid "Database Functions"
msgstr "データベース関数"

msgid ""
"The classes documented below provide a way for users to use functions "
"provided by the underlying database as annotations, aggregations, or filters "
"in Django. Functions are also :doc:`expressions <expressions>`, so they can "
"be used and combined with other expressions like :ref:`aggregate functions "
"<aggregation-functions>`."
msgstr ""
"以下で説明するクラスは、基盤となるデータベースが提供する関数を、ユーザが "
"Django のアノテーション、集計、フィルタとして使う方法を提供します。関数は :"
"doc:`式 (expression) <expressions>` でもあるので、 :ref:`集計関数 "
"<aggregation-functions>` のように他の式と組み合わせて使うこともできます。"

msgid "We'll be using the following model in examples of each function::"
msgstr "各関数の例では、以下のモデルを使用します："

msgid ""
"We don't usually recommend allowing ``null=True`` for ``CharField`` since "
"this allows the field to have two \"empty values\", but it's important for "
"the ``Coalesce`` example below."
msgstr ""
"通常、``CharField`` に ``null=True`` を許可することはお勧めしません。なぜな"
"ら、これはフィールドに2つの \"空の値 \"を持たせてしまうからです。"

msgid "Comparison and conversion functions"
msgstr "比較および変換関数"

msgid "``Cast``"
msgstr "``Cast``"

msgid ""
"Forces the result type of ``expression`` to be the one from ``output_field``."
msgstr ""
"式 ``expression`` の結果の型を ``output_field`` の型に強制的に変更します。"

msgid "``Coalesce``"
msgstr "``Coalesce``"

msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"first non-null value (note that an empty string is not considered a null "
"value). Each argument must be of a similar type, so mixing text and numbers "
"will result in a database error."
msgstr ""
"少なくとも2つのフィールド名または式のリストを受け取り、最初のNULLでない値を返"
"します（空文字列はNULL値とはみなされないことに注意してください）。各引数は同"
"じような型でなければならないので、テキストと数値が混在するとデータベースエ"
"ラーになります。"

msgid "Usage examples:"
msgstr "使用例："

msgid ""
"A Python value passed to ``Coalesce`` on MySQL may be converted to an "
"incorrect type unless explicitly cast to the correct database type:"
msgstr ""
"MySQL で ``Coalesce`` に渡された Python の値は、明示的に正しいデータベース型"
"にキャストされない限り、不正な型に変換される可能性があります："

msgid "``Collate``"
msgstr "``Collate``"

msgid "Takes an expression and a collation name to query against."
msgstr "クエリに使用する式と照合順序名 (collation name) を指定します。"

msgid "For example, to filter case-insensitively in SQLite:"
msgstr ""
"たとえば、SQLiteで大文字小文字を区別せずにフィルタリングする場合、以下のよう"
"にします："

msgid "It can also be used when ordering, for example with PostgreSQL:"
msgstr "また、PostgreSQLなどでのソートにも使用できます："

msgid "``Greatest``"
msgstr "``Greatest``"

msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"greatest value. Each argument must be of a similar type, so mixing text and "
"numbers will result in a database error."
msgstr ""
"少なくとも2つのフィールド名または式のリストを受け取り、最大値を返します。各引"
"数は同じような型でなければならないので、テキストと数値が混在するとデータベー"
"スエラーになります。"

msgid ""
"``annotated_comment.last_updated`` will be the most recent of ``blog."
"modified`` and ``comment.modified``."
msgstr ""
"``annotated_comment.last_updated`` は ``blog.modified`` と ``comment."
"modified`` のうち最新のものになります。"

msgid ""
"The behavior of ``Greatest`` when one or more expression may be ``null`` "
"varies between databases:"
msgstr ""
"1つ以上の式が ``null`` である場合の ``Greatest`` の動作はデータベースによって"
"異なります："

msgid ""
"PostgreSQL: ``Greatest`` will return the largest non-null expression, or "
"``null`` if all expressions are ``null``."
msgstr ""
"PostgreSQL: ``Greatest`` は、非nullの式の中で最大のものを返します。すべての式"
"が ``null`` の場合は ``null`` を返します。"

msgid ""
"SQLite, Oracle, and MySQL: If any expression is ``null``, ``Greatest`` will "
"return ``null``."
msgstr ""
"SQLite, Oracle, MySQL: いずれかの式が ``null`` である場合、``Greatest`` は "
"``null`` を返します。"

msgid ""
"The PostgreSQL behavior can be emulated using ``Coalesce`` if you know a "
"sensible minimum value to provide as a default."
msgstr ""
"PostgreSQLの動作は、デフォルトとして提供する適切な最小値を知っていれば、 "
"``Coalesce`` を使用してエミュレートできます。"

msgid "``JSONObject``"
msgstr "``JSONObject``"

msgid ""
"Takes a list of key-value pairs and returns a JSON object containing those "
"pairs."
msgstr ""
"キーと値のペアのリストを受け取り、それらのペアを含むJSONオブジェクトを返しま"
"す。"

msgid "``Least``"
msgstr "``Least``"

msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"least value. Each argument must be of a similar type, so mixing text and "
"numbers will result in a database error."
msgstr ""
"少なくとも2つのフィールド名または式のリストを受け取り、最小の値を返します。各"
"引数は同じような型でなければならないので、テキストと数値が混在するとデータ"
"ベースエラーになります。"

msgid ""
"The behavior of ``Least`` when one or more expression may be ``null`` varies "
"between databases:"
msgstr ""
"1つ以上の式が ``null`` である場合の ``Least`` の動作はデータベースによって異"
"なります："

msgid ""
"PostgreSQL: ``Least`` will return the smallest non-null expression, or "
"``null`` if all expressions are ``null``."
msgstr ""
"PostgreSQL: ``Least`` は、非nullの式の中で最小のものを返します。すべての式が "
"``null`` の場合は ``null`` を返します。"

msgid ""
"SQLite, Oracle, and MySQL: If any expression is ``null``, ``Least`` will "
"return ``null``."
msgstr ""
"SQLite, Oracle, MySQL: いずれかの式が ``null`` である場合、 ``Least`` は "
"``null`` を返します。"

msgid ""
"The PostgreSQL behavior can be emulated using ``Coalesce`` if you know a "
"sensible maximum value to provide as a default."
msgstr ""
"PostgreSQLの動作は、デフォルトとして提供する適切な最大値を知っていれば、 "
"``Coalesce`` を使用してエミュレートできます。"

msgid "``NullIf``"
msgstr "``NullIf``"

msgid ""
"Accepts two expressions and returns ``None`` if they are equal, otherwise "
"returns ``expression1``."
msgstr ""
"2つの式を受け取り、等しい場合は ``None`` を返し、そうでない場合は "
"``expression1`` を返します。"

msgid "Caveats on Oracle"
msgstr "Oracle に関する注意事項"

msgid ""
"Due to an :ref:`Oracle convention<oracle-null-empty-strings>`, this function "
"returns the empty string instead of ``None`` when the expressions are of "
"type :class:`~django.db.models.CharField`."
msgstr ""
":ref:`Oracle の慣習 <oracle-null-empty-strings>` により、 :class:`~django.db."
"models.CharField` 型の式の場合、この関数は ``None`` の代わりに空の文字列を返"
"します。"

msgid ""
"Passing ``Value(None)`` to ``expression1`` is prohibited on Oracle since "
"Oracle doesn't accept ``NULL`` as the first argument."
msgstr ""
"Oracle では最初の引数として ``NULL`` を受け付けないため、``expression1`` に "
"``Value(None)`` を渡すことは禁止されています。"

msgid "Date functions"
msgstr "日時関連の関数"

msgid "``Extract``"
msgstr "``Extract``"

msgid "Extracts a component of a date as a number."
msgstr "日時の構成要素を数値として取り出します。"

msgid ""
"Takes an ``expression`` representing a ``DateField``, ``DateTimeField``, "
"``TimeField``, or ``DurationField`` and a ``lookup_name``, and returns the "
"part of the date referenced by ``lookup_name`` as an ``IntegerField``. "
"Django usually uses the databases' extract function, so you may use any "
"``lookup_name`` that your database supports. A ``tzinfo`` subclass, usually "
"provided by :mod:`zoneinfo`, can be passed to extract a value in a specific "
"timezone."
msgstr ""
"``DateField``, ``DateTimeField``, ``TimeField`` または ``DurationField`` を表"
"す ``expression`` と、``lookup_name`` を受け取り、 ``lookup_name`` が参照する"
"日付の部分を ``IntegerField`` として返します。Django は通常データベースの "
"extract 関数を使うので、データベースがサポートしている ``lookup_name`` を使う"
"ことができます。通常 :mod:`zoneinfo` によって提供される ``tzinfo`` サブクラス"
"を渡すと、特定のタイムゾーンの値を抽出できます。"

msgid ""
"Given the datetime ``2015-06-15 23:30:01.000321+00:00``, the built-in "
"``lookup_name``\\s return:"
msgstr ""
"datetime ``2015-06-15 23:30:01.000321+00:00`` が渡されると、組み込みの "
"``lookup_name`` は下記の値を返します："

msgid "\"year\": 2015"
msgstr "\"year\": 2015"

msgid "\"iso_year\": 2015"
msgstr "\"iso_year\": 2015"

msgid "\"quarter\": 2"
msgstr "\"quarter\": 2"

msgid "\"month\": 6"
msgstr "\"month\": 6"

msgid "\"day\": 15"
msgstr "\"day\": 15"

msgid "\"week\": 25"
msgstr "\"week\": 25"

msgid "\"week_day\": 2"
msgstr "\"week_day\": 2"

msgid "\"iso_week_day\": 1"
msgstr "\"iso_week_day\": 1"

msgid "\"hour\": 23"
msgstr "\"hour\": 23"

msgid "\"minute\": 30"
msgstr "\"minute\": 30"

msgid "\"second\": 1"
msgstr "\"second\": 1"

msgid ""
"If a different timezone like ``Australia/Melbourne`` is active in Django, "
"then the datetime is converted to the timezone before the value is "
"extracted. The timezone offset for Melbourne in the example date above is "
"+10:00. The values returned when this timezone is active will be the same as "
"above except for:"
msgstr ""
"``Australia/Melbourne`` のような異なるタイムゾーンが Django で有効な場合、 "
"datetime は値を抽出する前にそのタイムゾーンに変換されます。上の例の日付のメル"
"ボルンのタイムゾーンオフセットは +10:00 です。このタイムゾーンが有効な場合に"
"返される値は、以下を除けば上と同じです："

msgid "\"day\": 16"
msgstr "\"day\": 16"

msgid "\"week_day\": 3"
msgstr "\"week_day\": 3"

msgid "\"iso_week_day\": 2"
msgstr "\"iso_week_day\": 2"

msgid "\"hour\": 9"
msgstr "\"hour\": 9"

msgid "``week_day`` values"
msgstr "``week_day`` の値"

msgid ""
"The ``week_day`` ``lookup_type`` is calculated differently from most "
"databases and from Python's standard functions. This function will return "
"``1`` for Sunday, ``2`` for Monday, through ``7`` for Saturday."
msgstr ""
"``week_day`` ``lookup_type`` は、多くのデータベースや Python の標準関数とは異"
"なる方法で計算されます。この関数は日曜日に ``1``、月曜日に ``2``、土曜日に "
"``7`` を返します。"

msgid "The equivalent calculation in Python is:"
msgstr "Pythonでの等価な計算は以下のようになります："

msgid "``week`` values"
msgstr "``week`` の値"

msgid ""
"The ``week`` ``lookup_type`` is calculated based on `ISO-8601 <https://en."
"wikipedia.org/wiki/ISO-8601>`_, i.e., a week starts on a Monday. The first "
"week of a year is the one that contains the year's first Thursday, i.e. the "
"first week has the majority (four or more) of its days in the year. The "
"value returned is in the range 1 to 52 or 53."
msgstr ""
"``week`` の ``lookup_type`` は `ISO-8601 <https://ja.wikipedia.org/wiki/"
"ISO_8601>`_ に基づいて計算されます。つまり、週は月曜日に始まります。年の最初"
"の週は、その年の最初の木曜日を含む週です。つまり、最初の週はその週の日数の過"
"半数（4日以上）がその年に含まれています。返される値は1から52または53の範囲で"
"す。"

msgid ""
"Each ``lookup_name`` above has a corresponding ``Extract`` subclass (listed "
"below) that should typically be used instead of the more verbose equivalent, "
"e.g. use ``ExtractYear(...)`` rather than ``Extract(..., "
"lookup_name='year')``."
msgstr ""
"各 ``lookup_name`` には、冗長な等価表現の代わりに通常使用すべき ``Extract`` "
"サブクラス（下記）があります。たとえば ``Extract(..., lookup_name='year')`` "
"の代わりに ``ExtractYear(...)`` が使えます。"

msgid "``DateField`` extracts"
msgstr "``DateField`` からの抽出 (extract)"

msgid "Returns the ISO-8601 week-numbering year."
msgstr "ISO-8601 の週番号を持つ年を返します。"

msgid ""
"Returns the ISO-8601 week day with day 1 being Monday and day 7 being Sunday."
msgstr "ISO-8601形式の曜日を返します。1が月曜日で7が日曜日になります。"

msgid ""
"These are logically equivalent to ``Extract('date_field', lookup_name)``. "
"Each class is also a ``Transform`` registered on ``DateField`` and "
"``DateTimeField`` as ``__(lookup_name)``, e.g. ``__year``."
msgstr ""
"これらは論理的には ``Extract('date_field', lookup_name)`` と等価です。各クラ"
"スは ``DateField`` と ``DateTimeField`` に ``__(lookup_name)`` として登録され"
"た ``Transform`` でもあります。たとえば ``__year`` のようなものです。"

msgid ""
"Since ``DateField``\\s don't have a time component, only ``Extract`` "
"subclasses that deal with date-parts can be used with ``DateField``:"
msgstr ""
"``DateField`` は時間要素を持たないので、日付部分を扱う ``Extract`` サブクラス"
"だけが ``DateField`` と一緒に使うことができます："

msgid "``DateTimeField`` extracts"
msgstr "``DateTimeField`` からの抽出 (extract)"

msgid ""
"In addition to the following, all extracts for ``DateField`` listed above "
"may also be used on ``DateTimeField``\\s ."
msgstr ""
"以下に加え、上記の ``DateField`` のすべての抽出操作 (extract) は "
"``DateTimeField`` にも使用できます。"

msgid ""
"These are logically equivalent to ``Extract('datetime_field', "
"lookup_name)``. Each class is also a ``Transform`` registered on "
"``DateTimeField`` as ``__(lookup_name)``, e.g. ``__minute``."
msgstr ""
"これらは論理的には ``Extract('datetime_field', lookup_name)`` と等価です。各"
"クラスは ``DateTimeField`` に ``__(lookup_name)`` として登録された "
"``Transform`` でもあります。たとえば、 ``__minute`` のようなものです。"

msgid "``DateTimeField`` examples:"
msgstr "``DateTimeField`` の例："

msgid ""
"When :setting:`USE_TZ` is ``True`` then datetimes are stored in the database "
"in UTC. If a different timezone is active in Django, the datetime is "
"converted to that timezone before the value is extracted. The example below "
"converts to the Melbourne timezone (UTC +10:00), which changes the day, "
"weekday, and hour values that are returned:"
msgstr ""
":setting:`USE_TZ` が ``True`` の場合、 datetime は UTC でデータベースに保存さ"
"れます。異なるタイムゾーンが Django で有効な場合、 datetime はそのタイムゾー"
"ンに変換されてから値が抽出されます。以下の例では、メルボルンのタイムゾーン "
"(UTC +10:00) に変換しています。これにより、返される日、曜日、時間の値が変わり"
"ます："

msgid ""
"Explicitly passing the timezone to the ``Extract`` function behaves in the "
"same way, and takes priority over an active timezone:"
msgstr ""
"明示的にタイムゾーンを ``Extract`` 関数に渡しても同じように動作し、アクティブ"
"なタイムゾーンよりも優先されます："

msgid "``Now``"
msgstr "``Now``"

msgid ""
"Returns the database server's current date and time when the query is "
"executed, typically using the SQL ``CURRENT_TIMESTAMP``."
msgstr ""
"クエリが実行された時のデータベースサーバの現在の日時を返します。通常は "
"``CURRENT_TIMESTAMP`` という SQL を使用します。"

msgid "PostgreSQL considerations"
msgstr "PostgreSQL の場合の注意事項"

msgid ""
"On PostgreSQL, the SQL ``CURRENT_TIMESTAMP`` returns the time that the "
"current transaction started. Therefore for cross-database compatibility, "
"``Now()`` uses ``STATEMENT_TIMESTAMP`` instead. If you need the transaction "
"timestamp, use :class:`django.contrib.postgres.functions.TransactionNow`."
msgstr ""
"PostgreSQLでは、SQLの ``CURRENT_TIMESTAMP`` は現在のトランザクションが開始し"
"た時刻を返します。そのため、データベース間の互換性を保つために、 ``Now()`` は"
"代わりに ``STATEMENT_TIMESTAMP`` を使用します。トランザクションのタイムスタン"
"プが必要な場合は、 :class:`django.contrib.postgres.functions.TransactionNow` "
"を使用してください。"

msgid ""
"On Oracle, the SQL ``LOCALTIMESTAMP`` is used to avoid issues with casting "
"``CURRENT_TIMESTAMP`` to ``DateTimeField``."
msgstr ""
"Oracle では、``CURRENT_TIMESTAMP`` を ``DateTimeField`` にキャストする際の問"
"題を回避するために ``LOCALTIMESTAMP`` という SQL が使用されます。"

msgid ""
"Support for microsecond precision on MySQL and millisecond precision on "
"SQLite were added."
msgstr "MySQLでマイクロ秒精度、SQLiteでミリ秒精度をサポートしました。"

msgid ""
"In older versions, the SQL ``CURRENT_TIMESTAMP`` was used on Oracle instead "
"of ``LOCALTIMESTAMP``."
msgstr ""
"古いバージョンでは、Oracle上で ``LOCALTIMESTAMP`` の代わりに "
"``CURRENT_TIMESTAMP`` SQL構文が使用されていました。"

msgid "``Trunc``"
msgstr "``Trunc``"

msgid "Truncates a date up to a significant component."
msgstr "日付を重要な要素まで切り捨てます。"

msgid ""
"When you only care if something happened in a particular year, hour, or day, "
"but not the exact second, then ``Trunc`` (and its subclasses) can be useful "
"to filter or aggregate your data. For example, you can use ``Trunc`` to "
"calculate the number of sales per day."
msgstr ""
"特定の年、時間、日に何かが起こったかどうかだけを気にしていて、正確な秒は気に"
"していない場合、``Trunc`` (とそのサブクラス) はデータのフィルタや集計に便利で"
"す。例えば、 ``Trunc`` を使って一日の売上数を計算できます。"

msgid ""
"``Trunc`` takes a single ``expression``, representing a ``DateField``, "
"``TimeField``, or ``DateTimeField``, a ``kind`` representing a date or time "
"part, and an ``output_field`` that's either ``DateTimeField()``, "
"``TimeField()``, or ``DateField()``. It returns a datetime, date, or time "
"depending on ``output_field``, with fields up to ``kind`` set to their "
"minimum value. If ``output_field`` is omitted, it will default to the "
"``output_field`` of ``expression``. A ``tzinfo`` subclass, usually provided "
"by :mod:`zoneinfo`, can be passed to truncate a value in a specific timezone."
msgstr ""
"``Trunc`` は (``DateField``, ``TimeField``, または ``DateTimeField`` を表す) "
"単一の ``expression`` 、日付または時刻の部分を表す ``kind`` 、そして "
"(``DateTimeField()``, ``TimeField()``, または ``DateField()`` のいずれかであ"
"る) ``output_field`` を受け取ります。これは ``output_field`` に応じて日時、日"
"付、または時刻を返し、``kind`` 単位未満のフィールドをその最小値に設定します。"
"``output_field`` が省略された場合、デフォルトで ``expression`` の "
"``output_field`` になります。特定のタイムゾーンで値を切り捨てるために、通常 :"
"mod:`zoneinfo` によって提供される ``tzinfo`` サブクラスを渡すことができます。"

msgid ""
"Given the datetime ``2015-06-15 14:30:50.000321+00:00``, the built-in "
"``kind``\\s return:"
msgstr ""
"datetime ``2015-06-15 14:30:50.000321+00:00`` が渡された場合、組み込みの "
"``kind`` は以下の値を返します："

msgid "\"year\": 2015-01-01 00:00:00+00:00"
msgstr "\"year\": 2015-01-01 00:00:00+00:00"

msgid "\"quarter\": 2015-04-01 00:00:00+00:00"
msgstr "\"quarter\": 2015-04-01 00:00:00+00:00"

msgid "\"month\": 2015-06-01 00:00:00+00:00"
msgstr "\"month\": 2015-06-01 00:00:00+00:00"

msgid "\"week\": 2015-06-15 00:00:00+00:00"
msgstr "\"week\": 2015-06-15 00:00:00+00:00"

msgid "\"day\": 2015-06-15 00:00:00+00:00"
msgstr "\"day\": 2015-06-15 00:00:00+00:00"

msgid "\"hour\": 2015-06-15 14:00:00+00:00"
msgstr "\"hour\": 2015-06-15 14:00:00+00:00"

msgid "\"minute\": 2015-06-15 14:30:00+00:00"
msgstr "\"minute\": 2015-06-15 14:30:00+00:00"

msgid "\"second\": 2015-06-15 14:30:50+00:00"
msgstr "\"second\": 2015-06-15 14:30:50+00:00"

msgid ""
"If a different timezone like ``Australia/Melbourne`` is active in Django, "
"then the datetime is converted to the new timezone before the value is "
"truncated. The timezone offset for Melbourne in the example date above is "
"+10:00. The values returned when this timezone is active will be:"
msgstr ""
"``Australia/Melbourne`` のような異なるタイムゾーンが Django で有効な場合、 "
"datetime は切り捨てられる前に新しいタイムゾーンに変換されます。上の例の日付の"
"メルボルンのタイムゾーンオフセットは +10:00 です。このタイムゾーンが有効な場"
"合に返される値は以下のようになります："

msgid "\"year\": 2015-01-01 00:00:00+11:00"
msgstr "\"year\": 2015-01-01 00:00:00+11:00"

msgid "\"quarter\": 2015-04-01 00:00:00+10:00"
msgstr "\"quarter\": 2015-04-01 00:00:00+10:00"

msgid "\"month\": 2015-06-01 00:00:00+10:00"
msgstr "\"month\": 2015-06-01 00:00:00+10:00"

msgid "\"week\": 2015-06-16 00:00:00+10:00"
msgstr "\"week\": 2015-06-16 00:00:00+10:00"

msgid "\"day\": 2015-06-16 00:00:00+10:00"
msgstr "\"day\": 2015-06-16 00:00:00+10:00"

msgid "\"hour\": 2015-06-16 00:00:00+10:00"
msgstr "\"hour\": 2015-06-16 00:00:00+10:00"

msgid "\"minute\": 2015-06-16 00:30:00+10:00"
msgstr "\"minute\": 2015-06-16 00:30:00+10:00"

msgid "\"second\": 2015-06-16 00:30:50+10:00"
msgstr "\"second\": 2015-06-16 00:30:50+10:00"

msgid ""
"The year has an offset of +11:00 because the result transitioned into "
"daylight saving time."
msgstr "この年はサマータイムに移行したため、+11:00のオフセットがあります。"

msgid ""
"Each ``kind`` above has a corresponding ``Trunc`` subclass (listed below) "
"that should typically be used instead of the more verbose equivalent, e.g. "
"use ``TruncYear(...)`` rather than ``Trunc(..., kind='year')``."
msgstr ""
"各 ``kind`` には、冗長な等価表現の代わりに通常使用すべき ``Trunc`` サブクラス"
"（下記）があります。たとえば ``Trunc(..., kind='year')`` の代わりに "
"``TruncYear(...)`` が使えます。"

msgid ""
"The subclasses are all defined as transforms, but they aren't registered "
"with any fields, because the lookup names are already reserved by the "
"``Extract`` subclasses."
msgstr ""
"サブクラスはすべてトランスフォームとして定義されていますが、ルックアップ名は "
"``Extract`` サブクラスによってすでに予約されているため、フィールドは登録され"
"ていません。"

msgid "``DateField`` truncation"
msgstr "``DateField`` の切り捨て"

msgid "Truncates to midnight on the Monday of the week."
msgstr "その週の月曜日の午前0時に切り捨てます。"

msgid ""
"These are logically equivalent to ``Trunc('date_field', kind)``. They "
"truncate all parts of the date up to ``kind`` which allows grouping or "
"filtering dates with less precision. ``expression`` can have an "
"``output_field`` of either ``DateField`` or ``DateTimeField``."
msgstr ""
"これらは論理的には ``Trunc('date_field', kind)`` と等価です。これらは "
"``kind`` 単位未満の日付のすべての部分を切り捨て、大ざっぱな日付のグループ化や"
"フィルタリングに使用できます。 ``expression`` には ``DateField`` または "
"``DateTimeField`` の ``output_field`` を指定できます。"

msgid ""
"Since ``DateField``\\s don't have a time component, only ``Trunc`` "
"subclasses that deal with date-parts can be used with ``DateField``:"
msgstr ""
"``DateField`` は時間要素を持たないので、日付部分を扱う ``Trunc`` サブクラスだ"
"けが ``DateField`` と一緒に使用できます："

msgid "``DateTimeField`` truncation"
msgstr "``DateTimeField`` の切り捨て"

msgid ""
"``TruncDate`` casts ``expression`` to a date rather than using the built-in "
"SQL truncate function. It's also registered as a transform on  "
"``DateTimeField`` as ``__date``."
msgstr ""
"``TruncDate`` は、組み込みの SQL の切り捨て関数を使わずに、 ``expression`` を"
"日付にキャストします。また、 ``DateTimeField`` のトランスフォームとして "
"``__date`` が登録されています。"

msgid ""
"``TruncTime`` casts ``expression`` to a time rather than using the built-in "
"SQL truncate function. It's also registered as a transform on "
"``DateTimeField`` as ``__time``."
msgstr ""
"``TruncTime`` は、組み込み SQL の切り捨て関数を使わずに、 ``expression`` を時"
"刻にキャストします。また、 ``DateTimeField`` のトランスフォームとして "
"``__time`` が登録されています。"

msgid ""
"These are logically equivalent to ``Trunc('datetime_field', kind)``. They "
"truncate all parts of the date up to ``kind`` and allow grouping or "
"filtering datetimes with less precision. ``expression`` must have an "
"``output_field`` of ``DateTimeField``."
msgstr ""
"これらは論理的には ``Trunc('datetime_field', kind)`` と等価です。これらは "
"``kind`` 単位未満の日時のすべての部分を切り捨て、大ざっぱな datetime のグルー"
"プ化やフィルタリングができます。 ``expression`` は ``output_field`` が "
"``DateTimeField`` である必要があります。"

msgid "``TimeField`` truncation"
msgstr "``TimeField`` の切り捨て"

msgid ""
"These are logically equivalent to ``Trunc('time_field', kind)``. They "
"truncate all parts of the time up to ``kind`` which allows grouping or "
"filtering times with less precision. ``expression`` can have an "
"``output_field`` of either ``TimeField`` or ``DateTimeField``."
msgstr ""
"これらは論理的には ``Trunc('time_field', kind)`` と等価です。これらは "
"``kind`` 単位未満の時刻をすべて切り捨てるので、大ざっぱな時刻のグループ化や"
"フィルタリングに使用できます。 ``expression`` は ``output_field`` に "
"``TimeField`` または ``DateTimeField`` を指定できます。"

msgid ""
"Since ``TimeField``\\s don't have a date component, only ``Trunc`` "
"subclasses that deal with time-parts can be used with ``TimeField``:"
msgstr ""
"``TimeField`` は日付コンポーネントを持たないので、時間部分を扱う ``Trunc`` サ"
"ブクラスだけが ``TimeField`` と一緒に使用できます："

msgid "Math Functions"
msgstr "数学関数"

msgid "We'll be using the following model in math function examples::"
msgstr "数学関数の例では、以下のモデルを使用します："

msgid "``Abs``"
msgstr "``Abs``"

msgid "Returns the absolute value of a numeric field or expression."
msgstr "数値フィールドまたは式の、絶対値を返します。"

msgid "It can also be registered as a transform. For example:"
msgstr "トランスフォームとして登録することもできます。たとえば："

msgid "``ACos``"
msgstr "``ACos``"

msgid ""
"Returns the arccosine of a numeric field or expression. The expression value "
"must be within the range -1 to 1."
msgstr ""
"数値フィールドまたは式の、逆余弦（アークコサイン）を返します。式の値は -1 か"
"ら 1 の範囲内でなければなりません。"

msgid "``ASin``"
msgstr "``ASin``"

msgid ""
"Returns the arcsine of a numeric field or expression. The expression value "
"must be in the range -1 to 1."
msgstr ""
"数値フィールドまたは式の、逆正弦（アークサイン）を返します。式の値は -1 から "
"1 の範囲でなければなりません。"

msgid "``ATan``"
msgstr "``ATan``"

msgid "Returns the arctangent of a numeric field or expression."
msgstr "数値フィールドまたは式の逆正接（アークタンジェント）を返します。"

msgid "``ATan2``"
msgstr "``ATan2``"

msgid "Returns the arctangent of ``expression1 / expression2``."
msgstr ""
"``expression1 / expression2`` の逆正接（アークタンジェント）を返します。"

msgid "``Ceil``"
msgstr "``Ceil``"

msgid ""
"Returns the smallest integer greater than or equal to a numeric field or "
"expression."
msgstr "数値フィールドまたは式の値以上の最小の整数を返します。"

msgid "``Cos``"
msgstr "``Cos``"

msgid "Returns the cosine  of a numeric field or expression."
msgstr "数値フィールドまたは式の、余弦（コサイン）を返します。"

msgid "``Cot``"
msgstr "``Cot``"

msgid "Returns the cotangent of a numeric field or expression."
msgstr "数値フィールドまたは式の、余接（コタンジェント）を返します。"

msgid "``Degrees``"
msgstr "``Degrees``"

msgid "Converts a numeric field or expression from radians to degrees."
msgstr "数値フィールドまたは式を、ラジアンから度へ変換します。"

msgid "``Exp``"
msgstr "``Exp``"

msgid ""
"Returns the value of ``e`` (the natural logarithm base) raised to the power "
"of a numeric field or expression."
msgstr ""
"``e`` (自然対数の底) を数値フィールドまたは式の値でべき乗した値を返します。"

msgid "``Floor``"
msgstr "``Floor``"

msgid ""
"Returns the largest integer value not greater than a numeric field or "
"expression."
msgstr "数値フィールドまたは式の値未満の最大の整数値を返します。"

msgid "``Ln``"
msgstr "``Ln``"

msgid "Returns the natural logarithm a numeric field or expression."
msgstr "数値フィールドまたは式の、自然対数を返します。"

msgid "``Log``"
msgstr "``Log``"

msgid ""
"Accepts two numeric fields or expressions and returns the logarithm of the "
"second to base of the first."
msgstr ""
"2つの数値フィールドまたは式を受け取り、最初の値を底とする2番目の値の対数を返"
"します。"

msgid "``Mod``"
msgstr "``Mod``"

msgid ""
"Accepts two numeric fields or expressions and returns the remainder of the "
"first divided by the second (modulo operation)."
msgstr ""
"2つの数値フィールドまたは式を受け取り、1つ目を2つ目で割った余りを返します（モ"
"ジュロ演算）。"

msgid "``Pi``"
msgstr "``Pi``"

msgid "Returns the value of the mathematical constant ``π``."
msgstr "数学定数 ``π`` の値を返します。"

msgid "``Power``"
msgstr "``Power``"

msgid ""
"Accepts two numeric fields or expressions and returns the value of the first "
"raised to the power of the second."
msgstr ""
"2つの数値フィールドまたは式を受け取り、1番目の値を2番目の値のべき乗にした値を"
"返します。"

msgid "``Radians``"
msgstr "``Radians``"

msgid "Converts a numeric field or expression from degrees to radians."
msgstr "数値フィールドまたは式を、度からラジアンに変換します。"

msgid "``Random``"
msgstr "``Random``"

msgid "Returns a random value in the range ``0.0 ≤ x < 1.0``."
msgstr "``0.0 ≤ x < 1.0`` の範囲のランダムな値を返します。"

msgid "``Round``"
msgstr "``Round``"

msgid ""
"Rounds a numeric field or expression to ``precision`` (must be an integer) "
"decimal places. By default, it rounds to the nearest integer. Whether half "
"values are rounded up or down depends on the database."
msgstr ""
"数値フィールドまたは式を ``precision`` (整数でなければなりません) 小数点以下"
"の桁数に丸めます。デフォルトでは、最も近い整数に丸められます。半分の値を切り"
"上げるか切り下げるかはデータベースによって異なります。"

msgid "``Sign``"
msgstr "``Sign``"

msgid "Returns the sign (-1, 0, 1) of a numeric field or expression."
msgstr "数値フィールドまたは式の符号 (-1, 0, 1) を返します。"

msgid "``Sin``"
msgstr "``Sin``"

msgid "Returns the sine of a numeric field or expression."
msgstr "数値フィールドまたは式の、正弦（サイン）を返します。"

msgid "``Sqrt``"
msgstr "``Sqrt``"

msgid "Returns the square root of a nonnegative numeric field or expression."
msgstr "非負の数値フィールドまたは式の、平方根を返します。"

msgid "``Tan``"
msgstr "``Tan``"

msgid "Returns the tangent of a numeric field or expression."
msgstr "数値フィールドまたは式の、正接（タンジェント）を返します。"

msgid "Text functions"
msgstr "テキスト関数"

msgid "``Chr``"
msgstr "``Chr``"

msgid ""
"Accepts a numeric field or expression and returns the text representation of "
"the expression as a single character. It works the same as Python's :func:"
"`chr` function."
msgstr ""
"数値フィールドまたは式を受け取り、その式のテキスト表現を1文字として返します。"
"Python の :func:`chr` 関数と同じように動作します。"

msgid ""
"Like :class:`Length`, it can be registered as a transform on "
"``IntegerField``. The default lookup name is ``chr``."
msgstr ""
":class:`Length` と同様に、 ``IntegerField`` のトランスフォームとして登録でき"
"ます。デフォルトのルックアップ名は ``chr`` です。"

msgid "``Concat``"
msgstr "``Concat``"

msgid ""
"Accepts a list of at least two text fields or expressions and returns the "
"concatenated text. Each argument must be of a text or char type. If you want "
"to concatenate a ``TextField()`` with a ``CharField()``, then be sure to "
"tell Django that the ``output_field`` should be a ``TextField()``. "
"Specifying an ``output_field`` is also required when concatenating a "
"``Value`` as in the example below."
msgstr ""
"少なくとも2つのテキストフィールドまたは式のリストを受け取り、連結したテキスト"
"を返します。各引数は text 型か char 型でなければなりません。もし "
"``TextField()`` と ``CharField()`` を連結したい場合は、必ず Django に "
"``output_field`` が ``TextField()`` であることを伝えてください。以下の例のよ"
"うに ``Value`` を連結する場合にも ``output_field`` を指定する必要があります。"

msgid ""
"This function will never have a null result. On backends where a null "
"argument results in the entire expression being null, Django will ensure "
"that each null part is converted to an empty string first."
msgstr ""
"この関数は決して null を返しません。null 引数があると式全体が null になるよう"
"なバックエンドでは、 Django は各 null 部分を最初に空文字列に変換にします。"

msgid "``Left``"
msgstr "``Left``"

msgid ""
"Returns the first ``length`` characters of the given text field or "
"expression."
msgstr ""
"テキストフィールドまたは式の、最初から ``length`` で指定した文字数までを返し"
"ます。"

msgid ""
"Accepts a single text field or expression and returns the number of "
"characters the value has. If the expression is null, then the length will "
"also be null."
msgstr ""
"単一のテキストフィールドまたは式を受け取り、その値が持つ文字数を返します。式"
"が null の場合は、長さも null になります。"

msgid "``Lower``"
msgstr "``Lower``"

msgid ""
"Accepts a single text field or expression and returns the lowercase "
"representation."
msgstr "単一のテキストフィールドまたは式を受け取り、小文字の表現を返します。"

msgid ""
"It can also be registered as a transform as described in :class:`Length`."
msgstr ""
":class:`Length` と同様に、トランスフォームとして登録することもできます。"

msgid "``LPad``"
msgstr "``LPad``"

msgid ""
"Returns the value of the given text field or expression padded on the left "
"side with ``fill_text`` so that the resulting value is ``length`` characters "
"long. The default ``fill_text`` is a space."
msgstr ""
"指定されたテキストフィールドまたは式の値の左側を ``fill_text`` でパディング"
"し、 ``length`` 文字の長さになるように値を返します。デフォルトの "
"``fill_text`` はスペースです。"

msgid "``LTrim``"
msgstr "``LTrim``"

msgid ""
"Similar to :class:`~django.db.models.functions.Trim`, but removes only "
"leading spaces."
msgstr ""
":class:`~django.db.models.functions.Trim` と似ていますが、先頭の空白だけを取"
"り除きます。"

msgid "``MD5``"
msgstr "``MD5``"

msgid ""
"Accepts a single text field or expression and returns the MD5 hash of the "
"string."
msgstr ""
"単一のテキストフィールドまたは式を受け取り、その文字列の MD5 ハッシュを返しま"
"す。"

msgid "``Ord``"
msgstr "``Ord``"

msgid ""
"Accepts a single text field or expression and returns the Unicode code point "
"value for the first character of that expression. It works similar to "
"Python's :func:`ord` function, but an exception isn't raised if the "
"expression is more than one character long."
msgstr ""
"単一のテキストフィールドまたは式を受け取り、その式の最初の文字の Unicode コー"
"ドポイント値を返します。Python の :func:`ord` 関数と似たような動作をします"
"が、式が1文字より長くても例外を発生させません。"

msgid ""
"It can also be registered as a transform as described in :class:`Length`. "
"The default lookup name is ``ord``."
msgstr ""
":class:`Length` と同様に、トランスフォームとして登録することもできます。デ"
"フォルトのルックアップ名は ``ord`` です。"

msgid "``Repeat``"
msgstr "``Repeat``"

msgid ""
"Returns the value of the given text field or expression repeated ``number`` "
"times."
msgstr "テキストフィールドまたは式を ``number`` 回繰り返した値を返します。"

msgid "``Replace``"
msgstr "``Replace``"

msgid ""
"Replaces all occurrences of ``text`` with ``replacement`` in ``expression``. "
"The default replacement text is the empty string. The arguments to the "
"function are case-sensitive."
msgstr ""
"``expression`` 内で ``text`` を ``replacement`` で置き換えます。デフォルトの"
"置換テキストは空文字列です。関数の引数は大文字小文字を区別します。"

msgid ""
"Accepts a single text field or expression and returns the characters of that "
"expression in reverse order."
msgstr ""
"単一のテキストフィールドまたは式を受け取り、その式の文字を逆順に返します。"

msgid ""
"It can also be registered as a transform as described in :class:`Length`. "
"The default lookup name is ``reverse``."
msgstr ""
":class:`Length` と同様に、トランスフォームとして登録することもできます。デ"
"フォルトのルックアップ名は ``reverse`` です。"

msgid "``Right``"
msgstr "``Right``"

msgid ""
"Returns the last ``length`` characters of the given text field or expression."
msgstr ""
"テキストフィールドまたは式の最後から ``length`` で指定した文字数分を返しま"
"す。"

msgid "``RPad``"
msgstr "``RPad``"

msgid ""
"Similar to :class:`~django.db.models.functions.LPad`, but pads on the right "
"side."
msgstr ""
":class:`~django.db.models.functions.LPad` と似ていますが、右側にパディングを"
"行います。"

msgid "``RTrim``"
msgstr "``RTrim``"

msgid ""
"Similar to :class:`~django.db.models.functions.Trim`, but removes only "
"trailing spaces."
msgstr ""
":class:`~django.db.models.functions.Trim` と似ていますが、末尾の空白だけを削"
"除します。"

msgid "``SHA1``, ``SHA224``, ``SHA256``, ``SHA384``, and ``SHA512``"
msgstr "``SHA1``, ``SHA224``, ``SHA256``, ``SHA384``, ``SHA512``"

msgid ""
"Accepts a single text field or expression and returns the particular hash of "
"the string."
msgstr ""
"単一のテキストフィールドまたは式を受け取り、文字列の特定のハッシュを返しま"
"す。"

msgid ""
"They can also be registered as transforms as described in :class:`Length`."
msgstr ":class:`Length` と同様にトランスフォームとして登録することもできます。"

msgid ""
"The `pgcrypto extension <https://www.postgresql.org/docs/current/ pgcrypto."
"html>`_ must be installed. You can use the :class:`~django.contrib.postgres."
"operations.CryptoExtension` migration operation to install it."
msgstr ""
"`pgcrypto extension <https://www.postgresql.org/docs/current/ pgcrypto."
"html>`_ をインストールする必要があります。 :class:`~django.contrib.postgres."
"operations.CryptoExtension` マイグレーションオペレーションを使ってインストー"
"ルできます。"

msgid "Oracle doesn't support the ``SHA224`` function."
msgstr "Oracle は ``SHA224`` 関数をサポートしていません。"

msgid "``StrIndex``"
msgstr "``StrIndex``"

msgid ""
"Returns a positive integer corresponding to the 1-indexed position of the "
"first occurrence of ``substring`` inside ``string``, or 0 if ``substring`` "
"is not found."
msgstr ""
"``substring`` が ``string`` 内で最初に出現する1から始まる位置に対応する正の整"
"数を返します。もし ``substring`` が見つからない場合は0を返します。"

msgid ""
"In MySQL, a database table's :ref:`collation<mysql-collation>` determines "
"whether string comparisons (such as the ``expression`` and ``substring`` of "
"this function) are case-sensitive. Comparisons are case-insensitive by "
"default."
msgstr ""
"MySQL では、データベーステーブルの :ref:`照合順序 (collation) <mysql-"
"collation>` によって、文字列（この関数の ``expression`` や ``substring`` な"
"ど）の比較が大文字小文字を区別するかどうかが決まります。デフォルトでは大文字"
"と小文字は区別されません。"

msgid "``Substr``"
msgstr "``Substr``"

msgid ""
"Returns a substring of length ``length`` from the field or expression "
"starting at position ``pos``. The position is 1-indexed, so the position "
"must be greater than 0. If ``length`` is ``None``, then the rest of the "
"string will be returned."
msgstr ""
"フィールドまたは式から、位置 ``pos`` から始まる長さ ``length`` の部分文字列を"
"返します。位置は1から始まるインデックスであるため、位置は0より大きくなければ"
"なりません。もし ``length`` が ``None`` であれば、文字列の残りの部分が返され"
"ます。"

msgid "``Trim``"
msgstr "``Trim``"

msgid ""
"Returns the value of the given text field or expression with leading and "
"trailing spaces removed."
msgstr "テキストフィールドまたは式の値を、先頭と末尾の空白を除去して返します。"

msgid "``Upper``"
msgstr "``Upper``"

msgid ""
"Accepts a single text field or expression and returns the uppercase "
"representation."
msgstr "単一のテキストフィールドまたは式を受け取り、大文字の表現を返します。"

msgid "Window functions"
msgstr "ウィンドウ関数"

msgid ""
"There are a number of functions to use in a :class:`~django.db.models."
"expressions.Window` expression for computing the rank of elements or the :"
"class:`Ntile` of some rows."
msgstr ""
":class:`~django.db.models.expressions.Window` 式において、要素の順位や行の :"
"class:`Ntile` を計算するために使用できる関数がいくつかあります。"

msgid "``CumeDist``"
msgstr "``CumeDist``"

msgid ""
"Calculates the cumulative distribution of a value within a window or "
"partition. The cumulative distribution is defined as the number of rows "
"preceding or peered with the current row divided by the total number of rows "
"in the frame."
msgstr ""
"ウィンドウまたはパーティション内の値の累積分布を計算します。累積分布は、現在"
"の行の前の行または前の行の数をフレーム内の行の総数で割ったものとして定義され"
"ます。"

msgid "``DenseRank``"
msgstr "``DenseRank``"

msgid "Equivalent to :class:`Rank` but does not have gaps."
msgstr ":class:`Rank` と等価ですが、ギャップを持ちません。"

msgid "``FirstValue``"
msgstr "``FirstValue``"

msgid ""
"Returns the value evaluated at the row that's the first row of the window "
"frame, or ``None`` if no such value exists."
msgstr ""
"ウィンドウフレームの最初の行で評価された値を返します。そのような値が存在しな"
"い場合は ``None`` を返します。"

msgid "``Lag``"
msgstr "``Lag``"

msgid ""
"Calculates the value offset by ``offset``, and if no row exists there, "
"returns ``default``."
msgstr ""
"``offset`` でオフセットされた値を計算し、そこに行が存在しない場合は "
"``default`` を返します。"

msgid ""
"``default`` must have the same type as the ``expression``, however, this is "
"only validated by the database and not in Python."
msgstr ""
"``default`` は ``expression`` と同じ型でなければなりませんが、これはデータ"
"ベースでだけ検証され、Python では検証されません。"

msgid "MariaDB and ``default``"
msgstr "MariaDB と ``default``"

msgid ""
"MariaDB `doesn't support <https://jira.mariadb.org/browse/MDEV-12981>`_ the "
"``default`` parameter."
msgstr ""
"MariaDB は ``default`` パラメータを `サポートしていません <https://jira."
"mariadb.org/browse/MDEV-12981>`_ 。"

msgid "``LastValue``"
msgstr "``LastValue``"

msgid ""
"Comparable to :class:`FirstValue`, it calculates the last value in a given "
"frame clause."
msgstr ""
":class:`FirstValue` と同様に、与えられたフレーム句の最後の値を計算します。"

msgid "``Lead``"
msgstr "``Lead``"

msgid ""
"Calculates the leading value in a given :ref:`frame <window-frames>`. Both "
"``offset`` and ``default`` are evaluated with respect to the current row."
msgstr ""
"与えられた :ref:`フレーム <window-frames>` の先頭の値を計算します。 "
"``offset`` と ``default`` は現在の行を基準として評価されます。"

msgid "``NthValue``"
msgstr "``NthValue``"

msgid ""
"Computes the row relative to the offset ``nth`` (must be a positive value) "
"within the window. Returns ``None`` if no row exists."
msgstr ""
"ウィンドウ内のオフセット ``nth`` (正の値である必要があります) からの相対行を"
"計算します。行が存在しない場合は ``None`` を返します。"

msgid ""
"Some databases may handle a nonexistent nth-value differently. For example, "
"Oracle returns an empty string rather than ``None`` for character-based "
"expressions. Django doesn't do any conversions in these cases."
msgstr ""
"データベースによっては、存在しない n 番目の値の扱いが異なる場合があります。例"
"えば、 Oracle は文字ベースの式の場合、 ``None`` ではなく空文字列を返します。"
"Django はこのような場合、変換を行いません。"

msgid "``Ntile``"
msgstr "``Ntile``"

msgid ""
"Calculates a partition for each of the rows in the frame clause, "
"distributing numbers as evenly as possible between 1 and ``num_buckets``. If "
"the rows don't divide evenly into a number of buckets, one or more buckets "
"will be represented more frequently."
msgstr ""
"フレーム句の各行に対してパーティションを計算し、1から ``num_buckets`` までの"
"間で可能な限り均等に番号を割り振ります。行がいくつかのバケットに均等に分割さ"
"れない場合、1つ以上のバケットがより頻繁に表されます。"

msgid "``PercentRank``"
msgstr "``PercentRank``"

msgid ""
"Computes the relative rank of the rows in the frame clause. This computation "
"is equivalent to evaluating:"
msgstr "フレーム句の行の相対順位を計算します。この計算は評価と等価です："

msgid ""
"The following table explains the calculation for the relative rank of a row:"
msgstr "以下の表は、行の相対順位の計算について説明したものです："

msgid "Row #"
msgstr "行 No."

msgid "Rank"
msgstr "順位"

msgid "Calculation"
msgstr "計算"

msgid "Relative Rank"
msgstr "相対順位"

msgid "15"
msgstr "15"

msgid "(1-1)/(7-1)"
msgstr "(1-1)/(7-1)"

msgid "0.0000"
msgstr "0.0000"

msgid "(2-1)/(7-1)"
msgstr "(2-1)/(7-1)"

msgid "0.1666"
msgstr "0.1666"

msgid "(5-1)/(7-1)"
msgstr "(5-1)/(7-1)"

msgid "0.6666"
msgstr "0.6666"

msgid "(7-1)/(7-1)"
msgstr "(7-1)/(7-1)"

msgid "1.0000"
msgstr "1.0000"

msgid "``Rank``"
msgstr "``Rank``"

msgid ""
"Comparable to :class:`RowNumber`, this function ranks rows in the window. "
"The computed rank contains gaps. Use :class:`DenseRank` to compute rank "
"without gaps."
msgstr ""
":class:`RowNumber` と同様に、この関数はウィンドウ内の行をランク付けします。計"
"算された順位には隙間が生じることがあります。隙間のない順位を計算するには :"
"class:`DenseRank` を使用します。"

msgid "``RowNumber``"
msgstr "``RowNumber``"

msgid ""
"Computes the row number according to the ordering of either the frame clause "
"or the ordering of the whole query if there is no partitioning of the :ref:"
"`window frame <window-frames>`."
msgstr ""
":ref:`ウィンドウフレーム <window-frames>` のパーティショニングがない場合、フ"
"レーム句のソート、またはクエリ全体のソート順に従って行番号を計算します。"

msgid "Query Expressions"
msgstr "クエリ式 (Query Expression)"

msgid ""
"Query expressions describe a value or a computation that can be used as part "
"of an update, create, filter, order by, annotation, or aggregate. When an "
"expression outputs a boolean value, it may be used directly in filters. "
"There are a number of built-in expressions (documented below) that can be "
"used to help you write queries. Expressions can be combined, or in some "
"cases nested, to form more complex computations."
msgstr ""
"クエリ式 (query expression) は、update、create、filter、order by、"
"annotation、またはaggregateの一部として使用できる値または計算を記述します。式"
"が真偽値を出力する場合、フィルタで直接使用できます。クエリの記述に使用できる"
"組み込みの式 (expression) は多数あります (以下で説明します)。式を組み合わせた"
"り、場合によっては入れ子にしてより複雑な計算を行うこともできます。"

msgid "Supported arithmetic"
msgstr "サポートされている算術演算"

msgid ""
"Django supports negation, addition, subtraction, multiplication, division, "
"modulo arithmetic, and the power operator on query expressions, using Python "
"constants, variables, and even other expressions."
msgstr ""
"Django は Python の定数や変数、そして他の式を使って、クエリ式での否定、 加"
"算、減算、乗算、除算、モジュロ演算、そしてべき乗演算をサポートします。"

msgid "Output field"
msgstr "出力フィールド (``output_field``)"

msgid ""
"Many of the expressions documented in this section support an optional "
"``output_field`` parameter. If given, Django will load the value into that "
"field after retrieving it from the database."
msgstr ""
"このセクションで説明する式の多くは、オプションの ``output_field`` パラメータ"
"をサポートしています。指定された場合、 Django はデータベースから値を取得した"
"後、そのフィールドに値を読み込みます。"

msgid ""
"``output_field`` takes a model field instance, like ``IntegerField()`` or "
"``BooleanField()``. Usually, the field doesn't need any arguments, like "
"``max_length``, since field arguments relate to data validation which will "
"not be performed on the expression's output value."
msgstr ""
"``output_field`` は ``IntegerField()`` や ``BooleanField()`` のようなモデル"
"フィールドのインスタンスを取ります。通常、フィールドには ``max_length`` のよ"
"うな引数は不要です。フィールドの引数はデータの検証に関連しており、その検証は"
"式の出力値に対して実行されないからです。"

msgid ""
"``output_field`` is only required when Django is unable to automatically "
"determine the result's field type, such as complex expressions that mix "
"field types. For example, adding a ``DecimalField()`` and a ``FloatField()`` "
"requires an output field, like ``output_field=FloatField()``."
msgstr ""
"``output_field`` が必要なのは、フィールド型が混在する複雑な式のように、 "
"Django が結果のフィールド型を自動的に判断できない場合だけです。例えば、 "
"``DecimalField()`` と ``FloatField()`` を足す場合、 "
"``output_field=FloatField()`` のように出力フィールドが必要になります。"

msgid "Some examples"
msgstr "例"

msgid "Built-in Expressions"
msgstr "組み込みのクエリ式"

msgid ""
"These expressions are defined in ``django.db.models.expressions`` and "
"``django.db.models.aggregates``, but for convenience they're available and "
"usually imported from :mod:`django.db.models`."
msgstr ""
"これらの式は ``django.db.models.expressions`` と ``django.db.models."
"aggregates`` で定義されていますが、利便性のために :mod:`django.db.models` か"
"らインポートできます。"

msgid "``F()`` expressions"
msgstr "``F()`` 式"

msgid ""
"An ``F()`` object represents the value of a model field, transformed value "
"of a model field, or annotated column. It makes it possible to refer to "
"model field values and perform database operations using them without "
"actually having to pull them out of the database into Python memory."
msgstr ""
"``F()`` オブジェクトはモデルフィールドの値、モデルフィールドを変換した値、ア"
"ノテーションを付けた列を表します。これを使うことで、実際にデータベースから "
"Python のメモリに取り出さずに、モデルフィールドの値を参照してデータベース操作"
"を行うことができます。"

msgid ""
"Instead, Django uses the ``F()`` object to generate an SQL expression that "
"describes the required operation at the database level."
msgstr ""
"代わりに、 Django は ``F()`` オブジェクトを使って、データベースレベルで必要な"
"操作を記述する SQL 式を生成します。"

msgid ""
"Let's try this with an example. Normally, one might do something like this::"
msgstr "例でやってみましょう。通常はこのようにします："

msgid ""
"Here, we have pulled the value of ``reporter.stories_filed`` from the "
"database into memory and manipulated it using familiar Python operators, and "
"then saved the object back to the database. But instead we could also have "
"done::"
msgstr ""
"ここでは、``reporter.stories_filed`` の値をデータベースからメモリに取り込ん"
"で、Pythonでおなじみの演算子を使って操作し、そのオブジェクトをデータベースに"
"保存しています。しかし、代わりに次のようにすることもできます："

msgid ""
"Although ``reporter.stories_filed = F('stories_filed') + 1`` looks like a "
"normal Python assignment of value to an instance attribute, in fact it's an "
"SQL construct describing an operation on the database."
msgstr ""
"``reporter.stories_filed = F('stories_filed') + 1`` はインスタンス属性に値を"
"代入する普通の Python 構文のように見えますが、実際にはデータベースに対する操"
"作を記述するSQL構文です。"

msgid ""
"When Django encounters an instance of ``F()``, it overrides the standard "
"Python operators to create an encapsulated SQL expression; in this case, one "
"which instructs the database to increment the database field represented by "
"``reporter.stories_filed``."
msgstr ""
"Djangoが ``F()`` インスタンスを見つけると、標準のPython演算子をオーバーライド"
"してカプセル化されたSQL式を作成します。この場合、``reporter.stories_filed`` "
"によって表されるデータベースフィールドをインクリメントするようにデータベース"
"に指示する式が作成されます。"

msgid ""
"Whatever value is or was on ``reporter.stories_filed``, Python never gets to "
"know about it - it is dealt with entirely by the database. All Python does, "
"through Django's ``F()`` class, is create the SQL syntax to refer to the "
"field and describe the operation."
msgstr ""
"``reporter.stories_filed`` にどんな値があったとしても、Pythonはそれを知ること"
"はありません。それは完全にデータベースが扱います。Python が Django の "
"``F()`` クラスを通して行うことは、フィールドを参照し、処理を記述する SQL 構文"
"を作成することだけです。"

msgid "To access the new value saved this way, the object must be reloaded::"
msgstr ""
"このようにして保存された新しい値にアクセスするには、オブジェクトをリロードす"
"る必要があります："

msgid ""
"As well as being used in operations on single instances as above, ``F()`` "
"can be used on ``QuerySets`` of object instances, with ``update()``. This "
"reduces the two queries we were using above - the ``get()`` and the :meth:"
"`~Model.save()` - to just one::"
msgstr ""
"``F()`` は上記のように単一のインスタンスに対する操作で使用されるだけでなく、"
"``update()``と一緒にオブジェクトインスタンスの ``QuerySet`` に対して使用する"
"こともできます。これにより、上記で使用していた2つのクエリである ``get()`` "
"と :meth:`~Model.save()` を1つに減らすことができます："

msgid ""
"We can also use :meth:`~django.db.models.query.QuerySet.update()` to "
"increment the field value on multiple objects - which could be very much "
"faster than pulling them all into Python from the database, looping over "
"them, incrementing the field value of each one, and saving each one back to "
"the database::"
msgstr ""
"また、 :meth:`~django.db.models.query.QuerySet.update()` を使用して複数のオブ"
"ジェクトのフィールド値をインクリメントすることもできます。これは、データベー"
"スからPythonに全てを引き出し、それら全てをループ処理し、各オブジェクトの"
"フィールド値をインクリメントし、そして各オブジェクトをデータベースに保存する"
"よりも、はるかに高速になる可能性があります："

msgid "``F()`` therefore can offer performance advantages by:"
msgstr "つまり、``F()`` は、以下のようなパフォーマンス上の利点があります："

msgid "getting the database, rather than Python, to do work"
msgstr "作業をPythonではなく、データベースに行わせること"

msgid "reducing the number of queries some operations require"
msgstr "一部の操作に必要なクエリの数を減らすこと"

msgid "Avoiding race conditions using ``F()``"
msgstr "``F()`` を使った競合状態の回避"

msgid ""
"Another useful benefit of ``F()`` is that having the database - rather than "
"Python - update a field's value avoids a *race condition*."
msgstr ""
"``F()`` のもう一つの便利な利点は、Pythonではなくデータベースがフィールドの値"
"を更新することで *競合状態* を避けることができるということです。"

msgid ""
"If two Python threads execute the code in the first example above, one "
"thread could retrieve, increment, and save a field's value after the other "
"has retrieved it from the database. The value that the second thread saves "
"will be based on the original value; the work of the first thread will be "
"lost."
msgstr ""
"2つのPythonスレッドが上記の最初の例のコードを実行した場合、1つのスレッドはも"
"う1つのスレッドがデータベースから値を取得した後にフィールドの値を取得、インク"
"リメント、保存する可能性があります。2番目のスレッドが保存する値は元の値に基づ"
"いています。"

msgid ""
"If the database is responsible for updating the field, the process is more "
"robust: it will only ever update the field based on the value of the field "
"in the database when the :meth:`~Model.save()` or ``update()`` is executed, "
"rather than based on its value when the instance was retrieved."
msgstr ""
"データベースがフィールドの更新を担当する場合、処理はより堅牢になります。 :"
"meth:`~Model.save()` や ``update()`` が実行されたときに、インスタンスが取得さ"
"れたときの値ではなく、データベースのフィールドの値だけに基づいてフィールドが"
"更新されます。"

msgid "``F()`` assignments persist after ``Model.save()``"
msgstr "``F()`` への代入は ``Model.save()`` の後にも残ります"

msgid ""
"``F()`` objects assigned to model fields persist after saving the model "
"instance and will be applied on each :meth:`~Model.save()`. For example::"
msgstr ""
"モデルフィールドに割り当てられた ``F()`` オブジェクトはモデルインスタンスを保"
"存した後も保持され、 :meth:`~Model.save()` のたびに適用されます。例えば："

msgid ""
"``stories_filed`` will be updated twice in this case. If it's initially "
"``1``, the final value will be ``3``. This persistence can be avoided by "
"reloading the model object after saving it, for example, by using :meth:"
"`~Model.refresh_from_db()`."
msgstr ""
"この場合、 ``stories_filed`` は2回更新されます。初期値が ``1`` であれば、最終"
"的な値は ``3`` になります。このような永続化は、例えば :meth:`~Model."
"refresh_from_db()` を使ってモデルオブジェクトを保存した後にリロードすることで"
"回避できます。"

msgid "Using ``F()`` in filters"
msgstr "フィルタで ``F()`` を使う"

msgid ""
"``F()`` is also very useful in ``QuerySet`` filters, where they make it "
"possible to filter a set of objects against criteria based on their field "
"values, rather than on Python values."
msgstr ""
"``F()`` は ``QuerySet`` フィルタでも非常に有用で、Python の値ではなく、フィー"
"ルドの値に基づいてオブジェクトをフィルタリングできます。"

msgid ""
"This is documented in :ref:`using F() expressions in queries <using-f-"
"expressions-in-filters>`."
msgstr ""
"これは :ref:`クエリで F() 式を使う <using-f-expressions-in-filters>` で説明さ"
"れています。"

msgid "Using ``F()`` with annotations"
msgstr "``F()`` をアノテーションと一緒に使う"

msgid ""
"``F()`` can be used to create dynamic fields on your models by combining "
"different fields with arithmetic::"
msgstr ""
"``F()`` を使うと、算術演算で異なるフィールドを組み合わせてモデルに動的な"
"フィールドを作成できます："

msgid ""
"If the fields that you're combining are of different types you'll need to "
"tell Django what kind of field will be returned. Most expressions support :"
"ref:`output_field<output-field>` for this case, but since ``F()`` does not, "
"you will need to wrap the expression with :class:`ExpressionWrapper`::"
msgstr ""
"組み合わせるフィールドの型が異なる場合、どのようなフィールドが返されるかを "
"Django に伝える必要があります。ほとんどの式は :ref:`output_field<output-"
"field>` をサポートしていますが、 ``F()`` はサポートしていないので、 :class:"
"`ExpressionWrapper` で式をラップする必要があります："

msgid ""
"When referencing relational fields such as ``ForeignKey``, ``F()`` returns "
"the primary key value rather than a model instance:"
msgstr ""
"``ForeignKey`` のようなリレーション先フィールドを参照する場合、 ``F()`` はモ"
"デルインスタンスではなく主キーの値を返します："

msgid "Using ``F()`` to sort null values"
msgstr "NULL 値のソートに ``F()`` を使う"

msgid ""
"Use ``F()`` and the ``nulls_first`` or ``nulls_last`` keyword argument to :"
"meth:`.Expression.asc` or :meth:`~.Expression.desc` to control the ordering "
"of a field's null values. By default, the ordering depends on your database."
msgstr ""
"``F()`` と :meth:`.Expression.asc` または :meth:`~.Expression.desc` のキー"
"ワード引数 ``nulls_first`` または ``nulls_last`` を使用して、フィールドの "
"null 値のソートの順序を制御します。デフォルトでは、ソートの順序はデータベース"
"に依存します。"

msgid ""
"For example, to sort companies that haven't been contacted "
"(``last_contacted`` is null) after companies that have been contacted::"
msgstr ""
"例えば、まだコンタクトしていない企業 (``last_contacted`` がNULL) をコンタクト"
"した企業の後に並べるには次のようにします："

msgid "Using ``F()`` with logical operations"
msgstr "論理演算で ``F()`` を使う"

msgid ""
"``F()`` expressions that output ``BooleanField`` can be logically negated "
"with the inversion operator ``~F()``. For example, to swap the activation "
"status of companies::"
msgstr ""
"``BooleanField`` を出力する ``F()`` 式は反転演算子 ``~F()`` で論理的に否定す"
"ることができます。たとえば企業の is_active ステータスを反転する場合、以下のよ"
"うにします："

msgid "``Func()`` expressions"
msgstr "``Func()`` 式"

msgid ""
"``Func()`` expressions are the base type of all expressions that involve "
"database functions like ``COALESCE`` and ``LOWER``, or aggregates like "
"``SUM``. They can be used directly::"
msgstr ""
"``Func()`` 式は ``COALESCE`` や ``LOWER`` のようなデータベース関数や、 "
"``SUM`` のような集計を含むすべての式の基本型です。これらは直接使用できます："

msgid "or they can be used to build a library of database functions::"
msgstr "または、データベース関数のライブラリを構築するためにも使用できます："

msgid ""
"But both cases will result in a queryset where each model is annotated with "
"an extra attribute ``field_lower`` produced, roughly, from the following SQL:"
msgstr ""
"しかし、どちらの場合も、モデルが追加の属性 ``field_lower`` でアノテーションさ"
"れたクエリセットを生成します。この属性は、大まかには次のSQLから生成されます："

msgid ""
"See :doc:`database-functions` for a list of built-in database functions."
msgstr ""
"組み込みのデータベース関数の一覧は :doc:`database-functions` を参照してくださ"
"い。"

msgid "The ``Func`` API is as follows:"
msgstr "``Func`` のAPI は以下の通りです："

msgid ""
"A class attribute describing the function that will be generated. "
"Specifically, the ``function`` will be interpolated as the ``function`` "
"placeholder within :attr:`template`. Defaults to ``None``."
msgstr ""
"生成する関数を指定するクラス属性です。具体的には、 ``function`` が :attr:"
"`template` 内の ``function`` プレースホルダとして補間されます。デフォルトは "
"``None`` です。"

msgid ""
"A class attribute, as a format string, that describes the SQL that is "
"generated for this function. Defaults to ``'%(function)s(%(expressions)s)'``."
msgstr ""
"この関数に対して生成される SQL を記述する、フォーマット文字列としてのクラス属"
"性です。デフォルトは ``'%(function)s(%(expressions)s)'`` です。"

msgid ""
"If you're constructing SQL like ``strftime('%W', 'date')`` and need a "
"literal ``%`` character in the query, quadruple it (``%%%%``) in the "
"``template`` attribute because the string is interpolated twice: once during "
"the template interpolation in ``as_sql()`` and once in the SQL interpolation "
"with the query parameters in the database cursor."
msgstr ""
"``strftime('%W','date')`` のようなSQLを作成していて、クエリでリテラル文字 "
"``%`` が必要な場合は、``template`` 属性では ``%%%%`` と4倍にしてください。文"
"字列は ``as_sql()`` でのテンプレート補間と、データベースカーソルでのクエリパ"
"ラメータによるSQL補間の2回補間されるからです。"

msgid ""
"A class attribute that denotes the character used to join the list of "
"``expressions`` together. Defaults to ``', '``."
msgstr ""
"クラス属性は ``expressions`` のリストを結合するために使用される文字を表しま"
"す。デフォルトは ``', '`` です。"

msgid ""
"A class attribute that denotes the number of arguments the function accepts. "
"If this attribute is set and the function is called with a different number "
"of expressions, ``TypeError`` will be raised. Defaults to ``None``."
msgstr ""
"関数が受け付ける引数の数を表すクラス属性です。この属性が設定されていて、関数"
"が異なる数の式で呼び出された場合、 ``TypeError`` が発生します。デフォルトは "
"``None`` です。"

msgid ""
"Generates the SQL fragment for the database function. Returns a tuple "
"``(sql, params)``, where ``sql`` is the SQL string, and ``params`` is the "
"list or tuple of query parameters."
msgstr ""
"データベース関数の SQL フラグメントを生成します。タプル ``(sql, params)`` を"
"返します。``sql`` は SQL 文字列で、``params`` はクエリパラメータのリストまた"
"はタプルです。"

msgid ""
"The ``as_vendor()`` methods should use the ``function``, ``template``, "
"``arg_joiner``, and any other ``**extra_context`` parameters to customize "
"the SQL as needed. For example:"
msgstr ""
"``as_vendor()`` メソッドは、``function``, ``template``, ``arg_joiner`` および"
"その他の ``**extra_context`` パラメータを使用して、必要に応じてSQLをカスタマ"
"イズするべきです。例えば："

msgid "``django/db/models/functions.py``"
msgstr "``django/db/models/functions.py``"

msgid ""
"To avoid an SQL injection vulnerability, ``extra_context`` :ref:`must not "
"contain untrusted user input <avoiding-sql-injection-in-query-expressions>` "
"as these values are interpolated into the SQL string rather than passed as "
"query parameters, where the database driver would escape them."
msgstr ""
"SQL インジェクションの脆弱性を回避するために、``extra_context`` は :ref:`信頼"
"できないユーザー入力を含んではいけません <avoiding-sql-injection-in-query-"
"expressions>` 。これらの値はデータベースドライバによってエスケープされるクエ"
"リパラメータとして渡されるのではなく、SQL文字列に補間されるからです。"

msgid ""
"The ``*expressions`` argument is a list of positional expressions that the "
"function will be applied to. The expressions will be converted to strings, "
"joined together with ``arg_joiner``, and then interpolated into the "
"``template`` as the ``expressions`` placeholder."
msgstr ""
"引数 ``*expressions`` は関数が適用される位置引数としての式のリストです。式は"
"文字列に変換され、 ``arg_joiner`` で連結された後、 ``expressions`` プレースホ"
"ルダとして ``template`` に挿入されます。"

msgid ""
"Positional arguments can be expressions or Python values. Strings are "
"assumed to be column references and will be wrapped in ``F()`` expressions "
"while other values will be wrapped in ``Value()`` expressions."
msgstr ""
"位置引数には式か Python の値を指定できます。文字列はカラム参照とみなされ、 "
"``F()`` 式でラップされ、その他の値は ``Value()`` 式でラップされます。"

msgid ""
"The ``**extra`` kwargs are ``key=value`` pairs that can be interpolated into "
"the ``template`` attribute. To avoid an SQL injection vulnerability, "
"``extra`` :ref:`must not contain untrusted user input <avoiding-sql-"
"injection-in-query-expressions>` as these values are interpolated into the "
"SQL string rather than passed as query parameters, where the database driver "
"would escape them."
msgstr ""
"``*extra`` kwargs は ``template`` 属性に補間できる ``key=value`` のペアです。"
"SQL インジェクションの脆弱性を回避するために、``*extra`` は :ref:`信頼できな"
"いユーザー入力を含んではいけません <avoiding-sql-injection-in-query-"
"expressions>` 。これらの値はデータベースドライバによってエスケープされるクエ"
"リパラメータとして渡されるのではなく、SQL文字列に補間されるからです。"

msgid ""
"The ``function``, ``template``, and ``arg_joiner`` keywords can be used to "
"replace the attributes of the same name without having to define your own "
"class. :ref:`output_field<output-field>` can be used to define the expected "
"return type."
msgstr ""
"``function``, ``template``, および ``arg_joiner`` キーワードは、同じ名前の属"
"性を置き換えるために使用でき、独自のクラスを定義する必要はありません。:ref:"
"`output_field<output-field>` は、期待される戻り値の型を定義するために使用でき"
"ます。"

msgid "``Aggregate()`` expressions"
msgstr "``Aggregate()`` 式"

msgid ""
"An aggregate expression is a special case of a :ref:`Func() expression <func-"
"expressions>` that informs the query that a ``GROUP BY`` clause is required. "
"All of the :ref:`aggregate functions <aggregation-functions>`, like "
"``Sum()`` and ``Count()``, inherit from ``Aggregate()``."
msgstr ""
"集計式 (aggregate expression) は :ref:`Func() 式 <func-expressions>` の特殊な"
"ケースで、 ``GROUP BY`` 句が必要であることをクエリに通知します。 ``Sum()`` "
"や ``Count()`` などの :ref:`集計関数 <aggregation-functions>` はすべて "
"``Aggregate()`` を継承しています。"

msgid ""
"Since ``Aggregate``\\s are expressions and wrap expressions, you can "
"represent some complex computations::"
msgstr ""
"``Aggregate`` は式であり、ラップ式でもあるので、複雑な計算を表現できます："

msgid "The ``Aggregate`` API is as follows:"
msgstr "``Aggregate`` の API は以下の通りです："

msgid ""
"A class attribute, as a format string, that describes the SQL that is "
"generated for this aggregate. Defaults to "
"``'%(function)s(%(distinct)s%(expressions)s)'``."
msgstr ""
"この aggregate 用に生成される SQL を記述する、フォーマット文字列としてのクラ"
"ス属性です。デフォルトは ``'%(function)s(%(distinct)s%(expressions)s)'`` で"
"す。"

msgid ""
"A class attribute describing the aggregate function that will be generated. "
"Specifically, the ``function`` will be interpolated as the ``function`` "
"placeholder within :attr:`template`. Defaults to ``None``."
msgstr ""
"生成される集計関数を記述するクラス属性です。具体的には、 ``function`` が :"
"attr:`template` 内の ``function`` プレースホルダとして補間されます。デフォル"
"トは ``None`` です。"

msgid ""
"Defaults to ``True`` since most aggregate functions can be used as the "
"source expression in :class:`~django.db.models.expressions.Window`."
msgstr ""
"ほとんどの集計関数は :class:`~django.db.models.expressions.Window` のソース式"
"として使用できるので、デフォルトは ``True`` です。"

msgid ""
"A class attribute determining whether or not this aggregate function allows "
"passing a ``distinct`` keyword argument. If set to ``False`` (default), "
"``TypeError`` is raised if ``distinct=True`` is passed."
msgstr ""
"この集計関数が ``distinct`` キーワード引数を渡すことができるかどうかを決定す"
"るクラス属性。 ``False`` (デフォルト) に設定されている場合、 "
"``distinct=True`` が渡されると ``TypeError`` が発生します。"

msgid ""
"Defaults to ``None`` since most aggregate functions result in ``NULL`` when "
"applied to an empty result set."
msgstr ""
"ほとんどの集計関数は、空の結果セットに適用すると ``NULL`` となるため、デフォ"
"ルトは ``None`` です。"

msgid ""
"The ``expressions`` positional arguments can include expressions, transforms "
"of the model field, or the names of model fields. They will be converted to "
"a string and used as the ``expressions`` placeholder within the ``template``."
msgstr ""
"位置引数 ``expressions`` には、式、モデルフィールドのトランスフォーム、または"
"モデルフィールドの名前を指定できます。これらは文字列に変換され、 "
"``template`` 内の ``expressions`` プレースホルダとして使用されます。"

msgid ""
"The ``distinct`` argument determines whether or not the aggregate function "
"should be invoked for each distinct value of ``expressions`` (or set of "
"values, for multiple ``expressions``). The argument is only supported on "
"aggregates that have :attr:`~Aggregate.allow_distinct` set to ``True``."
msgstr ""
"引数 ``distinct`` は、集計関数を ``式`` (または複数の ``式`` の場合は値の集"
"合) ごとに呼び出すかどうかを決定します。この引数は :attr:`~Aggregate."
"allow_distinct` が ``True`` に設定されている集計でのみサポートされます。"

msgid ""
"The ``filter`` argument takes a :class:`Q object <django.db.models.Q>` "
"that's used to filter the rows that are aggregated. See :ref:`conditional-"
"aggregation` and :ref:`filtering-on-annotations` for example usage."
msgstr ""
"引数 ``filter`` は :class:`Q オブジェクト <django.db.models.Q>` を取り、集計"
"する行をフィルタリングします。使用例については :ref:`conditional-"
"aggregation` と :ref:`filtering-on-annotations` を参照してください。"

msgid ""
"The ``default`` argument takes a value that will be passed along with the "
"aggregate to :class:`~django.db.models.functions.Coalesce`. This is useful "
"for specifying a value to be returned other than ``None`` when the queryset "
"(or grouping) contains no entries."
msgstr ""
"引数 ``default`` は :class:`~django.db.models.functions.Coalesce` に集計句と"
"一緒に渡される値を取ります。これは、クエリセット(またはグループ化)にエントリ"
"がない場合に ``None`` 以外の値を返すように指定するのに便利です。"

msgid ""
"The ``**extra`` kwargs are ``key=value`` pairs that can be interpolated into "
"the ``template`` attribute."
msgstr ""
"この ``**extra`` キーワード引数は ``template`` 属性に補間できる "
"``key=value`` のペアです。"

msgid "Creating your own Aggregate Functions"
msgstr "独自の集計関数 (Aggregate Function) を作る"

msgid ""
"You can create your own aggregate functions, too. At a minimum, you need to "
"define ``function``, but you can also completely customize the SQL that is "
"generated. Here's a brief example::"
msgstr ""
"独自の集計関数を作成することもできます。最低限 ``function`` を定義する必要が"
"ありますが、生成される SQL を完全にカスタマイズすることもできます。以下に簡単"
"な例を示します："

msgid "``Value()`` expressions"
msgstr "``Value()`` 式"

msgid ""
"A ``Value()`` object represents the smallest possible component of an "
"expression: a simple value. When you need to represent the value of an "
"integer, boolean, or string within an expression, you can wrap that value "
"within a ``Value()``."
msgstr ""
"``Value()`` オブジェクトは式の最小の構成要素、つまり単純な値を表します。式の"
"中で整数、真偽値、文字列の値を表す必要がある場合、その値を ``Value()`` で囲み"
"ます。"

msgid ""
"You will rarely need to use ``Value()`` directly. When you write the "
"expression ``F('field') + 1``, Django implicitly wraps the ``1`` in a "
"``Value()``, allowing simple values to be used in more complex expressions. "
"You will need to use ``Value()`` when you want to pass a string to an "
"expression. Most expressions interpret a string argument as the name of a "
"field, like ``Lower('name')``."
msgstr ""
"``Value()`` を直接使用することはほとんどありません。 ``F('field') + 1`` とい"
"う式を書くと、Djangoは暗黙のうちに ``1`` を ``Value()`` でラップし、単純な値"
"をより複雑な式で使用できるようにします。式に文字列を渡したいときは "
"``Value()`` を使用する必要があります。ほとんどの式では、文字列引数をフィール"
"ド名として解釈します。例えば ``Lower('name')`` のように。"

msgid ""
"The ``value`` argument describes the value to be included in the expression, "
"such as ``1``, ``True``, or ``None``. Django knows how to convert these "
"Python values into their corresponding database type."
msgstr ""
"引数 ``value`` には、 ``1``, ``True``, ``None`` など、式に含める値を記述しま"
"す。Django はこれらの Python の値を対応するデータベース型に変換する方法を知っ"
"ています。"

msgid ""
"If no :ref:`output_field<output-field>` is specified, it will be inferred "
"from the type of the provided ``value`` for many common types. For example, "
"passing an instance of :py:class:`datetime.datetime` as ``value`` defaults "
"``output_field`` to :class:`~django.db.models.DateTimeField`."
msgstr ""
":ref:`output_field<output-field>` が指定されていない場合、多くの一般的な型で"
"は ``value`` の型から推測されます。例えば、 :py:class:`datetime.datetime` の"
"インスタンスを ``value`` として渡すと、 ``output_field`` のデフォルトは :"
"class:`~django.db.models.DateTimeField` です。"

msgid "``ExpressionWrapper()`` expressions"
msgstr "``ExpressionWrapper()`` 式"

msgid ""
"``ExpressionWrapper`` surrounds another expression and provides access to "
"properties, such as :ref:`output_field<output-field>`, that may not be "
"available on other expressions. ``ExpressionWrapper`` is necessary when "
"using arithmetic on ``F()`` expressions with different types as described "
"in :ref:`using-f-with-annotations`."
msgstr ""
"``ExpressionWrapper`` は他の式を囲み、 :ref:`output_field<output-field>` のよ"
"うな他の式では利用できないプロパティへのアクセスを提供します。 "
"``ExpressionWrapper`` は :ref:`using-f-with-annotations` で説明されているよう"
"に、異なる型を持つ ``F()`` 式で算術演算を行う場合に必要です。"

msgid "Conditional expressions"
msgstr "条件式"

msgid ""
"Conditional expressions allow you to use :keyword:`if` ... :keyword:"
"`elif` ... :keyword:`else` logic in queries. Django natively supports SQL "
"``CASE`` expressions. For more details see :doc:`conditional-expressions`."
msgstr ""
"条件式を用いると、:keyword:`if` ... :keyword:`elif` ... :keyword:`else` ロ"
"ジックをクエリーの中で使用できるようになります。Django はネイティブで SQL "
"``CASE`` 式をサポートしています。詳細については :doc:`conditional-"
"expressions` を読んでください。"

msgid "``Subquery()`` expressions"
msgstr "``Subquery()`` 式"

msgid ""
"You can add an explicit subquery to a ``QuerySet`` using the ``Subquery`` "
"expression."
msgstr ""
"``Subquery`` 式を使うと、 ``QuerySet`` に明示的にサブクエリを追加できます。"

msgid ""
"For example, to annotate each post with the email address of the author of "
"the newest comment on that post:"
msgstr ""
"たとえば、各投稿にその投稿の最新コメントの投稿者のメールアドレスをアノテー"
"ションとして付けることができます："

msgid "On PostgreSQL, the SQL looks like:"
msgstr "PostgreSQLの場合、SQLは以下のようになります："

msgid ""
"The examples in this section are designed to show how to force Django to "
"execute a subquery. In some cases it may be possible to write an equivalent "
"queryset that performs the same task more clearly or efficiently."
msgstr ""
"この節の例は、Django にサブクエリを強制する方法を示すものです。場合によって"
"は、同じタスクをより明確に、あるいは効率的に実行する等価なクエリセットを書け"
"るかもしれません。"

msgid "Referencing columns from the outer queryset"
msgstr "外側のクエリセットからカラムを参照する"

msgid ""
"Use ``OuterRef`` when a queryset in a ``Subquery`` needs to refer to a field "
"from the outer query or its transform. It acts like an :class:`F` expression "
"except that the check to see if it refers to a valid field isn't made until "
"the outer queryset is resolved."
msgstr ""
"``OuterRef`` は ``Subquery`` 内のクエリセットが外側のクエリまたはそのトランス"
"フォームのフィールドから参照される必要がある場合に使用します。これは :class:"
"`F` 式と同じように動作しますが、有効なフィールドを参照しているかどうかの"
"チェックは外側のクエリセットが解決されるまで行われません。"

msgid ""
"Instances of ``OuterRef`` may be used in conjunction with nested instances "
"of ``Subquery`` to refer to a containing queryset that isn't the immediate "
"parent. For example, this queryset would need to be within a nested pair of "
"``Subquery`` instances to resolve correctly:"
msgstr ""
"``OuterRef`` のインスタンスは、入れ子になった ``Subquery`` のインスタンスと一"
"緒に使用できます。例えば、このクエリセットを正しく解決するには、 "
"``Subquery`` インスタンスの入れ子になったペア内にある必要があります："

msgid "Limiting a subquery to a single column"
msgstr "サブクエリを単一のカラムに絞る"

msgid ""
"There are times when a single column must be returned from a ``Subquery``, "
"for instance, to use a ``Subquery`` as the target of an ``__in`` lookup. To "
"return all comments for posts published within the last day:"
msgstr ""
"``Subquery`` を ``__in`` ルックアップの対象として使う場合など、``Subquery`` "
"から単一のカラムを返さなければならないことがあります。たとえば、直近一日以内"
"に公開された投稿のすべてのコメントを返す場合："

msgid ""
"In this case, the subquery must use :meth:`~.QuerySet.values` to return only "
"a single column: the primary key of the post."
msgstr ""
"この場合、サブクエリは :meth:`~.QuerySet.values` を使って単一のカラム、つまり"
"投稿の主キーだけを返さなければなりません。"

msgid "Limiting the subquery to a single row"
msgstr "サブクエリを1行に絞る"

msgid ""
"To prevent a subquery from returning multiple rows, a slice (``[:1]``) of "
"the queryset is used:"
msgstr ""
"サブクエリが複数行を返すのを防ぐには、クエリセットのスライス (``[:1]``) を使"
"用します："

msgid ""
"In this case, the subquery must only return a single column *and* a single "
"row: the email address of the most recently created comment."
msgstr ""
"この場合、サブクエリは単一のカラムの単一の行、つまり最近作成されたコメントの"
"メールアドレスだけを返す必要があります。"

msgid ""
"(Using :meth:`~.QuerySet.get` instead of a slice would fail because the "
"``OuterRef`` cannot be resolved until the queryset is used within a "
"``Subquery``.)"
msgstr ""
"（スライスの代わりに :meth:`~.QuerySet.get` を使うと、 ``Subquery`` 内でクエ"
"リセットが使われるまで ``OuterRef`` が解決できないため失敗します）"

msgid "``Exists()`` subqueries"
msgstr "``Exists()`` サブクエリ"

msgid ""
"``Exists`` is a ``Subquery`` subclass that uses an SQL ``EXISTS`` statement. "
"In many cases it will perform better than a subquery since the database is "
"able to stop evaluation of the subquery when a first matching row is found."
msgstr ""
"``Exists`` は SQL の ``EXISTS`` ステートメントを使う ``サブクエリ`` のサブク"
"ラスです。多くの場合、最初にマッチする行が見つかった時点でデータベースがサブ"
"クエリの評価を停止できるので、サブクエリよりも性能が良くなります。"

msgid ""
"For example, to annotate each post with whether or not it has a comment from "
"within the last day:"
msgstr ""
"たとえば、各投稿に直近1日以内のコメントがあるかどうかのアノテーションを付ける"
"ことができます："

msgid ""
"It's unnecessary to force ``Exists`` to refer to a single column, since the "
"columns are discarded and a boolean result is returned. Similarly, since "
"ordering is unimportant within an SQL ``EXISTS`` subquery and would only "
"degrade performance, it's automatically removed."
msgstr ""
"``Exists`` に単一のカラムの参照を強制する必要はありません。列は破棄され、真偽"
"値の結果が返されるからです。同様に、ソートは SQL の ``EXISTS`` サブクエリ内で"
"は重要ではなく、パフォーマンスを低下させるだけなので、自動的に破棄されます。"

msgid "You can query using ``NOT EXISTS`` with ``~Exists()``."
msgstr "``~Exists()`` を使って ``NOT EXISTS`` をクエリできます。"

msgid "Filtering on a ``Subquery()`` or ``Exists()`` expressions"
msgstr "``Subquery()`` または ``Exists()`` 式におけるフィルタリング"

msgid ""
"``Subquery()`` that returns a boolean value and ``Exists()`` may be used as "
"a ``condition`` in :class:`~django.db.models.expressions.When` expressions, "
"or to directly filter a queryset:"
msgstr ""
"真偽値を返す ``Subquery()`` と ``Exists()`` は :class:`~django.db.models."
"expressions.When` 式で ``condition`` として使用したり、クエリセットに直接フィ"
"ルタをかけたりすることができます："

msgid ""
"This will ensure that the subquery will not be added to the ``SELECT`` "
"columns, which may result in a better performance."
msgstr ""
"これにより、サブクエリが ``SELECT`` カラムに追加されなくなり、パフォーマンス"
"が向上する可能性があります。"

msgid "Using aggregates within a ``Subquery`` expression"
msgstr "``Subquery`` 式の中で集計 (aggregate) を使う"

msgid ""
"Aggregates may be used within a ``Subquery``, but they require a specific "
"combination of :meth:`~.QuerySet.filter`, :meth:`~.QuerySet.values`, and :"
"meth:`~.QuerySet.annotate` to get the subquery grouping correct."
msgstr ""
"集計 (aggregate) は ``Subquery`` の中で使用できますが、サブクエリのグループ化"
"を正しく行うためには :meth:`~.QuerySet.filter`, :meth:`~.QuerySet.values`, :"
"meth:`~.QuerySet.annotate` の特定の組み合わせを必要とします。"

msgid ""
"Assuming both models have a ``length`` field, to find posts where the post "
"length is greater than the total length of all combined comments:"
msgstr ""
"両方のモデルに ``length`` フィールドがあると仮定すると、投稿の長さがすべての"
"コメントの長さの合計よりも大きい投稿を見つけることができます："

msgid ""
"The initial ``filter(...)`` limits the subquery to the relevant parameters. "
"``order_by()`` removes the default :attr:`~django.db.models.Options."
"ordering` (if any) on the ``Comment`` model. ``values('post')`` aggregates "
"comments by ``Post``. Finally, ``annotate(...)`` performs the aggregation. "
"The order in which these queryset methods are applied is important. In this "
"case, since the subquery must be limited to a single column, "
"``values('total')`` is required."
msgstr ""
"最初の ``filter(...)`` はサブクエリを関連するパラメータに制限します。 "
"``order_by()`` は ``Comment`` モデルのデフォルトの :attr:`~django.db.models."
"Options.ordering` (もしあれば) を削除します。 ``value('post')`` はコメントを "
"``Post`` で集計します。最後に、 ``annotate(...)`` が集計を行います。これらの"
"クエリセットメソッドを適用する順番は重要です。この場合、サブクエリは1つのカラ"
"ムに限定する必要があるため、 ``values('total')`` が必要となります。"

msgid ""
"This is the only way to perform an aggregation within a ``Subquery``, as "
"using :meth:`~.QuerySet.aggregate` attempts to evaluate the queryset (and if "
"there is an ``OuterRef``, this will not be possible to resolve)."
msgstr ""
"これは ``Subquery`` 内で集計を行う唯一の方法です。 :meth:`~.QuerySet."
"aggregate` を使用すると、クエリセットを評価しようとします（そして "
"``OuterRef`` がある場合、これを解決することはできません）。"

msgid "Raw SQL expressions"
msgstr "素の SQL 式"

msgid ""
"Sometimes database expressions can't easily express a complex ``WHERE`` "
"clause. In these edge cases, use the ``RawSQL`` expression. For example:"
msgstr ""
"データベース式では複雑な ``WHERE`` 句を簡単に表現できないことがあります。この"
"ような場合は ``RawSQL`` 式を使用してください。たとえば："

msgid ""
"These extra lookups may not be portable to different database engines "
"(because you're explicitly writing SQL code) and violate the DRY principle, "
"so you should avoid them if possible."
msgstr ""
"このような特別なルックアップは、（明示的にSQLコードを記述しているため）異なる"
"データベースエンジンに移植できない可能性があり、DRY原則に反するので、可能なら"
"避けるべきです。"

msgid ""
"``RawSQL`` expressions can also be used as the target of ``__in`` filters:"
msgstr "``RawSQL`` 式は ``__in`` フィルタの対象としても使用できます： "

msgid ""
"To protect against `SQL injection attacks <https://en.wikipedia.org/wiki/"
"SQL_injection>`_, you must escape any parameters that the user can control "
"by using ``params``. ``params`` is a required argument to force you to "
"acknowledge that you're not interpolating your SQL with user-provided data."
msgstr ""
"`SQLインジェクション攻撃 <https://ja.wikipedia.org/wiki/"
"SQL%E3%82%A4%E3%83%B3%E3%82%B8%E3%82%A7%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3>`_ "
"を防ぐために、 ``params`` を使って、ユーザが操作できるパラメータをエスケープ"
"する必要があります。 ``params`` は必須引数で、ユーザが入力したデータでSQLを補"
"間しないことを強制するためのものです。"

msgid ""
"You also must not quote placeholders in the SQL string. This example is "
"vulnerable to SQL injection because of the quotes around ``%s``::"
msgstr ""
"また、SQL文字列のプレースホルダを引用符で囲んではいけません。 この例では "
"``%s`` を引用符で囲んでいるため、SQLインジェクションの脆弱性があります："

msgid ""
"You can read more about how Django's :ref:`SQL injection protection <sql-"
"injection-protection>` works."
msgstr ""
"Django が :ref:`SQL インジェクションを防ぐ <sql-injection-protection>` 仕組み"
"の説明があります。"

msgid ""
"Window functions provide a way to apply functions on partitions. Unlike a "
"normal aggregation function which computes a final result for each set "
"defined by the group by, window functions operate on :ref:`frames <window-"
"frames>` and partitions, and compute the result for each row."
msgstr ""
"ウィンドウ関数は、パーティション上で関数を適用する方法を提供します。通常の集"
"計関数が group by で定義された各セットに対して最終結果を計算するのに対し、"
"ウィンドウ関数は :ref:`フレーム <window-frames>` とパーティション上で操作し、"
"各行に対して結果を計算します。"

msgid ""
"You can specify multiple windows in the same query which in Django ORM would "
"be equivalent to including multiple expressions in a :doc:`QuerySet."
"annotate() </topics/db/aggregation>` call. The ORM doesn't make use of named "
"windows, instead they are part of the selected columns."
msgstr ""
"同じクエリ内で複数のウィンドウを指定することができ、Django ORM では :doc:"
"`QuerySet.annotate() </topics/db/aggregation>` 呼び出しに複数の式を含めること"
"で実現します。ORMは名前付きウィンドウを使用しませんが、代わりに選択されたカラ"
"ムの一部となります。"

msgid ""
"Defaults to ``%(expression)s OVER (%(window)s)``. If only the ``expression`` "
"argument is provided, the window clause will be blank."
msgstr ""
"デフォルトは ``%(expression)s OVER (%(window)s)`` です。引数 ``expression`` "
"だけを指定した場合、window 句は空白になります。"

msgid "The ``Window`` class is the main expression for an ``OVER`` clause."
msgstr "``Window`` クラスは ``OVER`` 句のメインの式です。"

msgid ""
"The ``expression`` argument is either a :ref:`window function <window-"
"functions>`, an :ref:`aggregate function <aggregation-functions>`, or an "
"expression that's compatible in a window clause."
msgstr ""
"引数の ``expression`` は :ref:`ウィンドウ関数 <window-functions>`, :ref:`集計"
"関数 <aggregation-functions>`, またはwindow句で互換性のある式です。"

msgid ""
"The ``partition_by`` argument accepts an expression or a sequence of "
"expressions (column names should be wrapped in an ``F``-object) that control "
"the partitioning of the rows.  Partitioning narrows which rows are used to "
"compute the result set."
msgstr ""
"``partition_by`` 引数には、行のパーティショニングを制御する式または一連の式 "
"(カラム名は ``F`` オブジェクトで囲む必要があります) を指定します。パーティ"
"ショニングは、結果セットを計算するために使用する行を絞り込みます。"

msgid ""
"The :ref:`output_field<output-field>` is specified either as an argument or "
"by the expression."
msgstr ":ref:`output_field<output-field>` は引数か式で指定します。"

msgid ""
"The ``order_by`` argument accepts an expression on which you can call :meth:"
"`~django.db.models.Expression.asc` and :meth:`~django.db.models.Expression."
"desc`, a string of a field name (with an optional ``\"-\"`` prefix which "
"indicates descending order), or a tuple or list of strings and/or "
"expressions. The ordering controls the order in which the expression is "
"applied. For example, if you sum over the rows in a partition, the first "
"result is the value of the first row, the second is the sum of first and "
"second row."
msgstr ""
"``order_by`` 引数には :meth:`~django.db.models.Expression.asc` と :meth:"
"`~django.db.models.Expression.desc` を呼び出せる式、フィールド名の文字列 (オ"
"プションで降順を示す ``\"-\"`` をプレフィックスに付けられます)、または文字列"
"や式のタプルやリストを渡すことができます。順序は式が適用される順番を制御しま"
"す。例えば、パーティション内の行を合計した場合、最初の結果は最初の行の値にな"
"り、2番目は最初の行と2番目の行の合計になります。"

msgid ""
"The ``frame`` parameter specifies which other rows that should be used in "
"the computation. See :ref:`window-frames` for details."
msgstr ""
"パラメータ ``frame`` は、計算に使用する他の行を指定します。詳細は :ref:"
"`window-frames` を参照してください。"

msgid ""
"For example, to annotate each movie with the average rating for the movies "
"by the same studio in the same genre and release year:"
msgstr ""
"たとえば、各映画に同じスタジオによる同じジャンル・公開年の映画の平均レーティ"
"ングでアノテーションを付ける場合："

msgid ""
"This allows you to check if a movie is rated better or worse than its peers."
msgstr "これにより、映画の評価が他の映画より高いか低いかをチェックできます。"

msgid ""
"You may want to apply multiple expressions over the same window, i.e., the "
"same partition and frame. For example, you could modify the previous example "
"to also include the best and worst rating in each movie's group (same "
"studio, genre, and release year) by using three window functions in the same "
"query. The partition and ordering from the previous example is extracted "
"into a dictionary to reduce repetition:"
msgstr ""
"同じウィンドウ、つまり同じパーティションとフレームに複数の式を適用したい場合"
"があります。例えば、同じクエリで3つのウィンドウ関数を使用することで、各映画の"
"グループ（同じスタジオ、ジャンル、リリース年）のベストとワーストの評価も含め"
"るように、前の例を修正できます。前の例のパーティションとソートは、繰り返しを"
"減らすために辞書に抽出されます："

msgid ""
"Filtering against window functions is supported as long as lookups are not "
"disjunctive (not using ``OR`` or ``XOR`` as a connector) and against a "
"queryset performing aggregation."
msgstr ""
"ウィンドウ関数に対するフィルタリングは、ルックアップが分離型でない（コネクタ"
"として ``OR`` や ``XOR`` を使用していない）限り、集計を実行するクエリセットに"
"対してもサポートされます。"

msgid ""
"For example, a query that relies on aggregation and has an ``OR``-ed filter "
"against a window function and a field is not supported. Applying combined "
"predicates post-aggregation could cause rows that would normally be excluded "
"from groups to be included:"
msgstr ""
"たとえば、集計に依存し、ウィンドウ関数とフィールドに対して ``OR`` でフィルタ"
"されたクエリはサポートされていません。集計後に真偽値を返す関数を適用すると、"
"通常はグループから除外されるはずの行が含まれる可能性があります："

msgid "Support for filtering against window functions was added."
msgstr "ウィンドウ関数に対するフィルタリングのサポートが追加されました。"

msgid ""
"Among Django's built-in database backends, MySQL, PostgreSQL, and Oracle "
"support window expressions. Support for different window expression features "
"varies among the different databases. For example, the options in :meth:"
"`~django.db.models.Expression.asc` and :meth:`~django.db.models.Expression."
"desc` may not be supported. Consult the documentation for your database as "
"needed."
msgstr ""
"Django に組み込みのデータベースバックエンドでは、MySQL、 PostgreSQL、 Oracle "
"がウィンドウ表現をサポートしています。ウィンドウ表現機能のサポートはデータ"
"ベースによって異なります。例えば、 :meth:`~django.db.models.Expression.asc` "
"や :meth:`~django.db.models.Expression.desc` のオプションはサポートされていな"
"いかもしれません。必要に応じてデータベースのドキュメントを参照してください。"

msgid "Frames"
msgstr "フレーム"

msgid ""
"For a window frame, you can choose either a range-based sequence of rows or "
"an ordinary sequence of rows."
msgstr ""
"ウィンドウフレームでは、範囲ベースの行のシーケンスか、通常の行のシーケンスの"
"いずれかを選択できます。"

msgid "This attribute is set to ``'RANGE'``."
msgstr "この属性は ``'RANGE'`` に設定されています。"

msgid ""
"PostgreSQL has limited support for ``ValueRange`` and only supports use of "
"the standard start and end points, such as ``CURRENT ROW`` and ``UNBOUNDED "
"FOLLOWING``."
msgstr ""
"PostgreSQLは ``ValueRange`` のサポートに制限があり、 ``CURRENT ROW`` や "
"``UNBOUNDED FOLLOWING`` のような標準的な開始点と終了点の使用しかサポートして"
"いません。"

msgid "This attribute is set to ``'ROWS'``."
msgstr "この属性は ``'ROWS'`` に設定されています。"

msgid "Both classes return SQL with the template:"
msgstr "どちらのクラスもテンプレートとともにSQLを返します："

msgid ""
"Frames narrow the rows that are used for computing the result. They shift "
"from some start point to some specified end point. Frames can be used with "
"and without partitions, but it's often a good idea to specify an ordering of "
"the window to ensure a deterministic result. In a frame, a peer in a frame "
"is a row with an equivalent value, or all rows if an ordering clause isn't "
"present."
msgstr ""
"フレームは、結果を計算するために使用される行を絞り込みます。ある開始点から指"
"定された終了点までシフトします。フレームはパーティションの有無に関係なく使用"
"できますが、決定論的な結果を得るためには、ウィンドウの順序を指定することを推"
"奨します。フレームでは、フレーム内のピアは等価値を持つ行であり、ソート句がな"
"い場合はすべての行です。"

msgid ""
"The default starting point for a frame is ``UNBOUNDED PRECEDING`` which is "
"the first row of the partition. The end point is always explicitly included "
"in the SQL generated by the ORM and is by default ``UNBOUNDED FOLLOWING``. "
"The default frame includes all rows from the partition to the last row in "
"the set."
msgstr ""
"フレームのデフォルトの開始点は ``UNBOUNDED PRECEDING`` で、パーティションの最"
"初の行になります。終了点は ORM が生成する SQL に常に明示的に含まれ、デフォル"
"トでは ``UNBOUNDED FOLLOWING`` です。デフォルトのフレームは、パーティションか"
"らセットの最後の行までの全ての行を含みます。"

msgid ""
"The accepted values for the ``start`` and ``end`` arguments are ``None``, an "
"integer, or zero. A negative integer for ``start`` results in ``N "
"preceding``, while ``None`` yields ``UNBOUNDED PRECEDING``. For both "
"``start`` and ``end``, zero will return ``CURRENT ROW``. Positive integers "
"are accepted for ``end``."
msgstr ""
"引数 ``start`` と ``end`` に指定できる値は ``None`` 、整数、または 0 です。 "
"``start`` に負の整数を指定すると ``N preceding`` となり、``None`` を指定する"
"と ``UNBOUNDED PRECEDING`` となります。 ``start`` と ``end`` の両方で 0 を指"
"定すると ``CURRENT ROW`` が返されます。 ``end`` には正の整数を指定できます。"

msgid ""
"There's a difference in what ``CURRENT ROW`` includes. When specified in "
"``ROWS`` mode, the frame starts or ends with the current row. When specified "
"in ``RANGE`` mode, the frame starts or ends at the first or last peer "
"according to the ordering clause. Thus, ``RANGE CURRENT ROW`` evaluates the "
"expression for rows which have the same value specified by the ordering. "
"Because the template includes both the ``start`` and ``end`` points, this "
"may be expressed with::"
msgstr ""
"``CURRENT ROW`` が含むものには違いがあります。 ``ROWS`` モードで指定された場"
"合、フレームは現在の行から開始または終了します。 ``RANGE`` モードで指定された"
"場合、フレームはソートの順序に従って最初か最後のピアから開始または終了しま"
"す。 したがって、 ``RANGE CURRENT ROW`` は、ソートで指定された同じ値を持つ行"
"に対して式を評価します。テンプレートは ``start`` と ``end`` の両方を含むの"
"で、これは次のように表現できます："

msgid ""
"If a movie's \"peers\" are described as movies released by the same studio "
"in the same genre in the same year, this ``RowRange`` example annotates each "
"movie with the average rating of a movie's two prior and two following peers:"
msgstr ""
"映画の \"ピア\" が同じ年に同じジャンルで同じスタジオからリリースされた映画と"
"して記述されている場合、この ``RowRange`` の例では、映画の2つ前から2つ後のピ"
"アの平均評価で各映画にアノテーションを付けます："

msgid ""
"If the database supports it, you can specify the start and end points based "
"on values of an expression in the partition. If the ``released`` field of "
"the ``Movie`` model stores the release month of each movie, this "
"``ValueRange`` example annotates each movie with the average rating of a "
"movie's peers released between twelve months before and twelve months after "
"each movie:"
msgstr ""
"データベースがサポートしていれば、パーティション内の式の値に基づいて開始点と"
"終了点を指定することもできます。もし ``Movie`` モデルの ``released`` フィール"
"ドが各映画の公開月を保存している場合、この ``ValueRange`` の例では、各映画の"
"12ヶ月前から12ヶ月後に公開された映画の同業者の平均レーティングでアノテーショ"
"ンを付けます："

msgid "Technical Information"
msgstr "技術的な情報"

msgid ""
"Below you'll find technical implementation details that may be useful to "
"library authors. The technical API and examples below will help with "
"creating generic query expressions that can extend the built-in "
"functionality that Django provides."
msgstr ""
"以下に、ライブラリの作者に役立つ技術的な実装の詳細を示します。以下の技術的な "
"API と例は、 Django が提供する組み込み機能を拡張する汎用的なクエリ式を作成す"
"るのに役立ちます。"

msgid "Expression API"
msgstr "式 (Expression) API"

msgid ""
"Query expressions implement the :ref:`query expression API <query-"
"expression>`, but also expose a number of extra methods and attributes "
"listed below. All query expressions must inherit from ``Expression()`` or a "
"relevant subclass."
msgstr ""
"クエリ式は :ref:`クエリ式 (expression) API <query-expression>` を実装していま"
"すが、以下のようなメソッドや属性も公開しています。すべてのクエリ式は "
"``Expression()`` または関連するサブクラスを継承しなければなりません。"

msgid ""
"When a query expression wraps another expression, it is responsible for "
"calling the appropriate methods on the wrapped expression."
msgstr ""
"クエリ式が別の式をラップする場合、ラップされた式の適切なメソッドを呼び出す責"
"任があります。"

msgid ""
"Tells Django that this expression can be used in :attr:`Field.db_default`. "
"Defaults to ``False``."
msgstr ""
"この式が :attr:`Field.db_default` で使えることを Django に伝えます。デフォル"
"トは ``False`` です。"

msgid ""
"Tells Django that this expression contains an aggregate and that a ``GROUP "
"BY`` clause needs to be added to the query."
msgstr ""
"Django に、この式が集計を含んでいて、クエリに ``GROUP BY`` 句を追加する必要が"
"あることを伝えます。"

msgid ""
"Tells Django that this expression contains a :class:`~django.db.models."
"expressions.Window` expression. It's used, for example, to disallow window "
"function expressions in queries that modify data."
msgstr ""
"この式が :class:`~django.db.models.expressions.Window` 式を含んでいることを "
"Django に伝えます。これは例えば、データを変更するクエリでウィンドウ関数式を許"
"可しないようにするのに使います。"

msgid ""
"Tells Django that this expression can be referenced in :meth:`.QuerySet."
"filter`. Defaults to ``True``."
msgstr ""
"この式が :meth:`.QuerySet.filter` で参照できることを Django に伝えます。デ"
"フォルトは ``True`` です。"

msgid ""
"Tells Django that this expression can be used as the source expression in :"
"class:`~django.db.models.expressions.Window`. Defaults to ``False``."
msgstr ""
"この式を :class:`~django.db.models.expressions.Window` のソース式として使える"
"かどうかを Django に伝えます。デフォルトは ``False`` です。"

msgid ""
"Tells Django which value should be returned when the expression is used to "
"apply a function over an empty result set. Defaults to :py:data:"
"`NotImplemented` which forces the expression to be computed on the database."
msgstr ""
"Django に、式が空の結果セットに対して関数を適用する際にどの値を返すべきかを "
"指示します。デフォルトは :py:data:`NotImplemented` で、式はデータベースで計算"
"されます。"

msgid ""
"Provides the chance to do any preprocessing or validation of the expression "
"before it's added to the query. ``resolve_expression()`` must also be called "
"on any nested expressions. A ``copy()`` of ``self`` should be returned with "
"any necessary transformations."
msgstr ""
"クエリに追加する前に、式の前処理や検証を行う機会を提供します。 "
"``resolve_expression()`` は、ネストした式に対しても必ず呼び出されなければなり"
"ません。 ``self`` の ``copy()`` は、必要な変換を行ったものを返すべきです。"

msgid "``query`` is the backend query implementation."
msgstr "``query`` はバックエンドクエリの実装です。"

msgid ""
"``allow_joins`` is a boolean that allows or denies the use of joins in the "
"query."
msgstr "``allow_joins`` はクエリで結合を使用するかどうかを指定する真偽値です。"

msgid "``reuse`` is a set of reusable joins for multi-join scenarios."
msgstr "``reuse`` は複数結合シナリオのための再利用可能な結合のセットです。"

msgid ""
"``summarize`` is a boolean that, when ``True``, signals that the query being "
"computed is a terminal aggregate query."
msgstr ""
"``summarize`` は真偽値で、``True`` の場合、計算中のクエリが終端の集計クエリで"
"あることを示します。"

msgid ""
"``for_save`` is a boolean that, when ``True``, signals that the query being "
"executed is performing a create or update."
msgstr ""
"``for_save`` は真偽値で、 ``True`` の場合、実行中のクエリが作成または更新を行"
"うことを示します。"

msgid "Returns an ordered list of inner expressions. For example:"
msgstr "内部式の順序ありリストを返します。例えば："

msgid ""
"Takes a list of expressions and stores them such that "
"``get_source_expressions()`` can return them."
msgstr ""
"式のリストを受け取り、それを ``get_source_expressions()`` が返せるように格納"
"します。"

msgid ""
"Returns a clone (copy) of ``self``, with any column aliases relabeled. "
"Column aliases are renamed when subqueries are created. "
"``relabeled_clone()`` should also be called on any nested expressions and "
"assigned to the clone."
msgstr ""
"``self`` のクローン（コピー）を返し、すべてのカラムエイリアスが再ラベル付けさ"
"れます。カラムエイリアスは、サブクエリが作成される際に名前が変更されます。"
"``relabeled_clone()`` は、任意のネストされた式にも呼び出され、クローンに割り"
"当てられるべきです。"

msgid "``change_map`` is a dictionary mapping old aliases to new aliases."
msgstr ""
"``change_map`` は古いエイリアスを新しいエイリアスにマッピングする辞書です。"

msgid ""
"A hook allowing the expression to coerce ``value`` into a more appropriate "
"type."
msgstr "式が ``value`` をより適切な型に強制するためのフック。"

msgid "``expression`` is the same as ``self``."
msgstr "``expression`` は ``self`` と同様です。"

msgid ""
"Responsible for returning the list of columns references by this expression. "
"``get_group_by_cols()`` should be called on any nested expressions. ``F()`` "
"objects, in particular, hold a reference to a column."
msgstr ""
"この式によって参照されるカラムのリストを返す責任があります。"
"``get_group_by_cols()`` は、任意のネストされた式に対して呼び出されるべきで"
"す。特に、``F()`` オブジェクトはカラムへの参照を保持しています。"

msgid "The ``alias=None`` keyword argument was removed."
msgstr "キーワード引数 ``alias=None`` は削除されました。"

msgid "Returns the expression ready to be sorted in ascending order."
msgstr "昇順でソートする準備が整った式を返します。"

msgid ""
"``nulls_first`` and ``nulls_last`` define how null values are sorted. See :"
"ref:`using-f-to-sort-null-values` for example usage."
msgstr ""
"``nulls_first`` と ``nulls_last`` は、null値がどのようにソートされるかを定義"
"します。使用例については、:ref:`using-f-to-sort-null-values` を参照してくださ"
"い。"

msgid "Returns the expression ready to be sorted in descending order."
msgstr "降順にソートする準備が整った式を返します。"

msgid ""
"Returns ``self`` with any modifications required to reverse the sort order "
"within an ``order_by`` call. As an example, an expression implementing "
"``NULLS LAST`` would change its value to be ``NULLS FIRST``. Modifications "
"are only required for expressions that implement sort order like "
"``OrderBy``. This method is called when :meth:`~django.db.models.query."
"QuerySet.reverse()` is called on a queryset."
msgstr ""
"``order_by`` 呼び出しの順序を逆にするために必要な修正を加えた ``self`` を返し"
"ます。例として、 ``NULLS LAST`` を実装した式は、その値を ``NULLS FIRST`` に変"
"更します。この実装が必要なのは ``OrderBy`` のようなソート順を実装した式だけで"
"す。このメソッドは :meth:`~django.db.models.query.QuerySet.reverse()` がクエ"
"リセットに対して呼び出されたときに呼び出されます。"

msgid "Writing your own Query Expressions"
msgstr "独自のクエリ式を書く"

msgid ""
"You can write your own query expression classes that use, and can integrate "
"with, other query expressions. Let's step through an example by writing an "
"implementation of the ``COALESCE`` SQL function, without using the built-in :"
"ref:`Func() expressions <func-expressions>`."
msgstr ""
"他のクエリ式を使用したり、他のクエリ式と統合したりする独自のクエリ式クラスを"
"書くことができます。組み込みの :ref:`Func() 式 <func-expressions>` を使用せず"
"に ``COALESCE`` SQL関数の実装を書く例を見てみましょう。"

msgid ""
"The ``COALESCE`` SQL function is defined as taking a list of columns or "
"values. It will return the first column or value that isn't ``NULL``."
msgstr ""
"SQL 関数 ``COALESCE`` はカラムや値のリストを受け取るように定義されています。"
"この関数は ``NULL`` でない最初のカラムまたは値を返します。"

msgid ""
"We'll start by defining the template to be used for SQL generation and an "
"``__init__()`` method to set some attributes::"
msgstr ""
"まずはSQL生成に使用するテンプレートと、いくつかの属性を設定する "
"``__init__()`` メソッドを定義します："

msgid ""
"We do some basic validation on the parameters, including requiring at least "
"2 columns or values, and ensuring they are expressions. We are requiring :"
"ref:`output_field<output-field>` here so that Django knows what kind of "
"model field to assign the eventual result to."
msgstr ""
"少なくとも 2 つのカラムまたは値を必要とし、式であることを確認するなど、パラ"
"メータの基本的な検証を行います。ここで :ref:`output_field<output-field>` を要"
"求しているのは、 Django が最終的な結果をどのようなモデルフィールドに代入すべ"
"きかを知るためです。"

msgid ""
"Now we implement the preprocessing and validation. Since we do not have any "
"of our own validation at this point, we delegate to the nested expressions::"
msgstr ""
"前処理とバリデーションを実装します。この時点では独自のバリデーションを行って"
"いないので、ネストした式に委譲します："

msgid "Next, we write the method responsible for generating the SQL::"
msgstr "次に、SQLを生成するメソッドを書きます："

msgid ""
"``as_sql()`` methods can support custom keyword arguments, allowing "
"``as_vendorname()`` methods to override data used to generate the SQL "
"string. Using ``as_sql()`` keyword arguments for customization is preferable "
"to mutating ``self`` within ``as_vendorname()`` methods as the latter can "
"lead to errors when running on different database backends. If your class "
"relies on class attributes to define data, consider allowing overrides in "
"your ``as_sql()`` method."
msgstr ""
"``as_sql()`` メソッドはカスタムキーワード引数をサポート可能で、これにより "
"``as_vendorname()`` メソッドがSQL文字列を生成するためのデータをオーバーライド"
"できます。``as_vendorname()`` メソッド内で ``self`` を変更するよりも、"
"``as_sql()`` キーワード引数を使用してカスタマイズする方が好ましいです。前者は"
"異なるデータベースバックエンドで実行する際にエラーを引き起こす可能性があるた"
"めです。クラスがクラス属性に依存してデータを定義している場合は、``as_sql()`` "
"メソッドでオーバーライドを許可することを検討してください。"

msgid ""
"We generate the SQL for each of the ``expressions`` by using the ``compiler."
"compile()`` method, and join the result together with commas. Then the "
"template is filled out with our data and the SQL and parameters are returned."
msgstr ""
"``compiler.compile()`` メソッドを使って各 ``expressions`` のSQLを生成し、その"
"結果をカンマで連結します。そして、テンプレートにデータを入力し、SQLとパラメー"
"タを返します。"

msgid ""
"We've also defined a custom implementation that is specific to the Oracle "
"backend. The ``as_oracle()`` function will be called instead of ``as_sql()`` "
"if the Oracle backend is in use."
msgstr ""
"また、Oracle バックエンドに特化したカスタム実装も定義しました。Oracle バック"
"エンドが使用されている場合は、 ``as_sql()`` の代わりに ``as_oracle()`` 関数が"
"呼び出されます。"

msgid ""
"Finally, we implement the rest of the methods that allow our query "
"expression to play nice with other query expressions::"
msgstr ""
"最後に、クエリ式が他のクエリ式と協調できるようにするためのメソッドを実装しま"
"す："

msgid "Let's see how it works:"
msgstr "どう動作するか見てみましょう："

msgid "Avoiding SQL injection"
msgstr "SQL インジェクションを防ぐ"

msgid ""
"Since a ``Func``'s keyword arguments for ``__init__()``  (``**extra``) and "
"``as_sql()`` (``**extra_context``) are interpolated into the SQL string "
"rather than passed as query parameters (where the database driver would "
"escape them), they must not contain untrusted user input."
msgstr ""
"``Func`` の ``__init__()`` (``**extra``) および ``as_sql()`` "
"(``**extra_context``) のキーワード引数は、 (データベースドライバがエスケープ"
"するような) クエリパラメータとして渡されるのではなく、SQL 文字列に補間される"
"ので、信頼できないユーザ入力を含んではいけません。"

msgid ""
"For example, if ``substring`` is user-provided, this function is vulnerable "
"to SQL injection::"
msgstr ""
"例えば、``substring`` がユーザーが入力したものである場合、この関数は SQL イン"
"ジェクションに対して脆弱です："

msgid ""
"This function generates an SQL string without any parameters. Since "
"``substring`` is passed to ``super().__init__()`` as a keyword argument, "
"it's interpolated into the SQL string before the query is sent to the "
"database."
msgstr ""
"この関数はパラメータなしで SQL 文字列を生成します。 ``substring`` はキーワー"
"ド引数として ``super().__init__()`` に渡されるので、クエリがデータベースに送"
"信される前に SQL 文字列に補間されます。"

msgid "Here's a corrected rewrite::"
msgstr "以下が修正後の実装です："

msgid ""
"With ``substring`` instead passed as a positional argument, it'll be passed "
"as a parameter in the database query."
msgstr ""
"代わりに ``substring`` を位置引数として渡すと、データベースクエリのパラメータ"
"として渡されます。"

msgid "Adding support in third-party database backends"
msgstr "サードパーティのデータベースバックエンドへのサポートを追加する"

msgid ""
"If you're using a database backend that uses a different SQL syntax for a "
"certain function, you can add support for it by monkey patching a new method "
"onto the function's class."
msgstr ""
"ある関数で異なる SQL 構文を使用するデータベースバックエンドを使用している場合"
"は、 その関数のクラスに新しいメソッドを追加することで対応できます。"

msgid ""
"Let's say we're writing a backend for Microsoft's SQL Server which uses the "
"SQL ``LEN`` instead of ``LENGTH`` for the :class:`~functions.Length` "
"function. We'll monkey patch a new method called ``as_sqlserver()`` onto the "
"``Length`` class::"
msgstr ""
"例えば Microsoft SQL Server 用のバックエンドを書くとしましょう。このバックエ"
"ンドでは :class:`~functions.Length` 関数に ``LENGTH`` の代わりに ``LEN`` とい"
"う SQL を使用します。 ``as_sqlserver()`` という新しいメソッドを ``Length`` ク"
"ラスに追加します："

msgid ""
"You can also customize the SQL using the ``template`` parameter of "
"``as_sql()``."
msgstr ""
"``as_sql()`` の ``template`` パラメータを使って SQL をカスタマイズすることも"
"できます。"

msgid ""
"We use ``as_sqlserver()`` because ``django.db.connection.vendor`` returns "
"``sqlserver`` for the backend."
msgstr ""
"``django.db.connection.vendor`` がバックエンドに ``sqlserver`` を返すので、 "
"``as_sqlserver()`` を使用します。"

msgid ""
"Third-party backends can register their functions in the top level "
"``__init__.py`` file of the backend package or in a top level ``expressions."
"py`` file (or package) that is imported from the top level ``__init__.py``."
msgstr ""
"サードパーティのバックエンドは、バックエンドパッケージのトップレベルの "
"``__init__.py`` ファイル、またはトップレベルの ``__init__.py`` からインポート"
"されたトップレベルの ``expressions.py`` ファイル (またはパッケージ) に関数を"
"登録できます。"

msgid ""
"For user projects wishing to patch the backend that they're using, this code "
"should live in an :meth:`AppConfig.ready()<django.apps.AppConfig.ready>` "
"method."
msgstr ""
"使用しているバックエンドにパッチを当てたいユーザプロジェクトでは、このコード"
"を :meth:`AppConfig.ready()<django.apps.AppConfig.ready>` メソッドに記述しま"
"す。"

msgid "Model field reference"
msgstr "モデルフィールドリファレンス"

msgid ""
"This document contains all the API references of :class:`Field` including "
"the `field options`_ and `field types`_ Django offers."
msgstr ""
"このドキュメントには、Django が提供する `field options`_ と `field types`_ を"
"含む、:class:`Field` の全ての API リファレンスが記載されています。"

msgid ""
"If the built-in fields don't do the trick, you can try `django-localflavor "
"<https://github.com/django/django-localflavor>`_ (`documentation <https://"
"django-localflavor.readthedocs.io/>`_), which contains assorted pieces of "
"code that are useful for particular countries and cultures."
msgstr ""
"あらかじめ用意されたフィールドでうまくいかない場合、`django-localflavor "
"<https://github.com/django/django-localflavor>`_ (`ドキュメント <https://"
"django-localflavor.readthedocs.io/>`_) を試すことができます。ここには特定の国"
"や文化に有用なコード部品が、各種取り揃えられています。"

msgid ""
"Also, you can easily :doc:`write your own custom model fields </howto/custom-"
"model-fields>`."
msgstr ""
"さらに、簡単に :doc:`あなた自身の独自のモデルフィールドを作ることもできます "
"</howto/custom-model-fields>`。"

msgid ""
"Technically, these models are defined in :mod:`django.db.models.fields`, but "
"for convenience they're imported into :mod:`django.db.models`; the standard "
"convention is to use ``from django.db import models`` and refer to fields as "
"``models.<Foo>Field``."
msgstr ""
"技術的には、これらのモデルは :mod:`django.db.models.fields` 内で定義されてい"
"ますが、利便性のため :mod:`django.db.models` にインポートされています; 標準的"
"な慣習では、``from django.db import models`` を使って、フィールドを ``models."
"<Foo>Field`` として参照します。"

msgid "Field options"
msgstr "フィールドオプション"

msgid ""
"The following arguments are available to all field types. All are optional."
msgstr "以下の引数は全てのフィールドタイプで有効です。全て省略可能です。"

msgid "``null``"
msgstr "``null``"

msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr ""
"``True`` の場合、Django はデータベース内に ``NULL`` として空の値を保持しま"
"す。デフォルトは ``False`` です。"

msgid ""
"Avoid using :attr:`~Field.null` on string-based fields such as :class:"
"`CharField` and :class:`TextField`. If a string-based field has "
"``null=True``, that means it has two possible values for \"no data\": "
"``NULL``, and the empty string. In most cases, it's redundant to have two "
"possible values for \"no data;\" the Django convention is to use the empty "
"string, not ``NULL``. One exception is when a :class:`CharField` has both "
"``unique=True`` and ``blank=True`` set. In this situation, ``null=True`` is "
"required to avoid unique constraint violations when saving multiple objects "
"with blank values."
msgstr ""
":class:`CharField` や :class:`TextField` のような文字列ベースのフィールドで"
"は :attr:`~Field.null` の使用を避けてください。文字列ベースのフィールドに "
"``null=True`` が設定されている場合、\"データがない \"という意味に2通りの値が"
"設定されていることを意味します。 ``NULL`` と空の文字列です。ほとんどの場"
"合、\"データなし\" に 2 通りの値を指定するのは冗長であり、 Django の慣例では "
"``NULL`` ではなく、空の文字列を指定します。Django の規約では ``NULL`` ではな"
"く、空文字列を使うことになっています。例外は :class:`CharField` に "
"``unique=True`` と ``blank=True`` の両方が設定されている場合です。このような"
"場合、 ``null=True`` は、空白の値を持つ複数のオブジェクトを保存する際に、ユ"
"ニーク制約違反を避けるために必要です。"

msgid ""
"For both string-based and non-string-based fields, you will also need to set "
"``blank=True`` if you wish to permit empty values in forms, as the :attr:"
"`~Field.null` parameter only affects database storage (see :attr:`~Field."
"blank`)."
msgstr ""
"文字列ベースと非文字列ベースのフィールドのどちらでも、フォーム内で空の値を許"
"容したい場合には、``blank=True`` をセットすることも必要となります。これは、:"
"attr:`~Field.null` パラメータはデータベーストレー時のみに影響するためです (:"
"attr:`~Field.blank` を参照してください)。"

msgid ""
"When using the Oracle database backend, the value ``NULL`` will be stored to "
"denote the empty string regardless of this attribute."
msgstr ""
"Oracleのデータベースバックエンドを使っているときには、この属性にかかわらず、"
"値 ``NULL`` が空の文字列を意味するために保持されます。"

msgid "``blank``"
msgstr "``blank``"

msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""
"``True`` の場合、フィールドはブランクになることが許容されます。デフォルトは "
"``False`` です。"

msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is "
"purely database-related, whereas :attr:`~Field.blank` is validation-related. "
"If a field has ``blank=True``, form validation will allow entry of an empty "
"value. If a field has ``blank=False``, the field will be required."
msgstr ""
":attr:`~Field.null` とは異なる点に注意してください。:attr:`~Field.null` が純"
"粋にデータベースに関連する一方で、:attr:`~Field.blank` はバリデーションに関連"
"します。フィールドが ``blank=True`` を持つ場合、フォームバリデーションは空の"
"値のエントリーを許容します。``blank=False`` を持つ場合、フィールドは必須とな"
"ります。"

msgid "Supplying missing values"
msgstr "欠損値の補完"

msgid ""
"``blank=True`` can be used with fields having ``null=False``, but this will "
"require implementing :meth:`~django.db.models.Model.clean` on the model in "
"order to programmatically supply any missing values."
msgstr ""
"``blank=True``は ``null=False`` のフィールドでも使用できますが、この場合、 :"
"meth:`~django.db.models.Model.clean` を実装し、欠損値をプログラムで補完する必"
"要があります。"

msgid "``choices``"
msgstr "``choices``"

msgid ""
"A mapping or iterable in the format described below to use as choices for "
"this field. If choices are given, they're enforced by :ref:`model validation "
"<validating-objects>` and the default form widget will be a select box with "
"these choices instead of the standard text field."
msgstr ""
"このフィールドの選択肢として使用するための、以下で説明する形式のマッピングま"
"たはイテラブルです。choices が指定された場合、 :ref:`モデルのバリデーション "
"<validating-objects>` によって強制的に、デフォルトのフォームウィジェットが通"
"常のテキストフィールドの代わりにこれらの選択肢を持つセレクトボックスになりま"
"す。"

msgid ""
"If a mapping is given, the key element is the actual value to be set on the "
"model, and the second element is the human readable name. For example::"
msgstr ""
"マッピングが指定された場合、キー要素はモデルに設定される実際の値で、2番目の要"
"素は人間が読める名前です。例えば"

msgid ""
"You can also pass a :term:`sequence` consisting itself of iterables of "
"exactly two items (e.g. ``[(A1, B1), (A2, B2), …]``). The first element in "
"each tuple is the actual value to be set on the model, and the second "
"element is the human-readable name. For example::"
msgstr ""
"また、 :term:`sequence` として、ちょうど2つの項目からなるイテラブルを渡すこと"
"もできます (例 ``[(A1, B1), (A2, B2), ...]``)。各タプルの最初の要素はモデルに"
"設定される実際の値で、2番目の要素は人間が読める名前です。例えば"

msgid ""
"``choices`` can also be defined as a callable that expects no arguments and "
"returns any of the formats described above. For example::"
msgstr ""
"また、``choices`` は、上記のいずれかのフォーマットを返す引数なしの呼び出し可"
"能オブジェクトとして定義することもできます。例えば"

msgid ""
"Passing a callable for ``choices`` can be particularly handy when, for "
"example, the choices are:"
msgstr ""
"``choice`` に呼び出し可能オブジェクトを渡すと、例えば選択肢が以下のような場合"
"に特に便利です："

msgid ""
"the result of I/O-bound operations (which could potentially be cached), such "
"as querying a table in the same or an external database, or accessing the "
"choices from a static file."
msgstr ""
"同じデータベースや外部データベースのテーブルをクエリしたり、静的ファイルから"
"選択肢にアクセスしたりするような、I/Oバウンド操作の結果（キャッシュされる可能"
"性があります）。"

msgid ""
"a list that is mostly stable but could vary from time to time or from "
"project to project. Examples in this category are using third-party apps "
"that provide a well-known inventory of values, such as currencies, "
"countries, languages, time zones, etc."
msgstr ""
"ほぼ安定しているが、場合によって、あるいはプロジェクトによって異なる可能性の"
"あるリスト。このカテゴリの例は、通貨、国、言語、タイムゾーンなど、よく知られ"
"た値のインベントリを提供するサードパーティのアプリを使用する場合などです。"

msgid "Support for mappings and callables was added."
msgstr "マッピングと callable のサポートが追加されました。"

msgid ""
"Generally, it's best to define choices inside a model class, and to define a "
"suitably-named constant for each value::"
msgstr ""
"一般的に、モデルクラスの内部で選択肢を定義し、それぞれの値に適切に名前づけら"
"れた定数を定義するのがベストです::"

msgid ""
"Though you can define a choices list outside of a model class and then refer "
"to it, defining the choices and names for each choice inside the model class "
"keeps all of that information with the class that uses it, and helps "
"reference the choices (e.g, ``Student.SOPHOMORE`` will work anywhere that "
"the ``Student`` model has been imported)."
msgstr ""
"モデルクラスの外側で選択肢リストを定義し、それを参照することもできますが、モ"
"デルクラスの内側で選択肢と各選択肢の名前を定義することで、その情報を使用する"
"クラスで保持し、選択肢を参照しやすくなります（例えば、``Student.SOPHOMORE`` "
"は ``Student`` モデルがインポートされていればどこでも動作します）。"

msgid ""
"You can also collect your available choices into named groups that can be "
"used for organizational purposes::"
msgstr ""
"利用可能な選択肢を、組織化のために名前付きグループにまとめることもできます。"

msgid ""
"The key of the mapping is the name to apply to the group and the value is "
"the choices inside that group, consisting of the field value and a human-"
"readable name for an option. Grouped options may be combined with ungrouped "
"options within a single mapping (such as the ``\"unknown\"`` option in this "
"example)."
msgstr ""
"マッピングのキーはグループに適用する名前であり、値はそのグループ内の選択肢"
"で、フィールドの値とオプションの人間が読める名前からなります。グループ化され"
"たオプションは、1つのマッピングの中でグループ化されていないオプションと組み合"
"わせることができます（この例の ``\"unknown\"`` オプションのように）。"

msgid "You can also use a sequence, e.g. a list of 2-tuples::"
msgstr "2値タプルのリストなど、シーケンスを使うこともできます："

msgid ""
"Note that choices can be any sequence object -- not necessarily a list or "
"tuple. This lets you construct choices dynamically. But if you find yourself "
"hacking :attr:`~Field.choices` to be dynamic, you're probably better off "
"using a proper database table with a :class:`ForeignKey`. :attr:`~Field."
"choices` is meant for static data that doesn't change much, if ever."
msgstr ""
"選択肢はリストやタプルである必要はなく、任意のシーケンスオブジェクトを指定で"
"きることに注意してください。これにより、選択肢を動的に構築できます。しか"
"し、 :attr:`~Field.choices` をハックして動的にするのであれば、 :class:"
"`ForeignKey` を持つ適切なデータベーステーブルを使用した方が良いでしょう。 :"
"attr:`~Field.choices` はあまり変更されない静的なデータのためのものです。"

msgid "A new migration is created each time the order of ``choices`` changes."
msgstr ""
"``choices`` の順番を変更すると、変更のたびに新しいマイグレーションが生成され"
"ます。"

msgid ""
"For each model field that has :attr:`~Field.choices` set, Django will "
"normalize the choices to a list of 2-tuples and add a method to retrieve the "
"human-readable name for the field's current value. See :meth:`~django.db."
"models.Model.get_FOO_display` in the database API documentation."
msgstr ""
":attr:`~Field.choices` が設定されている各モデルフィールドに対して、 Django は"
"選択肢を2値タプルのリストに正規化し、フィールドの現在の値に対して、 人間が読"
"める名前を取得するメソッドを追加します。データベース API ドキュメントの :"
"meth:`~django.db.models.Model.get_FOO_display` を参照してください。"

msgid ""
"Unless :attr:`blank=False<Field.blank>` is set on the field along with a :"
"attr:`~Field.default` then a label containing ``\"---------\"`` will be "
"rendered with the select box. To override this behavior, add a tuple to "
"``choices`` containing ``None``; e.g. ``(None, 'Your String For Display')``. "
"Alternatively, you can use an empty string instead of ``None`` where this "
"makes sense - such as on a :class:`~django.db.models.CharField`."
msgstr ""
":attr:`blank=False<Field.blank>` が :attr:`~Field.default` とともにフィールド"
"上にセットされない限り、``\"---------\"`` を含むラベルがセレクトボックスに表"
"示されます。この動作をオーバーライドするためには、``None`` を含む "
"``choices`` にタプルを追加してください。たとえば ``(None, '表示専用の文字"
"列')``. もしくは、``None`` の代わりに空の文字列を使うこともできます。これは特"
"に :class:`~django.db.models.CharField` などに適しています。"

msgid "Enumeration types"
msgstr "列挙型"

msgid ""
"In addition, Django provides enumeration types that you can subclass to "
"define choices in a concise way::"
msgstr ""
"さらに Django には、選択肢を簡潔に定義するためにサブクラス化できる列挙型があ"
"ります："

msgid ""
"These work similar to :mod:`enum` from Python's standard library, but with "
"some modifications:"
msgstr ""
"これらはPythonの標準ライブラリの :mod:`enum` と似たような動作をしますが、若干"
"の変更が加えられています："

msgid ""
"Enum member values are a tuple of arguments to use when constructing the "
"concrete data type. Django supports adding an extra string value to the end "
"of this tuple to be used as the human-readable name, or ``label``. The "
"``label`` can be a lazy translatable string. Thus, in most cases, the member "
"value will be a ``(value, label)`` 2-tuple. See below for :ref:`an example "
"of subclassing choices <field-choices-enum-subclassing>` using a more "
"complex data type. If a tuple is not provided, or the last item is not a "
"(lazy) string, the ``label`` is :ref:`automatically generated <field-choices-"
"enum-auto-label>` from the member name."
msgstr ""
"列挙型のメンバ値は、具象データ型を構築するときに使う引数のタプルです。Django "
"はこのタプルの末尾に、人間が読める名前、つまり ``label`` として使われる文字列"
"値を追加することをサポートしています。この ``label`` は遅延 (Lazy な) 翻訳が"
"可能な文字列です。したがって、ほとんどの場合、メンバの値は ``(value, "
"label)`` の2値タプルになります。より複雑なデータ型を使用した :ref:`選択肢のサ"
"ブクラスの例 <field-choices-enum-subclassing>` については以下を参照してくださ"
"い。タプルが提供されない場合、あるいは最後の項目が（lazyな）文字列でない場"
"合、 ``label`` はメンバー名から :ref:`自動的に生成 <field-choices-enum-auto-"
"label>` されます。"

msgid ""
"A ``.label`` property is added on values, to return the human-readable name."
msgstr "値には ``.label`` プロパティが追加され、人間が読める名前を返します。"

msgid ""
"A number of custom properties are added to the enumeration classes -- ``."
"choices``, ``.labels``, ``.values``, and ``.names`` -- to make it easier to "
"access lists of those separate parts of the enumeration."
msgstr ""
"列挙型クラスには、 ``.choices``, ``.labels``, ``.values``, ``.names`` などの"
"カスタムプロパティが追加されており、これらの列挙型の異なる部分のリストに簡単"
"にアクセスできるようになっています。"

msgid ""
"These property names cannot be used as member names as they would conflict."
msgstr "これらのプロパティ名をメンバ名として使用することはできません。"

msgid ""
"The use of :func:`enum.unique()` is enforced to ensure that values cannot be "
"defined multiple times. This is unlikely to be expected in choices for a "
"field."
msgstr ""
"値が複数回定義できないようにするため、 :func:`enum.unique()` の使用が強制され"
"ます。これはフィールドの choices ではあまり期待されません。"

msgid ""
"Note that using ``YearInSchool.SENIOR``, ``YearInSchool['SENIOR']``, or "
"``YearInSchool('SR')`` to access or lookup enum members work as expected, as "
"do the ``.name`` and ``.value`` properties on the members."
msgstr ""
"なお、 ``YearInSchool.SENIOR``, ``YearInSchool['SENIOR']``, "
"``YearInSchool('SR')`` を使用して列挙型のメンバにアクセスしたり、メンバの ``."
"name`` と ``.value`` プロパティを参照したりすることは期待通りに動作します。"

msgid ""
"If you don't need to have the human-readable names translated, you can have "
"them inferred from the member name (replacing underscores with spaces and "
"using title-case):"
msgstr ""
"人が読める名前を翻訳する必要がない場合は、メンバ名から推測してそれらを自動設"
"定させることができます（アンダースコアをスペースに置き換え、タイトルケースを"
"使用します）："

msgid ""
"Since the case where the enum values need to be integers is extremely "
"common, Django provides an ``IntegerChoices`` class. For example::"
msgstr ""
"列挙値が整数である必要があるケースは非常に多いので、Django は "
"``IntegerChoices`` クラスを用意しています。例えば"

msgid ""
"It is also possible to make use of the `Enum Functional API <https://docs."
"python.org/3/howto/enum.html#functional-api>`_ with the caveat that labels "
"are automatically generated as highlighted above:"
msgstr ""
"また、 `Enum Functional API <https://docs.python.org/3/howto/enum."
"html#functional-api>`_ を利用することもできます。この場合、ラベルは上記のよう"
"に自動的に生成されます："

msgid ""
"If you require support for a concrete data type other than ``int`` or "
"``str``, you can subclass ``Choices`` and the required concrete data type, e."
"g. :class:`~datetime.date` for use with :class:`~django.db.models."
"DateField`::"
msgstr ""
"もし ``int`` や ``str`` 以外の具象データ型のサポートが必要であれば、 "
"``Choices`` と必要な具象データ型、例えば :class:`~datetime.date` を :class:"
"`~django.db.models.DateField` で使用するようにサブクラス化できます："

msgid "There are some additional caveats to be aware of:"
msgstr "さらに注意すべき点がいくつかあります："

msgid ""
"Enumeration types do not support :ref:`named groups <field-choices-named-"
"groups>`."
msgstr ""
"列挙型は :ref:`名前付きグループ <field-choices-named-groups>` をサポートして"
"いません。"

msgid ""
"Because an enumeration with a concrete data type requires all values to "
"match the type, overriding the :ref:`blank label <field-choices-blank-"
"label>` cannot be achieved by creating a member with a value of ``None``. "
"Instead, set the ``__empty__`` attribute on the class::"
msgstr ""
"具体的なデータ型を持つ列挙型では、すべての値がそのデータ型に一致する必要があ"
"るため、 :ref:`blank label <field-choices-blank-label>` をオーバーライドする"
"際に、 ``None`` という値を持つメンバを作成することはできません。代わりに、ク"
"ラスに ``__empty__`` 属性を設定します："

msgid ""
"Support for using enumeration types directly in the ``choices`` was added."
msgstr "選択肢 ``choices`` で列挙型を直接使用できるようになりました。"

msgid "``db_column``"
msgstr "``db_column``"

msgid ""
"The name of the database column to use for this field. If this isn't given, "
"Django will use the field's name."
msgstr ""
"このフィールドを使用するためのデータベースのカラムの名前です。もし与えられな"
"ければ、Django はフィールド名を使用します。"

msgid ""
"If your database column name is an SQL reserved word, or contains characters "
"that aren't allowed in Python variable names -- notably, the hyphen -- "
"that's OK. Django quotes column and table names behind the scenes."
msgstr ""
"データベースのカラム名が SQL の予約語だったり、Python の変数名として使用でき"
"ない文字 (特に多いのがハイフン) が含まれていたとしても大丈夫です。Django はカ"
"ラムとテーブルの名前を自動的にクオートして処理してくれます。"

msgid "``db_comment``"
msgstr "``db_comment``"

msgid ""
"The comment on the database column to use for this field. It is useful for "
"documenting fields for individuals with direct database access who may not "
"be looking at your Django code. For example::"
msgstr ""
"このフィールドに使うデータベースカラムのコメントです。あなたの Django コード"
"を見ていないような、データベースに直接アクセスできる人のために、フィールドを"
"ドキュメント化するのに便利です。例えば："

msgid "``db_default``"
msgstr "``db_default``"

msgid ""
"The database-computed default value for this field. This can be a literal "
"value or a database function, such as :class:`~django.db.models.functions."
"Now`::"
msgstr ""
"データベースによって計算されるこのフィールドのデフォルト値。これはリテラル値"
"でも、 :class:`~django.db.models.functions.Now` のようなデータベース関数でも"
"構いません："

msgid ""
"More complex expressions can be used, as long as they are made from literals "
"and database functions::"
msgstr ""
"リテラルやデータベース関数から構成する限り、より複雑な式を使用できます："

msgid ""
"Database defaults cannot reference other fields or models. For example, this "
"is invalid::"
msgstr ""
"データベースのデフォルトは、他のフィールドやモデルを参照することはできませ"
"ん。例えば、これは無効です："

msgid ""
"If both ``db_default`` and :attr:`Field.default` are set, ``default`` will "
"take precedence when creating instances in Python code. ``db_default`` will "
"still be set at the database level and will be used when inserting rows "
"outside of the ORM or when adding a new field in a migration."
msgstr ""
"もし ``db_default`` と :attr:`Field.default` の両方が指定された場合、Python "
"コードでインスタンスを作成する際には ``default`` が優先されます。データベース"
"レベルでも ``db_default`` が設定され、ORM の外部で行を挿入するときや、マイグ"
"レーションで新しいフィールドを追加するときに使用されます。"

msgid "``db_index``"
msgstr "``db_index``"

msgid "If ``True``, a database index will be created for this field."
msgstr ""
"``True`` の場合、データベースインデックスがこのフィールドのために生成されま"
"す。"

msgid "Use the :attr:`~Options.indexes` option instead."
msgstr "代わりに :attr:`~Options.indexes` オプションを使用してください。"

msgid ""
"Where possible, use the :attr:`Meta.indexes <Options.indexes>` option "
"instead. In nearly all cases, :attr:`~Options.indexes` provides more "
"functionality than ``db_index``. ``db_index`` may be deprecated in the "
"future."
msgstr ""
"可能であれば、代わりに :attr:`Meta.indexes <Options.indexes>` オプションを使"
"用してください。ほとんどの場合、 :attr:`~Options.indexes` は ``db_index`` よ"
"りも多くの機能を提供します。 ``db_index`` は将来廃止される可能性があります。"

msgid "``db_tablespace``"
msgstr "``db_tablespace``"

msgid ""
"The name of the :doc:`database tablespace </topics/db/tablespaces>` to use "
"for this field's index, if this field is indexed. The default is the "
"project's :setting:`DEFAULT_INDEX_TABLESPACE` setting, if set, or the :attr:"
"`~Options.db_tablespace` of the model, if any. If the backend doesn't "
"support tablespaces for indexes, this option is ignored."
msgstr ""
"このフィールドにインデックスが作成されている場合に、このフィールドのインデッ"
"クスに使用する :doc:`データベース テーブル空間 </topics/db/tablespaces>` の名"
"前です。デフォルトはプロジェクトの :setting:`DEFAULT_INDEX_TABLESPACE` が設定"
"されている場合はその設定値、またはモデルの :attr:`~Options.db_tablespace` が"
"設定されている場合はその設定値です。バックエンドがインデックスのテーブル空間"
"をサポートしていない場合、このオプションは無視されます。"

msgid "``default``"
msgstr "``default``"

msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr ""
"そのフィールドのデフォルト値です。このオプションには特定の値もしくは呼び出し"
"可能オブジェクトを渡すことができます。もし渡した値が呼び出し可能であれば新し"
"くオブジェクトが生成される度に呼び出されます。"

msgid ""
"The default can't be a mutable object (model instance, ``list``, ``set``, "
"etc.), as a reference to the same instance of that object would be used as "
"the default value in all new model instances. Instead, wrap the desired "
"default in a callable. For example, if you want to specify a default "
"``dict`` for :class:`~django.db.models.JSONField`, use a function::"
msgstr ""
"デフォルト値はミュータブルなオブジェクト（モデルのインスタンス、 ``list`` 、 "
"``set`` など）にはできません。そのオブジェクトの同じインスタンスへの参照が、"
"すべての新しいモデルインスタンスのデフォルト値として使用されてしまうからで"
"す。代わりに、必要なデフォルト値を呼び出し可能オブジェクトでラップします。例"
"えば、 :class:`~django.db.models.JSONField` に対してデフォルトの ``dict`` を"
"指定したい場合、下記のような関数を使用します："

msgid ""
"``lambda``\\s can't be used for field options like ``default`` because they "
"can't be :ref:`serialized by migrations <migration-serializing>`. See that "
"documentation for other caveats."
msgstr ""
"``lambda`` は :ref:`マイグレーションでシリアライズ <migration-serializing>` "
"できないので、``default`` のようなフィールドオプションには使えません。その他"
"の注意点についてはドキュメントを参照してください。"

msgid ""
"For fields like :class:`ForeignKey` that map to model instances, defaults "
"should be the value of the field they reference (``pk`` unless :attr:"
"`~ForeignKey.to_field` is set) instead of model instances."
msgstr ""
":class:`ForeignKey` のようにモデルインスタンスにマッピングされるフィールドの"
"場合、デフォルトはモデルインスタンスではなく、参照するフィールドの値 (:attr:"
"`~ForeignKey.to_field` が設定されていない限り ``pk``) になります。"

msgid ""
"The default value is used when new model instances are created and a value "
"isn't provided for the field. When the field is a primary key, the default "
"is also used when the field is set to ``None``."
msgstr ""
"デフォルト値は、新しいモデルインスタンスが作成され、フィールドに値が提供され"
"ていない場合に使用されます。フィールドがプライマリキーの場合、フィールドが "
"``None`` に設定されているときにもデフォルト値が使われます。"

msgid ""
"The default value can also be set at the database level with :attr:`Field."
"db_default`."
msgstr ""
"デフォルト値は :attr:`Field.db_default` でデータベースレベルで設定することも"
"できます。"

msgid "``editable``"
msgstr "``editable``"

msgid ""
"If ``False``, the field will not be displayed in the admin or any other :"
"class:`~django.forms.ModelForm`. They are also skipped during :ref:`model "
"validation <validating-objects>`. Default is ``True``."
msgstr ""
"``False`` の場合、フィールドは管理画面や他の :class:`~django.forms."
"ModelForm` に表示されません。また、 :ref:`モデルのバリデーション <validating-"
"objects>` の間、フィールドはスキップされます。デフォルトは ``True`` です。"

msgid ""
"The ``error_messages`` argument lets you override the default messages that "
"the field will raise. Pass in a dictionary with keys matching the error "
"messages you want to override."
msgstr ""
"引数 ``error_messages`` を指定すると、フィールドが表示するデフォルトのメッ"
"セージを上書きできます。オーバーライドしたいエラーメッセージにマッチするキー"
"を持つ辞書を渡してください。"

msgid ""
"Error message keys include ``null``, ``blank``, ``invalid``, "
"``invalid_choice``, ``unique``, and ``unique_for_date``. Additional error "
"message keys are specified for each field in the `Field types`_ section "
"below."
msgstr ""
"エラーメッセージのキーには ``null``, ``blank``, ``invalid``, "
"``invalid_choice``, ``unique``, ``unique_for_date`` があります。その他のエ"
"ラーメッセージのキーは、以下の `Field types`_ セクションでフィールドごとに指"
"定します。"

msgid ""
"These error messages often don't propagate to forms. See :ref:"
"`considerations-regarding-model-errormessages`."
msgstr ""
"これらのエラーメッセージはフォームに伝搬しないことがよくあります。 :ref:"
"`considerations-regarding-model-errormessages` を参照してください。"

msgid ""
"Extra \"help\" text to be displayed with the form widget. It's useful for "
"documentation even if your field isn't used on a form."
msgstr ""
"フォームウィジェットと共に表示される \"補助\" テキストになります。この値は"
"フィールドがフォームとして利用されない場合でもドキュメント化する際に有用で"
"す。"

msgid ""
"Note that this value is *not* HTML-escaped in automatically-generated forms. "
"This lets you include HTML in :attr:`~Field.help_text` if you so desire. For "
"example::"
msgstr ""
"この値は自動生成されたフォームではHTMLエスケープされないことに注意してくださ"
"い。これにより、 :attr:`~Field.help_text` にHTMLを含めることができます。例え"
"ば："

msgid ""
"Alternatively you can use plain text and :func:`django.utils.html.escape` to "
"escape any HTML special characters. Ensure that you escape any help text "
"that may come from untrusted users to avoid a cross-site scripting attack."
msgstr ""
"あるいは、プレーンテキストを使い、 :func:`django.utils.html.escape` で HTML "
"の特殊文字をエスケープすることもできます。クロスサイトスクリプティング攻撃を"
"避けるために、信頼できないユーザから来る可能性のあるヘルプテキストは必ずエス"
"ケープしてください。"

msgid "``primary_key``"
msgstr "``primary_key``"

msgid "If ``True``, this field is the primary key for the model."
msgstr "``True`` の場合、設定したフィールドはそのモデルの主キーとなります。"

msgid ""
"If you don't specify ``primary_key=True`` for any field in your model, "
"Django will automatically add a field to hold the primary key, so you don't "
"need to set ``primary_key=True`` on any of your fields unless you want to "
"override the default primary-key behavior. The type of auto-created primary "
"key fields can be specified per app in :attr:`AppConfig.default_auto_field "
"<django.apps.AppConfig.default_auto_field>` or globally in the :setting:"
"`DEFAULT_AUTO_FIELD` setting. For more, see :ref:`automatic-primary-key-"
"fields`."
msgstr ""
"モデル内のどのフィールドにも ``primary_key=True`` を指定しなければ、 Django "
"は自動的に主キーを保持するフィールドを追加しますので、デフォルトの主キーの動"
"作を上書きしたくない限り、どのフィールドにも ``primary_key=True`` を設定する"
"必要はありません。自動作成される主キーフィールドの種類は、 :attr:`AppConfig."
"default_auto_field <django.apps.AppConfig.default_auto_field>` でアプリごとに"
"指定するか、 :setting:`DEFAULT_AUTO_FIELD` 設定でグローバルに指定できます。詳"
"しくは :ref:`automatic-primary-key-fields` を参照してください。"

msgid ""
"``primary_key=True`` implies :attr:`null=False <Field.null>` and :attr:"
"`unique=True <Field.unique>`. Only one primary key is allowed on an object."
msgstr ""
"``primary_key=True`` は :attr:`null=False <Field.null>` と :attr:"
"`unique=True <Field.unique>` を意味します。オブジェクトに指定できる主キーは1"
"つだけです。"

msgid ""
"The primary key field is read-only. If you change the value of the primary "
"key on an existing object and then save it, a new object will be created "
"alongside the old one."
msgstr ""
"主キー・フィールドは読み取り専用です。既存のオブジェクトの主キーの値を変更し"
"て保存すると、古いオブジェクトはそのままで新しいオブジェクトが作成されます。"

msgid ""
"The primary key field is set to ``None`` when :meth:`deleting <django.db."
"models.Model.delete>` an object."
msgstr ""
"オブジェクトを :meth:`削除する <django.db.models.Model.delete>` 際に、プライ"
"マリキーフィールドは ``None`` に設定されます。"

msgid "If ``True``, this field must be unique throughout the table."
msgstr ""
"``True`` の場合、そのフィールドはテーブル上で一意となる制約を受けます。"

msgid ""
"This is enforced at the database level and by model validation. If you try "
"to save a model with a duplicate value in a :attr:`~Field.unique` field, a :"
"exc:`django.db.IntegrityError` will be raised by the model's :meth:`~django."
"db.models.Model.save` method."
msgstr ""
"これはデータベースレベルとモデルのバリデーションで強制されます。 :attr:"
"`~Field.unique` フィールドの値が重複しているモデルを保存しようとすると、モデ"
"ルの :meth:`~django.db.models.Model.save` メソッドによって :exc:`django.db."
"IntegrityError` が発生します。"

msgid ""
"This option is valid on all field types except :class:`ManyToManyField` and :"
"class:`OneToOneField`."
msgstr ""
"このオプションは :class:`ManyToManyField` と :class:`OneToOneField` 以外の全"
"てのフィールドタイプで有効です。"

msgid ""
"Note that when ``unique`` is ``True``, you don't need to specify :attr:"
"`~Field.db_index`, because ``unique`` implies the creation of an index."
msgstr ""
"``unique`` が ``True`` の場合、:attr:`~Field.db_index` を指定する必要はないこ"
"とに注意してください。なぜなら ``unique`` がインデックスの作成を意味するから"
"です。"

msgid "``unique_for_date``"
msgstr "``unique_for_date``"

msgid ""
"Set this to the name of a :class:`DateField` or :class:`DateTimeField` to "
"require that this field be unique for the value of the date field."
msgstr ""
"これを :class:`DateField` または :class:`DateTimeField` の名前に設定すると、"
"このフィールドが日付フィールドの値に対して一意であることを要求します。"

msgid ""
"For example, if you have a field ``title`` that has "
"``unique_for_date=\"pub_date\"``, then Django wouldn't allow the entry of "
"two records with the same ``title`` and ``pub_date``."
msgstr ""
"例えば、 ``title`` フィールドに ``unique_for_date=\"pub_date\"`` を指定した場"
"合、 Django は同じ ``title`` と ``pub_date`` を持つ 2 つのレコードの入力を許"
"可しません。"

msgid ""
"Note that if you set this to point to a :class:`DateTimeField`, only the "
"date portion of the field will be considered. Besides, when :setting:"
"`USE_TZ` is ``True``, the check will be performed in the :ref:`current time "
"zone <default-current-time-zone>` at the time the object gets saved."
msgstr ""
":class:`DateTimeField` を指すように設定した場合は、フィールドの日付部分のみが"
"考慮されることに注意してください。また、 :setting:`USE_TZ` が ``True`` の場"
"合、オブジェクトの保存時に :ref:`カレントタイムゾーン <default-current-time-"
"zone>` でチェックが行われます。"

msgid ""
"This is enforced by :meth:`Model.validate_unique()` during model validation "
"but not at the database level. If any :attr:`~Field.unique_for_date` "
"constraint involves fields that are not part of a :class:`~django.forms."
"ModelForm` (for example, if one of the fields is listed in ``exclude`` or "
"has :attr:`editable=False<Field.editable>`), :meth:`Model.validate_unique()` "
"will skip validation for that particular constraint."
msgstr ""
"これはモデルの検証時に :meth:`Model.validate_unique()` によって強制されます"
"が、データベースレベルでは強制されません。 :attr:`~Field.unique_for_date` 制"
"約が :class:`~django.forms.ModelForm` の一部ではないフィールドを含む場合 (例"
"えば、フィールドの一つが ``exclude`` にリストされていたり、 :attr:"
"`editable=False<Field.editable>` を持っている場合)、 :meth:`Model."
"validate_unique()` はその特定の制約の検証をスキップします。"

msgid "``unique_for_month``"
msgstr "``unique_for_month``"

msgid ""
"Like :attr:`~Field.unique_for_date`, but requires the field to be unique "
"with respect to the month."
msgstr ""
":attr:`~Field.unique_for_date` と似ていますが、フィールドが月に対して一意であ"
"る必要があります。"

msgid "``unique_for_year``"
msgstr "``unique_for_year``"

msgid ""
"Like :attr:`~Field.unique_for_date` and :attr:`~Field.unique_for_month`."
msgstr ""
":attr:`~Field.unique_for_date` や :attr:`~Field.unique_for_month` と同様で"
"す。"

msgid "``verbose_name``"
msgstr "``verbose_name``"

msgid ""
"A human-readable name for the field. If the verbose name isn't given, Django "
"will automatically create it using the field's attribute name, converting "
"underscores to spaces. See :ref:`Verbose field names <verbose-field-names>`."
msgstr ""
"人間が読めるフィールド名。verbose な名前が指定されていない場合、 Django は"
"フィールドの属性名を使って自動的にフィールドを作成し、アンダースコアをスペー"
"スに変換します。詳しくは :ref:`verbose なフィールド名 <verbose-field-names>` "
"を参照してください。"

msgid ""
"A list of validators to run for this field. See the :doc:`validators "
"documentation </ref/validators>` for more information."
msgstr ""
"このフィールドに対して実行するバリデータのリスト。詳細は :doc:`バリデータのド"
"キュメント </ref/validators>` を参照してください。"

msgid "Field types"
msgstr "フィールドの型"

msgid "``AutoField``"
msgstr "``AutoField``"

msgid ""
"An :class:`IntegerField` that automatically increments according to "
"available IDs. You usually won't need to use this directly; a primary key "
"field will automatically be added to your model if you don't specify "
"otherwise. See :ref:`automatic-primary-key-fields`."
msgstr ""
"利用可能な ID に応じて、自動的にインクリメントする :class:`IntegerField` で"
"す。通常は直接使う必要はありません; 指定しない場合は、主キーのフィールドが自"
"動的にモデルに追加されます。:ref:`automatic-primary-key-fields` も参照してく"
"ださい。"

msgid "``BigAutoField``"
msgstr "``BigAutoField``"

msgid ""
"A 64-bit integer, much like an :class:`AutoField` except that it is "
"guaranteed to fit numbers from ``1`` to ``9223372036854775807``."
msgstr ""
"64 ビットの数値です。``1`` から ``9223372036854775807`` までの数を扱える以外"
"は、:class:`AutoField` と同じです。"

msgid "``BigIntegerField``"
msgstr "``BigIntegerField``"

msgid ""
"A 64-bit integer, much like an :class:`IntegerField` except that it is "
"guaranteed to fit numbers from ``-9223372036854775808`` to "
"``9223372036854775807``. The default form widget for this field is a :class:"
"`~django.forms.NumberInput`."
msgstr ""
"64 ビットの整数で、 :class:`IntegerField` とよく似ていますが、 "
"``-9223372036854775808`` から ``9223372036854775807`` までの数値が入ることが"
"保証されています。このフィールドのデフォルトのフォームウィジェットは :class:"
"`~django.forms.NumberInput` です。"

msgid "``BinaryField``"
msgstr "``BinaryField``"

msgid ""
"A field to store raw binary data. It can be assigned :class:`bytes`, :class:"
"`bytearray`, or :class:`memoryview`."
msgstr ""
"生のバイナリデータを格納するフィールドです。 :class:`bytes`, :class:"
"`bytearray` または :class:`memoryview` を指定できます。"

msgid ""
"By default, ``BinaryField`` sets :attr:`~Field.editable` to ``False``, in "
"which case it can't be included in a :class:`~django.forms.ModelForm`."
msgstr ""
"デフォルトでは、 ``BinaryField`` は :attr:`~Field.editable` を ``False`` に設"
"定します。この場合、 :class:`~django.forms.ModelForm` に含めることはできませ"
"ん。"

msgid ""
"Optional. The maximum length (in bytes) of the field. The maximum length is "
"enforced in Django's validation using :class:`~django.core.validators."
"MaxLengthValidator`."
msgstr ""
"オプション。フィールドの最大長 (バイト単位)。最大長は :class:`~django.core."
"validators.MaxLengthValidator` を使ったDjango のバリデーションで強制されま"
"す。"

msgid "Abusing ``BinaryField``"
msgstr "``BinaryField`` を誤用する"

msgid ""
"Although you might think about storing files in the database, consider that "
"it is bad design in 99% of the cases. This field is *not* a replacement for "
"proper :doc:`static files </howto/static-files/index>` handling."
msgstr ""
"ファイルをデータベース内に格納したいと考えるかもしれませんが、99%のケースにお"
"いてそれは悪い設計です。このフィールドは、適切な :doc:`静的ファイル </howto/"
"static-files/index>` の取り扱いに対する代替手段では *ありません* 。"

msgid "A true/false field."
msgstr "true/false のフィールドです。"

msgid ""
"The default form widget for this field is :class:`~django.forms."
"CheckboxInput`, or :class:`~django.forms.NullBooleanSelect` if :attr:"
"`null=True <Field.null>`."
msgstr ""
"このフィールドのデフォルトのフォームウィジェットは :class:`~django.forms."
"CheckboxInput` で、 :attr:`null=True <Field.null>` の場合は :class:`~django."
"forms.NullBooleanSelect` です。"

msgid ""
"The default value of ``BooleanField`` is ``None`` when :attr:`Field.default` "
"isn't defined."
msgstr ""
":attr:`Field.default` が定義されていないときの ``BooleanField`` のデフォルト"
"値は ``None`` です。"

msgid "A string field, for small- to large-sized strings."
msgstr "小 - 大サイズの文字列のフィールドです。"

msgid "For large amounts of text, use :class:`~django.db.models.TextField`."
msgstr ""
"多量のテキストを扱うときは :class:`~django.db.models.TextField` を使ってくだ"
"さい。"

msgid ""
"The default form widget for this field is a :class:`~django.forms.TextInput`."
msgstr ""
"このフィールドのデフォルトのフォームウィジェットは :class:`~django.forms."
"TextInput` です。"

msgid ":class:`CharField` has the following extra arguments:"
msgstr ":class:`CharField` には以下の追加引数があります："

msgid ""
"The maximum length (in characters) of the field. The ``max_length`` is "
"enforced at the database level and in Django's validation using :class:"
"`~django.core.validators.MaxLengthValidator`. It's required for all database "
"backends included with Django except PostgreSQL, which supports unlimited "
"``VARCHAR`` columns."
msgstr ""
"フィールドの最大長 (文字数)。 :class:`~django.core.validators."
"MaxLengthValidator` を使って、 ``max_length`` をデータベースレベルと Django "
"のバリデーションで強制します。これは PostgreSQL 以外の Django に含まれる全て"
"のデータベースバックエンドで必要です。PostgreSQL は無制限の ``VARCHAR`` カラ"
"ムをサポートしています。"

msgid ""
"If you are writing an application that must be portable to multiple database "
"backends, you should be aware that there are restrictions on ``max_length`` "
"for some backends. Refer to the :doc:`database backend notes </ref/"
"databases>` for details."
msgstr ""
"複数のデータベースバックエンド間で使われるアプリケーションを作る場合は、いく"
"つかのバックエンドで ``max_length`` に制限があることに注意しなければなりませ"
"ん。詳しくは :doc:`データベースバックエンドの注意事項 </ref/databases>` を参"
"照してください。"

msgid "Support for unlimited ``VARCHAR`` columns was added on PostgreSQL."
msgstr "PostgreSQL で無制限の ``VARCHAR`` 列のサポートが追加されました。"

msgid "Optional. The database collation name of the field."
msgstr "オプション。フィールドのデータベース照合順序名(collation name)です。"

msgid ""
"Collation names are not standardized. As such, this will not be portable "
"across multiple database backends."
msgstr ""
"照合順序名は標準化されていません。そのため、これは複数のデータベースバックエ"
"ンド間でポータブルではありません。"

msgid ""
"Oracle supports collations only when the ``MAX_STRING_SIZE`` database "
"initialization parameter is set to ``EXTENDED``."
msgstr ""
"Oracle が照合順序をサポートするのは、``MAX_STRING_SIZE`` データベース初期化パ"
"ラメータが ``EXTENDED`` に設定されている場合だけです。"

msgid ""
"A date, represented in Python by a ``datetime.date`` instance. Has a few "
"extra, optional arguments:"
msgstr ""
"Python で ``datetime.date`` インスタンスによって表される日付です。多少の追加"
"的な省略可能な引数を持ちます:"

msgid ""
"Automatically set the field to now every time the object is saved. Useful "
"for \"last-modified\" timestamps. Note that the current date is *always* "
"used; it's not just a default value that you can override."
msgstr ""
"オブジェクトが保存される度に自動的に現在の日付をセットします。\"最後の変更\" "
"タイムスタンプに役立ちます。現在の日付が常に使われる点に注意してください; "
"オーバーライドできる単なるデフォルト値ではありません。"

msgid ""
"The field is only automatically updated when calling :meth:`Model.save() "
"<django.db.models.Model.save>`. The field isn't updated when making updates "
"to other fields in other ways such as :meth:`QuerySet.update() <django.db."
"models.query.QuerySet.update>`, though you can specify a custom value for "
"the field in an update like that."
msgstr ""
":meth:`Model.save() <django.db.models.Model.save>` が呼ばれたとき、フィールド"
"は自動的に更新されるだけです。:meth:`QuerySet.update() <django.db.models."
"query.QuerySet.update>` のような別の方法で他のフィールドに更新を加えるとき、"
"フィールドは更新されません。あのように更新の中でフィールドの独自の値を指定で"
"きるとしてもです。"

msgid ""
"Automatically set the field to now when the object is first created. Useful "
"for creation of timestamps. Note that the current date is *always* used; "
"it's not just a default value that you can override. So even if you set a "
"value for this field when creating the object, it will be ignored. If you "
"want to be able to modify this field, set the following instead of "
"``auto_now_add=True``:"
msgstr ""
"オブジェクトが最初に作成されるとき、自動的にフィールドに現在の日付をセットし"
"ます。タイムスタンプの作成に役立ちます。現在の日付が *常に* 使われる点に注意"
"してください; オーバーライドできる単なるデフォルト値ではありません。たとえオ"
"ブジェクトを作成するときに値をセットしたとしても無視されます。このフィールド"
"を修正できるようにしておきたい場合は、``auto_now_add=True`` の代わりに以下を"
"セットしてください:"

msgid ""
"For :class:`DateField`: ``default=date.today`` - from :meth:`datetime.date."
"today`"
msgstr ""
":class:`DateField` に対して: ``default=date.today`` - :meth:`datetime.date."
"today` より"

msgid ""
"For :class:`DateTimeField`: ``default=timezone.now`` - from :func:`django."
"utils.timezone.now`"
msgstr ""
":class:`DateTimeField` に対して: ``default=timezone.now`` - :func:`django."
"utils.timezone.now` より"

msgid ""
"The default form widget for this field is a :class:`~django.forms."
"DateInput`. The admin adds a JavaScript calendar, and a shortcut for "
"\"Today\". Includes an additional ``invalid_date`` error message key."
msgstr ""
"このフィールドのデフォルトのフォームウィジェットは :class:`~django.forms."
"DateInput` です。admin は JavaScript カレンダーと \"Today\" のショートカット"
"を追加します。追加の ``invalid_date`` エラーメッセージキーを含みます。"

msgid ""
"The options ``auto_now_add``, ``auto_now``, and ``default`` are mutually "
"exclusive. Any combination of these options will result in an error."
msgstr ""
"オプション ``auto_now_add``、``auto_now``、``default`` は相互に排他的です。こ"
"れらのオプションを組み合わせるとエラーが発生します。"

msgid ""
"As currently implemented, setting ``auto_now`` or ``auto_now_add`` to "
"``True`` will cause the field to have ``editable=False`` and ``blank=True`` "
"set."
msgstr ""
"現在実装されているように、``auto_now`` や ``auto_now_add`` を ``True`` にセッ"
"トすると、フィールドは ``editable=False`` と ``blank=True`` にセットされま"
"す。"

msgid ""
"The ``auto_now`` and ``auto_now_add`` options will always use the date in "
"the :ref:`default timezone <default-current-time-zone>` at the moment of "
"creation or update. If you need something different, you may want to "
"consider using your own callable default or overriding ``save()`` instead of "
"using ``auto_now`` or ``auto_now_add``; or using a ``DateTimeField`` instead "
"of a ``DateField`` and deciding how to handle the conversion from datetime "
"to date at display time."
msgstr ""
"``auto_now`` と ``auto_now_add`` オプションは、常に作成時または更新時の :ref:"
"`デフォルトのタイムゾーン <default-current-time-zone>` の日付を使用します。も"
"し別のものが必要であれば、``auto_now`` や ``auto_now_add`` を使用する代わり"
"に、独自の呼び出し可能オブジェクトをデフォルトとして使用するか、 ``save()`` "
"をオーバーライドするか、あるいは ``DateField`` の代わりに ``DateTimeField`` "
"を使用し、表示時に datetime から date への変換をどのように処理するかを検討す"
"るとよいでしょう。"

msgid ""
"A date and time, represented in Python by a ``datetime.datetime`` instance. "
"Takes the same extra arguments as :class:`DateField`."
msgstr ""
"Python で ``datetime.datetime`` インスタンスによって表される日付と時刻です。:"
"class:`DateField` と同じくいくつかの追加的な引数を持ちます:"

msgid ""
"The default form widget for this field is a single :class:`~django.forms."
"DateTimeInput`. The admin uses two separate :class:`~django.forms.TextInput` "
"widgets with JavaScript shortcuts."
msgstr ""
"このフィールドのデフォルトのフォームウィジェットは :class:`~django.forms."
"DateTimeInput` です。管理画面では、JavaScript のショートカットを使って :"
"class:`~django.forms.TextInput` ウィジェットを 2 つに分けて使用します。"

msgid ""
"A fixed-precision decimal number, represented in Python by a :class:"
"`~decimal.Decimal` instance. It validates the input using :class:`~django."
"core.validators.DecimalValidator`."
msgstr ""
"固定精度の10進数で、Python では :class:`~decimal.Decimal` インスタンスで表さ"
"れます。これは :class:`~django.core.validators.DecimalValidator` を使用して入"
"力を検証します。"

msgid "Has the following **required** arguments:"
msgstr "以下の **必須の** 引数があります："

msgid ""
"The maximum number of digits allowed in the number. Note that this number "
"must be greater than or equal to ``decimal_places``."
msgstr ""
"数値内で使える桁数の最大値です。 ``decimal_places`` 以上でなければならない点"
"に注意してください。"

msgid "The number of decimal places to store with the number."
msgstr "数値とともに保持される小数点以下の位の数です。"

msgid ""
"For example, to store numbers up to ``999.99`` with a resolution of 2 "
"decimal places, you'd use::"
msgstr ""
"例えば、小数点以下2桁の分解能で ``999.99`` までの数値を保存するには、次のよう"
"にします："

msgid ""
"And to store numbers up to approximately one billion with a resolution of 10 "
"decimal places::"
msgstr "小数点以下第10位の精度で約10億までを保持するには::"

msgid ""
"The default form widget for this field is a :class:`~django.forms."
"NumberInput` when :attr:`~django.forms.Field.localize` is ``False`` or :"
"class:`~django.forms.TextInput` otherwise."
msgstr ""
"このフィールドのデフォルトのフォームウィジェットは、:attr:`~django.forms."
"Field.localize` が ``False`` のとき :class:`~django.forms.NumberInput` で、そ"
"うでなければ :class:`~django.forms.TextInput` となります。"

msgid ""
"For more information about the differences between the :class:`FloatField` "
"and :class:`DecimalField` classes, please see :ref:`FloatField vs. "
"DecimalField <floatfield_vs_decimalfield>`. You should also be aware of :ref:"
"`SQLite limitations <sqlite-decimal-handling>` of decimal fields."
msgstr ""
":class:`FloatField` クラスと :class:`DecimalField` クラスの違いについては :"
"ref:`FloatField vs. DecimalField <floatfield_vs_decimalfield>` を参照してくだ"
"さい。また、Decimal に関する :ref:`SQLite の制限 <sqlite-decimal-handling>` "
"についても注意してください。"

msgid ""
"A field for storing periods of time - modeled in Python by :class:`~python:"
"datetime.timedelta`. When used on PostgreSQL, the data type used is an "
"``interval`` and on Oracle the data type is ``INTERVAL DAY(9) TO "
"SECOND(6)``. Otherwise a ``bigint`` of microseconds is used."
msgstr ""
"時刻の期間を保持するフィールドで、 Python の :class:`~python:datetime."
"timedelta` によってモデル化されます。PostgreSQL で使われるときに用いられる"
"データ型は ``interval`` で、Oracle でのデータ型は ``INTERVAL DAY(9) TO "
"SECOND(6)`` です。 それ以外では、マイクロ秒の ``bigint`` が使われます。"

msgid ""
"Arithmetic with ``DurationField`` works in most cases. However on all "
"databases other than PostgreSQL, comparing the value of a ``DurationField`` "
"to arithmetic on ``DateTimeField`` instances will not work as expected."
msgstr ""
"``DurationField`` での演算はほとんどの場合で機能します。ただし、PostgreSQL 以"
"外のデータベースでは、``DurationField`` の値と ``DateTimeField`` インスタンス"
"上の演算を比較することは期待通りに機能しません。"

msgid ""
"A :class:`CharField` that checks that the value is a valid email address "
"using :class:`~django.core.validators.EmailValidator`."
msgstr ""
":class:`~django.core.validators.EmailValidator` を使って、値が有効なメールア"
"ドレスであるかどうかをチェックする :class:`CharField` です。"

msgid "A file-upload field."
msgstr "ファイルアップロードのフィールドです。"

msgid ""
"The ``primary_key`` argument isn't supported and will raise an error if used."
msgstr ""
"``primary_key`` 引数はサポートされておらず、使用するとエラーになります。"

msgid "Has the following optional arguments:"
msgstr "以下のオプション引数があります："

msgid ""
"This attribute provides a way of setting the upload directory and file name, "
"and can be set in two ways. In both cases, the value is passed to the :meth:"
"`Storage.save() <django.core.files.storage.Storage.save>` method."
msgstr ""
"この属性は、アップロードディレクトリとファイル名を設定する方法を提供し、2 つ"
"の方法でセットできます。どちらの場合も、値は :meth:`Storage.save() <django."
"core.files.storage.Storage.save>` メソッドに渡されます。"

msgid ""
"If you specify a string value or a :class:`~pathlib.Path`, it may contain :"
"func:`~time.strftime` formatting, which will be replaced by the date/time of "
"the file upload (so that uploaded files don't fill up the given directory). "
"For example::"
msgstr ""
"文字列値または :class:`~pathlib.Path` を指定する場合、 :func:`~time."
"strftime` フォーマットを含むことができます。これはファイルアップロードの日時"
"に置き換えられます（アップロードされたファイルで指定されたディレクトリが一杯"
"にならないようにするためです）。例えば以下のようにします："

msgid ""
"If you are using the default :class:`~django.core.files.storage."
"FileSystemStorage`, the string value will be appended to your :setting:"
"`MEDIA_ROOT` path to form the location on the local filesystem where "
"uploaded files will be stored. If you are using a different storage, check "
"that storage's documentation to see how it handles ``upload_to``."
msgstr ""
"デフォルトの :class:`~django.core.files.storage.FileSystemStorage` を使用して"
"いる場合、この文字列の値が :setting:`MEDIA_ROOT` パスに追加され、アップロード"
"されたファイルが保存されるローカルファイルシステムの場所になります。別のスト"
"レージを使用している場合は、そのストレージのドキュメントで ``upload_to`` の扱"
"い方を確認してください。"

msgid ""
"``upload_to`` may also be a callable, such as a function. This will be "
"called to obtain the upload path, including the filename. This callable must "
"accept two arguments and return a Unix-style path (with forward slashes) to "
"be passed along to the storage system. The two arguments are:"
msgstr ""
"``upload_to`` は関数のなどの呼び出し可能オブジェクトにすることもできます。こ"
"れはファイル名を含むアップロードパスを取得するために呼び出されます。この呼び"
"出し可能オブジェクトは2つの引数を受け取り、ストレージシステムに渡すUnixスタイ"
"ルのパス（フォワードスラッシュ付き）を返さなければなりません。2つの引数は"

msgid "``instance``"
msgstr "``instance``"

msgid ""
"An instance of the model where the ``FileField`` is defined. More "
"specifically, this is the particular instance where the current file is "
"being attached."
msgstr ""
"``FileField`` が定義されているモデルのインスタンス。具体的には、そのファイル"
"が格納されている特定のインスタンスです。"

msgid ""
"In most cases, this object will not have been saved to the database yet, so "
"if it uses the default ``AutoField``, *it might not yet have a value for its "
"primary key field*."
msgstr ""
"ほとんどの場合、このオブジェクトはまだデータベースに保存されていないため、デ"
"フォルトの ``AutoField`` を使用している場合、 *主キーフィールドの値をまだ持っ"
"ていない可能性があります* 。"

msgid "``filename``"
msgstr "``filename``"

msgid ""
"The filename that was originally given to the file. This may or may not be "
"taken into account when determining the final destination path."
msgstr ""
"ファイルに元々与えられていたファイル名。これは、最終的な宛先パスを決定すると"
"きに考慮されることもあれば、考慮されないこともあります。"

msgid ""
"A storage object, or a callable which returns a storage object. This handles "
"the storage and retrieval of your files. See :doc:`/topics/files` for "
"details on how to provide this object."
msgstr ""
"ストレージオブジェクト、またはストレージオブジェクトを返す呼び出し可能オブ"
"ジェクトです。これはファイルの保存と取得を行います。このオブジェクトの渡し方"
"の詳細については :doc:`/topics/files` を参照してください。"

msgid ""
"The default form widget for this field is a :class:`~django.forms."
"ClearableFileInput`."
msgstr ""
"このフィールドのデフォルトのフォームウィジェットは :class:`~django.forms."
"ClearableFileInput` です。"

msgid ""
"Using a :class:`FileField` or an :class:`ImageField` (see below) in a model "
"takes a few steps:"
msgstr ""
"モデル内で a :class:`FileField` や :class:`ImageField` (後述) 使うにはいくつ"
"かのステップを取ります:"

msgid ""
"In your settings file, you'll need to define :setting:`MEDIA_ROOT` as the "
"full path to a directory where you'd like Django to store uploaded files. "
"(For performance, these files are not stored in the database.) Define :"
"setting:`MEDIA_URL` as the base public URL of that directory. Make sure that "
"this directory is writable by the web server's user account."
msgstr ""
"設定ファイルでは、 :setting:`MEDIA_ROOT` を Django にアップロードされたファイ"
"ルを保存するディレクトリへのフルパスを指定する必要があります（パフォーマンス"
"上、これらのファイルはデータベースには保存されません）。 :setting:"
"`MEDIA_URL` をそのディレクトリの公開 URL にします。このディレクトリは Web "
"サーバのユーザアカウントで書き込み可能である必要があります。"

msgid ""
"Add the :class:`FileField` or :class:`ImageField` to your model, defining "
"the :attr:`~FileField.upload_to` option to specify a subdirectory of :"
"setting:`MEDIA_ROOT` to use for uploaded files."
msgstr ""
"モデルに :class:`FileField` または :class:`ImageField` を追加し、 :attr:"
"`~FileField.upload_to` オプションを定義して、ファイルをアップロードする :"
"setting:`MEDIA_ROOT` のサブディレクトリを指定します。"

msgid ""
"All that will be stored in your database is a path to the file (relative to :"
"setting:`MEDIA_ROOT`). You'll most likely want to use the convenience :attr:"
"`~django.db.models.fields.files.FieldFile.url` attribute provided by Django. "
"For example, if your :class:`ImageField` is called ``mug_shot``, you can get "
"the absolute path to your image in a template with ``{{ object.mug_shot."
"url }}``."
msgstr ""
"データベースに保存されるのは、ファイルへのパス (:setting:`MEDIA_ROOT` からの"
"相対パス) だけです。Django 組み込みの :attr:`~django.db.models.fields.files."
"FieldFile.url` 属性を使うと便利です。例えば、 :class:`ImageField` が "
"``mug_shot`` という名前の場合、 ``{{ object.mug_shot.url }}`` でテンプレート"
"内の画像の絶対パスを取得できます。"

msgid ""
"For example, say your :setting:`MEDIA_ROOT` is set to ``'/home/media'``, "
"and :attr:`~FileField.upload_to` is set to ``'photos/%Y/%m/%d'``. The ``'%Y/"
"%m/%d'`` part of :attr:`~FileField.upload_to` is :func:`~time.strftime` "
"formatting; ``'%Y'`` is the four-digit year, ``'%m'`` is the two-digit month "
"and ``'%d'`` is the two-digit day. If you upload a file on Jan. 15, 2007, it "
"will be saved in the directory ``/home/media/photos/2007/01/15``."
msgstr ""
"例えば、 :setting:`MEDIA_ROOT` が ``'/home/media'`` に設定され、 :attr:"
"`~FileField.upload_to` が ``'photos/%Y/%m/%d'`` に設定されているとします。 :"
"attr:`~FileField.upload_to` の ``'%Y/%m/%d'`` の部分は :func:`~time."
"strftime` フォーマットです。``'%Y'`` は4桁の年、``'%m'`` は2桁の月、``'%d'`` "
"は2桁の日です。2007年1月15日にファイルをアップロードすると、 ``/home/media/"
"photos/2007/01/15`` というディレクトリに保存されます。"

msgid ""
"If you wanted to retrieve the uploaded file's on-disk filename, or the "
"file's size, you could use the :attr:`~django.core.files.File.name` and :"
"attr:`~django.core.files.File.size` attributes respectively; for more "
"information on the available attributes and methods, see the :class:`~django."
"core.files.File` class reference and the :doc:`/topics/files` topic guide."
msgstr ""
"アップロードされたファイルのディスク上のファイル名やファイルサイズを取得した"
"い場合は、それぞれ :attr:`~django.core.files.File.name` 属性と :attr:"
"`~django.core.files.File.size` 属性を使うことができます。利用可能な属性やメ"
"ソッドの詳細については :class:`~django.core.files.File` クラスリファレンス "
"と :doc:`/topics/files` トピックガイド を参照してください。"

msgid ""
"The file is saved as part of saving the model in the database, so the actual "
"file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""
"このファイルは、モデルをデータベースに保存する際に一緒に保存されるため、ディ"
"スク上で実際に使用されるファイル名は、モデルが保存されるまで当てになりませ"
"ん。"

msgid ""
"The uploaded file's relative URL can be obtained using the :attr:`~django.db."
"models.fields.files.FieldFile.url` attribute. Internally, this calls the :"
"meth:`~django.core.files.storage.Storage.url` method of the underlying :"
"class:`~django.core.files.storage.Storage` class."
msgstr ""
"アップロードされたファイルの相対URLは :attr:`~django.db.models.fields.files."
"FieldFile.url` 属性で取得できます。内部的には、 :class:`~django.core.files."
"storage.Storage` クラスの :meth:`~django.core.files.storage.Storage.url` メ"
"ソッドを呼び出します。"

msgid ""
"Note that whenever you deal with uploaded files, you should pay close "
"attention to where you're uploading them and what type of files they are, to "
"avoid security holes. *Validate all uploaded files* so that you're sure the "
"files are what you think they are. For example, if you blindly let somebody "
"upload files, without validation, to a directory that's within your web "
"server's document root, then somebody could upload a CGI or PHP script and "
"execute that script by visiting its URL on your site. Don't allow that."
msgstr ""
"アップロードされたファイルを扱うときは常に、セキュリティホールを避けるため"
"に、アップロードする場所とファイルの種類に細心の注意を払う必要があることに注"
"意してください。 *アップロードされたすべてのファイルを検証し* 、そのファイル"
"があなたが考えているものであることを確認してください。例えば、誰かがあなたの"
"ウェブサーバーのドキュメントルートにあるディレクトリに、検証なしでファイルを"
"アップロードするのをやみくもに許可すると、誰かがCGIやPHPスクリプトをアップ"
"ロードし、あなたのサイトのそのURLにアクセスしてスクリプトを実行できます。それ"
"を許してはいけません。"

msgid ""
"Also note that even an uploaded HTML file, since it can be executed by the "
"browser (though not by the server), can pose security threats that are "
"equivalent to XSS or CSRF attacks."
msgstr ""
"また、アップロードされたHTMLファイルであっても、ブラウザが実行できるため"
"（サーバは実行できませんが）、XSS攻撃やCSRF攻撃と同様のセキュリティ上の脅威を"
"もたらす可能性があることに注意してください。"

msgid ""
":class:`FileField` instances are created in your database as ``varchar`` "
"columns with a default max length of 100 characters. As with other fields, "
"you can change the maximum length using the :attr:`~CharField.max_length` "
"argument."
msgstr ""
":class:`FileField` インスタンスは ``varchar`` カラムとしてデータベースに作成"
"され、デフォルトの最大長は100文字です。他のフィールドと同様に、 :attr:"
"`~CharField.max_length` 引数を使用して最大長を変更できます。"

msgid "``FileField`` and ``FieldFile``"
msgstr "``FileField`` と ``FieldFile``"

msgid ""
"When you access a :class:`~django.db.models.FileField` on a model, you are "
"given an instance of :class:`FieldFile` as a proxy for accessing the "
"underlying file."
msgstr ""
"モデル上の :class:`~django.db.models.FileField` にアクセスするとき、元となる"
"ファイルにアアクセスするためのプロキシとして、:class:`FieldFile` のインスタン"
"スが与えられます。"

msgid ""
"The API of :class:`FieldFile` mirrors that of :class:`~django.core.files."
"File`, with one key difference: *The object wrapped by the class is not "
"necessarily a wrapper around Python's built-in file object.* Instead, it is "
"a wrapper around the result of the :attr:`Storage.open()<django.core.files."
"storage.Storage.open>` method, which may be a :class:`~django.core.files."
"File` object, or it may be a custom storage's implementation of the :class:"
"`~django.core.files.File` API."
msgstr ""
":class:`FieldFile`  の API は :class:`~django.core.files.File` の API を反映"
"していますが、主な違いが 1 つあります: *クラスによってラップされたオブジェク"
"トは必ずしも Python のビルトインのファイルオブジェクトのラッパーであるとは限"
"りません。* 代わりに、:attr:`Storage.open()<django.core.files.storage."
"Storage.open>` メソッドの結果を包むラッパーで、これは  :class:`~django.core."
"files.File` オブジェクトもしくは :class:`~django.core.files.File` API の独自"
"ストレージの実装となります。"

msgid ""
"In addition to the API inherited from :class:`~django.core.files.File` such "
"as ``read()`` and ``write()``, :class:`FieldFile` includes several methods "
"that can be used to interact with the underlying file:"
msgstr ""
"``read()`` や ``write()`` など、:class:`~django.core.files.File` から継承され"
"たAPIに加えて、:class:`FieldFile` には基になるファイルとやり取りするために使"
"用できるいくつかのメソッドが含まれています："

msgid ""
"Two methods of this class, :meth:`~FieldFile.save` and :meth:`~FieldFile."
"delete`, default to saving the model object of the associated ``FieldFile`` "
"in the database."
msgstr ""
"このクラスの 2 つのメソッド、:meth:`~FieldFile.save` と :meth:`~FieldFile."
"delete` は、デフォルトで、関連する FieldFile のモデルオブジェクトをデータベー"
"スに保存します。"

msgid ""
"The name of the file including the relative path from the root of the :class:"
"`~django.core.files.storage.Storage` of the associated :class:`~django.db."
"models.FileField`."
msgstr ""
"関連する :class:`~django.db.models.FileField` の :class:`~django.core.files."
"storage.Storage` のルートからの相対パスを含むファイル名です。"

msgid ""
"A read-only property to access the file's local filesystem path by calling "
"the :meth:`~django.core.files.storage.Storage.path` method of the "
"underlying :class:`~django.core.files.storage.Storage` class."
msgstr ""
"ファイルのローカルファイルシステムパスにアクセスするための読み取り専用プロパ"
"ティ。基になる :class:`~django.core.files.storage.Storage` クラスの :meth:"
"`~django.core.files.storage.Storage.path` メソッドを呼び出します。"

msgid ""
"The result of the underlying :attr:`Storage.size() <django.core.files."
"storage.Storage.size>` method."
msgstr ""
"元となる :attr:`Storage.size() <django.core.files.storage.Storage.size>` メ"
"ソッドの結果です。"

msgid ""
"A read-only property to access the file's relative URL by calling the :meth:"
"`~django.core.files.storage.Storage.url` method of the underlying :class:"
"`~django.core.files.storage.Storage` class."
msgstr ""
"元となる :class:`~django.core.files.storage.Storage` クラス の :meth:"
"`~django.core.files.storage.Storage.url` メソッドを呼ぶことによって、ファイル"
"の相対 URL にアクセスするための読み取り専用プロパティです。"

msgid ""
"Opens or reopens the file associated with this instance in the specified "
"``mode``. Unlike the standard Python ``open()`` method, it doesn't return a "
"file descriptor."
msgstr ""
"このインスタンスに関連付けられたファイルを、指定された ``モード`` で開くか、"
"開き直します。標準の Python の ``open()`` メソッドとは違い、ファイルのデスク"
"リプタを返しません。"

msgid ""
"Since the underlying file is opened implicitly when accessing it, it may be "
"unnecessary to call this method except to reset the pointer to the "
"underlying file or to change the ``mode``."
msgstr ""
"元となるファイルはアクセスするときに暗黙的に開かれるので、元となるファイルに"
"ポインタをリセットするためか ``モード`` を変更するため以外には、このメソッド"
"を呼ぶ必要はないでしょう。"

msgid ""
"Behaves like the standard Python ``file.close()`` method and closes the file "
"associated with this instance."
msgstr ""
"標準の Python の ``file.close()`` メソッドのように動作し、このインスタンスに"
"関連付けられたファイルを閉じます。"

msgid ""
"This method takes a filename and file contents and passes them to the "
"storage class for the field, then associates the stored file with the model "
"field. If you want to manually associate file data with :class:`~django.db."
"models.FileField` instances on your model, the ``save()`` method is used to "
"persist that file data."
msgstr ""
"このメソッドは、ファイル名とファイルの内容を取り、それらをフィールドのスト"
"レージクラスに渡し、格納されたファイルをモデルフィールドに関連付けます。 手動"
"でファイルデータをモデル上の :class:`~django.db.models.FileField` インスタン"
"スに関連付けるには、 ``save()`` メソッドを使用してそのファイルデータを保持し"
"ます。"

msgid ""
"Takes two required arguments: ``name`` which is the name of the file, and "
"``content`` which is an object containing the file's contents.  The optional "
"``save`` argument controls whether or not the model instance is saved after "
"the file associated with this field has been altered. Defaults to ``True``."
msgstr ""
"2 つの必要な引数をとります: ``name`` はファイルの名前で、``content`` はファイ"
"ルの内容を含むオブジェクトです。 省略可能な ``save`` 引数は、このフィールドに"
"関連付けられたファイルが変更された後にモデルインスタンスが保存されるかどうか"
"をコントロールします。 デフォルトは ``True`` です。"

msgid ""
"Note that the ``content`` argument should be an instance of :class:`django."
"core.files.File`, not Python's built-in file object. You can construct a :"
"class:`~django.core.files.File` from an existing Python file object like "
"this::"
msgstr ""
"``content`` 引数は、Python のビルトインのファイルオブジェクトではなく、:"
"class:`django.core.files.File` のインスタンスでなければならないことに注意して"
"ください。 以下のように、既存の Python ファイルオブジェクトから :class:"
"`~django.core.files.File` を構築できます:"

msgid "Or you can construct one from a Python string like this::"
msgstr "もしくは、以下のように Python の文字列から構築することもできます::"

msgid "For more information, see :doc:`/topics/files`."
msgstr "より詳しくは :doc:`/topics/files` を参照してください。"

msgid ""
"Deletes the file associated with this instance and clears all attributes on "
"the field. Note: This method will close the file if it happens to be open "
"when ``delete()`` is called."
msgstr ""
"このインスタンスに関連付けられているファイルを削除し、フィールドのすべての属"
"性をクリアします。 注: このメソッドは、``delete()`` が呼び出されたときにファ"
"イルが開いた場合、ファイルを閉じます。"

msgid ""
"The optional ``save`` argument controls whether or not the model instance is "
"saved after the file associated with this field has been deleted. Defaults "
"to ``True``."
msgstr ""
"省略可能な ``save`` 引数は、このフィールドに関連付けられたファイルが削除され"
"た後にモデルインスタンスを保存するかどうかをコントロールします。 デフォルト"
"は ``True`` です。"

msgid ""
"Note that when a model is deleted, related files are not deleted. If you "
"need to cleanup orphaned files, you'll need to handle it yourself (for "
"instance, with a custom management command that can be run manually or "
"scheduled to run periodically via e.g. cron)."
msgstr ""
"モデルを削除するとき、関連ファイルは削除されない点に注意してください。 孤立し"
"たファイルをクリーンアップする必要がある場合、自分で処理する必要があります "
"(たとえば、手動で実行したり、cron などを通して定期的に実行される独自の管理コ"
"マンドです)。"

msgid ""
"A :class:`CharField` whose choices are limited to the filenames in a certain "
"directory on the filesystem. Has some special arguments, of which the first "
"is **required**:"
msgstr ""
":class:`CharField` は選択肢をファイルシステム上の特定のディレクトリにあるファ"
"イル名に限定します。いくつかの特別な引数を持ちますが、最初の引数は **必須** "
"です："

msgid ""
"Required. The absolute filesystem path to a directory from which this :class:"
"`FilePathField` should get its choices. Example: ``\"/home/images\"``."
msgstr ""
"必須です。:class:`FilePathField` が選択肢から取得するディレクトリへの、ファイ"
"ルシステムの絶対パスです。例: ``\"/home/images\"``。"

msgid ""
"``path`` may also be a callable, such as a function to dynamically set the "
"path at runtime. Example::"
msgstr ""
"``path`` には呼び出し可能オブジェクトを指定することもでき、これは例えば実行時"
"に動的にパスを設定する関数などです。例："

msgid ""
"Optional. A regular expression, as a string, that :class:`FilePathField` "
"will use to filter filenames. Note that the regex will be applied to the "
"base filename, not the full path. Example: ``\"foo.*\\.txt$\"``, which will "
"match a file called ``foo23.txt`` but not ``bar.txt`` or ``foo23.png``."
msgstr ""
"省略可能です。正規表現で、文字列として、:class:`FilePathField` がファイル名を"
"フィルタリングするために使用します。 正規表現は、フルパスではなくベースファイ"
"ル名に適用される点に注意してください。 例: ``\"foo.*\\.txt$\"``。これは "
"``foo23.txt`` とは合致しますが、``bar.txt`` や ``foo23.png`` とは合致しませ"
"ん。"

msgid ""
"Optional. Either ``True`` or ``False``. Default is ``False``. Specifies "
"whether all subdirectories of :attr:`~FilePathField.path` should be included"
msgstr ""
"省略可能です。``True`` か ``False`` のどちらかを取り、デフォルトは ``False`` "
"です。:attr:`~FilePathField.path` の全てのサブディレクトリを含むかどうかを指"
"定します。"

msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``True``.  Specifies "
"whether files in the specified location should be included.  Either this or :"
"attr:`~FilePathField.allow_folders` must be ``True``."
msgstr ""
"省略可能です。``True`` か ``False`` を取り、デフォルトは ``True`` です。指定"
"された場所にあるファイルを含むかどうかを指定します。 これか :attr:"
"`~FilePathField.allow_folders` のどちらかを ``True`` にする必要があります。"

msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``False``.  Specifies "
"whether folders in the specified location should be included.  Either this "
"or :attr:`~FilePathField.allow_files` must be ``True``."
msgstr ""
"省略可能です。``True`` か ``False`` を取り、デフォルトは ``False`` です。指定"
"した場所にあるフォルダーを含むかどうかを指定します。これか :attr:"
"`~FilePathField.allow_files` のどちらかを ``True`` にする必要があります。"

msgid ""
"The one potential gotcha is that :attr:`~FilePathField.match` applies to the "
"base filename, not the full path. So, this example::"
msgstr ""
"1つの可能性は、フルパスではなく、ベースファイル名に :attr:`~FilePathField."
"match` が適用されることです。 したがって、この例::"

msgid ""
"...will match ``/home/images/foo.png`` but not ``/home/images/foo/bar.png`` "
"because the :attr:`~FilePathField.match` applies to the base filename (``foo."
"png`` and ``bar.png``)."
msgstr ""
"...は、``/home/images/foo/bar.png`` ではなく ``/home/images/foo.png`` とマッ"
"チします。これは、:attr:`~FilePathField.match` がベースのファイル名に適用され"
"るからです (``foo.png`` と ``bar.png``)。"

msgid ""
":class:`FilePathField` instances are created in your database as ``varchar`` "
"columns with a default max length of 100 characters. As with other fields, "
"you can change the maximum length using the :attr:`~CharField.max_length` "
"argument."
msgstr ""
":class:`FilePathField` のインスタンスは、デフォルトが最大 100 文字の "
"``varchar`` カラムとして、データベース上に生成されます。他のフィールドと同様"
"に、:attr:`~CharField.max_length` 引数を使って最大文字数を変更できます。"

msgid "A floating-point number represented in Python by a ``float`` instance."
msgstr "``float`` インスタンスによって表される Python の浮動小数点数です。"

msgid "``FloatField`` vs. ``DecimalField``"
msgstr "``FloatField`` と ``DecimalField`` の比較"

msgid ""
"The :class:`FloatField` class is sometimes mixed up with the :class:"
"`DecimalField` class. Although they both represent real numbers, they "
"represent those numbers differently. ``FloatField`` uses Python's ``float`` "
"type internally, while ``DecimalField`` uses Python's ``Decimal`` type. For "
"information on the difference between the two, see Python's documentation "
"for the :mod:`decimal` module."
msgstr ""
":class:`FloatField` クラスは、:class:`DecimalField` クラスと混同されることが"
"あります。両方とも実数を表しますが、異なる方法で表現しています。"
"``FloatField`` は内部的には Python の ``float`` 型を使い、``DecimalField`` "
"は Python の ``Decimal`` 型を使います。この 2 つの違いについては、 Python の"
"ドキュメント :mod:`decimal` module を参照してください。"

msgid "``GeneratedField``"
msgstr "``GeneratedField``"

msgid ""
"A field that is always computed based on other fields in the model. This "
"field is managed and updated by the database itself. Uses the ``GENERATED "
"ALWAYS`` SQL syntax."
msgstr ""
"常にモデル内の他のフィールドに基づいて計算されるフィールド。このフィールドは"
"データベース自身によって管理・更新されます。 ``GENERATED ALWAYS`` SQL 構文を"
"使います。"

msgid ""
"There are two kinds of generated columns: stored and virtual. A stored "
"generated column is computed when it is written (inserted or updated) and "
"occupies storage as if it were a regular column. A virtual generated column "
"occupies no storage and is computed when it is read. Thus, a virtual "
"generated column is similar to a view and a stored generated column is "
"similar to a materialized view."
msgstr ""
"生成カラムには、格納と仮想の2種類があります。格納生成カラムは書き込まれる (挿"
"入もしくは更新される) ときに計算され、通常のカラムと同じようにストレージを占"
"有します。仮想生成カラムはストレージを占有せず、読み込まれるときに計算されま"
"す。したがって、仮想生成カラムはビューに似ており、格納生成カラムはマテリアラ"
"イズド・ビューに似ています。"

msgid ""
"An :class:`Expression` used by the database to automatically set the field "
"value each time the model is changed."
msgstr ""
"モデルが変更されるたびにフィールドの値を自動的に設定するためにデータベースに"
"よって使用される :class:`Expression` 。"

msgid ""
"The expressions should be deterministic and only reference fields within the "
"model (in the same database table). Generated fields cannot reference other "
"generated fields. Database backends can impose further restrictions."
msgstr ""
"式は決定論的でなければならず、モデル内の（同じデータベース・テーブル内の）"
"フィールドだけを参照しなければなりません。生成フィールドは他の生成フィールド"
"を参照することはできません。データベースのバックエンドはさらなる制限を課すこ"
"とができます。"

msgid "A model field instance to define the field's data type."
msgstr "フィールドのデータ型を定義するモデルフィールドインスタンス。"

msgid ""
"Determines if the database column should occupy storage as if it were a real "
"column. If ``False``, the column acts as a virtual column and does not "
"occupy database storage space."
msgstr ""
"データベースカラムが実際のカラムのようにストレージを占有するかどうかを決定し"
"ます。 ``False`` の場合、カラムは仮想カラムとして動作し、データベースのスト"
"レージ領域を占有しません。"

msgid ""
"PostgreSQL only supports persisted columns. Oracle only supports virtual "
"columns."
msgstr ""
"PostgreSQLは永続化 (persist) 列のみをサポートしています。Oracle は仮想列のみ"
"をサポートしています。"

msgid "Refresh the data"
msgstr "データをリフレッシュしてください"

msgid ""
"Since the database always computed the value, the object must be reloaded to "
"access the new value after :meth:`~Model.save()`, for example, by using :"
"meth:`~Model.refresh_from_db()`."
msgstr ""
"データベースは常に値を計算しているので、 :meth:`~Model.save()` の後に新しい値"
"にアクセスするには、例えば :meth:`~Model.refresh_from_db()` を使ってオブジェ"
"クトをリロードする必要があります。"

msgid "Database limitations"
msgstr "データベースの制約"

msgid ""
"There are many database-specific restrictions on generated fields that "
"Django doesn't validate and the database may raise an error e.g. PostgreSQL "
"requires functions and operators referenced in a generated column to be "
"marked as ``IMMUTABLE``."
msgstr ""
"生成フィールドに関しては多くのデータベース固有の制限があり、Djangoはそれらを"
"検証しないため、データベースがエラーを発生させる可能性があります。例えば、"
"PostgreSQLでは、生成カラムで参照される関数や演算子は ``IMMUTABLE`` としてマー"
"クされている必要があります。"

msgid ""
"You should always check that ``expression`` is supported on your database. "
"Check out `MariaDB`_, `MySQL`_, `Oracle`_, `PostgreSQL`_, or `SQLite`_ docs."
msgstr ""
"あなたのデータベースで ``expression`` がサポートされているかどうかを常に確認"
"する必要があります。 `MariaDB`_, `MySQL`_, `Oracle`_, `PostgreSQL`_, "
"`SQLite`_ のドキュメントを確認してください。"

msgid ""
"An IPv4 or IPv6 address, in string format (e.g. ``192.0.2.30`` or "
"``2a02:42fe::4``). The default form widget for this field is a :class:"
"`~django.forms.TextInput`."
msgstr ""
"IPv4 か IPv6 のアドレスで、文字列フォーマットです (例: ``192.0.2.30`` ないし "
"``2a02:42fe::4``)。このフィールドのデフォルトのフォームウィジェットは :class:"
"`~django.forms.TextInput` です。"

msgid ""
"Limits valid inputs to the specified protocol. Accepted values are "
"``'both'`` (default), ``'IPv4'`` or ``'IPv6'``. Matching is case insensitive."
msgstr ""
"有効なインプットを、指定したプロトコルに制限します。 使用可能な値は "
"``'both'`` (デフォルト)、``'IPv4'``、``'IPv6'`` のどれかです。マッチングは大"
"文字と小文字を区別しません。"

msgid ""
"If you allow for blank values, you have to allow for null values since blank "
"values are stored as null."
msgstr ""
"ブランク値を要する場合、ブランク値は null として保持されるため、null 値を許容"
"する必要があります。"

msgid ""
"Inherits all attributes and methods from :class:`FileField`, but also "
"validates that the uploaded object is a valid image."
msgstr ""
":class:`FileField` から全ての属性とメソッドを継承して、さらにアップロードされ"
"たオブジェクトが有効な画像であることを検証します。"

msgid ""
"In addition to the special attributes that are available for :class:"
"`FileField`, an :class:`ImageField` also has ``height`` and ``width`` "
"attributes."
msgstr ""
":class:`FileField` で使える専用の属性に加えて、:class:`ImageField` には "
"``height`` と ``width`` 属性があります。"

msgid ""
"To facilitate querying on those attributes, :class:`ImageField` has the "
"following optional arguments:"
msgstr ""
"これらの属性に対するクエリを容易にするために、:class:`ImageField` は以下のオ"
"プション引数を持ちます："

msgid ""
"Name of a model field which will be auto-populated with the height of the "
"image each time the model instance is saved."
msgstr ""
"モデルインスタンスが保存される度に画像の高さで自動入力される、モデルフィール"
"ドの名前です。"

msgid ""
"Name of a model field which will be auto-populated with the width of the "
"image each time the model instance is saved."
msgstr ""
"モデルインスタンスが保存される度に画像の幅で自動入力される、モデルフィールド"
"の名前です。"

msgid "Requires the `Pillow`_ library."
msgstr "`Pillow`_ ライブラリを必要とします。"

msgid ""
":class:`ImageField` instances are created in your database as ``varchar`` "
"columns with a default max length of 100 characters. As with other fields, "
"you can change the maximum length using the :attr:`~CharField.max_length` "
"argument."
msgstr ""
":class:`ImageField` のインスタンスは、デフォルトが最大 100 文字の "
"``varchar`` カラムとして、データベース上に生成されます。他のフィールドと同様"
"に、:attr:`~CharField.max_length` 引数を使って最大文字数を変更できます。"

msgid ""
"An integer. Values from ``-2147483648`` to ``2147483647`` are safe in all "
"databases supported by Django."
msgstr ""
"整数。 ``-2147483648`` から ``2147483647`` までの値は、 Django がサポートする"
"全てのデータベースで安全です。"

msgid ""
"It uses :class:`~django.core.validators.MinValueValidator` and :class:"
"`~django.core.validators.MaxValueValidator` to validate the input based on "
"the values that the default database supports."
msgstr ""
":class:`~django.core.validators.MinValueValidator` と :class:`~django.core."
"validators.MaxValueValidator` を使って、デフォルトのデータベースがサポートす"
"る値に基づいて入力を検証します。"

msgid ""
"A field for storing JSON encoded data. In Python the data is represented in "
"its Python native format: dictionaries, lists, strings, numbers, booleans "
"and ``None``."
msgstr ""
"JSON エンコードされたデータを格納するためのフィールドです。Python では、デー"
"タは Python ネイティブフォーマットで表現されます。辞書、リスト、文字列、数"
"値、真偽値、そして ``None`` です。"

msgid ""
"``JSONField`` is supported on MariaDB, MySQL, Oracle, PostgreSQL, and SQLite "
"(with the :ref:`JSON1 extension enabled <sqlite-json1>`)."
msgstr ""
"``JSONField`` はMariaDB、MySQL、Oracle、PostgreSQL、(:ref:`JSON1 エクステン"
"ションが有効な <sqlite-json1>`) SQLite でサポートされています。"

msgid ""
"An optional :py:class:`json.JSONEncoder` subclass to serialize data types "
"not supported by the standard JSON serializer (e.g. ``datetime.datetime`` "
"or :class:`~python:uuid.UUID`). For example, you can use the :class:`~django."
"core.serializers.json.DjangoJSONEncoder` class."
msgstr ""
"オプションの :py:class:`json.JSONEncoder` サブクラスで、標準の JSON シリアラ"
"イザがサポートしていないデータ型 (``datetime.datetime`` や :class:`~python:"
"uuid.UUID` など) をシリアライズできます。例えば、 :class:`~django.core."
"serializers.json.DjangoJSONEncoder` クラスが使用できます。"

msgid ""
"An optional :py:class:`json.JSONDecoder` subclass to deserialize the value "
"retrieved from the database. The value will be in the format chosen by the "
"custom encoder (most often a string). Your deserialization may need to "
"account for the fact that you can't be certain of the input type. For "
"example, you run the risk of returning a ``datetime`` that was actually a "
"string that just happened to be in the same format chosen for "
"``datetime``\\s."
msgstr ""
"オプションの :py:class:`json.JSONDecoder` サブクラスで、データベースから取得"
"した値をデシリアライズします。値はカスタムエンコーダーによって選択された"
"フォーマット(多くの場合文字列)になります。デシリアライズは、入力の型が確定で"
"きないことを考慮する必要があります。たとえば、``datetime`` で設定されたのと同"
"じフォーマットでたまたま存在していた文字列があたかも ``datetime`` 型であるか"
"のように返却されるリスクがあります。"

msgid "To query ``JSONField`` in the database, see :ref:`querying-jsonfield`."
msgstr ""
"データベース内の ``JSONField`` をクエリするには、 :ref:`querying-jsonfield` "
"を参照してください。"

msgid "Default value"
msgstr "デフォルト値について"

msgid ""
"If you give the field a :attr:`~django.db.models.Field.default`, ensure it's "
"a callable such as the :py:class:`dict` class or a function that returns a "
"fresh object each time. Incorrectly using a mutable object like ``default={}"
"`` or ``default=[]`` creates a mutable default that is shared between all "
"instances."
msgstr ""
"フィールドに :attr:`~django.db.models.Field.default` を指定する場合、 :py:"
"class:`dict` クラスのような呼び出し可能オブジェクトか、毎回新しいオブジェクト"
"を返す関数にしてください。 ``default={}`` や ``default=[]`` のようなミュータ"
"ブルなオブジェクトを誤って使用すると、すべてのインスタンス間で共有される"
"ミュータブルなデフォルト値が作成されます。"

msgid "Indexing"
msgstr "インデックスの作成"

msgid ""
":class:`~django.db.models.Index` and :attr:`.Field.db_index` both create a B-"
"tree index, which isn't particularly helpful when querying ``JSONField``. On "
"PostgreSQL only, you can use :class:`~django.contrib.postgres.indexes."
"GinIndex` that is better suited."
msgstr ""
":class:`~django.db.models.Index` と :attr:`.Field.db_index` はどちらも B-"
"tree インデックスを作成しますが、``JSONField`` をクエリする際には特に役に立ち"
"ません。PostgreSQL でだけ、より適した :class:`~django.contrib.postgres."
"indexes.GinIndex` を使うことができます。"

msgid "PostgreSQL users"
msgstr "PostgreSQL ユーザーの場合"

msgid ""
"PostgreSQL has two native JSON based data types: ``json`` and ``jsonb``. The "
"main difference between them is how they are stored and how they can be "
"queried. PostgreSQL's ``json`` field is stored as the original string "
"representation of the JSON and must be decoded on the fly when queried based "
"on keys. The ``jsonb`` field is stored based on the actual structure of the "
"JSON which allows indexing. The trade-off is a small additional cost on "
"writing to the ``jsonb`` field. ``JSONField`` uses ``jsonb``."
msgstr ""
"PostgreSQLには2つのJSONベースのデータ型があります。 ``json`` と ``jsonb`` で"
"す。これらの主な違いは、格納方法とクエリ方法です。PostgreSQLの ``json`` "
"フィールドはJSONの元の文字列表現として格納され、キーに基づいてクエリを行うに"
"はその場でデコードする必要があります。 ``jsonb`` フィールドはJSONの実際の構造"
"に基づいて格納され、インデックスを作成できます。そのトレードオフとして、"
"``jsonb`` フィールドへの書き込みに若干の追加コストが発生します。 "
"``JSONField`` は ``jsonb`` を使用します。"

msgid "Oracle users"
msgstr "Oracle のユーザーの場合"

msgid ""
"Oracle Database does not support storing JSON scalar values. Only JSON "
"objects and arrays (represented in Python using :py:class:`dict` and :py:"
"class:`list`) are supported."
msgstr ""
"Oracle Database は JSON スカラー値の格納をサポートしていません。JSONオブジェ"
"クトと配列 (Pythonでは :py:class:`dict` と :py:class:`list` を使って表現され"
"ます) だけがサポートされています。"

msgid "``PositiveBigIntegerField``"
msgstr "``PositiveBigIntegerField``"

msgid ""
"Like a :class:`PositiveIntegerField`, but only allows values under a certain "
"(database-dependent) point. Values from ``0`` to ``9223372036854775807`` are "
"safe in all databases supported by Django."
msgstr ""
":class:`PositiveIntegerField` のようなものですが、特定の (データベース依存"
"の) 値以下の値しか許しません。 ``0`` から ``9223372036854775807`` までの値"
"は、 Django がサポートする全てのデータベースで安全です。"

msgid "``PositiveIntegerField``"
msgstr "``PositiveIntegerField``"

msgid ""
"Like an :class:`IntegerField`, but must be either positive or zero (``0``). "
"Values from ``0`` to ``2147483647`` are safe in all databases supported by "
"Django. The value ``0`` is accepted for backward compatibility reasons."
msgstr ""
":class:`IntegerField` とほぼ同じですが、正の値かゼロ (``0``) でなければなりま"
"せん。Django によってサポートされる全てのデータベースで、``0`` から "
"``2147483647`` までの値は安全です。後方互換性の理由から、値 ``0`` が有効と"
"なっています。"

msgid "``PositiveSmallIntegerField``"
msgstr "``PositiveSmallIntegerField``"

msgid ""
"Like a :class:`PositiveIntegerField`, but only allows values under a certain "
"(database-dependent) point. Values from ``0`` to ``32767`` are safe in all "
"databases supported by Django."
msgstr ""
":class:`PositiveIntegerField` とほぼ同じですが、一定の (データベースに依存し"
"た) 値より下の値のみを許容します。Django でサポートされている全てのデータベー"
"スで、``0`` から ``32767`` までの値は安全です。"

msgid ""
":term:`Slug <slug>` is a newspaper term. A slug is a short label for "
"something, containing only letters, numbers, underscores or hyphens. They're "
"generally used in URLs."
msgstr ""
":term:`スラグ (slug) <slug>` は新聞用語です。スラグとは、アルファベット、数"
"字、アンダースコア、またはハイフンのみを含む、何かの短いラベルです。一般的に"
"URLで使われます。"

msgid ""
"Like a CharField, you can specify :attr:`~CharField.max_length` (read the "
"note about database portability and :attr:`~CharField.max_length` in that "
"section, too). If :attr:`~CharField.max_length` is not specified, Django "
"will use a default length of 50."
msgstr ""
"CharField のように、:attr:`~CharField.max_length` を指定することもできます "
"(データベースの可搬性についてのノートとそのセクションの :attr:`~CharField."
"max_length` も参照してください)。:attr:`~CharField.max_length` が指定されてい"
"ないとき、Django はデフォルトの文字数 50 を使います。"

msgid "Implies setting :attr:`Field.db_index` to ``True``."
msgstr "暗黙的に :attr:`Field.db_index` を ``True`` にセットします。"

msgid ""
"It is often useful to automatically prepopulate a SlugField based on the "
"value of some other value.  You can do this automatically in the admin "
"using :attr:`~django.contrib.admin.ModelAdmin.prepopulated_fields`."
msgstr ""
"他の値に基づいて SlugField に自動的に値を事前入力すると便利なことがありま"
"す。 これは :attr:`~django.contrib.admin.ModelAdmin.prepopulated_fields` を"
"使って管理画面で自動で実行できます。"

msgid ""
"It uses :class:`~django.core.validators.validate_slug` or :class:`~django."
"core.validators.validate_unicode_slug` for validation."
msgstr ""
"バリデーションには :class:`~django.core.validators.validate_slug` または :"
"class:`~django.core.validators.validate_unicode_slug` を使用します。"

msgid ""
"If ``True``, the field accepts Unicode letters in addition to ASCII letters. "
"Defaults to ``False``."
msgstr ""
"``True`` なら、フィールドはASCII文字に加えてUnicode文字も受け付けます。デフォ"
"ルトは ``False`` です。"

msgid "``SmallAutoField``"
msgstr "``SmallAutoField``"

msgid ""
"Like an :class:`AutoField`, but only allows values under a certain (database-"
"dependent) limit. Values from ``1`` to ``32767`` are safe in all databases "
"supported by Django."
msgstr ""
":class:`AutoField` のようなものですが、一定の (データベース依存の) 制限値以下"
"の値しか許しません。 ``1`` から ``32767`` までの値は Django がサポートする全"
"てのデータベースで安全です。"

msgid "``SmallIntegerField``"
msgstr "``SmallIntegerField``"

msgid ""
"Like an :class:`IntegerField`, but only allows values under a certain "
"(database-dependent) point. Values from ``-32768`` to ``32767`` are safe in "
"all databases supported by Django."
msgstr ""
":class:`IntegerField` とほぼ同じですが、一定の (データベースに依存した) 値よ"
"り下の値のみを許容します。Django でサポートされている全てのデータベースで、"
"``-32768`` から ``32767`` までの値は安全です。"

msgid "``TextField``"
msgstr "``TextField``"

msgid ""
"A large text field. The default form widget for this field is a :class:"
"`~django.forms.Textarea`."
msgstr ""
"多量のテキストのフィールドです。このフィールドのデフォルトのフォームウィ"
"ジェットは  :class:`~django.forms.Textarea` です。"

msgid ""
"If you specify a ``max_length`` attribute, it will be reflected in the :"
"class:`~django.forms.Textarea` widget of the auto-generated form field. "
"However it is not enforced at the model or database level. Use a :class:"
"`CharField` for that."
msgstr ""
"``max_length`` 属性を指定した場合、自動生成されたフォームフィールドの :class:"
"`~django.forms.Textarea` ウィジェット内で反映されます。ただし、モデルやデータ"
"ベースのレベルでは施行されません。そのためには :class:`CharField` を使用して"
"ください。"

msgid "Oracle does not support collations for a ``TextField``."
msgstr ""
"Oracle は ``TextField`` の照合順序 (collation) をサポートしていません。"

msgid ""
"A time, represented in Python by a ``datetime.time`` instance. Accepts the "
"same auto-population options as :class:`DateField`."
msgstr ""
"Python で ``datetime.time`` インスタンスによって表される時刻です。:class:"
"`DateField` と同じ自動入力されるオプションを受け入れます。"

msgid ""
"The default form widget for this field is a :class:`~django.forms."
"TimeInput`. The admin adds some JavaScript shortcuts."
msgstr ""
"このフィールドのデフォルトのフォームウィジェットは :class:`~django.forms."
"TimeInput` です。admin はいくつかの JavaScript ショートカットを追加します。"

msgid ""
"A :class:`CharField` for a URL, validated by :class:`~django.core.validators."
"URLValidator`."
msgstr ""
"URLの :class:`CharField` で、 :class:`~django.core.validators.URLValidator` "
"によってバリデーションされます。"

msgid ""
"The default form widget for this field is a :class:`~django.forms.URLInput`."
msgstr ""
"このフィールドのデフォルトのフォームウィジェットは :class:`~django.forms."
"URLInput` です。"

msgid ""
"Like all :class:`CharField` subclasses, :class:`URLField` takes the "
"optional :attr:`~CharField.max_length` argument. If you don't specify :attr:"
"`~CharField.max_length`, a default of 200 is used."
msgstr ""
"全ての :class:`CharField` サブクラスと同じく、:class:`URLField` は省略可能"
"な :attr:`~CharField.max_length` 引数を取ります。:attr:`~CharField."
"max_length` を指定しない場合、デフォルトの 200 が使われます。"

msgid ""
"A field for storing universally unique identifiers. Uses Python's :class:"
"`~python:uuid.UUID` class. When used on PostgreSQL and MariaDB 10.7+, this "
"stores in a ``uuid`` datatype, otherwise in a ``char(32)``."
msgstr ""
"一意な識別子を格納するためのフィールドです。Python の :class:`~python:uuid."
"UUID` クラスを使用します。PostgreSQL と MariaDB 10.7+ で使用する場合、 "
"``uuid`` データ型で保存されます。"

msgid ""
"Universally unique identifiers are a good alternative to :class:`AutoField` "
"for :attr:`~Field.primary_key`. The database will not generate the UUID for "
"you, so it is recommended to use :attr:`~Field.default`::"
msgstr ""
"UUID は :attr:`~Field.primary_key` に代わる :class:`AutoField` への良い選択肢"
"です。 データベースはあなたのための UUID を生成しないため、 :attr:`~Field."
"default` を使うことが推奨されます::"

msgid ""
"Note that a callable (with the parentheses omitted) is passed to "
"``default``, not an instance of ``UUID``."
msgstr ""
"``UUID`` のインスタンスではなく、呼び出し可能オブジェクト（カッコは書かない）"
"を ``default`` に渡すことに注意してください。"

msgid "Lookups on PostgreSQL and MariaDB 10.7+"
msgstr "PostgreSQL と MariaDB 10.7+ におけるルックアップ"

msgid ""
"Using :lookup:`iexact`, :lookup:`contains`, :lookup:`icontains`, :lookup:"
"`startswith`, :lookup:`istartswith`, :lookup:`endswith`, or :lookup:"
"`iendswith` lookups on PostgreSQL don't work for values without hyphens, "
"because PostgreSQL and MariaDB 10.7+ store them in a hyphenated uuid "
"datatype type."
msgstr ""
"PostgreSQL や MariaDB 10.7 以降では、ハイフンがない値に対して :lookup:"
"`iexact`, :lookup:`contains`, :lookup:`icontains`, :lookup:`startswith`, :"
"lookup:`istartswith`, :lookup:`endswith`, :lookup:`iendswith` のルックアップ"
"を使用しても機能しません。これは、これらのデータベースがハイフン付きのuuid"
"データ型でそれらを格納するためです。"

msgid "Relationship fields"
msgstr "リレーションシップフィールド"

msgid "Django also defines a set of fields that represent relations."
msgstr "Djangoは、リレーションを表すフィールドのセットも定義しています。"

msgid "``ForeignKey``"
msgstr "``ForeignKey``"

msgid ""
"A many-to-one relationship. Requires two positional arguments: the class to "
"which the model is related and the :attr:`~ForeignKey.on_delete` option."
msgstr ""
"多対一のリレーションシップです。2つの必須の位置引数を取ります。モデルを関連付"
"けたいクラスと、 :attr:`~ForeignKey.on_delete` オプションです。"

msgid ""
"To create a recursive relationship -- an object that has a many-to-one "
"relationship with itself -- use ``models.ForeignKey('self', on_delete=models."
"CASCADE)``."
msgstr ""
"再帰的なリレーションシップ（それ自身と一対一のリレーションシップを持つオブ"
"ジェクト）を作成するには、 ``models.ForeignKey('self', on_delete=models."
"CASCADE)`` を使用します。"

msgid ""
"If you need to create a relationship on a model that has not yet been "
"defined, you can use the name of the model, rather than the model object "
"itself::"
msgstr ""
"まだ定義されていないモデルにリレーションシップを作成する必要がある場合、モデ"
"ルオブジェクト自体ではなく、モデルの名前を使用できます："

msgid ""
"Relationships defined this way on :ref:`abstract models <abstract-base-"
"classes>` are resolved when the model is subclassed as a concrete model and "
"are not relative to the abstract model's ``app_label``:"
msgstr ""
"以下のような方法で :ref:`抽象モデル <abstract-base-classes>` で定義されたリ"
"レーションシップは、モデルが具象モデルとしてサブクラス化されたときに解決さ"
"れ、抽象モデルの ``app_label`` とリレーションシップがあるわけではありません："

msgid "``products/models.py``"
msgstr "``products/models.py``"

msgid "``production/models.py``"
msgstr "``production/models.py``"

msgid ""
"To refer to models defined in another application, you can explicitly "
"specify a model with the full application label. For example, if the "
"``Manufacturer`` model above is defined in another application called "
"``production``, you'd need to use::"
msgstr ""
"別のアプリケーションで定義されたモデルを参照するには、アプリケーションのラベ"
"ルを明示的に指定します。例えば、上記の ``Manufacturer`` モデルが "
"``production`` という別のアプリケーションで定義されている場合、次のようにしま"
"す："

msgid ""
"This sort of reference, called a lazy relationship, can be useful when "
"resolving circular import dependencies between two applications."
msgstr ""
"遅延 (lazy) リレーションシップと呼ばれるこの種の参照は、2つのアプリケーション"
"間の循環的なインポート依存関係を解決するときに便利です。"

msgid ""
"A database index is automatically created on the ``ForeignKey``. You can "
"disable this by setting :attr:`~Field.db_index` to ``False``.  You may want "
"to avoid the overhead of an index if you are creating a foreign key for "
"consistency rather than joins, or if you will be creating an alternative "
"index like a partial or multiple column index."
msgstr ""
"データベースインデックスは自動的に ``ForeignKey`` に作成されます。これを無効"
"にするには :attr:`~Field.db_index` を ``False`` に設定してください。 結合では"
"なく一貫性を保つために外部キーを作成する場合や、部分カラムインデックスや複数"
"カラムインデックスのような代替インデックスを作成する場合に、インデックスの"
"オーバーヘッドを避けることができます。"

msgid "Database Representation"
msgstr "データベース上の表現"

msgid ""
"Behind the scenes, Django appends ``\"_id\"`` to the field name to create "
"its database column name. In the above example, the database table for the "
"``Car`` model will have a ``manufacturer_id`` column. (You can change this "
"explicitly by specifying :attr:`~Field.db_column`) However, your code should "
"never have to deal with the database column name, unless you write custom "
"SQL. You'll always deal with the field names of your model object."
msgstr ""
"裏では、Django はフィールド名に ``\"_id\"`` を付加して、データベースのカラム"
"名を作成します。上の例では、 ``Car`` モデルのデータベーステーブルには "
"``manufacturer_id`` カラムがあります。(これは :attr:`~Field.db_column` を指定"
"することで明示的に変更できます。) しかし、カスタムSQLを書かない限り、コードで"
"データベースのカラム名を扱う必要はありません。常にモデルオブジェクトのフィー"
"ルド名を扱うことになります。"

msgid "Arguments"
msgstr "引数"

msgid ""
":class:`ForeignKey` accepts other arguments that define the details of how "
"the relation works."
msgstr ""
":class:`ForeignKey` はリレーションシップの動作の詳細を定義する他の引数を取る"
"ことができます。"

msgid ""
"When an object referenced by a :class:`ForeignKey` is deleted, Django will "
"emulate the behavior of the SQL constraint specified by the :attr:"
"`on_delete` argument. For example, if you have a nullable :class:"
"`ForeignKey` and you want it to be set null when the referenced object is "
"deleted::"
msgstr ""
":class:`ForeignKey` で参照されているオブジェクトが削除されると、 Django は :"
"attr:`on_delete` 引数で指定された SQL 制約の動作をエミュレートします。例え"
"ば、Null 許容の :class:`ForeignKey` があり、参照オブジェクトが削除されたとき"
"に ``ForeignKey`` を NULL にしたい場合、次のようにします："

msgid ""
"``on_delete`` doesn't create an SQL constraint in the database. Support for "
"database-level cascade options :ticket:`may be implemented later <21961>`."
msgstr ""
"``on_delete`` はデータベースにSQL制約を作成しません。データベースレベルのカス"
"ケードオプションのサポートは、 :ticket:`将来的に実装される可能性があります "
"<21961>` 。"

msgid ""
"The possible values for :attr:`~ForeignKey.on_delete` are found in :mod:"
"`django.db.models`:"
msgstr ""
":attr:`~ForeignKey.on_delete` に指定できる値は :mod:`django.db.models` にあり"
"ます："

msgid ""
"Cascade deletes. Django emulates the behavior of the SQL constraint ON "
"DELETE CASCADE and also deletes the object containing the ForeignKey."
msgstr ""
"カスケード削除。Django は SQL の制約 ON DELETE CASCADE の動作をエミュレート"
"し、 ForeignKey を含むオブジェクトも削除します。"

msgid ""
":meth:`.Model.delete` isn't called on related models, but the :data:`~django."
"db.models.signals.pre_delete` and :data:`~django.db.models.signals."
"post_delete` signals are sent for all deleted objects."
msgstr ""
":meth:`.Model.delete` はリレーション先モデルでは呼び出されませんが、 :data:"
"`~django.db.models.signals.pre_delete` と :data:`~django.db.models.signals."
"post_delete` シグナルは削除された全てのオブジェクトに対して送られます。"

msgid ""
"Prevent deletion of the referenced object by raising :exc:`~django.db.models."
"ProtectedError`, a subclass of :exc:`django.db.IntegrityError`."
msgstr ""
":exc:`django.db.IntegrityError` のサブクラスである :exc:`~django.db.models."
"ProtectedError` を発生させて、参照オブジェクトの削除を防ぎます。"

msgid ""
"Prevent deletion of the referenced object by raising :exc:`~django.db.models."
"RestrictedError` (a subclass of :exc:`django.db.IntegrityError`). Unlike :"
"attr:`PROTECT`, deletion of the referenced object is allowed if it also "
"references a different object that is being deleted in the same operation, "
"but via a :attr:`CASCADE` relationship."
msgstr ""
":exc:`~django.db.models.RestrictedError` (:exc:`django.db.IntegrityError` の"
"サブクラス) を発生させて、参照オブジェクトの削除を防ぎます。 :attr:`PROTECT` "
"とは異なり、同じ操作で削除されるオブジェクトが :attr:`CASCADE` リレーション"
"シップで参照されている場合、参照オブジェクトの削除は許可されます。"

msgid "Consider this set of models::"
msgstr "以下のような一連のモデルを考えてみましょう:"

msgid ""
"``Artist`` can be deleted even if that implies deleting an ``Album`` which "
"is referenced by a ``Song``, because ``Song`` also references ``Artist`` "
"itself through a cascading relationship. For example:"
msgstr ""
"``Song`` によって参照されている ``Album`` を削除することになるとしても、 "
"``Artist`` を削除することは可能です。なぜなら ``Song`` も、カスケードリレー"
"ションシップを通して ``Artist`` 自身を参照しているからです。例えば以下のよう"
"になります："

msgid ""
"Set the :class:`ForeignKey` null; this is only possible if :attr:`~Field."
"null` is ``True``."
msgstr ""
":class:`ForeignKey` に null をセットします。これは :attr:`~Field.null` が "
"``True`` の場合のみ可能です。"

msgid ""
"Set the :class:`ForeignKey` to its default value; a default for the :class:"
"`ForeignKey` must be set."
msgstr ""
":class:`ForeignKey` にデフォルト値を設定します。 :class:`ForeignKey` にデフォ"
"ルト値が設定されている必要があります。"

msgid ""
"Set the :class:`ForeignKey` to the value passed to :func:`~django.db.models."
"SET()`, or if a callable is passed in, the result of calling it. In most "
"cases, passing a callable will be necessary to avoid executing queries at "
"the time your ``models.py`` is imported::"
msgstr ""
":class:`ForeignKey` に :func:`~django.db.models.SET()` に渡された値をセットし"
"ます。呼び出し可能オブジェクトが渡された場合は、呼び出した結果をセットしま"
"す。ほとんどの場合、 ``models.py`` のインポート時にクエリを実行しないようにす"
"るため、呼び出し可能オブジェクトを渡す必要があります："

msgid ""
"Take no action. If your database backend enforces referential integrity, "
"this will cause an :exc:`~django.db.IntegrityError` unless you manually add "
"an SQL ``ON DELETE`` constraint to the database field."
msgstr ""
"何もしません。データベースのバックエンドが参照整合性を強制している場合、手動"
"で SQL の ``ON DELETE`` 制約をデータベースフィールドに追加しない限り、 :exc:"
"`~django.db.IntegrityError` が発生します。"

msgid ""
"Sets a limit to the available choices for this field when this field is "
"rendered using a ``ModelForm`` or the admin (by default, all objects in the "
"queryset are available to choose). Either a dictionary, a :class:`~django.db."
"models.Q` object, or a callable returning a dictionary or :class:`~django.db."
"models.Q` object can be used."
msgstr ""
"このフィールドが ``ModelForm`` や管理画面でレンダリングされる際に、このフィー"
"ルドで選択可能な選択肢に制限を設定します（デフォルトでは、クエリセット内のす"
"べてのオブジェクトが選択可能です）。辞書、:class:`~django.db.models.Q` オブ"
"ジェクト、または辞書や :class:`~django.db.models.Q` オブジェクトを返す呼び出"
"し可能オブジェクトのいずれかを使用できます。"

msgid ""
"causes the corresponding field on the ``ModelForm`` to list only ``Users`` "
"that have ``is_staff=True``. This may be helpful in the Django admin."
msgstr ""
"上記を指定すると、 ``ModelForm`` の対応するフィールドに、 ``is_staff=True`` "
"を持つ ``Users`` のみがリストされます。これは Django の管理画面で役に立つかも"
"しれません。"

msgid ""
"The callable form can be helpful, for instance, when used in conjunction "
"with the Python ``datetime`` module to limit selections by date range. For "
"example::"
msgstr ""
"呼び出し可能なオブジェクトは、例えば、Python の ``datetime`` モジュールと組み"
"合わせて使用することで、日付の範囲で選択を制限するのに役立ちます。例えば下記"
"のようにします："

msgid ""
"If ``limit_choices_to`` is or returns a :class:`Q object <django.db.models."
"Q>`, which is useful for :ref:`complex queries <complex-lookups-with-q>`, "
"then it will only have an effect on the choices available in the admin when "
"the field is not listed in :attr:`~django.contrib.admin.ModelAdmin."
"raw_id_fields` in the ``ModelAdmin`` for the model."
msgstr ""
"もし ``limit_choices_to`` が :class:`Q オブジェクト <django.db.models.Q>` を"
"返す場合、これは :ref:`複雑なクエリ <complex-lookups-with-q>` に便利です。こ"
"れが管理画面で利用可能な選択肢に効果を及ぼすのは、そのフィールドがモデルの "
"``ModelAdmin`` の :attr:`~django.contrib.admin.ModelAdmin.raw_id_fields` にリ"
"ストされていない場合だけです。"

msgid ""
"If a callable is used for ``limit_choices_to``, it will be invoked every "
"time a new form is instantiated. It may also be invoked when a model is "
"validated, for example by management commands or the admin. The admin "
"constructs querysets to validate its form inputs in various edge cases "
"multiple times, so there is a possibility your callable may be invoked "
"several times."
msgstr ""
"``limit_choices_to`` に呼び出し可能オブジェクトが指定されている場合、新しい"
"フォームがインスタンス化されるたびに呼び出されます。また、管理コマンドや "
"admin によってモデルが検証されるときにも呼び出されます。admin は様々なエッジ"
"ケースでフォームの入力を検証するためにクエリセットを複数回構築するので、呼び"
"出し可能オブジェクトが複数回呼び出される可能性があります。"

msgid ""
"The name to use for the relation from the related object back to this one. "
"It's also the default value for :attr:`related_query_name` (the name to use "
"for the reverse filter name from the target model). See the :ref:`related "
"objects documentation <backwards-related-objects>` for a full explanation "
"and example. Note that you must set this value when defining relations on :"
"ref:`abstract models <abstract-base-classes>`; and when you do so :ref:`some "
"special syntax <abstract-related-name>` is available."
msgstr ""
"リレーション先オブジェクトからこのオブジェクトへのリレーションに使用する名前"
"です。これは :attr:`related_query_name` (ターゲットモデルからの逆フィルタに使"
"用する名前) のデフォルト値でもあります。詳しい説明と例については :ref:`リレー"
"ション先オブジェクトのドキュメント <backwards-related-objects>` を参照してく"
"ださい。 :ref:`抽象モデル <abstract-base-classes>` のリレーションを定義する際"
"には、この値を設定する必要があることに注意してください。それにより、 :ref:`い"
"くつかの特別な構文 <abstract-related-name>` が使えるようになります。"

msgid ""
"If you'd prefer Django not to create a backwards relation, set "
"``related_name`` to ``'+'`` or end it with ``'+'``. For example, this will "
"ensure that the ``User`` model won't have a backwards relation to this "
"model::"
msgstr ""
"Django が逆方向のリレーションを作らないようにしたい場合は、 ``related_name`` "
"を ``'+'`` に設定するか、 ``'+'`` で終わらせてください。例えば、 ``User`` モ"
"デルがこのモデルと逆方向のリレーションを持たないようにするには下記のようにし"
"ます："

msgid ""
"The name to use for the reverse filter name from the target model. It "
"defaults to the value of :attr:`related_name` or :attr:`~django.db.models."
"Options.default_related_name` if set, otherwise it defaults to the name of "
"the model::"
msgstr ""
"ターゲットモデルからの逆フィルタに使用する名前です。デフォルトは :attr:"
"`related_name` か、 :attr:`~django.db.models.Options.default_related_name` が"
"設定されていればその値、そうでなければモデルの名前になります："

msgid ""
"Like :attr:`related_name`, ``related_query_name`` supports app label and "
"class interpolation via :ref:`some special syntax <abstract-related-name>`."
msgstr ""
":attr:`related_name` と同様に、``related_query_name`` は :ref:`いくつかの特別"
"な構文 <abstract-related-name>` によるアプリのラベルとクラスの補間をサポート"
"します。"

msgid ""
"The field on the related object that the relation is to. By default, Django "
"uses the primary key of the related object. If you reference a different "
"field, that field must have ``unique=True``."
msgstr ""
"リレーション先オブジェクト上の、リレーション対象となるフィールドです。デフォ"
"ルトでは、Djangoはリレーション先オブジェクトの主キーを使用します。別のフィー"
"ルドを参照する場合、そのフィールドには ``unique=True`` が設定されている必要が"
"あります。"

msgid ""
"Controls whether or not a constraint should be created in the database for "
"this foreign key. The default is ``True``, and that's almost certainly what "
"you want; setting this to ``False`` can be very bad for data integrity. That "
"said, here are some scenarios where you might want to do this:"
msgstr ""
"この外部キーに対してデータベースに制約を作成するかどうかを制御します。デフォ"
"ルトは ``True`` で、ほとんどの場合それが望ましい設定です。これを ``False`` に"
"設定すると、データの整合性に大きな悪影響を及ぼす可能性があります。それでも、"
"以下のようなシナリオではこの設定を行いたくなるかもしれません："

msgid "You have legacy data that is not valid."
msgstr "無効なレガシーデータを持っている場合。"

msgid "You're sharding your database."
msgstr "データベースをシャーディング（分割）している場合。"

msgid ""
"If this is set to ``False``, accessing a related object that doesn't exist "
"will raise its ``DoesNotExist`` exception."
msgstr ""
"これが ``False`` にセットされている場合、存在しないリレーション先オブジェクト"
"にアクセスすると ``DoesNotExist`` 例外が発生します。"

msgid ""
"Controls the migration framework's reaction if this :class:`ForeignKey` is "
"pointing at a swappable model. If it is ``True`` - the default - then if "
"the :class:`ForeignKey` is pointing at a model which matches the current "
"value of ``settings.AUTH_USER_MODEL`` (or another swappable model setting) "
"the relationship will be stored in the migration using a reference to the "
"setting, not to the model directly."
msgstr ""
"この :class:`ForeignKey` がスワップ可能なモデルを指している場合のマイグレー"
"ションフレームワークの対応を制御します。デフォルトの ``True`` の場合、:class:"
"`ForeignKey` が ``settings.AUTH_USER_MODEL`` (または他のスワップ可能なモデル"
"の設定) の現在の値と一致するモデルを指している場合、リレーションシップはモデ"
"ルに直接ではなく、設定への参照を使用してマイグレーションに保存されます。"

msgid ""
"You only want to override this to be ``False`` if you are sure your model "
"should always point toward the swapped-in model - for example, if it is a "
"profile model designed specifically for your custom user model."
msgstr ""
"この設定を ``False`` に上書きしてよいのは、モデルが常にスワップされたモデルを"
"指すべきであると確信している場合のみです。例えば、カスタムユーザーモデル用に"
"特別に設計されたプロフィールモデルの場合などが該当します。"

msgid ""
"Setting it to ``False`` does not mean you can reference a swappable model "
"even if it is swapped out - ``False`` means that the migrations made with "
"this ForeignKey will always reference the exact model you specify (so it "
"will fail hard if the user tries to run with a User model you don't support, "
"for example)."
msgstr ""
"``False`` を設定しても、スワップ可能モデルがスワップアウトされた方のモデルを"
"参照できるわけではありません。具体的には、この設定を ``False`` にすると、この"
"外部キーを使用して作成されるマイグレーションは、指定されたモデルを常に直接参"
"照します（そのため、例えば、対応していないユーザーモデルを使用してマイグレー"
"ションを実行しようとした場合、明確なエラーが発生します）。"

msgid "If in doubt, leave it to its default of ``True``."
msgstr "迷ったときは、デフォルトの ``True`` のままにしてください。"

msgid "``ManyToManyField``"
msgstr "``ManyToManyField``"

msgid ""
"A many-to-many relationship. Requires a positional argument: the class to "
"which the model is related, which works exactly the same as it does for :"
"class:`ForeignKey`, including :ref:`recursive <recursive-relationships>` "
"and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""
"多対多のリレーションシップ。位置引数が必要で、モデルがリレーションを持つクラ"
"スを指定します。これは :class:`ForeignKey` での使用と全く同じ方法で機能し、:"
"ref:`再帰的なリレーションシップ<recursive-relationships>` や :ref:`遅延リレー"
"ションシップ <lazy-relationships>` を含みます。"

msgid ""
"Related objects can be added, removed, or created with the field's :class:"
"`~django.db.models.fields.related.RelatedManager`."
msgstr ""
"リレーション先オブジェクトはフィールドの :class:`~django.db.models.fields."
"related.RelatedManager` で追加、削除、作成ができます。"

msgid ""
"Behind the scenes, Django creates an intermediary join table to represent "
"the many-to-many relationship. By default, this table name is generated "
"using the name of the many-to-many field and the name of the table for the "
"model that contains it. Since some databases don't support table names above "
"a certain length, these table names will be automatically truncated and a "
"uniqueness hash will be used, e.g. ``author_books_9cdf``. You can manually "
"provide the name of the join table using the :attr:`~ManyToManyField."
"db_table` option."
msgstr ""
"裏では、Django は多対多のリレーションシップを表現するために、中間的な join "
"テーブルを作成します。デフォルトでは、このテーブル名は多対多のフィールド名"
"と、それを含むモデルのテーブル名を使って生成されます。データベースによっては"
"一定以上の長さのテーブル名をサポートしていないため、これらのテーブル名は自動"
"的に切り捨てられ、一意性のハッシュが使用されます (例:  "
"``author_books_9cdf``)。 :attr:`~ManyToManyField.db_table` オプションを使用す"
"れば、手動でjoinテーブルの名前を指定できます。"

msgid ""
":class:`ManyToManyField` accepts an extra set of arguments -- all optional "
"-- that control how the relationship functions."
msgstr ""
":class:`ManyToManyField` はリレーションシップがどう機能するかをコントロールす"
"る複数のオプション引数を受け付けます。"

msgid "Same as :attr:`ForeignKey.related_name`."
msgstr ":attr:`ForeignKey.related_name` と同様です。"

msgid "Same as :attr:`ForeignKey.related_query_name`."
msgstr ":attr:`ForeignKey.related_query_name` と同様です。"

msgid "Same as :attr:`ForeignKey.limit_choices_to`."
msgstr ":attr:`ForeignKey.limit_choices_to`  と同様です。"

msgid ""
"Only used in the definition of ManyToManyFields on self. Consider the "
"following model::"
msgstr ""
"self の ManyToManyFields の定義でのみ使用されます。次のモデルを考えてみましょ"
"う："

msgid ""
"When Django processes this model, it identifies that it has a :class:"
"`ManyToManyField` on itself, and as a result, it doesn't add a "
"``person_set`` attribute to the ``Person`` class. Instead, the :class:"
"`ManyToManyField` is assumed to be symmetrical -- that is, if I am your "
"friend, then you are my friend."
msgstr ""
"Django はこのモデルを処理するとき、 :class:`ManyToManyField` を持つことを識別"
"し、その結果 ``Person`` クラスに ``person_set`` 属性を追加しません。その代わ"
"りに、 :class:`ManyToManyField` は対称であると仮定されます。つまり、もし私が"
"あなたの友達なら、あなたは私の友達です。"

msgid ""
"If you do not want symmetry in many-to-many relationships with ``self``, "
"set :attr:`~ManyToManyField.symmetrical` to ``False``. This will force "
"Django to add the descriptor for the reverse relationship, allowing :class:"
"`ManyToManyField` relationships to be non-symmetrical."
msgstr ""
"もし ``self`` との多対多のリレーションシップに対称性を持たせたくない場合"
"は、 :attr:`~ManyToManyField.symmetrical` を ``False`` に設定してください。こ"
"れにより Django は逆リレーションシップの記述子を追加し、 :class:"
"`ManyToManyField` リレーションシップが非対称になるようにします。"

msgid ""
"Django will automatically generate a table to manage many-to-many "
"relationships. However, if you want to manually specify the intermediary "
"table, you can use the :attr:`~ManyToManyField.through` option to specify "
"the Django model that represents the intermediate table that you want to use."
msgstr ""
"Django は多対多のリレーションシップを管理するテーブルを自動生成します。しか"
"し、中間テーブルを手動で指定したい場合は、 :attr:`~ManyToManyField.through` "
"オプションを使って、使いたい中間テーブルを表す Django モデルを指定できます。"

msgid ""
"The most common use for this option is when you want to associate :ref:"
"`extra data with a many-to-many relationship <intermediary-manytomany>`."
msgstr ""
"このオプションの最も一般的な利用法は、 :ref:`多対多のリレーションシップに追加"
"のデータを関連付けたい <intermediary-manytomany>` 場合です。"

msgid ""
"If you don't want multiple associations between the same instances, add a :"
"class:`~django.db.models.UniqueConstraint` including the from and to fields. "
"Django's automatically generated many-to-many tables include such a "
"constraint."
msgstr ""
"同じインスタンス間で複数の関連付けをしたくない場合は、 :class:`~django.db."
"models.UniqueConstraint` を、from フィールドと to フィールドを含めて追加して"
"ください。Django が自動生成する多対多のテーブルには、このような制約が含まれて"
"います。"

msgid ""
"Recursive relationships using an intermediary model can't determine the "
"reverse accessors names, as they would be the same. You need to set a :attr:"
"`~ForeignKey.related_name` to at least one of them. If you'd prefer Django "
"not to create a backwards relation, set ``related_name`` to ``'+'``."
msgstr ""
"中間モデルを使用した再帰的リレーションシップでは、逆アクセサ名 (reverse "
"accessor name) を決定することはできません。同じ名前になってしまうからです。少"
"なくともどちらかに :attr:`~ForeignKey.related_name` を設定する必要がありま"
"す。もし Django が逆リレーションを作成しないことを望むなら、 "
"``related_name`` を ``'+'`` に設定してください。"

msgid ""
"If you don't specify an explicit ``through`` model, there is still an "
"implicit ``through`` model class you can use to directly access the table "
"created to hold the association. It has three fields to link the models."
msgstr ""
"明示的な ``through`` モデルを指定しない場合でも、暗黙的な ``through`` モデル"
"クラスが用意されており、関連付けを保持するために作成されたテーブルに直接アク"
"セスできます。このクラスにはモデルをリンクするための3つのフィールドがありま"
"す。"

msgid ""
"If the source and target models differ, the following fields are generated:"
msgstr ""
"ソース・モデルとターゲット・モデルが異なる場合、以下のフィールドが生成されま"
"す："

msgid "``id``: the primary key of the relation."
msgstr "``id``: リレーションの主キー。"

msgid ""
"``<containing_model>_id``: the ``id`` of the model that declares the "
"``ManyToManyField``."
msgstr ""
"``<containing_model>_id``: ``ManyToManyField`` を宣言したモデルの ``id`` 。"

msgid ""
"``<other_model>_id``: the ``id`` of the model that the ``ManyToManyField`` "
"points to."
msgstr "``<other_model>_id``: ``ManyToManyField`` が指すモデルの ``id`` 。"

msgid ""
"If the ``ManyToManyField`` points from and to the same model, the following "
"fields are generated:"
msgstr ""
"もし ``ManyToManyField`` が同じモデルを指している場合、以下のフィールドが生成"
"されます："

msgid ""
"``from_<model>_id``: the ``id`` of the instance which points at the model (i."
"e. the source instance)."
msgstr ""
"``from_<model>_id``: モデルを指すインスタンス (つまりソースインスタンス) の "
"``id`` です。"

msgid ""
"``to_<model>_id``: the ``id`` of the instance to which the relationship "
"points (i.e. the target model instance)."
msgstr ""
"``to_<model>_id``: リレーションシップの対象となるインスタンス (つまり、ター"
"ゲットモデル・インスタンス) の ``id`` 。"

msgid ""
"This class can be used to query associated records for a given model "
"instance like a normal model::"
msgstr ""
"このクラスは、通常のモデルのように、指定されたモデルのインスタンスに関連する"
"レコードをクエリするために使用できます："

msgid ""
"Only used when a custom intermediary model is specified. Django will "
"normally determine which fields of the intermediary model to use in order to "
"establish a many-to-many relationship automatically. However, consider the "
"following models::"
msgstr ""
"カスタムの中間モデルが指定されている場合にだけ使われます。Django は通常、多対"
"多のリレーションシップを確立するために、仲介モデルのどのフィールドを使うかを"
"自動的に決定します。しかし、以下のモデルを考えてみてください："

msgid ""
"``Membership`` has *two* foreign keys to ``Person`` (``person`` and "
"``inviter``), which makes the relationship ambiguous and Django can't know "
"which one to use. In this case, you must explicitly specify which foreign "
"keys Django should use using ``through_fields``, as in the example above."
msgstr ""
"``Membership`` は ``Person`` に対する外部キーを *2つ* 持っています "
"(``person`` と ``inviter``) ので、リレーションシップが曖昧になり、Django はど"
"ちらを使うべきか分からなくなります。この場合、上の例のように "
"``through_fields`` を使って、 Django がどの外部キーを使うかを明示的に指定する"
"必要があります。"

msgid ""
"``through_fields`` accepts a 2-tuple ``('field1', 'field2')``, where "
"``field1`` is the name of the foreign key to the model the :class:"
"`ManyToManyField` is defined on (``group`` in this case), and ``field2`` the "
"name of the foreign key to the target model (``person`` in this case)."
msgstr ""
"``through_fields`` は2値タプル ``('field1', 'field2')`` を受け付けます。ここ"
"で ``field1`` は :class:`ManyToManyField` が定義されているモデルの外部キーの"
"名前 (この場合は ``group``) で、 ``field2`` は対象のモデルの外部キーの名前 "
"(この場合は ``person``) です。"

msgid ""
"When you have more than one foreign key on an intermediary model to any (or "
"even both) of the models participating in a many-to-many relationship, you "
"*must* specify ``through_fields``. This also applies to :ref:`recursive "
"relationships <recursive-relationships>` when an intermediary model is used "
"and there are more than two foreign keys to the model, or you want to "
"explicitly specify which two Django should use."
msgstr ""
"多対多のリレーションシップに参加するモデルのいずれか(あるいは両方)に対して、"
"仲介モデルに複数の外部キーがある場合、 ``through_fields`` を指定する必要があ"
"ります。これは :ref:`再帰的なリレーションシップ <recursive-relationships>` に"
"も当てはまり、中間モデルが使われ、そのモデルへの外部キーが2つ以上ある場合、あ"
"るいは Django がどの2つを使うかを明示的に指定したい場合に適用されます。"

msgid ""
"The name of the table to create for storing the many-to-many data. If this "
"is not provided, Django will assume a default name based upon the names of: "
"the table for the model defining the relationship and the name of the field "
"itself."
msgstr ""
"多対多のデータを格納するために作成するテーブルの名前です。これが指定されない"
"場合、 Django はリレーションシップを定義するモデルのテーブル名と、 フィールド"
"名に基づいてデフォルトの名前を決めます。"

msgid ""
"Controls whether or not constraints should be created in the database for "
"the foreign keys in the intermediary table. The default is ``True``, and "
"that's almost certainly what you want; setting this to ``False`` can be very "
"bad for data integrity. That said, here are some scenarios where you might "
"want to do this:"
msgstr ""
"中間テーブルの外部キーに対して制約を作成するかどうかを制御します。デフォルト"
"は ``True`` で、ほとんどの場合それが望ましい設定です。これを ``False`` に設定"
"すると、データの整合性に大きな悪影響を及ぼす可能性があります。それでも、以下"
"のようなシナリオでこの設定を行いたくなるかもしれません："

msgid "It is an error to pass both ``db_constraint`` and ``through``."
msgstr "``db_constraint`` と ``through`` の両方を渡すとエラーになります。"

msgid ""
"Controls the migration framework's reaction if this :class:`ManyToManyField` "
"is pointing at a swappable model. If it is ``True`` - the default - then if "
"the :class:`ManyToManyField` is pointing at a model which matches the "
"current value of ``settings.AUTH_USER_MODEL`` (or another swappable model "
"setting) the relationship will be stored in the migration using a reference "
"to the setting, not to the model directly."
msgstr ""
"この :class:`ManyToManyField` がスワップ可能なモデルを指している場合のマイグ"
"レーションフレームワークの対応を制御します。もし ``True`` (デフォルト) であれ"
"ば、 :class:`ManyToManyField` が ``settings.AUTH_USER_MODEL`` (または他のス"
"ワップ可能なモデルの設定) の現在の値と一致するモデルを指している場合、リレー"
"ションシップはモデルに直接ではなく、設定への参照を使用してマイグレーションに"
"保存されます。"

msgid ":class:`ManyToManyField` does not support :attr:`~Field.validators`."
msgstr ""
":class:`ManyToManyField` は :attr:`~Field.validators` をサポートしていませ"
"ん。"

msgid ""
":attr:`~Field.null` has no effect since there is no way to require a "
"relationship at the database level."
msgstr ""
":attr:`~Field.null` は、データベースレベルでリレーションシップを要求する方法"
"がないので、何の効果もありません。"

msgid "``OneToOneField``"
msgstr "``OneToOneField``"

msgid ""
"A one-to-one relationship. Conceptually, this is similar to a :class:"
"`ForeignKey` with :attr:`unique=True <Field.unique>`, but the \"reverse\" "
"side of the relation will directly return a single object."
msgstr ""
"一対一のリレーションシップです。概念的には :class:`ForeignKey` に :attr:"
"`unique=True <Field.unique>` を指定したものと似ていますが、リレーションの "
"\"反対側\" が直接1つのオブジェクトを返します。"

msgid ""
"This is most useful as the primary key of a model which \"extends\" another "
"model in some way; :ref:`multi-table-inheritance` is implemented by adding "
"an implicit one-to-one relation from the child model to the parent model, "
"for example."
msgstr ""
"これは、何らかの方法で別のモデルを「拡張」するモデルの主キーとして最も有用で"
"す。例えば、:ref:`multi-table-inheritance` は、子モデルから親モデルへの暗黙の"
"一対一リレーションシップを追加することによって実装されます。"

msgid ""
"One positional argument is required: the class to which the model will be "
"related. This works exactly the same as it does for :class:`ForeignKey`, "
"including all the options regarding :ref:`recursive <recursive-"
"relationships>` and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""
"位置引数が1つ必要で、モデルが関連付けられるクラスを指定します。これは :class:"
"`ForeignKey` と全く同じ方法で機能し、:ref:`再帰的なリレーションシップ "
"<recursive-relationships>` や :ref:`遅延リレーションシップ <lazy-"
"relationships>` に関するすべてのオプションが含まれます。"

msgid ""
"If you do not specify the :attr:`~ForeignKey.related_name` argument for the "
"``OneToOneField``, Django will use the lowercase name of the current model "
"as default value."
msgstr ""
"もし ``OneToOneField`` に :attr:`~ForeignKey.related_name` 引数を指定しなけれ"
"ば、 Django は現在のモデルの小文字の名前をデフォルト値として使用します。"

msgid "With the following example::"
msgstr "次の例では、"

msgid "your resulting ``User`` model will have the following attributes:"
msgstr "出来上がった ``User`` モデルは以下の属性を持つことになります："

msgid ""
"A ``RelatedObjectDoesNotExist`` exception is raised when accessing the "
"reverse relationship if an entry in the related table doesn't exist. This is "
"a subclass of the target model's :exc:`Model.DoesNotExist <django.db.models."
"Model.DoesNotExist>` exception and can be accessed as an attribute of the "
"reverse accessor. For example, if a user doesn't have a supervisor "
"designated by ``MySpecialUser``::"
msgstr ""
"リレーション先テーブルにエントリが存在しない場合、逆リレーションシップにアク"
"セスすると ``RelatedObjectDoesNotExist`` 例外が発生します。これは対象モデル"
"の :exc:`Model.DoesNotExist <django.db.models.Model.DoesNotExist>` 例外のサブ"
"クラスであり、逆アクセサ (reverse accessor) の属性としてアクセスできます。た"
"とえば、ユーザーに ``MySpecialUser`` によって指定されたスーパーバイザーがいな"
"い場合："

msgid ""
"Additionally, ``OneToOneField`` accepts all of the extra arguments accepted "
"by :class:`ForeignKey`, plus one extra argument:"
msgstr ""
"さらに、``OneToOneField`` は :class:`ForeignKey` が受け付ける全ての引数に加"
"え、1つの追加引数を受け付けます："

msgid ""
"When ``True`` and used in a model which inherits from another :term:"
"`concrete model`, indicates that this field should be used as the link back "
"to the parent class, rather than the extra ``OneToOneField`` which would "
"normally be implicitly created by subclassing."
msgstr ""
"``True`` に設定され、他の :term:`concrete model` から継承されたモデルで使用さ"
"れた場合、サブクラス化によって通常は暗黙的に作成される追加の "
"``OneToOneField`` の代わりに、このフィールドが親クラスへのリンクとして使用さ"
"れるべきことを示します。"

msgid ""
"See :doc:`One-to-one relationships </topics/db/examples/one_to_one>` for "
"usage examples of ``OneToOneField``."
msgstr ""
"``OneToOneField`` の使用例については :doc:`一対一のリレーションシップ </"
"topics/db/examples/one_to_one>` を参照してください。"

msgid "Field API reference"
msgstr "フィールド API リファレンス"

msgid ""
"``Field`` is an abstract class that represents a database table column. "
"Django uses fields to create the database table (:meth:`db_type`), to map "
"Python types to database (:meth:`get_prep_value`) and vice-versa (:meth:"
"`from_db_value`)."
msgstr ""
"フィールドはデータベーステーブルのカラムを表す抽象クラスです。Django はフィー"
"ルドを使ってデータベーステーブルを作成したり (:meth:`db_type`)、 Python の型"
"をデータベースにマッピングしたり (:meth:`get_prep_value`)、逆にしたり (:meth:"
"`from_db_value`) します。"

msgid ""
"A field is thus a fundamental piece in different Django APIs, notably, :"
"class:`models <django.db.models.Model>` and :class:`querysets <django.db."
"models.query.QuerySet>`."
msgstr ""
"したがって、フィールドは、特に :class:`モデル <django.db.models.Model>` や :"
"class:`クエリセット <django.db.models.query.QuerySet>` など、他のDjango APIに"
"おける基本的な要素です。"

msgid ""
"In models, a field is instantiated as a class attribute and represents a "
"particular table column, see :doc:`/topics/db/models`. It has attributes "
"such as :attr:`null` and :attr:`unique`, and methods that Django uses to map "
"the field value to database-specific values."
msgstr ""
"モデルでは、フィールドはクラス属性としてインスタンス化され、特定のテーブルの"
"カラムを表します (:doc:`/topics/db/models` 参照)。フィールドには :attr:"
"`null` や :attr:`unique` といった属性と、 Django がフィールドの値をデータベー"
"ス固有の値にマッピングするためのメソッドがあります。"

msgid ""
"A ``Field`` is a subclass of :class:`~django.db.models.lookups."
"RegisterLookupMixin` and thus both :class:`~django.db.models.Transform` and :"
"class:`~django.db.models.Lookup` can be registered on it to be used in "
"``QuerySet``\\s (e.g. ``field_name__exact=\"foo\"``). All :ref:`built-in "
"lookups <field-lookups>` are registered by default."
msgstr ""
"フィールド ``Field`` は :class:`~django.db.models.lookups."
"RegisterLookupMixin` のサブクラスなので、 :class:`~django.db.models."
"Transform` と :class:`~django.db.models.Lookup` の両方を登録して "
"``QuerySet`` で使用できます (例: ``field_name__exact=\"foo\"``) 。デフォルト"
"では全ての :ref:`組み込みのルックアップ <field-lookups>` が登録されています。"

msgid ""
"All of Django's built-in fields, such as :class:`CharField`, are particular "
"implementations of ``Field``. If you need a custom field, you can either "
"subclass any of the built-in fields or write a ``Field`` from scratch. In "
"either case, see :doc:`/howto/custom-model-fields`."
msgstr ""
":class:`CharField` のような Django 組み込みのフィールドは全て ``Field`` の具"
"体的な実装です。独自のフィールドが必要な場合は、組み込みフィールドをサブクラ"
"ス化するか、一から ``Field`` を書いてください。どちらの場合でも :doc:`/howto/"
"custom-model-fields` を参照してください。"

msgid ""
"A verbose description of the field, e.g. for the :mod:`django.contrib."
"admindocs` application."
msgstr ""
"フィールドの詳細な説明。例えば :mod:`django.contrib.admindocs` アプリケーショ"
"ンなどのためのものです。"

msgid "The description can be of the form::"
msgstr "説明文は以下のような形式です："

msgid "where the arguments are interpolated from the field's ``__dict__``."
msgstr "引数はフィールドの ``__dict__`` から補間されます。"

msgid ""
"A class implementing the :py:ref:`descriptor protocol <descriptors>` that is "
"instantiated and assigned to the model instance attribute. The constructor "
"must accept a single argument, the ``Field`` instance. Overriding this class "
"attribute allows for customizing the get and set behavior."
msgstr ""
"インスタンス化され、モデルのインスタンス属性に割り当てられる :py:ref:`デスク"
"リプタ・プロトコル <descriptors>` を実装したクラスです。コンストラクタは単一"
"の引数 ``Field`` インスタンスを受け取る必要があります。このクラス属性をオー"
"バーライドすることで、get と set の動作をカスタマイズできます。"

msgid ""
"To map a ``Field`` to a database-specific type, Django exposes several "
"methods:"
msgstr ""
"フィールド ``Field`` をデータベース固有の型にマッピングするために、 Django は"
"いくつかのメソッドを公開しています："

msgid ""
"Returns a string naming this field for backend specific purposes. By "
"default, it returns the class name."
msgstr ""
"バックエンド固有の目的のために、このフィールドの名前を文字列で返します。デ"
"フォルトでは、クラス名を返します。"

msgid "See :ref:`emulating-built-in-field-types` for usage in custom fields."
msgstr ""
"カスタムフィールドでの使用法については :ref:`emulating-built-in-field-types` "
"を参照してください。"

msgid ""
"Returns the database column data type for the :class:`Field`, taking into "
"account the ``connection``."
msgstr ""
":class:`Field` のデータベースカラムのデータ型を、``connection`` を考慮して返"
"します。"

msgid "See :ref:`custom-database-types` for usage in custom fields."
msgstr ""
"カスタムフィールドでの使用法については :ref:`custom-database-types` を参照し"
"てください。"

msgid ""
"Returns the database column data type for fields such as ``ForeignKey`` and "
"``OneToOneField`` that point to the :class:`Field`, taking into account the "
"``connection``."
msgstr ""
":class:`Field` を指す ``ForeignKey`` や ``OneToOneField`` などのフィールドの"
"データベースカラムのデータ型を、``connection`` を考慮して返します。"

msgid ""
"There are three main situations where Django needs to interact with the "
"database backend and fields:"
msgstr ""
"Django がデータベースのバックエンドやフィールドとやり取りする必要がある場面"
"は、 主に3つあります："

msgid "when it queries the database (Python value -> database backend value)"
msgstr ""
"データベースへのクエリ時 (Python の値 -> データベースのバックエンドの値)"

msgid ""
"when it loads data from the database (database backend value -> Python value)"
msgstr ""
"データベースからデータを読み込むとき (データベースのバックエンドの値 -> "
"Python の値)"

msgid "when it saves to the database (Python value -> database backend value)"
msgstr "データベースへの保存時 (Python の値 -> データベースのバックエンドの値)"

msgid ""
"When querying, :meth:`get_db_prep_value` and :meth:`get_prep_value` are used:"
msgstr ""
"クエリでは :meth:`get_db_prep_value` と :meth:`get_prep_value` が使用されま"
"す："

msgid ""
"``value`` is the current value of the model's attribute, and the method "
"should return data in a format that has been prepared for use as a parameter "
"in a query."
msgstr ""
"``value`` はモデルの属性の現在の値で、メソッドはクエリのパラメータとして使用"
"できるように書かれた形式のデータを返す必要があります。"

msgid "See :ref:`converting-python-objects-to-query-values` for usage."
msgstr ""
"使い方は :ref:`converting-python-objects-to-query-values` を参照してくださ"
"い。"

msgid ""
"Converts ``value`` to a backend-specific value. By default it returns "
"``value`` if ``prepared=True`` and :meth:`~Field.get_prep_value` if is "
"``False``."
msgstr ""
"``value`` をバックエンド固有の値に変換します。デフォルトでは、 "
"``prepared=True`` の場合は ``value`` を返し、 ``False`` の場合は :meth:"
"`~Field.get_prep_value` を返します。"

msgid "See :ref:`converting-query-values-to-database-values` for usage."
msgstr ""
"使い方は :ref:`converting-query-values-to-database-values` を参照してくださ"
"い。"

msgid "When loading data, :meth:`from_db_value` is used:"
msgstr "データを読み込む際には :meth:`from_db_value` が使用されます："

msgid ""
"Converts a value as returned by the database to a Python object. It is the "
"reverse of :meth:`get_prep_value`."
msgstr ""
"データベースが返す値を Python オブジェクトに変換します。これは :meth:"
"`get_prep_value` の逆です。"

msgid ""
"This method is not used for most built-in fields as the database backend "
"already returns the correct Python type, or the backend itself does the "
"conversion."
msgstr ""
"データベースのバックエンドはすでに正しい Python 型を返すか、バックエンド自身"
"が変換を行うので、このメソッドはほとんどの組み込みフィールドには使われませ"
"ん。"

msgid "See :ref:`converting-values-to-python-objects` for usage."
msgstr ""
"使い方は :ref:`converting-values-to-python-objects` を参照してください。"

msgid ""
"For performance reasons, ``from_db_value`` is not implemented as a no-op on "
"fields which do not require it (all Django fields). Consequently you may not "
"call ``super`` in your definition."
msgstr ""
"パフォーマンス上の理由から、 ``from_db_value`` は、それを必要としないフィール"
"ド (Django の全てのフィールド) では何もしない関数としては実装されていません。"
"そのため、定義内で ``super`` を呼び出してはいけません。"

msgid "When saving, :meth:`pre_save` and :meth:`get_db_prep_save` are used:"
msgstr ""
"保存時には :meth:`pre_save` と :meth:`get_db_prep_save` が使用されます："

msgid ""
"Same as the :meth:`get_db_prep_value`, but called when the field value must "
"be *saved* to the database. By default returns :meth:`get_db_prep_value`."
msgstr ""
":meth:`get_db_prep_value` と同じですが、フィールドの値をデータベースに *保存"
"* しなければならない場合に呼び出されます。デフォルトでは :meth:"
"`get_db_prep_value` を返します。"

msgid ""
"Method called prior to :meth:`get_db_prep_save` to prepare the value before "
"being saved (e.g. for :attr:`DateField.auto_now`)."
msgstr ""
"保存する前に値を整えるために :meth:`get_db_prep_save` の前に呼び出されるメ"
"ソッドです (例えば :attr:`DateField.auto_now` の場合など)。"

msgid ""
"``model_instance`` is the instance this field belongs to and ``add`` is "
"whether the instance is being saved to the database for the first time."
msgstr ""
"``model_instance`` はこのフィールドが属するインスタンスで、``add`` はインスタ"
"ンスが初めてデータベースに保存されるかどうかです。"

msgid ""
"It should return the value of the appropriate attribute from "
"``model_instance`` for this field. The attribute name is in ``self.attname`` "
"(this is set up by :class:`~django.db.models.Field`)."
msgstr ""
"このフィールドの ``model_instance`` からは適切な属性の値を返す必要がありま"
"す。属性名は ``self.attname`` にあります (これは :class:`~django.db.models."
"Field` で設定します)。"

msgid "See :ref:`preprocessing-values-before-saving` for usage."
msgstr ""
"使い方は :ref:`preprocessing-values-before-saving` を参照してください。"

msgid ""
"Fields often receive their values as a different type, either from "
"serialization or from forms."
msgstr ""
"フィールドは多くの場合、シリアライズやフォームから別の型として値を受け取りま"
"す。"

msgid ""
"Converts the value into the correct Python object. It acts as the reverse "
"of :meth:`value_to_string`, and is also called in :meth:`~django.db.models."
"Model.clean`."
msgstr ""
"値を正しい Python オブジェクトに変換します。これは :meth:`value_to_string` の"
"逆として動作し、 :meth:`~django.db.models.Model.clean` でも呼び出されます。"

msgid ""
"Besides saving to the database, the field also needs to know how to "
"serialize its value:"
msgstr ""
"データベースに保存する方法だけでなく、フィールドはその値をシリアライズする方"
"法も知っておく必要があります："

msgid "Returns the field's value for the given model instance."
msgstr "指定されたモデルのインスタンスのフィールドの値を返します。"

msgid "This method is often used by :meth:`value_to_string`."
msgstr "このメソッドは :meth:`value_to_string` でよく使われます。"

msgid "Converts ``obj`` to a string. Used to serialize the value of the field."
msgstr ""
"``obj`` を文字列に変換します。フィールドの値をシリアライズするために使用しま"
"す。"

msgid "See :ref:`converting-model-field-to-serialization` for usage."
msgstr ""
"使い方は :ref:`converting-model-field-to-serialization` を参照してください。"

msgid ""
"When using :class:`model forms <django.forms.ModelForm>`, the ``Field`` "
"needs to know which form field it should be represented by:"
msgstr ""
":class:`モデルフォーム <django.forms.ModelForm>` を使用する場合、 ``Field`` "
"はどのフォームフィールドで表現されるべきかを知る必要があります："

msgid ""
"Returns the default :class:`django.forms.Field` of this field for :class:"
"`~django.forms.ModelForm`."
msgstr ""
"このフィールドの :class:`~django.forms.ModelForm` に対するデフォルトの :"
"class:`django.forms.Field` を返します。"

msgid ""
"By default, if both ``form_class`` and ``choices_form_class`` are ``None``, "
"it uses :class:`~django.forms.CharField`. If the field has :attr:`~django.db."
"models.Field.choices` and ``choices_form_class`` isn't specified, it uses :"
"class:`~django.forms.TypedChoiceField`."
msgstr ""
"デフォルトでは、 ``form_class`` と ``choices_form_class`` の両方が ``None`` "
"の場合、 :class:`~django.forms.CharField` を使用します。フィールドに :attr:"
"`~django.db.models.Field.choices` が指定されていて、 ``choices_form_class`` "
"が指定されていない場合、 :class:`~django.forms.TypedChoiceField` を使用しま"
"す。"

msgid "See :ref:`specifying-form-field-for-model-field` for usage."
msgstr ""
"使い方は :ref:`specifying-form-field-for-model-field` を参照してください。"

msgid "Returns a 4-tuple with enough information to recreate the field:"
msgstr "フィールドを再作成するのに十分な情報を持つ4値タプルを返します："

msgid "The name of the field on the model."
msgstr "モデルのフィールド名。"

msgid ""
"The import path of the field (e.g. ``\"django.db.models.IntegerField\"``). "
"This should be the most portable version, so less specific may be better."
msgstr ""
"フィールドのインポートパス (例 ``\"django.db.models.IntegerField\"``)。移植性"
"は高く保つべきなので、あまり特定しすぎない方が良いかもしれません。"

msgid "A list of positional arguments."
msgstr "位置引数のリスト。"

msgid "A dict of keyword arguments."
msgstr "キーワード引数の辞書。"

msgid ""
"This method must be added to fields prior to 1.7 to migrate its data using :"
"doc:`/topics/migrations`."
msgstr ""
"1.7 より前のバージョンでは、 :doc:`/topics/migrations` を使用してデータをマイ"
"グレーションするために、このメソッドをフィールドに追加する必要がありました。"

msgid "Registering and fetching lookups"
msgstr "ルックアップの登録と取得"

msgid ""
"``Field`` implements the :ref:`lookup registration API <lookup-registration-"
"api>`. The API can be used to customize which lookups are available for a "
"field class and its instances, and how lookups are fetched from a field."
msgstr ""
"フィールド ``Field`` は :ref:`ルックアップ レジストレーション API <lookup-"
"registration-api>` を実装しています。このAPIを使用して、フィールドクラスとそ"
"のインスタンスでどのルックアップを利用できるか、またフィールドからどのように"
"ルックアップを取得するかをカスタマイズできます。"

msgid ""
"Support for registering lookups on :class:`~django.db.models.Field` "
"instances was added."
msgstr ""
":class:`~django.db.models.Field` インスタンスにルックアップを登録できるように"
"なりました。"

msgid "Field attribute reference"
msgstr "フィールド属性 リファレンス"

msgid ""
"Every ``Field`` instance contains several attributes that allow "
"introspecting its behavior. Use these attributes instead of ``isinstance`` "
"checks when you need to write code that depends on a field's functionality. "
"These attributes can be used together with the :ref:`Model._meta API <model-"
"meta-field-api>` to narrow down a search for specific field types. Custom "
"model fields should implement these flags."
msgstr ""
"すべての ``Field`` インスタンスには、その動作を詳しく調べるための属性がいくつ"
"か含まれています。フィールドの機能に依存するコードを書く必要がある場合には、 "
"``isinstance`` チェックの代わりにこれらの属性を使用してください。これらの属性"
"は :ref:`Model._meta API <model-meta-field-api>` と一緒に使うことで、特定の"
"フィールドタイプを絞り込むことができます。カスタムモデルフィールドはこれらの"
"フラグを実装する必要があります。"

msgid "Attributes for fields"
msgstr "フィールドの属性"

msgid ""
"Boolean flag that indicates if the field was automatically created, such as "
"the ``OneToOneField`` used by model inheritance."
msgstr ""
"モデル継承で使用される ``OneToOneField`` のように、フィールドが自動的に作成さ"
"れたかどうかを示す真偽値フラグ。"

msgid ""
"Boolean flag that indicates if the field has a database column associated "
"with it."
msgstr ""
"フィールドにデータベース・カラムが関連付けられているかどうかを示す真偽値。"

msgid ""
"Boolean flag that indicates if a field is hidden and should not be returned "
"by :meth:`Options.get_fields() <django.db.models.options.Options."
"get_fields>` by default. An example is the reverse field for a :class:"
"`~django.db.models.ForeignKey` with a ``related_name`` that starts with "
"``'+'``."
msgstr ""
"デフォルトでは :meth:`Options.get_fields() <django.db.models.options.Options."
"get_fields>` によって返されない隠しフィールドがあるかどうかを示す真偽値のフラ"
"グです。例えば、 :class:`~django.db.models.ForeignKey` の逆フィールドで、 "
"``related_name`` が ``'+'`` で始まる場合です。"

msgid ""
"Boolean flag that indicates if a field contains references to one or more "
"other models for its functionality (e.g. ``ForeignKey``, "
"``ManyToManyField``, ``OneToOneField``, etc.)."
msgstr ""
"真偽値フラグで、フィールドが機能のために一つまたは複数の他のモデルへの参照を"
"含んでいるかどうかを示します（例: ``ForeignKey``, ``ManyToManyField``, "
"``OneToOneField`` など）。"

msgid ""
"Returns the model on which the field is defined. If a field is defined on a "
"superclass of a model, ``model`` will refer to the superclass, not the class "
"of the instance."
msgstr ""
"フィールドが定義されているモデルを返します。フィールドがモデルの基底クラスに"
"定義されている場合、``model`` はインスタンスのクラスではなく基底クラスを参照"
"します。"

msgid "Attributes for fields with relations"
msgstr "リレーションを持つフィールドの属性"

msgid ""
"These attributes are used to query for the cardinality and other details of "
"a relation. These attribute are present on all fields; however, they will "
"only have boolean values (rather than ``None``) if the field is a relation "
"type (:attr:`Field.is_relation=True <Field.is_relation>`)."
msgstr ""
"これらの属性はリレーションのカーディナリティやその他の詳細をクエリするために"
"使用されます。これらの属性は全てのフィールドに存在しますが、フィールドがリ"
"レーションタイプである場合のみ (``None`` ではなく) 真偽値を持ちます (:attr:"
"`Field.is_relation=True <Field.is_relation>`)。"

msgid ""
"Boolean flag that is ``True`` if the field has a many-to-many relation; "
"``False`` otherwise. The only field included with Django where this is "
"``True`` is ``ManyToManyField``."
msgstr ""
"真偽値フラグで、フィールドが多対多のリレーションを持つ場合は ``True`` とな"
"り、そうでない場合は ``False`` となります。Django で ``True`` となるフィール"
"ドは ``ManyToManyField`` だけです。"

msgid ""
"Boolean flag that is ``True`` if the field has a many-to-one relation, such "
"as a ``ForeignKey``; ``False`` otherwise."
msgstr ""
"真偽値フラグで、フィールドが ``ForeignKey`` のような多対一のリレーションを"
"持っている場合は ``True`` となり、そうでない場合は ``False`` となります。"

msgid ""
"Boolean flag that is ``True`` if the field has a one-to-many relation, such "
"as a ``GenericRelation`` or the reverse of a ``ForeignKey``; ``False`` "
"otherwise."
msgstr ""
"真偽値フラグで、フィールドが ``GenericRelation`` や ``ForeignKey`` のような一"
"対多のリレーションを持っている場合は ``True`` となり、そうでない場合は "
"``False`` となります。"

msgid ""
"Boolean flag that is ``True`` if the field has a one-to-one relation, such "
"as a ``OneToOneField``; ``False`` otherwise."
msgstr ""
"真偽値フラグで、フィールドが ``OneToOneField`` のような一対一のリレーションを"
"持っている場合は ``True`` となり、そうでない場合は ``False`` となります。"

msgid ""
"Points to the model the field relates to. For example, ``Author`` in "
"``ForeignKey(Author, on_delete=models.CASCADE)``. The ``related_model`` for "
"a ``GenericForeignKey`` is always ``None``."
msgstr ""
"フィールドのリレーション先となるモデルを指定します。例えば、 "
"``ForeignKey(Author, on_delete=models.CASCADE)`` の ``Author`` です。 "
"``GenericForeignKey`` の ``related_model`` は常に ``None`` です。"

msgid ""
"Model API reference. For introductory material, see :doc:`/topics/db/models`."
msgstr ""
"モデルのAPIリファレンスです。入門的な内容については :doc:`/topics/db/models` "
"を参照してください。"

msgid "Model index reference"
msgstr "モデル index リファレンス"

msgid ""
"Index classes ease creating database indexes. They can be added using the :"
"attr:`Meta.indexes <django.db.models.Options.indexes>` option. This document "
"explains the API references of :class:`Index` which includes the `index "
"options`_."
msgstr ""
"Index クラスを利用すると、データベースのインデックスの作成が簡単になります。"
"インデックスは、 :attr:`Meta.indexes <django.db.models.Options.indexes>` オプ"
"ションを使用して追加できます。このドキュメントでは、 `index options`_ を含"
"む :class:`Index` の API リフェレンスを説明します。"

msgid "Referencing built-in indexes"
msgstr "ビルトインの indexes を参照する"

msgid ""
"Indexes are defined in ``django.db.models.indexes``, but for convenience "
"they're imported into :mod:`django.db.models`. The standard convention is to "
"use ``from django.db import models`` and refer to the indexes as ``models."
"<IndexClass>``."
msgstr ""
"Indexes は ``django.db.models.indexes`` で定義されていますが、簡単のため、:"
"mod:`django.db.models` 内にインポートされています。``from django.db import "
"models`` を使用して、indexes を ``models.<IndexClass>`` として参照するのが標"
"準的な慣習です。"

msgid "``Index`` options"
msgstr "``Index`` オプション"

msgid "Creates an index (B-Tree) in the database."
msgstr "データベース内にインデックス (B-Tree) を作成します。"

msgid ""
"Positional argument ``*expressions`` allows creating functional indexes on "
"expressions and database functions."
msgstr ""
"位置引数 ``*expressions`` を使用すると、式およびデータベース関数に対して関数"
"インデックスを作成できます。"

msgid ""
"creates an index on the lowercased value of the ``title`` field in "
"descending order and the ``pub_date`` field in the default ascending order."
msgstr ""
"この例は、``title`` フィールドを小文字にした値の降順と、``pub_date`` フィール"
"ドのデフォルトの昇順で、インデックスを作成します。"

msgid "Another example::"
msgstr "もう1つの例:"

msgid ""
"creates an index on the result of multiplying fields ``height`` and "
"``weight`` and the ``weight`` rounded to the nearest integer."
msgstr ""
"この例は、``height`` および ``weight`` フィールドの積の結果と、``weight`` を"
"直近の整数に丸めた値で、インデックスを作成します。"

msgid ":attr:`Index.name` is required when using ``*expressions``."
msgstr "``*expressions`` を使用する場合、:attr:`Index.name` は必須です。"

msgid "Restrictions on Oracle"
msgstr "Oracle の制限"

msgid ""
"Oracle requires functions referenced in an index to be marked as "
"``DETERMINISTIC``. Django doesn't validate this but Oracle will error. This "
"means that functions such as :class:`Random() <django.db.models.functions."
"Random>` aren't accepted."
msgstr ""
"Oracle はインデックスから参照される関数を ``DETERMINISTIC`` とマークする必要"
"があります。Django はこれを検証しませんが、 Oracle はエラーにします。つま"
"り、 :class:`Random() <django.db.models.functions.Random>` のような関数は受け"
"付けられません。"

msgid "Restrictions on PostgreSQL"
msgstr "PostgreSQL の制限"

msgid ""
"PostgreSQL requires functions and operators referenced in an index to be "
"marked as ``IMMUTABLE``. Django doesn't validate this but PostgreSQL will "
"error. This means that functions such as :class:`Concat() <django.db.models."
"functions.Concat>` aren't accepted."
msgstr ""
"PostgreSQL では、インデックス内で参照されている関数と演算子が ``IMMUTABLE`` "
"としてマークされていなければなりません。Django はこのことを検証しませんが、"
"PostgreSQL はエラーを起こします。これは、:class:`Concat() <django.db.models."
"functions.Concat>` などの関数が受け入れられないことを意味します。"

msgid ""
"Functional indexes are ignored with MySQL < 8.0.13 and MariaDB as neither "
"supports them."
msgstr ""
"関数インデックスは、MySQL < 8.0.13 および MariaDB ではサポートされていないた"
"め、無視されます。"

msgid ""
"A list or tuple of the name of the fields on which the index is desired."
msgstr "インデックスが必要なフィールド名のリストまたはタプル。"

msgid ""
"By default, indexes are created with an ascending order for each column. To "
"define an index with a descending order for a column, add a hyphen before "
"the field's name."
msgstr ""
"デフォルトでは、各カラムに対して昇順でインデックスが作成されます。カラムに対"
"して降順のインデックスを定義するには、フィールド名の前にハイフンを追加しま"
"す。"

msgid ""
"For example ``Index(fields=['headline', '-pub_date'])`` would create SQL "
"with ``(headline, pub_date DESC)``."
msgstr ""
"たとえば、``Index(fields=['headline', '-pub_date'])`` は ``(headline, "
"pub_date DESC)`` を持つ SQL を作成します。"

msgid ""
"Index ordering isn't supported on MariaDB < 10.8. In that case, a descending "
"index is created as a normal index."
msgstr ""
"インデックスの順序は MariaDB < 10.8 ではサポートされていません。その場合は、"
"降順のインデックスは普通のインデックスとして作成されます。"

msgid ""
"The name of the index. If ``name`` isn't provided Django will auto-generate "
"a name. For compatibility with different databases, index names cannot be "
"longer than 30 characters and shouldn't start with a number (0-9) or "
"underscore (_)."
msgstr ""
"インデックスの名前。``name`` が与えられなかった場合、Django は名前を自動生成"
"します。異なるデータベースとの互換性のため、インデックス名は最長30文字で、数"
"字 (0-9) またはアンダースコア (_) から始めることはできません。"

msgid "Partial indexes in abstract base classes"
msgstr "抽象基底クラス上の部分インデックス (partial index)"

msgid ""
"You must always specify a unique name for an index. As such, you cannot "
"normally specify a partial index on an abstract base class, since the :attr:"
"`Meta.indexes <django.db.models.Options.indexes>` option is inherited by "
"subclasses, with exactly the same values for the attributes (including "
"``name``) each time. To work around name collisions, part of the name may "
"contain ``'%(app_label)s'`` and ``'%(class)s'``, which are replaced, "
"respectively, by the lowercased app label and class name of the concrete "
"model. For example ``Index(fields=['title'], "
"name='%(app_label)s_%(class)s_title_index')``."
msgstr ""
"インデックスには、常にユニークな名前を指定しなければなりません。したがって、"
"(``name`` を含む) 属性に対して毎回完全に同じ値とともに :attr:`Meta.indexes "
"<django.db.models.Options.indexes>` オプションがサブクラスに継承されるため、"
"通常は抽象基底クラスには部分インデックスを指定できません。名前の衝突を回避す"
"るために、名前の一部に ``'%(app_label)s'`` と ``'%(class)s'`` を含めることが"
"できます。これらはそれぞれ、小文字のアプリラベルと具体的なモデルのクラス名に"
"置換されます。たとえば、``Index(fields=['title'], "
"name='%(app_label)s_%(class)s_title_index')`` と指定できます。"

msgid ""
"The name of the :doc:`database tablespace </topics/db/tablespaces>` to use "
"for this index. For single field indexes, if ``db_tablespace`` isn't "
"provided, the index is created in the ``db_tablespace`` of the field."
msgstr ""
"このインデックスに対して使用する :doc:`データベースの tablespace </topics/db/"
"tablespaces>` の名前。単一フィールドのインデックスに対して、"
"``db_tablespace`` が提供されなかった場合、インデックスはフィールドの "
"``db_tablespace`` に作成されます。"

msgid ""
"If :attr:`.Field.db_tablespace` isn't specified (or if the index uses "
"multiple fields), the index is created in tablespace specified in the :attr:"
"`~django.db.models.Options.db_tablespace` option inside the model's ``class "
"Meta``. If neither of those tablespaces are set, the index is created in the "
"same tablespace as the table."
msgstr ""
":attr:`.Field.db_tablespace` が指定されなかった場合 (または、インデックスが複"
"数フィールドを使用している場合)、インデックスは、モデルの ``class Meta`` 内"
"の :attr:`~django.db.models.Options.db_tablespace` オプションで指定された"
"tablespace 内に作成されます。もしどちらの tablespace も設定されていなかった場"
"合には、インデックスはテーブルと同じ tablespace 内に作成されます。"

msgid ""
"For a list of PostgreSQL-specific indexes, see :mod:`django.contrib.postgres."
"indexes`."
msgstr ""
"PostgreSQL 特有のインデックスの一覧については、 :mod:`django.contrib."
"postgres.indexes` を参照してください。"

msgid ""
"The names of the `PostgreSQL operator classes <https://www.postgresql.org/"
"docs/current/indexes-opclass.html>`_ to use for this index. If you require a "
"custom operator class, you must provide one for each field in the index."
msgstr ""
"このインデックスで使用する `PostgreSQL の演算子クラス <https://www."
"postgresql.org/docs/current/indexes-opclass.html>`_ の名前。カスタム演算子ク"
"ラスが必要な場合、インデックス内の各フィールドごとに1つ指定する必要がありま"
"す。"

msgid ""
"For example, ``GinIndex(name='json_index', fields=['jsonfield'], "
"opclasses=['jsonb_path_ops'])`` creates a gin index on ``jsonfield`` using "
"``jsonb_path_ops``."
msgstr ""
"たとえば、``GinIndex(name='json_index', fields=['jsonfield'], "
"opclasses=['jsonb_path_ops'])`` は、``jsonb_path_ops`` を使用して "
"``jsonfield`` に gin インデックスを作成します。"

msgid ":attr:`Index.name` is required when using ``opclasses``."
msgstr "``opclasses`` を使用する場合、:attr:`Index.name` が必要です。"

msgid ""
"If the table is very large and your queries mostly target a subset of rows, "
"it may be useful to restrict an index to that subset. Specify a condition as "
"a :class:`~django.db.models.Q`. For example, ``condition=Q(pages__gt=400)`` "
"indexes records with more than 400 pages."
msgstr ""
"テーブルが非常に大きくて、ほとんどクエリが行のサブセットを対象としている場"
"合、インデックスをそのサブセットに制限すると役に立つかもしれません。条件を :"
"class:`~django.db.models.Q` として指定してください。たとえば、"
"``condition=Q(pages__gt=400)`` は、400ページ以上あるレコードにインデックスを"
"作成します。"

msgid ":attr:`Index.name` is required when using ``condition``."
msgstr "``condition`` を使用する場合、:attr:`Index.name` が必要です。"

msgid ""
"PostgreSQL requires functions referenced in the condition to be marked as "
"IMMUTABLE. Django doesn't validate this but PostgreSQL will error. This "
"means that functions such as :ref:`date-functions` and :class:`~django.db."
"models.functions.Concat` aren't accepted. If you store dates in :class:"
"`~django.db.models.DateTimeField`, comparison to :class:`~datetime.datetime` "
"objects may require the ``tzinfo`` argument to be provided because otherwise "
"the comparison could result in a mutable function due to the casting Django "
"does for :ref:`lookups <field-lookups>`."
msgstr ""
"PostgreSQL では、条件内で参照されている関数が IMMUTABLE としてマークされてい"
"なければなりません。Django はこのことを検証しませんが、PostgreSQL はエラーを"
"起こします。これは、 :ref:`date-functions` や :class:`~django.db.models."
"functions.Concat` などの関数が受け入れられないことを意味します。日付を :"
"class:`~django.db.models.DateTimeField` に保存している場合、:class:"
"`~datetime.datetime` オブジェクトとの比較に ``tzinfo`` 引数を提供する必要があ"
"るかもしれません。そうしなければ、Django が :ref:`lookups <field-lookups>` に"
"対して行うキャスティングの結果、比較がミュータブルな関数になる可能性があるた"
"めです。"

msgid "Restrictions on SQLite"
msgstr "SQLite の制限"

msgid ""
"SQLite `imposes restrictions <https://www.sqlite.org/partialindex.html>`_ on "
"how a partial index can be constructed."
msgstr ""
"SQLite は、部分インデックスの構築方法に関して、`制限が課されます <https://"
"www.sqlite.org/partialindex.html>`_。"

msgid ""
"Oracle does not support partial indexes. Instead, partial indexes can be "
"emulated by using functional indexes together with :class:`~django.db.models."
"expressions.Case` expressions."
msgstr ""
"Oracle は部分インデックスをサポートしません。代わりに、関数インデックスを :"
"class:`~django.db.models.expressions.Case` 式とともに使用することで、部分イン"
"デックスをエミュレーションできます。"

msgid ""
"The ``condition`` argument is ignored with MySQL and MariaDB as neither "
"supports conditional indexes."
msgstr ""
"MySQL と MariaDB は条件付きインデックスサポートをしていないため、"
"``condition`` 引数は無視されます。"

msgid ""
"A list or tuple of the names of the fields to be included in the covering "
"index as non-key columns. This allows index-only scans to be used for "
"queries that select only included fields (:attr:`~Index.include`) and filter "
"only by indexed fields (:attr:`~Index.fields`)."
msgstr ""
"非キーのカラムとしてカバーインデックスに含まれる、フィールド名のリストまたは"
"タプル。これにより、含まれるフィールド (:attr:`~Index.include`) のみを "
"select するクエリと、インデックスされたフィールド (:attr:`~Index.fields`) の"
"みによってフィルタするクエリに対して、インデックスのみのスキャンが利用できる"
"ようになります。"

msgid ""
"will allow filtering on ``headline``, also selecting ``pub_date``, while "
"fetching data only from the index."
msgstr ""
"この例は、データをインデックスからのみ取得しながら、``headline`` のフィルタリ"
"ングと、``pub_date`` の select を可能にします。"

msgid ""
"Using ``include`` will produce a smaller index than using a multiple column "
"index but with the drawback that non-key columns can not be used for sorting "
"or filtering."
msgstr ""
"``include`` を使うと、複数カラムのインデックスを使用するより小さなインデック"
"スが生成されますが、非キーのカラムがソートやフィルタリングに使えないという欠"
"点があります。"

msgid "``include`` is ignored for databases besides PostgreSQL."
msgstr "``include`` は、PostgreSQL 以外のデータベースでは無視されます。"

msgid ":attr:`Index.name` is required when using ``include``."
msgstr "``include`` を使用する場合、:attr:`Index.name` は必須です。"

msgid ""
"See the PostgreSQL documentation for more details about `covering indexes`_."
msgstr ""
"`covering indexes`_ に関する詳細については、PostgreSQL のドキュメントを参照し"
"てください。"

msgid ""
"PostgreSQL supports covering B-Tree and :class:`GiST indexes <django.contrib."
"postgres.indexes.GistIndex>`. PostgreSQL 14+ also supports covering :class:"
"`SP-GiST indexes <django.contrib.postgres.indexes.SpGistIndex>`."
msgstr ""
"PostgreSQL は covering B-Tree および :class:`GiST インデックス <django."
"contrib.postgres.indexes.GistIndex>` をサポートします。PostgreSQL 14+ は "
"covering :class:`SP-GiST インデックス <django.contrib.postgres.indexes."
"SpGistIndex>` もサポートします。"

msgid "Model instance reference"
msgstr "モデルインスタンスリファレンス"

msgid ""
"This document describes the details of the ``Model`` API. It builds on the "
"material presented in the :doc:`model </topics/db/models>` and :doc:"
"`database query </topics/db/queries>` guides, so you'll probably want to "
"read and understand those documents before reading this one."
msgstr ""
"このドキュメントでは、``Model`` API の詳細を説明しています。:doc:`モデル </"
"topics/db/models>` と :doc:`データベースクエリ </topics/db/queries>` ガイドに"
"ある説明を前提としていますので、このドキュメントを読む前にこの 2 つを読んでお"
"いた方がよいでしょう。"

msgid ""
"Throughout this reference we'll use the :ref:`example blog models <queryset-"
"model-example>` presented in the :doc:`database query guide </topics/db/"
"queries>`."
msgstr ""
"このリファレンスでは、 :doc:`データベースクエリガイド </topics/db/queries>` "
"で提供された :ref:`Blogモデルの例 <queryset-model-example>` を使用します。"

msgid "Creating objects"
msgstr "オブジェクトを作成する"

msgid ""
"To create a new instance of a model, instantiate it like any other Python "
"class:"
msgstr ""
"モデルの新しいインスタンスを作成するには、他の Python クラスと同様にインスタ"
"ンス化してください:"

msgid ""
"The keyword arguments are the names of the fields you've defined on your "
"model. Note that instantiating a model in no way touches your database; for "
"that, you need to :meth:`~Model.save()`."
msgstr ""
"キーワード引数は、モデル内で定義したフィールドの名前です。モデルをインスタン"
"ス化しても、データベースには何もしないことに注意してください。データベースと"
"やり取りするには :meth:`~Model.save()` を使う必要があります。"

msgid ""
"You may be tempted to customize the model by overriding the ``__init__`` "
"method. If you do so, however, take care not to change the calling signature "
"as any change may prevent the model instance from being saved. Additionally, "
"referring to model fields within ``__init__`` may potentially result in "
"infinite recursion errors in some circumstances.  Rather than overriding "
"``__init__``, try using one of these approaches:"
msgstr ""
"``__init__`` メソッドをオーバーライドしてモデルをカスタマイズする誘惑に駆られ"
"るかもしれません。しかしその場合は、あらゆる変更がモデルインスタンスを保存し"
"ないように、呼び出しシグネチャを変更しないように配慮してください。さらに、 "
"``__init__`` 内でモデルのフィールドを参照すると、状況によっては無限再帰エラー"
"が発生する可能性があります。 ``__init__`` をオーバーライドするのではなく、以"
"下のいずれかのアプローチを試してみてください:"

msgid "Add a classmethod on the model class::"
msgstr "モデルクラスにクラスメソッドを追加する::"

msgid "Add a method on a custom manager (usually preferred)::"
msgstr "独自のマネジャーにメソッドを追加する (通常推奨される方法です)::"

msgid "Customizing model loading"
msgstr "モデルの読み込みをカスタマイズする"

msgid ""
"The ``from_db()`` method can be used to customize model instance creation "
"when loading from the database."
msgstr ""
"``from_db()`` メソッドを使うと、データベースから読み込むときのモデルインスタ"
"ンス作成をカスタマイズできます。"

msgid ""
"The ``db`` argument contains the database alias for the database the model "
"is loaded from, ``field_names`` contains the names of all loaded fields, and "
"``values`` contains the loaded values for each field in ``field_names``. The "
"``field_names`` are in the same order as the ``values``. If all of the "
"model's fields are present, then ``values`` are guaranteed to be in the "
"order ``__init__()`` expects them. That is, the instance can be created by "
"``cls(*values)``. If any fields are deferred, they won't appear in "
"``field_names``. In that case, assign a value of ``django.db.models."
"DEFERRED`` to each of the missing fields."
msgstr ""
"引数 ``db`` はモデルを読み込む対象となるデータベースへのエイリアスになりま"
"す。 ``field_names`` は読み込まれるすべてのフィールドの名前を持ち、そして "
"``values`` は ``field_names`` 内各フィールドに対応した値を持ちます。 "
"``field_names`` は ``values`` と同じ並び順になります。モデルのフィールドが全"
"て存在する場合、 ``values`` はその順番が ``__init__()`` が期待する順番である"
"事が保障されます。つまり、そのインスタンスは ``cls(*values)`` によって生成さ"
"れます。いずれかのフィールドが遅延評価されている場合、そのフィールドは "
"``field_names`` 内には現れません。その場合、存在しない各フィールドには "
"``django.db.models.DEFERRED`` の値が設定されています。"

msgid ""
"In addition to creating the new model, the ``from_db()`` method must set the "
"``adding`` and ``db`` flags in the new instance's :attr:`~Model._state` "
"attribute."
msgstr ""
"新しいモデルを作成するだけでなく、``from_db()`` メソッドは新しいインスタンス"
"の :attr:`~Model._state` 属性に ``adding`` と ``db`` のフラグを設定する必要が"
"あります。"

msgid ""
"Below is an example showing how to record the initial values of fields that "
"are loaded from the database::"
msgstr ""
"以下はデータベースから読み出されたフィールドの初期値をどのように保存している"
"のかについてを示した例です:"

msgid ""
"The example above shows a full ``from_db()`` implementation to clarify how "
"that is done. In this case it would be possible to use a ``super()`` call in "
"the ``from_db()`` method."
msgstr ""
"上の例ではその機能を明らかにするため ``from_db()`` の実装を全て行いました。こ"
"の実装を行う場合では ``from_db()`` メソッドから ``super()`` を呼び出してもか"
"まいません。"

msgid "Refreshing objects from database"
msgstr "データベースからオブジェクトを再読み込みする"

msgid ""
"If you delete a field from a model instance, accessing it again reloads the "
"value from the database:"
msgstr ""
"モデルのインスタンスからあるフィールドを削除した場合、再度アクセスする事でそ"
"の値をデータベースから再読み込みします:"

msgid "*Asynchronous version*: ``arefresh_from_db()``"
msgstr "*非同期バージョン*: ``arefresh_from_db()``"

msgid ""
"If you need to reload a model's values from the database, you can use the "
"``refresh_from_db()`` method. When this method is called without arguments "
"the following is done:"
msgstr ""
"データベースからモデルの値を再読み込みする必要がある場合は、 "
"``refresh_from_db()`` メソッドを利用できます。引数なしでこのメソッドを呼び出"
"した場合は以下の処理が行われます:"

msgid ""
"All non-deferred fields of the model are updated to the values currently "
"present in the database."
msgstr ""
"モデル上の遅延評価されない全てのフィールドはその時点でデータベース上に存在す"
"る値に更新されます。"

msgid "Any cached relations are cleared from the reloaded instance."
msgstr ""
"キャッシュされたリレーションは、リロードされたインスタンスから消去されます。"

msgid ""
"Only fields of the model are reloaded from the database. Other database-"
"dependent values such as annotations aren't reloaded. Any :func:"
"`@cached_property <django.utils.functional.cached_property>` attributes "
"aren't cleared either."
msgstr ""
"データベースからはフィールドのみが再読み込みされます。それ以外のアノテーショ"
"ンのようなデータベース依存の値は更新されません。同様に :func:"
"`@cached_property <django.utils.functional.cached_property>` 属性などはどれも"
"クリアされません。"

msgid ""
"The reloading happens from the database the instance was loaded from, or "
"from the default database if the instance wasn't loaded from the database. "
"The ``using`` argument can be used to force the database used for reloading."
msgstr ""
"再読み込みはインスタンスを読み込むデータベースから、もしくはインスタンスが"
"データベースから読み込まれない場合はデフォルトのデータベースから行われます。 "
"``using`` 引数は再読み込みを行うデータベースを強制的に設定する際に使用できま"
"す。"

msgid ""
"It is possible to force the set of fields to be loaded by using the "
"``fields`` argument."
msgstr ""
"読み込むフィールドのセットを強制的に設定するには ``fields`` 引数を使用できま"
"す。"

msgid ""
"For example, to test that an ``update()`` call resulted in the expected "
"update, you could write a test similar to this::"
msgstr ""
"たとえば、``update()`` の呼び出しによって期待する更新が行われたかをテストする"
"ため、以下のようなテストを書くことができます。"

msgid ""
"Note that when deferred fields are accessed, the loading of the deferred "
"field's value happens through this method. Thus it is possible to customize "
"the way deferred loading happens. The example below shows how one can reload "
"all of the instance's fields when a deferred field is reloaded::"
msgstr ""
"遅延評価されているフィールドにアクセスした場合、その遅延評価されるフィールド"
"の読み込みはこのメソッドを経由する事に注意してください。そのため遅延評価の読"
"み込みがどのように行われるかを独自に設定できます。以下の例は遅延評価する"
"フィールドが再読み込みされた時どのようにしてインスタンス上のフィールド全てを"
"再読み込みできるかを示しています:"

msgid ""
"A helper method that returns a set containing the attribute names of all "
"those fields that are currently deferred for this model."
msgstr ""
"対象となるモデルにおいて現在評価を遅延している全てのフィールドの属性名を持っ"
"た集合を返すヘルパーメソッドです。"

msgid "``arefresh_from_db()`` method was added."
msgstr "``arefresh_from_db()`` メソッドが追加されました。"

msgid "Validating objects"
msgstr "オブジェクトを検証 (バリデーション) する"

msgid "There are four steps involved in validating a model:"
msgstr "モデルのバリデーションには 4 つのステップがあります:"

msgid "Validate the model fields - :meth:`Model.clean_fields()`"
msgstr "モデルフィールドを検証する - :meth:`Model.clean_fields()`"

msgid "Validate the model as a whole - :meth:`Model.clean()`"
msgstr "モデル全体を検証する - :meth:`Model.clean()`"

msgid "Validate the field uniqueness - :meth:`Model.validate_unique()`"
msgstr "フィールドの一意性を検証する - :meth:`Model.validate_unique()`"

msgid "Validate the constraints - :meth:`Model.validate_constraints`"
msgstr "制約を検証する - :meth:`Model.validate_constraints`"

msgid ""
"All four steps are performed when you call a model's :meth:`~Model."
"full_clean` method."
msgstr ""
"モデルの :meth:`~Model.full_clean()` メソッドを使うと、4 つ全てのステップが実"
"行されます。"

msgid ""
"When you use a :class:`~django.forms.ModelForm`, the call to :meth:`~django."
"forms.Form.is_valid()` will perform these validation steps for all the "
"fields that are included on the form. See the :doc:`ModelForm documentation "
"</topics/forms/modelforms>` for more information. You should only need to "
"call a model's :meth:`~Model.full_clean()` method if you plan to handle "
"validation errors yourself, or if you have excluded fields from the :class:"
"`~django.forms.ModelForm` that require validation."
msgstr ""
":class:`~django.forms.ModelForm` を使っているとき、:meth:`~django.forms.Form."
"is_valid()` の呼び出しは、フォーム上に含まれる全てのフィールドに対して、これ"
"らの検証ステップを実行します。詳しくは :doc:`ModelForm ドキュメント </topics/"
"forms/modelforms>` を参照してください。検証エラーを自分でコントロールしたい場"
"合、もしくは :class:`~django.forms.ModelForm` から検証を必要とするフィールド"
"を除外した場合は、モデルの :meth:`~Model.full_clean()` メソッドだけを呼び出す"
"必要があります。"

msgid ""
"This method calls :meth:`Model.clean_fields()`, :meth:`Model.clean()`, :meth:"
"`Model.validate_unique()` (if ``validate_unique`` is ``True``),  and :meth:"
"`Model.validate_constraints()` (if ``validate_constraints`` is ``True``) in "
"that order and raises a :exc:`~django.core.exceptions.ValidationError` that "
"has a ``message_dict`` attribute containing errors from all four stages."
msgstr ""
"このメソッドは、:meth:`Model.clean_fields()`、:meth:`Model.clean()`、 :meth:"
"`Model.validate_unique()` (``validate_unique`` が ``True`` の場合)、そして :"
"meth:`Model.validate_constraints()` (``validate_constraints`` が ``True`` の"
"場合) をこの順序で呼び出し、4 つ全てのステージでのエラーを含む "
"``message_dict`` 属性を持つ :exc:`~django.core.exceptions.ValidationError` を"
"発生させます。"

msgid ""
"The optional ``exclude`` argument can be used to provide a ``set`` of field "
"names that can be excluded from validation and cleaning. :class:`~django."
"forms.ModelForm` uses this argument to exclude fields that aren't present on "
"your form from being validated since any errors raised could not be "
"corrected by the user."
msgstr ""
"オプションの ``exclude`` 引数を指定することで、検証とクリーニングから除外する"
"フィールド名の ``set`` を指定できます。:class:`~django.forms.ModelForm` は、"
"この引数をフォーム上に存在しないフィールドを検証対象から除外するために使いま"
"す。これは、エラーが発生してもユーザーによって修正できないからです。"

msgid ""
"Note that ``full_clean()`` will *not* be called automatically when you call "
"your model's :meth:`~Model.save()` method. You'll need to call it manually "
"when you want to run one-step model validation for your own manually created "
"models. For example::"
msgstr ""
"モデルの :meth:`~Model.save()` メソッドを呼んだときでも ``full_clean()`` は自"
"動的に *呼ばれない* ことに注意してください。手動で作ったモデルに対して 1 ス"
"テップでモデル検証をしたいときには、手動で呼び出す必要があります。次に例を示"
"します。"

msgid ""
"The first step ``full_clean()`` performs is to clean each individual field."
msgstr ""
"``full_clean()`` が行う最初のステップは、個々のフィールドをそれぞれクリーニン"
"グすることです。"

msgid ""
"This method will validate all fields on your model. The optional ``exclude`` "
"argument lets you provide a ``set`` of field names to exclude from "
"validation. It will raise a :exc:`~django.core.exceptions.ValidationError` "
"if any fields fail validation."
msgstr ""
"このメソッドはモデル上の全てのフィールドをバリデーションします。オプションの "
"``exclude`` 引数にはバリデーションの対象から除外したいフィールド名の ``set`` "
"を渡すことができます。いずれかのフィールドでバリデーションに失敗した場合は :"
"exc:`~django.core.exceptions.ValidationError` が送出されます。"

msgid ""
"The second step ``full_clean()`` performs is to call :meth:`Model.clean()`. "
"This method should be overridden to perform custom validation on your model."
msgstr ""
"``full_clean()`` の第二段階では :meth:`Model.clean()` を呼び出します。このメ"
"ソッドはモデル独自のバリデーションにオーバーライドされます。"

msgid ""
"This method should be used to provide custom model validation, and to modify "
"attributes on your model if desired. For instance, you could use it to "
"automatically provide a value for a field, or to do validation that requires "
"access to more than a single field::"
msgstr ""
"このメソッドは、独自のモデルバリデーションを提供するために使い、必要な場合は"
"モデルの属性を修正できます。たとえば、フィールドに対して自動的に値を提供した"
"り、複数のフィールドにアクセスする必要のあるバリデーションを実施できます。"

msgid ""
"Note, however, that like :meth:`Model.full_clean()`, a model's ``clean()`` "
"method is not invoked when you call your model's :meth:`~Model.save()` "
"method."
msgstr ""
"ただし、:meth:`Model.full_clean()` と同様に、モデルの ``clean()`` メソッド"
"は、:meth:`~Model.save()` メソッドが呼ばれたときには実行されないことに注意し"
"てください。"

msgid ""
"In the above example, the :exc:`~django.core.exceptions.ValidationError` "
"exception raised by ``Model.clean()`` was instantiated with a string, so it "
"will be stored in a special error dictionary key, :data:`~django.core."
"exceptions.NON_FIELD_ERRORS`. This key is used for errors that are tied to "
"the entire model instead of to a specific field::"
msgstr ""
"上の例では、``Model.clean()`` により発生した :exc:`~django.core.exceptions."
"ValidationError` 例外は文字列によりインスタンス化されていたので、特別なエラー"
"ディクショナリのキー  :data:`~django.core.exceptions.NON_FIELD_ERRORS` に保存"
"されます。このキーは、特定のフィールドではなくモデル全体に関連付けられたエ"
"ラーに使用します::"

msgid ""
"To assign exceptions to a specific field, instantiate the :exc:`~django.core."
"exceptions.ValidationError` with a dictionary, where the keys are the field "
"names. We could update the previous example to assign the error to the "
"``pub_date`` field::"
msgstr ""
"例外を特定のフィールドにアサインするには、ディクショナリで :exc:`~django."
"core.exceptions.ValidationError` をインスタンス化し、キーにフィールド名を指定"
"してください。上記の例を変更して、``pub_date`` フィールドにエラーをアサインし"
"ます::"

msgid ""
"If you detect errors in multiple fields during ``Model.clean()``, you can "
"also pass a dictionary mapping field names to errors::"
msgstr ""
"``Model.clean()`` 実施中に複数フィールドでエラーを発見した場合、ディクショナ"
"リを渡してエラーにフィールド名をマップすることもできます::"

msgid "Then, ``full_clean()`` will check unique constraints on your model."
msgstr "そして、``full_clean()`` でモデル上のユニーク制約をチェックします。"

msgid ""
"How to raise field-specific validation errors if those fields don't appear "
"in a ``ModelForm``"
msgstr ""
"``ModelForm`` 内に表示されないフィールドに対してフィールド特有のバリデーショ"
"ンエラーを発生させる方法"

msgid ""
"You can't raise validation errors in ``Model.clean()`` for fields that don't "
"appear in a model form (a form may limit its fields using ``Meta.fields`` or "
"``Meta.exclude``). Doing so will raise a ``ValueError`` because the "
"validation error won't be able to be associated with the excluded field."
msgstr ""
"(``Meta.fields`` や ``Meta.exclude`` で制限されて) モデルフォームに表示されな"
"いフィールドに対して ``Model.clean()`` 内でバリデーションエラーを発生させるこ"
"とはできません。やろうとしても、``ValueError`` が発生します。これは、バリデー"
"ションエラーが除外されたフィールドと関連付けることができないからです。"

msgid ""
"To work around this dilemma, instead override :meth:`Model.clean_fields() "
"<django.db.models.Model.clean_fields>` as it receives the list of fields "
"that are excluded from validation. For example::"
msgstr ""
"このジレンマに対応するには、:meth:`Model.clean_fields() <django.db.models."
"Model.clean_fields>` をオーバーライドすることです。これはバリデーションから除"
"外されたフィールドのリストを受け取ります。次に例を示します。"

msgid ""
"This method is similar to :meth:`~Model.clean_fields`, but validates "
"uniqueness constraints defined via :attr:`.Field.unique`, :attr:`.Field."
"unique_for_date`, :attr:`.Field.unique_for_month`, :attr:`.Field."
"unique_for_year`, or :attr:`Meta.unique_together <django.db.models.Options."
"unique_together>` on your model instead of individual field values. The "
"optional ``exclude`` argument allows you to provide a ``set`` of field names "
"to exclude from validation. It will raise a :exc:`~django.core.exceptions."
"ValidationError` if any fields fail validation."
msgstr ""
"このメソッドは :meth:`~Model.clean_fields` と似ていますが、個別のフィールドの"
"値ではなく :attr:`.Field.unique`, :attr:`.Field.unique_for_date`, :attr:`."
"Field.unique_for_month`, :attr:`.Field.unique_for_year`, :attr:`Meta."
"unique_together <django.db.models.Options.unique_together>` によって定義され"
"たユニーク制約を検証します。オプションの ``exclude`` 引数により、バリデーショ"
"ンから除外するフィールド名の ``set`` を指定できます。いずれかのフィールドがバ"
"リデーションに失敗した場合、:exc:`~django.core.exceptions.ValidationError` を"
"発生させます。"

msgid ""
":class:`~django.db.models.UniqueConstraint`\\s defined in the :attr:`Meta."
"constraints <django.db.models.Options.constraints>` are validated by :meth:"
"`Model.validate_constraints`."
msgstr ""
":attr:`Meta.constraints <django.db.models.Options.constraints>` で定義され"
"た :class:`~django.db.models.UniqueConstraint` は :meth:`Model."
"validate_constraints` によって検証されます。"

msgid ""
"Note that if you provide an ``exclude`` argument to ``validate_unique()``, "
"any :attr:`~django.db.models.Options.unique_together` constraint involving "
"one of the fields you provided will not be checked."
msgstr ""
"``validate_unique()`` で ``exclude`` 引数を指定した場合、そのうちの 1 つでも"
"含む :attr:`~django.db.models.Options.unique_together` 制限はチェックされませ"
"ん。"

msgid ""
"Finally, ``full_clean()`` will check any other constraints on your model."
msgstr "最後に、``full_clean()`` でモデル上の他の制約をチェックします。"

msgid ""
"This method validates all constraints defined in :attr:`Meta.constraints "
"<django.db.models.Options.constraints>`. The optional ``exclude`` argument "
"allows you to provide a ``set`` of field names to exclude from validation. "
"It will raise a :exc:`~django.core.exceptions.ValidationError` if any "
"constraints fail validation."
msgstr ""
"このメソッドは :attr:`Meta.constraints <django.db.models.Options."
"constraints>` で定義された全ての制約を検証します。オプションの ``exclude`` 引"
"数で、検証から除外するフィールド名の ``set`` を指定できます。制約の検証に失敗"
"した場合、 :exc:`~django.core.exceptions.ValidationError` を発生させます。"

msgid "Saving objects"
msgstr "オブジェクトを保存する"

msgid "To save an object back to the database, call ``save()``:"
msgstr "データベースにオブジェクトを保存し直すには、``save()`` を呼び出します:"

msgid "*Asynchronous version*: ``asave()``"
msgstr "*非同期バージョン*: ``asave()``"

msgid ""
"For details on using the ``force_insert`` and ``force_update`` arguments, "
"see :ref:`ref-models-force-insert`. Details about the ``update_fields`` "
"argument can be found in the :ref:`ref-models-update-fields` section."
msgstr ""
"``force_insert`` と ``force_update`` 引数の詳細については :ref:`ref-models-"
"force-insert` を参照してください。引数 ``update_fields`` の詳細については :"
"ref:`ref-models-update-fields` セクションを参照してください。"

msgid ""
"If you want customized saving behavior, you can override this ``save()`` "
"method. See :ref:`overriding-model-methods` for more details."
msgstr ""
"保存の動作をカスタマイズしたい場合は、``save()`` メソッドをオーバーライドでき"
"ます。詳しくは :ref:`overriding-model-methods` を参照してください。"

msgid ""
"The model save process also has some subtleties; see the sections below."
msgstr ""
"モデル保存のプロセスには、いくつかの細かな注意点もあります; 以下の各セクショ"
"ンを参照してください。"

msgid "``asave()`` method was added."
msgstr "``asave()`` メソッドが追加されました。"

msgid "Auto-incrementing primary keys"
msgstr "自動インクリメントのプライマリキー"

msgid ""
"If a model has an :class:`~django.db.models.AutoField` — an auto-"
"incrementing primary key — then that auto-incremented value will be "
"calculated and saved as an attribute on your object the first time you call "
"``save()``:"
msgstr ""
"モデルに :class:`~django.db.models.AutoField` ( 自動インクリメントの主キー ) "
"がある場合、最初に ``save()`` を呼び出すと、自動インクリメントの値が計算さ"
"れ、オブジェクトの属性として保存されます:"

msgid ""
"There's no way to tell what the value of an ID will be before you call "
"``save()``, because that value is calculated by your database, not by Django."
msgstr ""
"``save()`` を呼び出す前に、ID の値がどうなるかを知る方法はありません。 なぜな"
"ら、その値は Django ではなくデータベースが計算するからです。"

msgid ""
"For convenience, each model has an :class:`~django.db.models.AutoField` "
"named ``id`` by default unless you explicitly specify ``primary_key=True`` "
"on a field in your model. See the documentation for :class:`~django.db."
"models.AutoField` for more details."
msgstr ""
"利便性のために、各モデルには ``id`` という :class:`~django.db.models."
"AutoField` がデフォルトで用意されていますが、モデル内のフィールドに "
"``primary_key=True`` を明示的に指定しない限り、 ``id`` という名前のフィールド"
"は用意されません。詳しくは :class:`~django.db.models.AutoField` のドキュメン"
"トを参照してください。"

msgid "The ``pk`` property"
msgstr "``pk`` プロパティ"

msgid ""
"Regardless of whether you define a primary key field yourself, or let Django "
"supply one for you, each model will have a property called ``pk``. It "
"behaves like a normal attribute on the model, but is actually an alias for "
"whichever attribute is the primary key field for the model. You can read and "
"set this value, just as you would for any other attribute, and it will "
"update the correct field in the model."
msgstr ""
"主キーフィールドを自分で定義するか、 Django が用意してくれるかに関わらず、各"
"モデルには ``pk`` というプロパティがあります。このプロパティはモデル上では普"
"通の属性のように振る舞いますが、実際にはモデルの主キーフィールドの属性のエイ"
"リアスです。他の属性と同じように、この値を読み込んだり指定したりすることがで"
"き、モデルの正しいフィールドを更新します。"

msgid "Explicitly specifying auto-primary-key values"
msgstr "自動プライマリキー値の明示的な指定"

msgid ""
"If a model has an :class:`~django.db.models.AutoField` but you want to "
"define a new object's ID explicitly when saving, define it explicitly before "
"saving, rather than relying on the auto-assignment of the ID:"
msgstr ""
"モデルが :class:`~django.db.models.AutoField` を持っていて、保存時に新しいオ"
"ブジェクトの ID を明示的に定義したい場合は、ID の自動割り当てに頼るのではな"
"く、保存前に明示的に定義してください:"

msgid ""
"If you assign auto-primary-key values manually, make sure not to use an "
"already-existing primary-key value! If you create a new object with an "
"explicit primary-key value that already exists in the database, Django will "
"assume you're changing the existing record rather than creating a new one."
msgstr ""
"自動プライマリキー値を手動で割り当てる場合は、既に存在するプライマリキー 値を"
"使わないようにしてください！すでにデータベースに存在する明示的なプライマリ"
"キー値を使って新しいオブジェクトを作成すると、 Django は新しいレコードを作成"
"するのではなく、既存のレコードを変更するものとみなし ます。"

msgid ""
"Given the above ``'Cheddar Talk'`` blog example, this example would override "
"the previous record in the database::"
msgstr ""
"上記の ``'Cheddar Talk'`` ブログの例を考えると、この例はデータベースの以前の"
"レコードを上書きします:"

msgid ""
"See `How Django knows to UPDATE vs. INSERT`_, below, for the reason this "
"happens."
msgstr ""
"このようなことが起こる理由については、後述の `How Django knows to UPDATE vs. "
"INSERT`_ を参照してください。"

msgid ""
"Explicitly specifying auto-primary-key values is mostly useful for bulk-"
"saving objects, when you're confident you won't have primary-key collision."
msgstr ""
"自動プライマリキーの値を明示的に指定することは、プライマリキーの衝突が起きな"
"いと確信が持てる場合に、オブジェクトを一括保存するときに便利です。"

msgid ""
"If you're using PostgreSQL, the sequence associated with the primary key "
"might need to be updated; see :ref:`manually-specified-autoincrement-pk`."
msgstr ""
"PostgreSQLを使用している場合、主キーに関連付けられたシーケンスを更新する必要"
"があるかもしれません。 :ref:`manually-specified-autoincrement-pk` を参照して"
"ください。"

msgid "What happens when you save?"
msgstr "save すると何が起きるか？"

msgid "When you save an object, Django performs the following steps:"
msgstr "オブジェクトを保存するとき、Django は以下のステップを実行します:"

msgid ""
"**Emit a pre-save signal.** The :data:`~django.db.models.signals.pre_save` "
"signal is sent, allowing any functions listening for that signal to do "
"something."
msgstr ""
"**pre-save シグナルを発信します。** :data:`~django.db.models.signals."
"pre_save` シグナルが送られ、そのシグナルを待ち受ける関数が何かできるようにな"
"ります。"

msgid ""
"**Preprocess the data.** Each field's :meth:`~django.db.models.Field."
"pre_save` method is called to perform any automated data modification that's "
"needed. For example, the date/time fields override ``pre_save()`` to "
"implement :attr:`~django.db.models.DateField.auto_now_add` and :attr:"
"`~django.db.models.DateField.auto_now`."
msgstr ""
"**データの前処理。** 各フィールドの :meth:`~django.db.models.Field.pre_save` "
"メソッドが呼び出され、必要な自動データ修正を行います。たとえば、日付/時刻"
"フィールドは ``pre_save()`` をオーバーライドして :attr:`~django.db.models."
"DateField.auto_now_add` と :attr:`~django.db.models.DateField.auto_now` を実"
"装しています。"

msgid ""
"**Prepare the data for the database.** Each field's :meth:`~django.db.models."
"Field.get_db_prep_save` method is asked to provide its current value in a "
"data type that can be written to the database."
msgstr ""
"**データベース用のデータを準備します。** 各フィールドの :meth:`~django.db."
"models.Field.get_db_prep_save` メソッドは、データベースに書き込めるデータ型で"
"現在の値を提供するように要求されます。"

msgid ""
"Most fields don't require data preparation. Simple data types, such as "
"integers and strings, are 'ready to write' as a Python object. However, more "
"complex data types often require some modification."
msgstr ""
"ほとんどのフィールドではデータの準備は不要です。整数や文字列のような単純な"
"データ型は Python オブジェクトとして 'すぐに書けます' 。しかし、より複雑な"
"データ型はしばしば何らかの変更を必要とします。"

msgid ""
"For example, :class:`~django.db.models.DateField` fields use a Python "
"``datetime`` object to store data. Databases don't store ``datetime`` "
"objects, so the field value must be converted into an ISO-compliant date "
"string for insertion into the database."
msgstr ""
"たとえば、 :class:`~django.db.models.DateField` フィールドは Python の "
"``datetime`` オブジェクトを使ってデータを格納します。データベースは "
"``datetime`` オブジェクトを保存しないので、フィールドの値を ISO 準拠の日付文"
"字列に変換してデータベースに挿入する必要があります。"

msgid ""
"**Insert the data into the database.** The preprocessed, prepared data is "
"composed into an SQL statement for insertion into the database."
msgstr ""
"**データベースにデータを挿入します。** 前処理され準備されたデータは、データ"
"ベースに挿入するためのSQL文に構成されます。"

msgid ""
"**Emit a post-save signal.** The :data:`~django.db.models.signals.post_save` "
"signal is sent, allowing any functions listening for that signal to do "
"something."
msgstr ""
"**post-save シグナルを発信します。** :data:`~django.db.models.signals."
"post_save` シグナルが送られ、 そのシグナルを待ち受ける関数が何かできるように"
"なります。"

msgid "How Django knows to UPDATE vs. INSERT"
msgstr "Django が UPDATE と INSERT を見分ける方法"

msgid ""
"You may have noticed Django database objects use the same ``save()`` method "
"for creating and changing objects. Django abstracts the need to use "
"``INSERT`` or ``UPDATE`` SQL statements. Specifically, when you call "
"``save()`` and the object's primary key attribute does **not** define a :"
"attr:`~django.db.models.Field.default` or :attr:`~django.db.models.Field."
"db_default`, Django follows this algorithm:"
msgstr ""
"Django データベースオブジェクトが、オブジェクトの作成と変更に同じ ``save()`` "
"メソッドを使うことにお気づきかもしれません。Django は ``INSERT`` や "
"``UPDATE`` といった SQL ステートメントを抽象化しています。具体的には、 "
"``save()`` を呼び出し、オブジェクトの主キー属性に :attr:`~django.db.models."
"Field.default` や :attr:`~django.db.models.Field.db_default` が **定義されて"
"いない場合** 、Django はこのアルゴリズムに従います："

msgid ""
"If the object's primary key attribute is set to a value that evaluates to "
"``True`` (i.e., a value other than ``None`` or the empty string), Django "
"executes an ``UPDATE``."
msgstr ""
"オブジェクトのプライマリキー属性が ``True`` と評価される値にセットされている"
"場合 (たとえば  ``None`` や空の文字列以外の場合)。Django は ``UPDATE`` を実行"
"します。"

msgid ""
"If the object's primary key attribute is *not* set or if the ``UPDATE`` "
"didn't update anything (e.g. if primary key is set to a value that doesn't "
"exist in the database), Django executes an ``INSERT``."
msgstr ""
"オブジェクトのプライマリキー属性がセット *されていない*、もしくは ``UPDATE`` "
"が何もアップデートしなかった場合 (主キーがデータベースに存在しない値に指定さ"
"れている場合など) 、Django は ``INSERT`` を実行します。"

msgid ""
"If the object's primary key attribute defines a :attr:`~django.db.models."
"Field.default` or :attr:`~django.db.models.Field.db_default` then Django "
"executes an ``UPDATE`` if it is an existing model instance and primary key "
"is set to a value that exists in the database. Otherwise, Django executes an "
"``INSERT``."
msgstr ""
"オブジェクトの主キー属性に :attr:`~django.db.models.Field.default` や :attr:"
"`~django.db.models.Field.db_default` が定義されている場合は既存のモデルインス"
"タンスで、主キーにデータベースに存在する値が指定されていれば、Django は "
"``UPDATE`` を実行します。そうでない場合、 Django は ``INSERT`` を実行します。"

msgid ""
"The one gotcha here is that you should be careful not to specify a primary-"
"key value explicitly when saving new objects, if you cannot guarantee the "
"primary-key value is unused. For more on this nuance, see `Explicitly "
"specifying auto-primary-key values`_ above and `Forcing an INSERT or "
"UPDATE`_ below."
msgstr ""
"ここで重要なのは、そのプライマリキーが使われていないことが保証できない場合、"
"新しいオブジェクトを保存するときに明示的にプライマリキーの値を指定しないよう"
"に気をつけることです。このニュアンスについては、上述の `自動プライマリキーの"
"値を明示的に指定する`_ と下記の `INSERT や UPDATE を強制する`_ を参照してくだ"
"さい。"

msgid ""
"In Django 1.5 and earlier, Django did a ``SELECT`` when the primary key "
"attribute was set. If the ``SELECT`` found a row, then Django did an "
"``UPDATE``, otherwise it did an ``INSERT``. The old algorithm results in one "
"more query in the ``UPDATE`` case. There are some rare cases where the "
"database doesn't report that a row was updated even if the database contains "
"a row for the object's primary key value. An example is the PostgreSQL ``ON "
"UPDATE`` trigger which returns ``NULL``. In such cases it is possible to "
"revert to the old algorithm by setting the :attr:`~django.db.models.Options."
"select_on_save` option to ``True``."
msgstr ""
"Django 1.5 以前のバージョンでは、Django は主キー属性が指定されると "
"``SELECT`` を行いました。 ``SELECT`` で行が見つかれば ``UPDATE`` を行い、見つ"
"からなければ ``INSERT`` を行いました。古いアルゴリズムでは、 ``UPDATE`` の場"
"合にクエリが 1 つ増えます。まれに、データベースにオブジェクトの主キー値の行が"
"あっても、その行が更新されたことを報告しない場合があります。たとえば、"
"PostgreSQLの ``ON UPDATE`` トリガは ``NULL`` を返します。このような場合、 :"
"attr:`~django.db.models.Options.select_on_save` オプションを ``True`` に設定"
"することで、古いアルゴリズムに戻すことができます。"

msgid "The ``Field.db_default`` parameter was added."
msgstr "``Field.db_default`` パラメータが追加されました。"

msgid "Forcing an INSERT or UPDATE"
msgstr "INSERT や UPDATE を強制する"

msgid ""
"In some rare circumstances, it's necessary to be able to force the :meth:"
"`~Model.save()` method to perform an SQL ``INSERT`` and not fall back to "
"doing an ``UPDATE``. Or vice-versa: update, if possible, but not insert a "
"new row. In these cases you can pass the ``force_insert=True`` or "
"``force_update=True`` parameters to the :meth:`~Model.save()` method. "
"Passing both parameters is an error: you cannot both insert *and* update at "
"the same time!"
msgstr ""
"まれに、:meth:`~Model.save()` メソッドにSQLの ``INSERT`` を強制的に実行させ、"
"``UPDATE`` にフォールバックさせないようにする必要がある場合があります。または"
"その逆で、可能であれば更新を行い、新しい行を挿入しないようにする必要がある場"
"合もあります。これらの場合には、:meth:`~Model.save()` メソッドに "
"``force_insert=True`` または ``force_update=True`` パラメータを渡すことができ"
"ます。両方のパラメータを渡すとエラーになります。挿入と更新を *同時に* 行うこ"
"とはできません！"

msgid ""
"When using :ref:`multi-table inheritance <multi-table-inheritance>`, it's "
"also possible to provide a tuple of parent classes to ``force_insert`` in "
"order to force ``INSERT`` statements for each base. For example::"
msgstr ""
":ref:`複数テーブルの継承 <multi-table-inheritance>` を使用する場合、"
"``force_insert`` に親クラスのタプルを渡すことで、各ベースに対して ``INSERT`` "
"ステートメントを強制的に挿入できます。たとえば次のようになります:"

msgid ""
"You can pass ``force_insert=(models.Model,)`` to force an ``INSERT`` "
"statement for all parents. By default, ``force_insert=True`` only forces the "
"insertion of a new row for the current model."
msgstr ""
"``force_insert=(models.Model,)`` を渡すことで、すべての親モデルに対して "
"``INSERT`` ステートメントを強制的に挿入できます。デフォルトでは、 "
"``force_insert=True`` は現在のモデルに対してのみ新しい行の挿入を強制します。"

msgid ""
"It should be very rare that you'll need to use these parameters. Django will "
"almost always do the right thing and trying to override that will lead to "
"errors that are difficult to track down. This feature is for advanced use "
"only."
msgstr ""
"これらのパラメータを必要とするのは、まれであるべきです。Django は、ほとんどの"
"場合で正しく処理を行い、オーバーライドしようとすると追跡が難しいエラーの原因"
"となります。この機能は応用的な場合のみに使用してください。"

msgid ""
"Using ``update_fields`` will force an update similarly to ``force_update``."
msgstr ""
"``update_fields`` を使うと ``force_update`` と同じように更新を強制します。"

msgid ""
"Support for passing a tuple of parent classes to ``force_insert`` was added."
msgstr "``force_insert`` に親クラスのタプルを渡せるようになりました。"

msgid "Updating attributes based on existing fields"
msgstr "既存のフィールドに基づいて属性を更新する"

msgid ""
"Sometimes you'll need to perform a simple arithmetic task on a field, such "
"as incrementing or decrementing the current value. One way of achieving this "
"is doing the arithmetic in Python like:"
msgstr ""
"フィールドに対して、現在の値をインクリメントしたりデクリメントしたりするよう"
"な単純な計算が必要になることがあります。これを実現する1つの方法は、Pythonで次"
"のように計算を行うことです:"

msgid ""
"If the old ``number_sold`` value retrieved from the database was 10, then "
"the value of 11 will be written back to the database."
msgstr ""
"データベースから取得した古い ``number_sold`` の値は 10 でした。そして、11 と"
"いう値がデータベースに書き直されます。"

msgid ""
"The process can be made robust, :ref:`avoiding a race condition <avoiding-"
"race-conditions-using-f>`, as well as slightly faster by expressing the "
"update relative to the original field value, rather than as an explicit "
"assignment of a new value. Django provides :class:`F expressions <django.db."
"models.F>` for performing this kind of relative update. Using :class:`F "
"expressions <django.db.models.F>`, the previous example is expressed as:"
msgstr ""
"この処理は、 :ref:`競合状態 <avoiding-race-conditions-using-f>` を回避し、堅"
"牢性を向上させます。また、新しい値を明示的に代入するのではなく、元のフィール"
"ド値からの相対的な更新を表現することで、若干高速になります。 Djangoには、この"
"ような相対的な更新を行うための :class:`F 式 <django.db.models.F>` がありま"
"す。 :class:`F 式 <django.db.models.F>` を使うと、上の例は以下のように表され"
"ます:"

msgid ""
"For more details, see the documentation on :class:`F expressions <django.db."
"models.F>` and their :ref:`use in update queries <topics-db-queries-update>`."
msgstr ""
"詳しくは、:class:`F 式 <django.db.models.F>` とこれに対する :ref:`更新クエリ"
"内で使う <topics-db-queries-update>` を参照してください。"

msgid "Specifying which fields to save"
msgstr "どのフィールドを保存するか指定する"

msgid ""
"If ``save()`` is passed a list of field names in keyword argument "
"``update_fields``, only the fields named in that list will be updated. This "
"may be desirable if you want to update just one or a few fields on an "
"object. There will be a slight performance benefit from preventing all of "
"the model fields from being updated in the database. For example::"
msgstr ""
"``save()`` にキーワード引数 ``update_fields`` 内でフィールドリストの名前が渡"
"された場合、このリスト内で指定されたフィールドだけが更新されます。これは、オ"
"ブジェクトの 1 つないし少数のフィールドだけを更新したい場合に望ましいでしょ"
"う。データベースで全てのモデルフィールドを更新しないようにすると、実行速度が"
"少し向上します。例えば::"

msgid ""
"The ``update_fields`` argument can be any iterable containing strings. An "
"empty ``update_fields`` iterable will skip the save. A value of ``None`` "
"will perform an update on all fields."
msgstr ""
"``update_fields`` 引数は文字列を含む任意のイテラブルです。空の "
"``update_fields`` イテラブルは保存をスキップします。 ``None`` という値は全て"
"のフィールドを更新します。"

msgid "Specifying ``update_fields`` will force an update."
msgstr "``update_fields`` を指定すると更新を強制します。"

msgid ""
"When saving a model fetched through deferred model loading (:meth:`~django."
"db.models.query.QuerySet.only()` or :meth:`~django.db.models.query.QuerySet."
"defer()`) only the fields loaded from the DB will get updated. In effect "
"there is an automatic ``update_fields`` in this case. If you assign or "
"change any deferred field value, the field will be added to the updated "
"fields."
msgstr ""
"遅延モデルローディング (:meth:`~django.db.models.query.QuerySet.only()` や :"
"meth:`~django.db.models.query.QuerySet.defer()`) を通してフェッチされたモデル"
"を保存するとき、DB からロードされたフィールドだけが更新されます。実際には、こ"
"のケースでは自動的な ``update_fields`` が存在します。遅延フィールドの値を追加"
"もしくは変更した場合、フィールドは更新されたフィールドに追加されます。"

msgid "``Field.pre_save()`` and ``update_fields``"
msgstr "``Field.pre_save()`` と ``update_fields``"

msgid ""
"If ``update_fields`` is passed in, only the :meth:`~django.db.models.Field."
"pre_save` methods of the ``update_fields`` are called. For example, this "
"means that date/time fields with ``auto_now=True`` will not be updated "
"unless they are included in the ``update_fields``."
msgstr ""
"``update_fields`` が渡された場合、 ``update_fields`` の :meth:`~django.db."
"models.Field.pre_save` メソッドのみが呼び出されます。たとえば、これは "
"``auto_now=True`` の日付/時刻フィールドが ``update_fields`` に含まれない限り"
"更新されないことを意味します。"

msgid "Deleting objects"
msgstr "オブジェクトを削除する"

msgid "*Asynchronous version*: ``adelete()``"
msgstr "*非同期バージョン*: ``adelete()``"

msgid ""
"Issues an SQL ``DELETE`` for the object. This only deletes the object in the "
"database; the Python instance will still exist and will still have data in "
"its fields, except for the primary key set to ``None``. This method returns "
"the number of objects deleted and a dictionary with the number of deletions "
"per object type."
msgstr ""
"オブジェクトに対して SQL の ``DELETE`` を発行します。Python のインスタンスは"
"まだ存在し、プライマリキーが ``None`` に設定されている以外は、そのフィールド"
"にデータが残っています。このメソッドは削除されたオブジェクトの数と、オブジェ"
"クトの種類ごとの削除数を辞書として返します。"

msgid ""
"For more details, including how to delete objects in bulk, see :ref:`topics-"
"db-queries-delete`."
msgstr ""
"より詳しく (まとめてオブジェクトを削除する方法を含む) については、:ref:"
"`topics-db-queries-delete` を参照してください。"

msgid ""
"If you want customized deletion behavior, you can override the ``delete()`` "
"method. See :ref:`overriding-model-methods` for more details."
msgstr ""
"独自の削除動作がほしいときは、``delete()`` メソッドをオーバーライドできます。"
"詳しくは :ref:`overriding-model-methods` を参照してください。"

msgid ""
"Sometimes with :ref:`multi-table inheritance <multi-table-inheritance>` you "
"may want to delete only a child model's data. Specifying "
"``keep_parents=True`` will keep the parent model's data."
msgstr ""
":ref:`複数テーブルの継承 <multi-table-inheritance>` では、子モデルのデータだ"
"けを削除したい場合があります。``keep_parents=True`` を指定すると、親モデルの"
"データを保持します。"

msgid "``adelete()`` method was added."
msgstr "``adelete()`` メソッドが追加されました。"

msgid "Pickling objects"
msgstr "オブジェクトの Pickle 化"

msgid ""
"When you :mod:`pickle` a model, its current state is pickled. When you "
"unpickle it, it'll contain the model instance at the moment it was pickled, "
"rather than the data that's currently in the database."
msgstr ""
"モデルを :mod:`pickle` 化した時、現在の状態はpickle化された状態です。pickle化"
"を解除すると、現在データベースにあるデータではなく、pickle化した時点のモデル"
"インスタンスが格納されます。"

msgid "You can't share pickles between versions"
msgstr "バージョン間でpickle化されたデータを共有することはできません"

msgid ""
"Pickles of models are only valid for the version of Django that was used to "
"generate them. If you generate a pickle using Django version N, there is no "
"guarantee that pickle will be readable with Django version N+1. Pickles "
"should not be used as part of a long-term archival strategy."
msgstr ""
"モデルの pickle は、生成に使われた Django のバージョンでのみ有効です。Django "
"バージョン N を使って pickle を生成した場合、その pickle が Django バージョ"
"ン N+1 で読める保証はありません。pickle を長期的なアーカイブ戦略の一部として"
"使うべきではありません。"

msgid ""
"Since pickle compatibility errors can be difficult to diagnose, such as "
"silently corrupted objects, a ``RuntimeWarning`` is raised when you try to "
"unpickle a model in a Django version that is different than the one in which "
"it was pickled."
msgstr ""
"pickle の互換性エラーは、静的に衝突したオブジェクトのように判定が難しいことが"
"あるので、モデルをpickle化したデータを別のバージョンで復元しようとすると "
"``RuntimeWarning`` が送出されます。"

msgid "Other model instance methods"
msgstr "その他のモデルインスタンスメソッド"

msgid "A few object methods have special purposes."
msgstr "いくつかのオブジェクトメソッドには特別な目的があります。"

msgid "``__str__()``"
msgstr "``__str__()``"

msgid ""
"The ``__str__()`` method is called whenever you call ``str()`` on an object. "
"Django uses ``str(obj)`` in a number of places. Most notably, to display an "
"object in the Django admin site and as the value inserted into a template "
"when it displays an object. Thus, you should always return a nice, human-"
"readable representation of the model from the ``__str__()`` method."
msgstr ""
"オブジェクトに対して ``str()`` を呼び出すと、 ``__str__()`` メソッドが呼び出"
"されます。Django は多くの場所で ``str(obj)`` を使います。特に、 Django の管理"
"サイトでオブジェクトを表示するときや、テンプレートでオブジェクトを表示すると"
"きに挿入される値として使われます。したがって、 ``__str__()`` メソッドからは、"
"常に人間が読めるようなモデルの表現を返さなければなりません。"

msgid "``__eq__()``"
msgstr "``__eq__()``"

msgid ""
"The equality method is defined such that instances with the same primary key "
"value and the same concrete class are considered equal, except that "
"instances with a primary key value of ``None`` aren't equal to anything "
"except themselves. For proxy models, concrete class is defined as the "
"model's first non-proxy parent; for all other models it's simply the model's "
"class."
msgstr ""
"等式メソッドは次のように定義されています: 同じ主キー値と具体的なクラスを持つ"
"インスタンスは等しいと見なされますが、主キー値が ``None`` のインスタンスはそ"
"れ自身以外のものと等しくありません。プロキシモデルの場合、具体的なクラスはモ"
"デルの最初の非プロキシ親として定義されます。他のモデルについては、単純にモデ"
"ルのクラス自体です。"

msgid "``__hash__()``"
msgstr "``__hash__()``"

msgid ""
"The ``__hash__()`` method is based on the instance's primary key value. It "
"is effectively ``hash(obj.pk)``. If the instance doesn't have a primary key "
"value then a ``TypeError`` will be raised (otherwise the ``__hash__()`` "
"method would return different values before and after the instance is saved, "
"but changing the :meth:`~object.__hash__` value of an instance is forbidden "
"in Python."
msgstr ""
"``__hash__()`` メソッドはインスタンスの主キー値に基づいています。実質的には "
"``hash(obj.pk)`` です。インスタンスに主キー値がない場合は ``TypeError`` が発"
"生します（そうでないと、インスタンスが保存される前後で ``__hash__()`` メソッ"
"ドが異なる値を返すことになりますが、Pythonではインスタンスの :meth:`~object."
"__hash__` 値を変更することは禁止されています）。"

msgid "``get_absolute_url()``"
msgstr "``get_absolute_url()``"

msgid ""
"Define a ``get_absolute_url()`` method to tell Django how to calculate the "
"canonical URL for an object. To callers, this method should appear to return "
"a string that can be used to refer to the object over HTTP."
msgstr ""
"オブジェクトに対する正式な URL を計算する方法は、``get_absolute_url()`` で定"
"義します。呼び出し元に対して、このメソッドは文字列を返します。この文字列は "
"HTTP を通じてオブジェクトを参照するために使えるものです。"

msgid ""
"While this code is correct and simple, it may not be the most portable way "
"to to write this kind of method. The :func:`~django.urls.reverse` function "
"is usually the best approach."
msgstr ""
"このコードは正しくかつシンプルですが、この種のメソッドを記述するのに最も適し"
"た方法です。:func:`~django.urls.reverse` 関数が一般的にベストアプローチとなり"
"ます。"

msgid ""
"One place Django uses ``get_absolute_url()`` is in the admin app. If an "
"object defines this method, the object-editing page will have a \"View on "
"site\" link that will jump you directly to the object's public view, as "
"given by ``get_absolute_url()``."
msgstr ""
"Django が ``get_absolute_url()`` を使う場所の一つが、admin アプリです。オブ"
"ジェクトにこのメソッドが定義されている場合、オブジェクト編集のページは "
"\"View on site\" リンクを持つようになり、``get_absolute_url()`` で定義された"
"通りオブジェクトの公開用ビューに直接飛べるようになります。"

msgid ""
"Similarly, a couple of other bits of Django, such as the :doc:`syndication "
"feed framework </ref/contrib/syndication>`, use ``get_absolute_url()`` when "
"it is defined. If it makes sense for your model's instances to each have a "
"unique URL, you should define ``get_absolute_url()``."
msgstr ""
"同様に、Django の他にもいくつか、``get_absolute_url()`` が定義されている場合"
"に使用するものがあります (:doc:`配信フィードフレームワーク </ref/contrib/"
"syndication>` など)。 各モデルインスタンスがユニークな URL を持つことが適切な"
"場合、``get_absolute_url()`` を定義すべきです。"

msgid ""
"You should avoid building the URL from unvalidated user input, in order to "
"reduce possibilities of link or redirect poisoning::"
msgstr ""
"リダイレクトポイズニングの可能性を減らすため、検証されていないユーザーの入力"
"を利用した URL の生成は避けてください。"

msgid ""
"If ``self.name`` is ``'/example.com'`` this returns ``'//example.com/'`` "
"which, in turn, is a valid schema relative URL but not the expected ``'/"
"%2Fexample.com/'``."
msgstr ""
"``self.name`` が ``'/example.com'`` の場合、上記は ``'//example.com/'`` を返"
"します。これは有効な schema relative URL ですが、期待されていた ``'/"
"%2Fexample.com/'`` ではありません。"

msgid ""
"It's good practice to use ``get_absolute_url()`` in templates, instead of "
"hard-coding your objects' URLs. For example, this template code is bad:"
msgstr ""
"テンプレート内で、ハードコーディングしたオブジェクトの URL ではなく "
"``get_absolute_url()`` を使うのは良い実装方法です。以下のテンプレートコードは"
"悪い例です:"

msgid "This template code is much better:"
msgstr "以下のテンプレートコードは改善例です:"

msgid ""
"The logic here is that if you change the URL structure of your objects, even "
"for something small like correcting a spelling error, you don't want to have "
"to track down every place that the URL might be created. Specify it once, in "
"``get_absolute_url()`` and have all your other code call that one place."
msgstr ""
"このロジックのポイントは、オブジェクトのURL構造を変更する場合、スペルミス修正"
"のような些細な変更であっても、URLが生成される場所すべてを修正する必要がないよ"
"うにすることです。 ``get_absolute_url()`` メソッドでURLを一度定義しておけば、"
"コード全体でそのメソッドを呼び出すだけで済みます。"

msgid ""
"The string you return from ``get_absolute_url()`` **must** contain only "
"ASCII characters (required by the URI specification, :rfc:`3986#section-2`) "
"and be URL-encoded, if necessary."
msgstr ""
"``get_absolute_url()`` メソッドから返される文字列は、**必ず** ASCII 文字のみ"
"を含み (URI 仕様 :rfc:`3986#section-2` で必須)、必要に応じてURLエンコードする"
"必要があります。"

msgid ""
"Code and templates calling ``get_absolute_url()`` should be able to use the "
"result directly without any further processing. You may wish to use the "
"``django.utils.encoding.iri_to_uri()`` function to help with this if you are "
"using strings containing characters outside the ASCII range."
msgstr ""
"``get_absolute_url()`` メソッドを呼び出すコードやテンプレートは、結果をそのま"
"ま使用でき、 **さらに処理する必要はありません** 。ASCII 文字以外の文字を含む"
"文字列を使用している場合は、``django.utils.encoding.iri_to_uri()`` 関数を使用"
"して変換すると便利です。"

msgid "Extra instance methods"
msgstr "追加のインスタンスメソッド"

msgid ""
"In addition to :meth:`~Model.save()`, :meth:`~Model.delete()`, a model "
"object might have some of the following methods:"
msgstr ""
"モデルオブジェクトは :meth:`~Model.save()`, :meth:`~Model.delete()` に加え"
"て、以下のメソッドを持つことがあります:"

msgid ""
"For every field that has :attr:`~django.db.models.Field.choices` set, the "
"object will have a ``get_FOO_display()`` method, where ``FOO`` is the name "
"of the field. This method returns the \"human-readable\" value of the field."
msgstr ""
":attr:`~django.db.models.Field.choices` が設定されている全てのフィールドに対"
"して、オブジェクトは ``get_FOO_display()`` メソッドを持ちます。このメソッドは"
"フィールドの \"人間が読める\" 値を返します。"

msgid ""
"For every :class:`~django.db.models.DateField` and :class:`~django.db.models."
"DateTimeField` that does not have :attr:`null=True <django.db.models.Field."
"null>`, the object will have ``get_next_by_FOO()`` and "
"``get_previous_by_FOO()`` methods, where ``FOO`` is the name of the field. "
"This returns the next and previous object with respect to the date field, "
"raising a :exc:`~django.db.models.Model.DoesNotExist` exception when "
"appropriate."
msgstr ""
":attr:`null=True <django.db.models.Field.null>` を持たない :class:`~django."
"db.models.DateField` と :class:`~django.db.models.DateTimeField` に対して、オ"
"ブジェクトは ``get_next_by_FOO()`` と ``get_previous_by_FOO()`` メソッドを持"
"ちます。このメソッドは日付フィールドに関する次のオブジェクトと前のオブジェク"
"トを返し、適切な場合には :exc:`~django.db.models.Model.DoesNotExist` 例外を発"
"生させます。"

msgid ""
"Both of these methods will perform their queries using the default manager "
"for the model. If you need to emulate filtering used by a custom manager, or "
"want to perform one-off custom filtering, both methods also accept optional "
"keyword arguments, which should be in the format described in :ref:`Field "
"lookups <field-lookups>`."
msgstr ""
"これらのメソッドはどちらもモデルのデフォルトマネージャを使用してクエリを実行"
"します。カスタムマネージャによるフィルタリングをエミュレートする必要がある場"
"合、あるいは単発のカスタムフィルタリングを実行したい場合、どちらのメソッドも"
"オプションのキーワード引数を受け付けます。キーワード引数は :ref:`フィールド"
"ルックアップ <field-lookups>` で説明されている形式でなければなりません。"

msgid ""
"Note that in the case of identical date values, these methods will use the "
"primary key as a tie-breaker. This guarantees that no records are skipped or "
"duplicated. That also means you cannot use those methods on unsaved objects."
msgstr ""
"同じ日付の値の場合、これらのメソッドはプライマリ・キーを同値の判定に使用する"
"ことに注意してください。これにより、レコードがスキップされたり重複したりしな"
"いことが保証されます。つまり、これらのメソッドを未保存のオブジェクトで使用す"
"ることはできないということです。"

msgid "Overriding extra instance methods"
msgstr "追加のインスタンスメソッドのオーバーライド"

msgid ""
"In most cases overriding or inheriting ``get_FOO_display()``, "
"``get_next_by_FOO()``, and ``get_previous_by_FOO()`` should work as "
"expected. Since they are added by the metaclass however, it is not practical "
"to account for all possible inheritance structures. In more complex cases "
"you should override ``Field.contribute_to_class()`` to set the methods you "
"need."
msgstr ""
"ほとんどの場合、 ``get_FOO_display()``, ``get_next_by_FOO()``, "
"``get_previous_by_FOO()`` をオーバーライドまたは継承すると、期待通りに動作す"
"るはずです。しかし、これらはメタクラスによって追加されるので、すべての継承構"
"造を考慮することは現実的ではありません。より複雑なケースでは、 ``Field."
"contribute_to_class()`` をオーバーライドして、必要なメソッドを設定する必要が"
"あります。"

msgid "Other attributes"
msgstr "その他の属性"

msgid "``_state``"
msgstr "``_state``"

msgid ""
"The ``_state`` attribute refers to a ``ModelState`` object that tracks the "
"lifecycle of the model instance."
msgstr ""
"``_state`` 属性はモデルインスタンスのライフサイクルを追跡する ``ModelState`` "
"オブジェクトを参照します。"

msgid ""
"The ``ModelState`` object has two attributes: ``adding``, a flag which is "
"``True`` if the model has not been saved to the database yet, and ``db``, a "
"string referring to the database alias the instance was loaded from or saved "
"to."
msgstr ""
"``ModelState`` オブジェクトには 2 つの属性があります： モデルがまだデータベー"
"スに保存されていない場合に ``True`` となるフラグ ``adding`` と、インスタンス"
"が読み込まれた、または保存されたデータベースのエイリアスを指す文字列 ``db`` "
"です。"

msgid ""
"Newly instantiated instances have ``adding=True`` and ``db=None``, since "
"they are yet to be saved. Instances fetched from a ``QuerySet`` will have "
"``adding=False`` and ``db`` set to the alias of the associated database."
msgstr ""
"新しくインスタンス化されたインスタンスには ``adding=True`` と ``db=None`` が"
"セットされます。 ``QuerySet`` から取得したインスタンスには ``adding=False`` "
"と ``db`` がセットされ、関連するデータベースのエイリアスが設定されます。"

msgid "Lookup API reference"
msgstr "ルックアップ API リファレンス"

msgid ""
"This document has the API references of lookups, the Django API for building "
"the ``WHERE`` clause of a database query. To learn how to *use* lookups, "
"see :doc:`/topics/db/queries`; to learn how to *create* new lookups, see :"
"doc:`/howto/custom-lookups`."
msgstr ""
"このドキュメントには、データベースクエリの ``WHERE`` 句を構築するための "
"Django API であるルックアップの API リファレンスがあります。ルックアップの *"
"使い方* については :doc:`/topics/db/queries` を、新しいルックアップの *作り方"
"* については :doc:`/howto/custom-lookups` を参照してください。"

msgid ""
"The lookup API has two components: a :class:`~lookups.RegisterLookupMixin` "
"class that registers lookups, and the :ref:`Query Expression API <query-"
"expression>`, a set of methods that a class has to implement to be "
"registrable as a lookup."
msgstr ""
"ルックアップAPIには2つのコンポーネントがあります。ルックアップを登録する :"
"class:`~lookups.RegisterLookupMixin` クラスと、ルックアップとして登録するため"
"にクラスが実装しなければならないメソッドのセットである :ref:`クエリ式 API "
"<query-expression>` です。"

msgid ""
"Django has two base classes that follow the query expression API and from "
"where all Django builtin lookups are derived:"
msgstr ""
"Django には、クエリ式 API に従う 2 つの基本クラスがあり、すべての Django 組み"
"込みルックアップはここから派生しています:"

msgid ""
":class:`Lookup`: to lookup a field (e.g. the ``exact`` of "
"``field_name__exact``)"
msgstr ""
":class:`Lookup`: フィールドをルックアップします (例えば "
"``field_name__exact`` の ``exact``)"

msgid ":class:`Transform`: to transform a field"
msgstr ":class:`Transform`: フィールドをトランスフォーム（変換）します。"

msgid "A lookup expression consists of three parts:"
msgstr "ルックアップ式は3つの部分で構成されています:"

msgid ""
"Fields part (e.g. ``Book.objects.filter(author__best_friends__first_name..."
"``);"
msgstr ""
"フィールド部分（例: ``Book.objects.filter(author__best_friends__first_name..."
"`` ）;"

msgid ""
"Transforms part (may be omitted) (e.g. ``__lower__first3chars__reversed``);"
msgstr ""
"トランスフォーム（変換）部分（省略可） (``lower__first3chars__reversed`` な"
"ど);"

msgid ""
"A lookup (e.g. ``__icontains``) that, if omitted, defaults to ``__exact``."
msgstr ""
"ルックアップ部分 (``__icontains`` など)。省略した場合のデフォルトは "
"``__exact`` です。"

msgid "Registration API"
msgstr "登録API"

msgid ""
"Django uses :class:`~lookups.RegisterLookupMixin` to give a class the "
"interface to register lookups on itself or its instances. The two prominent "
"examples are :class:`~django.db.models.Field`, the base class of all model "
"fields, and :class:`Transform`, the base class of all Django transforms."
msgstr ""
"Django は :class:`~lookups.RegisterLookupMixin` を使って、自分自身やそのイン"
"スタンスにルックアップを登録するインターフェイスをクラスに与えます。代表的な"
"例は :class:`~django.db.models.Field` で、これはすべてのモデルフィールドの基"
"底クラスです。 :class:`Transform` もその一つで、これはすべての Django トラン"
"スフォームの基底クラスです。"

msgid "A mixin that implements the lookup API on a class."
msgstr "クラスのルックアップ API を実装するミックスインです。"

msgid "Registers a new lookup in the class or class instance. For example::"
msgstr ""
"クラスまたはクラスのインスタンスに新しいルックアップを登録します。たとえば、"
"次のようにします:"

msgid ""
"will register ``YearExact`` lookup on ``DateField`` and ``MonthExact`` "
"lookup on the ``User.date_joined`` (you can use :ref:`Field Access API "
"<model-meta-field-api>` to retrieve a single field instance). It overrides a "
"lookup that already exists with the same name. Lookups registered on field "
"instances take precedence over the lookups registered on classes. "
"``lookup_name`` will be used for this lookup if provided, otherwise ``lookup."
"lookup_name`` will be used."
msgstr ""
"このコードは ``DateField`` の ``YearExact`` ルックアップと ``User."
"date_joined`` の ``MonthExact`` ルックアップを登録します（ :ref:`フィールドア"
"クセス API <model-meta-field-api>` を使用して単一のフィールドインスタンスを取"
"得できます）。このルックアップは既に存在する同じ名前のルックアップを上書きし"
"ます。フィールドインスタンスに登録されたルックアップはクラスに登録されたルッ"
"クアップよりも優先されます。 ``lookup.lookup_name`` が指定された場合は "
"``lookup_name`` が使用され、指定されなかった場合は ``lookup.lookup_name`` が"
"使用されます。"

msgid ""
"Returns the :class:`Lookup` named ``lookup_name`` registered in the class or "
"class instance depending on what calls it. The default implementation looks "
"recursively on all parent classes and checks if any has a registered lookup "
"named ``lookup_name``, returning the first match. Instance lookups would "
"override any class lookups with the same ``lookup_name``."
msgstr ""
"クラスまたはクラスインスタンスに登録されている ``lookup_name`` という名前の :"
"class:`Lookup` を、呼び出しに応じて返します。デフォルトの実装では、全ての親ク"
"ラスを再帰的にルックアップし、 ``lookup_name`` という名前のルックアップが登録"
"されているかどうかをチェックし、最初にマッチしたものを返します。インスタンス"
"のルックアップは同じ ``Lookup_name`` を持つクラスのルックアップを上書きしま"
"す。"

msgid ""
"Returns a dictionary of each lookup name registered in the class or class "
"instance mapped to the :class:`Lookup` class."
msgstr ""
":class:`Lookup` クラスにマップされたクラスまたはクラスインスタンスに登録され"
"ているルックアップ名の辞書を返します。"

msgid ""
"Returns a :class:`Transform` named ``transform_name`` registered in the "
"class or class instance. The default implementation looks recursively on all "
"parent classes to check if any has the registered transform named "
"``transform_name``, returning the first match."
msgstr ""
"クラスまたはクラスインスタンスに登録されている ``transform_name`` という :"
"class:`Transform` を返します。デフォルトの実装では、すべての親クラスを再帰的"
"に検索し、 ``transform_name`` という名前のトランスフォームが登録されているか"
"どうかを調べ、最初にマッチしたものを返します。"

msgid ""
"For a class to be a lookup, it must follow the :ref:`Query Expression API "
"<query-expression>`. :class:`~Lookup` and :class:`~Transform` naturally "
"follow this API."
msgstr ""
"クラスがルックアップであるためには、 :ref:`クエリ式 API <query-expression>` "
"に従わなければなりません。 :class:`~Lookup` と :class:`~Transform` は当然こ"
"の API に従います。"

msgid "The Query Expression API"
msgstr "クエリ式 API"

msgid ""
"The query expression API is a common set of methods that classes define to "
"be usable in query expressions to translate themselves into SQL expressions. "
"Direct field references, aggregates, and ``Transform`` are examples that "
"follow this API. A class is said to follow the query expression API when it "
"implements the following methods:"
msgstr ""
"クエリ式 API はクラスがクエリ式で使用できるように定義するメソッドの共通セット"
"で、クラス自身を SQL 式に変換します。フィールドの直接参照、集計"
"（Aggregation）、 ``Transform`` はこのAPIに従う例です。あるクラスが以下のメ"
"ソッドを実装している場合、そのクラスはクエリ式APIに従っていると言えます:"

msgid ""
"Generates the SQL fragment for the expression. Returns a tuple ``(sql, "
"params)``, where ``sql`` is the SQL string, and ``params`` is the list or "
"tuple of query parameters. The ``compiler`` is an ``SQLCompiler`` object, "
"which has a ``compile()`` method that can be used to compile other "
"expressions. The ``connection`` is the connection used to execute the query."
msgstr ""
"式の SQL フラグメントを生成します。タプル ``(sql, params)`` を返します。"
"``sql`` は SQL 文字列で、``params`` はクエリパラメータのリストまたはタプルで"
"す。 ``compiler`` は ``SQLCompiler`` オブジェクトで、他の式をコンパイルするた"
"めの ``compile()`` メソッドを持っています。 ``connection`` はクエリの実行に使"
"用する接続です。"

msgid ""
"Calling ``expression.as_sql()`` is usually incorrect - instead ``compiler."
"compile(expression)`` should be used. The ``compiler.compile()`` method will "
"take care of calling vendor-specific methods of the expression."
msgstr ""
"``expression.as_sql()`` の呼び出しは通常正しくありません。 代わりに "
"``compiler.compile(expression)`` を使用する必要があります。 ``compiler."
"compile()`` メソッドは式のベンダ固有のメソッドの呼び出しを行います。"

msgid ""
"Custom keyword arguments may be defined on this method if it's likely that "
"``as_vendorname()`` methods or subclasses will need to supply data to "
"override the generation of the SQL string. See :meth:`Func.as_sql` for "
"example usage."
msgstr ""
"``as_vendorname()`` メソッドやサブクラスがSQL文字列の生成を上書きするために"
"データを提供する必要がありそうな場合は、このメソッドにカスタムキーワード引数"
"を定義できます。たとえば、 :meth:`Func.as_sql` を参照してください。"

msgid ""
"Works like ``as_sql()`` method. When an expression is compiled by ``compiler."
"compile()``, Django will first try to call ``as_vendorname()``, where "
"``vendorname`` is the vendor name of the backend used for executing the "
"query. The ``vendorname`` is one of ``postgresql``, ``oracle``, ``sqlite``, "
"or ``mysql`` for Django's built-in backends."
msgstr ""
"``as_sql()`` メソッドと同じように動作します。式が ``compiler.compile()`` に"
"よってコンパイルされると、Django はまず ``as_vendorname()`` を呼び出そうとし"
"ます。ここで ``vendorname`` はクエリを実行するバックエンドのベンダ名です。 "
"``vendorname`` は Django の組み込みバックエンドでは ``postgresql`` 、 "
"``oracle`` 、 ``sqlite`` 、 ``mysql`` のいずれかです。"

msgid ""
"Must return the lookup named ``lookup_name``. For instance, by returning "
"``self.output_field.get_lookup(lookup_name)``."
msgstr ""
"ルックアップ名 ``lookup_name`` を返さなければなりません。インスタンスンスで"
"は ``self.output_field.get_lookup(lookup_name)`` を返します。"

msgid ""
"Must return the lookup named ``transform_name``. For instance, by returning "
"``self.output_field.get_transform(transform_name)``."
msgstr ""
"ルックアップ名 ``transform_name`` を返さなければなりません。インスタンスンス"
"では ``self.output_field.get_transform(transform_name)`` を返します。"

msgid ""
"Defines the type of class returned by the ``get_lookup()`` method. It must "
"be a :class:`~django.db.models.Field` instance."
msgstr ""
"``get_lookup()`` メソッドが返すクラスの型を定義します。これは :class:"
"`~django.db.models.Field` インスタンスでなければなりません。"

msgid "``Transform`` reference"
msgstr "``Transform`` リファレンス"

msgid ""
"A ``Transform`` is a generic class to implement field transformations. A "
"prominent example is ``__year`` that transforms a ``DateField`` into a "
"``IntegerField``."
msgstr ""
"``Transform`` はフィールドの変換を実装するための汎用クラスです。主な例は "
"``DateField`` を ``IntegerField`` に変換する ``__year`` です。"

msgid ""
"The notation to use a ``Transform`` in a lookup expression is "
"``<expression>__<transformation>`` (e.g. ``date__year``)."
msgstr ""
"ルックアップ式で ``Transform`` を使用する場合の表記は "
"``<expression>__<transformation>`` (例 ``date__year``) です。"

msgid ""
"This class follows the :ref:`Query Expression API <query-expression>`, which "
"implies that you can use ``<expression>__<transform1>__<transform2>``. It's "
"a specialized :ref:`Func() expression <func-expressions>` that only accepts "
"one argument.  It can also be used on the right hand side of a filter or "
"directly as an annotation."
msgstr ""
"このクラスは :ref:`クエリ式 API <query-expression>` に従っており、 "
"``<expression>__<transform1>__<transform2>`` を使用できます。これは :ref:"
"`Func() 式 <func-expressions>` に特化したもので、引数を一つだけ受け取ることが"
"できます。 また、フィルタの右辺やアノテーションとして直接使用することもできま"
"す。"

msgid ""
"A boolean indicating whether this transformation should apply to both "
"``lhs`` and ``rhs``. Bilateral transformations will be applied to ``rhs`` in "
"the same order as they appear in the lookup expression. By default it is set "
"to ``False``. For example usage, see :doc:`/howto/custom-lookups`."
msgstr ""
"このトランスフォームを ``lhs`` と ``rhs`` の両方に適用するかどうかを示すブー"
"ル値です。両者の変換は ``rhs`` に対して、ルックアップ式に現れる順番で適用され"
"ます。デフォルトでは ``False`` に設定されています。たとえば、 :doc:`/howto/"
"custom-lookups` を参照してください。"

msgid ""
"The left-hand side - what is being transformed. It must follow the :ref:"
"`Query Expression API <query-expression>`."
msgstr ""
"左辺 - 変換されるもの。これは :ref:`クエリ式API <query-expression>` に従わな"
"ければなりません。"

msgid ""
"The name of the lookup, used for identifying it on parsing query "
"expressions. It cannot contain the string ``\"__\"``."
msgstr ""
"クエリ式のパース時に使用するルックアップ名です。文字列 ``\"__\"`` を含むこと"
"はできません。"

msgid ""
"Defines the class this transformation outputs. It must be a :class:`~django."
"db.models.Field` instance. By default is the same as its ``lhs."
"output_field``."
msgstr ""
"このトランスフォームが出力するクラスを定義します。これは :class:`~django.db."
"models.Field` インスタンスでなければなりません。デフォルトでは ``lhs."
"output_field`` と同じです。"

msgid "``Lookup`` reference"
msgstr "``Lookup`` リファレンス"

msgid ""
"A ``Lookup`` is a generic class to implement lookups. A lookup is a query "
"expression with a left-hand side, :attr:`lhs`; a right-hand side, :attr:"
"`rhs`; and a ``lookup_name`` that is used to produce a boolean comparison "
"between ``lhs`` and ``rhs`` such as ``lhs in rhs`` or ``lhs > rhs``."
msgstr ""
"ルックアップ ``Lookup`` はルックアップを実装するための汎用クラスです。ルック"
"アップは左辺 :attr:`lhs`; 右辺 :attr:`rhs`; ``lookup_name`` を持つクエリ式"
"で、 ``lhs in rhs`` や ``lhs > rhs`` のように ``lhs`` と ``rhs`` をブール値で"
"比較します。"

msgid ""
"The primary notation to use a lookup in an expression is "
"``<lhs>__<lookup_name>=<rhs>``. Lookups can also be used directly in "
"``QuerySet`` filters::"
msgstr ""
"式の中でルックアップを使用するための主な記法は "
"``<lhs>__<lookup_name>=<rhs>`` です。ルックアップは下記のように ``QuerySet`` "
"フィルタの中で直接使うこともできます:"

msgid "…or annotations::"
msgstr "...下記のように、アノテーションでも使用できます:"

msgid ""
"The left-hand side - what is being looked up. The object typically follows "
"the :ref:`Query Expression API <query-expression>`. It may also be a plain "
"value."
msgstr ""
"左辺 - ルックアップされる対象。オブジェクトは通常 :ref:`クエリ式API <query-"
"expression>` に従います。プレーンな値の場合もあります。"

msgid ""
"The right-hand side - what ``lhs`` is being compared against. It can be a "
"plain value, or something that compiles into SQL, typically an ``F()`` "
"object or a ``QuerySet``."
msgstr ""
"右辺 - ``lhs`` と比較されるもの。これは単なる値であったり、SQL にコンパイルさ"
"れるものであったり、一般的には ``F()`` オブジェクトや ``QuerySet`` であったり"
"します。"

msgid ""
"The name of this lookup, used to identify it on parsing query expressions. "
"It cannot contain the string ``\"__\"``."
msgstr ""
"このルックアップの名前で、クエリ式をパースする際に識別するために使用します。"
"文字列 ``\"__\"`` を含むことはできません。"

msgid ""
"Defaults to ``True``. When :attr:`rhs` is a plain value, :attr:`prepare_rhs` "
"determines whether it should be prepared for use as a parameter in a query. "
"In order to do so, ``lhs.output_field.get_prep_value()`` is called if "
"defined, or ``rhs`` is wrapped in :class:`Value() <django.db.models.Value>` "
"otherwise."
msgstr ""
"デフォルトは ``True`` です。 :attr:`rhs` がプレーンな値の場合、 :attr:"
"`prepare_rhs` はクエリのパラメータとして使用するために、その値を準備するかど"
"うかを決定します。そのために、 ``lhs.output_field.get_prep_value()`` が定義さ"
"れていれば呼び出され、そうでなければ ``rhs`` は :class:`Value() <django.db."
"models.Value>` でラップされます。"

msgid ""
"Returns a tuple ``(lhs_string, lhs_params)``, as returned by ``compiler."
"compile(lhs)``. This method can be overridden to tune how the ``lhs`` is "
"processed."
msgstr ""
"``compiler.compile(lhs)`` が返すタプル ``(lhs_string, lhs_params)`` を返しま"
"す。このメソッドをオーバーライドすることで、 ``lhs`` の処理方法を調整できま"
"す。"

msgid ""
"``compiler`` is an ``SQLCompiler`` object, to be used like ``compiler."
"compile(lhs)`` for compiling ``lhs``. The ``connection`` can be used for "
"compiling vendor specific SQL. If ``lhs`` is not ``None``, use it as the "
"processed ``lhs`` instead of ``self.lhs``."
msgstr ""
"``compiler`` は ``SQLCompiler`` オブジェクトで、 ``lhs`` をコンパイルする際"
"に ``compiler.compile(lhs)`` のように使用します。 ``connection`` はベンダ固有"
"の SQL をコンパイルする際に使用します。 ``lhs`` が ``None`` でない場合は、 "
"``self.lhs`` の代わりに ``lhs`` を使用します。"

msgid "Behaves the same way as :meth:`process_lhs`, for the right-hand side."
msgstr "右辺については :meth:`process_lhs` と同じように扱います。"

msgid "Model ``_meta`` API"
msgstr "モデル ``_meta`` API"

msgid ""
"The model ``_meta`` API is at the core of the Django ORM. It enables other "
"parts of the system such as lookups, queries, forms, and the admin to "
"understand the capabilities of each model. The API is accessible through the "
"``_meta`` attribute of each model class, which is an instance of an ``django."
"db.models.options.Options`` object."
msgstr ""
"モデルの ``_meta`` API は、Django ORM のコアにあります。これにより、ルック"
"アップ、クエリ、フォーム、admin などのシステムの他のパーツは、各モデルの機能"
"を理解できるようになります。API は、各モデルクラスの ``_meta`` 属性からアクセ"
"ス可能で、``django.db.models.options.Options`` オブジェクトのインスタンスと"
"なっています。"

msgid "Methods that it provides can be used to:"
msgstr "提供されるメソッドは次のことに利用できます。"

msgid "Retrieve all field instances of a model"
msgstr "モデルのすべてのフィールドインスタンスを取得する"

msgid "Retrieve a single field instance of a model by name"
msgstr "モデルの単一のフィールドインスタンスを名前で取得する"

msgid "Field access API"
msgstr "フィールドアクセス API"

msgid "Retrieving a single field instance of a model by name"
msgstr "モデルの単一のフィールドインスタンスを名前で取得する"

msgid "Returns the field instance given a name of a field."
msgstr "与えられたフィールドの名前を持つフィールドインスタンスを返します。"

msgid ""
"``field_name`` can be the name of a field on the model, a field on an "
"abstract or inherited model, or a field defined on another model that points "
"to the model. In the latter case, the ``field_name`` will be (in order of "
"preference) the :attr:`~.ForeignKey.related_query_name` set by the user, "
"the :attr:`~.ForeignKey.related_name` set by the user, or the name "
"automatically generated by Django."
msgstr ""
"``field_name`` には、モデル上のフィールド、抽象または継承モデル上のフィール"
"ド、そのモデルを指す他のモデル上に定義されたフィールドのいずれかの名前を指定"
"できます。後者の場合、``field_name`` は (優先順に) ユーザーが設定した :attr:"
"`~.ForeignKey.related_query_name`、ユーザーが設定した :attr:`~.ForeignKey."
"related_name`、Django が自動生成した名前のいずれかになります。"

msgid ""
":attr:`Hidden fields <django.db.models.Field.hidden>` cannot be retrieved by "
"name."
msgstr ""
":attr:`隠しフィールド <django.db.models.Field.hidden>` は、名前では取得できま"
"せん。"

msgid ""
"If a field with the given name is not found a :class:`~django.core."
"exceptions.FieldDoesNotExist` exception will be raised."
msgstr ""
"与えられた名前のフィールドが見つからなかったときは、:class:`~django.core."
"exceptions.FieldDoesNotExist` 例外が発生します。"

msgid "Retrieving all field instances of a model"
msgstr "モデルのすべてのフィールドインスタンスを取得する"

msgid ""
"Returns a tuple of fields associated with a model. ``get_fields()`` accepts "
"two parameters that can be used to control which fields are returned:"
msgstr ""
"モデルに関連するフィールドのタプルを返します。``get_fields()`` は、次のように"
"2つの引数を受け取り、どのフィールドを返すのかを制御できます。"

msgid "``include_parents``"
msgstr "``include_parents``"

msgid ""
"``True`` by default. Recursively includes fields defined on parent classes. "
"If set to ``False``, ``get_fields()`` will only search for fields declared "
"directly on the current model. Fields from models that directly inherit from "
"abstract models or proxy classes are considered to be local, not on the "
"parent."
msgstr ""
"デフォルトは ``True``。親クラスで定義されたフィールドを再帰的に含めます。"
"``False`` に設定した場合、``get_fields()`` は現在のモデル上で直接宣言された"
"フィールドだけを検索します。抽象モデルまたはプロキシークラスから直接継承した"
"モデルからのフィールドは、親ではなくローカルなものとみなされます。"

msgid "``include_hidden``"
msgstr "``include_hidden``"

msgid ""
"``False`` by default. If set to ``True``, ``get_fields()`` will include :"
"attr:`hidden fields <django.db.models.Field.hidden>`."
msgstr ""
"デフォルトでは ``False`` です。 ``True`` に設定すると、 ``get_fields()`` は :"
"attr:`隠しフィールド <django.db.models.Field.hidden>` を含みます。"

msgid "Model ``Meta`` options"
msgstr "モデルの ``Meta`` オプション"

msgid ""
"This document explains all the possible :ref:`metadata options <meta-"
"options>` that you can give your model in its internal ``class Meta``."
msgstr ""
"このドキュメントでは、モデル内部の ``class Meta`` 内でモデルに与えられる、す"
"べての可能な :ref:`メタデータオプション <meta-options>` を説明します。"

msgid "Available ``Meta`` options"
msgstr "利用可能な ``Meta`` オプション"

msgid "``abstract``"
msgstr "``abstract``"

msgid ""
"If ``abstract = True``, this model will be an :ref:`abstract base class "
"<abstract-base-classes>`."
msgstr ""
"``abstract = True`` の場合、このモデルは :ref:`抽象基底クラス <abstract-base-"
"classes>` になります。"

msgid ""
"If a model is defined outside of an application in :setting:"
"`INSTALLED_APPS`, it must declare which app it belongs to::"
msgstr ""
"モデルが :setting:`INSTALLED_APPS` でアプリケーションの外部で定義されている場"
"合、どのアプリケーションに属するかを宣言する必要があります："

msgid ""
"If you want to represent a model with the format ``app_label.object_name`` "
"or ``app_label.model_name`` you can use ``model._meta.label`` or ``model."
"_meta.label_lower`` respectively."
msgstr ""
"モデルを ``app_label.object_name`` または ``app_label.model_name`` という形式"
"で表現したい場合は、それぞれ ``model._meta.label`` または ``model._meta."
"label_lower`` を使用します。"

msgid "``base_manager_name``"
msgstr "``base_manager_name``"

msgid ""
"The attribute name of the manager, for example, ``'objects'``, to use for "
"the model's :attr:`~django.db.models.Model._base_manager`."
msgstr ""
"モデルの :attr:`~django.db.models.Model._base_manager` に使用するマネージャの"
"属性名、例えば ``'objects'`` です。"

msgid "``db_table``"
msgstr "``db_table``"

msgid "The name of the database table to use for the model::"
msgstr "モデルに使用するデータベーステーブルの名前："

msgid ""
"To save you time, Django automatically derives the name of the database "
"table from the name of your model class and the app that contains it. A "
"model's database table name is constructed by joining the model's \"app "
"label\" -- the name you used in :djadmin:`manage.py startapp <startapp>` -- "
"to the model's class name, with an underscore between them."
msgstr ""
"手間を省くために、Django はモデルクラスとそれを含むアプリの名前から、データ"
"ベーステーブルの名前を自動的に生成します。モデルのデータベーステーブル名は、"
"モデルの \"app label\" (:djadmin:`manage.py startapp <startapp>` で使った名"
"前) とモデルのクラス名をアンダースコアでつないで作ります。"

msgid ""
"For example, if you have an app ``bookstore`` (as created by ``manage.py "
"startapp bookstore``), a model defined as ``class Book`` will have a "
"database table named ``bookstore_book``."
msgstr ""
"例えば、アプリ ``bookstore`` (``manage.py startapp bookstore`` で作成) がある"
"場合、``class Book`` として定義されたモデルは ``bookstore_book`` という名前の"
"データベーステーブルを持ちます。"

msgid ""
"To override the database table name, use the ``db_table`` parameter in "
"``class Meta``."
msgstr ""
"データベーステーブル名を上書きするには、 ``class Meta`` の ``db_table`` パラ"
"メータを使用します。"

msgid ""
"If your database table name is an SQL reserved word, or contains characters "
"that aren't allowed in Python variable names -- notably, the hyphen -- "
"that's OK. Django quotes column and table names behind the scenes."
msgstr ""
"データベースのテーブル名が SQL の予約語だったり、 Python の変数名では許されな"
"い文字（特にハイフン）を含んでいたりしても大丈夫です。Django は裏でカラム名と"
"テーブル名をクォート処理します。"

msgid "Use lowercase table names for MariaDB and MySQL"
msgstr "MariaDB と MySQL では小文字のテーブル名を使いましょう"

msgid ""
"It is strongly advised that you use lowercase table names when you override "
"the table name via ``db_table``, particularly if you are using the MySQL "
"backend. See the :ref:`MySQL notes <mysql-notes>` for more details."
msgstr ""
"特に MySQL バックエンドを使用している場合は、``db_table`` でテーブル名をオー"
"バーライドする際に小文字のテーブル名を使うことを強くお勧めします。詳細は :"
"ref:`MySQLのノート <mysql-notes>` を参照してください。"

msgid "Table name quoting for Oracle"
msgstr "オラクルのテーブル名のクォート処理"

msgid ""
"In order to meet the 30-char limitation Oracle has on table names, and match "
"the usual conventions for Oracle databases, Django may shorten table names "
"and turn them all-uppercase. To prevent such transformations, use a quoted "
"name as the value for ``db_table``::"
msgstr ""
"Oracle のテーブル名の上限である 30 文字の制限を満たし、Oracle データベースの"
"一般的な慣例に合わせるため、 Django はテーブル名を短くしたり、すべて大文字に"
"したりすることがあります。このような変換を防ぐには、 ``db_table`` の値として"
"引用符で囲まれた名前を使います："

msgid ""
"Such quoted names can also be used with Django's other supported database "
"backends; except for Oracle, however, the quotes have no effect. See the :"
"ref:`Oracle notes <oracle-notes>` for more details."
msgstr ""
"このような引用符で囲まれた名前は、Django がサポートしている他のデータベース"
"バックエンドでも使用できます。詳しくは :ref:`Oracleのノート <oracle-notes>` "
"を参照してください。"

msgid "``db_table_comment``"
msgstr "``db_table_comment``"

msgid ""
"The comment on the database table to use for this model. It is useful for "
"documenting database tables for individuals with direct database access who "
"may not be looking at your Django code. For example::"
msgstr ""
"このモデルに使うデータベーステーブルのコメントです。あなたの Django コードを"
"見ていない、直接データベースにアクセスできる人のために、 データベーステーブル"
"をドキュメント化するのに便利です。たとえば以下のようにします："

msgid ""
"The name of the :doc:`database tablespace </topics/db/tablespaces>` to use "
"for this model. The default is the project's :setting:`DEFAULT_TABLESPACE` "
"setting, if set. If the backend doesn't support tablespaces, this option is "
"ignored."
msgstr ""
"このモデルに使用する :doc:`データベーステーブル空間 </topics/db/"
"tablespaces>` の名前です。デフォルトはプロジェクトの :setting:"
"`DEFAULT_TABLESPACE` 設定です。バックエンドがテーブル空間をサポートしていない"
"場合、このオプションは無視されます。"

msgid "``default_manager_name``"
msgstr "``default_manager_name``"

msgid ""
"The name of the manager to use for the model's :attr:`~django.db.models."
"Model._default_manager`."
msgstr ""
"モデルの :attr:`~django.db.models.Model._default_manager` に使用するマネー"
"ジャの名前。"

msgid "``default_related_name``"
msgstr "``default_related_name``"

msgid ""
"The name that will be used by default for the relation from a related object "
"back to this one. The default is ``<model_name>_set``."
msgstr ""
"リレーション先オブジェクトからこのオブジェクトへのリレーションにデフォルトで"
"使用される名前です。デフォルトは ``<model_name>_set`` です。"

msgid "This option also sets :attr:`~ForeignKey.related_query_name`."
msgstr "このオプションは :attr:`~ForeignKey.related_query_name` も設定します。"

msgid ""
"As the reverse name for a field should be unique, be careful if you intend "
"to subclass your model. To work around name collisions, part of the name "
"should contain ``'%(app_label)s'`` and ``'%(model_name)s'``, which are "
"replaced respectively by the name of the application the model is in, and "
"the name of the model, both lowercased. See the paragraph on :ref:`related "
"names for abstract models <abstract-related-name>`."
msgstr ""
"フィールドの逆引き名は一意でなければならないので、モデルをサブクラス化する場"
"合は注意してください。名前の衝突を回避するため、名前の一部に "
"``'%(app_label)s'`` と ``'%(model_name)s'`` を含めるべきです。これらはそれぞ"
"れ、モデルが存在するアプリケーションの名前とモデルの名前に置き換えられます。:"
"ref:`抽象モデルの related name <abstract-related-name>` の段落を参照してくだ"
"さい。"

msgid "``get_latest_by``"
msgstr "``get_latest_by``"

msgid ""
"The name of a field or a list of field names in the model, typically :class:"
"`DateField`, :class:`DateTimeField`, or :class:`IntegerField`. This "
"specifies the default field(s) to use in your model :class:`Manager`’s :meth:"
"`~django.db.models.query.QuerySet.latest` and :meth:`~django.db.models.query."
"QuerySet.earliest` methods."
msgstr ""
"モデル内のフィールド名またはフィールド名のリスト。通常は :class:"
"`DateField`,  :class:`DateTimeField`, :class:`IntegerField` です。これはモデ"
"ル :class:`Manager` の :meth:`~django.db.models.query.QuerySet.latest` と :"
"meth:`~django.db.models.query.QuerySet.earliest` メソッドで使用するデフォルト"
"のフィールドを指定します。"

msgid "See the :meth:`~django.db.models.query.QuerySet.latest` docs for more."
msgstr ""
"詳しくは :meth:`~django.db.models.query.QuerySet.latest` のドキュメントを参照"
"してください。"

msgid "``managed``"
msgstr "``managed``"

msgid ""
"Defaults to ``True``, meaning Django will create the appropriate database "
"tables in :djadmin:`migrate` or as part of migrations and remove them as "
"part of a :djadmin:`flush` management command. That is, Django *manages* the "
"database tables' lifecycles."
msgstr ""
"デフォルトは ``True`` です。つまり、 Django は :djadmin:`migrate` やマイグ"
"レーションの一部として適切なデータベーステーブルを作成し、 :djadmin:`flush` "
"管理コマンドの一部として削除します。つまり、 Django はデータベーステーブルの"
"ライフサイクルを *管理* します。"

msgid ""
"If ``False``, no database table creation, modification, or deletion "
"operations will be performed for this model. This is useful if the model "
"represents an existing table or a database view that has been created by "
"some other means. This is the *only* difference when ``managed=False``. All "
"other aspects of model handling are exactly the same as normal. This includes"
msgstr ""
"``False`` の場合、このモデルに対してデータベーステーブルの作成、変更、削除の"
"操作を行いません。これは、モデルが既存のテーブルや他の方法で作成されたデータ"
"ベースビューを表す場合に便利です。これは ``managed=False`` の場合の *唯一の* "
"違いです。モデルの処理に関する他のすべての側面は、通常とまったく同じです。こ"
"れには以下が含まれます。"

msgid ""
"Adding an automatic primary key field to the model if you don't declare it.  "
"To avoid confusion for later code readers, it's recommended to specify all "
"the columns from the database table you are modeling when using unmanaged "
"models."
msgstr ""
"主キーフィールドを宣言しない場合、モデルに自動的に主キーフィールドを追加しま"
"す。 後でコードを読む人の混乱を避けるために、管理対象外のモデルを使うときに"
"は、モデル化しているデータベーステーブルのすべてのカラムを指定することをお勧"
"めします。"

msgid ""
"If a model with ``managed=False`` contains a :class:`~django.db.models."
"ManyToManyField` that points to another unmanaged model, then the "
"intermediate table for the many-to-many join will also not be created. "
"However, the intermediary table between one managed and one unmanaged model "
"*will* be created."
msgstr ""
"``managed=False`` のモデルが :class:`~django.db.models.ManyToManyField` を含"
"み、それが別の管理対象外モデルを指している場合、多対多の結合のための中間テー"
"ブルも作成されません。しかし、1つの管理モデルと1つの管理対象外モデル間の中間"
"テーブルは *作成* されます。"

msgid ""
"If you need to change this default behavior, create the intermediary table "
"as an explicit model (with ``managed`` set as needed) and use the :attr:"
"`ManyToManyField.through` attribute to make the relation use your custom "
"model."
msgstr ""
"このデフォルトの動作を変更する必要がある場合は、(``managed`` を必要に応じて設"
"定した) 明示的なモデルとして中間テーブルを作成し、 :attr:`ManyToManyField."
"through` 属性を使用してカスタムモデルとのリレーションを作成します。"

msgid ""
"For tests involving models with ``managed=False``, it's up to you to ensure "
"the correct tables are created as part of the test setup."
msgstr ""
"``managed=False`` のモデルを含むテストでは、テストのセットアップの一部として"
"正しいテーブルが作成されるようにする必要があります。"

msgid ""
"If you're interested in changing the Python-level behavior of a model class, "
"you *could* use ``managed=False`` and create a copy of an existing model. "
"However, there's a better approach for that situation: :ref:`proxy-models`."
msgstr ""
"モデルクラスの Python レベルでの動作を変更したい場合、 ``managed=False`` を"
"使って既存のモデルのコピーを作成することもできます。しかし、その場合はもっと"
"良い方法があります。 :ref:`proxy-models` です。"

msgid "``order_with_respect_to``"
msgstr "``order_with_respect_to``"

msgid ""
"Makes this object orderable with respect to the given field, usually a "
"``ForeignKey``. This can be used to make related objects orderable with "
"respect to a parent object. For example, if an ``Answer`` relates to a "
"``Question`` object, and a question has more than one answer, and the order "
"of answers matters, you'd do this::"
msgstr ""
"このオブジェクトを指定されたフィールドに対してソート可能にします。通常は "
"``ForeignKey`` です。これは、リレーション先オブジェクトを親オブジェクトに対し"
"てソート可能にするために使用できます。例えば、 ``Answer`` と ``Question`` オ"
"ブジェクトにリレーションがあり、質問には複数の答えがあり、答えの順番が重要で"
"ある場合、次のようにします："

msgid ""
"When ``order_with_respect_to`` is set, two additional methods are provided "
"to retrieve and to set the order of the related objects: "
"``get_RELATED_order()`` and ``set_RELATED_order()``, where ``RELATED`` is "
"the lowercased model name. For example, assuming that a ``Question`` object "
"has multiple related ``Answer`` objects, the list returned contains the "
"primary keys of the related ``Answer`` objects:"
msgstr ""
"``order_with_respect_to`` が指定されている場合、リレーション先オブジェクトの"
"順序を取得・設定するための2つのメソッドが追加されます。 "
"``get_RELATED_order()`` と ``set_RELATED_order()`` で、 ``RELATED`` は小文字"
"のモデル名です。たとえば、ある ``Question`` オブジェクトが複数の ``Answer`` "
"オブジェクトにリレーションしているとすると、返されるリストにはリレーション先"
"の ``Answer`` オブジェクトの主キーが含まれます："

msgid ""
"The order of a ``Question`` object's related ``Answer`` objects can be set "
"by passing in a list of ``Answer`` primary keys:"
msgstr ""
"Questionオブジェクトのリレーション先の ``Answer`` オブジェクトの順番は、 "
"``Answer`` の主キーのリストを渡すことで設定できます："

msgid ""
"The related objects also get two methods, ``get_next_in_order()`` and "
"``get_previous_in_order()``, which can be used to access those objects in "
"their proper order. Assuming the ``Answer`` objects are ordered by ``id``:"
msgstr ""
"リレーション先オブジェクトには ``get_next_in_order()`` と "
"``get_previous_in_order()`` というメソッドもあり、これらのオブジェクトに適切"
"な順番でアクセスできます。 ``Answer`` オブジェクトが ``id`` で並べられている"
"と仮定すると、下記のようになります："

msgid "``order_with_respect_to`` implicitly sets the ``ordering`` option"
msgstr ""
"``order_with_respect_to`` は暗黙で ``ordering`` オプションを設定します。"

msgid ""
"Internally, ``order_with_respect_to`` adds an additional field/database "
"column named ``_order`` and sets the model's :attr:`~Options.ordering` "
"option to this field. Consequently, ``order_with_respect_to`` and "
"``ordering`` cannot be used together, and the ordering added by "
"``order_with_respect_to`` will apply whenever you obtain a list of objects "
"of this model."
msgstr ""
"内部的には、 ``order_with_respect_to`` は ``_order`` という追加のフィールド/"
"データベースカラムを追加し、モデルの :attr:`~Options.ordering` オプションをこ"
"のフィールドに設定します。そのため、``order_with_respect_to`` と "
"``ordering`` を一緒に使用することはできません。また、"
"``order_with_respect_to`` によって追加された順序は、このモデルのオブジェクト"
"のリストを取得する際に常に適用されます。"

msgid "Changing ``order_with_respect_to``"
msgstr "``order_with_respect_to`` を変更するとき"

msgid ""
"Because ``order_with_respect_to`` adds a new database column, be sure to "
"make and apply the appropriate migrations if you add or change "
"``order_with_respect_to`` after your initial :djadmin:`migrate`."
msgstr ""
"``order_with_respect_to`` は新しいデータベースカラムを追加するので、初期マイ"
"グレーションの :djadmin:`migrate` の後に ``order_with_respect_to`` を追加また"
"は変更する場合は、適切なマイグレーションを作成して適用してください。"

msgid "``ordering``"
msgstr "``ordering``"

msgid ""
"The default ordering for the object, for use when obtaining lists of "
"objects::"
msgstr ""
"オブジェクトのリストを取得するときに使用する、オブジェクトのデフォルトの順"
"序："

msgid ""
"This is a tuple or list of strings and/or query expressions. Each string is "
"a field name with an optional \"-\" prefix, which indicates descending "
"order. Fields without a leading \"-\" will be ordered ascending. Use the "
"string \"?\" to order randomly."
msgstr ""
"これは文字列やクエリ式のタプルまたはリストです。各文字列はフィールド名で、オ"
"プションのプレフィックス \"-\" は降順を表します。先頭の \"-\" がないフィール"
"ドは昇順に並びます。ランダムに並び替えたい場合は、文字列 \"?\" を使用します。"

msgid "For example, to order by a ``pub_date`` field ascending, use this::"
msgstr ""
"例えば、 ``pub_date`` フィールドで昇順にソートするには、次のようにします："

msgid "To order by ``pub_date`` descending, use this::"
msgstr "``pub_date`` の降順でソートするには、次のようにします："

msgid ""
"To order by ``pub_date`` descending, then by ``author`` ascending, use this::"
msgstr ""
"``pub_date`` の降順でソートし、 ``author`` の昇順でソートするには、次のように"
"します："

msgid ""
"You can also use :doc:`query expressions </ref/models/expressions>`. To "
"order by ``author`` ascending and make null values sort last, use this::"
msgstr ""
":doc:`クエリ式 </ref/models/expressions>` を使うこともできます。 ``author`` "
"の昇順で並び替え、null値を最後にソートしたい場合、これを使います:"

msgid ""
"Ordering is not a free operation. Each field you add to the ordering incurs "
"a cost to your database. Each foreign key you add will implicitly include "
"all of its default orderings as well."
msgstr ""
"ソートには計算コストがかかります。ソート条件に追加した各フィールドに、データ"
"ベースへのコストが発生します。追加する各外部キーには、暗黙的にすべてのデフォ"
"ルトのソート条件が含まれます。"

msgid ""
"If a query doesn't have an ordering specified, results are returned from the "
"database in an unspecified order. A particular ordering is guaranteed only "
"when ordering by a set of fields that uniquely identify each object in the "
"results. For example, if a ``name`` field isn't unique, ordering by it won't "
"guarantee objects with the same name always appear in the same order."
msgstr ""
"クエリでソートが指定されていない場合、データベースから返される結果の順序は指"
"定されません。特定の順序が保証されるのは、結果内の各オブジェクトを一意に識別"
"するフィールドの組み合わせでソートした場合だけです。例えば、 ``name`` フィー"
"ルドが一意でない場合、そのフィールドでソートしても、同じ名前のオブジェクトが"
"常に同じ順序で表示されるとは限りません。"

msgid "``permissions``"
msgstr "``permissions``"

msgid ""
"Extra permissions to enter into the permissions table when creating this "
"object. Add, change, delete, and view permissions are automatically created "
"for each model. This example specifies an extra permission, "
"``can_deliver_pizzas``::"
msgstr ""
"このオブジェクトを作成するときに permissions テーブルに入力する追加のパーミッ"
"ション。追加、変更、削除、表示のパーミッションはそれぞれのモデルに対して自動"
"的に作成されます。この例では ``can_deliver_pizzas`` という追加のパーミッショ"
"ンを指定しています："

msgid ""
"This is a list or tuple of 2-tuples in the format ``(permission_code, "
"human_readable_permission_name)``."
msgstr ""
"これは ``(permission_code, human_readable_permission_name)`` の形式の2値タプ"
"ルのリストまたはタプルです。"

msgid "``default_permissions``"
msgstr "``default_permissions``"

msgid ""
"Defaults to ``('add', 'change', 'delete', 'view')``. You may customize this "
"list, for example, by setting this to an empty list if your app doesn't "
"require any of the default permissions. It must be specified on the model "
"before the model is created by :djadmin:`migrate` in order to prevent any "
"omitted permissions from being created."
msgstr ""
"デフォルトは ``('add', 'change', 'delete', 'view')`` です。このリストはカスタ"
"マイズできます。例えば、アプリがデフォルトのパーミッションを必要としない場合"
"は、空のリストを指定します。暗黙的にパーミッションが作成されるのを防ぐに"
"は、 :djadmin:`migrate` によってモデルが作成される前に、モデルに指定する必要"
"があります。"

msgid "``proxy``"
msgstr "``proxy``"

msgid ""
"If ``proxy = True``, a model which subclasses another model will be treated "
"as a :ref:`proxy model <proxy-models>`."
msgstr ""
"``proxy = True`` の場合、他のモデルをサブクラス化したモデルは :ref:`プロキシ"
"モデル <proxy-models>` として扱われます。"

msgid "``required_db_features``"
msgstr "``required_db_features``"

msgid ""
"List of database features that the current connection should have so that "
"the model is considered during the migration phase. For example, if you set "
"this list to ``['gis_enabled']``, the model will only be synchronized on GIS-"
"enabled databases. It's also useful to skip some models when testing with "
"several database backends. Avoid relations between models that may or may "
"not be created as the ORM doesn't handle this."
msgstr ""
"現在の接続が持つべきデータベースの機能のリストで、このリストに基づいてモデル"
"がマイグレーションフェーズで考慮されます。たとえば、このリストを "
"``['gis_enabled']`` に設定すると、そのモデルはGISが有効なデータベース上でのみ"
"同期されます。これは、複数のデータベースバックエンドでテストする際に、一部の"
"モデルをスキップするのにも便利です。作成されるかどうかわからないモデル間のリ"
"レーションは避けてください。ORMはこれを処理しません。"

msgid "``required_db_vendor``"
msgstr "``required_db_vendor``"

msgid ""
"Name of a supported database vendor that this model is specific to. Current "
"built-in vendor names are: ``sqlite``, ``postgresql``, ``mysql``, "
"``oracle``. If this attribute is not empty and the current connection vendor "
"doesn't match it, the model will not be synchronized."
msgstr ""
"このモデルが特定する、サポートされているデータベース・ベンダーの名前。現在の"
"組み込みベンダー名は ``sqlite``, ``postgresql``, ``mysql``, ``oracle`` です。"
"この属性が空ではなく、現在の接続ベンダーがこの属性と一致しない場合、モデルは"
"同期されません。"

msgid "``select_on_save``"
msgstr "``select_on_save``"

msgid ""
"Determines if Django will use the pre-1.6 :meth:`django.db.models.Model."
"save()` algorithm. The old algorithm uses ``SELECT`` to determine if there "
"is an existing row to be updated. The new algorithm tries an ``UPDATE`` "
"directly. In some rare cases the ``UPDATE`` of an existing row isn't visible "
"to Django. An example is the PostgreSQL ``ON UPDATE`` trigger which returns "
"``NULL``. In such cases the new algorithm will end up doing an ``INSERT`` "
"even when a row exists in the database."
msgstr ""
"Django が 1.6 より前の :meth:`django.db.models.Model.save()` アルゴリズムを使"
"うかどうかを決定します。古いアルゴリズムでは、 ``SELECT`` を使って、更新する"
"既存の行があるかどうかを判断します。新しいアルゴリズムは ``UPDATE`` を直接試"
"みます。まれに、既存の行の ``UPDATE`` が Django から見えない場合があります。"
"たとえば、PostgreSQL の ``ON UPDATE`` トリガーは ``NULL`` を返します。このよ"
"うな場合、新しいアルゴリズムは、データベースに行が存在しても、 ``INSERT`` を"
"実行してしまいます。"

msgid ""
"Usually there is no need to set this attribute. The default is ``False``."
msgstr ""
"通常、この属性を設定する必要はありません。デフォルトは ``False`` です。"

msgid ""
"See :meth:`django.db.models.Model.save()` for more about the old and new "
"saving algorithm."
msgstr ""
"新旧の保存アルゴリズムについては :meth:`django.db.models.Model.save()` を参照"
"してください。"

msgid "``indexes``"
msgstr "``indexes``"

msgid ""
"A list of :doc:`indexes </ref/models/indexes>` that you want to define on "
"the model::"
msgstr ""
"モデルに定義したい :doc:`インデックス </ref/models/indexes>` のリストです："

msgid "``unique_together``"
msgstr "``unique_together``"

msgid ""
"Use :class:`.UniqueConstraint` with the :attr:`~Options.constraints` option "
"instead."
msgstr ""
"代わりに :class:`.UniqueConstraint` と :attr:`~Options.constraints` オプショ"
"ンを使用してください。"

msgid ""
":class:`.UniqueConstraint` provides more functionality than "
"``unique_together``. ``unique_together`` may be deprecated in the future."
msgstr ""
":class:`.UniqueConstraint` は ``unique_together`` よりも多くの機能を提供しま"
"す。 ``unique_together`` は将来廃止される可能性があります。"

msgid "Sets of field names that, taken together, must be unique::"
msgstr "ユニークでなければならないフィールド名のリスト："

msgid ""
"This is a list of lists that must be unique when considered together. It's "
"used in the Django admin and is enforced at the database level (i.e., the "
"appropriate ``UNIQUE`` statements are included in the ``CREATE TABLE`` "
"statement)."
msgstr ""
"これは、一緒に考えたときに一意でなければならないリストのリストです。Django の"
"管理画面で使われ、データベースレベルで強制されます (つまり、 ``CREATE "
"TABLE`` ステートメントに適切な ``UNIQUE`` ステートメントが含まれます)。"

msgid ""
"For convenience, ``unique_together`` can be a single list when dealing with "
"a single set of fields::"
msgstr ""
"利便性のために、``unique_together`` は1つのフィールドセットしかないときは1つ"
"のリストにできます："

msgid ""
"A :class:`~django.db.models.ManyToManyField` cannot be included in "
"``unique_together``. (It's not clear what that would even mean!) If you need "
"to validate uniqueness related to a :class:`~django.db.models."
"ManyToManyField`, try using a signal or an explicit :attr:`through "
"<ManyToManyField.through>` model."
msgstr ""
":class:`~django.db.models.ManyToManyField` を ``unique_together`` に含めるこ"
"とはできません（それが何を意味するのかさえ不明です！）。:class:`~django.db."
"models.ManyToManyField` に関連する一意性を検証する必要がある場合は、シグナル"
"を使うか、明示的な :attr:`through <ManyToManyField.through>` モデルを使用して"
"みてください。"

msgid ""
"The ``ValidationError`` raised during model validation when the constraint "
"is violated has the ``unique_together`` error code."
msgstr ""
"制約に違反したときにモデル検証中に発生する ``ValidationError`` は "
"``unique_together`` エラーコードを持ちます。"

msgid "``index_together``"
msgstr "``index_together``"

msgid "Sets of field names that, taken together, are indexed::"
msgstr "一緒にインデックスが作成されるフィールド名のセットです："

msgid ""
"This list of fields will be indexed together (i.e. the appropriate ``CREATE "
"INDEX`` statement will be issued.)"
msgstr ""
"このフィールドのリストは一緒にインデックスが作成されます（つまり、適切な "
"``CREATE INDEX`` ステートメントが発行されます）。"

msgid ""
"For convenience, ``index_together`` can be a single list when dealing with a "
"single set of fields::"
msgstr ""
"利便性のために、``index_together`` は1つのフィールドセットしかない場合は1つの"
"リストにすることができます："

msgid "``constraints``"
msgstr "``constraints``"

msgid ""
"A list of :doc:`constraints </ref/models/constraints>` that you want to "
"define on the model::"
msgstr "モデルに定義したい :doc:`制約 </ref/models/constraints>` のリスト："

msgid "A human-readable name for the object, singular::"
msgstr "人間が読めるオブジェクトの名前（単数形）："

msgid ""
"If this isn't given, Django will use a munged version of the class name: "
"``CamelCase`` becomes ``camel case``."
msgstr ""
"指定されない場合、 Django はクラス名を小文字にして使います。 ``CamelCase`` "
"は ``camel case`` になります。"

msgid "``verbose_name_plural``"
msgstr "``verbose_name_plural``"

msgid "The plural name for the object::"
msgstr "オブジェクトの名前の複数形："

msgid ""
"If this isn't given, Django will use :attr:`~Options.verbose_name` + "
"``\"s\"``."
msgstr ""
"指定されない場合、 Django は :attr:`~Options.verbose_name` + ``\"s\"`` を使用"
"します。"

msgid "Read-only ``Meta`` attributes"
msgstr "読み取り専用の ``Meta`` 属性"

msgid ""
"Representation of the object, returns ``app_label.object_name``, e.g. "
"``'polls.Question'``."
msgstr ""
"オブジェクトの表現。``app_label.object_name`` を返します。例： ``'polls."
"Question'``"

msgid "``label_lower``"
msgstr "``label_lower``"

msgid ""
"Representation of the model, returns ``app_label.model_name``, e.g. ``'polls."
"question'``."
msgstr ""
"モデルの表現。``app_label.model_name'`` を返します。例： ``'polls.question'``"

msgid "``QuerySet`` API reference"
msgstr "``QuerySet`` API リファレンス"

msgid ""
"This document describes the details of the ``QuerySet`` API. It builds on "
"the material presented in the :doc:`model </topics/db/models>` and :doc:"
"`database query </topics/db/queries>` guides, so you'll probably want to "
"read and understand those documents before reading this one."
msgstr ""
"このドキュメントでは、``QuerySet`` API の詳細を説明しています。:doc:`モデル "
"</topics/db/models>` と :doc:`データベースクエリ </topics/db/queries>` ガイド"
"にある説明を前提としていますので、このドキュメントを読む前にこの 2 つを読んで"
"おいた方がよいでしょう。"

msgid "When ``QuerySet``\\s are evaluated"
msgstr "``QuerySet`` が評価されるタイミング"

msgid ""
"Internally, a ``QuerySet`` can be constructed, filtered, sliced, and "
"generally passed around without actually hitting the database. No database "
"activity actually occurs until you do something to evaluate the queryset."
msgstr ""
"内部的には、 ``QuerySet`` は実際にデータベースにアクセスすることなく、構築、"
"フィルタリング、スライス、受け渡しを行うことができます。クエリセットを評価す"
"るための操作が行われない限り、実際のデータベースへのアクセスは発生しません。"

msgid "You can evaluate a ``QuerySet`` in the following ways:"
msgstr "あなたは次のような方法で ``QuerySet`` を評価することができます:"

msgid ""
"**Iteration.** A ``QuerySet`` is iterable, and it executes its database "
"query the first time you iterate over it. For example, this will print the "
"headline of all entries in the database::"
msgstr ""
"**イテレーション。** ``QuerySet`` はイテラブルで、初めてイテレートした時に"
"データベースのクエリを実行します。たとえば、これはデータベースにある全エント"
"リのheadline属性を出力するプログラムです::"

msgid ""
"Note: Don't use this if all you want to do is determine if at least one "
"result exists. It's more efficient to use :meth:`~QuerySet.exists`."
msgstr ""
"メモ: 1つ以上の結果が存在するかどうかを判定したいだけなら、これは使わないでく"
"ださい。 :meth:`~QuerySet.exists` を使った方が効率的です。"

msgid ""
"**Asynchronous iteration.** A ``QuerySet`` can also be iterated over using "
"``async for``::"
msgstr ""
"**非同期イテレーション.** ``QuerySet`` は ``async for`` を使ってイテレートす"
"ることもできます:"

msgid ""
"Both synchronous and asynchronous iterators of QuerySets share the same "
"underlying cache."
msgstr ""
"クエリセットの同期的・非同期的イテレータは、同じキャッシュを共有します。"

msgid ""
"**Slicing.** As explained in :ref:`limiting-querysets`, a ``QuerySet`` can "
"be sliced, using Python's array-slicing syntax. Slicing an unevaluated "
"``QuerySet`` usually returns another unevaluated ``QuerySet``, but Django "
"will execute the database query if you use the \"step\" parameter of slice "
"syntax, and will return a list. Slicing a ``QuerySet`` that has been "
"evaluated also returns a list."
msgstr ""
"**スライス。** :ref:`limiting-querysets` で説明されているとおり、 "
"``QuerySet`` はPythonのリストスライスを用いてスライスできます。未評価の "
"``QuerySet`` をスライスすると、通常は新たな未評価の ``QuerySet`` が返されま"
"す。しかし、スライスの \"step\" パラメータを使用した場合、Djangoはデータベー"
"スクエリを実行し、リストを返します。評価された ``QuerySet`` をスライスした場"
"合も同様にリストが返されます。"

msgid ""
"Also note that even though slicing an unevaluated ``QuerySet`` returns "
"another unevaluated ``QuerySet``, modifying it further (e.g., adding more "
"filters, or modifying ordering) is not allowed, since that does not "
"translate well into SQL and it would not have a clear meaning either."
msgstr ""
"未評価の ``QuerySet`` をスライスして別の未評価の ``QuerySet`` が返されても、"
"それをさらに変更すること(たとえば、さらにフィルタを追加したり、順序を変更した"
"りすること)は許されていないことに気を付けてください。これは、その操作がSQLに"
"正しく変換されず、明確な意味を持たないためです。"

msgid ""
"**Pickling/Caching.** See the following section for details of what is "
"involved when `pickling QuerySets`_. The important thing for the purposes of "
"this section is that the results are read from the database."
msgstr ""
"**Pickle 化/キャッシュ化。**  詳細については、後述の `pickling QuerySets`_ を"
"参照してください。結果がデータベースから読み出されることが、このセクションの"
"目的として重要なことです。"

msgid ""
"**repr().** A ``QuerySet`` is evaluated when you call ``repr()`` on it. This "
"is for convenience in the Python interactive interpreter, so you can "
"immediately see your results when using the API interactively."
msgstr ""
"**repr()。**  ``QuerySet`` は ``repr()`` が呼び出された時点で評価されます。こ"
"れはPythonの対話型インタプリタでの利便性を図るためで、APIを対話的に使用する際"
"にクエリの結果をすぐに確認できます。"

msgid ""
"**len().** A ``QuerySet`` is evaluated when you call ``len()`` on it. This, "
"as you might expect, returns the length of the result list."
msgstr ""
"**len()。** ``QuerySet`` は ``len()`` を呼び出した時点で評価されます。想像さ"
"れる通り、この操作は結果のリストの長さを返します。"

msgid ""
"Note: If you only need to determine the number of records in the set (and "
"don't need the actual objects), it's much more efficient to handle a count "
"at the database level using SQL's ``SELECT COUNT(*)``. Django provides a :"
"meth:`~QuerySet.count` method for precisely this reason."
msgstr ""
"メモ: セット内のレコード数を決定したいだけであれば(そして実際のオブジェクトが"
"必要ないのであれば)、SQLの ``SELECT COUNT(*)`` を使ってデータベースレベルでハ"
"ンドルする方がより効率的です。Djangoはまさにこの理由から :meth:`~QuerySet."
"count` メソッドを提供しています。"

msgid ""
"**list().** Force evaluation of a ``QuerySet`` by calling ``list()`` on it. "
"For example::"
msgstr ""
"**list()。** ``list()`` を呼び出すことで、 ``QuerySet`` の評価を強制します。"
"たとえば::"

msgid ""
"**bool().** Testing a ``QuerySet`` in a boolean context, such as using "
"``bool()``, ``or``, ``and`` or an ``if`` statement, will cause the query to "
"be executed. If there is at least one result, the ``QuerySet`` is ``True``, "
"otherwise ``False``. For example::"
msgstr ""
"**bool()。** ``bool()``, ``or``, ``and`` または ``if`` 文を使用してブール値と"
"して ``QuerySet`` をテストすると、クエリが実行されます。 ``QuerySet`` も少な"
"くとも1つ以上の結果が含まれれば ``True`` となり、そうでなければ ``False`` に"
"なります。例えば:"

msgid ""
"Note: If you only want to determine if at least one result exists (and don't "
"need the actual objects), it's more efficient to use :meth:`~QuerySet."
"exists`."
msgstr ""
"注意: もしクエリの結果が少なくとも1つ存在するかどうかを確認したいだけであれば"
"(そして実際のオブジェクトを必要としないのであれば)、 :meth:`~QuerySet."
"exists` を使うべきです。"

msgid "Pickling ``QuerySet``\\s"
msgstr "``QuerySet`` の Pickle 化"

msgid ""
"If you :mod:`pickle` a ``QuerySet``, this will force all the results to be "
"loaded into memory prior to pickling. Pickling is usually used as a "
"precursor to caching and when the cached queryset is reloaded, you want the "
"results to already be present and ready for use (reading from the database "
"can take some time, defeating the purpose of caching). This means that when "
"you unpickle a ``QuerySet``, it contains the results at the moment it was "
"pickled, rather than the results that are currently in the database."
msgstr ""
"``QuerySet`` を :mod:`pickle` 化するとき、pickle化の前にすべての結果がメモリ"
"にロードされるように強制されます。キャッシュされたクエリセットがリロードされ"
"た時、結果がすでに存在し、使用できる状態になっていることが望ましいからです"
"(データベースからの読み込みには時間がかかるので、キャッシュとしての目的を達成"
"できません)。つまり、 ``QuerySet`` のpickle化を解除すると、解除した時点でデー"
"タベースにある結果ではなく、pickle化した時点での結果が出力されることになりま"
"す。"

msgid ""
"If you only want to pickle the necessary information to recreate the "
"``QuerySet`` from the database at a later time, pickle the ``query`` "
"attribute of the ``QuerySet``. You can then recreate the original "
"``QuerySet`` (without any results loaded) using some code like this:"
msgstr ""
"もし、後でデータベースから ``QuerySet`` を再生成するために必要な情報だけを取"
"り出したい場合は、 ``QuerySet`` の ``query`` を属性を取り出してください。そう"
"することで、以下のようなコードで本来の ``QuerySet`` (結果を読み込む前の状態)"
"を再現できます:"

msgid ""
"The ``query`` attribute is an opaque object. It represents the internals of "
"the query construction and is not part of the public API. However, it is "
"safe (and fully supported) to pickle and unpickle the attribute's contents "
"as described here."
msgstr ""
"``query`` 属性は不透明なオブジェクトです。これは内側でのクエリ構築を表すもの"
"で、公開APIの一部ではありません。しかし、ここで説明しているように、この属性の"
"内容のpickle化・pickle化の解除は安全に行うことができます(完全にサポートもされ"
"ています)。"

msgid "Restrictions on ``QuerySet.values_list()``"
msgstr "``QuerySet.values_list()`` における制限"

msgid ""
"If you recreate :meth:`QuerySet.values_list` using the pickled ``query`` "
"attribute, it will be converted to :meth:`QuerySet.values`:"
msgstr ""
"pickle化された ``query`` 属性を使って :meth:`QuerySet.values_list` を再生成す"
"ると、返り値は :meth:`QuerySet.values` に置き換えられます:"

msgid ""
"Pickles of ``QuerySets`` are only valid for the version of Django that was "
"used to generate them. If you generate a pickle using Django version N, "
"there is no guarantee that pickle will be readable with Django version N+1. "
"Pickles should not be used as part of a long-term archival strategy."
msgstr ""
"``QuerySets`` をpickle化したデータは、生成したDjangoの同一バージョンでのみ有"
"効です。DjangoのバージョンNで生成したデータをバージョンN+1でも正常に読み込め"
"る保証はありません。Pickle化は長期的なアーカイブ戦略の手段として用いるべきで"
"はありません。"

msgid ""
"Since pickle compatibility errors can be difficult to diagnose, such as "
"silently corrupted objects, a ``RuntimeWarning`` is raised when you try to "
"unpickle a queryset in a Django version that is different than the one in "
"which it was pickled."
msgstr ""
"pickle の互換性エラーは、静的に衝突したオブジェクトのように判定が難しいことが"
"あるので、モデルをpickle化したデータを別のバージョンで復元しようとすると "
"``RuntimeWarning`` が送出されます。"

msgid "``QuerySet`` API"
msgstr "``QuerySet`` API"

msgid "Here's the formal declaration of a ``QuerySet``:"
msgstr "これが ``QuerySet`` の正式な宣言です:"

msgid ""
"Usually when you'll interact with a ``QuerySet`` you'll use it by :ref:"
"`chaining filters <chaining-filters>`. To make this work, most ``QuerySet`` "
"methods return new querysets. These methods are covered in detail later in "
"this section."
msgstr ""
"通常、 ``QuerySet`` を操作する際には :ref:`フィルタの連結 <chaining-"
"filters>` を使用します。これを実現するために、ほとんどの ``QuerySet`` のメ"
"ソッドは新たなクエリセットを返します。これらのメソッドについては、このセク"
"ションで後ほど詳しく説明します。"

msgid ""
"The ``QuerySet`` class has the following public attributes you can use for "
"introspection:"
msgstr ""
"``QuerySet`` クラスは、イントロスペクションのために以下のパブリックな属性を"
"持っています:"

msgid ""
"``True`` if the ``QuerySet`` is ordered — i.e. has an :meth:`order_by()` "
"clause or a default ordering on the model. ``False`` otherwise."
msgstr ""
"``QuerySet`` が :meth:`order_by()` やモデルのデフォルトの順序指定によって並び"
"替えられた場合に ``True`` となります。それ以外のときは ``False`` になります。"

msgid "The database that will be used if this query is executed now."
msgstr "このクエリが実行されるデータベースを示します。"

msgid ""
"The ``query`` parameter to :class:`QuerySet` exists so that specialized "
"query subclasses can reconstruct internal query state. The value of the "
"parameter is an opaque representation of that query state and is not part of "
"a public API."
msgstr ""
":class:`QuerySet` の ``query`` パラメータは、特殊なクエリのサブクラスが内部の"
"クエリ状態を再構築できるようにするために存在します。このパラメータの値はクエ"
"リの状態の不透明な表現であり、パブリックAPIの一部ではありません。"

msgid "Methods that return new ``QuerySet``\\s"
msgstr "新しい ``QuerySet``\\s を返すメソッド"

msgid ""
"Django provides a range of ``QuerySet`` refinement methods that modify "
"either the types of results returned by the ``QuerySet`` or the way its SQL "
"query is executed."
msgstr ""
"``QuerySet`` が返す結果の種類や、SQLクエリの実行方法を変更するための、さまざ"
"まな ``QuerySet`` の改良メソッドをDjangoは提供します。"

msgid ""
"These methods do not run database queries, therefore they are **safe to** "
"**run in asynchronous code**, and do not have separate asynchronous versions."
msgstr ""
"これらのメソッドはデータベースクエリを実行しないので、非同期コードで実行して"
"も **安全** であり、非同期処理専用のメソッドは存在しません。"

msgid "``filter()``"
msgstr "``filter()``"

msgid ""
"Returns a new ``QuerySet`` containing objects that match the given lookup "
"parameters."
msgstr ""
"与えられたルックアップパラメータにマッチする新しい ``QuerySet`` を返します。"

msgid ""
"The lookup parameters (``**kwargs``) should be in the format described in "
"`Field lookups`_ below. Multiple parameters are joined via ``AND`` in the "
"underlying SQL statement."
msgstr ""
"ルックアップパラメータ (``**kwargs``) は以下の `Field lookups`_ で説明されて"
"いるフォーマットに従わなければなりません。複数のパラメータは、元となるSQLス"
"テートメントでは ``AND`` によって結合されます。"

msgid ""
"If you need to execute more complex queries (for example, queries with "
"``OR`` statements), you can use :class:`Q objects <django.db.models.Q>` "
"(``*args``)."
msgstr ""
"より複雑なクエリを実行したい場合(たとえば  ``OR`` ステートメントを含むクエリ)"
"は、  :class:`Q オブジェクト <django.db.models.Q>` (``*args``) を使用してくだ"
"さい。"

msgid "``exclude()``"
msgstr "``exclude()``"

msgid ""
"Returns a new ``QuerySet`` containing objects that do *not* match the given "
"lookup parameters."
msgstr ""
"与えられたルックアップパラメータにマッチ *しない* 新しい ``QuerySet`` を返し"
"ます。"

msgid ""
"The lookup parameters (``**kwargs``) should be in the format described in "
"`Field lookups`_ below. Multiple parameters are joined via ``AND`` in the "
"underlying SQL statement, and the whole thing is enclosed in a ``NOT()``."
msgstr ""
"ルックアップパラメータ (``**kwargs``) は下記の `Field lookups`_ で説明されて"
"いるフォーマットに従わなければなりません。複数のパラメータは、元となるSQLス"
"テートメントでは ``AND`` によって結合され、全体が ``NOT()`` によって囲まれま"
"す。"

msgid ""
"This example excludes all entries whose ``pub_date`` is later than 2005-1-3 "
"AND whose ``headline`` is \"Hello\"::"
msgstr ""
"この例では ``pub_date`` が 2005-1-3より新しく、 ``headline`` が \"Hello\" で"
"あるようなエントリーを除外しています::"

msgid ""
"This example excludes all entries whose ``pub_date`` is later than 2005-1-3 "
"OR whose headline is \"Hello\"::"
msgstr ""
"この例では ``pub_date`` が 2005-1-3より新しいか、 ``headline`` が \"Hello\" "
"であるようなエントリーを除外しています::"

msgid "Note the second example is more restrictive."
msgstr "2つ目の例の方が、制約がより強いことに留意してください。"

msgid "``annotate()``"
msgstr "``annotate()``"

msgid ""
"Annotates each object in the ``QuerySet`` with the provided list of :doc:"
"`query expressions </ref/models/expressions>`. An expression may be a simple "
"value, a reference to a field on the model (or any related models), or an "
"aggregate expression (averages, sums, etc.) that has been computed over the "
"objects that are related to the objects in the ``QuerySet``."
msgstr ""
"指定された :doc:`クエリ式 </ref/models/expressions>` のリストで ``QuerySet`` "
"の各オブジェクトにアノテーションを付けます。式は単純な値、モデル（または関連"
"する任意のモデル）上のフィールドへの参照、または ``QuerySet`` のオブジェクト"
"のリレーション先オブジェクトに対して計算された集計式（平均、合計など）を指定"
"できます。"

msgid ""
"Each argument to ``annotate()`` is an annotation that will be added to each "
"object in the ``QuerySet`` that is returned."
msgstr ""
"``annotate()`` の引数は、それぞれが返り値となる ``QuerySet`` 内の各オブジェク"
"トに追加される集計情報となります。"

msgid ""
"The aggregation functions that are provided by Django are described in "
"`Aggregation Functions`_ below."
msgstr ""
"Djangoが提供する集計関数については、下記の `Aggregation Functions`_ で説明さ"
"れています。"

msgid ""
"Annotations specified using keyword arguments will use the keyword as the "
"alias for the annotation. Anonymous arguments will have an alias generated "
"for them based upon the name of the aggregate function and the model field "
"that is being aggregated. Only aggregate expressions that reference a single "
"field can be anonymous arguments. Everything else must be a keyword argument."
msgstr ""
"キーワード引数を用いて集計情報を定義した場合、キーワードが集計情報のエイリア"
"スとして用いられます。位置引数を用いた場合、使用した集計関数と集計されるモデ"
"ルフィールドの名前に基づいてエイリアスが生成されます。単一のフィールドを参照"
"する集計式であれば位置引数を利用できます。それ以外のすべての集計式は、キー"
"ワード引数を用いなくてはなりません。"

msgid ""
"For example, if you were manipulating a list of blogs, you may want to "
"determine how many entries have been made in each blog:"
msgstr ""
"たとえば、ブログのリストを操作しているときに、ブログごとのエントリー数を決定"
"したいとします:"

msgid ""
"The ``Blog`` model doesn't define an ``entry__count`` attribute by itself, "
"but by using a keyword argument to specify the aggregate function, you can "
"control the name of the annotation:"
msgstr ""
"``Blog`` モデル自体は ``entry__count`` 属性を定義しませんが、集計式を指定した"
"キーワード引数を用いることで、集計情報の名前を制御できます:"

msgid ""
"For an in-depth discussion of aggregation, see :doc:`the topic guide on "
"Aggregation </topics/db/aggregation>`."
msgstr ""
"集計処理についての深い議論については、 :doc:`アグリゲーションについてのトピッ"
"クガイド </topics/db/aggregation>` を確認してください。"

msgid "``alias()``"
msgstr "``alias()``"

msgid ""
"Same as :meth:`annotate`, but instead of annotating objects in the "
"``QuerySet``, saves the expression for later reuse with other ``QuerySet`` "
"methods. This is useful when the result of the expression itself is not "
"needed but it is used for filtering, ordering, or as a part of a complex "
"expression. Not selecting the unused value removes redundant work from the "
"database which should result in better performance."
msgstr ""
":meth:`annotate` と同じですが、 ``QuerySet`` にオブジェクトをアノテーションす"
"るかわりに、後で他の ``QuerySet`` メソッドで再利用できるように式を保存しま"
"す。これは式の結果自体は必要ないが、フィルタリングやソート、あるいは複雑な式"
"の一部として利用する場合に便利です。未使用の値を選択しないことで、データベー"
"スで冗長な処理を行わずに済み、結果的にパフォーマンスを向上させることができま"
"す。"

msgid ""
"For example, if you want to find blogs with more than 5 entries, but are not "
"interested in the exact number of entries, you could do this:"
msgstr ""
"例えば、5エントリ以上のブログを探したいが、エントリ数自体に興味がない場合は、"
"以下のようにできます:"

msgid ""
"``alias()`` can be used in conjunction with :meth:`annotate`, :meth:"
"`exclude`, :meth:`filter`, :meth:`order_by`, and :meth:`update`. To use "
"aliased expression with other methods (e.g. :meth:`aggregate`), you must "
"promote it to an annotation::"
msgstr ""
"``alias()`` は :meth:`annotate`, :meth:`exclude`, :meth:`filter`, :meth:"
"`order_by`, :meth:`update` と組み合わせて使用できます。エイリアス式をその他の"
"メソッド(:meth:`aggregate` など)と組み合わせるためには、アノテーションを用い"
"る必要があります"

msgid ""
":meth:`filter` and :meth:`order_by` can take expressions directly, but "
"expression construction and usage often does not happen in the same place "
"(for example, ``QuerySet`` method creates expressions, for later use in "
"views). ``alias()`` allows building complex expressions incrementally, "
"possibly spanning multiple methods and modules, refer to the expression "
"parts by their aliases and only use :meth:`annotate` for the final result."
msgstr ""
":meth:`filter` と :meth:`order_by` は式を直接受け取ることができますが、式の構"
"築と評価は同じ場所では行われないことが多いです(例えば、 ``QuerySet`` メソッド"
"は式を作成し、後からビューを表示するときに使用されるため)。 ``alias()`` は、"
"複数のメソッドやモジュールにまたがる複雑な式を段階的に構築することができ、式"
"の部分をエイリアスで参照し、最終結果に対してのみ :meth:`annotate` を使用す"
"る、といった使い方ができます。"

msgid "``order_by()``"
msgstr "``order_by()``"

msgid ""
"By default, results returned by a ``QuerySet`` are ordered by the ordering "
"tuple given by the ``ordering`` option in the model's ``Meta``. You can "
"override this on a per-``QuerySet`` basis by using the ``order_by`` method."
msgstr ""
"デフォルトでは、 ``QuerySet`` の返り値はモデルの ``Meta`` 内の ``ordering`` "
"オプションで指定されたタプルに基づいて並び替えられます。 ``order_by`` メソッ"
"ドを使うことで、 ``QuerySet`` ごとにこれをオーバーライドできます。"

msgid ""
"The result above will be ordered by ``pub_date`` descending, then by "
"``headline`` ascending. The negative sign in front of ``\"-pub_date\"`` "
"indicates *descending* order. Ascending order is implied. To order randomly, "
"use ``\"?\"``, like so::"
msgstr ""
"上のコードの結果は ``pub_date`` の降順、次に ``headline`` の昇順で並び替えら"
"れます。 ``\"-pub_date\"`` のように、前にマイナス符号をつけることで降順を表現"
"します。昇順は暗黙的に表現されます。ランダムに並び替えたい場合、次のように "
"``\"?\"`` を使います: "

msgid ""
"Note: ``order_by('?')`` queries may be expensive and slow, depending on the "
"database backend you're using."
msgstr ""
"メモ: ``order_by('?')`` クエリは、使用するデータベースバックエンドによっては"
"高負荷で遅くなる可能性があります。"

msgid ""
"To order by a field in a different model, use the same syntax as when you "
"are querying across model relations. That is, the name of the field, "
"followed by a double underscore (``__``), followed by the name of the field "
"in the new model, and so on for as many models as you want to join. For "
"example::"
msgstr ""
"異なるモデルのフィールドで並び替えたい場合、モデル間を横断して参照するクエリ"
"を発行するときと同じ構文を使用します。すなわち、フィールド名の後にダブルアン"
"ダースコア(``__``)を続けて、その後に新たなモデルのフィールド名を続けます。そ"
"して、それを結合したいモデルの数だけ繰り返します。例えば: "

msgid ""
"If you try to order by a field that is a relation to another model, Django "
"will use the default ordering on the related model, or order by the related "
"model's primary key if there is no :attr:`Meta.ordering <django.db.models."
"Options.ordering>` specified. For example, since the ``Blog`` model has no "
"default ordering specified::"
msgstr ""
"異なるモデルを参照するフィールドで並び替えるとき、Djangoは参照先のモデルのデ"
"フォルトの順序を用いますが、 :attr:`Meta.ordering <django.db.models.Options."
"ordering>` が設定されていなければ参照先のモデルのプライマリーキーで並び替えま"
"す。たとえば、 ``Blog`` モデルにはデフォルトで設定された順序がないとき: "

msgid "...is identical to::"
msgstr "...は以下と同じです:"

msgid ""
"If ``Blog`` had ``ordering = ['name']``, then the first queryset would be "
"identical to::"
msgstr ""
"``Blog`` が ``ordering = ['name']`` を保持している場合、最初のクエリセットは"
"以下と同じになります:"

msgid ""
"You can also order by :doc:`query expressions </ref/models/expressions>` by "
"calling :meth:`~.Expression.asc` or :meth:`~.Expression.desc` on the "
"expression::"
msgstr ""
":meth:`~.Expression.asc` か :meth:`~.Expression.desc` を式の中で呼び出すこと"
"で、 :doc:`クエリ式 </ref/models/expressions>` を使うこともできます:"

msgid ""
":meth:`~.Expression.asc` and :meth:`~.Expression.desc` have arguments "
"(``nulls_first`` and ``nulls_last``) that control how null values are sorted."
msgstr ""
":meth:`~.Expression.asc` と :meth:`~.Expression.desc` は、null値をどのように"
"ソートするかを制御する引数 (``nulls_first`` と ``nulls_last``)をとります。"

msgid ""
"Be cautious when ordering by fields in related models if you are also using :"
"meth:`distinct()`. See the note in :meth:`distinct` for an explanation of "
"how related model ordering can change the expected results."
msgstr ""
"モデル参照フィールドによる並び替えと同時に :meth:`distinct()` を使用する際は"
"注意してください。参照先のモデルの順序によって、期待される結果がどのように変"
"化するかについては、 :meth:`distinct`  の注記を確認してください。"

msgid ""
"It is permissible to specify a multi-valued field to order the results by "
"(for example, a :class:`~django.db.models.ManyToManyField` field, or the "
"reverse relation of a :class:`~django.db.models.ForeignKey` field)."
msgstr ""
"複数の値をとりうるフィールドを指定し、結果を並び替えることは許されています(た"
"とえば、 :class:`~django.db.models.ManyToManyField` フィールド、もしくは :"
"class:`~django.db.models.ForeignKey` フィールドの逆参照など)。"

msgid "Consider this case::"
msgstr "このケースを考えます:"

msgid ""
"Here, there could potentially be multiple ordering data for each ``Event``; "
"each ``Event`` with multiple ``children`` will be returned multiple times "
"into the new ``QuerySet`` that ``order_by()`` creates. In other words, using "
"``order_by()`` on the ``QuerySet`` could return more items than you were "
"working on to begin with - which is probably neither expected nor useful."
msgstr ""
"ここで、それぞれの ``Event`` に対して、複数の並べ替えデータが存在する可能性が"
"あります; 複数の ``children`` を伴う ``Event`` は、``order_by()`` が作る新た"
"な ``QuerySet`` においてそれぞれ複数回返されることになります。言い換えれば、 "
"``QuerySet`` で ``order_by()`` を使うことで、もともと作業していたよりも多くの"
"項目を返してしまう可能性があります。これはおそらく予期されることはなく、有用"
"でもないでしょう。"

msgid ""
"Thus, take care when using multi-valued field to order the results. **If** "
"you can be sure that there will only be one ordering piece of data for each "
"of the items you're ordering, this approach should not present problems. If "
"not, make sure the results are what you expect."
msgstr ""
"従って、複数の値をとりうるフィールドを結果の並び替えに用いる際は気を付けてく"
"ださい。 **もし仮に** 並び替える項目ごとに1つのデータしか存在しないのであれ"
"ば、この方法でも問題はないでしょう。そうでなければ、結果が期待通りになること"
"を確認してください。"

msgid ""
"There's no way to specify whether ordering should be case sensitive. With "
"respect to case-sensitivity, Django will order results however your database "
"backend normally orders them."
msgstr ""
"大文字と小文字を区別して並べ替えるかどうかを指定することはできません。Django"
"は使用するデータベースバックエンドが通常このCase-sensitiveをどのように扱うか"
"に従って結果を並び替えます。"

msgid ""
"You can order by a field converted to lowercase with :class:`~django.db."
"models.functions.Lower` which will achieve case-consistent ordering::"
msgstr ""
":class:`~django.db.models.functions.Lower` によって小文字に変換したフィールド"
"で並び替えることで、一貫したルールでの並び替えを実現できます:"

msgid ""
"If you don't want any ordering to be applied to a query, not even the "
"default ordering, call :meth:`order_by()` with no parameters."
msgstr ""
"クエリに対し、デフォルトの順序付けも含めて並び替えを適用したくない場合、パラ"
"メータを指定せずに :meth:`order_by()` を呼び出してください。"

msgid ""
"You can tell if a query is ordered or not by checking the :attr:`.QuerySet."
"ordered` attribute, which will be ``True`` if the ``QuerySet`` has been "
"ordered in any way."
msgstr ""
"クエリに並び替えが適用されたかどうかは、 :attr:`.QuerySet.ordered` 属性を確認"
"することで知ることができます。 ``QuerySet`` がなんらかの方法で並び替えられれ"
"ば、この属性の値は ``True`` となります。"

msgid ""
"Each ``order_by()`` call will clear any previous ordering. For example, this "
"query will be ordered by ``pub_date`` and not ``headline``::"
msgstr ""
"``order_by()`` の呼び出しごとに、過去の並び替えは解除されます。たとえば、以下"
"のクエリでは並び替えに ``pub_date`` が使われ、 ``headline`` は使われません:"

msgid "``reverse()``"
msgstr "``reverse()``"

msgid ""
"Use the ``reverse()`` method to reverse the order in which a queryset's "
"elements are returned. Calling ``reverse()`` a second time restores the "
"ordering back to the normal direction."
msgstr ""
"``reverse()`` メソッドを使用すると、クエリセットの要素を返す順序を逆にするこ"
"とができます。再度 ``reverse()`` を呼び出すと、順序が元に戻ります。"

msgid "To retrieve the \"last\" five items in a queryset, you could do this::"
msgstr "クエリセットの「最後の」5つの項目を取り出すには、次のようにします:"

msgid ""
"Note that this is not quite the same as slicing from the end of a sequence "
"in Python. The above example will return the last item first, then the "
"penultimate item and so on. If we had a Python sequence and looked at "
"``seq[-5:]``, we would see the fifth-last item first. Django doesn't support "
"that mode of access (slicing from the end), because it's not possible to do "
"it efficiently in SQL."
msgstr ""
"この処理がPythonでシーケンスの最後からスライスするのとは全く違うことに注意し"
"てください。上記の例では、まず最後の項目が返され、次に最後から5番目の項目が返"
"されます。Python のシーケンスに対して ``seq[-5:]`` を参照すると、最後の 5 番"
"目の項目が最初に表示されるはずです。そのようなアクセスモード (末尾からのスラ"
"イス) は、SQL で効率的に行うことができないため、Django ではサポートされていま"
"せん。"

msgid ""
"Also, note that ``reverse()`` should generally only be called on a "
"``QuerySet`` which has a defined ordering (e.g., when querying against a "
"model which defines a default ordering, or when using :meth:`order_by()`). "
"If no such ordering is defined for a given ``QuerySet``, calling "
"``reverse()`` on it has no real effect (the ordering was undefined prior to "
"calling ``reverse()``, and will remain undefined afterward)."
msgstr ""
"また、通常 ``reverse()`` は、順序が定義されている ``QuerySet`` に対してしか呼"
"び出せないことに注意してください（例えば、デフォルトの順序を定義しているモデ"
"ルに対するクエリや、 :meth:`order_by()` を使用する場合など）。 ``QuerySet`` "
"に順序が定義されていなかったら、 ``reverse()`` を呼び出しても何の効果もありま"
"せん（順序は ``reverse()`` を呼び出す前から未定義であり、その後も未定義のまま"
"です）。"

msgid "``distinct()``"
msgstr "``distinct()``"

msgid ""
"Returns a new ``QuerySet`` that uses ``SELECT DISTINCT`` in its SQL query. "
"This eliminates duplicate rows from the query results."
msgstr ""
"SQL クエリで ``SELECT DISTINCT`` を使用した新しい ``QuerySet`` を返します。こ"
"れにより、クエリ結果から重複した行を取り除くことができます。"

msgid ""
"By default, a ``QuerySet`` will not eliminate duplicate rows. In practice, "
"this is rarely a problem, because simple queries such as ``Blog.objects."
"all()`` don't introduce the possibility of duplicate result rows. However, "
"if your query spans multiple tables, it's possible to get duplicate results "
"when a ``QuerySet`` is evaluated. That's when you'd use ``distinct()``."
msgstr ""
"デフォルトでは、 ``QuerySet`` は重複した行を削除しません。なぜなら、 ``Blog."
"objects.all()`` のような単純なクエリでは、結果の行が重複する可能性はないから"
"です。しかし、クエリが複数のテーブルにまたがっている場合、 ``QuerySet`` が評"
"価されたときに重複した結果を得る可能性があります。このような場合は "
"``distinct()`` を使用します。"

msgid ""
"Any fields used in an :meth:`order_by` call are included in the SQL "
"``SELECT`` columns. This can sometimes lead to unexpected results when used "
"in conjunction with ``distinct()``. If you order by fields from a related "
"model, those fields will be added to the selected columns and they may make "
"otherwise duplicate rows appear to be distinct. Since the extra columns "
"don't appear in the returned results (they are only there to support "
"ordering), it sometimes looks like non-distinct results are being returned."
msgstr ""
":meth:`order_by` の呼び出しで使用されるフィールドはすべて、SQL の ``SELECT`` "
"列に含まれます。これは ``distinct()`` と組み合わせて使用すると、時に予期せぬ"
"結果をもたらすことがあります。リレーション先モデルのフィールドでソートした場"
"合、それらのフィールドが ``SELECT`` の対象に追加され、重複した行が重複してい"
"ないように出力されるかもしれません。余分なカラムは返される結果には現れないの"
"で (カラムは順序付けをサポートするためだけに存在するため)、重複した結果が返さ"
"れているように見えることがあります。"

msgid ""
"Similarly, if you use a :meth:`values()` query to restrict the columns "
"selected, the columns used in any :meth:`order_by()` (or default model "
"ordering) will still be involved and may affect uniqueness of the results."
msgstr ""
"同様に、 :meth:`values()` クエリを使用して選択するカラムを制限した場合、 :"
"meth:`order_by()` （またはデフォルトのモデルの順序付け）で使用したカラムが残"
"存し、結果の一意性に影響する可能性があります。"

msgid ""
"The moral here is that if you are using ``distinct()`` be careful about "
"ordering by related models. Similarly, when using ``distinct()`` and :meth:"
"`values()` together, be careful when ordering by fields not in the :meth:"
"`values()` call."
msgstr ""
"この問題の解決策は、 ``distinct()`` を使用する場合、リレーション先のモデルに"
"よるソートに注意することです。同様に、 ``distinct()`` と :meth:`values()` を"
"一緒に使う場合、 :meth:`values()` の呼び出しに含まれないフィールドによるソー"
"トに注意する必要があります。"

msgid ""
"On PostgreSQL only, you can pass positional arguments (``*fields``) in order "
"to specify the names of fields to which the ``DISTINCT`` should apply. This "
"translates to a ``SELECT DISTINCT ON`` SQL query. Here's the difference. For "
"a normal ``distinct()`` call, the database compares *each* field in each row "
"when determining which rows are distinct. For a ``distinct()`` call with "
"specified field names, the database will only compare the specified field "
"names."
msgstr ""
"PostgreSQL のみ、位置引数 (``*fields``) を渡して、 ``DISTINCT`` を適用する"
"フィールドの名前を指定できます。これは ``SELECT DISTINCT ON`` というSQLクエリ"
"に相当します。通常の ``distinct()`` 呼び出しでは、データベースはどの行が区別"
"されるかを判断する際に、各行の *each* フィールドを比較しますが、フィールド名"
"を指定した ``distinct()`` の呼び出しでは、データベースは指定されたフィールド"
"名のみを比較できます。"

msgid ""
"When you specify field names, you *must* provide an ``order_by()`` in the "
"``QuerySet``, and the fields in ``order_by()`` must start with the fields in "
"``distinct()``, in the same order."
msgstr ""
"フィールド名を指定する場合、``QuerySet`` に ``order_by()`` を指定する必要があ"
"り、 ``order_by()`` のフィールドは ``distinct()`` のフィールドと同じ順序で始"
"まる必要があります。"

msgid ""
"For example, ``SELECT DISTINCT ON (a)`` gives you the first row for each "
"value in column ``a``. If you don't specify an order, you'll get some "
"arbitrary row."
msgstr ""
"例えば、``SELECT DISTINCT ON (a)`` とすると、列 ``a`` の各値の最初の行が得ら"
"れます。もし順序を指定しなければ、任意の行を得ることができます。"

msgid "Examples (those after the first will only work on PostgreSQL):"
msgstr "例 (2つ目以降のコードは、PostgreSQL上でのみ動作します):"

msgid ""
"Keep in mind that :meth:`order_by` uses any default related model ordering "
"that has been defined. You might have to explicitly order by the relation "
"``_id`` or referenced field to make sure the ``DISTINCT ON`` expressions "
"match those at the beginning of the ``ORDER BY`` clause. For example, if the "
"``Blog`` model defined an :attr:`~django.db.models.Options.ordering` by "
"``name``::"
msgstr ""
":meth:`order_by` はデフォルトで定義されているリレーション先モデルのソートを使"
"用することに注意してください。 ``ORDER BY`` 句の先頭にある ``DISTINCT ON`` 式"
"が一致するように、明示的に ``_id`` やフィールド参照によるソートをする必要があ"
"るかもしれません。例えば、 ``Blog`` モデルが ``name`` による :attr:`~django."
"db.models.Options.ordering` を定義していた場合、:"

msgid ""
"...wouldn't work because the query would be ordered by ``blog__name`` thus "
"mismatching the ``DISTINCT ON`` expression. You'd have to explicitly order "
"by the relation ``_id`` field (``blog_id`` in this case) or the referenced "
"one (``blog__pk``) to make sure both expressions match."
msgstr ""
"このコードは、クエリが ``blog__name`` によってソートされるため ``DISTINCT "
"ON`` 式と食い違ってしまい、正しい結果を得られないでしょう。2つの式が一致する"
"ように、リレーションの ``_id`` フィールド（この場合は ``blog_id`` ）または"
"フィールド参照（ ``blog__pk`` ）によって明示的にソートする必要があります。"

msgid "``values()``"
msgstr "``values()``"

msgid ""
"Returns a ``QuerySet`` that returns dictionaries, rather than model "
"instances, when used as an iterable."
msgstr ""
"イテラブルオブジェクトとして使用するとき、モデルインスタンスではなく辞書を返"
"す ``QuerySet`` を返します。"

msgid ""
"Each of those dictionaries represents an object, with the keys corresponding "
"to the attribute names of model objects."
msgstr ""
"これらの辞書はそれぞれオブジェクトを表し、キーはモデルオブジェクトの属性名に"
"対応しています。"

msgid ""
"This example compares the dictionaries of ``values()`` with the normal model "
"objects:"
msgstr ""
"この例では、``values()`` によって得られる辞書と通常のモデルのオブジェクトを比"
"較しています:"

msgid ""
"The ``values()`` method takes optional positional arguments, ``*fields``, "
"which specify field names to which the ``SELECT`` should be limited. If you "
"specify the fields, each dictionary will contain only the field keys/values "
"for the fields you specify. If you don't specify the fields, each dictionary "
"will contain a key and value for every field in the database table."
msgstr ""
"``values()`` メソッドはオプションの位置引数 ``*fields`` を取り、 ``SELECT`` "
"で絞り込むフィールド名を指定します。フィールドを指定した場合、それぞれの辞書"
"は指定したフィールドのキー/値のみを保有します。フィールドを指定しない場合、各"
"辞書は、データベーステーブルのすべてのフィールドのキーと値を保有します。"

msgid ""
"The ``values()`` method also takes optional keyword arguments, "
"``**expressions``, which are passed through to :meth:`annotate`:"
msgstr ""
"``values()`` メソッドはオプションでキーワード引数 ``**expressions`` を受け取"
"り、 :meth:`annotate` に渡すこともできます:"

msgid ""
"You can use built-in and :doc:`custom lookups </howto/custom-lookups>` in "
"ordering. For example:"
msgstr ""
"ソートには、組み込みのルックアップまたは :doc:`カスタムルックアップ </howto/"
"custom-lookups>` が使用できます。例えば、次のようになります:"

msgid ""
"An aggregate within a ``values()`` clause is applied before other arguments "
"within the same ``values()`` clause. If you need to group by another value, "
"add it to an earlier ``values()`` clause instead. For example:"
msgstr ""
"``values()`` 句内の集計処理は、同じ ``values()`` 句内の他の引数の前に適用され"
"ます。別の値でグループ化する必要がある場合は、その値を先の ``values()`` 句に"
"追加してください。例えば:"

msgid "A few subtleties that are worth mentioning:"
msgstr "いくつかの際どいポイントについて言及しておきます:"

msgid ""
"If you have a field called ``foo`` that is a :class:`~django.db.models."
"ForeignKey`, the default ``values()`` call will return a dictionary key "
"called ``foo_id``, since this is the name of the hidden model attribute that "
"stores the actual value (the ``foo`` attribute refers to the related model). "
"When you are calling ``values()`` and passing in field names, you can pass "
"in either ``foo`` or ``foo_id`` and you will get back the same thing (the "
"dictionary key will match the field name you passed in)."
msgstr ""
"もし ``foo`` というフィールドが :class:`~django.db.models.ForeignKey` である"
"場合、デフォルトの ``values()`` は ``foo_id`` という辞書キーを返します。それ"
"が実際の値を格納するモデルの隠し属性名だからです (``foo`` 属性はリレーション"
"先モデルを指します)。 ``value()`` を呼び出してフィールド名を渡す場合、"
"``foo`` と ``foo_id`` のどちらを渡しても、同じものが返ってきます（辞書のキー"
"は渡したフィールド名と一致します）。"

msgid ""
"When using ``values()`` together with :meth:`distinct()`, be aware that "
"ordering can affect the results. See the note in :meth:`distinct` for "
"details."
msgstr ""
"``values()`` と :meth:`distinct()` を一緒に使う場合、呼び出す順番が結果に影響"
"する場合があるので注意してください。 詳細は :meth:`distinct` のノートを参照し"
"てください。"

msgid ""
"If you use a ``values()`` clause after an :meth:`extra()` call, any fields "
"defined by a ``select`` argument in the :meth:`extra()` must be explicitly "
"included in the ``values()`` call. Any :meth:`extra()` call made after a "
"``values()`` call will have its extra selected fields ignored."
msgstr ""
":meth:`extra()` 呼び出しの後に ``values()`` 句を使用する場合、 :meth:"
"`extra()` の ``select`` 引数で定義したフィールドは、明示的に ``values()`` 呼"
"び出しに含めなければなりません。 ``values()`` 呼び出しの後に :meth:`extra()` "
"を呼び出しても、後から追加した選択フィールドは返り値に含まれません。"

msgid ""
"Calling :meth:`only()` and :meth:`defer()` after ``values()`` doesn't make "
"sense, so doing so will raise a ``TypeError``."
msgstr ""
"``values()`` の後に :meth:`only()` と :meth:`defer()` を呼び出すのは意味がな"
"く、 ``TypeError`` が発生します。"

msgid ""
"Combining transforms and aggregates requires the use of two :meth:`annotate` "
"calls, either explicitly or as keyword arguments to :meth:`values`. As "
"above, if the transform has been registered on the relevant field type the "
"first :meth:`annotate` can be omitted, thus the following examples are "
"equivalent:"
msgstr ""
"トランスフォームと集計の処理を組み合わせるには、2つの :meth:`annotate`  呼び"
"出しを、明示的にまたは :meth:`values` へのキーワード引数として使用する必要が"
"あります。上記の例のように、リレーション先のフィールドタイプにトランスフォー"
"ムが登録されていれば、最初の :meth:`annotate` は省略できます。よって以下の例"
"はすべて等価です:"

msgid ""
"It is useful when you know you're only going to need values from a small "
"number of the available fields and you won't need the functionality of a "
"model instance object. It's more efficient to select only the fields you "
"need to use."
msgstr ""
"これは、値が欲しい利用可能フィールドが少なく、モデルインスタンスオブジェクト"
"の機能が必要ないことが分かっている場合に便利です。使用する必要のあるフィール"
"ドだけを選択する方がより効率的です。"

msgid ""
"Finally, note that you can call ``filter()``, ``order_by()``, etc. after the "
"``values()`` call, that means that these two calls are identical::"
msgstr ""
"最後に、``values()`` の後に ``filter()`` や ``order_by()`` などを呼び出すこと"
"ができますが、これはこの2つの呼び出しが同じであることを意味しています:"

msgid ""
"The people who made Django prefer to put all the SQL-affecting methods "
"first, followed (optionally) by any output-affecting methods (such as "
"``values()``), but it doesn't really matter. This is your chance to really "
"flaunt your individualism."
msgstr ""
"Django を作った人たちは、SQL に影響するメソッドを最初に置き、その後に出力に影"
"響するメソッド (``values()`` など) を (オプションで) 置くことを好みますが、そ"
"れは本当に重要ではありません。しかし、そんなことはどうでもいいのです。この機"
"会に、あなたの個性を存分に発揮してください。"

msgid ""
"You can also refer to fields on related models with reverse relations "
"through ``OneToOneField``, ``ForeignKey`` and ``ManyToManyField`` attributes:"
msgstr ""
"リレーション先モデルのフィールドには、 ``OneToOneField`` 、 "
"``ForeignKey`` 、 ``ManyToManyField`` 属性を使用して逆リレーションで参照する"
"こともできます。"

msgid ""
"Because :class:`~django.db.models.ManyToManyField` attributes and reverse "
"relations can have multiple related rows, including these can have a "
"multiplier effect on the size of your result set. This will be especially "
"pronounced if you include multiple such fields in your ``values()`` query, "
"in which case all possible combinations will be returned."
msgstr ""
":class:`~django.db.models.ManyToManyField` 属性と逆リレーションは複数の関連行"
"を持つので、これらを含めると結果のサイズが数倍になることがあります。これは、 "
"``values()`` クエリに複数のフィールドを含めると特に顕著で、その場合、考えられ"
"るすべての組み合わせが返されることになります。"

msgid "Special values for ``JSONField`` on SQLite"
msgstr "SQLiteにおける ``JSONField`` の特殊な値"

msgid ""
"Due to the way the ``JSON_EXTRACT`` and ``JSON_TYPE`` SQL functions are "
"implemented on SQLite, and lack of the ``BOOLEAN`` data type, ``values()`` "
"will return ``True``, ``False``, and ``None`` instead of ``\"true\"``, "
"``\"false\"``, and ``\"null\"`` strings for :class:`~django.db.models."
"JSONField` key transforms."
msgstr ""
"SQLiteでは、 ``JSON_EXTRACT`` と ``JSON_TYPE`` は実装されていますが、 "
"``BOOLEAN`` データ型がないため、 ``values()`` は :class:`~django.db.models."
"JSONField` のキーを変換する際に ``true``, ``False``, ``None`` の代わりに "
"``\"true\"``, ``\"false\"``, ``\"null\"`` の代わりに ``True``, ``False``, "
"``None`` を返します。"

msgid "``values_list()``"
msgstr "``values_list()``"

msgid ""
"This is similar to ``values()`` except that instead of returning "
"dictionaries, it returns tuples when iterated over. Each tuple contains the "
"value from the respective field or expression passed into the "
"``values_list()`` call — so the first item is the first field, etc. For "
"example:"
msgstr ""
"この関数は ``values()`` と似ていますが、イテレートしたときに辞書の代わりにタ"
"プルを返します。それぞれのタプルには、 ``values_list()`` に渡された各フィール"
"ドまたは式の値が、渡された順番で含まれます。例えば:"

msgid ""
"If you only pass in a single field, you can also pass in the ``flat`` "
"parameter. If ``True``, this will mean the returned results are single "
"values, rather than 1-tuples. An example should make the difference clearer:"
msgstr ""
"フィールドを1つだけ渡す場合は、 ``flat`` パラメータを渡すことができます。これ"
"に ``True`` を渡すと、返り値はタプルではなく単一の値になります。この違いは例"
"を見て理解してください。"

msgid "It is an error to pass in ``flat`` when there is more than one field."
msgstr "複数のフィールドがある場合に ``flat`` を渡すとエラーになります。"

msgid ""
"You can pass ``named=True`` to get results as a :func:`~python:collections."
"namedtuple`:"
msgstr ""
":func:`~python:collections.namedtuple`: として結果を得るには、``named=True`` "
"を渡します:"

msgid ""
"Using a named tuple may make use of the results more readable, at the "
"expense of a small performance penalty for transforming the results into a "
"named tuple."
msgstr ""
"名前付きタプルを使用することで、名前付きタプルに変換するためのわずかなパ"
"フォーマンスの低下を犠牲にして、クエリの実行結果の可読性を高めることができま"
"す。"

msgid ""
"If you don't pass any values to ``values_list()``, it will return all the "
"fields in the model, in the order they were declared."
msgstr ""
"もし ``values_list()`` に何も値を渡さなければ、モデル内のすべてのフィールドを"
"宣言された順に返します。"

msgid ""
"A common need is to get a specific field value of a certain model instance. "
"To achieve that, use ``values_list()`` followed by a ``get()`` call:"
msgstr ""
"よくあるニーズは、特定のモデルインスタンスの特定のフィールドの値を取得するこ"
"とです。これを実現するには、 ``values_list()`` の後に ``get()`` を呼び出しま"
"す:"

msgid ""
"``values()`` and ``values_list()`` are both intended as optimizations for a "
"specific use case: retrieving a subset of data without the overhead of "
"creating a model instance. This metaphor falls apart when dealing with many-"
"to-many and other multivalued relations (such as the one-to-many relation of "
"a reverse foreign key) because the \"one row, one object\" assumption "
"doesn't hold."
msgstr ""
"``values()`` と ``values_list()`` はいずれも、モデルインスタンスを作成する"
"オーバーヘッドなしにデータのサブセットを取得するという、特定のユースケースに"
"対する最適化を意図したものです。このメタファーは、多対多の関係やその他の多値"
"の関係（逆引き外部キーの1対多の関係など）を扱うときには、「1行に1オブジェク"
"ト」の前提が成り立たないために崩れてしまいます。"

msgid ""
"For example, notice the behavior when querying across a :class:`~django.db."
"models.ManyToManyField`:"
msgstr ""
"例えば、 :class:`~django.db.models.ManyToManyField`: を通してクエリを実行した"
"ときの挙動に注目してみましょう:"

msgid ""
"Authors with multiple entries appear multiple times and authors without any "
"entries have ``None`` for the entry headline."
msgstr ""
"複数のエントリを持つ著者は複数回表示され、エントリのない著者のエントリとして "
"``None`` と表示されます。"

msgid ""
"Similarly, when querying a reverse foreign key, ``None`` appears for entries "
"not having any author:"
msgstr ""
"同様に、外部キーを逆引きするクエリでは、著者が設定されていないエントリに対し"
"て ``None`` が表示されます。"

msgid ""
"Due to the way the ``JSON_EXTRACT`` and ``JSON_TYPE`` SQL functions are "
"implemented on SQLite, and lack of the ``BOOLEAN`` data type, "
"``values_list()`` will return ``True``, ``False``, and ``None`` instead of "
"``\"true\"``, ``\"false\"``, and ``\"null\"`` strings for :class:`~django.db."
"models.JSONField` key transforms."
msgstr ""
"SQLiteでは、 ``JSON_EXTRACT`` と ``JSON_TYPE`` は実装されていますが、 "
"``BOOLEAN`` データ型がないため、 ``values_list()`` は :class:`~django.db."
"models.JSONField` のキーを変換する際に ``\"true\"``, ``\"false\"``, and "
"``\"null\"`` の代わりに ``True``, ``False``, ``None`` の文字列を返します。"

msgid "``dates()``"
msgstr "``dates()``"

msgid ""
"Returns a ``QuerySet`` that evaluates to a list of :class:`datetime.date` "
"objects representing all available dates of a particular kind within the "
"contents of the ``QuerySet``."
msgstr ""
"この ``QuerySet`` は :class:`datetime.date` オブジェクトのリストとして評価さ"
"れ、``QuerySet`` の内容から指定された種類の日付を返します。"

msgid ""
"``field`` should be the name of a ``DateField`` of your model. ``kind`` "
"should be either ``\"year\"``, ``\"month\"``, ``\"week\"``, or ``\"day\"``. "
"Each :class:`datetime.date` object in the result list is \"truncated\" to "
"the given ``type``."
msgstr ""
"``field`` にはモデルの ``DateField`` の名前を指定します。 ``kind`` には "
"``\"year\"``, ``\"month\"``, ``\"week\"``, ``\"day\"`` のいずれかを指定しま"
"す。結果のリストに含まれる :class:`datetime.date` オブジェクトは、指定された "
"``type`` に \"切り捨て\" られます。"

msgid "``\"year\"`` returns a list of all distinct year values for the field."
msgstr ""
"``\"year\"`` は、そのフィールドのすべての年の値のリストを重複なしで返します。"

msgid ""
"``\"month\"`` returns a list of all distinct year/month values for the field."
msgstr ""
"``\"month\"`` はそのフィールドの年/月の値のリストを重複なしで返します。"

msgid ""
"``\"week\"`` returns a list of all distinct year/week values for the field. "
"All dates will be a Monday."
msgstr ""
"``\"week\"`` はそのフィールドの年/週の値のリストを重複なしで返します。すべて"
"の date は月曜日になります。"

msgid ""
"``\"day\"`` returns a list of all distinct year/month/day values for the "
"field."
msgstr ""
"``\"day\"`` はそのフィールドの年/月/日の値のリストを重複なしで返します。"

msgid ""
"``order``, which defaults to ``'ASC'``, should be either ``'ASC'`` or "
"``'DESC'``. This specifies how to order the results."
msgstr ""
"``order`` のデフォルトは ``'ASC'`` で、 ``'ASC'`` または ``'DESC'`` のいずれ"
"かを指定します。これは結果のソート方法を指定します。"

msgid "``datetimes()``"
msgstr "``datetimes()``"

msgid ""
"Returns a ``QuerySet`` that evaluates to a list of :class:`datetime."
"datetime` objects representing all available dates of a particular kind "
"within the contents of the ``QuerySet``."
msgstr ""
"これは、``QuerySet`` 内の指定した種類の有効な日付を表す :class:`datetime."
"datetime` オブジェクトのリストとして評価される ``QuerySet`` を返します。"

msgid "``field_name`` should be the name of a ``DateTimeField`` of your model."
msgstr "``field_name`` にはモデルの ``DateTimeField`` の名前を指定します。"

msgid ""
"``kind`` should be either ``\"year\"``, ``\"month\"``, ``\"week\"``, "
"``\"day\"``, ``\"hour\"``, ``\"minute\"``, or ``\"second\"``. Each :class:"
"`datetime.datetime` object in the result list is \"truncated\" to the given "
"``type``."
msgstr ""
"``kind`` には ``\"year\"``, ``\"month\"``, ``\"week\"``, ``\"day\"``, "
"``\"hour\"``, ``\"minute\"``, ``\"second\"`` のいずれかを指定します。結果のリ"
"ストに含まれる :class:`datetime.datetime` オブジェクトは、指定された "
"``type`` に \" 切り捨て\" られます。"

msgid ""
"``tzinfo`` defines the time zone to which datetimes are converted prior to "
"truncation. Indeed, a given datetime has different representations depending "
"on the time zone in use. This parameter must be a :class:`datetime.tzinfo` "
"object. If it's ``None``, Django uses the :ref:`current time zone <default-"
"current-time-zone>`. It has no effect when :setting:`USE_TZ` is ``False``."
msgstr ""
"``tzinfo`` は、日時が切り捨てられる前に変換されるタイムゾーンを定義します。実"
"際、与えられた日時は使用されるタイムゾーンによって異なる表現を持ちます。この"
"パラメータは :class:`datetime.tzinfo` オブジェクトでなければなりません。"
"``None`` の場合、Djangoは :ref:`カレントタイムゾーン <default-current-time-"
"zone>` を使用します。:setting:`USE_TZ` が ``False`` の場合には効果がありませ"
"ん。"

msgid ""
"This function performs time zone conversions directly in the database. As a "
"consequence, your database must be able to interpret the value of ``tzinfo."
"tzname(None)``. This translates into the following requirements:"
msgstr ""
"この関数はデータベース内で直接タイムゾーンの変換を行います。そのため、データ"
"ベースは ``tzinfo.tzname(None)`` の値を解釈できなければなりません。これは以下"
"の要件になります:"

msgid "SQLite: no requirements. Conversions are performed in Python."
msgstr "SQLite: 要件はありません。変換はPythonで行われます。"

msgid "PostgreSQL: no requirements (see `Time Zones`_)."
msgstr "PostgreSQL: 要件はありません（ `Time Zones`_ を参照）。"

msgid "Oracle: no requirements (see `Choosing a Time Zone File`_)."
msgstr "Oracle: 要件はありません（ `Choosing a Time Zone File`_ を参照）。"

msgid "MySQL: load the time zone tables with `mysql_tzinfo_to_sql`_."
msgstr "MySQL: `mysql_tzinfo_to_sql`_ でタイムゾーンテーブルをロードすること。"

msgid "``none()``"
msgstr "``none()``"

msgid ""
"Calling ``none()`` will create a queryset that never returns any objects and "
"no query will be executed when accessing the results. A ``qs.none()`` "
"queryset is an instance of ``EmptyQuerySet``."
msgstr ""
"``none()`` を呼び出すと、オブジェクトを返さないクエリセットが作成され、結果に"
"アクセスする際にクエリが実行されることはありません。 ``qs.none()`` のクエリ"
"セットは ``EmptyQuerySet`` のインスタンスです。"

msgid "``all()``"
msgstr "``all()``"

msgid ""
"Returns a *copy* of the current ``QuerySet`` (or ``QuerySet`` subclass).  "
"This can be useful in situations where you might want to pass in either a "
"model manager or a ``QuerySet`` and do further filtering on the result. "
"After calling ``all()`` on either object, you'll definitely have a "
"``QuerySet`` to work with."
msgstr ""
"現在の ``QuerySet`` (または ``QuerySet`` サブクラス)の *コピー* を返します。"
"これは、モデルマネージャまたは ``QuerySet`` のどちらかを渡して、その結果に対"
"してさらにフィルタリングを行いたいときに便利です。いずれかのオブジェクトに対"
"して ``all()`` を呼び出すと、動作する ``QuerySet`` が必ず作成されます。"

msgid ""
"When a ``QuerySet`` is :ref:`evaluated <when-querysets-are-evaluated>`, it "
"typically caches its results. If the data in the database might have changed "
"since a ``QuerySet`` was evaluated, you can get updated results for the same "
"query by calling ``all()`` on a previously evaluated ``QuerySet``."
msgstr ""
"``QuerySet`` が :ref:`評価される <when-querysets-are-evaluated>` とき、通常そ"
"の結果はキャッシュされます。もし ``QuerySet`` が評価された後にデータベースの"
"データが更新された場合、以前に評価された  ``QuerySet`` に対して ``all()`` を"
"呼び出すことで、同じクエリの最新の結果を取得できます。"

msgid "``union()``"
msgstr "``union()``"

msgid ""
"Uses SQL's ``UNION`` operator to combine the results of two or more "
"``QuerySet``\\s. For example:"
msgstr ""
"SQLの ``UNION`` コマンドを使用して、2つ以上の ``QuerySet`` の結果を結合しま"
"す。例えば:"

msgid ""
"The ``UNION`` operator selects only distinct values by default. To allow "
"duplicate values, use the ``all=True`` argument."
msgstr ""
"``UNION`` 演算子は、デフォルトでは明確な値のみを選択します。重複した値を取得"
"するには、 ``all=True`` 引数を使用します。"

msgid ""
"``union()``, ``intersection()``, and ``difference()`` return model instances "
"of the type of the first ``QuerySet`` even if the arguments are "
"``QuerySet``\\s of other models. Passing different models works as long as "
"the ``SELECT`` list is the same in all ``QuerySet``\\s (at least the types, "
"the names don't matter as long as the types are in the same order). In such "
"cases, you must use the column names from the first ``QuerySet`` in "
"``QuerySet`` methods applied to the resulting ``QuerySet``. For example:"
msgstr ""
"``union()``, ``intersection()``, ``difference()`` は、引数が他のモデルの "
"``QuerySet`` であっても、最初の ``QuerySet`` の型のモデルインスタンスを返しま"
"す。すべての ``QuerySet`` で ``SELECT`` リストが同じであれば、異なるモデルを"
"渡すことができます（少なくとも型と、型の順番が同じであれば名前は関係ありませ"
"ん）。 このような場合、結果の ``QuerySet`` に適用される ``QuerySet`` メソッド"
"では、最初の ``QuerySet`` のカラム名を使用する必要があります。たとえば、次の"
"ようになります:"

msgid ""
"In addition, only ``LIMIT``, ``OFFSET``, ``COUNT(*)``, ``ORDER BY``, and "
"specifying columns (i.e. slicing, :meth:`count`, :meth:`exists`, :meth:"
"`order_by`, and :meth:`values()`/:meth:`values_list()`) are allowed on the "
"resulting ``QuerySet``. Further, databases place restrictions on what "
"operations are allowed in the combined queries. For example, most databases "
"don't allow ``LIMIT`` or ``OFFSET`` in the combined queries."
msgstr ""
"結果として得られる ``QuerySet`` では、``LIMIT``、``OFFSET``、``COUNT(*)``、"
"``ORDER BY``、およびカラムの指定（すなわち、スライス、 :meth:`count` 、 :"
"meth:`exists` 、 :meth:`order_by` 、 :meth:`values()` / :meth:"
"`values_list()` ）のみが許可されます。さらに、データベースによっては、組み合"
"わせたクエリで許可される操作に制限があります。例えば、ほとんどのデータベース"
"では組み合わせたクエリで「LIMIT」や「OFFSET」は許可されていません。"

msgid "``intersection()``"
msgstr "``intersection()``"

msgid ""
"Uses SQL's ``INTERSECT`` operator to return the shared elements of two or "
"more ``QuerySet``\\s. For example:"
msgstr ""
"SQL の ``INTERSECT`` 演算子を使用して、2つ以上の ``QuerySet`` の全てに含まれ"
"る共有要素を返します。例:"

msgid "See :meth:`union` for some restrictions."
msgstr "制限については :meth:`union` を参照してください。"

msgid "``difference()``"
msgstr "``difference()``"

msgid ""
"Uses SQL's ``EXCEPT`` operator to keep only elements present in the "
"``QuerySet`` but not in some other ``QuerySet``\\s. For example:"
msgstr ""
"SQL の ``EXCEPT`` 演算子を使用して、 ``QuerySet`` には存在するが、他の "
"``QuerySet`` には存在しない要素のみを保持します。例:"

msgid "``select_related()``"
msgstr "``select_related()``"

msgid ""
"Returns a ``QuerySet`` that will \"follow\" foreign-key relationships, "
"selecting additional related-object data when it executes its query. This is "
"a performance booster which results in a single more complex query but means "
"later use of foreign-key relationships won't require database queries."
msgstr ""
"クエリを実行する際に、追加で関連オブジェクトのデータを選択し、外部キーのリ"
"レーションシップを \"辿る\" ``QuerySet`` を返します。発行されるクエリはより複"
"雑になりますが、後で外部リレーションシップを使用する際に追加のデータベースク"
"エリが不要になるので、パフォーマンスを向上させることができます。"

msgid ""
"The following examples illustrate the difference between plain lookups and "
"``select_related()`` lookups. Here's standard lookup::"
msgstr ""
"以下の例は、通常のルックアップと ``select_related()`` を用いたルックアップの"
"違いを示しています。まず、これが通常のルックアップです。"

msgid "And here's ``select_related`` lookup::"
msgstr "そしてこれが ``select_related`` を用いたルックアップです。"

msgid "You can use ``select_related()`` with any queryset of objects::"
msgstr ""
"``select_related()`` はどんなオブジェクトのクエリセットにも使うことができま"
"す。"

msgid ""
"The order of ``filter()`` and ``select_related()`` chaining isn't important. "
"These querysets are equivalent::"
msgstr ""
"``filter()`` と ``select_related()`` を連続させるときの順序は重要ではありませ"
"ん。これらのクエリセットは等価です:"

msgid ""
"You can follow foreign keys in a similar way to querying them. If you have "
"the following models::"
msgstr ""
"外部キーのクエリと同様の方法で、外部キーをたどることができます。次のようなモ"
"デルがあるとします:"

msgid ""
"... then a call to ``Book.objects.select_related('author__hometown')."
"get(id=4)`` will cache the related ``Person`` *and* the related ``City``::"
msgstr ""
"... そして、 ``Book.objects.select_related('author__hometown').get(id=4)`` を"
"呼び出すと、関連する ``Person`` *と* ``City`` がキャッシュされます:"

msgid ""
"You can refer to any :class:`~django.db.models.ForeignKey` or :class:"
"`~django.db.models.OneToOneField` relation in the list of fields passed to "
"``select_related()``."
msgstr ""
"``select_related()`` にフィールドのリストを渡すことで、任意の :class:"
"`~django.db.models.ForeignKey` または :class:`~django.db.models."
"OneToOneField` リレーションを参照できます。"

msgid ""
"You can also refer to the reverse direction of a :class:`~django.db.models."
"OneToOneField` in the list of fields passed to ``select_related`` — that is, "
"you can traverse a :class:`~django.db.models.OneToOneField` back to the "
"object on which the field is defined. Instead of specifying the field name, "
"use the :attr:`related_name <django.db.models.ForeignKey.related_name>` for "
"the field on the related object."
msgstr ""
"``select_related`` に渡すフィールドのリストには、 :class:`~django.db.models."
"OneToOneField` の逆方向の参照を含めることもできます。つまり、 :class:"
"`~django.db.models.OneToOneField` を辿って、フィールドが定義されているオブ"
"ジェクトに戻ることができます。このとき、フィールド名を指定する代わりに、 :"
"attr:`related_name <django.db.models.ForeignKey.related_name>` を関連オブジェ"
"クトのフィールドに使用してください。"

msgid ""
"There may be some situations where you wish to call ``select_related()`` "
"with a lot of related objects, or where you don't know all of the relations. "
"In these cases it is possible to call ``select_related()`` with no "
"arguments. This will follow all non-null foreign keys it can find - nullable "
"foreign keys must be specified. This is not recommended in most cases as it "
"is likely to make the underlying query more complex, and return more data, "
"than is actually needed."
msgstr ""
"多くの関連オブジェクトを含む ``select_related()`` を呼び出したい場合や、すべ"
"ての関連オブジェク トを把握していないケースもあるでしょう。このようなときは、"
"引数なしで ``select_related()`` を呼び出すこともできます。この場合、NULLでな"
"い外部キーはすべて追いかけることになります。ただし、NULL可能な外部キーは明示"
"的に指定する必要があります。クエリが複雑になり、実際に必要とされるよりも多く"
"のデータを返す可能性があるため、ほとんどの場合、この方法は推奨されません。"

msgid ""
"If you need to clear the list of related fields added by past calls of "
"``select_related`` on a ``QuerySet``, you can pass ``None`` as a parameter:"
msgstr ""
"過去に ``QuerySet`` で ``select_related`` を呼び出したときに追加した関連"
"フィールドのリストを消去したい場合は、パラメータとして ``None`` を渡すことが"
"できます:"

msgid ""
"Chaining ``select_related`` calls works in a similar way to other methods - "
"that is that ``select_related('foo', 'bar')`` is equivalent to "
"``select_related('foo').select_related('bar')``."
msgstr ""
"``select_related`` の呼び出しを連鎖させると、他のメソッドと同様に機能します。"
"すなわち、 ``select_related('foo', 'bar')`` は ``select_related('foo')."
"select_related('bar')`` と等価です。"

msgid "``prefetch_related()``"
msgstr "``prefetch_related()``"

msgid ""
"Returns a ``QuerySet`` that will automatically retrieve, in a single batch, "
"related objects for each of the specified lookups."
msgstr ""
"指定のルックアップに対してそれぞれのリレーション先のオブジェクトを一括で自動"
"的に取得する ``QuerySet`` を返します。"

msgid ""
"This has a similar purpose to ``select_related``, in that both are designed "
"to stop the deluge of database queries that is caused by accessing related "
"objects, but the strategy is quite different."
msgstr ""
"目的は ``select_related`` と似ていて、関連オブジェクトにアクセスすることで多"
"量のデータベースクエリが発生してしまうのを防ぐために作られていますが、その手"
"段が異なります。"

msgid ""
"``select_related`` works by creating an SQL join and including the fields of "
"the related object in the ``SELECT`` statement. For this reason, "
"``select_related`` gets the related objects in the same database query. "
"However, to avoid the much larger result set that would result from joining "
"across a 'many' relationship, ``select_related`` is limited to single-valued "
"relationships - foreign key and one-to-one."
msgstr ""
"``select_related`` はSQLで結合操作を行い、関連オブジェクトのフィールドを "
"``SELECT`` 文に含めることで動作します。そのため、 ``select_related`` は関連オ"
"ブジェクトを同一のデータベースクエリで取得します。ただし、 '大量の' のリレー"
"ションを結合することで、膨大な結果になってしまうのを避けるため、 "
"``select_related`` を適用できるのは単一値のリレーション、つまり外部キーと一対"
"一の関係に制限されています。"

msgid ""
"``prefetch_related``, on the other hand, does a separate lookup for each "
"relationship, and does the 'joining' in Python. This allows it to prefetch "
"many-to-many, many-to-one, and :class:`~django.contrib.contenttypes.fields."
"GenericRelation` objects which cannot be done using ``select_related``, in "
"addition to the foreign key and one-to-one relationships that are supported "
"by ``select_related``. It also supports prefetching of :class:`~django."
"contrib.contenttypes.fields.GenericForeignKey`, however, the queryset for "
"each ``ContentType`` must be provided in the ``querysets`` parameter of :"
"class:`~django.contrib.contenttypes.prefetch.GenericPrefetch`."
msgstr ""
"一方、 ``prefetch_related`` はリレーションごとに個別のルックアップを行い、"
"Pythonで「結合」を行います。これにより、 ``select_related`` でサポートされて"
"いる外部キーと一対一のリレーションに加えて、 ``select_related`` ではできない"
"多対多、多対一、および :class:`~django.contrib.contenttypes.fields."
"GenericRelation` オブジェクトの事前読み込みが可能になります。 :class:"
"`~django.contrib.contenttypes.fields.GenericForeignKey` の事前読み込みもサ"
"ポートしていますが、各 ``ContentType`` のクエリセットを :class:`~django."
"contrib.contenttypes.prefetch.GenericPrefetch` の ``querysets`` パラメータで"
"指定する必要があります。"

msgid ""
"Support for prefetching :class:`~django.contrib.contenttypes.fields."
"GenericForeignKey` with non-homogeneous set of results was added."
msgstr ""
"均質でない結果セットを持つ :class:`~django.contrib.contenttypes.fields."
"GenericForeignKey` のプリフェッチをサポートしました。"

msgid "For example, suppose you have these models::"
msgstr "例えば、以下のようなモデルがあると考えます::"

msgid "and run:"
msgstr "そしてこれを実行します:"

msgid ""
"The problem with this is that every time ``Pizza.__str__()`` asks for ``self."
"toppings.all()`` it has to query the database, so ``Pizza.objects.all()`` "
"will run a query on the Toppings table for **every** item in the Pizza "
"``QuerySet``."
msgstr ""
"問題は、 ``Pizza.__str__()`` が ``self.toppings.all()`` を要求するたびにデー"
"タベースにクエリを送信する必要があることです。これにより、 ``Pizza.objects."
"all()`` では Pizza ``QuerySet`` の **すべての** アイテムに対して Toppings "
"テーブルでのクエリを実行することになります。"

msgid "We can reduce to just two queries using ``prefetch_related``:"
msgstr "``prefetch_related`` を使えば、クエリをたった2つに削減できます。"

msgid ""
"This implies a ``self.toppings.all()`` for each ``Pizza``; now each time "
"``self.toppings.all()`` is called, instead of having to go to the database "
"for the items, it will find them in a prefetched ``QuerySet`` cache that was "
"populated in a single query."
msgstr ""
"上記は、それぞれの ``Pizza`` に対する ``self.toppings.all()`` を意味していま"
"す。これにより、 ``self.toppings.all()`` が呼び出されるたびにデータベースにア"
"イテムを取得しに行くのではなく、単一のクエリで事前に読み込まれた "
"``QuerySet`` のキャッシュを利用するようになります。"

msgid ""
"That is, all the relevant toppings will have been fetched in a single query, "
"and used to make ``QuerySets`` that have a pre-filled cache of the relevant "
"results; these ``QuerySets`` are then used in the ``self.toppings.all()`` "
"calls."
msgstr ""
"すなわち、 対象の Pizza に関連するすべてのトッピングが単一のクエリで取得さ"
"れ、関連する結果が事前にキャッシュされた ``QuerySets`` を生成するのに使用され"
"ます。この ``QuerySets`` は ``self.toppings.all()`` の呼び出しで使用されるこ"
"とになります。"

msgid ""
"The additional queries in ``prefetch_related()`` are executed after the "
"``QuerySet`` has begun to be evaluated and the primary query has been "
"executed."
msgstr ""
"``prefetch_related()`` の追加クエリは、 ``QuerySet`` の評価が開始され、主クエ"
"リが実行された後に実行されます。"

msgid ""
"Note that there is no mechanism to prevent another database query from "
"altering the items in between the execution of the primary query and the "
"additional queries, which could produce an inconsistent result. For example, "
"if a ``Pizza`` is deleted after the primary query has executed, its toppings "
"will not be returned in the additional query, and it will seem like the "
"pizza has no toppings:"
msgstr ""
"主クエリが実行されてから追加クエリが実行されるまでの間に、別のデータベースク"
"エリによってアイテムが変更されるのを防ぐ仕組みがないため、矛盾した結果が出力"
"される可能性に留意してください。例えば、主クエリが実行された後に ``Pizza`` が"
"削除された場合、追加クエリではトッピングが返されず、ピザにトッピングがないよ"
"うに見えます。"

msgid ""
"If you have an iterable of model instances, you can prefetch related "
"attributes on those instances using the :func:`~django.db.models."
"prefetch_related_objects` function."
msgstr ""
"モデルインスタンスのイテラブルを保持する場合は、 :func:`~django.db.models."
"prefetch_related_objects` 関数を使ってこれらインスタンスに関連する属性を事前"
"読み込みしておくことができます。"

msgid ""
"Note that the result cache of the primary ``QuerySet`` and all specified "
"related objects will then be fully loaded into memory. This changes the "
"typical behavior of ``QuerySets``, which normally try to avoid loading all "
"objects into memory before they are needed, even after a query has been "
"executed in the database."
msgstr ""
"主 ``QuerySet`` の結果のキャッシュと指定されたすべての関連オブジェクトは、メ"
"モリ上に完全にロードされますが、これは一般的な ``QuerySet`` の挙動と異なる点"
"に注意してください。通常、クエリがデータベースで実行された後であっても、 オブ"
"ジェクトは必要になるまでメモリに呼び出されません。"

msgid ""
"Remember that, as always with ``QuerySets``, any subsequent chained methods "
"which imply a different database query will ignore previously cached "
"results, and retrieve data using a fresh database query. So, if you write "
"the following:"
msgstr ""
"いつもの ``QuerySets`` がそうであるように、異なるデータベースクエリを意味する"
"チェーンメソッドを連続させると、過去にキャッシュした結果は無視され、新たな"
"データベースクエリを発行してデータが取得されます。つまり、以下のように実装す"
"ると:"

msgid ""
"...then the fact that ``pizza.toppings.all()`` has been prefetched will not "
"help you. The ``prefetch_related('toppings')`` implied ``pizza.toppings."
"all()``, but ``pizza.toppings.filter()`` is a new and different query. The "
"prefetched cache can't help here; in fact it hurts performance, since you "
"have done a database query that you haven't used. So use this feature with "
"caution!"
msgstr ""
"... ``pizza.toppings.all()`` で事前読み込みしたことが役に立ちません。 "
"``prefetch_related('toppings')`` は ``pizza.toppings.all()`` を意味します"
"が、 ``pizza.toppings.filter()`` は別の新しいクエリを発行しており、事前に読み"
"込まれたキャッシュは利用されません。それどころか、不要なデータベースクエリを"
"実行したことで、パフォーマンスが低下します。ですから、この機能は注意深く利用"
"してください！"

msgid ""
"Also, if you call the database-altering methods :meth:`~django.db.models."
"fields.related.RelatedManager.add`, :meth:`~django.db.models.fields.related."
"RelatedManager.remove`, :meth:`~django.db.models.fields.related."
"RelatedManager.clear` or :meth:`~django.db.models.fields.related."
"RelatedManager.set`, on :class:`related managers<django.db.models.fields."
"related.RelatedManager>`, any prefetched cache for the relation will be "
"cleared."
msgstr ""
"また、 :class:`関係マネージャ <django.db.models.fields.related."
"RelatedManager>` で :meth:`~django.db.models.fields.related.RelatedManager."
"add` 、 :meth:`~django.db.models.fields.related.RelatedManager.remove` 、 :"
"meth:`~django.db.models.fields.related.RelatedManager.clear` 、 :meth:"
"`~django.db.models.fields.related.RelatedManager.set` といったデータベース互"
"換のメソッドを呼び出した場合、リレーション用の事前呼び出しキャッシュはすべて"
"クリアされます。"

msgid ""
"You can also use the normal join syntax to do related fields of related "
"fields. Suppose we have an additional model to the example above::"
msgstr ""
"通常の結合構文を使って、リレーション先のフィールドのさらにリレーション先の"
"フィールドも参照できます。上記の例に以下のモデルを追加したとして考えましょう:"

msgid "The following are all legal:"
msgstr "以下は適切です:"

msgid ""
"This will prefetch all pizzas belonging to restaurants, and all toppings "
"belonging to those pizzas. This will result in a total of 3 database queries "
"- one for the restaurants, one for the pizzas, and one for the toppings."
msgstr ""
"これはレストランに所属するすべてのピザと、これらのピザに所属するすべてのトッ"
"ピングを事前読み込みします。これにより、3 つのデータベースクエリが発行されま"
"す - 一つはレストランのため、一つはピザのため、そしてもう一つはトッピングのた"
"めです。"

msgid ""
"This will fetch the best pizza and all the toppings for the best pizza for "
"each restaurant. This will be done in 3 database queries - one for the "
"restaurants, one for the 'best pizzas', and one for the toppings."
msgstr ""
"これは、各レストランのベストピザとベストピザのトッピングすべてを取得します。"
"これは3つのデータベースクエリで行われます。1つはレストラン、1つは \"ベストピ"
"ザ\" 、1つはトッピングです。"

msgid ""
"The ``best_pizza`` relationship could also be fetched using "
"``select_related`` to reduce the query count to 2:"
msgstr ""
"``best_pizza`` のリレーションシップも ``select_related`` を使って取得すること"
"で、クエリを2回に減らすことができます:"

msgid ""
"Since the prefetch is executed after the main query (which includes the "
"joins needed by ``select_related``), it is able to detect that the "
"``best_pizza`` objects have already been fetched, and it will skip fetching "
"them again."
msgstr ""
"事前読み込みはメインクエリ ( ``select_related`` が必要とする結合を含む) の後"
"に実行されるので、 ``best_pizza`` がすでに読み込まれたことを検出でき、再読み"
"込みをスキップできます。"

msgid ""
"Chaining ``prefetch_related`` calls will accumulate the lookups that are "
"prefetched. To clear any ``prefetch_related`` behavior, pass ``None`` as a "
"parameter:"
msgstr ""
"``prefetch_related`` を連結して呼び出すと、事前読み込みのルックアップを蓄積し"
"ます。すべての ``prefetch_related`` 動作をクリアするには ``None`` パラメータ"
"を渡してください。"

msgid ""
"One difference to note when using ``prefetch_related`` is that objects "
"created by a query can be shared between the different objects that they are "
"related to i.e. a single Python model instance can appear at more than one "
"point in the tree of objects that are returned. This will normally happen "
"with foreign key relationships. Typically this behavior will not be a "
"problem, and will in fact save both memory and CPU time."
msgstr ""
"``prefetch_related`` を使う際の違いの一つは、一つのクエリで生成されたオブジェ"
"クトは関連した異なるオブジェクト間で共有できることです。例えば、単一の "
"Python モデルインスタンスは、返されたオブジェクトのツリー内で複数現れることが"
"できます。これは通常、外部キーで発生します。通常、この動作は問題とはならず、"
"むしろメモリと CPU の両方を節約します。"

msgid ""
"While ``prefetch_related`` supports prefetching ``GenericForeignKey`` "
"relationships, the number of queries will depend on the data. Since a "
"``GenericForeignKey`` can reference data in multiple tables, one query per "
"table referenced is needed, rather than one query for all the items. There "
"could be additional queries on the ``ContentType`` table if the relevant "
"rows have not already been fetched."
msgstr ""
"``prefetch_related`` は ``GenericForeignKey`` リレーションシップの事前読み込"
"みをサポートしますが、クエリ数はデータに依存します。``GenericForeignKey`` は"
"複数のテーブルでデータを参照できるので、すべてのアイテムに対する単一のクエリ"
"ではなく各テーブルを参照するクエリが必要となります。関連する行がまだ取得され"
"ていない場合、``ContentType`` テーブルで追加的なクエリが必要となります。"

msgid ""
"``prefetch_related`` in most cases will be implemented using an SQL query "
"that uses the 'IN' operator. This means that for a large ``QuerySet`` a "
"large 'IN' clause could be generated, which, depending on the database, "
"might have performance problems of its own when it comes to parsing or "
"executing the SQL query. Always profile for your use case!"
msgstr ""
"ほとんどの場合、``prefetch_related`` は 'IN' 演算子を使った SQL クエリで実装"
"されます。つまり、大きな ``QuerySet`` の場合は大きな 'IN' 句が生成される可能"
"性があり、データベースによっては SQL クエリのパースや実行時にパフォーマンス上"
"の問題が発生する可能性があります。使用するケースに応じて、常にプロファイルを"
"分析してください！"

msgid ""
"If you use ``iterator()`` to run the query, ``prefetch_related()`` calls "
"will only be observed if a value for ``chunk_size`` is provided."
msgstr ""
"クエリの実行に ``iterator()`` を使用した場合、 ``prefetch_related()`` は "
"``chunk_size`` の値が指定されたときのみ呼び出されます。"

msgid ""
"You can use the :class:`~django.db.models.Prefetch` object to further "
"control the prefetch operation."
msgstr ""
":class:`~django.db.models.Prefetch` オブジェクトを使って、事前呼び出しの操作"
"をより細かくコントロールできます。"

msgid ""
"In its simplest form ``Prefetch`` is equivalent to the traditional string "
"based lookups:"
msgstr ""
"``Prefetch`` の最もシンプルな形では、従来の文字列ベースのルックアップと同等に"
"なります:"

msgid ""
"You can provide a custom queryset with the optional ``queryset`` argument. "
"This can be used to change the default ordering of the queryset:"
msgstr ""
"オプションの ``queryset`` 引数を使って、独自のクエリセットを指定できます。こ"
"れは、クエリセットのデフォルトの並び順を変更するために使用できます:"

msgid ""
"Or to call :meth:`~django.db.models.query.QuerySet.select_related()` when "
"applicable to reduce the number of queries even further:"
msgstr ""
"もしくは、さらにクエリ数を減らすために、可能なときは :meth:`~django.db."
"models.query.QuerySet.select_related()` を呼び出します:"

msgid ""
"You can also assign the prefetched result to a custom attribute with the "
"optional ``to_attr`` argument. The result will be stored directly in a list."
msgstr ""
"また、オプションの ``to_attr`` で、事前読み込みの結果を独自の属性に割り当てる"
"こともできます。結果はリストに直接格納されます。"

msgid ""
"This allows prefetching the same relation multiple times with a different "
"``QuerySet``; for instance:"
msgstr ""
"これにより、異なる ``QuerySet`` で同じリレーションを複数回事前読み込みできる"
"ようになります; 例えば:"

msgid ""
"Lookups created with custom ``to_attr`` can still be traversed as usual by "
"other lookups:"
msgstr ""
"独自の ``to_attr`` で生成したルックアップはいつも通り他のルックアップでも使用"
"可能です:"

msgid ""
"Using ``to_attr`` is recommended when filtering down the prefetch result as "
"it is less ambiguous than storing a filtered result in the related manager's "
"cache:"
msgstr ""
"``to_attr`` の使用は、関係するマネージャのキャッシュにフィルタした結果を格納"
"するよりも明確になるよう、事前読み込みした結果をフィルタする際に推奨されます:"

msgid ""
"Custom prefetching also works with single related relations like forward "
"``ForeignKey`` or ``OneToOneField``. Generally you'll want to use :meth:"
"`select_related()` for these relations, but there are a number of cases "
"where prefetching with a custom ``QuerySet`` is useful:"
msgstr ""
"独自の事前読み込みは、 ``ForeignKey`` や ``OneToOneField`` のような単一の関連"
"リレーションでも機能します。一般的にはこういう場合 :meth:`select_related()` "
"を使いたくなるでしょうが、 ``QuerySet`` が役立つ場面も多くあります:"

msgid ""
"You want to use a ``QuerySet`` that performs further prefetching on related "
"models."
msgstr "関連モデルに対してさらに事前読み込みを行う ``QuerySet`` を使用したい。"

msgid "You want to prefetch only a subset of the related objects."
msgstr "関連オブジェクトのサブセットのみを事前読み込みしたい。"

msgid ""
"You want to use performance optimization techniques like :meth:`deferred "
"fields <defer()>`:"
msgstr ""
":meth:`遅延読み込みフィールド <defer()>` のようなパフォーマンス最適化のテク"
"ニックを使用したい。"

msgid ""
"When using multiple databases, ``Prefetch`` will respect your choice of "
"database. If the inner query does not specify a database, it will use the "
"database selected by the outer query. All of the following are valid:"
msgstr ""
"複数のデータベースを使っている場合、``Prefetch`` はデータベースの選択を尊重し"
"ます。内側のクエリがデータベースを指定していない場合、外側のクエリで指定され"
"たデータベースを使用します。以下はすべて正しいコードです:"

msgid "The ordering of lookups matters."
msgstr "ルックアップの順番は重要です。"

msgid "Take the following examples:"
msgstr "以下の例を見てみましょう:"

msgid ""
"This works even though it's unordered because ``'pizzas__toppings'`` already "
"contains all the needed information, therefore the second argument "
"``'pizzas'`` is actually redundant."
msgstr ""
"``'pizzas__toppings'`` がすでに必要な情報を含んでいるので、並び替えしていない"
"にもかかわらずこれは機能します。したがって 2 番目の引数 ``'pizzas'`` は実際に"
"は不要です。"

msgid ""
"This will raise a ``ValueError`` because of the attempt to redefine the "
"queryset of a previously seen lookup. Note that an implicit queryset was "
"created to traverse ``'pizzas'`` as part of the ``'pizzas__toppings'`` "
"lookup."
msgstr ""
"事前に見たルックアップクエリを再定義しようとしているため、これは "
"``ValueError`` を発生させます。 ``'pizzas'`` を横切るために "
"``'pizzas__toppings'`` の一部として暗黙的なクエリセットが生成される点に留意し"
"てください。"

msgid ""
"This will trigger an ``AttributeError`` because ``'pizza_list'`` doesn't "
"exist yet when ``'pizza_list__toppings'`` is being processed."
msgstr ""
"``'pizza_list__toppings'`` が実行される際にまだ ``'pizza_list'`` が存在してい"
"ないため、これは ``AttributeError`` を引き起こします。"

msgid ""
"This consideration is not limited to the use of ``Prefetch`` objects. Some "
"advanced techniques may require that the lookups be performed in a specific "
"order to avoid creating extra queries; therefore it's recommended to always "
"carefully order ``prefetch_related`` arguments."
msgstr ""
"この注意事項は、``Prefetch`` の使用に限りません。高度なテクニックのいくつかで"
"は、余計なクエリの生成を防止するため、特定の順序でルックアップを実施する必要"
"があるかもしれません。したがって、``prefetch_related`` の引数には常に注意を払"
"うことを推奨します。"

msgid "``extra()``"
msgstr "``extra()``"

msgid ""
"Sometimes, the Django query syntax by itself can't easily express a complex "
"``WHERE`` clause. For these edge cases, Django provides the ``extra()`` "
"``QuerySet`` modifier — a hook for injecting specific clauses into the SQL "
"generated by a ``QuerySet``."
msgstr ""
"Django のクエリ構文だけでは、複雑な ``WHERE`` 節を簡単に表現できないことがあ"
"ります。このようなエッジケースのために、 Django は ``extra()`` ``QuerySet`` "
"修飾子、つまり ``QuerySet`` が生成する SQL に特定の句を注入するフックを提供し"
"ます。"

msgid "Use this method as a last resort"
msgstr "このやり方は最後の手段として使ってください。"

msgid ""
"This is an old API that we aim to deprecate at some point in the future. Use "
"it only if you cannot express your query using other queryset methods. If "
"you do need to use it, please `file a ticket <https://code.djangoproject.com/"
"newticket>`_ using the `QuerySet.extra keyword <https://code.djangoproject."
"com/query?status=assigned&status=new&keywords=~QuerySet.extra>`_ with your "
"use case (please check the list of existing tickets first) so that we can "
"enhance the QuerySet API to allow removing ``extra()``. We are no longer "
"improving or fixing bugs for this method."
msgstr ""
"これは古い API で、将来的には非推奨とする予定です。他の QuerySet メソッドでク"
"エリを表現できない場合にのみ使用してください。もしあなたがこのメソッドを必要"
"とするのであれば、私たちが QuerySet APIを拡張して ``extra()`` を削除できるよ"
"うに、 `QuerySet.extra キーワード <https://code.djangoproject.com/query?"
"status=assigned&status=new&keywords=~QuerySet.extra>`_ とあなたの使用例を添え"
"て `チケットを提出 <https://code.djangoproject.com/newticket>`_ してください "
"(ただしその前に既存のチケットのリストを確認してください)。このメソッドの改善"
"やバグの修正はもう行っていません。"

msgid "For example, this use of ``extra()``:"
msgstr "例えば、 ``extra()`` を使った下記のコードは:"

msgid "is equivalent to:"
msgstr "下記と等価です:"

msgid ""
"The main benefit of using :class:`~django.db.models.expressions.RawSQL` is "
"that you can set ``output_field`` if needed. The main downside is that if "
"you refer to some table alias of the queryset in the raw SQL, then it is "
"possible that Django might change that alias (for example, when the queryset "
"is used as a subquery in yet another query)."
msgstr ""
":class:`~django.db.models.expressions.RawSQL` を使う主な利点は、必要に応じて "
"``output_field`` を指定できることです。主な欠点は、生の SQL でクエリセットの"
"テーブルエイリアスを参照すると、Django がそのエイリアスを変更する可能性がある"
"ことです (たとえば、クエリセットが別のクエリのサブクエリとして使われる場合な"
"ど)。"

msgid ""
"You should be very careful whenever you use ``extra()``. Every time you use "
"it, you should escape any parameters that the user can control by using "
"``params`` in order to protect against SQL injection attacks."
msgstr ""
"``extra()`` を使うときは常に細心の注意を払ってください。SQL インジェクション"
"攻撃から守るために、使うときは常に ``params`` を使用して、ユーザが制御できる"
"パラメータをエスケープする必要があります。"

msgid ""
"You also must not quote placeholders in the SQL string. This example is "
"vulnerable to SQL injection because of the quotes around ``%s``:"
msgstr ""
"また、SQL文字列のプレースホルダを引用符で囲んではいけません。この例では "
"``%s`` を引用符で囲んでいるため、SQLインジェクションに対して脆弱です: "

msgid ""
"By definition, these extra lookups may not be portable to different database "
"engines (because you're explicitly writing SQL code) and violate the DRY "
"principle, so you should avoid them if possible."
msgstr ""
"定義上、これらの extra ルックアップは異なるデータベースエンジンに移植できない"
"可能性があり（明示的にSQLコードを記述しているため）、DRY原則に違反するため、"
"可能であれば避けるべきです。"

msgid ""
"Specify one or more of ``params``, ``select``, ``where`` or ``tables``. None "
"of the arguments is required, but you should use at least one of them."
msgstr ""
"``params``、``select``、``where``、``tables`` のうち、少なくとも1つを指定しま"
"す。どの引数も必須ではありませんが、少なくとも1つは指定する必要があります。"

msgid "``select``"
msgstr "``select``"

msgid ""
"The ``select`` argument lets you put extra fields in the ``SELECT`` clause.  "
"It should be a dictionary mapping attribute names to SQL clauses to use to "
"calculate that attribute."
msgstr ""
"``select`` 引数を使用すると、``SELECT`` 句に追加のフィールドを配置できます。"
"属性名を SQL 句にマッピングした辞書を使用して、その属性を計算するために使用し"
"ます。"

msgid ""
"As a result, each ``Entry`` object will have an extra attribute, "
"``is_recent``, a boolean representing whether the entry's ``pub_date`` is "
"greater than Jan. 1, 2006."
msgstr ""
"その結果、各 ``Entry`` オブジェクトには、追加の属性である ``is_recent`` が付"
"与されます。これは、エントリーの ``pub_date`` が2006年1月1日よりも後の日付で"
"あるかどうかを表す真偽値です。"

msgid ""
"Django inserts the given SQL snippet directly into the ``SELECT`` statement, "
"so the resulting SQL of the above example would be something like:"
msgstr ""
"Django は指定された SQL スニペットを ``SELECT`` 文に直接挿入するので、上の例"
"の SQL は次のようになります:"

msgid ""
"The next example is more advanced; it does a subquery to give each resulting "
"``Blog`` object an ``entry_count`` attribute, an integer count of associated "
"``Entry`` objects::"
msgstr ""
"次の例はもっと高度です。サブクエリを使って、各結果の ``Blog`` オブジェクト"
"に、関連する ``Entry`` オブジェクトの整数カウントである ``entry_count`` 属性"
"を付与します。"

msgid ""
"In this particular case, we're exploiting the fact that the query will "
"already contain the ``blog_blog`` table in its ``FROM`` clause."
msgstr ""
"この特別なケースでは、クエリの ``FROM`` 句に既に ``blog_blog`` テーブルが含ま"
"れていることを利用している。"

msgid "The resulting SQL of the above example would be:"
msgstr "上記の例の結果として得られる SQL は次のとおりです:"

msgid ""
"Note that the parentheses required by most database engines around "
"subqueries are not required in Django's ``select`` clauses. Also note that "
"some database backends, such as some MySQL versions, don't support "
"subqueries."
msgstr ""
"ほとんどのデータベースエンジンで、サブクエリを囲む必要のある括弧は、Django "
"の \"select\" 句では不要です。また、一部のデータベースバックエンド（一部の"
"MySQLバージョンなど）はサブクエリをサポートしていないことに注意してください。"

msgid ""
"In some rare cases, you might wish to pass parameters to the SQL fragments "
"in ``extra(select=...)``. For this purpose, use the ``select_params`` "
"parameter."
msgstr ""
"まれに、``extra(select=...)`` でSQLフラグメントにパラメータを渡したい場合があ"
"ります。その場合は、``select_params`` パラメータを使用してください。"

msgid "This will work, for example::"
msgstr "これは、次のように動作します:"

msgid ""
"If you need to use a literal ``%s`` inside your select string, use the "
"sequence ``%%s``."
msgstr ""
"select 文内で文字列 ``%s`` をそのまま使いたい場合は、 ``%%s`` というシーケン"
"スを使用してください。"

msgid "``where`` / ``tables``"
msgstr "``where`` / ``tables``"

msgid ""
"You can define explicit SQL ``WHERE`` clauses — perhaps to perform non-"
"explicit joins — by using ``where``. You can manually add tables to the SQL "
"``FROM`` clause by using ``tables``."
msgstr ""
"SQLの明示的な ``WHERE`` 句を定義できます。たとえば、明示的でない結合を実行す"
"るために ``where`` を使用できます。また、SQLの ``FROM`` 句に手動でテーブルを"
"追加できます。これには ``tables`` を使用します。"

msgid ""
"``where`` and ``tables`` both take a list of strings. All ``where`` "
"parameters are \"AND\"ed to any other search criteria."
msgstr ""
"``where`` と ``tables`` は、どちらも文字列のリストを取ります。全ての "
"``where`` パラメーターは、他の検索条件と \"AND\" 演算されます。"

msgid "...translates (roughly) into the following SQL:"
msgstr "...これは大まかに次の SQL に翻訳されます:"

msgid ""
"Be careful when using the ``tables`` parameter if you're specifying tables "
"that are already used in the query. When you add extra tables via the "
"``tables`` parameter, Django assumes you want that table included an extra "
"time, if it is already included. That creates a problem, since the table "
"name will then be given an alias. If a table appears multiple times in an "
"SQL statement, the second and subsequent occurrences must use aliases so the "
"database can tell them apart. If you're referring to the extra table you "
"added in the extra ``where`` parameter this is going to cause errors."
msgstr ""
"すでにクエリで使われているテーブルを指定する場合、 ``tables`` パラメータを使"
"うときには注意してください。テーブル ``tables`` パラメータを使ってテーブルを"
"追加すると、 Django はそのテーブルが既に含まれている場合、そのテーブルをもう"
"一回追加したいと仮定します。この場合、テーブル名にエイリアスが付けられるの"
"で、問題が生じます。テーブルが SQL 文の中で複数回出現する場合、データベースが"
"区別できるように、2 回目以降の出現にはエイリアスを使う必要があります。追加の "
"``where`` パラメータで追加したテーブルを参照している場合、これはエラーの原因"
"になります。"

msgid ""
"Normally you'll only be adding extra tables that don't already appear in the "
"query. However, if the case outlined above does occur, there are a few "
"solutions. First, see if you can get by without including the extra table "
"and use the one already in the query. If that isn't possible, put your "
"``extra()`` call at the front of the queryset construction so that your "
"table is the first use of that table. Finally, if all else fails, look at "
"the query produced and rewrite your ``where`` addition to use the alias "
"given to your extra table. The alias will be the same each time you "
"construct the queryset in the same way, so you can rely upon the alias name "
"to not change."
msgstr ""
"通常は、クエリに既に表示されていない追加のテーブルのみを追加します。しかし、"
"上記の場合が発生した場合は、いくつかの解決策があります。まず、追加のテーブル"
"を含めずに、すでにクエリにあるテーブルを使用できるかどうかを確認してくださ"
"い。それが不可能な場合は、``extra()`` メソッドをクエリセットの構築の最初に配"
"置して、そのテーブルが最初に使用されるようにします。最後に、すべてが失敗した"
"場合は、生成されたクエリを確認し、 ``where`` 句への追加をエイリアスの利用に書"
"き直します。エイリアスは、同じ方法でクエリセットを構築するたびに同じであるた"
"め、エイリアス名は変わらないことを信頼できます。"

msgid "``order_by``"
msgstr "``order_by``"

msgid ""
"If you need to order the resulting queryset using some of the new fields or "
"tables you have included via ``extra()`` use the ``order_by`` parameter to "
"``extra()`` and pass in a sequence of strings. These strings should either "
"be model fields (as in the normal :meth:`order_by()` method on querysets), "
"of the form ``table_name.column_name`` or an alias for a column that you "
"specified in the ``select`` parameter to ``extra()``."
msgstr ""
"``extra()`` で追加した新しいフィールドやテーブルを使用してクエリセットを並べ"
"替える必要がある場合は、``extra()`` の ``order_by`` パラメータを使用し、文字"
"列のシーケンスを渡します。 これらの文字列は、通常の querysets の :meth:"
"`order_by()` メソッドのようなモデルフィールド、``table_name.column_name`` の"
"形式、または ``extra()`` の ``select`` パラメータで指定した列のエイリアスであ"
"る必要があります。"

msgid ""
"This would sort all the items for which ``is_recent`` is true to the front "
"of the result set (``True`` sorts before ``False`` in a descending ordering)."
msgstr ""
"これにより、``is_recent`` が true であるすべてのアイテムが結果セットの先頭に"
"並べ替えられます (降順では ``True`` が ``False`` よりも先に並びます)。"

msgid ""
"This shows, by the way, that you can make multiple calls to ``extra()`` and "
"it will behave as you expect (adding new constraints each time)."
msgstr ""
"ちなみに、これは ``extra()`` を複数回呼び出しても期待通りに動作する（つまり、"
"毎回新しい制約を追加する）ことを示しています。"

msgid "``params``"
msgstr "``params``"

msgid ""
"The ``where`` parameter described above may use standard Python database "
"string placeholders — ``'%s'`` to indicate parameters the database engine "
"should automatically quote. The ``params`` argument is a list of any extra "
"parameters to be substituted."
msgstr ""
"上記の ``where`` パラメータは、標準のPythonデータベース文字列プレースホル"
"ダー、 ``'%s'`` を使用して、データベースエンジンが自動的に引用符で囲むべきパ"
"ラメータを示すことができます。 ``params`` 引数は、代入される追加のパラメータ"
"のリストです。"

msgid ""
"Always use ``params`` instead of embedding values directly into ``where`` "
"because ``params`` will ensure values are quoted correctly according to your "
"particular backend. For example, quotes will be escaped correctly."
msgstr ""
"常に ``params`` を使用し、値を直接 ``where`` に埋め込まないでください。なぜな"
"ら ``params`` を使用することで、値が特定のバックエンドに応じて正しく引用符で"
"囲まれることが保証されるからです。例えば、引用符は正しくエスケープされます。"

msgid "Bad::"
msgstr "悪い例:"

msgid "Good::"
msgstr "良い例:"

msgid ""
"If you are performing queries on MySQL, note that MySQL's silent type "
"coercion may cause unexpected results when mixing types. If you query on a "
"string type column, but with an integer value, MySQL will coerce the types "
"of all values in the table to an integer before performing the comparison. "
"For example, if your table contains the values ``'abc'``, ``'def'`` and you "
"query for ``WHERE mycolumn=0``, both rows will match. To prevent this, "
"perform the correct typecasting before using the value in a query."
msgstr ""
"もしあなたが MySQL でクエリを処理する場合は、複数の型を扱う際に MySQL の暗黙"
"的な型変換が予期しない結果をもたらす場合がある事に注意してください。もし文字"
"列型で定義したカラムに対し、数値型の値で問い合わせた場合、MySQL は比較処理を"
"行う前にテーブル上の全ての値の型を数値型に変換します。例えば ``'abc'``、 "
"``'def'`` といった値が含まれているテーブルに対して ``WHERE mycolumn=0`` とい"
"う条件での問い合わせを行うと、両方の行がマッチします。これを防ぐため、クエリ"
"の値を利用する前に適切な型キャストを行ってください。"

msgid "``defer()``"
msgstr "``defer()``"

msgid ""
"In some complex data-modeling situations, your models might contain a lot of "
"fields, some of which could contain a lot of data (for example, text "
"fields), or require expensive processing to convert them to Python objects. "
"If you are using the results of a queryset in some situation where you don't "
"know if you need those particular fields when you initially fetch the data, "
"you can tell Django not to retrieve them from the database."
msgstr ""
"複雑なデータモデリングの場面では、モデルにはたくさんのフィールドが含まれるか"
"もしれません。その中には、大量のデータを含むフィールド (たとえばテキスト"
"フィールド) や、Python オブジェクトに変換するために高コストな処理を必要とする"
"フィールドがあるかもしれません。QuerySet の結果を、最初にデータを取得するとき"
"にはまだそのフィールドが必要かどうかわからないような状況で使う場合、まだデー"
"タベースからは読み込まないように Django に指示できます。"

msgid ""
"This is done by passing the names of the fields to not load to ``defer()``::"
msgstr ""
"読み込ませたくないフィールドの名前を ``defer()`` に渡すことで、それを実現でき"
"ます:"

msgid ""
"A queryset that has deferred fields will still return model instances. Each "
"deferred field will be retrieved from the database if you access that field "
"(one at a time, not all the deferred fields at once)."
msgstr ""
"Defer（遅延読み込み）されたフィールドを持つ QuerySet はモデルインスタンスを返"
"します。それぞれの遅延読み込みフィールドは、そのフィールドにアクセスしたとき"
"にデータベースから取得されます (すべての遅延読み込みフィールドを一度に取得す"
"るのではなく、1つずつ取得します)。"

msgid ""
"Deferred fields will not lazy-load like this from asynchronous code. "
"Instead, you will get a ``SynchronousOnlyOperation`` exception. If you are "
"writing asynchronous code, you should not try to access any fields that you "
"``defer()``."
msgstr ""
"遅延読み込みに指定されたフィールドは非同期コードからはこのように遅延ロードす"
"ることはできません。代わりに ``SynchronousOnlyOperation`` 例外が発生します。"
"もし非同期コードを書いているのであれば、``defer()`` されたフィールドにアクセ"
"スしようとしてはいけません。"

msgid ""
"You can make multiple calls to ``defer()``. Each call adds new fields to the "
"deferred set::"
msgstr ""
"``defer()`` を複数回呼び出すこともできます。それぞれの呼び出しは新しいフィー"
"ルドを遅延読み込みリストに追加します:"

msgid ""
"The order in which fields are added to the deferred set does not matter. "
"Calling ``defer()`` with a field name that has already been deferred is "
"harmless (the field will still be deferred)."
msgstr ""
"フィールドが遅延読み込みリストに追加される順番は重要ではありません。すでに遅"
"延読み込みに指定されているフィールド名で ``defer()`` を呼び出しても意味はあり"
"ません（フィールドは遅延読み込みに指定されたままです）。"

msgid ""
"You can defer loading of fields in related models (if the related models are "
"loading via :meth:`select_related()`) by using the standard double-"
"underscore notation to separate related fields::"
msgstr ""
"標準的な2重アンダースコア記法を用いてリレーション先のフィールドを区切ること"
"で、(リレーション先のモデルが :meth:`select_related()` によって読み込まれる場"
"合) リレーション先のモデルのフィールドの読み込みを遅延させることもできます:"

msgid ""
"If you want to clear the set of deferred fields, pass ``None`` as a "
"parameter to ``defer()``::"
msgstr ""
"遅延読み込みフィールドの指定を消去したい場合は、 ``defer()`` のパラメータとし"
"て ``None`` を渡します:"

msgid ""
"Some fields in a model won't be deferred, even if you ask for them. You can "
"never defer the loading of the primary key. If you are using :meth:"
"`select_related()` to retrieve related models, you shouldn't defer the "
"loading of the field that connects from the primary model to the related "
"one, doing so will result in an error."
msgstr ""
"モデル内のいくつかのフィールドは、指定しても遅延読み込みされません。主キーの"
"読み込みは決して遅延できません。リレーション先のモデルを取得するために :meth:"
"`select_related()` を使っている場合、最初のモデルからリレーション先のモデルに"
"接続するフィールドの読み込みを遅延すべきではありません。"

msgid ""
"Similarly, calling ``defer()`` (or its counterpart :meth:`only()`) including "
"an argument from an aggregation (e.g. using the result of :meth:"
"`annotate()`) doesn't make sense: doing so will raise an exception. The "
"aggregated values will always be fetched into the resulting queryset."
msgstr ""
"同様に、 ``defer()`` (またはそれに対応する :meth:`only()`) を集計関数の引数を"
"含めて (例えば :meth:`annotate()` の結果を使って) 呼び出しても意味はありませ"
"ん。集計された値は常に結果の QuerySet に取り込まれます。"

msgid ""
"The ``defer()`` method (and its cousin, :meth:`only()`, below) are only for "
"advanced use-cases. They provide an optimization for when you have analyzed "
"your queries closely and understand *exactly* what information you need and "
"have measured that the difference between returning the fields you need and "
"the full set of fields for the model will be significant."
msgstr ""
"``defer()`` メソッド（およびその同類である :meth:`only()` 、以下同様）は高度"
"なユースケースのためのものです。クエリを詳細に分析し、どのような情報が必要か"
"を *正確に* 理解し、必要なフィールドを返すこととモデルの全フィールドを返すこ"
"との差が大きいと判断した場合の最適化を提供するものです。"

msgid ""
"Even if you think you are in the advanced use-case situation, **only use** "
"``defer()`` **when you cannot, at queryset load time, determine if you will "
"need the extra fields or not**. If you are frequently loading and using a "
"particular subset of your data, the best choice you can make is to normalize "
"your models and put the non-loaded data into a separate model (and database "
"table). If the columns *must* stay in the one table for some reason, create "
"a model with ``Meta.managed = False`` (see the :attr:`managed attribute "
"<django.db.models.Options.managed>` documentation) containing just the "
"fields you normally need to load and use that where you might otherwise call "
"``defer()``. This makes your code more explicit to the reader, is slightly "
"faster and consumes a little less memory in the Python process."
msgstr ""
"高度なユースケースだと思う場合でも、 ``defer()`` を使用するのは、 QuerySetの"
"ロード時に、余分なフィールドが必要かどうかを判断 **できない場合だけ** にして"
"ください。データの特定のサブセットを頻繁に読み込んで使うなら、モデルを正規化"
"し、ロードしないデータを別のモデル（とデータベーステーブル）に置くのが最善の"
"選択です。もしカラムを一つのテーブル内に **どうしても保持する必要がある** 場"
"合は、 ``Meta.managed = False`` (:attr:`managed 属性 <django.db.models."
"Options.managed>` のドキュメントを参照) に設定されたモデルを作成し、通常必要"
"なフィールドのみを含めます。これは、通常 ``defer()`` を呼び出す場合に使用しま"
"す。これにより、コードは読み手に対してより明示的になり、わずかに速くなり、"
"Pythonプロセスで消費するメモリも少し減ります。"

msgid ""
"For example, both of these models use the same underlying database table::"
msgstr ""
"たとえば、これらのモデルはどちらも同じデータベーステーブルを使用しています:"

msgid ""
"If many fields need to be duplicated in the unmanaged model, it may be best "
"to create an abstract model with the shared fields and then have the "
"unmanaged and managed models inherit from the abstract model."
msgstr ""
"非マネージドモデルと多くのフィールドを重複させる必要がある場合、共有フィール"
"ドを持つ抽象モデルを作成し、非マネージドモデルとマネージドモデルに抽象モデル"
"を継承させるのが最善でしょう。"

msgid ""
"When calling :meth:`~django.db.models.Model.save()` for instances with "
"deferred fields, only the loaded fields will be saved. See :meth:`~django.db."
"models.Model.save()` for more details."
msgstr ""
"defer されたフィールドを持つインスタンスに対して :meth:`~django.db.models."
"Model.save()` を呼び出すと、読み込まれたフィールドだけが保存されます。詳細"
"は :meth:`~django.db.models.Model.save()` を参照してください。"

msgid "``only()``"
msgstr "``only()``"

msgid ""
"The ``only()`` method is essentially the opposite of :meth:`defer`. Only the "
"fields passed into this method and that are *not* already specified as "
"deferred are loaded immediately when the queryset is evaluated."
msgstr ""
"``only()`` メソッドは本質的に :meth:`defer` の逆です。このメソッドに渡された"
"フィールドのうち、既に遅延読み込みフィールドに指定されていないものだけが、 "
"QuerySet が評価されたときに直ちにロードされます。"

msgid ""
"If you have a model where almost all the fields need to be deferred, using "
"``only()`` to specify the complementary set of fields can result in simpler "
"code."
msgstr ""
"ほとんどのフィールドが遅延読み込みされる必要があるようなモデルの場合、"
"``only()`` を使って補完的なフィールドセットを指定すると、よりシンプルなコード"
"になります。"

msgid ""
"Suppose you have a model with fields ``name``, ``age`` and ``biography``. "
"The following two querysets are the same, in terms of deferred fields::"
msgstr ""
"``name``, ``age``, ``biography`` という3つのフィールドを持つモデルがあるとし"
"ます。次の2つのQuerySetは、どのフィールドが遅延読み込みされるかという点では同"
"じです:"

msgid ""
"Whenever you call ``only()`` it *replaces* the set of fields to load "
"immediately. The method's name is mnemonic: **only** those fields are loaded "
"immediately; the remainder are deferred. Thus, successive calls to "
"``only()`` result in only the final fields being considered::"
msgstr ""
"``only()`` を呼び出すと、読み込むフィールドの設定を即座に置き換えます。このメ"
"ソッドは名前の通り、指定したフィールド **だけ** を読み込み、残りのフィールド"
"の読み込みを先送りします。その結果、連続して ``only()`` を呼び出すと、最後に"
"指定したフィールドだけが考慮されることになります:"

msgid ""
"Since ``defer()`` acts incrementally (adding fields to the deferred list), "
"you can combine calls to ``only()`` and ``defer()`` and things will behave "
"logically::"
msgstr ""
"``defer()`` は段階的に（遅延読み込みリストにフィールドを追加しながら）動作す"
"るので、 ``only()`` と ``defer()`` の呼び出しは組み合わせることができ、ロジカ"
"ルに動作します:"

msgid ""
"All of the cautions in the note for the :meth:`defer` documentation apply to "
"``only()`` as well. Use it cautiously and only after exhausting your other "
"options."
msgstr ""
":meth:`defer` のドキュメントにある注意事項はすべて ``only()`` にも当てはまり"
"ます。 ``only()`` は慎重に、そして他のオプションを使い果たした後にだけ使用し"
"てください。"

msgid ""
"Using ``only()`` and omitting a field requested using :meth:`select_related` "
"is an error as well. On the other hand, invoking ``only()`` without any "
"arguments, will return every field (including annotations) fetched by the "
"queryset."
msgstr ""
"``only()`` を使って :meth:`select_related` で要求したフィールドを省略した場合"
"もエラーになります。 一方、引数なしで ``only()`` を呼び出すと、queryset に"
"よって取得された全てのフィールド (アノテーションを含む) が返されます。"

msgid ""
"As with ``defer()``, you cannot access the non-loaded fields from "
"asynchronous code and expect them to load. Instead, you will get a "
"``SynchronousOnlyOperation`` exception. Ensure that all fields you might "
"access are in your ``only()`` call."
msgstr ""
"``defer()`` と同様に、非同期コードからは、まだ読み込まれていないフィールドに"
"アクセスすることはできません。その場合、``SynchronousOnlyOperation`` 例外が発"
"生します。アクセスする可能性のあるすべてのフィールドが ``only()`` 呼び出し内"
"に含まれていることを確認してください。"

msgid ""
"When using :meth:`defer` after ``only()`` the fields in :meth:`defer` will "
"override ``only()`` for fields that are listed in both."
msgstr ""
"``only()`` の後に :meth:`defer` を使用すると、 :meth:`defer` のフィールドが "
"``only()`` を上書きします。"

msgid "``using()``"
msgstr "``using()``"

msgid ""
"This method is for controlling which database the ``QuerySet`` will be "
"evaluated against if you are using more than one database.  The only "
"argument this method takes is the alias of a database, as defined in :"
"setting:`DATABASES`."
msgstr ""
"このメソッドは、複数のデータベースを使用している場合に ``QuerySet`` がどの"
"データベースに対して評価されるかを制御するためのものです。 このメソッドが受け"
"取る唯一の引数は :setting:`DATABASES` で定義されているデータベースのエイリア"
"スです。"

msgid "``select_for_update()``"
msgstr "``select_for_update()``"

msgid ""
"Returns a queryset that will lock rows until the end of the transaction, "
"generating a ``SELECT ... FOR UPDATE`` SQL statement on supported databases."
msgstr ""
"トランザクションが終了するまで行をロックし、サポートされているデータベース上"
"で ``SELECT ... FOR UPDATE`` SQL 文を生成する QuerySet を返します。"

msgid ""
"When the queryset is evaluated (``for entry in entries`` in this case), all "
"matched entries will be locked until the end of the transaction block, "
"meaning that other transactions will be prevented from changing or acquiring "
"locks on them."
msgstr ""
"クエリセットが評価されるとき（この場合、 ``for entry in entries`` ）、マッチ"
"したすべてのエントリは、トランザクションブロックが終了するまでロックされま"
"す。つまり、他のトランザクションがそれらのエントリを変更したりロックを取得し"
"たりするのを防ぐことができます。"

msgid ""
"Usually, if another transaction has already acquired a lock on one of the "
"selected rows, the query will block until the lock is released. If this is "
"not the behavior you want, call ``select_for_update(nowait=True)``. This "
"will make the call non-blocking. If a conflicting lock is already acquired "
"by another transaction, :exc:`~django.db.DatabaseError` will be raised when "
"the queryset is evaluated. You can also ignore locked rows by using "
"``select_for_update(skip_locked=True)`` instead. The ``nowait`` and "
"``skip_locked`` are mutually exclusive and attempts to call "
"``select_for_update()`` with both options enabled will result in a :exc:"
"`ValueError`."
msgstr ""
"通常、他のトランザクションが既に選択行の1つをロックしている場合、ロックが解除"
"されるまでクエリはブロックされます。このような動作が望ましくない場合は、  "
"``select_for_update(nowait=True)`` を呼び出してください。これにより、呼び出し"
"がノンブロッキングになります。競合するロックが既に他のトランザクションによっ"
"て取得されている場合は、クエリセットが評価される際に :exc:`~django.db."
"DatabaseError` が発生します。代わりに "
"``select_for_update(skip_locked=True)`` を使用すれば、ロックされた行を無視す"
"ることもできます。 ``nowait`` と ``skip_locked`` は互いに排他的であり、両方の"
"オプションを有効にして ``select_for_update()`` を呼び出そうとすると :exc:"
"`ValueError` が発生します。"

msgid ""
"By default, ``select_for_update()`` locks all rows that are selected by the "
"query. For example, rows of related objects specified in :meth:"
"`select_related` are locked in addition to rows of the queryset's model. If "
"this isn't desired, specify the related objects you want to lock in "
"``select_for_update(of=(...))`` using the same fields syntax as :meth:"
"`select_related`. Use the value ``'self'`` to refer to the queryset's model."
msgstr ""
"デフォルトでは、 ``select_for_update()`` はクエリによって選択された全ての行を"
"ロックします。たとえば、クエリセットのモデルの行に加えて、 :meth:"
"`select_related` で指定したリレーション先のオブジェクトの行もロックされます。"
"この動作が望ましくない場合は、 :meth:`select_related` と同じフィールド構文を"
"使って ``select_for_update(of=(...))`` でロックしたいリレーション先のオブジェ"
"クトを指定してください。クエリセットのモデルを参照するには ``'self'`` という"
"値を使用します。"

msgid "Lock parents models in ``select_for_update(of=(...))``"
msgstr "親モデルを ``select_for_update(of=(...))`` でロックする"

msgid ""
"If you want to lock parents models when using :ref:`multi-table inheritance "
"<multi-table-inheritance>`, you must specify parent link fields (by default "
"``<parent_model_name>_ptr``) in the ``of`` argument. For example::"
msgstr ""
":ref:`複数テーブルの継承 <multi-table-inheritance>` を使用する際に親モデルを"
"ロックしたい場合は、 ``of`` 引数に親リンクフィールド (デフォルトでは "
"``<parent_model_name>_ptr``) を指定する必要があります。たとえば次のようになり"
"ます:"

msgid "Using ``select_for_update(of=(...))`` with specified fields"
msgstr "フィールドを指定して ``select_for_update(of=(...))`` を使う"

msgid ""
"If you want to lock models and specify selected fields, e.g. using :meth:"
"`values`, you must select at least one field from each model in the ``of`` "
"argument. Models without selected fields will not be locked."
msgstr ""
"例えば :meth:`values` を使ってモデルをロックし、選択されたフィールドを指定し"
"たい場合、 ``of`` 引数で各モデルから少なくとも1つのフィールドを選択する必要が"
"あります。フィールドが選択されていないモデルはロックされません。"

msgid ""
"On PostgreSQL only, you can pass ``no_key=True`` in order to acquire a "
"weaker lock, that still allows creating rows that merely reference locked "
"rows (through a foreign key, for example) while the lock is in place. The "
"PostgreSQL documentation has more details about `row-level lock modes "
"<https://www.postgresql.org/docs/current/explicit-locking.html#LOCKING-"
"ROWS>`_."
msgstr ""
"PostgreSQLの場合のみ、``no_key=True`` を渡すことで、ロックがかかっている間、"
"（たとえば外部キーによって）ロックされた行を参照するだけの行を作成できる、よ"
"り弱いロックを取得できます。PostgreSQLのドキュメントに `row-level lock modes "
"<https://www.postgresql.org/docs/current/explicit-locking.html#LOCKING-"
"ROWS>`_ についての詳細があります。"

msgid "You can't use ``select_for_update()`` on nullable relations:"
msgstr "null 可能なリレーションでは ``select_for_update()`` は使用できません:"

msgid ""
"To avoid that restriction, you can exclude null objects if you don't care "
"about them:"
msgstr ""
"この制限を回避するために、nullオブジェクトを気にしない場合は除外できます:"

msgid ""
"The ``postgresql``, ``oracle``, and ``mysql`` database backends support "
"``select_for_update()``. However, MariaDB only supports the ``nowait`` "
"argument, MariaDB 10.6+ also supports the ``skip_locked`` argument, and "
"MySQL supports the ``nowait``, ``skip_locked``, and ``of`` arguments. The "
"``no_key`` argument is only supported on PostgreSQL."
msgstr ""
"データベースバックエンドの ``postgresql`` 、 ``oracle`` 、 ``mysql`` は "
"``select_for_update()`` をサポートしています。ただし、MariaDB は ``nowait`` "
"引数のみをサポートしており、MariaDB 10.6+ は ``skip_locked`` 引数もサポートし"
"ています。 ``no_key`` 引数は PostgreSQL のみでサポートされています。"

msgid ""
"Passing ``nowait=True``, ``skip_locked=True``, ``no_key=True``, or ``of`` to "
"``select_for_update()`` using database backends that do not support these "
"options, such as MySQL, raises a :exc:`~django.db.NotSupportedError`. This "
"prevents code from unexpectedly blocking."
msgstr ""
"``nowait=True`` 、 ``skip_locked=True`` 、 ``no_key=True`` 、または ``of`` "
"を ``select_for_update()`` に渡すと、MySQL のようなこれらのオプションをサポー"
"トしていないデータベースバックエンドでは :exc:`~django.db.NotSupportedError` "
"が発生します。これはコードが予期せずブロックされるのを防ぎます。"

msgid ""
"Evaluating a queryset with ``select_for_update()`` in autocommit mode on "
"backends which support ``SELECT ... FOR UPDATE`` is a :exc:`~django.db."
"transaction.TransactionManagementError` error because the rows are not "
"locked in that case. If allowed, this would facilitate data corruption and "
"could easily be caused by calling code that expects to be run in a "
"transaction outside of one."
msgstr ""
"``SELECT ... FOR UPDATE`` をサポートしているバックエンドで "
"``select_for_update()`` をオートコミットモードでクエリセットを評価すると :"
"exc:`~django.db.transaction.TransactionManagementError` エラーになります。も"
"しこれが許される場合、これはデータを用意に破壊します。たとえばトランザクショ "
"ン外のトランザクションで実行されることを期待するコードを呼び出すことで簡単に"
"破壊が起こります。"

msgid ""
"Using ``select_for_update()`` on backends which do not support ``SELECT ... "
"FOR UPDATE`` (such as SQLite) will have no effect. ``SELECT ... FOR UPDATE`` "
"will not be added to the query, and an error isn't raised if "
"``select_for_update()`` is used in autocommit mode."
msgstr ""
"``SELECT ... FOR UPDATE`` をサポートしていないバックエンド (SQLite など) で "
"``select_for_update()`` を使用しても意味はありません。 ``SELECT ... FOR "
"UPDATE`` はクエリに追加されず、 ``select_for_update()`` がオートコミットモー"
"ドで使用されてもエラーは発生しません。"

msgid ""
"Although ``select_for_update()`` normally fails in autocommit mode, since :"
"class:`~django.test.TestCase` automatically wraps each test in a "
"transaction, calling ``select_for_update()`` in a ``TestCase`` even outside "
"an :func:`~django.db.transaction.atomic()` block will (perhaps unexpectedly) "
"pass without raising a ``TransactionManagementError``. To properly test "
"``select_for_update()`` you should use :class:`~django.test."
"TransactionTestCase`."
msgstr ""
"自動コミットモードでは ``select_for_update()`` は通常失敗しますが、 :class:"
"`~django.test.TestCase` は自動的に各テストをトランザクションでラップするの"
"で、 :func:`~django.db.transaction.atomic()` ブロックの外でも ``TestCase`` の"
"中で ``select_for_update()`` を呼び出すと、(おそらく予期せず) "
"``TransactionManagementError`` を発生させずに通過します。正しく "
"``select_for_update()`` をテストするには :class:`~django.test."
"TransactionTestCase` を使うべきです。"

msgid "Certain expressions may not be supported"
msgstr "一部の式はサポートされていません"

msgid ""
"PostgreSQL doesn't support ``select_for_update()`` with :class:`~django.db."
"models.expressions.Window` expressions."
msgstr ""
"PostgreSQL は ``select_for_update()`` を :class:`~django.db.models."
"expressions.Window` 式でサポートしていません。"

msgid "``raw()``"
msgstr "``raw()``"

msgid ""
"Takes a raw SQL query, executes it, and returns a ``django.db.models.query."
"RawQuerySet`` instance. This ``RawQuerySet`` instance can be iterated over "
"just like a normal ``QuerySet`` to provide object instances."
msgstr ""
"素の SQL クエリを受け取って実行し、 ``django.db.models.query.RawQuerySet`` イ"
"ンスタンスを返します。この ``RawQuerySet`` インスタンスは、通常の "
"``QuerySet`` と同様にイテレートすることで、オブジェクトインスタンスを生成でき"
"ます。"

msgid "See the :doc:`/topics/db/sql` for more information."
msgstr "詳細は :doc:`/topics/db/sql` を参照してください。"

msgid ""
"``raw()`` always triggers a new query and doesn't account for previous "
"filtering. As such, it should generally be called from the ``Manager`` or "
"from a fresh ``QuerySet`` instance."
msgstr ""
"``raw()`` は常に新しいクエリをトリガーし、以前のフィルタリングを考慮しませ"
"ん。そのため、通常は ``Manager`` から呼び出すか、新しい ``QuerySet`` インスタ"
"ンスから呼び出す必要があります。"

msgid "Operators that return new ``QuerySet``\\s"
msgstr "新しい ``QuerySet`` を返す演算子"

msgid "Combined querysets must use the same model."
msgstr "結合したクエリセットは同じモデルを使用しなければなりません。"

msgid "AND (``&``)"
msgstr "AND (``&``)"

msgid ""
"Combines two ``QuerySet``\\s using the SQL ``AND`` operator in a manner "
"similar to chaining filters."
msgstr ""
"SQL の ``AND`` 演算子を使い、フィルタを連結するのと同じように、2つの "
"``QuerySet`` を結合します。"

msgid "The following are equivalent::"
msgstr "以下のコードは同等です:"

msgid "SQL equivalent:"
msgstr "これらは SQL で言う下記と同等です:"

msgid "OR (``|``)"
msgstr "OR (``|``)"

msgid "Combines two ``QuerySet``\\s using the SQL ``OR`` operator."
msgstr "SQL の ``OR`` 演算子を使用して、2つの ``QuerySet`` を結合します。"

msgid ""
"``|`` is not a commutative operation, as different (though equivalent) "
"queries may be generated."
msgstr ""
"``|`` は可換演算ではないので、（等価ではあるが）異なるクエリが生成される可能"
"性があります。"

msgid "XOR (``^``)"
msgstr "XOR (``^``)"

msgid ""
"Combines two ``QuerySet``\\s using the SQL ``XOR`` operator. A ``XOR`` "
"expression matches rows that are matched by an odd number of operands."
msgstr ""
"SQLの ``XOR`` 演算子を使用して、2つの ``QuerySet`` を結合します。``XOR`` 式"
"は、奇数個の条件が真である行にマッチします。"

msgid ""
"``XOR`` is natively supported on MariaDB and MySQL. On other databases, ``x "
"^ y ^ ... ^ z`` is converted to an equivalent:"
msgstr ""
"``XOR`` は MariaDB と MySQL ではネイティブでサポートされています。 他のデータ"
"ベースでは、 ``x ^ y ^ .... z`` は下記と等価な式に変換されます:"

msgid ""
"In older versions, on databases without native support for the SQL ``XOR`` "
"operator, ``XOR`` returned rows that were matched by exactly one operand. "
"The previous behavior was not consistent with MySQL, MariaDB, and Python "
"behavior."
msgstr ""
"古いバージョンでは、SQL の ``XOR`` 演算子をネイティブにサポートしていないデー"
"タベースでは、 ``XOR`` はただ1つの演算子でマッチする行だけを返していました。 "
"以前の動作は MySQL、MariaDB、Python の動作と一致していませんでした。"

msgid "Methods that do not return ``QuerySet``\\s"
msgstr "``QuerySet`` を返さないメソッド"

msgid ""
"The following ``QuerySet`` methods evaluate the ``QuerySet`` and return "
"something *other than* a ``QuerySet``."
msgstr ""
"以下の ``QuerySet`` メソッドは ``QuerySet`` を評価し、 ``QuerySet`` 以外のも"
"のを返します。"

msgid ""
"These methods do not use a cache (see :ref:`caching-and-querysets`). Rather, "
"they query the database each time they're called."
msgstr ""
"これらのメソッドはキャッシュを使用しません ( :ref:`caching-and-querysets` を"
"参照してください)。むしろ、呼び出されるたびにデータベースにクエリを行います。"

msgid ""
"Because these methods evaluate the QuerySet, they are blocking calls, and so "
"their main (synchronous) versions cannot be called from asynchronous code. "
"For this reason, each has a corresponding asynchronous version with an ``a`` "
"prefix - for example, rather than ``get(…)`` you can ``await aget(…)``."
msgstr ""
"これらのメソッドは ``QuerySet`` を評価するので、ブロッキング呼び出しとなり、"
"そのため主な（同期）バージョンは非同期コードから呼び出すことはできません。こ"
"のため、それぞれに対応する非同期バージョンがあり、 ``a`` 接頭辞が付いていま"
"す。例えば、 ``get(…)`` の代わりに ``await aget(…)`` が使用できます。"

msgid ""
"There is usually no difference in behavior apart from their asynchronous "
"nature, but any differences are noted below next to each method."
msgstr ""
"これらのメソッドの挙動には、通常その非同期性以外に違いはありませんが、各メ"
"ソッドの具体的な違いは、それぞれのメソッドの説明のすぐそばに記載されていま"
"す。"

msgid "*Asynchronous version*: ``aget()``"
msgstr "*非同期バージョン*: ``aget()``"

msgid ""
"Returns the object matching the given lookup parameters, which should be in "
"the format described in `Field lookups`_. You should use lookups that are "
"guaranteed unique, such as the primary key or fields in a unique constraint. "
"For example::"
msgstr ""
"指定されたルックアップパラメータに一致するオブジェクトを返します。これらのパ"
"ラメータは、 `Field lookups`_ で説明されている形式に従うべきです。主キーやユ"
"ニーク制約のあるフィールドのように、一意性が保証されるルックアップを使うべき"
"です。例えば下記のようにします:"

msgid ""
"If you expect a queryset to already return one row, you can use ``get()`` "
"without any arguments to return the object for that row::"
msgstr ""
"クエリセットがすでに1行だけを返すことがわかっている場合、引数なしで "
"``get()`` を使うことでその行のオブジェクトを取得できます。"

msgid ""
"If ``get()`` doesn't find any object, it raises a :exc:`Model.DoesNotExist "
"<django.db.models.Model.DoesNotExist>` exception::"
msgstr ""
"もし``get()`` がオブジェクトを見つけられなかった場合は、  :exc:`Model."
"DoesNotExist <django.db.models.Model.DoesNotExist>` 例外が発生します。"

msgid ""
"If ``get()`` finds more than one object, it raises a :exc:`Model."
"MultipleObjectsReturned <django.db.models.Model.MultipleObjectsReturned>` "
"exception::"
msgstr ""
"もし ``get()`` が複数のオブジェクトを見つけた場合は、 :exc:`Model."
"MultipleObjectsReturned <django.db.models.Model.MultipleObjectsReturned>` 例"
"外が発生します。"

msgid ""
"Both these exception classes are attributes of the model class, and specific "
"to that model. If you want to handle such exceptions from several ``get()`` "
"calls for different models, you can use their generic base classes. For "
"example, you can use :exc:`django.core.exceptions.ObjectDoesNotExist`  to "
"handle :exc:`~django.db.models.Model.DoesNotExist` exceptions from multiple "
"models::"
msgstr ""
"これらの例外クラスはモデルクラスの属性であり、そのモデルに特有のものです。複"
"数のモデルに対する ``get()`` 呼び出しでこのような例外を処理したい場合、一般的"
"な基底クラスを使用できます。たとえば下記のように、 :exc:`django.core."
"exceptions.ObjectDoesNotExist` を使って、複数のモデルからの :exc:`~django.db."
"models.Model.DoesNotExist` 例外をできます:"

msgid "``create()``"
msgstr "``create()``"

msgid "*Asynchronous version*: ``acreate()``"
msgstr "*非同期バージョン*: ``acreate()``"

msgid ""
"A convenience method for creating an object and saving it all in one step.  "
"Thus::"
msgstr ""
"1ステップでオブジェクトを作成して保存するための便利なメソッドす。たとえばこの"
"ようにします:"

msgid "are equivalent."
msgstr "これらは同等です。"

msgid ""
"The :ref:`force_insert <ref-models-force-insert>` parameter is documented "
"elsewhere, but all it means is that a new object will always be created. "
"Normally you won't need to worry about this. However, if your model contains "
"a manual primary key value that you set and if that value already exists in "
"the database, a call to ``create()`` will fail with an :exc:`~django.db."
"IntegrityError` since primary keys must be unique. Be prepared to handle the "
"exception if you are using manual primary keys."
msgstr ""
"別の場所で :ref:`force_insert <ref-models-force-insert>` パラメータについても"
"説明していますが、それは新しいオブジェクトを常に作成するよう強制するもので"
"す。普通はこれを気にする必要はありません。しかし、モデルが手動で指定した主"
"キー値を含み、その値が既にデータベースに存在する場合、 ``create()`` の呼び出"
"しは :exc:`~django.db.IntegrityError` で失敗します。これは、主キーは一意であ"
"る必要があるためです。手動の主キーを使用している場合は、例外処理に備える必要"
"があります。"

msgid "``get_or_create()``"
msgstr "``get_or_create()``"

msgid "*Asynchronous version*: ``aget_or_create()``"
msgstr "*非同期バージョン*: ``aget_or_create()``"

msgid ""
"A convenience method for looking up an object with the given ``kwargs`` (may "
"be empty if your model has defaults for all fields), creating one if "
"necessary."
msgstr ""
"与えられた ``kwargs`` を持つオブジェクトを検索するための便利なメソッドです "
"(モデルがすべてのフィールドをデフォルトで持っている場合は空でもかまいませ"
"ん)。"

msgid ""
"Returns a tuple of ``(object, created)``, where ``object`` is the retrieved "
"or created object and ``created`` is a boolean specifying whether a new "
"object was created."
msgstr ""
"(Object, created) のタプルを返します。\"Object\"は受け取ったものか作られたも"
"のです。そして\"created\"はそのObjectが作られたものかどうかのBooleanです。"

msgid ""
"This is meant to prevent duplicate objects from being created when requests "
"are made in parallel, and as a shortcut to boilerplatish code. For example::"
msgstr ""
"これは、リクエストが並列処理されたときに、重複したオブジェクトが生成されるの"
"を防ぐため、また、定型的なコードへのショートカットのためです。たとえば次のよ"
"うな場合、:"

msgid ""
"Here, with concurrent requests, multiple attempts to save a ``Person`` with "
"the same parameters may be made. To avoid this race condition, the above "
"example can be rewritten using ``get_or_create()`` like so::"
msgstr ""
"ここで、同時リクエストにより、同じパラメータで ``Person`` を保存しようとする"
"試みが複数回行われる可能性があります。この競合状態を回避するために、上記の例"
"は ``get_or_create()`` を使って次のように書き換えることができます:"

msgid ""
"Any keyword arguments passed to ``get_or_create()`` — *except* an optional "
"one called ``defaults`` — will be used in a :meth:`get()` call. If an object "
"is found, ``get_or_create()`` returns a tuple of that object and ``False``."
msgstr ""
"``get_or_create()`` に渡されたキーワード引数（オプションの ``defaults`` を除"
"く）は :meth:`get()` 呼び出しで使用されます。オブジェクトが見つかった場合、 "
"``get_or_create()`` はそのオブジェクトと ``False`` のタプルを返します。"

msgid ""
"This method is atomic assuming that the database enforces uniqueness of the "
"keyword arguments (see :attr:`~django.db.models.Field.unique` or :attr:"
"`~django.db.models.Options.unique_together`). If the fields used in the "
"keyword arguments do not have a uniqueness constraint, concurrent calls to "
"this method may result in multiple rows with the same parameters being "
"inserted."
msgstr ""
"このメソッドはデータベースがキーワード引数の一意性を強制していると仮定してア"
"トミックに動作します (:attr:`~django.db.models.Field.unique` または :attr:"
"`~django.db.models.Options.unique_together` を参照してください)。キーワード引"
"数で使用されるフィールドにユニーク制約がない場合、このメソッドを同時に呼び出"
"すと、同じパラメータを持つ複数の行が挿入される可能性があります。"

msgid ""
"You can specify more complex conditions for the retrieved object by chaining "
"``get_or_create()`` with ``filter()`` and using :class:`Q objects <django.db."
"models.Q>`. For example, to retrieve Robert or Bob Marley if either exists, "
"and create the latter otherwise::"
msgstr ""
"``get_or_create()`` と ``filter()`` を連結し、 :class:`Q オブジェクト "
"<django.db.models.Q>` を使用することで、取得するオブジェクトに対してより複雑"
"な条件を指定できます。たとえば次のコードは、Robert と Bob Marley のどちらかが"
"存在すればそれを取得し、そうでなければ後者（Bob Marley）を作成します:"

msgid ""
"If multiple objects are found, ``get_or_create()`` raises :exc:`~django.core."
"exceptions.MultipleObjectsReturned`. If an object is *not* found, "
"``get_or_create()`` will instantiate and save a new object, returning a "
"tuple of the new object and ``True``. The new object will be created roughly "
"according to this algorithm::"
msgstr ""
"複数のオブジェクトが見つかった場合、 ``get_or_create()`` は :exc:`~django."
"core.exceptions.MultipleObjectsReturned` を発生させます。オブジェクトが ** 見"
"つからなかった** 場合、 ``get_or_create()`` は新しいオブジェクトをインスタン"
"ス化して保存し、新しいオブジェクトと ``True`` のタプルを返します。新しいオブ"
"ジェクトはおおよそ以下のアルゴリズムに従って作成されます:"

msgid ""
"In English, that means start with any non-``'defaults'`` keyword argument "
"that doesn't contain a double underscore (which would indicate a non-exact "
"lookup). Then add the contents of ``defaults``, overriding any keys if "
"necessary, and use the result as the keyword arguments to the model class. "
"If there are any callables in ``defaults``, evaluate them. As hinted at "
"above, this is a simplification of the algorithm that is used, but it "
"contains all the pertinent details. The internal implementation has some "
"more error-checking than this and handles some extra edge-conditions; if "
"you're interested, read the code."
msgstr ""
"英語では、``defaults'`` 以外のキーワード引数で、2重アンダースコア（これは"
"exact以外のルックアップを意味します）を含まないものから始めることを意味しま"
"す。次に ``defaults`` の内容を追加し、必要であればキーを上書きして、その結果"
"をモデルクラスのキーワード引数として使用します。もし ``defaults`` に呼び出し"
"可能オブジェクトがあれば、それを評価します。上記のように、これは使用されるア"
"ルゴリズムを簡略化したものですが、適切な詳細はすべて含まれています。内部実装"
"では、これよりもさらに多くのエラーチェックが行われ、エッジ条件も処理されま"
"す。興味があれば、コードを読んでください。"

msgid ""
"If you have a field named ``defaults`` and want to use it as an exact lookup "
"in ``get_or_create()``, use ``'defaults__exact'``, like so::"
msgstr ""
"もし ``defaults`` という名前のフィールドがあり、それを ``get_or_create()`` で"
"正確にルックアップしたい場合は、次のように ``'defaults__exact'`` を使用しま"
"す："

msgid ""
"The ``get_or_create()`` method has similar error behavior to :meth:"
"`create()` when you're using manually specified primary keys. If an object "
"needs to be created and the key already exists in the database, an :exc:"
"`~django.db.IntegrityError` will be raised."
msgstr ""
"``get_or_create()`` メソッドは :meth:`create()` と同様のエラー動作をします。"
"オブジェクトを作成する必要があり、そのキーが既にデータベースに存在する場"
"合、 :exc:`~django.db.IntegrityError` が発生します。"

msgid ""
"Finally, a word on using ``get_or_create()`` in Django views. Please make "
"sure to use it only in ``POST`` requests unless you have a good reason not "
"to. ``GET`` requests shouldn't have any effect on data. Instead, use "
"``POST`` whenever a request to a page has a side effect on your data. For "
"more, see :rfc:`Safe methods <9110#section-9.2.1>` in the HTTP spec."
msgstr ""
"最後に、Djangoビューで``get_or_create()``を使用する際の注意点について説明しま"
"す。よほどの理由がない限り、 ``POST`` リクエスト以外では使用しないようにして"
"ください。 ``GET`` リクエストはデータに影響を与えるべきではありません。代わり"
"に、データに副作用がある場合は常に``POST``を使用してください。詳細について"
"は、HTTP仕様の :rfc:`安全なメソッド <9110#section-9.2.1>` を参照してくださ"
"い。"

msgid ""
"You can use ``get_or_create()`` through :class:`~django.db.models."
"ManyToManyField` attributes and reverse relations. In that case you will "
"restrict the queries inside the context of that relation. That could lead "
"you to some integrity problems if you don't use it consistently."
msgstr ""
":class:`~django.db.models.ManyToManyField` 属性と逆リレーションを通じて "
"``get_or_create()`` を使うことができます。この場合、クエリはリレーションのコ"
"ンテキスト内で制限されます。一貫して使用しないと、整合性の問題が発生する可能"
"性があります。"

msgid "Being the following models::"
msgstr "下記のモデルでは、:"

msgid ""
"You can use ``get_or_create()`` through Book's chapters field, but it only "
"fetches inside the context of that book:"
msgstr ""
"``get_or_create()`` は Book の chapters フィールドを通して使うことができます"
"が、その本のコンテキスト内でしか取得できません:"

msgid ""
"This is happening because it's trying to get or create \"Chapter 1\" through "
"the book \"Ulysses\", but it can't do any of them: the relation can't fetch "
"that chapter because it isn't related to that book, but it can't create it "
"either because ``title`` field should be unique."
msgstr ""
"この現象は、\"Ulysses \"という本を通して \"Chapter 1\" を取得、または作成しよ"
"うとしているために起こっています。しかし、そのいずれもできません。リレーショ"
"ンはその章を取得できません。なぜなら、その章はその本に関連していないからで"
"す。また、 ``title`` フィールドは一意でなければならないので、作成することもで"
"きません。"

msgid "``update_or_create()``"
msgstr "``update_or_create()``"

msgid "*Asynchronous version*: ``aupdate_or_create()``"
msgstr "*非同期バージョン*: ``aupdate_or_create()``"

msgid ""
"A convenience method for updating an object with the given ``kwargs``, "
"creating a new one if necessary. Both ``create_defaults`` and ``defaults`` "
"are dictionaries of (field, value) pairs. The values in both "
"``create_defaults`` and ``defaults`` can be callables. ``defaults`` is used "
"to update the object while ``create_defaults`` are used for the create "
"operation. If ``create_defaults`` is not supplied, ``defaults`` will be used "
"for the create operation."
msgstr ""
"与えられた ``kwargs`` でオブジェクトを更新し、必要に応じて新しいオブジェクト"
"を作成する便利なメソッドです。 ``create_defaults`` と ``defaults`` はどちら"
"も (field, value) のペアの辞書です。 ``create_defaults`` と ``defaults`` の値"
"はどちらも呼び出し可能オブジェクトです。  ``defaults`` はオブジェクトを更新す"
"る際に使用され、``create_defaults`` はオブジェクトを作成する際に使用されま"
"す。もし ``create_defaults`` が指定されなかった場合、 ``defaults`` が作成操作"
"に使用されます。"

msgid ""
"Returns a tuple of ``(object, created)``, where ``object`` is the created or "
"updated object and ``created`` is a boolean specifying whether a new object "
"was created."
msgstr ""
"(Object, created) のタプルを返します。\"Object\"は受け取ったものか更新したも"
"のです。そして\"created\"はそのObjectが更新されたものかどうかのBooleanです。"

msgid ""
"The ``update_or_create`` method tries to fetch an object from database based "
"on the given ``kwargs``. If a match is found, it updates the fields passed "
"in the ``defaults`` dictionary."
msgstr ""
"``update_or_create`` メソッドは、与えられた ``kwargs`` に基づいてデータベース"
"からオブジェクトを取得しようとします。一致するオブジェクトが見つかった場合、 "
"``defaults`` 辞書に渡されたフィールドを更新します。"

msgid "This is meant as a shortcut to boilerplatish code. For example::"
msgstr ""
"これは定型的なコードへのショートカットです。たとえば次のようなものです:"

msgid ""
"This pattern gets quite unwieldy as the number of fields in a model goes up. "
"The above example can be rewritten using ``update_or_create()`` like so::"
msgstr ""
"モデル内のフィールドの数が増えるにつれて、このパターンはかなり扱いにくくなり"
"ます。上記の例は、 ``update_or_create()`` を使って次のように書き換えることが"
"できます:"

msgid ""
"For a detailed description of how names passed in ``kwargs`` are resolved, "
"see :meth:`get_or_create`."
msgstr ""
"``kwargs`` で渡された名前がどのように解決されるかについては :meth:"
"`get_or_create` を参照してください。"

msgid ""
"As described above in :meth:`get_or_create`, this method is prone to a race-"
"condition which can result in multiple rows being inserted simultaneously if "
"uniqueness is not enforced at the database level."
msgstr ""
"上記の :meth:`get_or_create` で説明したように、このメソッドは、データベースレ"
"ベルで一意性が強制されていない場合、複数の行が同時に挿入される競合状態に陥り"
"がちです。"

msgid ""
"Like :meth:`get_or_create` and :meth:`create`, if you're using manually "
"specified primary keys and an object needs to be created but the key already "
"exists in the database, an :exc:`~django.db.IntegrityError` is raised."
msgstr ""
":meth:`get_or_create` や :meth:`create` と同様に、手動で指定した主キーを使用"
"していて、オブジェクトを作成する必要があるが、そのキーが既にデータベースに存"
"在する場合、 :exc:`~django.db.IntegrityError` が発生します。"

msgid ""
"In older versions, ``update_or_create()`` didn't specify ``update_fields`` "
"when calling :meth:`Model.save() <django.db.models.Model.save>`."
msgstr ""
"古いバージョンでは :meth:`Model.save() <django.db.models.Model.save>` の呼び"
"出し時に ``update_or_create()`` が ``update_fields`` を指定していませんでし"
"た。"

msgid "The ``create_defaults`` argument was added."
msgstr "``create_defaults`` 引数が追加されました。"

msgid "``bulk_create()``"
msgstr "``bulk_create()``"

msgid "*Asynchronous version*: ``abulk_create()``"
msgstr "*非同期バージョン*: ``abulk_create()``"

msgid ""
"This method inserts the provided list of objects into the database in an "
"efficient manner (generally only 1 query, no matter how many objects there "
"are), and returns created objects as a list, in the same order as provided:"
msgstr ""
"このメソッドは、指定されたオブジェクトのリストを効率的な方法でデータベースに"
"挿入し (通常、オブジェクトの数にかかわらずクエリは 1 回だけです)、作成された"
"オブジェクトを指定された順序でリストとして返します:"

msgid "This has a number of caveats though:"
msgstr "しかし、これにはいくつかの注意点があります:"

msgid ""
"The model's ``save()`` method will not be called, and the ``pre_save`` and "
"``post_save`` signals will not be sent."
msgstr ""
"モデルの ``save()`` メソッドは呼び出されず、 ``pre_save`` と ``post_save`` シ"
"グナルは送信されません。"

msgid ""
"It does not work with child models in a multi-table inheritance scenario."
msgstr "複数テーブル継承シナリオの子モデルでは動作しません。"

msgid ""
"If the model's primary key is an :class:`~django.db.models.AutoField` and "
"``ignore_conflicts`` is False, the primary key attribute can only be "
"retrieved on certain databases (currently PostgreSQL, MariaDB 10.5+, and "
"SQLite 3.35+). On other databases, it will not be set."
msgstr ""
"モデルの主キーが :class:`~django.db.models.AutoField` で、 "
"``ignore_conflicts`` が False の場合、主キー属性は特定のデータベース (現在の"
"ところ PostgreSQL, MariaDB 10.5+, SQLite 3.35+) でしか取得できません。他の"
"データベースではセットされません。"

msgid "It does not work with many-to-many relationships."
msgstr "多対多のリレーションシップでは動作しません。"

msgid ""
"It casts ``objs`` to a list, which fully evaluates ``objs`` if it's a "
"generator. The cast allows inspecting all objects so that any objects with a "
"manually set primary key can be inserted first. If you want to insert "
"objects in batches without evaluating the entire generator at once, you can "
"use this technique as long as the objects don't have any manually set "
"primary keys::"
msgstr ""
"これは ``objs`` をリストにキャストし、それがジェネレータであれば ``objs`` を"
"完全に評価します。このキャストにより、手動で主キーを指定したオブジェクトを最"
"初に挿入できるように、すべてのオブジェクトを検査できます。ジェネレータ全体を"
"一度に評価することなく、オブジェクトを一括して挿入したい場合は、オブジェクト"
"に手動で指定した主キーがない限り、このテクニックを使用できます:"

msgid ""
"The ``batch_size`` parameter controls how many objects are created in a "
"single query. The default is to create all objects in one batch, except for "
"SQLite where the default is such that at most 999 variables per query are "
"used."
msgstr ""
"``batch_size`` パラメータは、1回のクエリでいくつのオブジェクトを作成するかを"
"制御します。デフォルトでは、すべてのオブジェクトを 1 回のクエリで作成します。"
"ただし、SQLite ではクエリごとに最大 999 個の変数が使用されます。"

msgid ""
"On databases that support it (all but Oracle), setting the "
"``ignore_conflicts`` parameter to ``True`` tells the database to ignore "
"failure to insert any rows that fail constraints such as duplicate unique "
"values."
msgstr ""
"これをサポートしているデータベース（Oracleを除くすべてのデータベース）では、 "
"``ignore_conflicts`` パラメータを ``True`` に設定すると、一意な値の重複などの"
"制約に違反する行の挿入の失敗を無視するようになります。"

msgid ""
"On databases that support it (all except Oracle), setting the "
"``update_conflicts`` parameter to ``True``, tells the database to update "
"``update_fields`` when a row insertion fails on conflicts. On PostgreSQL and "
"SQLite, in addition to ``update_fields``, a list of ``unique_fields`` that "
"may be in conflict must be provided."
msgstr ""
"これをサポートしているデータベース（Oracleを除くすべてのデータベース）では、 "
"``update_conflicts`` パラメータを ``True`` に設定すると、行の挿入が競合して失"
"敗したときに ``update_fields`` を更新するようになります。PostgreSQL と "
"SQLite では、 ``update_fields`` に加えて、競合する可能性のある "
"``unique_fields`` のリストを指定する必要があります。"

msgid ""
"Enabling the ``ignore_conflicts`` parameter disables setting the primary key "
"on each model instance (if the database normally supports it)."
msgstr ""
"パラメータ ``ignore_conflicts`` を有効にすると、各モデルのインスタンスに主"
"キーを指定できなくなります（データベースが通常サポートしている場合）。"

msgid ""
"In older versions, enabling the ``update_conflicts`` parameter prevented "
"setting the primary key on each model instance."
msgstr ""
"古いバージョンでは、``update_conflicts`` パラメータを有効にすると、各モデルイ"
"ンスタンスに主キーを指定できませんでした。"

msgid ""
"On MySQL and MariaDB, setting the ``ignore_conflicts`` parameter to ``True`` "
"turns certain types of errors, other than duplicate key, into warnings. Even "
"with Strict Mode. For example: invalid values or non-nullable violations. "
"See the `MySQL documentation`_ and `MariaDB documentation`_ for more details."
msgstr ""
"MySQL と MariaDB では、 ``ignore_conflicts`` パラメータを ``True`` に設定する"
"と、重複キー以外の特定の種類のエラーが警告に変わります。Strict モードでも同様"
"です。たとえば、無効な値やnull制約違反などです。詳細は `MySQL "
"documentation`_ と `MariaDB documentation`_ を参照してください。"

msgid "``bulk_update()``"
msgstr "``bulk_update()``"

msgid "*Asynchronous version*: ``abulk_update()``"
msgstr "*非同期バージョン*: ``abulk_update()``"

msgid ""
"This method efficiently updates the given fields on the provided model "
"instances, generally with one query, and returns the number of objects "
"updated:"
msgstr ""
"このメソッドは、通常1回のクエリで、指定されたモデルインスタンスの指定された"
"フィールドを効率的に更新し、更新されたオブジェクトの数を返します:"

msgid ""
":meth:`.QuerySet.update` is used to save the changes, so this is more "
"efficient than iterating through the list of models and calling ``save()`` "
"on each of them, but it has a few caveats:"
msgstr ""
":meth:`.QuerySet.update` は変更を保存するために使用されるので、モデルのリスト"
"をイテレートしてそれぞれ ``save()`` を呼び出すよりも効率的ですが、いくつかの"
"注意点があります:"

msgid "You cannot update the model's primary key."
msgstr "モデルの主キーは更新できません。"

msgid ""
"Each model's ``save()`` method isn't called, and the :attr:`~django.db."
"models.signals.pre_save` and :attr:`~django.db.models.signals.post_save` "
"signals aren't sent."
msgstr ""
"各モデルの ``save()`` メソッドは呼び出されず、 :attr:`~django.db.models."
"signals.pre_save` と :attr:`~django.db.models.signals.post_save` シグナルは送"
"信されません。"

msgid ""
"If updating a large number of columns in a large number of rows, the SQL "
"generated can be very large. Avoid this by specifying a suitable "
"``batch_size``."
msgstr ""
"多数の行の多数のカラムを更新する場合、生成されるSQLは非常に大きくなる可能性が"
"あります。これを避けるには、適切な ``batch_size`` を指定します。"

msgid ""
"Updating fields defined on multi-table inheritance ancestors will incur an "
"extra query per ancestor."
msgstr ""
"複数テーブル継承の継承元に定義されたフィールドを更新すると、継承元ごとに追加"
"のクエリが発生します。"

msgid ""
"When an individual batch contains duplicates, only the first instance in "
"that batch will result in an update."
msgstr ""
"独立した1つのバッチ内に重複がある場合、そのバッチの最初のインスタンスだけが更"
"新されます。"

msgid ""
"The number of objects updated returned by the function may be fewer than the "
"number of objects passed in. This can be due to duplicate objects passed in "
"which are updated in the same batch or race conditions such that objects are "
"no longer present in the database."
msgstr ""
"関数が返す更新されたオブジェクトの数は、渡されたオブジェクトの数より少ない場"
"合があります。これは、渡されたオブジェクトが重複して同じバッチで更新された"
"り、オブジェクトがデータベースに存在しなくなるような競合状態が発生したりする"
"ことが原因です。"

msgid ""
"The ``batch_size`` parameter controls how many objects are saved in a single "
"query. The default is to update all objects in one batch, except for SQLite "
"and Oracle which have restrictions on the number of variables used in a "
"query."
msgstr ""
"``batch_size`` パラメータは、1回のクエリで保存されるオブジェクトの数を制御し"
"ます。クエリで使用できる変数の数に制限がある SQLite と Oracle を除いて、デ"
"フォルトではすべてのオブジェクトを一括で更新します。"

msgid "``count()``"
msgstr "``count()``"

msgid "*Asynchronous version*: ``acount()``"
msgstr "*非同期バージョン*: ``acount()``"

msgid ""
"Returns an integer representing the number of objects in the database "
"matching the ``QuerySet``."
msgstr ""
"``QuerySet`` にマッチするデータベース内のオブジェクトの数を整数で返します。"

msgid ""
"A ``count()`` call performs a ``SELECT COUNT(*)`` behind the scenes, so you "
"should always use ``count()`` rather than loading all of the record into "
"Python objects and calling ``len()`` on the result (unless you need to load "
"the objects into memory anyway, in which case ``len()`` will be faster)."
msgstr ""
"``count()`` 呼び出しは裏で ``SELECT COUNT(*)`` を実行するので、すべてのレコー"
"ドを Python オブジェクトに読み込んで、その結果に対して ``len()`` を呼び出すの"
"ではなく、常に ``count()`` を使うべきです（オブジェクトをメモリに読み込む必要"
"がある場合は別です、その場合は ``len()`` の方が高速です）。"

msgid ""
"Note that if you want the number of items in a ``QuerySet`` and are also "
"retrieving model instances from it (for example, by iterating over it), it's "
"probably more efficient to use ``len(queryset)`` which won't cause an extra "
"database query like ``count()`` would."
msgstr ""
"もし ``QuerySet`` に含まれるアイテムの数が必要で、かつそこからモデルインスタ"
"ンスを取得する場合 (たとえば、それをイテレートする場合) は、おそらく "
"``len(queryset)`` を使用する方が効率的でしょう。``count()`` のように余分な"
"データベースクエリが発生することがないからです。"

msgid ""
"If the queryset has already been fully retrieved, ``count()`` will use that "
"length rather than perform an extra database query."
msgstr ""
"クエリセットがすでに完全に取得されている場合、 ``count()`` は余計なデータベー"
"スクエリを実行するのではなく、その長さを使用します。"

msgid "``in_bulk()``"
msgstr "``in_bulk()``"

msgid "*Asynchronous version*: ``ain_bulk()``"
msgstr "*非同期バージョン*: ``ain_bulk()``"

msgid ""
"Takes a list of field values (``id_list``) and the ``field_name`` for those "
"values, and returns a dictionary mapping each value to an instance of the "
"object with the given field value. No :exc:`django.core.exceptions."
"ObjectDoesNotExist` exceptions will ever be raised by ``in_bulk``; that is, "
"any ``id_list`` value not matching any instance will simply be ignored. If "
"``id_list`` isn't provided, all objects in the queryset are returned. "
"``field_name`` must be a unique field or a distinct field (if there's only "
"one field specified in :meth:`distinct`). ``field_name`` defaults to the "
"primary key."
msgstr ""
"フィールド値のリスト (``id_list``) とそれらの値の ``field_name`` を受け取り、"
"各値を与えられたフィールド値を持つオブジェクトのインスタンスにマッピングした"
"辞書を返します。 :exc:`django.core.exceptions.ObjectDoesNotExist` 例外が "
"``in_bulk`` によって発生することはありません。つまり、インスタンスにマッチし"
"ない ``id_list`` 値は無視されます。 ``id_list`` が指定されなかった場合、クエ"
"リセット内の全てのオブジェクトが返されます。フィールド名 ``field_name`` は一"
"意なフィールドか、(:meth:`distinct` で指定されたフィールドが一つしかない場合"
"は) 区別されたフィールドでなければなりません。デフォルトは主キーです。"

msgid ""
"If you pass ``in_bulk()`` an empty list, you'll get an empty dictionary."
msgstr "``in_bulk()`` に空のリストを渡すと、空の辞書が返されます。"

msgid "``iterator()``"
msgstr "``iterator()``"

msgid "*Asynchronous version*: ``aiterator()``"
msgstr "*非同期バージョン*: ``aiterator()``"

msgid ""
"Evaluates the ``QuerySet`` (by performing the query) and returns an iterator "
"(see :pep:`234`) over the results, or an asynchronous iterator (see :pep:"
"`492`) if you call its asynchronous version ``aiterator``."
msgstr ""
"( クエリを実行して ) ``QuerySet`` を評価し、その結果に対するイテレータ (:pep:"
"`234` を参照) を返します。非同期バージョンの ``aiterator`` を呼び出した場合"
"は、非同期イテレータ (:pep:`492` を参照) を返します。"

msgid ""
"A ``QuerySet`` typically caches its results internally so that repeated "
"evaluations do not result in additional queries. In contrast, ``iterator()`` "
"will read results directly, without doing any caching at the ``QuerySet`` "
"level (internally, the default iterator calls ``iterator()`` and caches the "
"return value). For a ``QuerySet`` which returns a large number of objects "
"that you only need to access once, this can result in better performance and "
"a significant reduction in memory."
msgstr ""
"クエリセット ``QuerySet`` は通常、結果を内部的にキャッシュするので、繰り返し"
"評価しても追加のクエリが発生することはありません。一方、 ``iterator()`` は "
"``QuerySet`` レベルでのキャッシュを行わずに、結果を直接読み込みます (内部的に"
"は、デフォルトのイテレータは ``iterator()`` を呼び出し、戻り値をキャッシュし"
"ます)。一度しかアクセスする必要のない大量のオブジェクトを返す ``QuerySet`` で"
"は、この方がパフォーマンスが向上し、メモリを大幅に削減できます。"

msgid ""
"Note that using ``iterator()`` on a ``QuerySet`` which has already been "
"evaluated will force it to evaluate again, repeating the query."
msgstr ""
"すでに評価された ``クエリセット`` に対して ``iterator()`` を使用すると、クエ"
"リを再度評価することになるので注意してください。"

msgid ""
"``iterator()`` is compatible with previous calls to ``prefetch_related()`` "
"as long as ``chunk_size`` is given. Larger values will necessitate fewer "
"queries to accomplish the prefetching at the cost of greater memory usage."
msgstr ""
"``chunk_size`` が与えられている限り、 ``iterator()`` は以前の "
"``prefetch_related()`` の呼び出しと互換性があります。より大きな値を指定する"
"と、より少ないクエリでプリフェッチを行う必要がありますが、その代償としてメモ"
"リの使用量が大きくなります。"

msgid ""
"Support for ``aiterator()`` with previous calls to ``prefetch_related()`` "
"was added."
msgstr ""
"以前の ``prefetch_related()`` 呼び出しによる ``aiterator()`` のサポートが追加"
"されました。"

msgid ""
"On some databases (e.g. Oracle, `SQLite <https://www.sqlite.org/limits."
"html#max_variable_number>`_), the maximum number of terms in an SQL ``IN`` "
"clause might be limited. Hence values below this limit should be used. (In "
"particular, when prefetching across two or more relations, a ``chunk_size`` "
"should be small enough that the anticipated number of results for each "
"prefetched relation still falls below the limit.)"
msgstr ""
"データベースによっては(例えばOracleや `SQLite <https://www.sqlite.org/limits."
"html#max_variable_number>`_ )、SQLの ``IN`` 句の最大項数が制限されている場合"
"があります。そのため、この制限値以下の値を使用する必要があります。(特に、2つ"
"以上のリレーションにまたがってプリフェッチを行う場合、``chunk_size`` は、プリ"
"フェッチされた各リレーションに対して予測される結果の数が制限を下回る程度に小"
"さくする必要があります)。"

msgid ""
"So long as the QuerySet does not prefetch any related objects, providing no "
"value for ``chunk_size`` will result in Django using an implicit default of "
"2000."
msgstr ""
"クエリセットがリレーション先のオブジェクトをプリフェッチしない限り、 "
"``chunk_size`` に何も値を指定しないと、 Django は暗黙のデフォルト値 2000 を使"
"います。"

msgid ""
"Depending on the database backend, query results will either be loaded all "
"at once or streamed from the database using server-side cursors."
msgstr ""
"データベースのバックエンドによっては、クエリの結果は一度に読み込まれるか、"
"サーバーサイドのカーソルを使ってデータベースからストリーミングされます。"

msgid "With server-side cursors"
msgstr "サーバーサイドカーソルとともに使う"

msgid ""
"Oracle and :ref:`PostgreSQL <postgresql-server-side-cursors>` use server-"
"side cursors to stream results from the database without loading the entire "
"result set into memory."
msgstr ""
"Oracle と :ref:`PostgreSQL <postgresql-server-side-cursors>` はサーバーサイド"
"カーソルを使用して、結果セット全体をメモリに読み込むことなくデータベースから"
"結果をストリームします。"

msgid "The Oracle database driver always uses server-side cursors."
msgstr "Oracle データベースドライバは常にサーバーサイドカーソルを使用します。"

msgid ""
"With server-side cursors, the ``chunk_size`` parameter specifies the number "
"of results to cache at the database driver level. Fetching bigger chunks "
"diminishes the number of round trips between the database driver and the "
"database, at the expense of memory."
msgstr ""
"サーバーサイドカーソルでは、``chunk_size`` パラメータはデータベースドライバレ"
"ベルでキャッシュする結果の数を指定します。より大きなチャンクをフェッチするこ"
"とで、データベースドライバとデータベース間の往復回数を減らすことができます。"

msgid ""
"On PostgreSQL, server-side cursors will only be used when the :setting:"
"`DISABLE_SERVER_SIDE_CURSORS <DATABASE-DISABLE_SERVER_SIDE_CURSORS>` setting "
"is ``False``. Read :ref:`transaction-pooling-server-side-cursors` if you're "
"using a connection pooler configured in transaction pooling mode. When "
"server-side cursors are disabled, the behavior is the same as databases that "
"don't support server-side cursors."
msgstr ""
"PostgreSQLでは、サーバーサイドカーソルは :setting:"
"`DISABLE_SERVER_SIDE_CURSORS <DATABASE-DISABLE_SERVER_SIDE_CURSORS>` 設定が "
"``False`` の場合のみ使用されます。トランザクションプーリングモードで構成され"
"た接続プーラを使用している場合は :ref:`transaction-pooling-server-side-"
"cursors` を参照してください。サーバーサイドカーソルが無効な場合、動作はサー"
"バーサイドカーソルをサポートしていないデータベースと同じです。"

msgid "Without server-side cursors"
msgstr "サーバーサイドカーソルなしで使う"

msgid ""
"MySQL doesn't support streaming results, hence the Python database driver "
"loads the entire result set into memory. The result set is then transformed "
"into Python row objects by the database adapter using the ``fetchmany()`` "
"method defined in :pep:`249`."
msgstr ""
"MySQL は結果のストリーミングをサポートしていないので、Python データベースドラ"
"イバは結果セット全体をメモリに読み込みます。結果セットはその後、データベース"
"アダプタによって :pep:`249` で定義されている ``fetchmany()`` メソッドを使用し"
"て Python の行オブジェクトに変換されます。"

msgid ""
"SQLite can fetch results in batches using ``fetchmany()``, but since SQLite "
"doesn't provide isolation between queries within a connection, be careful "
"when writing to the table being iterated over. See :ref:`sqlite-isolation` "
"for more information."
msgstr ""
"SQLite は ``fetchmany()`` を使用してバッチで結果を取得できますが、SQLite は接"
"続内のクエリ間の分離を提供していないため、イテレートするテーブルに書き込む際"
"には注意が必要です。詳細は :ref:`sqlite-isolation` を参照してください。"

msgid ""
"The ``chunk_size`` parameter controls the size of batches Django retrieves "
"from the database driver. Larger batches decrease the overhead of "
"communicating with the database driver at the expense of a slight increase "
"in memory consumption."
msgstr ""
"``chunk_size`` パラメータは Django がデータベースドライバから取得するバッチの"
"サイ ズを制御します。バッチを大きくすると、データベースドライバとの通信のオー"
"バヘッ ドが減りますが、その分メモリ消費量が少し増えます。"

msgid ""
"So long as the QuerySet does not prefetch any related objects, providing no "
"value for ``chunk_size`` will result in Django using an implicit default of "
"2000, a value derived from `a calculation on the psycopg mailing list "
"<https://www.postgresql.org/message-id/4D2F2C71.8080805%40dndg.it>`_:"
msgstr ""
"クエリセットがリレーション先のオブジェクトをプリフェッチしない限り、 "
"``chunk_size`` に何も値を与えない場合、 Django は暗黙のデフォルト値である "
"2000 を使うことになります。この値は、 `psycopg メーリングリスト <https://www."
"postgresql.org/message-id/4D2F2C71.8080805%40dndg.it>`_ で計算された値です："

msgid ""
"Assuming rows of 10-20 columns with a mix of textual and numeric data, 2000 "
"is going to fetch less than 100KB of data, which seems a good compromise "
"between the number of rows transferred and the data discarded if the loop is "
"exited early."
msgstr ""
"テキストデータと数値データが混在した10～20列の行を想定すると、2000行で100KB以"
"下のデータを取得することになります。これは、転送される行数と、ループが早期に"
"終了した場合に破棄されるデータとの間の良い妥協点だと思われます。"

msgid "``latest()``"
msgstr "``latest()``"

msgid "*Asynchronous version*: ``alatest()``"
msgstr "*非同期バージョン*: ``alatest()``"

msgid "Returns the latest object in the table based on the given field(s)."
msgstr ""
"指定されたフィールドに基づいて、テーブル内の最新のオブジェクトを返します。"

msgid ""
"This example returns the latest ``Entry`` in the table, according to the "
"``pub_date`` field::"
msgstr ""
"この例では、 ``pub_date`` フィールドに従って、テーブル内の最新の ``Entry`` を"
"返します:"

msgid ""
"You can also choose the latest based on several fields. For example, to "
"select the ``Entry`` with the earliest ``expire_date`` when two entries have "
"the same ``pub_date``::"
msgstr ""
"また、複数のフィールドから最新のものを選択することもできます。たとえば2つのエ"
"ントリが同じ ``pub_date`` を持つ場合に、最も早い ``expire_date`` を持つ "
"``Entry`` を下記のように選択できます:"

msgid ""
"The negative sign in ``'-expire_date'`` means to sort ``expire_date`` in "
"*descending* order. Since ``latest()`` gets the last result, the ``Entry`` "
"with the earliest ``expire_date`` is selected."
msgstr ""
"``'-expire_date'`` の負の符号は、``expire_date`` を *降順* でソートすることを"
"意味します。 ``latest()`` は最後の結果を取得するので、 ``expire_date`` が最も"
"古い ``Entry`` が選択されます。"

msgid ""
"If your model's :ref:`Meta <meta-options>` specifies :attr:`~django.db."
"models.Options.get_latest_by`, you can omit any arguments to ``earliest()`` "
"or ``latest()``. The fields specified in :attr:`~django.db.models.Options."
"get_latest_by` will be used by default."
msgstr ""
"モデルの :ref:`Meta <meta-options>` が :attr:`~django.db.models.Options."
"get_latest_by` を指定している場合、 ``earliest()`` や ``latest()`` の引数を省"
"略できます。 :attr:`~django.db.models.Options.get_latest_by` で指定された"
"フィールドがデフォルトで使用されます。"

msgid ""
"Like :meth:`get()`, ``earliest()`` and ``latest()`` raise :exc:`~django.db."
"models.Model.DoesNotExist` if there is no object with the given parameters."
msgstr ""
":meth:`get()` と同様に、 ``earliest()`` と ``latest()`` は与えられたパラメー"
"タを持つオブジェクトが存在しない場合、 :exc:`~django.db.models.Model."
"DoesNotExist` を発生させます。"

msgid ""
"Note that ``earliest()`` and ``latest()`` exist purely for convenience and "
"readability."
msgstr ""
"なお、``earliest()`` と ``latest()`` は単に利便性と可読性のために存在していま"
"す。"

msgid "``earliest()`` and ``latest()`` may return instances with null dates."
msgstr ""
"``earliest()`` と ``latest()`` は null の日付を持つインスタンスを返すことがあ"
"ります。"

msgid ""
"Since ordering is delegated to the database, results on fields that allow "
"null values may be ordered differently if you use different databases. For "
"example, PostgreSQL and MySQL sort null values as if they are higher than "
"non-null values, while SQLite does the opposite."
msgstr ""
"ソートはデータベースに委譲されるため、異なるデータベースを使用している場合、"
"NULL値を許可するフィールドの結果は異なる順序になる可能性があります。たとえ"
"ば、PostgreSQLとMySQLはnull値をnull値でない値よりも上位にあるかのようにソート"
"しますが、SQLiteはその逆です。"

msgid "You may want to filter out null values::"
msgstr "下記のように、null 値をフィルタリングしたいこともあるでしょう:"

msgid "``earliest()``"
msgstr "``earliest()``"

msgid "*Asynchronous version*: ``aearliest()``"
msgstr "*非同期バージョン*: ``aearliest()``"

msgid ""
"Works otherwise like :meth:`~django.db.models.query.QuerySet.latest` except "
"the direction is changed."
msgstr ""
"向きが変わる以外は :meth:`~django.db.models.query.QuerySet.latest` のように動"
"作します。"

msgid "``first()``"
msgstr "``first()``"

msgid "*Asynchronous version*: ``afirst()``"
msgstr "*非同期バージョン*: ``afirst()``"

msgid ""
"Returns the first object matched by the queryset, or ``None`` if there is no "
"matching object. If the ``QuerySet`` has no ordering defined, then the "
"queryset is automatically ordered by the primary key. This can affect "
"aggregation results as described in :ref:`aggregation-ordering-interaction`."
msgstr ""
"クエリセットにマッチする最初のオブジェクトを返します。マッチするオブジェクト"
"がない場合は ``None`` を返します。``QuerySet`` にソートが定義されていない場"
"合、クエリセットは自動的にプライマリキーでソートされます。これは :ref:"
"`aggregation-ordering-interaction` で説明されているように、アグリゲーション"
"（集計）の結果に影響を与える可能性があります。"

msgid ""
"Note that ``first()`` is a convenience method, the following code sample is "
"equivalent to the above example::"
msgstr ""
"``first()`` は便利なメソッドであることに注意してください。以下のコードサンプ"
"ルは上記の例と等価です:"

msgid "``last()``"
msgstr "``last()``"

msgid "*Asynchronous version*: ``alast()``"
msgstr "*非同期バージョン*: ``alast()``"

msgid ""
"Works like  :meth:`first()`, but returns the last object in the queryset."
msgstr ""
":meth:`first()` のように動作しますが、クエリセットの最後のオブジェクトを返し"
"ます。"

msgid "``aggregate()``"
msgstr "``aggregate()``"

msgid "*Asynchronous version*: ``aaggregate()``"
msgstr "*非同期バージョン*: ``aaggregate()``"

msgid ""
"Returns a dictionary of aggregate values (averages, sums, etc.) calculated "
"over the ``QuerySet``. Each argument to ``aggregate()`` specifies a value "
"that will be included in the dictionary that is returned."
msgstr ""
"``QuerySet`` に対して計算された集計値 (平均、合計など) の辞書を返します。 "
"``aggregate()`` の各引数は、返却される辞書に含まれる値を指定します。"

msgid ""
"The aggregation functions that are provided by Django are described in "
"`Aggregation Functions`_ below. Since aggregates are also :doc:`query "
"expressions </ref/models/expressions>`, you may combine aggregates with "
"other aggregates or values to create complex aggregates."
msgstr ""
"Django が提供する集計関数は以下の `Aggregation Functions`_ で説明されていま"
"す。 集計は :doc:`クエリ式 </ref/models/expressions>` でもあるので、集計を他"
"の集計や値と組み合わせて複雑な集計を作ることができます。"

msgid ""
"Aggregates specified using keyword arguments will use the keyword as the "
"name for the annotation. Anonymous arguments will have a name generated for "
"them based upon the name of the aggregate function and the model field that "
"is being aggregated. Complex aggregates cannot use anonymous arguments and "
"must specify a keyword argument as an alias."
msgstr ""
"キーワード引数を使用して指定されたアグリゲーション（集計）は、アノテーション"
"の名前としてキーワードを使用します。 無名の引数には、集計関数の名前と集約され"
"るモデルフィールドに基づいて生成された名前が付けられます。複雑な集計では無名"
"の引数を使用することはできず、エイリアスとしてキーワード引数を指定する必要が"
"あります。"

msgid ""
"For example, when you are working with blog entries, you may want to know "
"the number of authors that have contributed blog entries:"
msgstr ""
"たとえば、ブログエントリーを扱う場合、下記のように、ブログエントリーを投稿し"
"た著者の数を知りたいことがあるでしょう:"

msgid ""
"By using a keyword argument to specify the aggregate function, you can "
"control the name of the aggregation value that is returned:"
msgstr ""
"キーワード引数を使用して集計関数を指定すると、返される集計値の名前を制御でき"
"ます:"

msgid "``exists()``"
msgstr "``exists()``"

msgid "*Asynchronous version*: ``aexists()``"
msgstr "*非同期バージョン*: ``aexists()``"

msgid ""
"Returns ``True`` if the :class:`.QuerySet` contains any results, and "
"``False`` if not. This tries to perform the query in the simplest and "
"fastest way possible, but it *does* execute nearly the same query as a "
"normal :class:`.QuerySet` query."
msgstr ""
"戻り値は :class:`.QuerySet` に結果が含まれていれば ``True`` を、含まれていな"
"ければ ``False`` を返します。これは可能な限りシンプルで高速な方法でクエリを実"
"行しようとしますが、通常の :class:`.QuerySet` クエリとほぼ同じクエリを実行し"
"ます。"

msgid ""
":meth:`~.QuerySet.exists` is useful for searches relating to the existence "
"of any objects in a :class:`.QuerySet`, particularly in the context of a "
"large :class:`.QuerySet`."
msgstr ""
":meth:`~.QuerySet.exists` は :class:`.QuerySet` に含まれるオブジェクトの存在"
"に関連する検索、特に大きな :class:`.QuerySet` の検索に便利です。"

msgid "To find whether a queryset contains any items::"
msgstr ""
"クエリセットに項目が含まれているかどうかを調べるには、次のようにします:"

msgid "Which will be faster than::"
msgstr "これは以下のコードより高速です:"

msgid ""
"... but not by a large degree (hence needing a large queryset for efficiency "
"gains)."
msgstr ""
"...しかしそれほど大きな差はありません（したがって、効果を感じるには大きなクエ"
"リセットが必要です）。"

msgid ""
"Additionally, if a ``some_queryset`` has not yet been evaluated, but you "
"know that it will be at some point, then using ``some_queryset.exists()`` "
"will do more overall work (one query for the existence check plus an extra "
"one to later retrieve the results) than using ``bool(some_queryset)``, which "
"retrieves the results and then checks if any were returned."
msgstr ""
"さらに、``some_queryset`` がまだ評価されていないが、いずれ評価されることがわ"
"かっている場合、``some_queryset.exists()`` を使用すると、結果を取得してから返"
"されたかどうかをチェックする ``bool(some_queryset)`` を使用するよりも、全体的"
"な作業量（存在チェックのためのクエリ1回と、後で結果を取得するためのクエリ1"
"回）が増えます。"

msgid "``contains()``"
msgstr "``contains()``"

msgid "*Asynchronous version*: ``acontains()``"
msgstr "*非同期バージョン*: ``acontains()``"

msgid ""
"Returns ``True`` if the :class:`.QuerySet` contains ``obj``, and ``False`` "
"if not. This tries to perform the query in the simplest and fastest way "
"possible."
msgstr ""
":class:`.QuerySet` に ``obj`` が含まれていれば ``True`` を、含まれていなけれ"
"ば ``False`` を返します。これは、可能な限りシンプルで高速な方法でクエリを実行"
"しようとします。"

msgid ""
":meth:`contains` is useful for checking an object membership in a :class:`."
"QuerySet`, particularly in the context of a large :class:`.QuerySet`."
msgstr ""
":meth:`contains` は、特に大きな :class:`.QuerySet` のコンテキストにおいて、 :"
"class:`.QuerySet` 内のオブジェクトの所属関係をチェックするのに便利です。"

msgid "To check whether a queryset contains a specific item::"
msgstr ""
"クエリセットに特定の項目が含まれているかどうかを確認するには、次のようにしま"
"す:"

msgid ""
"This will be faster than the following which requires evaluating and "
"iterating through the entire queryset::"
msgstr ""
"これは、クエリセット全体を評価し、イテレートする必要がある以下の方法よりも高"
"速です:"

msgid ""
"Like :meth:`exists`, if ``some_queryset`` has not yet been evaluated, but "
"you know that it will be at some point, then using ``some_queryset."
"contains(obj)`` will make an additional database query, generally resulting "
"in slower overall performance."
msgstr ""
":meth:`exists` と同様に、``some_queryset`` がまだ評価されていないが、いずれ評"
"価されることがわかっている場合、``some_queryset.contains(obj)`` を使用する"
"と、追加のデータベースクエリを行うことになり、通常は全体的なパフォーマンスが"
"低下します。"

msgid "``update()``"
msgstr "``update()``"

msgid "*Asynchronous version*: ``aupdate()``"
msgstr "*非同期バージョン*: ``aupdate()``"

msgid ""
"Performs an SQL update query for the specified fields, and returns the "
"number of rows matched (which may not be equal to the number of rows updated "
"if some rows already have the new value)."
msgstr ""
"指定したフィールドに対して SQL の UPDATE クエリを実行し、マッチした行の数を返"
"します (一部の行が既に新しい値を持っている場合は、更新された行の数と一致しな"
"いことがあります)。"

msgid ""
"For example, to turn comments off for all blog entries published in 2010, "
"you could do this:"
msgstr ""
"たとえば、2010年に公開されたすべてのブログエントリーのコメントをオフにするに"
"は、次のようにします:"

msgid ""
"(This assumes your ``Entry`` model has fields ``pub_date`` and "
"``comments_on``.)"
msgstr ""
"(これは ``Entry`` モデルに ``pub_date`` と ``comments_on`` フィールドがあると"
"仮定しています)。"

msgid ""
"You can update multiple fields — there's no limit on how many. For example, "
"here we update the ``comments_on`` and ``headline`` fields:"
msgstr ""
"複数のフィールドを更新できます。たとえば、以下のコードでは ``comments_on`` "
"フィールドと ``headline`` フィールドを更新しています:"

msgid ""
"The ``update()`` method is applied instantly, and the only restriction on "
"the :class:`.QuerySet` that is updated is that it can only update columns in "
"the model's main table, not on related models. You can't do this, for "
"example:"
msgstr ""
"``update()`` メソッドは即座に適用されます。更新される :class:`.QuerySet` の唯"
"一の制限は、モデルのメインテーブルのカラムのみを更新することができ、リレー"
"ション先のモデルのカラムを更新することはできないということです。たとえば、こ"
"のようなことはできません:"

msgid "Filtering based on related fields is still possible, though:"
msgstr "リレーション先のフィールドに基づくフィルタリングは可能です:"

msgid ""
"You cannot call ``update()`` on a :class:`.QuerySet` that has had a slice "
"taken or can otherwise no longer be filtered."
msgstr ""
"スライスが取られたり、それ以外の理由でこれ以上フィルタリングできなくなった :"
"class:`.QuerySet` に対しては ``update()`` を呼び出すことはできません。"

msgid "The ``update()`` method returns the number of affected rows:"
msgstr "``update()`` メソッドは、影響を受ける行の数を返します:"

msgid ""
"If you're just updating a record and don't need to do anything with the "
"model object, the most efficient approach is to call ``update()``, rather "
"than loading the model object into memory. For example, instead of doing "
"this::"
msgstr ""
"レコードを更新するだけで、モデルオブジェクトに対して何もする必要がない場合、"
"最も効率的なアプローチは、モデルオブジェクトをメモリに読み込むのではなく、 "
"``update()`` を呼び出すことです。たとえば、次のようにす書く代わりに、:"

msgid "...do this::"
msgstr "...次のように書きます:"

msgid ""
"Using ``update()`` also prevents a race condition wherein something might "
"change in your database in the short period of time between loading the "
"object and calling ``save()``."
msgstr ""
"また、``update()`` を使用することで、オブジェクトを読み込んでから ``save()`` "
"を呼び出すまでの短い間にデータベース内で何かが変更されてしまう競合状態を防ぐ"
"ことができます。"

msgid ""
"Finally, realize that ``update()`` does an update at the SQL level and, "
"thus, does not call any ``save()`` methods on your models, nor does it emit "
"the :attr:`~django.db.models.signals.pre_save` or :attr:`~django.db.models."
"signals.post_save` signals (which are a consequence of calling :meth:`Model."
"save() <django.db.models.Model.save>`). If you want to update a bunch of "
"records for a model that has a custom :meth:`~django.db.models.Model.save()` "
"method, loop over them and call :meth:`~django.db.models.Model.save()`, like "
"this::"
msgstr ""
"最後に、 ``update()`` は SQL レベルで更新を行うので、モデル上の ``save()`` メ"
"ソッドを呼び出したり、 :attr:`~django.db.models.signals.pre_save` や :attr:"
"`~django.db.models.signals.post_save` シグナル ( :meth:`Model.save() <django."
"db.models.Model.save>` を呼び出した結果発生するシグナル) を発したりしないこと"
"に注意してください。カスタム :meth:`~django.db.models.Model.save()` メソッド"
"を持つモデルのレコードを更新したい場合は、次のようにループして :meth:"
"`~django.db.models.Model.save()` を呼び出します:"

msgid "Ordered queryset"
msgstr "ソートされたクエリセット"

msgid ""
"Chaining ``order_by()`` with ``update()`` is supported only on MariaDB and "
"MySQL, and is ignored for different databases. This is useful for updating a "
"unique field in the order that is specified without conflicts. For example::"
msgstr ""
"``order_by()`` と ``update()`` の連結は MariaDB と MySQL でのみサポートされて"
"おり、異なるデータベースでは無視されます。これは、一意なフィールドを指定され"
"た順序で矛盾なく更新する場合に便利です。たとえば次のようにします:"

msgid ""
"``order_by()`` clause will be ignored if it contains annotations, inherited "
"fields, or lookups spanning relations."
msgstr ""
"``order_by()`` 句がアノテーション、継承されたフィールド、リレーション先のルッ"
"クアップを含んでいる場合、``order_by()`` 句は無視されます。"

msgid ""
"Performs an SQL delete query on all rows in the :class:`.QuerySet` and "
"returns the number of objects deleted and a dictionary with the number of "
"deletions per object type."
msgstr ""
":class:`.QuerySet` 内のすべての行に対して SQL による DELETE クエリを実行し、"
"削除されたオブジェクトの数とオブジェクトの種類ごとの削除数を辞書として返しま"
"す。"

msgid ""
"The ``delete()`` is applied instantly. You cannot call ``delete()`` on a :"
"class:`.QuerySet` that has had a slice taken or can otherwise no longer be "
"filtered."
msgstr ""
"``delete()`` は即座に適用されます。スライスが取られたり、それ以外の理由でこれ"
"以上フィルタリングできなくなった :class:`.QuerySet` に対しては ``delete()`` "
"を呼び出すことはできません。"

msgid "For example, to delete all the entries in a particular blog:"
msgstr "たとえば、特定のブログ内のすべてのエントリを削除するには、:"

msgid ""
"By default, Django's :class:`~django.db.models.ForeignKey` emulates the SQL "
"constraint ``ON DELETE CASCADE`` — in other words, any objects with foreign "
"keys pointing at the objects to be deleted will be deleted along with them. "
"For example:"
msgstr ""
"デフォルトでは、 Django の :class:`~django.db.models.ForeignKey` は SQL の制"
"約 ``ON DELETE CASCADE`` をエミュレートします。つまり、削除されるオブジェクト"
"を指す外部キー を持つオブジェクトは一緒に削除されます。たとえば、次のようにな"
"ります:"

msgid ""
"This cascade behavior is customizable via the :attr:`~django.db.models."
"ForeignKey.on_delete` argument to the :class:`~django.db.models.ForeignKey`."
msgstr ""
"このカスケードの動作は、:class:`~django.db.models.ForeignKey` に対する :attr:"
"`~django.db.models.ForeignKey.on_delete` 属性によってカスタマイズできます。"

msgid ""
"The ``delete()`` method does a bulk delete and does not call any "
"``delete()`` methods on your models. It does, however, emit the :data:"
"`~django.db.models.signals.pre_delete` and :data:`~django.db.models.signals."
"post_delete` signals for all deleted objects (including cascaded deletions)."
msgstr ""
"``delete()`` メソッドは一括削除を行い、モデルの ``delete()`` メソッドを呼び出"
"しません。しかし、削除されたオブジェクト (カスケード削除を含む) に対して :"
"data:`~django.db.models.signals.pre_delete` と :data:`~django.db.models."
"signals.post_delete` シグナルを発行します。"

msgid ""
"Django needs to fetch objects into memory to send signals and handle "
"cascades. However, if there are no cascades and no signals, then Django may "
"take a fast-path and delete objects without fetching into memory. For large "
"deletes this can result in significantly reduced memory usage. The amount of "
"executed queries can be reduced, too."
msgstr ""
"Django はシグナルを送ったり、カスケードを処理したりするために、オブジェクトを"
"メモリにフェッチする必要があります。しかし、カスケードもシグナルもない場合、 "
"Django は高速な経路をとり、メモリにフェッチせずにオブジェクトを削除するかもし"
"れ ません。大きな削除の場合、メモリ使用量を大幅に減らすことができます。クエリ"
"の実行量も減ります。"

msgid ""
"ForeignKeys which are set to :attr:`~django.db.models.ForeignKey.on_delete` "
"``DO_NOTHING`` do not prevent taking the fast-path in deletion."
msgstr ""
":attr:`~django.db.models.ForeignKey.on_delete` ``DO_NOTHING`` に設定されてい"
"る外部キーは、削除の際に fast-path を取ることを防ぎません。"

msgid ""
"Note that the queries generated in object deletion is an implementation "
"detail subject to change."
msgstr ""
"オブジェクトの削除で生成されるクエリは、実装の詳細部分であり、変更される可能"
"性があることに注意してください。"

msgid "``as_manager()``"
msgstr "``as_manager()``"

msgid ""
"Class method that returns an instance of :class:`~django.db.models.Manager` "
"with a copy of the ``QuerySet``’s methods. See :ref:`create-manager-with-"
"queryset-methods` for more details."
msgstr ""
"``QuerySet`` のメソッドをコピーした :class:`~django.db.models.Manager` のイン"
"スタンスを返すクラスメソッドです。詳細は :ref:`create-manager-with-queryset-"
"methods` を参照してください。"

msgid ""
"Note that unlike the other entries in this section, this does not have an "
"asynchronous variant as it does not execute a query."
msgstr ""
"このセクションの他の項目とは異なり、クエリを実行しないため、非同期バージョン"
"がないことに注意してください。"

msgid "``explain()``"
msgstr "``explain()``"

msgid "*Asynchronous version*: ``aexplain()``"
msgstr "*非同期バージョン*: ``aexplain()``"

msgid ""
"Returns a string of the ``QuerySet``’s execution plan, which details how the "
"database would execute the query, including any indexes or joins that would "
"be used. Knowing these details may help you improve the performance of slow "
"queries."
msgstr ""
"``QuerySet`` の実行計画文字列を返します。この実行計画は、使用するインデックス"
"や結合を含め、データベースがどのようにクエリを実行するかの詳細を示します。こ"
"れらの詳細を知ることで、遅いクエリのパフォーマンスを向上させることができま"
"す。"

msgid "For example, when using PostgreSQL:"
msgstr "たとえば、PostgreSQLを使う場合:"

msgid "The output differs significantly between databases."
msgstr "出力はデータベースによって大きく異なります。"

msgid ""
"``explain()`` is supported by all built-in database backends except Oracle "
"because an implementation there isn't straightforward."
msgstr ""
"``explain()`` は Oracle を除くすべての組み込みデータベースバックエンドでサ"
"ポートされています。これは Oracle での実装が一筋縄ではいかないからです。"

msgid ""
"The ``format`` parameter changes the output format from the databases's "
"default, which is usually text-based. PostgreSQL supports ``'TEXT'``, "
"``'JSON'``, ``'YAML'``, and ``'XML'`` formats. MariaDB and MySQL support "
"``'TEXT'`` (also called ``'TRADITIONAL'``) and ``'JSON'`` formats. MySQL "
"8.0.16+ also supports an improved ``'TREE'`` format, which is similar to "
"PostgreSQL's ``'TEXT'`` output and is used by default, if supported."
msgstr ""
"``format`` パラメータは、データベースのデフォルトの出力形式 (通常はテキスト"
"ベース) から変更します。PostgreSQLは ``'TEXT'`` 、 ``'JSON'`` 、 "
"``'YAML'`` 、 ``'XML'`` フォーマットをサポートしています。MariaDB と MySQL "
"は ``'TEXT'`` ( ``'TRADITIONAL'`` とも呼びます) と ``'JSON'`` 形式をサポート"
"しています。MySQL 8.0.16+ では、改良された ``TREE'`` フォーマットもサポートし"
"ています。これは PostgreSQL の ``'TEXT'`` 出力に似ており、サポートされていれ"
"ばデフォルトで使用されます。"

msgid ""
"Some databases accept flags that can return more information about the "
"query. Pass these flags as keyword arguments. For example, when using "
"PostgreSQL:"
msgstr ""
"データベースによっては、クエリに関する詳細な情報を返すフラグを受け付けるもの"
"があります。これらのフラグをキーワード引数として渡してください。たとえば、"
"PostgreSQLを使用している場合:"

msgid ""
"On some databases, flags may cause the query to be executed which could have "
"adverse effects on your database. For example, the ``ANALYZE`` flag "
"supported by MariaDB, MySQL 8.0.18+, and PostgreSQL could result in changes "
"to data if there are triggers or if a function is called, even for a "
"``SELECT`` query."
msgstr ""
"データベースによっては、フラグによってクエリが実行され、データベースに悪影響"
"を及ぼす可能性があります。たとえば、MariaDB、MySQL 8.0.18+、PostgreSQLでサ"
"ポートされている ``ANALYZE`` フラグは、 ``SELECT`` クエリであっても、トリガが"
"ある場合や関数が呼び出された場合にデータを変更してしまう可能性があります。"

msgid "``Field`` lookups"
msgstr "``Field`` ルックアップ"

msgid ""
"Field lookups are how you specify the meat of an SQL ``WHERE`` clause. "
"They're specified as keyword arguments to the ``QuerySet`` methods :meth:"
"`filter()`, :meth:`exclude()` and :meth:`get()`."
msgstr ""
"フィールドルックアップは SQL の ``WHERE`` 句の内容を指定する方法です。これら"
"は :meth:`filter()` 、 :meth:`exclude()` 、 :meth:`get()` メソッドのキーワー"
"ド引数として指定します。"

msgid ""
"For an introduction, see :ref:`models and database queries documentation "
"<field-lookups-intro>`."
msgstr ""
"概要については :ref:`モデルとデータベースクエリのドキュメント <field-lookups-"
"intro>` を参照してください。"

msgid ""
"Django's built-in lookups are listed below. It is also possible to write :"
"doc:`custom lookups </howto/custom-lookups>` for model fields."
msgstr ""
"Django の組み込みルックアップを以下に示します。モデルフィールドのために :doc:"
"`カスタムルックアップ </howto/custom-lookups>` を書くこともできます。"

msgid ""
"As a convenience when no lookup type is provided (like in ``Entry.objects."
"get(id=14)``) the lookup type is assumed to be :lookup:`exact`."
msgstr ""
"利便性のために、ルックアップタイプが指定されていない場合（ ``Entry.objects."
"get(id=14)`` のように）、ルックアップタイプは :lookup:`exact` とみなされま"
"す。"

msgid "``exact``"
msgstr "``exact``"

msgid ""
"Exact match. If the value provided for comparison is ``None``, it will be "
"interpreted as an SQL ``NULL`` (see :lookup:`isnull` for more details)."
msgstr ""
"完全一致。比較に指定された値が ``None`` の場合、SQL の ``NULL`` と解釈されま"
"す (詳細は :lookup:`isnull` を参照してください)。"

msgid "SQL equivalents:"
msgstr "これは下記のSQL文と等価です。"

msgid "MySQL comparisons"
msgstr "MySQL における比較"

msgid ""
"In MySQL, a database table's \"collation\" setting determines whether "
"``exact`` comparisons are case-sensitive. This is a database setting, *not* "
"a Django setting. It's possible to configure your MySQL tables to use case-"
"sensitive comparisons, but some trade-offs are involved. For more "
"information about this, see the :ref:`collation section <mysql-collation>` "
"in the :doc:`databases </ref/databases>` documentation."
msgstr ""
"MySQL では、データベースのテーブルの「照合順序」の設定で、``exact`` 比較が大"
"文字小文字を区別するかどうかを決めます。これはデータベースの設定で、 Django "
"の設定ではありません。大文字小文字を区別して比較するように MySQL のテーブルを"
"設定することは可能ですが、いくつかの トレードオフが伴います。これについては :"
"doc:`データベース </ref/databases>` ドキュメントの :ref:`照合順序のセクショ"
"ン <mysql-collation>` を参照してください。"

msgid "``iexact``"
msgstr "``iexact``"

msgid ""
"Case-insensitive exact match. If the value provided for comparison is "
"``None``, it will be interpreted as an SQL ``NULL`` (see :lookup:`isnull` "
"for more details)."
msgstr ""
"大文字小文字を区別しない完全一致。比較に指定された値が ``None`` の場合、SQL "
"の ``NULL`` と解釈されます (詳細は :lookup:`isnull` を参照してください)。"

msgid ""
"Note the first query will match ``'Beatles Blog'``, ``'beatles blog'``, "
"``'BeAtLes BLoG'``, etc."
msgstr ""
"最初のクエリは ``'Beatles Blog'``, ``'beatles blog'``, ``'BeAtLes BLoG'`` な"
"どにマッチすることに注意してください。"

msgid "SQLite users"
msgstr "SQLite ユーザーの場合"

msgid ""
"When using the SQLite backend and non-ASCII strings, bear in mind the :ref:"
"`database note <sqlite-string-matching>` about string comparisons. SQLite "
"does not do case-insensitive matching for non-ASCII strings."
msgstr ""
"SQLite バックエンドで非 ASCII 文字列を使用する場合は、文字列の比較に関する :"
"ref:`データベースのノート<sqlite-string-matching>` に注意してください。SQLite"
"は非ASCII文字列に対して大文字小文字を区別しないマッチングを行いません。"

msgid "Case-sensitive containment test."
msgstr "大文字小文字を区別し、文字列を含むかをチェックします。"

msgid ""
"Note this will match the headline ``'Lennon honored today'`` but not "
"``'lennon honored today'``."
msgstr ""
"``'Lennon honored today'`` という見出しにはマッチしますが、 ``'lennon "
"honored today'`` という見出しにはマッチしないことに注意してください。"

msgid ""
"SQLite doesn't support case-sensitive ``LIKE`` statements; ``contains`` acts "
"like ``icontains`` for SQLite. See the :ref:`database note <sqlite-string-"
"matching>` for more information."
msgstr ""
"SQLite は大文字小文字を区別する ``LIKE`` ステートメントをサポートしていませ"
"ん。詳細は :ref:`データベースに関する注意事項 <sqlite-string-matching>` を参"
"照してください。"

msgid "``icontains``"
msgstr "``icontains``"

msgid "Case-insensitive containment test."
msgstr "大文字小文字を区別せずに文字列を含むかをチェックします。"

msgid ""
"When using the SQLite backend and non-ASCII strings, bear in mind the :ref:"
"`database note <sqlite-string-matching>` about string comparisons."
msgstr ""
"SQLite バックエンドで非 ASCII 文字列を使用する場合は、文字列の比較に関する :"
"ref:`データベースに関する注意事項 <sqlite-string-matching>` に注意してくださ"
"い。"

msgid "``in``"
msgstr "``in``"

msgid ""
"In a given iterable; often a list, tuple, or queryset. It's not a common use "
"case, but strings (being iterables) are accepted."
msgstr ""
"指定されたイテラブル（多くの場合、リスト、タプル、クエリセット）内に含まれる"
"かをチェックします。あまり使われませんが、（イテラブルである）文字列は使用可"
"能です。"

msgid ""
"You can also use a queryset to dynamically evaluate the list of values "
"instead of providing a list of literal values::"
msgstr ""
"リテラル値のリストを提供する代わりに、クエリセットを使用して以下のように値の"
"リストを動的に評価することもできます:"

msgid "This queryset will be evaluated as subselect statement:"
msgstr ""
"このクエリセットは下記のようなサブクエリ内の SELECT 文として評価されます:"

msgid ""
"If you pass in a ``QuerySet`` resulting from ``values()`` or "
"``values_list()`` as the value to an ``__in`` lookup, you need to ensure you "
"are only extracting one field in the result. For example, this will work "
"(filtering on the blog names)::"
msgstr ""
"もし ``values()`` や ``values_list()`` の結果の ``クエリセット`` を ``__in`` "
"ルックアップの値として渡す場合は、結果の中の1つのフィールドだけを抽出するよう"
"にする必要があります。たとえば、次のようにします（ブログ名でフィルタリングす"
"る場合）:"

msgid ""
"This example will raise an exception, since the inner query is trying to "
"extract two field values, where only one is expected::"
msgstr ""
"下記の例では例外が発生します。内側のクエリは2つのフィールド値を抽出しようとし"
"ているからです:"

msgid "Performance considerations"
msgstr "パフォーマンスに関する注意事項"

msgid ""
"Be cautious about using nested queries and understand your database server's "
"performance characteristics (if in doubt, benchmark!). Some database "
"backends, most notably MySQL, don't optimize nested queries very well. It is "
"more efficient, in those cases, to extract a list of values and then pass "
"that into the second query. That is, execute two queries instead of one::"
msgstr ""
"ネストされたクエリの使用には注意し、データベースサーバーのパフォーマンス特性"
"を理解しましょう (疑わしい場合はベンチマークを使用しましょう！)。データベース"
"バックエンドによっては、特に MySQL はネストされたクエリをあまり最適化しませ"
"ん。そのような場合は、値のリストを抽出してから 2 番目のクエリに渡すほうが効率"
"的です。つまり、1つのクエリではなく、下記のように2つのクエリを実行するので"
"す。"

msgid ""
"Note the ``list()`` call around the Blog ``QuerySet`` to force execution of "
"the first query. Without it, a nested query would be executed, because :ref:"
"`querysets-are-lazy`."
msgstr ""
"最初のクエリを強制的に実行するために、Blog ``QuerySet`` を ``list()`` 呼び出"
"しで囲んでいることに注意してください。これがないと、ネストされたクエリが実行"
"されてしまうからです。これは :ref:`querysets-are-lazy` ためです。"

msgid "``gt``"
msgstr "``gt``"

msgid "Greater than."
msgstr "～～より大きい（greater than）。"

msgid "``gte``"
msgstr "``gte``"

msgid "Greater than or equal to."
msgstr "～～以上（greater than or equal to）。"

msgid "``lt``"
msgstr "``lt``"

msgid "Less than."
msgstr "～～未満（less than）。"

msgid "``lte``"
msgstr "``lte``"

msgid "Less than or equal to."
msgstr "～～以下（less than equal to）。"

msgid "Case-sensitive starts-with."
msgstr ""
"大文字と小文字を区別して、指定された文字列から始まるかどうかをチェックしま"
"す。"

msgid ""
"SQLite doesn't support case-sensitive ``LIKE`` statements; ``startswith`` "
"acts like ``istartswith`` for SQLite."
msgstr ""
"SQLite は大文字小文字を区別する ``LIKE`` 文をサポートしていません。 SQLite で"
"は ``startswith`` は ``istartswith`` のように動作します。"

msgid "``istartswith``"
msgstr "``istartswith``"

msgid "Case-insensitive starts-with."
msgstr ""
"大文字と小文字を区別せず、指定された文字列から始まるかどうかをチェックしま"
"す。"

msgid "Case-sensitive ends-with."
msgstr ""
"大文字と小文字を区別して、指定された文字列で終わるかどうかをチェックします。"

msgid ""
"SQLite doesn't support case-sensitive ``LIKE`` statements; ``endswith`` acts "
"like ``iendswith`` for SQLite. Refer to the :ref:`database note <sqlite-"
"string-matching>` documentation for more."
msgstr ""
"SQLite は大文字小文字を区別する ``LIKE`` 文をサポートしていません。 "
"``endswith`` は SQLite の ``iendswith`` のように動作します。詳しくは :ref:`"
"データベースに関する注意事項 <sqlite-string-matching>` のドキュメントを参照し"
"てください。"

msgid "``iendswith``"
msgstr "``iendswith``"

msgid "Case-insensitive ends-with."
msgstr ""
"大文字と小文字を区別せず、指定された文字列で終わるかどうかをチェックします。"

msgid "``range``"
msgstr "``range``"

msgid "Range test (inclusive)."
msgstr "範囲のチェック（～～を含む）。"

msgid ""
"You can use ``range`` anywhere you can use ``BETWEEN`` in SQL — for dates, "
"numbers and even characters."
msgstr ""
"``range`` は SQL で ``BETWEEN`` が使えるところならどこでも使えます。日付、数"
"字、そして文字でも使えます。"

msgid ""
"Filtering a ``DateTimeField`` with dates won't include items on the last "
"day, because the bounds are interpreted as \"0am on the given date\". If "
"``pub_date`` was a ``DateTimeField``, the above expression would be turned "
"into this SQL:"
msgstr ""
"日付で ``DateTimeField`` をフィルタリングすると、最終日のアイテムは含まれませ"
"ん。もし ``pub_date`` が ``DateTimeField`` であった場合、上記の式はこのような"
"SQLになります:"

msgid "Generally speaking, you can't mix dates and datetimes."
msgstr "一般的に言って、日付と日時を混在させることはできません。"

msgid "``date``"
msgstr "``date``"

msgid ""
"For datetime fields, casts the value as date. Allows chaining additional "
"field lookups. Takes a date value."
msgstr ""
"datetime フィールドの値を date としてキャストします。追加のフィールドルック"
"アップを連結できます。 date 値を取ります。"

msgid ""
"(No equivalent SQL code fragment is included for this lookup because "
"implementation of the relevant query varies among different database "
"engines.)"
msgstr ""
"(このルックアップに等価なSQLの例はありません。これは、関連するクエリの実装が"
"データベースエンジンによって異なるためです)。"

msgid ""
"When :setting:`USE_TZ` is ``True``, fields are converted to the current time "
"zone before filtering. This requires :ref:`time zone definitions in the "
"database <database-time-zone-definitions>`."
msgstr ""
":setting:`USE_TZ` が ``True`` の場合、フィールドはフィルタリングの前にカレン"
"トタイムゾーンに変換されます。これには :ref:`データベースのタイムゾーン定義 "
"<database-time-zone-definitions>` が必要です。"

msgid "``year``"
msgstr "``year``"

msgid ""
"For date and datetime fields, an exact year match. Allows chaining "
"additional field lookups. Takes an integer year."
msgstr ""
"日付フィールドとdatetimeフィールドにおける、\"年\" の完全一致。追加のフィール"
"ドルックアップを連結できます。年を整数で指定します。"

msgid "(The exact SQL syntax varies for each database engine.)"
msgstr "(正確なSQL構文はデータベースエンジンによって異なります）。"

msgid ""
"When :setting:`USE_TZ` is ``True``, datetime fields are converted to the "
"current time zone before filtering. This requires :ref:`time zone "
"definitions in the database <database-time-zone-definitions>`."
msgstr ""
":setting:`USE_TZ` が ``True`` の場合、日付フィールドはフィルタリングの前にカ"
"レントタイムゾーンに変換されます。これにはデータベースの :ref:`タイムゾーン定"
"義 <database-time-zone-definitions>` が必要です。"

msgid "``iso_year``"
msgstr "``iso_year``"

msgid ""
"For date and datetime fields, an exact ISO 8601 week-numbering year match. "
"Allows chaining additional field lookups. Takes an integer year."
msgstr ""
"日付フィールドとdatetimeフィールドにおける、ISO 8601の週番号と年との完全一"
"致。追加のフィールドルックアップを連結できます。年を整数で指定します。"

msgid "``month``"
msgstr "``month``"

msgid ""
"For date and datetime fields, an exact month match. Allows chaining "
"additional field lookups. Takes an integer 1 (January) through 12 (December)."
msgstr ""
"日付フィールドおよびdatetimeフィールドにおける、\"月\" の完全一致。追加の"
"フィールドルックアップを連結できます。1 (1月) から 12 (12月) までの整数を指定"
"します。"

msgid "``day``"
msgstr "``day``"

msgid ""
"For date and datetime fields, an exact day match. Allows chaining additional "
"field lookups. Takes an integer day."
msgstr ""
"日付フィールドとdatetimeフィールドにおける、\"日\" の完全一致。追加のフィール"
"ドルックアップを連結できます。日を整数で指定します。"

msgid ""
"Note this will match any record with a pub_date on the third day of the "
"month, such as January 3, July 3, etc."
msgstr ""
"これは、1 月 3 日、7 月 3 日など、pub_date が月の 3 日目のレコードに一致しま"
"す。"

msgid "``week``"
msgstr "``week``"

msgid ""
"For date and datetime fields, return the week number (1-52 or 53) according "
"to `ISO-8601 <https://en.wikipedia.org/wiki/ISO-8601>`_, i.e., weeks start "
"on a Monday and the first week contains the year's first Thursday."
msgstr ""
"日付フィールドおよびdatetimeフィールドにおける、 `ISO-8601 <https://en."
"wikipedia.org/wiki/ISO-8601>`_ に従った週番号 (1～52または53) を返します。す"
"なわち、週は月曜日から始まり、最初の週にはその年の最初の木曜日が含まれます。"

msgid "``week_day``"
msgstr "``week_day``"

msgid ""
"For date and datetime fields, a 'day of the week' match. Allows chaining "
"additional field lookups."
msgstr ""
"日付フィールドとdatetimeフィールドにおける \"曜日\" の一致。追加のフィールド"
"ルックアップを連結できます。"

msgid ""
"Takes an integer value representing the day of week from 1 (Sunday) to 7 "
"(Saturday)."
msgstr "1 (日曜日) から 7 (土曜日) までの曜日を表す整数値を指定します。"

msgid ""
"Note this will match any record with a ``pub_date`` that falls on a Monday "
"(day 2 of the week), regardless of the month or year in which it occurs. "
"Week days are indexed with day 1 being Sunday and day 7 being Saturday."
msgstr ""
"``pub_date`` が月曜日(週の2日目)のレコードは、月や年に関係なくマッチすること"
"に注意してください。 週の曜日のインデックスは1日目が日曜日、7日目が土曜日で"
"す。"

msgid "``iso_week_day``"
msgstr "``iso_week_day``"

msgid ""
"For date and datetime fields, an exact ISO 8601 day of the week match. "
"Allows chaining additional field lookups."
msgstr ""
"日付フィールドおよび datetime フィールドにおける、ISO 8601 曜日との完全一致。"
"追加のフィールドルックアップを連結できます。"

msgid ""
"Takes an integer value representing the day of the week from 1 (Monday) to 7 "
"(Sunday)."
msgstr "1(月曜日)から7(日曜日)までの曜日を表す整数値を取ります。"

msgid ""
"Note this will match any record with a ``pub_date`` that falls on a Monday "
"(day 1 of the week), regardless of the month or year in which it occurs. "
"Week days are indexed with day 1 being Monday and day 7 being Sunday."
msgstr ""
"``pub_date`` が月曜日(週の1日目)のレコードは、月や年に関係なくマッチすること"
"に注意してください。週の曜日のインデックスは1日目が月曜日、7日目が日曜日で"
"す。"

msgid "``quarter``"
msgstr "``quarter``"

msgid ""
"For date and datetime fields, a 'quarter of the year' match. Allows chaining "
"additional field lookups. Takes an integer value between 1 and 4 "
"representing the quarter of the year."
msgstr ""
"日付および datetime フィールドにおける、\"四半期\" の一致。追加のフィールド"
"ルックアップを連結できます。年の四半期を表す 1 から 4 までの整数値を指定しま"
"す。"

msgid ""
"Example to retrieve entries in the second quarter (April 1 to June 30)::"
msgstr "第2四半期（4月1日から6月30日まで）のエントリーを検索する例:"

msgid "``time``"
msgstr "``time``"

msgid ""
"For datetime fields, casts the value as time. Allows chaining additional "
"field lookups. Takes a :class:`datetime.time` value."
msgstr ""
"datetime フィールドの場合、値を time としてキャストします。追加のフィールド"
"ルックアップを連結できます。 :class:`datetime.time` 値を取ります。"

msgid "``hour``"
msgstr "``hour``"

msgid ""
"For datetime and time fields, an exact hour match. Allows chaining "
"additional field lookups. Takes an integer between 0 and 23."
msgstr ""
"datetimeフィールドとtimeフィールドにおける、\"時（hour）\" の完全一致。追加の"
"フィールドルックアップを連結できます。0 から 23 までの整数を指定します。"

msgid "``minute``"
msgstr "``minute``"

msgid ""
"For datetime and time fields, an exact minute match. Allows chaining "
"additional field lookups. Takes an integer between 0 and 59."
msgstr ""
"datetime フィールドと time フィールドにおける、\"分\" の完全一致。追加の"
"フィールドルックアップを連結できます。0 から 59 までの整数を指定します。"

msgid "``second``"
msgstr "``second``"

msgid ""
"For datetime and time fields, an exact second match. Allows chaining "
"additional field lookups. Takes an integer between 0 and 59."
msgstr ""
"datetime および time フィールドにおける、\"秒\" の完全一致。追加のフィールド"
"ルックアップを連結できます。0 から 59 までの整数を指定します。"

msgid "``isnull``"
msgstr "``isnull``"

msgid ""
"Takes either ``True`` or ``False``, which correspond to SQL queries of ``IS "
"NULL`` and ``IS NOT NULL``, respectively."
msgstr ""
"\"True\" または \"False\" を受け取り、それぞれ ``IS NULL`` と ``IS NOT "
"NULL`` の SQL クエリに対応します。"

msgid "``regex``"
msgstr "``regex``"

msgid "Case-sensitive regular expression match."
msgstr "大文字小文字を区別する正規表現マッチ。"

msgid ""
"The regular expression syntax is that of the database backend in use. In the "
"case of SQLite, which has no built in regular expression support, this "
"feature is provided by a (Python) user-defined REGEXP function, and the "
"regular expression syntax is therefore that of Python's ``re`` module."
msgstr ""
"正規表現の構文は、使用するデータベースバックエンドのものです。正規表現のサ"
"ポートが組み込まれていないSQLiteの場合、この機能は(Pythonの)ユーザー定義"
"REGEXP関数によって提供され、正規表現の構文はPythonの ``re`` モジュールのもの"
"となります。"

msgid ""
"Using raw strings (e.g., ``r'foo'`` instead of ``'foo'``) for passing in the "
"regular expression syntax is recommended."
msgstr ""
"正規表現の構文を渡す際には、生の文字列(例: ``'foo'`` の代わりに ``r'foo'``) "
"を使うことを推奨します。"

msgid "``iregex``"
msgstr "``iregex``"

msgid "Case-insensitive regular expression match."
msgstr "大文字小文字を区別しない正規表現マッチ。"

msgid "Aggregation functions"
msgstr "集計（Aggregation）関数"

msgid ""
"Django provides the following aggregation functions in the ``django.db."
"models`` module. For details on how to use these aggregate functions, see :"
"doc:`the topic guide on aggregation </topics/db/aggregation>`. See the :"
"class:`~django.db.models.Aggregate` documentation to learn how to create "
"your aggregates."
msgstr ""
"Django は ``django.db.models`` モジュールで以下の集計関数を提供しています。こ"
"れらの集計関数の使い方は :doc:`アグリゲーション（集計）に関するトピックガイ"
"ド </topics/db/aggregation>` を参照してください。集計関数の作成方法について"
"は :class:`~django.db.models.Aggregate` ドキュメント を参照してください。"

msgid ""
"SQLite can't handle aggregation on date/time fields out of the box. This is "
"because there are no native date/time fields in SQLite and Django currently "
"emulates these features using a text field. Attempts to use aggregation on "
"date/time fields in SQLite will raise ``NotSupportedError``."
msgstr ""
"SQLite は日付/時刻フィールドの集計をそのままでは扱えません。これは、 SQLite "
"にはネイティブな日付/時刻フィールドが存在せず、Django は現在、テキストフィー"
"ルドを使っ てこれらの機能をエミュレートしているからです。SQLite で日付/時刻"
"フィールドの集計を使おうとすると、 ``NotSupportedError`` が発生します。"

msgid "Empty querysets or groups"
msgstr "空のクエリセットやグループの場合"

msgid ""
"Aggregation functions return ``None`` when used with an empty ``QuerySet`` "
"or group. For example, the ``Sum`` aggregation function returns ``None`` "
"instead of ``0`` if the ``QuerySet`` contains no entries or for any empty "
"group in a non-empty ``QuerySet``. To return another value instead, define "
"the ``default`` argument. ``Count`` is an exception to this behavior; it "
"returns ``0`` if the ``QuerySet`` is empty since ``Count`` does not support "
"the ``default`` argument."
msgstr ""
"集計関数は空の ``クエリセット`` やグループで使用すると ``None`` を返します。"
"たとえば、 ``Sum`` 集計関数は、 ``QuerySet`` にエントリが含まれていない場合"
"や、空ではない ``QuerySet`` に含まれる空のグループに対して、 ``0`` の代わり"
"に ``None`` を返します。代わりに別の値を返すには、 ``default`` 引数を定義しま"
"す。 ``Count`` は ``default`` 引数をサポートしていないため、 ``QuerySet`` が"
"空の場合は ``0`` を返します。"

msgid "All aggregates have the following parameters in common:"
msgstr "すべての集計に共通するパラメータは以下の通りです:"

msgid ""
"Strings that reference fields on the model, transforms of the field, or :doc:"
"`query expressions </ref/models/expressions>`."
msgstr ""
"モデル上のフィールド、フィールドのトランスフォーム、または :doc:`クエリ式 </"
"ref/models/expressions>` を参照する文字列です。"

msgid "``output_field``"
msgstr "``output_field``"

msgid ""
"An optional argument that represents the :doc:`model field </ref/models/"
"fields>` of the return value"
msgstr ""
"戻り値の :doc:`モデルフィールド </ref/models/fields>` を表すオプションの引数"
"です。"

msgid ""
"When combining multiple field types, Django can only determine the "
"``output_field`` if all fields are of the same type. Otherwise, you must "
"provide the ``output_field`` yourself."
msgstr ""
"複数のフィールドタイプを組み合わせる場合、Django が ``output_field`` を決定で"
"きるのは、全てのフィールドタイプが同じ場合だけです。そうでない場合は、 "
"``output_field`` を自分で指定しなければなりません。"

msgid "``filter``"
msgstr "``filter``"

msgid ""
"An optional :class:`Q object <django.db.models.Q>` that's used to filter the "
"rows that are aggregated."
msgstr ""
"オプションで、 :class:`Q オブジェクト <django.db.models.Q>` で、集計する行を"
"フィルタリングします。"

msgid ""
"See :ref:`conditional-aggregation` and :ref:`filtering-on-annotations` for "
"example usage."
msgstr ""
"たとえば :ref:`conditional-aggregation` や :ref:`filtering-on-annotations` を"
"参照してください。"

msgid ""
"An optional argument that allows specifying a value to use as a default "
"value when the queryset (or grouping) contains no entries."
msgstr ""
"オプションの引数で、クエリセット（またはグループ化）にエントリがない場合にデ"
"フォルト値として使用する値を指定できます。"

msgid "``**extra``"
msgstr "``**extra``"

msgid ""
"Keyword arguments that can provide extra context for the SQL generated by "
"the aggregate."
msgstr ""
"集計によって生成されるSQLに追加のコンテキストを提供できるキーワード引数。"

msgid "``Avg``"
msgstr "``Avg``"

msgid ""
"Returns the mean value of the given expression, which must be numeric unless "
"you specify a different ``output_field``."
msgstr ""
"指定した式の平均値を返します。これは、別の ``output_field`` を指定しない限"
"り、必ず数値となります。"

msgid "Default alias: ``<field>__avg``"
msgstr "デフォルトのエイリアス: ``<field>__avg``"

msgid ""
"Return type: ``float`` if input is ``int``, otherwise same as input field, "
"or ``output_field`` if supplied. If the queryset or grouping is empty, "
"``default`` is returned."
msgstr ""
"戻り値の型： 入力が ``int`` の場合は ``float`` を、それ以外の場合は入力フィー"
"ルドと同じものを、 ``output_field`` を指定した場合は ``output_field`` を返し"
"ます。クエリセットまたはグループ化が空の場合は ``default`` を返します。"

msgid ""
"Optional. If ``distinct=True``, ``Avg`` returns the mean value of unique "
"values. This is the SQL equivalent of ``AVG(DISTINCT <field>)``. The default "
"value is ``False``."
msgstr ""
"オプションです。 ``distinct=True`` の場合、 ``Avg`` は一意な値の平均値を返し"
"ます。これは SQL の ``AVG(DISTINCT <field>)`` と等価です。デフォルト値は "
"``False`` です。"

msgid "``Count``"
msgstr "``Count``"

msgid ""
"Returns the number of objects that are related through the provided "
"expression. ``Count('*')`` is equivalent to the SQL ``COUNT(*)`` expression."
msgstr ""
"指定した式で関連付けられたオブジェクトの数を返します。 ``Count('*')`` は SQL "
"の ``COUNT(*)`` 式と等価です。"

msgid "Default alias: ``<field>__count``"
msgstr "デフォルトのエイリアス: ``<field>__count``"

msgid "Return type: ``int``"
msgstr "戻り値の型: ``int``"

msgid ""
"Optional. If ``distinct=True``, the count will only include unique "
"instances. This is the SQL equivalent of ``COUNT(DISTINCT <field>)``. The "
"default value is ``False``."
msgstr ""
"オプションです。 ``distinct=True`` の場合、一意なインスタンスのみをカウントし"
"ます。これは SQL の ``COUNT(DISTINCT <field>)`` と等価です。デフォルト値は "
"``False`` です。"

msgid "``Max``"
msgstr "``Max``"

msgid "Returns the maximum value of the given expression."
msgstr "指定された式の最大値を返します。"

msgid "Default alias: ``<field>__max``"
msgstr "デフォルトのエイリアス: ``<field>__max``"

msgid ""
"Return type: same as input field, or ``output_field`` if supplied. If the "
"queryset or grouping is empty, ``default`` is returned."
msgstr ""
"戻り値の型: 入力フィールドと同じ、または ``output_field`` が指定されている場"
"合は ``output_field`` を返します。クエリセットまたはグループ化が空の場合は "
"``default`` が返されます。"

msgid "``Min``"
msgstr "``Min``"

msgid "Returns the minimum value of the given expression."
msgstr "指定した式の最小値を返します。"

msgid "Default alias: ``<field>__min``"
msgstr "デフォルトのエイリアス: ``<field>__min``"

msgid "``StdDev``"
msgstr "``StdDev``"

msgid "Returns the standard deviation of the data in the provided expression."
msgstr "指定した式のデータの標準偏差を返します。"

msgid "Default alias: ``<field>__stddev``"
msgstr "デフォルトのエイリアス: ``<field>__stddev``"

msgid ""
"Optional. By default, ``StdDev`` returns the population standard deviation. "
"However, if ``sample=True``, the return value will be the sample standard "
"deviation."
msgstr ""
"オプションです。デフォルトでは ``StdDev`` は母集団の標準偏差を返します。ただ"
"し、 ``sample=True`` の場合は、標本の標準偏差が返されます。"

msgid "``Sum``"
msgstr "``Sum``"

msgid "Computes the sum of all values of the given expression."
msgstr "与えられた式のすべての値の合計を計算します。"

msgid "Default alias: ``<field>__sum``"
msgstr "デフォルトのエイリアス: ``<field>__sum``"

msgid ""
"Optional. If ``distinct=True``, ``Sum`` returns the sum of unique values. "
"This is the SQL equivalent of ``SUM(DISTINCT <field>)``. The default value "
"is ``False``."
msgstr ""
"オプションです。 ``distinct=True`` の場合、 ``Sum`` は一意な値の合計を返しま"
"す。これは SQL の ``SUM(DISTINCT )`` と等価です。デフォルト値は ``False`` で"
"す。"

msgid "``Variance``"
msgstr "``Variance``"

msgid "Returns the variance of the data in the provided expression."
msgstr "指定された式のデータの分散を返します。"

msgid "Default alias: ``<field>__variance``"
msgstr "デフォルトのエイリアス: ``<field>__variance``"

msgid ""
"Optional. By default, ``Variance`` returns the population variance. However, "
"if ``sample=True``, the return value will be the sample variance."
msgstr ""
"オプションです。デフォルトでは ``Variance`` は母分散を返します。ただし、 "
"``sample=True`` の場合は、標本の分散を返します。"

msgid "Query-related tools"
msgstr "クエリ関連ツール"

msgid ""
"This section provides reference material for query-related tools not "
"documented elsewhere."
msgstr ""
"このセクションでは、他のセクションで説明されていないクエリ関連ツールの参考資"
"料を提供します。"

msgid "``Q()`` objects"
msgstr "``Q()`` オブジェクト"

msgid ""
"A ``Q()`` object represents an SQL condition that can be used in database-"
"related operations. It's similar to how an :class:`F() <django.db.models.F>` "
"object represents the value of a model field or annotation. They make it "
"possible to define and reuse conditions. These can be negated using the "
"``~`` (``NOT``) operator, and combined using operators such as ``|`` "
"(``OR``), ``&`` (``AND``), and ``^`` (``XOR``). See :ref:`complex-lookups-"
"with-q`."
msgstr ""
"``Q()`` オブジェクトは、データベース関連の操作で使用できるSQL条件を表します。"
"これは、:class:`F() <django.db.models.F>` オブジェクトがモデルフィールドや注"
"釈の値を表すのと似ています。これにより、条件を定義して再利用することが可能に"
"なります。これらは ``~`` （``NOT``）演算子を使って否定することができ、``|`` "
"（``OR``）、``&`` （``AND``）、``^`` （``XOR``）などの演算子も組み合わせて使"
"えます。詳細は :ref:`complex-lookups-with-q` を参照してください。"

msgid "``Prefetch()`` objects"
msgstr "``Prefetch()`` オブジェクト"

msgid ""
"The ``Prefetch()`` object can be used to control the operation of :meth:"
"`~django.db.models.query.QuerySet.prefetch_related()`."
msgstr ""
"``Prefetch()`` オブジェクトは :meth:`~django.db.models.query.QuerySet."
"prefetch_related()` の動作を制御するために使用できます。"

msgid ""
"The ``lookup`` argument describes the relations to follow and works the same "
"as the string based lookups passed to :meth:`~django.db.models.query."
"QuerySet.prefetch_related()`. For example:"
msgstr ""
"引数 ``lookup`` にはたどるリレーションを記述し、 :meth:`~django.db.models."
"query.QuerySet.prefetch_related()` に渡す文字列ベースのルックアップと同じよう"
"に動作します。たとえば、次のようにします:"

msgid ""
"The ``queryset`` argument supplies a base ``QuerySet`` for the given lookup. "
"This is useful to further filter down the prefetch operation, or to call :"
"meth:`~django.db.models.query.QuerySet.select_related()` from the prefetched "
"relation, hence reducing the number of queries even further:"
msgstr ""
"``queryset`` 引数には、与えられたルックアップのベースとなる ``QuerySet`` を指"
"定します。これは、プリフェッチ操作をさらに絞り込んだり、 プリフェッチされたリ"
"レーションから :meth:`~django.db.models.query.QuerySet.select_related()` を呼"
"び出してクエリの数をさらに減らしたりするのに便利です:"

msgid ""
"The ``to_attr`` argument sets the result of the prefetch operation to a "
"custom attribute:"
msgstr ""
"引数 ``to_attr`` は、プリフェッチ操作の結果をカスタム属性にセットします:"

msgid ""
"When using ``to_attr`` the prefetched result is stored in a list. This can "
"provide a significant speed improvement over traditional "
"``prefetch_related`` calls which store the cached result within a "
"``QuerySet`` instance."
msgstr ""
"``to_attr`` を使用すると、プリフェッチされた結果はリストに格納されます。これ"
"は、キャッシュされた結果を ``QuerySet`` インスタンスに格納する従来の "
"``prefetch_related`` 呼び出しよりも大幅に速度を向上させることができます。"

msgid "``prefetch_related_objects()``"
msgstr "``prefetch_related_objects()``"

msgid "*Asynchronous version*: ``aprefetch_related_objects()``"
msgstr "*非同期バージョン*: ``aprefetch_related_objects()``"

msgid ""
"Prefetches the given lookups on an iterable of model instances. This is "
"useful in code that receives a list of model instances as opposed to a "
"``QuerySet``; for example, when fetching models from a cache or "
"instantiating them manually."
msgstr ""
"与えられたルックアップをモデルインスタンスのイテラブルでプリフェッチします。"
"これは ``クエリセット`` とは対照的に、モデルインスタンスのリストを受け取る"
"コードで有用です。たとえば、キャッシュからモデルを取得するときや、手動でイン"
"スタンスを作成するときなどです。"

msgid ""
"Pass an iterable of model instances (must all be of the same class) and the "
"lookups or :class:`Prefetch` objects you want to prefetch for. For example:"
msgstr ""
"同じクラスのモデルインスタンスのイテラブルと、プリフェッチしたいルックアップ"
"または :class:`Prefetch` オブジェクトを渡します。例えば："

msgid ""
"When using multiple databases with ``prefetch_related_objects``, the "
"prefetch query will use the database associated with the model instance. "
"This can be overridden by using a custom queryset in a related lookup."
msgstr ""
"複数のデータベースを ``prefetch_related_objects`` で使用する場合、プリフェッ"
"チクエリはモデルインスタンスに関連付けられたデータベースを使用します。これ"
"は、リレーションのルックアップでカスタムクエリセットを使用することで上書きで"
"きます。"

msgid "``aprefetch_related_objects()`` function was added."
msgstr "``aprefetch_related_objects()`` 関数が追加されました。"

msgid "``FilteredRelation()`` objects"
msgstr "``FilteredRelation()`` オブジェクト"

msgid "The name of the field on which you'd like to filter the relation."
msgstr "リレーションをフィルタしたいフィールドの名前"

msgid "A :class:`~django.db.models.Q` object to control the filtering."
msgstr ""
"フィルタリングを制御する :class:`~django.db.models.Q` オブジェクトです。"

msgid ""
"``FilteredRelation`` is used with :meth:`~.QuerySet.annotate()` to create an "
"``ON`` clause when a ``JOIN`` is performed. It doesn't act on the default "
"relationship but on the annotation name (``pizzas_vegetarian`` in example "
"below)."
msgstr ""
"``FilteredRelation`` は :meth:`~.QuerySet.annotate()` と共に使用し、 "
"``JOIN`` 時に ``ON`` 句を作成します。これはデフォルトのリレーションシップでは"
"なく、アノテーション名 (下の例では ``pizzas_vegetarian``) に対して動作しま"
"す。"

msgid ""
"For example, to find restaurants that have vegetarian pizzas with "
"``'mozzarella'`` in the name:"
msgstr ""
"たとえば、名前に「モッツァレラチーズ」が入っているベジタリアンのピザがあるレ"
"ストランを探す場合、次のようにします:"

msgid ""
"If there are a large number of pizzas, this queryset performs better than:"
msgstr ""
"ピザが大量にある場合、上記のクエリセットの方が下記より良いパフォーマンスを発"
"揮します:"

msgid ""
"because the filtering in the ``WHERE`` clause of the first queryset will "
"only operate on vegetarian pizzas."
msgstr ""
"なぜなら、1つめのクエリセットの ``WHERE`` 句のフィルタリングはベジタリアンの"
"ピザに対してのみ行われるからです。"

msgid "``FilteredRelation`` doesn't support:"
msgstr "``FilteredRelation`` は下記をサポートしていません。"

msgid ":meth:`.QuerySet.only` and :meth:`~.QuerySet.prefetch_related`."
msgstr ""
":meth:`.QuerySet.only` と :meth:`~.QuerySet.prefetch_related` メソッド。"

msgid ""
"A :class:`~django.contrib.contenttypes.fields.GenericForeignKey` inherited "
"from a parent model."
msgstr ""
"親モデルから継承された :class:`~django.contrib.contenttypes.fields."
"GenericForeignKey` 。"

msgid "Related objects reference"
msgstr "リレーション先オブジェクトのリファレンス"

msgid ""
"A \"related manager\" is a manager used in a one-to-many or many-to-many "
"related context. This happens in two cases:"
msgstr ""
"\"関係マネージャ（related manager）\"とは、1対多または多対多の関係するコンテ"
"キストで使用されるマネージャのことです。これは2つのケースで起こります:"

msgid ""
"The \"other side\" of a :class:`~django.db.models.ForeignKey` relation. That "
"is::"
msgstr ""
":class:`~django.db.models.ForeignKey` リレーションの \"反対側\"。つまり:"

msgid ""
"In the above example, the methods below will be available on the manager "
"``blog.entry_set``."
msgstr ""
"上記の例では、以下のメソッドがマネージャ ``blog.entry_set`` で利用可能です。"

msgid "Both sides of a :class:`~django.db.models.ManyToManyField` relation ::"
msgstr ":class:`~django.db.models.ManyToManyField` リレーションの両側:"

msgid ""
"In this example, the methods below will be available both on ``topping."
"pizza_set`` and on ``pizza.toppings``."
msgstr ""
"この例では、以下のメソッドは ``topping.pizza_set`` と ``pizza.toppings`` の両"
"方で利用できます。"

msgid "*Asynchronous version*: ``aadd``"
msgstr "*非同期バージョン*: ``aadd()``"

msgid "Adds the specified model objects to the related object set."
msgstr ""
"リレーション先オブジェクトのセットに、指定したモデルオブジェクトを追加しま"
"す。"

msgid ""
"In the example above, in the case of a :class:`~django.db.models.ForeignKey` "
"relationship, :meth:`QuerySet.update() <django.db.models.query.QuerySet."
"update>` is used to perform the update. This requires the objects to already "
"be saved."
msgstr ""
"上の例では、 :class:`~django.db.models.ForeignKey` リレーションの場合、 :"
"meth:`QuerySet.update() <django.db.models.query.QuerySet.update>` を使って更"
"新を行います。これにはオブジェクトが既に保存されている必要があります。"

msgid ""
"You can use the ``bulk=False`` argument to instead have the related manager "
"perform the update by calling ``e.save()``."
msgstr ""
"引数 ``bulk=False`` を使用することで、関係マネージャが ``e.save()`` を呼び出"
"して更新を行うことができます。"

msgid ""
"Using ``add()`` with a many-to-many relationship, however, will not call any "
"``save()`` methods (the ``bulk`` argument doesn't exist), but rather create "
"the relationships using :meth:`QuerySet.bulk_create() <django.db.models."
"query.QuerySet.bulk_create>`. If you need to execute some custom logic when "
"a relationship is created, listen to the :data:`~django.db.models.signals."
"m2m_changed` signal, which will trigger ``pre_add`` and ``post_add`` actions."
msgstr ""
"しかし、多対多のリレーションシップで ``add()`` を使用すると、 ``save()`` メ"
"ソッドは呼び出しません (``bulk`` 引数は存在しません)。 :meth:`QuerySet."
"bulk_create() <django.db.models.query.QuerySet.bulk_create>` を使用してリレー"
"ションシップを作成します。リレーションシップの作成時にカスタムロジックを実行"
"する必要がある場合は、 :data:`~django.db.models.signals.m2m_changed` シグナル"
"を待ち受けます。"

msgid ""
"Using ``add()`` on a relation that already exists won't duplicate the "
"relation, but it will still trigger signals."
msgstr ""
"すでに存在するリレーションに ``add()`` を使っても、リレーションは複製されませ"
"んが、シグナルは発生します。"

msgid ""
"For many-to-many relationships ``add()`` accepts either model instances or "
"field values, normally primary keys, as the ``*objs`` argument."
msgstr ""
"多対多のリレーションシップの場合、 ``add()`` は ``*objs`` 引数としてモデルイ"
"ンスタンスかフィールドの値（通常は主キー）を受け付けます。"

msgid ""
"Use the ``through_defaults`` argument to specify values for the new :ref:"
"`intermediate model <intermediary-manytomany>` instance(s), if needed. You "
"can use callables as values in the ``through_defaults`` dictionary and they "
"will be evaluated once before creating any intermediate instance(s)."
msgstr ""
"必要であれば、引数 ``through_defaults`` を使用して、新しい :ref:`中間モデル "
"<intermediary-manytomany>` インスタンスの値を指定します。呼び出し可能オブジェ"
"クトを ``through_defaults`` 辞書の値として使用することができ、中間インスタン"
"スを作成する前に一度だけ評価されます。"

msgid "``aadd()`` method was added."
msgstr "``aadd()`` メソッドが追加されました。"

msgid "*Asynchronous version*: ``acreate``"
msgstr "*非同期バージョン*: ``acreate()``"

msgid ""
"Creates a new object, saves it and puts it in the related object set. "
"Returns the newly created object:"
msgstr ""
"新しいオブジェクトを作成して保存し、リレーション先オブジェクトのセットに入れ"
"ます。新しく作成されたオブジェクトを返します:"

msgid "This is equivalent to (but simpler than):"
msgstr "これは下記のコードと等価です（しかし、よりシンプルです）:"

msgid ""
"Note that there's no need to specify the keyword argument of the model that "
"defines the relationship. In the above example, we don't pass the parameter "
"``blog`` to ``create()``. Django figures out that the new ``Entry`` object's "
"``blog`` field should be set to ``b``."
msgstr ""
"リレーションシップを定義するモデルのキーワード引数を指定する必要はないことに"
"注意してください。上の例では、 ``create()`` にパラメータ ``blog`` を渡してい"
"ません。Django は新しい ``Entry`` オブジェクトの ``blog`` フィールドを ``b`` "
"に設定すべきであると判断します。"

msgid ""
"Use the ``through_defaults`` argument to specify values for the new :ref:"
"`intermediate model <intermediary-manytomany>` instance, if needed. You can "
"use callables as values in the ``through_defaults`` dictionary."
msgstr ""
"必要であれば、 ``through_defaults`` 引数を使用して、新しい :ref:`中間モデル "
"<intermediary-manytomany>` インスタンスの値を指定します。呼び出し可能オブジェ"
"クトを ``through_defaults`` 辞書の値として使用できます。"

msgid "*Asynchronous version*: ``aremove``"
msgstr "*非同期バージョン*: ``aremove()``"

msgid "Removes the specified model objects from the related object set:"
msgstr ""
"リレーション先オブジェクトのセットから指定されたモデルオブジェクトを削除しま"
"す:"

msgid ""
"Similar to :meth:`add()`, ``e.save()`` is called in the example above to "
"perform the update. Using ``remove()`` with a many-to-many relationship, "
"however, will delete the relationships using :meth:`QuerySet.delete()<django."
"db.models.query.QuerySet.delete>` which means no model ``save()`` methods "
"are called; listen to the :data:`~django.db.models.signals.m2m_changed` "
"signal if you wish to execute custom code when a relationship is deleted."
msgstr ""
"上記の例では :meth:`add()` と同様に ``e.save()`` が呼び出されて更新が行われま"
"す。しかし、多対多のリレーションシップで ``remove()`` を使用すると、 :meth:"
"`QuerySet.delete()<django.db.models.query.QuerySet.delete>` を使用してリレー"
"ションシップを削除するので、モデルの ``save()`` メソッドは呼び出されません。"
"リレーションシップが削除されたときにカスタムコードを実行したい場合は、 :data:"
"`~django.db.models.signals.m2m_changed` シグナルを待ち受けます。"

msgid ""
"For many-to-many relationships ``remove()`` accepts either model instances "
"or field values, normally primary keys, as the ``*objs`` argument."
msgstr ""
"多対多のリレーションシップの場合、 ``remove()`` は ``*objs`` 引数としてモデル"
"インスタンスかフィールドの値（通常は主キー）を受け付けます。"

msgid ""
"For :class:`~django.db.models.ForeignKey` objects, this method only exists "
"if ``null=True``. If the related field can't be set to ``None`` (``NULL``), "
"then an object can't be removed from a relation without being added to "
"another. In the above example, removing ``e`` from ``b.entry_set()`` is "
"equivalent to doing ``e.blog = None``, and because the ``blog`` :class:"
"`~django.db.models.ForeignKey` doesn't have ``null=True``, this is invalid."
msgstr ""
":class:`~django.db.models.ForeignKey` オブジェクトでは、このメソッドは "
"``null=True`` の場合のみ存在します。リレーション先フィールドを ``None`` "
"(``NULL``) に設定できない場合、リレーション先オブジェクトを別のオブジェクトに"
"追加せずに削除することはできません。上の例では、 ``b.entry_set()`` から "
"``e`` を削除することは ``e.blog = None`` と等価であり、 ``blog`` :class:"
"`~django.db.models.ForeignKey` には ``null=True`` がないので、これは無効で"
"す。"

msgid ""
"For :class:`~django.db.models.ForeignKey` objects, this method accepts a "
"``bulk`` argument to control how to perform the operation. If ``True`` (the "
"default), ``QuerySet.update()`` is used. If ``bulk=False``, the ``save()`` "
"method of each individual model instance is called instead. This triggers "
"the :data:`~django.db.models.signals.pre_save` and :data:`~django.db.models."
"signals.post_save` signals and comes at the expense of performance."
msgstr ""
":class:`~django.db.models.ForeignKey` オブジェクトの場合、このメソッドは "
"``bulk`` 引数を受け取り、操作の実行方法を制御します。もし ``True`` (デフォル"
"ト) なら、 ``QuerySet.update()`` が使用されます。もし ``bulk=False`` なら、代"
"わりに個々のモデルインスタンスの ``save()`` メソッドが呼び出されます。これは"
"パフォーマンスを犠牲にし、 :data:`~django.db.models.signals.pre_save` シグナ"
"ルと :data:`~django.db.models.signals.post_save` シグナルをトリガーします。"

msgid ""
"For many-to-many relationships, the ``bulk`` keyword argument doesn't exist."
msgstr ""
"多対多のリレーションシップの場合、キーワード引数 ``bulk`` は存在しません。"

msgid "``aremove()`` method was added."
msgstr "``aremove()`` メソッドが追加されました。"

msgid "*Asynchronous version*: ``aclear``"
msgstr "*非同期バージョン*: ``aclear()``"

msgid "Removes all objects from the related object set:"
msgstr ""
"リレーション先オブジェクトのセットからすべてのオブジェクトを削除します:"

msgid ""
"Note this doesn't delete the related objects -- it just disassociates them."
msgstr ""
"これはリレーション先のオブジェクトを削除するのではなく、単に関連付けを解除す"
"るだけであることに注意してください。"

msgid ""
"Just like ``remove()``, ``clear()`` is only available on :class:`~django.db."
"models.ForeignKey`\\s where ``null=True`` and it also accepts the ``bulk`` "
"keyword argument."
msgstr ""
"``remove()`` と同様に、 ``clear()`` は :class:`~django.db.models.ForeignKey` "
"で ``null=True`` の場合にのみ使用可能で、 ``bulk`` キーワード引数も受け付けま"
"す。"

msgid "``aclear()`` method was added."
msgstr "``aclear()`` メソッドが追加されました。"

msgid "*Asynchronous version*: ``aset``"
msgstr "*非同期バージョン*: ``aset()``"

msgid "Replace the set of related objects:"
msgstr "リレーション先のオブジェクトのセットを置き換えます:"

msgid ""
"This method accepts a ``clear`` argument to control how to perform the "
"operation. If ``False`` (the default), the elements missing from the new set "
"are removed using ``remove()`` and only the new ones are added. If "
"``clear=True``, the ``clear()`` method is called instead and the whole set "
"is added at once."
msgstr ""
"このメソッドには ``clear`` 引数を渡すことができます。もし ``False`` (デフォル"
"ト) なら、 ``remove()`` を使って新しいセットから欠けている要素を削除し、新し"
"い要素だけを追加します。もし ``clear=True`` なら、代わりに ``clear()`` メソッ"
"ドが呼び出され、セット全体が一度に追加されます。"

msgid ""
"For :class:`~django.db.models.ForeignKey` objects, the ``bulk`` argument is "
"passed on to :meth:`add` and :meth:`remove`."
msgstr ""
":class:`~django.db.models.ForeignKey` オブジェクトの場合、 ``bulk`` 引数は :"
"meth:`add` と :meth:`remove` に渡されます。"

msgid ""
"Note that since ``set()`` is a compound operation, it is subject to race "
"conditions. For instance, new objects may be added to the database in "
"between the call to ``clear()`` and the call to ``add()``."
msgstr ""
"``set()`` は複合操作であるため、競合状態になりやすいことに注意してください。"
"例えば、 ``clear()`` を呼び出してから ``add()`` を呼び出すまでの間に、新しい"
"オブジェクトがデータベースに追加される可能性があります。"

msgid ""
"For many-to-many relationships ``set()`` accepts a list of either model "
"instances or field values, normally primary keys, as the ``objs`` argument."
msgstr ""
"多対多のリレーションシップの場合、 ``set()`` は ``objs`` 引数としてモデルイン"
"スタンスかフィールド値（通常は主キー）のリストを受け付けます。"

msgid "``aset()`` method was added."
msgstr "``aset()`` メソッドが追加されました。"

msgid ""
"Note that ``add()``, ``aadd()``, ``create()``, ``acreate()``, ``remove()``, "
"``aremove()``, ``clear()``, ``aclear()``, ``set()``, and ``aset()`` all "
"apply database changes immediately for all types of related fields. In other "
"words, there is no need to call ``save()``/``asave()`` on either end of the "
"relationship."
msgstr ""
"``add()``, ``aadd()``, ``create()``, ``acreate()``, ``remove()``, "
"``aremove()``, ``clear()``, ``aclear()``, ``set()``, そして ``aset()`` はすべ"
"て、すべてのタイプのリレーション先のフィールドに対してデータベースの変更を即"
"座に適用することに注意してください。つまり、リレーションシップのどちらの側で"
"も ``save()``/``asave()`` を呼び出す必要はありません。"

msgid ""
"If you use :meth:`~django.db.models.query.QuerySet.prefetch_related`, the "
"``add()``, ``aadd()``, ``remove()``, ``aremove()``, ``clear()``, "
"``aclear()``, ``set()``, and ``aset()`` methods clear the prefetched cache."
msgstr ""
":meth:`~django.db.models.query.QuerySet.prefetch_related` を使用すると、 "
"``add()``, ``aadd()``, ``remove()``, ``aremove()``, ``clear()``, "
"``aclear()``, ``set()``, ``aset()`` メソッドがプリフェッチキャッシュをクリア"
"します。"

msgid "Paginator"
msgstr "ページ分割 (Paginator)"

msgid ""
"Django provides a few classes that help you manage paginated data -- that "
"is, data that's split across several pages, with \"Previous/Next\" links. "
"These classes live in :source:`django/core/paginator.py`."
msgstr ""
"Django はページ分割されたデータを管理するのに役立ついくつかのクラスを提供して"
"います。これらのクラスは :source:`django/core/paginator.py` にあります。"

msgid ""
"For examples, see the :doc:`Pagination topic guide </topics/pagination>`."
msgstr ""
"例については :doc:`ページ分割 (Pagination) のトピックガイド </topics/"
"pagination>` を参照してください。"

msgid "``Paginator`` class"
msgstr "``Paginator`` class"

msgid ""
"A paginator acts like a sequence of :class:`Page` when using ``len()`` or "
"iterating it directly."
msgstr ""
"Paginator（ページネーター）は ``len()`` の使用時、または直接イテレートしたと"
"きは :class:`Page` のシーケンスのように動作します。"

msgid ""
"Required. A list, tuple, ``QuerySet``, or other sliceable object with a "
"``count()`` or ``__len__()`` method. For consistent pagination, "
"``QuerySet``\\s should be ordered, e.g. with an :meth:`~django.db.models."
"query.QuerySet.order_by` clause or with a default :attr:`~django.db.models."
"Options.ordering` on the model."
msgstr ""
"必須です。リスト、タプル、``QuerySet``、または ``count()`` または "
"``__len__()`` メソッドを持つその他のスライス可能なオブジェクト。一貫したペー"
"ジ分割のためには、``QuerySet`` は順序付けされるべきです。たとえば、:meth:"
"`~django.db.models.query.QuerySet.order_by` 句を使用するか、モデル上のデフォ"
"ルトの :attr:`~django.db.models.Options.ordering` で行います。"

msgid "Performance issues paginating large ``QuerySet``\\s"
msgstr "巨大な ``QuerySet`` のページ分割によるパフォーマンス上の問題"

msgid ""
"If you're using a ``QuerySet`` with a very large number of items, requesting "
"high page numbers might be slow on some databases, because the resulting "
"``LIMIT``/``OFFSET`` query needs to count the number of ``OFFSET`` records "
"which takes longer as the page number gets higher."
msgstr ""
"非常に多数のアイテムを持つ ``QuerySet`` を使用した場合、数の大きいページをリ"
"クエストしたときに、データベースによっては速度が低下する場合があります。これ"
"は、``OFFSET`` 数を数えるために必要な ``LIMIT``/``OFFSET`` クエリの処理時間"
"が、ページ数が増えるにつれて長くなってしまうためです。"

msgid ""
"Required. The maximum number of items to include on a page, not including "
"orphans (see the :attr:`~Paginator.orphans` optional argument below)."
msgstr ""
"必須です。ページ上に含めるアイテムの最大数で、孤立アイテムは含みません（以下"
"の :attr:`~Paginator.orphans` オプション引数を参照）。"

msgid ""
"Optional. Use this when you don't want to have a last page with very few "
"items. If the last page would normally have a number of items less than or "
"equal to ``orphans``, then those items will be added to the previous page "
"(which becomes the last page) instead of leaving the items on a page by "
"themselves. For example, with 23 items, ``per_page=10``, and ``orphans=3``, "
"there will be two pages; the first page with 10 items and the second (and "
"last) page with 13 items. ``orphans`` defaults to zero, which means pages "
"are never combined and the last page may have one item."
msgstr ""
"オプション。アイテム数が非常に少ない最終ページを作りたくない場合に使用しま"
"す。もし最後のページに通常 ``orphans`` 以下の数のアイテムがある場合、それらの"
"アイテムはそれだけで1ページに残すのではなく、前のページ（これが最後のページ）"
"に追加されます。たとえば、23個のアイテムがあり、 ``per_page=10``、"
"``orphans=3`` の場合、最初のページには10個のアイテムが表示され、2ページ目（最"
"後のページ）には13個のアイテムが表示されます。 ``orphans`` のデフォルトは0で"
"す。つまり、ページが結合されることはなく、最後のページには1つのアイテムしか表"
"示されないかもしれません。"

msgid ""
"Optional. Whether or not the first page is allowed to be empty.  If "
"``False`` and ``object_list`` is  empty, then an ``EmptyPage`` error will be "
"raised."
msgstr ""
"オプション。最初のページが空であることを許可するかどうか。 もし ``False`` で "
"``object_list`` が空の場合、 ``EmptyPage`` エラーが発生します。"

msgid ""
"The ``error_messages`` argument lets you override the default messages that "
"the paginator will raise. Pass in a dictionary with keys matching the error "
"messages you want to override. Available error message keys are: "
"``invalid_page``, ``min_page``, and ``no_results``."
msgstr ""
"``error_messages`` 引数を指定すると、paginator がデフォルトで返すメッセージを"
"上書きできます。オーバーライドしたいエラーメッセージにマッチするキーを持つ辞"
"書を渡します。使用可能なエラーメッセージのキーは ``invalid_page``, "
"``min_page``, ``no_results`` です。"

msgid "For example, here is the default error message:"
msgstr "たとえば、デフォルトのエラーメッセージは以下のようなものです："

msgid ""
"Returns a :class:`Page` object with the given 1-based index, while also "
"handling out of range and invalid page numbers."
msgstr ""
"1から始まるインデックスをもつ :class:`Page` オブジェクトを返します。このオブ"
"ジェクトは、範囲外のページ数や無効なページ数もハンドリングします。"

msgid ""
"If the page isn't a number, it returns the first page. If the page number is "
"negative or greater than the number of pages, it returns the last page."
msgstr ""
"与えられた値が数字でなかった場合は、最初のページを返します。ページ数が負の数"
"や全体のページ数より大きかった場合は、最後のページを返します。"

msgid ""
"Raises an :exc:`EmptyPage` exception only if you specify ``Paginator(..., "
"allow_empty_first_page=False)`` and the ``object_list`` is empty."
msgstr ""
"``Paginator(..., allow_empty_first_page=False)`` を指定し、 ``object_list`` "
"が空の場合にのみ :exc:`EmptyPage` 例外を発生させます。"

msgid ""
"Returns a :class:`Page` object with the given 1-based index. Raises :exc:"
"`PageNotAnInteger` if the ``number`` cannot be converted to an integer by "
"calling ``int()``. Raises :exc:`EmptyPage` if the given page number doesn't "
"exist."
msgstr ""
"1から始まるインデックスを持つ :class:`Page` オブジェクトを返します。数値 "
"``number`` が ``int()`` を呼び出して整数に変換できない場合、 :exc:"
"`PageNotAnInteger` を発生させます。指定されたページ番号が存在しない場合、 :"
"exc:`EmptyPage` を発生させます。"

msgid ""
"Returns a 1-based list of page numbers similar to :attr:`Paginator."
"page_range`, but may add an ellipsis to either or both sides of the current "
"page number when :attr:`Paginator.num_pages` is large."
msgstr ""
":attr:`Paginator.page_range` に似た1から始まるページ番号のリストを返します"
"が、 :attr:`Paginator.num_pages` が大きい場合は、現在のページ番号のどちらか一"
"方または両方に省略記号を追加します。"

msgid ""
"The number of pages to include on each side of the current page number is "
"determined by the ``on_each_side`` argument which defaults to 3."
msgstr ""
"現在のページ番号の両側に含めるページ数は ``on_each_side`` 引数で決まり、デ"
"フォルトは3です。"

msgid ""
"The number of pages to include at the beginning and end of page range is "
"determined by the ``on_ends`` argument which defaults to 2."
msgstr ""
"ページ範囲の最初と最後に含めるページ数は ``on_ends`` 引数で指定します。デフォ"
"ルトは2です。"

msgid ""
"For example, with the default values for ``on_each_side`` and ``on_ends``, "
"if the current page is 10 and there are 50 pages, the page range will be "
"``[1, 2, '…', 7, 8, 9, 10, 11, 12, 13, '…', 49, 50]``. This will result in "
"pages 7, 8, and 9 to the left of and 11, 12, and 13 to the right of the "
"current page as well as pages 1 and 2 at the start and 49 and 50 at the end."
msgstr ""
"たとえば、``on_each_side`` と ``on_ends`` をデフォルトの値で設定した場合、現"
"在のページが10で50ページある場合、ページ範囲は ``[1, 2, '...', 7, 8, 9, 10, "
"11, 12, 13, '...', 49, 50]`` となります。これにより、現在のページの左側に7、"
"8、9ページ、右側に11、12、13ページが、また、最初に1、2ページ、最後に49、50"
"ページが表示されます。"

msgid "Raises :exc:`InvalidPage` if the given page number doesn't exist."
msgstr ""
"指定されたページ番号が存在しない場合は :exc:`InvalidPage` を発生させます。"

msgid ""
"A translatable string used as a substitute for elided page numbers in the "
"page range returned by :meth:`~Paginator.get_elided_page_range`. Default is "
"``'…'``."
msgstr ""
":meth:`~Paginator.get_elided_page_range` によって返されるページ範囲において、"
"ページ番号の代わりに使用される翻訳可能な文字列です。デフォルトは ``'...'`` で"
"す。"

msgid "The total number of objects, across all pages."
msgstr "全ページにわたるオブジェクトの総数。"

msgid ""
"When determining the number of objects contained in ``object_list``, "
"``Paginator`` will first try calling ``object_list.count()``. If "
"``object_list`` has no ``count()`` method, then ``Paginator`` will fall back "
"to using ``len(object_list)``. This allows objects, such as ``QuerySet``, to "
"use a more efficient ``count()`` method when available."
msgstr ""
"オブジェクトリスト ``object_list`` に含まれるオブジェクトの数を決定する場"
"合、 ``Paginator`` はまず ``object_list.count()`` を呼び出します。もし "
"``object_list`` に ``count()`` メソッドがなければ、 ``Paginator`` は "
"``len(object_list)`` を使用します。これにより、 ``QuerySet`` などのオブジェク"
"トは、より効率的な ``count()`` メソッドを使用できます。"

msgid "The total number of pages."
msgstr "トータルのページ数"

msgid ""
"A 1-based range iterator of page numbers, e.g. yielding ``[1, 2, 3, 4]``."
msgstr ""
"1から始まるページ数の範囲のイテレータです。たとえば、``[1, 2, 3, 4]`` を生成"
"します。"

msgid "``Page`` class"
msgstr "``Page`` クラス"

msgid ""
"You usually won't construct ``Page`` objects by hand -- you'll get them by "
"iterating :class:`Paginator`, or by using :meth:`Paginator.page`."
msgstr ""
"通常は ``Page`` オブジェクトを手動で構築することはありません。 :class:"
"`Paginator` をイテレートするか、 :meth:`Paginator.page` を使ってオブジェクト"
"を取得します。"

msgid ""
"A page acts like a sequence of :attr:`Page.object_list` when using ``len()`` "
"or iterating it directly."
msgstr ""
"1つのページは、``len()`` を使ったり直接イテレーションした時、:attr:`Page."
"object_list` のシーケンスのように動作します。"

msgid "Returns ``True`` if there's a next page."
msgstr "次のページが存在する時、``True`` を返します。"

msgid "Returns ``True`` if there's a previous page."
msgstr "前のページが存在する時、``True`` を返します。"

msgid "Returns ``True`` if there's a next **or** previous page."
msgstr "次のページ **または** 前のページがある場合、 ``True`` を返します。"

msgid ""
"Returns the next page number. Raises :exc:`InvalidPage` if next page doesn't "
"exist."
msgstr ""
"次のページ数を返します。次のページが存在しないときは :exc:`InvalidPage` 例外"
"を起こします。"

msgid ""
"Returns the previous page number. Raises :exc:`InvalidPage` if previous page "
"doesn't exist."
msgstr ""
"前のページ数を返します。前のページが存在しないときは :exc:`InvalidPage` 例外"
"を起こします。"

msgid ""
"Returns the 1-based index of the first object on the page, relative to all "
"of the objects in the paginator's list. For example, when paginating a list "
"of 5 objects with 2 objects per page, the second page's :meth:`~Page."
"start_index` would return ``3``."
msgstr ""
"ページ上の最初のオブジェクトに対する、1から始まるインデックスを返します。これ"
"は、ページネータのリストに含まれる全オブジェクトに対するインデックスです。た"
"とえば、5個のオブジェクトのリストを各ページ2オブジェクトでページ分割している"
"場合、2ページ目の :meth:`~Page.start_index` は ``3`` を返すでしょう。"

msgid ""
"Returns the 1-based index of the last object on the page, relative to all of "
"the objects in the paginator's list. For example, when paginating a list of "
"5 objects with 2 objects per page, the second page's :meth:`~Page.end_index` "
"would return ``4``."
msgstr ""
"ページ上の最後のオブジェクトに対する、1から始まるインデックスを返します。これ"
"は、ページネータのリストに含まれる全オブジェクトに対するインデックスです。た"
"とえば、5個のオブジェクトのリストを各ページ2オブジェクトでページ分割している"
"場合、2ページ目の :meth:`~Page.end_index` は ``4`` を返すでしょう。"

msgid "The list of objects on this page."
msgstr "当該のページに含まれるオブジェクトのリストです。"

msgid "The 1-based page number for this page."
msgstr "1から数えた現在のページのページ数です。"

msgid "The associated :class:`Paginator` object."
msgstr "関連する :class:`Paginator` オブジェクトです。"

msgid ""
"A base class for exceptions raised when a paginator is passed an invalid "
"page number."
msgstr ""
"pagenator に無効なページ数が渡された時に発生する例外のベースクラスです。"

msgid ""
"The :meth:`Paginator.page` method raises an exception if the requested page "
"is invalid (i.e. not an integer) or contains no objects. Generally, it's "
"enough to catch the ``InvalidPage`` exception, but if you'd like more "
"granularity, you can catch either of the following exceptions:"
msgstr ""
":meth:`Paginator.page` メソッドは、リクエストされたページが無効 (つまり整数で"
"はない) か、オブジェクトが含まれていない場合に例外を発生させます。通常、 "
"``InvalidPage`` 例外をキャッチすれば十分ですが、より詳細に例外をキャッチした"
"い場合は、以下のいずれかの例外をキャッチします："

msgid ""
"Raised when :meth:`~Paginator.page` is given a value that isn't an integer."
msgstr ":meth:`~Paginator.page` に整数でない値が与えられた時に発生します。"

msgid ""
"Raised when :meth:`~Paginator.page` is given a valid value but no objects "
"exist on that page."
msgstr ""
":meth:`~Paginator.page` に有効な値が与えられているが、そのページにオブジェク"
"トが存在しない場合に発生します。"

msgid ""
"Both of the exceptions are subclasses of :exc:`InvalidPage`, so you can "
"handle them both with ``except InvalidPage``."
msgstr ""
"どちらの例外も :exc:`InvalidPage` のサブクラスなので、 ``except "
"InvalidPage`` で処理できます。"

msgid "Request and response objects"
msgstr "リクエストとレスポンスのオブジェクト"

msgid "Quick overview"
msgstr "簡単な概要"

msgid ""
"Django uses request and response objects to pass state through the system."
msgstr ""
"Django は、システムを通じてステータスを渡すために、リクエストとレスポンスのオ"
"ブジェクトを使います。"

msgid ""
"When a page is requested, Django creates an :class:`HttpRequest` object that "
"contains metadata about the request. Then Django loads the appropriate view, "
"passing the :class:`HttpRequest` as the first argument to the view function. "
"Each view is responsible for returning an :class:`HttpResponse` object."
msgstr ""
"あるページがリクエストされたとき、Django はリクエストに関するメタデータを含ん"
"だ :class:`HttpRequest` オブジェクトを生成します。それから Django は :class:"
"`HttpRequest` をビュー関数の最初の関数として渡し、適切なビューを読み込みま"
"す。あらゆるビューは :class:`HttpResponse` オブジェクトを返す必要があります。"

msgid ""
"This document explains the APIs for :class:`HttpRequest` and :class:"
"`HttpResponse` objects, which are defined in the :mod:`django.http` module."
msgstr ""
"このドキュメントでは、:class:`HttpRequest` と :class:`HttpResponse` オブジェ"
"クトの API を説明しています。これは :mod:`django.http` モジュールにて定義され"
"ています。"

msgid "``HttpRequest`` objects"
msgstr "``HttpRequest`` オブジェクト"

msgid "All attributes should be considered read-only, unless stated otherwise."
msgstr "特に記載がない限り、全ての属性は読み取り専用だと考えてください。"

msgid ""
"A string representing the scheme of the request (``http`` or ``https`` "
"usually)."
msgstr "リクエストのスキームを表す文字列です (通常は ``http`` か ``https``)。"

msgid ""
"The raw HTTP request body as a bytestring. This is useful for processing "
"data in different ways than conventional HTML forms: binary images, XML "
"payload etc. For processing conventional form data, use :attr:`HttpRequest."
"POST`."
msgstr ""
"生の HTTP リクエストボディをバイト文字列として。これは、従来の HTML フォーム"
"とは異なる方法でデータを処理するのに便利です：バイナリイメージ、XML ペイロー"
"ドなど。従来のフォームデータを処理する場合は、:attr:`HttpRequest.POST` を使用"
"してください。"

msgid ""
"You can also read from an ``HttpRequest`` using a file-like interface with :"
"meth:`HttpRequest.read` or :meth:`HttpRequest.readline`. Accessing the "
"``body`` attribute *after* reading the request with either of these I/O "
"stream methods will produce a ``RawPostDataException``."
msgstr ""
":meth:`HttpRequest.read` や :meth:`HttpRequest.readline` を用いて、ファイルの"
"ようなインタフェースから ``HttpRequest`` を読み取ることもできます。これらの "
"I/O ストリームメソッドを用いてリクエストを読み取った *後に* ``body`` 属性にア"
"クセスすると、``RawPostDataException`` が発生します。"

msgid ""
"A string representing the full path to the requested page, not including the "
"scheme, domain, or query string."
msgstr ""
"要求されたページへのフルパスを表す文字列であり、scheme、ドメイン、クエリ文字"
"列は含みません。"

msgid "Example: ``\"/music/bands/the_beatles/\"``"
msgstr "例: ``\"/music/bands/the_beatles/\"``"

msgid ""
"Under some web server configurations, the portion of the URL after the host "
"name is split up into a script prefix portion and a path info portion. The "
"``path_info`` attribute always contains the path info portion of the path, "
"no matter what web server is being used. Using this instead of :attr:"
"`~HttpRequest.path` can make your code easier to move between test and "
"deployment servers."
msgstr ""
"一部のWebサーバー構成では、ホスト名の後のURLがスクリプトプレフィックス部分と"
"パス情報部分に分割されます。``path_info`` 属性は、使用されるWebサーバーに関わ"
"らず常にパス情報部分を含んでいます。これを :attr:`~HttpRequest.path` の代わり"
"に使用することで、テストサーバーとデプロイメントサーバー間でコードを移動させ"
"やすくなります。"

msgid ""
"For example, if the ``WSGIScriptAlias`` for your application is set to ``\"/"
"minfo\"``, then ``path`` might be ``\"/minfo/music/bands/the_beatles/\"`` "
"and ``path_info`` would be ``\"/music/bands/the_beatles/\"``."
msgstr ""
"たとえば、アプリケーションの ``WSGIScriptAlias`` が ``\"/minfo\"`` に設定され"
"ている場合、``path`` が ``\"/minfo/music/bands/the_beatles/\"`` である一方、"
"``path_info`` は ``\"/music/bands/the_beatles/\"`` となる可能性があります。"

msgid ""
"A string representing the HTTP method used in the request. This is "
"guaranteed to be uppercase. For example::"
msgstr ""
"リクエストで使用された HTTP メソッドを表す文字列です。この値は常に大文字とな"
"ることが保証されています。たとえば、次のようになります。"

msgid ""
"A string representing the current encoding used to decode form submission "
"data (or ``None``, which means the :setting:`DEFAULT_CHARSET` setting is "
"used). You can write to this attribute to change the encoding used when "
"accessing the form data. Any subsequent attribute accesses (such as reading "
"from :attr:`GET` or :attr:`POST`) will use the new ``encoding`` value. "
"Useful if you know the form data is not in the :setting:`DEFAULT_CHARSET` "
"encoding."
msgstr ""
"フォーム提出データをデコードする際に使用されている現在のエンコーディングを表"
"す文字列（または ``None`` で、これは :setting:`DEFAULT_CHARSET` 設定が使用さ"
"れることを意味します）。この属性に書き込むことで、フォームデータにアクセスす"
"る際に使用されるエンコーディングを変更できます。その後の属性アクセス（:attr:"
"`GET` や :attr:`POST` からの読み取りなど）は、新しい ``encoding`` 値を使用し"
"ます。フォームデータが :setting:`DEFAULT_CHARSET` エンコーディングでないこと"
"がわかっている場合に便利です。"

msgid ""
"A string representing the MIME type of the request, parsed from the "
"``CONTENT_TYPE`` header."
msgstr ""
"リクエストの MIME タイプを表す文字列です。``CONTENT_TYPE`` から識別されます。"

msgid ""
"A dictionary of key/value parameters included in the ``CONTENT_TYPE`` header."
msgstr ""
"``CONTENT_TYPE`` ヘッダに含まれる、キーと値のパラーメータのディクショナリで"
"す。"

msgid ""
"A dictionary-like object containing all given HTTP GET parameters. See the :"
"class:`QueryDict` documentation below."
msgstr ""
"渡された HTTP GET パラメータを含む、ディクショナリライクのオブジェクトです。"
"後述の :class:`QueryDict` のドキュメントを参照してください。"

msgid ""
"A dictionary-like object containing all given HTTP POST parameters, "
"providing that the request contains form data. See the :class:`QueryDict` "
"documentation below. If you need to access raw or non-form data posted in "
"the request, access this through the :attr:`HttpRequest.body` attribute "
"instead."
msgstr ""
"リクエストにフォームデータが含まれている場合に、すべての与えられた HTTP POST "
"パラメータを含む辞書のようなオブジェクト。以下の :class:`QueryDict` ドキュメ"
"ントを参照してください。リクエストにポストされた生のデータや非フォームデータ"
"にアクセスする必要がある場合は、代わりに :attr:`HttpRequest.body` 属性を通じ"
"てアクセスしてください。"

msgid ""
"It's possible that a request can come in via POST with an empty ``POST`` "
"dictionary -- if, say, a form is requested via the POST HTTP method but does "
"not include form data. Therefore, you shouldn't use ``if request.POST`` to "
"check for use of the POST method; instead, use ``if request.method == "
"\"POST\"`` (see :attr:`HttpRequest.method`)."
msgstr ""
"POST メソッドでフォームデータが含まれていない場合に、空の ``POST`` ディクショ"
"ナリを備えたリクエストが発生する可能性があります。そのため、POST メソッドの使"
"用を確認するために ``if request.POST`` を使用すべきではありません。代わり"
"に、 ``if request.method == \"POST\"`` を使用してください (:attr:"
"`HttpRequest.method` を参照)。"

msgid "``POST`` does *not* include file-upload information. See :attr:`FILES`."
msgstr ""
"``POST`` には file-upload の情報が含まれ *ません* 。詳しくは :attr:`FILES` を"
"参照してください。"

msgid "A dictionary containing all cookies. Keys and values are strings."
msgstr "すべてのクッキーが格納されたディクショナリです。キーと値は文字列です。"

msgid ""
"A dictionary-like object containing all uploaded files. Each key in "
"``FILES`` is the ``name`` from the ``<input type=\"file\" name=\"\">``. Each "
"value in ``FILES`` is an :class:`~django.core.files.uploadedfile."
"UploadedFile`."
msgstr ""
"``FILES`` は、アップロードされた全てのファイルを含む辞書型のオブジェクトで"
"す。``FILES`` の各キーは ``<input type=\"file\" name=\"\">`` の ``name`` から"
"成ります。``FILES`` の各値は :class:`~django.core.files.uploadedfile."
"UploadedFile` です。"

msgid "See :doc:`/topics/files` for more information."
msgstr "詳細については、:doc:`/topics/files` を参照してください。"

msgid ""
"``FILES`` will only contain data if the request method was POST and the "
"``<form>`` that posted to the request had ``enctype=\"multipart/form-"
"data\"``. Otherwise, ``FILES`` will be a blank dictionary-like object."
msgstr ""
"``FILES`` には、リクエストメソッドが POST で、リクエストに投稿した "
"``<form>`` に ``enctype=\"multipart/form-data\"`` が設定されていた場合にのみ"
"データが含まれます。それ以外の場合、``FILES`` は空の辞書のようなオブジェクト"
"になります。"

msgid ""
"A dictionary containing all available HTTP headers. Available headers depend "
"on the client and server, but here are some examples:"
msgstr ""
"利用できるすべての HTTP ヘッダーが格納されたディクショナリです。利用可能な"
"ヘッダーはクライアントとサーバーによって異なりますが、以下に例を示します。"

msgid "``CONTENT_LENGTH`` -- The length of the request body (as a string)."
msgstr "``CONTENT_LENGTH`` -- リクエスト本文の (文字列としての) 長さです。"

msgid "``CONTENT_TYPE`` -- The MIME type of the request body."
msgstr "``CONTENT_TYPE`` -- リクエスト本文の MIME タイプです。"

msgid "``HTTP_ACCEPT`` -- Acceptable content types for the response."
msgstr ""
"``HTTP_ACCEPT`` -- レスポンスに対して受け入れ可能なコンテンツのタイプです。"

msgid "``HTTP_ACCEPT_ENCODING`` -- Acceptable encodings for the response."
msgstr ""
"``HTTP_ACCEPT_ENCODING`` -- レスポンスに対して受け入れ可能なエンコーディング"
"です。"

msgid "``HTTP_ACCEPT_LANGUAGE`` -- Acceptable languages for the response."
msgstr "``HTTP_ACCEPT_LANGUAGE`` -- レスポンスに対して受け入れ可能な言語です。"

msgid "``HTTP_HOST`` -- The HTTP Host header sent by the client."
msgstr "``HTTP_HOST`` -- クライアントによって送信された HTTP Host ヘッダです。"

msgid "``HTTP_REFERER`` -- The referring page, if any."
msgstr "``HTTP_REFERER`` -- (存在する場合) リファラページです。"

msgid "``HTTP_USER_AGENT`` -- The client's user-agent string."
msgstr "``HTTP_USER_AGENT`` -- クライアントのユーザエージェント文字列です。"

msgid "``QUERY_STRING`` -- The query string, as a single (unparsed) string."
msgstr "``QUERY_STRING`` -- クエリ文字列で、単一の (未解析の) 文字列です。"

msgid "``REMOTE_ADDR`` -- The IP address of the client."
msgstr "``REMOTE_ADDR`` -- クライアントの IP アドレスです。"

msgid "``REMOTE_HOST`` -- The hostname of the client."
msgstr "``REMOTE_HOST`` -- クライアントのホスト名です。"

msgid "``REMOTE_USER`` -- The user authenticated by the web server, if any."
msgstr ""
"``REMOTE_USER`` -- ウェブサーバーによって認証されたユーザー(もしあれば)。"

msgid "``REQUEST_METHOD`` -- A string such as ``\"GET\"`` or ``\"POST\"``."
msgstr "``REQUEST_METHOD`` -- ``\"GET\"`` や ``\"POST\"`` といったです。"

msgid "``SERVER_NAME`` -- The hostname of the server."
msgstr "``SERVER_NAME`` -- サーバのホスト名です。"

msgid "``SERVER_PORT`` -- The port of the server (as a string)."
msgstr "``SERVER_PORT`` -- (文字列としての) サーバのポートです。"

msgid ""
"With the exception of ``CONTENT_LENGTH`` and ``CONTENT_TYPE``, as given "
"above, any HTTP headers in the request are converted to ``META`` keys by "
"converting all characters to uppercase, replacing any hyphens with "
"underscores and adding an ``HTTP_`` prefix to the name. So, for example, a "
"header called ``X-Bender`` would be mapped to the ``META`` key "
"``HTTP_X_BENDER``."
msgstr ""
"上記の ``CONTENT_LENGTH`` と ``CONTENT_TYPE`` を除き、リクエストの HTTP ヘッ"
"ダーは、すべての文字を大文字に変換し、ハイフンをアンダースコアに置き換え、名"
"前に ``HTTP_`` プレフィックスを追加することで ``META`` キーに変換されます。た"
"とえば、``X-Bender`` というヘッダーは ``META`` キー ``HTTP_X_BENDER`` にマッ"
"ピングされます。"

msgid ""
"Note that :djadmin:`runserver` strips all headers with underscores in the "
"name, so you won't see them in ``META``. This prevents header-spoofing based "
"on ambiguity between underscores and dashes both being normalizing to "
"underscores in WSGI environment variables. It matches the behavior of web "
"servers like Nginx and Apache 2.4+."
msgstr ""
":djadmin:`runserver` では、名前にアンダースコアを含むヘッダーはすべて削除され"
"るため、``META`` にそれらが表示されません。これにより、WSGI 環境変数内のアン"
"ダースコアとダッシュの曖昧さに基づくヘッダー・スプーフィングが防がれます。こ"
"の動作は、Nginx や Apache 2.4+ のようなウェブサーバーと一致しています。"

msgid ""
":attr:`HttpRequest.headers` is a simpler way to access all HTTP-prefixed "
"headers, plus ``CONTENT_LENGTH`` and ``CONTENT_TYPE``."
msgstr ""
":attr:`HttpRequest.headers` は ``CONTENT_LENGTH`` と ``CONTENT_TYPE`` を含"
"む、全てのHTTPプレフィックス付きヘッダーにアクセスするより簡単な方法です。"

msgid ""
"A case insensitive, dict-like object that provides access to all HTTP-"
"prefixed headers (plus ``Content-Length`` and ``Content-Type``) from the "
"request."
msgstr ""
"リクエストからHTTPプリフィックスヘッダー全体 (``Content-Length`` と "
"``Content-Type`` を含む) にアクセスを提供する、大文字小文字を区別しない辞書風"
"オブジェクトです。"

msgid ""
"The name of each header is stylized with title-casing (e.g. ``User-Agent``) "
"when it's displayed. You can access headers case-insensitively:"
msgstr ""
"各ヘッダーの名前は、表示される際にタイトルケース (例: ``User-Agent``) でスタ"
"イリズされます。ヘッダーは大文字小文字を区別せずにアクセスできます。"

msgid ""
"For use in, for example, Django templates, headers can also be looked up "
"using underscores in place of hyphens:"
msgstr ""
"たとえば Django テンプレートでの使用において、ヘッダーはハイフンの代わりにア"
"ンダースコアを使用してもルックアップできます。"

msgid ""
"An instance of :class:`~django.urls.ResolverMatch` representing the resolved "
"URL. This attribute is only set after URL resolving took place, which means "
"it's available in all views but not in middleware which are executed before "
"URL resolving takes place (you can use it in :meth:`process_view` though)."
msgstr ""
"解決されたURLを表す :class:`~django.urls.ResolverMatch` のインスタンスです。"
"この属性は、URLの解決が行われた後にのみ設定されます。つまり、全てのビューで利"
"用可能ですが、URLの解決が行われる前に実行されるミドルウェアでは利用できませ"
"ん (:meth:`process_view` では使用できます)。"

msgid "Attributes set by application code"
msgstr "アプリケーションコードがセットする属性"

msgid ""
"Django doesn't set these attributes itself but makes use of them if set by "
"your application."
msgstr ""
"Django はこれらの属性を自分で設定することはありませんが、アプリケーション側で"
"設定された場合にはその値を利用します。"

msgid ""
"The :ttag:`url` template tag will use its value as the ``current_app`` "
"argument to :func:`~django.urls.reverse()`."
msgstr ""
":ttag:`url` テンプレートタグは、その値を :func:`~django.urls.reverse()` の "
"``current_app`` 引数に使います。"

msgid ""
"This will be used as the root URLconf for the current request, overriding "
"the :setting:`ROOT_URLCONF` setting. See :ref:`how-django-processes-a-"
"request` for details."
msgstr ""
"この値は、現在のリクエストに対する root URLconf として使用され、設定の :"
"setting:`ROOT_URLCONF` を上書きします。詳しくは :ref:`how-django-processes-a-"
"request` を参照してください。"

msgid ""
"``urlconf`` can be set to ``None`` to revert any changes made by previous "
"middleware and return to using the :setting:`ROOT_URLCONF`."
msgstr ""
"``urlconf`` は ``None`` に設定することで、それまでにミドルウェアで行われた変"
"更を取り消し、元の :setting:`ROOT_URLCONF` を使用するようにできます。"

msgid ""
"This will be used instead of :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` "
"for the current request. See :ref:`custom-error-reports` for details."
msgstr ""
"これは、現在のリクエストに対して :setting:"
"`DEFAULT_EXCEPTION_REPORTER_FILTER` の代わりに使用されます。詳細について"
"は、 :ref:`custom-error-reports` を参照してください。"

msgid ""
"This will be used instead of :setting:`DEFAULT_EXCEPTION_REPORTER` for the "
"current request. See :ref:`custom-error-reports` for details."
msgstr ""
"これは、現在のリクエストに対して :setting:`DEFAULT_EXCEPTION_REPORTER` の代わ"
"りに使用されます。詳細については :ref:`custom-error-reports` を参照してくださ"
"い。"

msgid "Attributes set by middleware"
msgstr "ミドルウェアが設定する属性"

msgid ""
"Some of the middleware included in Django's contrib apps set attributes on "
"the request. If you don't see the attribute on a request, be sure the "
"appropriate middleware class is listed in :setting:`MIDDLEWARE`."
msgstr ""
"Django の contrib アプリなどのミドルウェアの一部は、リクエストに属性を設定し"
"ます。もし、リクエストに属性が設定されていない場合は、:setting:`MIDDLEWARE` "
"リスト中に適切なミドルウェアが含まれているかを確認してください。"

msgid ""
"From the :class:`~django.contrib.sessions.middleware.SessionMiddleware`: A "
"readable and writable, dictionary-like object that represents the current "
"session."
msgstr ""
":class:`~django.contrib.sessions.middleware.SessionMiddleware` は、現在のセッ"
"ションを表す、読み書き可能でディクショナリライクなオブジェクトを設定します。"

msgid ""
"From the :class:`~django.contrib.sites.middleware.CurrentSiteMiddleware`: An "
"instance of :class:`~django.contrib.sites.models.Site` or :class:`~django."
"contrib.sites.requests.RequestSite` as returned by :func:`~django.contrib."
"sites.shortcuts.get_current_site()` representing the current site."
msgstr ""
":class:`~django.contrib.sites.middleware.CurrentSiteMiddleware` は、現在のサ"
"イトを表す :class:`~django.contrib.sites.models.Site` または :class:`~django."
"contrib.sites.requests.RequestSite` のインスタンスを、:func:`~django.contrib."
"sites.shortcuts.get_current_site()` の返り値で設定します。"

msgid ""
"From the :class:`~django.contrib.auth.middleware.AuthenticationMiddleware`: "
"An instance of :setting:`AUTH_USER_MODEL` representing the currently logged-"
"in user. If the user isn't currently logged in, ``user`` will be set to an "
"instance of :class:`~django.contrib.auth.models.AnonymousUser`. You can tell "
"them apart with :attr:`~django.contrib.auth.models.User.is_authenticated`, "
"like so::"
msgstr ""
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` から: 現在"
"ログインしているユーザーを表す :setting:`AUTH_USER_MODEL` のインスタンスで"
"す。ユーザーが現在ログインしていない場合、 ``user`` は :class:`~django."
"contrib.auth.models.AnonymousUser` のインスタンスに設定されます。 :attr:"
"`~django.contrib.auth.models.User.is_authenticated` を使用して、それらを区別"
"できます。例えば、こうです:"

msgid ""
"The :meth:`auser` method does the same thing but can be used from async "
"contexts."
msgstr ""
":meth:`auser` メソッドは同じ機能を提供しますが、非同期コンテキストから使用で"
"きます。"

msgid ""
"From the :class:`~django.contrib.auth.middleware.AuthenticationMiddleware`: "
"Coroutine. Returns an instance of :setting:`AUTH_USER_MODEL` representing "
"the currently logged-in user. If the user isn't currently logged in, "
"``auser`` will return an instance of :class:`~django.contrib.auth.models."
"AnonymousUser`. This is similar to the :attr:`user` attribute but it works "
"in async contexts."
msgstr ""
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` から: コ"
"ルーチン。現在ログインしているユーザーを表す :setting:`AUTH_USER_MODEL` のイ"
"ンスタンスを返します。もしユーザーが現在ログインしていない場合、``auser`` "
"は :class:`~django.contrib.auth.models.AnonymousUser` のインスタンスを返しま"
"す。これは :attr:`user` 属性に似ていますが、非同期コンテキストでも機能しま"
"す。"

msgid ""
"Returns the originating host of the request using information from the "
"``HTTP_X_FORWARDED_HOST`` (if :setting:`USE_X_FORWARDED_HOST` is enabled) "
"and ``HTTP_HOST`` headers, in that order. If they don't provide a value, the "
"method uses a combination of ``SERVER_NAME`` and ``SERVER_PORT`` as detailed "
"in :pep:`3333`."
msgstr ""
"リクエストの発信元ホストを返します。この情報は、順番に "
"``HTTP_X_FORWARDED_HOST`` (もし :setting:`USE_X_FORWARDED_HOST` が有効な場"
"合) および ``HTTP_HOST`` ヘッダーから取得されます。これらが値を提供しない場"
"合、メソッドは ``SERVER_NAME`` と ``SERVER_PORT`` の組み合わせを使用します。"
"詳細は :pep:`3333` で説明されています。"

msgid "Example: ``\"127.0.0.1:8000\"``"
msgstr "例: ``\"127.0.0.1:8000\"``"

msgid ""
"Raises ``django.core.exceptions.DisallowedHost`` if the host is not in :"
"setting:`ALLOWED_HOSTS` or the domain name is invalid according to :rfc:"
"`1034`/:rfc:`1035 <1035>`."
msgstr ""
"ホストが :setting:`ALLOWED_HOSTS` にないか、ドメイン名が :rfc:`1034`/:rfc:"
"`1035 <1035>` に従っていない場合、 ``django.core.exceptions.DisallowedHost`` "
"を発生させます。 "

msgid ""
"The :meth:`~HttpRequest.get_host()` method fails when the host is behind "
"multiple proxies. One solution is to use middleware to rewrite the proxy "
"headers, as in the following example::"
msgstr ""
":meth:`~HttpRequest.get_host()` メソッドは、ホストが複数のプロキシの背後にあ"
"る場合に失敗します。一つの解決策として、以下の例に示すように、プロキシのヘッ"
"ダーを書き換えるためのミドルウェアを使用できます:"

msgid ""
"This middleware should be positioned before any other middleware that relies "
"on the value of :meth:`~HttpRequest.get_host()` -- for instance, :class:"
"`~django.middleware.common.CommonMiddleware` or :class:`~django.middleware."
"csrf.CsrfViewMiddleware`."
msgstr ""
"このミドルウェアは、:meth:`~HttpRequest.get_host()` の値に依存する他のミドル"
"ウェアよりも前に配置されるべきです (例えば、 :class:`~django.middleware."
"common.CommonMiddleware` や :class:`~django.middleware.csrf."
"CsrfViewMiddleware` など)。"

msgid ""
"Returns the originating port of the request using information from the "
"``HTTP_X_FORWARDED_PORT`` (if :setting:`USE_X_FORWARDED_PORT` is enabled) "
"and ``SERVER_PORT`` ``META`` variables, in that order."
msgstr ""
"リクエストの元となったポートを、 ``HTTP_X_FORWARDED_PORT`` と "
"``SERVER_PORT`` の ``META`` 変数から、その順に使用して情報を取得し返します "
"(ただし、 :setting:`USE_X_FORWARDED_PORT` が有効になっている場合)。"

msgid "Returns the ``path``, plus an appended query string, if applicable."
msgstr "必要に応じて、 ``path`` にクエリ文字列を追加して返します。"

msgid "Example: ``\"/music/bands/the_beatles/?print=true\"``"
msgstr "例: ``\"/music/bands/the_beatles/?print=true\"``"

msgid ""
"Like :meth:`get_full_path`, but uses :attr:`path_info` instead of :attr:"
"`path`."
msgstr ""
":meth:`get_full_path` と似ていますが、 :attr:`path` の代わりに :attr:"
"`path_info` を使用します。"

msgid "Example: ``\"/minfo/music/bands/the_beatles/?print=true\"``"
msgstr "例: ``\"/minfo/music/bands/the_beatles/?print=true\"``"

msgid ""
"Returns the absolute URI form of ``location``. If no location is provided, "
"the location will be set to ``request.get_full_path()``."
msgstr ""
"``location`` の絶対URI形式を返します。もし location が指定されていない場合、"
"``request.get_full_path()`` が location に設定されます。"

msgid ""
"If the location is already an absolute URI, it will not be altered. "
"Otherwise the absolute URI is built using the server variables available in "
"this request. For example:"
msgstr ""
"もし場所がすでに絶対 URI である場合、それは変更されません。そうでない場合、こ"
"のリクエストで利用可能なサーバ変数を使用して絶対 URI が構築されます。例えば:"

msgid ""
"Mixing HTTP and HTTPS on the same site is discouraged, therefore :meth:"
"`~HttpRequest.build_absolute_uri()` will always generate an absolute URI "
"with the same scheme the current request has. If you need to redirect users "
"to HTTPS, it's best to let your web server redirect all HTTP traffic to "
"HTTPS."
msgstr ""
"同一サイト上でHTTPとHTTPSを混在させることは推奨されません。そのため、:meth:"
"`~HttpRequest.build_absolute_uri()` は常に、現在のリクエストと同じスキームを"
"持つ絶対URIを生成します。ユーザーをHTTPSにリダイレクトする必要がある場合は、"
"WebサーバーにすべてのHTTPトラフィックをHTTPSにリダイレクトさせるのが最善で"
"す。"

msgid ""
"Returns a cookie value for a signed cookie, or raises a ``django.core."
"signing.BadSignature`` exception if the signature is no longer valid. If you "
"provide the ``default`` argument the exception will be suppressed and that "
"default value will be returned instead."
msgstr ""
"署名付きクッキーの値を返します。署名が無効である場合は ``django.core.signing."
"BadSignature`` 例外が発生します。``default`` 引数を提供した場合、例外は抑制さ"
"れ、代わりにそのデフォルト値が返されます。"

msgid ""
"The optional ``salt`` argument can be used to provide extra protection "
"against brute force attacks on your secret key. If supplied, the ``max_age`` "
"argument will be checked against the signed timestamp attached to the cookie "
"value to ensure the cookie is not older than ``max_age`` seconds."
msgstr ""
"オプションの ``salt`` 引数は、秘密鍵への総当たり攻撃から保護するために使用で"
"きます。指定された場合、``max_age`` 引数は、クッキー値に付加された署名付きタ"
"イムスタンプと比較して、クッキーが ``max_age`` 秒より古くないことを確認しま"
"す。"

msgid ""
"See :doc:`cryptographic signing </topics/signing>` for more information."
msgstr ""
"詳細については、 :doc:`暗号署名 </topics/signing>` を参照してください。"

msgid ""
"Returns ``True`` if the request is secure; that is, if it was made with "
"HTTPS."
msgstr ""
"リクエストがセキュアである場合、つまりHTTPSで行われた場合に ``True`` を返しま"
"す。"

msgid ""
"Returns ``True`` if the request ``Accept`` header matches the ``mime_type`` "
"argument:"
msgstr ""
"リクエストの ``Accept`` ヘッダーが ``mime_type`` 引数と一致する場合に "
"``True`` を返します。"

msgid ""
"Most browsers send ``Accept: */*`` by default, so this would return ``True`` "
"for all content types. Setting an explicit ``Accept`` header in API requests "
"can be useful for returning a different content type for those consumers "
"only. See :ref:`content-negotiation-example` of using ``accepts()`` to "
"return different content to API consumers."
msgstr ""
"ほとんどのブラウザはデフォルトで ``Accept: */*`` を送信するため、これはすべて"
"のコンテンツタイプに対して ``True`` を返します。APIリクエストに明示的な "
"``Accept`` ヘッダーを設定することは、それらの利用者のみに異なるコンテンツタイ"
"プを返すために役立ちます。APIの利用者に異なるコンテントを返すための "
"``accepts()`` の使用例については、 :ref:`content-negotiation-example` を参照"
"してください。"

msgid ""
"If a response varies depending on the content of the ``Accept`` header and "
"you are using some form of caching like Django's :mod:`cache middleware "
"<django.middleware.cache>`, you should decorate the view with :func:"
"`vary_on_headers('Accept') <django.views.decorators.vary.vary_on_headers>` "
"so that the responses are properly cached."
msgstr ""
"レスポンスが ``Accept`` ヘッダーの内容によって変わる場合、 Django の :mod:`"
"キャッシュミドルウェア <django.middleware.cache>` などのキャッシュ形式を使用"
"している場合は、レスポンスが適切にキャッシュされるように、ビューを :func:"
"`vary_on_headers('Accept') <django.views.decorators.vary.vary_on_headers>` で"
"デコレートする必要があります。"

msgid ""
"Methods implementing a file-like interface for reading from an "
"``HttpRequest`` instance. This makes it possible to consume an incoming "
"request in a streaming fashion. A common use-case would be to process a big "
"XML payload with an iterative parser without constructing a whole XML tree "
"in memory."
msgstr ""
"``HttpRequest`` インスタンスから読み取るためのファイルライクなインターフェー"
"スを実装するメソッドです。これにより、着信リクエストをストリーミング形式で消"
"費することが可能になります。一般的な使用例は、大きなXMLペイロードをメモリ内で"
"完全なXMLツリーを構築することなく、繰り返しパーサーで処理する場合です。"

msgid ""
"Given this standard interface, an ``HttpRequest`` instance can be passed "
"directly to an XML parser such as :class:`~xml.etree.ElementTree."
"ElementTree`::"
msgstr ""
"この標準インターフェースを用いると、 ``HttpRequest`` インスタンスは :class:"
"`~xml.etree.ElementTree.ElementTree` のようなXMLパーサーに直接渡すことができ"
"ます。"

msgid "``QueryDict`` objects"
msgstr "``QueryDict`` オブジェクト"

msgid ""
"In an :class:`HttpRequest` object, the :attr:`~HttpRequest.GET` and :attr:"
"`~HttpRequest.POST` attributes are instances of ``django.http.QueryDict``, a "
"dictionary-like class customized to deal with multiple values for the same "
"key. This is necessary because some HTML form elements, notably ``<select "
"multiple>``, pass multiple values for the same key."
msgstr ""
":class:`HttpRequest` オブジェクト内では、:attr:`~HttpRequest.GET` と :attr:"
"`~HttpRequest.POST` 属性は ``django.http.QueryDict`` のインスタンスです。これ"
"は、同一のキーに対する複数の値を扱うためにカスタマイズされた、辞書型に似たク"
"ラスです。これが必要なのは、いくつかの HTML (特に ``<select multiple>``) が同"
"一キーで複数の値を渡すからです。"

msgid ""
"The ``QueryDict``\\ s at ``request.POST`` and ``request.GET`` will be "
"immutable when accessed in a normal request/response cycle. To get a mutable "
"version you need to use :meth:`QueryDict.copy`."
msgstr ""
"``request.POST`` や ``request.GET`` の ``QueryDict``\\ は、通常の request/"
"response 内でアクセスするときには編集不可です。編集可能なものを取得するに"
"は、:meth:`QueryDict.copy` を使う必要があります。"

msgid ""
":class:`QueryDict` implements all the standard dictionary methods because "
"it's a subclass of dictionary. Exceptions are outlined here:"
msgstr ""
":class:`QueryDict` はディクショナリのサブクラスなので、標準的なディクショナリ"
"のメソッドを全て実装しています。当てはまらないのはおおむね以下の通りです:"

msgid "Instantiates a ``QueryDict`` object based on ``query_string``."
msgstr ""
"``QueryDict``\\ に基づいて ``QueryDict`` オブジェクトをインスタンス化します。"

msgid ""
"If ``query_string`` is not passed in, the resulting ``QueryDict`` will be "
"empty (it will have no keys or values)."
msgstr ""
"``query_string`` が渡されなかった場合は、``QueryDict`` 空となります (何のキー"
"や値も持ちません)。"

msgid ""
"Most ``QueryDict``\\ s you encounter, and in particular those at ``request."
"POST`` and ``request.GET``, will be immutable. If you are instantiating one "
"yourself, you can make it mutable by passing ``mutable=True`` to its "
"``__init__()``."
msgstr ""
"使用する ``QueryDict`` のほとんど、特に ``request.POST`` や ``request.GET`` "
"における場合、編集不可となっています。自分でインスタンスを生成する場合は、"
"``__init__()`` に ``mutable=True`` を渡すことで編集可能にできます。"

msgid ""
"Strings for setting both keys and values will be converted from ``encoding`` "
"to ``str``. If ``encoding`` is not set, it defaults to :setting:"
"`DEFAULT_CHARSET`."
msgstr ""
"キーとバリューの両方を設定するための文字列は、``encoding`` から ``str`` に変"
"換されます。``encoding`` がセットされていない場合、:setting:"
"`DEFAULT_CHARSET` がデフォルトとなります。"

msgid ""
"Creates a new ``QueryDict`` with keys from ``iterable`` and each value equal "
"to ``value``. For example:"
msgstr ""
"新しい ``QueryDict`` を作成します。キーは ``iterable`` で、各値は ``value`` "
"になります。例えば:"

msgid ""
"Returns the value for the given key. If the key has more than one value, it "
"returns the last value. Raises ``django.utils.datastructures."
"MultiValueDictKeyError`` if the key does not exist. (This is a subclass of "
"Python's standard :exc:`KeyError`, so you can stick to catching "
"``KeyError``.)"
msgstr ""
"指定したキーに対する値を返します。キーが複数の値を持つ場合、最後の値を返しま"
"す。キーが存在しない場合は ``django.utils.datastructures."
"MultiValueDictKeyError`` を発生させます (これは Python の標準的な :exc:"
"`KeyError` サブクラスなので、``KeyError`` をキャッチすることに固執できます)。"

msgid ""
"Sets the given key to ``[value]`` (a list whose single element is "
"``value``). Note that this, as other dictionary functions that have side "
"effects, can only be called on a mutable ``QueryDict`` (such as one that was "
"created via :meth:`QueryDict.copy`)."
msgstr ""
"指定したキーを ``[value]`` (各要素が ``value`` のリスト) にセットします。 副"
"作用を持つ他のディクショナリ関数と同様に、編集可能な ``QueryDict`` (:meth:"
"`QueryDict.copy` で作成されたものなど) のみで呼び出し可能です."

msgid ""
"Returns ``True`` if the given key is set. This lets you do, e.g., ``if "
"\"foo\" in request.GET``."
msgstr ""
"指定したキーがセットされている場合 ``True`` を返します。例えば ``if \"foo\" "
"in request.GET`` を実行するのと同じです。"

msgid ""
"Uses the same logic as :meth:`__getitem__`, with a hook for returning a "
"default value if the key doesn't exist."
msgstr ""
":meth:`__getitem__` と同じロジックを使いますが、キーが存在しない場合のデフォ"
"ルト値をフックします。"

msgid ""
"Like :meth:`dict.setdefault`, except it uses :meth:`__setitem__` internally."
msgstr ""
":meth:`dict.setdefault` に似ていますが、内部では :meth:`__setitem__` を使用し"
"ます。"

msgid ""
"Takes either a ``QueryDict`` or a dictionary. Like :meth:`dict.update`, "
"except it *appends* to the current dictionary items rather than replacing "
"them. For example:"
msgstr ""
"``QueryDict`` または辞書のどちらかを取ります。 :meth:`dict.update` と似ていま"
"すが、現在の辞書の項目を置き換えるのではなく *追加* します。例えば:"

msgid ""
"Like :meth:`dict.items`, except this uses the same last-value logic as :meth:"
"`__getitem__` and returns an iterator object instead of a view object. For "
"example:"
msgstr ""
":meth:`dict.items` と似ていますが、これは :meth:`__getitem__` と同じ最後の値"
"のロジックを使用し、ビューオブジェクトの代わりにイテレータオブジェクトを返し"
"ます。例えば:"

msgid ""
"Like :meth:`dict.values`, except this uses the same last-value logic as :"
"meth:`__getitem__` and returns an iterator instead of a view object. For "
"example:"
msgstr ""
":meth:`dict.values` のように、:meth:`__getitem__` と同じ最後の値のロジックを"
"使用しますが、ビューオブジェクトの代わりにイテレータを返します。例えば:"

msgid "In addition, ``QueryDict`` has the following methods:"
msgstr "加えて、``QueryDict`` は以下のメソッドを持ちます:"

msgid ""
"Returns a copy of the object using :func:`copy.deepcopy`. This copy will be "
"mutable even if the original was not."
msgstr ""
":func:`copy.deepcopy` を使用してオブジェクトのコピーを返します。このコピー"
"は、元のオブジェクトがイミュータブルであったとしても、ミュータブルです。"

msgid ""
"Returns a list of the data with the requested key. Returns an empty list if "
"the key doesn't exist and ``default`` is ``None``. It's guaranteed to return "
"a list unless the default value provided isn't a list."
msgstr ""
"リクエストされたキーのデータのリストを返します。キーが存在しない場合には、 "
"``default`` が ``None`` であれば空のリストを返します。デフォルト値がリストで"
"ない限り、リストを返すことが保証されています。"

msgid "Sets the given key to ``list_`` (unlike :meth:`__setitem__`)."
msgstr ""
"指定されたキーを ``list_`` に設定します ( :meth:`__setitem__` と異なります)。"

msgid "Appends an item to the internal list associated with key."
msgstr "key に関連付けられた内部リストに項目を追加します。"

msgid ""
"Like :meth:`setdefault`, except it takes a list of values instead of a "
"single value."
msgstr ""
":meth:`setdefault` に似ていますが、単一の値の代わりに値のリストを取ります。"

msgid ""
"Like :meth:`items()`, except it includes all values, as a list, for each "
"member of the dictionary. For example:"
msgstr ""
":meth:`items()` に似ていますが、辞書の各メンバーに対して、すべての値をリスト"
"として含んでいます。例えば:"

msgid ""
"Returns a list of values for the given key and removes them from the "
"dictionary. Raises ``KeyError`` if the key does not exist. For example:"
msgstr ""
"指定されたキーに対応する値のリストを返し、それらを辞書から削除します。キーが"
"存在しない場合は ``KeyError`` を発生させます。例えば:"

msgid ""
"Removes an arbitrary member of the dictionary (since there's no concept of "
"ordering), and returns a two value tuple containing the key and a list of "
"all values for the key. Raises ``KeyError`` when called on an empty "
"dictionary. For example:"
msgstr ""
"辞書の任意のメンバーを削除し (順序の概念がないため)、キーとキーに対するすべて"
"の値のリストを含む2値タプルを返します。空の辞書に対して呼び出されると "
"``KeyError`` を発生させます。例えば:"

msgid ""
"Returns a ``dict`` representation of ``QueryDict``. For every (key, list) "
"pair in ``QueryDict``, ``dict`` will have (key, item), where item is one "
"element of the list, using the same logic as :meth:`QueryDict.__getitem__`:"
msgstr ""
"``QueryDict`` の各(key, list)ペアに対して、 ``dict`` 形式の表現を返します。 "
"``dict`` は、リストの中の要素の1つである item に対して、(key, item) のペアを"
"持ちます。これは、 :meth:`QueryDict.__getitem__` と同じロジックを使用します。"

msgid "Returns a string of the data in query string format. For example:"
msgstr "クエリ文字列形式のデータを文字列で返します。例えば："

msgid ""
"Use the ``safe`` parameter to pass characters which don't require encoding. "
"For example:"
msgstr ""
"``safe`` パラメータを使って、エンコードを不要とする文字を渡すことができます。"
"たとえば:"

msgid "``HttpResponse`` objects"
msgstr "``HttpResponse`` オブジェクト"

msgid ""
"In contrast to :class:`HttpRequest` objects, which are created automatically "
"by Django, :class:`HttpResponse` objects are your responsibility. Each view "
"you write is responsible for instantiating, populating, and returning an :"
"class:`HttpResponse`."
msgstr ""
"Django によって自動的に生成される :class:`HttpRequest` オブジェクトとは対照的"
"に、:class:`HttpResponse` オブジェクトの作成はあなたの責任です。プログラム内"
"に記述されるあらゆるビューは、:class:`HttpResponse` をインスタンス化し、デー"
"タを格納して返す必要があります。"

msgid "The :class:`HttpResponse` class lives in the :mod:`django.http` module."
msgstr ""
":class:`HttpResponse` クラスは :mod:`django.http` モジュール内に存在します。"

msgid "Passing strings"
msgstr "文字列を渡す"

msgid ""
"Typical usage is to pass the contents of the page, as a string, bytestring, "
"or :class:`memoryview`, to the :class:`HttpResponse` constructor:"
msgstr ""
"一般的な使い方としては、ページのコンテンツを文字列、バイト文字列、または :"
"class:`memoryview` として、 :class:`HttpResponse` コンストラクタに渡します。"

msgid ""
"But if you want to add content incrementally, you can use ``response`` as a "
"file-like object:"
msgstr ""
"しかし、内容を段階的に追加したい場合は、 ``response`` をファイルライクオブ"
"ジェクトとして使用できます:"

msgid "Passing iterators"
msgstr "イテレータを渡す"

msgid ""
"Finally, you can pass ``HttpResponse`` an iterator rather than strings. "
"``HttpResponse`` will consume the iterator immediately, store its content as "
"a string, and discard it. Objects with a ``close()`` method such as files "
"and generators are immediately closed."
msgstr ""
"最後に、文字列ではなくイテレータを ``HttpResponse`` に渡すこともできます。 "
"``HttpResponse`` はイテレータを即座に受け取り、その内容を文字列として保存し、"
"破棄します。ファイルやジェネレータのような ``close()`` メソッドを持つオブジェ"
"クトは、すぐに閉じられます。"

msgid ""
"If you need the response to be streamed from the iterator to the client, you "
"must use the :class:`StreamingHttpResponse` class instead."
msgstr ""
"レスポンスに対して、イテレータからクライアントにストリーミングさせる必要があ"
"る場合には、代わりに :class:`StreamingHttpResponse` クラスを使う必要がありま"
"す。"

msgid "Setting header fields"
msgstr "ヘッダーフィールドをセットする"

msgid ""
"To set or remove a header field in your response, use :attr:`HttpResponse."
"headers`:"
msgstr ""
"レスポンスでヘッダーフィールドを設定または削除するには、 :attr:`HttpResponse."
"headers` を使用してください。"

msgid ""
"You can also manipulate headers by treating your response like a dictionary:"
msgstr "レスポンスを辞書のように扱うことで、ヘッダーを操作することもできます:"

msgid ""
"This proxies to ``HttpResponse.headers``, and is the original interface "
"offered by ``HttpResponse``."
msgstr ""
"これは ``HttpResponse.headers`` へのプロキシで、 ``HttpResponse`` が提供する"
"本来のインタフェースです。"

msgid ""
"When using this interface, unlike a dictionary, ``del`` doesn't raise "
"``KeyError`` if the header field doesn't exist."
msgstr ""
"このインターフェースを使用する際、辞書とは異なり、ヘッダーフィールドが存在し"
"ない場合に ``del`` が ``KeyError`` を発生させることはありません。"

msgid "You can also set headers on instantiation:"
msgstr "インスタンス化の際にもヘッダーを設定できます:"

msgid ""
"For setting the ``Cache-Control`` and ``Vary`` header fields, it is "
"recommended to use the :func:`~django.utils.cache.patch_cache_control` and :"
"func:`~django.utils.cache.patch_vary_headers` methods from :mod:`django."
"utils.cache`, since these fields can have multiple, comma-separated values. "
"The \"patch\" methods ensure that other values, e.g. added by a middleware, "
"are not removed."
msgstr ""
"``Cache-Control`` および ``Vary`` ヘッダーフィールドを設定するには、これらの"
"フィールドが複数のカンマ区切りの値を持ち得るため、 :mod:`django.utils.cache` "
"から :func:`~django.utils.cache.patch_cache_control` と :func:`~django.utils."
"cache.patch_vary_headers` メソッドを使用することが推奨されます。\"patch\" メ"
"ソッドは、ミドルウェアによって追加された他の値が削除されないように保証しま"
"す。"

msgid ""
"HTTP header fields cannot contain newlines. An attempt to set a header field "
"containing a newline character (CR or LF) will raise ``BadHeaderError``"
msgstr ""
"HTTP ヘッダフィールドには改行を含めることはできません。改行文字 (CR または "
"LF) を含むヘッダフィールドを設定しようとすると、``BadHeaderError`` が発生しま"
"す。"

msgid "Telling the browser to treat the response as a file attachment"
msgstr "レスポンスをファイル添付物として扱うようにブラウザに指示します。"

msgid ""
"To tell the browser to treat the response as a file attachment, set the "
"``Content-Type`` and ``Content-Disposition`` headers. For example, this is "
"how you might return a Microsoft Excel spreadsheet:"
msgstr ""
"ブラウザにレスポンスをファイル添付として扱うように指示するためには、"
"``Content-Type`` と ``Content-Disposition`` ヘッダを設定します。例えば、"
"Microsoft Excel スプレッドシートを返す方法は以下のようになります:"

msgid ""
"There's nothing Django-specific about the ``Content-Disposition`` header, "
"but it's easy to forget the syntax, so we've included it here."
msgstr ""
"``Content-Disposition`` ヘッダについては Django 固有のものはありませんが、そ"
"の構文を忘れやすいので、ここに含めています。"

msgid ""
"A bytestring representing the content, encoded from a string if necessary."
msgstr "必要に応じて文字列からエンコードされた、コンテンツを表すバイト文字列。"

msgid ""
"A :py:obj:`http.cookies.SimpleCookie` object holding the cookies included in "
"the response."
msgstr ""
"レスポンスに含まれるクッキーを保持する :py:obj:`http.cookies.SimpleCookie` オ"
"ブジェクトです。"

msgid ""
"A case insensitive, dict-like object that provides an interface to all HTTP "
"headers on the response, except a ``Set-Cookie`` header. See :ref:`setting-"
"header-fields` and :attr:`HttpResponse.cookies`."
msgstr ""
"大文字小文字を区別しない辞書型オブジェクトで、``Set-Cookie`` ヘッダを除くすべ"
"てのHTTPヘッダに対するインターフェイスを提供します。 :ref:`setting-header-"
"fields` および :attr:`HttpResponse.cookies` を参照してください。"

msgid ""
"A string denoting the charset in which the response will be encoded. If not "
"given at ``HttpResponse`` instantiation time, it will be extracted from "
"``content_type`` and if that is unsuccessful, the :setting:`DEFAULT_CHARSET` "
"setting will be used."
msgstr ""
"応答がエンコードされる文字セットを示す文字列です。 ``HttpResponse`` のインス"
"タンス化の際に指定されなかった場合、 ``content_type`` から抽出され、もしこれ"
"が失敗した場合は、 :setting:`DEFAULT_CHARSET` 設定が使用されます。"

msgid "The :rfc:`HTTP status code <9110#section-15>` for the response."
msgstr "レスポンスの :rfc:`HTTP ステータスコード <9110#section-15>` 。"

msgid ""
"Unless :attr:`reason_phrase` is explicitly set, modifying the value of "
"``status_code`` outside the constructor will also modify the value of "
"``reason_phrase``."
msgstr ""
":attr:`reason_phrase` が明示的にセットされていない限り、コンストラクタの外で "
"``status_code`` の値を変更すると ``reason_phrase`` の値も変更されます。"

msgid ""
"The HTTP reason phrase for the response. It uses the :rfc:`HTTP standard's "
"<9110#section-15.1>` default reason phrases."
msgstr ""
"レスポンスの HTTP reason フレーズです。これは :rfc:`HTTP 標準の "
"<9110#section-15.1>` デフォルトの reason フレーズを使用します。"

msgid ""
"Unless explicitly set, ``reason_phrase`` is determined by the value of :attr:"
"`status_code`."
msgstr ""
"``reason_phrase`` が明示的に設定されていない場合、 :attr:`status_code` の値に"
"基づいて決定されます。"

msgid "This is always ``False``."
msgstr "これは常に ``False`` です。"

msgid ""
"This attribute exists so middleware can treat streaming responses "
"differently from regular responses."
msgstr ""
"この属性は、ミドルウェアが通常のレスポンスとは違う形でストリーミングレスポン"
"スを扱えるようにするために存在しています。"

msgid "``True`` if the response has been closed."
msgstr "レスポンスが閉じられた場合、``True`` となります。"

msgid ""
"Instantiates an ``HttpResponse`` object with the given page content, content "
"type, and headers."
msgstr ""
"指定されたページ内容、コンテンツタイプ、およびヘッダーを持つ "
"``HttpResponse`` オブジェクトをインスタンス化します。"

msgid ""
"``content`` is most commonly an iterator, bytestring, :class:`memoryview`, "
"or string. Other types will be converted to a bytestring by encoding their "
"string representation. Iterators should return strings or bytestrings and "
"those will be joined together to form the content of the response."
msgstr ""
"``content`` は、最も一般的にはイテレータ、バイト文字列、 :class:"
"`memoryview` 、または文字列です。その他の型は、文字列表現をエンコードしてバイ"
"ト文字列に変換されます。イテレータは文字列またはバイト文字列を返すべきで、そ"
"れらはレスポンスの内容を形成するために連結されます。"

msgid ""
"``content_type`` is the MIME type optionally completed by a character set "
"encoding and is used to fill the HTTP ``Content-Type`` header. If not "
"specified, it is formed by ``'text/html'`` and the :setting:"
"`DEFAULT_CHARSET` settings, by default: ``\"text/html; charset=utf-8\"``."
msgstr ""
"``content_type`` は、MIME タイプであり、オプションで文字セットエンコーディン"
"グを指定して HTTP ``Content-Type`` ヘッダを埋めるために使用されます。指定され"
"ていない場合、デフォルトでは ``'text/html'`` と :setting:`DEFAULT_CHARSET` 設"
"定によって形成されます: つまり ``\"text/html; charset=utf-8\"`` 。"

msgid ""
"``status`` is the :rfc:`HTTP status code <9110#section-15>` for the "
"response. You can use Python's :py:class:`http.HTTPStatus` for meaningful "
"aliases, such as ``HTTPStatus.NO_CONTENT``."
msgstr ""
"``status`` はレスポンスの :rfc:`HTTPステータスコード <9110#section-15>` で"
"す。Python の :py:class:`http.HTTPStatus` を使用して、 ``HTTPStatus."
"NO_CONTENT`` のような意味のあるエイリアスを使用できます。"

msgid ""
"``reason`` is the HTTP response phrase. If not provided, a default phrase "
"will be used."
msgstr ""
"``reason`` は HTTP レスポンスフレーズです。指定しない場合、デフォルトのフレー"
"ズが使用されます。"

msgid ""
"``charset`` is the charset in which the response will be encoded. If not "
"given it will be extracted from ``content_type``, and if that is "
"unsuccessful, the :setting:`DEFAULT_CHARSET` setting will be used."
msgstr ""
"``charset`` は、レスポンスがエンコードされる文字セットです。もし指定されてい"
"ない場合、``content_type`` から抽出されます。それが失敗した場合は、 :setting:"
"`DEFAULT_CHARSET` 設定が使用されます。"

msgid "``headers`` is a :class:`dict` of HTTP headers for the response."
msgstr "``headers`` はレスポンス用のHTTPヘッダーの :class:`dict` です。"

msgid ""
"Sets the given header name to the given value. Both ``header`` and ``value`` "
"should be strings."
msgstr ""
"指定されたヘッダ名に指定された値を設定します。 ``header`` と ``value`` は共に"
"文字列であるべきです。"

msgid ""
"Deletes the header with the given name. Fails silently if the header doesn't "
"exist. Case-insensitive."
msgstr ""
"指定された名前のヘッダーを削除します。ヘッダーが存在しなくても、静かに失敗し"
"ます。大文字小文字を区別しません。"

msgid "Returns the value for the given header name. Case-insensitive."
msgstr "指定されたヘッダ名の値を返します。大文字小文字を区別しません。"

msgid ""
"Returns the value for the given header, or an ``alternate`` if the header "
"doesn't exist."
msgstr ""
"指定されたヘッダーの値を返します。ヘッダーが存在しない場合は、``alternate`` "
"を返します。"

msgid ""
"Returns ``True`` or ``False`` based on a case-insensitive check for a header "
"with the given name."
msgstr ""
"指定された名前のヘッダーが存在するかどうかを大文字小文字を区別せずにチェック"
"し、``True`` または ``False`` を返します。"

msgid "Acts like :meth:`dict.items` for HTTP headers on the response."
msgstr ""
"レスポンスのHTTPヘッダに対して、 :meth:`dict.items` のように動作します。"

msgid "Sets a header unless it has already been set."
msgstr "ヘッダーがまだ設定されていない場合に、ヘッダーを設定します。"

msgid ""
"Sets a cookie. The parameters are the same as in the :class:`~http.cookies."
"Morsel` cookie object in the Python standard library."
msgstr ""
"クッキーを設定します。パラメータは、Python標準ライブラリ内の :class:`~http."
"cookies.Morsel` クッキーオブジェクトと同じです。"

msgid ""
"``max_age`` should be a :class:`~datetime.timedelta` object, an integer "
"number of seconds, or ``None`` (default) if the cookie should last only as "
"long as the client's browser session. If ``expires`` is not specified, it "
"will be calculated."
msgstr ""
"``max_age`` は :class:`~datetime.timedelta` オブジェクト、整数秒数、または "
"``None`` (デフォルト) である必要があります。これにより、クッキーの有効期限は"
"クライアントのブラウザセッションが終了するまでとなります。 ``expires`` が指定"
"されていない場合は自動的に計算されます。"

msgid ""
"``expires`` should either be a string in the format ``\"Wdy, DD-Mon-YY HH:MM:"
"SS GMT\"`` or a ``datetime.datetime`` object in UTC. If ``expires`` is a "
"``datetime`` object, the ``max_age`` will be calculated."
msgstr ""
"``expires`` は、 ``\"Wdy, DD-Mon-YY HH:MM:SS GMT\"`` 形式の文字列か、UTCの "
"``datetime.datetime`` オブジェクトであるべきです。もし ``expires`` が "
"``datetime`` オブジェクトである場合、 ``max_age`` が計算されます。"

msgid ""
"Use ``domain`` if you want to set a cross-domain cookie. For example, "
"``domain=\"example.com\"`` will set a cookie that is readable by the domains "
"www.example.com, blog.example.com, etc. Otherwise, a cookie will only be "
"readable by the domain that set it."
msgstr ""
"クロスドメインのクッキーを設定したい場合は、``domain`` を使用してください。例"
"えば、 ``domain=\"example.com\"`` とすると、www.example.com、blog.example."
"com などのドメインから読み取れるクッキーが設定されます。そうでない場合、クッ"
"キーは設定したドメインのみから読み取れます。"

msgid ""
"Use ``secure=True`` if you want the cookie to be only sent to the server "
"when a request is made with the ``https`` scheme."
msgstr ""
"``secure=True`` を使用すると、リクエストが ``https`` スキームで行われた場合に"
"のみ、クッキーがサーバーに送信されるようになります。"

msgid ""
"Use ``httponly=True`` if you want to prevent client-side JavaScript from "
"having access to the cookie."
msgstr ""
"クライアントサイドのJavaScriptがクッキーにアクセスするのを防ぎたい場合は、"
"``httponly=True`` を使用してください。"

msgid ""
"HttpOnly_ is a flag included in a Set-Cookie HTTP response header. It's part "
"of the :rfc:`RFC 6265 <6265#section-4.1.2.6>` standard for cookies and can "
"be a useful way to mitigate the risk of a client-side script accessing the "
"protected cookie data."
msgstr ""
"HttpOnly_ は、Set-Cookie HTTP レスポンスヘッダーに含まれるフラグです。これ"
"は、クッキーの :rfc:`RFC 6265 <6265#section-4.1.2.6>` 標準の一部であり、クラ"
"イアントサイドのスクリプトが保護されたクッキーデータにアクセスするリスクを軽"
"減する有用な方法です。"

msgid ""
"Use ``samesite='Strict'`` or ``samesite='Lax'`` to tell the browser not to "
"send this cookie when performing a cross-origin request. `SameSite`_ isn't "
"supported by all browsers, so it's not a replacement for Django's CSRF "
"protection, but rather a defense in depth measure."
msgstr ""
"``samesite='Strict'`` や ``samesite='Lax'`` を使用して、ブラウザにクロスオリ"
"ジンリクエストを行う際にこのクッキーを送信しないよう指示します。 `SameSite`_ "
"はすべてのブラウザに対応しているわけではないため、DjangoのCSRF保護の代わりと"
"なるものではありませんが、防御の深度を増すための措置です。"

msgid ""
"Use ``samesite='None'`` (string) to explicitly state that this cookie is "
"sent with all same-site and cross-site requests."
msgstr ""
"``samesite='None'`` (文字列) を使えば、このクッキーが同一サイトおよびクロスサ"
"イトのすべてのリクエストに送信されることを明示できます。"

msgid ""
":rfc:`RFC 6265 <6265#section-6.1>` states that user agents should support "
"cookies of at least 4096 bytes. For many browsers this is also the maximum "
"size. Django will not raise an exception if there's an attempt to store a "
"cookie of more than 4096 bytes, but many browsers will not set the cookie "
"correctly."
msgstr ""
":rfc:`RFC 6265 <6265#section-6.1>` には、ユーザーエージェントが少なくとも "
"4096 バイトのクッキーをサポートすべきであると記されています。多くのブラウザで"
"は、これが最大サイズでもあります。Django は 4096 バイトを超えるクッキーを保存"
"しようとした際に例外を発生させませんが、多くのブラウザでは正しくクッキーを設"
"定しないでしょう。"

msgid ""
"Like :meth:`~HttpResponse.set_cookie()`, but :doc:`cryptographic signing </"
"topics/signing>` the cookie before setting it. Use in conjunction with :meth:"
"`HttpRequest.get_signed_cookie`. You can use the optional ``salt`` argument "
"for added key strength, but you will need to remember to pass it to the "
"corresponding :meth:`HttpRequest.get_signed_cookie` call."
msgstr ""
":meth:`~HttpResponse.set_cookie()` のように、クッキーを設定する前に :doc:`暗"
"号署名 </topics/signing>` を行います。 :meth:`HttpRequest.get_signed_cookie` "
"と組み合わせて使用してください。オプショナルな ``salt`` 引数を使用して鍵強度"
"を高めることができますが、対応する :meth:`HttpRequest.get_signed_cookie` 呼び"
"出しにそれを渡す必要があります。"

msgid ""
"Deletes the cookie with the given key. Fails silently if the key doesn't "
"exist."
msgstr ""
"指定されたキーを持つクッキーを削除します。キーが存在しない場合は、静かに失敗"
"します。"

msgid ""
"Due to the way cookies work, ``path`` and ``domain`` should be the same "
"values you used in ``set_cookie()`` -- otherwise the cookie may not be "
"deleted."
msgstr ""
"クッキーの動作方法により、 ``path`` と ``domain`` は ``set_cookie()`` で使用"
"した値と同じでなければなりません。そうでない場合、クッキーが削除されない可能"
"性があります。"

msgid ""
"This method is called at the end of the request directly by the WSGI server."
msgstr ""
"このメソッドは、リクエストの終了時に、WSGIサーバーによって直接呼び出されま"
"す。"

msgid "This method makes an :class:`HttpResponse` instance a file-like object."
msgstr ""
"このメソッドは、 :class:`HttpResponse` インスタンスをファイルライクオブジェク"
"トにします。"

msgid ""
"Returns the value of :attr:`HttpResponse.content`. This method makes an :"
"class:`HttpResponse` instance a stream-like object."
msgstr ""
":attr:`HttpResponse.content` の値を返します。このメソッドにより、 :class:"
"`HttpResponse` インスタンスはストリームライクオブジェクトになります。"

msgid ""
"Always ``False``. This method makes an :class:`HttpResponse` instance a "
"stream-like object."
msgstr ""
"常に ``False`` です。このメソッドは :class:`HttpResponse` インスタンスをスト"
"リームライクオブジェクトにします。"

msgid ""
"Always ``True``. This method makes an :class:`HttpResponse` instance a "
"stream-like object."
msgstr ""
"常に ``True`` です。このメソッドは :class:`HttpResponse` インスタンスをスト"
"リームライクオブジェクトにします。"

msgid ""
"Writes a list of lines to the response. Line separators are not added. This "
"method makes an :class:`HttpResponse` instance a stream-like object."
msgstr ""
"レスポンスに行のリストを書き込みます。行区切りは追加されません。このメソッド"
"は、 :class:`HttpResponse` インスタンスをストリームライクオブジェクトにしま"
"す。"

msgid "``HttpResponse`` subclasses"
msgstr "``HttpResponse`` サブクラス"

msgid ""
"Django includes a number of ``HttpResponse`` subclasses that handle "
"different types of HTTP responses. Like ``HttpResponse``, these subclasses "
"live in :mod:`django.http`."
msgstr ""
"Djangoには、異なるタイプのHTTPレスポンスを処理するための ``HttpResponse`` の"
"サブクラスがいくつか含まれています。 ``HttpResponse`` と同様に、これらのサブ"
"クラスは :mod:`django.http` に存在します。"

msgid ""
"The first argument to the constructor is required -- the path to redirect "
"to. This can be a fully qualified URL (e.g. ``'https://www.yahoo.com/"
"search/'``), an absolute path with no domain (e.g. ``'/search/'``), or even "
"a relative path (e.g. ``'search/'``). In that last case, the client browser "
"will reconstruct the full URL itself according to the current path. See :"
"class:`HttpResponse` for other optional constructor arguments. Note that "
"this returns an HTTP status code 302."
msgstr ""
"コンストラクタには最初の引数が必須です。これはリダイレクト先のパスです。これ"
"は完全なURL (例: ``'https://www.yahoo.com/search/'``)、ドメインなしの絶対パ"
"ス (例: ``'/search/'``)、あるいは相対パス (例: ``'search/'``) でも構いませ"
"ん。後者の場合、クライアントブラウザが現在のパスに従って完全なURLを自身で再構"
"築します。その他のオプションのコンストラクタ引数については、 :class:"
"`HttpResponse` を参照してください。この処理はHTTPステータスコード302を返すこ"
"とに注意してください。"

msgid ""
"This read-only attribute represents the URL the response will redirect to "
"(equivalent to the ``Location`` response header)."
msgstr ""
"この読み取り専用の属性は、レスポンスがリダイレクトするURLを表しています "
"(``Location`` レスポンスヘッダに相当します)。"

msgid ""
"Like :class:`HttpResponseRedirect`, but it returns a permanent redirect "
"(HTTP status code 301) instead of a \"found\" redirect (status code 302)."
msgstr ""
":class:`HttpResponseRedirect` に似ていますが、\"found\" リダイレクト(ステータ"
"スコード 302) ではなく、恒久的なリダイレクト(HTTPステータスコード 301) を返し"
"ます。"

msgid ""
"The constructor doesn't take any arguments and no content should be added to "
"this response. Use this to designate that a page hasn't been modified since "
"the user's last request (status code 304)."
msgstr ""
"コンストラクタは引数を取らず、このレスポンスにはコンテンツを追加すべきではあ"
"りません。これを使用して、ページがユーザーの最後のリクエスト以降に変更されて"
"いないことを指定します(ステータスコード304)。"

msgid "Acts just like :class:`HttpResponse` but uses a 400 status code."
msgstr ""
":class:`HttpResponse` と似ていますが、ステータスコードとして 400 を使用しま"
"す。"

msgid "Acts just like :class:`HttpResponse` but uses a 404 status code."
msgstr ""
":class:`HttpResponse` と似ていますが、404 ステータスコードを使用します。"

msgid "Acts just like :class:`HttpResponse` but uses a 403 status code."
msgstr ""
":class:`HttpResponse` と似ていますが、403 ステータスコードを使用します。"

msgid ""
"Like :class:`HttpResponse`, but uses a 405 status code. The first argument "
"to the constructor is required: a list of permitted methods (e.g. ``['GET', "
"'POST']``)."
msgstr ""
":class:`HttpResponse` と似ていますが、ステータスコード 405 を使用します。コン"
"ストラクタへの最初の引数は必須です: 許可されているメソッドのリスト (例: "
"``['GET', 'POST']``)。"

msgid "Acts just like :class:`HttpResponse` but uses a 410 status code."
msgstr ""
":class:`HttpResponse` と似ていますが、410 ステータスコードを使用します。"

msgid "Acts just like :class:`HttpResponse` but uses a 500 status code."
msgstr ""
":class:`HttpResponse` と似ていますが、ステータスコードとして 500 を使用しま"
"す。"

msgid ""
"If a custom subclass of :class:`HttpResponse` implements a ``render`` "
"method, Django will treat it as emulating a :class:`~django.template."
"response.SimpleTemplateResponse`, and the ``render`` method must itself "
"return a valid response object."
msgstr ""
":class:`HttpResponse` のカスタムサブクラスが ``render`` メソッドを実装してい"
"る場合、Djangoはそれを :class:`~django.template.response."
"SimpleTemplateResponse` を模倣しているものとして扱い、 ``render`` メソッド自"
"体が有効なレスポンスオブジェクトを返さなければなりません。"

msgid "Custom response classes"
msgstr "カスタムレスポンスクラス"

msgid ""
"If you find yourself needing a response class that Django doesn't provide, "
"you can create it with the help of :py:class:`http.HTTPStatus`. For example::"
msgstr ""
"Django が提供していないレスポンスクラスが必要になった場合は、:py:class:`http."
"HTTPStatus` を使用して作成できます。例えば："

msgid "``JsonResponse`` objects"
msgstr "``JsonResponse`` オブジェクト"

msgid ""
"An :class:`HttpResponse` subclass that helps to create a JSON-encoded "
"response. It inherits most behavior from its superclass with a couple "
"differences:"
msgstr ""
":class:`HttpResponse` のサブクラスで、JSONエンコードされたレスポンスを作成す"
"るのに役立ちます。このクラスは、いくつかの違いを除き、その基底クラスからほと"
"んどの動作を継承しています:"

msgid ""
"Its default ``Content-Type`` header is set to :mimetype:`application/json`."
msgstr ""
"デフォルトの ``Content-Type`` ヘッダーは :mimetype:`application/json` に設定"
"されています。"

msgid ""
"The first parameter, ``data``, should be a ``dict`` instance. If the "
"``safe`` parameter is set to ``False`` (see below) it can be any JSON-"
"serializable object."
msgstr ""
"最初のパラメーター ``data`` は、``dict`` インスタンスであるべきです。"
"``safe`` パラメーターが ``False`` に設定されている場合 (下記参照)、これはどん"
"な JSON シリアライズ可能オブジェクトでも可能です。"

msgid ""
"The ``encoder``, which defaults to :class:`django.core.serializers.json."
"DjangoJSONEncoder`, will be used to serialize the data. See :ref:`JSON "
"serialization <serialization-formats-json>` for more details about this "
"serializer."
msgstr ""
"``encoder`` のデフォルトは :class:`django.core.serializers.json."
"DjangoJSONEncoder` で、このエンコーダーがデータのシリアライズに使用されます。"
"このシリアライザについての詳細は、:ref:`JSON のシリアライズ <serialization-"
"formats-json>` を参照してください。"

msgid ""
"The ``safe`` boolean parameter defaults to ``True``. If it's set to "
"``False``, any object can be passed for serialization (otherwise only "
"``dict`` instances are allowed). If ``safe`` is ``True`` and a non-``dict`` "
"object is passed as the first argument, a :exc:`TypeError` will be raised."
msgstr ""
"``safe`` ブールパラメータのデフォルト値は ``True`` です。もし ``False`` に設"
"定されている場合、任意のオブジェクトをシリアライズのために渡すことができます"
"（そうでなければ、 ``dict`` インスタンスのみが許可されます）。``safe`` が "
"``True`` であり、非 ``dict`` オブジェクトが第一引数として渡された場合、 :exc:"
"`TypeError` が発生します。"

msgid ""
"The ``json_dumps_params`` parameter is a dictionary of keyword arguments to "
"pass to the ``json.dumps()`` call used to generate the response."
msgstr ""
"``json_dumps_params`` パラメーターは、レスポンス生成に使用される ``json."
"dumps()`` 呼び出しに渡すキーワード引数の辞書です。"

msgid "Typical usage could look like:"
msgstr "一般的な使用方法は以下のようになります:"

msgid "Serializing non-dictionary objects"
msgstr "辞書以外のオブジェクトのシリアライズ"

msgid ""
"In order to serialize objects other than ``dict`` you must set the ``safe`` "
"parameter to ``False``:"
msgstr ""
"``dict`` 以外のオブジェクトをシリアライズする場合、 ``safe`` パラメータを "
"``False`` に設定する必要があります:"

msgid "Without passing ``safe=False``, a :exc:`TypeError` will be raised."
msgstr "``safe=False`` を指定しなかった場合、:exc:`TypeError` が発生します。"

msgid ""
"Note that an API based on ``dict`` objects is more extensible, flexible, and "
"makes it easier to maintain forwards compatibility. Therefore, you should "
"avoid using non-dict objects in JSON-encoded response."
msgstr ""
"``dict`` オブジェクトに基づいた API は、より拡張性が高く、柔軟性があり、前方"
"互換性の維持が容易になります。したがって、JSON エンコードされたレスポンスでは"
"非 dict オブジェクトの使用は避けるべきです。"

msgid ""
"Before the `5th edition of ECMAScript <https://262.ecma-international."
"org/5.1/#sec-11.1.4>`_ it was possible to poison the JavaScript ``Array`` "
"constructor. For this reason, Django does not allow passing non-dict objects "
"to the :class:`~django.http.JsonResponse` constructor by default.  However, "
"most modern browsers implement ECMAScript 5 which removes this attack "
"vector. Therefore it is possible to disable this security precaution."
msgstr ""
"`ECMAScript 5th edition <https://262.ecma-international.org/5.1/"
"#sec-11.1.4>`_ の前では、JavaScript の ``Array`` コンストラクタに対する侵害が"
"可能でした。この理由から、Django はデフォルトで :class:`~django.http."
"JsonResponse` コンストラクタに辞書以外のオブジェクトを渡すことを許可しませ"
"ん。ただし、ほとんどの最新ブラウザは ECMAScript 5 を実装しており、この攻撃ベ"
"クトルが取り除かれています。したがって、このセキュリティ対策を無効にすること"
"が可能です。"

msgid "Changing the default JSON encoder"
msgstr "デフォルトのJSONエンコーダーを変更する"

msgid ""
"If you need to use a different JSON encoder class you can pass the "
"``encoder`` parameter to the constructor method:"
msgstr ""
"異なるJSONエンコーダークラスを使用する必要がある場合は、コンストラクターメ"
"ソッドに ``encoder`` パラメータを渡すことができます。"

msgid "``StreamingHttpResponse`` objects"
msgstr "``StreamingHttpResponse`` オブジェクト"

msgid ""
"The :class:`StreamingHttpResponse` class is used to stream a response from "
"Django to the browser."
msgstr ""
":class:`StreamingHttpResponse` クラスは、Djangoからブラウザへのレスポンスをス"
"トリーミングするために使用されます。"

msgid "Advanced usage"
msgstr "高度な使用法"

msgid ""
":class:`StreamingHttpResponse` is somewhat advanced, in that it is important "
"to know whether you'll be serving your application synchronously under WSGI "
"or asynchronously under ASGI, and adjust your usage appropriately."
msgstr ""
":class:`StreamingHttpResponse` はやや高度です。アプリケーションを WSGI で同期"
"的に、あるいは ASGI で非同期的に提供するかを知り、使用方法を適切に調整するこ"
"とが重要です。"

msgid "Please read these notes with care."
msgstr "これらの注意点を注意深く読んでください。"

msgid ""
"An example usage of :class:`StreamingHttpResponse` under WSGI is streaming "
"content when generating the response would take too long or uses too much "
"memory. For instance, it's useful for :ref:`generating large CSV files "
"<streaming-csv-files>`."
msgstr ""
"WSGI 下での :class:`StreamingHttpResponse` の使用例としては、レスポンスの生成"
"に時間がかかりすぎる場合やメモリを大量に使用する場合にコンテンツをストリーミ"
"ングすることが挙げられます。例えば、:ref:`大きなCSVファイルを生成する場合 "
"<streaming-csv-files>` に役立ちます。"

msgid ""
"There are performance considerations when doing this, though. Django, under "
"WSGI, is designed for short-lived requests. Streaming responses will tie a "
"worker process for the entire duration of the response. This may result in "
"poor performance."
msgstr ""
"しかしながら、これを行う際にはパフォーマンスを考慮する必要があります。WSGIの"
"下でのDjangoは、短期間のリクエストのために設計されています。ストリーミングレ"
"スポンスは、レスポンスの全期間にわたってワーカープロセスを占有します。これに"
"より、パフォーマンスが低下する可能性があります。"

msgid ""
"Generally speaking, you would perform expensive tasks outside of the request-"
"response cycle, rather than resorting to a streamed response."
msgstr ""
"一般的に、ストリーミングレスポンスに頼るのではなく、リクエスト/レスポンスサイ"
"クルの外で高コストのタスクを行うほうが良いです。"

msgid ""
"When serving under ASGI, however, a :class:`StreamingHttpResponse` need not "
"stop other requests from being served whilst waiting for I/O. This opens up "
"the possibility of long-lived requests for streaming content and "
"implementing patterns such as long-polling, and server-sent events."
msgstr ""
"しかし、ASGI の下で提供される場合、:class:`StreamingHttpResponse` はI/Oを待っ"
"ている間に他のリクエストが提供されるのを妨げる必要はありません。これにより、"
"ストリーミングコンテンツのための長時間生存するリクエストや、ロングポーリング"
"やサーバー送信イベントといったパターンの実装の可能性が開かれます。"

msgid ""
"Even under ASGI note, :class:`StreamingHttpResponse` should only be used in "
"situations where it is absolutely required that the whole content isn't "
"iterated before transferring the data to the client. Because the content "
"can't be accessed, many middleware can't function normally. For example the "
"``ETag`` and ``Content-Length`` headers can't be generated for streaming "
"responses."
msgstr ""
"ASGI環境下であっても、:class:`StreamingHttpResponse` は、クライアントにデータ"
"を転送する前に全内容がイテレートされることが絶対に必要な状況でのみ使用すべき"
"です。コンテンツにアクセスできないため、多くのミドルウェアが正常に機能しませ"
"ん。例えば、ストリーミングレスポンスには ``ETag`` や ``Content-Length`` ヘッ"
"ダを生成することができません。"

msgid ""
"The :class:`StreamingHttpResponse` is not a subclass of :class:"
"`HttpResponse`, because it features a slightly different API. However, it is "
"almost identical, with the following notable differences:"
msgstr ""
":class:`StreamingHttpResponse` は、若干異なるAPIを特徴とするため、:class:"
"`HttpResponse` のサブクラスではありません。しかし、以下に挙げる顕著な違いを除"
"いて、ほぼ同一です。"

msgid ""
"It should be given an iterator that yields bytestrings, :class:`memoryview`, "
"or strings as content. When serving under WSGI, this should be a sync "
"iterator. When serving under ASGI, then it should be an async iterator."
msgstr ""
"コンテンツとしてバイト文字列、:class:`memoryview`、または文字列を生成するイテ"
"レータを渡すべきです。WSGI下で提供する場合、これは同期イテレータであるべきで"
"す。ASGI下で提供する場合、これは非同期イテレータであるべきです。"

msgid ""
"You cannot access its content, except by iterating the response object "
"itself. This should only occur when the response is returned to the client: "
"you should not iterate the response yourself."
msgstr ""
"その内容にアクセスするには、レスポンスオブジェクト自体をイテレートする必要が"
"あります。これはクライアントにレスポンスが返されたときのみ発生すべきです。自"
"分でレスポンスをイテレートすべきではありません。"

msgid ""
"Under WSGI the response will be iterated synchronously. Under ASGI the "
"response will be iterated asynchronously. (This is why the iterator type "
"must match the protocol you're using.)"
msgstr ""
"WSGIでは、レスポンスは同期的にイテレートされます。ASGIでは、レスポンスは非同"
"期的にイテレートされます。(これが、イテレータのタイプが使用しているプロトコル"
"と一致しなければならない理由です。)"

msgid ""
"To avoid a crash, an incorrect iterator type will be mapped to the correct "
"type during iteration, and a warning will be raised, but in order to do this "
"the iterator must be fully-consumed, which defeats the purpose of using a :"
"class:`StreamingHttpResponse` at all."
msgstr ""
"クラッシュを回避するため、間違ったイテレータのタイプは、イテレート中に正しい"
"タイプにマッピングされ、警告が発生します。ただし、これを行うにはイテレータを"
"完全に消費する必要があり、これは全く :class:`StreamingHttpResponse` を使用す"
"る目的を果たしません。"

msgid ""
"It has no ``content`` attribute. Instead, it has a :attr:"
"`~StreamingHttpResponse.streaming_content` attribute. This can be used in "
"middleware to wrap the response iterable, but should not be consumed."
msgstr ""
"これは ``content`` 属性を持ちません。代わりに :attr:`~StreamingHttpResponse."
"streaming_content` 属性があります。これはミドルウェアでレスポンスのイテラブル"
"をラップするために使用できますが、消費されるべきではありません。"

msgid ""
"You cannot use the file-like object ``tell()`` or ``write()`` methods. Doing "
"so will raise an exception."
msgstr ""
"ファイルライクオブジェクトの ``tell()`` や ``write()`` メソッドは使用できませ"
"ん。これらを使用すると例外が発生します。"

msgid ""
"The :class:`HttpResponseBase` base class is common between :class:"
"`HttpResponse` and :class:`StreamingHttpResponse`."
msgstr ""
":class:`HttpResponse` と :class:`StreamingHttpResponse` は、共通の基底クラ"
"ス :class:`HttpResponseBase` を持っています。"

msgid "Support for asynchronous iteration was added."
msgstr "非同期イテレーションのサポートが追加されました。"

msgid ""
"An iterator of the response content, bytestring encoded according to :attr:"
"`HttpResponse.charset`."
msgstr ""
"レスポンス内容のイテレータ。 バイト文字列は :attr:`HttpResponse.charset` に"
"従ってエンコードされます。"

msgid "This is always ``True``."
msgstr "これは常に ``True`` です。"

msgid ""
"Boolean indicating whether :attr:`StreamingHttpResponse.streaming_content` "
"is an asynchronous iterator or not."
msgstr ""
":attr:`StreamingHttpResponse.streaming_content` が非同期イテレータであるかど"
"うかを示す真偽値です。"

msgid ""
"This is useful for middleware needing to wrap :attr:`StreamingHttpResponse."
"streaming_content`."
msgstr ""
"これは、 :attr:`StreamingHttpResponse.streaming_content` をラップする必要があ"
"るミドルウェアにとって便利です。"

msgid "Handling disconnects"
msgstr "切断の取り扱い"

msgid ""
"If the client disconnects during a streaming response, Django will cancel "
"the coroutine that is handling the response. If you want to clean up "
"resources manually, you can do so by catching the ``asyncio."
"CancelledError``::"
msgstr ""
"クライアントがストリーミングレスポンス中に切断されると、Django はレスポンスを"
"処理しているコルーチンをキャンセルします。リソースの手動クリーンアップを行い"
"たい場合は、``asyncio.CancelledError`` をキャッチして行うことができます:"

msgid ""
"This example only shows how to handle client disconnection while the "
"response is streaming. If you perform long-running operations in your view "
"before returning the ``StreamingHttpResponse`` object, then you may also "
"want to :ref:`handle disconnections in the view <async-handling-disconnect>` "
"itself."
msgstr ""
"この例は、レスポンスがストリーミングされている間にクライアントの切断をどのよ"
"うに処理するかを示しているだけです。ビュー内で ``StreamingHttpResponse`` オブ"
"ジェクトを返す前に長時間実行される操作を行う場合は、ビュー自体で :ref:`切断を"
"処理する <async-handling-disconnect>` 必要があるかもしれません。"

msgid "``FileResponse`` objects"
msgstr "``FileResponse`` オブジェクト"

msgid ""
":class:`FileResponse` is a subclass of :class:`StreamingHttpResponse` "
"optimized for binary files. It uses :pep:`wsgi.file_wrapper <3333#optional-"
"platform-specific-file-handling>` if provided by the wsgi server, otherwise "
"it streams the file out in small chunks."
msgstr ""
":class:`FileResponse` はバイナリファイルに最適化された :class:"
"`StreamingHttpResponse` のサブクラスです。もし WSGI サーバーが提供していれ"
"ば :pep:`wsgi.file_wrapper <3333#optional-platform-specific-file-handling>` "
"を使用し、そうでない場合はファイルを小さなチャンクでストリーミングします。"

msgid ""
"If ``as_attachment=True``, the ``Content-Disposition`` header is set to "
"``attachment``, which asks the browser to offer the file to the user as a "
"download. Otherwise, a ``Content-Disposition`` header with a value of "
"``inline`` (the browser default) will be set only if a filename is available."
msgstr ""
"``as_attachment=True`` だと、``Content-Disposition`` ヘッダーが "
"``attachment`` に設定され、ブラウザにファイルをダウンロードするように要求しま"
"す。それ以外の場合は、ファイル名が利用可能な場合のみ、値が ``inline`` （ブラ"
"ウザのデフォルト値）の ``Content-Disposition`` ヘッダーが設定されます。"

msgid ""
"If ``open_file`` doesn't have a name or if the name of ``open_file`` isn't "
"appropriate, provide a custom file name using the ``filename``  parameter. "
"Note that if you pass a file-like object like ``io.BytesIO``, it's your task "
"to ``seek()`` it before passing it to ``FileResponse``."
msgstr ""
"もし ``open_file`` に名前がない、または ``open_file`` の名前が適切でない場合"
"は、``filename`` パラメータを使用してカスタムファイル名を提供してください。"
"``io.BytesIO`` のようなファイルライクオブジェクトを渡す場合、それを "
"``FileResponse`` に渡す前に ``seek()`` を行うのはあなたの仕事です。"

msgid ""
"The ``Content-Length`` header is automatically set when it can be guessed "
"from the content of ``open_file``."
msgstr ""
"``open_file`` の内容から推測できる場合、 ``Content-Length`` ヘッダーは自動的"
"に設定されます。"

msgid ""
"The ``Content-Type`` header is automatically set when it can be guessed from "
"the ``filename``, or the name of ``open_file``."
msgstr ""
"``Content-Type`` ヘッダーは、``filename`` や ``open_file`` の名前から推測でき"
"る場合には自動的に設定されます。"

msgid ""
"``FileResponse`` accepts any file-like object with binary content, for "
"example a file open in binary mode like so:"
msgstr ""
"``FileResponse`` は、例えば以下のようにバイナリモードで開かれたファイルのよう"
"な、バイナリー内容を持つあらゆるファイルライクオブジェクトを受け付けます。"

msgid ""
"The file will be closed automatically, so don't open it with a context "
"manager."
msgstr ""
"ファイルは自動的に閉じられるため、コンテキストマネージャーで開かないでくださ"
"い。"

msgid "Use under ASGI"
msgstr "ASGI における使用"

msgid ""
"Python's file API is synchronous. This means that the file must be fully "
"consumed in order to be served under ASGI."
msgstr ""
"PythonのファイルAPIは同期的です。これは、ファイルをASGI下で提供するためには、"
"ファイルを完全に消費しなければならないことを意味します。"

msgid ""
"In order to stream a file asynchronously you need to use a third-party "
"package that provides an asynchronous file API, such as `aiofiles <https://"
"github.com/Tinche/aiofiles>`_."
msgstr ""
"非同期にファイルをストリーミングするには、`aiofiles <https://github.com/"
"Tinche/aiofiles>`_ のような非同期ファイルAPIを提供するサードパーティパッケー"
"ジを使用する必要があります。"

msgid ""
"This method is automatically called during the response initialization and "
"set various headers (``Content-Length``, ``Content-Type``, and ``Content-"
"Disposition``) depending on ``open_file``."
msgstr ""
"このメソッドはレスポンス初期化中に自動的に呼び出され、``open_file`` に応じて"
"さまざまなヘッダー (``Content-Length``、``Content-Type``、および ``Content-"
"Disposition``) を設定します。"

msgid "``HttpResponseBase`` class"
msgstr "``HttpResponseBase`` クラス"

msgid ""
"The :class:`HttpResponseBase` class is common to all Django responses. It "
"should not be used to create responses directly, but it can be useful for "
"type-checking."
msgstr ""
":class:`HttpResponseBase` クラスは、Django のすべてのレスポンスに共通です。直"
"接レスポンスを作成するために使用すべきではありませんが、型チェックの際に役立"
"つことがあります。"

msgid "``SchemaEditor``"
msgstr "``SchemaEditor``"

msgid ""
"Django's migration system is split into two parts; the logic for calculating "
"and storing what operations should be run (``django.db.migrations``), and "
"the database abstraction layer that turns things like \"create a model\" or "
"\"delete a field\" into SQL - which is the job of the ``SchemaEditor``."
msgstr ""
"Django のマイグレーションシステムは2つの部分に分かれています。データベースに"
"対してどのような操作を実行するべきかを計算してその結果を保管するロジックの部"
"分　(``django.db.migrations``)と、「モデルを作成する」や「フィールドを削除す"
"る」といった操作を SQL に変換する、データベースの抽象レイヤーの部分です。後者"
"の仕事を担当するのが、 ``SchemaEditor`` です。"

msgid ""
"It's unlikely that you will want to interact directly with ``SchemaEditor`` "
"as a normal developer using Django, but if you want to write your own "
"migration system, or have more advanced needs, it's a lot nicer than writing "
"SQL."
msgstr ""
"Django を使っている普通の開発者が ``SchemaEditor`` を直接扱うことはほとんどあ"
"りませんが、自前のマイグレーションシステムを実装したい場合や、より高度なこと"
"が必要になった場合には、SQL を書くのではなく、こちらを選びましょう。"

msgid ""
"Each database backend in Django supplies its own version of "
"``SchemaEditor``, and it's always accessible via the ``connection."
"schema_editor()`` context manager::"
msgstr ""
"Django のデータベースのバックエンドは、それぞれ対応するバージョンの "
"``SchemaEditor`` を提供しており、好きなときに ``connection.schema_editor()`` "
"コンテキストマネージャを使ってアクセスできます。"

msgid ""
"It must be used via the context manager as this allows it to manage things "
"like transactions and deferred SQL (like creating ``ForeignKey`` "
"constraints)."
msgstr ""
"これは、トランザクションや遅延SQL (``ForeignKey`` 制約の作成など) のようなも"
"のを管理することを可能にするため、コンテキストマネージャを通して使用されなけ"
"ればなりません。"

msgid ""
"It exposes all possible operations as methods, that should be called in the "
"order you wish changes to be applied. Some possible operations or types of "
"change are not possible on all databases - for example, MyISAM does not "
"support foreign key constraints."
msgstr ""
"すべての可能な操作をメソッドとして公開し、変更を適用したい順序で呼び出すべき"
"です。一部の操作や変更の種類は、すべてのデータベースで可能ではありません。例"
"えば、MyISAM は外部キー制約をサポートしていません。"

msgid ""
"If you are writing or maintaining a third-party database backend for Django, "
"you will need to provide a ``SchemaEditor`` implementation in order to work "
"with Django's migration functionality - however, as long as your database is "
"relatively standard in its use of SQL and relational design, you should be "
"able to subclass one of the built-in Django ``SchemaEditor`` classes and "
"tweak the syntax a little."
msgstr ""
"Django のマイグレーション機能を使うためには、サードパーティ製のデータベース"
"バックエンドを書いたり保守したりする場合、 ``SchemaEditor`` の実装を提供する"
"必要があります。しかし、データベースが SQL の使用やリレーショナルデザインにお"
"いて比較的標準的である限り、組み込みの Django ``SchemaEditor`` クラスの一つを"
"サブクラス化して、文法を少し変更するだけで済むはずです。"

msgid "``execute()``"
msgstr "``execute()``"

msgid ""
"Executes the SQL statement passed in, with parameters if supplied. This is a "
"wrapper around the normal database cursors that allows capture of the SQL to "
"a ``.sql`` file if the user wishes."
msgstr ""
"渡されたSQL文を実行し、パラメータが指定されている場合はそれも適用します。これ"
"は、ユーザーが望む場合にSQLを ``.sql`` ファイルにキャプチャできるように、通常"
"のデータベースカーソルの周りに設定されたラッパーです。"

msgid "``create_model()``"
msgstr "``create_model()``"

msgid ""
"Creates a new table in the database for the provided model, along with any "
"unique constraints or indexes it requires."
msgstr ""
"提供されたモデルのために、データベースに新しいテーブルを作成し、必要に応じて"
"ユニーク制約やインデックスも作成します。"

msgid "``delete_model()``"
msgstr "``delete_model()``"

msgid ""
"Drops the model's table in the database along with any unique constraints or "
"indexes it has."
msgstr ""
"モデルのテーブルをデータベースから削除し、それに紐づくユニーク制約やインデッ"
"クスも一緒に削除します。"

msgid "``add_index()``"
msgstr "``add_index()``"

msgid "Adds ``index`` to ``model``’s table."
msgstr "``model`` のテーブルに ``index`` を追加します。"

msgid "``remove_index()``"
msgstr "``remove_index()``"

msgid "Removes ``index`` from ``model``’s table."
msgstr "``model`` のテーブルから ``index`` を削除します。"

msgid "``rename_index()``"
msgstr "``rename_index()``"

msgid "Renames ``old_index`` from ``model``’s table to ``new_index``."
msgstr ""
"``model`` のテーブルの ``old_index`` を ``new_index`` に名前を変更します。"

msgid "``add_constraint()``"
msgstr "``add_constraint()``"

msgid "Adds ``constraint`` to ``model``'s table."
msgstr "``model`` のテーブルに ``constraint`` を追加します。"

msgid "``remove_constraint()``"
msgstr "``remove_constraint()``"

msgid "Removes ``constraint`` from ``model``'s table."
msgstr "``model`` のテーブルから ``constraint`` を削除します。"

msgid "``alter_unique_together()``"
msgstr "``alter_unique_together()``"

msgid ""
"Changes a model's :attr:`~django.db.models.Options.unique_together` value; "
"this will add or remove unique constraints from the model's table until they "
"match the new value."
msgstr ""
"モデルの :attr:`~django.db.models.Options.unique_together` 値を変更します。こ"
"れにより、新しい値に一致するまで、モデルのテーブルからユニーク制約が追加また"
"は削除されます。"

msgid "``alter_index_together()``"
msgstr "``alter_index_together()``"

msgid ""
"Changes a model's :attr:`~django.db.models.Options.index_together` value; "
"this will add or remove indexes from the model's table until they match the "
"new value."
msgstr ""
"モデルの :attr:`~django.db.models.Options.index_together` 値を変更します。こ"
"れにより、新しい値と一致するまで、モデルのテーブルからインデックスを追加また"
"は削除します。"

msgid "``alter_db_table()``"
msgstr "``alter_db_table()``"

msgid "Renames the model's table from ``old_db_table`` to ``new_db_table``."
msgstr ""
"モデルのテーブル名を ``old_db_table`` から ``new_db_table`` に変更します。"

msgid "``alter_db_table_comment()``"
msgstr "``alter_db_table_comment()``"

msgid "Change the ``model``’s table comment to ``new_db_table_comment``."
msgstr "``model`` のテーブルコメントを ``new_db_table_comment`` に変更します。"

msgid "``alter_db_tablespace()``"
msgstr "``alter_db_tablespace()``"

msgid "Moves the model's table from one tablespace to another."
msgstr "モデルのテーブルをあるテーブル空間から別のテーブル空間に移動します。"

msgid "``add_field()``"
msgstr "``add_field()``"

msgid ""
"Adds a column (or sometimes multiple) to the model's table to represent the "
"field. This will also add indexes or a unique constraint if the field has "
"``db_index=True`` or ``unique=True``."
msgstr ""
"モデルのテーブルにフィールドを表すための列（時には複数）を追加します。フィー"
"ルドに ``db_index=True`` や ``unique=True`` が設定されている場合、インデック"
"スやユニーク制約も追加されます。"

msgid ""
"If the field is a ``ManyToManyField`` without a value for ``through``, "
"instead of creating a column, it will make a table to represent the "
"relationship. If ``through`` is provided, it is a no-op."
msgstr ""
"フィールドが ``through`` の値なしで ``ManyToManyField`` の場合、カラムを作成"
"する代わりに、リレーションシップを表すためのテーブルを作成します。"
"``through`` が提供されている場合、それは何も操作しません。"

msgid ""
"If the field is a ``ForeignKey``, this will also add the foreign key "
"constraint to the column."
msgstr ""
"フィールドが ``ForeignKey`` である場合、これによって外部キー制約もカラムに追"
"加されます。"

msgid "``remove_field()``"
msgstr "``remove_field()``"

msgid ""
"Removes the column(s) representing the field from the model's table, along "
"with any unique constraints, foreign key constraints, or indexes caused by "
"that field."
msgstr ""
"フィールドによって追加された、モデルのテーブルからそのフィールドを表す列、お"
"よび、そのフィールドに関連するユニーク制約、外部キー制約、インデックスを削除"
"します。"

msgid ""
"If the field is a ManyToManyField without a value for ``through``, it will "
"remove the table created to track the relationship. If ``through`` is "
"provided, it is a no-op."
msgstr ""
"フィールドが ``through`` の値なしで ManyToManyField の場合、リレーションシッ"
"プを追跡するために作成されたテーブルを削除します。 ``through`` が提供されてい"
"る場合は何も操作しません。"

msgid "``alter_field()``"
msgstr "``alter_field()``"

msgid ""
"This transforms the field on the model from the old field to the new one. "
"This includes changing the name of the column (the :attr:`~django.db.models."
"Field.db_column` attribute), changing the type of the field (if the field "
"class changes), changing the ``NULL`` status of the field, adding or "
"removing field-only unique constraints and indexes, changing primary key, "
"and changing the destination of ``ForeignKey`` constraints."
msgstr ""
"この変換により、モデル上のフィールドが古いフィールドから新しいフィールドへと"
"変更されます。これには、カラムの名前の変更 (:attr:`~django.db.models.Field."
"db_column` 属性)、フィールドのタイプの変更 (フィールドクラスが変更された場"
"合)、フィールドの ``NULL`` ステータスの変更、フィールド専用のユニーク制約やイ"
"ンデックスの追加または削除、プライマリキーの変更、そして ``ForeignKey`` 制約"
"の宛先の変更が含まれます。"

msgid ""
"The most common transformation this cannot do is transforming a "
"``ManyToManyField`` into a normal Field or vice-versa; Django cannot do this "
"without losing data, and so it will refuse to do it. Instead, :meth:`."
"remove_field` and :meth:`.add_field` should be called separately."
msgstr ""
"これが実行できない最も一般的な変換は、``ManyToManyField`` を通常のフィールド"
"に変換すること、またはその逆です。Django はデータを失うことなくこれを行うこと"
"ができないため、実行を拒否します。代わりに、:meth:`.remove_field` と :meth:`."
"add_field` は別々に呼び出されるべきです。"

msgid ""
"If the database has the ``supports_combined_alters``, Django will try and do "
"as many of these in a single database call as possible; otherwise, it will "
"issue a separate ALTER statement for each change, but will not issue ALTERs "
"where no change is required."
msgstr ""
"データベースが ``supports_combined_alters`` を持っている場合、Django はこれら"
"の操作をできるだけ一つのデータベースコールで実行しようとします。そうでなけれ"
"ば、変更が必要な場合にはそれぞれの変更に対して個別の ALTER 文を発行しますが、"
"変更が必要ない場合には ALTER を発行しません。"

msgid "All attributes should be considered read-only unless stated otherwise."
msgstr "特に言及されない限り、すべての属性は読み取り専用です。"

msgid "``connection``"
msgstr "``connection``"

msgid ""
"A connection object to the database. A useful attribute of the connection is "
"``alias`` which can be used to determine the name of the database being "
"accessed."
msgstr ""
"データベースへの  connection オブジェクト。connection の便利な属性に、現在ア"
"クセスしているデータベースの名前を特定するのに使える ``alias`` があります。"

msgid ""
"This is useful when doing data migrations for :ref:`migrations with multiple "
"databases <data-migrations-and-multiple-databases>`."
msgstr ""
"特に、この属性は、:ref:`複数のデータベースに対するマイグレーション <data-"
"migrations-and-multiple-databases>` を行っているときに役に立ちます。"

msgid ""
"Be careful when you override settings, especially when the default value is "
"a non-empty list or dictionary, such as :setting:`STATICFILES_FINDERS`. Make "
"sure you keep the components required by the features of Django you wish to "
"use."
msgstr ""
"設定を上書きするとき、特にデフォルト値が空でないリストや辞書の場合、例えば :"
"setting:`STATICFILES_FINDERS` などは、注意してください。Djangoの使用したい機"
"能に必要なコンポーネントを保持するようにしてください。"

msgid "Core Settings"
msgstr "コアの設定"

msgid ""
"Here's a list of settings available in Django core and their default values. "
"Settings provided by contrib apps are listed below, followed by a topical "
"index of the core settings. For introductory material, see the :doc:"
"`settings topic guide </topics/settings>`."
msgstr ""
"ここでは、Django の core で利用できる設定とそのデフォルト値をリストしました。"
"contrib アプリで提供される設定のリストは、core の設定のトピックのインデックス"
"の下にあります。入門的な資料については、 :doc:`settings のトピックガイド </"
"topics/settings>` を参照してください。"

msgid "``ABSOLUTE_URL_OVERRIDES``"
msgstr "``ABSOLUTE_URL_OVERRIDES``"

msgid "Default: ``{}`` (Empty dictionary)"
msgstr "デフォルト値: ``{}`` (空の辞書)"

msgid ""
"A dictionary mapping ``\"app_label.model_name\"`` strings to functions that "
"take a model object and return its URL. This is a way of inserting or "
"overriding ``get_absolute_url()`` methods on a per-installation basis. "
"Example::"
msgstr ""
"``\"app_label.model_name\"`` 文字列をモデルオブジェクトを受け取り、その URL "
"を返す関数へのマッピングを行う辞書です。これは、インストールごとに "
"``get_absolute_url()`` メソッドを挿入またはオーバーライドする方法です。例："

msgid ""
"The model name used in this setting should be all lowercase, regardless of "
"the case of the actual model class name."
msgstr ""
"この設定で使用するモデル名は、実際のモデルクラス名の大文字小文字に関わらず、"
"すべて小文字である必要があります。"

msgid "``ADMINS``"
msgstr "``ADMINS``"

msgid "Default: ``[]`` (Empty list)"
msgstr "デフォルト値: ``[]`` (空のリスト)"

msgid ""
"A list of all the people who get code error notifications. When :setting:"
"`DEBUG=False <DEBUG>` and :class:`~django.utils.log.AdminEmailHandler` is "
"configured in :setting:`LOGGING` (done by default), Django emails these "
"people the details of exceptions raised in the request/response cycle."
msgstr ""
"コードエラー通知を受け取る全ての人々のリストです。 :setting:`DEBUG=False "
"<DEBUG>` が設定され、 :class:`~django.utils.log.AdminEmailHandler` が :"
"setting:`LOGGING` に設定されている場合（デフォルトで設定されています）、"
"Djangoはこれらの人々にリクエスト/レスポンスサイクルで発生した例外の詳細をメー"
"ルで送信します。"

msgid ""
"Each item in the list should be a tuple of (Full name, email address). "
"Example::"
msgstr ""
"リスト内の各項目は、(フルネーム、メールアドレス) のタプルである必要がありま"
"す。例:"

msgid "``ALLOWED_HOSTS``"
msgstr "``ALLOWED_HOSTS``"

msgid ""
"A list of strings representing the host/domain names that this Django site "
"can serve. This is a security measure to prevent :ref:`HTTP Host header "
"attacks <host-headers-virtual-hosting>`, which are possible even under many "
"seemingly-safe web server configurations."
msgstr ""
"Django サイトを配信できるホスト/ドメイン名を表す文字列のリストです。これはセ"
"キュリティ対策の手段の1つで、一見安全な設定の Web サーバでも晒される可能性が"
"高い、 :ref:`HTTP Host header 攻撃 <host-headers-virtual-hosting>` を防ぐこと"
"ができます。"

msgid ""
"Values in this list can be fully qualified names (e.g. ``'www.example."
"com'``), in which case they will be matched against the request's ``Host`` "
"header exactly (case-insensitive, not including port). A value beginning "
"with a period can be used as a subdomain wildcard: ``'.example.com'`` will "
"match ``example.com``, ``www.example.com``, and any other subdomain of "
"``example.com``. A value of ``'*'`` will match anything; in this case you "
"are responsible to provide your own validation of the ``Host`` header "
"(perhaps in a middleware; if so this middleware must be listed first in :"
"setting:`MIDDLEWARE`)."
msgstr ""
"このリスト中の値は完全修飾名 (fully qualified names) (例: ``'www.example."
"com'``) でも大丈夫です。その場合には、リクエストの ``Host`` ヘッダに完全一致"
"するかチェックされます (ポートを含まない、大文字小文字を無視した比較になりま"
"す)。ピリオドで始まる値は、サブドメインのワイルドカードとして利用できます。た"
"とえば、``'.example.com'`` は ``example.com`` や ``www.example.com`` などの他"
"のすべての ``example.com`` サブドメインにマッチします。``'*'`` という値はあら"
"ゆるヘッダにマッチします。この場合には、責任を持って自前の ``Host`` ヘッダ検"
"証機 (おそらくミドルウェアの形になり、その場合は :setting:`MIDDLEWARE` 設定の"
"最初に置く必要があります) を書かなければなりません。"

msgid ""
"Django also allows the `fully qualified domain name (FQDN)`_ of any entries. "
"Some browsers include a trailing dot in the ``Host`` header which Django "
"strips when performing host validation."
msgstr ""
"Django はあらゆるエントリで `fully qualified domain name (FQDN)`_ を許可して"
"います。ブラウザの中には ``Host`` ヘッダの最後にドットを付けるもありますが、"
"Django は host の検証機でそれを取り除きます。"

msgid ""
"If the ``Host`` header (or ``X-Forwarded-Host`` if :setting:"
"`USE_X_FORWARDED_HOST` is enabled) does not match any value in this list, "
"the :meth:`django.http.HttpRequest.get_host()` method will raise :exc:"
"`~django.core.exceptions.SuspiciousOperation`."
msgstr ""
"``Host`` ヘッダ (と :setting:`USE_X_FORWARDED_HOST` が有効な場合は ``X-"
"Forwarded-Host``) が、このリストのどれとも一致しない場合、 :meth:`django."
"http.HttpRequest.get_host()` は :exc:`~django.core.exceptions."
"SuspiciousOperation` 例外を起こします。"

msgid ""
"When :setting:`DEBUG` is ``True`` and ``ALLOWED_HOSTS`` is empty, the host "
"is validated against ``['.localhost', '127.0.0.1', '[::1]']``."
msgstr ""
":setting:`DEBUG` が ``True`` であり、かつ ``ALLOWED_HOSTS`` が空の場合、ホス"
"トは ``['.localhost', '127.0.0.1', '[::1]']`` に対して検証されます。"

msgid ""
"``ALLOWED_HOSTS`` is also :ref:`checked when running tests <topics-testing-"
"advanced-multiple-hosts>`."
msgstr ""
"``ALLOWED_HOSTS`` は、テストを実行する際にも :ref:`チェックされます <topics-"
"testing-advanced-multiple-hosts>` 。"

msgid ""
"This validation only applies via :meth:`~django.http.HttpRequest."
"get_host()`; if your code accesses the ``Host`` header directly from "
"``request.META`` you are bypassing this security protection."
msgstr ""
"このヘッダの検証は :meth:`~django.http.HttpRequest.get_host()` メソッドの実行"
"時にのみ適用されます。もし ``request.META`` から直接 ``Host`` ヘッダにアクセ"
"スするコードを書いてしまうと、このセキュリティプロテクションを回避してしまう"
"ので注意してください。"

msgid "``APPEND_SLASH``"
msgstr "``APPEND_SLASH``"

msgid "Default: ``True``"
msgstr "デフォルト値: ``True``"

msgid ""
"When set to ``True``, if the request URL does not match any of the patterns "
"in the URLconf and it doesn't end in a slash, an HTTP redirect is issued to "
"the same URL with a slash appended. Note that the redirect may cause any "
"data submitted in a POST request to be lost."
msgstr ""
"``True`` に設定すると、リクエスト URL が URLconf 内のどのパターンにもマッチせ"
"ず、/ で終わっていなかった場合に、末尾に / を追加した URL への HTTP リダイレ"
"クトを発行します。ただし、リダイレクトすると POST リクエストで送信するデータ"
"が失われることがあるので注意が必要です。"

msgid ""
"The :setting:`APPEND_SLASH` setting is only used if :class:`~django."
"middleware.common.CommonMiddleware` is installed (see :doc:`/topics/http/"
"middleware`). See also :setting:`PREPEND_WWW`."
msgstr ""
":setting:`APPEND_SLASH` 設定は :class:`~django.middleware.common."
"CommonMiddleware` がインストールされているときのみ有効です。詳しくは see :"
"doc:`/topics/http/middleware` を参照。また :setting:`PREPEND_WWW` も参照して"
"ください。"

msgid "``CACHES``"
msgstr "``CACHES``"

msgid ""
"A dictionary containing the settings for all caches to be used with Django. "
"It is a nested dictionary whose contents maps cache aliases to a dictionary "
"containing the options for an individual cache."
msgstr ""
"Django で使用されるすべてのキャッシュの設定を含む辞書です。これは、キャッシュ"
"のエイリアスを個々のキャッシュのオプションを含む辞書にマッピングする内容のネ"
"ストされた辞書です。"

msgid ""
"The :setting:`CACHES` setting must configure a ``default`` cache; any number "
"of additional caches may also be specified. If you are using a cache backend "
"other than the local memory cache, or you need to define multiple caches, "
"other options will be required. The following cache options are available."
msgstr ""
":setting:`CACHES` 設定では、``default`` キャッシュを設定する必要があります。"
"追加で任意の数のキャッシュを指定することもできます。ローカルメモリキャッシュ"
"以外のキャッシュバックエンドを使用する場合、または複数のキャッシュを定義する"
"必要がある場合は、他のオプションが必要になります。以下のキャッシュオプション"
"が利用可能です。"

msgid "``BACKEND``"
msgstr "``BACKEND``"

msgid "Default: ``''`` (Empty string)"
msgstr "デフォルト値: ``''`` (空文字列)"

msgid "The cache backend to use. The built-in cache backends are:"
msgstr ""
"使用するキャッシュ用バックエンド。ビルトインのキャッシュ用バックエンドには、"
"次のものがあります。"

msgid "``'django.core.cache.backends.db.DatabaseCache'``"
msgstr "``'django.core.cache.backends.db.DatabaseCache'``"

msgid "``'django.core.cache.backends.dummy.DummyCache'``"
msgstr "``'django.core.cache.backends.dummy.DummyCache'``"

msgid "``'django.core.cache.backends.filebased.FileBasedCache'``"
msgstr "``'django.core.cache.backends.filebased.FileBasedCache'``"

msgid "``'django.core.cache.backends.locmem.LocMemCache'``"
msgstr "``'django.core.cache.backends.locmem.LocMemCache'``"

msgid "``'django.core.cache.backends.memcached.PyMemcacheCache'``"
msgstr "``'django.core.cache.backends.memcached.PyMemcacheCache'``"

msgid "``'django.core.cache.backends.memcached.PyLibMCCache'``"
msgstr "``'django.core.cache.backends.memcached.PyLibMCCache'``"

msgid "``'django.core.cache.backends.redis.RedisCache'``"
msgstr "``'django.core.cache.backends.redis.RedisCache'``"

msgid ""
"You can use a cache backend that doesn't ship with Django by setting :"
"setting:`BACKEND <CACHES-BACKEND>` to a fully-qualified path of a cache "
"backend class (i.e. ``mypackage.backends.whatever.WhateverCache``)."
msgstr ""
"Django に同梱されていないキャッシュ用バックエンドを使用する時は、:setting:"
"`BACKEND <CACHES-BACKEND>` にバックエンドのクラスの完全修飾パス (例: "
"``mypackage.backends.whatever.WhateverCache``) を設定してください。"

msgid "``KEY_FUNCTION``"
msgstr "``KEY_FUNCTION``"

msgid ""
"A string containing a dotted path to a function (or any callable) that "
"defines how to compose a prefix, version and key into a final cache key. The "
"default implementation is equivalent to the function::"
msgstr ""
"ドット区切りパスを含む文字列で、プレフィックス、バージョン、キーを最終的な"
"キャッシュキーに組み合わせる方法を定義する関数（または任意の呼び出し可能オブ"
"ジェクト）を指します。デフォルトの実装は次の関数と同等です:"

msgid ""
"You may use any key function you want, as long as it has the same argument "
"signature."
msgstr ""
"好きなキー関数を使用できますが、同じ引数のシグネチャを持つことが条件です。"

msgid ""
"See the :ref:`cache documentation <cache_key_transformation>` for more "
"information."
msgstr ""
"詳細は :ref:`キャッシュのドキュメント <cache_key_transformation>` を参照して"
"ください。"

msgid "``KEY_PREFIX``"
msgstr "``KEY_PREFIX``"

msgid ""
"A string that will be automatically included (prepended by default) to all "
"cache keys used by the Django server."
msgstr ""
"Djangoサーバーで使用されるすべてのキャッシュキーにデフォルトで自動的に追加"
"（先頭に付けられる）される文字列。"

msgid ""
"See the :ref:`cache documentation <cache_key_prefixing>` for more "
"information."
msgstr ""
"詳細は :ref:`キャッシュのドキュメント <cache_key_prefixing>` を参照してくださ"
"い。"

msgid "``LOCATION``"
msgstr "``LOCATION``"

msgid ""
"The location of the cache to use. This might be the directory for a file "
"system cache, a host and port for a memcache server, or an identifying name "
"for a local memory cache. e.g.::"
msgstr ""
"使用するキャッシュの位置。これはファイルシステムキャッシュ用のディレクトリ、"
"memcacheサーバーのホストとポート、またはローカルメモリキャッシュの識別名など"
"が該当します。例:"

msgid "``OPTIONS``"
msgstr "``OPTIONS``"

msgid "Default: ``None``"
msgstr "デフォルト値: ``None``"

msgid ""
"Extra parameters to pass to the cache backend. Available parameters vary "
"depending on your cache backend."
msgstr ""
"キャッシュバックエンドに渡す追加パラメータ。利用可能なパラメータは、使用して"
"いるキャッシュバックエンドによって異なります。"

msgid ""
"Some information on available parameters can be found in the :ref:`cache "
"arguments <cache_arguments>` documentation. For more information, consult "
"your backend module's own documentation."
msgstr ""
"利用可能なパラメータに関する情報は、 :ref:`キャッシュ式数 <cache_arguments>` "
"のドキュメントに記載されています。詳細については、バックエンドモジュールの独"
"自のドキュメントを参照してください。"

msgid "``TIMEOUT``"
msgstr "``TIMEOUT``"

msgid "Default: ``300``"
msgstr "デフォルト値: ``300``"

msgid ""
"The number of seconds before a cache entry is considered stale. If the value "
"of this setting is ``None``, cache entries will not expire. A value of ``0`` "
"causes keys to immediately expire (effectively \"don't cache\")."
msgstr ""
"キャッシュエントリが古いとみなされるまでの秒数。この設定の値が ``None`` であ"
"る場合、キャッシュエントリは期限切れになりません。値が ``0`` の場合、キーは即"
"座に期限切れになります（実質的に「キャッシュしない」）。"

msgid "``VERSION``"
msgstr "``VERSION``"

msgid "Default: ``1``"
msgstr "デフォルト値: ``1``"

msgid ""
"The default version number for cache keys generated by the Django server."
msgstr ""
"Django サーバーによって生成されるキャッシュキーのデフォルトのバージョン番号。"

msgid ""
"See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""
"詳細は :ref:`キャッシュのドキュメント <cache_versioning>` を参照してくださ"
"い。"

msgid "``CACHE_MIDDLEWARE_ALIAS``"
msgstr "``CACHE_MIDDLEWARE_ALIAS``"

msgid "Default: ``'default'``"
msgstr "デフォルト値: ``'default'``"

msgid ""
"The cache connection to use for the :ref:`cache middleware <the-per-site-"
"cache>`."
msgstr ""
":ref:`キャッシュミドルウェア <the-per-site-cache>` に使用するキャッシュ接続。"

msgid "``CACHE_MIDDLEWARE_KEY_PREFIX``"
msgstr "``CACHE_MIDDLEWARE_KEY_PREFIX``"

msgid ""
"A string which will be prefixed to the cache keys generated by the :ref:"
"`cache middleware <the-per-site-cache>`. This prefix is combined with the :"
"setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` setting; it does not replace it."
msgstr ""
"キャッシュキーの生成時に :ref:`キャッシュミドルウェア <the-per-site-cache>` "
"からプレフィックスとして追加される文字列です。このプレフィックスは :setting:"
"`KEY_PREFIX <CACHES-KEY_PREFIX>` 設定と組み合わされます。それを置き換えるもの"
"ではありません。"

msgid "See :doc:`/topics/cache`."
msgstr ":doc:`/topics/cache` を参照。"

msgid "``CACHE_MIDDLEWARE_SECONDS``"
msgstr "``CACHE_MIDDLEWARE_SECONDS``"

msgid "Default: ``600``"
msgstr "デフォルト値: ``600``"

msgid ""
"The default integer number of seconds to cache a page for the :ref:`cache "
"middleware <the-per-site-cache>`."
msgstr ""
":ref:`キャッシュミドルウェア <the-per-site-cache>` 用のページをキャッシュする"
"デフォルトの秒数。"

msgid "``CSRF_COOKIE_AGE``"
msgstr "``CSRF_COOKIE_AGE``"

msgid "Default: ``31449600`` (approximately 1 year, in seconds)"
msgstr "デフォルト値: ``31449600`` (約1年、秒単位)"

msgid "The age of CSRF cookies, in seconds."
msgstr "CSRF クッキーの有効期間 (秒単位)。"

msgid ""
"The reason for setting a long-lived expiration time is to avoid problems in "
"the case of a user closing a browser or bookmarking a page and then loading "
"that page from a browser cache. Without persistent cookies, the form "
"submission would fail in this case."
msgstr ""
"長期間の有効期限を設定する理由は、ユーザーがブラウザを閉じたり、ページをブッ"
"クマークして、後でそのページをブラウザのキャッシュから読み込む場合の問題を避"
"けるためです。永続的なクッキーがなければ、この場合にフォームの送信は失敗する"
"でしょう。"

msgid ""
"Some browsers (specifically Internet Explorer) can disallow the use of "
"persistent cookies or can have the indexes to the cookie jar corrupted on "
"disk, thereby causing CSRF protection checks to (sometimes intermittently) "
"fail. Change this setting to ``None`` to use session-based CSRF cookies, "
"which keep the cookies in-memory instead of on persistent storage."
msgstr ""
"一部のブラウザ（特にInternet Explorer）では、永続的なクッキーの使用を禁止した"
"り、クッキージャーのインデックスがディスク上で破損して、CSRF保護チェックが"
"（時々断続的に）失敗する原因となることがあります。この設定を ``None`` に変更"
"すると、クッキーを永続的なストレージではなくメモリ内に保持するセッションベー"
"スのCSRFクッキーを使用します。"

msgid "``CSRF_COOKIE_DOMAIN``"
msgstr "``CSRF_COOKIE_DOMAIN``"

msgid ""
"The domain to be used when setting the CSRF cookie.  This can be useful for "
"easily allowing cross-subdomain requests to be excluded from the normal "
"cross site request forgery protection.  It should be set to a string such as "
"``\".example.com\"`` to allow a POST request from a form on one subdomain to "
"be accepted by a view served from another subdomain."
msgstr ""
"CSRFクッキーを設定する際に使用されるドメインです。通常のクロスサイトリクエス"
"トフォージェリ保護から除外されるクロスサブドメインリクエストを簡単に許可する"
"のに役立ちます。フォームからのPOSTリクエストが別のサブドメインから提供される"
"ビューで受け入れられるようにするには、 ``\".example.com\"`` のような文字列で"
"設定する必要があります。"

msgid ""
"Please note that the presence of this setting does not imply that Django's "
"CSRF protection is safe from cross-subdomain attacks by default - please see "
"the :ref:`CSRF limitations <csrf-limitations>` section."
msgstr ""
"この設定が存在することは、デフォルトで Django の CSRF 保護が、クロスサブドメ"
"イン攻撃から安全であることを意味するものではありません。詳細については、 :"
"ref:`CSRF の制限 <csrf-limitations>` セクションを参照してください。"

msgid "``CSRF_COOKIE_HTTPONLY``"
msgstr "``CSRF_COOKIE_HTTPONLY``"

msgid "Default: ``False``"
msgstr "デフォルト値: ``False``"

msgid ""
"Whether to use ``HttpOnly`` flag on the CSRF cookie. If this is set to "
"``True``, client-side JavaScript will not be able to access the CSRF cookie."
msgstr ""
"CSRFクッキーに ``HttpOnly`` フラグを使用するかどうか。これが ``True`` に設定"
"されている場合、クライアントサイドのJavaScriptはCSRFクッキーにアクセスできま"
"せん。"

msgid ""
"Designating the CSRF cookie as ``HttpOnly`` doesn't offer any practical "
"protection because CSRF is only to protect against cross-domain attacks. If "
"an attacker can read the cookie via JavaScript, they're already on the same "
"domain as far as the browser knows, so they can do anything they like "
"anyway. (XSS is a much bigger hole than CSRF.)"
msgstr ""
"CSRFクッキーを ``HttpOnly`` として指定しても、実際のところ保護にはなりませ"
"ん。なぜなら、CSRFはクロスドメイン攻撃を防ぐためだけに存在するからです。攻撃"
"者がJavaScript経由でクッキーを読み取ることができる場合、ブラウザが知っている"
"限りでは既に同一ドメイン上にいるので、何でも好きなことを行うことができます。"
"(XSSはCSRFよりもずっと大きな脅威です。)"

msgid ""
"Although the setting offers little practical benefit, it's sometimes "
"required by security auditors."
msgstr ""
"この設定が実際に大きな利益を提供することは少ないですが、セキュリティ監査員に"
"よっては必要とされることがあります。"

msgid ""
"If you enable this and need to send the value of the CSRF token with an AJAX "
"request, your JavaScript must pull the value :ref:`from a hidden CSRF token "
"form input <acquiring-csrf-token-from-html>` instead of :ref:`from the "
"cookie <acquiring-csrf-token-from-cookie>`."
msgstr ""
"これを有効にし、AJAXリクエストでCSRFトークンの値を送信する必要がある場合、"
"JavaScriptは :ref:`クッキーから <acquiring-csrf-token-from-cookie>` ではな"
"く、 :ref:`隠されたCSRFトークンのフォーム入力から <acquiring-csrf-token-from-"
"html>` 値を取得する必要があります。"

msgid "See :setting:`SESSION_COOKIE_HTTPONLY` for details on ``HttpOnly``."
msgstr ""
"``HttpOnly`` の詳細については、:setting:`SESSION_COOKIE_HTTPONLY` を参照して"
"ください。"

msgid "``CSRF_COOKIE_NAME``"
msgstr "``CSRF_COOKIE_NAME``"

msgid "Default: ``'csrftoken'``"
msgstr "デフォルト値: ``'csrftoken'``"

msgid ""
"The name of the cookie to use for the CSRF authentication token. This can be "
"whatever you want (as long as it's different from the other cookie names in "
"your application). See :doc:`/ref/csrf`."
msgstr ""
"CSRF 認証トークンに使用するクッキーの名前。他のクッキー名と異なる限り、任意の"
"名前を使用できます。詳細は、 :doc:`/ref/csrf` を参照してください。"

msgid "``CSRF_COOKIE_PATH``"
msgstr "``CSRF_COOKIE_PATH``"

msgid "Default: ``'/'``"
msgstr "デフォルト値: ``'/'``"

msgid ""
"The path set on the CSRF cookie. This should either match the URL path of "
"your Django installation or be a parent of that path."
msgstr ""
"CSRFクッキーに設定されたパス。これは、DjangoインストールのURLパスと一致する"
"か、そのパスの親である必要があります。"

msgid ""
"This is useful if you have multiple Django instances running under the same "
"hostname. They can use different cookie paths, and each instance will only "
"see its own CSRF cookie."
msgstr ""
"複数の Django インスタンスを同じホスト名で実行している場合に便利です。異なる"
"クッキーパスを使用でき、各インスタンスは自身の CSRF クッキーのみを確認できま"
"す。"

msgid "``CSRF_COOKIE_SAMESITE``"
msgstr "``CSRF_COOKIE_SAMESITE``"

msgid "Default: ``'Lax'``"
msgstr "デフォルト値: ``'Lax'``"

msgid ""
"The value of the `SameSite`_ flag on the CSRF cookie. This flag prevents the "
"cookie from being sent in cross-site requests."
msgstr ""
"CSRFクッキーの `SameSite`_ フラグの値です。このフラグは、クロスサイトリクエス"
"トでクッキーが送信されるのを防ぎます。"

msgid "See :setting:`SESSION_COOKIE_SAMESITE` for details about ``SameSite``."
msgstr ""
"``SameSite`` についての詳細は、:setting:`SESSION_COOKIE_SAMESITE` を参照して"
"ください。"

msgid "``CSRF_COOKIE_SECURE``"
msgstr "``CSRF_COOKIE_SECURE``"

msgid ""
"Whether to use a secure cookie for the CSRF cookie. If this is set to "
"``True``, the cookie will be marked as \"secure\", which means browsers may "
"ensure that the cookie is only sent with an HTTPS connection."
msgstr ""
"CSRF（Cross-Site Request Forgery）クッキーにセキュアクッキーを使用するかどう"
"かを指定します。これを ``True`` に設定すると、そのクッキーは「セキュア」とし"
"てマークされ、ブラウザはそのクッキーがHTTPS接続でのみ送信されることを確認でき"
"ます。"

msgid "``CSRF_USE_SESSIONS``"
msgstr "``CSRF_USE_SESSIONS``"

msgid ""
"Whether to store the CSRF token in the user's session instead of in a "
"cookie. It requires the use of :mod:`django.contrib.sessions`."
msgstr ""
"ユーザーのセッション内にCSRFトークンをCookieではなく保存するかどうか。これを"
"使用するには、 :mod:`django.contrib.sessions` の使用が必要です。"

msgid ""
"Storing the CSRF token in a cookie (Django's default) is safe, but storing "
"it in the session is common practice in other web frameworks and therefore "
"sometimes demanded by security auditors."
msgstr ""
"CSRF トークンをクッキーに保存する（Django のデフォルト）は安全ですが、他の"
"ウェブフレームワークではセッションに保存することが一般的であり、そのためセ"
"キュリティ監査員によってしばしば要求されます。"

msgid ""
"Since the :ref:`default error views <error-views>` require the CSRF token, :"
"class:`~django.contrib.sessions.middleware.SessionMiddleware` must appear "
"in :setting:`MIDDLEWARE` before any middleware that may raise an exception "
"to trigger an error view (such as :exc:`~django.core.exceptions."
"PermissionDenied`) if you're using ``CSRF_USE_SESSIONS``. See :ref:"
"`middleware-ordering`."
msgstr ""
":ref:`デフォルトのエラービュー <error-views>` が CSRF トークンを必要とするた"
"め、``CSRF_USE_SESSIONS`` を使用している場合、エラービューをトリガーする可能"
"性のある例外（例えば :exc:`~django.core.exceptions.PermissionDenied` など）を"
"引き起こす可能性があるミドルウェアよりも前に、 :class:`~django.contrib."
"sessions.middleware.SessionMiddleware` が :setting:`MIDDLEWARE` に登録されて"
"いる必要があります。 :ref:`middleware-ordering` を参照してください。"

msgid "``CSRF_FAILURE_VIEW``"
msgstr "``CSRF_FAILURE_VIEW``"

msgid "Default: ``'django.views.csrf.csrf_failure'``"
msgstr "デフォルト値: ``'django.views.csrf.csrf_failure'``"

msgid ""
"A dotted path to the view function to be used when an incoming request is "
"rejected by the :doc:`CSRF protection </ref/csrf>`. The function should have "
"this signature::"
msgstr ""
":doc:`CSRF保護 </ref/csrf>` によって受信リクエストが拒否された場合に使用され"
"るビュー関数へのドット区切りパス。関数には次のシグネチャが必要です:"

msgid ""
"where ``reason`` is a short message (intended for developers or logging, not "
"for end users) indicating the reason the request was rejected. It should "
"return an :class:`~django.http.HttpResponseForbidden`."
msgstr ""
"``reason`` は、リクエストが拒否された理由を示す短いメッセージ（開発者やログ用"
"であり、エンドユーザー向けではありません）です。これは :class:`~django.http."
"HttpResponseForbidden` を返すべきです。"

msgid ""
"``django.views.csrf.csrf_failure()`` accepts an additional ``template_name`` "
"parameter that defaults to ``'403_csrf.html'``. If a template with that name "
"exists, it will be used to render the page."
msgstr ""
"``django.views.csrf.csrf_failure()`` は追加の ``template_name`` パラメータを"
"受け付け、デフォルトでは ``'403_csrf.html'`` になっています。その名前のテンプ"
"レートが存在する場合、ページのレンダリングに使用されます。"

msgid "``CSRF_HEADER_NAME``"
msgstr "``CSRF_HEADER_NAME``"

msgid "Default: ``'HTTP_X_CSRFTOKEN'``"
msgstr "デフォルト値: ``'HTTP_X_CSRFTOKEN'``"

msgid "The name of the request header used for CSRF authentication."
msgstr "CSRF認証に使用されるリクエストヘッダーの名前。"

msgid ""
"As with other HTTP headers in ``request.META``, the header name received "
"from the server is normalized by converting all characters to uppercase, "
"replacing any hyphens with underscores, and adding an ``'HTTP_'`` prefix to "
"the name. For example, if your client sends a ``'X-XSRF-TOKEN'`` header, the "
"setting should be ``'HTTP_X_XSRF_TOKEN'``."
msgstr ""
"``request.META`` の他の HTTP ヘッダと同様に、サーバーから受信したヘッダ名は、"
"すべての文字を大文字に変換し、ハイフンをアンダースコアに置き換え、名前に "
"``'HTTP_'`` プレフィックスを追加することで正規化されます。たとえば、クライア"
"ントが ``'X-XSRF-TOKEN'`` ヘッダを送信する場合、設定は "
"``'HTTP_X_XSRF_TOKEN'`` であるべきです。"

msgid "``CSRF_TRUSTED_ORIGINS``"
msgstr "``CSRF_TRUSTED_ORIGINS``"

msgid "A list of trusted origins for unsafe requests (e.g. ``POST``)."
msgstr ""
"安全でないリクエスト (例: ``POST``) のための信頼できるオリジンのリスト。"

msgid ""
"For requests that include the ``Origin`` header, Django's CSRF protection "
"requires that header match the origin present in the ``Host`` header."
msgstr ""
"``Origin`` ヘッダーを含むリクエストに対して、Django の CSRF 保護は、そのヘッ"
"ダーが ``Host`` ヘッダーに存在するオリジンと一致することを要求します。"

msgid ""
"For a :meth:`secure <django.http.HttpRequest.is_secure>` unsafe request that "
"doesn't include the ``Origin`` header, the request must have a ``Referer`` "
"header that matches the origin present in the ``Host`` header."
msgstr ""
"``Origin`` ヘッダーを含まない :meth:`secure <django.http.HttpRequest."
"is_secure>` でないリクエストには、``Host`` ヘッダーに存在するオリジンと一致す"
"る ``Referer`` ヘッダーが必要です。"

msgid ""
"These checks prevent, for example, a ``POST`` request from ``subdomain."
"example.com`` from succeeding against ``api.example.com``. If you need cross-"
"origin unsafe requests, continuing the example, add ``'https://subdomain."
"example.com'`` to this list (and/or ``http://...`` if requests originate "
"from an insecure page)."
msgstr ""
"これらのチェックは、例えば、``subdomain.example.com`` からの ``POST`` リクエ"
"ストが ``api.example.com`` に対して成功するのを防ぎます。クロスオリジンで安全"
"でないリクエストが必要な場合、例を続けると、このリストに ``'https://"
"subdomain.example.com'`` を追加してください（そして、リクエストが安全でない"
"ページから発生する場合は ``http://...`` も追加します）。"

msgid ""
"The setting also supports subdomains, so you could add ``'https://*.example."
"com'``, for example, to allow access from all subdomains of ``example.com``."
msgstr ""
"この設定はサブドメインもサポートしているので、例えば ``'https://*.example."
"com'`` を追加することで、``example.com`` の全サブドメインからのアクセスを許可"
"できます。"

msgid "``DATABASES``"
msgstr "``DATABASES``"

msgid ""
"A dictionary containing the settings for all databases to be used with "
"Django. It is a nested dictionary whose contents map a database alias to a "
"dictionary containing the options for an individual database."
msgstr ""
"Django で使用される全てのデータベースの設定を含む辞書です。これは、データベー"
"スエイリアスを個々のデータベースのオプションを含む辞書にマッピングする内容の"
"ネストされた辞書です。"

msgid ""
"The :setting:`DATABASES` setting must configure a ``default`` database; any "
"number of additional databases may also be specified."
msgstr ""
":setting:`DATABASES` 設定では、``default`` データベースを設定する必要がありま"
"す。追加で任意の数のデータベースを指定することもできます。"

msgid ""
"The simplest possible settings file is for a single-database setup using "
"SQLite. This can be configured using the following::"
msgstr ""
"最もシンプルな設定ファイルは、SQLite を使用した単一データベース設定です。これ"
"は以下のように設定できます。"

msgid ""
"When connecting to other database backends, such as MariaDB, MySQL, Oracle, "
"or PostgreSQL, additional connection parameters will be required. See the :"
"setting:`ENGINE <DATABASE-ENGINE>` setting below on how to specify other "
"database types. This example is for PostgreSQL::"
msgstr ""
"MariaDB、MySQL、Oracle、または PostgreSQL などの他のデータベースバックエンド"
"に接続する場合、追加の接続パラメータが必要になります。他のデータベースタイプ"
"を指定する方法については、以下の :setting:`ENGINE <DATABASE-ENGINE>` 設定を参"
"照してください。この例は PostgreSQL 用です:"

msgid ""
"The following inner options that may be required for more complex "
"configurations are available:"
msgstr "より複雑な設定に必要な次の内部オプションが利用可能です:"

msgid "``ATOMIC_REQUESTS``"
msgstr "``ATOMIC_REQUESTS``"

msgid ""
"Set this to ``True`` to wrap each view in a transaction on this database. "
"See :ref:`tying-transactions-to-http-requests`."
msgstr ""
"これを ``True`` に設定すると、このデータベース上の各ビューをトランザクション"
"でラップします。:ref:`tying-transactions-to-http-requests` を参照してくださ"
"い。"

msgid "``AUTOCOMMIT``"
msgstr "``AUTOCOMMIT``"

msgid ""
"Set this to ``False`` if you want to :ref:`disable Django's transaction "
"management <deactivate-transaction-management>` and implement your own."
msgstr ""
"これを ``False`` に設定すると、 :ref:`Djangoのトランザクション管理を無効にし"
"て <deactivate-transaction-management>` 、独自のトランザクション管理を実装し"
"たい場合に利用できます。"

msgid "``ENGINE``"
msgstr "``ENGINE``"

msgid "The database backend to use. The built-in database backends are:"
msgstr ""
"使用するデータベースバックエンドです。組み込みのデータベースバックエンドは次"
"の通りです:"

msgid "``'django.db.backends.postgresql'``"
msgstr "``'django.db.backends.postgresql'``"

msgid "``'django.db.backends.mysql'``"
msgstr "``'django.db.backends.mysql'``"

msgid "``'django.db.backends.sqlite3'``"
msgstr "``'django.db.backends.sqlite3'``"

msgid "``'django.db.backends.oracle'``"
msgstr "``'django.db.backends.oracle'``"

msgid ""
"You can use a database backend that doesn't ship with Django by setting "
"``ENGINE`` to a fully-qualified path (i.e. ``mypackage.backends.whatever``)."
msgstr ""
"Django に同梱されていないデータベースバックエンドを使用するには、``ENGINE`` "
"を完全修飾パス (例: ``mypackage.backends.whatever``) に設定します。"

msgid "``HOST``"
msgstr "``HOST``"

msgid ""
"Which host to use when connecting to the database. An empty string means "
"localhost. Not used with SQLite."
msgstr ""
"データベースに接続する際に使用するホストです。空の文字列の場合は localhost を"
"意味します。SQLite では使用されません。"

msgid ""
"If this value starts with a forward slash (``'/'``) and you're using MySQL, "
"MySQL will connect via a Unix socket to the specified socket. For example::"
msgstr ""
"この値がスラッシュ (``'/'``) で始まり、MySQL を使用している場合、MySQL は指定"
"されたソケットに Unix ソケット経由で接続します。例えば:"

msgid ""
"If you're using MySQL and this value *doesn't* start with a forward slash, "
"then this value is assumed to be the host."
msgstr ""
"MySQLを使用している場合、この値がスラッシュで *始まらない* 場合、この値はホス"
"トとみなされます。"

msgid ""
"If you're using PostgreSQL, by default (empty :setting:`HOST`), the "
"connection to the database is done through UNIX domain sockets ('local' "
"lines in ``pg_hba.conf``). If your UNIX domain socket is not in the standard "
"location, use the same value of ``unix_socket_directory`` from ``postgresql."
"conf``. If you want to connect through TCP sockets, set :setting:`HOST` to "
"'localhost' or '127.0.0.1' ('host' lines in ``pg_hba.conf``). On Windows, "
"you should always define :setting:`HOST`, as UNIX domain sockets are not "
"available."
msgstr ""
"PostgreSQL を使用している場合、デフォルトでは (:setting:`HOST` が空の場合)、"
"UNIXドメインソケット (``pg_hba.conf`` の 'local' 行) を通じてデータベースに接"
"続されます。UNIXドメインソケットが標準の場所にない場合は、``postgresql."
"conf`` の ``unix_socket_directory`` の値と同じ値を使用してください。TCPソケッ"
"トを通じて接続したい場合は、:setting:`HOST` を 'localhost' または "
"'127.0.0.1'  (``pg_hba.conf`` の 'host' 行) に設定してください。Windows で"
"は、UNIXドメインソケットが利用できないため、常に :setting:`HOST` を定義する必"
"要があります。"

msgid "``NAME``"
msgstr "``NAME``"

msgid ""
"The name of the database to use. For SQLite, it's the full path to the "
"database file. When specifying the path, always use forward slashes, even on "
"Windows (e.g. ``C:/homes/user/mysite/sqlite3.db``)."
msgstr ""
"使用するデータベースの名前。SQLite の場合、データベースファイルへのフルパスに"
"なります。パスを指定する場合は、Windows であっても常にスラッシュを使用してく"
"ださい（例: ``C:/homes/user/mysite/sqlite3.db`` ）。"

msgid "``CONN_MAX_AGE``"
msgstr "``CONN_MAX_AGE``"

msgid "Default: ``0``"
msgstr "デフォルト値: ``0``"

msgid ""
"The lifetime of a database connection, as an integer of seconds. Use ``0`` "
"to close database connections at the end of each request — Django's "
"historical behavior — and ``None`` for unlimited :ref:`persistent database "
"connections <persistent-database-connections>`."
msgstr ""
"データベース接続の寿命を秒単位の整数で指定します。各リクエストの終了時にデー"
"タベース接続を閉じる場合は ``0`` を使用します（Django の従来の動作）。無制限"
"の :ref:`永続的なデータベース接続 <persistent-database-connections>` の場合"
"は ``None`` を使用します。"

msgid "``CONN_HEALTH_CHECKS``"
msgstr "``CONN_HEALTH_CHECKS``"

msgid ""
"If set to ``True``, existing :ref:`persistent database connections "
"<persistent-database-connections>` will be health checked before they are "
"reused in each request performing database access. If the health check "
"fails, the connection will be reestablished without failing the request when "
"the connection is no longer usable but the database server is ready to "
"accept and serve new connections (e.g. after database server restart closing "
"existing connections)."
msgstr ""
"もし ``True`` に設定されている場合、データベースアクセスを行う各リクエストで"
"再利用される前に、既存の :ref:`永続的なデータベース接続 <persistent-database-"
"connections>` がヘルスチェックされます。ヘルスチェックが失敗した場合、接続は"
"再確立され、データベースサーバーは新しい接続を受け入れ、提供する準備が整って"
"いるが、接続が使用できなくなったときにリクエストが失敗することはありません"
"（例：データベースサーバーが再起動し、既存の接続を閉じた後）。"

msgid ""
"Extra parameters to use when connecting to the database. Available "
"parameters vary depending on your database backend."
msgstr ""
"データベースに接続する際に使用する追加パラメータ。利用可能なパラメータは、使"
"用しているデータベースバックエンドによって異なります。"

msgid ""
"Some information on available parameters can be found in the :doc:`Database "
"Backends </ref/databases>` documentation. For more information, consult your "
"backend module's own documentation."
msgstr ""
"利用可能なパラメータに関する情報は、 :doc:`データベースのバックエンド </ref/"
"databases>` のドキュメントに記載されています。詳細については、バックエンドモ"
"ジュール独自のドキュメントを参照してください。"

msgid "``PASSWORD``"
msgstr "``PASSWORD``"

msgid ""
"The password to use when connecting to the database. Not used with SQLite."
msgstr "データベースに接続する際に使用するパスワード。SQLiteでは使用しません。"

msgid "``PORT``"
msgstr "``PORT``"

msgid ""
"The port to use when connecting to the database. An empty string means the "
"default port. Not used with SQLite."
msgstr ""
"データベースに接続する際に使用するポート。空の文字列はデフォルトポートを意味"
"します。SQLiteでは使用されません。"

msgid "``TIME_ZONE``"
msgstr "``TIME_ZONE``"

msgid ""
"A string representing the time zone for this database connection or "
"``None``. This inner option of the :setting:`DATABASES` setting accepts the "
"same values as the general :setting:`TIME_ZONE` setting."
msgstr ""
"このデータベース接続のためのタイムゾーンを表す文字列、または ``None`` で"
"す。 :setting:`DATABASES` 設定のこの内部オプションは、一般的な :setting:"
"`TIME_ZONE` 設定と同じ値を受け付けます。"

msgid ""
"When :setting:`USE_TZ` is ``True``, reading datetimes from the database "
"returns aware datetimes with the timezone set to this option's value if not "
"``None``, or to UTC otherwise."
msgstr ""
":setting:`USE_TZ` が ``True`` のとき、データベースからの日時の読み込みは、タ"
"イムゾーンが ``None`` ではない場合はその値に、そうでない場合は UTC に設定され"
"た意識的な日時を返します。"

msgid "When :setting:`USE_TZ` is ``False``, it is an error to set this option."
msgstr ""
":setting:`USE_TZ` が ``False`` の場合、このオプションを設定するとはエラーにな"
"ります。"

msgid ""
"If the database backend doesn't support time zones (e.g. SQLite, MySQL, "
"Oracle), Django reads and writes datetimes in local time according to this "
"option if it is set and in UTC if it isn't."
msgstr ""
"データベースバックエンドがタイムゾーンをサポートしていない場合（例えば "
"SQLite、MySQL、Oracle など）、このオプションが設定されている場合は Django は"
"ローカルタイムで日時を読み書きし、設定されていない場合は UTC で行います。"

msgid ""
"Changing the connection time zone changes how datetimes are read from and "
"written to the database."
msgstr "接続のタイムゾーンを変更すると、データベースの読み書きに影響が出ます。"

msgid ""
"If Django manages the database and you don't have a strong reason to do "
"otherwise, you should leave this option unset. It's best to store datetimes "
"in UTC because it avoids ambiguous or nonexistent datetimes during daylight "
"saving time changes. Also, receiving datetimes in UTC keeps datetime "
"arithmetic simple — there's no need to consider potential offset changes "
"over a DST transition."
msgstr ""
"Django がデータベースを管理しており、別の強い理由がない限り、このオプションを"
"設定しないでおくべきです。UTC で日時を保存することが最善です。これにより、サ"
"マータイムの変更時に曖昧な日時や存在しない日時を回避できます。また、UTC で日"
"時を受け取ることで、日時の計算が簡単になります。夏時間の移行時にオフセットの"
"変化を考慮する必要がないからです。"

msgid ""
"If you're connecting to a third-party database that stores datetimes in a "
"local time rather than UTC, then you must set this option to the appropriate "
"time zone. Likewise, if Django manages the database but third-party systems "
"connect to the same database and expect to find datetimes in local time, "
"then you must set this option."
msgstr ""
"もしUTCではなくローカル時間で日時を保存するサードパーティーのデータベースに接"
"続する場合は、このオプションを適切なタイムゾーンに設定する必要があります。同"
"様に、Djangoがデータベースを管理しているが、サードパーティーシステムが同じ"
"データベースに接続し、ローカル時間で日時を取得することを期待している場合は、"
"このオプションを設定する必要があります。"

msgid ""
"If the database backend supports time zones (e.g., PostgreSQL), then the "
"database connection's time zone is set to this value."
msgstr ""
"データベースバックエンドがタイムゾーンをサポートしている場合（例えば、"
"PostgreSQL）、データベース接続のタイムゾーンはこの値に設定されます。"

msgid ""
"Although setting the ``TIME_ZONE`` option is very rarely needed, there are "
"situations where it becomes necessary. Specifically, it's recommended to "
"match the general :setting:`TIME_ZONE` setting when dealing with raw queries "
"involving date/time functions like PostgreSQL's ``date_trunc()`` or "
"``generate_series()``, especially when generating time-based series that "
"transition daylight savings."
msgstr ""
"``TIME_ZONE`` オプションを設定する必要はほとんどありませんが、状況によっては"
"必要になることがあります。特に、PostgreSQLの ``date_trunc()`` や "
"``generate_series()`` などの日時関数を使用するクエリに関わる場合、特にサマー"
"タイムの切り替えなど、時間ベースのシリーズを生成するときには、一般的な :"
"setting:`TIME_ZONE` 設定と一致させることが推奨されます。"

msgid ""
"This value can be changed at any time, the database will handle the "
"conversion of datetimes to the configured time zone."
msgstr ""
"この値はいつでも変更可能であり、データベースは日時を設定されたタイムゾーンに"
"変換します。"

msgid ""
"However, this has a downside: receiving all datetimes in local time makes "
"datetime arithmetic more tricky — you must account for possible offset "
"changes over DST transitions."
msgstr ""
"ただし、これには欠点があります。すべての日時をローカルタイムで受け取ると、日"
"時の算術がより複雑になります。DST（サマータイム）の変更期間を考慮に入れる必要"
"があります。"

msgid ""
"Consider converting to local time explicitly with ``AT TIME ZONE`` in raw "
"SQL queries instead of setting the ``TIME_ZONE`` option."
msgstr ""
"素のSQLクエリで ``TIME_ZONE`` オプションを設定する代わりに、``AT TIME ZONE`` "
"を使用して明示的にローカルタイムに変換することを検討してください。"

msgid "``DISABLE_SERVER_SIDE_CURSORS``"
msgstr "``DISABLE_SERVER_SIDE_CURSORS``"

msgid ""
"Set this to ``True`` if you want to disable the use of server-side cursors "
"with :meth:`.QuerySet.iterator`. :ref:`transaction-pooling-server-side-"
"cursors` describes the use case."
msgstr ""
"もし :meth:`.QuerySet.iterator` でサーバーサイドのカーソルの使用を無効にした"
"い場合は、これを ``True`` に設定してください。 :ref:`transaction-pooling-"
"server-side-cursors` には使用例が記載されています。"

msgid "This is a PostgreSQL-specific setting."
msgstr "これは PostgreSQL 固有の設定です。"

msgid "``USER``"
msgstr "``USER``"

msgid ""
"The username to use when connecting to the database. Not used with SQLite."
msgstr ""
"データベースに接続する際に使用するユーザー名。SQLiteでは使用されません。"

msgid "``TEST``"
msgstr "``TEST``"

msgid ""
"A dictionary of settings for test databases; for more details about the "
"creation and use of test databases, see :ref:`the-test-database`."
msgstr ""
"テスト用データベースの設定辞書。テスト用データベースの作成と使用に関する詳細"
"については、 :ref:`the-test-database` を参照してください。"

msgid "Here's an example with a test database configuration::"
msgstr "以下はテスト用データベースの設定例です:"

msgid "The following keys in the ``TEST`` dictionary are available:"
msgstr "``TEST`` 辞書で利用可能なキーは以下のとおりです:"

msgid "``CHARSET``"
msgstr "``CHARSET``"

msgid ""
"The character set encoding used to create the test database. The value of "
"this string is passed directly through to the database, so its format is "
"backend-specific."
msgstr ""
"テストデータベースを作成する際に使用される文字セットエンコーディングです。こ"
"の文字列の値はデータベースに直接渡されるため、その形式はバックエンドに依存し"
"ます。"

msgid ""
"Supported by the PostgreSQL_ (``postgresql``) and MySQL_ (``mysql``) "
"backends."
msgstr ""
"PostgreSQL_ (``postgresql``) および MySQL_ (``mysql``) バックエンドでサポート"
"されています。"

msgid "``COLLATION``"
msgstr "``COLLATION``"

msgid ""
"The collation order to use when creating the test database. This value is "
"passed directly to the backend, so its format is backend-specific."
msgstr ""
"テストデータベースを作成する際に使用する照合順序 (collation)。この値はバック"
"エンドに直接渡されるため、その形式はバックエンドに依存します。"

msgid ""
"Only supported for the ``mysql`` backend (see the `MySQL manual`_ for "
"details)."
msgstr ""
"``mysql`` バックエンドでのみサポートされています (`MySQL manual`_ を参照して"
"ください)。"

msgid "``DEPENDENCIES``"
msgstr "``DEPENDENCIES``"

msgid ""
"Default: ``['default']``, for all databases other than ``default``, which "
"has no dependencies."
msgstr ""
"デフォルト値: ``['default']`` で、 ``default`` 以外のすべてのデータベースには"
"依存関係は設定されていません。"

msgid ""
"The creation-order dependencies of the database. See the documentation on :"
"ref:`controlling the creation order of test databases <topics-testing-"
"creation-dependencies>` for details."
msgstr ""
"データベースの作成順序の依存関係です。詳細については、 :ref:`テストデータベー"
"スの作成順序を制御する <topics-testing-creation-dependencies>` ドキュメントを"
"参照してください。"

msgid "``MIGRATE``"
msgstr "``MIGRATE``"

msgid ""
"When set to ``False``, migrations won't run when creating the test database. "
"This is similar to setting ``None`` as a value in :setting:"
"`MIGRATION_MODULES`, but for all apps."
msgstr ""
"``False`` に設定されている場合、テストデータベースを作成するときにマイグレー"
"ションは実行されません。これは :setting:`MIGRATION_MODULES` に ``None`` を値"
"として設定するのと似ていますが、すべてのアプリに適用されます。"

msgid "``MIRROR``"
msgstr "``MIRROR``"

msgid ""
"The alias of the database that this database should mirror during testing. "
"It depends on transactions and therefore must be used within :class:`~django."
"test.TransactionTestCase` instead of :class:`~django.test.TestCase`."
msgstr ""
"このデータベースがテスト中にミラーリングするべきデータベースのエイリアスで"
"す。トランザクションに依存しているため、 :class:`~django.test.TestCase` の代"
"わりに :class:`~django.test.TransactionTestCase` 内で使用する必要があります。"

msgid ""
"This setting exists to allow for testing of primary/replica (referred to as "
"master/slave by some databases) configurations of multiple databases. See "
"the documentation on :ref:`testing primary/replica configurations <topics-"
"testing-primaryreplica>` for details."
msgstr ""
"この設定は、複数のデータベースのプライマリ/レプリカ (一部のデータベースではマ"
"スター/スレーブと呼ばれる) 構成のテストを可能にするために存在します。詳細につ"
"いては、 :ref:`プライマリ/レプリカ構成のテスト <topics-testing-"
"primaryreplica>` のドキュメントを参照してください。"

msgid "The name of database to use when running the test suite."
msgstr "テストスイートを実行する際に使用するデータベースの名前。"

msgid ""
"If the default value (``None``) is used with the SQLite database engine, the "
"tests will use a memory resident database. For all other database engines "
"the test database will use the name ``'test_' + DATABASE_NAME``."
msgstr ""
"デフォルト値 (``None``) をSQLiteデータベースエンジンで使用すると、テストはメ"
"モリ内のデータベースを使用します。そのほかのデータベースエンジンでは、テスト"
"データベースは ``'test_' + DATABASE_NAME`` という名前が使われます。"

msgid "See :ref:`the-test-database`."
msgstr ":ref:`テストデータベース <the-test-database>` を参照。"

msgid "``TEMPLATE``"
msgstr "``TEMPLATE``"

msgid ""
"The name of a `template`_ (e.g. ``'template0'``) from which to create the "
"test database."
msgstr ""
"テストデータベースを作成するための `template`_ の名前 (例: ``'template0'``)。"

msgid "``CREATE_DB``"
msgstr "``CREATE_DB``"

msgid "This is an Oracle-specific setting."
msgstr "これは Oracle 固有の設定です。"

msgid ""
"If it is set to ``False``, the test tablespaces won't be automatically "
"created at the beginning of the tests or dropped at the end."
msgstr ""
"``False`` に設定されている場合、テストテーブルスペースはテストの開始時に自動"
"的に作成されることも終了時に削除されることもありません。"

msgid "``CREATE_USER``"
msgstr "``CREATE_USER``"

msgid ""
"If it is set to ``False``, the test user won't be automatically created at "
"the beginning of the tests and dropped at the end."
msgstr ""
"``False`` に設定されている場合、テストの開始時にテストユーザーは自動的に作成"
"されず、終了時に削除されません。"

msgid ""
"The username to use when connecting to the Oracle database that will be used "
"when running tests. If not provided, Django will use ``'test_' + USER``."
msgstr ""
"テストを実行する際に、Oracle データベースに接続するために使用するユーザー名で"
"す。指定しない場合、Django は ``'test_' + USER`` を使用します。"

msgid ""
"The password to use when connecting to the Oracle database that will be used "
"when running tests. If not provided, Django will generate a random password."
msgstr ""
"テスト実行時に Oracle データベースに接続するために使用するパスワードです。指"
"定しない場合、Django はランダムなパスワードを生成します。"

msgid "``ORACLE_MANAGED_FILES``"
msgstr "``ORACLE_MANAGED_FILES``"

msgid ""
"If set to ``True``, Oracle Managed Files (OMF) tablespaces will be used. :"
"setting:`DATAFILE` and :setting:`DATAFILE_TMP` will be ignored."
msgstr ""
"``True`` に設定された場合、Oracle Managed Files (OMF) テーブル空間が使用され"
"ます。 :setting:`DATAFILE` と :setting:`DATAFILE_TMP` は無視されます。"

msgid "``TBLSPACE``"
msgstr "``TBLSPACE``"

msgid ""
"The name of the tablespace that will be used when running tests. If not "
"provided, Django will use ``'test_' + USER``."
msgstr ""
"テスト実行時に使用されるテーブル空間の名前。省略した場合、Django は "
"``'test_' + USER`` を使用します。"

msgid "``TBLSPACE_TMP``"
msgstr "``TBLSPACE_TMP``"

msgid ""
"The name of the temporary tablespace that will be used when running tests. "
"If not provided, Django will use ``'test_' + USER + '_temp'``."
msgstr ""
"テスト実行時に使用される一時テーブルスペースの名前。指定しない場合、Djangoは "
"``'test_' + USER + '_temp'`` を使用します。"

msgid "``DATAFILE``"
msgstr "``DATAFILE``"

msgid ""
"The name of the datafile to use for the TBLSPACE. If not provided, Django "
"will use ``TBLSPACE + '.dbf'``."
msgstr ""
"使用する TBLSPACE のデータファイル名です。指定されない場合、Django は "
"``TBLSPACE + '.dbf'`` を使用します。"

msgid "``DATAFILE_TMP``"
msgstr "``DATAFILE_TMP``"

msgid ""
"The name of the datafile to use for the TBLSPACE_TMP. If not provided, "
"Django will use ``TBLSPACE_TMP + '.dbf'``."
msgstr ""
"使用する TBLSPACE_TMP のデータファイルの名前です。指定されていない場合、"
"Django は ``TBLSPACE_TMP + '.dbf'`` を使用します。"

msgid "``DATAFILE_MAXSIZE``"
msgstr "``DATAFILE_MAXSIZE``"

msgid "Default: ``'500M'``"
msgstr "デフォルト値: ``'500M'``"

msgid "The maximum size that the DATAFILE is allowed to grow to."
msgstr "DATAFILE が許容される最大サイズ。"

msgid "``DATAFILE_TMP_MAXSIZE``"
msgstr "``DATAFILE_TMP_MAXSIZE``"

msgid "The maximum size that the DATAFILE_TMP is allowed to grow to."
msgstr "DATAFILE_TMP が拡大することが許可されている最大サイズ。"

msgid "``DATAFILE_SIZE``"
msgstr "``DATAFILE_SIZE``"

msgid "Default: ``'50M'``"
msgstr "デフォルト値: ``'50M'``"

msgid "The initial size of the DATAFILE."
msgstr "DATAFILE の初期サイズ。"

msgid "``DATAFILE_TMP_SIZE``"
msgstr "``DATAFILE_TMP_SIZE``"

msgid "The initial size of the DATAFILE_TMP."
msgstr "DATAFILE_TMP の初期サイズ。"

msgid "``DATAFILE_EXTSIZE``"
msgstr "``DATAFILE_EXTSIZE``"

msgid "Default: ``'25M'``"
msgstr "デフォルト値: ``'25M'``"

msgid ""
"The amount by which the DATAFILE is extended when more space is required."
msgstr "DATAFILE がより多くのスペースを必要としたときに拡張される量。"

msgid "``DATAFILE_TMP_EXTSIZE``"
msgstr "``DATAFILE_TMP_EXTSIZE``"

msgid ""
"The amount by which the DATAFILE_TMP is extended when more space is required."
msgstr "空き領域が不足するときに DATAFILE_TMP が拡張される量。"

msgid "``DATA_UPLOAD_MAX_MEMORY_SIZE``"
msgstr "``DATA_UPLOAD_MAX_MEMORY_SIZE``"

msgid "Default: ``2621440`` (i.e. 2.5 MB)."
msgstr "デフォルト値: ``2621440`` (例: 2.5 MB)。"

msgid ""
"The maximum size in bytes that a request body may be before a :exc:`~django."
"core.exceptions.SuspiciousOperation` (``RequestDataTooBig``) is raised. The "
"check is done when accessing ``request.body`` or ``request.POST`` and is "
"calculated against the total request size excluding any file upload data. "
"You can set this to ``None`` to disable the check. Applications that are "
"expected to receive unusually large form posts should tune this setting."
msgstr ""
"リクエストボディの最大サイズ (バイト単位) で、このサイズを超えると :exc:"
"`~django.core.exceptions.SuspiciousOperation` (``RequestDataTooBig``) が発生"
"します。このチェックは ``request.body`` や ``request.POST`` へのアクセス時に"
"行われ、ファイルアップロードデータを除いた総リクエストサイズに対して計算され"
"ます。このチェックを無効にするためには、この値を ``None`` に設定できます。通"
"常よりも大きなフォーム投稿を受け取ることが予想されるアプリケーションは、この"
"設定を調整する必要があります。"

msgid ""
"The amount of request data is correlated to the amount of memory needed to "
"process the request and populate the GET and POST dictionaries. Large "
"requests could be used as a denial-of-service attack vector if left "
"unchecked. Since web servers don't typically perform deep request "
"inspection, it's not possible to perform a similar check at that level."
msgstr ""
"リクエストデータの量は、リクエストを処理しGETおよびPOST辞書を作成するのに必要"
"なメモリ量に関連しています。大きなリクエストは、精査されていないままの場合、"
"サービス妨害攻撃の手段として使用される可能性があります。通常、Webサーバーは深"
"いリクエスト検査を行わないため、同様のチェックをそのレベルで行うことはできま"
"せん。"

msgid "See also :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`."
msgstr "関連項目: :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`"

msgid "``DATA_UPLOAD_MAX_NUMBER_FIELDS``"
msgstr "``DATA_UPLOAD_MAX_NUMBER_FIELDS``"

msgid "Default: ``1000``"
msgstr "デフォルト値: ``1000``"

msgid ""
"The maximum number of parameters that may be received via GET or POST before "
"a :exc:`~django.core.exceptions.SuspiciousOperation` (``TooManyFields``) is "
"raised. You can set this to ``None`` to disable the check. Applications that "
"are expected to receive an unusually large number of form fields should tune "
"this setting."
msgstr ""
"GET または POST 経由で受け取り可能なパラメータの最大数を超えると、 :exc:"
"`~django.core.exceptions.SuspiciousOperation` (``TooManyFields``) が発生しま"
"す。このチェックを無効にするには、これを ``None`` に設定してください。通常よ"
"りも多くのフォームフィールドを受け取ることが予想されるアプリケーションは、こ"
"の設定を調整する必要があります。"

msgid ""
"The number of request parameters is correlated to the amount of time needed "
"to process the request and populate the GET and POST dictionaries. Large "
"requests could be used as a denial-of-service attack vector if left "
"unchecked. Since web servers don't typically perform deep request "
"inspection, it's not possible to perform a similar check at that level."
msgstr ""
"リクエストパラメータの数は、リクエストを処理して GET と POST の辞書を満たすた"
"めに必要な時間と相関しています。大きなリクエストは、チェックされないままにし"
"ておくと、サービス拒否攻撃のベクトルとして使用される可能性があります。Webサー"
"バは通常、深いリクエスト検査を行わないため、そのレベルで同様のチェックを行う"
"ことはできません。"

msgid "``DATA_UPLOAD_MAX_NUMBER_FILES``"
msgstr "``DATA_UPLOAD_MAX_NUMBER_FILES``"

msgid "Default: ``100``"
msgstr "デフォルト値: ``100``"

msgid ""
"The maximum number of files that may be received via POST in a ``multipart/"
"form-data`` encoded request before a :exc:`~django.core.exceptions."
"SuspiciousOperation` (``TooManyFiles``) is raised. You can set this to "
"``None`` to disable the check. Applications that are expected to receive an "
"unusually large number of file fields should tune this setting."
msgstr ""
"POSTで ``multipart/form-data`` エンコードされたリクエスト経由で受信できるファ"
"イルの最大数です。この数を超えると :exc:`~django.core.exceptions."
"SuspiciousOperation` (``TooManyFiles``) が発生します。このチェックを無効にす"
"るには、これを ``None`` に設定できます。通常よりも多くのファイルフィールドを"
"受信することが予想されるアプリケーションは、この設定を調整する必要がありま"
"す。"

msgid ""
"The number of accepted files is correlated to the amount of time and memory "
"needed to process the request. Large requests could be used as a denial-of-"
"service attack vector if left unchecked. Since web servers don't typically "
"perform deep request inspection, it's not possible to perform a similar "
"check at that level."
msgstr ""
"受け入れられるファイルの数は、リクエストを処理するために必要な時間とメモリに"
"関連しています。大きなリクエストは、チェックなしに放置されると、サービス拒否"
"攻撃のベクトルとして使用される可能性があります。Web サーバーは通常、リクエス"
"トの深い検査を行わないため、そのレベルで同様のチェックを行うことはできませ"
"ん。"

msgid "``DATABASE_ROUTERS``"
msgstr "``DATABASE_ROUTERS``"

msgid ""
"The list of routers that will be used to determine which database to use "
"when performing a database query."
msgstr ""
"データベースクエリを実行する際に使用されるデータベースを決定するために使用さ"
"れるルーターのリスト。"

msgid ""
"See the documentation on :ref:`automatic database routing in multi database "
"configurations <topics-db-multi-db-routing>`."
msgstr ""
":ref:`複数データベース構成での自動データベースルーティング <topics-db-multi-"
"db-routing>` に関するドキュメントを参照してください。"

msgid "``DATE_FORMAT``"
msgstr "``DATE_FORMAT``"

msgid "Default: ``'N j, Y'`` (e.g. ``Feb. 4, 2003``)"
msgstr "デフォルト値: ``'N j, Y'`` (例: ``Feb. 4, 2003``)"

msgid ""
"The default formatting to use for displaying date fields in any part of the "
"system. Note that the locale-dictated format has higher precedence and will "
"be applied instead. See :tfilter:`allowed date format strings <date>`."
msgstr ""
"システムのどの部分でも日付フィールドを表示する際に使用するデフォルトのフォー"
"マット。ただし、ロケールによって指定されたフォーマットが優先され、代わりに適"
"用されます。 :tfilter:`使用可能な日付フォーマット文字列 <date>` を参照してく"
"ださい。"

msgid ""
"See also :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :setting:"
"`SHORT_DATE_FORMAT`."
msgstr ""
"関連項目: :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT`, :setting:"
"`SHORT_DATE_FORMAT`"

msgid "``DATE_INPUT_FORMATS``"
msgstr "``DATE_INPUT_FORMATS``"

msgid ""
"A list of formats that will be accepted when inputting data on a date field. "
"Formats will be tried in order, using the first valid one. Note that these "
"format strings use Python's :ref:`datetime module syntax <strftime-strptime-"
"behavior>`, not the format strings from the :tfilter:`date` template filter."
msgstr ""
"日付フィールドにデータを入力する際に受け入れられる形式のリストです。形式は順"
"番に試され、最初の有効なものが使用されます。これらの形式文字列は、 :tfilter:"
"`date` テンプレートフィルタからの形式文字列ではなく、Python の :ref:"
"`datetime モジュールの構文 <strftime-strptime-behavior>` を使用していることに"
"注意してください。"

msgid ""
"The locale-dictated format has higher precedence and will be applied instead."
msgstr "ロケールが指定するフォーマットが優先され、代わりに適用されます。"

msgid ""
"See also :setting:`DATETIME_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`."
msgstr ""
"関連項目: :setting:`DATETIME_INPUT_FORMATS` :setting:`TIME_INPUT_FORMATS`"

msgid "``DATETIME_FORMAT``"
msgstr "``DATETIME_FORMAT``"

msgid "Default: ``'N j, Y, P'`` (e.g. ``Feb. 4, 2003, 4 p.m.``)"
msgstr "デフォルト値: ``'N j, Y, P'`` (例: ``Feb. 4, 2003, 4 p.m.``)"

msgid ""
"The default formatting to use for displaying datetime fields in any part of "
"the system. Note that the locale-dictated format has higher precedence and "
"will be applied instead. See :tfilter:`allowed date format strings <date>`."
msgstr ""
"システムのどの部分で日時フィールドを表示する際に使用するデフォルトのフォー"
"マット。ロケールで指定されたフォーマットの方が優先され、代わりに適用されるこ"
"とに注意してください。許可される日付フォーマット文字列については、 :tfilter:`"
"使用可能な日付フォーマット文字列 <date>` を参照してください。"

msgid ""
"See also :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT` and :setting:"
"`SHORT_DATETIME_FORMAT`."
msgstr ""
"関連項目 :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`, :setting:"
"`SHORT_DATETIME_FORMAT`"

msgid "``DATETIME_INPUT_FORMATS``"
msgstr "``DATETIME_INPUT_FORMATS``"

msgid ""
"A list of formats that will be accepted when inputting data on a datetime "
"field. Formats will be tried in order, using the first valid one. Note that "
"these format strings use Python's :ref:`datetime module syntax <strftime-"
"strptime-behavior>`, not the format strings from the :tfilter:`date` "
"template filter. Date-only formats are not included as datetime fields will "
"automatically try :setting:`DATE_INPUT_FORMATS` in last resort."
msgstr ""
"日時フィールドにデータを入力する際に受け入れられるフォーマットのリスト。"
"フォーマットは順番に試され、最初の有効なものが使用されます。これらのフォー"
"マット文字列は、:tfilter:`date` テンプレートフィルタからのフォーマット文字列"
"ではなく、Python の :ref:`datetime モジュールの構文 <strftime-strptime-"
"behavior>` を使用することに注意してください。日付のみのフォーマットは含まれて"
"いません。というのも、datetime フィールドは最終手段として自動的に :setting:"
"`DATE_INPUT_FORMATS` を試みるからです。"

msgid ""
"See also :setting:`DATE_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`."
msgstr ""
"関連項目: :setting:`DATE_INPUT_FORMATS` および :setting:`TIME_INPUT_FORMATS` "
"を参照。"

msgid "A boolean that turns on/off debug mode."
msgstr "デバッグモードをオン/オフにする真偽値です。"

msgid "Never deploy a site into production with :setting:`DEBUG` turned on."
msgstr ""
":setting:`DEBUG` をオンにした状態でサイトを本番環境にデプロイしないでくださ"
"い。"

msgid ""
"One of the main features of debug mode is the display of detailed error "
"pages. If your app raises an exception when :setting:`DEBUG` is ``True``, "
"Django will display a detailed traceback, including a lot of metadata about "
"your environment, such as all the currently defined Django settings (from "
"``settings.py``)."
msgstr ""
"デバッグモードの主な特徴の一つは、詳細なエラーページの表示です。あなたのアプ"
"リが :setting:`DEBUG` が ``True`` のときに例外を発生させた場合、Djangoは詳細"
"なトレースバックを表示します。これには、``settings.py`` から現在定義されてい"
"るすべてのDjango設定など、環境に関する多くのメタデータが含まれています。"

msgid ""
"As a security measure, Django will *not* include settings that might be "
"sensitive, such as :setting:`SECRET_KEY`. Specifically, it will exclude any "
"setting whose name includes any of the following:"
msgstr ""
"セキュリティ対策として、Djangoでは :setting:`SECRET_KEY` のような機密性の高い"
"設定を *含めない* ことにしています。具体的には、以下のいずれかを含む名前の設"
"定は除外されます:"

msgid "``'API'``"
msgstr "``'API'``"

msgid "``'KEY'``"
msgstr "``'KEY'``"

msgid "``'PASS'``"
msgstr "``'PASS'``"

msgid "``'SECRET'``"
msgstr "``'SECRET'``"

msgid "``'SIGNATURE'``"
msgstr "``'SIGNATURE'``"

msgid "``'TOKEN'``"
msgstr "``'TOKEN'``"

msgid ""
"Note that these are *partial* matches. ``'PASS'`` will also match PASSWORD, "
"just as ``'TOKEN'`` will also match TOKENIZED and so on."
msgstr ""
"これらは *部分一致* であることに注意してください。 ``'PASS'`` は PASSWORD に"
"も一致し、 ``'TOKEN'`` は TOKENIZED にも一致します。"

msgid ""
"Still, note that there are always going to be sections of your debug output "
"that are inappropriate for public consumption. File paths, configuration "
"options and the like all give attackers extra information about your server."
msgstr ""
"それでも、デバッグ出力のセクションには、公開に適さないものが常に存在すること"
"に注意してください。ファイルパス、設定オプションなどは、攻撃者にサーバーにつ"
"いての追加情報を提供してしまいます。"

msgid ""
"It is also important to remember that when running with :setting:`DEBUG` "
"turned on, Django will remember every SQL query it executes. This is useful "
"when you're debugging, but it'll rapidly consume memory on a production "
"server."
msgstr ""
"また、:setting:`DEBUG` をオンにして実行している場合、Djangoは実行するすべての"
"SQLクエリを記憶します。デバッグ時に便利ですが、本番サーバーでは急速にメモリを"
"消費します。"

msgid ""
"Finally, if :setting:`DEBUG` is ``False``, you also need to properly set "
"the :setting:`ALLOWED_HOSTS` setting. Failing to do so will result in all "
"requests being returned as \"Bad Request (400)\"."
msgstr ""
"最後に、:setting:`DEBUG` が ``False`` の場合は、:setting:`ALLOWED_HOSTS` も適"
"切に設定する必要があります。これを怠ると、すべてのリクエストが \"Bad Request "
"(400)\" として返されます。"

msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` sets ``DEBUG = True`` for convenience."
msgstr ""
":djadmin:`django-admin startproject <startproject>` によって作成されるデフォ"
"ルトの :file:`settings.py` ファイルは、利便性のために ``DEBUG = True`` に設定"
"されています。"

msgid "``DEBUG_PROPAGATE_EXCEPTIONS``"
msgstr "``DEBUG_PROPAGATE_EXCEPTIONS``"

msgid ""
"If set to ``True``, Django's exception handling of view functions (:data:"
"`~django.conf.urls.handler500`, or the debug view if :setting:`DEBUG` is "
"``True``) and logging of 500 responses (:ref:`django-request-logger`) is "
"skipped and exceptions propagate upward."
msgstr ""
"``True`` に設定されている場合、Djangoのビュー関数の例外処理 (:data:`~django."
"conf.urls.handler500` 、または :setting:`DEBUG` が ``True`` の場合はデバッグ"
"ビュー) と500レスポンスのログ記録 (:ref:`django-request-logger`) がスキップさ"
"れ、例外は上に伝播します。"

msgid ""
"This can be useful for some test setups. It shouldn't be used on a live site "
"unless you want your web server (instead of Django) to generate \"Internal "
"Server Error\" responses. In that case, make sure your server doesn't show "
"the stack trace or other sensitive information in the response."
msgstr ""
"これは、一部のテスト設定で役立つ場合があります。Django の代わりに Web サー"
"バーが \"Internal Server Error\" のレスポンスを生成することを望む場合を除い"
"て、ライブサイトで使用するべきではありません。その場合、サーバーがレスポンス"
"でスタックトレースやその他の機密情報を表示しないようにしてください。"

msgid "``DECIMAL_SEPARATOR``"
msgstr "``DECIMAL_SEPARATOR``"

msgid "Default: ``'.'`` (Dot)"
msgstr "デフォルト値: ``'.'`` (ドット)"

msgid "Default decimal separator used when formatting decimal numbers."
msgstr "小数をフォーマットする際に使用されるデフォルトの小数点区切り記号です。"

msgid ""
"Note that the locale-dictated format has higher precedence and will be "
"applied instead."
msgstr ""
"ロケールが指定する形式が優先され、それが適用されるので注意してください。"

msgid ""
"See also :setting:`NUMBER_GROUPING`, :setting:`THOUSAND_SEPARATOR` and :"
"setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""
"関連項目: :setting:`NUMBER_GROUPING`, :setting:`THOUSAND_SEPARATOR`, :"
"setting:`USE_THOUSAND_SEPARATOR`"

msgid "``DEFAULT_AUTO_FIELD``"
msgstr "``DEFAULT_AUTO_FIELD``"

msgid "Default: ``'``:class:`django.db.models.AutoField`\\ ``'``"
msgstr "デフォルト値: ``'``:class:`django.db.models.AutoField`\\ ``'``"

msgid ""
"Default primary key field type to use for models that don't have a field "
"with :attr:`primary_key=True <django.db.models.Field.primary_key>`."
msgstr ""
"フィールドに :attr:`primary_key=True <django.db.models.Field.primary_key>` の"
"属性がないモデルに使用するデフォルトの主キーのフィールドタイプ。"

msgid "Migrating auto-created through tables"
msgstr "自動生成された中間テーブルをマイグレーションする"

msgid ""
"The value of ``DEFAULT_AUTO_FIELD`` will be respected when creating new auto-"
"created through tables for many-to-many relationships."
msgstr ""
"新しい自動生成された多対多のリレーションシップ用の through テーブルを作成する"
"際には、``DEFAULT_AUTO_FIELD`` の値が尊重されます。"

msgid ""
"Unfortunately, the primary keys of existing auto-created through tables "
"cannot currently be updated by the migrations framework."
msgstr ""
"残念ながら、現在はマイグレーションフレームワークで自動作成された中間テーブル"
"の主キーを更新することはできません。"

msgid ""
"This means that if you switch the value of ``DEFAULT_AUTO_FIELD`` and then "
"generate migrations, the primary keys of the related models will be updated, "
"as will the foreign keys from the through table, but the primary key of the "
"auto-created through table will not be migrated."
msgstr ""
"これは、``DEFAULT_AUTO_FIELD`` の値を切り替えてマイグレーションを生成した場"
"合、リレーション先モデルの主キーと through テーブルからの外部キーは更新されま"
"すが、自動作成された through テーブルの主キーはマイグレーションされないことを"
"意味します。"

msgid ""
"In order to address this, you should add a :class:`~django.db.migrations."
"operations.RunSQL` operation to your migrations to perform the required "
"``ALTER TABLE`` step. You can check the existing table name through "
"``sqlmigrate``, ``dbshell``, or with the field’s ``remote_field.through."
"_meta.db_table`` property."
msgstr ""
"これを解決するには、必要な ``ALTER TABLE`` ステップを実行するために、マイグ"
"レーションに :class:`~django.db.migrations.operations.RunSQL` 操作を追加する"
"必要があります。既存のテーブル名は、``sqlmigrate``、``dbshell``、またはフィー"
"ルドの ``remote_field.through._meta.db_table`` プロパティを介して確認できま"
"す。"

msgid ""
"Explicitly defined through models are already handled by the migrations "
"system."
msgstr ""
"モデルで明示的に定義されているものは、既にマイグレーションシステムで処理され"
"ています。"

msgid ""
"Allowing automatic migrations for the primary key of existing auto-created "
"through tables :ticket:`may be implemented at a later date <32674>`."
msgstr ""
"既存の自動生成された中間テーブルの主キーに対して自動的なマイグレーションを許"
"可する機能は、将来実装されるかもしれません :ticket:`<32674>` 。"

msgid "``DEFAULT_CHARSET``"
msgstr "``DEFAULT_CHARSET``"

msgid "Default: ``'utf-8'``"
msgstr "デフォルト値: ``'utf-8'``"

msgid ""
"Default charset to use for all ``HttpResponse`` objects, if a MIME type "
"isn't manually specified. Used when constructing the ``Content-Type`` header."
msgstr ""
"手動で MIME タイプが指定されていない場合に、全ての ``HttpResponse`` オブジェ"
"クトで使用するデフォルトの文字セット。``Content-Type`` ヘッダを構築する際に使"
"用されます。"

msgid "``DEFAULT_EXCEPTION_REPORTER``"
msgstr "``DEFAULT_EXCEPTION_REPORTER``"

msgid "Default: ``'``:class:`django.views.debug.ExceptionReporter`\\ ``'``"
msgstr ""
"デフォルト値: ``'``:class:`django.views.debug.ExceptionReporter`\\ ``'``"

msgid ""
"Default exception reporter class to be used if none has been assigned to "
"the :class:`~django.http.HttpRequest` instance yet. See :ref:`custom-error-"
"reports`."
msgstr ""
"まだ :class:`~django.http.HttpRequest` インスタンスに割り当てられていない場合"
"に使用されるデフォルトの例外レポータークラス。 :ref:`custom-error-reports` を"
"参照してください。"

msgid "``DEFAULT_EXCEPTION_REPORTER_FILTER``"
msgstr "``DEFAULT_EXCEPTION_REPORTER_FILTER``"

msgid ""
"Default: ``'``:class:`django.views.debug.SafeExceptionReporterFilter`\\ ``'``"
msgstr ""
"デフォルト値: ``'``:class:`django.views.debug.SafeExceptionReporterFilter`\\ "
"``'``"

msgid ""
"Default exception reporter filter class to be used if none has been assigned "
"to the :class:`~django.http.HttpRequest` instance yet. See :ref:`Filtering "
"error reports<filtering-error-reports>`."
msgstr ""
"まだ :class:`~django.http.HttpRequest` インスタンスに割り当てられていない場合"
"に使用されるデフォルトの例外レポートフィルタクラス。 :ref:`エラーレポートの"
"フィルタリング<filtering-error-reports>` を参照してください。"

msgid "``DEFAULT_FILE_STORAGE``"
msgstr "``DEFAULT_FILE_STORAGE``"

msgid ""
"Default: ``'``:class:`django.core.files.storage.FileSystemStorage`\\ ``'``"
msgstr ""
"デフォルト値: ``'``:class:`django.core.files.storage.FileSystemStorage`\\ "
"``'``"

msgid ""
"Default file storage class to be used for any file-related operations that "
"don't specify a particular storage system. See :doc:`/topics/files`."
msgstr ""
"特定のストレージシステムを指定しないファイル関連の操作に使用されるデフォルト"
"ファイルストレージクラス。詳細については、:doc:`/topics/files` を参照してくだ"
"さい。"

msgid ""
"This setting is deprecated. Starting with Django 4.2, default file storage "
"engine can be configured with the :setting:`STORAGES` setting under the "
"``default`` key."
msgstr ""
"この設定は非推奨です。Django 4.2 以降、デフォルトのファイルストレージエンジン"
"は :setting:`STORAGES` 設定の ``default`` キーを使用して設定できます。"

msgid "``DEFAULT_FROM_EMAIL``"
msgstr "``DEFAULT_FROM_EMAIL``"

msgid "Default: ``'webmaster@localhost'``"
msgstr "デフォルト値: ``'webmaster@localhost'``"

msgid ""
"Default email address for automated correspondence from the site manager(s). "
"This address is used in the ``From:`` header of outgoing emails and can take "
"any format valid in the chosen email sending protocol."
msgstr ""
"サイト管理者からの自動対応用のデフォルトのメールアドレスです。このアドレスは"
"送信メールの ``From:`` ヘッダに使用され、選択したメール送信プロトコルで有効な"
"あらゆる形式を取ることができます。"

msgid ""
"This doesn't affect error messages sent to :setting:`ADMINS` and :setting:"
"`MANAGERS`. See :setting:`SERVER_EMAIL` for that."
msgstr ""
"これは :setting:`ADMINS` と :setting:`MANAGERS` へ送信されるエラーメッセージ"
"には影響しません。それについては :setting:`SERVER_EMAIL` を参照してください。"

msgid "``DEFAULT_INDEX_TABLESPACE``"
msgstr "``DEFAULT_INDEX_TABLESPACE``"

msgid ""
"Default tablespace to use for indexes on fields that don't specify one, if "
"the backend supports it (see :doc:`/topics/db/tablespaces`)."
msgstr ""
"バックエンドがサポートしている場合 (:doc:`/topics/db/tablespaces` を参照)、指"
"定されていないフィールドのインデックスに使用するデフォルトのテーブル空間で"
"す。"

msgid "``DEFAULT_TABLESPACE``"
msgstr "``DEFAULT_TABLESPACE``"

msgid ""
"Default tablespace to use for models that don't specify one, if the backend "
"supports it (see :doc:`/topics/db/tablespaces`)."
msgstr ""
"バックエンドがサポートしている場合、指定していないモデル用に使用するデフォル"
"トのテーブル空間 (:doc:`/topics/db/tablespaces` を参照)。"

msgid "``DISALLOWED_USER_AGENTS``"
msgstr "``DISALLOWED_USER_AGENTS``"

msgid ""
"List of compiled regular expression objects representing User-Agent strings "
"that are not allowed to visit any page, systemwide. Use this for bots/"
"crawlers. This is only used if ``CommonMiddleware`` is installed (see :doc:`/"
"topics/http/middleware`)."
msgstr ""
"どのページも訪れることを許可されていないユーザーエージェント文字列を表すコン"
"パイル済み正規表現オブジェクトのリスト。これはボット/クローラー用です。 "
"``CommonMiddleware`` がインストールされている場合にのみ使用されます（詳細"
"は、 :doc:`/topics/http/middleware` を参照）。"

msgid "``EMAIL_BACKEND``"
msgstr "``EMAIL_BACKEND``"

msgid ""
"Default: ``'``:class:`django.core.mail.backends.smtp.EmailBackend`\\ ``'``"
msgstr ""
"デフォルト値: ``'``:class:`django.core.mail.backends.smtp.EmailBackend`\\ "
"``'``"

msgid ""
"The backend to use for sending emails. For the list of available backends "
"see :ref:`topic-email-backends`."
msgstr ""
"使用するメール送信のバックエンド。利用可能なバックエンドのリストについて"
"は、 :ref:`topic-email-backends` を参照してください。"

msgid "``EMAIL_FILE_PATH``"
msgstr "``EMAIL_FILE_PATH``"

msgid "Default: Not defined"
msgstr "デフォルト値: 定義されていません"

msgid ""
"The directory used by the :ref:`file email backend <topic-email-file-"
"backend>` to store output files."
msgstr ""
":ref:`ファイルメールバックエンド <topic-email-file-backend>` が出力ファイルを"
"保存するために使用するディレクトリ。"

msgid "``EMAIL_HOST``"
msgstr "``EMAIL_HOST``"

msgid "Default: ``'localhost'``"
msgstr "デフォルト値: ``'localhost'``"

msgid "The host to use for sending email."
msgstr "E メール送信に使われるホストです。"

msgid "See also :setting:`EMAIL_PORT`."
msgstr ":setting:`EMAIL_PORT` も参照してください。"

msgid "``EMAIL_HOST_PASSWORD``"
msgstr "``EMAIL_HOST_PASSWORD``"

msgid ""
"Password to use for the SMTP server defined in :setting:`EMAIL_HOST`. This "
"setting is used in conjunction with :setting:`EMAIL_HOST_USER` when "
"authenticating to the SMTP server. If either of these settings is empty, "
"Django won't attempt authentication."
msgstr ""
":setting:`EMAIL_HOST` 内で定義された SMTP サーバで使われるパスワードです。こ"
"の設定は、STMP サーバへの認証の際に :setting:`EMAIL_HOST_USER` と組み合わせて"
"用いられます。どちらかの設定が空の場合、Django は認証を試みません。"

msgid "See also :setting:`EMAIL_HOST_USER`."
msgstr ":setting:`EMAIL_HOST_USER` も参照してください。"

msgid "``EMAIL_HOST_USER``"
msgstr "``EMAIL_HOST_USER``"

msgid ""
"Username to use for the SMTP server defined in :setting:`EMAIL_HOST`. If "
"empty, Django won't attempt authentication."
msgstr ""
":setting:`EMAIL_HOST` 内で定義された SMTP サーバで使われるユーザ名です。空の"
"場合、Django は認証を試みません。"

msgid "See also :setting:`EMAIL_HOST_PASSWORD`."
msgstr ":setting:`EMAIL_HOST_PASSWORD` も参照してください。"

msgid "``EMAIL_PORT``"
msgstr "``EMAIL_PORT``"

msgid "Default: ``25``"
msgstr "デフォルト値: ``25``"

msgid "Port to use for the SMTP server defined in :setting:`EMAIL_HOST`."
msgstr ""
":setting:`EMAIL_HOST` 内で定義された SMTP サーバで使われるポート番号です。"

msgid "``EMAIL_SUBJECT_PREFIX``"
msgstr "``EMAIL_SUBJECT_PREFIX``"

msgid "Default: ``'[Django] '``"
msgstr "デフォルト値: ``'[Django] '``"

msgid ""
"Subject-line prefix for email messages sent with ``django.core.mail."
"mail_admins`` or ``django.core.mail.mail_managers``. You'll probably want to "
"include the trailing space."
msgstr ""
"``django.core.mail.mail_admins`` や ``django.core.mail.mail_managers`` で送信"
"される E メールメッセージ用の表題行のプレフィックスです。最後の文字はスペース"
"にするのが良いでしょう。"

msgid "``EMAIL_USE_LOCALTIME``"
msgstr "``EMAIL_USE_LOCALTIME``"

msgid ""
"Whether to send the SMTP ``Date`` header of email messages in the local time "
"zone (``True``) or in UTC (``False``)."
msgstr ""
"電子メールメッセージのSMTPの \"Date\" ヘッダーをローカルタイムゾーンで送信す"
"る (``True``) かUTCで送信する (``False``) か。"

msgid "``EMAIL_USE_TLS``"
msgstr "``EMAIL_USE_TLS``"

msgid ""
"Whether to use a TLS (secure) connection when talking to the SMTP server. "
"This is used for explicit TLS connections, generally on port 587. If you are "
"experiencing hanging connections, see the implicit TLS setting :setting:"
"`EMAIL_USE_SSL`."
msgstr ""
"SMTP サーバと通信する際に TLS (セキュア) 接続を使うかどうかです。明示的な "
"TLS 接続に使われ、通常はポート 587 で行われます。接続がハングしてしまう場合"
"は、暗黙的な TLS を示す :setting:`EMAIL_USE_SSL` を確認してみてください。"

msgid "``EMAIL_USE_SSL``"
msgstr "``EMAIL_USE_SSL``"

msgid ""
"Whether to use an implicit TLS (secure) connection when talking to the SMTP "
"server. In most email documentation this type of TLS connection is referred "
"to as SSL. It is generally used on port 465. If you are experiencing "
"problems, see the explicit TLS setting :setting:`EMAIL_USE_TLS`."
msgstr ""
"SMTP サーバと通信する際に TLS (セキュア) 接続を使うかどうかです。ほとんどの "
"E メールのドキュメントでは、この TLS 接続のタイプは SSL として参照されます。"
"通常はポート 465 が使われます。接続がハングしてしまう場合は、暗黙的な TLS を"
"示す :setting:`EMAIL_USE_TLS` を確認してみてください。"

msgid ""
"Note that :setting:`EMAIL_USE_TLS`/:setting:`EMAIL_USE_SSL` are mutually "
"exclusive, so only set one of those settings to ``True``."
msgstr ""
":setting:`EMAIL_USE_TLS`/:setting:`EMAIL_USE_SSL` は相互に排他的であることに"
"注意してください。したがって、どちらか一方だけを ``True`` にセットしてくださ"
"い。"

msgid "``EMAIL_SSL_CERTFILE``"
msgstr "``EMAIL_SSL_CERTFILE``"

msgid ""
"If :setting:`EMAIL_USE_SSL` or :setting:`EMAIL_USE_TLS` is ``True``, you can "
"optionally specify the path to a PEM-formatted certificate chain file to use "
"for the SSL connection."
msgstr ""
":setting:`EMAIL_USE_SSL` ないし :setting:`EMAIL_USE_TLS` が ``True`` の場合、"
"オプションで、SSL 接続用に使う PEM フォーマットの証明書チェーンファイルを指定"
"できます。"

msgid "``EMAIL_SSL_KEYFILE``"
msgstr "``EMAIL_SSL_KEYFILE``"

msgid ""
"If :setting:`EMAIL_USE_SSL` or :setting:`EMAIL_USE_TLS` is ``True``, you can "
"optionally specify the path to a PEM-formatted private key file to use for "
"the SSL connection."
msgstr ""
":setting:`EMAIL_USE_SSL` ないし :setting:`EMAIL_USE_TLS` が ``True`` の場合、"
"オプションで、SSL 接続用に使う PEM フォーマットのプライベートキーファイルを指"
"定できます。"

msgid ""
"Note that setting :setting:`EMAIL_SSL_CERTFILE` and :setting:"
"`EMAIL_SSL_KEYFILE` doesn't result in any certificate checking. They're "
"passed to the underlying SSL connection. Please refer to the documentation "
"of Python's :meth:`python:ssl.SSLContext.wrap_socket` function for details "
"on how the certificate chain file and private key file are handled."
msgstr ""
":setting:`EMAIL_SSL_CERTFILE` と :setting:`EMAIL_SSL_KEYFILE` を設定しても、"
"いかなる証明書のチェックも行われません。これらは基礎となる SSL 接続に渡されま"
"す。証明書チェーンファイルと秘密鍵ファイルの取り扱いの詳細については、Python "
"の :meth:`python:ssl.SSLContext.wrap_socket` 関数のドキュメントを参照してくだ"
"さい。"

msgid "``EMAIL_TIMEOUT``"
msgstr "``EMAIL_TIMEOUT``"

msgid ""
"Specifies a timeout in seconds for blocking operations like the connection "
"attempt."
msgstr "接続試行のような操作をブロックするためのタイムアウトを秒で指定します。"

msgid "``FILE_UPLOAD_HANDLERS``"
msgstr "``FILE_UPLOAD_HANDLERS``"

msgid ""
"A list of handlers to use for uploading. Changing this setting allows "
"complete customization -- even replacement -- of Django's upload process."
msgstr ""
"アップロードに使用するハンドラのリストです。この設定を変更すると、Djangoの"
"アップロードプロセスを完全にカスタマイズできます。代替も可能です。"

msgid "See :doc:`/topics/files` for details."
msgstr "詳細は :doc:`/topics/files` を参照してください。"

msgid "``FILE_UPLOAD_MAX_MEMORY_SIZE``"
msgstr "``FILE_UPLOAD_MAX_MEMORY_SIZE``"

msgid ""
"The maximum size (in bytes) that an upload will be before it gets streamed "
"to the file system. See :doc:`/topics/files` for details."
msgstr ""
"ファイルシステムにストリーミングされる前のアップロードの最大サイズ（バイト単"
"位）。詳細は、 :doc:`/topics/files` を参照してください。"

msgid "See also :setting:`DATA_UPLOAD_MAX_MEMORY_SIZE`."
msgstr "関連項目: :setting:`DATA_UPLOAD_MAX_MEMORY_SIZE`"

msgid "``FILE_UPLOAD_DIRECTORY_PERMISSIONS``"
msgstr "``FILE_UPLOAD_DIRECTORY_PERMISSIONS``"

msgid ""
"The numeric mode to apply to directories created in the process of uploading "
"files."
msgstr ""
"ファイルのアップロードの過程で作成されるディレクトリに適用する数値モード。"

msgid ""
"This setting also determines the default permissions for collected static "
"directories when using the :djadmin:`collectstatic` management command. See :"
"djadmin:`collectstatic` for details on overriding it."
msgstr ""
"この設定は、 :djadmin:`collectstatic` 管理コマンドを使用する際の、収集された"
"静的ディレクトリのデフォルト権限も決定します。それを上書きする方法の詳細につ"
"いては、 :djadmin:`collectstatic` を参照してください。"

msgid ""
"This value mirrors the functionality and caveats of the :setting:"
"`FILE_UPLOAD_PERMISSIONS` setting."
msgstr ""
"この値には :setting:`FILE_UPLOAD_PERMISSIONS` 設定の機能と同様の注意点があり"
"ます。"

msgid "``FILE_UPLOAD_PERMISSIONS``"
msgstr "``FILE_UPLOAD_PERMISSIONS``"

msgid "Default: ``0o644``"
msgstr "デフォルト値: ``0o644``"

msgid ""
"The numeric mode (i.e. ``0o644``) to set newly uploaded files to. For more "
"information about what these modes mean, see the documentation for :func:`os."
"chmod`."
msgstr ""
"新しくアップロードされたファイルに設定する数値モード（例えば ``0o644`` ）で"
"す。これらのモードが何を意味するのかについての詳細は、 :func:`os.chmod` のド"
"キュメントを参照してください。"

msgid ""
"If ``None``, you'll get operating-system dependent behavior. On most "
"platforms, temporary files will have a mode of ``0o600``, and files saved "
"from memory will be saved using the system's standard umask."
msgstr ""
"もし ``None`` なら、OS 依存の動作が得られます。ほとんどのプラットフォームで"
"は、一時ファイルは ``0o600`` のモードを持ち、メモリから保存されるファイルはシ"
"ステムの標準の umask を使用して保存されます。"

msgid ""
"For security reasons, these permissions aren't applied to the temporary "
"files that are stored in :setting:`FILE_UPLOAD_TEMP_DIR`."
msgstr ""
"セキュリティ上の理由から、これらの権限は :setting:`FILE_UPLOAD_TEMP_DIR` に保"
"存される一時ファイルには適用されません。"

msgid ""
"This setting also determines the default permissions for collected static "
"files when using the :djadmin:`collectstatic` management command. See :"
"djadmin:`collectstatic` for details on overriding it."
msgstr ""
"この設定は、:djadmin:`collectstatic` 管理コマンドを使用して静的ファイルを収集"
"する際のデフォルト権限も決定します。それをオーバーライドする方法について"
"は、 :djadmin:`collectstatic` を参照してください。"

msgid "**Always prefix the mode with** ``0o`` **.**"
msgstr "**モードは常に** ``0o`` **で始めてください。**"

msgid ""
"If you're not familiar with file modes, please note that the ``0o`` prefix "
"is very important: it indicates an octal number, which is the way that modes "
"must be specified. If you try to use ``644``, you'll get totally incorrect "
"behavior."
msgstr ""
"ファイルモードに慣れていない場合は、 ``0o`` プレフィックスが非常に重要である"
"ことに注意してください。これは8進数を示しており、モードを指定する際にはこの方"
"法を使用しなければなりません。``644`` を使用しようとすると、全く正しくない動"
"作になってしまいます。"

msgid "``FILE_UPLOAD_TEMP_DIR``"
msgstr "``FILE_UPLOAD_TEMP_DIR``"

msgid ""
"The directory to store data to (typically files larger than :setting:"
"`FILE_UPLOAD_MAX_MEMORY_SIZE`) temporarily while uploading files. If "
"``None``, Django will use the standard temporary directory for the operating "
"system. For example, this will default to ``/tmp`` on \\*nix-style operating "
"systems."
msgstr ""
"ファイルをアップロードしている間にデータ (通常は :setting:"
"`FILE_UPLOAD_MAX_MEMORY_SIZE` より大きなファイル) を一時的に保存するディレク"
"トリ。``None`` の場合、Djangoはオペレーティングシステムの標準的な一時ディレク"
"トリを使用します。たとえば、これは \\*nix スタイルのオペレーティングシステム"
"ではデフォルトで ``/tmp`` になります。"

msgid "``FIRST_DAY_OF_WEEK``"
msgstr "``FIRST_DAY_OF_WEEK``"

msgid "Default: ``0`` (Sunday)"
msgstr "デフォルト値: ``0`` (日曜日)"

msgid ""
"A number representing the first day of the week. This is especially useful "
"when displaying a calendar. This value is only used when not using format "
"internationalization, or when a format cannot be found for the current "
"locale."
msgstr ""
"週の最初の日を表す数字。カレンダーを表示する際に特に役立ちます。この値は、"
"フォーマットの国際化が行われていない場合や、現在のロケールに対応するフォー"
"マットが見つからない場合にのみ使用されます。"

msgid ""
"The value must be an integer from 0 to 6, where 0 means Sunday, 1 means "
"Monday and so on."
msgstr ""
"値は0から6までの整数でなければなりません。0は日曜日、1は月曜日、以降も同様で"
"す。"

msgid "``FIXTURE_DIRS``"
msgstr "``FIXTURE_DIRS``"

msgid ""
"List of directories searched for :ref:`fixture <fixtures-explanation>` "
"files, in addition to the ``fixtures`` directory of each application, in "
"search order."
msgstr ""
":ref:`フィクスチャ <fixtures-explanation>` ファイルを検索するために、各アプリ"
"ケーションの ``fixtures`` ディレクトリに加えて検索されるディレクトリのリス"
"ト。検索順。"

msgid ""
"Note that these paths should use Unix-style forward slashes, even on Windows."
msgstr ""
"これらのパスは、Windows でも Unix スタイルのスラッシュ (/) を使う必要がありま"
"す。"

msgid ""
"See :ref:`initial-data-via-fixtures` and :ref:`topics-testing-fixtures`."
msgstr ""
":ref:`initial-data-via-fixtures` と :ref:`topics-testing-fixtures` を参照して"
"ください。"

msgid "``FORCE_SCRIPT_NAME``"
msgstr "``FORCE_SCRIPT_NAME``"

msgid ""
"If not ``None``, this will be used as the value of the ``SCRIPT_NAME`` "
"environment variable in any HTTP request. This setting can be used to "
"override the server-provided value of ``SCRIPT_NAME``, which may be a "
"rewritten version of the preferred value or not supplied at all. It is also "
"used by :func:`django.setup()` to set the URL resolver script prefix outside "
"of the request/response cycle (e.g. in management commands and standalone "
"scripts) to generate correct URLs when ``FORCE_SCRIPT_NAME`` is provided."
msgstr ""
"``None`` でない場合、これはHTTPリクエストにおける ``SCRIPT_NAME`` 環境変数の"
"値として使用されます。この設定により、サーバーが提供する ``SCRIPT_NAME`` の値"
"を上書きできます（好きな値に書き換えることもできますし、何も提供しなくても構"
"いません）。また、これはリクエスト/レスポンスサイクルの外部（例えば、管理コマ"
"ンドやスタンドアロンのスクリプト）でURLリゾルバースクリプトのプレフィックスを"
"設定するために :func:`django.setup()` によって使用され、"
"``FORCE_SCRIPT_NAME`` が提供されたときに正しいURLを生成します。"

msgid "``FORM_RENDERER``"
msgstr "``FORM_RENDERER``"

msgid "Default: ``'``:class:`django.forms.renderers.DjangoTemplates`\\ ``'``"
msgstr ""
"デフォルト値: ``'``:class:`django.forms.renderers.DjangoTemplates`\\ ``'``"

msgid ""
"The class that renders forms and form widgets. It must implement :ref:`the "
"low-level render API <low-level-widget-render-api>`. Included form renderers "
"are:"
msgstr ""
"フォームやフォームウィジェットをレンダリングするクラスです。:ref:`低レベルレ"
"ンダリングAPI <low-level-widget-render-api>` を実装する必要があります。含まれ"
"るフォームレンダラは次の通りです。"

msgid "``'``:class:`django.forms.renderers.DjangoTemplates`\\ ``'``"
msgstr "``'``:class:`django.forms.renderers.DjangoTemplates`\\ ``'``"

msgid "``'``:class:`django.forms.renderers.Jinja2`\\ ``'``"
msgstr "``'``:class:`django.forms.renderers.Jinja2`\\ ``'``"

msgid "``'``:class:`django.forms.renderers.TemplatesSetting`\\ ``'``"
msgstr "``'``:class:`django.forms.renderers.TemplatesSetting`\\ ``'``"

msgid "``FORMS_URLFIELD_ASSUME_HTTPS``"
msgstr "``FORMS_URLFIELD_ASSUME_HTTPS``"

msgid ""
"Set this transitional setting to ``True`` to opt into using ``\"https\"`` as "
"the new default value of :attr:`URLField.assume_scheme <django.forms."
"URLField.assume_scheme>` during the Django 5.x release cycle."
msgstr ""
"この移行用設定を ``True`` に設定し、Django 5.x リリースサイクル中に新しいデ"
"フォルト値 ``\"https\"`` を使用するように :attr:`URLField.assume_scheme "
"<django.forms.URLField.assume_scheme>` の設定を変更するオプションを選択しま"
"す。"

msgid "``FORMAT_MODULE_PATH``"
msgstr "``FORMAT_MODULE_PATH``"

msgid ""
"A full Python path to a Python package that contains custom format "
"definitions for project locales. If not ``None``, Django will check for a "
"``formats.py`` file, under the directory named as the current locale, and "
"will use the formats defined in this file."
msgstr ""
"プロジェクトのロケールに対するカスタムフォーマット定義を含むPythonパッケージ"
"への完全なPythonパス。``None`` でない場合、Djangoは現在のロケールとして名付け"
"られたディレクトリの下にある ``formats.py`` ファイルをチェックし、このファイ"
"ルで定義されているフォーマットを使用します。"

msgid ""
"The name of the directory containing the format definitions is expected to "
"be named using :term:`locale name` notation, for example ``de``, ``pt_BR``, "
"``en_US``, etc."
msgstr ""
"フォーマットの定義があるディレクトリ名は、:term:`locale name` 表記を使用した"
"名前であることが期待されます。たとえば、``de``、``pt_BR``、``en_US`` などで"
"す。"

msgid ""
"For example, if :setting:`FORMAT_MODULE_PATH` is set to ``mysite.formats``, "
"and current language is ``en`` (English), Django will expect a directory "
"tree like:"
msgstr ""
"たとえば、:setting:`FORMAT_MODULE_PATH` が ``mysite.formats`` に設定され、現"
"在の言語が ``en`` (英語) である場合、Djangoは次のようなディレクトリ構造を期待"
"します:"

msgid "You can also set this setting to a list of Python paths, for example::"
msgstr "この設定には、Python のパスのリストを設定することもできます。たとえば:"

msgid ""
"When Django searches for a certain format, it will go through all given "
"Python paths until it finds a module that actually defines the given format. "
"This means that formats defined in packages farther up in the list will take "
"precedence over the same formats in packages farther down."
msgstr ""
"Django が特定のフォーマットを検索する際、与えられた Python パス全体を通過し、"
"実際にそのフォーマットを定義しているモジュールが見つかるまで探します。つま"
"り、リストの上位にあるパッケージで定義されたフォーマットが、下位にある同じ"
"フォーマットより優先されます。"

msgid "Available formats are:"
msgstr "利用可能なフォーマットは以下の通りです:"

msgid ":setting:`DATE_FORMAT`"
msgstr ":setting:`DATE_FORMAT`"

msgid ":setting:`DATE_INPUT_FORMATS`"
msgstr ":setting:`DATE_INPUT_FORMATS`"

msgid ":setting:`DATETIME_FORMAT`,"
msgstr ":setting:`DATETIME_FORMAT`,"

msgid ":setting:`DATETIME_INPUT_FORMATS`"
msgstr ":setting:`DATETIME_INPUT_FORMATS`"

msgid ":setting:`DECIMAL_SEPARATOR`"
msgstr ":setting:`DECIMAL_SEPARATOR`"

msgid ":setting:`FIRST_DAY_OF_WEEK`"
msgstr ":setting:`FIRST_DAY_OF_WEEK`"

msgid ":setting:`MONTH_DAY_FORMAT`"
msgstr ":setting:`MONTH_DAY_FORMAT`"

msgid ":setting:`NUMBER_GROUPING`"
msgstr ":setting:`NUMBER_GROUPING`"

msgid ":setting:`SHORT_DATE_FORMAT`"
msgstr ":setting:`SHORT_DATE_FORMAT`"

msgid ":setting:`SHORT_DATETIME_FORMAT`"
msgstr ":setting:`SHORT_DATETIME_FORMAT`"

msgid ":setting:`THOUSAND_SEPARATOR`"
msgstr ":setting:`THOUSAND_SEPARATOR`"

msgid ":setting:`TIME_FORMAT`"
msgstr ":setting:`TIME_FORMAT`"

msgid ":setting:`TIME_INPUT_FORMATS`"
msgstr ":setting:`TIME_INPUT_FORMATS`"

msgid ":setting:`YEAR_MONTH_FORMAT`"
msgstr ":setting:`YEAR_MONTH_FORMAT`"

msgid "``IGNORABLE_404_URLS``"
msgstr "``IGNORABLE_404_URLS``"

msgid ""
"List of compiled regular expression objects describing URLs that should be "
"ignored when reporting HTTP 404 errors via email (see :doc:`/howto/error-"
"reporting`). Regular expressions are matched against :meth:`request's full "
"paths <django.http.HttpRequest.get_full_path>` (including query string, if "
"any). Use this if your site does not provide a commonly requested file such "
"as ``favicon.ico`` or ``robots.txt``."
msgstr ""
"HTTP 404 エラーをメールで報告する際に無視すべき URL を記述した、コンパイルさ"
"れた正規表現オブジェクトのリストです（詳細は、:doc:`/howto/error-reporting` "
"を参照）。正規表現は、 :meth:`リクエストのフルパス <django.http.HttpRequest."
"get_full_path>` (クエリ文字列を含む) と照合されます。 ``favicon.ico`` や "
"``robots.txt`` のような一般的なファイルを提供していない場合に使用してくださ"
"い。"

msgid ""
"This is only used if :class:`~django.middleware.common."
"BrokenLinkEmailsMiddleware` is enabled (see :doc:`/topics/http/middleware`)."
msgstr ""
"これは、 :class:`~django.middleware.common.BrokenLinkEmailsMiddleware` が有効"
"になっている場合にのみ使用されます（詳細は、 :doc:`/topics/http/middleware` "
"を参照）。"

msgid "``INSTALLED_APPS``"
msgstr "``INSTALLED_APPS``"

msgid ""
"A list of strings designating all applications that are enabled in this "
"Django installation. Each string should be a dotted Python path to:"
msgstr ""
"このDjangoインストールで有効になっているすべてのアプリケーションを示す文字列"
"のリスト。各文字列は、Pythonのドット区切りパスである必要があります。"

msgid "an application configuration class (preferred), or"
msgstr "アプリケーションの設定クラス（推奨）、または"

msgid "a package containing an application."
msgstr "アプリケーションを含むパッケージ。"

msgid ":doc:`Learn more about application configurations </ref/applications>`."
msgstr ":doc:`アプリケーション設定について詳しく知る </ref/applications>` 。"

msgid "Use the application registry for introspection"
msgstr "アプリケーションレジストリを利用してインストロスペクションを行う"

msgid ""
"Your code should never access :setting:`INSTALLED_APPS` directly. Use :attr:"
"`django.apps.apps` instead."
msgstr ""
"コードからは直接 :setting:`INSTALLED_APPS` にアクセスしないでください。代わり"
"に :attr:`django.apps.apps` を使用してください。"

msgid ""
"Application names and labels must be unique in             :setting:"
"`INSTALLED_APPS`"
msgstr ""
"アプリケーション名とラベルは、 :setting:`INSTALLED_APPS` 内で一意である必要が"
"あります。"

msgid ""
"Application :attr:`names <django.apps.AppConfig.name>` — the dotted Python "
"path to the application package — must be unique. There is no way to include "
"the same application twice, short of duplicating its code under another name."
msgstr ""
"アプリケーションの属性 :attr:`names <django.apps.AppConfig.name>` （アプリ"
"ケーションパッケージへのドット区切りのPythonパス）はユニークである必要があり"
"ます。同じアプリケーションを2度含める方法はなく、コードを別の名前で複製する以"
"外にありません。"

msgid ""
"Application :attr:`labels <django.apps.AppConfig.label>` — by default the "
"final part of the name — must be unique too. For example, you can't include "
"both ``django.contrib.auth`` and ``myproject.auth``. However, you can "
"relabel an application with a custom configuration that defines a different :"
"attr:`~django.apps.AppConfig.label`."
msgstr ""
"アプリケーション :attr:`labels <django.apps.AppConfig.label>` （デフォルトで"
"は名前の最後の部分） も一意でなければなりません。例えば、 ``django.contrib."
"auth`` と ``myproject.auth`` を両方含めることはできません。しかし、異なる :"
"attr:`~django.apps.AppConfig.label` を定義するカスタム設定でアプリケーション"
"のラベルを変更することはできます。"

msgid ""
"These rules apply regardless of whether :setting:`INSTALLED_APPS` references "
"application configuration classes or application packages."
msgstr ""
"これらのルールは、 :setting:`INSTALLED_APPS` がアプリケーション設定クラスを参"
"照しているか、アプリケーションパッケージを参照しているかに関わらず適用されま"
"す。"

msgid ""
"When several applications provide different versions of the same resource "
"(template, static file, management command, translation), the application "
"listed first in :setting:`INSTALLED_APPS` has precedence."
msgstr ""
"いくつかのアプリケーションが同じリソース（テンプレート、静的ファイル、管理コ"
"マンド、翻訳）の異なるバージョンを提供する場合、 :setting:`INSTALLED_APPS` で"
"最初にリストされたアプリケーションが優先されます。"

msgid "``INTERNAL_IPS``"
msgstr "``INTERNAL_IPS``"

msgid "A list of IP addresses, as strings, that:"
msgstr "文字列としての IP アドレスのリストで、以下の条件を満たします:"

msgid ""
"Allow the :func:`~django.template.context_processors.debug` context "
"processor to add some variables to the template context."
msgstr ""
":func:`~django.template.context_processors.debug` コンテキストプロセッサを許"
"可して、テンプレートコンテキストにいくつかの変数を追加します。"

msgid ""
"Can use the :ref:`admindocs bookmarklets <admindocs-bookmarklets>` even if "
"not logged in as a staff user."
msgstr ""
"スタッフユーザーとしてログインしていなくても、 :ref:`admindocsブックマーク"
"レット <admindocs-bookmarklets>` を使用できます。"

msgid ""
"Are marked as \"internal\" (as opposed to \"EXTERNAL\") in :class:`~django."
"utils.log.AdminEmailHandler` emails."
msgstr ""
":class:`~django.utils.log.AdminEmailHandler` の電子メールで（\"EXTERNAL\" に"
"対して）\"internal\" とマークされます。"

msgid "``LANGUAGE_CODE``"
msgstr "``LANGUAGE_CODE``"

msgid "Default: ``'en-us'``"
msgstr "デフォルト値: ``'en-us'``"

msgid ""
"A string representing the language code for this installation. This should "
"be in standard :term:`language ID format <language code>`. For example, U.S. "
"English is ``\"en-us\"``. See also the `list of language identifiers`_ and :"
"doc:`/topics/i18n/index`."
msgstr ""
"このインストールに対する言語コードを表す文字列です。標準の :term:`言語 ID "
"フォーマット <language code>` 内にある文字列を指定します。例えば、U.S. の英語"
"は ``\"en-us\"`` です。`list of language identifiers`_ と :doc:`/topics/i18n/"
"index` も参照してください。"

msgid ":setting:`USE_I18N` must be active for this setting to have any effect."
msgstr ""
"この設定が効果を持つためには、:setting:`USE_I18N` をアクティブにする必要があ"
"ります。"

msgid "It serves two purposes:"
msgstr "これは 2 つの目的に使われます:"

msgid ""
"If the locale middleware isn't in use, it decides which translation is "
"served to all users."
msgstr ""
"ロケールミドルウェアが使用されていない場合、全ユーザにどの翻訳を提供するかを"
"決めます。"

msgid ""
"If the locale middleware is active, it provides a fallback language in case "
"the user's preferred language can't be determined or is not supported by the "
"website. It also provides the fallback translation when a translation for a "
"given literal doesn't exist for the user's preferred language."
msgstr ""
"ロケールミドルウェアがアクティブの場合、ユーザの好む言語が不明な場合やウェブ"
"サイトでサポートされていない場合に備えて、フォールバックの言語として利用され"
"ます。また、与えられた文字列に対して、ユーザの好む言語に対応する翻訳が存在し"
"ない場合にも、この設定が利用されます。"

msgid "See :ref:`how-django-discovers-language-preference` for more details."
msgstr ""
"詳しくは :ref:`how-django-discovers-language-preference` を参照してください。"

msgid "``LANGUAGE_COOKIE_AGE``"
msgstr "``LANGUAGE_COOKIE_AGE``"

msgid "Default: ``None`` (expires at browser close)"
msgstr "デフォルト値: ``None`` (ブラウザを閉じると期限切れとなります)"

msgid "The age of the language cookie, in seconds."
msgstr "言語クッキーの age で、秒で表します。"

msgid "``LANGUAGE_COOKIE_DOMAIN``"
msgstr "``LANGUAGE_COOKIE_DOMAIN``"

msgid ""
"The domain to use for the language cookie. Set this to a string such as "
"``\"example.com\"`` for cross-domain cookies, or use ``None`` for a standard "
"domain cookie."
msgstr ""
"言語クッキーに使用するドメインです。クロスドメインのクッキーのために "
"``\"example.com\"`` のような文字列に設定するか、標準のドメインクッキーには "
"``None`` を使用します。"

msgid ""
"Be cautious when updating this setting on a production site. If you update "
"this setting to enable cross-domain cookies on a site that previously used "
"standard domain cookies, existing user cookies that have the old domain will "
"not be updated. This will result in site users being unable to switch the "
"language as long as these cookies persist. The only safe and reliable option "
"to perform the switch is to change the language cookie name permanently (via "
"the :setting:`LANGUAGE_COOKIE_NAME` setting) and to add a middleware that "
"copies the value from the old cookie to a new one and then deletes the old "
"one."
msgstr ""
"本番サイトでこの設定を更新する際には注意してください。これまで標準ドメインの"
"クッキーを使用していたサイトでこの設定を更新してクロスドメインのクッキーを有"
"効にすると、古いドメインの既存のユーザークッキーは更新されません。これによ"
"り、これらのクッキーが残存している限り、サイトのユーザーは言語を切り替えるこ"
"とができなくなります。スイッチを行う唯一の安全で確実なオプションは、言語クッ"
"キーの名前を ( :setting:`LANGUAGE_COOKIE_NAME` 設定により) 恒久的に変更し、古"
"いクッキーから新しいクッキーへ値をコピーし、古いものを削除するミドルウェアを"
"追加することです。"

msgid "``LANGUAGE_COOKIE_HTTPONLY``"
msgstr "``LANGUAGE_COOKIE_HTTPONLY``"

msgid ""
"Whether to use ``HttpOnly`` flag on the language cookie. If this is set to "
"``True``, client-side JavaScript will not be able to access the language "
"cookie."
msgstr ""
"言語クッキーに ``HttpOnly`` フラグを使用するかどうか。これが ``True`` に設定"
"されている場合、クライアントサイドの JavaScript は言語クッキーにアクセスでき"
"ません。"

msgid "``LANGUAGE_COOKIE_NAME``"
msgstr "``LANGUAGE_COOKIE_NAME``"

msgid "Default: ``'django_language'``"
msgstr "デフォルト値: ``'django_language'``"

msgid ""
"The name of the cookie to use for the language cookie. This can be whatever "
"you want (as long as it's different from the other cookie names in your "
"application). See :doc:`/topics/i18n/index`."
msgstr ""
"言語クッキーに使用するクッキーの名前です。これはあなたが望むものであれば何で"
"も構いません（ただし、アプリケーション内の他のクッキー名と異なる必要がありま"
"す）。詳細は :doc:`/topics/i18n/index` を参照してください。"

msgid "``LANGUAGE_COOKIE_PATH``"
msgstr "``LANGUAGE_COOKIE_PATH``"

msgid ""
"The path set on the language cookie. This should either match the URL path "
"of your Django installation or be a parent of that path."
msgstr ""
"言語クッキーのパス。これは、Django のインストール先の URL パスと一致するか、"
"そのパスの親である必要があります。"

msgid ""
"This is useful if you have multiple Django instances running under the same "
"hostname. They can use different cookie paths and each instance will only "
"see its own language cookie."
msgstr ""
"これは、同じホスト名の下で複数の Django インスタンスが実行されている場合に便"
"利です。異なるクッキーパスを使用でき、各インスタンスは自身の言語クッキーのみ"
"を確認できます。"

msgid ""
"Be cautious when updating this setting on a production site. If you update "
"this setting to use a deeper path than it previously used, existing user "
"cookies that have the old path will not be updated. This will result in site "
"users being unable to switch the language as long as these cookies persist. "
"The only safe and reliable option to perform the switch is to change the "
"language cookie name permanently (via the :setting:`LANGUAGE_COOKIE_NAME` "
"setting), and to add a middleware that copies the value from the old cookie "
"to a new one and then deletes the one."
msgstr ""
"本番サイトでこの設定を更新する際には慎重に行ってください。もし、この設定で以"
"前よりも深いパスを使用するように更新した場合、古いパスを持つ既存のユーザー"
"クッキーは更新されません。これにより、これらのクッキーが存在する限り、サイト"
"のユーザーは言語を切り替えることができなくなります。切り替えを安全かつ確実に"
"行う唯一の方法は、言語クッキーの名前を永続的に変更すること (:setting:"
"`LANGUAGE_COOKIE_NAME` 設定を通じて)、そして古いクッキーから新しいクッキーへ"
"値をコピーしてから古いクッキーを削除するミドルウェアを追加することです。"

msgid "``LANGUAGE_COOKIE_SAMESITE``"
msgstr "``LANGUAGE_COOKIE_SAMESITE``"

msgid ""
"The value of the `SameSite`_ flag on the language cookie. This flag prevents "
"the cookie from being sent in cross-site requests."
msgstr ""
"言語クッキーの `SameSite`_ フラグの値です。このフラグは、クロスサイトリクエス"
"トでクッキーが送信されるのを防ぎます。"

msgid "``LANGUAGE_COOKIE_SECURE``"
msgstr "``LANGUAGE_COOKIE_SECURE``"

msgid ""
"Whether to use a secure cookie for the language cookie. If this is set to "
"``True``, the cookie will be marked as \"secure\", which means browsers may "
"ensure that the cookie is only sent under an HTTPS connection."
msgstr ""
"言語クッキーにセキュアクッキーを使用するかどうか。これが ``True`` に設定され"
"ている場合、クッキーは \"secure\" としてマークされ、ブラウザーはそのクッキー"
"が HTTPS 接続下でのみ送信されることを保証する場合があります。"

msgid "``LANGUAGES``"
msgstr "``LANGUAGES``"

msgid ""
"Default: A list of all available languages. This list is continually growing "
"and including a copy here would inevitably become rapidly out of date. You "
"can see the current list of translated languages by looking in :source:"
"`django/conf/global_settings.py`."
msgstr ""
"デフォルト値: 利用可能な全言語のリストです。このリストは常に拡大しており、こ"
"こにコピーを含めると速やかに時代遅れになってしまいます。現在の翻訳された言語"
"のリストは、 :source:`django/conf/global_settings.py` で確認できます。"

msgid ""
"The list is a list of 2-tuples in the format (:term:`language code<language "
"code>`, ``language name``) -- for example, ``('ja', 'Japanese')``. This "
"specifies which languages are available for language selection. See :doc:`/"
"topics/i18n/index`."
msgstr ""
"リストは、(:term:`言語コード <language code>`, ``言語名``) の形式の 2値タプル"
"のリストです。例えば、``('ja', 'Japanese')`` です。これは言語選択で利用可能な"
"言語を指定します。詳細は :doc:`/topics/i18n/index` を参照してください。"

msgid ""
"Generally, the default value should suffice. Only set this setting if you "
"want to restrict language selection to a subset of the Django-provided "
"languages."
msgstr ""
"一般的には、デフォルト値で十分です。Django が提供する言語の部分集合に選択肢を"
"限定したいときにのみ、この設定を自分でセットしてください。"

msgid ""
"If you define a custom :setting:`LANGUAGES` setting, you can mark the "
"language names as translation strings using the :func:`~django.utils."
"translation.gettext_lazy` function."
msgstr ""
"カスタム :setting:`LANGUAGES` 設定を定義した場合、 :func:`~django.utils."
"translation.gettext_lazy` 関数を使って言語名を翻訳文字列としてマークすること"
"ができます。"

msgid "Here's a sample settings file::"
msgstr "以下はサンプルの設定ファイルです::"

msgid "``LANGUAGES_BIDI``"
msgstr "``LANGUAGES_BIDI``"

msgid ""
"Default: A list of all language codes that are written right-to-left. You "
"can see the current list of these languages by looking in :source:`django/"
"conf/global_settings.py`."
msgstr ""
"デフォルト値: 右から左へ向かって書く言語のコード一覧です。これらの言語の現在"
"の一覧は、 :source:`django/conf/global_settings.py` を見ることで確認できま"
"す。"

msgid ""
"The list contains :term:`language codes<language code>` for languages that "
"are written right-to-left."
msgstr ""
"リストには、右から左へ書かれる言語の :term:`言語コード<language code>` が含ま"
"れています。"

msgid ""
"Generally, the default value should suffice. Only set this setting if you "
"want to restrict language selection to a subset of the Django-provided "
"languages. If you define a custom :setting:`LANGUAGES` setting, the list of "
"bidirectional languages may contain language codes which are not enabled on "
"a given site."
msgstr ""
"基本的にはデフォルト値で十分です。Django が提供する言語のサブセットに言語選択"
"を制限したい場合にのみ、この設定を設定してください。カスタムな :setting:"
"`LANGUAGES` 設定を定義すると、双方向言語のリストに、特定サイトで有効になって"
"いない言語コードが含まれる可能性があります。"

msgid "``LOCALE_PATHS``"
msgstr "``LOCALE_PATHS``"

msgid ""
"A list of directories where Django looks for translation files. See :ref:"
"`how-django-discovers-translations`."
msgstr ""
"Django が翻訳ファイルを探すディレクトリのリストです。:ref:`how-django-"
"discovers-translations` を参照してください。"

msgid ""
"Django will look within each of these paths for the ``<locale_code>/"
"LC_MESSAGES`` directories containing the actual translation files."
msgstr ""
"Django は、実際の翻訳ファイルを含む ``<locale_code>/LC_MESSAGES`` ディレクト"
"リに対して、これらのパス内をそれぞれ見ていきます。"

msgid "``LOGGING``"
msgstr "``LOGGING``"

msgid "Default: A logging configuration dictionary."
msgstr "デフォルト値: ロギング設定のディレクトリ。"

msgid ""
"A data structure containing configuration information. When not-empty, the "
"contents of this data structure will be passed as the argument to the "
"configuration method described in :setting:`LOGGING_CONFIG`."
msgstr ""
"設定情報を含むデータ構造です。このデータ構造が空でない場合、その内容は :"
"setting:`LOGGING_CONFIG` で説明されている設定メソッドへの引数として渡されま"
"す。"

msgid ""
"Among other things, the default logging configuration passes HTTP 500 server "
"errors to an email log handler when :setting:`DEBUG` is ``False``. See also :"
"ref:`configuring-logging`."
msgstr ""
"デフォルトのロギング設定では、 :setting:`DEBUG` が ``False`` の場合、HTTP "
"500 サーバーエラーをメールログハンドラーに送信します。詳細は、 :ref:"
"`configuring-logging` を参照してください。"

msgid ""
"You can see the default logging configuration by looking in :source:`django/"
"utils/log.py`."
msgstr ""
"デフォルトのログ設定は、 :source:`django/utils/log.py` で確認できます。"

msgid "``LOGGING_CONFIG``"
msgstr "``LOGGING_CONFIG``"

msgid "Default: ``'logging.config.dictConfig'``"
msgstr "デフォルト値: ``'logging.config.dictConfig'``"

msgid ""
"A path to a callable that will be used to configure logging in the Django "
"project. Points at an instance of Python's :ref:`dictConfig <logging-config-"
"dictschema>` configuration method by default."
msgstr ""
"Django プロジェクトでロギングを設定するために使用される呼び出し可能オブジェク"
"トへのパス。デフォルトでは Python の :ref:`dictConfig <logging-config-"
"dictschema>` 設定形式のインスタンスを指しています。"

msgid ""
"If you set :setting:`LOGGING_CONFIG` to ``None``, the logging configuration "
"process will be skipped."
msgstr ""
":setting:`LOGGING_CONFIG` を ``None`` に設定すると、ロギング設定プロセスはス"
"キップされます。"

msgid "``MANAGERS``"
msgstr "``MANAGERS``"

msgid ""
"A list in the same format as :setting:`ADMINS` that specifies who should get "
"broken link notifications when :class:`~django.middleware.common."
"BrokenLinkEmailsMiddleware` is enabled."
msgstr ""
":setting:`ADMINS` と同じ形式のリストで、 :class:`~django.middleware.common."
"BrokenLinkEmailsMiddleware` が有効な場合に、誰がリンク切れ通知を受け取るべき"
"かを指定します。"

msgid "``MEDIA_ROOT``"
msgstr "``MEDIA_ROOT``"

msgid ""
"Absolute filesystem path to the directory that will hold :doc:`user-uploaded "
"files </topics/files>`."
msgstr ""
":doc:`ユーザーがアップロードしたファイル </topics/files>` を保存するディレク"
"トリへの絶対ファイルシステムパス。"

msgid "Example: ``\"/var/www/example.com/media/\"``"
msgstr "例: ``\"/var/www/example.com/media/\"``"

msgid "See also :setting:`MEDIA_URL`."
msgstr "関連項目: :setting:`MEDIA_URL`"

msgid ""
":setting:`MEDIA_ROOT` and :setting:`STATIC_ROOT` must have different values. "
"Before :setting:`STATIC_ROOT` was introduced, it was common to rely or "
"fallback on :setting:`MEDIA_ROOT` to also serve static files; however, since "
"this can have serious security implications, there is a validation check to "
"prevent it."
msgstr ""
":setting:`MEDIA_ROOT` と :setting:`STATIC_ROOT` は異なる値である必要がありま"
"す。:setting:`STATIC_ROOT` が導入される前は、静的ファイルを提供するために :"
"setting:`MEDIA_ROOT` に依存したりフォールバックしたりすることが一般的でした"
"が、これは重大なセキュリティ上の影響を与える可能性があるので、これを防ぐため"
"の検証チェックが行われています。"

msgid "``MEDIA_URL``"
msgstr "``MEDIA_URL``"

msgid ""
"URL that handles the media served from :setting:`MEDIA_ROOT`, used for :doc:"
"`managing stored files </topics/files>`. It must end in a slash if set to a "
"non-empty value. You will need to :ref:`configure these files to be served "
"<serving-uploaded-files-in-development>` in both development and production "
"environments."
msgstr ""
":setting:`MEDIA_ROOT` から提供されるメディアを扱う URL は、:doc:`保存された"
"ファイルの管理 </topics/files>` に使用されます。空でない値に設定されている場"
"合は、スラッシュで終わる必要があります。開発環境と本番環境の両方で、これらの"
"ファイルが配信されるように :ref:`設定する必要があります<serving-uploaded-"
"files-in-development>` 。"

msgid ""
"If you want to use ``{{ MEDIA_URL }}`` in your templates, add ``'django."
"template.context_processors.media'`` in the ``'context_processors'`` option "
"of :setting:`TEMPLATES`."
msgstr ""
"テンプレートで ``{{ MEDIA_URL }}`` を使用したい場合は、 :setting:`TEMPLATES` "
"の ``'context_processors'`` オプションに ``'django.template."
"context_processors.media'`` を追加してください。"

msgid "Example: ``\"http://media.example.com/\"``"
msgstr "例: ``\"http://media.example.com/\"``"

msgid ""
"There are security risks if you are accepting uploaded content from "
"untrusted users! See the security guide's topic on :ref:`user-uploaded-"
"content-security` for mitigation details."
msgstr ""
"信頼できないユーザーからコンテンツアップロードを許可する場合、セキュリティリ"
"スクが存在します！緩和策の詳細は、:ref:`user-uploaded-content-security` のセ"
"キュリティガイドを参照してください。"

msgid ""
":setting:`MEDIA_URL` and :setting:`STATIC_URL` must have different values. "
"See :setting:`MEDIA_ROOT` for more details."
msgstr ""
":setting:`MEDIA_URL` と :setting:`STATIC_URL` は異なる値を持つ必要がありま"
"す。詳細については :setting:`MEDIA_ROOT` を参照してください。"

msgid ""
"If :setting:`MEDIA_URL` is a relative path, then it will be prefixed by the "
"server-provided value of ``SCRIPT_NAME`` (or ``/`` if not set). This makes "
"it easier to serve a Django application in a subpath without adding an extra "
"configuration to the settings."
msgstr ""
"もし :setting:`MEDIA_URL` が相対パスである場合、それは ``SCRIPT_NAME`` の値"
"（設定されていない場合は ``/`` ）で接頭辞が付けられます。これにより、追加の設"
"定を行わずにDjangoアプリケーションをサブパスで提供するのが簡単になります。"

msgid "``MIDDLEWARE``"
msgstr "``MIDDLEWARE``"

msgid "A list of middleware to use. See :doc:`/topics/http/middleware`."
msgstr ""
"使用するミドルウェアのリストです。 :doc:`/topics/http/middleware` を参照して"
"ください。"

msgid "``MIGRATION_MODULES``"
msgstr "``MIGRATION_MODULES``"

msgid ""
"A dictionary specifying the package where migration modules can be found on "
"a per-app basis. The default value of this setting is an empty dictionary, "
"but the default package name for migration modules is ``migrations``."
msgstr ""
"アプリごとにマイグレーションモジュールを検索できるパッケージを指定する辞書で"
"す。この設定のデフォルト値は空の辞書ですが、マイグレーションモジュールのデ"
"フォルトパッケージ名は ``migrations`` です。"

msgid ""
"In this case, migrations pertaining to the ``blog`` app will be contained in "
"the ``blog.db_migrations`` package."
msgstr ""
"この場合、``blog`` アプリに関連するマイグレーションは ``blog.db_migrations`` "
"パッケージに含まれます。"

msgid ""
"If you provide the ``app_label`` argument, :djadmin:`makemigrations` will "
"automatically create the package if it doesn't already exist."
msgstr ""
"``app_label`` 引数を提供した場合、:djadmin:`makemigrations` はパッケージがま"
"だ存在しない場合、自動的にパッケージを作成します。"

msgid ""
"When you supply ``None`` as a value for an app, Django will consider the app "
"as an app without migrations regardless of an existing ``migrations`` "
"submodule. This can be used, for example, in a test settings file to skip "
"migrations while testing (tables will still be created for the apps' "
"models). To disable migrations for all apps during tests, you can set the :"
"setting:`MIGRATE <TEST_MIGRATE>` to ``False`` instead. If "
"``MIGRATION_MODULES`` is used in your general project settings, remember to "
"use the :option:`migrate --run-syncdb` option if you want to create tables "
"for the app."
msgstr ""
"アプリに対して ``None`` を値として指定すると、Djangoはそのアプリをマイグレー"
"ションを持たないアプリとみなします。これは、例えば、テストの設定ファイルにお"
"いてマイグレーションをスキップしながらテストを行うために使用できます (アプリ"
"のモデルのためにテーブルは依然として作成されます)。テスト中にすべてのアプリの"
"マイグレーションを無効にするには、代わりに :setting:`MIGRATE <TEST_MIGRATE>` "
"を ``False`` に設定できます。プロジェクトの一般的な設定で "
"``MIGRATION_MODULES`` を使用している場合、アプリのためにテーブルを作成したい"
"場合は :option:`migrate --run-syncdb` オプションを使用してください。"

msgid "``MONTH_DAY_FORMAT``"
msgstr "``MONTH_DAY_FORMAT``"

msgid "Default: ``'F j'``"
msgstr "デフォルト値: ``'F j'``"

msgid ""
"The default formatting to use for date fields on Django admin change-list "
"pages -- and, possibly, by other parts of the system -- in cases when only "
"the month and day are displayed."
msgstr ""
"admin change-list のページの日付をフォーマットする時のデフォルト値です。シス"
"テムの他の場所で月と日だけが表示される場合に使用される可能性があります。"

msgid ""
"For example, when a Django admin change-list page is being filtered by a "
"date drilldown, the header for a given day displays the day and month. "
"Different locales have different formats. For example, U.S. English would "
"say \"January 1,\" whereas Spanish might say \"1 Enero.\""
msgstr ""
"たとえば、Django の admin change-list のページを日付でフィルタする時、与えら"
"れた日付のヘッダには月と日が表示されます。"

msgid ""
"Note that the corresponding locale-dictated format has higher precedence and "
"will be applied instead."
msgstr ""
"対応するロケールによる書式が優先され、適用されることに留意してください。"

msgid ""
"See :tfilter:`allowed date format strings <date>`. See also :setting:"
"`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :"
"setting:`YEAR_MONTH_FORMAT`."
msgstr ""
":tfilter:`使用可能な日付フォーマット文字列 <date>` を参照してください。ま"
"た、:setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:"
"`TIME_FORMAT`, :setting:`YEAR_MONTH_FORMAT` も参照してください。"

msgid "``NUMBER_GROUPING``"
msgstr "``NUMBER_GROUPING``"

msgid "Number of digits grouped together on the integer part of a number."
msgstr "数の整数部分をまとめるときの桁数です。"

msgid ""
"Common use is to display a thousand separator. If this setting is ``0``, "
"then no grouping will be applied to the number. If this setting is greater "
"than ``0``, then :setting:`THOUSAND_SEPARATOR` will be used as the separator "
"between those groups."
msgstr ""
"よくある使われ方は、1000倍の区切り文字を表示するときです。``0`` に設定する"
"と、数に対してグルーピングを行いません。``0`` より大きい値を指定すると、 :"
"setting:`THOUSAND_SEPARATOR` が区切り位置を求めるのに使います。"

msgid ""
"Some locales use non-uniform digit grouping, e.g. ``10,00,00,000`` in "
"``en_IN``. For this case, you can provide a sequence with the number of "
"digit group sizes to be applied. The first number defines the size of the "
"group preceding the decimal delimiter, and each number that follows defines "
"the size of preceding groups. If the sequence is terminated with ``-1``, no "
"further grouping is performed. If the sequence terminates with a ``0``, the "
"last group size is used for the remainder of the number."
msgstr ""
"一部の地域では、数字の桁区切りが一様でないことがあります。たとえば、"
"``en_IN`` では ``10,00,00,000`` のようになります。この場合、適用するべき桁グ"
"ループの数を示すシーケンスを提供できます。最初の数値は小数点区切り記号の前の"
"グループのサイズを定義し、それに続く各数値は前のグループのサイズを定義しま"
"す。シーケンスが ``-1`` で終了すると、さらなるグループ分けは行われません。"
"シーケンスが ``0`` で終了すると、最後のグループのサイズが残りの数値に適用され"
"ます。"

msgid "Example tuple for ``en_IN``::"
msgstr "``en_IN`` のための例のタプル:"

msgid ""
"See also :setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR` and :"
"setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""
":setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR`, :setting:"
"`USE_THOUSAND_SEPARATOR` も参照してください。"

msgid "``PREPEND_WWW``"
msgstr "``PREPEND_WWW``"

msgid ""
"Whether to prepend the \"www.\" subdomain to URLs that don't have it. This "
"is only used if :class:`~django.middleware.common.CommonMiddleware` is "
"installed (see :doc:`/topics/http/middleware`). See also :setting:"
"`APPEND_SLASH`."
msgstr ""
"\"www.\" サブドメインが URL に含まれていない時、自動的に頭に追加するかどうか"
"を指定します。この設定が有効になるのは、 :class:`~django.middleware.common."
"CommonMiddleware` がインストールされている時のみです (参照: :doc:`/topics/"
"http/middleware`)。:setting:`APPEND_SLASH` も参照してください。"

msgid "``ROOT_URLCONF``"
msgstr "``ROOT_URLCONF``"

msgid ""
"A string representing the full Python import path to your root URLconf, for "
"example ``\"mydjangoapps.urls\"``. Can be overridden on a per-request basis "
"by setting the attribute ``urlconf`` on the incoming ``HttpRequest`` object. "
"See :ref:`how-django-processes-a-request` for details."
msgstr ""
"あなたのルートURLconfへの完全なPythonインポートパスを表す文字列です。例えば "
"``\"mydjangoapps.urls\"`` のようになります。受け取る ``HttpRequest`` オブジェ"
"クトの ``urlconf`` 属性を設定することで、リクエストごとにオーバーライドできま"
"す。詳細については :ref:`how-django-processes-a-request` を参照してください。"

msgid "``SECRET_KEY``"
msgstr "``SECRET_KEY``"

msgid ""
"A secret key for a particular Django installation. This is used to provide :"
"doc:`cryptographic signing </topics/signing>`, and should be set to a "
"unique, unpredictable value."
msgstr ""
"Django のインストールごとに設定される個別の秘密鍵です。:doc:`暗号署名 </"
"topics/signing>` に使われる鍵であり、ユニークかつ予測できない値でなければなり"
"ません。"

msgid ""
":djadmin:`django-admin startproject <startproject>` automatically adds a "
"randomly-generated ``SECRET_KEY`` to each new project."
msgstr ""
":djadmin:`django-admin startproject <startproject>` コマンドを実行すると、新"
"しいプロジェクトを作成するたびに、ランダムに生成された ``SECRET_KEY`` を自動"
"的に設定してくれます。"

msgid ""
"Uses of the key shouldn't assume that it's text or bytes. Every use should "
"go through :func:`~django.utils.encoding.force_str` or :func:`~django.utils."
"encoding.force_bytes` to convert it to the desired type."
msgstr ""
"キーを使用する際、テキストまたはバイトであるとは仮定すべきではありません。使"
"用する際は必ず、それを目的の型に変換するために、 :func:`~django.utils."
"encoding.force_str` または :func:`~django.utils.encoding.force_bytes` を通し"
"て行う必要があります。"

msgid "Django will refuse to start if :setting:`SECRET_KEY` is not set."
msgstr ":setting:`SECRET_KEY` が設定されていない場合、Django は起動しません。"

msgid "**Keep this value secret.**"
msgstr "**この値は、絶対に秘密にしてください。**"

msgid ""
"Running Django with a known :setting:`SECRET_KEY` defeats many of Django's "
"security protections, and can lead to privilege escalation and remote code "
"execution vulnerabilities."
msgstr ""
"Django を既知の :setting:`SECRET_KEY` で実行してしまうと、Django の多数のセ"
"キュリティプロテクションが破られ、結果的に、コンピュータの重要な権限が取得さ"
"れてリモートコード実行の脆弱性に晒されてしまいます。"

msgid "The secret key is used for:"
msgstr "秘密鍵は次のような場合に使われます。"

msgid ""
"All :doc:`sessions </topics/http/sessions>` if you are using any other "
"session backend than ``django.contrib.sessions.backends.cache``, or are "
"using the default :meth:`~django.contrib.auth.models.AbstractBaseUser."
"get_session_auth_hash()`."
msgstr ""
"``django.contrib.sessions.backends.cache`` 以外のセッションバックエンドを使用"
"しているか、デフォルトの :meth:`~django.contrib.auth.models.AbstractBaseUser."
"get_session_auth_hash()` を使用している場合は、すべての :doc:`sessions </"
"topics/http/sessions>` 。"

msgid ""
"All :doc:`messages </ref/contrib/messages>` if you are using :class:`~django."
"contrib.messages.storage.cookie.CookieStorage` or :class:`~django.contrib."
"messages.storage.fallback.FallbackStorage`."
msgstr ""
":class:`~django.contrib.messages.storage.cookie.CookieStorage` または :class:"
"`~django.contrib.messages.storage.fallback.FallbackStorage` を使用している場"
"合、すべての :doc:`messages </ref/contrib/messages>` 。"

msgid "All :class:`~django.contrib.auth.views.PasswordResetView` tokens."
msgstr ""
"すべての :class:`~django.contrib.auth.views.PasswordResetView` トークン。"

msgid ""
"Any usage of :doc:`cryptographic signing </topics/signing>`, unless a "
"different key is provided."
msgstr ""
"異なるキーが指定されていない限り、すべての :doc:`暗号署名 </topics/signing>` "
"の使用。"

msgid ""
"When a secret key is no longer set as :setting:`SECRET_KEY` or contained "
"within :setting:`SECRET_KEY_FALLBACKS` all of the above will be invalidated. "
"When rotating your secret key, you should move the old key to :setting:"
"`SECRET_KEY_FALLBACKS` temporarily. Secret keys are not used for passwords "
"of users and key rotation will not affect them."
msgstr ""
":setting:`SECRET_KEY` で設定されていない、または :setting:"
"`SECRET_KEY_FALLBACKS` に含まれていない秘密鍵は、上記のすべてが無効になりま"
"す。秘密鍵をローテーションさせるときは、古い鍵を一時的に :setting:"
"`SECRET_KEY_FALLBACKS` に移動するべきです。秘密鍵は、ユーザーのパスワードには"
"使用されず、鍵のローテーションがそれらに影響を与えることはありません。"

msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` creates a unique ``SECRET_KEY`` for convenience."
msgstr ""
":djadmin:`django-admin startproject <startproject>` で作成されるデフォルト"
"の :file:`settings.py` ファイルは、利便性のため、ユニークな ``SECRET_KEY`` を"
"生成します。"

msgid "``SECRET_KEY_FALLBACKS``"
msgstr "``SECRET_KEY_FALLBACKS``"

msgid "Default: ``[]``"
msgstr "デフォルト値: ``[]``"

msgid ""
"A list of fallback secret keys for a particular Django installation. These "
"are used to allow rotation of the ``SECRET_KEY``."
msgstr ""
"特定のDjangoインストールに関連するフォールバックの秘密鍵のリストです。これら"
"は、 ``SECRET_KEY`` のローテーションを可能にするために使用されます。"

msgid ""
"In order to rotate your secret keys, set a new ``SECRET_KEY`` and move the "
"previous value to the beginning of ``SECRET_KEY_FALLBACKS``. Then remove the "
"old values from the end of the ``SECRET_KEY_FALLBACKS`` when you are ready "
"to expire the sessions, password reset tokens, and so on, that make use of "
"them."
msgstr ""
"秘密鍵をローテーションするために、新しい ``SECRET_KEY`` を設定し、以前の値を "
"``SECRET_KEY_FALLBACKS`` の最初に移動してください。その後、それらを使用する"
"セッション、パスワードリセットトークンなどを期限切れにする準備ができたら、"
"``SECRET_KEY_FALLBACKS`` の最後から古い値を削除してください。"

msgid ""
"Signing operations are computationally expensive. Having multiple old key "
"values in ``SECRET_KEY_FALLBACKS`` adds additional overhead to all checks "
"that don't match an earlier key."
msgstr ""
"署名操作は計算コストが高いものです。 ``SECRET_KEY_FALLBACKS`` に複数の古い"
"キー値を持つことは、以前のキーと一致しないすべてのチェックに追加のオーバー"
"ヘッドをもたらします。"

msgid ""
"As such, fallback values should be removed after an appropriate period, "
"allowing for key rotation."
msgstr ""
"そのため、適切な期間が経過した後には、フォールバック値を削除し、キーローテー"
"ションを行うべきです。"

msgid ""
"Uses of the secret key values shouldn't assume that they are text or bytes. "
"Every use should go through :func:`~django.utils.encoding.force_str` or :"
"func:`~django.utils.encoding.force_bytes` to convert it to the desired type."
msgstr ""
"秘密キーの値の使用時は、それらがテキストまたはバイトであると仮定すべきではあ"
"りません。使用する際には、希望のタイプに変換するために :func:`~django.utils."
"encoding.force_str` または :func:`~django.utils.encoding.force_bytes` を通じ"
"て行うべきです。"

msgid "``SECURE_CONTENT_TYPE_NOSNIFF``"
msgstr "``SECURE_CONTENT_TYPE_NOSNIFF``"

msgid ""
"If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` "
"sets the :ref:`x-content-type-options` header on all responses that do not "
"already have it."
msgstr ""
"``True`` であれば、 :class:`~django.middleware.security.SecurityMiddleware` "
"は、既にそれを持っていないすべてのレスポンスに :ref:`x-content-type-options` "
"ヘッダーを設定します。"

msgid "``SECURE_CROSS_ORIGIN_OPENER_POLICY``"
msgstr "``SECURE_CROSS_ORIGIN_OPENER_POLICY``"

msgid "Default: ``'same-origin'``"
msgstr "デフォルト値: ``'same-origin'``"

msgid ""
"Unless set to ``None``, the :class:`~django.middleware.security."
"SecurityMiddleware` sets the :ref:`cross-origin-opener-policy` header on all "
"responses that do not already have it to the value provided."
msgstr ""
"``None`` に設定されていない限り、 :class:`~django.middleware.security."
"SecurityMiddleware` はそれが既に設定されていないすべてのレスポンスに、提供さ"
"れた値を使用して :ref:`cross-origin-opener-policy` ヘッダを設定します。"

msgid "``SECURE_HSTS_INCLUDE_SUBDOMAINS``"
msgstr "``SECURE_HSTS_INCLUDE_SUBDOMAINS``"

msgid ""
"If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` "
"adds the ``includeSubDomains`` directive to the :ref:`http-strict-transport-"
"security` header. It has no effect unless :setting:`SECURE_HSTS_SECONDS` is "
"set to a non-zero value."
msgstr ""
"``True`` の場合、 :class:`~django.middleware.security.SecurityMiddleware` "
"は :ref:`http-strict-transport-security` ヘッダーに ``includeSubDomains`` "
"ディレクティブを追加します。 :setting:`SECURE_HSTS_SECONDS` が 0 でない値に設"
"定されていない限り、効果はありません。"

msgid ""
"Setting this incorrectly can irreversibly (for the value of :setting:"
"`SECURE_HSTS_SECONDS`) break your site. Read the :ref:`http-strict-transport-"
"security` documentation first."
msgstr ""
"これを誤って設定すると、 :setting:`SECURE_HSTS_SECONDS` の値に対して不可逆的"
"にサイトを壊すことがあります。まず :ref:`http-strict-transport-security` のド"
"キュメントを読んでください。"

msgid "``SECURE_HSTS_PRELOAD``"
msgstr "``SECURE_HSTS_PRELOAD``"

msgid ""
"If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` "
"adds the ``preload`` directive to the :ref:`http-strict-transport-security` "
"header. It has no effect unless :setting:`SECURE_HSTS_SECONDS` is set to a "
"non-zero value."
msgstr ""
"``True`` の場合、 :class:`~django.middleware.security.SecurityMiddleware` は "
"``preload`` 指令を :ref:`http-strict-transport-security` ヘッダーに追加しま"
"す。これは :setting:`SECURE_HSTS_SECONDS` が非ゼロの値に設定されていない限"
"り、効果がありません。"

msgid "``SECURE_HSTS_SECONDS``"
msgstr "``SECURE_HSTS_SECONDS``"

msgid ""
"If set to a non-zero integer value, the :class:`~django.middleware.security."
"SecurityMiddleware` sets the :ref:`http-strict-transport-security` header on "
"all responses that do not already have it."
msgstr ""
"ゼロでない整数値に設定されている場合、 :class:`~django.middleware.security."
"SecurityMiddleware` は、まだ設定されていないすべてのレスポンスに対して :ref:"
"`http-strict-transport-security` ヘッダを設定します。"

msgid ""
"Setting this incorrectly can irreversibly (for some time) break your site. "
"Read the :ref:`http-strict-transport-security` documentation first."
msgstr ""
"設定を誤ると、しばらくの間サイトが壊れてしまう可能性があります。まずは :ref:"
"`http-strict-transport-security` のドキュメントをお読みください。"

msgid "``SECURE_PROXY_SSL_HEADER``"
msgstr "``SECURE_PROXY_SSL_HEADER``"

msgid ""
"A tuple representing an HTTP header/value combination that signifies a "
"request is secure. This controls the behavior of the request object's "
"``is_secure()`` method."
msgstr ""
"リクエストが安全であることを示す HTTP ヘッダー/値の組み合わせを表すタプル。こ"
"れはリクエストオブジェクトの ``is_secure()`` メソッドの動作を制御します。"

msgid ""
"By default, ``is_secure()`` determines if a request is secure by confirming "
"that a requested URL uses ``https://``. This method is important for "
"Django's CSRF protection, and it may be used by your own code or third-party "
"apps."
msgstr ""
"デフォルトでは、``is_secure()`` はリクエストがセキュアかどうかを確認するため"
"にリクエストされたURLが ``https://`` を使用しているかどうかを判定します。この"
"メソッドはDjangoのCSRF保護に重要であり、あなた自身のコードやサードパーティの"
"アプリでも使用されるかもしれません。"

msgid ""
"If your Django app is behind a proxy, though, the proxy may be "
"\"swallowing\" whether the original request uses HTTPS or not. If there is a "
"non-HTTPS connection between the proxy and Django then ``is_secure()`` would "
"always return ``False`` -- even for requests that were made via HTTPS by the "
"end user. In contrast, if there is an HTTPS connection between the proxy and "
"Django then ``is_secure()`` would always return ``True`` -- even for "
"requests that were made originally via HTTP."
msgstr ""
"もし Django アプリがプロキシの背後にある場合、プロキシが元のリクエストが "
"HTTPS を使用しているかどうかを「隠して」しまうことがあります。プロキシと "
"Django の間に非 HTTPS 接続がある場合、``is_secure()`` は常に ``False`` を返し"
"ます。これはエンドユーザーが HTTPS 経由で行ったリクエストであってもです。対照"
"的に、プロキシと Django の間に HTTPS 接続がある場合、``is_secure()`` は常に "
"``True`` を返します。これは元々 HTTP 経由で行われたリクエストであってもです。"

msgid ""
"In this situation, configure your proxy to set a custom HTTP header that "
"tells Django whether the request came in via HTTPS, and set "
"``SECURE_PROXY_SSL_HEADER`` so that Django knows what header to look for."
msgstr ""
"この状況では、プロキシを設定してカスタムHTTPヘッダーを設定し、リクエストが"
"HTTPS経由で来たかどうかをDjangoに伝え、そして ``SECURE_PROXY_SSL_HEADER`` を"
"設定してDjangoがどのヘッダーを探すべきかを知らせます。"

msgid ""
"Set a tuple with two elements -- the name of the header to look for and the "
"required value. For example::"
msgstr ""
"2つの要素を持つタプルを設定します。検索するヘッダーの名前と必要な値です。例え"
"ば:"

msgid ""
"This tells Django to trust the ``X-Forwarded-Proto`` header that comes from "
"our proxy and that the request is guaranteed to be secure (i.e., it "
"originally came in via HTTPS) when:"
msgstr ""
"これは、次のような場合に、プロキシから来る ``X-Forwarded-Proto`` ヘッダーを "
"Django が信頼し、リクエストが安全であること（つまり、元々は HTTPS を介して"
"入ってきた）を保証するように指示します:"

msgid "the header value is ``'https'``, or"
msgstr "ヘッダーの値が ``'https'`` であるか、または"

msgid ""
"its initial, leftmost value is ``'https'`` in the case of a comma-separated "
"list of protocols (e.g. ``'https,http,http'``)."
msgstr ""
"その初期値、プロトコルのカンマ区切りリスト (例: ``'https,http,http'``) の最も"
"左の値が ``'https'`` の場合。"

msgid ""
"You should *only* set this setting if you control your proxy or have some "
"other guarantee that it sets/strips this header appropriately."
msgstr ""
"この設定は、プロキシを制御している場合、またはこのヘッダーを適切に設定/削除す"
"るという他の保証がある場合にのみ設定すべきです。"

msgid ""
"Note that the header needs to be in the format as used by ``request.META`` "
"-- all caps and likely starting with ``HTTP_``. (Remember, Django "
"automatically adds ``'HTTP_'`` to the start of x-header names before making "
"the header available in ``request.META``.)"
msgstr ""
"ヘッダーは ``request.META`` で使われる形式にする必要があります。すべて大文字"
"で、おそらく ``HTTP_`` で始まります。(Django は、ヘッダー名の先頭に "
"``'HTTP_'`` を自動的に追加してから、ヘッダーを ``request.META`` で利用可能に"
"します。)"

msgid ""
"**Modifying this setting can compromise your site's security. Ensure you "
"fully understand your setup before changing it.**"
msgstr ""
"**この設定を変更すると、サイトのセキュリティが損なわれる可能性があります。変"
"更する前に、設定を完全に理解してください。**"

msgid ""
"Make sure ALL of the following are true before setting this (assuming the "
"values from the example above):"
msgstr ""
"次のすべてが真であることを設定する前に確認してください（上記の例からの値を想"
"定しています）:"

msgid "Your Django app is behind a proxy."
msgstr "あなたの Django アプリがプロキシの背後にあること。"

msgid ""
"Your proxy strips the ``X-Forwarded-Proto`` header from all incoming "
"requests, even when it contains a comma-separated list of protocols. In "
"other words, if end users include that header in their requests, the proxy "
"will discard it."
msgstr ""
"プロキシは、カンマ区切りのプロトコルリストが含まれている場合でも、すべての受"
"信リクエストから ``X-Forwarded-Proto`` ヘッダーを削除すること。言い換えると、"
"エンドユーザーがそのヘッダーをリクエストに含めた場合、プロキシはそれを破棄す"
"ること。"

msgid ""
"Your proxy sets the ``X-Forwarded-Proto`` header and sends it to Django, but "
"only for requests that originally come in via HTTPS."
msgstr ""
"プロキシは ``X-Forwarded-Proto`` ヘッダを設定して Django に送ること、これは "
"HTTPS 経由で元々来たリクエストに対してのみです。"

msgid ""
"If any of those are not true, you should keep this setting set to ``None`` "
"and find another way of determining HTTPS, perhaps via custom middleware."
msgstr ""
"これらのいずれかが真でない場合は、この設定を ``None`` に設定したままにして、"
"カスタムミドルウェアを介して HTTPS を決定する別の方法を見つけるべきです。"

msgid "``SECURE_REDIRECT_EXEMPT``"
msgstr "``SECURE_REDIRECT_EXEMPT``"

msgid ""
"If a URL path matches a regular expression in this list, the request will "
"not be redirected to HTTPS. The :class:`~django.middleware.security."
"SecurityMiddleware` strips leading slashes from URL paths, so patterns "
"shouldn't include them, e.g. ``SECURE_REDIRECT_EXEMPT = [r'^no-ssl/$', …]``. "
"If :setting:`SECURE_SSL_REDIRECT` is ``False``, this setting has no effect."
msgstr ""
"このリスト内の正規表現にURLパスが一致する場合、リクエストはHTTPSへリダイレク"
"トされません。 :class:`~django.middleware.security.SecurityMiddleware` はURL"
"パスから先頭のスラッシュを削除するため、パターンにはそれを含めるべきではあり"
"ません。例: ``SECURE_REDIRECT_EXEMPT = [r'^no-ssl/$', …]`` 。:setting:"
"`SECURE_SSL_REDIRECT` が ``False`` の場合、この設定は効果がありません。"

msgid "``SECURE_REFERRER_POLICY``"
msgstr "``SECURE_REFERRER_POLICY``"

msgid ""
"If configured, the :class:`~django.middleware.security.SecurityMiddleware` "
"sets the :ref:`referrer-policy` header on all responses that do not already "
"have it to the value provided."
msgstr ""
"設定されていれば、 :class:`~django.middleware.security.SecurityMiddleware` "
"は、それがまだ設定されていないすべてのレスポンスに対して、提供された値に従っ"
"て :ref:`referrer-policy` ヘッダーを設定します。"

msgid "``SECURE_SSL_HOST``"
msgstr "``SECURE_SSL_HOST``"

msgid ""
"If a string (e.g. ``secure.example.com``), all SSL redirects will be "
"directed to this host rather than the originally-requested host (e.g. ``www."
"example.com``). If :setting:`SECURE_SSL_REDIRECT` is ``False``, this setting "
"has no effect."
msgstr ""
"文字列 (例: ``secure.example.com``) を設定すると、すべてのSSLリダイレクトが"
"元々リクエストされたホスト (例: ``www.example.com``) の代わりにこのホストに向"
"けられます。 :setting:`SECURE_SSL_REDIRECT` が ``False`` の場合、この設定は無"
"効です。"

msgid "``SECURE_SSL_REDIRECT``"
msgstr "``SECURE_SSL_REDIRECT``"

msgid ""
"If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` :"
"ref:`redirects <ssl-redirect>` all non-HTTPS requests to HTTPS (except for "
"those URLs matching a regular expression listed in :setting:"
"`SECURE_REDIRECT_EXEMPT`)."
msgstr ""
"もし ``True`` なら、 :class:`~django.middleware.security.SecurityMiddleware` "
"は、全てのHTTPSではないリクエストをHTTPSに :ref:`リダイレクト <ssl-"
"redirect>` します (:setting:`SECURE_REDIRECT_EXEMPT` でリストされた正規表現に"
"一致するURLを除く)。"

msgid ""
"If turning this to ``True`` causes infinite redirects, it probably means "
"your site is running behind a proxy and can't tell which requests are secure "
"and which are not. Your proxy likely sets a header to indicate secure "
"requests; you can correct the problem by finding out what that header is and "
"configuring the :setting:`SECURE_PROXY_SSL_HEADER` setting accordingly."
msgstr ""
"``True`` に変更するとリダイレクトが無限に発生する場合、おそらくサイトがプロキ"
"シの後ろで実行されており、どのリクエストがセキュアかを判断できていないことを"
"意味しています。おそらくプロキシはセキュアなリクエストを示すヘッダを設定して"
"います。この問題を修正するには、そのヘッダが何かを調べ、 :setting:"
"`SECURE_PROXY_SSL_HEADER` 設定を適切に設定してください。"

msgid "``SERIALIZATION_MODULES``"
msgstr "``SERIALIZATION_MODULES``"

msgid ""
"A dictionary of modules containing serializer definitions (provided as "
"strings), keyed by a string identifier for that serialization type. For "
"example, to define a YAML serializer, use::"
msgstr ""
"シリアライゼーションタイプに対する文字列識別子をキーとし、シリアライザ定義 "
"(文字列として提供される) を含むモジュールのディクショナリです。例えば、YAML "
"シリアライザを定義するには、以下を使用します。"

msgid "``SERVER_EMAIL``"
msgstr "``SERVER_EMAIL``"

msgid "Default: ``'root@localhost'``"
msgstr "デフォルト値: ``'root@localhost'``"

msgid ""
"The email address that error messages come from, such as those sent to :"
"setting:`ADMINS` and :setting:`MANAGERS`. This address is used in the ``From:"
"`` header and can take any format valid in the chosen email sending protocol."
msgstr ""
"エラーメッセージが送信されるメールアドレスは、 :setting:`ADMINS` や :setting:"
"`MANAGERS` に送信されるメールの送信元となるアドレスです。このアドレスは、選択"
"したメール送信プロトコルで有効な任意の形式を取ることができます。"

msgid "Why are my emails sent from a different address?"
msgstr "私のメールが異なるアドレスから送信されるのはなぜですか？"

msgid ""
"This address is used only for error messages. It is *not* the address that "
"regular email messages sent with :meth:`~django.core.mail.send_mail()` come "
"from; for that, see :setting:`DEFAULT_FROM_EMAIL`."
msgstr ""
"このアドレスはエラーメッセージ専用です。普通のメールメッセージが :meth:"
"`~django.core.mail.send_mail()` で送信される際のアドレスとは *異なります* 。"
"そのためには、 :setting:`DEFAULT_FROM_EMAIL` を参照してください。"

msgid "``SHORT_DATE_FORMAT``"
msgstr "``SHORT_DATE_FORMAT``"

msgid "Default: ``'m/d/Y'`` (e.g. ``12/31/2003``)"
msgstr "デフォルト値: ``'m/d/Y'`` (例: ``12/31/2003``)"

msgid ""
"An available formatting that can be used for displaying date fields on "
"templates. Note that the corresponding locale-dictated format has higher "
"precedence and will be applied instead. See :tfilter:`allowed date format "
"strings <date>`."
msgstr ""
"テンプレートで日付フィールドを表示するために利用できるフォーマットです。但"
"し、対応するロケールによって指定されたフォーマットが優先され、代わりに適用さ"
"れます。詳細は、 :tfilter:`使用可能な日付フォーマット文字列 <date>` を参照し"
"てください。"

msgid "See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATETIME_FORMAT`."
msgstr "関連項目: :setting:`DATE_FORMAT`, :setting:`SHORT_DATETIME_FORMAT`"

msgid "``SHORT_DATETIME_FORMAT``"
msgstr "``SHORT_DATETIME_FORMAT``"

msgid "Default: ``'m/d/Y P'`` (e.g. ``12/31/2003 4 p.m.``)"
msgstr "デフォルト値: ``'m/d/Y P'`` (例: ``12/31/2003 4 p.m.``)"

msgid ""
"An available formatting that can be used for displaying datetime fields on "
"templates. Note that the corresponding locale-dictated format has higher "
"precedence and will be applied instead. See :tfilter:`allowed date format "
"strings <date>`."
msgstr ""
"テンプレートで日時フィールドを表示するために使用できる利用可能なフォーマット"
"です。対応するロケールに従ったフォーマットが優先され、代わりに適用されます。"
"詳細は、 :tfilter:`利用可能な文字列フォーマット <date>` をご覧ください。"

msgid "See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATE_FORMAT`."
msgstr "関連項目: :setting:`DATE_FORMAT`, :setting:`SHORT_DATE_FORMAT`"

msgid "``SIGNING_BACKEND``"
msgstr "``SIGNING_BACKEND``"

msgid "Default: ``'django.core.signing.TimestampSigner'``"
msgstr "デフォルト値: ``'django.core.signing.TimestampSigner'``"

msgid "The backend used for signing cookies and other data."
msgstr "クッキーやその他のデータに署名する際に使用されるバックエンド。"

msgid "See also the :doc:`/topics/signing` documentation."
msgstr "関連項目: :doc:`/topics/signing` ドキュメント"

msgid "``SILENCED_SYSTEM_CHECKS``"
msgstr "``SILENCED_SYSTEM_CHECKS``"

msgid ""
"A list of identifiers of messages generated by the system check framework (i."
"e. ``[\"models.W001\"]``) that you wish to permanently acknowledge and "
"ignore. Silenced checks will not be output to the console."
msgstr ""
"システムチェックフレームワークによって生成されたメッセージの識別子リスト "
"(例: ``[\"models.W001\"]``) で、永久に認識し、無視したいものです。無視された"
"チェックはコンソールに出力されません。"

msgid "See also the :doc:`/ref/checks` documentation."
msgstr "関連項目: :doc:`/ref/checks` ドキュメント"

msgid "``STORAGES``"
msgstr "``STORAGES``"

msgid ""
"A dictionary containing the settings for all storages to be used with "
"Django. It is a nested dictionary whose contents map a storage alias to a "
"dictionary containing the options for an individual storage."
msgstr ""
"Djangoで使用されるすべてのストレージの設定を含む辞書です。 ストレージエイリア"
"スを個々のストレージのオプションを含む辞書にマッピングした入れ子構造の辞書で"
"す。"

msgid ""
"Storages can have any alias you choose. However, there are two aliases with "
"special significance:"
msgstr ""
"ストレージには任意のエイリアスを指定できます。ただし、特別な意味を持つ2つのエ"
"イリアスがあります。"

msgid ""
"``default`` for :doc:`managing files </topics/files>`. ``'``:class:`django."
"core.files.storage.FileSystemStorage`\\ ``'`` is the default storage engine."
msgstr ""
"``default`` は :doc:`ファイルを管理する </topics/files>` ためのものです。 "
"``'``:class:`django.core.files.storage.FileSystemStorage`\\ ``'`` がデフォル"
"トのストレージエンジンです。"

msgid ""
"``staticfiles`` for :doc:`managing static files </ref/contrib/staticfiles>`. "
"``'``:class:`django.contrib.staticfiles.storage.StaticFilesStorage`\\ ``'`` "
"is the default storage engine."
msgstr ""
"``staticfiles`` は :doc:`静的ファイルの管理 </ref/contrib/staticfiles>` 用で"
"す。 ``'``:class:`django.contrib.staticfiles.storage.StaticFilesStorage`\\ "
"``'`` がデフォルトのストレージエンジンです。"

msgid ""
"The following is an example ``settings.py`` snippet defining a custom file "
"storage called ``example``::"
msgstr ""
"以下は、カスタムファイルストレージ ``example`` を定義する ``settings.py`` の"
"コードの例です。"

msgid ""
"``OPTIONS`` are passed to the ``BACKEND`` on initialization in ``**kwargs``."
msgstr ""
"``**kwargs`` を使って、 ``BACKEND`` の初期化時に ``OPTIONS`` が渡されます。"

msgid ""
"A ready-to-use instance of the storage backends can be retrieved from :data:"
"`django.core.files.storage.storages`. Use a key corresponding to the backend "
"definition in :setting:`STORAGES`."
msgstr ""
"使用可能なストレージバックエンドのインスタンスは、 :data:`django.core.files."
"storage.storages` から取得できます。 :setting:`STORAGES` でのバックエンド定義"
"に対応するキーを使用してください。"

msgid "Is my value merged with the default value?"
msgstr "私の値はデフォルト値とマージされますか？"

msgid ""
"Defining this setting overrides the default value and is *not* merged with "
"it."
msgstr ""
"この設定を定義すると、デフォルト値を上書きし、それとは *結合されません* 。"

msgid "``TEMPLATES``"
msgstr "``TEMPLATES``"

msgid ""
"A list containing the settings for all template engines to be used with "
"Django. Each item of the list is a dictionary containing the options for an "
"individual engine."
msgstr ""
"Django で使用されるすべてのテンプレートエンジンの設定を含むリストです。リスト"
"の各項目は、個々のエンジンのオプションを含む辞書です。"

msgid ""
"Here's a setup that tells the Django template engine to load templates from "
"the ``templates`` subdirectory inside each installed application::"
msgstr ""
"以下の設定では、Django テンプレートエンジンに対し、インストールされた各アプリ"
"ケーション内の ``templates`` サブディレクトリからテンプレートを読み込むよう指"
"示します:"

msgid "The following options are available for all backends."
msgstr "すべてのバックエンドで利用可能なオプションは以下の通りです:"

msgid "The template backend to use. The built-in template backends are:"
msgstr ""
"使用するテンプレートバックエンドです。内蔵のテンプレートバックエンドは以下の"
"通りです:"

msgid "``'django.template.backends.django.DjangoTemplates'``"
msgstr "``'django.template.backends.django.DjangoTemplates'``"

msgid "``'django.template.backends.jinja2.Jinja2'``"
msgstr "``'django.template.backends.jinja2.Jinja2'``"

msgid ""
"You can use a template backend that doesn't ship with Django by setting "
"``BACKEND`` to a fully-qualified path (i.e. ``'mypackage.whatever."
"Backend'``)."
msgstr ""
"Django に付属していないテンプレートバックエンドを使用するには、``BACKEND`` を"
"完全修飾パス (例： ``'mypackage.whatever.Backend'``) で設定します。"

msgid "Default: see below"
msgstr "デフォルト値: 下記を参照してください"

msgid ""
"The alias for this particular template engine. It's an identifier that "
"allows selecting an engine for rendering. Aliases must be unique across all "
"configured template engines."
msgstr ""
"この特定のテンプレートエンジンのエイリアス。エンジンを選択するための識別子で"
"す。エイリアスは、構成されたすべてのテンプレートエンジンで一意である必要があ"
"ります。"

msgid ""
"It defaults to the name of the module defining the engine class, i.e. the "
"next to last piece of :setting:`BACKEND <TEMPLATES-BACKEND>`, when it isn't "
"provided. For example if the backend is ``'mypackage.whatever.Backend'`` "
"then its default name is ``'whatever'``."
msgstr ""
"エンジンクラスを定義するモジュールの名前がデフォルト値です。つまり、指定され"
"ていない場合 :setting:`BACKEND <TEMPLATES-BACKEND>` の最後から2番目の要素にな"
"ります。例えば、バックエンドが ``'mypackage.whatever.Backend'`` であれば、そ"
"のデフォルト名は ``'whatever'`` になります。"

msgid "``DIRS``"
msgstr "``DIRS``"

msgid ""
"Directories where the engine should look for template source files, in "
"search order."
msgstr ""
"エンジンがテンプレートのソースファイルを探すべきディレクトリ、検索順序付き。"

msgid "``APP_DIRS``"
msgstr "``APP_DIRS``"

msgid ""
"Whether the engine should look for template source files inside installed "
"applications."
msgstr ""
"エンジンがインストールされたアプリケーション内でテンプレートのソースファイル"
"を探すべきかどうか。"

msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` sets ``'APP_DIRS': True``."
msgstr ""
":djadmin:`django-admin startproject <startproject>` によって生成されるデフォ"
"ルトの :file:`settings.py` ファイルは ``'APP_DIRS': True`` を設定します。"

msgid "Default: ``{}`` (Empty dict)"
msgstr "デフォルト値: ``{}`` (空のディクショナリ)"

msgid ""
"Extra parameters to pass to the template backend. Available parameters vary "
"depending on the template backend. See :class:`~django.template.backends."
"django.DjangoTemplates` and :class:`~django.template.backends.jinja2.Jinja2` "
"for the options of the built-in backends."
msgstr ""
"テンプレートバックエンドに渡す追加のパラメーターです。 利用可能なパラメーター"
"は、テンプレートバックエンドによって異なります。 組み込みバックエンドのオプ"
"ションについては、 :class:`~django.template.backends.django.DjangoTemplates` "
"と :class:`~django.template.backends.jinja2.Jinja2` を参照してください。"

msgid "``TEST_RUNNER``"
msgstr "``TEST_RUNNER``"

msgid "Default: ``'django.test.runner.DiscoverRunner'``"
msgstr "デフォルト値: ``'django.test.runner.DiscoverRunner'``"

msgid ""
"The name of the class to use for starting the test suite. See :ref:`other-"
"testing-frameworks`."
msgstr ""
"テストスイートを開始するために使用するクラスの名前。 :ref:`other-testing-"
"frameworks` を参照してください。"

msgid "``TEST_NON_SERIALIZED_APPS``"
msgstr "``TEST_NON_SERIALIZED_APPS``"

msgid ""
"In order to restore the database state between tests for "
"``TransactionTestCase``\\s and database backends without transactions, "
"Django will :ref:`serialize the contents of all apps <test-case-serialized-"
"rollback>` when it starts the test run so it can then reload from that copy "
"before running tests that need it."
msgstr ""
"``TransactionTestCase`` やトランザクションを使用しないデータベースバックエン"
"ドのテスト間でデータベースの状態を復元するために、Djangoはテスト実行が開始さ"
"れると :ref:`すべてのアプリの内容をシリアライズ<test-case-serialized-"
"rollback>` し、それを必要とするテストを実行する前にそのコピーからリロードでき"
"るようにします。"

msgid ""
"This slows down the startup time of the test runner; if you have apps that "
"you know don't need this feature, you can add their full names in here (e.g. "
"``'django.contrib.contenttypes'``) to exclude them from this serialization "
"process."
msgstr ""
"これによって、テストランナーの起動時間が遅くなります。この機能が不要なアプリ"
"がある場合は、完全な名前をここに追加して、このシリアライズ処理から除外できま"
"す (例: ``'django.contrib.contenttypes'``)。"

msgid "``THOUSAND_SEPARATOR``"
msgstr "``THOUSAND_SEPARATOR``"

msgid "Default: ``','`` (Comma)"
msgstr "デフォルト値: ``','`` (カンマ)"

msgid ""
"Default thousand separator used when formatting numbers. This setting is "
"used only when :setting:`USE_THOUSAND_SEPARATOR` is ``True`` and :setting:"
"`NUMBER_GROUPING` is greater than ``0``."
msgstr ""
"数字のフォーマット時に使用するデフォルトの千の区切り記号です。この設定は、:"
"setting:`USE_THOUSAND_SEPARATOR` が ``True`` であり、:setting:"
"`NUMBER_GROUPING` が ``0`` より大きい場合にのみ使用されます。"

msgid ""
"See also :setting:`NUMBER_GROUPING`, :setting:`DECIMAL_SEPARATOR` and :"
"setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""
"関連項目: :setting:`NUMBER_GROUPING`, :setting:`DECIMAL_SEPARATOR`, :setting:"
"`USE_THOUSAND_SEPARATOR`"

msgid "``TIME_FORMAT``"
msgstr "``TIME_FORMAT``"

msgid "Default: ``'P'`` (e.g. ``4 p.m.``)"
msgstr "デフォルト値: ``'P'`` (例: ``4 p.m.``)"

msgid ""
"The default formatting to use for displaying time fields in any part of the "
"system. Note that the locale-dictated format has higher precedence and will "
"be applied instead. See :tfilter:`allowed date format strings <date>`."
msgstr ""
"システムのどの部分でも、時間フィールドを表示する際に使用するデフォルトの書式"
"設定です。ロケールに依存する書式が優先され、代わりに適用されます。 :tfilter:`"
"使用可能な日付フォーマット文字列 <date>` を参照してください。"

msgid "See also :setting:`DATE_FORMAT` and :setting:`DATETIME_FORMAT`."
msgstr "関連項目: :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`"

msgid "``TIME_INPUT_FORMATS``"
msgstr "``TIME_INPUT_FORMATS``"

msgid ""
"A list of formats that will be accepted when inputting data on a time field. "
"Formats will be tried in order, using the first valid one. Note that these "
"format strings use Python's :ref:`datetime module syntax <strftime-strptime-"
"behavior>`, not the format strings from the :tfilter:`date` template filter."
msgstr ""
"時間フィールドでデータを入力するときに受け入れられる形式のリストです。形式は"
"順番に試され、最初の有効なものが使用されます。これらの形式文字列は、 :"
"tfilter:`date` テンプレートフィルタからの形式文字列ではなく、Pythonの :ref:"
"`datetime モジュールの構文 <strftime-strptime-behavior>` を使用していることに"
"注意してください。"

msgid ""
"See also :setting:`DATE_INPUT_FORMATS` and :setting:`DATETIME_INPUT_FORMATS`."
msgstr ""
"関連項目: :setting:`DATE_INPUT_FORMATS` および :setting:"
"`DATETIME_INPUT_FORMATS` を参照してください。"

msgid "Default: ``'America/Chicago'``"
msgstr "デフォルト値: ``'America/Chicago'``"

msgid ""
"A string representing the time zone for this installation. See the `list of "
"time zones`_."
msgstr ""
"このインストールのタイムゾーンを表す文字列です。タイムゾーンの一覧は、 `list "
"of time zones`_ を参照してください。"

msgid ""
"Since Django was first released with the :setting:`TIME_ZONE` set to "
"``'America/Chicago'``, the global setting (used if nothing is defined in "
"your project's ``settings.py``) remains ``'America/Chicago'`` for backwards "
"compatibility. New project templates default to ``'UTC'``."
msgstr ""
"Django は最初 :setting:`TIME_ZONE` を ``'America/Chicago'`` にしてリリースさ"
"れていたので、後方互換性のために (プロジェクト内で ``settings.py`` が定義され"
"ていないときに使われる) グローバル設定は ``'America/Chicago'`` のままになって"
"います。新しいプロジェクトのテンプレートではデフォルトは ``'UTC'`` です。"

msgid ""
"Note that this isn't necessarily the time zone of the server. For example, "
"one server may serve multiple Django-powered sites, each with a separate "
"time zone setting."
msgstr ""
"これは必ずしもサーバのタイムゾーンではないことに注意してください。たとえば、"
"1 つのサーバ内に Django 製のサイトがあり、それぞれが異なるタイムゾーン設定を"
"持つこともできます。"

msgid ""
"When :setting:`USE_TZ` is ``False``, this is the time zone in which Django "
"will store all datetimes. When :setting:`USE_TZ` is ``True``, this is the "
"default time zone that Django will use to display datetimes in templates and "
"to interpret datetimes entered in forms."
msgstr ""
":setting:`USE_TZ` が ``False`` のとき、これは Django が日時を保持するタイム"
"ゾーンとなります。:setting:`USE_TZ` が ``True`` のとき、これは Django がテン"
"プレート内で日時を表示するため、およびフォーム内で入力された日時を解釈するた"
"めに使う、デフォルトのタイムゾーンです。"

msgid ""
"On Unix environments (where :func:`time.tzset` is implemented), Django sets "
"the ``os.environ['TZ']`` variable to the time zone you specify in the :"
"setting:`TIME_ZONE` setting. Thus, all your views and models will "
"automatically operate in this time zone. However, Django won't set the "
"``TZ`` environment variable if you're using the manual configuration option "
"as described in :ref:`manually configuring settings <settings-without-django-"
"settings-module>`. If Django doesn't set the ``TZ`` environment variable, "
"it's up to you to ensure your processes are running in the correct "
"environment."
msgstr ""
"Unix 環境 (ここで :func:`time.tzset` が実装されている場合)では、Djangoは "
"``os.environ['TZ']`` 変数を :setting:`TIME_ZONE` 設定で指定したタイムゾーンに"
"設定します。したがって、すべてのビューとモデルは自動的にこのタイムゾーンで動"
"作します。しかし、 :ref:`手動で設定を行う <settings-without-django-settings-"
"module>` で説明されているような手動設定オプションを使用している場合は、Django"
"は ``TZ`` 環境変数を設定しません。Djangoが ``TZ`` 環境変数を設定しない場合"
"は、プロセスが正しい環境で実行されていることを確認するのはあなたの責任です。"

msgid ""
"Django cannot reliably use alternate time zones in a Windows environment. If "
"you're running Django on Windows, :setting:`TIME_ZONE` must be set to match "
"the system time zone."
msgstr ""
"Django は、Windows 環境で代替タイムゾーンを正しく扱うことができません。"
"Django を Windows で実行している場合、:setting:`TIME_ZONE` はシステムのタイム"
"ゾーンに合わせてセットする必要があります。"

msgid "``USE_I18N``"
msgstr "``USE_I18N``"

msgid ""
"A boolean that specifies whether Django's translation system should be "
"enabled. This provides a way to turn it off, for performance. If this is set "
"to ``False``, Django will make some optimizations so as not to load the "
"translation machinery."
msgstr ""
"Djangoの翻訳システムを有効にするかどうかを指定する真偽値です。パフォーマンス"
"のためにオフにする方法を提供します。これが ``False`` に設定されている場合、"
"Djangoは翻訳システムを読み込まないように一部の最適化を行います。"

msgid "See also :setting:`LANGUAGE_CODE` and :setting:`USE_TZ`."
msgstr "関連項目: :setting:`LANGUAGE_CODE` および :setting:`USE_TZ`"

msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` includes ``USE_I18N = True`` for convenience."
msgstr ""
":djadmin:`django-admin startproject <startproject>` によって作成されるデフォ"
"ルトの :file:`settings.py` ファイルには、利便性のため、 ``USE_I18N = True`` "
"が含まれています。"

msgid "``USE_THOUSAND_SEPARATOR``"
msgstr "``USE_THOUSAND_SEPARATOR``"

msgid ""
"A boolean that specifies whether to display numbers using a thousand "
"separator. When set to ``True``, Django will format numbers using the :"
"setting:`NUMBER_GROUPING` and :setting:`THOUSAND_SEPARATOR` settings. The "
"latter two settings may also be dictated by the locale, which takes "
"precedence."
msgstr ""
"真偽値で、数値を 1,000 単位で表示するかどうかを指定します。 ``True`` に設定す"
"ると、Django は数値を :setting:`NUMBER_GROUPING` と :setting:"
"`THOUSAND_SEPARATOR` の設定に従ってフォーマットします。最後の 2 つの設定はロ"
"ケールによっても決定される可能性があり、そちらが優先されます。"

msgid ""
"See also :setting:`DECIMAL_SEPARATOR`, :setting:`NUMBER_GROUPING` and :"
"setting:`THOUSAND_SEPARATOR`."
msgstr ""
"関連項目: :setting:`DECIMAL_SEPARATOR`, :setting:`NUMBER_GROUPING`, :setting:"
"`THOUSAND_SEPARATOR`"

msgid "``USE_TZ``"
msgstr "``USE_TZ``"

msgid ""
"A boolean that specifies if datetimes will be timezone-aware by default or "
"not. If this is set to ``True``, Django will use timezone-aware datetimes "
"internally."
msgstr ""
"デフォルトで日時がタイムゾーンを意識するかどうかを指定する真偽値です。これが "
"``True`` に設定されている場合、Django は内部的にタイムゾーンを意識した日時を"
"使用します。"

msgid ""
"When ``USE_TZ`` is False, Django will use naive datetimes in local time, "
"except when parsing ISO 8601 formatted strings, where timezone information "
"will always be retained if present."
msgstr ""
"``USE_TZ`` が False の場合、Django はローカルタイムで naive な日時を使用しま"
"すが、ISO 8601 形式の文字列を解析するときには、タイムゾーン情報が存在すれば常"
"に保持されます。"

msgid "See also :setting:`TIME_ZONE` and :setting:`USE_I18N`."
msgstr "関連項目::setting:`TIME_ZONE` および :setting:`USE_I18N`"

msgid "In older versions, the default value is ``False``."
msgstr "古いバージョンでは、デフォルト値は ``False`` です。"

msgid "``USE_X_FORWARDED_HOST``"
msgstr "``USE_X_FORWARDED_HOST``"

msgid ""
"A boolean that specifies whether to use the ``X-Forwarded-Host`` header in "
"preference to the ``Host`` header. This should only be enabled if a proxy "
"which sets this header is in use."
msgstr ""
"``X-Forwarded-Host`` ヘッダを ``Host`` ヘッダより優先して使用するかどうかを指"
"定する真偽値です。このヘッダを設定するプロキシが使用されている場合にのみ有効"
"化すべきです。"

msgid ""
"This setting takes priority over :setting:`USE_X_FORWARDED_PORT`. Per :rfc:"
"`7239#section-5.3`, the ``X-Forwarded-Host`` header can include the port "
"number, in which case you shouldn't use :setting:`USE_X_FORWARDED_PORT`."
msgstr ""
"この設定は :setting:`USE_X_FORWARDED_PORT` よりも優先されます。:rfc:"
"`7239#section-5.3` によると、``X-Forwarded-Host`` ヘッダにはポート番号を含め"
"ることができるため、その場合は :setting:`USE_X_FORWARDED_PORT` を使用すべきで"
"はありません。"

msgid "``USE_X_FORWARDED_PORT``"
msgstr "``USE_X_FORWARDED_PORT``"

msgid ""
"A boolean that specifies whether to use the ``X-Forwarded-Port`` header in "
"preference to the ``SERVER_PORT`` ``META`` variable. This should only be "
"enabled if a proxy which sets this header is in use."
msgstr ""
"``X-Forwarded-Port`` ヘッダを ``SERVER_PORT`` ``META`` 変数より優先して使用す"
"るかどうかを指定する真偽値です。このヘッダを設定するプロキシが使用されている"
"場合のみ、これを有効にするべきです。"

msgid ":setting:`USE_X_FORWARDED_HOST` takes priority over this setting."
msgstr "この設定より :setting:`USE_X_FORWARDED_HOST` の方が優先されます。"

msgid "``WSGI_APPLICATION``"
msgstr "``WSGI_APPLICATION``"

msgid ""
"The full Python path of the WSGI application object that Django's built-in "
"servers (e.g. :djadmin:`runserver`) will use. The :djadmin:`django-admin "
"startproject <startproject>` management command will create a standard "
"``wsgi.py`` file with an ``application`` callable in it, and point this "
"setting to that ``application``."
msgstr ""
"Djangoの組み込みサーバー (例えば :djadmin:`runserver`) が使用するWSGIアプリ"
"ケーションオブジェクトの完全なPythonパスです。:djadmin:`django-admin "
"startproject <startproject>` 管理コマンドは標準の ``wsgi.py`` ファイルを作成"
"し、その中に ``application`` 呼び出し可能オブジェクトを含め、この設定をその "
"``application`` にポイントします。"

msgid ""
"If not set, the return value of ``django.core.wsgi.get_wsgi_application()`` "
"will be used. In this case, the behavior of :djadmin:`runserver` will be "
"identical to previous Django versions."
msgstr ""
"設定されていない場合は、 ``django.core.wsgi.get_wsgi_application()`` の返り値"
"が使用されます。この場合、:djadmin:`runserver` の動作は以前のDjangoバージョン"
"と同一になります。"

msgid "``YEAR_MONTH_FORMAT``"
msgstr "``YEAR_MONTH_FORMAT``"

msgid "Default: ``'F Y'``"
msgstr "デフォルト値: ``'F Y'``"

msgid ""
"The default formatting to use for date fields on Django admin change-list "
"pages -- and, possibly, by other parts of the system -- in cases when only "
"the year and month are displayed."
msgstr ""
"Django管理サイトのチェンジリストページで、年と月のみが表示される場合に、デ"
"フォルトの日付フィールドの書式設定を使用する方法。そして、システムの他の部分"
"でも同様に適用される可能性があります。"

msgid ""
"For example, when a Django admin change-list page is being filtered by a "
"date drilldown, the header for a given month displays the month and the "
"year. Different locales have different formats. For example, U.S. English "
"would say \"January 2006,\" whereas another locale might say \"2006/January."
"\""
msgstr ""
"たとえば、Djangoの管理画面のチェンジリストページが日付で絞り込まれている場"
"合、指定された月のヘッダーには月と年が表示されます。異なるロケールには異なる"
"形式があります。例えば、米国英語では「January 2006」と表示されますが、別のロ"
"ケールでは「2006/January」のように表示されるかもしれません。"

msgid ""
"See :tfilter:`allowed date format strings <date>`. See also :setting:"
"`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :"
"setting:`MONTH_DAY_FORMAT`."
msgstr ""
"許可される日付フォーマット文字列については、 :tfilter:`使用可能な日付フォー"
"マット文字列 <date>` を参照してください。また、 :setting:`DATE_FORMAT` 、 :"
"setting:`DATETIME_FORMAT` 、 :setting:`TIME_FORMAT` および :setting:"
"`MONTH_DAY_FORMAT` も参照してください。"

msgid "``X_FRAME_OPTIONS``"
msgstr "``X_FRAME_OPTIONS``"

msgid "Default: ``'DENY'``"
msgstr "デフォルト値: ``'DENY'``"

msgid ""
"The default value for the X-Frame-Options header used by :class:`~django."
"middleware.clickjacking.XFrameOptionsMiddleware`. See the :doc:`clickjacking "
"protection </ref/clickjacking/>` documentation."
msgstr ""
":class:`~django.middleware.clickjacking.XFrameOptionsMiddleware` によって使用"
"される X-Frame-Options ヘッダのデフォルト値については、:doc:`クリックジャッキ"
"ング保護 </ref/clickjacking/>` のドキュメントを参照してください。"

msgid "Auth"
msgstr "認証"

msgid "Settings for :mod:`django.contrib.auth`."
msgstr ":mod:`django.contrib.auth` の設定"

msgid "``AUTHENTICATION_BACKENDS``"
msgstr "``AUTHENTICATION_BACKENDS``"

msgid "Default: ``['django.contrib.auth.backends.ModelBackend']``"
msgstr "デフォルト値: ``['django.contrib.auth.backends.ModelBackend']``"

msgid ""
"A list of authentication backend classes (as strings) to use when attempting "
"to authenticate a user. See the :ref:`authentication backends documentation "
"<authentication-backends>` for details."
msgstr ""
"ユーザーを認証しようとするときに使用する認証バックエンドクラスのリスト（文字"
"列形式）。詳細については :ref:`認証バックエンドのドキュメント "
"<authentication-backends>` を参照してください。"

msgid "``AUTH_USER_MODEL``"
msgstr "``AUTH_USER_MODEL``"

msgid "Default: ``'auth.User'``"
msgstr "デフォルト値: ``'auth.User'``"

msgid "The model to use to represent a User. See :ref:`auth-custom-user`."
msgstr ""
"User を表すために使うモデルです。:ref:`auth-custom-user` を参照してください。"

msgid ""
"You cannot change the AUTH_USER_MODEL setting during the lifetime of a "
"project (i.e. once you have made and migrated models that depend on it) "
"without serious effort. It is intended to be set at the project start, and "
"the model it refers to must be available in the first migration of the app "
"that it lives in. See :ref:`auth-custom-user` for more details."
msgstr ""
"プロジェクトのライフサイクル中 (つまり、それに依存するモデルを作成しマイグ"
"レーションした後 )に AUTH_USER_MODEL 設定を変更することは困難です。プロジェク"
"ト開始時に設定し、参照するモデルは、それが存在するアプリの最初のマイグレー"
"ションで利用可能である必要があります。詳細は、 :ref:`auth-custom-user` を参照"
"してください。"

msgid "``LOGIN_REDIRECT_URL``"
msgstr "``LOGIN_REDIRECT_URL``"

msgid "Default: ``'/accounts/profile/'``"
msgstr "デフォルト値: ``'/accounts/profile/'``"

msgid ""
"The URL or :ref:`named URL pattern <naming-url-patterns>` where requests are "
"redirected after login when the :class:`~django.contrib.auth.views."
"LoginView` doesn't get a ``next`` GET parameter."
msgstr ""
":class:`~django.contrib.auth.views.LoginView` が ``next`` GET パラメータを受"
"け取らないときにログイン後にリダイレクトされる URL または :ref:`名前付き URL "
"パターン <naming-url-patterns>` 。"

msgid "``LOGIN_URL``"
msgstr "``LOGIN_URL``"

msgid "Default: ``'/accounts/login/'``"
msgstr "デフォルト値: ``'/accounts/login/'``"

msgid ""
"The URL or :ref:`named URL pattern <naming-url-patterns>` where requests are "
"redirected for login when using the :func:`~django.contrib.auth.decorators."
"login_required` decorator, :class:`~django.contrib.auth.mixins."
"LoginRequiredMixin`, or :class:`~django.contrib.auth.mixins.AccessMixin`."
msgstr ""
":func:`~django.contrib.auth.decorators.login_required` デコレータ、 :class:"
"`~django.contrib.auth.mixins.LoginRequiredMixin` 、または :class:`~django."
"contrib.auth.mixins.AccessMixin` を使用してログイン時にリダイレクトされるリク"
"エストのURLまたは :ref:`名前付き URL パターン <naming-url-patterns>` 。"

msgid "``LOGOUT_REDIRECT_URL``"
msgstr "``LOGOUT_REDIRECT_URL``"

msgid ""
"The URL or :ref:`named URL pattern <naming-url-patterns>` where requests are "
"redirected after logout if :class:`~django.contrib.auth.views.LogoutView` "
"doesn't have a ``next_page`` attribute."
msgstr ""
"リクエストがログアウト後にリダイレクトされるURLまたは :ref:`名前付きURLパター"
"ン <naming-url-patterns>` で、 :class:`~django.contrib.auth.views."
"LogoutView` が ``next_page`` 属性を持っていない場合に使用されます。"

msgid ""
"If ``None``, no redirect will be performed and the logout view will be "
"rendered."
msgstr ""
"``None`` の場合、リダイレクトは行われず、ログアウトビューがレンダリングされま"
"す。"

msgid "``PASSWORD_RESET_TIMEOUT``"
msgstr "``PASSWORD_RESET_TIMEOUT``"

msgid "Default: ``259200`` (3 days, in seconds)"
msgstr "デフォルト値: ``259200`` (秒単位で、3日)"

msgid "The number of seconds a password reset link is valid for."
msgstr "パスワードリセットリンクの有効期間 (秒単位)。"

msgid ""
"Used by the :class:`~django.contrib.auth.views.PasswordResetConfirmView`."
msgstr ""
":class:`~django.contrib.auth.views.PasswordResetConfirmView` によって使用され"
"ます。"

msgid ""
"Reducing the value of this timeout doesn't make any difference to the "
"ability of an attacker to brute-force a password reset token. Tokens are "
"designed to be safe from brute-forcing without any timeout."
msgstr ""
"このタイムアウトの値を減らしても、攻撃者がパスワードリセットトークンをブルー"
"トフォース（総当たり攻撃）で解読する能力には何の違いもありません。トークン"
"は、タイムアウトなしでブルートフォースから安全であるように設計されています。"

msgid ""
"This timeout exists to protect against some unlikely attack scenarios, such "
"as someone gaining access to email archives that may contain old, unused "
"password reset tokens."
msgstr ""
"このタイムアウトは、例えば古く使われていないパスワードリセットトークンを含む"
"可能性のあるメールアーカイブに誰かがアクセスを得るなど、考えにくい攻撃シナリ"
"オに対して保護するために存在します。"

msgid "``PASSWORD_HASHERS``"
msgstr "``PASSWORD_HASHERS``"

msgid "See :ref:`auth_password_storage`."
msgstr "関連項目: :ref:`auth_password_storage`"

msgid "``AUTH_PASSWORD_VALIDATORS``"
msgstr "``AUTH_PASSWORD_VALIDATORS``"

msgid ""
"The list of validators that are used to check the strength of user's "
"passwords. See :ref:`password-validation` for more details. By default, no "
"validation is performed and all passwords are accepted."
msgstr ""
"ユーザーのパスワードの強度をチェックするために使用されるバリデータのリストで"
"す。詳細については :ref:`password-validation` を参照してください。デフォルト"
"では、バリデーションは実行されず、すべてのパスワードが受け入れられます。"

msgid "Messages"
msgstr "メッセージ"

msgid "Settings for :mod:`django.contrib.messages`."
msgstr ":mod:`django.contrib.messages` の設定。"

msgid "``MESSAGE_LEVEL``"
msgstr "``MESSAGE_LEVEL``"

msgid "Default: ``messages.INFO``"
msgstr "デフォルト値: ``messages.INFO``"

msgid ""
"Sets the minimum message level that will be recorded by the messages "
"framework. See :ref:`message levels <message-level>` for more details."
msgstr ""
"メッセージフレームワークによって記録されるメッセージレベルの最小値を設定しま"
"す。 詳細については、 :ref:`メッセージレベル <message-level>` を参照してくだ"
"さい。"

msgid "Avoiding circular imports"
msgstr "循環インポートの回避"

msgid ""
"If you override ``MESSAGE_LEVEL`` in your settings file and rely on any of "
"the built-in constants, you must import the constants module directly to "
"avoid the potential for circular imports, e.g.::"
msgstr ""
"設定ファイルで ``MESSAGE_LEVEL`` をオーバーライドし、組み込み定数に依存する場"
"合は、循環インポートの可能性を避けるために、定数モジュールを直接インポートす"
"る必要があります。例えば:"

msgid ""
"If desired, you may specify the numeric values for the constants directly "
"according to the values in the above :ref:`constants table <message-level-"
"constants>`."
msgstr ""
"必要であれば、上記の :ref:`定数表 <message-level-constants>` にある値に従っ"
"て、定数の数値を直接指定できます。"

msgid "``MESSAGE_STORAGE``"
msgstr "``MESSAGE_STORAGE``"

msgid "Default: ``'django.contrib.messages.storage.fallback.FallbackStorage'``"
msgstr ""
"デフォルト値: ``'django.contrib.messages.storage.fallback.FallbackStorage'``"

msgid "Controls where Django stores message data. Valid values are:"
msgstr ""
"Django がメッセージデータをどこに保存するかを制御します。有効な値は次の通りで"
"す:"

msgid "``'django.contrib.messages.storage.fallback.FallbackStorage'``"
msgstr "``'django.contrib.messages.storage.fallback.FallbackStorage'``"

msgid "``'django.contrib.messages.storage.session.SessionStorage'``"
msgstr "``'django.contrib.messages.storage.session.SessionStorage'``"

msgid "``'django.contrib.messages.storage.cookie.CookieStorage'``"
msgstr "``'django.contrib.messages.storage.cookie.CookieStorage'``"

msgid ""
"See :ref:`message storage backends <message-storage-backends>` for more "
"details."
msgstr ""
"詳細については、 :ref:`メッセージストレージバックエンド <message-storage-"
"backends>` を参照してください。"

msgid ""
"The backends that use cookies -- :class:`~django.contrib.messages.storage."
"cookie.CookieStorage` and :class:`~django.contrib.messages.storage.fallback."
"FallbackStorage` -- use the value of :setting:`SESSION_COOKIE_DOMAIN`, :"
"setting:`SESSION_COOKIE_SECURE` and :setting:`SESSION_COOKIE_HTTPONLY` when "
"setting their cookies."
msgstr ""
"Cookieを使用するバックエンド -- :class:`~django.contrib.messages.storage."
"cookie.CookieStorage` および :class:`~django.contrib.messages.storage."
"fallback.FallbackStorage` -- は、クッキーを設定する際に :setting:"
"`SESSION_COOKIE_DOMAIN`, :setting:`SESSION_COOKIE_SECURE`, :setting:"
"`SESSION_COOKIE_HTTPONLY` の値を使用します。"

msgid "``MESSAGE_TAGS``"
msgstr "``MESSAGE_TAGS``"

msgid ""
"This sets the mapping of message level to message tag, which is typically "
"rendered as a CSS class in HTML. If you specify a value, it will extend the "
"default. This means you only have to specify those values which you need to "
"override. See :ref:`message-displaying` above for more details."
msgstr ""
"これは、メッセージレベルとHTMLで通常CSSクラスとしてレンダリングされるメッセー"
"ジタグのマッピングを設定します。値を指定すると、デフォルトを拡張します。つま"
"り、オーバーライドする必要がある値のみを指定すればよいことを意味します。詳細"
"については、上記の :ref:`message-displaying` を参照してください。"

msgid ""
"If you override ``MESSAGE_TAGS`` in your settings file and rely on any of "
"the built-in constants, you must import the ``constants`` module directly to "
"avoid the potential for circular imports, e.g.::"
msgstr ""
"設定ファイルで ``MESSAGE_TAGS`` を上書きし、組み込み定数に依存する場合、循環"
"インポートの可能性を避けるために、 ``constants`` モジュールを直接インポートす"
"る必要があります。例えば:"

msgid "Sessions"
msgstr "セッション"

msgid "Settings for :mod:`django.contrib.sessions`."
msgstr ":mod:`django.contrib.sessions` の設定。"

msgid "``SESSION_CACHE_ALIAS``"
msgstr "``SESSION_CACHE_ALIAS``"

msgid ""
"If you're using :ref:`cache-based session storage <cached-sessions-"
"backend>`, this selects the cache to use."
msgstr ""
":ref:`キャッシュベースのセッションストレージ <cached-sessions-backend>` を使"
"用している場合、これによって使用するキャッシュが選択されます。"

msgid "``SESSION_COOKIE_AGE``"
msgstr "``SESSION_COOKIE_AGE``"

msgid "Default: ``1209600`` (2 weeks, in seconds)"
msgstr "デフォルト値: ``1209600`` (2 週間の秒表記)"

msgid "The age of session cookies, in seconds."
msgstr "セッションクッキーの寿命 (秒単位)。"

msgid "``SESSION_COOKIE_DOMAIN``"
msgstr "``SESSION_COOKIE_DOMAIN``"

msgid ""
"The domain to use for session cookies. Set this to a string such as "
"``\"example.com\"`` for cross-domain cookies, or use ``None`` for a standard "
"domain cookie."
msgstr ""
"セッションクッキーに使用するドメインです。クロスドメインクッキーの場合は "
"``\"example.com\"`` のような文字列に設定するか、標準ドメインクッキーには "
"``None`` を使用してください。"

msgid ""
"To use cross-domain cookies with :setting:`CSRF_USE_SESSIONS`, you must "
"include a leading dot (e.g. ``\".example.com\"``) to accommodate the CSRF "
"middleware's referer checking."
msgstr ""
":setting:`CSRF_USE_SESSIONS` を使用してクロスドメインのクッキーを使用する場"
"合、CSRFミドルウェアのリファラチェックを受け入れるために、先頭にドット (例: "
"``\".example.com\"``) を含めなければなりません。"

msgid ""
"Be cautious when updating this setting on a production site. If you update "
"this setting to enable cross-domain cookies on a site that previously used "
"standard domain cookies, existing user cookies will be set to the old "
"domain. This may result in them being unable to log in as long as these "
"cookies persist."
msgstr ""
"本番サイトでこの設定を更新する場合は慎重に行ってください。以前は標準ドメイン"
"のクッキーを使用していたサイトでこの設定を更新してクロスドメインのクッキーを"
"有効にした場合、既存のユーザークッキーは古いドメインに設定されます。これによ"
"り、これらのクッキーが存在する限り、ログインできなくなる可能性があります。"

msgid ""
"This setting also affects cookies set by :mod:`django.contrib.messages`."
msgstr ""
"この設定は、 :mod:`django.contrib.messages` によって設定されるクッキーにも影"
"響します。"

msgid "``SESSION_COOKIE_HTTPONLY``"
msgstr "``SESSION_COOKIE_HTTPONLY``"

msgid ""
"Whether to use ``HttpOnly`` flag on the session cookie. If this is set to "
"``True``, client-side JavaScript will not be able to access the session "
"cookie."
msgstr ""
"セッションクッキーに ``HttpOnly`` フラグを使用するかどうか。これが ``True`` "
"に設定されている場合、クライアント側の JavaScript はセッションクッキーにアク"
"セスできません。"

msgid ""
"HttpOnly_ is a flag included in a Set-Cookie HTTP response header. It's part "
"of the :rfc:`6265#section-4.1.2.6` standard for cookies and can be a useful "
"way to mitigate the risk of a client-side script accessing the protected "
"cookie data."
msgstr ""
"HttpOnly_ は Set-Cookie HTTPレスポンスヘッダーに含まれるフラグです。クッキー"
"のための :rfc:`6265#section-4.1.2.6` 標準の一部であり、クライアントサイドのス"
"クリプトが保護されたクッキーデータにアクセスするリスクを軽減する有用な方法で"
"す。"

msgid ""
"This makes it less trivial for an attacker to escalate a cross-site "
"scripting vulnerability into full hijacking of a user's session. There "
"aren't many good reasons for turning this off. Your code shouldn't read "
"session cookies from JavaScript."
msgstr ""
"これにより、攻撃者がクロスサイトスクリプティングの脆弱性を利用してユーザーの"
"セッションを完全に乗っ取ることが困難になります。これをオフにする正当な理由は"
"ほとんどありません。コードは JavaScript からセッションクッキーを読み取るべき"
"ではありません。"

msgid "``SESSION_COOKIE_NAME``"
msgstr "``SESSION_COOKIE_NAME``"

msgid "Default: ``'sessionid'``"
msgstr "デフォルト値: ``'sessionid'``"

msgid ""
"The name of the cookie to use for sessions. This can be whatever you want "
"(as long as it's different from the other cookie names in your application)."
msgstr ""
"セッションに使用するクッキーの名前です。これはあなたが望むものであれば何でも"
"構いません（ただし、アプリケーション内の他のクッキー名と異なる必要がありま"
"す）。"

msgid "``SESSION_COOKIE_PATH``"
msgstr "``SESSION_COOKIE_PATH``"

msgid ""
"The path set on the session cookie. This should either match the URL path of "
"your Django installation or be parent of that path."
msgstr ""
"セッションクッキーに設定されたパス。これは、DjangoインストールのURLパスと一致"
"するか、そのパスの親であるべきです。"

msgid ""
"This is useful if you have multiple Django instances running under the same "
"hostname. They can use different cookie paths, and each instance will only "
"see its own session cookie."
msgstr ""
"これは、同じホスト名の下で複数の Django インスタンスが実行されている場合に便"
"利です。異なるクッキーパスを使用でき、各インスタンスは自身のセッションクッ"
"キーのみを確認できます。"

msgid "``SESSION_COOKIE_SAMESITE``"
msgstr "``SESSION_COOKIE_SAMESITE``"

msgid ""
"The value of the `SameSite`_ flag on the session cookie. This flag prevents "
"the cookie from being sent in cross-site requests thus preventing CSRF "
"attacks and making some methods of stealing session cookie impossible."
msgstr ""
"セッションクッキーの `SameSite`_ フラグの値。このフラグは、クロスサイトリクエ"
"ストでクッキーが送信されるのを防ぎ、CSRF攻撃を防ぎ、セッションクッキーを盗む"
"いくつかの方法を不可能にします。"

msgid "Possible values for the setting are:"
msgstr "設定で指定できる値は次のとおりです:"

msgid ""
"``'Strict'``: prevents the cookie from being sent by the browser to the "
"target site in all cross-site browsing context, even when following a "
"regular link."
msgstr ""
"``'Strict'``: ブラウザが全てのクロスサイトブラウジングコンテキストにおいて、"
"通常のリンクをたどる場合であっても、ターゲットサイトへクッキーを送信すること"
"を防ぎます。"

msgid ""
"For example, for a GitHub-like website this would mean that if a logged-in "
"user follows a link to a private GitHub project posted on a corporate "
"discussion forum or email, GitHub will not receive the session cookie and "
"the user won't be able to access the project. A bank website, however, most "
"likely doesn't want to allow any transactional pages to be linked from "
"external sites so the ``'Strict'`` flag would be appropriate."
msgstr ""
"例えば、GitHubのようなウェブサイトでは、ログインしたユーザーが企業のディス"
"カッションフォーラムやメールに掲載された非公開のGitHubプロジェクトへのリンク"
"をたどる場合、GitHubはセッションクッキーを受け取らず、ユーザーはそのプロジェ"
"クトにアクセスできなくなります。一方、銀行のウェブサイトでは、おそらく外部サ"
"イトからの取引ページへのリンクを許可したくないため、 ``'Strict'`` フラグが適"
"切でしょう。"

msgid ""
"``'Lax'`` (default): provides a balance between security and usability for "
"websites that want to maintain user's logged-in session after the user "
"arrives from an external link."
msgstr ""
"``'Lax'`` (デフォルト): 外部リンクからユーザーが訪れた後でも、ユーザーのログ"
"イン状態を維持したいウェブサイトに対して、セキュリティと利便性のバランスを提"
"供します。"

msgid ""
"In the GitHub scenario, the session cookie would be allowed when following a "
"regular link from an external website and be blocked in CSRF-prone request "
"methods (e.g. ``POST``)."
msgstr ""
"GitHub のシナリオでは、外部ウェブサイトから通常のリンクをたどる際にはセッショ"
"ンクッキーが許可され、CSRFに対して脆弱なリクエストメソッド (例: ``POST``) で"
"はブロックされます。"

msgid ""
"``'None'`` (string): the session cookie will be sent with all same-site and "
"cross-site requests."
msgstr ""
"``'None'`` (文字列): セッションクッキーは、同一サイトおよびクロスサイトの全て"
"のリクエストに対して送信されます。"

msgid "``False``: disables the flag."
msgstr "``False``: フラグを無効にします。"

msgid ""
"Modern browsers provide a more secure default policy for the ``SameSite`` "
"flag and will assume ``Lax`` for cookies without an explicit value set."
msgstr ""
"モダンブラウザは、明示的な値が設定されていないクッキーについて、``SameSite`` "
"フラグに対してより安全なデフォルトポリシーである ``Lax`` を適用します。"

msgid "``SESSION_COOKIE_SECURE``"
msgstr "``SESSION_COOKIE_SECURE``"

msgid ""
"Whether to use a secure cookie for the session cookie. If this is set to "
"``True``, the cookie will be marked as \"secure\", which means browsers may "
"ensure that the cookie is only sent under an HTTPS connection."
msgstr ""
"セッションクッキーにセキュアクッキーを使用するかどうかです。これが ``True`` "
"に設定されている場合、クッキーは「セキュア」にマークされ、ブラウザはそのクッ"
"キーが HTTPS 接続下でのみ送信されることを保証するかもしれません。"

msgid ""
"Leaving this setting off isn't a good idea because an attacker could capture "
"an unencrypted session cookie with a packet sniffer and use the cookie to "
"hijack the user's session."
msgstr ""
"この設定をオフにしておくことは良いアイデアではありません。なぜなら、攻撃者が"
"パケットスニファーで暗号化されていないセッションクッキーをキャプチャし、その"
"クッキーを使用してユーザーのセッションを乗っ取る可能性があるからです。"

msgid "``SESSION_ENGINE``"
msgstr "``SESSION_ENGINE``"

msgid "Default: ``'django.contrib.sessions.backends.db'``"
msgstr "デフォルト値: ``'django.contrib.sessions.backends.db'``"

msgid "Controls where Django stores session data. Included engines are:"
msgstr ""
"Djangoがセッションデータを保存する場所を制御します。含まれているエンジンに"
"は、以下があります:"

msgid "``'django.contrib.sessions.backends.db'``"
msgstr "``'django.contrib.sessions.backends.db'``"

msgid "``'django.contrib.sessions.backends.file'``"
msgstr "``'django.contrib.sessions.backends.file'``"

msgid "``'django.contrib.sessions.backends.cache'``"
msgstr "``'django.contrib.sessions.backends.cache'``"

msgid "``'django.contrib.sessions.backends.cached_db'``"
msgstr "``'django.contrib.sessions.backends.cached_db'``"

msgid "``'django.contrib.sessions.backends.signed_cookies'``"
msgstr "``'django.contrib.sessions.backends.signed_cookies'``"

msgid "See :ref:`configuring-sessions` for more details."
msgstr "詳細は :ref:`configuring-sessions` を参照してください。"

msgid "``SESSION_EXPIRE_AT_BROWSER_CLOSE``"
msgstr "``SESSION_EXPIRE_AT_BROWSER_CLOSE``"

msgid ""
"Whether to expire the session when the user closes their browser. See :ref:"
"`browser-length-vs-persistent-sessions`."
msgstr ""
"ユーザーがブラウザを閉じたときにセッションを終了させるかどうか。 :ref:"
"`browser-length-vs-persistent-sessions` を参照してください。"

msgid "``SESSION_FILE_PATH``"
msgstr "``SESSION_FILE_PATH``"

msgid ""
"If you're using file-based session storage, this sets the directory in which "
"Django will store session data. When the default value (``None``) is used, "
"Django will use the standard temporary directory for the system."
msgstr ""
"ファイルベースのセッションストレージを使用している場合、この設定は Django が"
"セッションデータを格納するディレクトリを設定します。デフォルト値 (``None``) "
"が使用される場合、Django はシステムの標準的な一時ディレクトリを使用します。"

msgid "``SESSION_SAVE_EVERY_REQUEST``"
msgstr "``SESSION_SAVE_EVERY_REQUEST``"

msgid ""
"Whether to save the session data on every request. If this is ``False`` "
"(default), then the session data will only be saved if it has been modified "
"-- that is, if any of its dictionary values have been assigned or deleted. "
"Empty sessions won't be created, even if this setting is active."
msgstr ""
"すべてのリクエストにおいてセッションデータを保存するかどうか。これが "
"``False`` (デフォルト) の場合、セッションデータは変更された場合にのみ保存され"
"ます。つまり、その辞書の値に何らかの代入や削除が行われた場合です。この設定が"
"有効であっても、空のセッションは作成されません。"

msgid "``SESSION_SERIALIZER``"
msgstr "``SESSION_SERIALIZER``"

msgid "Default: ``'django.contrib.sessions.serializers.JSONSerializer'``"
msgstr "デフォルト値: ``'django.contrib.sessions.serializers.JSONSerializer'``"

msgid ""
"Full import path of a serializer class to use for serializing session data. "
"Included serializer is:"
msgstr ""
"セッションデータのシリアライズに使用するシリアライザクラスの完全なインポート"
"パスです。含まれているシリアライザは次のとおりです:"

msgid "``'django.contrib.sessions.serializers.JSONSerializer'``"
msgstr "``'django.contrib.sessions.serializers.JSONSerializer'``"

msgid "See :ref:`session_serialization` for details."
msgstr "詳細については、 :ref:`session_serialization` を参照してください。"

msgid "Sites"
msgstr "サイト"

msgid "Settings for :mod:`django.contrib.sites`."
msgstr ":mod:`django.contrib.sites` の設定。"

msgid "``SITE_ID``"
msgstr "``SITE_ID``"

msgid ""
"The ID, as an integer, of the current site in the ``django_site`` database "
"table. This is used so that application data can hook into specific sites "
"and a single database can manage content for multiple sites."
msgstr ""
"``django_site`` データベーステーブルの現在のサイトの ID（整数）です。これを使"
"用することで、アプリケーションデータが特定のサイトにフックでき、単一のデータ"
"ベースで複数のサイトのコンテンツを管理できます。"

msgid "Static Files"
msgstr "静的ファイル"

msgid "Settings for :mod:`django.contrib.staticfiles`."
msgstr ":mod:`django.contrib.staticfiles` の設定。"

msgid "``STATIC_ROOT``"
msgstr "``STATIC_ROOT``"

msgid ""
"The absolute path to the directory where :djadmin:`collectstatic` will "
"collect static files for deployment."
msgstr ""
":djadmin:`collectstatic` がデプロイメント用に静的ファイルを収集するディレクト"
"リの絶対パスです。"

msgid "Example: ``\"/var/www/example.com/static/\"``"
msgstr "例: ``\"/var/www/example.com/static/\"``"

msgid ""
"If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled "
"(as in the default project template), the :djadmin:`collectstatic` "
"management command will collect static files into this directory. See the "
"how-to on :doc:`managing static files</howto/static-files/index>` for more "
"details about usage."
msgstr ""
":doc:`staticfiles</ref/contrib/staticfiles>` contrib アプリが有効になっている"
"場合（デフォルトのプロジェクトテンプレートにあるように）、 :djadmin:"
"`collectstatic` 管理コマンドは静的ファイルをこのディレクトリに収集します。使"
"用法についての詳細は、 :doc:`静的ファイルの管理</howto/static-files/index>` "
"のHow-toをご覧ください。"

msgid ""
"This should be an initially empty destination directory for collecting your "
"static files from their permanent locations into one directory for ease of "
"deployment; it is **not** a place to store your static files permanently. "
"You should do that in directories that will be found by :doc:`staticfiles</"
"ref/contrib/staticfiles>`’s :setting:`finders<STATICFILES_FINDERS>`, which "
"by default, are ``'static/'`` app sub-directories and any directories you "
"include in :setting:`STATICFILES_DIRS`)."
msgstr ""
"これは、永続的な場所から静的ファイルを一つのディレクトリに集めて、デプロイを"
"容易にするための最初は空の宛先ディレクトリであることに注意してください。これ"
"は、静的ファイルを永続的に保存する場所 **ではありません** 。静的ファイルを永"
"続的に保存するためには、 :doc:`staticfiles</ref/contrib/staticfiles>` の :"
"setting:`finders<STATICFILES_FINDERS>` によって見つかるディレクトリ（デフォル"
"トでは、``'static/'`` アプリサブディレクトリと、:setting:`STATICFILES_DIRS` "
"で含めた任意のディレクトリ）に保存してください。"

msgid "``STATIC_URL``"
msgstr "``STATIC_URL``"

msgid ""
"URL to use when referring to static files located in :setting:`STATIC_ROOT`."
msgstr ""
":setting:`STATIC_ROOT` に位置する静的ファイルを参照する際に使用する URL。"

msgid "Example: ``\"static/\"`` or ``\"http://static.example.com/\"``"
msgstr "例: ``\"static/\"`` or ``\"http://static.example.com/\"``"

msgid ""
"If not ``None``, this will be used as the base path for :ref:`asset "
"definitions<form-asset-paths>` (the ``Media`` class) and the :doc:"
"`staticfiles app</ref/contrib/staticfiles>`."
msgstr ""
"``None`` でない場合、これは :ref:`アセット定義 <form-asset-paths>` "
"(``Media`` クラス) および :doc:`staticfiles アプリ</ref/contrib/"
"staticfiles>` において基本パスとして使用されます。"

msgid "It must end in a slash if set to a non-empty value."
msgstr "空でない値に設定されている場合、スラッシュで終わらなければなりません。"

msgid ""
"You may need to :ref:`configure these files to be served in development "
"<serving-static-files-in-development>` and will definitely need to do so :"
"doc:`in production </howto/static-files/deployment>`."
msgstr ""
"これらのファイルを開発環境で提供するためには :ref:`設定が必要になるかもしれま"
"せん <serving-static-files-in-development>` し、本番環境では間違いなくそうす"
"る必要があります :doc:`本番環境 </howto/static-files/deployment>` 。"

msgid ""
"If :setting:`STATIC_URL` is a relative path, then it will be prefixed by the "
"server-provided value of ``SCRIPT_NAME`` (or ``/`` if not set). This makes "
"it easier to serve a Django application in a subpath without adding an extra "
"configuration to the settings."
msgstr ""
":setting:`STATIC_URL` が相対パスの場合、サーバーが提供する ``SCRIPT_NAME`` の"
"値（設定されていない場合は ``/``）によってプレフィックスが付けられます。これ"
"により、追加の設定を settings に追加することなく、Django アプリケーションをサ"
"ブパスで提供することが簡単になります。"

msgid "``STATICFILES_DIRS``"
msgstr "``STATICFILES_DIRS``"

msgid ""
"This setting defines the additional locations the staticfiles app will "
"traverse if the ``FileSystemFinder`` finder is enabled, e.g. if you use the :"
"djadmin:`collectstatic` or :djadmin:`findstatic` management command or use "
"the static file serving view."
msgstr ""
"この設定は ``FileSystemFinder`` のファインダーが有効になっている場合に "
"staticfiles アプリが通過する追加の場所を定義します。たとえば、:djadmin:"
"`collectstatic` や :djadmin:`findstatic` 管理コマンドを使用している場合や、 "
"静的ファイル提供ビューを使用している場合などです。"

msgid ""
"This should be set to a list of strings that contain full paths to your "
"additional files directory(ies) e.g.::"
msgstr ""
"これは、追加のファイルディレクトリへのフルパスを含む文字列のリストに設定する"
"必要があります。例::"

msgid ""
"Note that these paths should use Unix-style forward slashes, even on Windows "
"(e.g. ``\"C:/Users/user/mysite/extra_static_content\"``)."
msgstr ""
"これらのパスは、WindowsでもUnixスタイルのスラッシュを使用する必要があることに"
"注意してください（例： ``\"C:/Users/user/mysite/extra_static_content\"`` ）。"

msgid "Prefixes (optional)"
msgstr "プレフィックス(オプション)"

msgid ""
"In case you want to refer to files in one of the locations with an "
"additional namespace, you can **optionally** provide a prefix as ``(prefix, "
"path)`` tuples, e.g.::"
msgstr ""
"追加の名前空間である場所の一つを参照したい場合、 **オプションで** ``(prefix, "
"path)`` の形のタプルとしてプレフィックスを提供できます。例えば:"

msgid ""
"For example, assuming you have :setting:`STATIC_URL` set to ``'static/'``, "
"the :djadmin:`collectstatic` management command would collect the \"stats\" "
"files in a ``'downloads'`` subdirectory of :setting:`STATIC_ROOT`."
msgstr ""
"たとえば、:setting:`STATIC_URL` を ``'static/'`` に設定しているとします。この"
"場合、 :djadmin:`collectstatic` 管理コマンドは、 :setting:`STATIC_ROOT` の "
"``'downloads'`` サブディレクトリ内の \"stats\" ファイルを収集します。"

msgid ""
"This would allow you to refer to the local file ``'/opt/webfiles/stats/"
"polls_20101022.tar.gz'`` with ``'/static/downloads/polls_20101022.tar.gz'`` "
"in your templates, e.g.:"
msgstr ""
"これにより、テンプレート内でローカルファイル ``'/opt/webfiles/stats/"
"polls_20101022.tar.gz'`` を ``'/static/downloads/polls_20101022.tar.gz'`` と"
"して参照できるようになります。例えば："

msgid "``STATICFILES_STORAGE``"
msgstr "``STATICFILES_STORAGE``"

msgid "Default: ``'django.contrib.staticfiles.storage.StaticFilesStorage'``"
msgstr ""
"デフォルト値: ``'django.contrib.staticfiles.storage.StaticFilesStorage'``"

msgid ""
"The file storage engine to use when collecting static files with the :"
"djadmin:`collectstatic` management command."
msgstr ""
":djadmin:`collectstatic` 管理コマンドで静的ファイルを収集する際に使用するファ"
"イルストレージエンジン。"

msgid ""
"A ready-to-use instance of the storage backend defined in this setting can "
"be found under ``staticfiles`` key in ``django.core.files.storage.storages``."
msgstr ""
"この設定で定義されたストレージバックエンドのすぐ使えるインスタンスは、 "
"``django.core.files.storage.storages`` の ``staticfiles`` キーの下に見つける"
"ことができます。"

msgid "For an example, see :ref:`staticfiles-from-cdn`."
msgstr "例については、 :ref:`staticfiles-from-cdn` を参照してください。"

msgid ""
"This setting is deprecated. Starting with Django 4.2, static files storage "
"engine can be configured with the :setting:`STORAGES` setting under the "
"``staticfiles`` key."
msgstr ""
"この設定は非推奨です。Django 4.2 から、静的ファイルのストレージエンジンは :"
"setting:`STORAGES` 設定の ``staticfiles`` キーで設定できます。"

msgid "``STATICFILES_FINDERS``"
msgstr "``STATICFILES_FINDERS``"

msgid ""
"The list of finder backends that know how to find static files in various "
"locations."
msgstr ""
"様々な場所にある静的ファイルを見つける方法を知っているファインダーバックエン"
"ドのリストです。"

msgid ""
"The default will find files stored in the :setting:`STATICFILES_DIRS` "
"setting (using ``django.contrib.staticfiles.finders.FileSystemFinder``) and "
"in a ``static`` subdirectory of each app (using ``django.contrib.staticfiles."
"finders.AppDirectoriesFinder``). If multiple files with the same name are "
"present, the first file that is found will be used."
msgstr ""
"デフォルトでは、 :setting:`STATICFILES_DIRS` 設定で指定された場所に保存されて"
"いるファイル（ ``django.contrib.staticfiles.finders.FileSystemFinder`` を使用"
"して）と、各アプリの ``static`` サブディレクトリにあるファイル（ ``django."
"contrib.staticfiles.finders.AppDirectoriesFinder`` を使用して）を見つけます。"
"同じ名前のファイルが複数存在する場合、最初に見つかったファイルが使用されま"
"す。"

msgid ""
"One finder is disabled by default: ``django.contrib.staticfiles.finders."
"DefaultStorageFinder``. If added to your :setting:`STATICFILES_FINDERS` "
"setting, it will look for static files in the default file storage as "
"defined by the ``default`` key in the :setting:`STORAGES` setting."
msgstr ""
"デフォルトで無効になっているファインダーが 1 つあります: ``django.contrib."
"staticfiles.finders.DefaultStorageFinder`` 。これを :setting:"
"`STATICFILES_FINDERS` 設定に追加すると、 :setting:`STORAGES` 設定の "
"``default`` キーで定義されたデフォルトファイルストレージ内の静的ファイルを探"
"します。"

msgid ""
"When using the ``AppDirectoriesFinder`` finder, make sure your apps can be "
"found by staticfiles by adding the app to the :setting:`INSTALLED_APPS` "
"setting of your site."
msgstr ""
"``AppDirectoriesFinder`` ファインダーを使用する場合、サイトの :setting:"
"`INSTALLED_APPS` 設定にアプリを追加して、staticfiles によってアプリが見つけら"
"れるようにしてください。"

msgid ""
"Static file finders are currently considered a private interface, and this "
"interface is thus undocumented."
msgstr ""
"静的ファイルファインダーは現在、プライベートインターフェースとみなされてお"
"り、このインターフェースはドキュメント化されていません。"

msgid "Core Settings Topical Index"
msgstr "コア設定 トピック別インデックス"

msgid "Cache"
msgstr "キャッシュ"

msgid ":setting:`CACHES`"
msgstr ":setting:`CACHES`"

msgid ":setting:`CACHE_MIDDLEWARE_ALIAS`"
msgstr ":setting:`CACHE_MIDDLEWARE_ALIAS`"

msgid ":setting:`CACHE_MIDDLEWARE_KEY_PREFIX`"
msgstr ":setting:`CACHE_MIDDLEWARE_KEY_PREFIX`"

msgid ":setting:`CACHE_MIDDLEWARE_SECONDS`"
msgstr ":setting:`CACHE_MIDDLEWARE_SECONDS`"

msgid ":setting:`DATABASES`"
msgstr ":setting:`DATABASES`"

msgid ":setting:`DATABASE_ROUTERS`"
msgstr ":setting:`DATABASE_ROUTERS`"

msgid ":setting:`DEFAULT_INDEX_TABLESPACE`"
msgstr ":setting:`DEFAULT_INDEX_TABLESPACE`"

msgid ":setting:`DEFAULT_TABLESPACE`"
msgstr ":setting:`DEFAULT_TABLESPACE`"

msgid "Debugging"
msgstr "デバッグ"

msgid ":setting:`DEBUG`"
msgstr ":setting:`DEBUG`"

msgid ":setting:`DEBUG_PROPAGATE_EXCEPTIONS`"
msgstr ":setting:`DEBUG_PROPAGATE_EXCEPTIONS`"

msgid "Email"
msgstr "Eメール"

msgid ":setting:`ADMINS`"
msgstr ":setting:`ADMINS`"

msgid ":setting:`DEFAULT_CHARSET`"
msgstr ":setting:`DEFAULT_CHARSET`"

msgid ":setting:`DEFAULT_FROM_EMAIL`"
msgstr ":setting:`DEFAULT_FROM_EMAIL`"

msgid ":setting:`EMAIL_BACKEND`"
msgstr ":setting:`EMAIL_BACKEND`"

msgid ":setting:`EMAIL_FILE_PATH`"
msgstr ":setting:`EMAIL_FILE_PATH`"

msgid ":setting:`EMAIL_HOST`"
msgstr ":setting:`EMAIL_HOST`"

msgid ":setting:`EMAIL_HOST_PASSWORD`"
msgstr ":setting:`EMAIL_HOST_PASSWORD`"

msgid ":setting:`EMAIL_HOST_USER`"
msgstr ":setting:`EMAIL_HOST_USER`"

msgid ":setting:`EMAIL_PORT`"
msgstr ":setting:`EMAIL_PORT`"

msgid ":setting:`EMAIL_SSL_CERTFILE`"
msgstr ":setting:`EMAIL_SSL_CERTFILE`"

msgid ":setting:`EMAIL_SSL_KEYFILE`"
msgstr ":setting:`EMAIL_SSL_KEYFILE`"

msgid ":setting:`EMAIL_SUBJECT_PREFIX`"
msgstr ":setting:`EMAIL_SUBJECT_PREFIX`"

msgid ":setting:`EMAIL_TIMEOUT`"
msgstr ":setting:`EMAIL_TIMEOUT`"

msgid ":setting:`EMAIL_USE_LOCALTIME`"
msgstr ":setting:`EMAIL_USE_LOCALTIME`"

msgid ":setting:`EMAIL_USE_TLS`"
msgstr ":setting:`EMAIL_USE_TLS`"

msgid ":setting:`MANAGERS`"
msgstr ":setting:`MANAGERS`"

msgid ":setting:`SERVER_EMAIL`"
msgstr ":setting:`SERVER_EMAIL`"

msgid "Error reporting"
msgstr "エラーのレポート"

msgid ":setting:`DEFAULT_EXCEPTION_REPORTER`"
msgstr ":setting:`DEFAULT_EXCEPTION_REPORTER`"

msgid ":setting:`DEFAULT_EXCEPTION_REPORTER_FILTER`"
msgstr ":setting:`DEFAULT_EXCEPTION_REPORTER_FILTER`"

msgid ":setting:`IGNORABLE_404_URLS`"
msgstr ":setting:`IGNORABLE_404_URLS`"

msgid ":setting:`SILENCED_SYSTEM_CHECKS`"
msgstr ":setting:`SILENCED_SYSTEM_CHECKS`"

msgid "File uploads"
msgstr "ファイルアップロード"

msgid ":setting:`DEFAULT_FILE_STORAGE`"
msgstr ":setting:`DEFAULT_FILE_STORAGE`"

msgid ":setting:`FILE_UPLOAD_HANDLERS`"
msgstr ":setting:`FILE_UPLOAD_HANDLERS`"

msgid ":setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`"
msgstr ":setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`"

msgid ":setting:`FILE_UPLOAD_PERMISSIONS`"
msgstr ":setting:`FILE_UPLOAD_PERMISSIONS`"

msgid ":setting:`FILE_UPLOAD_TEMP_DIR`"
msgstr ":setting:`FILE_UPLOAD_TEMP_DIR`"

msgid ":setting:`MEDIA_ROOT`"
msgstr ":setting:`MEDIA_ROOT`"

msgid ":setting:`MEDIA_URL`"
msgstr ":setting:`MEDIA_URL`"

msgid ":setting:`FORM_RENDERER`"
msgstr ":setting:`FORM_RENDERER`"

msgid ":setting:`FORMS_URLFIELD_ASSUME_HTTPS`"
msgstr ":setting:`FORMS_URLFIELD_ASSUME_HTTPS`"

msgid "Globalization (``i18n``/``l10n``)"
msgstr "グローバル化 (``i18n``/``l10n``)"

msgid ":setting:`DATETIME_FORMAT`"
msgstr ":setting:`DATETIME_FORMAT`"

msgid ":setting:`FORMAT_MODULE_PATH`"
msgstr ":setting:`FORMAT_MODULE_PATH`"

msgid ":setting:`LANGUAGE_CODE`"
msgstr ":setting:`LANGUAGE_CODE`"

msgid ":setting:`LANGUAGE_COOKIE_AGE`"
msgstr ":setting:`LANGUAGE_COOKIE_AGE`"

msgid ":setting:`LANGUAGE_COOKIE_DOMAIN`"
msgstr ":setting:`LANGUAGE_COOKIE_DOMAIN`"

msgid ":setting:`LANGUAGE_COOKIE_HTTPONLY`"
msgstr ":setting:`LANGUAGE_COOKIE_HTTPONLY`"

msgid ":setting:`LANGUAGE_COOKIE_NAME`"
msgstr ":setting:`LANGUAGE_COOKIE_NAME`"

msgid ":setting:`LANGUAGE_COOKIE_PATH`"
msgstr ":setting:`LANGUAGE_COOKIE_PATH`"

msgid ":setting:`LANGUAGE_COOKIE_SAMESITE`"
msgstr ":setting:`LANGUAGE_COOKIE_SAMESITE`"

msgid ":setting:`LANGUAGE_COOKIE_SECURE`"
msgstr ":setting:`LANGUAGE_COOKIE_SECURE`"

msgid ":setting:`LANGUAGES`"
msgstr ":setting:`LANGUAGES`"

msgid ":setting:`LANGUAGES_BIDI`"
msgstr ":setting:`LANGUAGES_BIDI`"

msgid ":setting:`LOCALE_PATHS`"
msgstr ":setting:`LOCALE_PATHS`"

msgid ":setting:`TIME_ZONE`"
msgstr ":setting:`TIME_ZONE`"

msgid ":setting:`USE_I18N`"
msgstr ":setting:`USE_I18N`"

msgid ":setting:`USE_THOUSAND_SEPARATOR`"
msgstr ":setting:`USE_THOUSAND_SEPARATOR`"

msgid ":setting:`USE_TZ`"
msgstr ":setting:`USE_TZ`"

msgid "HTTP"
msgstr "HTTP"

msgid ":setting:`DATA_UPLOAD_MAX_MEMORY_SIZE`"
msgstr ":setting:`DATA_UPLOAD_MAX_MEMORY_SIZE`"

msgid ":setting:`DATA_UPLOAD_MAX_NUMBER_FIELDS`"
msgstr ":setting:`DATA_UPLOAD_MAX_NUMBER_FIELDS`"

msgid ":setting:`DATA_UPLOAD_MAX_NUMBER_FILES`"
msgstr ":setting:`DATA_UPLOAD_MAX_NUMBER_FILES`"

msgid ":setting:`DISALLOWED_USER_AGENTS`"
msgstr ":setting:`DISALLOWED_USER_AGENTS`"

msgid ":setting:`FORCE_SCRIPT_NAME`"
msgstr ":setting:`FORCE_SCRIPT_NAME`"

msgid ":setting:`INTERNAL_IPS`"
msgstr ":setting:`INTERNAL_IPS`"

msgid ":setting:`MIDDLEWARE`"
msgstr ":setting:`MIDDLEWARE`"

msgid ":setting:`SECURE_PROXY_SSL_HEADER`"
msgstr ":setting:`SECURE_PROXY_SSL_HEADER`"

msgid ":setting:`SIGNING_BACKEND`"
msgstr ":setting:`SIGNING_BACKEND`"

msgid ":setting:`USE_X_FORWARDED_HOST`"
msgstr ":setting:`USE_X_FORWARDED_HOST`"

msgid ":setting:`USE_X_FORWARDED_PORT`"
msgstr ":setting:`USE_X_FORWARDED_PORT`"

msgid ":setting:`WSGI_APPLICATION`"
msgstr ":setting:`WSGI_APPLICATION`"

msgid ":setting:`LOGGING`"
msgstr ":setting:`LOGGING`"

msgid ":setting:`LOGGING_CONFIG`"
msgstr ":setting:`LOGGING_CONFIG`"

msgid ":setting:`ABSOLUTE_URL_OVERRIDES`"
msgstr ":setting:`ABSOLUTE_URL_OVERRIDES`"

msgid ":setting:`FIXTURE_DIRS`"
msgstr ":setting:`FIXTURE_DIRS`"

msgid ":setting:`INSTALLED_APPS`"
msgstr ":setting:`INSTALLED_APPS`"

msgid "Cross Site Request Forgery Protection"
msgstr "クロスサイトリクエストフォージェリ (CSRF) 保護"

msgid ":setting:`SECRET_KEY`"
msgstr ":setting:`SECRET_KEY`"

msgid ":setting:`SECRET_KEY_FALLBACKS`"
msgstr ":setting:`SECRET_KEY_FALLBACKS`"

msgid ":setting:`X_FRAME_OPTIONS`"
msgstr ":setting:`X_FRAME_OPTIONS`"

msgid "Serialization"
msgstr "シリアライズ"

msgid ":setting:`SERIALIZATION_MODULES`"
msgstr ":setting:`SERIALIZATION_MODULES`"

msgid ":setting:`TEMPLATES`"
msgstr ":setting:`TEMPLATES`"

msgid "Database: :setting:`TEST <DATABASE-TEST>`"
msgstr "データベース: :setting:`テスト <DATABASE-TEST>`"

msgid ":setting:`TEST_NON_SERIALIZED_APPS`"
msgstr ":setting:`TEST_NON_SERIALIZED_APPS`"

msgid ":setting:`TEST_RUNNER`"
msgstr ":setting:`TEST_RUNNER`"

msgid ":setting:`APPEND_SLASH`"
msgstr ":setting:`APPEND_SLASH`"

msgid ":setting:`PREPEND_WWW`"
msgstr ":setting:`PREPEND_WWW`"

msgid ":setting:`ROOT_URLCONF`"
msgstr ":setting:`ROOT_URLCONF`"

msgid ""
"A list of all the signals that Django sends. All built-in signals are sent "
"using the :meth:`~django.dispatch.Signal.send` method."
msgstr ""
"Djangoが送信する全てのシグナルのリストです。全ての組み込みシグナルは :meth:"
"`~django.dispatch.Signal.send` メソッドを使用して送信されます。"

msgid ""
"See the documentation on the :doc:`signal dispatcher </topics/signals>` for "
"information regarding how to register for and receive signals."
msgstr ""
"シグナルの登録方法と受信方法に関する情報については、:doc:`シグナルディスパッ"
"チャ </topics/signals>` のドキュメントを参照してください。"

msgid ""
"The :doc:`authentication framework </topics/auth/index>` sends :ref:`signals "
"when a user is logged in / out <topics-auth-signals>`."
msgstr ""
":doc:`認証フレームワーク </topics/auth/index>` は、ユーザーがログイン / ログ"
"アウトしたときに :ref:`シグナルを送信します <topics-auth-signals>` 。"

msgid "Model signals"
msgstr "モデルのシグナル"

msgid ""
"The :mod:`django.db.models.signals` module defines a set of signals sent by "
"the model system."
msgstr ""
":mod:`django.db.models.signals` モジュールは、モデルシステムによって送信され"
"る一連のシグナルを定義しています。"

msgid ""
"Signals can make your code harder to maintain. Consider implementing a "
"helper method on a :ref:`custom manager <custom-managers>`, to both update "
"your models and perform additional logic, or else :ref:`overriding model "
"methods <overriding-model-methods>` before using model signals."
msgstr ""
"シグナルはコードの保守を難しくする可能性があります。モデルを更新し、追加ロ"
"ジックを実行するために、 :ref:`カスタムマネージャ <custom-managers>` にヘル"
"パーメソッドを実装するか、あるいはモデルのシグナルを使用する前に :ref:`モデル"
"メソッドをオーバーライド <overriding-model-methods>` することを検討してくださ"
"い。"

msgid ""
"Many of these signals are sent by various model methods like ``__init__()`` "
"or :meth:`~django.db.models.Model.save` that you can override in your own "
"code."
msgstr ""
"これらのシグナルの多くは、 ``__init__()`` や :meth:`~django.db.models.Model."
"save` のような、自分のコードでオーバーライドできる様々なモデルメソッドによっ"
"て送信されます。"

msgid ""
"If you override these methods on your model, you must call the parent class' "
"methods for these signals to be sent."
msgstr ""
"これらのメソッドをモデルでオーバーライドする場合、これらのシグナルが送信され"
"るように、親クラスのメソッドを呼び出さなければなりません。"

msgid ""
"Note also that Django stores signal handlers as weak references by default, "
"so if your handler is a local function, it may be garbage collected.  To "
"prevent this, pass ``weak=False`` when you call the signal's :meth:`~django."
"dispatch.Signal.connect`."
msgstr ""
"Django はシグナルハンドラをデフォルトで弱参照として保存するため、ハンドラが"
"ローカル関数の場合、ガベージコレクションによって回収される可能性があります。"
"これを防ぐために、シグナルの :meth:`~django.dispatch.Signal.connect` を呼び出"
"す際に ``weak=False`` を渡してください。"

msgid ""
"Model signals ``sender`` model can be lazily referenced when connecting a "
"receiver by specifying its full application label. For example, an "
"``Question`` model defined in the ``polls`` application could be referenced "
"as ``'polls.Question'``. This sort of reference can be quite handy when "
"dealing with circular import dependencies and swappable models."
msgstr ""
"モデルシグナルの ``sender`` モデルは、レシーバを接続する際にその完全なアプリ"
"ケーションラベルを指定することで、遅延参照ができます。例えば、 ``polls`` アプ"
"リケーションで定義された ``Question`` モデルは、``'polls.Question'`` として参"
"照できます。この種の参照は、循環インポートの依存関係や交換可能なモデルを扱う"
"際に非常に便利です。"

msgid "``pre_init``"
msgstr "``pre_init``"

msgid ""
"Whenever you instantiate a Django model, this signal is sent at the "
"beginning of the model's ``__init__()`` method."
msgstr ""
"Django モデルをインスタンス化するたびに、このシグナルはモデルの "
"``__init__()`` メソッドの開始時に送信されます。"

msgid "The model class that just had an instance created."
msgstr "たった今インスタンスが作成されたモデルクラス。"

msgid "``args``"
msgstr "``args``"

msgid "A list of positional arguments passed to ``__init__()``."
msgstr "``__init__()`` に渡される位置引数のリストです。"

msgid "``kwargs``"
msgstr "``kwargs``"

msgid "A dictionary of keyword arguments passed to ``__init__()``."
msgstr "``__init__()`` に渡されるキーワード引数の辞書。"

msgid "For example, the :doc:`tutorial </intro/tutorial02>` has this line::"
msgstr ""
"例えば、 :doc:`チュートリアル </intro/tutorial02>` にはこのような行がありま"
"す："

msgid "The arguments sent to a :data:`pre_init` handler would be:"
msgstr ":data:`pre_init` ハンドラーに送信される引数は次の通りです："

msgid "``Question`` (the class itself)"
msgstr "``Question`` （クラスそのもの）"

msgid ""
"``[]`` (an empty list because there were no positional arguments passed to "
"``__init__()``)"
msgstr "``[]`` （位置引数が ``__init__()`` に渡されなかったため、空のリスト）"

msgid ""
"``{'question_text': \"What's new?\",`` ``'pub_date': datetime.datetime(2012, "
"2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc)}``"
msgstr ""
"``{'question_text': \"What's new?\",`` ``'pub_date': datetime.datetime(2012, "
"2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc)}``"

msgid "``post_init``"
msgstr "``post_init``"

msgid ""
"Like pre_init, but this one is sent when the ``__init__()`` method finishes."
msgstr ""
"pre_init と似ていますが、このイベントは ``__init__()`` メソッドが終了した時に"
"送信されます。"

msgid "As above: the model class that just had an instance created."
msgstr "上記の通り: たった今インスタンスが作成されたモデルクラス。"

msgid "The actual instance of the model that's just been created."
msgstr "たった今作成されたモデルの実際のインスタンス。"

msgid ""
":attr:`instance._state <django.db.models.Model._state>` isn't set before "
"sending the ``post_init`` signal, so ``_state`` attributes always have their "
"default values. For example, ``_state.db`` is ``None``."
msgstr ""
":attr:`instance._state <django.db.models.Model._state>` は、``post_init`` シ"
"グナルを送信する前に設定されていないため、``_state`` 属性は常にそのデフォルト"
"値を持ちます。例えば、``_state.db`` は ``None`` です。"

msgid ""
"For performance reasons, you shouldn't perform queries in receivers of "
"``pre_init`` or ``post_init`` signals because they would be executed for "
"each instance returned during queryset iteration."
msgstr ""
"パフォーマンス上の理由から、 ``pre_init`` または ``post_init`` シグナルのレ"
"シーバでクエリを実行するべきではありません。なぜなら、クエリセットのイテレー"
"ト中に返される各インスタンスに対して実行されるからです。"

msgid "``pre_save``"
msgstr "``pre_save``"

msgid ""
"This is sent at the beginning of a model's :meth:`~django.db.models.Model."
"save` method."
msgstr ""
"これは、モデルの :meth:`~django.db.models.Model.save` メソッドの始まりに送信"
"されます。"

msgid "The model class."
msgstr "モデルクラス。"

msgid "The actual instance being saved."
msgstr "保存される実際のインスタンス。"

msgid "``raw``"
msgstr "``raw``"

msgid ""
"A boolean; ``True`` if the model is saved exactly as presented (i.e. when "
"loading a :ref:`fixture <fixtures-explanation>`). One should not query/"
"modify other records in the database as the database might not be in a "
"consistent state yet."
msgstr ""
"真偽値です。モデルがそのままの形 (例えば :ref:`フィクスチャ <fixtures-"
"explanation>` を読み込む時) で保存されている場合は ``True`` となります。デー"
"タベースがまだ一貫した状態にない可能性があるため、他のレコードをクエリしたり"
"変更したりするべきではありません。"

msgid "The database alias being used."
msgstr "使用されているデータベースのエイリアス。"

msgid "``update_fields``"
msgstr "``update_fields``"

msgid ""
"The set of fields to update as passed to :meth:`.Model.save`, or ``None`` if "
"``update_fields`` wasn't passed to ``save()``."
msgstr ""
":meth:`.Model.save` に渡された更新するフィールドのセット、もしくは "
"``update_fields`` が ``save()`` に渡されなかった場合は ``None``  。"

msgid "``post_save``"
msgstr "``post_save``"

msgid ""
"Like :data:`pre_save`, but sent at the end of the :meth:`~django.db.models."
"Model.save` method."
msgstr ""
":data:`pre_save` に似ていますが、 :meth:`~django.db.models.Model.save` メソッ"
"ドの最後に送信されます。"

msgid "``created``"
msgstr "``created``"

msgid "A boolean; ``True`` if a new record was created."
msgstr "ブール値。レコードが作成された場合に ``True`` を返す。"

msgid "``pre_delete``"
msgstr "``pre_delete``"

msgid ""
"Sent at the beginning of a model's :meth:`~django.db.models.Model.delete` "
"method and a queryset's :meth:`~django.db.models.query.QuerySet.delete` "
"method."
msgstr ""
"モデルの :meth:`~django.db.models.Model.delete` メソッドとクエリセットの :"
"meth:`~django.db.models.query.QuerySet.delete` メソッドの開始時に送信されま"
"す。"

msgid "The actual instance being deleted."
msgstr "実際に削除されるインスタンス。"

msgid ""
"The origin of the deletion being the instance of a ``Model`` or ``QuerySet`` "
"class."
msgstr "削除の起点は、``Model`` または ``QuerySet`` クラスのインスタンスです。"

msgid "``post_delete``"
msgstr "``post_delete``"

msgid ""
"Like :data:`pre_delete`, but sent at the end of a model's :meth:`~django.db."
"models.Model.delete` method and a queryset's :meth:`~django.db.models.query."
"QuerySet.delete` method."
msgstr ""
":data:`pre_delete` のようですが、モデルの :meth:`~django.db.models.Model."
"delete` メソッドとクエリセットの :meth:`~django.db.models.query.QuerySet."
"delete` メソッドの終わりに送信されます。"

msgid ""
"Note that the object will no longer be in the database, so be very careful "
"what you do with this instance."
msgstr ""
"このオブジェクトはデータベース内に存在しなくなるため、このインスタンスをどの"
"ように扱うか非常に注意してください。"

msgid "``m2m_changed``"
msgstr "``m2m_changed``"

msgid ""
"Sent when a :class:`~django.db.models.ManyToManyField` is changed on a model "
"instance. Strictly speaking, this is not a model signal since it is sent by "
"the :class:`~django.db.models.ManyToManyField`, but since it complements "
"the :data:`pre_save`/:data:`post_save` and :data:`pre_delete`/:data:"
"`post_delete` when it comes to tracking changes to models, it is included "
"here."
msgstr ""
"モデルインスタンス上の :class:`~django.db.models.ManyToManyField` が変更され"
"たときに送信されます。厳密には、これはモデルシグナルではありません。なぜな"
"ら、これは :class:`~django.db.models.ManyToManyField` によって送信されるため"
"です。しかし、モデルへの変更を追跡する際に、 :data:`pre_save`/:data:"
"`post_save` および :data:`pre_delete`/:data:`post_delete` を補完するものであ"
"るため、ここに含まれています。"

msgid ""
"The intermediate model class describing the :class:`~django.db.models."
"ManyToManyField`. This class is automatically created when a many-to-many "
"field is defined; you can access it using the ``through`` attribute on the "
"many-to-many field."
msgstr ""
":class:`~django.db.models.ManyToManyField` を記述する中間モデルクラスです。多"
"対多フィールドが定義されたときに自動的に作成されます。多対多フィールドの "
"``through`` 属性を使用してアクセスできます。"

msgid ""
"The instance whose many-to-many relation is updated. This can be an instance "
"of the ``sender``, or of the class the :class:`~django.db.models."
"ManyToManyField` is related to."
msgstr ""
"多対多のリレーションが更新されたインスタンス。これは ``sender`` のインスタン"
"ス、または :class:`~django.db.models.ManyToManyField` が関連づけられているク"
"ラスのインスタンスのいずれかです。"

msgid "``action``"
msgstr "``action``"

msgid ""
"A string indicating the type of update that is done on the relation. This "
"can be one of the following:"
msgstr ""
"リレーションに対して行われた更新の種類を表す文字列です。次のいずれかの値を取"
"ります。"

msgid "``\"pre_add\"``"
msgstr "``\"pre_add\"``"

msgid "Sent *before* one or more objects are added to the relation."
msgstr "リレーションにオブジェクトが1つ以上追加される *前* に送信されます。"

msgid "``\"post_add\"``"
msgstr "``\"post_add\"``"

msgid "Sent *after* one or more objects are added to the relation."
msgstr "リレーションに1つ以上のオブジェクトが追加された *後* に送信されます。"

msgid "``\"pre_remove\"``"
msgstr "``\"pre_remove\"``"

msgid "Sent *before* one or more objects are removed from the relation."
msgstr ""
"リレーションから 1 つ以上のオブジェクトが削除される *前* に送信されます。"

msgid "``\"post_remove\"``"
msgstr "``\"post_remove\"``"

msgid "Sent *after* one or more objects are removed from the relation."
msgstr ""
"リレーションから1つ以上のオブジェクトが削除された *後に* 送信されます。"

msgid "``\"pre_clear\"``"
msgstr "``\"pre_clear\"``"

msgid "Sent *before* the relation is cleared."
msgstr "リレーションがクリアされる *前に* 送信されます。"

msgid "``\"post_clear\"``"
msgstr "``\"post_clear\"``"

msgid "Sent *after* the relation is cleared."
msgstr "リレーションがクリアされた *後* に送信されます。"

msgid ""
"Indicates which side of the relation is updated (i.e., if it is the forward "
"or reverse relation that is being modified)."
msgstr ""
"リレーションのどちらの側が更新されているかを示します (つまり、更新されている"
"のが順方向のリレーションか、逆方向のリレーションかを表します)。"

msgid ""
"The class of the objects that are added to, removed from or cleared from the "
"relation."
msgstr "リレーションに追加、削除、またはクリアされるオブジェクトのクラス。"

msgid "``pk_set``"
msgstr "``pk_set``"

msgid ""
"For the ``pre_add`` and ``post_add`` actions, this is a set of primary key "
"values that will be, or have been, added to the relation. This may be a "
"subset of the values submitted to be added, since inserts must filter "
"existing values in order to avoid a database ``IntegrityError``."
msgstr ""
"``pre_add`` と ``post_add`` アクションの場合、これはリレーションに追加され"
"る、または追加された主キー値のセットです。既存の値をフィルタリングしてデータ"
"ベースの ``IntegrityError`` を避ける必要があるため、追加されることが提出され"
"た値のサブセットである可能性があります。"

msgid ""
"For the ``pre_remove`` and ``post_remove`` actions, this is a set of primary "
"key values that was submitted to be removed from the relation. This is not "
"dependent on whether the values actually will be, or have been, removed. In "
"particular, non-existent values may be submitted, and will appear in "
"``pk_set``, even though they have no effect on the database."
msgstr ""
"``pre_remove`` と ``post_remove`` アクションにおいて、これはリレーションから"
"削除されることが提案された主キーの値のセットです。これは、値が実際に削除され"
"るか、または削除されたかどうかに依存しません。特に、存在しない値が提出される"
"こともあり、``pk_set`` に表示されますが、データベースには影響を与えません。"

msgid "For the ``pre_clear`` and ``post_clear`` actions, this is ``None``."
msgstr ""
"``pre_clear`` と ``post_clear`` アクションの場合、これは ``None`` です。"

msgid ""
"For example, if a ``Pizza`` can have multiple ``Topping`` objects, modeled "
"like this::"
msgstr ""
"たとえば、``Pizza`` が複数の ``Topping`` オブジェクトを持てるとしたら、次のよ"
"うにモデル化されます。"

msgid "If we connected a handler like this::"
msgstr "このようにハンドラーを接続した場合："

msgid "and then did something like this:"
msgstr "そして、次のようにした場合:"

msgid ""
"the arguments sent to a :data:`m2m_changed` handler (``toppings_changed`` in "
"the example above) would be:"
msgstr ""
":data:`m2m_changed` ハンドラ (上記の例では ``toppings_changed``) に送信された"
"引数は、次の通りです:"

msgid "``Pizza.toppings.through`` (the intermediate m2m class)"
msgstr "``Pizza.toppings.through`` (中間の m2m クラス)"

msgid "``p`` (the ``Pizza`` instance being modified)"
msgstr "``p`` (変更されている ``Pizza`` インスタンス)"

msgid "``\"pre_add\"`` (followed by a separate signal with ``\"post_add\"``)"
msgstr "``\"pre_add\"`` (その後に別のシグナルで ``\"post_add\"`` が続く)"

msgid ""
"``False`` (``Pizza`` contains the :class:`~django.db.models."
"ManyToManyField`, so this call modifies the forward relation)"
msgstr ""
"``False`` (``Pizza`` には :class:`~django.db.models.ManyToManyField` が含まれ"
"ているため、この呼び出しは順方向のリレーションを変更します)"

msgid "``Topping`` (the class of the objects added to the ``Pizza``)"
msgstr "``Topping`` ( ``Pizza`` に追加されるオブジェクトのクラス)"

msgid "``{t.id}`` (since only ``Topping t`` was added to the relation)"
msgstr "``{t.id}``（リレーションには ``Topping t`` だけが追加されたため）"

msgid "``\"default\"`` (since the default router sends writes here)"
msgstr "``\"default\"`` (デフォルトルーターが書き込みをここに送るため)"

msgid "And if we would then do something like this:"
msgstr "そして、次のようなことをした場合："

msgid "the arguments sent to a :data:`m2m_changed` handler would be:"
msgstr ":data:`m2m_changed` ハンドラに送信される引数は以下の通りです:"

msgid "``t`` (the ``Topping`` instance being modified)"
msgstr "``t`` (変更されている ``Topping`` インスタンス)"

msgid ""
"``\"pre_remove\"`` (followed by a separate signal with ``\"post_remove\"``)"
msgstr ""
"``\"pre_remove\"`` (その後に別のシグナルとして ``\"post_remove\"`` が続きま"
"す)"

msgid ""
"``True`` (``Pizza`` contains the :class:`~django.db.models.ManyToManyField`, "
"so this call modifies the reverse relation)"
msgstr ""
"``True`` (``Pizza`` は :class:`~django.db.models.ManyToManyField` を含んでい"
"るため、この呼び出しは逆方向のリレーションを変更します)"

msgid "``Pizza`` (the class of the objects removed from the ``Topping``)"
msgstr "``Pizza`` (``Topping`` から取り除かれたオブジェクトのクラス)"

msgid "``{p.id}`` (since only ``Pizza p`` was removed from the relation)"
msgstr "``{p.id}`` (リレーションから ``Pizza p`` のみが削除されたため)"

msgid "``class_prepared``"
msgstr "``class_prepared``"

msgid ""
"Sent whenever a model class has been \"prepared\" -- that is, once a model "
"has been defined and registered with Django's model system. Django uses this "
"signal internally; it's not generally used in third-party applications."
msgstr ""
"モデルクラスが「準備完了」したとき――つまり、モデルが定義され、Djangoのモデル"
"システムに登録された後に送信されます。Djangoはこのシグナルを内部的に使用して"
"います。通常、サードパーティのアプリケーションで使用されることはありません。"

msgid ""
"Since this signal is sent during the app registry population process, and :"
"meth:`AppConfig.ready() <django.apps.AppConfig.ready>` runs after the app "
"registry is fully populated, receivers cannot be connected in that method. "
"One possibility is to connect them ``AppConfig.__init__()`` instead, taking "
"care not to import models or trigger calls to the app registry."
msgstr ""
"このシグナルはアプリ登録プロセス中に送信されます。そして :meth:`AppConfig."
"ready() <django.apps.AppConfig.ready>` はアプリ登録が完全に終了した後に実行さ"
"れますので、レシーバーをそのメソッド内で接続することはできません。一つの可能"
"性としては、 ``AppConfig.__init__()`` の中でそれらを接続することですが、モデ"
"ルをインポートしたり、アプリ登録への呼び出しを触発しないよう注意が必要です。"

msgid "Arguments that are sent with this signal:"
msgstr "このシグナルで送信される引数："

msgid "The model class which was just prepared."
msgstr "たった今準備されたモデルクラス。"

msgid "Management signals"
msgstr "管理シグナル"

msgid "Signals sent by :doc:`django-admin </ref/django-admin>`."
msgstr ":doc:`django-admin </ref/django-admin>` によって送信されるシグナル。"

msgid "``pre_migrate``"
msgstr "``pre_migrate``"

msgid ""
"Sent by the :djadmin:`migrate` command before it starts to install an "
"application. It's not emitted for applications that lack a ``models`` module."
msgstr ""
":djadmin:`migrate` コマンドによって、アプリケーションのインストールを開始する"
"前に送信されます。``models`` モジュールがないアプリケーションには発行されませ"
"ん。"

msgid ""
"An :class:`~django.apps.AppConfig` instance for the application about to be "
"migrated/synced."
msgstr ""
"マイグレーションまたは同期される予定のアプリケーションのための :class:"
"`~django.apps.AppConfig` インスタンスです。"

msgid "``app_config``"
msgstr "``app_config``"

msgid "Same as ``sender``."
msgstr "``sender`` と同じ。"

msgid "``verbosity``"
msgstr "``verbosity``"

msgid ""
"Indicates how much information ``manage.py`` is printing on screen. See the :"
"option:`--verbosity` flag for details."
msgstr ""
"``manage.py`` が画面上にどれだけ情報を表示しているかを示します。詳細について"
"は :option:`--verbosity` フラグを参照してください。"

msgid ""
"Functions which listen for :data:`pre_migrate` should adjust what they "
"output to the screen based on the value of this argument."
msgstr ""
":data:`pre_migrate` のためにリスナーとなる関数は、この引数の値に基づいて画面"
"出力を調整するべきです。"

msgid "``interactive``"
msgstr "``interactive``"

msgid ""
"If ``interactive`` is ``True``, it's safe to prompt the user to input things "
"on the command line. If ``interactive`` is ``False``, functions which listen "
"for this signal should not try to prompt for anything."
msgstr ""
"``interactive`` が ``True`` の場合、コマンドラインでユーザーに入力を求めるの"
"は安全です。 ``interactive`` が ``False`` の場合、このシグナルを待ち受ける関"
"数は何も求めてはいけません。"

msgid ""
"For example, the :mod:`django.contrib.auth` app only prompts to create a "
"superuser when ``interactive`` is ``True``."
msgstr ""
"たとえば、:mod:`django.contrib.auth` アプリは、``interactive`` が ``True`` の"
"ときのみスーパーユーザーの作成を促します。"

msgid "``stdout``"
msgstr "``stdout``"

msgid "A stream-like object where verbose output should be redirected."
msgstr "冗長な出力をリダイレクトすべきストリームのようなオブジェクト。"

msgid "The alias of database on which a command will operate."
msgstr "コマンドが操作を行うデータベースのエイリアスです。"

msgid "``plan``"
msgstr "``plan``"

msgid ""
"The migration plan that is going to be used for the migration run. While the "
"plan is not public API, this allows for the rare cases when it is necessary "
"to know the plan. A plan is a list of 2-tuples with the first item being the "
"instance of a migration class and the second item showing if the migration "
"was rolled back (``True``) or applied (``False``)."
msgstr ""
"マイグレーション実行に使用されるマイグレーションプランです。プランはパブリッ"
"クAPIではありませんが、プランを知る必要がある稀なケースに対応します。プランは"
"2値タプルのリストで、最初の項目はマイグレーションクラスのインスタンスであり、"
"2番目の項目はマイグレーションがロールバックされた (``True``) か適用された "
"(``False``) かを示します。"

msgid "``apps``"
msgstr "``apps``"

msgid ""
"An instance of :data:`Apps <django.apps>` containing the state of the "
"project before the migration run. It should be used instead of the global :"
"attr:`apps <django.apps.apps>` registry to retrieve the models you want to "
"perform operations on."
msgstr ""
"マイグレーションを実行する前のプロジェクトの状態を含む :data:`Apps <django."
"apps>` のインスタンスです。操作を行いたいモデルを取得するために、グローバル"
"な :attr:`apps <django.apps.apps>` レジストリの代わりに使用すべきです。"

msgid "``post_migrate``"
msgstr "``post_migrate``"

msgid ""
"Sent at the end of the :djadmin:`migrate` (even if no migrations are run) "
"and :djadmin:`flush` commands. It's not emitted for applications that lack a "
"``models`` module."
msgstr ""
":djadmin:`migrate` コマンドの終わりに (マイグレーションが行われなくても)、そ"
"して :djadmin:`flush` コマンドの後に送信されます。``models`` モジュールがない"
"アプリケーションには発行されません。"

msgid ""
"Handlers of this signal must not perform database schema alterations as "
"doing so may cause the :djadmin:`flush` command to fail if it runs during "
"the :djadmin:`migrate` command."
msgstr ""
"このシグナルのハンドラは、データベーススキーマの変更を行ってはなりません。な"
"ぜなら、そのような変更を行うと、:djadmin:`migrate` コマンド実行中に :djadmin:"
"`flush` コマンドが失敗する可能性があるからです。"

msgid ""
"An :class:`~django.apps.AppConfig` instance for the application that was "
"just installed."
msgstr ""
"インストールされたばかりのアプリケーション用の :class:`~django.apps."
"AppConfig` インスタンスです。"

msgid ""
"Functions which listen for :data:`post_migrate` should adjust what they "
"output to the screen based on the value of this argument."
msgstr ""
":data:`post_migrate` を待ち受ける関数は、この引数の値に基づいて画面に出力する"
"内容を調整する必要があります。"

msgid ""
"The database alias used for synchronization. Defaults to the ``default`` "
"database."
msgstr ""
"同期に使用されるデータベースエイリアスです。デフォルトは ``default`` データ"
"ベースです。"

msgid ""
"The migration plan that was used for the migration run. While the plan is "
"not public API, this allows for the rare cases when it is necessary to know "
"the plan. A plan is a list of 2-tuples with the first item being the "
"instance of a migration class and the second item showing if the migration "
"was rolled back (``True``) or applied (``False``)."
msgstr ""
"マイグレーション実行に使用されたマイグレーションプラン。プランはパブリックAPI"
"ではありませんが、プランを知る必要がある稀な場合に対応します。プランは2値タプ"
"ルのリストで、最初の項目はマイグレーションクラスのインスタンスであり、2番目の"
"項目はマイグレーションがロールバックされたか（``True``）適用されたか"
"（``False``）を示します。"

msgid ""
"An instance of :data:`Apps <django.apps.apps>` containing the state of the "
"project after the migration run. It should be used instead of the global :"
"attr:`apps <django.apps.apps>` registry to retrieve the models you want to "
"perform operations on."
msgstr ""
"マイグレーション実行後のプロジェクトの状態を保持する :data:`Apps <django."
"apps.apps>` のインスタンスです。グローバルな :attr:`apps <django.apps.apps>` "
"レジストリの代わりに、操作を行いたいモデルを取得するために使用するべきです。"

msgid ""
"For example, you could register a callback in an :class:`~django.apps."
"AppConfig` like this::"
msgstr ""
"たとえば、次のように :class:`~django.apps.AppConfig` にコールバックを登録でき"
"ます:"

msgid ""
"If you provide an :class:`~django.apps.AppConfig` instance as the sender "
"argument, please ensure that the signal is registered in :meth:`~django.apps."
"AppConfig.ready`. ``AppConfig``\\s are recreated for tests that run with a "
"modified set of :setting:`INSTALLED_APPS` (such as when settings are "
"overridden) and such signals should be connected for each new ``AppConfig`` "
"instance."
msgstr ""
":class:`~django.apps.AppConfig` インスタンスを sender 引数として提供する場合"
"は、シグナルが :meth:`~django.apps.AppConfig.ready` で登録されていることを確"
"認してください。 ``AppConfig`` は、 :setting:`INSTALLED_APPS` の変更された"
"セットで実行されるテストのために再作成されます（例えば設定が上書きされた場合"
"など）し、そのようなシグナルは新しい ``AppConfig`` インスタンスごとに接続され"
"るべきです。"

msgid "Request/response signals"
msgstr "リクエスト/レスポンス シグナル"

msgid "Signals sent by the core framework when processing a request."
msgstr "リクエストを処理する際にコアフレームワークによって送信されるシグナル。"

msgid ""
"Signals can make your code harder to maintain. Consider :doc:`using a "
"middleware </topics/http/middleware>` before using request/response signals."
msgstr ""
"シグナルはコードのメンテナンスを難しくする可能性があります。リクエスト/レスポ"
"ンスシグナルを使用する前に、 :doc:`ミドルウェアを使用する </topics/http/"
"middleware>` ことを検討してください。"

msgid "``request_started``"
msgstr "``request_started``"

msgid "Sent when Django begins processing an HTTP request."
msgstr "Django が HTTP リクエストの処理を開始したときに送信されます。"

msgid ""
"The handler class -- e.g. ``django.core.handlers.wsgi.WsgiHandler`` -- that "
"handled the request."
msgstr ""
"リクエストを処理したハンドラクラス。例えば ``django.core.handlers.wsgi."
"WsgiHandler`` が該当します。"

msgid "``environ``"
msgstr "``environ``"

msgid "The ``environ`` dictionary provided to the request."
msgstr "リクエストに提供される ``environ`` 辞書。"

msgid "``request_finished``"
msgstr "``request_finished``"

msgid "Sent when Django finishes delivering an HTTP response to the client."
msgstr "クライアントへの HTTP レスポンスの配信が完了したときに送信されます。"

msgid "The handler class, as above."
msgstr "上述のようなハンドラークラスです。"

msgid "``got_request_exception``"
msgstr "``got_request_exception``"

msgid ""
"This signal is sent whenever Django encounters an exception while processing "
"an incoming HTTP request."
msgstr ""
"このシグナルは、Djangoが受信HTTPリクエストの処理中に例外に遭遇したときにいつ"
"でも送信されます。"

msgid "Unused (always ``None``)."
msgstr "使用されません (常に ``None``)。"

msgid "The :class:`~django.http.HttpRequest` object."
msgstr ":class:`~django.http.HttpRequest` オブジェクト。"

msgid "Test signals"
msgstr "テストシグナル"

msgid "Signals only sent when :ref:`running tests <running-tests>`."
msgstr ""
"テストを :ref:`実行しているとき <running-tests>` のみ送信されるシグナル。"

msgid "``setting_changed``"
msgstr "``setting_changed``"

msgid ""
"This signal is sent when the value of a setting is changed through the "
"``django.test.TestCase.settings()`` context manager or the :func:`django."
"test.override_settings` decorator/context manager."
msgstr ""
"このシグナルは、 ``django.test.TestCase.settings()`` コンテキストマネージャ"
"や :func:`django.test.override_settings` デコレータ/コンテキストマネージャを"
"通じて設定の値が変更されたときに送信されます。"

msgid ""
"It's actually sent twice: when the new value is applied (\"setup\") and when "
"the original value is restored (\"teardown\"). Use the ``enter`` argument to "
"distinguish between the two."
msgstr ""
"実際には2回送信されます。新しい値が適用されたとき（\"setup\"）と、元の値が復"
"元されたとき（\"teardown\"）。2つを区別するには、``enter`` 引数を使用してくだ"
"さい。"

msgid ""
"You can also import this signal from ``django.core.signals`` to avoid "
"importing from ``django.test`` in non-test situations."
msgstr ""
"このシグナルは ``django.core.signals`` からインポートすることもできます。これ"
"により、テスト以外の状況で ``django.test`` からインポートすることを避けられま"
"す。"

msgid "The settings handler."
msgstr "設定ハンドラ。"

msgid "``setting``"
msgstr "``setting``"

msgid "The name of the setting."
msgstr "設定の名前。"

msgid ""
"The value of the setting after the change. For settings that initially don't "
"exist, in the \"teardown\" phase, ``value`` is ``None``."
msgstr ""
"設定変更後の設定値です。初めに存在しない設定の場合、 \"teardown\" フェーズで"
"は ``value`` は ``None`` です。"

msgid "``enter``"
msgstr "``enter``"

msgid "A boolean; ``True`` if the setting is applied, ``False`` if restored."
msgstr ""
"真偽値。設定が適用されている場合は ``True``、復元された場合は ``False``。"

msgid "``template_rendered``"
msgstr "``template_rendered``"

msgid ""
"Sent when the test system renders a template. This signal is not emitted "
"during normal operation of a Django server -- it is only available during "
"testing."
msgstr ""
"テストシステムがテンプレートをレンダリングするときに送信されます。このシグナ"
"ルは、Djangoサーバーの通常の操作中には発生しません。テスト中にのみ利用可能で"
"す。"

msgid "The :class:`~django.template.Template` object which was rendered."
msgstr "レンダリングされた :class:`~django.template.Template` オブジェクト。"

msgid "``template``"
msgstr "``template``"

msgid "Same as sender"
msgstr "送信者と同じ"

msgid "``context``"
msgstr "``context``"

msgid ""
"The :class:`~django.template.Context` with which the template was rendered."
msgstr ""
"テンプレートがレンダリングされた際の :class:`~django.template.Context` 。"

msgid "Database Wrappers"
msgstr "データベースラッパー"

msgid ""
"Signals sent by the database wrapper when a database connection is initiated."
msgstr ""
"データベース接続が開始されたときに、データベースラッパーによって送信されるシ"
"グナル。"

msgid "``connection_created``"
msgstr "``connection_created``"

msgid ""
"Sent when the database wrapper makes the initial connection to the "
"database.  This is particularly useful if you'd like to send any post "
"connection commands to the SQL backend."
msgstr ""
"データベースラッパーがデータベースに最初の接続を行ったときに送信されます。こ"
"れは、SQLバックエンドに接続後のコマンドを送信したい場合に特に便利です。"

msgid ""
"The database wrapper class -- i.e. ``django.db.backends.postgresql."
"DatabaseWrapper`` or ``django.db.backends.mysql.DatabaseWrapper``, etc."
msgstr ""
"データベースラッパークラス ― つまり、 ``django.db.backends.postgresql."
"DatabaseWrapper`` や ``django.db.backends.mysql.DatabaseWrapper`` などです。"

msgid ""
"The database connection that was opened. This can be used in a multiple-"
"database configuration to differentiate connection signals from different "
"databases."
msgstr ""
"オープンされたデータベース接続です。これは、複数のデータベース設定を使用する"
"際に、異なるデータベースからの接続シグナルを区別するために使用されます。"

msgid "``TemplateResponse`` and ``SimpleTemplateResponse``"
msgstr "``TemplateResponse`` および ``SimpleTemplateResponse``"

msgid ""
"Standard :class:`~django.http.HttpResponse` objects are static structures. "
"They are provided with a block of pre-rendered content at time of "
"construction, and while that content can be modified, it isn't in a form "
"that makes it easy to perform modifications."
msgstr ""
"標準の :class:`~django.http.HttpResponse` オブジェクトは静的な構造体です。構"
"築時にあらかじめレンダリングされたコンテンツのブロックが提供され、そのコンテ"
"ンツは変更可能ですが、簡単に変更できる形ではありません。"

msgid ""
"However, it can sometimes be beneficial to allow decorators or middleware to "
"modify a response *after* it has been constructed by the view. For example, "
"you may want to change the template that is used, or put additional data "
"into the context."
msgstr ""
"しかし、デコレータやミドルウェアが、 ビューでレスポンスが作成された後にレスポ"
"ンスを変更できるようにすることは、 場合によっては有益なこともあります。たとえ"
"ば、使用するテンプレートを変更したり、追加データをコンテキストに追加したりし"
"たくなるかもしれません。"

msgid ""
"TemplateResponse provides a way to do just that. Unlike basic :class:"
"`~django.http.HttpResponse` objects, TemplateResponse objects retain the "
"details of the template and context that was provided by the view to compute "
"the response. The final output of the response is not computed until it is "
"needed, later in the response process."
msgstr ""
"TemplateResponse はそのための方法を提供します。基本的な :class:`~django.http."
"HttpResponse` オブジェクトとは異なり、 TemplateResponse オブジェクトはレスポ"
"ンスを計算するためにビューから提供されたテンプレートとコンテキストの詳細を保"
"持します。レスポンスの最終的な出力は、レスポンス処理の後半で必要になるまで計"
"算されません。"

msgid "``SimpleTemplateResponse`` objects"
msgstr "``SimpleTemplateResponse`` オブジェクト"

msgid ""
"The name of the template to be rendered. Accepts a backend-dependent "
"template object (such as those returned by :func:`~django.template.loader."
"get_template()`), the name of a template, or a list of template names."
msgstr ""
"レンダリングするテンプレートの名前です。 :func:`~django.template.loader."
"get_template()` が返すような）バックエンド依存のテンプレートオブジェクト、テ"
"ンプレート名、またはテンプレート名のリストを受け入れます。"

msgid "Example: ``['foo.html', 'path/to/bar.html']``"
msgstr "例: ``['foo.html', 'path/to/bar.html']``"

msgid ""
"The context data to be used when rendering the template. It must be a :class:"
"`dict`."
msgstr ""
"テンプレートをレンダリングするときに使用するコンテキストデータ。 これは :"
"class:`dict` でなければなりません。"

msgid "Example: ``{'foo': 123}``"
msgstr "例: ``{'foo': 123}``"

msgid ""
"The current rendered value of the response content, using the current "
"template and context data."
msgstr ""
"現在のテンプレートとコンテキストデータを使ってレンダリングされた、レスポンス"
"コンテンツの現在の値。"

msgid "A boolean indicating whether the response content has been rendered."
msgstr "レスポンスの内容がレンダリングされたかどうかを示す真偽値。"

msgid ""
"Instantiates a :class:`~django.template.response.SimpleTemplateResponse` "
"object with the given template, context, content type, HTTP status, and "
"charset."
msgstr ""
":class:`~django.template.response.SimpleTemplateResponse` オブジェクトを、与"
"えられたテンプレート、コンテキスト、コンテンツタイプ、HTTP ステータス、文字"
"コードでインスタンス化します。"

msgid ""
"A backend-dependent template object (such as those returned by :func:"
"`~django.template.loader.get_template()`), the name of a template, or a list "
"of template names."
msgstr ""
"(:func:`~django.template.loader.get_template()` が返すような) バックエンド依"
"存のテンプレートオブジェクト、テンプレートの名前、またはテンプレート名のリス"
"ト。"

msgid ""
"A :class:`dict` of values to add to the template context. By default, this "
"is an empty dictionary."
msgstr ""
"テンプレートコンテキストに追加する値の :class:`dict` 。デフォルトでは空の辞書"
"です。"

msgid "``content_type``"
msgstr "``content_type``"

msgid ""
"The value included in the HTTP ``Content-Type`` header, including the MIME "
"type specification and the character set encoding. If ``content_type`` is "
"specified, then its value is used. Otherwise, ``'text/html'`` is used."
msgstr ""
"HTTP の ``Content-Type`` ヘッダに含まれる値で、MIME タイプ指定と文字セットエ"
"ンコーディングを含みます。もし ``content_type`` が指定されていれば、その値が"
"使われます。それ以外の場合は ``'text/html'`` が使用されます。"

msgid "``status``"
msgstr "``status``"

msgid "The HTTP status code for the response."
msgstr "レスポンスの HTTP ステータスコード"

msgid "``charset``"
msgstr "``charset``"

msgid ""
"The charset in which the response will be encoded. If not given it will be "
"extracted from ``content_type``, and if that is unsuccessful, the :setting:"
"`DEFAULT_CHARSET` setting will be used."
msgstr ""
"レスポンスがエンコードされる文字コード。省略された場合は ``content_type`` か"
"ら抽出され、それが失敗した場合は :setting:`DEFAULT_CHARSET` の設定が使用され"
"ます。"

msgid ""
"The :setting:`NAME <TEMPLATES-NAME>` of a template engine to use for loading "
"the template."
msgstr ""
"テンプレートを読み込むために使用するテンプレートエンジンの :setting:`NAME "
"<TEMPLATES-NAME>` を指定します。"

msgid "``headers``"
msgstr "``headers``"

msgid "A :class:`dict` of HTTP headers to add to the response."
msgstr "レスポンスに追加するHTTPヘッダーの :class:`dict` 。"

msgid ""
"Preprocesses context data that will be used for rendering a template. "
"Accepts a :class:`dict` of context data. By default, returns the same :class:"
"`dict`."
msgstr ""
"テンプレートのレンダリングに使用されるコンテキストデータを前処理します。コン"
"テキストデータの :class:`dict` を受け取ります。デフォルトでは同じ :class:"
"`dict` を返します。"

msgid "Override this method in order to customize the context."
msgstr ""
"コンテキストをカスタマイズするには、このメソッドをオーバーライドします。"

msgid ""
"Resolves the template instance to use for rendering. Accepts a backend-"
"dependent template object (such as those returned by :func:`~django.template."
"loader.get_template()`), the name of a template, or a list of template names."
msgstr ""
"レンダリングに使用するテンプレートのインスタンスを解決します。(:func:"
"`~django.template.loader.get_template()` が返すような) バックエンド依存のテン"
"プレートオブジェクト、テンプレート名、またはテンプレート名のリストを受け付け"
"ます。"

msgid "Returns the backend-dependent template object instance to be rendered."
msgstr ""
"レンダリングするバックエンド依存のテンプレートオブジェクトインスタンスを返し"
"ます。"

msgid "Override this method in order to customize template loading."
msgstr ""
"テンプレートの読み込みをカスタマイズするには、このメソッドをオーバーライドし"
"ます。"

msgid ""
"Add a callback that will be invoked after rendering has taken place. This "
"hook can be used to defer certain processing operations (such as caching) "
"until after rendering has occurred."
msgstr ""
"レンダリングが行われた後に呼び出されるコールバックを追加します。このフックを"
"使用すると、特定の処理 (キャッシュなど) をレンダリングが完了するまで延期でき"
"ます。"

msgid ""
"If the :class:`~django.template.response.SimpleTemplateResponse` has already "
"been rendered, the callback will be invoked immediately."
msgstr ""
":class:`~django.template.response.SimpleTemplateResponse` がすでにレンダリン"
"グされている場合、コールバックは直ちに呼び出されます。"

msgid ""
"When called, callbacks will be passed a single argument -- the rendered :"
"class:`~django.template.response.SimpleTemplateResponse` instance."
msgstr ""
"呼び出されると、コールバックは単一の引数、つまりレンダリングされた :class:"
"`~django.template.response.SimpleTemplateResponse` インスタンスを渡されます。"

msgid ""
"If the callback returns a value that is not ``None``, this will be used as "
"the response instead of the original response object (and will be passed to "
"the next post rendering callback etc.)"
msgstr ""
"コールバックが ``None`` 以外の値を返した場合、元のレスポンスオブジェクトの代"
"わりにこの値がレスポンスとして使用されます（次のレンダリング後コールバックな"
"どに渡されます）。"

msgid ""
"Sets ``response.content`` to the result obtained by :attr:"
"`SimpleTemplateResponse.rendered_content`, runs all post-rendering "
"callbacks, and returns the resulting response object."
msgstr ""
"``response.content`` を :attr:`SimpleTemplateResponse.rendered_content` で取"
"得した結果にセットし、全てのレンダリング後コールバックを実行し、結果のレスポ"
"ンスオブジェクトを返します。"

msgid ""
"``render()`` will only have an effect the first time it is called. On "
"subsequent calls, it will return the result obtained from the first call."
msgstr ""
"``render()`` は最初に呼び出されたときだけ効果を発揮します。それ以降の呼び出し"
"では、最初の呼び出しで得られた結果を返します。"

msgid "``TemplateResponse`` objects"
msgstr "``TemplateResponse`` オブジェクト"

msgid ""
"``TemplateResponse`` is a subclass of :class:`~django.template.response."
"SimpleTemplateResponse` that knows about the current :class:`~django.http."
"HttpRequest`."
msgstr ""
"``TemplateResponse`` は :class:`~django.template.response."
"SimpleTemplateResponse` のサブクラスで、現在の :class:`~django.http."
"HttpRequest` について知っています。"

msgid ""
"Instantiates a :class:`~django.template.response.TemplateResponse` object "
"with the given request, template, context, content type, HTTP status, and "
"charset."
msgstr ""
":class:`~django.template.response.TemplateResponse` オブジェクトを、与えられ"
"たリクエスト、テンプレート、コンテキスト、コンテンツタイプ、HTTP ステータス、"
"文字コードでインスタンス化します。"

msgid "An :class:`~django.http.HttpRequest` instance."
msgstr ":class:`~django.http.HttpRequest` インスタンスです。"

msgid "The rendering process"
msgstr "レンダリングプロセス"

msgid ""
"Before a :class:`~django.template.response.TemplateResponse` instance can be "
"returned to the client, it must be rendered. The rendering process takes the "
"intermediate representation of template and context, and turns it into the "
"final byte stream that can be served to the client."
msgstr ""
":class:`~django.template.response.TemplateResponse` インスタンスをクライアン"
"トに返す前に、レンダリングする必要があります。レンダリングプロセスはテンプ"
"レートとコンテキストの中間表現を受け取り、クライアントに提供できる最終的なバ"
"イトストリームに変えます。"

msgid ""
"There are three circumstances under which a ``TemplateResponse`` will be "
"rendered:"
msgstr "``TemplateResponse`` がレンダリングされる状況は3つあります："

msgid ""
"When the ``TemplateResponse`` instance is explicitly rendered, using the :"
"meth:`SimpleTemplateResponse.render()` method."
msgstr ""
"TemplateResponse インスタンスが :meth:`SimpleTemplateResponse.render()` メ"
"ソッドを使用して明示的にレンダリングされた場合。"

msgid ""
"When the content of the response is explicitly set by assigning ``response."
"content``."
msgstr ""
"レスポンスの内容を ``response.content`` に代入して明示的にセットした場合。"

msgid ""
"After passing through template response middleware, but before passing "
"through response middleware."
msgstr ""
"テンプレート・レスポンス・ミドルウェアを通過した後、レスポンス・ミドルウェア"
"を通過する前。"

msgid ""
"A ``TemplateResponse`` can only be rendered once. The first call to :meth:"
"`SimpleTemplateResponse.render` sets the content of the response; subsequent "
"rendering calls do not change the response content."
msgstr ""
"``TemplateResponse`` は一度しかレンダリングできません。最初に :meth:"
"`SimpleTemplateResponse.render` を呼び出すと、レスポンスの内容がセットされま"
"す。それ以降にレンダリングを呼び出しても、レスポンスの内容は変更されません。"

msgid ""
"However, when ``response.content`` is explicitly assigned, the change is "
"always applied. If you want to force the content to be re-rendered, you can "
"reevaluate the rendered content, and assign the content of the response "
"manually:"
msgstr ""
"しかし、``response.content`` を明示的に代入すると、その変更は常に適用されま"
"す。コンテンツを強制的に再レンダリングしたい場合は、以下のようにレンダリング"
"されたコンテンツを再評価し、レスポンスのコンテンツを手動で割り当てます："

msgid "Post-render callbacks"
msgstr "レンダリング後のコールバック"

msgid ""
"Some operations -- such as caching -- cannot be performed on an unrendered "
"template. They must be performed on a fully complete and rendered response."
msgstr ""
"キャッシュのようないくつかの操作は、レンダリングされていないテンプレートでは"
"実行できません。それらは完全に完成し、レンダリングされたレスポンスに対して実"
"行されなければなりません。"

msgid ""
"If you're using middleware, you can do that. Middleware provides multiple "
"opportunities to process a response on exit from a view. If you put behavior "
"in the response middleware, it's guaranteed to execute after template "
"rendering has taken place."
msgstr ""
"ミドルウェアを使用している場合は、それが可能です。ミドルウェアは、ビューから"
"の終了時にレスポンスを処理する複数の機会を提供します。レスポンスミドルウェア"
"に処理を記述すれば、テンプレートのレンダリングが行われた後に実行されることが"
"保証されます。"

msgid ""
"However, if you're using a decorator, the same opportunities do not exist. "
"Any behavior defined in a decorator is handled immediately."
msgstr ""
"しかし、デコレータを使用している場合は、そのような機会はありません。デコレー"
"タで定義された処理は、即座に実行されます。"

msgid ""
"To compensate for this (and any other analogous use cases), :class:"
"`TemplateResponse` allows you to register callbacks that will be invoked "
"when rendering has completed. Using this callback, you can defer critical "
"processing until a point where you can guarantee that rendered content will "
"be available."
msgstr ""
"これを避けるために(そして他の類似のユースケースを補うために) :class:"
"`TemplateResponse` ではレンダリングが完了したときに呼び出されるコールバックを"
"登録できます。このコールバックを使うことで、レンダリングされたコンテンツが利"
"用可能になるまで、重要な処理を延期できます。"

msgid ""
"To define a post-render callback, define a function that takes a single "
"argument -- response -- and register that function with the template "
"response::"
msgstr ""
"レンダリング後のコールバックを定義するには、response を引数に取る関数を定義"
"し、その関数をテンプレートの response に登録します："

msgid ""
"``my_render_callback()`` will be invoked after the ``mytemplate.html`` has "
"been rendered, and will be provided the fully rendered :class:"
"`TemplateResponse` instance as an argument."
msgstr ""
"``my_render_callback()`` は ``mytemplate.html`` がレンダリングされた後に呼び"
"出され、完全にレンダリングされた :class:`TemplateResponse` インスタンスが引数"
"として渡されます。"

msgid ""
"If the template has already been rendered, the callback will be invoked "
"immediately."
msgstr ""
"テンプレートが既にレンダリングされている場合、コールバックは直ちに呼び出され"
"ます。"

msgid "Using ``TemplateResponse`` and ``SimpleTemplateResponse``"
msgstr "``TemplateResponse`` および ``SimpleTemplateResponse`` を使用する"

msgid ""
"A :class:`TemplateResponse` object can be used anywhere that a normal :class:"
"`django.http.HttpResponse` can be used. It can also be used as an "
"alternative to calling :func:`~django.shortcuts.render()`."
msgstr ""
":class:`TemplateResponse` オブジェクトは、通常の :class:`django.http."
"HttpResponse` が使用できる場所ならどこでも使用できます。また、 :func:"
"`~django.shortcuts.render()` を呼び出す代わりとしても使用できます。"

msgid ""
"For example, the following view returns a :class:`TemplateResponse` with a "
"template and a context containing a queryset::"
msgstr ""
"たとえば、以下のビューはテンプレートとクエリセットを含むコンテキストを持つ :"
"class:`TemplateResponse` を返します："

msgid "The Django template language: for Python programmers"
msgstr "Python プログラマーのための Django テンプレート言語"

msgid ""
"This document explains the Django template system from a technical "
"perspective -- how it works and how to extend it. If you're looking for "
"reference on the language syntax, see :doc:`/ref/templates/language`."
msgstr ""
"この文書は Django テンプレートシステムがどのように動作し、どのように拡張する"
"か、技術的な観点から説明します。構文に関するリファレンスを探しているなら、 :"
"doc:`/ref/templates/language` を参照してください。"

msgid ""
"It assumes an understanding of templates, contexts, variables, tags, and "
"rendering. Start with the :ref:`introduction to the Django template language "
"<template-language-intro>` if you aren't familiar with these concepts."
msgstr ""
"テンプレート、 コンテキスト、変数、タグ、レンダリングについての理解を前提とし"
"ています。これらの概念に馴染みがなければ、 :ref:`Django テンプレート言語入門 "
"<template-language-intro>` からスタートしてください。"

msgid "Using the template system in Python is a three-step process:"
msgstr "Pythonでテンプレートシステムを使うには3つのステップがあります："

msgid "You configure an :class:`Engine`."
msgstr ":class:`Engine` を設定します。"

msgid "You compile template code into a :class:`Template`."
msgstr "テンプレートコードを :class:`Template` にコンパイルします。"

msgid "You render the template with a :class:`Context`."
msgstr "テンプレートを :class:`Context` においてレンダリングします。"

msgid ""
"Django projects generally rely on the :ref:`high level, backend agnostic "
"APIs <template-engines>` for each of these steps instead of the template "
"system's lower level APIs:"
msgstr ""
"これらの各ステップで、Django プロジェクトは通常、テンプレートシステムの低レベ"
"ルの API ではなく、 :ref:`バックエンドに依存しない高レベルの API <template-"
"engines>` に依存しています："

msgid ""
"For each :class:`~django.template.backends.django.DjangoTemplates` backend "
"in the :setting:`TEMPLATES` setting, Django instantiates an :class:"
"`Engine`. :class:`~django.template.backends.django.DjangoTemplates` wraps :"
"class:`Engine` and adapts it to the common template backend API."
msgstr ""
":setting:`TEMPLATES` 設定の中で、各 :class:`~django.template.backends.django."
"DjangoTemplates` バックエンドに対して、Djangoは :class:`Engine` をインスタン"
"ス化します。:class:`~django.template.backends.django.DjangoTemplates` は :"
"class:`Engine` をラップし、共通のテンプレートバックエンドAPIに適応させます。"

msgid ""
"The :mod:`django.template.loader` module provides functions such as :func:"
"`~django.template.loader.get_template` for loading templates. They return a "
"``django.template.backends.django.Template`` which wraps the actual :class:"
"`django.template.Template`."
msgstr ""
":mod:`django.template.loader` モジュールはテンプレートを読み込むための :func:"
"`~django.template.loader.get_template` のなどの関数を提供します。これらは実際"
"の :class:`django.template.Template` をラップした ``django.template.backends."
"django.Template`` を返します。"

msgid ""
"The ``Template`` obtained in the previous step has a :meth:`~django.template."
"backends.base.Template.render` method which marshals a context and possibly "
"a request into a :class:`Context` and delegates the rendering to the "
"underlying :class:`Template`."
msgstr ""
"前のステップで取得した ``Template`` には :meth:`~django.template.backends."
"base.Template.render` メソッドがあり、コンテキストと場合によってはリクエスト"
"を :class:`Context` に集約し、その下にある :class:`Template` にレンダリングを"
"委譲します。"

msgid "Configuring an engine"
msgstr "エンジンを設定する"

msgid ""
"If you are using the :class:`~django.template.backends.django."
"DjangoTemplates` backend, this probably isn't the documentation you're "
"looking for. An instance of the ``Engine`` class described below is "
"accessible using the ``engine`` attribute of that backend and any attribute "
"defaults mentioned below are overridden by what's passed by :class:`~django."
"template.backends.django.DjangoTemplates`."
msgstr ""
"もし :class:`~django.template.backends.django.DjangoTemplates` バックエンドを"
"使っているのであれば、これはおそらくあなたが探しているドキュメントではありま"
"せん。後述する ``Engine`` クラスのインスタンスには、そのバックエンドの "
"``engine`` 属性を使ってアクセスすることができ、後述する属性のデフォルトは :"
"class:`~django.template.backends.django.DjangoTemplates` で渡されたもので上書"
"きされます。"

msgid ""
"When instantiating an ``Engine`` all arguments must be passed as keyword "
"arguments:"
msgstr ""
"``Engine`` をインスタンス化する際は、すべての引数をキーワード引数として渡す必"
"要があります："

msgid ""
"``dirs`` is a list of directories where the engine should look for template "
"source files. It is used to configure :class:`filesystem.Loader <django."
"template.loaders.filesystem.Loader>`."
msgstr ""
"``dirs`` はエンジンがテンプレートのソースファイルを探すディレクトリのリストで"
"す。これは :class:`filesystem.Loader <django.template.loaders.filesystem."
"Loader>` を設定するために使用されます。"

msgid "It defaults to an empty list."
msgstr "デフォルトは空のリストです。"

msgid "``app_dirs`` only affects the default value of ``loaders``. See below."
msgstr ""
"``app_dirs`` は ``loaders`` のデフォルト値にだけ影響します。下記を参照してく"
"ださい。"

msgid "It defaults to ``False``."
msgstr "デフォルトは ``False`` です。"

msgid "``autoescape`` controls whether HTML autoescaping is enabled."
msgstr ""
"``autoescape`` はHTMLのオートエスケープを有効にするかどうかをコントロールしま"
"す。"

msgid "It defaults to ``True``."
msgstr "デフォルトは ``True`` です。"

msgid "Only set it to ``False`` if you're rendering non-HTML templates!"
msgstr ""
"HTML以外のテンプレートをレンダリングする場合のみ ``False`` に設定してくださ"
"い！"

msgid ""
"``context_processors`` is a list of dotted Python paths to callables that "
"are used to populate the context when a template is rendered with a request. "
"These callables take a request object as their argument and return a :class:"
"`dict` of items to be merged into the context."
msgstr ""
"``'context_processors'`` は、リクエストでテンプレートがレンダリングされるとき"
"にコンテキストを生成するために使用される呼び出し可能オブジェクトへの Python "
"のドット区切りパスのリストです。これらの呼び出し可能オブジェクトはリクエスト"
"オブジェクトを引数として取り、コンテキストにマージされるアイテムの :class:"
"`dict` を返します。"

msgid "See :class:`~django.template.RequestContext` for more information."
msgstr "詳しくは :class:`~django.template.RequestContext` を参照してください。"

msgid ""
"``debug`` is a boolean that turns on/off template debug mode. If it is "
"``True``, the template engine will store additional debug information which "
"can be used to display a detailed report for any exception raised during "
"template rendering."
msgstr ""
"``debug`` はテンプレートのデバッグモードのオン/オフを切り替える真偽値です。も"
"し ``True`` なら、テンプレートエンジンは追加のデバッグ情報を保存し、テンプ"
"レートのレンダリング中に例外が発生した場合に詳細なレポートを表示できます。"

msgid ""
"``loaders`` is a list of template loader classes, specified as strings. Each "
"``Loader`` class knows how to import templates from a particular source. "
"Optionally, a tuple can be used instead of a string. The first item in the "
"tuple should be the ``Loader`` class name, subsequent items are passed to "
"the ``Loader`` during initialization."
msgstr ""
"``loaders`` はテンプレートローダクラスのリストで、文字列で指定します。各 "
"``Loader`` クラスは特定のソースからテンプレートをインポートする方法を知ってい"
"ます。任意で、文字列の代わりにタプルを使うこともできます。タプルの最初の項目"
"は ``Loader`` クラス名で、それ以降の項目は初期化時に ``Loader`` に渡されま"
"す。"

msgid "It defaults to a list containing:"
msgstr "リストにはデフォルトでは下記が含まれます："

msgid "``'django.template.loaders.filesystem.Loader'``"
msgstr "``'django.template.loaders.filesystem.Loader'``"

msgid ""
"``'django.template.loaders.app_directories.Loader'`` if and only if "
"``app_dirs`` is ``True``."
msgstr ""
"``'django.template.loaders.app_directories.Loader'`` 、これが含まれるのは "
"``app_dirs`` が ``True`` の場合だけです。"

msgid ""
"These loaders are then wrapped in :class:`django.template.loaders.cached."
"Loader`."
msgstr ""
"これらのローダーは :class:`django.template.loaders.cached.Loader` でラップさ"
"れます。"

msgid "See :ref:`template-loaders` for details."
msgstr "詳しくは :ref:`template-loaders` を参照してください。"

msgid ""
"``string_if_invalid`` is the output, as a string, that the template system "
"should use for invalid (e.g. misspelled) variables."
msgstr ""
"``'string_if_invalid'`` は、無効な(例えばスペルミスのある)変数に対してテンプ"
"レートシステムが使用する文字列です。"

msgid "It defaults to the empty string."
msgstr "デフォルトは空文字列です。"

msgid "See :ref:`invalid-template-variables` for details."
msgstr "詳しくは :ref:`invalid-template-variables` を参照してください。"

msgid "``file_charset`` is the charset used to read template files on disk."
msgstr ""
"``'file_charset'`` は、ディスク上のテンプレートファイルを読み込む際に使用する"
"文字セットです。"

msgid "It defaults to ``'utf-8'``."
msgstr "デフォルトは ``'utf-8'`` です。"

msgid ""
"``'libraries'``: A dictionary of labels and dotted Python paths of template "
"tag modules to register with the template engine. This is used to add new "
"libraries or provide alternate labels for existing ones. For example::"
msgstr ""
"``'libraries'``: テンプレートエンジンに登録するテンプレートタグモジュールのラ"
"ベルとドット区切りPythonパスの辞書。これは新しいライブラリを追加したり、既存"
"のライブラリの代替ラベルを提供するために使用します。たとえば下記のように："

msgid ""
"Libraries can be loaded by passing the corresponding dictionary key to the :"
"ttag:`{% load %}<load>` tag."
msgstr ""
":ttag:`{% load %}<load>` タグに対応する辞書のキーを渡すことでライブラリをロー"
"ドできます。"

msgid ""
"``'builtins'``: A list of dotted Python paths of template tag modules to add "
"to :doc:`built-ins </ref/templates/builtins>`. For example::"
msgstr ""
"``'builtins'``: :doc:`ビルトイン </ref/templates/builtins>` に追加するテンプ"
"レートタグモジュールのドット区切りPythonパスのリストです。たとえば:"

msgid ""
"Tags and filters from built-in libraries can be used without first calling "
"the :ttag:`{% load %}<load>` tag."
msgstr ""
":ttag:`{% load %}<load>` タグを呼び出さなくても、組み込みライブラリのタグや"
"フィルタを使うことができます。"

msgid ""
"Returns the underlying :class:`Engine` from the first configured :class:"
"`~django.template.backends.django.DjangoTemplates` engine. Raises :exc:"
"`~django.core.exceptions.ImproperlyConfigured` if no engines are configured."
msgstr ""
"最初に設定された :class:`~django.template.backends.django.DjangoTemplates` エ"
"ンジンから :class:`Engine` を返します。エンジンが設定されていない場合、 :exc:"
"`~django.core.exceptions.ImproperlyConfigured` を発生させます。"

msgid ""
"It's required for preserving APIs that rely on a globally available, "
"implicitly configured engine. Any other use is strongly discouraged."
msgstr ""
"これは、グローバルに利用可能で、暗黙的に設定されたエンジンに依存するAPIを保持"
"するために必要です。それ以外の使用は強く推奨されません。"

msgid ""
"Compiles the given template code and returns a :class:`Template` object."
msgstr ""
"与えられたテンプレートコードをコンパイルして :class:`Template` オブジェクトを"
"返します。"

msgid ""
"Loads a template with the given name, compiles it and returns a :class:"
"`Template` object."
msgstr ""
"与えられた名前のテンプレートを読み込んでコンパイルし、 :class:`Template` オブ"
"ジェクトを返します。"

msgid ""
"Like :meth:`~Engine.get_template`, except it takes a list of names and "
"returns the first template that was found."
msgstr ""
":meth:`~Engine.get_template` と同様ですが、名前のリストを受け取り、最初に見つ"
"かったテンプレートを返します。"

msgid "Loading a template"
msgstr "テンプレートを読み込む"

msgid ""
"The recommended way to create a :class:`Template` is by calling the factory "
"methods of the :class:`Engine`: :meth:`~Engine.get_template`, :meth:`~Engine."
"select_template` and :meth:`~Engine.from_string`."
msgstr ""
":class:`Template` を作成する推奨される方法は :class:`Engine` のファクトリーメ"
"ソッドを呼び出すことです。これは :meth:`~Engine.get_template`, :meth:"
"`~Engine.select_template`, :meth:`~Engine.from_string` を指します。"

msgid ""
"In a Django project where the :setting:`TEMPLATES` setting defines a :class:"
"`~django.template.backends.django.DjangoTemplates` engine, it's possible to "
"instantiate a :class:`Template` directly. If more than one :class:`~django."
"template.backends.django.DjangoTemplates` engine is defined, the first one "
"will be used."
msgstr ""
":setting:`TEMPLATES` 設定で :class:`~django.template.backends.django."
"DjangoTemplates` エンジンが定義されている Django プロジェクトでは、 :class:"
"`Template` を直接インスタンス化できます。複数の :class:`~django.template."
"backends.django.DjangoTemplates` エンジンが定義されている場合、最初のものが使"
"用されます。"

msgid ""
"This class lives at ``django.template.Template``. The constructor takes one "
"argument — the raw template code::"
msgstr ""
"このクラスは ``django.template.Template`` にあります。コンストラクタは1つの引"
"数（生のテンプレートコード）を取ります："

msgid "Behind the scenes"
msgstr "背景"

msgid ""
"The system only parses your raw template code once -- when you create the "
"``Template`` object. From then on, it's stored internally as a tree "
"structure for performance."
msgstr ""
"システムは生のテンプレートコードを一度だけ解析します。 ``Template`` オブジェ"
"クトを作成するときです。それ以降は、パフォーマンスのために内部的にツリー構造"
"として保存されます。"

msgid ""
"Even the parsing itself is quite fast. Most of the parsing happens via a "
"single call to a single, short, regular expression."
msgstr ""
"構文解析自体も非常に高速です。構文解析のほとんどは、1つの短い正規表現を呼び出"
"すだけで行われます。"

msgid "Rendering a context"
msgstr "コンテキストをレンダリングする"

msgid ""
"Once you have a compiled :class:`Template` object, you can render a context "
"with it. You can reuse the same template to render it several times with "
"different contexts."
msgstr ""
"一度コンパイルされた :class:`Template` オブジェクトがあれば、それを使ってコン"
"テキストをレンダリングできます。同じテンプレートを再利用して、異なるコンテキ"
"ストで何度でもレンダリングできます。"

msgid ""
"The constructor of ``django.template.Context`` takes an optional argument — "
"a dictionary mapping variable names to variable values."
msgstr ""
"``django.template.Context`` のコンストラクタは、オプションの引数（変数名と変"
"数の値をマッピングした辞書）を取ります。"

msgid "For details, see :ref:`playing-with-context` below."
msgstr "詳細は以下の :ref:`playing-with-context` を参照してください。"

msgid ""
"Call the :class:`Template` object's ``render()`` method with a :class:"
"`Context` to \"fill\" the template:"
msgstr ""
":class:`Context` を指定して :class:`Template` オブジェクトの ``render()`` メ"
"ソッドを呼び出します："

msgid "Variables and lookups"
msgstr "変数とルックアップ"

msgid ""
"Variable names must consist of any letter (A-Z), any digit (0-9), an "
"underscore (but they must not start with an underscore) or a dot."
msgstr ""
"変数名はアルファベット(A-Z)、数字(0-9)、アンダースコア(ただしアンダースコアで"
"始まってはならない)、ドットで構成されていなければなりません。"

msgid ""
"Dots have a special meaning in template rendering. A dot in a variable name "
"signifies a **lookup**. Specifically, when the template system encounters a "
"dot in a variable name, it tries the following lookups, in this order:"
msgstr ""
"ドットはテンプレートレンダリングにおいて特別な意味を持ちます。変数名のドット"
"は **ルックアップ** を意味します。具体的には、テンプレートシステムが変数名で"
"ドットを見つけると、以下の順番でルックアップを試みます："

msgid "Dictionary lookup. Example: ``foo[\"bar\"]``"
msgstr "辞書のルックアップ。例： ``foo[\"bar\"]``"

msgid "Attribute lookup. Example: ``foo.bar``"
msgstr "属性のルックアップ。例： ``foo.bar``"

msgid "List-index lookup. Example: ``foo[bar]``"
msgstr "リストインデックスのルックアップ。例： ``foo[bar]``"

msgid ""
"Note that \"bar\" in a template expression like ``{{ foo.bar }}`` will be "
"interpreted as a literal string and not using the value of the variable "
"\"bar\", if one exists in the template context."
msgstr ""
"テンプレートコンテキストに変数 \"bar \"が存在する場合、``{{ foo.bar }}`` のよ"
"うなテンプレート式中の \"bar \"はリテラル文字列として解釈され、変数 \"bar\" "
"の値は使用されないことに注意してください。"

msgid ""
"The template system uses the first lookup type that works. It's short-"
"circuit logic. Here are a few examples:"
msgstr ""
"テンプレートシステムは、最初に機能するルックアップ・タイプを使用します。これ"
"は短絡ロジックです。以下はその例です："

msgid ""
"If any part of the variable is callable, the template system will try "
"calling it. Example:"
msgstr ""
"もし変数のどれかが呼び出し可能オブジェクトであれば、テンプレートシステムは呼"
"び出しを試みます。例："

msgid ""
"Callable variables are slightly more complex than variables which only "
"require straight lookups. Here are some things to keep in mind:"
msgstr ""
"呼び出し可能な変数は、単純なルックアップしか必要としない変数よりも少し複雑で"
"す。以下に注意すべき点を示します："

msgid ""
"If the variable raises an exception when called, the exception will be "
"propagated, unless the exception has an attribute "
"``silent_variable_failure`` whose value is ``True``. If the exception *does* "
"have a ``silent_variable_failure`` attribute whose value is ``True``, the "
"variable will render as the value of the engine's ``string_if_invalid`` "
"configuration option (an empty string, by default). Example:"
msgstr ""
"この変数が呼び出されたときに例外が発生した場合、例外が "
"``silent_variable_failure`` 属性の値が ``True`` でない限り、例外は伝播しま"
"す。例外に ``silent_variable_failure`` 属性があり、その値が ``True`` である場"
"合、その変数はエンジンの ``string_if_invalid`` 設定オプションの値（デフォルト"
"では空文字列）としてレンダリングされます。例："

msgid ""
"Note that :exc:`django.core.exceptions.ObjectDoesNotExist`, which is the "
"base class for all Django database API ``DoesNotExist`` exceptions, has "
"``silent_variable_failure = True``. So if you're using Django templates with "
"Django model objects, any ``DoesNotExist`` exception will fail silently."
msgstr ""
":exc:`django.core.exceptions.ObjectDoesNotExist` はすべての Django データベー"
"ス API の ``DoesNotExist`` 例外用の基本クラスですが、 "
"``silent_variable_failure = True`` を持っていることに注意してください。そのた"
"め、 Django モデルオブジェクトで Django テンプレートを使っている場合、 "
"``DoesNotExist`` 例外はすべてサイレントエラーになります。"

msgid ""
"A variable can only be called if it has no required arguments. Otherwise, "
"the system will return the value of the engine's ``string_if_invalid`` "
"option."
msgstr ""
"変数は必要な引数がない場合のみ呼び出すことができます。そうでない場合、システ"
"ムはエンジンの ``string_if_invalid`` オプションの値を返します。"

msgid ""
"There can be side effects when calling some variables, and it'd be either "
"foolish or a security hole to allow the template system to access them."
msgstr ""
"いくつかの変数を呼び出すときに副作用が発生する可能性があり、テンプレートシス"
"テムがそれらにアクセスできるようにするのは愚策またはセキュリティホールと言え"
"ます。"

msgid ""
"A good example is the :meth:`~django.db.models.Model.delete` method on each "
"Django model object. The template system shouldn't be allowed to do "
"something like this:"
msgstr ""
"良い例が、各 Django モデルオブジェクトの :meth:`~django.db.models.Model."
"delete` メソッドです。テンプレートシステムはこのようなことをしてはいけませ"
"ん："

msgid ""
"To prevent this, set an ``alters_data`` attribute on the callable variable. "
"The template system won't call a variable if it has ``alters_data=True`` "
"set, and will instead replace the variable with ``string_if_invalid``, "
"unconditionally.  The dynamically-generated :meth:`~django.db.models.Model."
"delete` and :meth:`~django.db.models.Model.save` methods on Django model "
"objects get ``alters_data=True`` automatically. Example::"
msgstr ""
"これを防ぐには、呼び出し可能オブジェクトに ``alters_data`` 属性を指定します。"
"テンプレートシステムは ``alters_data=True`` が設定された変数を呼び出さず、代"
"わりに無条件で ``string_if_invalid`` に置き換えます。 動的に生成される "
"Django モデルオブジェクトの :meth:`~django.db.models.Model.delete` と :meth:"
"`~django.db.models.Model.save` メソッドは自動的に ``alters_data=True`` を取得"
"します。例："

msgid ""
"Occasionally you may want to turn off this feature for other reasons, and "
"tell the template system to leave a variable uncalled no matter what.  To do "
"so, set a ``do_not_call_in_templates`` attribute on the callable with the "
"value ``True``.  The template system then will act as if your variable is "
"not callable (allowing you to access attributes of the callable, for "
"example)."
msgstr ""
"時には、別の理由でこの機能をオフにし、何があっても呼び出されない変数を残すよ"
"うにテンプレートシステムに指示したいことがあるかもしれません。 そのためには、"
"呼び出し可能オブジェクトの ``do_not_call_in_templates`` 属性を ``True`` に設"
"定します。 そうすると、テンプレートシステムはあたかも変数が呼び出し可能でない"
"かのように動作します（たとえば、呼び出し可能オブジェクトの属性にアクセスでき"
"ます）。"

msgid "How invalid variables are handled"
msgstr "無効な変数の扱い"

msgid ""
"Generally, if a variable doesn't exist, the template system inserts the "
"value of the engine's ``string_if_invalid`` configuration option, which is "
"set to ``''`` (the empty string) by default."
msgstr ""
"通常、変数が存在しない場合、テンプレートシステムはエンジンの "
"``string_if_invalid`` 設定オプションの値を挿入します。"

msgid ""
"Filters that are applied to an invalid variable will only be applied if "
"``string_if_invalid`` is set to ``''`` (the empty string). If "
"``string_if_invalid`` is set to any other value, variable filters will be "
"ignored."
msgstr ""
"``string_if_invalid`` が ``''`` (空文字列) に設定されている場合のみ、無効な変"
"数に適用されるフィルタが適用されます。もし ``string_if_invalid`` が他の値に設"
"定されている場合、変数フィルタは無視されます。"

msgid ""
"This behavior is slightly different for the ``if``, ``for`` and ``regroup`` "
"template tags. If an invalid variable is provided to one of these template "
"tags, the variable will be interpreted as ``None``. Filters are always "
"applied to invalid variables within these template tags."
msgstr ""
"この動作は ``if``, ``for``, ``regroup`` のテンプレートタグでは少し異なりま"
"す。これらのテンプレートタグに無効な変数が指定された場合、その変数は "
"``None`` として解釈されます。これらのテンプレートタグ内の無効な変数には常に"
"フィルタが適用されます。"

msgid ""
"If ``string_if_invalid`` contains a ``'%s'``, the format marker will be "
"replaced with the name of the invalid variable."
msgstr ""
"もし ``string_if_invalid`` が ``'%s'`` を含む場合、フォーマットマーカーは無効"
"な変数名に置き換えられます。"

msgid "For debug purposes only!"
msgstr "デバッグ専用です！"

msgid ""
"While ``string_if_invalid`` can be a useful debugging tool, it is a bad idea "
"to turn it on as a 'development default'."
msgstr ""
"``string_if_invalid`` は便利なデバッグツールですが、「開発のデフォルト」とし"
"てオンにするのはよくありません。"

msgid ""
"Many templates, including some of Django's, rely upon the silence of the "
"template system when a nonexistent variable is encountered. If you assign a "
"value other than ``''`` to ``string_if_invalid``, you will experience "
"rendering problems with these templates and sites."
msgstr ""
"Django 組み込みのものを含む多くのテンプレートは、存在しない変数に遭遇した場"
"合、テ ンプレートシステムの沈黙に依存しています。もし ``string_if_invalid`` "
"に ``''`` 以外の値を代入すると、これらのテンプレートやサイトでレンダリングの"
"問題が発生します。"

msgid ""
"Generally, ``string_if_invalid`` should only be enabled in order to debug a "
"specific template problem, then cleared once debugging is complete."
msgstr ""
"通常、``string_if_invalid`` は特定のテンプレートの問題をデバッグするためだけ"
"に有効にし、デバッグが完了したらオフにすべきです。"

msgid "Built-in variables"
msgstr "組み込み変数"

msgid ""
"Every context contains ``True``, ``False`` and ``None``. As you would "
"expect, these variables resolve to the corresponding Python objects."
msgstr ""
"すべてのコンテキストは ``True``, ``False``, ``None`` を含みます。ご想像の通"
"り、これらの変数は対応する Python オブジェクトに解決されます。"

msgid "Limitations with string literals"
msgstr "文字列リテラルの制約"

msgid ""
"Django's template language has no way to escape the characters used for its "
"own syntax. For example, the :ttag:`templatetag` tag is required if you need "
"to output character sequences like ``{%`` and ``%}``."
msgstr ""
"Django のテンプレート言語には、独自の構文に使われる文字をエスケープする手段が"
"ありません。例えば、 ``{%`` や ``%}`` のような文字列を出力する必要がある場合"
"は、 :ttag:`templatetag` タグが必要です。"

msgid ""
"A similar issue exists if you want to include these sequences in template "
"filter or tag arguments. For example, when parsing a block tag, Django's "
"template parser looks for the first occurrence of ``%}`` after a ``{%``. "
"This prevents the use of ``\"%}\"`` as a string literal. For example, a "
"``TemplateSyntaxError`` will be raised for the following expressions:"
msgstr ""
"これらのシーケンスをテンプレートフィルタやタグの引数に含めたい場合にも、同じ"
"ような問題があります。例えば、ブロックタグを解析するとき、 Django のテンプ"
"レートパーサは ``{%`` の後に ``%}`` が最初に現れるかどうかを調べます。これは "
"``\"%}\"`` が文字列リテラルとして使われるのを阻止します。たとえば、以下のよう"
"な式では ``TemplateSyntaxError`` が発生します："

msgid ""
"The same issue can be triggered by using a reserved sequence in filter "
"arguments:"
msgstr ""
"フィルタの引数に予約済みのシーケンスを使用すると、同じ問題が発生することがあ"
"ります："

msgid ""
"If you need to use strings with these sequences, store them in template "
"variables or use a custom template tag or filter to workaround the "
"limitation."
msgstr ""
"これらのシーケンスで文字列を使用する必要がある場合は、テンプレート変数に格納"
"するか、カスタムテンプレートタグまたはフィルタを使用して制限を回避してくださ"
"い。"

msgid "Playing with ``Context`` objects"
msgstr "``Context`` オブジェクトを使って遊ぶ"

msgid ""
"Most of the time, you'll instantiate :class:`Context` objects by passing in "
"a fully-populated dictionary to ``Context()``. But you can add and delete "
"items from a ``Context`` object once it's been instantiated, too, using "
"standard dictionary syntax:"
msgstr ""
"たいていの場合、``Context()`` に辞書を渡して :class:`Context` オブジェクトを"
"インスタンス化します。しかし、一度インスタンス化された ``Context`` オブジェク"
"トに対しても、標準的な辞書構文を使ってアイテムの追加や削除を行うことができま"
"す："

msgid ""
"Returns the value for ``key`` if ``key`` is in the context, else returns "
"``otherwise``."
msgstr ""
"もし ``key`` がコンテキストに存在すれば ``key`` の値を返し、そうでなければ "
"``otherwise`` を返します。"

msgid ""
"If ``key`` is in the context, returns its value. Otherwise inserts ``key`` "
"with a value of ``default`` and returns ``default``."
msgstr ""
"もし ``key`` がコンテキスト内にあれば、その値を返します。そうでない場合は、 "
"``default`` の値を持つ ``key`` を挿入し、 ``default`` を返します。"

msgid ""
"A ``Context`` object is a stack. That is, you can ``push()`` and ``pop()`` "
"it. If you ``pop()`` too much, it'll raise ``django.template."
"ContextPopException``:"
msgstr ""
"コンテキストオブジェクトはスタックです。つまり、 ``push()`` したり ``pop()`` "
"したりすることができます。 ``pop()`` しすぎると ``django.template."
"ContextPopException`` が発生します："

msgid ""
"You can also use ``push()`` as a context manager to ensure a matching "
"``pop()`` is called."
msgstr ""
"また、コンテキストマネージャとして ``push()`` を使うことで、それに対応する "
"``pop()`` が呼び出されるようにすることもできます。"

msgid ""
"All arguments passed to ``push()`` will be passed to the ``dict`` "
"constructor used to build the new context level."
msgstr ""
"``push()`` に渡されたすべての引数は、新しいコンテキストレベルを構築するために"
"使用される ``dict`` コンストラクタに渡されます。"

msgid ""
"In addition to ``push()`` and ``pop()``, the ``Context`` object also defines "
"an ``update()`` method. This works like ``push()`` but takes a dictionary as "
"an argument and pushes that dictionary onto the stack instead of an empty "
"one."
msgstr ""
"``push()`` と ``pop()`` に加えて、 ``Context`` オブジェクトは ``update()`` メ"
"ソッドも定義しています。これは ``push()`` と同じように動作しますが、辞書を引"
"数として受け取り、空の辞書の代わりにその辞書をスタックにプッシュします。"

msgid ""
"Like ``push()``, you can use ``update()`` as a context manager to ensure a "
"matching ``pop()`` is called."
msgstr ""
"``push()`` と同様に、コンテキストマネージャとして ``update()`` を使うことで、"
"それに対応する ``pop()`` が呼び出されるようにすることができます。"

msgid ""
"Using a ``Context`` as a stack comes in handy in :ref:`some custom template "
"tags <howto-writing-custom-template-tags>`."
msgstr ""
"スタックとして ``Context`` を使うと、 :ref:`いくつかのテンプレートタグ "
"<howto-writing-custom-template-tags>` で便利です。"

msgid ""
"Using ``flatten()`` method you can get whole ``Context`` stack as one "
"dictionary including builtin variables."
msgstr ""
"``flatten()`` メソッドを使うと、組み込み変数を含む ``Context`` スタック全体を"
"一つの辞書として取得できます。"

msgid ""
"A ``flatten()`` method is also internally used to make ``Context`` objects "
"comparable."
msgstr ""
"内部的には ``flatten()`` メソッドは ``Context`` オブジェクトを比較できるよう"
"にするためにも使われています。"

msgid ""
"Result from ``flatten()`` can be useful in unit tests to compare ``Context`` "
"against ``dict``::"
msgstr ""
"``flatten()`` の結果は、ユニットテストで ``Context`` と ``dict`` を比較するの"
"に便利です："

msgid "Using ``RequestContext``"
msgstr "``RequestContext`` を使う"

msgid ""
"Django comes with a special ``Context`` class, ``django.template."
"RequestContext``, that acts slightly differently from the normal ``django."
"template.Context``. The first difference is that it takes an :class:`~django."
"http.HttpRequest` as its first argument. For example::"
msgstr ""
"Django では特別な ``Context`` クラスである ``django.template."
"RequestContext`` が使えます。これは、通常の ``django.template.Context`` とは"
"いくつかの点で異なります。最初の違いは、最初の引数として :class:`~django."
"http.HttpRequest` を取ることです。次に例を示します。"

msgid ""
"The second difference is that it automatically populates the context with a "
"few variables, according to the engine's ``context_processors`` "
"configuration option."
msgstr ""
"2 つめの違いは、エンジンの ``context_processors`` 設定オプションによって、昆"
"的に自動的にいくつかの変数をセットすることです。"

msgid ""
"The ``context_processors`` option is a list of callables -- called **context "
"processors** -- that take a request object as their argument and return a "
"dictionary of items to be merged into the context. In the default generated "
"settings file, the default template engine contains the following context "
"processors::"
msgstr ""
"``context_processors`` オプションは callable -- **context processors** と呼ば"
"れます -- のリストで、引数としてリクエストオブジェクトを受け取り、コンテキス"
"トに統合する項目のディクショナリを返します。 デフォルトで生成される設定ファイ"
"ルでは、テンプレートエンジンは以下のコンテキストプロセッサを含んでいます::"

msgid ""
"In addition to these, :class:`RequestContext` always enables ``'django."
"template.context_processors.csrf'``.  This is a security related context "
"processor required by the admin and other contrib apps, and, in case of "
"accidental misconfiguration, it is deliberately hardcoded in and cannot be "
"turned off in the ``context_processors`` option."
msgstr ""
"上記に加えて、:class:`RequestContext` は常に ``'django.template."
"context_processors.csrf'`` を使えるようにしています。これは、admin や他の "
"contrib アプリケーションで必要な、セキュリティ関連のコンテキストプロセッサ"
"で、設定ミスの場合に備えて意図的にハードコードされており、"
"``context_processors`` オプション内で無効化できないようになっています。"

msgid ""
"Each processor is applied in order. That means, if one processor adds a "
"variable to the context and a second processor adds a variable with the same "
"name, the second will override the first. The default processors are "
"explained below."
msgstr ""
"各プロセッサは順番通りに適用されます。したがって、1 番目と 2 番目のプロセッサ"
"がそれぞれ同じ名前の変数をコンテキストに追加したとき、2 番目の変数が 1 番目を"
"オーバーライドします。デフォルトのプロセッサは以下で説明します。"

msgid "When context processors are applied"
msgstr "コンテキストプロセッサが適用されたとき"

msgid ""
"Context processors are applied on top of context data. This means that a "
"context processor may overwrite variables you've supplied to your :class:"
"`Context` or :class:`RequestContext`, so take care to avoid variable names "
"that overlap with those supplied by your context processors."
msgstr ""
"コンテキストプロセッサは、コンテキストデータのトップに適用されます。これは、:"
"class:`Context` や :class:`RequestContext` に与えた変数を、コンテキストプロ"
"セッサが上書きすることを意味します。コンテキストプロセッサによって提供される"
"変数と、名前が重複しないように気をつけてください。"

msgid ""
"If you want context data to take priority over context processors, use the "
"following pattern::"
msgstr ""
"コンテキストデータをコンテキストプロセッサに優先させたい場合、以下のパターン"
"を使ってください::"

msgid ""
"Django does this to allow context data to override context processors in "
"APIs such as :func:`~django.shortcuts.render` and :class:`~django.template."
"response.TemplateResponse`."
msgstr ""
"Django はこれを使って、:func:`~django.shortcuts.render` や :class:`~django."
"template.response.TemplateResponse` といった API で、コンテキストデータがコン"
"テキストプロセッサをオーバーライドできるようにします。"

msgid ""
"Also, you can give :class:`RequestContext` a list of additional processors, "
"using the optional, third positional argument, ``processors``. In this "
"example, the :class:`RequestContext` instance gets an ``ip_address`` "
"variable::"
msgstr ""
"また、省略可能な第 3 引数 ``processors`` を使って、:class:`RequestContext` に"
"追加的なプロセッサを渡すこともできます。以下の例では、:class:"
"`RequestContext` のインスタンスは ``ip_address`` 変数を格納します:"

msgid "Built-in template context processors"
msgstr "ビルトインのテンプレートコンテキストプロセッサ"

msgid "Here's what each of the built-in processors does:"
msgstr "以下は、それぞれのビルトインのプロセッサが行うことです:"

msgid "``django.contrib.auth.context_processors.auth``"
msgstr "``django.contrib.auth.context_processors.auth``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain these "
"variables:"
msgstr ""
"このプロセッサが有効な場合、全ての ``RequestContext`` は以下の変数を含みます:"

msgid ""
"``user`` -- An ``auth.User`` instance representing the currently logged-in "
"user (or an ``AnonymousUser`` instance, if the client isn't logged in)."
msgstr ""
"``user`` -- ``auth.User`` のインスタンスで、現在ログイン中のユーザ (あるいは"
"ログインしていない場合は ``AnonymousUser`` のインスタンス) を表します。"

msgid ""
"``perms`` -- An instance of ``django.contrib.auth.context_processors."
"PermWrapper``, representing the permissions that the currently logged-in "
"user has."
msgstr ""
"``perms`` -- ``django.contrib.auth.context_processors.PermWrapper`` のインス"
"タンスで、現在ログイン中のユーザが有するパーミッションを表します。"

msgid "``django.template.context_processors.debug``"
msgstr "``django.template.context_processors.debug``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain these "
"two variables -- but only if your :setting:`DEBUG` setting is set to "
"``True`` and the request's IP address (``request.META['REMOTE_ADDR']``) is "
"in the :setting:`INTERNAL_IPS` setting:"
msgstr ""
"このプロセッサが有効な場合、全ての ``RequestContext`` は以下の 2 つの変数を含"
"みます -- ただし、 :setting:`DEBUG` 設定が ``True`` でリクエストの IP アドレ"
"ス (``request.META['REMOTE_ADDR']``) が :setting:`INTERNAL_IPS` 設定内にある"
"場合のみです:"

msgid ""
"``debug`` -- ``True``. You can use this in templates to test whether you're "
"in :setting:`DEBUG` mode."
msgstr ""
"``debug`` -- ``True`` です。:setting:`DEBUG` モードかどうかをテストするために"
"テンプレート内で使うことができます。"

msgid ""
"``sql_queries`` -- A list of ``{'sql': ..., 'time': ...}`` dictionaries, "
"representing every SQL query that has happened so far during the request and "
"how long it took. The list is in order by database alias and then by query. "
"It's lazily generated on access."
msgstr ""
"``sql_queries`` -- ``{'sql': ..., 'time': ...}`` ディクショナリのリストで、リ"
"クエスト中に発生した全ての SQL クエリとかかった時間を表します。リストはデータ"
"ベースエイリアス順、クエリ順です。アクセス上でレイジーに生成されます。"

msgid "``django.template.context_processors.i18n``"
msgstr "``django.template.context_processors.i18n``"

msgid "``LANGUAGES`` -- The value of the :setting:`LANGUAGES` setting."
msgstr "``LANGUAGES`` -- :setting:`LANGUAGES` 設定の値です。"

msgid ""
"``LANGUAGE_BIDI`` -- ``True`` if the current language is a right-to-left "
"language, e.g. Hebrew, Arabic. ``False`` if it's a left-to-right language, e."
"g. English, French, German."
msgstr ""
"``LANGUAGE_BIDI`` -- 現在の言語がヘブライ語やアラビア語などの右から左へ書く言"
"語の場合、 ``True`` を返します。英語、フランス語、ドイツ語などの左から右へ書"
"く言語の場合は ``False`` です。"

msgid ""
"``LANGUAGE_CODE`` -- ``request.LANGUAGE_CODE``, if it exists. Otherwise, the "
"value of the :setting:`LANGUAGE_CODE` setting."
msgstr ""
"``LANGUAGE_CODE`` -- 存在する場合は ``request.LANGUAGE_CODE`` で、それ以外の"
"場合は :setting:`LANGUAGE_CODE` 設定です。"

msgid ""
"See :ref:`i18n template tags <i18n-template-tags>` for template tags that "
"generate the same values."
msgstr ""
"同じ値を生成するテンプレートタグについては :ref:`i18n テンプレートタグ <i18n-"
"template-tags>` を参照してください。"

msgid "``django.template.context_processors.media``"
msgstr "``django.template.context_processors.media``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain a "
"variable ``MEDIA_URL``, providing the value of the :setting:`MEDIA_URL` "
"setting."
msgstr ""
"このプロセッサが有効な場合、全ての ``RequestContext`` は変数 ``MEDIA_URL`` を"
"含みます。これは、 :setting:`MEDIA_URL` 設定の値を提供します。"

msgid "``django.template.context_processors.static``"
msgstr "``django.template.context_processors.static``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain a "
"variable ``STATIC_URL``, providing the value of the :setting:`STATIC_URL` "
"setting."
msgstr ""
"このプロセッサが有効な場合、全ての ``RequestContext`` は変数 ``STATIC_URL`` "
"を含みます。これは、:setting:`STATIC_URL` 設定の値を提供します。"

msgid "``django.template.context_processors.csrf``"
msgstr "``django.template.context_processors.csrf``"

msgid ""
"This processor adds a token that is needed by the :ttag:`csrf_token` "
"template tag for protection against :doc:`Cross Site Request Forgeries </ref/"
"csrf>`."
msgstr ""
"このプロセッサは、 :doc:`クロスサイトリクエストフォージェリ (CSRF) </ref/"
"csrf>` 対策のための :ttag:`csrf_token` テンプレートタグが必要とするトークンを"
"追加します。"

msgid "``django.template.context_processors.request``"
msgstr "``django.template.context_processors.request``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain a "
"variable ``request``, which is the current :class:`~django.http.HttpRequest`."
msgstr ""
"このプロセッサが有効な場合、全ての ``RequestContext`` は変数``request`` を含"
"みます。これは現在の :class:`~django.http.HttpRequest` です。"

msgid "``django.template.context_processors.tz``"
msgstr "``django.template.context_processors.tz``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain a "
"variable ``TIME_ZONE``, providing the name of the currently active time zone."
msgstr ""
"このプロセッサが有効な場合、全ての ``RequestContext`` は変数 ``TIME_ZONE`` を"
"含みます。これは、現在アクティブなタイムゾーンの名前を提供します。"

msgid "``django.contrib.messages.context_processors.messages``"
msgstr "``django.contrib.messages.context_processors.messages``"

msgid ""
"If this processor is enabled, every ``RequestContext`` will contain these "
"two variables:"
msgstr ""
"このプロセッサが有効な場合、全ての ``RequestContext`` は以下の 2 つの変数を含"
"みます:"

msgid ""
"``messages`` -- A list of messages (as strings) that have been set via the :"
"doc:`messages framework </ref/contrib/messages>`."
msgstr ""
"``messages`` -- :doc:`メッセージフレームワーク </ref/contrib/messages>` を通"
"じてセットされた、(文字列としての) メッセージのリストです。"

msgid ""
"``DEFAULT_MESSAGE_LEVELS`` -- A mapping of the message level names to :ref:"
"`their numeric value <message-level-constants>`."
msgstr ""
"``DEFAULT_MESSAGE_LEVELS`` -- :ref:`数値 <message-level-constants>` のメッ"
"セージレベル名のマッピングです。"

msgid "Writing your own context processors"
msgstr "独自のコンテキストプロセッサを記述する"

msgid ""
"A context processor has a simple interface: It's a Python function that "
"takes one argument, an :class:`~django.http.HttpRequest` object, and returns "
"a dictionary that gets added to the template context."
msgstr ""
"コンテキストプロセッサはシンプルなインタフェースを持っています。これは "
"Python の関数で、 :class:`~django.http.HttpRequest` オブジェクトを引数に取"
"り、テンプレートコンテキストに追加される辞書を返します。"

msgid ""
"For example, to add the :setting:`DEFAULT_FROM_EMAIL` setting to every "
"context::"
msgstr ""
"たとえば、すべてのコンテキストに :setting:`DEFAULT_FROM_EMAIL` 設定を追加する"
"には以下のようにします："

msgid ""
"Custom context processors can live anywhere in your code base. All Django "
"cares about is that your custom context processors are pointed to by the "
"``'context_processors'`` option in your :setting:`TEMPLATES` setting — or "
"the ``context_processors`` argument of :class:`~django.template.Engine` if "
"you're using it directly."
msgstr ""
"カスタムコンテキストプロセッサはコードベースのどこにあっても構いません。"
"Django が気にするのは、カスタムコンテキストプロセッサが :setting:`TEMPLATES` "
"設定の ``'context_processors'`` オプションで指されているかどうか、直接使って"
"いる場合は :class:`~django.template.Engine` の ``context_processors`` 引数で"
"指されているかどうかだけです。"

msgid "Loading templates"
msgstr "テンプレートを読み込む"

msgid ""
"Generally, you'll store templates in files on your filesystem rather than "
"using the low-level :class:`~django.template.Template` API yourself. Save "
"templates in a directory specified as a **template directory**."
msgstr ""
"通常、テンプレートは低レベルの :class:`~django.template.Template` API を使う"
"のではなく、ファイルシステム上のファイルに保存します。テンプレートは **テンプ"
"レートディレクトリ** として指定したディレクトリに保存します。"

msgid ""
"Django searches for template directories in a number of places, depending on "
"your template loading settings (see \"Loader types\" below), but the most "
"basic way of specifying template directories is by using the :setting:`DIRS "
"<TEMPLATES-DIRS>` option."
msgstr ""
"Django はテンプレート読み込みの設定によって、様々な場所でテンプレートディレク"
"トリを探しますが (後述の 「ローダの種類」を参照してください)、テンプレート"
"ディレクトリを指定する最も基本的な方法は :setting:`DIRS <TEMPLATES-DIRS>` オ"
"プションを使うことです。"

msgid "The :setting:`DIRS <TEMPLATES-DIRS>` option"
msgstr ":setting:`DIRS <TEMPLATES-DIRS>` オプション"

msgid ""
"Tell Django what your template directories are by using the :setting:`DIRS "
"<TEMPLATES-DIRS>` option in the :setting:`TEMPLATES` setting in your "
"settings file — or the ``dirs`` argument of :class:`~django.template."
"Engine`. This should be set to a list of strings that contain full paths to "
"your template directories::"
msgstr ""
"設定ファイルの :setting:`TEMPLATES` 設定にある :setting:`DIRS <TEMPLATES-"
"DIRS>` オプション、または :class:`~django.template.Engine` の ``dirs`` 引数を"
"使って、テンプレートディレクトリを Django に教えてください。これはテンプレー"
"トディレクトリへのフルパスを含む文字列のリストに設定する必要があります："

msgid ""
"Your templates can go anywhere you want, as long as the directories and "
"templates are readable by the web server. They can have any extension you "
"want, such as ``.html`` or ``.txt``, or they can have no extension at all."
msgstr ""
"ディレクトリとテンプレートがWebサーバーによって読み取れる限り、テンプレートは"
"どこに置いても構いません。テンプレートの拡張子は ``.html`` や ``.txt`` など好"
"きなものを使うことができます。"

msgid "Loader types"
msgstr "ローダーの種類"

msgid ""
"By default, Django uses a filesystem-based template loader, but Django comes "
"with a few other template loaders, which know how to load templates from "
"other sources."
msgstr ""
"デフォルトでは、 Django はファイルシステムベースのテンプレートローダーを使い"
"ますが、 Django には、他のソースからテンプレートを読み込むことができる、他の"
"テンプレートローダーがいくつか付属しています。"

msgid ""
"Some of these other loaders are disabled by default, but you can activate "
"them by adding a ``'loaders'`` option to your ``DjangoTemplates`` backend in "
"the :setting:`TEMPLATES` setting or passing a ``loaders`` argument to :class:"
"`~django.template.Engine`. ``loaders`` should be a list of strings or "
"tuples, where each represents a template loader class. Here are the template "
"loaders that come with Django:"
msgstr ""
"これらのローダーのいくつかはデフォルトでは無効になっていますが、 "
"``DjangoTemplates`` バックエンドの :setting:`TEMPLATES` 設定に ``'loaders'`` "
"オプションを追加するか、 :class:`~django.template.Engine` に ``loaders`` 引数"
"を渡すことで有効にできます。 ``loaders`` は文字列かタプルのリストで、それぞれ"
"がテンプレートローダークラスを表します。以下は Django に付属のテンプレート"
"ローダーです："

msgid "``django.template.loaders.filesystem.Loader``"
msgstr "``django.template.loaders.filesystem.Loader``"

msgid ""
"Loads templates from the filesystem, according to :setting:`DIRS <TEMPLATES-"
"DIRS>`."
msgstr ""
":setting:`DIRS <TEMPLATES-DIRS>` に従ってファイルシステムからテンプレートを読"
"み込みます。"

msgid ""
"This loader is enabled by default. However it won't find any templates until "
"you set :setting:`DIRS <TEMPLATES-DIRS>` to a non-empty list::"
msgstr ""
"このローダーはデフォルトで有効になっています。しかし、 :setting:`DIRS "
"<TEMPLATES-DIRS>` を空でないリストに設定しないとテンプレートを見つけられませ"
"ん："

msgid ""
"You can also override ``'DIRS'`` and specify specific directories for a "
"particular filesystem loader::"
msgstr ""
"また、``'DIRS'`` をオーバーライドして、特定のファイルシステムローダーに特定の"
"ディレクトリを指定することもできます："

msgid "``django.template.loaders.app_directories.Loader``"
msgstr "``django.template.loaders.app_directories.Loader``"

msgid ""
"Loads templates from Django apps on the filesystem. For each app in :setting:"
"`INSTALLED_APPS`, the loader looks for a ``templates`` subdirectory. If the "
"directory exists, Django looks for templates in there."
msgstr ""
"ファイルシステム上の Django アプリからテンプレートを読み込みます。 :setting:"
"`INSTALLED_APPS` にあるアプリごとに、ローダーは ``templates`` サブディレクト"
"リを探します。そのディレクトリが存在すれば、 Django はその中にあるテンプレー"
"トを探します。"

msgid ""
"This means you can store templates with your individual apps. This also "
"helps to distribute Django apps with default templates."
msgstr ""
"つまり、テンプレートを個々のアプリと一緒に保存できます。 また、Django アプリ"
"をデフォルトのテンプレートと一緒に配布するのにも役立ちます。"

msgid "For example, for this setting::"
msgstr "たとえば、この設定の場合："

msgid ""
"...then ``get_template('foo.html')`` will look for ``foo.html`` in these "
"directories, in this order:"
msgstr ""
"...上記のようにすると、``get_template('foo.html')`` はこれらのディレクトリの "
"``foo.html`` をこの順番で探します："

msgid "``/path/to/myproject/polls/templates/``"
msgstr "``/path/to/myproject/polls/templates/``"

msgid "``/path/to/myproject/music/templates/``"
msgstr "``/path/to/myproject/music/templates/``"

msgid "... and will use the one it finds first."
msgstr "...そして最初に見つけたものを使います。"

msgid ""
"The order of :setting:`INSTALLED_APPS` is significant! For example, if you "
"want to customize the Django admin, you might choose to override the "
"standard ``admin/base_site.html`` template, from ``django.contrib.admin``, "
"with your own ``admin/base_site.html`` in ``myproject.polls``. You must then "
"make sure that your ``myproject.polls`` comes *before* ``django.contrib."
"admin`` in :setting:`INSTALLED_APPS`, otherwise ``django.contrib.admin``’s "
"will be loaded first and yours will be ignored."
msgstr ""
":setting:`INSTALLED_APPS` の順序は重要です！例えば、Django管理サイトをカスタ"
"マイズしたい場合、``django.contrib.admin`` の標準テンプレート ``admin/"
"base_site.html`` を、``myproject.polls`` 内の独自の ``admin/base_site.html`` "
"で上書きしたいかもしれません。その場合、``myproject.polls`` が :setting:"
"`INSTALLED_APPS` で ``django.contrib.admin`` よりも *前に* 来るように確認する"
"必要があります。そうしないと、``django.contrib.admin`` のものが先にロードさ"
"れ、あなたのものは無視されます。"

msgid ""
"Note that the loader performs an optimization when it first runs: it caches "
"a list of which :setting:`INSTALLED_APPS` packages have a ``templates`` "
"subdirectory."
msgstr ""
"ローダーは最初に実行されるときに最適化を行うことに注意してください。それは、"
"どの :setting:`INSTALLED_APPS` パッケージが ``templates`` サブディレクトリを"
"持っているかのリストをキャッシュします。"

msgid ""
"You can enable this loader by setting :setting:`APP_DIRS <TEMPLATES-"
"APP_DIRS>` to ``True``::"
msgstr ""
"このローダーを有効にするには :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` を "
"``True``: に設定します："

msgid "``django.template.loaders.cached.Loader``"
msgstr "``django.template.loaders.cached.Loader``"

msgid ""
"While the Django template system is quite fast, if it needs to read and "
"compile your templates every time they're rendered, the overhead from that "
"can add up."
msgstr ""
"Django のテンプレートシステムは非常に高速ですが、テンプレートがレンダリングさ"
"れるたびにテンプレートを読み込んでコンパイルする必要がある場合、そのオーバ"
"ヘッドは増大する可能性があります。"

msgid ""
"You configure the cached template loader with a list of other loaders that "
"it should wrap. The wrapped loaders are used to locate unknown templates "
"when they're first encountered. The cached loader then stores the compiled "
"``Template`` in memory. The cached ``Template`` instance is returned for "
"subsequent requests to load the same template."
msgstr ""
"キャッシュされたテンプレートローダーは、それがラップすべき他のローダーのリス"
"トで構成されます。ラップされたローダーは、初めて遭遇した未知のテンプレートを"
"見つけるために使用されます。その後、キャッシュされたローダーはコンパイルされ"
"た ``Template`` をメモリに保存します。同じテンプレートをロードするための後続"
"のリクエストには、キャッシュされた ``Template`` インスタンスが返されます。"

msgid ""
"This loader is automatically enabled if :setting:`OPTIONS['loaders'] "
"<TEMPLATES-OPTIONS>` isn't specified."
msgstr ""
"このローダーは :setting:`OPTIONS['loaders'] <TEMPLATES-OPTIONS>` が指定されて"
"いない場合に自動的に有効になります。"

msgid ""
"You can manually specify template caching with some custom template loaders "
"using settings like this::"
msgstr ""
"カスタムテンプレートローダーでは、以下のような設定を使ってテンプレートの"
"キャッシュを手動で指定できます："

msgid ""
"All of the built-in Django template tags are safe to use with the cached "
"loader, but if you're using custom template tags that come from third party "
"packages, or that you wrote yourself, you should ensure that the ``Node`` "
"implementation for each tag is thread-safe. For more information, see :ref:"
"`template tag thread safety considerations <template_tag_thread_safety>`."
msgstr ""
"Django 組み込みのテンプレートタグはすべてキャッシュローダで安全に使えますが、"
"サードパーティのパッケージや自分で書いたカスタムテンプレートタグを使う場合"
"は、各タグの ``Node`` 実装がスレッドセーフであることを確認する必要がありま"
"す。詳細は :ref:`テンプレートタグのスレッド安全性についての注意事項 "
"<template_tag_thread_safety>` を参照してください。"

msgid "``django.template.loaders.locmem.Loader``"
msgstr "``django.template.loaders.locmem.Loader``"

msgid "Loads templates from a Python dictionary. This is useful for testing."
msgstr "Python 辞書からテンプレートを読み込みます。これはテストに便利です。"

msgid "This loader takes a dictionary of templates as its first argument::"
msgstr "このローダーはテンプレートの辞書を第一引数に取ります："

msgid "This loader is disabled by default."
msgstr "このローダーはデフォルトでは無効です。"

msgid ""
"Django uses the template loaders in order according to the ``'loaders'`` "
"option. It uses each loader until a loader finds a match."
msgstr ""
"Django は ``'loaders'`` オプションに従って、テンプレートローダーを順番に使用"
"します。一致するローダーが見つかるまで、それぞれのローダーを使います。"

msgid "Custom loaders"
msgstr "カスタムローダー"

msgid ""
"It's possible to load templates from additional sources using custom "
"template loaders. Custom ``Loader`` classes should inherit from ``django."
"template.loaders.base.Loader`` and define the ``get_contents()`` and "
"``get_template_sources()`` methods."
msgstr ""
"カスタムテンプレートローダーを使って、追加のソースからテンプレートをロードで"
"きます。カスタム ``Loader`` クラスは ``django.template.loaders.base.Loader`` "
"を継承し、 ``get_contents()`` と ``get_template_sources()`` メソッドを定義す"
"る必要があります。"

msgid "Loader methods"
msgstr "ローダーのメソッド"

msgid ""
"Loads templates from a given source, such as the filesystem or a database."
msgstr ""
"ファイルシステムやデータベースなど、指定されたソースからテンプレートを読み込"
"みます。"

msgid ""
"A method that takes a ``template_name`` and yields :class:`~django.template."
"base.Origin` instances for each possible source."
msgstr ""
"テンプレート名 ``template_name`` を受け取り、 :class:`~django.template.base."
"Origin` インスタンスを生成するメソッドです。"

msgid ""
"For example, the filesystem loader may receive ``'index.html'`` as a "
"``template_name`` argument.  This method would yield origins for the full "
"path of ``index.html`` as it appears in each template directory the loader "
"looks at."
msgstr ""
"例えば、ファイルシステムローダーは ``template_name`` 引数として ``'index."
"html'`` を受け取るかもしれません。このメソッドは、ローダーが見る各テンプレー"
"トディレクトリ内の ``index.html`` の完全なパスに対してオリジンを生成します。"

msgid ""
"The method doesn't need to verify that the template exists at a given path, "
"but it should ensure the path is valid. For instance, the filesystem loader "
"makes sure the path lies under a valid template directory."
msgstr ""
"メソッドは与えられたパスにテンプレートが存在することを確認する必要はありませ"
"んが、パスが有効であることを確認する必要があります。例えば、ファイルシステム"
"ローダーはパスが有効なテンプレートディレクトリのもとにあることを確認します。"

msgid ""
"Returns the contents for a template given a :class:`~django.template.base."
"Origin` instance."
msgstr ""
"与えられた :class:`~django.template.base.Origin` に対するテンプレートのコンテ"
"ンツを返します。"

msgid ""
"This is where a filesystem loader would read contents from the filesystem, "
"or a database loader would read from the database. If a matching template "
"doesn't exist, this should raise a :exc:`~django.template."
"TemplateDoesNotExist` error."
msgstr ""
"これは、ファイルシステムローダーがファイルシステムから内容を読み取る場所、ま"
"たはデータベースローダーがデータベースから読み取る場所です。一致するテンプ"
"レートが存在しない場合、これは :exc:`~django.template.TemplateDoesNotExist` "
"エラーを発生させるべきです。"

msgid ""
"Returns a ``Template`` object for a given ``template_name`` by looping "
"through results from :meth:`get_template_sources` and calling :meth:"
"`get_contents`. This returns the first matching template. If no template is "
"found, :exc:`~django.template.TemplateDoesNotExist` is raised."
msgstr ""
":meth:`get_template_sources` の結果をループして :meth:`get_contents` を呼び出"
"すことで、与えられた ``template_name`` に対応する ``Template`` オブジェクトを"
"返します。これは最初にマッチしたテンプレートを返します。テンプレートが見つか"
"らない場合、 :exc:`~django.template.TemplateDoesNotExist` が発生します。"

msgid ""
"The optional ``skip`` argument is a list of origins to ignore when extending "
"templates. This allow templates to extend other templates of the same name. "
"It also used to avoid recursion errors."
msgstr ""
"オプションの ``skip`` 引数はテンプレートを拡張するときに無視するオリジンのリ"
"ストです。これにより、テンプレートが同じ名前の他のテンプレートを継承できるよ"
"うになります。また、再帰エラーを回避するためにも使用されます。"

msgid ""
"In general, it is enough to define :meth:`get_template_sources` and :meth:"
"`get_contents` for custom template loaders. ``get_template()`` will usually "
"not need to be overridden."
msgstr ""
"通常、カスタムテンプレートローダーは :meth:`get_template_sources` と :meth:"
"`get_contents` を定義すれば十分です。 ``get_template()`` は通常オーバーライド"
"する必要はありません。"

msgid "Building your own"
msgstr "自作する場合"

msgid ""
"For examples, read the :source:`source code for Django's built-in loaders "
"<django/template/loaders>`."
msgstr ""
"例については、 :source:`Django の組み込みローダーのソースコード <django/"
"template/loaders>` を読んでください。"

msgid "Template origin"
msgstr "テンプレート・オリジン"

msgid ""
"Templates have an ``origin`` containing attributes depending on the source "
"they are loaded from."
msgstr "テンプレートは読み込むソースに応じた属性を含む ``origin`` を持ちます。"

msgid ""
"The path to the template as returned by the template loader. For loaders "
"that read from the file system, this is the full path to the template."
msgstr ""
"テンプレートローダーが返すテンプレートへのパス。ファイルシステムから読み込む"
"ローダーの場合、これはテンプレートへのフルパスです。"

msgid ""
"If the template is instantiated directly rather than through a template "
"loader, this is a string value of ``<unknown_source>``."
msgstr ""
"テンプレートがテンプレートローダーを通してではなく、直接インスタンス化された"
"場合、これは ``<unknown_source>`` という文字列値となります。"

msgid "The relative path to the template as passed into the template loader."
msgstr "テンプレートローダーに渡されるテンプレートへの相対パス。"

msgid ""
"If the template is instantiated directly rather than through a template "
"loader, this is ``None``."
msgstr ""
"テンプレートがテンプレートローダーを通してではなく、直接インスタンス化された"
"場合、これは ``None`` です。"

msgid "The template loader instance that constructed this ``Origin``."
msgstr "この ``Origin`` を構築したテンプレートローダーインスタンス。"

msgid ""
":class:`django.template.loaders.cached.Loader` requires all of its wrapped "
"loaders to set this attribute, typically by instantiating the ``Origin`` "
"with ``loader=self``."
msgstr ""
":class:`django.template.loaders.cached.Loader` は、ラップされたローダー全てに"
"この属性を要求します。通常、 ``Origin`` を ``loader=self`` でインスタンス化し"
"ます。"

msgid "Built-in template tags and filters"
msgstr "組み込みテンプレートタグとフィルタ"

msgid ""
"This document describes Django's built-in template tags and filters. It is "
"recommended that you use the :doc:`automatic documentation </ref/contrib/"
"admin/admindocs>`, if available, as this will also include documentation for "
"any custom tags or filters installed."
msgstr ""
"このドキュメントでは、 Django の組み込みテンプレートタグとフィルタについて述"
"べます。 また :doc:`自動ドキュメンテーション </ref/contrib/admin/admindocs>` "
"を使えばインストールされている組み込みタグとカスタムタグのドキュメントを読め"
"るのでお勧めです。"

msgid "Built-in tag reference"
msgstr "組み込みタグリファレンス"

msgid "``autoescape``"
msgstr "``autoescape``"

msgid ""
"Controls the current auto-escaping behavior. This tag takes either ``on`` or "
"``off`` as an argument and that determines whether auto-escaping is in "
"effect inside the block. The block is closed with an ``endautoescape`` "
"ending tag."
msgstr ""
"自動エスケープ機能を制御します。このタグは引数に ``on`` または ``off`` を取"
"り、ブロック内の自動エスケープの有効・無効を決定します。ブロックの最後は "
"``endautoescape`` タグで閉じるようにします。"

msgid "Sample usage:"
msgstr "使用例："

msgid ""
"When auto-escaping is in effect, all content derived from variables has HTML "
"escaping applied before placing the result into the output (but after any "
"filters are applied). This is equivalent to manually applying the :tfilter:"
"`escape` filter to each variable."
msgstr ""
"自動エスケープがオンの場合、すべての変数由来の値を出力前に HTML エスケープし"
"ます (他のフィルタはエスケープの前に適用されます)。この動作は、変数に :"
"tfilter:`escape` フィルタを手動で適用した場合と同じです。"

msgid ""
"The only exceptions are variables already marked as \"safe\" from escaping. "
"Variables could be marked as \"safe\" by the code which populated the "
"variable, by applying the :tfilter:`safe` or :tfilter:`escape` filters, or "
"because it's the result of a previous filter that marked the string as "
"\"safe\"."
msgstr ""
"ただ一つの例外は、すでにエスケープに関して \"safe\" としてマークされている変"
"数です。変数は、その変数に値を代入するコードによって :tfilter:`safe` フィルタ"
"や :tfilter:`escape` フィルタを適用されることで、 \"safe\" とマークされる可能"
"性があります。"

msgid ""
"Within the scope of disabled auto-escaping, chaining filters, including :"
"tfilter:`escape`, may cause unexpected (but documented) results such as the "
"following:"
msgstr ""
"自動エスケープが無効であるスコープ内では、 :tfilter:`escape` を含むフィルタを"
"連結すると、以下のような予期しない（しかしドキュメント化されている）結果を引"
"き起こす可能性があります："

msgid ""
"The above code will output the joined elements of ``my_list`` unescaped. "
"This is because the filter chaining sequence executes first :tfilter:`join` "
"on ``my_list`` (without applying escaping to each item since ``autoescape`` "
"is ``off``), marking the result as safe. Subsequently, this safe result will "
"be fed to :tfilter:`escape` filter, which does not apply a second round of "
"escaping."
msgstr ""
"上記のコードは ``my_list`` の結合された要素をエスケープせずに出力します。これ"
"は、フィルタ連結シーケンスが最初に ``my_list`` に対して :tfilter:`join` を実"
"行し (``autoescape`` が ``off`` のため、各項目をエスケープせずに)、その結果"
"を safe としてマークするからです。その後、この safe な結果が :tfilter:"
"`escape` フィルタに送られても2回目のエスケープはされません。"

msgid ""
"In order to properly escape every element in a sequence, use the :tfilter:"
"`escapeseq` filter:"
msgstr ""
"シーケンスのすべての要素を適切にエスケープするには :tfilter:`escapeseq` フィ"
"ルタを使います："

msgid "``block``"
msgstr "``block``"

msgid ""
"Defines a block that can be overridden by child templates. See :ref:"
"`Template inheritance <template-inheritance>` for more information."
msgstr ""
"子テンプレートによってオーバーライドされる部分を定義します。詳しくは :ref:`テ"
"ンプレートの継承 <template-inheritance>` を参照してください。"

msgid "``comment``"
msgstr "``comment``"

msgid ""
"Ignores everything between ``{% comment %}`` and ``{% endcomment %}``. An "
"optional note may be inserted in the first tag. For example, this is useful "
"when commenting out code for documenting why the code was disabled."
msgstr ""
"``{% comment %}`` ～ ``{% endcomment %}`` で囲まれた部分はすべて無視されま"
"す。最初のタグには追加の説明文を含めることができます。たとえばコードの一部を"
"コメント化した際、その部分を無効にした理由を記述したいときなどに便利です。"

msgid "``comment`` tags cannot be nested."
msgstr "``comment`` タグを入れ子にすることはできません。"

msgid "``csrf_token``"
msgstr "``csrf_token``"

msgid ""
"This tag is used for CSRF protection, as described in the documentation for :"
"doc:`Cross Site Request Forgeries </ref/csrf>`."
msgstr ""
"このタグは CSRF の防止のために使用します。詳細は :doc:`クロスサイトリクエスト"
"フォージェリ (CSRF) </ref/csrf>` を参照してください。."

msgid "``cycle``"
msgstr "``cycle``"

msgid ""
"Produces one of its arguments each time this tag is encountered. The first "
"argument is produced on the first encounter, the second argument on the "
"second encounter, and so forth. Once all arguments are exhausted, the tag "
"cycles to the first argument and produces it again."
msgstr ""
"タグを実行するごとに、引数の文字列や変数から、順に一つずつ値を出力します。最"
"初の処理では 1 番目の値が、その次に 2 番目の値、以下、4 個まで同様に処理され"
"ます。サイクルのすべての値を出力すると、再び 1 番目に戻って出力します。"

msgid "This tag is particularly useful in a loop:"
msgstr "このタグは特にループの中で役立ちます："

msgid ""
"The first iteration produces HTML that refers to class ``row1``, the second "
"to ``row2``, the third to ``row1`` again, and so on for each iteration of "
"the loop."
msgstr ""
"この例では、繰り返しの最初の実行では ``row1`` クラスを参照する HTML が生成さ"
"れます。 2 回目には  ``row2``、 3 回目は再び ``row1`` というように、ループを"
"繰り返すたびに交互に処理されます。"

msgid ""
"You can use variables, too. For example, if you have two template variables, "
"``rowvalue1`` and ``rowvalue2``, you can alternate between their values like "
"this:"
msgstr ""
"変数を使うこともできます。例えば、 ``rowvalue1`` と ``rowvalue2`` という2つの"
"テンプレート変数がある場合、以下のように交互に値を変更できます："

msgid ""
"Variables included in the cycle will be escaped.  You can disable auto-"
"escaping with:"
msgstr ""
"サイクルに含まれる変数はエスケープされます。自動エスケープを無効にするには下"
"記のようにします："

msgid "You can mix variables and strings:"
msgstr "下記のように、変数と文字列を混在させることもできます："

msgid ""
"In some cases you might want to refer to the current value of a cycle "
"without advancing to the next value. To do this, give the ``{% cycle %}`` "
"tag a name, using \"as\", like this:"
msgstr ""
"場合によっては、次の値に進まずにサイクルの現在の値を参照したいこともあるで"
"しょう。これを行うには、 ``{% cycle %}`` タグに名前を付けます："

msgid ""
"From then on, you can insert the current value of the cycle wherever you'd "
"like in your template by referencing the cycle name as a context variable. "
"If you want to move the cycle to the next value independently of the "
"original ``cycle`` tag, you can use another ``cycle`` tag and specify the "
"name of the variable. So, the following template:"
msgstr ""
"これ以降、コンテキスト変数としてサイクル名を参照することで、テンプレート内の"
"どの場所にも現在のサイクルの値を挿入できます。元の ``cycle`` タグから独立して"
"サイクルの値を次へ進めたいときには、変数の名前を指定して別の ``cycle`` タグを"
"使用します。以下にテンプレートの例を挙げます:"

msgid "would output:"
msgstr "これは以下のように出力されます："

msgid ""
"You can use any number of values in a ``cycle`` tag, separated by spaces. "
"Values enclosed in single quotes (``'``) or double quotes (``\"``) are "
"treated as string literals, while values without quotes are treated as "
"template variables."
msgstr ""
"``cycle`` タグ内では、空白で区切ることでいくつでも値を使うことができます。一"
"重引用符 ( ``'`` ) または二重引用符 ( ``\"`` ) で囲まれた値は文字列リテラルと"
"して扱われ、引用符のない値はテンプレート変数として扱われます。"

msgid ""
"By default, when you use the ``as`` keyword with the cycle tag, the usage of "
"``{% cycle %}`` that initiates the cycle will itself produce the first value "
"in the cycle. This could be a problem if you want to use the value in a "
"nested loop or an included template. If you only want to declare the cycle "
"but not produce the first value, you can add a ``silent`` keyword as the "
"last keyword in the tag. For example:"
msgstr ""
"標準の設定において、 cycle タグに ``as`` を使う場合、 ``{% cycle %}`` はサイ"
"クルの初期設定を行うときサイクル内で使う値を初期化します。これは、入れ子と"
"なったループや include されたテンプレートで値を使う場合に問題になるかもしれま"
"せん。もしあなたがサイクルを宣言したいだけで初期値を生成させたくない場合に"
"は、タグのキーワードの最後に ``silent`` を加えてください。以下に例を示します:"

msgid ""
"This will output a list of ``<tr>`` elements with ``class`` alternating "
"between ``row1`` and ``row2``. The subtemplate will have access to "
"``rowcolors`` in its context and the value will match the class of the "
"``<tr>`` that encloses it. If the ``silent`` keyword were to be omitted, "
"``row1`` and ``row2`` would be emitted as normal text, outside the ``<tr>`` "
"element."
msgstr ""
"これは ``<tr>`` エレメントのリストを出力し、 ``class`` には ``row1`` と "
"``row2`` が交互に設定されます。サブテンプレートではそのコンテキスト内で "
"``rowcolors`` にアクセスし、値はそれを取り囲む ``<tr>`` のクラスに一致しま"
"す。ここでもし ``silent`` キーワードが無かったら、 ``row1`` と ``row2`` は "
"``<tr>`` エレメントの外側で通常のテキストとして発行されます。"

msgid ""
"When the silent keyword is used on a cycle definition, the silence "
"automatically applies to all subsequent uses of that specific cycle tag. The "
"following template would output *nothing*, even though the second call to "
"``{% cycle %}`` doesn't specify ``silent``:"
msgstr ""
"あるサイクルの定義において silent キーワードが使われているとき、後に続いて使"
"われる cycle タグには自動的に silent が適用されます。次に示すテンプレート"
"は、 2 番めの ``{% cycle %}`` 呼び出しでは ``silent`` を設定していませんが、"
"何も出力しません。："

msgid ""
"You can use the :ttag:`resetcycle` tag to make a ``{% cycle %}`` tag restart "
"from its first value when it's next encountered."
msgstr ""
":ttag:`resetcycle` タグを使うと、``{% cycle %}`` タグが次に現れたときに最初の"
"値から再スタートできます。"

msgid ""
"Outputs a whole load of debugging information, including the current context "
"and imported modules. ``{% debug %}`` outputs nothing when the :setting:"
"`DEBUG` setting is ``False``."
msgstr ""
"現在のコンテキストやインポートモジュールを含むデバッグ情報を出力します。:"
"setting:`DEBUG` 設定が ``False`` の場合、``{% debug %}`` は何も出力しません。"

msgid ""
"In older versions, debugging information was displayed when the :setting:"
"`DEBUG` setting was ``False``."
msgstr ""
"古いバージョンでは :setting:`DEBUG` 設定が ``False`` の場合にデバッグ情報が表"
"示されていました。"

msgid "``extends``"
msgstr "``extends``"

msgid "Signals that this template extends a parent template."
msgstr "このテンプレートが親テンプレートからの拡張であることを指示します。"

msgid "This tag can be used in two ways:"
msgstr "このタグには 2 種類の使い方があります:"

msgid ""
"``{% extends \"base.html\" %}`` (with quotes) uses the literal value "
"``\"base.html\"`` as the name of the parent template to extend."
msgstr ""
"``{% extends \"base.html\" %}`` (引用符つき) の場合、リテラル値 \"base."
"html\" を親テンプレートの名前として使います。"

msgid ""
"``{% extends variable %}`` uses the value of ``variable``. If the variable "
"evaluates to a string, Django will use that string as the name of the parent "
"template. If the variable evaluates to a ``Template`` object, Django will "
"use that object as the parent template."
msgstr ""
"``{% extends variable %}`` とした場合、変数 ``variable`` の値を親テンプレート"
"の名前として使います。変数の値が文字列の場合、 Django はその文字列を親テンプ"
"レートの名前として使います。値が ``Template`` オブジェクトの場合、Django はそ"
"のオブジェクトを親テンプレートにします。"

msgid "See :ref:`template-inheritance` for more information."
msgstr "詳しくは :ref:`template-inheritance` を参照してください。"

msgid ""
"Normally the template name is relative to the template loader's root "
"directory. A string argument may also be a relative path starting with ``./"
"`` or ``../``. For example, assume the following directory structure:"
msgstr ""
"通常、テンプレート名はテンプレートローダーのルートディレクトリからの相対パス"
"です。文字列引数には ``./`` または ``../`` で始まる相対パスを指定することもで"
"きます。例えば、以下のようなディレクトリ構造を仮定します："

msgid "In ``template.html``, the following paths would be valid:"
msgstr "``template.html`` では、以下のパスが有効です："

msgid ""
"Filters the contents of the block through one or more filters. Multiple "
"filters can be specified with pipes and filters can have arguments, just as "
"in variable syntax."
msgstr ""
"タグブロック内のコンテンツを、1 つまたは複数のフィルタに通します。複数のフィ"
"ルタを使うときはパイプ（ \" | \" ）を使って連結します。フィルタには変数のよう"
"に引数を与えることができます。"

msgid ""
"Note that the block includes *all* the text between the ``filter`` and "
"``endfilter`` tags."
msgstr ""
"``filter`` タグと ``endfilter`` タグに囲まれたテキストは、*すべて* ブロックに"
"含まれることに注意しましょう。"

msgid ""
"The :tfilter:`escape` and :tfilter:`safe` filters are not acceptable "
"arguments. Instead, use the :ttag:`autoescape` tag to manage autoescaping "
"for blocks of template code."
msgstr ""
":tfilter:`escape` と :tfilter:`safe` フィルタは引数として与えることができませ"
"ん。ブロックの自動エスケープを管理するには、代わりに :ttag:`autoescape` タグ"
"を使ってください。"

msgid "``firstof``"
msgstr "``firstof``"

msgid ""
"Outputs the first argument variable that is not \"false\" (i.e. exists, is "
"not empty, is not a false boolean value, and is not a zero numeric value). "
"Outputs nothing if all the passed variables are \"false\"."
msgstr ""
"最初の引数変数が \"false\" でない（つまり、存在し、空でなく、False の真偽値で"
"なく、0 の数値でない）場合、その変数を出力します。渡された変数がすべて "
"\"false\" の場合は何も出力しません。"

msgid "This is equivalent to:"
msgstr "上のコードは以下と等価です："

msgid ""
"You can also use a literal string as a fallback value in case all passed "
"variables are False:"
msgstr ""
"また、渡された変数がすべて False の場合のフォールバック値として、リテラル文字"
"列を使うこともできます："

msgid ""
"This tag auto-escapes variable values. You can disable auto-escaping with:"
msgstr ""
"このタグは変数の値を自動エスケープします。自動エスケープを無効にするには下記"
"のようにします："

msgid "Or if only some variables should be escaped, you can use:"
msgstr "一部の変数だけをエスケープするには、下記のようにします："

msgid ""
"You can use the syntax ``{% firstof var1 var2 var3 as value %}`` to store "
"the output inside a variable."
msgstr ""
"``{% firstof var1 var2 var3 as value %}`` のように書くことで、出力を 1 つの変"
"数内に格納することもできます。"

msgid "``for``"
msgstr "``for``"

msgid ""
"Loops over each item in an array, making the item available in a context "
"variable. For example, to display a list of athletes provided in "
"``athlete_list``:"
msgstr ""
"配列の各項目をループし、コンテキスト変数でその項目を利用できるようにします。"
"例えば、``athlete_list`` で渡されたアスリートのリストを表示するには以下のよう"
"にします："

msgid ""
"You can loop over a list in reverse by using ``{% for obj in list reversed %}"
"``."
msgstr ""
"``{% for obj in list reversed %}``　で、リストに対して逆順のループを実行でき"
"ます。"

msgid ""
"If you need to loop over a list of lists, you can unpack the values in each "
"sublist into individual variables. For example, if your context contains a "
"list of (x,y) coordinates called ``points``, you could use the following to "
"output the list of points:"
msgstr ""
"リストのリストをループする必要がある場合は、各サブリストの値を個々の変数にア"
"ンパックします。たとえば、コンテキストに ``points`` という (x,y) 座標のリスト"
"が含まれている場合、以下のように点のリストを出力できます： "

msgid ""
"This can also be useful if you need to access the items in a dictionary. For "
"example, if your context contained a dictionary ``data``, the following "
"would display the keys and values of the dictionary:"
msgstr ""
"この方法は、辞書の各要素にアクセスしたい場合にも便利です。例えば ``data`` と"
"いう辞書がある場合、以下のように辞書内のキーと値を表示できます:"

msgid ""
"Keep in mind that for the dot operator, dictionary key lookup takes "
"precedence over method lookup. Therefore if the ``data`` dictionary contains "
"a key named ``'items'``, ``data.items`` will return ``data['items']`` "
"instead of ``data.items()``. Avoid adding keys that are named like "
"dictionary methods if you want to use those methods in a template "
"(``items``, ``values``, ``keys``, etc.). Read more about the lookup order of "
"the dot operator in the :ref:`documentation of template variables <template-"
"variables>`."
msgstr ""
"ドット演算子を使う場合、メソッドよりも辞書キーへの参照が優先することに注意し"
"てください。したがって、もしも ``data`` 辞書が ``'items'`` という名前のキーを"
"持っていたなら、 ``data.items`` は ``data.items()`` ではなく "
"``data['items']`` の値を出力します。テンプレート内で辞書のメソッドを使いたい"
"場合、そのような名前のキー (``items``、``values``、``keys`` など) を辞書に追"
"加しないでください。ドット演算子による参照の優先順位についての詳細は :ref:`テ"
"ンプレート変数のドキュメント <template-variables>` を参照してください。"

msgid "The for loop sets a number of variables available within the loop:"
msgstr "for ループには、ループ内で使える多くの変数が設定されています:"

msgid "Variable"
msgstr "変数"

msgid "``forloop.counter``"
msgstr "``forloop.counter``"

msgid "The current iteration of the loop (1-indexed)"
msgstr "現在のループカウンタ番号 ( 1 から順にカウント )"

msgid "``forloop.counter0``"
msgstr "``forloop.counter0``"

msgid "The current iteration of the loop (0-indexed)"
msgstr "現在のループカウンタ番号 ( 0 から順にカウント )"

msgid "``forloop.revcounter``"
msgstr "``forloop.revcounter``"

msgid "The number of iterations from the end of the loop (1-indexed)"
msgstr "現在のループカウンタ値 ( 1 から順に、末尾からカウント)"

msgid "``forloop.revcounter0``"
msgstr "``forloop.revcounter0``"

msgid "The number of iterations from the end of the loop (0-indexed)"
msgstr "現在のループカウンタ値 ( 0 から順に、末尾からカウント)"

msgid "``forloop.first``"
msgstr "``forloop.first``"

msgid "True if this is the first time through the loop"
msgstr "最初のループであれば True "

msgid "``forloop.last``"
msgstr "``forloop.last``"

msgid "True if this is the last time through the loop"
msgstr "最後のループであれば True "

msgid "``forloop.parentloop``"
msgstr "``forloop.parentloop``"

msgid "For nested loops, this is the loop surrounding the current one"
msgstr ""
"入れ子のループであるとき、現在のループを囲んでいる 1 つ上のループを表します。"

msgid "``for`` ... ``empty``"
msgstr "``for`` ... ``empty``"

msgid ""
"The ``for`` tag can take an optional ``{% empty %}`` clause whose text is "
"displayed if the given array is empty or could not be found:"
msgstr ""
"``for`` タグのオプションとして ``{% empty %}`` 節を使うこともできます。これは"
"ループさせようとした配列が空、または存在しなかった場合に表示する文字列を指定"
"します:"

msgid ""
"The above is equivalent to -- but shorter, cleaner, and possibly faster than "
"-- the following:"
msgstr ""
"上記の例は以下のテンプレートと同等です。しかし ``{% empty %}`` を使ったほうが"
"簡潔で、かつ高速になる場合もあります。："

msgid "``if``"
msgstr "``if``"

msgid ""
"The ``{% if %}`` tag evaluates a variable, and if that variable is "
"\"true\" (i.e. exists, is not empty, and is not a false boolean value) the "
"contents of the block are output:"
msgstr ""
"``{% if %}`` タグは変数を評価し、その変数が \"true\" であるとき (すなわち変数"
"が存在し、空ではなく、その値が False でないとき ) にブロックの内容を出力しま"
"す:"

msgid ""
"In the above, if ``athlete_list`` is not empty, the number of athletes will "
"be displayed by the ``{{ athlete_list|length }}`` variable."
msgstr ""
"上の例では、 ``athlete_list`` が空でなければ、アスリートの人数を "
"``{{ athlete_list|length }}`` 変数で表示します。"

msgid ""
"As you can see, the ``if`` tag may take one or several ``{% elif %}`` "
"clauses, as well as an ``{% else %}`` clause that will be displayed if all "
"previous conditions fail. These clauses are optional."
msgstr ""
"例にもあるように ``if`` タグはオプションで 1 個以上の ``{% elif %}`` 節、およ"
"び 1 個の ``{% else %}`` 節をつけることができます。 ``{% else %}`` はそれまで"
"の評価結果がすべて True でなかった場合に表示されるコンテンツを定義します。"

msgid "Boolean operators"
msgstr "論理演算子"

msgid ""
":ttag:`if` tags may use ``and``, ``or`` or ``not`` to test a number of "
"variables or to negate a given variable:"
msgstr ""
":ttag:`if` タグは ``and`` ``or``  ``not`` を使って複数の変数を組み合わせてテ"
"ストしたり、条件を逆にしたりすることができます:"

msgid ""
"Use of both ``and`` and ``or`` clauses within the same tag is allowed, with "
"``and`` having higher precedence than ``or`` e.g.:"
msgstr ""
"``and`` と ``or`` は同じタグの中で同時に使用できます。このとき優先順位は "
"``and`` が優先します:"

msgid "will be interpreted like::"
msgstr "これは以下のように解釈されます:"

msgid ""
"Use of actual parentheses in the :ttag:`if` tag is invalid syntax. If you "
"need them to indicate precedence, you should use nested :ttag:`if` tags."
msgstr ""
"実際には :ttag:`if` タグの中で丸括弧を使うことはできません。優先順位を示す必"
"要がある場合には、:ttag:`if` タグを入れ子にして表してください。"

msgid ""
":ttag:`if` tags may also use the operators ``==``, ``!=``, ``<``, ``>``, "
"``<=``, ``>=``, ``in``, ``not in``, ``is``, and ``is not`` which work as "
"follows:"
msgstr ""
":ttag:`if` タグは演算子 ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``, "
"``in``, ``not in``, ``is``, and ``is not`` が使え、以下のように機能します:"

msgid "``==`` operator"
msgstr "``==`` 演算子"

msgid "Equality. Example:"
msgstr "等しい場合。例:"

msgid "``!=`` operator"
msgstr "``!=`` 演算子"

msgid "Inequality. Example:"
msgstr "等しくない場合。例:"

msgid "``<`` operator"
msgstr "``<`` 演算子"

msgid "Less than. Example:"
msgstr "左辺が右辺より小さい場合。例:"

msgid "``>`` operator"
msgstr "``>`` 演算子"

msgid "Greater than. Example:"
msgstr "左辺が右辺より大きい場合。例:"

msgid "``<=`` operator"
msgstr "``<=`` 演算子"

msgid "Less than or equal to. Example:"
msgstr "左辺が右辺の値以下の場合。例:"

msgid "``>=`` operator"
msgstr "``>=`` 演算子"

msgid "Greater than or equal to. Example:"
msgstr "左辺が右辺の値以上の場合。例:"

msgid "``in`` operator"
msgstr "``in`` 演算子"

msgid ""
"Contained within. This operator is supported by many Python containers to "
"test whether the given value is in the container. The following are some "
"examples of how ``x in y`` will be interpreted:"
msgstr ""
"左辺の値が右辺の値に含まれる場合。この演算子は多くのPythonコンテナデータ型に"
"よってサポートされており、指定された値がコンテナ内に存在するかどうかをチェッ"
"クできます。以下に ``x in y`` がどのように解釈されるかの例をいくつか示しま"
"す："

msgid "``not in`` operator"
msgstr "``not in`` 演算子"

msgid "Not contained within. This is the negation of the ``in`` operator."
msgstr "左辺の値が右辺の値に含まれない場合。これは ``in`` 演算子の逆です。"

msgid "``is`` operator"
msgstr "``is`` 演算子"

msgid "Object identity. Tests if two values are the same object. Example:"
msgstr ""
"オブジェクトの同一性。2つの値が同じオブジェクトかどうかをテストします。例："

msgid "``is not`` operator"
msgstr "``is not`` 演算子"

msgid ""
"Negated object identity. Tests if two values are not the same object. This "
"is the negation of the ``is`` operator. Example:"
msgstr ""
"オブジェクトの非同一性。2つの値が同じオブジェクトでないかどうかをテストしま"
"す。これは ``is`` 演算子の否定です。例："

msgid "You can also use filters in the :ttag:`if` expression. For example:"
msgstr ":ttag:`if` 内でフィルタを使うこともできます。例を示します:"

msgid "Complex expressions"
msgstr "複雑な表現"

msgid ""
"All of the above can be combined to form complex expressions. For such "
"expressions, it can be important to know how the operators are grouped when "
"the expression is evaluated - that is, the precedence rules. The precedence "
"of the operators, from lowest to highest, is as follows:"
msgstr ""
"ここまでのすべてを組み合わせて複雑な式を作ることができます。このような式で"
"は、式を評価するときに演算子がどのようにグループ化されるか、すなわち優先順位"
"の規則を理解することが重要です。演算子の優先順位は次のようになっています:"

msgid "``or``"
msgstr "``or``"

msgid "``and``"
msgstr "``and``"

msgid "``not``"
msgstr "``not``"

msgid "``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``"
msgstr "``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``"

msgid ""
"(This follows Python exactly). So, for example, the following complex :ttag:"
"`if` tag:"
msgstr ""
"(この順序は Python とまったく同じです)。 そこで、例えば次に挙げる複雑な :"
"ttag:`if` タグの場合:"

msgid "...will be interpreted as:"
msgstr "...次のように解釈されます:"

msgid ""
"If you need different precedence, you will need to use nested :ttag:`if` "
"tags. Sometimes that is better for clarity anyway, for the sake of those who "
"do not know the precedence rules."
msgstr ""
"もしこれと違った優先順位が必要ならば、:ttag:`if` タグを入れ子にして使う必要が"
"あります。優先順位の規則がはっきりしない場合には、こうした方がより明確な表現"
"になることもあるでしょう。"

msgid ""
"The comparison operators cannot be 'chained' like in Python or in "
"mathematical notation. For example, instead of using:"
msgstr ""
"比較演算子は Python や数学における記法のように、つないで書くことはできませ"
"ん。例えば次のような使い方はできません:"

msgid "you should use:"
msgstr "このように使うべきです:"

msgid "``ifchanged``"
msgstr "``ifchanged``"

msgid "Check if a value has changed from the last iteration of a loop."
msgstr "値が前回のループ実行時から変わっているかどうかを調べます。"

msgid ""
"The ``{% ifchanged %}`` block tag is used within a loop. It has two possible "
"uses."
msgstr ""
"``{% ifchanged %}`` ブロックタグはループの内部で使います。このタグには 2 通り"
"の使い方があります。"

msgid ""
"Checks its own rendered contents against its previous state and only "
"displays the content if it has changed. For example, this displays a list of "
"days, only displaying the month if it changes:"
msgstr ""
"今回の出力内容が、前回の状態に対して変化しているときだけ表示します。例えば、"
"日付の一覧を表示する場合に、月が変わったときだけ月名を表示したければ以下のよ"
"うにします:"

msgid ""
"If given one or more variables, check whether any variable has changed. For "
"example, the following shows the date every time it changes, while showing "
"the hour if either the hour or the date has changed:"
msgstr ""
"タグに 1 個以上の変数が与えられている場合、それぞれの変数について内容が変化し"
"たかどうかを調べます。例えば、以下の例では日付が変化したときには日付を表示"
"し、日付と時刻が同時に変化したときだけ時刻も表示します:"

msgid ""
"The ``ifchanged`` tag can also take an optional ``{% else %}`` clause that "
"will be displayed if the value has not changed:"
msgstr ""
"``ifchanged`` タグは、オプションで ``{% else %}`` 節を使うこともできます。こ"
"れは値に変化がないときに表示されます:"

msgid ""
"Loads a template and renders it with the current context. This is a way of "
"\"including\" other templates within a template."
msgstr ""
"テンプレートをロードし、現在のコンテキストを使って出力します。これはテンプ"
"レート内に他のテンプレートを取り込む（ “include” ）方法の一つです。"

msgid ""
"The template name can either be a variable or a hard-coded (quoted) string, "
"in either single or double quotes."
msgstr ""
"テンプレート名はハードコードされた (引用符で囲った) 文字列でもよく、引用符は"
"一重引用符 （'...'）でも二重引用符（\"...\"）でもかまいません。"

msgid ""
"This example includes the contents of the template ``\"foo/bar.html\"``:"
msgstr ""
"次の例では、 ``\"foo/bar.html\"`` という名前のテンプレートの内容を include し"
"ます:"

msgid ""
"Normally the template name is relative to the template loader's root "
"directory. A string argument may also be a relative path starting with ``./"
"`` or ``../`` as described in the :ttag:`extends` tag."
msgstr ""
"通常、テンプレート名はテンプレートローダーのルートディレクトリからの相対パス"
"です。 :ttag:`extends` タグで説明されているように、文字列引数には ``./`` また"
"は ``../`` で始まる相対パスを指定することもできます。"

msgid ""
"This example includes the contents of the template whose name is contained "
"in the variable ``template_name``:"
msgstr ""
"次の例では、変数 ``template_name`` の値をテンプレート名として、そのテンプレー"
"トの内容を include します:"

msgid ""
"The variable may also be any object with a ``render()`` method that accepts "
"a context. This allows you to reference a compiled ``Template`` in your "
"context."
msgstr ""
"変数は、コンテキストを受け取る ``render()`` メソッドを持っていればオブジェク"
"トでも構いません。これによって、コンテキスト内のコンパイル済みの "
"``Template``  を参照できます。"

msgid ""
"Additionally, the variable may be an iterable of template names, in which "
"case the first that can be loaded will be used, as per :func:`~django."
"template.loader.select_template`."
msgstr ""
"さらに、この変数はテンプレート名のイテラブルにすることもできます。その場"
"合、 :func:`~django.template.loader.select_template` に従って、ロードできる最"
"初のものが使用されます。"

msgid ""
"An included template is rendered within the context of the template that "
"includes it. This example produces the output ``\"Hello, John!\"``:"
msgstr ""
"include されたテンプレートは、include した側のコンテキストにおいて解釈されま"
"す。以下の例は ``\"Hello, John!\"`` を出力します::"

msgid ""
"Context: variable ``person`` is set to ``\"John\"`` and variable "
"``greeting`` is set to ``\"Hello\"``."
msgstr ""
"コンテキスト: 変数 ``person`` に ``\"John\"`` を、変数 ``greeting`` に "
"``\"Hello\"`` をセット。"

msgid "Template:"
msgstr "テンプレート:"

msgid "The ``name_snippet.html`` template:"
msgstr "``name_snippet.html`` テンプレート:"

msgid ""
"You can pass additional context to the template using keyword arguments:"
msgstr ""
"キーワード引数を使って、テンプレートに追加のコンテキストを渡すことができます:"

msgid ""
"If you want to render the context only with the variables provided (or even "
"no variables at all), use the ``only`` option. No other variables are "
"available to the included template:"
msgstr ""
"あらかじめ準備された変数だけを使って (あるいは変数をまったく使わずに) 出力さ"
"せたい場合は ``only`` オプションを使います。テンプレートを取り込むために、他"
"の変数は利用できません:"

msgid ""
"The :ttag:`include` tag should be considered as an implementation of "
"\"render this subtemplate and include the HTML\", not as \"parse this "
"subtemplate and include its contents as if it were part of the parent\". "
"This means that there is no shared state between included templates -- each "
"include is a completely independent rendering process."
msgstr ""
":ttag:`include` タグの実行は『サブテンプレートを出力し、その結果である HTML "
"を取り込む』と考えるべきで、『サブテンプレートを解析し、親テンプレートの一部"
"分として、そこに組み込まれている』かのように考えるべきではありません。これ"
"は、取り込んだテンプレートの間では状態を共有できず、まったく独立した過程で出"
"力されることを意味します。"

msgid ""
"Blocks are evaluated *before* they are included. This means that a template "
"that includes blocks from another will contain blocks that have *already "
"been evaluated and rendered* - not blocks that can be overridden by, for "
"example, an extending template."
msgstr ""
"ブロックは取り込まれる *前に* 評価されます。ブロックを含んでいる他のテンプ"
"レートを取り込む場合、そのブロックは *すでに評価され、出力された結果* として"
"のブロックであり、たとえばテンプレートを継承したときのような、オーバーライド"
"可能なブロックではありません。"

msgid "``load``"
msgstr "``load``"

msgid "Loads a custom template tag set."
msgstr "カスタムのテンプレートタグセットを読み込みます。"

msgid ""
"For example, the following template would load all the tags and filters "
"registered in ``somelibrary`` and ``otherlibrary`` located in package "
"``package``:"
msgstr ""
"例えば次のテンプレートは ``somelibrary`` 、そして ``package`` パッケージの "
"``otherlibrary`` に登録されたすべてのタグとフィルタを読み込みます。:"

msgid ""
"You can also selectively load individual filters or tags from a library, "
"using the ``from`` argument. In this example, the template tags/filters "
"named ``foo`` and ``bar`` will be loaded from ``somelibrary``:"
msgstr ""
"引数に ``from`` を使えば、ライブラリからフィルタやタグを個別に選んで読み込む"
"ことができます。以下の例では、 ``foo``、``bar`` という名前のテンプレートタグ"
"またはフィルタを ``somelibrary`` から読み込みます:"

msgid ""
"See :doc:`Custom tag and filter libraries </howto/custom-template-tags>` for "
"more information."
msgstr ""
"詳しくは :doc:`カスタムタグとフィルタのライブラリ </howto/custom-template-"
"tags>` を参照してください。"

msgid "``lorem``"
msgstr "``lorem``"

msgid ""
"Displays random \"lorem ipsum\" Latin text. This is useful for providing "
"sample data in templates."
msgstr ""
"ランダムな\"lorem ipsum\" のラテン語テキストを表示させます。テンプレート内で"
"サンプルデータを用意するのに便利です。"

msgid "Usage:"
msgstr "使い方:"

msgid ""
"The ``{% lorem %}`` tag can be used with zero, one, two or three arguments. "
"The arguments are:"
msgstr "``{% lorem %}`` タグは 0 から 3 個の引数をとります:"

msgid "``count``"
msgstr "``count``"

msgid ""
"A number (or variable) containing the number of paragraphs or words to "
"generate (default is 1)."
msgstr ""
"生成する単語または段落の数を指定する、数値または変数 (デフォルトは 1 ) 。"

msgid "``method``"
msgstr "``method``"

msgid ""
"Either ``w`` for words, ``p`` for HTML paragraphs or ``b`` for plain-text "
"paragraph blocks (default is ``b``)."
msgstr ""
"``w`` のとき単語を、``p`` のとき HTML の段落ブロック、``b`` のときプレーンテ"
"キストの段落ブロックを生成します ( デフォルトは ``b`` )。"

msgid "``random``"
msgstr "``random``"

msgid ""
"The word ``random``, which if given, does not use the common paragraph "
"(\"Lorem ipsum dolor sit amet...\") when generating text."
msgstr ""
"``random`` が与えられたとき、一般的な文章 ( \"Lorem ipsum dolor sit amet..."
"\" ) を使わずにテキストを生成します。"

msgid "``{% lorem %}`` will output the common \"lorem ipsum\" paragraph."
msgstr "``{% lorem %}`` は、一般的な \"lorem ipsum\" を出力します。"

msgid ""
"``{% lorem 3 p %}`` will output the common \"lorem ipsum\" paragraph and two "
"random paragraphs each wrapped in HTML ``<p>`` tags."
msgstr ""
"``{% lorem 3 p %}`` は一般的な \"lorem ipsum\" と 2 個のランダムな文章を、そ"
"れぞれ HTML の ``<p>`` タグで括って出力します。"

msgid "``{% lorem 2 w random %}`` will output two random Latin words."
msgstr "``{% lorem 2 w random %}`` は 2 個のランダムなラテン単語を出力します。"

msgid "``now``"
msgstr "``now``"

msgid ""
"Displays the current date and/or time, using a format according to the given "
"string. Such string can contain format specifiers characters as described in "
"the :tfilter:`date` filter section."
msgstr ""
"指定したフォーマット文字列にしたがって現在の日付や時刻を表示します。フォー"
"マット文字列で使われる文字については、 :tfilter:`date` フィルタの項で説明して"
"います。"

msgid ""
"Note that you can backslash-escape a format string if you want to use the "
"\"raw\" value. In this example, both \"o\" and \"f\" are backslash-escaped, "
"because otherwise each is a format string that displays the year and the "
"time, respectively:"
msgstr ""
"文字列の中でフォーマット文字を普通の文字として扱いたい場合は、バックスラッ"
"シュ文字（ ``\\`` ）でエスケープします。次の例では、 \"o\" と \"f\" をエス"
"ケープしています。そうしなければ、これらはそれぞれ年と時刻を表示するための"
"フォーマット文字とみなされるからです:"

msgid "This would display as \"It is the 4th of September\"."
msgstr "この表示結果は \"It is the 4th of September\" となります。"

msgid ""
"The format passed can also be one of the predefined ones :setting:"
"`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`SHORT_DATE_FORMAT` or :"
"setting:`SHORT_DATETIME_FORMAT`. The predefined formats may vary depending "
"on the current locale and if :doc:`/topics/i18n/formatting` is enabled, e.g.:"
msgstr ""
"フォーマットはプリセット（ :setting:`DATE_FORMAT`、 :setting:"
"`DATETIME_FORMAT`、 :setting:`SHORT_DATE_FORMAT`、 :setting:"
"`SHORT_DATETIME_FORMAT` ）の中から 1 つを選ぶこともできます。 :doc:`/topics/"
"i18n/formatting` が有効なときは、プリセットフォーマットの内容は現在設定されて"
"いるロケールによって変わります。たとえば、下記のようにします:"

msgid ""
"You can also use the syntax ``{% now \"Y\" as current_year %}`` to store the "
"output (as a string) inside a variable. This is useful if you want to use "
"``{% now %}`` inside a template tag like :ttag:`blocktranslate` for example:"
msgstr ""
"出力を (文字列として) 変数に入れる場合には ``{% now \"Y\" as current_year %}"
"`` の書式が使えます。これは :ttag:`blocktranslate` のようなテンプレートタグ"
"で ``{% now %}`` を使いたいときに役立ちます:"

msgid "``regroup``"
msgstr "``regroup``"

msgid "Regroups a list of alike objects by a common attribute."
msgstr ""
"オブジェクトのリストから、同じ属性値を持つオブジェクトのグループを作ります。"

msgid ""
"This complex tag is best illustrated by way of an example: say that "
"``cities`` is a list of cities represented by dictionaries containing "
"``\"name\"``, ``\"population\"``, and ``\"country\"`` keys:"
msgstr ""
"この複雑なタグは例を通して説明するのがいいでしょう: ``cities`` は "
"``\"name\"``, ``\"population\"``, and ``\"country\"`` をキーとして含むディク"
"ショナリによって表された都市のリストとします:"

msgid ""
"...and you'd like to display a hierarchical list that is ordered by country, "
"like this:"
msgstr ""
"...そして、あなたは次のように、国別に並べた一覧を表示させたいものとしましょ"
"う:"

msgid "India"
msgstr "India"

msgid "Mumbai: 19,000,000"
msgstr "Mumbai: 19,000,000"

msgid "Calcutta: 15,000,000"
msgstr "Calcutta: 15,000,000"

msgid "USA"
msgstr "USA"

msgid "New York: 20,000,000"
msgstr "New York: 20,000,000"

msgid "Chicago: 7,000,000"
msgstr "Chicago: 7,000,000"

msgid "Japan"
msgstr "Japan"

msgid "Tokyo: 33,000,000"
msgstr "Tokyo: 33,000,000"

msgid ""
"You can use the ``{% regroup %}`` tag to group the list of cities by "
"country. The following snippet of template code would accomplish this:"
msgstr ""
"ここで ``{% regroup %}`` タグを使って都市のリストを国別にグループ化できます。"
"以下は、そのためのテンプレートコード例です:"

msgid ""
"Let's walk through this example. ``{% regroup %}`` takes three arguments: "
"the list you want to regroup, the attribute to group by, and the name of the "
"resulting list. Here, we're regrouping the ``cities`` list by the "
"``country`` attribute and calling the result ``country_list``."
msgstr ""
"この例を見てみましょう。``{% regroup %}`` タグは 3 つの引数を取ります。グルー"
"プ分けを行うリスト、グループ分けに使う属性の名前、そして結果とするリストの名"
"前の 3 つです。ここでは ``cities`` リストを ``country`` 属性でグループ化し、"
"その結果を ``country_list`` と呼んでいます。"

msgid ""
"``{% regroup %}`` produces a list (in this case, ``country_list``) of "
"**group objects**. Group objects are instances of :py:func:`~collections."
"namedtuple` with two fields:"
msgstr ""
"``{% regroup %}`` は **グループオブジェクト** のリスト(この場合は "
"``country_list``) を生成します。グループオブジェクトは2つのフィールドを持つ :"
"py:func:`~collections.namedtuple` のインスタンスです："

msgid ""
"``grouper`` -- the item that was grouped by (e.g., the string \"India\" or "
"\"Japan\")."
msgstr ""
"``grouper`` -- グループ分けに使われた要素 ( ここでは \"India\" \"Japan\" と"
"いった文字列 )"

msgid ""
"``list`` -- a list of all items in this group (e.g., a list of all cities "
"with country='India')."
msgstr ""
"``list`` -- このグループ内のすべての要素からなるリスト ( たとえば "
"country='India' であるすべての都市のリスト)"

msgid ""
"Because ``{% regroup %}`` produces :py:func:`~collections.namedtuple` "
"objects, you can also write the previous example as:"
msgstr ""
"``{% regroup %}`` は :py:func:`~collections.namedtuple` オブジェクトを生成す"
"るので、上の例を次のように書くこともできます："

msgid ""
"Note that ``{% regroup %}`` does not order its input! Our example relies on "
"the fact that the ``cities`` list was ordered by ``country`` in the first "
"place. If the ``cities`` list did *not* order its members by ``country``, "
"the regrouping would naively display more than one group for a single "
"country. For example, say the ``cities`` list was set to this (note that the "
"countries are not grouped together):"
msgstr ""
"{% regroup %} は入力をソートしないことに注意してください！ 上の例では、リス"
"ト ``cities`` は、あらかじめ ``country`` の順でソート済みだという前提です。"
"``cities`` が ``country`` の順に並べられて *いなかった* 場合、regroup はその"
"まま何も考えずに 1 つの国に対してグループを 1 つ以上作ってしまうかもしれませ"
"ん。たとえばリスト ``cities`` が、次のように (リスト内で国ごとにまとまってい"
"ない状態に) なっていたとしましょう。"

msgid ""
"With this input for ``cities``, the example ``{% regroup %}`` template code "
"above would result in the following output:"
msgstr ""
"この ``cities`` を入力に使うと、先ほどの ``{% regroup %}`` テンプレートコード"
"は次のような結果を出力するでしょう:"

msgid ""
"The easiest solution to this gotcha is to make sure in your view code that "
"the data is ordered according to how you want to display it."
msgstr ""
"このような落し穴を解決するには、ビューコード内であらかじめデータを表示したい"
"順番に並べておくのが最も簡単でしょう。"

msgid ""
"Another solution is to sort the data in the template using the :tfilter:"
"`dictsort` filter, if your data is in a list of dictionaries:"
msgstr ""
"データが辞書のリストである場合には、もう一つの解決策として、テンプレートの中"
"で :tfilter:`dictsort` フィルタを使ってデータを並べ変えることができます:"

msgid "Grouping on other properties"
msgstr "その他の属性によるグループ化"

msgid ""
"Any valid template lookup is a legal grouping attribute for the regroup tag, "
"including methods, attributes, dictionary keys and list items. For example, "
"if the \"country\" field is a foreign key to a class with an attribute "
"\"description,\" you could use:"
msgstr ""
"テンプレートの有効な参照は、いずれも regroup タグでグループ化するための属性と"
"して扱うことができます。これにはメソッド、属性、辞書のキー、リスト項目が含ま"
"れます。例えば \"country\" というフィールドが外部キーで、その参照するクラス"
"が \"description\" 属性を持つ場合、次のように使うことができます:"

msgid ""
"Or, if ``country`` is a field with ``choices``, it will have a :meth:"
"`~django.db.models.Model.get_FOO_display` method available as an attribute, "
"allowing  you to group on the display string rather than the ``choices`` key:"
msgstr ""
"また、 ``country`` が ``choices`` をともなうフィールドである場合、それは属性"
"として使える :meth:`~django.db.models.Model.get_FOO_display` メソッドを持って"
"いるので ``choices`` のキーではなく表示文字列でグループ化することもできます："

msgid ""
"``{{ country.grouper }}`` will now display the value fields from the "
"``choices`` set rather than the keys."
msgstr ""
"これで、 ``{{ country.grouper }}`` はキーではなく ``choices`` セットの値"
"フィールドを表示するようになります。"

msgid "``resetcycle``"
msgstr "``resetcycle``"

msgid ""
"Resets a previous `cycle`_ so that it restarts from its first item at its "
"next encounter. Without arguments, ``{% resetcycle %}`` will reset the last "
"``{% cycle %}`` defined in the template."
msgstr ""
"前の `cycle`_ をリセットし、次の遭遇時に最初の項目から再開するようにします。"
"引数がない場合、 ``{% resetcycle %}`` はテンプレートで定義された最後の ``{% "
"cycle %}`` をリセットします。"

msgid "This example would return this HTML:"
msgstr "上記の例は以下のようなHTMLを返します："

msgid ""
"Notice how the first block ends with ``class=\"odd\"`` and the new one "
"starts with ``class=\"odd\"``. Without the ``{% resetcycle %}`` tag, the "
"second block would start with ``class=\"even\"``."
msgstr ""
"最初のブロックが ``class=\"odd\"`` で終わり、新しいブロックは "
"``class=\"odd\"`` で始まることに注意してください。 ``{% resetcycle %}`` タグ"
"がなければ、2番目のブロックは ``class=\"even\"`` から始まります。"

msgid "You can also reset named cycle tags:"
msgstr "名前付きのサイクルタグをリセットすることもできます："

msgid ""
"In this example, we have both the alternating odd/even rows and a \"major\" "
"row every fifth row. Only the five-row cycle is reset when a category "
"changes."
msgstr ""
"この例では、\"odd\" と \"even\" の交互の行と、5行目ごとの \"major\" な行の両"
"方があります。カテゴリーが変わると、5列のサイクルだけがリセットされます。"

msgid "``spaceless``"
msgstr "``spaceless``"

msgid ""
"Removes whitespace between HTML tags. This includes tab characters and "
"newlines."
msgstr ""
"ブロック内の HTML タグ間にある空白文字を除去します。タブ文字や改行も含みま"
"す。"

msgid ""
"Only space between *tags* is removed -- not space between tags and text. In "
"this example, the space around ``Hello`` won't be stripped:"
msgstr ""
"取り除かれるのは、タグとタグの間の空白だけです。タグとテキストの間のスペース"
"は取り除かれません。この例では、``Hello`` の周りのスペースは取り除かれませ"
"ん："

msgid "``templatetag``"
msgstr "``templatetag``"

msgid "Outputs one of the syntax characters used to compose template tags."
msgstr "テンプレートタグの構文で使われる文字を、通常の文字として出力します。"

msgid ""
"The template system has no concept of \"escaping\" individual characters. "
"However, you can use the ``{% templatetag %}`` tag to display one of the "
"template tag character combinations."
msgstr ""
"テンプレートシステムには個々の文字を「エスケープ」する概念はありません。しか"
"し、``{% templatetag %}`` タグを使えば、テンプレートタグの文字の組み合わせを"
"表示できます。"

msgid "The argument tells which template bit to output:"
msgstr "どの要素を出力するかは、引数で指定します::"

msgid "Outputs"
msgstr "出力"

msgid "``openblock``"
msgstr "``openblock``"

msgid "``{%``"
msgstr "``{%``"

msgid "``closeblock``"
msgstr "``closeblock``"

msgid "``%}``"
msgstr "``%}``"

msgid "``openvariable``"
msgstr "``openvariable``"

msgid "``{{``"
msgstr "``{{``"

msgid "``closevariable``"
msgstr "``closevariable``"

msgid "``}}``"
msgstr "``}}``"

msgid "``openbrace``"
msgstr "``openbrace``"

msgid "``{``"
msgstr "``{``"

msgid "``closebrace``"
msgstr "``closebrace``"

msgid "``}``"
msgstr "``}``"

msgid "``opencomment``"
msgstr "``opencomment``"

msgid "``{#``"
msgstr "``{#``"

msgid "``closecomment``"
msgstr "``closecomment``"

msgid "``#}``"
msgstr "``#}``"

msgid ""
"See also the :ttag:`verbatim` tag for another way of including these "
"characters."
msgstr ""
"これらの文字を含める別の方法については :ttag:`verbatim` タグも参照してくださ"
"い。"

msgid "``url``"
msgstr "``url``"

msgid ""
"Returns an absolute path reference (a URL without the domain name) matching "
"a given view and optional parameters. Any special characters in the "
"resulting path will be encoded using :func:`~django.utils.encoding."
"iri_to_uri`."
msgstr ""
"ビューとオプションの引数を指定して、これとマッチする絶対パスへの参照 ( ドメイ"
"ン部分を除いた URL ) を返します。結果のパスに特殊文字が含まれる場合、 :func:"
"`~django.utils.encoding.iri_to_uri` を使ってエンコードされます。"

msgid ""
"This is a way to output links without violating the DRY principle by having "
"to hard-code URLs in your templates:"
msgstr ""
"これによって、テンプレート内での URL のハードコードによって DRY 原則に反する"
"ことなくリンクを出力できます:"

msgid ""
"The first argument is a :ref:`URL pattern name <naming-url-patterns>`. It "
"can be a quoted literal or any other context variable. Additional arguments "
"are optional and should be space-separated values that will be used as "
"arguments in the URL. The example above shows passing positional arguments. "
"Alternatively you may use keyword syntax:"
msgstr ""
"第 1 引数は :ref:`URL パターン名 <naming-url-patterns>` です。これは引用符で"
"括ったリテラル、またはその他のコンテキスト変数です。続く引数はオプションで、"
"空白で区切って指定します。引数はそれぞれ URL の引数として使われます。上の例で"
"は固定引数によって引数を指定していますが、代わりにキーワード引数で指定するこ"
"ともできます:"

msgid ""
"Do not mix both positional and keyword syntax in a single call. All "
"arguments required by the URLconf should be present."
msgstr ""
"1 つの呼び出しのなかで、固定引数とキーワード引数を混ぜることはできません。ま"
"た URLconf で必要とされる引数はすべて指定しなければなりません。"

msgid ""
"For example, suppose you have a view, ``app_views.client``, whose URLconf "
"takes a client ID (here, ``client()`` is a method inside the views file "
"``app_views.py``). The URLconf line might look like this:"
msgstr ""
"たとえば ``app_views.client`` という名前のビューがあって、クライアントの ID "
"を引数に取るとしましょう ( ``client()`` は、 views ファイル ``app_views.py`` "
"の中で定義されているメソッドです ) 。 URLconf は以下のようなものになるでしょ"
"う:"

msgid ""
"If this app's URLconf is included into the project's URLconf under a path "
"such as this:"
msgstr ""
"このアプリケーションの URLconf が、プロジェクトの URLconf の中に次のような形"
"で include されていたとします:"

msgid "...then, in a template, you can create a link to this view like this:"
msgstr ""
"...このとき、テンプレート内でこのビューへのリンクを作るには、次のようにしま"
"す:"

msgid "The template tag will output the string ``/clients/client/123/``."
msgstr "テンプレートタグの出力は、文字列 ``/clients/client/123/`` となります。"

msgid ""
"Note that if the URL you're reversing doesn't exist, you'll get an :exc:"
"`~django.urls.NoReverseMatch` exception raised, which will cause your site "
"to display an error page."
msgstr ""
"逆引きしようとしている URL が存在しなかった場合、 :exc:`~django.urls."
"NoReverseMatch` 例外が発生して、あなたのサイトにはエラーページが表示されるこ"
"とに注意しましょう。"

msgid ""
"If you'd like to retrieve a URL without displaying it, you can use a "
"slightly different call:"
msgstr ""
"ページを表示させずに URL を取り出したい場合、少し違った呼び出し方が使えます:"

msgid ""
"The scope of the variable created by the  ``as var`` syntax is the ``{% "
"block %}`` in which the ``{% url %}`` tag appears."
msgstr ""
"`` ～ as 変数`` の構文で作られた変数は、 ``{% url %}`` タグのある ``{% block "
"%}`` 内がスコープとなります。"

msgid ""
"This ``{% url ... as var %}`` syntax will *not* cause an error if the view "
"is missing. In practice you'll use this to link to views that are optional:"
msgstr ""
"次の例で、 ``{% url ... as var %}`` 構文はビューが見つからなくてもエラーを起"
"こしません。実用としては、オプションのビューへリンクする場合に使えます:"

msgid ""
"If you'd like to retrieve a namespaced URL, specify the fully qualified name:"
msgstr ""
"名前空間化された URL を取り出したい場合は、完全修飾名で指定してください："

msgid ""
"This will follow the normal :ref:`namespaced URL resolution strategy <topics-"
"http-reversing-url-namespaces>`, including using any hints provided by the "
"context as to the current application."
msgstr ""
"これは通常の :ref:`名前付き URL の解決順序 <topics-http-reversing-url-"
"namespaces>` に従います。ここには現在のアプリケーションに関してコンテキストか"
"ら得られる様々なヒントについて書かれています。"

msgid ""
"Don't forget to put quotes around the URL pattern ``name``, otherwise the "
"value will be interpreted as a context variable!"
msgstr ""
"URL パターン ``name`` は忘れずに引用符で囲んで下さい。そうしないと、値はコン"
"テキスト変数であると解釈されます！"

msgid "``verbatim``"
msgstr "``verbatim``"

msgid ""
"Stops the template engine from rendering the contents of this block tag."
msgstr "このブロックタグ内では、テンプレートエンジンによる解釈を行いません。"

msgid ""
"A common use is to allow a JavaScript template layer that collides with "
"Django's syntax. For example:"
msgstr ""
"これは JavaScript テンプレート の文法が Django と衝突してしまう時によく使われ"
"ます。例えば:"

msgid ""
"You can also designate a specific closing tag, allowing the use of ``{% "
"endverbatim %}`` as part of the unrendered contents:"
msgstr ""
"verbatim ブロックの中で \"``{% endverbatim %}``\" を使うには、開始・終了タグ"
"が特定できるように名前をつけます:"

msgid "``widthratio``"
msgstr "``widthratio``"

msgid ""
"For creating bar charts and such, this tag calculates the ratio of a given "
"value to a maximum value, and then applies that ratio to a constant."
msgstr ""
"バーチャートなどを生成する場合のために、指定した値と最大値との比を計算し、 定"
"数に掛けた値を返します。"

msgid ""
"If ``this_value`` is 175, ``max_value`` is 200, and ``max_width`` is 100, "
"the image in the above example will be 88 pixels wide (because 175/200 "
"= .875; .875 * 100 = 87.5 which is rounded up to 88)."
msgstr ""
"ここで this_value = 175 、 max_value = 200 であるとき、画像の幅は 88 ピクセル"
"になります (175 / 200 = .875、 .875 * 100 = 87.5 から四捨五入して 88 )。"

msgid ""
"In some cases you might want to capture the result of ``widthratio`` in a "
"variable. It can be useful, for instance, in a :ttag:`blocktranslate` like "
"this:"
msgstr ""
"``widthratio`` の結果を変数に入れてキャプチャーしたいことがあります。例えば :"
"ttag:`blocktranslate` で使う場合、次のようにできます:"

msgid "``with``"
msgstr "``with``"

msgid ""
"Caches a complex variable under a simpler name. This is useful when "
"accessing an \"expensive\" method (e.g., one that hits the database) "
"multiple times."
msgstr ""
"複雑な表現の変数の値をキャッシュし、簡単な名前で参照できるようにします。呼出"
"しコストの高いメソッド (たとえばデータベースを操作するようなメソッド) に何度"
"もアクセスする際に便利です。"

msgid ""
"The populated variable (in the example above, ``total``) is only available "
"between the ``{% with %}`` and ``{% endwith %}`` tags."
msgstr ""
"値を組み込んだ変数 (上の例でいえば ``total`` ) は ``{% with %}`` と ``{% "
"endwith %}`` タグの間でだけ有効です。"

msgid "You can assign more than one context variable:"
msgstr "コンテキスト変数は、複数割り当てることができます:"

msgid ""
"The previous more verbose format is still supported: ``{% with business."
"employees.count as total %}``"
msgstr ""
"従来の冗長な書式もサポートされています:  ``{% with business.employees.count "
"as total %}``"

msgid "Built-in filter reference"
msgstr "組み込みフィルタリファレンス"

msgid "``add``"
msgstr "``add``"

msgid "Adds the argument to the value."
msgstr "入力値に対して引数の値を加算します。"

msgid "If ``value`` is ``4``, then the output will be ``6``."
msgstr "value が 4 なら、出力は 6 になるでしょう。"

msgid ""
"This filter will first try to coerce both values to integers. If this fails, "
"it'll attempt to add the values together anyway. This will work on some data "
"types (strings, list, etc.) and fail on others. If it fails, the result will "
"be an empty string."
msgstr ""
"このフィルタは、まず両方の値を強制的に整数とみなして加算しようとします。失敗"
"した場合は、とにかく値を足し合わせることを試みます。これはいくつかのデータ型 "
"(文字列、リストなど) では動作しますが、それ以外では失敗します。失敗した場合、"
"結果は空の文字列になります。"

msgid "For example, if we have:"
msgstr "例として、次のようなフィルタがあるとしましょう:"

msgid ""
"and ``first`` is ``[1, 2, 3]`` and ``second`` is ``[4, 5, 6]``, then the "
"output will be ``[1, 2, 3, 4, 5, 6]``."
msgstr ""
"``first`` が ``[1, 2, 3]`` 、 ``second`` が ``[4, 5, 6]`` であった場合、出力"
"は ``[1, 2, 3, 4, 5, 6]`` になります。"

msgid ""
"Strings that can be coerced to integers will be **summed**, not "
"concatenated, as in the first example above."
msgstr ""
"整数に変換可能な文字列は、整数として「**加算**」されます。上の例のように「**"
"結合**」されません。"

msgid "``addslashes``"
msgstr "``addslashes``"

msgid ""
"Adds slashes before quotes. Useful for escaping strings in CSV, for example."
msgstr ""
"引用符の前にスラッシュを追加します。CSV などの文字列をエスケープする際に便利"
"です。"

msgid ""
"If ``value`` is ``\"I'm using Django\"``, the output will be ``\"I\\'m using "
"Django\"``."
msgstr ""
"``value`` の値が ``\"I'm using Django\"`` のとき、出力は ``\"I\\'m using "
"Django\"`` となります。"

msgid "``capfirst``"
msgstr "``capfirst``"

msgid ""
"Capitalizes the first character of the value. If the first character is not "
"a letter, this filter has no effect."
msgstr ""
"入力値の先頭の文字を大文字に変換します。最初の文字がアルファベットでなければ"
"効果はありません。"

msgid "If ``value`` is ``\"django\"``, the output will be ``\"Django\"``."
msgstr "``value`` が ``django`` のとき、出力は ``\"Django\"`` となります。"

msgid "``center``"
msgstr "``center``"

msgid "Centers the value in a field of a given width."
msgstr "入力値を引数で指定された幅のフィールド内に中央寄せします。"

msgid ""
"If ``value`` is ``\"Django\"``, the output will be ``\"     Django    \"``."
msgstr ""
"``value`` の値が ``\"django\"`` のとき、出力は ``\"     Django    \"`` となり"
"ます。"

msgid "``cut``"
msgstr "``cut``"

msgid "Removes all values of arg from the given string."
msgstr "入力値の中から、引数に指定した値を全て取り除きます。"

msgid ""
"If ``value`` is ``\"String with spaces\"``, the output will be "
"``\"Stringwithspaces\"``."
msgstr ""
"``value`` の値が ``\"String with spaces\"`` のとき、出力は "
"``\"Stringwithspaces\"`` となります。"

msgid "Formats a date according to the given format."
msgstr "引数に指定した書式で日付をフォーマットします。"

msgid ""
"Uses a similar format to PHP's `date() <https://www.php.net/manual/en/"
"function.date.php>`_ function with some differences."
msgstr ""
"PHP の `date() <https://www.php.net/manual/en/function.date.php>`_ 関数と似た"
"書式を使いますが、若干の違いがあります。"

msgid ""
"These format characters are not used in Django outside of templates. They "
"were designed to be compatible with PHP to ease transitioning for designers."
msgstr ""
"これらのフォーマット文字は、テンプレート以外では使えません。デザイナーが PHP "
"のテンプレートから容易に変換できるように互換性を持たせています。"

msgid "Available format strings:"
msgstr "利用可能なフォーマット文字:"

msgid "Format character"
msgstr "フォーマット文字"

msgid "Example output"
msgstr "出力の例"

msgid "**Day**"
msgstr "日"

msgid "``d``"
msgstr "``d``"

msgid "Day of the month, 2 digits with leading zeros."
msgstr "日。 2 桁のゼロ詰め表示です。"

msgid "``'01'`` to ``'31'``"
msgstr "``'01'`` ～ ``'31'``"

msgid "``j``"
msgstr "``j``"

msgid "Day of the month without leading zeros."
msgstr "日。ゼロ埋め表示なし。"

msgid "``'1'`` to ``'31'``"
msgstr "``'1'`` ～ ``'31'``"

msgid "``D``"
msgstr "``D``"

msgid "Day of the week, textual, 3 letters."
msgstr "曜日。 アルファベット 3 文字のテキスト形式です。"

msgid "``'Fri'``"
msgstr "``'Fri'``"

msgid "``l``"
msgstr "``l``"

msgid "Day of the week, textual, long."
msgstr "曜日。長いテキスト形式です。"

msgid "``'Friday'``"
msgstr "``'Friday'``"

msgid "``S``"
msgstr "``S``"

msgid "English ordinal suffix for day of the month, 2 characters."
msgstr "日を表わす数字につける、英語特有の接尾辞。アルファベット 2 文字です。"

msgid "``'st'``, ``'nd'``, ``'rd'`` or ``'th'``"
msgstr "``'st'``, ``'nd'``, ``'rd'`` or ``'th'``"

msgid "``w``"
msgstr "``w``"

msgid "Day of the week, digits without leading zeros."
msgstr "曜日（数字 1 桁）。"

msgid "``'0'`` (Sunday) to ``'6'`` (Saturday)"
msgstr "``'0'`` (日曜) ～ ``'6'`` (土曜)"

msgid "``z``"
msgstr "``z``"

msgid "Day of the year."
msgstr "日（１年間における）"

msgid "``1`` to ``366``"
msgstr "``1`` ～ ``366``"

msgid "**Week**"
msgstr "**週**"

msgid "``W``"
msgstr "``W``"

msgid "ISO-8601 week number of year, with weeks starting on Monday."
msgstr "ISO-8601 による年間の週番号。 週は月曜日から始まります。"

msgid "``1``, ``53``"
msgstr "``1``, ``53``"

msgid "**Month**"
msgstr "**月**"

msgid "Month, 2 digits with leading zeros."
msgstr "月。数字 2 桁で、ゼロ埋め表示します。"

msgid "``'01'`` to ``'12'``"
msgstr "``'01'`` ～ ``'12'``"

msgid "``n``"
msgstr "``n``"

msgid "Month without leading zeros."
msgstr "月。ゼロ埋め表示しません。"

msgid "``'1'`` to ``'12'``"
msgstr "``'1'`` ～ ``'12'``"

msgid "``M``"
msgstr "``M``"

msgid "Month, textual, 3 letters."
msgstr "月。アルファベット 3 文字のテキスト形式です。"

msgid "``'Jan'``"
msgstr "``'Jan'``"

msgid "``b``"
msgstr "``b``"

msgid "Month, textual, 3 letters, lowercase."
msgstr "月。アルファベット（小文字） 3 文字のテキスト形式です。"

msgid "``'jan'``"
msgstr "``'jan'``"

msgid "``E``"
msgstr "``E``"

msgid ""
"Month, locale specific alternative representation usually used for long date "
"representation."
msgstr ""
"月。ロケールが定義する代替表現が使われ、通常は長いテキスト形式になります。"

msgid "``'listopada'`` (for Polish locale, as opposed to ``'Listopad'``)"
msgstr ""
"``'listopada'`` ( ロケールがポーランド語の場合。ポーランド語 ``'Listopad"
"（ 11 月）'`` の、時制における変化形 )"

msgid "``F``"
msgstr "``F``"

msgid "Month, textual, long."
msgstr "月。長いテキスト形式で表したものです。"

msgid "``'January'``"
msgstr "``'January'``"

msgid "``N``"
msgstr "``N``"

msgid "Month abbreviation in Associated Press style. Proprietary extension."
msgstr "AP スタイルブックによる月の省略表記。独自の拡張です。"

msgid "``'Jan.'``, ``'Feb.'``, ``'March'``, ``'May'``"
msgstr "``'Jan.'``, ``'Feb.'``, ``'March'``, ``'May'``"

msgid "``t``"
msgstr "``t``"

msgid "Number of days in the given month."
msgstr "その月の日数。"

msgid "``28`` to ``31``"
msgstr "``28`` ～ ``31``"

msgid "**Year**"
msgstr "**年**"

msgid "``y``"
msgstr "``y``"

msgid "Year, 2 digits with leading zeros."
msgstr "年。数字 2 桁で、先頭をゼロ埋めします。"

msgid "``'00'`` to ``'99'``"
msgstr "``'00'`` ～ ``'99'``"

msgid "``Y``"
msgstr "``Y``"

msgid "Year, 4 digits with leading zeros."
msgstr "年。数字 4 桁で、先頭をゼロ埋めします。"

msgid "``'0001'``, ..., ``'1999'``, ..., ``'9999'``"
msgstr "``'0001'``, ..., ``'1999'``, ..., ``'9999'``"

msgid "``L``"
msgstr "``L``"

msgid "Boolean for whether it's a leap year."
msgstr "うるう年かどうかを表すブール値です。"

msgid "``True`` or ``False``"
msgstr "``True`` または ``False``"

msgid "``o``"
msgstr "``o``"

msgid ""
"ISO-8601 week-numbering year, corresponding to the ISO-8601 week number (W) "
"which uses leap weeks. See Y for the more common year format."
msgstr ""
"ISO-8601 の週番号付き記法による年。うるう週を用いた ISO-8601 週番号 (W) に対"
"応します。一般的な年のフォーマットは Y を参照してください。"

msgid "``'1999'``"
msgstr "``'1999'``"

msgid "**Time**"
msgstr "**時刻**"

msgid "``g``"
msgstr "``g``"

msgid "Hour, 12-hour format without leading zeros."
msgstr "時（ 12 時間表記）。ゼロ埋め表示なし。"

msgid "``G``"
msgstr "``G``"

msgid "Hour, 24-hour format without leading zeros."
msgstr "時（ 24 時間表記）。ゼロ埋め表示なし。"

msgid "``'0'`` to ``'23'``"
msgstr "``'0'`` ～ ``'23'``"

msgid "``h``"
msgstr "``h``"

msgid "Hour, 12-hour format."
msgstr "時（ 12 時間表記）。"

msgid "``H``"
msgstr "``H``"

msgid "Hour, 24-hour format."
msgstr "時（ 24 時間表記）。"

msgid "``'00'`` to ``'23'``"
msgstr "``'00'`` ～ ``'23'``"

msgid "``i``"
msgstr "``i``"

msgid "Minutes."
msgstr "分。"

msgid "``'00'`` to ``'59'``"
msgstr "``'00'`` ～ ``'59'``"

msgid "``s``"
msgstr "``s``"

msgid "Seconds, 2 digits with leading zeros."
msgstr "秒。数字 2 桁で、ゼロ埋め表示です。"

msgid "``u``"
msgstr "``u``"

msgid "Microseconds."
msgstr "マイクロ秒。"

msgid "``000000`` to ``999999``"
msgstr "``000000`` ～ ``999999``"

msgid "``a``"
msgstr "``a``"

msgid ""
"``'a.m.'`` or ``'p.m.'`` (Note that this is slightly different than PHP's "
"output, because this includes periods to match Associated Press style.)"
msgstr ""
"``'a.m.'`` または ``'p.m.'`` ( 注： PHP における出力と少し異なり、 AP スタイ"
"ルブックに従ってピリオドをつけます )"

msgid "``'a.m.'``"
msgstr "``'a.m.'``"

msgid "``A``"
msgstr "``A``"

msgid "``'AM'`` or ``'PM'``."
msgstr "``'AM'`` または ``'PM'``"

msgid "``'AM'``"
msgstr "``'AM'``"

msgid "``f``"
msgstr "``f``"

msgid ""
"Time, in 12-hour hours and minutes, with minutes left off if they're zero. "
"Proprietary extension."
msgstr ""
"時と分（12 時間表記）。ただしゼロ分であるときは時間だけを表示します。これは独"
"自の拡張です。"

msgid "``'1'``, ``'1:30'``"
msgstr "``'1'`` ～ ``'1:30'``"

msgid "``P``"
msgstr "``P``"

msgid ""
"Time, in 12-hour hours, minutes and 'a.m.'/'p.m.', with minutes left off if "
"they're zero and the special-case strings 'midnight' and 'noon' if "
"appropriate. Proprietary extension."
msgstr ""
"時刻。12 時間表記による 時間:分 に続けて ‘a.m.’ または ’p.m.’ を表示します。"
"ゼロ分である場合には分の表示が省略され、必要に応じて ‘midnight’ または "
"‘noon’ の表示になります。 独自の拡張です。"

msgid ""
"``'1 a.m.'``, ``'1:30 p.m.'``, ``'midnight'``, ``'noon'``, ``'12:30 p.m.'``"
msgstr ""
"``'1 a.m.'``, ``'1:30 p.m.'``, ``'midnight'``, ``'noon'``, ``'12:30 p.m.'``"

msgid "**Timezone**"
msgstr "**タイムゾーン**"

msgid "``e``"
msgstr "``e``"

msgid ""
"Timezone name. Could be in any format, or might return an empty string, "
"depending on the datetime."
msgstr ""
"タイムゾーン名。どのフォーマットでも使えますが、 datetime によっては空の文字"
"列を返す場合もあります。"

msgid "``''``, ``'GMT'``, ``'-500'``, ``'US/Eastern'``, etc."
msgstr "``''``, ``'GMT'``, ``'-500'``, ``'US/Eastern'``　など"

msgid "``I``"
msgstr "``I``"

msgid "Daylight saving time, whether it's in effect or not."
msgstr "夏時間（DST）が有効か、そうでないかを表します。"

msgid "``'1'`` or ``'0'``"
msgstr "``'1'`` または ``'0'``"

msgid "``O``"
msgstr "``O``"

msgid "Difference to Greenwich time in hours."
msgstr "グリニッジ標準時からの時差。"

msgid "``'+0200'``"
msgstr "``'+0200'``"

msgid "``T``"
msgstr "``T``"

msgid "Time zone of this machine."
msgstr "計算機のタイムゾーン設定。"

msgid "``'EST'``, ``'MDT'``"
msgstr "``'EST'``, ``'MDT'``"

msgid "``Z``"
msgstr "``Z``"

msgid ""
"Time zone offset in seconds. The offset for timezones west of UTC is always "
"negative, and for those east of UTC is always positive."
msgstr ""
"タイムゾーンオフセットを秒であらわしたもの。UTC よりも西側のタイムゾーン値は"
"全て負の値になり、東側の値は常に正になります。"

msgid "``-43200`` to ``43200``"
msgstr "``-43200`` ～ ``43200``"

msgid "**Date/Time**"
msgstr "**日付/時刻**"

msgid "``c``"
msgstr "``c``"

msgid ""
"ISO 8601 format. (Note: unlike other formatters, such as \"Z\", \"O\" or "
"\"r\", the \"c\" formatter will not add timezone offset if value is a naive "
"datetime (see :class:`datetime.tzinfo`)."
msgstr ""
"ISO 8601 フォーマット。 ( 注： これは他の \"Z\"、\"O\"、\"r\" といったフォー"
"マット文字とは異なり、 入力値がタイムゾーン情報を含まない（\"naive\"な） "
"datetime であっても、タイムゾーンによる時差を加算しません ( :class:`datetime."
"tzinfo` を参照 )。"

msgid ""
"``2008-01-02T10:30:00.000123+02:00``, or ``2008-01-02T10:30:00.000123`` if "
"the datetime is naive"
msgstr ""
"``2008-01-02T10:30:00.000123+02:00`` 、または datetime が naive である場合  "
"``2008-01-02T10:30:00.000123``"

msgid "``r``"
msgstr "``r``"

msgid ":rfc:`RFC 5322 <5322#section-3.3>` formatted date."
msgstr ":rfc:`RFC 5322 <5322#section-3.3>` フォーマットの日付。"

msgid "``'Thu, 21 Dec 2000 16:01:07 +0200'``"
msgstr "``'Thu, 21 Dec 2000 16:01:07 +0200'``"

msgid "``U``"
msgstr "``U``"

msgid "Seconds since the Unix Epoch (January 1 1970 00:00:00 UTC)."
msgstr "Unix エポック時 ( UTC 協定世界時 1970年1月1日 00:00:00 ) からの秒数。"

msgid ""
"If ``value`` is a :py:class:`~datetime.datetime` object (e.g., the result of "
"``datetime.datetime.now()``), the output will be the string ``'Wed 09 Jan "
"2008'``."
msgstr ""
"上の例で、値が :py:class:`~datetime.datetime` オブジェクトである場合 (たとえ"
"ば ``datetime.datetime.now()`` の結果など)、出力は ``'Wed 09 Jan 2008'`` とな"
"ります。"

msgid ""
"The format passed can be one of the predefined ones :setting:`DATE_FORMAT`, :"
"setting:`DATETIME_FORMAT`, :setting:`SHORT_DATE_FORMAT` or :setting:"
"`SHORT_DATETIME_FORMAT`, or a custom format that uses the format specifiers "
"shown in the table above. Note that predefined formats may vary depending on "
"the current locale."
msgstr ""
"フォーマットには、プリセット（ :setting:`DATE_FORMAT`, :setting:"
"`DATETIME_FORMAT`, :setting:`SHORT_DATE_FORMAT` or :setting:"
"`SHORT_DATETIME_FORMAT` ）のうちの１つ、または上記の表で示したフォーマット指"
"定文字を使ったカスタムフォーマットが使えます。プリセットのフォーマットは、現"
"在のロケールに応じて表示が変化することに注意してください。"

msgid ""
"Assuming that :setting:`LANGUAGE_CODE` is, for example, ``\"es\"``, then for:"
msgstr "たとえば :setting:`LANGUAGE_CODE` が ``\"es\"`` だったとして、："

msgid ""
"the output would be the string ``\"09/01/2008\"`` (the "
"``\"SHORT_DATE_FORMAT\"`` format specifier for the ``es`` locale as shipped "
"with Django is ``\"d/m/Y\"``)."
msgstr ""
"上記の出力は、文字列 ``\"09/01/2008\"`` となります ( ``es`` ロケールの "
"``\"SHORT_DATE_FORMAT\"`` フォーマットは、 Django の初期設定では ``\"d/m/"
"Y\"`` です)。"

msgid ""
"When used without a format string, the ``DATE_FORMAT`` format specifier is "
"used. Assuming the same settings as the previous example:"
msgstr ""
"フォーマット文字列を指定せずに使用する場合、 ``DATE_FORMAT`` フォーマット指定"
"子が使用されます。先ほどの例と同じ設定だとすると："

msgid ""
"outputs ``9 de Enero de 2008`` (the ``DATE_FORMAT`` format specifier for the "
"``es`` locale is ``r'j \\d\\e F \\d\\e Y'``). Both \"d\" and \"e\" are "
"backslash-escaped, because otherwise each is a format string that displays "
"the day and the timezone name, respectively."
msgstr ""
"は ``9 de Enero de 2008`` を出力します (``es`` ロケールの ``DATE_FORMAT`` "
"フォーマット指定子は ``r'j \\d\\e F \\d\\e Y'``)。 \"d \"と \"e \"はどちらも"
"バックスラッシュでエスケープされていますが、それ以外はそれぞれ曜日とタイム"
"ゾーン名を表示するフォーマット文字列だからです。"

msgid ""
"You can combine ``date`` with the :tfilter:`time` filter to render a full "
"representation of a ``datetime`` value. E.g.:"
msgstr ""
"``date`` と :tfilter:`time` フィルタを組み合わせることで、 ``datetime`` 値を"
"完全に表示することもできます。 たとえば以下のようにします："

msgid ""
"If value evaluates to ``False``, uses the given default. Otherwise, uses the "
"value."
msgstr ""
"入力の評価値が ``False`` の場合、引数に指定したデフォルト値を使います。そうで"
"なければ、入力値を使います。"

msgid ""
"If ``value`` is ``\"\"`` (the empty string), the output will be ``nothing``."
msgstr ""
"``value`` が ``\"\"`` ( 空の文字列 ) のとき、出力は ``nothing`` になります。"

msgid "``default_if_none``"
msgstr "``default_if_none``"

msgid ""
"If (and only if) value is ``None``, uses the given default. Otherwise, uses "
"the value."
msgstr ""
"入力値が ``None`` であるとき ( ``None`` であるときのみ ) 、引数に指定したデ"
"フォルト値を使いま す。そうでなければ、入力値を使います。"

msgid ""
"Note that if an empty string is given, the default value will *not* be used. "
"Use the :tfilter:`default` filter if you want to fallback for empty strings."
msgstr ""
"空の文字列が入力された場合は、デフォルト値を *使わない* ことに注意してくださ"
"い。空文字列をフォールバックしたければ :tfilter:`default` フィルタを使ってく"
"ださい。"

msgid "If ``value`` is ``None``, the output will be ``nothing``."
msgstr "``value`` が ``None`` の場合、出力は ``nothing`` となります。"

msgid "``dictsort``"
msgstr "``dictsort``"

msgid ""
"Takes a list of dictionaries and returns that list sorted by the key given "
"in the argument."
msgstr ""
"辞書のリストを入力として、引数に指定したキーでリストをソートして返します。"

msgid "If ``value`` is:"
msgstr "``value`` が以下の内容であるとします:"

msgid "then the output would be:"
msgstr "このとき出力は以下のようになるでしょう:"

msgid "You can also do more complicated things like:"
msgstr "より複雑なリストに対しても、以下のように処理できます:"

msgid "If ``books`` is:"
msgstr "ここで ``books`` が以下の内容だとします:"

msgid ""
"``dictsort`` can also order a list of lists (or any other object "
"implementing ``__getitem__()``) by elements at specified index. For example:"
msgstr ""
"``dictsort`` はリスト（または ``__getitem__()`` を実装した他のオブジェクト）"
"のリストを指定したインデックスの要素でソートすることもできます。たとえば、："

msgid ""
"You must pass the index as an integer rather than a string. The following "
"produce empty output:"
msgstr ""
"インデックスは文字列ではなく整数で渡す必要があります。以下のコードの出力は空"
"です："

msgid ""
"Ordering by elements at specified index is not supported on dictionaries."
msgstr ""
"指定したインデックスの要素によるソートは辞書ではサポートされていません。"

msgid ""
"In older versions, ordering elements at specified index was supported on "
"dictionaries."
msgstr ""
"古いバージョンでは、指定したインデックスで要素をソートすることが辞書でサポー"
"トされていました。"

msgid "``dictsortreversed``"
msgstr "``dictsortreversed``"

msgid ""
"Takes a list of dictionaries and returns that list sorted in reverse order "
"by the key given in the argument. This works exactly the same as the above "
"filter, but the returned value will be in reverse order."
msgstr ""
"辞書のリストを入力に取り、引数に指定したキーでリストを逆順にソートして返しま"
"す。これは上のフィルタと全く同じ処理をしますが、返す値は逆順です。"

msgid "``divisibleby``"
msgstr "``divisibleby``"

msgid "Returns ``True`` if the value is divisible by the argument."
msgstr "値が引数の値で割り切れる場合に ``True`` を返します。"

msgid "If ``value`` is ``21``, the output would be ``True``."
msgstr "``value`` が ``21`` であるとき、出力は ``True`` です。"

msgid "``escape``"
msgstr "``escape``"

msgid "Escapes a string's HTML. Specifically, it makes these replacements:"
msgstr ""
"入力文字中にある HTML の特殊文字をエスケープします。具体的には、以下のような"
"置換を行います:"

msgid "``<`` is converted to ``&lt;``"
msgstr "``<`` を ``&lt;`` に変換"

msgid "``>`` is converted to ``&gt;``"
msgstr "``>`` を ``&gt;`` に変換"

msgid "``'`` (single quote) is converted to ``&#x27;``"
msgstr "``'`` ( シングルクォート ) を ``&#x27;``　に変換"

msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr "``\"`` ( ダブルクォート ) を ``&quot;`` に変換"

msgid "``&`` is converted to ``&amp;``"
msgstr "``&`` を ``&amp;`` に変換"

msgid ""
"Applying ``escape`` to a variable that would normally have auto-escaping "
"applied to the result will only result in one round of escaping being done. "
"So it is safe to use this function even in auto-escaping environments. If "
"you want multiple escaping passes to be applied, use the :tfilter:"
"`force_escape` filter."
msgstr ""
"``escape`` を変数に適用するとき、変数にはすでに自動エスケープが適用されている"
"かもしれませんが、エスケープが二重に実行されることはありません。したがって自"
"動エスケープ環境であっても、この機能は安全に使用できます。複数回のエスケープ"
"が適用されるようにしたい場合は :tfilter:`force_escape` フィルタを使用してくだ"
"さい。"

msgid ""
"For example, you can apply ``escape`` to fields when :ttag:`autoescape` is "
"off:"
msgstr ""
"以下は :ttag:`autoescape` がオフであるときに、フィールドに ``escape`` を適用"
"する例です:"

msgid "Chaining ``escape`` with other filters"
msgstr "``escape`` を他のフィルタと連結する場合"

msgid ""
"As mentioned in the :ttag:`autoescape` section, when filters including "
"``escape`` are chained together, it can result in unexpected outcomes if "
"preceding filters mark a potentially unsafe string as safe due to the lack "
"of escaping caused by :ttag:`autoescape` being ``off``."
msgstr ""
":ttag:`autoescape` のセクションで述べたように、``escape`` を含むフィルタが連"
"結されている場合、 :ttag:`autoescape` が ``off`` であることが原因でエスケープ"
"が行われず、先行するフィルタが安全でない可能性のある文字列を安全であるとマー"
"クしてしまうと、予期しない結果になることがあります。"

msgid ""
"In such cases, chaining ``escape`` would not reescape strings that have "
"already been marked as safe."
msgstr ""
"このような場合、``escape`` を連結させても、すでに安全であるとマークされている"
"文字列を再エスケープすることはできません。"

msgid ""
"This is especially important when using filters that operate on sequences, "
"for example :tfilter:`join`. If you need to escape each element in a "
"sequence, use the dedicated :tfilter:`escapeseq` filter."
msgstr ""
"これは、例えば :tfilter:`join` のようなシーケンスを操作するフィルタを使う場合"
"に特に重要です。シーケンスの各要素をエスケープする必要がある場合は、専用の :"
"tfilter:`escapeseq` フィルタを使用してください。"

msgid "``escapejs``"
msgstr "``escapejs``"

msgid ""
"Escapes characters for use as a whole JavaScript string literal, within "
"single or double quotes, as below. This filter does not make the string safe "
"for use in *\"JavaScript template literals\"* (the JavaScript backtick "
"syntax). Any other uses not listed above are not supported. It is generally "
"recommended that data should be passed using HTML ``data-`` attributes, or "
"the :tfilter:`json_script` filter, rather than in embedded JavaScript."
msgstr ""
"JavaScript の文字列リテラル全体として、以下のように一重引用符または二重引用符"
"で囲んで使用する文字をエスケープします。このフィルタは文字列を *\"JavaScript "
"テンプレートリテラル \"* (JavaScript のバックティック構文) では安全に使えませ"
"ん。これ以外の使い方はサポートされていません。通常は、データは埋め込み "
"JavaScript ではなく、HTMLの ``data-`` 属性や :tfilter:`json_script` フィルタ"
"を使って渡すことを推奨します。"

msgid "``escapeseq``"
msgstr "``escapeseq``"

msgid ""
"Applies the :tfilter:`escape` filter to each element of a sequence. Useful "
"in conjunction with other filters that operate on sequences, such as :"
"tfilter:`join`. For example:"
msgstr ""
"シーケンスのそれぞれの要素に対して :tfilter:`escape` フィルタを適用します。こ"
"れはたとえば :tfilter:`join` のような、シーケンスを処理する他のフィルタと組み"
"合わせて使うのが便利です。例をあげます:"

msgid "``filesizeformat``"
msgstr "``filesizeformat``"

msgid ""
"Formats the value like a 'human-readable' file size (i.e. ``'13 KB'``, "
"``'4.1 MB'``, ``'102 bytes'``, etc.)."
msgstr ""
"入力値を、人間が読みやすいファイルサイズ表現 ('13 KB', '4.1 MB', '102 bytes' "
"など) に変換します。"

msgid "If ``value`` is 123456789, the output would be ``117.7 MB``."
msgstr "``value`` が 123456789 のとき、出力は ``117.7 MB`` になります。"

msgid "File sizes and SI units"
msgstr "ファイルサイズと国際単位系（SI）"

msgid ""
"Strictly speaking, ``filesizeformat`` does not conform to the International "
"System of Units which recommends using KiB, MiB, GiB, etc. when byte sizes "
"are calculated in powers of 1024 (which is the case here). Instead, Django "
"uses traditional unit names (KB, MB, GB, etc.) corresponding to names that "
"are more commonly used."
msgstr ""
"``filesizeformat`` は、厳密には国際単位系（SI）に準拠していません。国際単位系"
"ではバイトサイズを 1024 の累乗で計算する場合 (上の例がそうですが) 、  KiB、"
"MiB、GiB などの単位を使うよう推奨しています。しかし Django ではより一般的な表"
"記に対応して、従来の単位名（ KB、 MB、GB など）を使用しています。"

msgid "``first``"
msgstr "``first``"

msgid "Returns the first item in a list."
msgstr "リスト中の最初の要素を返します。"

msgid ""
"If ``value`` is the list ``['a', 'b', 'c']``, the output will be ``'a'``."
msgstr ""
"``value`` がリスト ``['a', 'b', 'c']`` であるとき、出力は ``'a'`` になりま"
"す。"

msgid "``floatformat``"
msgstr "``floatformat``"

msgid ""
"When used without an argument, rounds a floating-point number to one decimal "
"place -- but only if there's a decimal part to be displayed. For example:"
msgstr ""
"引数なしで使った場合、浮動小数点数を小数点以下１桁に丸めます。ただし小数部分"
"がない時には整数部分だけを表示します。例を示します:"

msgid "Template"
msgstr "テンプレート"

msgid "Output"
msgstr "出力"

msgid "``34.23234``"
msgstr "``34.23234``"

msgid "``{{ value|floatformat }}``"
msgstr "``{{ value|floatformat }}``"

msgid "``34.2``"
msgstr "``34.2``"

msgid "``34.00000``"
msgstr "``34.00000``"

msgid "``34``"
msgstr "``34``"

msgid "``34.26000``"
msgstr "``34.26000``"

msgid "``34.3``"
msgstr "``34.3``"

msgid ""
"If used with a numeric integer argument, ``floatformat`` rounds a number to "
"that many decimal places. For example:"
msgstr ""
"引数に１以上の整数を指定した場合、 ``floatformat`` は小数部分を指定された桁数"
"で丸めます。以下に例を示します:"

msgid "``{{ value|floatformat:3 }}``"
msgstr "``{{ value|floatformat:3 }}``"

msgid "``34.232``"
msgstr "``34.232``"

msgid "``34.000``"
msgstr "``34.000``"

msgid "``34.260``"
msgstr "``34.260``"

msgid ""
"Particularly useful is passing 0 (zero) as the argument which will round the "
"float to the nearest integer."
msgstr ""
"特に便利な使い方として、引数に 0 (ゼロ) を指定した場合、入力値を一番近い整数"
"に丸めます。"

msgid "``{{ value|floatformat:\"0\" }}``"
msgstr "``{{ value|floatformat:\"0\" }}``"

msgid "``39.56000``"
msgstr "``39.56000``"

msgid "``40``"
msgstr "``40``"

msgid ""
"If the argument passed to ``floatformat`` is negative, it will round a "
"number to that many decimal places -- but only if there's a decimal part to "
"be displayed. For example:"
msgstr ""
"引数に負の数を指定した場合、小数部分を指定された桁数（指定された数の絶対値）"
"で丸めます。ただし小数部分がない時には整数部分だけを表示します。例を示します:"

msgid "``{{ value|floatformat:\"-3\" }}``"
msgstr "``{{ value|floatformat:\"-3\" }}``"

msgid ""
"If the argument passed to ``floatformat`` has the ``g`` suffix, it will "
"force grouping by the :setting:`THOUSAND_SEPARATOR` for the active locale. "
"For example, when the active locale is ``en`` (English):"
msgstr ""
"もし ``floatformat`` に渡された引数の接尾辞が ``g`` の場合、アクティブなロ"
"ケールの :setting:`THOUSAND_SEPARATOR` によるグループ化を強制します。例えば、"
"アクティブなロケールが ``en`` (英語) の場合、以下のようになります："

msgid "``34232.34``"
msgstr "``34232.34``"

msgid "``{{ value|floatformat:\"2g\" }}``"
msgstr "``{{ value|floatformat:\"2g\" }}``"

msgid "``34,232.34``"
msgstr "``34,232.34``"

msgid "``34232.06``"
msgstr "``34232.06``"

msgid "``{{ value|floatformat:\"g\" }}``"
msgstr "``{{ value|floatformat:\"g\" }}``"

msgid "``34,232.1``"
msgstr "``34,232.1``"

msgid "``34232.00``"
msgstr "``34232.00``"

msgid "``{{ value|floatformat:\"-3g\" }}``"
msgstr "``{{ value|floatformat:\"-3g\" }}``"

msgid "``34,232``"
msgstr "``34,232``"

msgid ""
"Output is always localized (independently of the :ttag:`{% localize off %} "
"<localize>` tag) unless the argument passed to ``floatformat`` has the ``u`` "
"suffix, which will force disabling localization. For example, when the "
"active locale is ``pl`` (Polish):"
msgstr ""
":ttag:`{% localize off %} <localize>` タグに関係なく）出力は常にローカライズ"
"されます。ただし、 ``floatformat`` に渡された引数の接尾辞が ``u`` であった場"
"合は、ローカライズが無効になります。例えば、アクティブなロケールが ``pl`` "
"(ポーランド語) の場合、以下のようになります："

msgid "``{{ value|floatformat:\"3\" }}``"
msgstr "``{{ value|floatformat:\"3\" }}``"

msgid "``{{ value|floatformat:\"3u\" }}``"
msgstr "``{{ value|floatformat:\"3u\" }}``"

msgid ""
"Using ``floatformat`` with no argument is equivalent to using "
"``floatformat`` with an argument of ``-1``."
msgstr ""
"``floatformat`` を引数なしで使用した場合の動作は、引数に ``-1`` を指定した場"
"合と同じです。"

msgid "``force_escape``"
msgstr "``force_escape``"

msgid ""
"Applies HTML escaping to a string (see the :tfilter:`escape` filter for "
"details). This filter is applied *immediately* and returns a new, escaped "
"string. This is useful in the rare cases where you need multiple escaping or "
"want to apply other filters to the escaped results. Normally, you want to "
"use the :tfilter:`escape` filter."
msgstr ""
"文字列に HTML エスケープを適用します。 ( 詳しくは :tfilter:`escape` フィルタ"
"を参照してください )。フィルタは *即座に* 適用され、新たなエスケープ済みの文"
"字列を返します。このタグが有用となるケースは稀で、複数回のエスケープが必要な"
"場合や、エスケープされた結果に対して他のフィルタを適用したい場合に使います。"
"通常は :tfilter:`escape` フィルタを使うことになるでしょう。"

msgid ""
"For example, if you want to catch the ``<p>`` HTML elements created by the :"
"tfilter:`linebreaks` filter:"
msgstr ""
"例えば、 :tfilter:`linebreaks` フィルタによって作成された ``<p>`` HTML 要素を"
"キャッチしたい場合、以下のようにします："

msgid "``get_digit``"
msgstr "``get_digit``"

msgid ""
"Given a whole number, returns the requested digit, where 1 is the right-most "
"digit, 2 is the second-right-most digit, etc. Returns the original value for "
"invalid input (if input or argument is not an integer, or if argument is "
"less than 1). Otherwise, output is always an integer."
msgstr ""
"入力値が整数であるとき、引数で指定された桁にある数字を返します。たとえば引数"
"が 1 のとき右端の桁、 2 のとき右から 2 桁目が指定されます。入力が整数でない場"
"合には、入力値をそのまま返します。"

msgid "If ``value`` is ``123456789``, the output will be ``8``."
msgstr "``value`` が ``123456789`` のとき、出力は ``8`` です。"

msgid "``iriencode``"
msgstr "``iriencode``"

msgid ""
"Converts an IRI (Internationalized Resource Identifier) to a string that is "
"suitable for including in a URL. This is necessary if you're trying to use "
"strings containing non-ASCII characters in a URL."
msgstr ""
"IRI (国際化リソース識別子 Internationalized Resource Identifier) を URL に適"
"した文字列に変換します。これは非 ASCII 文字列を URL に埋め込む場合に必要な"
"フィルタです。"

msgid ""
"It's safe to use this filter on a string that has already gone through the :"
"tfilter:`urlencode` filter."
msgstr ""
":tfilter:`urlencode` フィルタを通した後の文字列を、このフィルタに通しても問題"
"はありません。"

msgid ""
"If ``value`` is ``\"?test=I ♥ Django\"``, the output will be ``\"?"
"test=I%20%E2%99%A5%20Django\"``."
msgstr ""
"``value`` が ``\"?test=I ♥ Django\"`` であるとき、出力は ``\"?"
"test=I%20%E2%99%A5%20Django\"`` となります。"

msgid "``join``"
msgstr "``join``"

msgid "Joins a list with a string, like Python's ``str.join(list)``"
msgstr "Python の ``str.join(list)`` と同じく、リストを文字列でつなぎます。"

msgid ""
"If ``value`` is the list ``['a', 'b', 'c']``, the output will be the string "
"``\"a // b // c\"``."
msgstr ""
"``value`` の値がリスト ``['a', 'b', 'c']`` であるとき、出力は文字列 ``\"a // "
"b // c\"`` となります。"

msgid "``json_script``"
msgstr "``json_script``"

msgid ""
"Safely outputs a Python object as JSON, wrapped in a ``<script>`` tag, ready "
"for use with JavaScript."
msgstr ""
"Python オブジェクトを JSON として安全に出力し、 ``<script>`` タグでラップしま"
"す。"

msgid "**Argument:** The optional HTML \"id\" of the ``<script>`` tag."
msgstr ""
"**引数:** オプションで、HTMLの ``<script>`` タグの \"id\" を指定します。"

msgid ""
"If ``value`` is the dictionary ``{'hello': 'world'}``, the output will be:"
msgstr ""
"``value`` が辞書 ``{'hello': 'world'}`` の場合、次のように出力されます："

msgid "The resulting data can be accessed in JavaScript like this:"
msgstr "結果のデータは JavaScript で次のようにアクセスできます："

msgid ""
"XSS attacks are mitigated by escaping the characters \"<\", \">\" and \"&\". "
"For example if ``value`` is ``{'hello': 'world</script>&amp;'}``, the output "
"is:"
msgstr ""
"XSS攻撃は \"<\", \">\", \"&\" をエスケープすることで緩和できます。例えば "
"``value`` が ``{'hello': 'world</script>&amp;'}`` の場合、出力は次のようにな"
"ります："

msgid ""
"This is compatible with a strict Content Security Policy that prohibits in-"
"page script execution. It also maintains a clean separation between passive "
"data and executable code."
msgstr ""
"これは、ページ内でのスクリプト実行を禁止する厳格なコンテンツセキュリティポリ"
"シーと互換性があります。また、受動的なデータと実行可能なコードをきれいに分離"
"します。"

msgid "``last``"
msgstr "``last``"

msgid "Returns the last item in a list."
msgstr "リストの末尾の要素を返します。"

msgid ""
"If ``value`` is the list ``['a', 'b', 'c', 'd']``, the output will be the "
"string ``\"d\"``."
msgstr ""
"``value`` の値がリスト ``['a', 'b', 'c', 'd']`` のとき、出力は文字列 "
"``\"d\"`` です。"

msgid "``length``"
msgstr "``length``"

msgid "Returns the length of the value. This works for both strings and lists."
msgstr "入力値の長さを返します。これは、文字列とリストの両方で動作します。"

msgid ""
"If ``value`` is ``['a', 'b', 'c', 'd']`` or ``\"abcd\"``, the output will be "
"``4``."
msgstr ""
"``value`` が ``['a', 'b', 'c', 'd']`` 、 ``\"abcd\"`` であるとき、それぞれ出"
"力は ``4`` になります。"

msgid "The filter returns ``0`` for an undefined variable."
msgstr "フィルタは未定義の変数に対して ``0`` を返します。"

msgid "``length_is``"
msgstr "``length_is``"

msgid ""
"Returns ``True`` if the value's length is the argument, or ``False`` "
"otherwise."
msgstr ""
"入力値の長さと引数が等しければ ``True`` を返し、そうでなければ ``False`` を返"
"します。"

msgid ""
"If ``value`` is ``['a', 'b', 'c', 'd']`` or ``\"abcd\"``, the output will be "
"``True``."
msgstr ""
"``value`` が ``['a', 'b', 'c', 'd']`` あるいは ``\"abcd\"`` であるとき、それ"
"ぞれ出力は ``True`` です。"

msgid "``linebreaks``"
msgstr "``linebreaks``"

msgid ""
"Replaces line breaks in plain text with appropriate HTML; a single newline "
"becomes an HTML line break (``<br>``) and a new line followed by a blank "
"line becomes a paragraph break (``</p>``)."
msgstr ""
"プレーンテキストの改行を適切な HTML タグに変換します。 改行 1 つは改行タグ "
"(``<br>``) に、改行およびそれに続く空行は段落タグ (``</p>``) に変換されます。"

msgid ""
"If ``value`` is ``Joel\\nis a slug``, the output will be ``<p>Joel<br>is a "
"slug</p>``."
msgstr ""
"``value`` が ``Joel\\nis a slug`` であるとき、出力は ``<p>Joel<br>is a slug</"
"p>`` になります。"

msgid "``linebreaksbr``"
msgstr "``linebreaksbr``"

msgid ""
"Converts all newlines in a piece of plain text to HTML line breaks "
"(``<br>``)."
msgstr "プレーンテキストの改行を HTML の改行タグ (``<br>``) に変換します。"

msgid ""
"If ``value`` is ``Joel\\nis a slug``, the output will be ``Joel<br>is a "
"slug``."
msgstr ""
"``value`` が ``Joel\\nis a slug`` であるとき、出力は ``Joel<br>is a slug`` に"
"なります。"

msgid "``linenumbers``"
msgstr "``linenumbers``"

msgid "Displays text with line numbers."
msgstr "テキストを行番号付きで表示します。"

msgid "the output will be:"
msgstr "このとき出力は次のようになります:"

msgid "``ljust``"
msgstr "``ljust``"

msgid "Left-aligns the value in a field of a given width."
msgstr "入力値を指定した幅のフィールド内で左詰めします。"

msgid "**Argument:** field size"
msgstr "**引数:** フィールドの幅"

msgid "If ``value`` is ``Django``, the output will be ``\"Django    \"``."
msgstr ""
"``value`` が ``Django`` であるとき、出力は ``\"Django    \"`` となります。"

msgid "``lower``"
msgstr "``lower``"

msgid "Converts a string into all lowercase."
msgstr "文字列を全て小文字に変換します。"

msgid ""
"If ``value`` is ``Totally LOVING this Album!``, the output will be ``totally "
"loving this album!``."
msgstr ""
"``value`` が ``Totally LOVING this Album!`` であるとき、出力は ``totally "
"loving this album!`` となります。"

msgid "``make_list``"
msgstr "``make_list``"

msgid ""
"Returns the value turned into a list. For a string, it's a list of "
"characters. For an integer, the argument is cast to a string before creating "
"a list."
msgstr ""
"リストに変換された値を返します。文字列の場合は、文字のリストになります。整数"
"の場合は、リストを作成する前に引数を文字列にキャストします。"

msgid ""
"If ``value`` is the string ``\"Joel\"``, the output would be the list "
"``['J', 'o', 'e', 'l']``. If ``value`` is ``123``, the output will be the "
"list ``['1', '2', '3']``."
msgstr ""
"``value`` の値が文字列 ``\"Joel\"`` であるとき、出力はリスト ``['J', 'o', "
"'e', 'l']`` です。 ``value`` が ``123`` のとき、出力はリスト ``['1', '2', "
"'3']`` となります。"

msgid "``phone2numeric``"
msgstr "``phone2numeric``"

msgid ""
"Converts a phone number (possibly containing letters) to its numerical "
"equivalent."
msgstr "電話番号 (文字を含む場合もあります) を数値だけの番号に変換します。"

msgid ""
"The input doesn't have to be a valid phone number. This will happily convert "
"any string."
msgstr ""
"入力値は正しい電話番号でなくてもかまいません。このフィルタはどんな文字列でも"
"変換します。"

msgid "If ``value`` is ``800-COLLECT``, the output will be ``800-2655328``."
msgstr ""
"``value`` が ``800-COLLECT`` のとき、出力は ``800-2655328`` となります。"

msgid "``pluralize``"
msgstr "``pluralize``"

msgid ""
"Returns a plural suffix if the value is not ``1``, ``'1'``, or an object of "
"length 1. By default, this suffix is ``'s'``."
msgstr ""
"値が ``1``, ``'1'``, または長さ 1 のオブジェクトでない場合、複数形を表す接尾"
"辞を返します。デフォルトでは、この接尾辞は ``'s'`` です。"

msgid ""
"If ``num_messages`` is ``1``, the output will be ``You have 1 message.`` If "
"``num_messages`` is ``2``  the output will be ``You have 2 messages.``"
msgstr ""
"``num_messages`` が ``1`` のとき、出力は ``You have 1 message.`` です。 "
"``num_messages`` が ``2`` のとき、出力は ``You have 2 messages.`` となりま"
"す。"

msgid ""
"For words that require a suffix other than ``'s'``, you can provide an "
"alternate suffix as a parameter to the filter."
msgstr ""
"``'s'`` 以外の接尾辞が必要な場合は、代わりの接尾辞をフィルタの引数で指定でき"
"ます。"

msgid ""
"For words that don't pluralize by simple suffix, you can specify both a "
"singular and plural suffix, separated by a comma."
msgstr ""
"単純な接尾辞では複数形にできない単語の場合、単数形と複数形の接尾辞の両方をコ"
"ンマで区切って指定できます。"

msgid "Use :ttag:`blocktranslate` to pluralize translated strings."
msgstr ""
"飜訳された文字列を複数形に変換するときは :ttag:`blocktranslate` を使ってくだ"
"さい。"

msgid "``pprint``"
msgstr "``pprint``"

msgid "A wrapper around :func:`pprint.pprint` -- for debugging, really."
msgstr ""
":func:`pprint.pprint` のラッパーです -– 実のところ、これはデバッグ用です。"

msgid "Returns a random item from the given list."
msgstr "与えられたリストからランダムな要素を返します。"

msgid ""
"If ``value`` is the list ``['a', 'b', 'c', 'd']``, the output could be "
"``\"b\"``."
msgstr ""
"``value`` の値がリスト ``['a', 'b', 'c', 'd']`` であるとき、出力は ``\"b\"`` "
"かもしれません。"

msgid "``rjust``"
msgstr "``rjust``"

msgid "Right-aligns the value in a field of a given width."
msgstr "入力値を指定した幅のフィールド内で右詰めします。"

msgid "If ``value`` is ``Django``, the output will be ``\"    Django\"``."
msgstr ""
"``value`` が ``Django`` であるとき、出力は ``\"    Django\"`` となります。"

msgid "``safe``"
msgstr "``safe``"

msgid ""
"Marks a string as not requiring further HTML escaping prior to output. When "
"autoescaping is off, this filter has no effect."
msgstr ""
"文字列に対して、さらなる HTML エスケープが必要でないことをマークするのに使い"
"ます。 autoescaping がオフの場合、このフィルタは何もしません。"

msgid ""
"If you are chaining filters, a filter applied after ``safe`` can make the "
"contents unsafe again. For example, the following code prints the variable "
"as is, unescaped:"
msgstr ""
"フィルタを連鎖させる場合、 ``safe`` の後に適用されるフィルタはその内容を再び"
"安全でない状態にしてしまうことが可能です。例えば以下のコードは、変数をそのま"
"ま、エスケープされない状態で出力します:"

msgid "``safeseq``"
msgstr "``safeseq``"

msgid ""
"Applies the :tfilter:`safe` filter to each element of a sequence. Useful in "
"conjunction with other filters that operate on sequences, such as :tfilter:"
"`join`. For example:"
msgstr ""
"シーケンスのそれぞれの要素に対して :tfilter:`safe` フィルタを適用します。これ"
"は例えば :tfilter:`join` のような、シーケンスを処理する他のフィルタと組み合わ"
"せて使うのが便利です。例を挙げます:"

msgid ""
"You couldn't use the :tfilter:`safe` filter directly in this case, as it "
"would first convert the variable into a string, rather than working with the "
"individual elements of the sequence."
msgstr ""
"この場合、直接 :tfilter:`safe` フィルタを使用すると正しく動作しないかもしれま"
"せん。シーケンスの個々の要素に対して作用するのではなく、まず変数を文字列に変"
"換して処理するからです。"

msgid "``slice``"
msgstr "``slice``"

msgid "Returns a slice of the list."
msgstr "リストに対するスライスを返します。"

msgid ""
"Uses the same syntax as Python's list slicing. See the `Python documentation "
"<https://docs.python.org/3/tutorial/introduction.html#lists>`_ for an "
"introduction."
msgstr ""
"Python のリストスライスと同じ構文を使います。 `Python ドキュメント <https://"
"docs.python.org/3/tutorial/introduction.html#lists>`_ を参照してください。"

msgid ""
"If ``some_list`` is ``['a', 'b', 'c']``, the output will be ``['a', 'b']``."
msgstr ""
"``some_list`` が ``['a', 'b', 'c']`` ならば、出力は ``['a', 'b']`` となりま"
"す。"

msgid "``slugify``"
msgstr "``slugify``"

msgid ""
"Converts to ASCII. Converts spaces to hyphens. Removes characters that "
"aren't alphanumerics, underscores, or hyphens. Converts to lowercase. Also "
"strips leading and trailing whitespace."
msgstr ""
"ASCIIに変換します。スペースをハイフ​​ンに変換します。英数字以外の文字、アンダー"
"スコア、ハイフンは削除します。小文字に変換します。また、先頭と末尾の空白を取"
"り除きます。"

msgid ""
"If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"joel-is-a-"
"slug\"``."
msgstr ""
"``value`` が ``\"Joel is a slug\"`` であるとき、出力は ``\"joel-is-a-"
"slug\"`` となります。"

msgid "``stringformat``"
msgstr "``stringformat``"

msgid ""
"Formats the variable according to the argument, a string formatting "
"specifier. This specifier uses the :ref:`old-string-formatting` syntax, with "
"the exception that the leading \"%\" is dropped."
msgstr ""
"引数 (表示形式を指定する文字列) に応じて、変数の表示形式を変更します。指定方"
"法には、:ref:`old-string-formatting` シンタックスを使います。例外として、最初"
"の ''%'' は無視されます。"

msgid "If ``value`` is ``10``, the output will be ``1.000000E+01``."
msgstr ""
"たとえば ``value`` が ``10`` の場合、出力は ``1.000000E+01`` となります。"

msgid "``striptags``"
msgstr "``striptags``"

msgid "Makes all possible efforts to strip all [X]HTML tags."
msgstr "[X]HTML タグを全てはぎとるようにします。"

msgid ""
"If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"``, "
"the output will be ``\"Joel is a slug\"``."
msgstr ""
"``value`` が ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` であ"
"るとき、出力は ``\"Joel is a slug\"`` となります。"

msgid "No safety guarantee"
msgstr "安全性の保証はありません"

msgid ""
"Note that ``striptags`` doesn't give any guarantee about its output being "
"HTML safe, particularly with non valid HTML input. So **NEVER** apply the "
"``safe`` filter to a ``striptags`` output. If you are looking for something "
"more robust, consider using a third-party HTML sanitizing tool."
msgstr ""
"注意してください。 ``striptags`` の出力は、特に不正な HTML の入力に対しては "
"HTML の安全性を一切保証しません。 ``striptags`` の出力に ``safe`` フィルタを"
"適用しては **いけません** 。より堅牢なものを探しているなら、サードパーティ製"
"の HTML サニタイズツールの使用を検討してください。"

msgid "Formats a time according to the given format."
msgstr "時刻を指定の書式にしたがってフォーマットします。"

msgid ""
"Given format can be the predefined one :setting:`TIME_FORMAT`, or a custom "
"format, same as the :tfilter:`date` filter. Note that the predefined format "
"is locale-dependent."
msgstr ""
"フォーマットは :tfilter:`date` と同様に、あらかじめ定義された :setting:"
"`TIME_FORMAT` のプリセット、またはカスタムフォーマットを使うこともできます。"
"この定義はロケールに依存することに注意してください。"

msgid ""
"If ``value`` is equivalent to ``datetime.datetime.now()``, the output will "
"be the string ``\"01:23\"``."
msgstr ""
"``value`` が ``datetime.datetime.now()`` の値であるとき、出力は "
"``\"01:23\"`` といった文字列になります。"

msgid ""
"Note that you can backslash-escape a format string if you want to use the "
"\"raw\" value. In this example, both \"h\" and \"m\" are backslash-escaped, "
"because otherwise each is a format string that displays the hour and the "
"month, respectively:"
msgstr ""
"文字列の中でフォーマット文字を普通の文字として扱いたい場合は、バックスラッ"
"シュ文字（ ``\\`` ）でエスケープします。次の例では、 \"h\" と \"m\" をエス"
"ケープしています。そうしないと、これらはそれぞれ年と時刻を表示するための"
"フォーマット文字とみなされるからです:"

msgid "This would display as \"01h 23m\"."
msgstr "上記は \"01h 23m\" と表示されます。"

msgid "Another example:"
msgstr "その他の例:"

msgid ""
"Assuming that :setting:`LANGUAGE_CODE` is, for example, ``\"de\"``, then for:"
msgstr "たとえば :setting:`LANGUAGE_CODE` が ``\"de\"`` だったとして、："

msgid ""
"the output will be the string ``\"01:23\"`` (The ``\"TIME_FORMAT\"`` format "
"specifier for the ``de`` locale as shipped with Django is ``\"H:i\"``)."
msgstr ""
"このときの出力は、``\"01:23\"`` といった文字列になります (初期状態の Django "
"では、ロケール ``de`` の ``\"TIME_FORMAT\"`` には ``\"H:i\"`` が定義されてい"
"ます) 。"

msgid ""
"The ``time`` filter will only accept parameters in the format string that "
"relate to the time of day, not the date. If you need to format a ``date`` "
"value, use the :tfilter:`date` filter instead (or along with :tfilter:`time` "
"if you need to render a full :py:class:`~datetime.datetime` value)."
msgstr ""
"``time`` フィルタは日付ではなく、1 日における時刻に関連するパラメータのみを"
"フォーマット文字列として受け付けます。``日付`` のフォーマットを行いたいとき"
"は、 :tfilter:`date` フィルタを使ってください ( :py:class:`~datetime."
"datetime` の値をすべて表示させたい場合は :tfilter:`time` と一緒に使います)。"

msgid ""
"There is one exception the above rule: When passed a ``datetime`` value with "
"attached timezone information (a :ref:`time-zone-aware "
"<naive_vs_aware_datetimes>` ``datetime`` instance) the ``time`` filter will "
"accept the timezone-related :ref:`format specifiers <date-and-time-"
"formatting-specifiers>` ``'e'``, ``'O'`` , ``'T'`` and ``'Z'``."
msgstr ""
"上記のルールにはひとつ例外があります。タイムゾーン情報が付加された "
"``datetime`` 値 (:ref:`タイムゾーンを意識した aware な "
"<naive_vs_aware_datetimes>` ``datetime`` インスタンス) が渡された場合、"
"``time`` フィルターはタイムゾーン関連の :ref:`フォーマット指定子 <date-and-"
"time-formatting-specifiers>` ``'e'``, ``'O'``, ``'T'``, ``'Z'`` を受け付けま"
"す。"

msgid ""
"When used without a format string, the ``TIME_FORMAT`` format specifier is "
"used:"
msgstr ""
"フォーマット文字列なしで使用する場合は、 ``TIME_FORMAT`` フォーマット指定子が"
"使用されます："

msgid "is the same as:"
msgstr "上記は以下と同じです："

msgid "``timesince``"
msgstr "``timesince``"

msgid "Formats a date as the time since that date (e.g., \"4 days, 6 hours\")."
msgstr ""
"日付を経過時間の形式にフォーマットします (たとえば \"4 days, 6 hours\")。"

msgid ""
"Takes an optional argument that is a variable containing the date to use as "
"the comparison point (without the argument, the comparison point is *now*). "
"For example, if ``blog_date`` is a date instance representing midnight on 1 "
"June 2006, and ``comment_date`` is a date instance for 08:00 on 1 June 2006, "
"then the following would return \"8 hours\":"
msgstr ""
"オプションの引数として、比較対象とする時刻をとります (引数を省略すると *現在"
"時刻* を使います)。例えば、 ``blog_date`` が 2006年 6月 1日 を表す日付オブ"
"ジェクトで、``comment_date`` が 2006年 6月 1日 08:00 を表す日時オブジェクトで"
"あるとき、以下のコードは \"8 hours\" を返します："

msgid ""
"Comparing offset-naive and offset-aware datetimes will return an empty "
"string."
msgstr ""
"タイムゾーン情報を持たない値（offset-naive）と、タイムゾーン情報つき（offset-"
"aware）の値とを比較した場合は、空の文字列を返します。"

msgid ""
"Minutes is the smallest unit used, and \"0 minutes\" will be returned for "
"any date that is in the future relative to the comparison point."
msgstr ""
"最小単位は \"分\" です。比較対象からみて未来にある日時に対しては \"0 "
"minutes\" を返します。"

msgid "``timeuntil``"
msgstr "``timeuntil``"

msgid ""
"Similar to ``timesince``, except that it measures the time from now until "
"the given date or datetime. For example, if today is 1 June 2006 and "
"``conference_date`` is a date instance holding 29 June 2006, then "
"``{{ conference_date|timeuntil }}`` will return \"4 weeks\"."
msgstr ""
"``timesince`` に似ていますが、現在時刻を起点として指定の日付または日時までの"
"時刻を計算します。たとえば今日が2006年6月1日で ``conference_date`` が 2006年6"
"月29日の値を保持する日付インスタンスだったとすれば、``{{ conference_date|"
"timeuntil }}`` は \"4 weeks\" を返します。"

msgid ""
"Takes an optional argument that is a variable containing the date to use as "
"the comparison point (instead of *now*). If ``from_date`` contains 22 June "
"2006, then the following will return \"1 week\":"
msgstr ""
"オプションの引数として、 (*現在時刻* の代わりに) 比較対象として使う時刻をとり"
"ます。 例えば、 from_date が 2006年 6月 22日 の場合、以下のコードは \"1 "
"week\" を返します:"

msgid ""
"Minutes is the smallest unit used, and \"0 minutes\" will be returned for "
"any date that is in the past relative to the comparison point."
msgstr ""
"最小単位は \"分\" です。比較対象からみて過去にある日時に対しては “0 minutes” "
"を返します。"

msgid ""
"Converts a string into titlecase by making words start with an uppercase "
"character and the remaining characters lowercase. This tag makes no effort "
"to keep \"trivial words\" in lowercase."
msgstr ""
"文字列中の単語に対して、それぞれ先頭の文字を大文字に、残りを小文字にすること"
"で文字列をタイトルケースに変換します。\"主要でない単語\" については小文字を維"
"持できないこともあります。"

msgid ""
"If ``value`` is ``\"my FIRST post\"``, the output will be ``\"My First "
"Post\"``."
msgstr ""
"``value`` が ``\"my FIRST post\"`` であるとき、出力は ``\"My First Post\"`` "
"となります。"

msgid "``truncatechars``"
msgstr "``truncatechars``"

msgid ""
"Truncates a string if it is longer than the specified number of characters. "
"Truncated strings will end with a translatable ellipsis character (\"…\")."
msgstr ""
"文字列が指定した文字数より長い場合は切り捨てます。切り捨てられた文字列の末尾"
"は、翻訳可能な省略記号 (\"...\") になります。"

msgid "**Argument:** Number of characters to truncate to"
msgstr "**引数:** 切り詰める文字数"

msgid ""
"If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"Joel i…\"``."
msgstr ""
"``value`` が ``\"Joel is a slug\"`` であるとき、出力は ``\"Joel i…\"`` となり"
"ます。"

msgid "``truncatechars_html``"
msgstr "``truncatechars_html``"

msgid ""
"Similar to :tfilter:`truncatechars`, except that it is aware of HTML tags. "
"Any tags that are opened in the string and not closed before the truncation "
"point are closed immediately after the truncation."
msgstr ""
":tfilter:`truncatechars` に似ていますが、 HTML タグを認識します。切り詰めを行"
"う時点で閉じていないタグがあれば、切り詰めた文字の直後に全て閉じます。"

msgid ""
"If ``value`` is ``\"<p>Joel is a slug</p>\"``, the output will be "
"``\"<p>Joel i…</p>\"``."
msgstr ""
"``value`` が ``\"<p>Joel is a slug</p>\"`` の場合、出力は ``\"<p>Joel i…</"
"p>\"`` となります。"

msgid "Newlines in the HTML content will be preserved."
msgstr "HTML コンテンツ内の改行は保持されます。"

msgid "Size of input string"
msgstr "入力文字列のサイズ"

msgid ""
"Processing large, potentially malformed HTML strings can be resource-"
"intensive and impact service performance. ``truncatechars_html`` limits "
"input to the first five million characters."
msgstr ""
"大きく、潜在的に不正なHTML文字列を処理することは、リソースを消費し、サービス"
"のパフォーマンスに影響を与える可能性があります。 ``truncatechars_html`` は入"
"力を最初の500万文字に制限します。"

msgid "In older versions, strings over five million characters were processed."
msgstr "古いバージョンでは、500万文字以上の文字列も処理されていました。"

msgid "``truncatewords``"
msgstr "``truncatewords``"

msgid "Truncates a string after a certain number of words."
msgstr "文字列を指定された単語数以内に切り詰めます。"

msgid "**Argument:** Number of words to truncate after"
msgstr "**引数:** 切り詰めた後の単語数"

msgid ""
"If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"Joel is …\"``."
msgstr ""
"``value`` が ``\"Joel is a slug\"`` の場合、出力は ``\"Joel is …\"`` になりま"
"す。"

msgid "Newlines within the string will be removed."
msgstr "文字列中の改行は取り除かれます。"

msgid "``truncatewords_html``"
msgstr "``truncatewords_html``"

msgid ""
"Similar to :tfilter:`truncatewords`, except that it is aware of HTML tags. "
"Any tags that are opened in the string and not closed before the truncation "
"point, are closed immediately after the truncation."
msgstr ""
":tfilter:`truncatewords` に似ていますが、 HTML タグを認識します。切り詰めを行"
"う時点で閉じていないタグがあれば、切り詰めた文字の直後に全て閉じます。"

msgid ""
"This is less efficient than :tfilter:`truncatewords`, so should only be used "
"when it is being passed HTML text."
msgstr ""
"このタグの処理は :tfilter:`truncatewords` よりも効率が悪いため、 HTML テキス"
"トを 渡す場合にだけ使うようにしてください。"

msgid ""
"If ``value`` is ``\"<p>Joel is a slug</p>\"``, the output will be "
"``\"<p>Joel is …</p>\"``."
msgstr ""
"``value`` が ``\"<p>Joel is a slug</p>\"`` の場合、出力は ``\"<p>Joel is …</"
"p>\"`` となります。"

msgid ""
"Processing large, potentially malformed HTML strings can be resource-"
"intensive and impact service performance. ``truncatewords_html`` limits "
"input to the first five million characters."
msgstr ""
"大きく、潜在的に不正なHTML文字列を処理することは、リソースを消費し、サービス"
"のパフォーマンスに影響を与える可能性があります。 ``truncatewords_html`` は入"
"力を最初の500万文字に制限します。"

msgid "``unordered_list``"
msgstr "``unordered_list``"

msgid ""
"Recursively takes a self-nested list and returns an HTML unordered list -- "
"WITHOUT opening and closing ``<ul>`` tags."
msgstr ""
"再帰的に入れ子になったリストを入力として、 HTML の順序なしリスト (UL, "
"unordered list) に変換します。ただし先頭と末尾の ``<ul>`` タグは表示しませ"
"ん。"

msgid ""
"The list is assumed to be in the proper format. For example, if ``var`` "
"contains ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``, "
"then ``{{ var|unordered_list }}`` would return:"
msgstr ""
"リストは適切な形式になっているものとみなします。例えば、``var`` の内容が "
"``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]`` の場合、 "
"``{{ var|unordered_list }}`` は以下のようになります:"

msgid "``upper``"
msgstr "``upper``"

msgid "Converts a string into all uppercase."
msgstr "入力値をすべて大文字に変換します。"

msgid ""
"If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"JOEL IS A "
"SLUG\"``."
msgstr ""
"``value`` が ``\"Joel is a slug\"`` であるとき、出力は ``\"JOEL IS A "
"SLUG\"`` となります。"

msgid "``urlencode``"
msgstr "``urlencode``"

msgid "Escapes a value for use in a URL."
msgstr "入力値を URL で使えるようにエスケープします。"

msgid ""
"If ``value`` is ``\"https://www.example.org/foo?a=b&c=d\"``, the output will "
"be ``\"https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\"``."
msgstr ""
"``value`` が ``\"https://www.example.org/foo?a=b&c=d\"`` のとき、出力は "
"``\"https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\"`` となります。"

msgid ""
"An optional argument containing the characters which should not be escaped "
"can be provided."
msgstr "オプションの引数で、エスケープさせない文字を指定できます。"

msgid ""
"If not provided, the '/' character is assumed safe. An empty string can be "
"provided when *all* characters should be escaped. For example:"
msgstr ""
"特に指定しなくても '/' の文字はエスケープされません。オプションで空の文字列が"
"指定された場合は、*すべての* 文字がエスケープされます。例を挙げます:"

msgid ""
"If ``value`` is ``\"https://www.example.org/\"``, the output will be "
"``\"https%3A%2F%2Fwww.example.org%2F\"``."
msgstr ""
"ここで ``value`` が ``\"https://www.example.org/\"`` であるとき、出力は "
"``\"https%3A%2F%2Fwww.example.org%2F\"`` となります。"

msgid "``urlize``"
msgstr "``urlize``"

msgid "Converts URLs and email addresses in text into clickable links."
msgstr "テキスト内の URL と Email アドレスをクリック可能なリンクに変換します。"

msgid ""
"This template tag works on links prefixed with ``http://``, ``https://``, or "
"``www.``. For example, ``https://goo.gl/aia1t`` will get converted but ``goo."
"gl/aia1t`` won't."
msgstr ""
"このテンプレートタグは ``http://``、``https://``、``www.`` で始まるリンクに作"
"用します。たとえば ``https://goo.gl/aia1t`` は変換されます。しかし ``goo.gl/"
"aia1t`` はそのままです。"

msgid ""
"It also supports domain-only links ending in one of the original top level "
"domains (``.com``, ``.edu``, ``.gov``, ``.int``, ``.mil``, ``.net``, and ``."
"org``). For example, ``djangoproject.com`` gets converted."
msgstr ""
"末尾が ``.com``、``.edu``、``.gov``、``.int``、``.mil``、``.net``、``.org`` "
"である場合は、ドメイン名のみのリンクもサポートします。たとえば "
"``djangoproject.com`` は変換されます。"

msgid ""
"Links can have trailing punctuation (periods, commas, close-parens) and "
"leading punctuation (opening parens), and ``urlize`` will still do the right "
"thing."
msgstr ""
"リンクの末尾に句読点（ピリオド、カンマ、閉じ括弧）や先頭に句読点（開き括弧）"
"があっても、 ``urlize`` は正しく処理します。"

msgid ""
"Links generated by ``urlize`` have a ``rel=\"nofollow\"`` attribute added to "
"them."
msgstr ""
"``urlize`` が生成したリンクにはアトリビュート ``rel=\"nofollow\"`` が加えられ"
"ています。"

msgid ""
"If ``value`` is ``\"Check out www.djangoproject.com\"``, the output will be "
"``\"Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www."
"djangoproject.com</a>\"``."
msgstr ""
"``value`` が ``\"Check out www.djangoproject.com\"`` であるとき、出力は "
"``\"Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www."
"djangoproject.com</a>\"`` となります。"

msgid ""
"In addition to web links, ``urlize`` also converts email addresses into "
"``mailto:`` links. If ``value`` is ``\"Send questions to foo@example."
"com\"``, the output will be ``\"Send questions to <a href=\"mailto:"
"foo@example.com\">foo@example.com</a>\"``."
msgstr ""
"ウェブリンクに加えて、 ``urlize`` は email アドレスも ``mailto:`` リンクに変"
"換できます。``value`` が ``\"Send questions to foo@example.com\"`` であると"
"き、出力は ``\"Send questions to <a href=\"mailto:foo@example."
"com\">foo@example.com</a>\"`` となります。"

msgid ""
"The ``urlize`` filter also takes an optional parameter ``autoescape``. If "
"``autoescape`` is ``True``, the link text and URLs will be escaped using "
"Django's built-in :tfilter:`escape` filter. The default value for "
"``autoescape`` is ``True``."
msgstr ""
"``urlize`` フィルタはオプションの引数 ``autoescape`` をとることができます。"
"``autoescape`` が ``True`` のとき、リンクテキストと URL は Django の組み込み"
"フィルタ :tfilter:`escape` でエスケープされます。指定しない場合の "
"``autoescape`` の値は ``True`` です。"

msgid ""
"If ``urlize`` is applied to text that already contains HTML markup, or to "
"email addresses that contain single quotes (``'``), things won't work as "
"expected. Apply this filter only to plain text."
msgstr ""
"もし ``urlize`` をすでに HTML マークアップを含むテキストに適用したり、シング"
"ルクォート(``'``)を含むメールアドレスに適用したりすると、期待通りに動作しませ"
"ん。このフィルタはプレーンテキストにだけ適用してください。"

msgid "``urlizetrunc``"
msgstr "``urlizetrunc``"

msgid ""
"Converts URLs and email addresses into clickable links just like urlize_, "
"but truncates URLs longer than the given character limit."
msgstr ""
"urlize_ と同じように、URL と　email アドレスをクリック可能なリンクに変換しま"
"す。ただし、指定の文字数以上の表示を切り詰めます。"

msgid ""
"**Argument:** Number of characters that link text should be truncated to, "
"including the ellipsis that's added if truncation is necessary."
msgstr ""
"**引数:** URL を切り詰める長さ。省略記号の長さを含みます。省略記号は省略が必"
"要な場合につけられます。"

msgid ""
"If ``value`` is ``\"Check out www.djangoproject.com\"``, the output would be "
"``'Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www."
"djangoproj…</a>'``."
msgstr ""
"``value`` が ``\"Check out www.djangoproject.com\"`` であるとき、出力は "
"``'Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www."
"djangoproj…</a>'`` となります。"

msgid "As with urlize_, this filter should only be applied to plain text."
msgstr ""
"urlize_ と同じく、このフィルタはプレーンテキストに対してだけ使ってください。"

msgid "``wordcount``"
msgstr "``wordcount``"

msgid "Returns the number of words."
msgstr "ワード数を返します。"

msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``4``."
msgstr "``value`` が ``\"Joel is a slug\"`` のとき、出力は ``4`` です。"

msgid "``wordwrap``"
msgstr "``wordwrap``"

msgid "Wraps words at specified line length."
msgstr "指定した行幅でワードラップします。"

msgid "**Argument:** number of characters at which to wrap the text"
msgstr "**引数:** テキストをラップするまでのワード数"

msgid "If ``value`` is ``Joel is a slug``, the output would be:"
msgstr "``value`` が ``Joel is a slug`` の場合、出力は以下のようになります:"

msgid "``yesno``"
msgstr "``yesno``"

msgid ""
"Maps values for ``True``, ``False``, and (optionally) ``None``, to the "
"strings \"yes\", \"no\", \"maybe\", or a custom mapping passed as a comma-"
"separated list, and returns one of those strings according to the value:"
msgstr ""
"入力値 ( \"True\" 、 \"False\" 、オプションで \"None\" ) に対応する文字列を返"
"します。対応する文字列はデフォルトでは \"yes\"、\"no\"、\"maybe\" です。また"
"コンマ区切りの文字列を引数として与えることでカスタムマッピングを指定できま"
"す。"

msgid "``True``"
msgstr "``True``"

msgid "``yes``"
msgstr "``yes``"

msgid "``\"yeah,no,maybe\"``"
msgstr "``\"yeah,no,maybe\"``"

msgid "``yeah``"
msgstr "``yeah``"

msgid "``False``"
msgstr "``False``"

msgid "``no``"
msgstr "``no``"

msgid "``maybe``"
msgstr "``maybe``"

msgid "``\"yeah,no\"``"
msgstr "``\"yeah,no\"``"

msgid ""
"``no`` (converts ``None`` to ``False`` if no mapping for ``None`` is given)"
msgstr "``no`` (``None`` に対応する値がない場合は ``False`` の値が使われます)"

msgid "Internationalization tags and filters"
msgstr "国際化タグとフィルタ"

msgid ""
"Django provides template tags and filters to control each aspect of :doc:"
"`internationalization </topics/i18n/index>` in templates. They allow for "
"granular control of translations, formatting, and time zone conversions."
msgstr ""
"Django はテンプレートの :doc:`国際化 </topics/i18n/index>` をそれぞれの角度か"
"ら制御するタグやフィルタを提供し、翻訳、書式設定、およびタイムゾーン変換のき"
"め細かい制御を可能にしています。"

msgid "``i18n``"
msgstr "``i18n``"

msgid ""
"This library allows specifying translatable text in templates. To enable it, "
"set :setting:`USE_I18N` to ``True``, then load it with ``{% load i18n %}``."
msgstr ""
"このライブラリは、テンプレート内の飜訳可能なテキストを指定できます。これを有"
"効化するには :setting:`USE_I18N` を ``True`` に設定し、 ``{% load i18n %}`` "
"でロードします。"

msgid "See :ref:`specifying-translation-strings-in-template-code`."
msgstr ""
":ref:`specifying-translation-strings-in-template-code` も参照してください。"

msgid "``l10n``"
msgstr "``l10n``"

msgid ""
"This library provides control over the localization of values in templates. "
"You only need to load the library using ``{% load l10n %}``."
msgstr ""
"このライブラリはテンプレート内の値のローカライズを制御します。このライブラリ"
"は ``{% load l10n %}`` を使って読み込むだけです。"

msgid "See :ref:`topic-l10n-templates`."
msgstr ":ref:`topic-l10n-templates` も参照してください。"

msgid "``tz``"
msgstr "``tz``"

msgid ""
"This library provides control over time zone conversions in templates. Like "
"``l10n``, you only need to load the library using ``{% load tz %}``, but "
"you'll usually also set :setting:`USE_TZ` to ``True`` so that conversion to "
"local time happens by default."
msgstr ""
"このライブラリは、テンプレートのタイムゾーン変換を制御します。 ``l10n`` と同"
"じく、必要なのは ``{% load tz %}`` を使ってライブラリをロードするだけですが、"
"通常はデフォルトでローカル時間に変換されるよう、 :setting:`USE_TZ` を "
"``True`` に設定するでしょう。"

msgid "See :ref:`time-zones-in-templates`."
msgstr ":ref:`time-zones-in-templates` も参照してください。"

msgid "Other tags and filters libraries"
msgstr "その他のタグとフィルタライブラリ"

msgid ""
"Django comes with a couple of other template-tag libraries that you have to "
"enable explicitly in your :setting:`INSTALLED_APPS` setting and enable in "
"your template with the :ttag:`{% load %}<load>` tag."
msgstr ""
"この他にも、Django にはいくつかのテンプレートタグ・ライブラリがあります。これ"
"らのライブラリは :setting:`INSTALLED_APPS` 設定で明示的に有効化したうえ、 :"
"ttag:`{% load %}<load>` タグを使ってテンプレート上にロードする必要がありま"
"す。"

msgid ""
"A set of Django template filters useful for adding a \"human touch\" to "
"data. See :doc:`/ref/contrib/humanize`."
msgstr ""
"データを「ヒトにやさしい」表現にする上で便利な Django テンプレートフィルタの"
"セットです。くわしくは :doc:`/ref/contrib/humanize` を参照してください。"

msgid "``static``"
msgstr "``static``"

msgid ""
"To link to static files that are saved in :setting:`STATIC_ROOT` Django "
"ships with a :ttag:`static` template tag. If the :mod:`django.contrib."
"staticfiles` app is installed, the tag will serve files using ``url()`` "
"method of the storage specified by ``staticfiles`` in :setting:`STORAGES`. "
"For example:"
msgstr ""
":setting:`STATIC_ROOT` に保存されている静的ファイルにリンクするために、 "
"Django には :ttag:`static` テンプレートタグが同梱されています。 :mod:`django."
"contrib.staticfiles` アプリケーションがインストールされていれば、このタグは :"
"setting:`STORAGES` で ``staticfiles`` で指定されたストレージの ``url()`` メ"
"ソッドを使ってファイルを配信します。たとえば以下のようにします："

msgid ""
"It is also able to consume standard context variables, e.g. assuming a "
"``user_stylesheet`` variable is passed to the template:"
msgstr ""
"普通のコンテキスト変数を使うこともできます。例えば ``user_stylesheet`` 変数を"
"テンプレートに渡す場合は、以下のようにします:"

msgid ""
"If you'd like to retrieve a static URL without displaying it, you can use a "
"slightly different call:"
msgstr ""
"静的 URL を表示することなく取得したい場合は、少し異なる呼び出し方法になりま"
"す："

msgid "Using Jinja2 templates?"
msgstr "Jinja2 テンプレートを使いますか？"

msgid ""
"See :class:`~django.template.backends.jinja2.Jinja2` for information on "
"using the ``static`` tag with Jinja2."
msgstr ""
"Jinja2 で ``static`` タグを使う方法については :class:`~django.template."
"backends.jinja2.Jinja2` を参照してください。"

msgid "``get_static_prefix``"
msgstr "``get_static_prefix``"

msgid ""
"You should prefer the :ttag:`static` template tag, but if you need more "
"control over exactly where and how :setting:`STATIC_URL` is injected into "
"the template, you can use the :ttag:`get_static_prefix` template tag:"
msgstr ""
"通常は :ttag:`static` テンプレートタグの使用を推奨しますが、 :setting:"
"`STATIC_URL` がテンプレートに挿入される場所と方法をより厳密に制御する必要があ"
"る場合は、 :ttag:`get_static_prefix` テンプレートタグが使用できます："

msgid ""
"There's also a second form you can use to avoid extra processing if you need "
"the value multiple times:"
msgstr ""
"値を何度も使う必要がある場合、不要な処理を避けるために使用できる別の方式もあ"
"ります:"

msgid "``get_media_prefix``"
msgstr "``get_media_prefix``"

msgid ""
"Similar to the :ttag:`get_static_prefix`, ``get_media_prefix`` populates a "
"template variable with the media prefix :setting:`MEDIA_URL`, e.g.:"
msgstr ""
":ttag:`get_static_prefix` と同じように、``get_media_prefix`` はテンプレート変"
"数に :setting:`MEDIA_URL` のメディア・プレフィックスを加えます。たとえば:"

msgid ""
"By storing the value in a data attribute, we ensure it's escaped "
"appropriately if we want to use it in a JavaScript context."
msgstr ""
"値をデータ属性に格納することで、JavaScriptのコンテキストで使用する場合に適切"
"にエスケープされるようになります。"

msgid ""
"Django's template engine provides a powerful mini-language for defining the "
"user-facing layer of your application, encouraging a clean separation of "
"application and presentation logic. Templates can be maintained by anyone "
"with an understanding of HTML; no knowledge of Python is required. For "
"introductory material, see :doc:`/topics/templates` topic guide."
msgstr ""
"Django のテンプレートエンジンは、アプリケーションのユーザ向けレイヤを定義する"
"ための強力なミニ言語を提供し、アプリケーションとプレゼンテーションロジックの"
"きれいな分離を促します。テンプレートは HTML の知識があれば誰でもメンテナンス"
"できます。入門的な内容については :doc:`/topics/templates` トピックガイド を参"
"照してください。"

msgid ""
"For information on writing your own custom tags and filters, see :doc:`/"
"howto/custom-template-tags`."
msgstr ""
"独自のカスタムタグとフィルタの書き方については :doc:`/howto/custom-template-"
"tags` を参照してください。"

msgid ""
"To learn how to override templates in other Django applications, see :doc:`/"
"howto/overriding-templates`."
msgstr ""
"他の Django アプリケーションでテンプレートをオーバーライドする方法について"
"は、 :doc:`/howto/overriding-templates` を参照してください。"

msgid "The Django template language"
msgstr "Django テンプレート言語"

msgid ""
"This document explains the language syntax of the Django template system. If "
"you're looking for a more technical perspective on how it works and how to "
"extend it, see :doc:`/ref/templates/api`."
msgstr ""
"このドキュメントはDjangoテンプレートシステムの文法を説明しています。もしあな"
"たがもっと技術者的な観点でどう動かすかやどう拡張するかを知りたい場合は、:doc:"
"`/ref/templates/api` を参照してください。"

msgid ""
"Django's template language is designed to strike a balance between power and "
"ease. It's designed to feel comfortable to those used to working with HTML. "
"If you have any exposure to other text-based template languages, such as "
"Smarty_ or Jinja2_, you should feel right at home with Django's templates."
msgstr ""
"Django のテンプレート言語は、強力さと使いやすさのバランスを取るように設計され"
"ています。HTML の扱いに慣れている人なら、違和感なく使えるように設計されていま"
"す。 Smarty_ や  Jinja2_ のようなテキストベースのテンプレート言語に触れたこと"
"があれば、 Django のテンプレートに馴染めるはずです。"

msgid "Philosophy"
msgstr "設計思想"

msgid ""
"If you have a background in programming, or if you're used to languages "
"which mix programming code directly into HTML, you'll want to bear in mind "
"that the Django template system is not simply Python embedded into HTML. "
"This is by design: the template system is meant to express presentation, not "
"program logic."
msgstr ""
"もしあなたがプログラミングのバックグラウンドを持っていたり、 HTML に直接プロ"
"グラミングコードを埋め込む言語に慣れているなら、 Django のテンプレートシステ"
"ムは単に Python を HTML に埋め込んだものではないことを心に留めておいてくださ"
"い。これは、テンプレートシステムはプレゼンテーション（体裁）を表現するための"
"ものであり、プログラムロジックを表現するためのものではないという設計思想から"
"来ています。"

msgid ""
"The Django template system provides tags which function similarly to some "
"programming constructs -- an :ttag:`if` tag for boolean tests, a :ttag:`for` "
"tag for looping, etc. -- but these are not simply executed as the "
"corresponding Python code, and the template system will not execute "
"arbitrary Python expressions. Only the tags, filters and syntax listed below "
"are supported by default (although you can add :doc:`your own extensions </"
"howto/custom-template-tags>` to the template language as needed)."
msgstr ""
"Django テンプレートシステムは、いくつかのプログラミング構文に似た機能を持つタ"
"グを提供します。真偽値テスト用の :ttag:`if` タグ、ループ処理用の :ttag:`for` "
"タグなどです。しかし、これらは単純に対応する Python コードとして実行されるわ"
"けではなく、テンプレートシステムは任意の Python 式を実行することはありませ"
"ん。デフォルトでは以下のタグ、フィルタ、構文だけがサポートされています（ただ"
"し、必要に応じて :doc:`独自の拡張機能 </howto/custom-template-tags>` をテンプ"
"レート言語に追加することもできます）。"

msgid ""
"A template is a text file. It can generate any text-based format (HTML, XML, "
"CSV, etc.)."
msgstr ""
"テンプレートは、テキストファイルです。これは、任意のテキストベースのフォー"
"マット (HTML、XML、CSV) などを生成できます。"

msgid ""
"A template contains **variables**, which get replaced with values when the "
"template is evaluated, and **tags**, which control the logic of the template."
msgstr ""
"テンプレートに含まれるのは、テンプレートが読み込まれたとき実際の値で置き換え"
"られる **変数** と、テンプレートのロジックを制御する **タグ** です。"

msgid ""
"Below is a minimal template that illustrates a few basics. Each element will "
"be explained later in this document."
msgstr ""
"以下は、いくつかの基本を示した最小限のテンプレートです。各要素については、こ"
"の文書の後半で説明します。"

msgid ""
"Why use a text-based template instead of an XML-based one (like Zope's TAL)? "
"We wanted Django's template language to be usable for more than just XML/"
"HTML templates. You can use the template language for any text-based format "
"such as emails, JavaScript and CSV."
msgstr ""
"なぜ、(ZopeのTALのような) XMLベースのテンプレートではなく、テキストベースのテ"
"ンプレートを使うのか？それは、Django のテンプレート言語を XML/ HTML テンプ"
"レートより使いやすくしたかったからです。テンプレート言語は、どんなEメール、"
"JavaScript、CSVのようなテキストベースのフォーマットにも使用できます。"

msgid "Variables"
msgstr "変数"

msgid ""
"Variables look like this: ``{{ variable }}``. When the template engine "
"encounters a variable, it evaluates that variable and replaces it with the "
"result. Variable names consist of any combination of alphanumeric characters "
"and the underscore (``\"_\"``) but may not start with an underscore, and may "
"not be a number. The dot (``\".\"``) also appears in variable sections, "
"although that has a special meaning, as indicated below. Importantly, *you "
"cannot have spaces or punctuation characters in variable names.*"
msgstr ""
"変数は次のような見た目です: ``{{ variable }}``。テンプレートエンジンが変数を"
"検出すると、その変数を認識し、その結果に置き換えます。変数名は、英数字の任意"
"の組み合わせとアンダースコア (``\"_\"``) で構成されています（ただし、先頭を2"
"重のアンダースコアもしくは数字にすることはできません）。ドット (``\".\"``) も"
"変数セクションに表示されますが、以下に示すように特別な意味を持っています。重"
"要なのは、*変数名にスペースまたは句読点を持つことはできない* ということです。"

msgid "Use a dot (``.``) to access attributes of a variable."
msgstr "変数の属性にアクセスするには、ドットを ('``.``') を使用します。"

msgid ""
"Technically, when the template system encounters a dot, it tries the "
"following lookups, in this order:"
msgstr ""
"技術的には、テンプレートシステムがドットを検出した際、以下の参照項目をこの順"
"番で実行しようとします:"

msgid "Dictionary lookup"
msgstr "辞書検索"

msgid "Attribute or method lookup"
msgstr "属性やメソッドの検索"

msgid "Numeric index lookup"
msgstr "数値のインデックス検索"

msgid ""
"If the resulting value is callable, it is called with no arguments. The "
"result of the call becomes the template value."
msgstr ""
"結果の値が呼び出し可能である場合は、引数なしで呼び出されます。呼び出しの結果"
"は、テンプレートの値となります。"

msgid ""
"This lookup order can cause some unexpected behavior with objects that "
"override dictionary lookup. For example, consider the following code snippet "
"that attempts to loop over a ``collections.defaultdict``:"
msgstr ""
"この検索の手順は、辞書検索を上書きするオブジェクトにおいて、予期しない動作を"
"引き起こす可能性があります。たとえば、``collections.defaultdict`` すべてを"
"ループ処理をしようとする、次のコードスニペットを考えてみましょう。"

msgid ""
"Because dictionary lookup happens first, that behavior kicks in and provides "
"a default value instead of using the intended ``.items()`` method. In this "
"case, consider converting to a dictionary first."
msgstr ""
"最初に辞書検索が行われるため、その挙動が動作してしまい、意図していた ``."
"items()`` メソッドを使用せずに、デフォルト値を提供してしまいます。この場合、"
"最初に辞書を変換することを検討してください。"

msgid ""
"In the above example, ``{{ section.title }}`` will be replaced with the "
"``title`` attribute of the ``section`` object."
msgstr ""
"上記の例では、 ``{{ section.title }}`` は ``section`` オブジェクトの "
"``title`` 属性と置き換えられます。"

msgid ""
"If you use a variable that doesn't exist, the template system will insert "
"the value of the ``string_if_invalid`` option, which is set to ``''`` (the "
"empty string) by default."
msgstr ""
"もし存在しない変数を使いたい場合、テンプレートシステムはデフォルトで ``''`` "
"(the empty string)が置かれている場所に、 ``string_if_invalid`` のオプション値"
"を挿入します。"

msgid ""
"Variable attributes that begin with an underscore may not be accessed as "
"they're generally considered private."
msgstr ""
"アンダースコアで始まる変数属性は、通常はプライベートとみなされるため、アクセ"
"スできません。"

msgid "You can modify variables for display by using **filters**."
msgstr "**フィルタ** を使って、表示される変数に手を加えることができます。"

msgid ""
"Filters look like this: ``{{ name|lower }}``. This displays the value of the "
"``{{ name }}`` variable after being filtered through the :tfilter:`lower` "
"filter, which converts text to lowercase. Use a pipe (``|``) to apply a "
"filter."
msgstr ""
"フィルタは ``{{ name|lower }}`` のような形式です。これは ``{{ name }}`` 変数"
"の値を、テキストを小文字に変換する :tfilter:`lower` フィルタを通してから表示"
"します。フィルタを適用するにはパイプ (``|``) を使用します。"

msgid ""
"Filters can be \"chained.\" The output of one filter is applied to the next. "
"``{{ text|escape|linebreaks }}`` is a common idiom for escaping text "
"contents, then converting line breaks to ``<p>`` tags."
msgstr ""
"フィルタは \"連結\" できます。あるフィルタの出力が次のフィルタに適用されま"
"す。``{{ text|escape|linebreaks }}`` はテキストの内容をエスケープし、改行を "
"``<p>`` タグに変換するためのよくあるイディオムです。"

msgid ""
"Some filters take arguments. A filter argument looks like this: ``{{ bio|"
"truncatewords:30 }}``. This will display the first 30 words of the ``bio`` "
"variable."
msgstr ""
"いくつかのフィルタは引数を取ります。フィルタの引数は ``{{ bio|"
"truncatewords:30 }}`` のように指定します。これは ``bio`` 変数の最初の30単語を"
"表示します。"

msgid ""
"Filter arguments that contain spaces must be quoted; for example, to join a "
"list with commas and spaces you'd use ``{{ list|join:\", \" }}``."
msgstr ""
"スペースを含むフィルタの引数は引用符で囲む必要があります。たとえば、カンマと"
"スペースを含むリストを結合するには ``{{ list|join:\", \" }}`` とします。"

msgid ""
"Django provides about sixty built-in template filters. You can read all "
"about them in the :ref:`built-in filter reference <ref-templates-builtins-"
"filters>`. To give you a taste of what's available, here are some of the "
"more commonly used template filters:"
msgstr ""
"Django には約 60 個の組み込みテンプレートフィルタがあります。これらについて"
"は :ref:`組み込みフィルタリファレンス <ref-templates-builtins-filters>` を参"
"照してください。どのようなものがあるのかを知ってもらうために、よく使われるテ"
"ンプレートフィルタをいくつか紹介します:"

msgid ":tfilter:`default`"
msgstr ":tfilter:`default`"

msgid ""
"If a variable is false or empty, use given default. Otherwise, use the value "
"of the variable. For example:"
msgstr ""
"変数が False または空の場合、指定されたデフォルト値を使用します。そうでなけれ"
"ば、その変数の値を使います。たとえば:"

msgid ""
"If ``value`` isn't provided or is empty, the above will display "
"\"``nothing``\"."
msgstr ""
"もし ``value`` が与えられなかったり、空だった場合、上記は \"``nothing``\" と"
"表示されます。"

msgid ":tfilter:`length`"
msgstr ":tfilter:`length`"

msgid ""
"Returns the length of the value. This works for both strings and lists. For "
"example:"
msgstr "値の長さを返します。これは文字列でもリストでも使えます。たとえば:"

msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr ""
"``value`` が ``['a', 'b', 'c', 'd']`` のとき、出力は ``4`` となります。"

msgid ":tfilter:`filesizeformat`"
msgstr ":tfilter:`filesizeformat`"

msgid ""
"Formats the value like a \"human-readable\" file size (i.e. ``'13 KB'``, "
"``'4.1 MB'``, ``'102 bytes'``, etc.). For example:"
msgstr ""
"入力値を、\"人間が読みやすい\" ファイルサイズ表現 ('13 KB', '4.1 MB', '102 "
"bytes' など) に変換します。たとえば:"

msgid ""
"Again, these are just a few examples; see the :ref:`built-in filter "
"reference <ref-templates-builtins-filters>` for the complete list."
msgstr ""
"繰り返しますが、これらはほんの一例に過ぎません。完全なリストは :ref:`組み込み"
"フィルタのリファレンス <ref-templates-builtins-filters>` を参照してください。"

msgid ""
"You can also create your own custom template filters; see :doc:`/howto/"
"custom-template-tags`."
msgstr ""
"独自のカスタムテンプレートフィルタを作成することもできます。 :doc:`/howto/"
"custom-template-tags` を参照してください。"

msgid ""
"Django's admin interface can include a complete reference of all template "
"tags and filters available for a given site. See :doc:`/ref/contrib/admin/"
"admindocs`."
msgstr ""
"Django の管理インタフェースには、指定したサイトで利用可能な全てのテンプレート"
"タグとフィルタの完全なリファレンスを含めることができます。 :doc:`/ref/"
"contrib/admin/admindocs` を参照してください。"

msgid "Tags"
msgstr "タグ"

msgid ""
"Tags look like this: ``{% tag %}``. Tags are more complex than variables: "
"Some create text in the output, some control flow by performing loops or "
"logic, and some load external information into the template to be used by "
"later variables."
msgstr ""
"タグは  ``{% tag %}`` のような形式です。タグは変数よりも複雑です。出力にテキ"
"ストを生成したり、ループやロジックを実行することでフローを制御したり、後の変"
"数で使用される追加情報をテンプレートにロードしたりします。"

msgid ""
"Some tags require beginning and ending tags (i.e. ``{% tag %} ... tag "
"contents ... {% endtag %}``)."
msgstr ""
"タグの中には開始タグと終了タグを必要とするものがあります(例 ``{% tag %} ... "
"tag contents ... {% endtag %}``)。"

msgid ""
"Django ships with about two dozen built-in template tags. You can read all "
"about them in the :ref:`built-in tag reference <ref-templates-builtins-"
"tags>`. To give you a taste of what's available, here are some of the more "
"commonly used tags:"
msgstr ""
"Django には約 20 個の組み込みテンプレートタグが同梱されています。これらについ"
"ては :ref:`組み込みタグのリファレンス <ref-templates-builtins-tags>` を参照し"
"てください。どのようなタグが利用できるかを知ってもらうために、よく使われるタ"
"グをいくつか紹介 します:"

msgid ":ttag:`for`"
msgstr ":ttag:`for`"

msgid ""
"Loop over each item in an array.  For example, to display a list of athletes "
"provided in ``athlete_list``:"
msgstr ""
"配列の各要素に渡ってループします。たとえば、アスリート (athlete) のリストを  "
"``athlete_list`` で渡して表示するには、次のようにします。"

msgid ":ttag:`if`, ``elif``, and ``else``"
msgstr ":ttag:`if`, ``elif``, ``else``"

msgid ""
"Evaluates a variable, and if that variable is \"true\" the contents of the "
"block are displayed:"
msgstr ""
"変数を評価し、その変数が \"true \"の場合、ブロックの内容が表示されます:"

msgid ""
"In the above, if ``athlete_list`` is not empty, the number of athletes will "
"be displayed by the ``{{ athlete_list|length }}`` variable. Otherwise, if "
"``athlete_in_locker_room_list`` is not empty, the message \"Athletes should "
"be out...\" will be displayed. If both lists are empty, \"No athletes.\" "
"will be displayed."
msgstr ""
"上記の場合、 ``athlete_list`` が空でなければ、 ``{{ athlete_list|length }}`` "
"変数によって選手の数が表示されます。もし ``athlete_in_locker_room_list`` が空"
"でなければ、\"Athletes should be out... \" というメッセージが表示されます。両"
"方のリストが空の場合、\"No athletes.\" と表示されます。"

msgid "You can also use filters and various operators in the :ttag:`if` tag:"
msgstr ":ttag:`if` タグの中では、フィルタや様々な演算子を使うこともできます:"

msgid ""
"While the above example works, be aware that most template filters return "
"strings, so mathematical comparisons using filters will generally not work "
"as you expect. :tfilter:`length` is an exception."
msgstr ""
"上の例はうまくいきますが、ほとんどのテンプレートフィルタは文字列を返すので、"
"フィルタを使った数学的な比較は通常は期待通りにならないことに注意してくださ"
"い。 :tfilter:`length` は例外です。"

msgid ":ttag:`block` and :ttag:`extends`"
msgstr ":ttag:`block` と :ttag:`extends`"

msgid ""
"Set up `template inheritance`_ (see below), a powerful way of cutting down "
"on \"boilerplate\" in templates."
msgstr ""
"テンプレートの \"定型文\" を削減する強力な方法である `template inheritance`_ "
"（下記参照）を設定します。"

msgid ""
"Again, the above is only a selection of the whole list; see the :ref:`built-"
"in tag reference <ref-templates-builtins-tags>` for the complete list."
msgstr ""
"繰り返しますが、上記は全リストの一部です。全リストは :ref:`組み込みタグのリ"
"ファレンス <ref-templates-builtins-tags>` を参照してください。"

msgid ""
"You can also create your own custom template tags; see :doc:`/howto/custom-"
"template-tags`."
msgstr ""
"独自のカスタムテンプレートタグを作成することもできます。 :doc:`/howto/custom-"
"template-tags` を参照してください。"

msgid "Comments"
msgstr "コメント"

msgid ""
"To comment-out part of a line in a template, use the comment syntax: ``{# #}"
"``."
msgstr ""
"テンプレートの行の一部をコメントアウトするには、コメント構文 ``{# #}`` を使い"
"ます。"

msgid "For example, this template would render as ``'hello'``:"
msgstr "たとえば、このテンプレートは ``'hello'`` としてレンダリングされます:"

msgid "A comment can contain any template code, invalid or not. For example:"
msgstr ""
"コメントには、たとえ無効でも、どんなテンプレート・コードも含めることができま"
"す。たとえば:"

msgid ""
"This syntax can only be used for single-line comments (no newlines are "
"permitted between the ``{#`` and ``#}`` delimiters). If you need to comment "
"out a multiline portion of the template, see the :ttag:`comment` tag."
msgstr ""
"この構文は1行のコメントにしか使えません（改行は ``{#`` と ``#}`` の間に入れて"
"はいけません）。テンプレートの複数行の部分をコメントアウトする必要がある場合"
"は :ttag:`comment` タグを参照してください。"

msgid "Template inheritance"
msgstr "テンプレートの継承"

msgid ""
"The most powerful -- and thus the most complex -- part of Django's template "
"engine is template inheritance. Template inheritance allows you to build a "
"base \"skeleton\" template that contains all the common elements of your "
"site and defines **blocks** that child templates can override."
msgstr ""
"Django のテンプレートエンジンの中で最もパワフルな -- ゆえに最も複雑な -- 部分"
"が、テンプレートの継承です。テンプレートを継承すると、ベースとなる \"骨組みの"
"\" テンプレートにサイトの共通要素を記述し、**block** を定義することで子テンプ"
"レートにオーバーライドさせることができます。"

msgid "Let's look at template inheritance by starting with an example:"
msgstr "テンプレートの継承について、まず例を見てみましょう:"

msgid ""
"This template, which we'll call ``base.html``, defines an HTML skeleton "
"document that you might use for a two-column page. It's the job of \"child\" "
"templates to fill the empty blocks with content."
msgstr ""
"我々が ``base.html`` と呼ぶことになるこのテンプレートは、HTML の骨組みを定義"
"し、2 列のサイトを表示できるようになっています。block をコンテンツで埋めるの"
"は、\"子\" テンプレートの仕事です。"

msgid ""
"In this example, the :ttag:`block` tag defines three blocks that child "
"templates can fill in. All the :ttag:`block` tag does is to tell the "
"template engine that a child template may override those portions of the "
"template."
msgstr ""
"この例では、:ttag:`block` タグにより、子テンプレートが埋めることができる 3 つ"
"のブロックが定義されています。:ttag:`block` タグの仕事は、テンプレートのこれ"
"らの部分が子テンプレートによりオーバーライドされる可能性があることをテンプ"
"レートエンジンに伝えることです。"

msgid "A child template might look like this:"
msgstr "子テンプレートは以下のようになります:"

msgid ""
"The :ttag:`extends` tag is the key here. It tells the template engine that "
"this template \"extends\" another template. When the template system "
"evaluates this template, first it locates the parent -- in this case, \"base."
"html\"."
msgstr ""
"ここで重要なのは :ttag:`extends` タグです。このタグが、このテンプレートが他の"
"テンプレートを \"拡張\" することをテンプレートエンジンに伝えるのです。テンプ"
"レートシステムがこのテンプレートを評価する際に、最初に親テンプレートを探しに"
"行きます -- この例では \"base.html\" です。"

msgid ""
"At that point, the template engine will notice the three :ttag:`block` tags "
"in ``base.html`` and replace those blocks with the contents of the child "
"template. Depending on the value of ``blog_entries``, the output might look "
"like:"
msgstr ""
"この時点で、テンプレートエンジンは ``base.html`` 内の :ttag:`block` を認識"
"し、子テンプレートのコンテンツと差し替えます。``blog_entries`` の値に応じて、"
"アウトプットは以下のようになります:"

msgid ""
"Note that since the child template didn't define the ``sidebar`` block, the "
"value from the parent template is used instead. Content within a ``{% block "
"%}`` tag in a parent template is always used as a fallback."
msgstr ""
"子テンプレート内で ``sidebar`` を定義していないため、親テンプレートの値がその"
"まま使われていることに留意してください。親テンプレートの ``{% block %}`` タグ"
"内のコンテンツは、常にフォールバックとして使用されます。"

msgid ""
"You can use as many levels of inheritance as needed. One common way of using "
"inheritance is the following three-level approach:"
msgstr ""
"継承は、必要なだけ段階を経ることができます。継承を使う一般的な方法は、以下の "
"3 段階のアプローチです:"

msgid ""
"Create a ``base.html`` template that holds the main look-and-feel of your "
"site."
msgstr ""
"メインのルック・アンド・フィールを保持する ``base.html`` を作成します。"

msgid ""
"Create a ``base_SECTIONNAME.html`` template for each \"section\" of your "
"site. For example, ``base_news.html``, ``base_sports.html``. These templates "
"all extend ``base.html`` and include section-specific styles/design."
msgstr ""
"サイトのそれぞれの「セクション」に対して、``base_セクション名.html`` テンプ"
"レートを作成します。たとえば、``base_news.html``、``base_sports.html`` などで"
"す。これらのテンプレートはすべて ``base.html`` を拡張 (extend) し、セクション"
"固有のスタイルやデザインが含まれています。"

msgid ""
"Create individual templates for each type of page, such as a news article or "
"blog entry. These templates extend the appropriate section template."
msgstr ""
"ページのそれぞれのタイプに対して、個別のテンプレートを作成します。たとえば"
"ニュース記事やブログエントリーなどです。これらのテンプレートは、適切なセク"
"ションの手プレートを拡張 (extends) します。"

msgid ""
"This approach maximizes code reuse and helps to add items to shared content "
"areas, such as section-wide navigation."
msgstr ""
"このアプローチにより、コードを最大限に再利用でき、共通のコンテンツ部 (全セク"
"ション共通のナビゲーションなど) に項目を追加するのに役立ちます。"

msgid "Here are some tips for working with inheritance:"
msgstr "継承を使用する際のコツをいくつか紹介します:"

msgid ""
"If you use :ttag:`{% extends %}<extends>` in a template, it must be the "
"first template tag in that template. Template inheritance won't work, "
"otherwise."
msgstr ""
"テンプレート内で :ttag:`{% extends %}<extends>` を使用する際は、その点プレー"
"ト内で一番最初のテンプレートタグとして指定する必要があります。それ以外の場"
"合、継承が正しく動作しません。"

msgid ""
"More :ttag:`{% block %}<block>` tags in your base templates are better. "
"Remember, child templates don't have to define all parent blocks, so you can "
"fill in reasonable defaults in a number of blocks, then only define the ones "
"you need later. It's better to have more hooks than fewer hooks."
msgstr ""
"ベースのテンプレートには :ttag:`{% block %}<block>` タグを多く配置するほどよ"
"いです。子テンプレートがすべてのブロックを埋める必要がないことを思い出してく"
"ださい。多くのブロック内に適当なデフォルトを記述しておき、必要なものを後で定"
"義し直せばいいのです。フックは多ければ多いほどいいということです。"

msgid ""
"If you find yourself duplicating content in a number of templates, it "
"probably means you should move that content to a ``{% block %}`` in a parent "
"template."
msgstr ""
"もし同じコンテンツを複数のテンプレート内で記述していたら、そのコンテンツを親"
"テンプレートの ``{% block %}`` に移動させるべきかもしれません。"

msgid ""
"If you need to get the content of the block from the parent template, the "
"``{{ block.super }}`` variable will do the trick. This is useful if you want "
"to add to the contents of a parent block instead of completely overriding "
"it. Data inserted using ``{{ block.super }}`` will not be automatically "
"escaped (see the `next section`_), since it was already escaped, if "
"necessary, in the parent template."
msgstr ""
"親テンプレートからブロックのコンテンツを取得する必要がある場合、``{{ block."
"super }}`` が利用できます。親のブロックを完全にオーバーライドせずに、コンテン"
"ツを追加したい場合に有用です。``{{ block.super }}`` を使って挿入されたデータ"
"は自動的にエスケープされません (`next section`_ を参照してください)。これは、"
"必要な場合は親テンプレートですでにエスケープされているからです。"

msgid ""
"By using the same template name as you are inheriting from, :ttag:`{% "
"extends %}<extends>` can be used to inherit a template at the same time as "
"overriding it. Combined with ``{{ block.super }}``, this can be a powerful "
"way to make small customizations. See :ref:"
"`extending_an_overridden_template` in the *Overriding templates* How-to for "
"a full example."
msgstr ""
"継承元と同じテンプレート名を使うことで、 :ttag:`{% extends %} <extends>` を"
"使ってテンプレートのオーバーライドと同時に継承できます。 ``{{ block.super }}"
"`` と組み合わせることで、カスタマイズを最小限に留める強力な手法となります。完"
"全な例は *テンプレートのオーバーライド* How-to の :ref:"
"`extending_an_overridden_template` を参照してください。"

msgid ""
"Variables created outside of a :ttag:`{% block %}<block>` using the template "
"tag ``as`` syntax can't be used inside the block. For example, this template "
"doesn't render anything:"
msgstr ""
":ttag:`{% block %} <block>` の外側でテンプレートタグの ``as`` 構文を使って作"
"成した変数はブロックの中では使用できません。たとえば、このテンプレートは何も"
"レンダリングしません:"

msgid ""
"For extra readability, you can optionally give a *name* to your ``{% "
"endblock %}`` tag. For example:"
msgstr ""
"さらに読みやすくするために、オプションで ``{% endblock %}`` タグに *名前* を"
"つけることができます。たとえば:"

msgid ""
"In larger templates, this technique helps you see which ``{% block %}`` tags "
"are being closed."
msgstr ""
"大きなテンプレートでは、このテクニックでどの ``{% block %}`` が閉じられている"
"のかが分かりやすくなります。"

msgid ""
":ttag:`{% block %}<block>` tags are evaluated first. That's why the content "
"of a block is always overridden, regardless of the truthiness of surrounding "
"tags. For example, this template will *always* override the content of the "
"``title`` block:"
msgstr ""
":ttag:`{% block %} <block>` タグが最初に評価されます。そのため、周囲のタグの"
"真偽に関わらず、ブロックの内容は常に上書きされます。たとえば、このテンプレー"
"トは ``title`` ブロックの内容を常に上書きします:"

msgid ""
"Finally, note that you can't define multiple :ttag:`block` tags with the "
"same name in the same template. This limitation exists because a block tag "
"works in \"both\" directions. That is, a block tag doesn't just provide a "
"hole to fill -- it also defines the content that fills the hole in the "
"*parent*. If there were two similarly-named :ttag:`block` tags in a "
"template, that template's parent wouldn't know which one of the blocks' "
"content to use."
msgstr ""
"最後に、同じテンプレート内で同じ名前の :ttag:`block` タグを複数定義することは"
"できないことに留意してください。この制限は、block タグが \"両方向に\" 働くの"
"が理由です。block タグは埋めるための穴を提供するだけではなく -- *親テンプレー"
"ト* 内で穴を埋めるコンテンツを定義します。もし同名の :ttag:`block` がテンプ"
"レート内に 2 つ存在すると、どちらのブロックのコンテンツを使うべきかテンプレー"
"トの親が判断できなくなってしまうのです。"

msgid "Automatic HTML escaping"
msgstr "HTML の自動エスケープ"

msgid ""
"When generating HTML from templates, there's always a risk that a variable "
"will include characters that affect the resulting HTML. For example, "
"consider this template fragment:"
msgstr ""
"テンプレートから HTML を生成する際は、変数内の文字が HTML のレンダリング結果"
"に悪影響を与えるというリスクが常に付きまといます。たとえば、テンプレートに以"
"下のような部分がある場合を考えてみましょう:"

msgid ""
"At first, this seems like a harmless way to display a user's name, but "
"consider what would happen if the user entered their name as this:"
msgstr ""
"一見、このコードはユーザの名前を表示するだけの無害なものに見えます。しかし次"
"のような値が名前として入力されていれば、何が起きるでしょうか:"

msgid "With this name value, the template would be rendered as:"
msgstr "この値によって、テンプレートは次のように出力されます:"

msgid "...which means the browser would pop-up a JavaScript alert box!"
msgstr ""
"……結果として、ブラウザに JavaScript の警告ボックスをポップアップさせることが"
"できてしまいます！"

msgid "Similarly, what if the name contained a ``'<'`` symbol, like this?"
msgstr "同様に、名前に ``'<'`` 文字が含まれていたらどうでしょうか:"

msgid "That would result in a rendered template like this:"
msgstr "この値によって、テンプレートはこのように出力されます:"

msgid ""
"...which, in turn, would result in the remainder of the web page being in "
"bold!"
msgstr "これで、以降の Web ページの内容はすべて太字になってしまいます！"

msgid ""
"Clearly, user-submitted data shouldn't be trusted blindly and inserted "
"directly into your web pages, because a malicious user could use this kind "
"of hole to do potentially bad things. This type of security exploit is "
"called a `Cross Site Scripting`_ (XSS) attack."
msgstr ""
"ユーザーが入力したデータを無条件に信頼したり、直接 Web ページに挿入したりする"
"べきでないことは明らかです。悪意のあるユーザは、この手の抜け穴を使って悪さを"
"するものだからです。こうしたタイプのセキュリティホールの悪用は、 `Cross Site "
"Scripting`_ (XSS) 攻撃と呼ばれています。"

msgid "To avoid this problem, you have two options:"
msgstr "この問題を防ぐために、二つの方法があります:"

msgid ""
"One, you can make sure to run each untrusted variable through the :tfilter:"
"`escape` filter (documented below), which converts potentially harmful HTML "
"characters to unharmful ones. This was the default solution in Django for "
"its first few years, but the problem is that it puts the onus on *you*, the "
"developer / template author, to ensure you're escaping everything. It's easy "
"to forget to escape data."
msgstr ""
"一つは、信頼できない変数は必ず :tfilter:`escape` フィルタ (後で述べます) に通"
"すことです。このフィルタは危害を及ぼす可能性をもつ HTML 文字を無害な文字に変"
"換します。 この方法は初期の数年間において Django のデフォルトとして採用されて"
"いました。しかしユーザー、すなわち開発者やテンプレートの作者にとっては、すべ"
"てのデータをエスケープすることを忘れぬよう注意しなければならないという負担に"
"なるのが問題です。"

msgid ""
"Two, you can take advantage of Django's automatic HTML escaping. The "
"remainder of this section describes how auto-escaping works."
msgstr ""
"もう一つは、 Django の自動 HTML エスケープを使うというものです。この節の後半"
"では自動エスケープの仕組みについて述べます。"

msgid ""
"By default in Django, every template automatically escapes the output of "
"every variable tag. Specifically, these five characters are escaped:"
msgstr ""
"デフォルトでは、Django はすべてのテンプレートの変数タグの出力を自動的にエス"
"ケープするよう設定されています。具体的には、以下の 5 つの文字がエスケープされ"
"ます:"

msgid ""
"Again, we stress that this behavior is on by default. If you're using "
"Django's template system, you're protected."
msgstr ""
"この動作は、デフォルトで適用されていることを重ねて強調しておきます。Django テ"
"ンプレートシステムを使っているかぎり、あなたはエスケープに関する問題からは守"
"られているのです。"

msgid "How to turn it off"
msgstr "自動エスケープをオフにする"

msgid ""
"If you don't want data to be auto-escaped, on a per-site, per-template level "
"or per-variable level, you can turn it off in several ways."
msgstr ""
"サイト単位やテンプレート単位、あるいは変数単位でデータの自動エスケープ機能を"
"無効にしたい場合には、いくつかの方法があります。"

msgid ""
"Why would you want to turn it off? Because sometimes, template variables "
"contain data that you *intend* to be rendered as raw HTML, in which case you "
"don't want their contents to be escaped. For example, you might store a blob "
"of HTML in your database and want to embed that directly into your template. "
"Or, you might be using Django's template system to produce text that is "
"*not* HTML -- like an email message, for instance."
msgstr ""
"どんなときに、自動エスケープをオフにする必要があるでしょうか。テンプレート変"
"数の中身は、生の HTML として出力するように意図されたデータかもしれません。そ"
"うした場合にはコンテンツがエスケープされてほしくはないでしょう。たとえば、"
"データベースに HTML を保存していてテンプレートに直接埋め込みたい場合を考えて"
"みましょう。また、 Django のテンプレートシステムを使って、 HTML 以外 のデー"
"タ、たとえばメールのメッセージなどを生成したい場合もあるでしょう。"

msgid "For individual variables"
msgstr "変数単位での制御"

msgid ""
"To disable auto-escaping for an individual variable, use the :tfilter:`safe` "
"filter:"
msgstr ""
"個々の変数の自動エスケープを無効にするには :tfilter:`safe` フィルタを使用しま"
"す:"

msgid ""
"Think of *safe* as shorthand for *safe from further escaping* or *can be "
"safely interpreted as HTML*. In this example, if ``data`` contains "
"``'<b>'``, the output will be:"
msgstr ""
"*safe* という言葉は、これ以上エスケープしないよう保護 (safe) するとか、 HTML "
"として解釈しても安全 (safe) であるという意味だと考えてください。 たとえば、"
"``data`` に ``'<b>'`` が入っていた場合、出力は以下のようになります。"

msgid "For template blocks"
msgstr "テンプレートブロック単位での制御"

msgid ""
"To control auto-escaping for a template, wrap the template (or a particular "
"section of the template) in the :ttag:`autoescape` tag, like so:"
msgstr ""
"テンプレート単位で自動エスケープを制御するには、テンプレート (または テンプ"
"レートの一部) を、以下のように :ttag:`autoescape` タグで囲みます:"

msgid ""
"The :ttag:`autoescape` tag takes either ``on`` or ``off`` as its argument. "
"At times, you might want to force auto-escaping when it would otherwise be "
"disabled. Here is an example template:"
msgstr ""
":ttag:`autoescape` タグは、 ``on`` または ``off`` を引数にとります。 テンプ"
"レートのある範囲を自動エスケープし、さらにその一部で自動エスケープをオフにし"
"たい場合には、次のようにできます:"

msgid ""
"The auto-escaping tag passes its effect onto templates that extend the "
"current one as well as templates included via the :ttag:`include` tag, just "
"like all block tags. For example:"
msgstr ""
"自動エスケープのタグは、他のブロックタグと同様、タグを設定したテンプレートを"
"継承している他のテンプレートや、 :ttag:`include` で取り込んだテンプレートでも"
"有効です。次に例を示します。"

msgid "``base.html``"
msgstr "``base.html``"

msgid "``child.html``"
msgstr "``child.html``"

msgid ""
"Because auto-escaping is turned off in the base template, it will also be "
"turned off in the child template, resulting in the following rendered HTML "
"when the ``greeting`` variable contains the string ``<b>Hello!</b>``:"
msgstr ""
"ベースのテンプレートで自動エスケープが無効化されているので、子テンプレートで"
"も自動エスケープは無効化されます。結果として、 ``greeting`` 変数の値が "
"``<b>Hello!</b>`` のとき、以下の HTML が出力されます:"

msgid ""
"Generally, template authors don't need to worry about auto-escaping very "
"much. Developers on the Python side (people writing views and custom "
"filters) need to think about the cases in which data shouldn't be escaped, "
"and mark data appropriately, so things Just Work in the template."
msgstr ""
"一般に、テンプレートの作者は自動エスケープをあまり意識する必要はありません。 "
"データをエスケープすべきではない場合を考えたり、データを適切にマークし、テン"
"プレート上でうまく表示されるように考慮するのは、Python 側の開発者 (ビューやカ"
"スタムフィルタの開発者)であるべきです。"

msgid ""
"If you're creating a template that might be used in situations where you're "
"not sure whether auto-escaping is enabled, then add an :tfilter:`escape` "
"filter to any variable that needs escaping. When auto-escaping is on, "
"there's no danger of the :tfilter:`escape` filter *double-escaping* data -- "
"the :tfilter:`escape` filter does not affect auto-escaped variables."
msgstr ""
"もしあなたが作成しているテンプレートがどういった状況で使われるのか分からず、"
"自動エスケープが有効かどうかはっきりしない場合には、エスケープの必要な変数全"
"てに :tfilter:`escape` フィルタを追加してください。自動エスケープがオンの場"
"合、 :tfilter:`escape` フィルタがデータ を二重にエスケープするような危険性は"
"ありません。 :tfilter:`escape` フィルタは自動エスケープされた変数には影響しな"
"ません。"

msgid "String literals and automatic escaping"
msgstr "文字列リテラルと自動エスケープ"

msgid "As we mentioned earlier, filter arguments can be strings:"
msgstr "先に説明したように、フィルタの引数は文字列であってもかまいません:"

msgid ""
"All string literals are inserted **without** any automatic escaping into the "
"template -- they act as if they were all passed through the :tfilter:`safe` "
"filter. The reasoning behind this is that the template author is in control "
"of what goes into the string literal, so they can make sure the text is "
"correctly escaped when the template is written."
msgstr ""
"文字列リテラルは、すべて自動エスケープ **されずに** テンプレート内に挿入さ"
"れ、 :tfilter:`safe` フィルタを通過したかのように動作します。なぜなら、テンプ"
"レートの作者はその文字列リテラルに何が書かれているかは把握していますし、テン"
"プレートが書かれる時点でテキストが正しくエスケープされていることは確認できる"
"からです。"

msgid "This means you would write :"
msgstr "したがって、以下のようにテンプレートを書いてください:"

msgid "...rather than:"
msgstr "以下のようにはしないでください:"

msgid ""
"This doesn't affect what happens to data coming from the variable itself. "
"The variable's contents are still automatically escaped, if necessary, "
"because they're beyond the control of the template author."
msgstr ""
"この事が、変数自身に由来するデータに対して何かを引き起こす恐れはありません。 "
"変数の内容はテンプレート作者の管理外にあり、必要に応じて自動的にエスケープさ"
"れます。"

msgid "Accessing method calls"
msgstr "メソッドへのアクセス"

msgid ""
"Most method calls attached to objects are also available from within "
"templates. This means that templates have access to much more than just "
"class attributes (like field names) and variables passed in from views. For "
"example, the Django ORM provides the :ref:`\"entry_set\"<topics-db-queries-"
"related>` syntax for finding a collection of objects related on a foreign "
"key. Therefore, given a model called \"comment\" with a foreign key "
"relationship to a model called \"task\" you can loop through all comments "
"attached to a given task like this:"
msgstr ""
"オブジェクトに備わったほとんどのメソッドは、テンプレートの中からでも呼び出す"
"ことができます。これはテンプレートからアクセスできる対象は、単にクラスの属性 "
"(フィールド名のように) やビューを通した変数だけにはとどまらないということを意"
"味します。たとえば Django ORM は外部キーに関係するオブジェクトの集合を見つけ"
"るために :ref:`\"entry_set\"<topics-db-queries-related>` という構文を提供して"
"います。これによって、たとえば \"comment\" と呼ばれるモデルが外部キーで "
"\"task\" というモデルに関連づけられている場合、テンプレートは task モデルに添"
"えられたすべての comment に対して、以下のようにアクセスできます。"

msgid ""
"Similarly, :doc:`QuerySets</ref/models/querysets>` provide a ``count()`` "
"method to count the number of objects they contain. Therefore, you can "
"obtain a count of all comments related to the current task with:"
msgstr ""
"同じように、 :doc:`QuerySet </ref/models/querysets>` は、そこに含まれているオ"
"ブジェクトの個数を数えるため ``count()`` というメソッドを提供しています。これ"
"によって、 task と関連づけられた全てのコメントの数を取得することも出来ます:"

msgid ""
"You can also access methods you've explicitly defined on your own models:"
msgstr "モデル自身で明示的に定義したメソッドにもアクセスできます:"

msgid "``models.py``"
msgstr "``models.py``"

msgid "``template.html``"
msgstr "``template.html``"

msgid ""
"Because Django intentionally limits the amount of logic processing available "
"in the template language, it is not possible to pass arguments to method "
"calls accessed from within templates. Data should be calculated in views, "
"then passed to templates for display."
msgstr ""
"Django ではテンプレート内でのプログラム的な処理を意図的に制限しているため、テ"
"ンプレートからメソッドに引数を渡すことはできません。データはビューの中で計算"
"され、テンプレートへは表示のためだけに渡されるべきだからです。"

msgid "Custom tag and filter libraries"
msgstr "カスタムタグとカスタムフィルタのライブラリ"

msgid ""
"Certain applications provide custom tag and filter libraries. To access them "
"in a template, ensure the application is in :setting:`INSTALLED_APPS` (we'd "
"add ``'django.contrib.humanize'`` for this example), and then use the :ttag:"
"`load` tag in a template:"
msgstr ""
"アプリケーションによっては、カスタムのタグやフィルタライブラリを提供していま"
"す。これらをテンプレートで使いたい場合、そのアプリケーションが :setting:"
"`INSTALLED_APPS` に追加されていることを確認し (以下の例では ``'django."
"contrib.humanize'`` が追加されているものとします) 、そしてテンプレート側で :"
"ttag:`load` タグを使います:"

msgid ""
"In the above, the :ttag:`load` tag loads the ``humanize`` tag library, which "
"then makes the ``intcomma`` filter available for use. If you've enabled :mod:"
"`django.contrib.admindocs`, you can consult the documentation area in your "
"admin to find the list of custom libraries in your installation."
msgstr ""
"この例では、 :ttag:`load` タグは ``humanize`` という名前のタグライブラリを読"
"み込み、 ``intcomma`` フィルタを使えるようにしています。 :mod:`django."
"contrib.admindocs` が有効にされている場合、あなたの admin は現在インストール"
"されているアプリケーションのドキュメント文字列を参照してカスタムライブラリの"
"一覧を得ることができます。"

msgid ""
"The :ttag:`load` tag can take multiple library names, separated by spaces. "
"Example:"
msgstr ""
":ttag:`load` タグは複数のライブラリ名を同時に読み込めます。ライブラリ名はス"
"ペースで区切って下さい:"

msgid ""
"See :doc:`/howto/custom-template-tags` for information on writing your own "
"custom template libraries."
msgstr ""
"カスタムのテンプレートライブラリを作成する方法については、 :doc:`/howto/"
"custom-template-tags` を参照してください。"

msgid "Custom libraries and template inheritance"
msgstr "カスタムライブラリとテンプレートの継承"

msgid ""
"When you load a custom tag or filter library, the tags/filters are only made "
"available to the current template -- not any parent or child templates along "
"the template-inheritance path."
msgstr ""
"カスタムタグやフィルタライブラリをロードした場合、タグやフィルタは現在のテン"
"プレートだけで利用でき、テンプレート継承パスにおける親テンプレートや子テンプ"
"レートでは利用できません。"

msgid ""
"For example, if a template ``foo.html`` has ``{% load humanize %}``, a child "
"template (e.g., one that has ``{% extends \"foo.html\" %}``) will *not* have "
"access to the humanize template tags and filters. The child template is "
"responsible for its own ``{% load humanize %}``."
msgstr ""
"たとえば ``foo.html`` に ``{% load humanize %}`` というタグが入っていても、子"
"テンプレート ( ``{% extends \"foo.html\" %}`` を使っているテンプレート) で "
"humanize という名前のテンプレートタグやフィルタを使えるわけではありません。子"
"テンプレート側で対応するには独自に ``{% load humanize %}`` を入れる必要があり"
"ます。"

msgid "This is a feature for the sake of maintainability and sanity."
msgstr "これはメンテナンス性と健全性を高めるための仕様です。"

msgid ":doc:`The Templates Reference </ref/templates/index>`"
msgstr ":doc:`テンプレートのリファレンス </ref/templates/index>`"

msgid ""
"Covers built-in tags, built-in filters, using an alternative template "
"language, and more."
msgstr ""
"組み込みタグ、組み込みフィルタ、代替のテンプレート言語など多くをカバーしてい"
"ます。"

msgid "Unicode data"
msgstr "Unicode データ"

msgid "Django supports Unicode data everywhere."
msgstr "Django はどこでも Unicode データをサポートしています。"

msgid ""
"This document tells you what you need to know if you're writing applications "
"that use data or templates that are encoded in something other than ASCII."
msgstr ""
"この文書は、ASCII以外のエンコーディングでデータやテンプレートを使用するアプリ"
"ケーションを書く場合に、知っておくべきことを説明します。"

msgid "Creating the database"
msgstr "データベースの作成"

msgid ""
"Make sure your database is configured to be able to store arbitrary string "
"data. Normally, this means giving it an encoding of UTF-8 or UTF-16. If you "
"use a more restrictive encoding -- for example, latin1 (iso8859-1) -- you "
"won't be able to store certain characters in the database, and information "
"will be lost."
msgstr ""
"データベースが任意の文字列データを保存できるように設定されていることを確認し"
"てください。通常、これは UTF-8 または UTF-16 のエンコーディングを使用すること"
"を意味します。もっと制限のあるエンコーディング -- 例えば、latin1 (iso8859-1) "
"-- を使用する場合、特定の文字をデータベースに保存することができず、情報が失わ"
"れることになります。"

msgid ""
"MySQL users, refer to the `MySQL manual`_ for details on how to set or alter "
"the database character set encoding."
msgstr ""
"MySQLユーザーの場合、データベースの文字セットエンコーディングを設定または変更"
"する方法の詳細については、 `MySQL manual`_ を参照してください。"

msgid ""
"PostgreSQL users, refer to the `PostgreSQL manual`_ for details on creating "
"databases with the correct encoding."
msgstr ""
"PostgreSQL を使用している場合は、適切なエンコーディングでデータベースを作成す"
"るための詳細については、 `PostgreSQL manual`_ を参照してください。"

msgid ""
"Oracle users, refer to the `Oracle manual`_ for details on how to set "
"(`section 2`_) or alter (`section 11`_) the database character set encoding."
msgstr ""
"Oracle ユーザーは、データベースの文字セットエンコーディングを設定（ `section "
"2`_ ）する方法や変更（ `section 11`_ ）する方法の詳細については、 `Oracle "
"manual`_ を参照してください。"

msgid ""
"SQLite users, there is nothing you need to do. SQLite always uses UTF-8 for "
"internal encoding."
msgstr ""
"SQLite を使用しているユーザーは、何もする必要はありません。SQLite は常に "
"UTF-8 を内部エンコーディングに使用します。"

msgid ""
"All of Django's database backends automatically convert strings into the "
"appropriate encoding for talking to the database. They also automatically "
"convert strings retrieved from the database into strings. You don't even "
"need to tell Django what encoding your database uses: that is handled "
"transparently."
msgstr ""
"Djangoのデータベースバックエンドはすべて自動的に、データベースと通信するため"
"に適切なエンコーディングへ文字列を変換します。また、データベースから取得した"
"文字列も自動的に文字列に変換します。データベースが使用しているエンコーディン"
"グをDjangoに伝える必要はまったくありません。それは透過的に処理されます。"

msgid "For more, see the section \"The database API\" below."
msgstr ""
"詳細については、以下の「データベース API」セクションを参照してください。"

msgid "General string handling"
msgstr "一般的な文字列操作"

msgid ""
"Whenever you use strings with Django -- e.g., in database lookups, template "
"rendering or anywhere else -- you have two choices for encoding those "
"strings. You can use normal strings or bytestrings (starting with a 'b')."
msgstr ""
"Djangoを使用する際、例えば、データベース検索やテンプレートのレンダリングな"
"ど、どこでも、文字列に対して2つのエンコーディング選択肢があります。通常の文字"
"列を使用するか、バイト文字列（'b' で始まる）を使用できます。"

msgid ""
"A bytestring does not carry any information with it about its encoding. For "
"that reason, we have to make an assumption, and Django assumes that all "
"bytestrings are in UTF-8."
msgstr ""
"バイト文字列は、そのエンコーディングに関する情報を何も持っていません。そのた"
"め、我々は仮定を立てなければなりません。そして、Djangoはすべてのバイト文字列"
"がUTF-8であると仮定します。"

msgid ""
"If you pass a string to Django that has been encoded in some other format, "
"things will go wrong in interesting ways. Usually, Django will raise a "
"``UnicodeDecodeError`` at some point."
msgstr ""
"Django に他の形式でエンコードされた文字列を渡すと、興味深い方法で問題が発生し"
"ます。通常、いずれかのタイミングで Django は ``UnicodeDecodeError`` を発生さ"
"せます。"

msgid ""
"If your code only uses ASCII data, it's safe to use your normal strings, "
"passing them around at will, because ASCII is a subset of UTF-8."
msgstr ""
"コードが ASCII データのみを使用している場合、ASCII は UTF-8 のサブセットなの"
"で、通常の文字列を自由に使って渡すことが安全です。"

msgid ""
"Don't be fooled into thinking that if your :setting:`DEFAULT_CHARSET` "
"setting is set to something other than ``'utf-8'`` you can use that other "
"encoding in your bytestrings! :setting:`DEFAULT_CHARSET` only applies to the "
"strings generated as the result of template rendering (and email). Django "
"will always assume UTF-8 encoding for internal bytestrings. The reason for "
"this is that the :setting:`DEFAULT_CHARSET` setting is not actually under "
"your control (if you are the application developer). It's under the control "
"of the person installing and using your application -- and if that person "
"chooses a different setting, your code must still continue to work. Ergo, it "
"cannot rely on that setting."
msgstr ""
":setting:`DEFAULT_CHARSET` 設定を ``'utf-8'`` 以外に設定しているからといっ"
"て、バイト文字列でその他のエンコーディングを使用できると思わないでくださ"
"い！ :setting:`DEFAULT_CHARSET` は、テンプレートのレンダリング結果（および電"
"子メール）として生成された文字列にのみ適用されます。Django は、内部的なバイト"
"文字列については常に UTF-8 エンコーディングを想定します。その理由は、 :"
"setting:`DEFAULT_CHARSET` 設定が実際には（アプリケーション開発者であるあなた"
"の）制御下にないからです。それは、あなたのアプリケーションをインストールして"
"使用している人が制御しています ― そして、その人が異なる設定を選択した場合で"
"も、あなたのコードは引き続き動作しなければなりません。したがって、その設定に"
"依存することはできません。"

msgid ""
"In most cases when Django is dealing with strings, it will convert them to "
"strings before doing anything else. So, as a general rule, if you pass in a "
"bytestring, be prepared to receive a string back in the result."
msgstr ""
"Djangoが文字列を扱う場合、大抵の場合、何をするにもまずそれらを文字列に変換し"
"ます。従って、一般的なルールとして、バイト文字列を渡した場合は、結果として文"
"字列を受け取る準備をしておくべきです。"

msgid "Translated strings"
msgstr "翻訳された文字列"

msgid ""
"Aside from strings and bytestrings, there's a third type of string-like "
"object you may encounter when using Django. The framework's "
"internationalization features introduce the concept of a \"lazy "
"translation\" -- a string that has been marked as translated but whose "
"actual translation result isn't determined until the object is used in a "
"string. This feature is useful in cases where the translation locale is "
"unknown until the string is used, even though the string might have "
"originally been created when the code was first imported."
msgstr ""
"文字列やバイト文字列とは別に、Djangoを使用しているときに遭遇する可能性がある"
"文字列型のオブジェクトがもう一つあります。フレームワークの国際化機能は「遅延"
"翻訳（lazy な翻訳）」という概念を導入しています ― 翻訳済みとマークされている"
"が、オブジェクトが文字列として使用されるまで実際の翻訳結果が決定されない文字"
"列です。この機能は、文字列が最初に作成されたときにはコードがインポートされた"
"にもかかわらず、文字列が使用されるまで翻訳ロケールが不明な場合に便利です。"

msgid ""
"Normally, you won't have to worry about lazy translations. Just be aware "
"that if you examine an object and it claims to be a ``django.utils."
"functional.__proxy__`` object, it is a lazy translation. Calling ``str()`` "
"with the lazy translation as the argument will generate a string in the "
"current locale."
msgstr ""
"通常、遅延翻訳について心配する必要はありません。ただし、オブジェクトを調べた"
"ときに ``django.utils.functional.__proxy__`` オブジェクトであると表示される場"
"合は、それが遅延翻訳であることに注意してください。遅延翻訳を引数として "
"``str()`` を呼び出すと、現在のロケールの文字列が生成されます。"

msgid ""
"For more details about lazy translation objects, refer to the :doc:"
"`internationalization </topics/i18n/index>` documentation."
msgstr ""
"詳細については、 :doc:`国際化 </topics/i18n/index>` ドキュメントを参照してく"
"ださい。"

msgid "Useful utility functions"
msgstr "便利なユーティリティ関数"

msgid ""
"Because some string operations come up again and again, Django ships with a "
"few useful functions that should make working with string and bytestring "
"objects a bit easier."
msgstr ""
"いくつかの文字列操作は度々必要とされるため、Django には文字列やバイト文字列の"
"操作を少し簡単にする便利な関数がいくつか含まれています。"

msgid "Conversion functions"
msgstr "変換関数"

msgid ""
"The ``django.utils.encoding`` module contains a few functions that are handy "
"for converting back and forth between strings and bytestrings."
msgstr ""
"``django.utils.encoding`` モジュールには、文字列とバイト列との間で相互に変換"
"するために便利ないくつかの関数が含まれています。"

msgid ""
"``smart_str(s, encoding='utf-8', strings_only=False, errors='strict')`` "
"converts its input to a string. The ``encoding`` parameter specifies the "
"input encoding. (For example, Django uses this internally when processing "
"form input data, which might not be UTF-8 encoded.) The ``strings_only`` "
"parameter, if set to True, will result in Python numbers, booleans and "
"``None`` not being converted to a string (they keep their original types). "
"The ``errors`` parameter takes any of the values that are accepted by "
"Python's ``str()`` function for its error handling."
msgstr ""
"``smart_str(s, encoding='utf-8', strings_only=False, errors='strict')`` は、"
"その入力を文字列に変換します。 ``encoding`` パラメータは入力エンコーディング"
"を指定します（例えば、Djangoはこれを内部で使用して、UTF-8 エンコードされてい"
"ないかもしれないフォーム入力データを処理します）。 ``strings_only`` パラメー"
"タが True に設定されている場合、Python の数値、真偽値、そして ``None`` は文字"
"列に変換されずに元の型を保持します。 ``errors`` パラメータは、Python の "
"``str()`` 関数がエラーハンドリングに受け入れる値のいずれかを取ります。"

msgid ""
"``force_str(s, encoding='utf-8', strings_only=False, errors='strict')`` is "
"identical to ``smart_str()`` in almost all cases. The difference is when the "
"first argument is a :ref:`lazy translation <lazy-translations>` instance. "
"While ``smart_str()`` preserves lazy translations, ``force_str()`` forces "
"those objects to a string (causing the translation to occur). Normally, "
"you'll want to use ``smart_str()``. However, ``force_str()`` is useful in "
"template tags and filters that absolutely *must* have a string to work with, "
"not just something that can be converted to a string."
msgstr ""
"``force_str(s, encoding='utf-8', strings_only=False, errors='strict')`` は、"
"ほとんどの場合 ``smart_str()`` と同じです。違いは、最初の引数が :ref:`遅延翻"
"訳（Lazyな翻訳） <lazy-translations>` インスタンスである場合です。"
"``smart_str()`` は遅延翻訳を保持しますが、``force_str()`` はそれらのオブジェ"
"クトを文字列に強制します（翻訳が発生します）。通常は ``smart_str()`` を使用し"
"ますが、文字列に絶対に *変換する必要がある* テンプレートタグやフィルタには "
"``force_str()`` が役立ちます。"

msgid ""
"``smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict')`` is "
"essentially the opposite of ``smart_str()``. It forces the first argument to "
"a bytestring. The ``strings_only`` parameter has the same behavior as for "
"``smart_str()`` and ``force_str()``. This is slightly different semantics "
"from Python's builtin ``str()`` function, but the difference is needed in a "
"few places within Django's internals."
msgstr ""
"``smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict')`` は"
"基本的に ``smart_str()`` の反対です。第一引数をバイト文字列に強制します。 "
"``strings_only`` パラメータは、``smart_str()`` および ``force_str()`` と同じ"
"動作をします。これは Python の組み込み関数 ``str()`` とは少し異なる意味論です"
"が、Django の内部で必要とされるいくつかの場所での違いです。"

msgid ""
"Normally, you'll only need to use ``force_str()``. Call it as early as "
"possible on any input data that might be either a string or a bytestring, "
"and from then on, you can treat the result as always being a string."
msgstr ""
"通常、``force_str()`` を使用するだけで十分です。文字列またはバイト文字列の可"
"能性があるあらゆる入力データに対して、できるだけ早くそれを呼び出しましょう。"
"そうすることで、その結果を常に文字列として扱うことができます。"

msgid "URI and IRI handling"
msgstr "URI と IRI の処理"

msgid ""
"Web frameworks have to deal with URLs (which are a type of IRI). One "
"requirement of URLs is that they are encoded using only ASCII characters. "
"However, in an international environment, you might need to construct a URL "
"from an :rfc:`IRI <3987>` -- very loosely speaking, a :rfc:`URI <3986>` that "
"can contain Unicode characters. Use these functions for quoting and "
"converting an IRI to a URI:"
msgstr ""
"Web フレームワークは URL（IRI の一種）を扱う必要があります。URL の要件の1つ"
"は、ASCII 文字のみを使用してエンコードされることです。しかし、国際的な環境で"
"は、Unicode 文字を含むことができる :rfc:`IRI <3987>` から URL を構築する必要"
"があるかもしれません。IRI を URI に引用して変換するためには、これらの関数を使"
"用します。"

msgid ""
"The :func:`django.utils.encoding.iri_to_uri()` function, which implements "
"the conversion from IRI to URI as required by :rfc:`3987#section-3.1`."
msgstr ""
":func:`django.utils.encoding.iri_to_uri()` 関数は、:rfc:`3987#section-3.1` で"
"要求されるように、IRIからURIへの変換を実装しています。"

msgid ""
"The :func:`urllib.parse.quote` and :func:`urllib.parse.quote_plus` functions "
"from Python's standard library."
msgstr ""
"Python 標準ライブラリからの :func:`urllib.parse.quote` と :func:`urllib."
"parse.quote_plus` 関数。"

msgid ""
"These two groups of functions have slightly different purposes, and it's "
"important to keep them straight. Normally, you would use ``quote()`` on the "
"individual portions of the IRI or URI path so that any reserved characters "
"such as '&' or '%' are correctly encoded. Then, you apply ``iri_to_uri()`` "
"to the full IRI and it converts any non-ASCII characters to the correct "
"encoded values."
msgstr ""
"これら2つの関数のグループは、わずかに異なる目的があり、それらを区別することが"
"重要です。通常、\"&\" や \"%\" のような予約文字が正しくエンコードされるよう"
"に、IRI や URI パスの個々の部分に ``quote()`` を使用します。その後、完全な "
"IRI に ``iri_to_uri()`` を適用し、非 ASCII 文字を正しいエンコード値に変換しま"
"す。"

msgid ""
"Technically, it isn't correct to say that ``iri_to_uri()`` implements the "
"full algorithm in the IRI specification. It doesn't (yet) perform the "
"international domain name encoding portion of the algorithm."
msgstr ""
"技術的に言うと、``iri_to_uri()`` が IRI 仕様の完全なアルゴリズムを実装してい"
"ると言うのは正確ではありません。まだ、アルゴリズムの国際ドメイン名エンコー"
"ディング部分を実行していません。"

msgid ""
"The ``iri_to_uri()`` function will not change ASCII characters that are "
"otherwise permitted in a URL. So, for example, the character '%' is not "
"further encoded when passed to ``iri_to_uri()``. This means you can pass a "
"full URL to this function and it will not mess up the query string or "
"anything like that."
msgstr ""
"``iri_to_uri()`` 関数は、URL で許可されている ASCII 文字を変更しません。した"
"がって、例えば、文字 \"%\" は ``iri_to_uri()`` に渡されたときに、さらにエン"
"コードされることはありません。これは、完全な URL をこの関数に渡しても、クエリ"
"文字列やそれに類するものを台無しにすることはないという意味です。"

msgid "An example might clarify things here:"
msgstr "ここで例を挙げるとより理解しやすくなります:"

msgid ""
"If you look carefully, you can see that the portion that was generated by "
"``quote()`` in the second example was not double-quoted when passed to "
"``iri_to_uri()``. This is a very important and useful feature. It means that "
"you can construct your IRI without worrying about whether it contains non-"
"ASCII characters and then, right at the end, call ``iri_to_uri()`` on the "
"result."
msgstr ""
"よく見ると、2番目の例で ``quote()`` によって生成された部分が "
"``iri_to_uri()`` に渡された際に二重引用符で囲まれていないことがわかります。こ"
"れは非常に重要で便利な機能です。つまり、IRIを構築する際に、非ASCII文字が含ま"
"れているかどうかを心配せずに、最後になってから結果に対して ``iri_to_uri()`` "
"を呼び出すことができるということです。"

msgid ""
"Similarly, Django provides :func:`django.utils.encoding.uri_to_iri()` which "
"implements the conversion from URI to IRI as per :rfc:`3987#section-3.2`."
msgstr ""
"同様に、Djangoは :func:`django.utils.encoding.uri_to_iri()` を提供しており、"
"これは :rfc:`3987#section-3.2` に従ってURIからIRIへの変換を実装しています。"

msgid "An example to demonstrate:"
msgstr "デモンストレーションの例:"

msgid ""
"In the first example, the UTF-8 characters are unquoted. In the second, the "
"percent-encodings remain unchanged because they lie outside the valid UTF-8 "
"range or represent a reserved character."
msgstr ""
"最初の例では、UTF-8 の文字はクォートされていません。2番目の例では、パーセント"
"エンコーディングは、有効な UTF-8 の範囲外にあるか、予約された文字を表している"
"ため、変更されません。"

msgid ""
"Both ``iri_to_uri()`` and ``uri_to_iri()`` functions are idempotent, which "
"means the following is always true::"
msgstr ""
"``iri_to_uri()`` と ``uri_to_iri()`` 関数は冪等であり、つまり以下が常に真であ"
"ることを意味します。"

msgid ""
"So you can safely call it multiple times on the same URI/IRI without risking "
"double-quoting problems."
msgstr ""
"同じURI/IRIに対して複数回安全に呼び出すことができます。二重引用符の問題を気に"
"する必要はありません。"

msgid ""
"Because all strings are returned from the database as ``str`` objects, model "
"fields that are character based (CharField, TextField, URLField, etc.) will "
"contain Unicode values when Django retrieves data from the database. This is "
"*always* the case, even if the data could fit into an ASCII bytestring."
msgstr ""
"データベースから返される全ての文字列が ``str`` オブジェクトとして返されるた"
"め、文字ベースのモデルフィールド(CharField、TextField、URLField など)には、"
"Django がデータベースからデータを取得する際、Unicode の値が格納されます。これ"
"は、データが ASCII バイト文字列に収まる場合でも、 *常に* 当てはまります。"

msgid ""
"You can pass in bytestrings when creating a model or populating a field, and "
"Django will convert it to strings when it needs to."
msgstr ""
"モデルを作成する際やフィールドに値を設定する際にバイト文字列を渡すことがで"
"き、Django は必要に応じてそれを文字列に変換します。"

msgid "Taking care in ``get_absolute_url()``"
msgstr "``get_absolute_url()`` の注意事項"

msgid ""
"URLs can only contain ASCII characters. If you're constructing a URL from "
"pieces of data that might be non-ASCII, be careful to encode the results in "
"a way that is suitable for a URL. The :func:`~django.urls.reverse` function "
"handles this for you automatically."
msgstr ""
"URL は ASCII 文字のみを含むことができます。ASCII でないデータの断片から URL "
"を構築している場合は、URL に適した方法で結果をエンコードすることに注意してく"
"ださい。 :func:`~django.urls.reverse` 関数は、これを自動的に処理してくれま"
"す。"

msgid ""
"If you're constructing a URL manually (i.e., *not* using the ``reverse()`` "
"function), you'll need to take care of the encoding yourself. In this case, "
"use the ``iri_to_uri()`` and ``quote()`` functions that were documented "
"above_. For example::"
msgstr ""
"URL を手動で構築している場合（つまり、 ``reverse()`` 関数を *使用していない* "
"場合）、エンコーディングを自分で処理する必要があります。この場合、 above_ で"
"説明された ``iri_to_uri()`` 関数と ``quote()`` 関数を使用してください。例え"
"ば："

msgid ""
"This function returns a correctly encoded URL even if ``self.location`` is "
"something like \"Jack visited Paris & Orléans\". (In fact, the "
"``iri_to_uri()`` call isn't strictly necessary in the above example, because "
"all the non-ASCII characters would have been removed in quoting in the first "
"line.)"
msgstr ""
"この関数は、 ``self.location`` が \"Jack visited Paris & Orléans\" のようなも"
"のであっても、正しくエンコードされた URL を返します。（実際には、上記の例で"
"は ``iri_to_uri()`` 呼び出しは厳密には必要ありません。なぜなら、最初の行での"
"引用符によってすべての非 ASCII 文字が削除されていたからです。）"

msgid "Use strings when creating templates manually::"
msgstr "手動でテンプレートを作成する際には文字列を使用します："

msgid ""
"But the common case is to read templates from the filesystem. If your "
"template files are not stored with a UTF-8 encoding, adjust the :setting:"
"`TEMPLATES` setting. The built-in :py:mod:`~django.template.backends.django` "
"backend provides the ``'file_charset'`` option to change the encoding used "
"to read files from disk."
msgstr ""
"通常は、ファイルシステムからテンプレートを読み込むことが一般的です。テンプ"
"レートファイルが UTF-8 エンコーディングで保存されていない場合は、:setting:"
"`TEMPLATES` 設定を調整してください。組み込みの :py:mod:`~django.template."
"backends.django` バックエンドは、ディスクからファイルを読み込む際に使用するエ"
"ンコーディングを変更するための ``'file_charset'`` オプションを提供していま"
"す。"

msgid ""
"The :setting:`DEFAULT_CHARSET` setting controls the encoding of rendered "
"templates. This is set to UTF-8 by default."
msgstr ""
":setting:`DEFAULT_CHARSET` 設定は、レンダリングされたテンプレートのエンコー"
"ディングを制御します。これはデフォルトで UTF-8 に設定されています。"

msgid "Template tags and filters"
msgstr "テンプレートタグとフィルタ"

msgid ""
"A couple of tips to remember when writing your own template tags and filters:"
msgstr ""
"自分自身のテンプレートタグとフィルタを書く際に覚えておくべきヒントをいくつか"
"紹介します:"

msgid ""
"Always return strings from a template tag's ``render()`` method and from "
"template filters."
msgstr ""
"テンプレートタグの ``render()`` メソッドとテンプレートフィルタからは、常に文"
"字列を返してください。"

msgid ""
"Use ``force_str()`` in preference to ``smart_str()`` in these places. Tag "
"rendering and filter calls occur as the template is being rendered, so there "
"is no advantage to postponing the conversion of lazy translation objects "
"into strings. It's easier to work solely with strings at that point."
msgstr ""
"これらの場所では、``smart_str()`` よりも ``force_str()`` を優先して使用してく"
"ださい。タグのレンダリングとフィルタの呼び出しは、テンプレートがレンダリング"
"されている間に発生するため、遅延翻訳オブジェクトを文字列に変換することを遅ら"
"せる利点はありません。その時点で文字列のみを扱う方が簡単です。"

msgid "Files"
msgstr "ファイル"

msgid ""
"If you intend to allow users to upload files, you must ensure that the "
"environment used to run Django is configured to work with non-ASCII file "
"names. If your environment isn't configured correctly, you'll encounter "
"``UnicodeEncodeError`` exceptions when saving files with file names or "
"content that contains non-ASCII characters."
msgstr ""
"ユーザーにファイルのアップロードを許可するつもりであれば、Django を実行する環"
"境が非 ASCII ファイル名に対応しているよう設定する必要があります。環境が正しく"
"設定されていない場合、非 ASCII 文字を含むファイル名や内容のファイルを保存しよ"
"うとしたときに ``UnicodeEncodeError`` 例外に遭遇します。"

msgid ""
"Filesystem support for UTF-8 file names varies and might depend on the "
"environment. Check your current configuration in an interactive Python shell "
"by running::"
msgstr ""
"UTF-8ファイル名に対するファイルシステムのサポートは変わることがあり、環境に依"
"存する場合があります。現在の設定をインタラクティブなPythonシェルで確認するに"
"は、次のコマンドを実行してください："

msgid "This should output \"UTF-8\"."
msgstr "これは \"UTF-8\" と出力されます。"

msgid ""
"The ``LANG`` environment variable is responsible for setting the expected "
"encoding on Unix platforms. Consult the documentation for your operating "
"system and application server for the appropriate syntax and location to set "
"this variable. See the :doc:`/howto/deployment/wsgi/modwsgi` for examples."
msgstr ""
"``LANG`` 環境変数は、Unixプラットフォームにおいて予期されるエンコーディングを"
"設定する責任があります。この変数を設定する適切な構文と場所については、使用す"
"るオペレーティングシステムとアプリケーションサーバーのドキュメントを参照して"
"ください。例については、 :doc:`/howto/deployment/wsgi/modwsgi` を参照してくだ"
"さい。"

msgid ""
"In your development environment, you might need to add a setting to your ``~."
"bashrc`` analogous to:"
msgstr ""
"開発環境では、``~/.bashrc`` に次のような設定を追加する必要があるかもしれませ"
"ん。"

msgid "Form submission"
msgstr "フォームの送信"

msgid ""
"HTML form submission is a tricky area. There's no guarantee that the "
"submission will include encoding information, which means the framework "
"might have to guess at the encoding of submitted data."
msgstr ""
"HTML フォームの送信は、難しい領域です。送信がエンコーディング情報を含むとは限"
"らず、それはフレームワークが送信されたデータのエンコーディングを推測しなけれ"
"ばならないことを意味します。"

msgid ""
"Django adopts a \"lazy\" approach to decoding form data. The data in an "
"``HttpRequest`` object is only decoded when you access it. In fact, most of "
"the data is not decoded at all. Only the ``HttpRequest.GET`` and "
"``HttpRequest.POST`` data structures have any decoding applied to them. "
"Those two fields will return their members as Unicode data. All other "
"attributes and methods of ``HttpRequest`` return data exactly as it was "
"submitted by the client."
msgstr ""
"Djangoはフォームデータのデコードに対して「遅延」アプローチを採用しています。"
"``HttpRequest`` オブジェクト内のデータは、アクセスしたときにのみデコードされ"
"ます。実際には、ほとんどのデータはデコードされません。``HttpRequest.GET`` と "
"``HttpRequest.POST`` データ構造のみがデコードが適用されます。これら二つの"
"フィールドは、メンバーをUnicodeデータとして返します。``HttpRequest`` の他の属"
"性やメソッドは、クライアントによって送信されたデータをそのまま正確に返しま"
"す。"

msgid ""
"By default, the :setting:`DEFAULT_CHARSET` setting is used as the assumed "
"encoding for form data. If you need to change this for a particular form, "
"you can set the ``encoding`` attribute on an ``HttpRequest`` instance. For "
"example::"
msgstr ""
"デフォルトでは、 :setting:`DEFAULT_CHARSET` 設定がフォームデータの想定される"
"エンコーディングとして使用されます。特定のフォームに対してこれを変更する必要"
"がある場合は、 ``HttpRequest`` インスタンスの ``encoding`` 属性を設定できま"
"す。例えば："

msgid ""
"You can even change the encoding after having accessed ``request.GET`` or "
"``request.POST``, and all subsequent accesses will use the new encoding."
msgstr ""
"``request.GET`` や ``request.POST`` にアクセスした後であっても、エンコーディ"
"ングを変更することができ、以降のすべてのアクセスでは新しいエンコーディングが"
"使用されます。"

msgid ""
"Most developers won't need to worry about changing form encoding, but this "
"is a useful feature for applications that talk to legacy systems whose "
"encoding you cannot control."
msgstr ""
"ほとんどの開発者はフォームのエンコーディングを変更することを心配する必要はあ"
"りませんが、制御できないレガシーシステムと通信するアプリケーションにとって、"
"これは便利な機能です。"

msgid ""
"Django does not decode the data of file uploads, because that data is "
"normally treated as collections of bytes, rather than strings. Any automatic "
"decoding there would alter the meaning of the stream of bytes."
msgstr ""
"Django はファイルアップロードのデータをデコードしません。そのデータは通常、文"
"字列ではなくバイトのコレクションとして扱われるからです。そこでの自動デコード"
"は、バイトストリームの意味を変更してしまうでしょう。"

msgid "``django.urls`` utility functions"
msgstr "``django.urls`` ユーティリティ関数"

msgid ""
"If you need to use something similar to the :ttag:`url` template tag in your "
"code, Django provides the following function:"
msgstr ""
"コード内で :ttag:`url` テンプレートタグと似たような機能を使用する必要がある場"
"合、Django は次の関数を提供しています:"

msgid ""
"``viewname`` can be a :ref:`URL pattern name <naming-url-patterns>` or the "
"callable view object. For example, given the following ``url``::"
msgstr ""
"``viewname`` は :ref:`URL パターン名 <naming-url-patterns>` または呼び出し可"
"能なビューオブジェクトのいずれかを指定できます。例えば、以下の ``url`` を見て"
"ください:"

msgid "you can use any of the following to reverse the URL::"
msgstr "URL を逆引きするために、以下の方法を使用できます："

msgid ""
"If the URL accepts arguments, you may pass them in ``args``. For example::"
msgstr ""
"URLが引数を受け入れる場合は、 ``args`` にそれらを渡すことができます。例えば："

msgid "You can also pass ``kwargs`` instead of ``args``. For example:"
msgstr "``kwargs`` を ``args`` の代わりに渡すこともできます。例えば："

msgid ""
"``args`` and ``kwargs`` cannot be passed to ``reverse()`` at the same time."
msgstr "``args`` と ``kwargs`` を同時に ``reverse()`` に渡すことはできません。"

msgid ""
"If no match can be made, ``reverse()`` raises a :class:`~django.urls."
"NoReverseMatch` exception."
msgstr ""
"一致するものが見つからない場合、``reverse()`` は :class:`~django.urls."
"NoReverseMatch` 例外を発生させます。"

msgid ""
"The ``reverse()`` function can reverse a large variety of regular expression "
"patterns for URLs, but not every possible one. The main restriction at the "
"moment is that the pattern cannot contain alternative choices using the "
"vertical bar (``\"|\"``) character. You can quite happily use such patterns "
"for matching against incoming URLs and sending them off to views, but you "
"cannot reverse such patterns."
msgstr ""
"``reverse()`` 関数は、URLの正規表現パターンの多くを逆引きできますが、すべてを"
"逆引きできるわけではありません。現時点での主な制限は、パターンに垂直バー "
"``(“|”)`` 文字を使用して選択肢を含めることができないということです。そのよう"
"なパターンを使用して受信URLに対してマッチングし、それらをビューに送ることは問"
"題なく行えますが、そのようなパターンを逆引きすることはできません。"

msgid ""
"The ``current_app`` argument allows you to provide a hint to the resolver "
"indicating the application to which the currently executing view belongs. "
"This ``current_app`` argument is used as a hint to resolve application "
"namespaces into URLs on specific application instances, according to the :"
"ref:`namespaced URL resolution strategy <topics-http-reversing-url-"
"namespaces>`."
msgstr ""
"``current_app`` 引数は、現在実行中のビューが属しているアプリケーションを指示"
"するヒントをリゾルバに提供することを可能にします。この ``current_app`` 引数"
"は、特定のアプリケーションインスタンス上のURLに対してアプリケーションの名前空"
"間を解決するためのヒントとして使用されます。これは、 :ref:`名前空間化された "
"URL の解決順序 <topics-http-reversing-url-namespaces>` に従っています。"

msgid ""
"The ``urlconf`` argument is the URLconf module containing the URL patterns "
"to use for reversing. By default, the root URLconf for the current thread is "
"used."
msgstr ""
"``urlconf`` 引数は、リバースに使用する URL パターンを含む URLconf モジュール"
"です。デフォルトでは、現在のスレッドのルート URLconf が使用されます。"

msgid ""
"The string returned by ``reverse()`` is already :ref:`urlquoted <uri-and-iri-"
"handling>`. For example:"
msgstr ""
"``reverse()`` によって返される文字列は、すでに :ref:`URL エンコードされていま"
"す <uri-and-iri-handling>` 。例えば："

msgid ""
"Applying further encoding (such as :func:`urllib.parse.quote`) to the output "
"of ``reverse()`` may produce undesirable results."
msgstr ""
"``reverse()`` の出力に対してさらにエンコーディング（例えば :func:`urllib."
"parse.quote` など）を適用すると、望ましくない結果が生じることがあります。"

msgid "``reverse_lazy()``"
msgstr "``reverse_lazy()``"

msgid "A lazily evaluated version of `reverse()`_."
msgstr "`reverse()`_ の遅延評価バージョンです。"

msgid ""
"It is useful for when you need to use a URL reversal before your project's "
"URLConf is loaded. Some common cases where this function is necessary are:"
msgstr ""
"プロジェクトの URLConf がロードされる前に、URL 反転を使用する必要がある場合に"
"役立ちます。この関数が必要となる一般的なケースには以下のようなものがありま"
"す："

msgid ""
"providing a reversed URL as the ``url`` attribute of a generic class-based "
"view."
msgstr ""
"クラスベースのジェネリックビューの ``url`` 属性に逆引きURLを提供する場合。"

msgid ""
"providing a reversed URL to a decorator (such as the ``login_url`` argument "
"for the :func:`django.contrib.auth.decorators.permission_required` "
"decorator)."
msgstr ""
"デコレータ（たとえば :func:`django.contrib.auth.decorators."
"permission_required` デコレータの ``login_url`` 引数など）への URL の逆引きを"
"提供する場合。"

msgid ""
"providing a reversed URL as a default value for a parameter in a function's "
"signature."
msgstr ""
"関数のシグネチャでパラメータのデフォルト値として逆引きURLを提供する場合。"

msgid "``resolve()``"
msgstr "``resolve()``"

msgid ""
"The ``resolve()`` function can be used for resolving URL paths to the "
"corresponding view functions. It has the following signature:"
msgstr ""
"``resolve()`` 関数は、URL パスを対応するビュー関数に解決するために使用できま"
"す。次のシグネチャを持っています:"

msgid ""
"``path`` is the URL path you want to resolve. As with :func:`~django.urls."
"reverse`, you don't need to worry about the ``urlconf`` parameter. The "
"function returns a :class:`ResolverMatch` object that allows you to access "
"various metadata about the resolved URL."
msgstr ""
"``path`` は解決したい URL パスです。 :func:`~django.urls.reverse` と同じよう"
"に、 ``urlconf`` パラメータについて心配する必要はありません。この関数は、解決"
"された URL に関するさまざまなメタデータにアクセスを許可する :class:"
"`ResolverMatch` オブジェクトを返します。"

msgid ""
"If the URL does not resolve, the function raises a :exc:`~django.urls."
"Resolver404` exception (a subclass of :class:`~django.http.Http404`) ."
msgstr ""
"URL が解決しない場合、その関数は :exc:`~django.urls.Resolver404` 例外を発生さ"
"せます（ :class:`~django.http.Http404` のサブクラスです）。"

msgid "The view function that would be used to serve the URL"
msgstr "URL を提供するために使用されるビュー関数"

msgid ""
"The arguments that would be passed to the view function, as parsed from the "
"URL."
msgstr "URL からパースされた、ビュー関数に渡される引数。"

msgid ""
"All keyword arguments that would be passed to the view function, i.e. :attr:"
"`~ResolverMatch.captured_kwargs` and :attr:`~ResolverMatch.extra_kwargs`."
msgstr ""
"ビュー関数に渡されるであろうすべてのキーワード引数、すなわち :attr:"
"`~ResolverMatch.captured_kwargs` と :attr:`~ResolverMatch.extra_kwargs` で"
"す。"

msgid ""
"The captured keyword arguments that would be passed to the view function, as "
"parsed from the URL."
msgstr ""
"URL から解析された、ビュー関数に渡されるキーワード引数がキャプチャされます。"

msgid ""
"The additional keyword arguments that would be passed to the view function."
msgstr "ビュー関数に渡される追加のキーワード引数。"

msgid "The name of the URL pattern that matches the URL."
msgstr "URL に一致する URL パターンの名前。"

msgid "The route of the matching URL pattern."
msgstr "一致するURLパターンのルート。"

msgid ""
"For example, if ``path('users/<id>/', ...)`` is the matching pattern, "
"``route`` will contain ``'users/<id>/'``."
msgstr ""
"例えば、``path('users/<id>/', ...)`` がマッチするパターンである場合、 "
"``route`` には ``'users/<id>/'`` が含まれます。"

msgid ""
"The list of URL patterns tried before the URL either matched one or "
"exhausted available patterns."
msgstr ""
"URL が一致するか利用可能なパターンが尽きる前に試みられた URL パターンのリスト"
"です。"

msgid "The application namespace for the URL pattern that matches the URL."
msgstr "URLに一致するURLパターンのアプリケーション名前空間です。"

msgid ""
"The list of individual namespace components in the full application "
"namespace for the URL pattern that matches the URL. For example, if the "
"``app_name`` is ``'foo:bar'``, then ``app_names`` will be ``['foo', 'bar']``."
msgstr ""
"URL にマッチする URL パターンの完全なアプリケーション名前空間内の個別の名前空"
"間コンポーネントのリストです。例えば、もし ``app_name`` が ``'foo:bar'`` であ"
"る場合、``app_names`` は ``['foo', 'bar']`` になります。"

msgid "The instance namespace for the URL pattern that matches the URL."
msgstr "対応するURLのURLパターンのインスタンス名前空間。"

msgid ""
"The list of individual namespace components in the full instance namespace "
"for the URL pattern that matches the URL. i.e., if the namespace is ``foo:"
"bar``, then namespaces will be ``['foo', 'bar']``."
msgstr ""
"URL がマッチする URL パターンの完全なインスタンス名前空間内の個々の名前空間コ"
"ンポーネントのリストです。つまり、名前空間が ``foo:bar`` である場合、"
"namespaces は ``['foo', 'bar']`` になります。"

msgid ""
"The name of the view that matches the URL, including the namespace if there "
"is one."
msgstr ""
"URL にマッチするビューの名前で、名前空間が存在する場合はその名前空間を含みま"
"す。"

msgid ""
"A :class:`ResolverMatch` object can then be interrogated to provide "
"information about the URL pattern that matches a URL::"
msgstr ""
"その後、 :class:`ResolverMatch` オブジェクトを調査して、URL に一致する URL パ"
"ターンに関する情報を提供できます。"

msgid "A :class:`ResolverMatch` object can also be assigned to a triple::"
msgstr ""
":class:`ResolverMatch` オブジェクトは、3値タプルに代入することもできます:"

msgid ""
"One possible use of :func:`~django.urls.resolve` would be to test whether a "
"view would raise a ``Http404`` error before redirecting to it::"
msgstr ""
":func:`~django.urls.resolve` の可能な使用例の一つは、リダイレクトする前に"
"ビューが ``Http404`` エラーを発生させるかどうかをテストすることです。"

msgid "``get_script_prefix()``"
msgstr "``get_script_prefix()``"

msgid ""
"Normally, you should always use :func:`~django.urls.reverse` to define URLs "
"within your application. However, if your application constructs part of the "
"URL hierarchy itself, you may occasionally need to generate URLs. In that "
"case, you need to be able to find the base URL of the Django project within "
"its web server (normally, :func:`~django.urls.reverse` takes care of this "
"for you). In that case, you can call ``get_script_prefix()``, which will "
"return the script prefix portion of the URL for your Django project. If your "
"Django project is at the root of its web server, this is always ``\"/\"``."
msgstr ""
"通常、アプリケーション内でURLを定義する際には、常に :func:`~django.urls."
"reverse` を使用すべきです。しかし、アプリケーションがURL階層の一部を自身で構"
"築する場合、時々URLを生成する必要があります。その場合、Djangoプロジェクトの"
"ベースURLをそのWebサーバー内で見つける必要があります（通常、 :func:`~django."
"urls.reverse` がこれを処理します）。そのような場合、 ``get_script_prefix()`` "
"を呼び出すことができます。これは、DjangoプロジェクトのURLのスクリプトプレ"
"フィックス部分を返します。あなたのDjangoプロジェクトがWebサーバーのルートにあ"
"る場合、これは常に ``\"/\"`` です。"

msgid ""
"This function **cannot** be used outside of the request-response cycle since "
"it relies on values initialized during that cycle."
msgstr ""
"この関数は、リクエスト・レスポンスサイクル中に初期化された値に依存しているた"
"め、そのサイクルの外部では **使用できません** 。"

msgid "``django.urls`` functions for use in URLconfs"
msgstr "URLconf で使用するための ``django.urls`` 関数"

msgid "``path()``"
msgstr "``path()``"

msgid "Returns an element for inclusion in ``urlpatterns``. For example::"
msgstr "``urlpatterns`` に含める要素を返します。例えば："

msgid ""
"The ``route`` argument should be a string or :func:`~django.utils."
"translation.gettext_lazy()` (see :ref:`translating-urlpatterns`) that "
"contains a URL pattern. The string may contain angle brackets (like "
"``<username>`` above) to capture part of the URL and send it as a keyword "
"argument to the view. The angle brackets may include a converter "
"specification (like the ``int`` part of ``<int:section>``) which limits the "
"characters matched and may also change the type of the variable passed to "
"the view. For example, ``<int:section>`` matches a string of decimal digits "
"and converts the value to an ``int``. See :ref:`how-django-processes-a-"
"request` for more details."
msgstr ""
"``route`` 引数は、URL パターンを含む文字列、または :func:`~django.utils."
"translation.gettext_lazy()` ( :ref:`translating-urlpatterns` を参照) であるべ"
"きです。この文字列には、角括弧を使用して URL の一部をキャプチャし (上記の "
"``<username>`` のように)、それをキーワード引数としてビューに送ることができま"
"す。角括弧には、一致する文字を制限し、ビューに渡される変数の型を変更すること"
"もできるコンバータ指定 (``<int:section>`` の ``int`` 部分のような) を含めるこ"
"とができます。例えば、 ``<int:section>`` は十進数の文字列に一致し、値を "
"``int`` に変換します。さらに詳しくは :ref:`how-django-processes-a-request` を"
"参照してください。"

msgid ""
"The ``view`` argument is a view function or the result of :meth:`~django."
"views.generic.base.View.as_view` for class-based views. It can also be an :"
"func:`django.urls.include`."
msgstr ""
"``view`` 引数は、ビュー関数またはクラスベースのビューにおける  :meth:"
"`~django.views.generic.base.View.as_view` の結果です。また、 :func:`django."
"urls.include` であることあります。"

msgid ""
"The ``kwargs`` argument allows you to pass additional arguments to the view "
"function or method. See :ref:`views-extra-options` for an example."
msgstr ""
"``kwargs`` 引数を使用すると、ビュー関数またはメソッドに追加の引数を渡すことが"
"できます。例については、:ref:`views-extra-options` を参照してください。"

msgid ""
"See :ref:`Naming URL patterns <naming-url-patterns>` for why the ``name`` "
"argument is useful."
msgstr ""
"``name`` 引数が有用な理由については、:ref:`URL パターンの命名 <naming-url-"
"patterns>` を参照してください。"

msgid "``re_path()``"
msgstr "``re_path()``"

msgid ""
"The ``route`` argument should be a string or :func:`~django.utils."
"translation.gettext_lazy()` (see :ref:`translating-urlpatterns`) that "
"contains a regular expression compatible with Python's :py:mod:`re` module. "
"Strings typically use raw string syntax (``r''``) so that they can contain "
"sequences like ``\\d`` without the need to escape the backslash with another "
"backslash. When a match is made, captured groups from the regular expression "
"are passed to the view -- as named arguments if the groups are named, and as "
"positional arguments otherwise. The values are passed as strings, without "
"any type conversion."
msgstr ""
"``route`` 引数は、Python の :py:mod:`re` モジュールと互換性のある正規表現を含"
"む、文字列または :func:`~django.utils.translation.gettext_lazy()` ( :ref:"
"`translating-urlpatterns` を参照) でなければなりません。文字列では通常、生文"
"字列の構文 (``r''``) を使用して、``\\d`` のようなシーケンスを含むことができる"
"ように、バックスラッシュを別のバックスラッシュでエスケープする必要がないよう"
"にします。一致が見つかった場合、正規表現からキャプチャされたグループがビュー"
"に渡されます ―― グループに名前がある場合は名前付き引数として、それ以外の場合"
"は位置引数としてです。値は文字列として渡され、型変換は行われません。"

msgid ""
"When a ``route`` ends with ``$`` the whole requested URL, matching against :"
"attr:`~django.http.HttpRequest.path_info`, must match the regular expression "
"pattern (:py:func:`re.fullmatch` is used)."
msgstr ""
"``route`` が ``$`` で終わる場合、リクエストされた全 URL が正規表現パターンと"
"一致する必要があります（:py:func:`re.fullmatch` が使用されます）。これは :"
"attr:`~django.http.HttpRequest.path_info` に対してマッチングされます。"

msgid ""
"The ``view``, ``kwargs`` and ``name`` arguments are the same as for :func:"
"`~django.urls.path()`."
msgstr ""
"``view`` 、 ``kwargs`` 、そして ``name`` 引数は :func:`~django.urls.path()` "
"におけるものと同じです。"

msgid ""
"In older versions, a full-match wasn't required for a ``route`` which ends "
"with ``$``."
msgstr ""
"古いバージョンでは、``$`` で終わる ``route`` に完全一致が必要ではありませんで"
"した。"

msgid "``include()``"
msgstr "``include()``"

msgid ""
"A function that takes a full Python import path to another URLconf module "
"that should be \"included\" in this place. Optionally, the :term:"
"`application namespace` and :term:`instance namespace` where the entries "
"will be included into can also be specified."
msgstr ""
"この場所に \"含める\" べき他のURLconfモジュールへのフルPythonインポートパスを"
"取る関数です。オプションで、エントリが含まれる :term:`application namespace` "
"と :term:`instance namespace` も指定できます。"

msgid ""
"Usually, the application namespace should be specified by the included "
"module. If an application namespace is set, the ``namespace`` argument can "
"be used to set a different instance namespace."
msgstr ""
"通常、アプリケーションの名前空間は、include されたモジュールによって指定され"
"るべきです。アプリケーションの名前空間が設定されている場合、 ``namespace`` 引"
"数を使用して異なるインスタンスの名前空間を設定できます。"

msgid ""
"``include()`` also accepts as an argument either an iterable that returns "
"URL patterns or a 2-tuple containing such iterable plus the names of the "
"application namespaces."
msgstr ""
"``include()`` は、URL パターンを返すイテレータ、またはそのようなイテレータに"
"加えてアプリケーションの名前空間の名前を含む 2値タプルを引数として受け入れる"
"こともできます。"

msgid "URLconf module (or module name)"
msgstr "URLconf モジュール（またはモジュール名）"

msgid "Instance namespace for the URL entries being included"
msgstr "インクルードされる URL エントリのインスタンス名前空間"

msgid ""
"Iterable of :func:`~django.urls.path` and/or :func:`~django.urls.re_path` "
"instances."
msgstr ""
":func:`~django.urls.path` および/または :func:`~django.urls.re_path` のインス"
"タンスのイテラブル。"

msgid "Application namespace for the URL entries being included"
msgstr "include される URL エントリのアプリケーション名前空間"

msgid "See :ref:`including-other-urlconfs` and :ref:`namespaces-and-include`."
msgstr ""
":ref:`including-other-urlconfs` および :ref:`namespaces-and-include` を参照し"
"てください。"

msgid "``register_converter()``"
msgstr "``register_converter()``"

msgid ""
"The function for registering a converter for use in :func:`~django.urls."
"path()` ``route``\\s."
msgstr ""
":func:`~django.urls.path()` の ``route`` に使用するためのコンバータを登録する"
"ための関数です。"

msgid ""
"The ``converter`` argument is a converter class, and ``type_name`` is the "
"converter name to use in path patterns. See :ref:`registering-custom-path-"
"converters` for an example."
msgstr ""
"``converter`` 引数はコンバータークラスであり、 ``type_name`` はパスパターンで"
"使用するコンバーター名です。例については :ref:`registering-custom-path-"
"converters` を参照してください。"

msgid "``django.conf.urls`` functions for use in URLconfs"
msgstr "URLconf で使用するための ``django.conf.urls`` の関数"

msgid "``static()``"
msgstr "``static()``"

msgid ""
"Helper function to return a URL pattern for serving files in debug mode::"
msgstr ""
"デバッグモードでファイルを配信するための URL パターンを返すヘルパー関数です:"

msgid "``handler400``"
msgstr "``handler400``"

msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if the HTTP client has sent a request that caused an "
"error condition and a response with a status code of 400."
msgstr ""
"呼び出し可能オブジェクト、またはエラー状態を引き起こし、ステータスコードが400"
"のレスポンスを送信した場合に呼び出されるべきビューへの完全なPythonインポート"
"パスを表す文字列です。 HTTPクライアントがリクエストを送信した場合に該当しま"
"す。"

msgid ""
"By default, this is :func:`django.views.defaults.bad_request`. If you "
"implement a custom view, be sure it accepts ``request`` and ``exception`` "
"arguments and returns an :class:`~django.http.HttpResponseBadRequest`."
msgstr ""
"デフォルトでは、これは :func:`django.views.defaults.bad_request` です。カスタ"
"ムビューを実装する場合は、``request`` および ``exception`` 引数を受け入れ、 :"
"class:`~django.http.HttpResponseBadRequest` を返すことを確認してください。"

msgid "``handler403``"
msgstr "``handler403``"

msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if the user doesn't have the permissions required to "
"access a resource."
msgstr ""
"呼び出し可能オブジェクト、またはユーザーがリソースへのアクセスに必要な権限を"
"持っていない場合に呼び出されるべきビューの完全な Python インポートパスを表す"
"文字列。"

msgid ""
"By default, this is :func:`django.views.defaults.permission_denied`. If you "
"implement a custom view, be sure it accepts ``request`` and ``exception`` "
"arguments and returns an :class:`~django.http.HttpResponseForbidden`."
msgstr ""
"デフォルトでは、これは :func:`django.views.defaults.permission_denied` です。"
"カスタムビューを実装する場合には、``request`` と ``exception`` 引数を受け入"
"れ、 :class:`~django.http.HttpResponseForbidden` を返すことを確認してくださ"
"い。"

msgid "``handler404``"
msgstr "``handler404``"

msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if none of the URL patterns match."
msgstr ""
"呼び出し可能オブジェクト、もしくは、URL パターンに一致するものがない場合に呼"
"び出されるべきビューへの完全な Python インポートパスを表す文字列。"

msgid ""
"By default, this is :func:`django.views.defaults.page_not_found`. If you "
"implement a custom view, be sure it accepts ``request`` and ``exception`` "
"arguments and returns an :class:`~django.http.HttpResponseNotFound`."
msgstr ""
"デフォルトでは、これは :func:`django.views.defaults.page_not_found` です。カ"
"スタムビューを実装する場合は、``request`` と ``exception`` 引数を受け取り、:"
"class:`~django.http.HttpResponseNotFound` を返すようにしてください。"

msgid "``handler500``"
msgstr "``handler500``"

msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called in case of server errors. Server errors happen when "
"you have runtime errors in view code."
msgstr ""
"呼び出し可能オブジェクト、もしくはサーバーエラーが発生した場合に呼び出される"
"べきビューを完全なPythonインポートパスで表した文字列です。サーバーエラーは、"
"ビューコード内で実行時エラーが発生した時に起こります。"

msgid ""
"By default, this is :func:`django.views.defaults.server_error`. If you "
"implement a custom view, be sure it accepts a ``request`` argument and "
"returns an :class:`~django.http.HttpResponseServerError`."
msgstr ""
"デフォルトでは、これは :func:`django.views.defaults.server_error` です。独自"
"のビューを実装する場合は、``request`` 引数を受け取り、 :class:`~django.http."
"HttpResponseServerError` を返すことを確認してください。"

msgid "Django Utils"
msgstr "Django ユーティリティ (``django.utils``)"

msgid ""
"This document covers all stable modules in ``django.utils``. Most of the "
"modules in ``django.utils`` are designed for internal use and only the "
"following parts can be considered stable and thus backwards compatible as "
"per the :ref:`internal release deprecation policy <internal-release-"
"deprecation-policy>`."
msgstr ""
"このドキュメントは、``django.utils`` のすべての安定したモジュールを対象として"
"います。``django.utils`` 内のほとんどのモジュールは内部使用を目的としているこ"
"とから、 :ref:`内部リリース非推奨ポリシー <internal-release-deprecation-"
"policy>` に従い、以下に記載する内容のみが 安定版として提供され、また後方互換"
"性を維持しています。"

msgid "``django.utils.cache``"
msgstr "``django.utils.cache``"

msgid ""
"This module contains helper functions for controlling HTTP caching. It does "
"so by managing the ``Vary`` header of responses. It includes functions to "
"patch the header of response objects directly and decorators that change "
"functions to do that header-patching themselves."
msgstr ""
"このモジュールには、HTTPキャッシュの制御を補助するための関数が含まれていま"
"す。これは、レスポンスの ``Vary`` ヘッダーを管理することによって行います。レ"
"スポンスオブジェクトのヘッダーを直接パッチするための関数や、そのヘッダーパッ"
"チを行うためのデコレータも含まれています。"

msgid "For information on the ``Vary`` header, see :rfc:`9110#section-12.5.5`."
msgstr ""
"``Vary`` ヘッダーについての詳細は、 :rfc:`9110#section-12.5.5` を参照してくだ"
"さい。"

msgid ""
"Essentially, the ``Vary`` HTTP header defines which headers a cache should "
"take into account when building its cache key. Requests with the same path "
"but different header content for headers named in ``Vary`` need to get "
"different cache keys to prevent delivery of wrong content."
msgstr ""
"基本的に、 ``Vary`` HTTPヘッダーは、キャッシュがキャッシュキーを構築する際に"
"考慮すべきヘッダーを定義します。同一パスのリクエストであっても、 ``Vary`` で"
"指定されたヘッダーの内容が異なる場合は、誤ったコンテンツの配信を防ぐために異"
"なるキャッシュキーを取得する必要があります。"

msgid ""
"For example, :doc:`internationalization </topics/i18n/index>` middleware "
"would need to distinguish caches by the ``Accept-language`` header."
msgstr ""
"たとえば、:doc:`国際化のためのミドルウェア </topics/i18n/index>` は、"
"``Accept-language`` ヘッダーによってキャッシュを区別するようにしています。"

msgid ""
"This function patches the ``Cache-Control`` header by adding all keyword "
"arguments to it. The transformation is as follows:"
msgstr ""
"この関数は、キーワード引数を ``Cache-Control`` ヘッダーに追加することで、ヘッ"
"ダーをパッチします。変換する内容は以下の通りです。"

msgid ""
"All keyword parameter names are turned to lowercase, and underscores are "
"converted to hyphens."
msgstr ""
"すべてのキーワードパラメータ名を小文字に変換し、アンダースコアをハイフンに変"
"換する"

msgid ""
"If the value of a parameter is ``True`` (exactly ``True``, not just a true "
"value), only the parameter name is added to the header."
msgstr ""
"パラメータの値が ``True`` （実質的な真の値ではなく、正確に ``True`` ）である"
"場合、ヘッダーにはパラメータ名のみを追加する"

msgid ""
"All other parameters are added with their value, after applying ``str()`` to "
"it."
msgstr "すべての他のパラメータは、その値に ``str()`` を適用した後に追加する"

msgid ""
"Returns the max-age from the response Cache-Control header as an integer (or "
"``None`` if it wasn't found or wasn't an integer)."
msgstr ""
"レスポンスのCache-Controlヘッダーから max-age を整数として返します（見つから"
"なかった場合や整数でなかった場合は ``None`` を返します）。"

msgid "Adds some useful headers to the given ``HttpResponse`` object:"
msgstr ""
"与えられた ``HttpResponse`` オブジェクトに以下のような便利なヘッダーを追加し"
"ます。"

msgid "``Expires``"
msgstr "``Expires``"

msgid "``Cache-Control``"
msgstr "``Cache-Control``"

msgid "Each header is only added if it isn't already set."
msgstr "それぞれのヘッダーは、未設定の場合にのみ追加されます。"

msgid ""
"``cache_timeout`` is in seconds. The :setting:`CACHE_MIDDLEWARE_SECONDS` "
"setting is used by default."
msgstr ""
"``cache_timeout`` は秒単位で指定します。デフォルトでは、 :setting:"
"`CACHE_MIDDLEWARE_SECONDS` の値が使用されます。"

msgid "Adds an ``Expires`` header to the current date/time."
msgstr "``Expires`` ヘッダーを現在の日付/時刻で設定します。"

msgid ""
"Adds a ``Cache-Control: max-age=0, no-cache, no-store, must-revalidate, "
"private`` header to a response to indicate that a page should never be "
"cached."
msgstr ""
"``Cache-Control: max-age=0, no-cache, no-store, must-revalidate, private`` "
"ヘッダーをレスポンスに追加し、ページがキャッシュされないように設定します。"

msgid ""
"Adds (or updates) the ``Vary`` header in the given ``HttpResponse`` object. "
"``newheaders`` is a list of header names that should be in ``Vary``. If "
"headers contains an asterisk, then ``Vary`` header will consist of a single "
"asterisk ``'*'``, according to :rfc:`9110#section-12.5.5`. Otherwise, "
"existing headers in ``Vary`` aren't removed."
msgstr ""
"与えられた ``HttpResponse`` オブジェクトに、 ``Vary`` ヘッダーを追加（または"
"更新）します。 ``newheaders`` は、``Vary`` に含まれるべきヘッダー名のリストで"
"す。ヘッダーにアスタリスクが含まれている場合、 :rfc:`9110#section-12.5.5` に"
"従い  ``Vary`` ヘッダーは単一のアスタリスク ``'*'`` で構成されます。それ以外"
"の場合、``Vary`` の既存のヘッダーは削除されません。"

msgid ""
"Returns a cache key based on the request path. It can be used in the request "
"phase because it pulls the list of headers to take into account from the "
"global path registry and uses those to build a cache key to check against."
msgstr ""
"リクエストのパスに基づいたキャッシュキーを返します。グローバルパスレジストリ"
"から考慮すべきヘッダーのリストを取得してそれを使用してキャッシュキーを構築す"
"るため、リクエストフェーズで使用できます。"

msgid ""
"If there is no headerlist stored, the page needs to be rebuilt, so this "
"function returns ``None``."
msgstr ""
"ヘッダーリストが保存されていない場合、ページを再構築する必要があるので、この"
"関数は ``None`` を返します。"

msgid ""
"Learns what headers to take into account for some request path from the "
"response object. It stores those headers in a global path registry so that "
"later access to that path will know what headers to take into account "
"without building the response object itself. The headers are named in the "
"``Vary`` header of the response, but we want to prevent response generation."
msgstr ""
"レスポンスオブジェクトから、特定のリクエストパスに対してどのヘッダーを考慮す"
"る必要があるかを学習します。それらのヘッダーはグローバルパスレジストリに格納"
"されるため、後からそのパスにアクセスした際には、レスポンスオブジェクト自体を"
"構築することなく、どのヘッダーを考慮する必要があるかがわかります。ヘッダーは"
"レスポンスの ``Vary`` ヘッダーで指定されますが、レスポンスの生成は防ぎたいで"
"しょう。"

msgid ""
"The list of headers to use for cache key generation is stored in the same "
"cache as the pages themselves. If the cache ages some data out of the cache, "
"this means that we have to build the response once to get at the Vary header "
"and so at the list of headers to use for the cache key."
msgstr ""
"キャッシュキー生成に使用するヘッダーのリストは、ページ自体と同じキャッシュ内"
"に保存されています。キャッシュがあるデータを破棄する場合、Varyヘッダーと"
"キャッシュキー生成に使用するヘッダーのリストを取得するために、レスポンスを構"
"築する必要があります。"

msgid "``django.utils.dateparse``"
msgstr "``django.utils.dateparse``"

msgid "The functions defined in this module share the following properties:"
msgstr "このモジュールで定義された関数は、以下の特性を共有しています："

msgid ""
"They accept strings in ISO 8601 date/time formats (or some close "
"alternatives) and return objects from the corresponding classes in Python's :"
"mod:`datetime` module."
msgstr ""
"ISO 8601 日付/時刻形式の文字列（またはそれに近い代替形式）を受け付け、Python "
"の :mod:`datetime` モジュールにある対応するクラスからオブジェクトを返します。"

msgid ""
"They raise :exc:`ValueError` if their input is well formatted but isn't a "
"valid date or time."
msgstr ""
"入力が適切にフォーマットされているが、有効な日付や時刻ではない場合、 :exc:"
"`ValueError` を発生させます。"

msgid "They return ``None`` if it isn't well formatted at all."
msgstr "それが全く適切にフォーマットされていない場合、 ``None`` を返します。"

msgid ""
"They accept up to picosecond resolution in input, but they truncate it to "
"microseconds, since that's what Python supports."
msgstr ""
"入力ではピコ秒単位まで受け付けますが、Pythonがサポートしているマイクロ秒単位"
"に切り捨てられます。"

msgid "Parses a string and returns a :class:`datetime.date`."
msgstr "文字列を解析し、:class:`datetime.date` を返します。"

msgid "Parses a string and returns a :class:`datetime.time`."
msgstr "文字列を解析し、:class:`datetime.time` を返します。"

msgid ""
"UTC offsets aren't supported; if ``value`` describes one, the result is "
"``None``."
msgstr ""
"UTC オフセットはサポートされていません; もし ``value`` がそれを記述している場"
"合、結果は ``None`` です。"

msgid "Parses a string and returns a :class:`datetime.datetime`."
msgstr "文字列を解析し、:class:`datetime.datetime` を返します。"

msgid ""
"UTC offsets are supported; if ``value`` describes one, the result's "
"``tzinfo`` attribute is a :class:`datetime.timezone` instance."
msgstr ""
"UTC オフセットに対応しています。もし ``value`` がそれを記述している場合、結果"
"の ``tzinfo`` 属性は :class:`datetime.timezone` インスタンスになります。"

msgid "Parses a string and returns a :class:`datetime.timedelta`."
msgstr "文字列を解析し、 :class:`datetime.timedelta` を返します。"

msgid ""
"Expects data in the format ``\"DD HH:MM:SS.uuuuuu\"``, ``\"DD HH:MM:SS,"
"uuuuuu\"``,  or as specified by ISO 8601 (e.g. ``P4DT1H15M20S`` which is "
"equivalent to ``4 1:15:20``) or PostgreSQL's day-time interval format (e.g. "
"``3 days 04:05:06``)."
msgstr ""
"データは、 ``\"DD HH:MM:SS.uuuuuu\"`` 、 ``\"DD HH:MM:SS,uuuuuu\"`` の形式、"
"または ISO 8601 で指定された形式 (例えば、``P4DT1H15M20S`` は ``4 1:15:20`` "
"に相当) や PostgreSQL の日時間隔形式 (例えば、``3 days 04:05:06``) であること"
"を期待します。"

msgid "``django.utils.decorators``"
msgstr "``django.utils.decorators``"

msgid ""
"Converts a function decorator into a method decorator. It can be used to "
"decorate methods or classes; in the latter case, ``name`` is the name of the "
"method to be decorated and is required."
msgstr ""
"関数デコレータをメソッドデコレータに変換します。これは、メソッドまたはクラス"
"をデコレートするのに使用できます。後者の場合、 ``name`` はデコレートされるメ"
"ソッドの名前であり、必須です。"

msgid ""
"``decorator`` may also be a list or tuple of functions. They are wrapped in "
"reverse order so that the call order is the order in which the functions "
"appear in the list/tuple."
msgstr ""
"``decorator`` は関数のリストまたはタプルでも構いません。それらは逆順でラップ"
"されるため、呼び出しの順序は関数がリスト/タプル内に登場する順序となります。"

msgid ""
"See :ref:`decorating class based views <decorating-class-based-views>` for "
"example usage."
msgstr ""
"使用方法の例については、 :ref:`クラスベースビューのデコレート <decorating-"
"class-based-views>` を参照してください。"

msgid ""
"Given a middleware class, returns a view decorator. This lets you use "
"middleware functionality on a per-view basis. The middleware is created with "
"no params passed."
msgstr ""
"ミドルウェアクラスが与えられた場合、ビューデコレータを返します。これにより、"
"ミドルウェアの機能をビューごとに使用できます。ミドルウェアは、パラメータを渡"
"さずに作成されます。"

msgid ""
"It assumes middleware that's compatible with the old style of Django 1.9 and "
"earlier (having methods like ``process_request()``, ``process_exception()``, "
"and ``process_response()``)."
msgstr ""
"これは、Django 1.9以前の古いスタイルと互換性のあるミドルウェアを想定していま"
"す（``process_request()``, ``process_exception()``, ``process_response()`` の"
"ようなメソッドを持っている）。"

msgid ""
"Like ``decorator_from_middleware``, but returns a function that accepts the "
"arguments to be passed to the middleware_class. For example, the :func:"
"`~django.views.decorators.cache.cache_page` decorator is created from the "
"``CacheMiddleware`` like this::"
msgstr ""
"``decorator_from_middleware`` と似ていますが、``middleware_class`` に渡す引数"
"を受け入れる関数を返します。例えば、:func:`~django.views.decorators.cache."
"cache_page` デコレータは ``CacheMiddleware`` からこのように作成されます："

msgid ""
"Marks a middleware as :ref:`synchronous-only <async-middleware>`. (The "
"default in Django, but this allows you to future-proof if the default ever "
"changes in a future release.)"
msgstr ""
"ミドルウェアを :ref:`同期専用 <async-middleware>` としてマークします。(これは"
"Djangoのデフォルトですが、将来的にデフォルトが変更された場合に備えて、あらか"
"じめ設定しておくことを可能にします。)"

msgid ""
"Marks a middleware as :ref:`asynchronous-only <async-middleware>`. Django "
"will wrap it in an asynchronous event loop when it is called from the WSGI "
"request path."
msgstr ""
"ミドルウェアを :ref:`非同期専用 <async-middleware>` としてマークします。WSGI"
"リクエストパスから呼び出されたとき、Djangoはそれを非同期イベントループでラッ"
"プします。"

msgid ""
"Marks a middleware as :ref:`sync and async compatible <async-middleware>`, "
"this allows to avoid converting requests. You must implement detection of "
"the current request type to use this decorator. See :ref:`asynchronous "
"middleware documentation <async-middleware>` for details."
msgstr ""
"ミドルウェアを :ref:`同期および非同期互換 <async-middleware>` としてマークす"
"ることで、リクエストの変換を避けることができます。このデコレータを使用するた"
"めには、現在のリクエストタイプの検出を実装する必要があります。詳細について"
"は、:ref:`非同期ミドルウェアのドキュメント <async-middleware>` を参照してくだ"
"さい。"

msgid "``django.utils.encoding``"
msgstr "``django.utils.encoding``"

msgid ""
"Returns a ``str`` object representing arbitrary object ``s``. Treats "
"bytestrings using the ``encoding`` codec."
msgstr ""
"任意のオブジェクト ``s`` を表す ``str`` オブジェクトを返します。バイトストリ"
"ングは ``encoding`` コーデックを使用して処理します。"

msgid ""
"If ``strings_only`` is ``True``, don't convert (some) non-string-like "
"objects."
msgstr ""
"``strings_only`` が ``True`` の場合、(いくつかの) 非文字列型オブジェクトを変"
"換しないでください。"

msgid "Determine if the object instance is of a protected type."
msgstr "オブジェクトインスタンスが保護された型であるかどうかを判断します。"

msgid ""
"Objects of protected types are preserved as-is when passed to "
"``force_str(strings_only=True)``."
msgstr ""
"``force_str(strings_only=True)`` に渡された際に、保護された型のオブジェクトは"
"そのまま保持されます。"

msgid ""
"Similar to ``smart_str()``, except that lazy instances are resolved to "
"strings, rather than kept as lazy objects."
msgstr ""
"``smart_str()`` に似ていますが、遅延インスタンスは遅延オブジェクトとして保持"
"されるのではなく、文字列に変換されます。"

msgid ""
"Returns a bytestring version of arbitrary object ``s``, encoded as specified "
"in ``encoding``."
msgstr ""
"任意のオブジェクト ``s`` を、 ``encoding`` で指定された方法でエンコードされた"
"バイト文字列バージョンを返します。"

msgid ""
"Similar to ``smart_bytes``, except that lazy instances are resolved to "
"bytestrings, rather than kept as lazy objects."
msgstr ""
"``smart_bytes`` に似ていますが、遅延インスタンスは遅延オブジェクトとして保持"
"されるのではなく、バイト文字列に解決されます。"

msgid ""
"Convert an Internationalized Resource Identifier (IRI) portion to a URI "
"portion that is suitable for inclusion in a URL."
msgstr ""
"国際化リソース識別子 (IRI) の一部を、URL に含めるのに適した URI の一部に変換"
"します。"

msgid ""
"This is the algorithm from section 3.1 of :rfc:`3987#section-3.1`, slightly "
"simplified since the input is assumed to be a string rather than an "
"arbitrary byte stream."
msgstr ""
"これは、入力が任意のバイトストリームではなく文字列であると仮定しているため、"
"若干単純化された、セクション3.1の :rfc:`3987#section-3.1` のアルゴリズムで"
"す。"

msgid ""
"Takes an IRI (string or UTF-8 bytes) and returns a string containing the "
"encoded result."
msgstr ""
"IRI (文字列または UTF-8 バイト) を取得し、エンコードされた結果を含む文字列を"
"返します。"

msgid ""
"Converts a Uniform Resource Identifier into an Internationalized Resource "
"Identifier."
msgstr "統一リソース識別子（URI）を国際化リソース識別子（IRI）に変換します。"

msgid "This is an algorithm from section 3.2 of :rfc:`3987#section-3.2`."
msgstr "これは :rfc:`3987#section-3.2` のセクション3.2からのアルゴリズムです。"

msgid ""
"Takes a URI in ASCII bytes and returns a string containing the encoded "
"result."
msgstr ""
"ASCII バイトで表される URI を受け取り、エンコードされた結果を含む文字列を返し"
"ます。"

msgid ""
"Convert a file system path to a URI portion that is suitable for inclusion "
"in a URL. The path is assumed to be either UTF-8 bytes, string, or a :class:"
"`~pathlib.Path`."
msgstr ""
"ファイルシステムのパスを、URLに含めるのに適したURI部分に変換します。パスは、"
"UTF-8バイト、文字列、または :class:`~pathlib.Path` のいずれかであると想定され"
"ます。"

msgid ""
"This method will encode certain characters that would normally be recognized "
"as special characters for URIs.  Note that this method does not encode the ' "
"character, as it is a valid character within URIs. See "
"``encodeURIComponent()`` JavaScript function for more details."
msgstr ""
"このメソッドは、通常URIの特別な文字として認識される特定の文字をエンコードしま"
"す。このメソッドは、URI内で有効な文字であるため、「'」文字をエンコードしない"
"ことに注意してください。詳細については、 ``encodeURIComponent()`` JavaScript"
"関数をご覧ください。"

msgid "Returns an ASCII string containing the encoded result."
msgstr "エンコードされた結果を含む ASCII 文字列を返します。"

msgid ""
"Escapes the unsafe characters from the path portion of a Uniform Resource "
"Identifier (URI)."
msgstr ""
"URI (Uniform Resource Identifier) のパス部分から安全でない文字をエスケープし"
"ます。"

msgid "``django.utils.feedgenerator``"
msgstr "``django.utils.feedgenerator``"

msgid ""
"For simplifying the selection of a generator use ``feedgenerator."
"DefaultFeed`` which is currently ``Rss201rev2Feed``"
msgstr ""
"ジェネレータの選択を簡略化するには、現在は ``Rss201rev2Feed`` である "
"``feedgenerator.DefaultFeed`` を使用します。"

msgid ""
"For definitions of the different versions of RSS, see: https://web.archive."
"org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/"
"incompatible-rss"
msgstr ""
"異なるバージョンのRSSの定義については、こちらを参照してください: https://web."
"archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/"
"incompatible-rss"

msgid "Creates a TagURI."
msgstr "TagURI を作成します。"

msgid ""
"See https://web.archive.org/web/20110514113830/http://diveintomark.org/"
"archives/2004/05/28/howto-atom-id"
msgstr ""
"参考: https://web.archive.org/web/20110514113830/http://diveintomark.org/"
"archives/2004/05/28/howto-atom-id"

msgid "``SyndicationFeed``"
msgstr "``SyndicationFeed``"

msgid ""
"Base class for all syndication feeds. Subclasses should provide ``write()``."
msgstr ""
"すべての配信 (syndication) フィードの基底クラスです。サブクラスでは "
"``write()`` を提供すべきです。"

msgid ""
"Initialize the feed with the given dictionary of metadata, which applies to "
"the entire feed."
msgstr ""
"与えられたメタデータの辞書でフィードを初期化します。これはフィード全体に適用"
"されます。"

msgid ""
"Any extra keyword arguments you pass to ``__init__`` will be stored in "
"``self.feed``."
msgstr ""
"``__init__`` に渡した追加のキーワード引数は、``self.feed`` に格納されます。"

msgid ""
"All parameters should be strings, except ``categories``, which should be a "
"sequence of strings."
msgstr ""
"すべてのパラメータは文字列でなければなりませんが、 ``categories`` のみ文字列"
"のシーケンスであるべきです。"

msgid ""
"Adds an item to the feed. All args are expected to be strings except "
"``pubdate`` and ``updateddate``, which are ``datetime.datetime`` objects, "
"and ``enclosures``, which is a list of ``Enclosure`` instances."
msgstr ""
"フィードにアイテムを追加します。すべての引数は文字列であることが前提ですが、 "
"``pubdate`` と ``updateddate`` は ``datetime.datetime`` オブジェクトであり、 "
"``enclosures`` は ``Enclosure`` インスタンスのリストです。"

msgid ""
"Return extra attributes to place on the root (i.e. feed/channel) element. "
"Called from ``write()``."
msgstr ""
"ルート (つまり、feed/channel) 要素に配置する追加の属性を返します。 "
"``write()`` から呼び出されます。"

msgid ""
"Add elements in the root (i.e. feed/channel) element. Called from "
"``write()``."
msgstr ""
"ルート(つまり、feed/channel)要素に要素を追加します。``write()`` から呼び出さ"
"れます。"

msgid ""
"Return extra attributes to place on each item (i.e. item/entry) element."
msgstr "各アイテム(つまり item/entry 要素)に配置するための追加属性を返します。"

msgid "Add elements on each item (i.e. item/entry) element."
msgstr "各アイテム（すなわち、item/entry）要素に要素を追加します。"

msgid ""
"Outputs the feed in the given encoding to ``outfile``, which is a file-like "
"object. Subclasses should override this."
msgstr ""
"指定されたエンコーディングでフィードを ``outfile`` に出力します。これはファイ"
"ルライクオブジェクトです。サブクラスではこれをオーバーライドするべきです。"

msgid "Returns the feed in the given encoding as a string."
msgstr "指定されたエンコーディングでフィードを文字列として返します。"

msgid ""
"Returns the latest ``pubdate`` or ``updateddate`` for all items in the feed. "
"If no items have either of these attributes this returns the current UTC "
"date/time."
msgstr ""
"フィード内のすべてのアイテムの中で最新の ``pubdate`` または ``updateddate`` "
"を返します。これらの属性を持つアイテムがない場合は、現在のUTC日付/時間を返し"
"ます。"

msgid "``Enclosure``"
msgstr "``Enclosure``"

msgid "Represents an RSS enclosure"
msgstr "RSSエンクロージャを表します"

msgid "``RssFeed``"
msgstr "``RssFeed``"

msgid "``Rss201rev2Feed``"
msgstr "``Rss201rev2Feed``"

msgid "Spec: https://cyber.harvard.edu/rss/rss.html"
msgstr "仕様: https://cyber.harvard.edu/rss/rss.html"

msgid "``RssUserland091Feed``"
msgstr "``RssUserland091Feed``"

msgid "Spec: http://backend.userland.com/rss091"
msgstr "仕様: http://backend.userland.com/rss091"

msgid "``Atom1Feed``"
msgstr "``Atom1Feed``"

msgid "Spec: :rfc:`4287`"
msgstr "仕様: :rfc:`4287`"

msgid "``django.utils.functional``"
msgstr "``django.utils.functional``"

msgid ""
"The ``@cached_property`` decorator caches the result of a method with a "
"single ``self`` argument as a property. The cached result will persist as "
"long as the instance does, so if the instance is passed around and the "
"function subsequently invoked, the cached result will be returned."
msgstr ""
"``@cached_property`` デコレータは、単一の ``self`` 引数を持つメソッドの結果を"
"プロパティとしてキャッシュします。キャッシュされた結果はインスタンスが存在す"
"る限り永続しますので、インスタンスが渡され、その後関数が呼び出された場合、"
"キャッシュされた結果が返されます。"

msgid ""
"Consider a typical case, where a view might need to call a model's method to "
"perform some computation, before placing the model instance into the "
"context, where the template might invoke the method once more::"
msgstr ""
"典型的なケースを考えてみましょう。ビューがモデルのメソッドを呼び出して計算を"
"行った後に、テンプレートが再度メソッドを呼び出してモデルインスタンスをコンテ"
"キストに配置することがあるでしょう。"

msgid "And in the template you would have:"
msgstr "テンプレートは次のように記述します。"

msgid ""
"Here, ``friends()`` will be called twice. Since the instance ``person`` in "
"the view and the template are the same, decorating the ``friends()`` method "
"with ``@cached_property`` can avoid that::"
msgstr ""
"この場合、 ``friends()`` が2回呼び出されます。ビューとテンプレートのインスタ"
"ンス ``person`` は同一なので、 ``friends()`` メソッドに ``@cached_property`` "
"をつけることで、呼び出しの重複を回避できます。"

msgid ""
"Note that as the method is now a property, in Python code it will need to be "
"accessed appropriately::"
msgstr ""
"なお、メソッドがプロパティになったため、Pythonのコードからのアクセスが変わっ"
"ていることに注意してください。"

msgid ""
"The cached value can be treated like an ordinary attribute of the instance::"
msgstr ""
"キャッシュされた値は、インスタンスの通常の属性のように扱うことができます。"

msgid ""
"Because of the way the :py:ref:`descriptor protocol <descriptor-invocation>` "
"works, using ``del`` (or ``delattr``) on a ``cached_property`` that hasn't "
"been accessed raises ``AttributeError``."
msgstr ""
":py:ref:`descriptor protocol <descriptor-invocation>` の挙動の都合で、アクセ"
"スされていない ``cached_property`` に対して ``del`` （または ``delattr`` ）を"
"使用すると ``AttributeError`` が発生します。"

msgid ""
"As well as offering potential performance advantages, ``@cached_property`` "
"can ensure that an attribute's value does not change unexpectedly over the "
"life of an instance. This could occur with a method whose computation is "
"based on ``datetime.now()``, or if a change were saved to the database by "
"some other process in the brief interval between subsequent invocations of a "
"method on the same instance."
msgstr ""
"``@cached_property`` はパフォーマンスの利点をもたらすだけでなく、属性の値がイ"
"ンスタンスが有効なうちに予期せず変更されないことも保証します。これは、 "
"``datetime.now()`` に基づいて計算されるメソッドや、同一のインスタンスのメソッ"
"ドを呼び出している間に他のプロセスによって変更がデータベースに保存された場合"
"などに発生する可能性があります。"

msgid ""
"You can make cached properties of methods. For example, if you had an "
"expensive ``get_friends()`` method and wanted to allow calling it without "
"retrieving the cached value, you could write::"
msgstr ""
"また、メソッドのキャッシュされたプロパティを作成することもできます。たとえ"
"ば、高コストな ``get_friends()`` メソッドを持っており、キャッシュされた値を取"
"得せずに呼び出すことを許可したい場合、次のように記述できます。"

msgid ""
"While ``person.get_friends()`` will recompute the friends on each call, the "
"value of the cached property will persist until you delete it as described "
"above::"
msgstr ""
"``person.get_friends()`` を呼び出すたびに ``friends`` は再計算されますが、"
"キャッシュされたプロパティの値は、上記の説明に従って削除するまで永続します。"

msgid ""
"Similar to :py:func:`@classmethod <classmethod>`, the ``@classproperty`` "
"decorator converts the result of a method with a single ``cls`` argument "
"into a property that can be accessed directly from the class."
msgstr ""
":py:func:`@classmethod <classmethod>` と同様に、 ``@classproperty`` デコレー"
"タは単一の ``cls`` 引数をもつメソッドの結果をクラスから直接アクセスできるプロ"
"パティに変換します。"

msgid ""
"Django offers many utility functions (particularly in ``django.utils``) that "
"take a string as their first argument and do something to that string. These "
"functions are used by template filters as well as directly in other code."
msgstr ""
"Djangoでは、文字列を最初の引数として受け取り、その文字列に何らかの処理を行う"
"多くのユーティリティ関数を（特に ``django.utils`` において）提供しています。"
"これらの関数は、テンプレートフィルタや他のコード内で直接使用されます。"

msgid ""
"If you write your own similar functions and deal with translations, you'll "
"face the problem of what to do when the first argument is a lazy translation "
"object. You don't want to convert it to a string immediately, because you "
"might be using this function outside of a view (and hence the current "
"thread's locale setting will not be correct)."
msgstr ""
"独自の類似機能を書いて、翻訳を扱う際に、最初の引数が遅延評価の翻訳オブジェク"
"トだった場合に何をすべきかという問題に直面します。この機能がビューの外部で使"
"用される可能性があるため(その場合、現在のスレッドのロケール設定が正しくない可"
"能性があります)、すぐに文字列に変換したくないでしょう。"

msgid ""
"For cases like this, use the ``django.utils.functional.keep_lazy()`` "
"decorator. It modifies the function so that *if* it's called with a lazy "
"translation as one of its arguments, the function evaluation is delayed "
"until it needs to be converted to a string."
msgstr ""
"このような場合には、``django.utils.functional.keep_lazy()`` デコレータを使用"
"してください。これは、関数が引数の1つとして遅延評価される翻訳を持つ場合に、関"
"数の評価を文字列に変換する必要があるまで遅らせるように変更します。"

msgid ""
"The ``keep_lazy()`` decorator takes a number of extra arguments (``*args``) "
"specifying the type(s) that the original function can return. A common use "
"case is to have functions that return text. For these, you can pass the "
"``str`` type to ``keep_lazy`` (or use the :func:`keep_lazy_text` decorator "
"described in the next section)."
msgstr ""
"``keep_lazy()`` デコレータは、オリジナルの関数が返すことができる型を指定する"
"ための追加引数 (``*args``) を受け取ります。一般的な使用例は、テキストを返す関"
"数を持つ場合です。これには、``str`` 型を ``keep_lazy`` に渡すことができます"
"(または、次のセクションで説明されている :func:`keep_lazy_text` デコレータを使"
"用します)。"

msgid ""
"Using this decorator means you can write your function and assume that the "
"input is a proper string, then add support for lazy translation objects at "
"the end."
msgstr ""
"このデコレータを使用すると、入力が適切な文字列であると仮定して関数を書き、最"
"後に遅延翻訳オブジェクトのサポートを追加できます。"

msgid "A shortcut for ``keep_lazy(str)(func)``."
msgstr "``keep_lazy(str)(func)`` のショートカットです。"

msgid ""
"If you have a function that returns text and you want to be able to take "
"lazy arguments while delaying their evaluation, you can use this decorator::"
msgstr ""
"テキストを返す関数があり、引数の評価を遅延させつつ、遅延引数を取ることができ"
"るようにしたい場合は、このデコレータを使用できます："

msgid "``django.utils.html``"
msgstr "``django.utils.html``"

msgid ""
"Usually you should build up HTML using Django's templates to make use of its "
"autoescape mechanism, using the utilities in :mod:`django.utils.safestring` "
"where appropriate. This module provides some additional low level utilities "
"for escaping HTML."
msgstr ""
"通常、Djangoの自動エスケープ機構を利用するために、Djangoのテンプレートを使用"
"してHTMLを構築するべきです。適切な場合には、 :mod:`django.utils.safestring` "
"のユーティリティを使用します。このモジュールは、HTMLをエスケープするためのい"
"くつかの追加の低レベルユーティリティを提供します。"

msgid ""
"Returns the given text with ampersands, quotes and angle brackets encoded "
"for use in HTML. The input is first coerced to a string and the output has :"
"func:`~django.utils.safestring.mark_safe` applied."
msgstr ""
"与えられたテキストに対して、HTMLで使うためにアンパサンド、引用符、および山括"
"弧をエンコードします。入力は最初に文字列に強制され、出力には :func:`~django."
"utils.safestring.mark_safe` が適用されます。"

msgid ""
"Similar to ``escape()``, except that it doesn't operate on preescaped "
"strings, so it will not double escape."
msgstr ""
"``escape()`` に似ていますが、事前にエスケープされた文字列には作用しないため、"
"二重にエスケープすることはありません。"

msgid ""
"This is similar to :meth:`str.format`, except that it is appropriate for "
"building up HTML fragments. The first argument ``format_string`` is not "
"escaped but all other args and kwargs are passed through :func:"
"`conditional_escape` before being passed to ``str.format()``. Finally, the "
"output has :func:`~django.utils.safestring.mark_safe` applied."
msgstr ""
"これは :meth:`str.format` に似ていますが、HTML フラグメントを組み立てるのに適"
"しています。最初の引数 ``format_string`` はエスケープされませんが、その他の引"
"数とキーワード引数はすべて :func:`conditional_escape` を通してから ``str."
"format()`` に渡されます。最終的に、出力には :func:`~django.utils.safestring."
"mark_safe` が適用されます。"

msgid ""
"For the case of building up small HTML fragments, this function is to be "
"preferred over string interpolation using ``%`` or ``str.format()`` "
"directly, because it applies escaping to all arguments - just like the "
"template system applies escaping by default."
msgstr ""
"小さなHTML断片を構築する場合、この関数は文字列補間の ``%`` や ``str."
"format()`` を直接利用するよりも望まれます。なぜなら、この関数はテンプレートシ"
"ステムと同様に、全ての引数にエスケープ処理を適用するからです。"

msgid "So, instead of writing::"
msgstr "そのため、以下のように書く代わりに："

msgid "You should instead use::"
msgstr "次のものを使用すべきです:"

msgid ""
"This has the advantage that you don't need to apply :func:`escape` to each "
"argument and risk a bug and an XSS vulnerability if you forget one."
msgstr ""
"これは、各引数に対して :func:`escape` を適用する必要がなく、1つを忘れた場合に"
"バグや XSS 脆弱性が発生するリスクがないという利点があります。"

msgid ""
"Note that although this function uses ``str.format()`` to do the "
"interpolation, some of the formatting options provided by ``str.format()`` "
"(e.g. number formatting) will not work, since all arguments are passed "
"through :func:`conditional_escape` which (ultimately) calls :func:`~django."
"utils.encoding.force_str` on the values."
msgstr ""
"この関数は ``str.format()`` を使用して補間を行いますが、 ``str.format()`` が"
"提供する一部の書式設定オプション（例えば数値の書式設定など）は機能しないこと"
"に注意してください。なぜなら、すべての引数が :func:`conditional_escape` を介"
"して渡され、これが最終的に :func:`~django.utils.encoding.force_str` を値に対"
"して呼び出すためです。"

msgid ""
"Support for calling ``format_html()`` without passing args or kwargs is "
"deprecated."
msgstr ""
"``format_html()`` を引数やキーワード引数なしで呼び出すサポートは非推奨となり"
"ました。"

msgid ""
"A wrapper of :func:`format_html`, for the common case of a group of "
"arguments that need to be formatted using the same format string, and then "
"joined using ``sep``. ``sep`` is also passed through :func:"
"`conditional_escape`."
msgstr ""
":func:`format_html` のラッパーで、同じフォーマット文字列を使用してフォーマッ"
"トする必要がある引数のグループと、``sep`` を使用して結合する一般的なケースの"
"ためのものです。``sep`` も :func:`conditional_escape` を通して渡されます。"

msgid ""
"``args_generator`` should be an iterator that returns the sequence of "
"``args`` that will be passed to :func:`format_html`. For example::"
msgstr ""
"``args_generator`` は、:func:`format_html` に渡される ``args`` のシーケンスを"
"返すイテレータであるべきです。例えば："

msgid ""
"Escapes all HTML/XML special characters with their Unicode escapes, so value "
"is safe for use with JavaScript. Also wraps the escaped JSON in a "
"``<script>`` tag. If the ``element_id`` parameter is not ``None``, the "
"``<script>`` tag is given the passed id. For example:"
msgstr ""
"すべてのHTML/XML特殊文字をそのユニコードエスケープでエスケープするため、値は"
"JavaScriptでの使用に安全です。エスケープされたJSONを ``<script>`` タグでラッ"
"プします。 ``element_id`` パラメータが ``None`` でない場合、``<script>`` タグ"
"に渡されたidが与えられます。例えば："

msgid "The ``encoder`` argument was added."
msgstr "``encoder`` 引数が追加されました。"

msgid ""
"Tries to remove anything that looks like an HTML tag from the string, that "
"is anything contained within ``<>``."
msgstr ""
"文字列から ``<>`` で囲まれた、HTML タグのように見えるものをすべて除去しようと"
"します。"

msgid ""
"Absolutely NO guarantee is provided about the resulting string being HTML "
"safe. So NEVER mark safe the result of a ``strip_tag`` call without escaping "
"it first, for example with :func:`~django.utils.html.escape`."
msgstr ""
"結果の文字列がHTMLセーフであることについては、何の保証もありません。したがっ"
"て、例えば :func:`~django.utils.html.escape` でエスケープするなどして最初に行"
"わない限り、``strip_tag`` 呼び出しの結果を安全とマークすることは絶対に行わな"
"いでください。"

msgid ""
"If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` "
"the return value will be ``\"Joel is a slug\"``."
msgstr ""
"``value`` が ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` の場"
"合、戻り値は ``\"Joel is a slug\"`` になります。"

msgid ""
"If you are looking for a more robust solution, consider using a third-party "
"HTML sanitizing tool."
msgstr ""
"より堅牢なソリューションを探している場合は、サードパーティ製のHTMLサニタイジ"
"ングツールの使用を検討してください。"

msgid ""
"The ``__html__()`` method on a class helps non-Django templates detect "
"classes whose output doesn't require HTML escaping."
msgstr ""
"クラス上の ``__html__()`` メソッドは、HTMLエスケープが必要ないクラスの出力を"
"非Djangoテンプレートが検出するのに役立ちます。"

msgid ""
"This decorator defines the ``__html__()`` method on the decorated class by "
"wrapping ``__str__()`` in :meth:`~django.utils.safestring.mark_safe`. Ensure "
"the ``__str__()`` method does indeed return text that doesn't require HTML "
"escaping."
msgstr ""
"このデコレータは、装飾されたクラスに ``__str__()`` を :meth:`~django.utils."
"safestring.mark_safe` でラッピングし、 ``__html__()`` メソッドを定義します。 "
"``__str__()`` メソッドが HTML エスケープを必要としないテキストを確かに返すこ"
"とを保証してください。"

msgid "``django.utils.http``"
msgstr "``django.utils.http``"

msgid ""
"A version of Python's :func:`urllib.parse.urlencode` function that can "
"operate on ``MultiValueDict`` and non-string values."
msgstr ""
"Python の :func:`urllib.parse.urlencode` 関数のバージョンで、"
"``MultiValueDict`` や非文字列値に対して操作を行うことができます。"

msgid ""
"Formats the time to match the :rfc:`1123#section-5.2.14` date format as "
"specified by HTTP :rfc:`9110#section-5.6.7`."
msgstr ""
":rfc:`1123#section-5.2.14` にて指定されている通り、HTTP :rfc:"
"`9110#section-5.6.7` の日付フォーマットに合わせて時間をフォーマットします。"

msgid ""
"Accepts a floating point number expressed in seconds since the epoch in UTC--"
"such as that outputted by ``time.time()``. If set to ``None``, defaults to "
"the current time."
msgstr ""
"UTC(協定世界時)でのエポックからの秒数で表された浮動小数点数を受け入れます。例"
"えば、 ``time.time()`` によって出力されるものです。``None`` に設定された場"
"合、デフォルトでは現在時刻になります。"

msgid "Outputs a string in the format ``Wdy, DD Mon YYYY HH:MM:SS GMT``."
msgstr "次の形式で文字列を出力します: ``Wdy, DD Mon YYYY HH:MM:SS GMT`` 。"

msgid ""
"Constructs a ``Content-Disposition`` HTTP header value from the given "
"``filename`` as specified by :rfc:`6266`. Returns ``None`` if "
"``as_attachment`` is ``False`` and ``filename`` is ``None``, otherwise "
"returns a string suitable for the ``Content-Disposition`` HTTP header."
msgstr ""
":rfc:`6266` に指定された ``filename`` から ``Content-Disposition`` HTTPヘッ"
"ダー値を構築します。 ``as_attachment`` が ``False`` でかつ ``filename`` が "
"``None`` の場合は ``None`` を返し、それ以外の場合は ``Content-Disposition`` "
"HTTPヘッダーに適した文字列を返します。"

msgid "Converts a base 36 string to an integer."
msgstr "base36 文字列を整数に変換します。"

msgid "Converts a positive integer to a base 36 string."
msgstr "正の整数を base36 文字列に変換します。"

msgid ""
"Encodes a bytestring to a base64 string for use in URLs, stripping any "
"trailing equal signs."
msgstr ""
"URLで使用するためにバイト文字列を base64 文字列にエンコードし、末尾の等号を削"
"除します。"

msgid ""
"Decodes a base64 encoded string, adding back any trailing equal signs that "
"might have been stripped."
msgstr ""
"base64エンコードされた文字列をデコードし、削除されたかもしれない末尾の等号を"
"追加します。"

msgid "``django.utils.module_loading``"
msgstr "``django.utils.module_loading``"

msgid "Functions for working with Python modules."
msgstr "Python モジュールを扱うための関数です。"

msgid ""
"Imports a dotted module path and returns the attribute/class designated by "
"the last name in the path. Raises ``ImportError`` if the import failed. For "
"example::"
msgstr ""
"ドットで区切られたモジュールパスをインポートし、パスの最後の名前で指定された"
"属性・クラスを返します。インポートが失敗した場合は ``ImportError`` を発生させ"
"ます。例えば："

msgid "``django.utils.safestring``"
msgstr "``django.utils.safestring``"

msgid ""
"Functions and classes for working with \"safe strings\": strings that can be "
"displayed safely without further escaping in HTML. Marking something as a "
"\"safe string\" means that the producer of the string has already turned "
"characters that should not be interpreted by the HTML engine (e.g. '<') into "
"the appropriate entities."
msgstr ""
"HTML でさらにエスケープする必要なく安全に表示できる「安全な文字列（safe "
"strings）」を扱うための関数とクラス。何かを「安全な文字列」としてマークすると"
"いうことは、文字列の生成者が HTML エンジンによって解釈されるべきでない文字"
"（例えば '<' ）を適切なエンティティに変換済みであることを意味します。"

msgid ""
"A ``str`` subclass that has been specifically marked as \"safe\" (requires "
"no further escaping) for HTML output purposes."
msgstr ""
"HTML出力の目的で「安全」として明示的にマークされた（これ以上のエスケープが必"
"要ない） ``str`` のサブクラスです。"

msgid ""
"Explicitly mark a string as safe for (HTML) output purposes. The returned "
"object can be used everywhere a string is appropriate."
msgstr ""
"文字列を (HTML) 出力目的で安全であると明示的にマークします。返されたオブジェ"
"クトは、文字列が適切な場所であればどこでも使用できます。"

msgid "Can be called multiple times on a single string."
msgstr "単一の文字列に対して複数回呼び出すことができます。"

msgid "Can also be used as a decorator."
msgstr "デコレータとしても使用できます。"

msgid ""
"For building up fragments of HTML, you should normally be using :func:"
"`django.utils.html.format_html` instead."
msgstr ""
"HTMLの断片を組み立てる際には、通常、 :func:`django.utils.html.format_html` を"
"使用するべきです。"

msgid "String marked safe will become unsafe again if modified. For example:"
msgstr ""
"マークされた文字列を安全としても、変更されると再び安全でなくなります。例え"
"ば："

msgid "``django.utils.text``"
msgstr "``django.utils.text``"

msgid ""
"A version of :meth:`str.format` for when ``format_string``, ``args``, and/or "
"``kwargs`` contain lazy objects. The first argument is the string to be "
"formatted. For example::"
msgstr ""
"``format_string``、``args``、または ``kwargs`` に遅延オブジェクトが含まれてい"
"る場合の :meth:`str.format` のバージョンです。最初の引数は、フォーマットされ"
"る文字列です。例えば："

msgid ""
"This example allows translators to translate part of the URL. If \"person\" "
"is translated to \"persona\", the regular expression will match ``persona/(?"
"P<pk>\\d+)/$``, e.g. ``persona/5/``."
msgstr ""
"この例では、翻訳機がURLの一部を翻訳できます。\"person\" を \"persona\" に翻訳"
"した場合、正規表現は ``persona/(?P<pk>\\d+)/$`` に一致します。例えば、"
"``persona/5/`` のようになります。"

msgid "Converts a string to a URL slug by:"
msgstr "下記によって文字列をURLスラグに変換します:"

msgid "Converting to ASCII if ``allow_unicode`` is ``False`` (the default)."
msgstr ""
"``allow_unicode`` が ``False`` （デフォルト）の場合、ASCII に変換します。"

msgid "Converting to lowercase."
msgstr "小文字に変換します。"

msgid ""
"Removing characters that aren't alphanumerics, underscores, hyphens, or "
"whitespace."
msgstr "英数字、アンダースコア、ハイフン、空白以外の文字を削除します。"

msgid "Replacing any whitespace or repeated dashes with single dashes."
msgstr "空白や繰り返されるダッシュを単一のダッシュに置き換えます。"

msgid "Removing leading and trailing whitespace, dashes, and underscores."
msgstr "先頭と末尾の空白、ダッシュ、アンダースコアを削除します。"

msgid ""
"If you want to allow Unicode characters, pass ``allow_unicode=True``. For "
"example:"
msgstr ""
"Unicode 文字を許可したい場合は、``allow_unicode=True`` を渡します。例えば："

msgid "``django.utils.timezone``"
msgstr "``django.utils.timezone``"

msgid ""
"Returns a :class:`~datetime.tzinfo` instance that represents a time zone "
"with a fixed offset from UTC."
msgstr ""
"UTCからの固定オフセットを持つタイムゾーンを表す :class:`~datetime.tzinfo` イ"
"ンスタンスを返します。"

msgid ""
"``offset`` is a :class:`datetime.timedelta` or an integer number of minutes. "
"Use positive values for time zones east of UTC and negative values for west "
"of UTC."
msgstr ""
"``offset`` は :class:`datetime.timedelta` または整数の分数です。UTCより東のタ"
"イムゾーンには正の値を、西には負の値を使用してください。"

msgid ""
"Returns a :class:`~datetime.tzinfo` instance that represents the :ref:"
"`default time zone <default-current-time-zone>`."
msgstr ""
":ref:`デフォルトのタイムゾーン <default-current-time-zone>` を表す :class:"
"`~datetime.tzinfo` インスタンスを返します。"

msgid ""
"Returns the name of the :ref:`default time zone <default-current-time-zone>`."
msgstr ":ref:`default-current-time-zone` の名前を返します。"

msgid ""
"Returns a :class:`~datetime.tzinfo` instance that represents the :ref:"
"`current time zone <default-current-time-zone>`."
msgstr ""
"カレントタイムゾーンを表す :class:`~datetime.tzinfo` インスタンスを返しま"
"す。 :ref:`カレントタイムゾーン <default-current-time-zone>` を参照してくださ"
"い。"

msgid ""
"Returns the name of the :ref:`current time zone <default-current-time-zone>`."
msgstr ""
":ref:`カレントタイムゾーン <default-current-time-zone>` の名前を返します。"

msgid ""
"Sets the :ref:`current time zone <default-current-time-zone>`. The "
"``timezone`` argument must be an instance of a :class:`~datetime.tzinfo` "
"subclass or a time zone name."
msgstr ""
"カレントタイムゾーンを :ref:`設定します <default-current-time-zone>` 。 "
"``timezone`` 引数は、 :class:`~datetime.tzinfo` のサブクラスのインスタンスま"
"たはタイムゾーン名でなければなりません。"

msgid "Unsets the :ref:`current time zone <default-current-time-zone>`."
msgstr ""
":ref:`カレントタイムゾーン <default-current-time-zone>` を未設定にします。"

msgid ""
"This is a Python context manager that sets the :ref:`current time zone "
"<default-current-time-zone>` on entry with :func:`activate()`, and restores "
"the previously active time zone on exit. If the ``timezone`` argument is "
"``None``, the :ref:`current time zone <default-current-time-zone>` is unset "
"on entry with :func:`deactivate()` instead."
msgstr ""
"これは、エントリ時に :func:`activate()` を使用して :ref:`カレントタイムゾー"
"ン <default-current-time-zone>` を設定し、終了時に以前にアクティブだったタイ"
"ムゾーンを復元する Python のコンテキストマネージャーです。もし ``timezone`` "
"引数が ``None`` である場合、エントリ時に :func:`deactivate()` を使用して :"
"ref:`カレントタイムゾーン <default-current-time-zone>` が解除されます。"

msgid "``override`` is also usable as a function decorator."
msgstr "``override`` は関数デコレータとしても使用できます。"

msgid ""
"Converts an aware :class:`~datetime.datetime` to a different time zone, by "
"default the :ref:`current time zone <default-current-time-zone>`."
msgstr ""
"aware な :class:`~datetime.datetime` を、デフォルトでは :ref:`カレントタイム"
"ゾーン <default-current-time-zone>` へと変換します。"

msgid "When ``value`` is omitted, it defaults to :func:`now`."
msgstr "``value`` が省略された場合, デフォルトは :func:`now` になります。"

msgid ""
"This function doesn't work on naive datetimes; use :func:`make_aware` "
"instead."
msgstr ""
"この関数は naive な日時には機能しません。代わりに :func:`make_aware` を使用し"
"てください。"

msgid ""
"Uses :func:`localtime` to convert an aware :class:`~datetime.datetime` to a :"
"meth:`~datetime.datetime.date` in a different time zone, by default the :ref:"
"`current time zone <default-current-time-zone>`."
msgstr ""
":func:`localtime` を使用して、指定された :class:`~datetime.datetime` を異なる"
"タイムゾーンの :meth:`~datetime.datetime.date` に変換し、デフォルトでは :ref:"
"`カレントタイムゾーン <default-current-time-zone>` を使用します。"

msgid "This function doesn't work on naive datetimes."
msgstr "この関数は naive な日時には機能しません。"

msgid ""
"Returns a :class:`~datetime.datetime` that represents the current point in "
"time. Exactly what's returned depends on the value of :setting:`USE_TZ`:"
msgstr ""
"現在の時刻を表す :class:`~datetime.datetime` を返します。返される内容は :"
"setting:`USE_TZ` の値によって異なります。"

msgid ""
"If :setting:`USE_TZ` is ``False``, this will be a :ref:`naive "
"<naive_vs_aware_datetimes>` datetime (i.e. a datetime without an associated "
"timezone) that represents the current time in the system's local timezone."
msgstr ""
":setting:`USE_TZ` が ``False`` の場合、システムのローカルタイムゾーンで現在の"
"時刻を表す、関連するタイムゾーンのない :ref:`naive "
"<naive_vs_aware_datetimes>` な日時（タイムゾーンの関連がない日時）になりま"
"す。"

msgid ""
"If :setting:`USE_TZ` is ``True``, this will be an :ref:`aware "
"<naive_vs_aware_datetimes>` datetime representing the current time in UTC. "
"Note that :func:`now` will always return times in UTC regardless of the "
"value of :setting:`TIME_ZONE`; you can use :func:`localtime` to get the time "
"in the current time zone."
msgstr ""
":setting:`USE_TZ` が ``True`` の場合、 UTC の現在時刻を表す :ref:`aware "
"<naive_vs_aware_datetimes>` な日時になります。 :func:`now` は常に :setting:"
"`TIME_ZONE` の値に関係なく UTC の時刻を返すことに注意してください。カレントタ"
"イムゾーンの時刻を取得するには :func:`localtime` を使用します。"

msgid ""
"Returns ``True`` if ``value`` is aware, ``False`` if it is naive. This "
"function assumes that ``value`` is a :class:`~datetime.datetime`."
msgstr ""
"``value`` が \"aware\" であれば ``True`` を、\"naive\" であれば ``False`` を"
"返します。この関数は ``value`` が :class:`~datetime.datetime` であると仮定し"
"ます。"

msgid ""
"Returns ``True`` if ``value`` is naive, ``False`` if it is aware. This "
"function assumes that ``value`` is a :class:`~datetime.datetime`."
msgstr ""
"``value`` が naive である場合は ``True`` を aware である場合は ``False`` を返"
"します。この関数は ``value`` が :class:`~datetime.datetime` であると仮定しま"
"す。"

msgid ""
"Returns an aware :class:`~datetime.datetime` that represents the same point "
"in time as ``value`` in ``timezone``, ``value`` being a naive :class:"
"`~datetime.datetime`. If ``timezone`` is set to ``None``, it defaults to "
"the :ref:`current time zone <default-current-time-zone>`."
msgstr ""
"``value`` が naive な :class:`~datetime.datetime` であるとき、``timezone`` 内"
"での同じ時点を表す aware な :class:`~datetime.datetime` を返します。"
"``timezone`` が ``None`` に設定されている場合、デフォルトで :ref:`カレントタ"
"イムゾーン <default-current-time-zone>` になります。"

msgid ""
"Returns a naive :class:`~datetime.datetime` that represents in ``timezone``  "
"the same point in time as ``value``, ``value`` being an aware :class:"
"`~datetime.datetime`. If ``timezone`` is set to ``None``, it defaults to "
"the :ref:`current time zone <default-current-time-zone>`."
msgstr ""
"``timezone`` で指定されたタイムゾーンにおいて、aware な :class:`~datetime."
"datetime` である ``value`` と同じ時点を表す naive な :class:`~datetime."
"datetime` を返します。 ``timezone`` が ``None`` に設定されている場合、デフォ"
"ルトで :ref:`カレントタイムゾーン <default-current-time-zone>` に設定されま"
"す。"

msgid "``django.utils.translation``"
msgstr "``django.utils.translation``"

msgid ""
"For a complete discussion on the usage of the following see the :doc:"
"`translation documentation </topics/i18n/translation>`."
msgstr ""
"以下の使い方の完全な説明は、:doc:`翻訳ドキュメント </topics/i18n/"
"translation>` を参照してください。"

msgid "Translates ``message`` and returns it as a string."
msgstr "``message`` を翻訳し、文字列として返します。"

msgid ""
"Translates ``message`` given the ``context`` and returns it as a string."
msgstr "``context`` を考慮して ``message`` を翻訳し、文字列として返します。"

msgid "For more information, see :ref:`contextual-markers`."
msgstr "詳しくは :ref:`contextual-markers` を参照してください。"

msgid "Same as the non-lazy versions above, but using lazy execution."
msgstr "上述の lazy ではないものと同じですが、遅延処理を使用します。"

msgid "See :ref:`lazy translations documentation <lazy-translations>`."
msgstr ":ref:`遅延翻訳のドキュメント <lazy-translations>` を参照してください。"

msgid ""
"Marks strings for translation but doesn't translate them now. This can be "
"used to store strings in global variables that should stay in the base "
"language (because they might be used externally) and will be translated "
"later."
msgstr ""
"翻訳用に文字列をマークしますが、この段階では翻訳しません。(外部で使われる可能"
"性があるため) ベースの言語のままにする必要があるグローバル変数に文字列を保持"
"するために使えます。そして、後の時点で翻訳します。"

msgid ""
"Translates ``singular`` and ``plural`` and returns the appropriate string "
"based on ``number``."
msgstr ""
"``number`` に基づいて、``singular`` と ``plural`` を翻訳し、適切な文字列を返"
"します。"

msgid ""
"Translates ``singular`` and ``plural`` and returns the appropriate string "
"based on ``number`` and the ``context``."
msgstr ""
"``singular`` と ``plural`` を翻訳し、``number`` と ``context`` に基づいて適切"
"な文字列を返します。"

msgid ""
"Fetches the translation object for a given language and activates it as the "
"current translation object for the current thread."
msgstr ""
"渡された language に対して翻訳オブジェクトを取り出し、現在のスレッドに対して"
"カレント翻訳オブジェクトとして有効化します。"

msgid ""
"Deactivates the currently active translation object so that further _ calls "
"will resolve against the default translation object, again."
msgstr ""
"カレント翻訳オブジェクトを無効化し、さらなる _ 呼び出しが再びデフォルトの翻訳"
"オブジェクトに対して解決するようにします。"

msgid ""
"Makes the active translation object a ``NullTranslations()`` instance. This "
"is useful when we want delayed translations to appear as the original string "
"for some reason."
msgstr ""
"アクティブな翻訳オブジェクトを ``NullTranslations()`` のインスタンスにしま"
"す。何らかの理由で遅延された翻訳を元の文字列で表示したいときに役立ちます。"

msgid ""
"A Python context manager that uses :func:`django.utils.translation.activate` "
"to fetch the translation object for a given language, activates it as the "
"translation object for the current thread and reactivates the previous "
"active language on exit. Optionally, it can deactivate the temporary "
"translation on exit with :func:`django.utils.translation.deactivate` if the "
"``deactivate`` argument is ``True``. If you pass ``None`` as the language "
"argument, a ``NullTranslations()`` instance is activated within the context."
msgstr ""
"指定された言語の翻訳オブジェクトを取得するために :func:`django.utils."
"translation.activate` を使用し、現在のスレッドの翻訳オブジェクトとしてそれを"
"有効化し、終了時に以前のアクティブな言語を再有効化する Python のコンテキスト"
"マネージャです。オプションで、 ``deactivate`` 引数が ``True`` である場合に限"
"り、終了時に一時的な翻訳を無効化するために :func:`django.utils.translation."
"deactivate` を使用できます。言語引数として ``None`` を渡すと、コンテキスト内"
"で ``NullTranslations()`` インスタンスが有効化されます。"

msgid ""
"Checks whether there is a global language file for the given language code "
"(e.g. 'fr', 'pt_BR'). This is used to decide whether a user-provided "
"language is available."
msgstr ""
"与えられた言語コード (たとえば 'fr' や 'pt_BR') に対するグローバル言語ファイ"
"ルが存在するかどうかをチェックします。ユーザーが提供する言語が有効かどうかを"
"決めるために使われます。"

msgid ""
"Returns the currently selected language code. Returns ``None`` if "
"translations are temporarily deactivated (by :func:`deactivate_all()` or "
"when ``None`` is passed to :func:`override()`)."
msgstr ""
"現在選択中の言語コードを返します。翻訳が (:func:`deactivate_all()` や "
"``None`` が :func:`override()` に渡されることによって) 一時的に無効化されてい"
"る場合は ``None`` を返します。"

msgid "Returns selected language's BiDi layout:"
msgstr "選択中の言語の BiDi レイアウトを返します:"

msgid "``False`` = left-to-right layout"
msgstr "``False`` = 左から右へのレイアウト"

msgid "``True`` = right-to-left layout"
msgstr "``True`` = 右から左へのレイアウト"

msgid ""
"Analyzes the request to find what language the user wants the system to "
"show. Only languages listed in settings.LANGUAGES are taken into account. If "
"the user requests a sublanguage where we have a main language, we send out "
"the main language."
msgstr ""
"リクエストを分析して、ユーザがシステムにどの言語を表示させたいかを明らかにし"
"ます。settings.LANGUAGES にリストアップされている言語のみが考慮されます。ユー"
"ザが主言語の他に副言語をリクエストする場合は、主言語が送信されます。"

msgid ""
"If ``check_path`` is ``True``, the function first checks the requested URL "
"for whether its path begins with a language code listed in the :setting:"
"`LANGUAGES` setting."
msgstr ""
"``check_path`` が ``True`` の場合、関数はまず、パスが :setting:`LANGUAGES` 設"
"定にリストアップされた言語コードで始まるかどうか、リクエストされた URL を"
"チェックします。"

msgid ""
"Returns ``lang_code`` if it's in the :setting:`LANGUAGES` setting, possibly "
"selecting a more generic variant. For example, ``'es'`` is returned if "
"``lang_code`` is ``'es-ar'`` and ``'es'`` is in :setting:`LANGUAGES` but "
"``'es-ar'`` isn't."
msgstr ""
"もし ``lang_code`` が :setting:`LANGUAGES` 設定内に存在していれば "
"``lang_code`` を返し、もっと一般的なバリアントを選択する可能性があります。例"
"えば、``lang_code`` が ``'es-ar'`` で、``'es-ar'`` は :setting:`LANGUAGES` 内"
"にはないが ``'es'`` は存在する場合、``'es'`` が返されます。"

msgid ""
"If ``strict`` is ``False`` (the default), a country-specific variant may be "
"returned when neither the language code nor its generic variant is found. "
"For example, if only ``'es-co'`` is in :setting:`LANGUAGES`, that's returned "
"for ``lang_code``\\s like ``'es'`` and ``'es-ar'``. Those matches aren't "
"returned if ``strict=True``."
msgstr ""
"``strict`` が ``False`` (デフォルト) の場合、言語コードもその一般的なバリアン"
"トも見つからないときに、国別のバリアントが返されることがあります。たとえば、:"
"setting:`LANGUAGES` に ``'es-co'`` のみが含まれている場合、その国別バリアント"
"は ``lang_code`` が ``'es'`` や ``'es-ar'`` のような場合に返されます。これら"
"のマッチは ``strict=True`` の場合には返されません。"

msgid "Raises :exc:`LookupError` if nothing is found."
msgstr "何も見つからない場合、:exc:`LookupError` を発生させます。"

msgid "Turns a language name (en-us) into a locale name (en_US)."
msgstr "言語の名前 (en-us) をロケール名 (en_US) に変換します。"

msgid ""
"Turns a Django template into something that is understood by ``xgettext``. "
"It does so by translating the Django translation tags into standard "
"``gettext`` function invocations."
msgstr ""
"Django テンプレートを ``xgettext`` によって理解されるものに変更します。"
"Django 翻訳タグを標準的な ``gettext`` 関数の文に変換することによって行われま"
"す。"

msgid "Writing validators"
msgstr "バリデータを記述する"

msgid ""
"A validator is a callable that takes a value and raises a :exc:`~django.core."
"exceptions.ValidationError` if it doesn't meet some criteria. Validators can "
"be useful for reusing validation logic between different types of fields."
msgstr ""
"バリデータ (validator) は呼び出し可能なオブジェクトで、値を受け取り、ある基準"
"を満たしていない場合に :exc:`~django.core.exceptions.ValidationError` を発生"
"させます。バリデータは異なるタイプのフィールド間でバリデーションロジックを再"
"利用するのに便利です。"

msgid "For example, here's a validator that only allows even numbers::"
msgstr "たとえば、以下は偶数のみを許容するバリデータです。"

msgid ""
"You can add this to a model field via the field's :attr:`~django.db.models."
"Field.validators` argument::"
msgstr ""
"これはフィールドの :attr:`~django.db.models.Field.validators` 属性を通じて設"
"定できます:"

msgid ""
"Because values are converted to Python before validators are run, you can "
"even use the same validator with forms::"
msgstr ""
"値はバリデータ実行前に Python に変換されているため、フォームでも同じバリデー"
"タを使用できます:"

msgid ""
"You can also use a class with a ``__call__()`` method for more complex or "
"configurable validators. :class:`RegexValidator`, for example, uses this "
"technique. If a class-based validator is used in the :attr:`~django.db."
"models.Field.validators` model field option, you should make sure it is :ref:"
"`serializable by the migration framework <migration-serializing>` by adding :"
"ref:`deconstruct() <custom-deconstruct-method>` and ``__eq__()`` methods."
msgstr ""
"より複雑なバリデータに対しては、クラスで ``__call__()`` メソッドを利用するこ"
"ともできます。:class:`RegexValidator` はその一例で、このテクニックを使ってい"
"ます。クラスベースのバリデータが :attr:`~django.db.models.Field.validators` "
"モデルフィールドのオプション内で使用されるときは、:ref:`deconstruct() "
"<custom-deconstruct-method>` と ``__eq__()``  メソッドを追加して :ref:`マイグ"
"レーションフレームワークによりシリアライズ可能 <migration-serializing>` にな"
"るようにしてください。"

msgid "How validators are run"
msgstr "バリデータはどのように実行されるか"

msgid ""
"See the :doc:`form validation </ref/forms/validation>` for more information "
"on how validators are run in forms, and :ref:`Validating objects <validating-"
"objects>` for how they're run in models. Note that validators will not be "
"run automatically when you save a model, but if you are using a :class:"
"`~django.forms.ModelForm`, it will run your validators on any fields that "
"are included in your form. See the :doc:`ModelForm documentation </topics/"
"forms/modelforms>` for information on how model validation interacts with "
"forms."
msgstr ""
"バリデータが実行される方法については、フォーム上での実行は :doc:`フォームのバ"
"リデーション </ref/forms/validation>`、モデル上の実行は :ref:`オブジェクトを"
"検証する <validating-objects>` にそれぞれ詳細が記載されています。モデルを "
"save してもバリデータは自動的には呼び出されませんが、:class:`~django.forms."
"ModelForm` を使用している場合にはフォームに含まれるすべてのフィールドでバリ"
"データを実行することに注意してください。モデルのバリデーションがフォーム上で"
"どのように動作するかについては、:doc:`ModelForm ドキュメント </topics/forms/"
"modelforms>` を参照してください。"

msgid "Built-in validators"
msgstr "ビルトインのバリデータ"

msgid ""
"The :mod:`django.core.validators` module contains a collection of callable "
"validators for use with model and form fields. They're used internally but "
"are available for use with your own fields, too. They can be used in "
"addition to, or in lieu of custom ``field.clean()`` methods."
msgstr ""
":mod:`django.core.validators` モジュールは、モデルやフォームで使用する呼び出"
"し可能なバリデータの集まりを有しています。これらは内部で使用されますが、作成"
"したフィールドで使用することもできます。 追加で使うことも、``field.clean()`` "
"メソッドの代わりに使うことも可能です。"

msgid "``RegexValidator``"
msgstr "``RegexValidator``"

msgid ""
"If not ``None``, overrides :attr:`regex`. Can be a regular expression string "
"or a pre-compiled regular expression."
msgstr ""
"``None`` 以外の場合、:attr:`regex` をオーバーライドします。正規表現の文字列"
"か、コンパイル済みの正規表現を指定します。"

msgid "If not ``None``, overrides :attr:`.message`."
msgstr "``None`` 以外の場合、:attr:`.message` をオーバーライドします。"

msgid "If not ``None``, overrides :attr:`code`."
msgstr "``None`` 以外の場合、:attr:`code` をオーバーライドします。"

msgid "If not ``None``, overrides :attr:`inverse_match`."
msgstr "``None`` 以外の場合、:attr:`inverse_match` をオーバーライドする。"

msgid ""
"If not ``None``, overrides :attr:`flags`. In that case, :attr:`regex` must "
"be a regular expression string, or :exc:`TypeError` is raised."
msgstr ""
"``None`` 以外の場合、:attr:`flags` をオーバーライドします。指定する場合、:"
"attr:`regex` は正規表現の文字列にする必要があります。それ以外の場合は :exc:"
"`TypeError` が発生します。"

msgid ""
"A :class:`RegexValidator` searches the provided ``value`` for a given "
"regular expression with :func:`re.search`. By default, raises a :exc:"
"`~django.core.exceptions.ValidationError` with :attr:`message` and :attr:"
"`code` if a match **is not** found. Its behavior can be inverted by setting :"
"attr:`inverse_match` to ``True``, in which case the :exc:`~django.core."
"exceptions.ValidationError` is raised when a match **is** found."
msgstr ""
":class:`RegexValidator` は、与えられた ``value`` を指定された正規表現で :"
"func:`re.search` で検索します。デフォルトでは、一致が **見つからない** 場合"
"に :attr:`message` と :attr:`code` を持つ :exc:`~django.core.exceptions."
"ValidationError` を発生させます。:attr:`inverse_match` を ``True`` に設定する"
"ことで、動作を逆にできます。この場合、一致が **見つかった** ときに :exc:"
"`~django.core.exceptions.ValidationError` が発生します。"

msgid ""
"The regular expression pattern to search for within the provided ``value``, "
"using :func:`re.search`. This may be a string or a pre-compiled regular "
"expression created with :func:`re.compile`. Defaults to the empty string, "
"which will be found in every possible ``value``."
msgstr ""
":func:`re.search` を使用して、指定された ``value`` 内を検索する正規表現パター"
"ンです。これは文字列か :func:`re.compile` で作成されたコンパイル済みの正規表"
"現です。 デフォルトは空文字列で、すべての ``value`` から検索されます。"

msgid ""
"The error message used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"Enter a valid value\"``."
msgstr ""
"バリデーションが失敗した場合に :exc:`~django.core.exceptions."
"ValidationError` で使用されるエラーメッセージです。デフォルトは ``\"Enter a "
"valid value\"`` です。"

msgid ""
"The error code used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"invalid\"``."
msgstr ""
"バリデーションが失敗した場合に :exc:`~django.core.exceptions."
"ValidationError` で使用されるエラーコードです。デフォルトは ``\"invalid\"`` "
"です。"

msgid "The match mode for :attr:`regex`. Defaults to ``False``."
msgstr ":attr:`regex` に対する match モードです。デフォルトは ``False`` です。"

msgid ""
"The :ref:`regex flags <python:contents-of-module-re>` used when compiling "
"the regular expression string :attr:`regex`. If :attr:`regex` is a pre-"
"compiled regular expression, and :attr:`flags` is overridden, :exc:"
"`TypeError` is raised. Defaults to ``0``."
msgstr ""
"正規表現の文字列 :attr:`regex` とともにコンパイルに使われる :ref:`regex フラ"
"グ <python:contents-of-module-re>` です。:attr:`regex` にコンパイル済みの正規"
"表現を指定した場合、:attr:`flags` をオーバーライドすると :exc:`TypeError` が"
"発生します。デフォルトは ``0`` です。"

msgid "``EmailValidator``"
msgstr "``EmailValidator``"

msgid "If not ``None``, overrides :attr:`allowlist`."
msgstr "``None`` 以外の場合、:attr:`allowlist` をオーバーライドします。"

msgid ""
"An :class:`EmailValidator` ensures that a value looks like an email, and "
"raises a :exc:`~django.core.exceptions.ValidationError` with :attr:`message` "
"and :attr:`code` if it doesn't. Values longer than 320 characters are always "
"considered invalid."
msgstr ""
":class:`EmailValidator` は値がメールアドレスとして解釈可能であることを確認"
"し、そうでない場合は :attr:`message` と :attr:`code` を持つ :exc:`~django."
"core.exceptions.ValidationError` を発生させます。320 文字以上の値は常に無効と"
"みなされます。"

msgid ""
"The error message used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"Enter a valid email address\"``."
msgstr ""
"バリデーションに失敗した場合に :exc:`~django.core.exceptions."
"ValidationError` が使用するエラーメッセージです。デフォルトは ``\"Enter a "
"valid email address\"`` です。"

msgid ""
"Allowlist of email domains. By default, a regular expression (the "
"``domain_regex`` attribute) is used to validate whatever appears after the "
"``@`` sign. However, if that string appears in the ``allowlist``, this "
"validation is bypassed. If not provided, the default ``allowlist`` is "
"``['localhost']``. Other domains that don't contain a dot won't pass "
"validation, so you'd need to add them to the ``allowlist`` as necessary."
msgstr ""
"メールドメインの許可リスト。デフォルトでは、正規表現(``domain_regex`` 属性)を"
"使って ``@`` 記号の後に現れる文字列を検証します。しかし、その文字列が "
"``allowlist`` に含まれている場合、この検証はバイパスされます。指定しない場"
"合、デフォルトの ``allowlist`` は ``['localhost']`` です。ドットを含まない他"
"のドメインはバリデーションを通過しないので、必要に応じて ``allowlist`` に追加"
"する必要があります。"

msgid ""
"In older versions, values longer than 320 characters could be considered "
"valid."
msgstr ""
"古いバージョンでは、320文字より長い値が有効とみなされることがありました。"

msgid "``URLValidator``"
msgstr "``URLValidator``"

msgid ""
"A :class:`RegexValidator` subclass that ensures a value looks like a URL, "
"and raises an error code of ``'invalid'`` if it doesn't. Values longer than :"
"attr:`max_length` characters are always considered invalid."
msgstr ""
":class:`RegexValidator` のサブクラスで、値が URL として解釈可能であることを確"
"認し、そうでない場合は ``'invalid'`` というエラーコードを発生させます。 :"
"attr:`max_length` 文字より長い値は常に無効とみなされます。"

msgid ""
"Loopback addresses and reserved IP spaces are considered valid. Literal IPv6 "
"addresses (:rfc:`3986#section-3.2.2`) and Unicode domains are both supported."
msgstr ""
"ループバックアドレスと予約済み IP スペースは有効とみなされます。リテラル "
"IPv6 アドレス (:rfc:`3986#section-3.2.2`) と Unicode ドメインの両方がサポート"
"されています。"

msgid ""
"In addition to the optional arguments of its parent :class:`RegexValidator` "
"class, ``URLValidator`` accepts an extra optional attribute:"
msgstr ""
"親クラスである :class:`RegexValidator` のオプション引数に加え、 "
"``URLValidator`` はさらにオプション属性を受け付けます："

msgid ""
"URL/URI scheme list to validate against. If not provided, the default list "
"is ``['http', 'https', 'ftp', 'ftps']``. As a reference, the IANA website "
"provides a full list of `valid URI schemes`_."
msgstr ""
"検証するURL/URIスキームのリスト。指定がない場合、デフォルトのリストは "
"``['http', 'https', 'ftp', 'ftps']`` です。参考として、IANAのウェブサイトに "
"`valid URI schemes`_ の完全なリストがあります。"

msgid ""
"Values starting with ``file:///`` will not pass validation even when the "
"``file`` scheme is provided. Valid values must contain a host."
msgstr ""
"``file:///`` で始まる値は、 ``file`` スキームが指定されていてもバリデーション"
"を通過しません。ホスト名を追加する必要があります。"

msgid ""
"The maximum length of values that could be considered valid. Defaults to "
"2048 characters."
msgstr "有効な値とみなされる最大長。デフォルトは2048文字です。"

msgid ""
"In older versions, values longer than 2048 characters could be considered "
"valid."
msgstr ""
"古いバージョンでは、2048文字より長い値が有効とみなされることがありました。"

msgid "``validate_email``"
msgstr "``validate_email``"

msgid "An :class:`EmailValidator` instance without any customizations."
msgstr "カスタマイズされていない :class:`EmailValidator` インスタンスです。"

msgid "``validate_slug``"
msgstr "``validate_slug``"

msgid ""
"A :class:`RegexValidator` instance that ensures a value consists of only "
"letters, numbers, underscores or hyphens."
msgstr ""
"値が文字、数字、アンダースコアまたはハイフンのみで構成されていることを確認す"
"る :class:`RegexValidator` インスタンスです。"

msgid "``validate_unicode_slug``"
msgstr "``validate_unicode_slug``"

msgid ""
"A :class:`RegexValidator` instance that ensures a value consists of only "
"Unicode letters, numbers, underscores, or hyphens."
msgstr ""
"値が Unicode 文字、数字、アンダースコア、またはハイフンのみで構成されているこ"
"とを確認する :class:`RegexValidator` インスタンスです。"

msgid "``validate_ipv4_address``"
msgstr "``validate_ipv4_address``"

msgid ""
"A :class:`RegexValidator` instance that ensures a value looks like an IPv4 "
"address."
msgstr ""
"値がIPv4アドレスとして解釈可能であることを保証する :class:`RegexValidator` イ"
"ンスタンスです。"

msgid "``validate_ipv6_address``"
msgstr "``validate_ipv6_address``"

msgid "Uses ``django.utils.ipv6`` to check the validity of an IPv6 address."
msgstr ""
"IPv6 アドレスの有効性をチェックするには ``django.utils.ipv6`` を使います。"

msgid "``validate_ipv46_address``"
msgstr "``validate_ipv46_address``"

msgid ""
"Uses both ``validate_ipv4_address`` and ``validate_ipv6_address`` to ensure "
"a value is either a valid IPv4 or IPv6 address."
msgstr ""
"``validate_ipv4_address`` と ``validate_ipv6_address`` の両方を使用して、値が"
"有効な IPv4 アドレスまたは IPv6 アドレスであることを確認します。"

msgid "``validate_comma_separated_integer_list``"
msgstr "``validate_comma_separated_integer_list``"

msgid ""
"A :class:`RegexValidator` instance that ensures a value is a comma-separated "
"list of integers."
msgstr ""
"値がカンマで区切られた整数のリストであることを確認する :class:"
"`RegexValidator` インスタンスです。"

msgid "``int_list_validator``"
msgstr "``int_list_validator``"

msgid ""
"Returns a :class:`RegexValidator` instance that ensures a string consists of "
"integers separated by ``sep``. It allows negative integers when "
"``allow_negative`` is ``True``."
msgstr ""
"文字列が ``sep`` で区切られた整数で構成されていることを確認する :class:"
"`RegexValidator` インスタンスを返します。これは ``allow_negative`` が "
"``True`` の場合に負の整数を許容します。"

msgid "``MaxValueValidator``"
msgstr "``MaxValueValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'max_value'`` if ``value`` is greater than ``limit_value``, which may be a "
"callable."
msgstr ""
"``value`` が ``limit_value`` よりも大きい場合、``'max_value'`` のエラーコード"
"を持つ :exc:`~django.core.exceptions.ValidationError` を発生させます。"
"``limit_value`` には呼び出し可能オブジェクトを指定可能です。"

msgid "``MinValueValidator``"
msgstr "``MinValueValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'min_value'`` if ``value`` is less than ``limit_value``, which may be a "
"callable."
msgstr ""
"``value`` が ``limit_value`` よりも小さい場合、``'min_value'`` のエラーコード"
"を持つ :exc:`~django.core.exceptions.ValidationError` を発生させます。"
"``limit_value`` には呼び出し可能オブジェクトを指定できます。"

msgid "``MaxLengthValidator``"
msgstr "``MaxLengthValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'max_length'`` if the length of ``value`` is greater than ``limit_value``, "
"which may be a callable."
msgstr ""
"``value`` が ``limit_value`` よりも長い場合、``'max_length'`` のエラーコード"
"を持つ :exc:`~django.core.exceptions.ValidationError` を発生させます。"
"``limit_value`` には呼び出し可能オブジェクトを指定できます。"

msgid "``MinLengthValidator``"
msgstr "``MinLengthValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'min_length'`` if the length of ``value`` is less than ``limit_value``, "
"which may be a callable."
msgstr ""
"``value`` が ``limit_value`` よりも短い場合、``'min_length'`` のエラーコード"
"を持つ :exc:`~django.core.exceptions.ValidationError` を発生させます。"
"``limit_value`` には呼び出し可能オブジェクトを指定できます。"

msgid "``DecimalValidator``"
msgstr "``DecimalValidator``"

msgid ""
"Raises :exc:`~django.core.exceptions.ValidationError` with the following "
"codes:"
msgstr ""
"以下のコードで :exc:`~django.core.exceptions.ValidationError` を例外を発生さ"
"せます："

msgid "``'max_digits'`` if the number of digits is larger than ``max_digits``."
msgstr "桁数が ``max_digits`` より大きい場合は ``'max_digits'`` 。"

msgid ""
"``'max_decimal_places'`` if the number of decimals is larger than "
"``decimal_places``."
msgstr ""
"小数点以下の桁数が ``decimal_places`` より大きい場合は "
"``'max_decimal_places'`` 。"

msgid ""
"``'max_whole_digits'`` if the number of whole digits is larger than the "
"difference between ``max_digits`` and ``decimal_places``."
msgstr ""
"整数部の桁数が ``max_digits`` と ``decimal_places`` の差よりも大きい場合は、"
"``'max_whole_digits'`` 。"

msgid "``FileExtensionValidator``"
msgstr "``FileExtensionValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'invalid_extension'`` if the extension of ``value.name`` (``value`` is a :"
"class:`~django.core.files.File`) isn't found in ``allowed_extensions``. The "
"extension is compared case-insensitively with ``allowed_extensions``."
msgstr ""
"``value.name`` (``value`` は :class:`~django.core.files.File`) の拡張子が "
"``allowed_extensions`` で見つからなかった場合、 :exc:`~django.core."
"exceptions.ValidationError` を ``'invalid_extension'`` のエラーコードで発生さ"
"せます。拡張子は大文字小文字を区別せずに ``allowed_extensions`` と比較されま"
"す。"

msgid ""
"Don't rely on validation of the file extension to determine a file's type. "
"Files can be renamed to have any extension no matter what data they contain."
msgstr ""
"ファイルの種類を決定するために、ファイル拡張子の検証に依存しないでください。"
"ファイル名は、どんなデータを含んでいても、どんな拡張子にも変更できます。"

msgid "``validate_image_file_extension``"
msgstr "``validate_image_file_extension``"

msgid ""
"Uses Pillow to ensure that ``value.name`` (``value`` is a :class:`~django."
"core.files.File`) has `a valid image extension <https://pillow.readthedocs."
"io/en/latest/handbook/image-file-formats.html>`_."
msgstr ""
"Pillow を使って ``value.name`` (``value`` は :class:`~django.core.files."
"File`) が `有効な画像拡張子 <https://pillow.readthedocs.io/en/latest/"
"handbook/image-file-formats.html>`_ を持っていることを確認します。"

msgid "``ProhibitNullCharactersValidator``"
msgstr "``ProhibitNullCharactersValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` if ``str(value)`` "
"contains one or more null characters (``'\\x00'``)."
msgstr ""
"``str(value)`` に null 文字 (``'˶x00'``) が一つ以上含まれる場合、 :exc:"
"`~django.core.exceptions.ValidationError` を発生させます。"

msgid ""
"The error message used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"Null characters are not allowed.\"``."
msgstr ""
"バリデーションに失敗した場合に :exc:`~django.core.exceptions."
"ValidationError` が使用するエラーメッセージです。デフォルトは ``\"Null "
"characters are not allowed.\"`` です。"

msgid ""
"The error code used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"null_characters_not_allowed\"``."
msgstr ""
"バリデーションに失敗した場合に :exc:`~django.core.exceptions."
"ValidationError` が使用するエラーコードです。デフォルトは "
"``\"null_characters_not_allowed\"`` です。"

msgid "``StepValueValidator``"
msgstr "``StepValueValidator``"

msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'step_size'`` if ``value`` is not an integral multiple of ``limit_value``, "
"which can be a float, integer or decimal value or a callable. When "
"``offset`` is set, the validation occurs against ``limit_value`` plus "
"``offset``. For example, for ``StepValueValidator(3, offset=1.4)`` valid "
"values include ``1.4``, ``4.4``, ``7.4``, ``10.4``, and so on."
msgstr ""
"値が ``limit_value`` の整数倍でない場合、 :exc:`~django.core.exceptions."
"ValidationError` を ``'step_size'`` のコードで発生させます。 ``offset`` が設"
"定されている場合は、 ``limit_value`` と ``offset`` を足した値に対してバリデー"
"ションが行われます。たとえば、 ``StepValueValidator(3, offset=1.4)`` の場合、"
"有効な値は ``1.4``、``4.4``、``7.4``、``10.4`` などです。"

msgid "The ``offset`` argument was added."
msgstr "``offset`` 引数が追加されました。"

msgid "Built-in Views"
msgstr "組み込みのビュー"

msgid ""
"Several of Django's built-in views are documented in :doc:`/topics/http/"
"views` as well as elsewhere in the documentation."
msgstr ""
"Django の組み込みビューのいくつかは、 :doc:`/topics/http/views` や他のドキュ"
"メントで説明されています。"

msgid "Serving files in development"
msgstr "開発中のファイルの配信"

msgid ""
"There may be files other than your project's static assets that, for "
"convenience, you'd like to have Django serve for you in local development. "
"The :func:`~django.views.static.serve` view can be used to serve any "
"directory you give it. (This view is **not** hardened for production use and "
"should be used only as a development aid; you should serve these files in "
"production using a real front-end web server)."
msgstr ""
"プロジェクトの静的アセット以外にも、利便性のために、ローカル開発で Django に"
"配信させたいファイルがあるかもしれません。 :func:`~django.views.static."
"serve` ビューを使えば、任意のディレクトリに配信できます。(このビューは本番環"
"境では **使えない** ので、開発の補助としてだけ使ってください。本番環境では実"
"際のフロントエンド Web サーバを使ってこれらのファイルを配信してください)。"

msgid ""
"The most likely example is user-uploaded content in :setting:`MEDIA_ROOT`. "
"``django.contrib.staticfiles`` is intended for static assets and has no "
"built-in handling for user-uploaded files, but you can have Django serve "
"your :setting:`MEDIA_ROOT` by appending something like this to your URLconf::"
msgstr ""
"最もありそうな例は、 :setting:`MEDIA_ROOT` にあるユーザがアップロードしたコン"
"テンツです。 ``django.contrib.staticfiles`` は静的アセット用で、ユーザがアッ"
"プロードしたファイルに対する組み込みの処理はありませんが、 URLconf に次のよう"
"な記述を追加することで、 Django に :setting:`MEDIA_ROOT` を配信させることがで"
"きます:"

msgid ""
"Note, the snippet assumes your :setting:`MEDIA_URL` has a value of "
"``'media/'``. This will call the :func:`~django.views.static.serve` view, "
"passing in the path from the URLconf and the (required) ``document_root`` "
"parameter."
msgstr ""
"このコードは :setting:`MEDIA_URL` の値が ``'media/'`` であると仮定していま"
"す。これは :func:`~django.views.static.serve` ビューを呼び出して、 URLconf か"
"らのパス (必須) と ``document_root`` パラメータを渡します。"

msgid ""
"Since it can become a bit cumbersome to define this URL pattern, Django "
"ships with a small URL helper function :func:`~django.conf.urls.static."
"static` that takes as parameters the prefix such as :setting:`MEDIA_URL` and "
"a dotted path to a view, such as ``'django.views.static.serve'``. Any other "
"function parameter will be transparently passed to the view."
msgstr ""
"この URL パターンを定義するのは少し面倒なので、 Django には小さな URL ヘル"
"パー関数 :func:`~django.conf.urls.static.static` が同梱されています。この関数"
"は :setting:`MEDIA_URL` のようなプレフィックスと、 ``'django.views.static."
"serve'`` のようなビューへのドットパスをパラメータとして受け取ります。その他の"
"関数のパラメータは透過的にビューに渡されます。"

msgid "Error views"
msgstr "エラー・ビュー"

msgid ""
"Django comes with a few views by default for handling HTTP errors. To "
"override these with your own custom views, see :ref:`customizing-error-"
"views`."
msgstr ""
"Django には HTTP エラーを処理するためのビューがデフォルトでいくつか付属して "
"います。これらを独自のカスタムビューで上書きするには、 :ref:`customizing-"
"error-views` を参照してください。"

msgid "The 404 (page not found) view"
msgstr "404 (page not found) ビュー"

msgid ""
"When you raise :exc:`~django.http.Http404` from within a view, Django loads "
"a special view devoted to handling 404 errors. By default, it's the view :"
"func:`django.views.defaults.page_not_found`, which either produces a \"Not "
"Found\" message or loads and renders the template ``404.html`` if you "
"created it in your root template directory."
msgstr ""
"ビュー内で :exc:`~django.http.Http404` を発生させると、 Django は 404 エラー"
"の処理に特化した特別なビューを読み込みます。デフォルトでは :func:`django."
"views.defaults.page_not_found` というビューで、\"Not Found\" メッセージを表示"
"するか、ルートテンプレートディレクトリにテンプレート ``404.html`` を作成した"
"場合、それを読み込んでレンダリングします。"

msgid ""
"The default 404 view will pass two variables to the template: "
"``request_path``, which is the URL that resulted in the error, and "
"``exception``, which is a useful representation of the exception that "
"triggered the view (e.g. containing any message passed to a specific "
"``Http404`` instance)."
msgstr ""
"デフォルトの404ビューはテンプレートに2つの変数を渡します。``request_path`` は"
"エラーの原因となった URL で、``exception`` はビューのトリガーとなった例外の有"
"用な表現です (たとえば、特定の ``Http404`` インスタンスに渡されたメッセージな"
"ど)。"

msgid "Three things to note about 404 views:"
msgstr "404ビューには以下の3つの注意点があります:"

msgid ""
"The 404 view is also called if Django doesn't find a match after checking "
"every regular expression in the URLconf."
msgstr ""
"404 ビューは、 Django が URLconf 内の正規表現を全てチェックしてもマッチしない"
"場合にも呼び出されます。"

msgid ""
"The 404 view is passed a :class:`~django.template.RequestContext` and will "
"have access to variables supplied by your template context processors (e.g. "
"``MEDIA_URL``)."
msgstr ""
"404 ビューには :class:`~django.template.RequestContext` が渡され、テンプレー"
"トコンテキストプロセッサが提供する変数 (たとえば ``MEDIA_URL``) にアクセスで"
"きます。"

msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"404 view will never be used, and your URLconf will be displayed instead, "
"with some debug information."
msgstr ""
"もし :setting:`DEBUG` が ``True`` に設定されている場合(設定モジュール内)、404"
"ビューは使用されず、代わりに URLconf がデバッグ情報と共に表示されます。"

msgid "The 500 (server error) view"
msgstr "500（サーバーエラー）ビュー"

msgid ""
"Similarly, Django executes special-case behavior in the case of runtime "
"errors in view code. If a view results in an exception, Django will, by "
"default, call the view ``django.views.defaults.server_error``, which either "
"produces a \"Server Error\" message or loads and renders the template ``500."
"html`` if you created it in your root template directory."
msgstr ""
"同様に、Django はビューコードで実行時エラーが発生した場合、特別なケースの動作"
"を実行します。ビューで例外が発生した場合、 Django はデフォルトで ``django."
"views.defaults.server_error`` というビューを呼び出します。このビューは "
"\"Server Error\" というメッセージを表示するか、ルートテンプレートディレクトリ"
"にテンプレート ``500.html`` を作成した場合、それを読み込んでレンダリングしま"
"す。"

msgid ""
"The default 500 view passes no variables to the ``500.html`` template and is "
"rendered with an empty ``Context`` to lessen the chance of additional errors."
msgstr ""
"デフォルトの500ビューは ``500.html`` テンプレートに変数を渡さず、空の "
"``Context`` でレンダリングされ、追加エラーの可能性を減らします。"

msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"500 view will never be used, and the traceback will be displayed instead, "
"with some debug information."
msgstr ""
"もし :setting:`DEBUG` が ``True`` に設定されている場合 (設定モジュールで)、"
"500 ビューは使用されず、代わりにトレースバックがデバッグ情報と共に表示されま"
"す。"

msgid "The 403 (HTTP Forbidden) view"
msgstr "403 (HTTP Forbidden) ビュー"

msgid ""
"In the same vein as the 404 and 500 views, Django has a view to handle 403 "
"Forbidden errors. If a view results in a 403 exception then Django will, by "
"default, call the view ``django.views.defaults.permission_denied``."
msgstr ""
"404 や 500 のビューと同じように、 Django には 403 Forbidden エラーを扱う"
"ビューがあります。ビューで 403 例外が発生した場合、 Django はデフォルトで "
"``django.views.defaults.permission_denied`` というビューを呼び出します。"

msgid ""
"This view loads and renders the template ``403.html`` in your root template "
"directory, or if this file does not exist, instead serves the text \"403 "
"Forbidden\", as per :rfc:`9110#section-15.5.4` (the HTTP 1.1 Specification). "
"The template context contains ``exception``, which is the string "
"representation of the exception that triggered the view."
msgstr ""
"このビューはルートテンプレートディレクトリにあるテンプレート ``403.html`` を"
"読み込んでレンダリングします。このファイルが存在しない場合は、代わりに :rfc:"
"`9110#section-15.5.4` (HTTP 1.1 仕様) に従って \"403 Forbidden\" というテキス"
"トを配信します。テンプレートコンテキストは ``exception`` を含んでおり、これは"
"ビューのトリガーとなった例外の文字列表現です。"

msgid ""
"``django.views.defaults.permission_denied`` is triggered by a :exc:`~django."
"core.exceptions.PermissionDenied` exception. To deny access in a view you "
"can use code like this::"
msgstr ""
"``django.views.defaults.permission_denied`` は :exc:`~django.core.exceptions."
"PermissionDenied` 例外がトリガーとなります。ビューでアクセスを拒否するには、"
"次のようなコードを使用します:"

msgid "The 400 (bad request) view"
msgstr "400（bad request）ビュー"

msgid ""
"When a :exc:`~django.core.exceptions.SuspiciousOperation` is raised in "
"Django, it may be handled by a component of Django (for example resetting "
"the session data). If not specifically handled, Django will consider the "
"current request a 'bad request' instead of a server error."
msgstr ""
"Django で :exc:`~django.core.exceptions.SuspiciousOperation` が発生すると、 "
"Django のコンポーネントで処理されるかもしれません (たとえばセッションデータの"
"リセットなど)。特に処理されない場合、 Django は現在のリクエストをサーバエラー"
"ではなく「不正なリクエスト」と見なします。"

msgid ""
"``django.views.defaults.bad_request``, is otherwise very similar to the "
"``server_error`` view, but returns with the status code 400 indicating that "
"the error condition was the result of a client operation. By default, "
"nothing related to the exception that triggered the view is passed to the "
"template context, as the exception message might contain sensitive "
"information like filesystem paths."
msgstr ""
"``django.views.defaults.bad_request`` は ``server_error`` ビューとよく似てい"
"ますが、エラー状態がクライアント操作の結果であることを示すステータスコード "
"400 を返します。デフォルトでは、例外メッセージにファイルシステムのパスのよう"
"な機密情報が含まれている可能性があるため、ビューのトリガーとなった例外に関係"
"するものはテンプレートコンテキストに渡されません。"

msgid ""
"``bad_request`` views are also only used when :setting:`DEBUG` is ``False``."
msgstr ""
"また、``bad_request`` ビューは :setting:`DEBUG` が ``False`` のときだけ使用さ"
"れます。"
